1
21:30:04,960 --> 21:30:09,192
send messages to an object called a text editing controller and say hey my text

2
21:30:09,192 --> 21:30:13,832
has changed that is our proxy to a text field in

3
21:30:13,832 --> 21:30:19,600
flutter okay so that's setting up that and what we need to also do is to allow

4
21:30:19,600 --> 21:30:23,760
the user to enter multiple lines of text in this text field because remember text

5
21:30:23,760 --> 21:30:27,600
fields usually in flutter are like one line so for instance you're writing an

6
21:30:27,600 --> 21:30:32,080
email address or you're writing your password so they're not like multi-line

7
21:30:32,080 --> 21:30:37,360
text fields by default unless you make them multi-line so that's what we're

8
21:30:37,360 --> 21:30:40,640
going to do now so we're going to say our keyboard type

9
21:30:40,640 --> 21:30:45,680
you can see it's of type text input type so then say text input type

10
21:30:45,680 --> 21:30:50,232
alt-line all right so that's going to allow you to have a little enter key at

11
21:30:50,232 --> 21:30:54,400
the bottom uh right hand side of your keyboard if you're left to right on like

12
21:30:54,400 --> 21:30:57,360
english language or if you're right to left language like arabic then that

13
21:30:57,360 --> 21:31:01,600
little enter key is going to be at the bottom left so then in here

14
21:31:01,600 --> 21:31:05,760
you will get that keyboard as you'll soon see actually and

15
21:31:05,760 --> 21:31:10,080
you'll get that key on your keyboard to go to the next line

16
21:31:10,080 --> 21:31:13,600
now in flutter as it is also in swift when

17
21:31:13,600 --> 21:31:17,512
you're doing ios development there is a weird habit of

18
21:31:17,512 --> 21:31:23,040
creating text fields that are multi-line with strange parameters and

19
21:31:23,040 --> 21:31:26,232
unfortunately it has leaked to flutter as well in that

20
21:31:26,232 --> 21:31:29,360
um you you don't have like a parameter in

21
21:31:29,360 --> 21:31:34,960
text field that says multiline so if you want to create a text field that

22
21:31:34,960 --> 21:31:40,320
is multi-line and it kind of like expands as you enter more text into it

23
21:31:40,320 --> 21:31:45,832
then unfortunately you have to call and you have to assign null to the max

24
21:31:45,832 --> 21:31:49,120
line's parameter there are some discussions on github

25
21:31:49,120 --> 21:31:53,040
about why that's the case but there's a good reason behind it okay

26
21:31:53,040 --> 21:31:56,800
um and what we're then gonna do is if we if

27
21:31:56,800 --> 21:32:02,400
we do like this and i press command s and we go here

28
21:32:02,400 --> 21:32:06,872
and we press the plus button in here okay you'll see there's a text field in

29
21:32:06,872 --> 21:32:11,920
here that's great okay however it's not so obvious the user

30
21:32:11,920 --> 21:32:15,760
what what am i supposed to do what is this line here am i gonna tap somewhere

31
21:32:15,760 --> 21:32:20,160
here it's not so obvious so what we're gonna do is to add something called a

32
21:32:20,160 --> 21:32:24,552
hint to this text field if you're a designer or a developer from before you

33
21:32:24,552 --> 21:32:28,080
probably already know what a hint is but if you don't know what a hint is a hint

34
21:32:28,080 --> 21:32:31,920
is little um as this name indicates a little text

35
21:32:31,920 --> 21:32:36,960
that usually gets displayed to the user telling telling her or him uh

36
21:32:36,960 --> 21:32:42,400
what is expected to be entered in this uh field so

37
21:32:42,400 --> 21:32:46,640
let's go and add the hint and that is through a property on our text field

38
21:32:46,640 --> 21:32:49,600
called decoration and that's uh

39
21:32:49,600 --> 21:32:53,760
an input decoration inside our input decoration we're going

40
21:32:53,760 --> 21:32:57,920
to add a parameter called hint text and here we're just going to say start

41
21:32:57,920 --> 21:33:01,360
typing your notes like this all right

42
21:33:01,360 --> 21:33:03,832
so command s and

43
21:33:03,832 --> 21:33:08,552
a comma here to prefi the code a little bit

44
21:33:08,552 --> 21:33:14,080
but there we go now we have hints in here and as i bring up as i tap on this

45
21:33:14,080 --> 21:33:17,832
text field you can see i can start typing in here and press this little

46
21:33:17,832 --> 21:33:21,360
button that i was talking about for multi-line and as i start typing more

47
21:33:21,360 --> 21:33:26,080
and more then the text field is gonna increase in size

48
21:33:26,080 --> 21:33:28,872
all right so

49
21:33:28,872 --> 21:33:33,440
that is that is really what we have to do in this chapter i hope i didn't scare

50
21:33:33,440 --> 21:33:35,920
you by saying in the beginning of this chapter that this chapter is gonna be

51
21:33:35,920 --> 21:33:40,080
kind of code heavy but i mean there were there was quite a lot

52
21:33:40,080 --> 21:33:43,440
of code but hopefully you could stick with me throughout the chapter and get

53
21:33:43,440 --> 21:33:48,480
it to this point as is the tradition in all the other

54
21:33:48,480 --> 21:33:51,600
chapters we worked on we're not gonna

55
21:33:51,600 --> 21:33:56,232
lose we don't want to lose the work that we're doing on our code so we need to

56
21:33:56,232 --> 21:34:01,120
make sure that we commit and also we tag our code

57
21:34:01,120 --> 21:34:06,232
okay so let me change the screen layout a little bit

58
21:34:06,232 --> 21:34:11,280
and we've tagged the previous chapter as step 13 so as the caption indicates here

59
21:34:11,280 --> 21:34:15,512
we're going to tag and commit this code as step 14 so

60
21:34:15,512 --> 21:34:20,720
i'm going to say git status two files change and then i'm gonna add

61
21:34:20,720 --> 21:34:24,640
them all to the staging environment and then i'm gonna commit them

62
21:34:24,640 --> 21:34:29,920
as step 14 and push my changes to github

63
21:34:29,920 --> 21:34:37,120
and then i'm gonna tag our code as step 14 as well and then push our tags

64
21:34:37,120 --> 21:34:39,512
okay um so

65
21:34:39,512 --> 21:34:44,720
that was that for tagging um now again as is tradition for other chapters as

66
21:34:44,720 --> 21:34:47,600
well at the end of every chapter we're going to talk about what we are going to

67
21:34:47,600 --> 21:34:54,800
discuss in the chapter that follows so we are now actually creating notes it

68
21:34:54,800 --> 21:34:57,920
may not be immediately visible to you but if you if you for instance have

69
21:34:57,920 --> 21:35:02,160
created some notes then this screen should be able to render those notes

70
21:35:02,160 --> 21:35:06,552
because the new note view is doing everything necessary to not only create

71
21:35:06,552 --> 21:35:10,160
the note and let's see where it is here create the new note

72
21:35:10,160 --> 21:35:16,160
but it also is updating that note for us so here you can see update note so those

73
21:35:16,160 --> 21:35:19,832
notes are in the database it's just that the main ui of the application which is

74
21:35:19,832 --> 21:35:23,440
this node c the dark is not able to render them all it's doing is just

75
21:35:23,440 --> 21:35:28,400
saying waiting for all nodes so it's not so exciting but just know that

76
21:35:28,400 --> 21:35:32,160
you are getting there and we are getting there it's just there are a few steps

77
21:35:32,160 --> 21:35:37,920
left to handle that and uh that's exactly what we're gonna do in the next

78
21:35:37,920 --> 21:35:42,800
chapter so get some tea and coffee if you want to and i'll see you there

79
21:35:42,800 --> 21:35:47,280
hello and welcome to chapter 32 of the slotzer course in the previous chapters

80
21:35:47,280 --> 21:35:51,280
we've been talking quite a lot about our node service and creating stream

81
21:35:51,280 --> 21:35:55,120
controller in order to populate the stream control with the nodes and we

82
21:35:55,120 --> 21:35:59,512
also have a buffer locally called underscore nodes in our node service and

83
21:35:59,512 --> 21:36:04,232
so we're kind of like working with our notes in a really good and organic way

84
21:36:04,232 --> 21:36:09,040
and we also work with the new node view dark file where we created a stateful

85
21:36:09,040 --> 21:36:12,720
widget that had a text editing controller and i also allowed the user

86
21:36:12,720 --> 21:36:16,720
to enter some text we manage even to save that text as a

87
21:36:16,720 --> 21:36:22,160
new note into the database so we've done quite a lot however what wasn't so much

88
21:36:22,160 --> 21:36:26,080
fun was that it was a little bit of an anti-climax in that we we are able to

89
21:36:26,080 --> 21:36:29,192
create notes but we're not able to actually display them so we're

90
21:36:29,192 --> 21:36:33,920
populating the database with new notes but no one is able to show them on the

91
21:36:33,920 --> 21:36:38,552
screen and that's what we're going to take care of in this chapter

92
21:36:38,552 --> 21:36:44,080
so let me bring the code that we've written so far to the screen here

93
21:36:44,080 --> 21:36:48,232
and um i'm going to clear this get status just

94
21:36:48,232 --> 21:36:50,872
to make sure everything's working fine yeah

95
21:36:50,872 --> 21:36:55,360
the visual studio code i'm going to bring scrcpy to the right hand side

96
21:36:55,360 --> 21:36:59,360
and we have to now talk about a little

97
21:36:59,360 --> 21:37:03,680
problem that we have with our nodes service you see if you look at the code

98
21:37:03,680 --> 21:37:06,480
here i'm going to increase the size so you see better

99
21:37:06,480 --> 21:37:10,480
so if you have a look at our note service

100
21:37:10,480 --> 21:37:15,280
and we have this uh shared instance that we've created here okay so whenever

101
21:37:15,280 --> 21:37:18,800
somebody says note service parenthesis then they're actually not creating any

102
21:37:18,800 --> 21:37:22,232
instance they're not creating a new instance of node service but they're

103
21:37:22,232 --> 21:37:27,120
going through this factory initializer which in turn calls this shared

104
21:37:27,120 --> 21:37:33,760
static final which in turn calls this internal or private constructor that

105
21:37:33,760 --> 21:37:37,440
means we've created a singleton so creating a new node service over and

106
21:37:37,440 --> 21:37:41,440
over again is not gonna um create a new instance

107
21:37:41,440 --> 21:37:45,120
he's just gonna get the same shared instance and then whoever then starts

108
21:37:45,120 --> 21:37:48,400
talk reading or you see all notes in here

109
21:37:48,400 --> 21:37:52,400
properly all notes is delegating its responsibility to the node stream

110
21:37:52,400 --> 21:37:57,360
controller or stream however our node stream controller is a broadcast stream

111
21:37:57,360 --> 21:38:02,400
controller and what that means is that a stream controller that

112
21:38:02,400 --> 21:38:07,920
doesn't really hold on to its current value for new listeners so let's say you

113
21:38:07,920 --> 21:38:12,080
have a stream controller that is sitting here and you start listening to events

114
21:38:12,080 --> 21:38:16,320
uh to that stream controller from one place and then an event comes into the

115
21:38:16,320 --> 21:38:20,720
stream controller and stream controller says oh um i have one listener right

116
21:38:20,720 --> 21:38:24,872
here i'm gonna delegate this information to that's uh that listener

117
21:38:24,872 --> 21:38:29,920
all looks fine however however after the propagation of this event into the

118
21:38:29,920 --> 21:38:34,232
stream controller the stream controller is not going to hold on to this value

119
21:38:34,232 --> 21:38:37,920
when a new listener comes in from another side so

120
21:38:37,920 --> 21:38:41,440
any new listener to your broadcast stream controller is not going to be

121
21:38:41,440 --> 21:38:45,280
informed of the current information which is populated in that stream

122
21:38:45,280 --> 21:38:49,920
controller so if you're familiar with for instance uh reactive programming

123
21:38:49,920 --> 21:38:54,080
with rx you may know this as a published subject and the same is true if you're

124
21:38:54,080 --> 21:38:58,640
for instance versus using rx java or rx scotland

125
21:38:58,640 --> 21:39:04,232
rx swift even if you're doing like um combined programming with a swift ui you

126
21:39:04,232 --> 21:39:07,360
will know these as like published subjects so

127
21:39:07,360 --> 21:39:11,832
a stream controller that is broadcast is not gonna hold on in to its current uh

128
21:39:11,832 --> 21:39:16,960
value for new listeners we need to we need to remedy that and the way to do

129
21:39:16,960 --> 21:39:21,280
that is just to move the initialization of node stream

130
21:39:21,280 --> 21:39:26,480
controller to our initializer right here as we'll soon see

131
21:39:26,480 --> 21:39:29,832
so i'm going to do a little bit of a shuffling of

132
21:39:29,832 --> 21:39:34,320
screen sizes in here all right so as the caption indicates

133
21:39:34,320 --> 21:39:38,640
what we need to do and we need to make this notes stream controller

134
21:39:38,640 --> 21:39:42,552
which is let's see where it is it's right here we need to make it a late

135
21:39:42,552 --> 21:39:47,440
final so grab the data type from where it is and just say late final put the

136
21:39:47,440 --> 21:39:52,480
data type in here and then remove the equal all right so now it is our

137
21:39:52,480 --> 21:39:55,920
responsibility to ensure that this node stream controller is actually

138
21:39:55,920 --> 21:39:59,920
initialized upon constructor upon constructing a new instance of our node

139
21:39:59,920 --> 21:40:04,552
service okay so let's go ahead and do that inside

140
21:40:04,552 --> 21:40:08,720
shared instance which is right here so what we need to do now is to say node

141
21:40:08,720 --> 21:40:13,360
stream controller is a stream controller list of

142
21:40:13,360 --> 21:40:17,192
database nodes and then we do the exact same thing as we did before using

143
21:40:17,192 --> 21:40:21,440
broadcast however what we're going to do in here is to

144
21:40:21,440 --> 21:40:26,800
use a property inside the broadcast stream listener called on listen so this

145
21:40:26,800 --> 21:40:30,400
unless and uh callback is going to get called whenever

146
21:40:30,400 --> 21:40:35,600
a new listener subscribes to our note stream controller

147
21:40:35,600 --> 21:40:41,600
note stream controllers stream so upon this happening we need to ensure

148
21:40:41,600 --> 21:40:46,960
that our node stream controllers stream is populated with all the values that

149
21:40:46,960 --> 21:40:52,872
we've currently read from the database so let's go ahead and do that

150
21:40:52,872 --> 21:40:55,680
so we're just going to go ahead and say notes

151
21:40:55,680 --> 21:41:00,400
stream controller sync add notes just like that all right so

152
21:41:00,400 --> 21:41:04,872
this ensures anyone who starts listening to our

153
21:41:04,872 --> 21:41:08,640
to this property all notes which in turn uses the no stream controller if it's a

154
21:41:08,640 --> 21:41:13,600
new subscriber then it's gonna the unlisted um callback is gonna get called

155
21:41:13,600 --> 21:41:17,920
and then we're gonna populate our stream controllers a stream with those notes

156
21:41:17,920 --> 21:41:22,080
that we've already read from the database

157
21:41:22,080 --> 21:41:25,120
okay let's now move to the next note before

158
21:41:25,120 --> 21:41:29,512
we can actually get on with the rest of this chapter as the caption indicates as

159
21:41:29,512 --> 21:41:32,720
we shouldn't close the db upon hot reload after opening db we shouldn't

160
21:41:32,720 --> 21:41:36,232
close it otherwise upon every reload it gets closed

161
21:41:36,232 --> 21:41:41,920
so the problem that i'm referring to is in inside our notes view and it is right

162
21:41:41,920 --> 21:41:46,480
here inside our dispose so upon doing hot reload what we're doing is that

163
21:41:46,480 --> 21:41:50,480
we're saying node service close which in turn is going to actually close the

164
21:41:50,480 --> 21:41:56,800
database but remember node service is and is was and is supposed to be a

165
21:41:56,800 --> 21:42:02,232
singleton where upon creation and upon doing an open one time it should keep

166
21:42:02,232 --> 21:42:06,080
its state so we shouldn't play with closing of the

167
21:42:06,080 --> 21:42:10,552
database inside any of our widgets because that is going to interfere with

168
21:42:10,552 --> 21:42:16,400
the internals and how the node service is actually supposed to work so what

169
21:42:16,400 --> 21:42:19,832
we're going to do as you can see since this pose function in here the

170
21:42:19,832 --> 21:42:23,192
overwriting overwriting of the dispose function the only thing it was actually

171
21:42:23,192 --> 21:42:27,120
doing was to close the node services database we're just going to remove this

172
21:42:27,120 --> 21:42:32,232
function for now because we have nothing else to dispose of at the moment in our

173
21:42:32,232 --> 21:42:36,400
notes view

174
21:42:36,400 --> 21:42:40,960
all right um so what we need to do is actually get to

175
21:42:40,960 --> 21:42:45,832
the meat of this section which i'm so excited about for this chapter

176
21:42:45,832 --> 21:42:50,872
and that is to start working with the list view

177
21:42:50,872 --> 21:42:57,680
and what we need to do is to make sure that we have a list that we can

178
21:42:57,680 --> 21:43:03,600
we can grab the data that comes from our stream here stream builder you can see

179
21:43:03,600 --> 21:43:08,720
it reads all the notes and right now we're just saying waiting for all nodes

180
21:43:08,720 --> 21:43:12,320
so we're going to change that and instead we're actually going to start

181
21:43:12,320 --> 21:43:18,232
using something called a list view now list view in flutter is an amazing

182
21:43:18,232 --> 21:43:21,680
widget which i can actually show you here so if you just type list view and

183
21:43:21,680 --> 21:43:26,160
then command and click control click on linux and windows you

184
21:43:26,160 --> 21:43:29,440
can see it's a box scroll view extends box scroll view which in turn is a

185
21:43:29,440 --> 21:43:33,280
scroll view which in turn is a stateless widget so

186
21:43:33,280 --> 21:43:38,080
a list view has uh some function some really great functionality uh that it

187
21:43:38,080 --> 21:43:43,120
exposes using is builder we can see here it has a builder function and i believe

188
21:43:43,120 --> 21:43:47,512
it's a static function here or it's actually constructor great okay

189
21:43:47,512 --> 21:43:53,280
so it has a builder and inside your builder you will be able to pass two

190
21:43:53,280 --> 21:43:57,192
important parameters to this list view so we're gonna say

191
21:43:57,192 --> 21:44:01,280
we return a list view instead of that little text that we had which right now

192
21:44:01,280 --> 21:44:05,040
says waiting for all notes in here we're gonna say we have two

193
21:44:05,040 --> 21:44:10,640
parameters first we are gonna tell it how many items it has to render on the

194
21:44:10,640 --> 21:44:14,960
screen so we're going to say item count all right

195
21:44:14,960 --> 21:44:20,872
and for the item count we need to actually listen for this snapshots data

196
21:44:20,872 --> 21:44:25,832
so remember the stream builder at the moment is listening for all notes

197
21:44:25,832 --> 21:44:29,280
and so that means the data that comes from snapshot

198
21:44:29,280 --> 21:44:34,080
is actually going to be your um

199
21:44:34,080 --> 21:44:39,040
is going to be the all the notes that we've read from the database so what we

200
21:44:39,040 --> 21:44:44,480
need to do now is just to ensure that upon waiting um in here so

201
21:44:44,480 --> 21:44:49,440
i'm gonna actually remove this and i'm gonna say if

202
21:44:49,440 --> 21:44:54,720
snapshot has data so that's a property on your snapshot that exposes whether

203
21:44:54,720 --> 21:44:58,872
the snapshot has actually pro can actually provide you with some data and

204
21:44:58,872 --> 21:45:03,600
i'm going to put an else in here and upon else we're also going to say return

205
21:45:03,600 --> 21:45:08,720
con circular progress indicator okay and if the

206
21:45:08,720 --> 21:45:13,832
snapshot has any data then let's grab that data so i'm just going to say final

207
21:45:13,832 --> 21:45:21,680
all notes is snapshot that's data as a list of database notes

208
21:45:21,680 --> 21:45:24,800
all right and what we could do we could just say

209
21:45:24,800 --> 21:45:28,872
return const text

210
21:45:28,872 --> 21:45:33,600
got all the notes something like that and we could actually print these notes

211
21:45:33,600 --> 21:45:37,512
to the screen if you want to it's we could say print notes

212
21:45:37,512 --> 21:45:42,232
and i'm going to bring the debug console up

213
21:45:42,232 --> 21:45:48,232
then i'm going to clear the logs and change the screen layout

214
21:45:48,232 --> 21:45:52,872
so you see it better and i'm just gonna do command s

215
21:45:52,872 --> 21:45:56,640
alright and i can see at the moment it's just saying your notes so meaning that

216
21:45:56,640 --> 21:46:01,832
we don't actually have any notes so if i go in here then

217
21:46:01,832 --> 21:46:07,040
you can see all of a sudden we got a new note populated into the database just

218
21:46:07,040 --> 21:46:10,480
because i went here and i said i'm printing some notes so

219
21:46:10,480 --> 21:46:13,760
so i'm gonna say hello okay

220
21:46:13,760 --> 21:46:19,832
see as i'm changing this our snapshot is actually getting updated with new

221
21:46:19,832 --> 21:46:24,080
information and it's constantly printing and it's the note id is the same and you

222
21:46:24,080 --> 21:46:29,680
can see his text is actually changing and if i go out then you can see well

223
21:46:29,680 --> 21:46:33,600
it's just at the moment says got all the notes meaning that you have some notes

224
21:46:33,600 --> 21:46:38,080
so if you're seeing a circular progress indicator instead of like a text at the

225
21:46:38,080 --> 21:46:41,512
moment that we're saying all the notes it's probably because you were like me

226
21:46:41,512 --> 21:46:46,000
and you didn't have any notes in the database all right

227
21:46:46,000 --> 21:46:51,440
okay now we have all the notes so how do we then render these so what we need to

228
21:46:51,440 --> 21:46:55,360
do in here we're going to say return list view i'm going to change the screen

229
21:46:55,360 --> 21:46:59,280
layout let's say list view builder

230
21:46:59,280 --> 21:47:04,000
and you remember i mentioned before we need to populate this listview with two

231
21:47:04,000 --> 21:47:09,920
important parameters one is the item count and at the moment the item count

232
21:47:09,920 --> 21:47:15,360
is all notes count links and then we have our item builder get

233
21:47:15,360 --> 21:47:19,120
some help from your editor to complete this you get a a

234
21:47:19,120 --> 21:47:23,360
build context as the first parameter of type context and then you get an index

235
21:47:23,360 --> 21:47:29,512
okay now inside your item builder your job is

236
21:47:29,512 --> 21:47:32,232
if you look at the at the

237
21:47:32,232 --> 21:47:35,600
signature of item builder it says it's a function

238
21:47:35,600 --> 21:47:39,680
that takes two parameters it build context and an integer for the index and

239
21:47:39,680 --> 21:47:44,320
it has to return a widget you see here so you could return anything in here you

240
21:47:44,320 --> 21:47:47,600
could just say return text item something like that

241
21:47:47,600 --> 21:47:51,600
okay it's not gonna look so pretty though

242
21:47:51,600 --> 21:47:56,800
and actually i can see maybe did we lose our item maybe in here

243
21:47:56,800 --> 21:47:59,832
it is possible that there is something wrong with our note 2 that it's like

244
21:47:59,832 --> 21:48:04,160
deleting the notes it could be so i'm just gonna do a

245
21:48:04,160 --> 21:48:10,720
hot reload here and my scr cpy may actually die no but uh it's it worked

246
21:48:10,720 --> 21:48:13,920
without a problem so we have an item so if that's if that's what you're also

247
21:48:13,920 --> 21:48:18,000
seeing maybe you could do a hot reload because we've changed our nodes service

248
21:48:18,000 --> 21:48:23,120
so it could be the problem that our uh we just needed to do a hot reload for

249
21:48:23,120 --> 21:48:27,680
this unlisten to actually get called all right so that's what we're seeing at the

250
21:48:27,680 --> 21:48:31,440
moment so i can see item in here and i'm gonna press the plus button so and i'm

251
21:48:31,440 --> 21:48:35,360
gonna say hello world in here and i'm gonna go out and all of a sudden

252
21:48:35,360 --> 21:48:39,680
you see two items appearing in here okay but this is not so pretty because

253
21:48:39,680 --> 21:48:45,920
displaying text on the screen is not so nice and you won't have uh

254
21:48:45,920 --> 21:48:50,960
you won't be able to easily add interactions to these items because what

255
21:48:50,960 --> 21:48:54,720
we want ideally is for these items to appear on

256
21:48:54,720 --> 21:48:59,600
the list and then they have like their own sizing so they have a good height so

257
21:48:59,600 --> 21:49:03,192
that they are separated a little bit from each other and as you'll see in the

258
21:49:03,192 --> 21:49:08,080
next chapter we're going to work with um deleting these items so we want the

259
21:49:08,080 --> 21:49:12,480
ability for the user to see some sort of an icon next to each item using which he

260
21:49:12,480 --> 21:49:17,760
or she can click on that icon and delete the item so text in itself is not going

261
21:49:17,760 --> 21:49:23,120
to be able to provide us with all that functionality that we need so

262
21:49:23,120 --> 21:49:27,192
what we need is a little bit more sophisticated widget and it is called

263
21:49:27,192 --> 21:49:32,232
list tile so let's do that let's just say we return at least tile

264
21:49:32,232 --> 21:49:38,960
okay and our list tile is gonna have a um a title so that's the only thing at

265
21:49:38,960 --> 21:49:42,400
the moment we're gonna provide it with and you can see it's a widget

266
21:49:42,400 --> 21:49:45,760
and for the widget of this list and for the title of this list style we're going

267
21:49:45,760 --> 21:49:49,440
to use text um right there okay and i'm going to put

268
21:49:49,440 --> 21:49:54,160
some commas in there so for the text what we're going to say

269
21:49:54,160 --> 21:49:57,440
then is the text in itself is

270
21:49:57,440 --> 21:50:03,040
we want to grab the text that is entered in that note so you see we have all the

271
21:50:03,040 --> 21:50:08,160
notes but we don't have the current note so the current note that we're actually

272
21:50:08,160 --> 21:50:11,920
reading its index is going to be provided to us using this item builders

273
21:50:11,920 --> 21:50:19,600
index so let's go and say final um notes is all nodes at that index so that's the

274
21:50:19,600 --> 21:50:24,552
current node that we're returning a list tile for okay

275
21:50:24,552 --> 21:50:30,552
its text is gonna be the note text as you can see here

276
21:50:30,552 --> 21:50:34,720
uh i can see i've written tile here but it should be title

277
21:50:34,720 --> 21:50:39,192
and in here we have to have a semicolon all right so if i do command s in here

278
21:50:39,192 --> 21:50:45,360
you can see now we have very i mean a lot nicer and prettier versions

279
21:50:45,360 --> 21:50:48,552
of those texts and you can see that they're right here it says hello and

280
21:50:48,552 --> 21:50:51,920
hello world and those are the texts that we entered you can actually test that

281
21:50:51,920 --> 21:50:57,920
and say my new my new notes is entered here

282
21:50:57,920 --> 21:51:01,832
and by pressing the back button you'll see that your note is appearing on the

283
21:51:01,832 --> 21:51:06,800
screen all right but what we want to do here is if you

284
21:51:06,800 --> 21:51:14,160
enter a lot of text in your in your notes so if i go and say here

285
21:51:14,160 --> 21:51:19,512
is a very long text that i've entered and i don't

286
21:51:19,512 --> 21:51:26,720
want it all to be displayed in one tile and then nodes view so we have now a

287
21:51:26,720 --> 21:51:31,832
node that is quite large but this is in it in itself is going to

288
21:51:31,832 --> 21:51:36,400
break a little bit our layout you see in our notes list we don't want to

289
21:51:36,400 --> 21:51:39,600
render the entire note we somehow want to cap

290
21:51:39,600 --> 21:51:43,760
the amount of information that we're displaying to a size that is reasonable

291
21:51:43,760 --> 21:51:47,512
and since our notes don't have titles we

292
21:51:47,512 --> 21:51:53,760
could infer the content of the note by simply rendering just one line of text

293
21:51:53,760 --> 21:51:57,440
and the user should be able to then say oh that's what i've written kind of in

294
21:51:57,440 --> 21:52:01,680
my notes and as you'll see in the latest later chapters we are going to allow the

295
21:52:01,680 --> 21:52:06,080
user to also click on or tap on these existing notes in order to go and see

296
21:52:06,080 --> 21:52:09,360
more information about them so it's not the end of the world if you

297
21:52:09,360 --> 21:52:13,600
don't display like the entire note to the user and as you'll see when users

298
21:52:13,600 --> 21:52:17,440
start to enter more and more information in their notes it's actually not desired

299
21:52:17,440 --> 21:52:21,680
uh desirable to render the entire note because imagine a

300
21:52:21,680 --> 21:52:25,680
note is two pages long or you're gonna have like two very small notes and then

301
21:52:25,680 --> 21:52:31,600
two pages of long of one note it's it's not feasible so actually it is feasible

302
21:52:31,600 --> 21:52:36,960
but it's not a good user interface so i'm going to put a comma here

303
21:52:36,960 --> 21:52:42,000
and i'm just going to use a property in our text called max lines and i'm just

304
21:52:42,000 --> 21:52:44,832
going to say one

305
21:52:44,832 --> 21:52:49,680
and so as you'll see here then what we're going to do is to make

306
21:52:49,680 --> 21:52:54,232
sure that the user kind of understands that there is more information in here

307
21:52:54,232 --> 21:52:59,512
than what we are rendering so we want to put like ellipses at the end of the text

308
21:52:59,512 --> 21:53:03,920
that don't have enough space to render themselves fully so

309
21:53:03,920 --> 21:53:07,760
we're going to say soft wrap and as you can see the information is

310
21:53:07,760 --> 21:53:12,872
whether the text should break at soft line breaks so make sure that it's true

311
21:53:12,872 --> 21:53:17,680
and then we're going to say overflow and we're going to say text overflow

312
21:53:17,680 --> 21:53:20,640
ellipses like that

313
21:53:20,640 --> 21:53:23,832
and now you can see it says here's a very long text blah

314
21:53:23,832 --> 21:53:27,760
blah blah and then dot dot so this is a good indication then to all users to

315
21:53:27,760 --> 21:53:32,400
know that well there's more information to be rendered but there's not enough

316
21:53:32,400 --> 21:53:37,680
space for that information to be rendered on the screen right now

317
21:53:37,680 --> 21:53:42,160
all right so i think i mean we've looked at how that all works we've actually

318
21:53:42,160 --> 21:53:45,680
demoed it so we don't have to do a separate demo for this we've been

319
21:53:45,680 --> 21:53:49,920
looking at it as we've been developing and the application and that's one of

320
21:53:49,920 --> 21:53:52,552
the beauties of flutter so

321
21:53:52,552 --> 21:53:57,120
we don't have to do anything about this demo right now

322
21:53:57,120 --> 21:54:00,552
and you will probably be surprised that this

323
21:54:00,552 --> 21:54:04,480
is all we have to do right now for the notes view there's not much more to work

324
21:54:04,480 --> 21:54:06,960
on we've written

325
21:54:06,960 --> 21:54:10,640
we were able to at the moment create new notes and we're able to display those

326
21:54:10,640 --> 21:54:15,832
notes and one at a time inside this list view builder so you'll learn how to use

327
21:54:15,832 --> 21:54:21,280
the list view builder as well and what we can do as is a tradition

328
21:54:21,280 --> 21:54:25,120
we're gonna go and commit and tag our work so

329
21:54:25,120 --> 21:54:27,680
i'm gonna do some reshuffling on the screen

330
21:54:27,680 --> 21:54:30,400
so you see what i'm doing a little bit better

331
21:54:30,400 --> 21:54:34,800
and i'm gonna go to my built-in terminal here and we're

332
21:54:34,800 --> 21:54:39,680
gonna have a look at the status can see there are two files changed so

333
21:54:39,680 --> 21:54:42,800
let's do git add all

334
21:54:42,800 --> 21:54:48,232
and let's commit this as step 15 and before committing it you can see your

335
21:54:48,232 --> 21:54:51,600
git lock from before the last commit was step 14

336
21:54:51,600 --> 21:54:57,440
so and you can also look at all the tags and we have up to tag 14.

337
21:54:57,440 --> 21:55:02,872
so let's go ahead and say git commit and we do step 15.

338
21:55:02,872 --> 21:55:06,640
now i'm going to push that commit to github or if you're using bitbucket or

339
21:55:06,640 --> 21:55:11,760
any other provider that's fine too and i'm going to tag this as step

340
21:55:11,760 --> 21:55:17,512
15 right and then we're going to push our tags

341
21:55:17,512 --> 21:55:22,872
great that part is now done so we've done what we promised to do in this

342
21:55:22,872 --> 21:55:26,552
chapter the next thing that we have to talk

343
21:55:26,552 --> 21:55:30,720
about as a tradition in all the other chapters is at the end of every chapter

344
21:55:30,720 --> 21:55:34,720
we'll talk about what we're going to talk about in the next chapter and you

345
21:55:34,720 --> 21:55:40,400
can see that we are able to create notes uh we're not able yet to update notes

346
21:55:40,400 --> 21:55:44,232
we're going to get there soon but we also need to allow the user to delete

347
21:55:44,232 --> 21:55:48,320
notes so that's exactly actually what we're gonna

348
21:55:48,320 --> 21:55:51,440
take care of in the next chapter and the next chapter is not gonna be a huge

349
21:55:51,440 --> 21:55:55,192
chapter either just like this one so it's gonna go very smooth but we're

350
21:55:55,192 --> 21:56:00,400
gonna do some quite heavy refactoring on our project as you'll soon see so

351
21:56:00,400 --> 21:56:05,040
grab some refreshments if you want and i'll see you in the next chapter

352
21:56:05,040 --> 21:56:08,872
hello everyone and welcome to chapter 33 of this flutter course

353
21:56:08,872 --> 21:56:13,600
in the previous chapters we've been talking about how to create new notes

354
21:56:13,600 --> 21:56:17,280
and how also to display those notes on the screen

355
21:56:17,280 --> 21:56:21,680
um and now it would make sense for any user of our application to be able to

356
21:56:21,680 --> 21:56:24,800
delete the notes that they've created already

357
21:56:24,800 --> 21:56:28,480
and we are not right now giving that functionality to the user and that's

358
21:56:28,480 --> 21:56:32,000
exactly what we're gonna work on in this chapter

359
21:56:32,000 --> 21:56:35,680
and just a heads up we're gonna work quite a bit with refactoring so things

360
21:56:35,680 --> 21:56:39,360
are gonna get a little bit uncomfortable where the code isn't gonna compile but

361
21:56:39,360 --> 21:56:43,832
we're gonna fix that soon and right after breaking it so we're

362
21:56:43,832 --> 21:56:48,160
going to work a little bit about on our dialogues as well

363
21:56:48,160 --> 21:56:52,552
you see we have a few dialogues at the moment that appear on the screen and for

364
21:56:52,552 --> 21:56:56,552
instance will we display an error to the screen

365
21:56:56,552 --> 21:57:00,552
or to the user where we for instance say oh you couldn't log in or oh your

366
21:57:00,552 --> 21:57:05,600
password was incorrect or we couldn't register this user because it's a a weak

367
21:57:05,600 --> 21:57:09,360
password entered so that's like our error dialogues and

368
21:57:09,360 --> 21:57:13,280
we also have a dialogue that we display to the user when he or she's trying to

369
21:57:13,280 --> 21:57:17,600
log out of the application so we have two dialogues at the moment

370
21:57:17,600 --> 21:57:22,080
and in this chapter what we're going to do is we're going to consolidate how we

371
21:57:22,080 --> 21:57:27,040
also display our dialogues to the user as part of delete

372
21:57:27,040 --> 21:57:30,800
functionality because you see the delete part as well the way we're going to do

373
21:57:30,800 --> 21:57:33,600
it is we're going to let me actually bring the

374
21:57:33,600 --> 21:57:37,440
scrcpy to the screen so how we're going to do it is that we're

375
21:57:37,440 --> 21:57:40,872
going to put a little delete icon next to every item on the list and we're

376
21:57:40,872 --> 21:57:45,192
going to allow the user to tap on those icons in order to display a dialogue

377
21:57:45,192 --> 21:57:49,280
now this is going to be the third dialogue and um a colleague of mine that

378
21:57:49,280 --> 21:57:54,160
i work with which i really admire his way of working he mentions that he makes

379
21:57:54,160 --> 21:57:58,720
things reusable when he gets to the third time of doing the

380
21:57:58,720 --> 21:58:04,480
same thing again so now we've written two dialogues to this point and we also

381
21:58:04,480 --> 21:58:08,000
now need a third dialogue and that's the point that maybe we should actually

382
21:58:08,000 --> 21:58:11,832
consolidate all our dialogue displaying to one

383
21:58:11,832 --> 21:58:16,640
function and then from other functions we're just gonna reuse that okay

384
21:58:16,640 --> 21:58:21,192
so that's what we're gonna do in this chapter

385
21:58:21,192 --> 21:58:24,960
so let's have a look at the code a little bit i'm gonna um

386
21:58:24,960 --> 21:58:28,640
i'm gonna bring the screen to a little bit

387
21:58:28,640 --> 21:58:33,680
um larger display so here

388
21:58:33,680 --> 21:58:37,440
so these this is our application the way we've listed left it at the moment

389
21:58:37,440 --> 21:58:43,192
so like that visual studio code and we have a cr cpy there as well okay

390
21:58:43,192 --> 21:58:46,872
so let's then have a look at our as a caption in case we're going to have a

391
21:58:46,872 --> 21:58:51,680
look at our error dialog so let's go ahead in

392
21:58:51,680 --> 21:58:54,400
our

393
21:58:54,400 --> 21:58:58,800
let's see what we have constant services crowd utilities we have and we have a

394
21:58:58,800 --> 21:59:03,040
function here called show error dialog which in turn says show dialog and then

395
21:59:03,040 --> 21:59:08,552
it says alert dialogue okay then if you have a look at how this is

396
21:59:08,552 --> 21:59:14,480
constructed the only thing it's doing is saying like hey i have um hey i have a

397
21:59:14,480 --> 21:59:19,280
title then i have just one action with a button

398
21:59:19,280 --> 21:59:24,320
and also and that action doesn't return any value and also

399
21:59:24,320 --> 21:59:30,160
we i have some text to display all right great now let's go to our notes view if

400
21:59:30,160 --> 21:59:34,400
you look at our notes view at the end of notes view we have this

401
21:59:34,400 --> 21:59:37,920
logout dialog what does this do it's the same thing it

402
21:59:37,920 --> 21:59:43,192
has show dialog it has an alert dialog inside it it has a title and some text

403
21:59:43,192 --> 21:59:48,000
but it has two actions and these actions they do different things so one action

404
21:59:48,000 --> 21:59:51,280
does uh if it sends a value of false the other

405
21:59:51,280 --> 21:59:54,872
one sends the value of true so every dialogue that appears to the

406
21:59:54,872 --> 21:59:57,512
screen so let's say this one for instance

407
21:59:57,512 --> 22:00:00,640
our logout dialog that's the one we're looking at right now

408
22:00:00,640 --> 22:00:05,440
the cancel button sends a false value and the log out button sends a true

409
22:00:05,440 --> 22:00:08,960
value so the dialogs are all very similar they

410
22:00:08,960 --> 22:00:14,552
have a title they have some contents and they have some actions that the user can

411
22:00:14,552 --> 22:00:18,400
take on those dialogues and these actions then have their own values and

412
22:00:18,400 --> 22:00:22,232
that's what we're going to do in our application right now is that we're

413
22:00:22,232 --> 22:00:26,552
going to consolidate all these into one generic function that is going to kind

414
22:00:26,552 --> 22:00:31,760
of allow us to customize it to our needs all right

415
22:00:31,760 --> 22:00:35,040
so let's have a look at how we can achieve

416
22:00:35,040 --> 22:00:39,120
this so as the caption indicates here we're first going to cut things from the

417
22:00:39,120 --> 22:00:42,872
source and that's like the strategy that i use a lot in software development so

418
22:00:42,872 --> 22:00:47,440
if i'm gonna disrupt things and i'm gonna like change the way things work

419
22:00:47,440 --> 22:00:50,960
i'm not gonna be scared and i'm really not scared of

420
22:00:50,960 --> 22:00:56,000
making things break and i in my opinion you may think differently but in my

421
22:00:56,000 --> 22:00:59,832
opinion it's really good to cut things from the source break the code and then

422
22:00:59,832 --> 22:01:03,832
start fixing things one at a time instead of trying to make sure nothing

423
22:01:03,832 --> 22:01:07,192
breaks while you're refactoring the code so that's what we're going to do here as

424
22:01:07,192 --> 22:01:10,400
the caption indicates we're going to go to short air dialog

425
22:01:10,400 --> 22:01:14,480
let's see if you can find it i like to use command p in visual studio code i'm

426
22:01:14,480 --> 22:01:17,280
going to say the show error dialog in here

427
22:01:17,280 --> 22:01:21,280
and what we're going to do is just we're going to remove all this code that is

428
22:01:21,280 --> 22:01:25,832
there okay so that's that part

429
22:01:25,832 --> 22:01:30,160
and what we're also going to do is um as the cache indicates remove the show log

430
22:01:30,160 --> 22:01:34,640
out the dialog from notes view since we're going to have a generic one so go

431
22:01:34,640 --> 22:01:38,000
into your notes view in here and

432
22:01:38,000 --> 22:01:41,832
remove this show log out dialog all right

433
22:01:41,832 --> 22:01:46,160
we're gonna get errors that's okay and you know this code that we removed also

434
22:01:46,160 --> 22:01:49,760
here show error dialog is used quite a lot so

435
22:01:49,760 --> 22:01:52,960
by removing it if i like search for show air dollar you can see we're actually

436
22:01:52,960 --> 22:01:57,440
using in seven places so all of those places are now gonna have an error

437
22:01:57,440 --> 22:02:03,920
that's okay fine we're gonna fix that soon so don't worry about that

438
22:02:03,920 --> 22:02:08,960
all right so what we need to do in here is before we fix all of that we're gonna

439
22:02:08,960 --> 22:02:14,960
start basically creating our notes list view all right

440
22:02:14,960 --> 22:02:18,232
so at the moment if you look at our notes

441
22:02:18,232 --> 22:02:23,512
view what we have is this beauty in here which is doing quite

442
22:02:23,512 --> 22:02:27,832
a lot of work as you can see it's it has a future builder inside the body of the

443
22:02:27,832 --> 22:02:32,080
notes view and it has a stream builder and a lot of code in here it would be

444
22:02:32,080 --> 22:02:36,232
really great if you could separate this code into its own place and we could

445
22:02:36,232 --> 22:02:40,320
call this widget like a notes list view and that's exactly what we're going to

446
22:02:40,320 --> 22:02:46,480
do in this chapter so let's go ahead in our views inside notes

447
22:02:46,480 --> 22:02:49,832
in here in your

448
22:02:49,832 --> 22:02:55,600
views inside notes let's create a new file and we're going to call it notes

449
22:02:55,600 --> 22:02:59,832
list view dot parts okay like that

450
22:02:59,832 --> 22:03:03,600
and in in notes list view what we're going to do is going to say the notes

451
22:03:03,600 --> 22:03:08,552
list view is a stateless widget so we create a stl which is a stateless widget

452
22:03:08,552 --> 22:03:11,120
and we're going to call it notes list view

453
22:03:11,120 --> 22:03:14,080
as we've seen it before we need to import material so i'm going to do that

454
22:03:14,080 --> 22:03:17,512
right now so all those errors are going to go away

455
22:03:17,512 --> 22:03:20,480
now what we need to do is we need to

456
22:03:20,480 --> 22:03:25,512
actually pass a a list of notes to this notes list

457
22:03:25,512 --> 22:03:30,400
view so that it can render them because you see all the logic for retrieving the

458
22:03:30,400 --> 22:03:35,832
notes can stay still in the notes view but all notes list view is interested in

459
22:03:35,832 --> 22:03:40,552
is a list of notes to display so let's go and expose that

460
22:03:40,552 --> 22:03:44,480
as a parameter in our notes list view so we're going to say final

461
22:03:44,480 --> 22:03:49,040
list of database nodes and you can see database node is not

462
22:03:49,040 --> 22:03:53,192
imported right now but visual studio code is going to be smart enough to

463
22:03:53,192 --> 22:03:55,832
import that so

464
22:03:55,832 --> 22:03:58,800
if you're actually yeah

465
22:03:58,800 --> 22:04:02,640
if your editor like if you're using vim or something on linux or even mac and

466
22:04:02,640 --> 22:04:06,800
windows if you're using that you may have to import these things manually so

467
22:04:06,800 --> 22:04:11,192
um but the import statements i believe i mean if you've gotten to this point in

468
22:04:11,192 --> 22:04:13,512
the course you should be uh

469
22:04:13,512 --> 22:04:17,832
like savvy enough and you should know all these things enough in order to be

470
22:04:17,832 --> 22:04:21,680
able to solve that yourself so um so i'm not going to repeat all that

471
22:04:21,680 --> 22:04:26,400
information again just make sure that your database note is in context in at

472
22:04:26,400 --> 22:04:30,232
this point so that's going to be our notes

473
22:04:30,232 --> 22:04:34,800
and also this notes view as i mentioned in the previous chapter but maybe it's

474
22:04:34,800 --> 22:04:37,512
actually worth mentioning in this chapter because it's very relevant what

475
22:04:37,512 --> 22:04:41,760
we're going to do is beside every note to the right hand side

476
22:04:41,760 --> 22:04:47,920
as the trailing tile widget we're going to display a little like a trashcan icon

477
22:04:47,920 --> 22:04:52,832
that the user can tap on in order to delete a um

478
22:04:52,832 --> 22:04:56,480
notes and what we're going to do then is to

479
22:04:56,480 --> 22:04:59,512
make sure that

480
22:04:59,512 --> 22:05:06,080
that we can basically call a little function to show a delete

481
22:05:06,080 --> 22:05:09,920
dialog to the user so upon you pressing the delete button we're going to display

482
22:05:09,920 --> 22:05:13,280
a dialogue and the delete dialog is going to be very similar to log out like

483
22:05:13,280 --> 22:05:16,800
saying now hey hey you're deleting this note are you sure

484
22:05:16,800 --> 22:05:20,000
and that dialog is going to have two buttons

485
22:05:20,000 --> 22:05:24,000
yes or no or something like that and upon pressing no we're just going to

486
22:05:24,000 --> 22:05:27,192
dismiss the dialogue upon pressing yes then we're going to delete that note

487
22:05:27,192 --> 22:05:32,720
from the database all right so what we need is you can see the notes

488
22:05:32,720 --> 22:05:38,320
list view at the moment isn't like it shouldn't have any connection with the

489
22:05:38,320 --> 22:05:42,480
notes service it should be the notes view that has that connection so this is

490
22:05:42,480 --> 22:05:47,192
how you should also like do your components in flutter in

491
22:05:47,192 --> 22:05:52,080
that you shouldn't leak your services everywhere so if the notes list view

492
22:05:52,080 --> 22:05:57,760
could somehow delegate the deletion task to the notes view that would be ideal so

493
22:05:57,760 --> 22:06:02,320
the notes list view could display the dialogue it could just say hey

494
22:06:02,320 --> 22:06:06,552
are you sure and if the user then says yes the notes list view could then

495
22:06:06,552 --> 22:06:11,360
delegate this information back to its parent and say hey do something with

496
22:06:11,360 --> 22:06:14,400
this information okay

497
22:06:14,400 --> 22:06:19,920
so let's then go and create a little callback definition using typedef

498
22:06:19,920 --> 22:06:24,232
excuse me and we're going to call it delete note

499
22:06:24,232 --> 22:06:30,960
callback okay and this is a void function that takes a database note

500
22:06:30,960 --> 22:06:35,920
oops a database nodes

501
22:06:35,920 --> 22:06:42,080
i'll note like that so we're saying we're defining a function

502
22:06:42,080 --> 22:06:46,232
that we're then going to use in our nodes list view which we call we which

503
22:06:46,232 --> 22:06:50,400
we use as a callback that will be called when the user

504
22:06:50,400 --> 22:06:53,832
presses the yes on this hypothetical dialogue that we're

505
22:06:53,832 --> 22:06:57,680
assuming gonna display that user okay so let's go in here and define that let's

506
22:06:57,680 --> 22:07:04,232
just say um delete node callback and we're just going to say on delete nodes

507
22:07:04,232 --> 22:07:08,400
so this is our callback and you're now getting some errors from a flutter

508
22:07:08,400 --> 22:07:11,760
saying that these parameters aren't defined so i'm going to use visual

509
22:07:11,760 --> 22:07:16,000
studio code and to say define these parameters for me

510
22:07:16,000 --> 22:07:23,040
i'm also going to make them require parameters like this

511
22:07:23,040 --> 22:07:28,320
so that's great we have still some errors in our application so

512
22:07:28,320 --> 22:07:34,160
but we're going to continue building until we can fix all these errors okay

513
22:07:34,160 --> 22:07:40,080
all right that's fantastic so that's the first part that we have to work on so

514
22:07:40,080 --> 22:07:45,360
let's then go ahead and um take our notes view the way it is right here and

515
22:07:45,360 --> 22:07:50,000
you see we already have a list view builder i'm just gonna go and grab this

516
22:07:50,000 --> 22:07:52,960
list view the way it is from there

517
22:07:52,960 --> 22:07:58,000
and i'm i'm actually gonna cut that and bring it into nodes list view inside the

518
22:07:58,000 --> 22:08:02,800
build function alright so inside instead of returning a container i'm just gonna

519
22:08:02,800 --> 22:08:07,760
return that code that i've just pasted that i just cut all right

520
22:08:07,760 --> 22:08:11,600
it looks absolutely horrible at the moment it's because i mean we have so

521
22:08:11,600 --> 22:08:14,640
many errors but i actually like that kind of stuff

522
22:08:14,640 --> 22:08:18,160
to be honest with you some developers get nervous when they have lots of

523
22:08:18,160 --> 22:08:21,832
errors in their code and they just want to patch them up as soon as they can

524
22:08:21,832 --> 22:08:27,192
but we're gonna work just one step at a time as we say in sweden we say

525
22:08:27,192 --> 22:08:31,120
it means one step at a time we're going to fix these errors and at

526
22:08:31,120 --> 22:08:35,440
the end of this chapter everything's going to work i promise you

527
22:08:35,440 --> 22:08:38,960
so let's go in here you can see the first error that we have is all notes

528
22:08:38,960 --> 22:08:42,720
and what all notes is giving us an error for is that it doesn't exist in this

529
22:08:42,720 --> 22:08:46,872
context and that's because we have something called notes all right so

530
22:08:46,872 --> 22:08:50,400
let's go in here and say now we're using notes

531
22:08:50,400 --> 22:08:53,832
and in here we don't have all notes either so we're just going to say notes

532
22:08:53,832 --> 22:08:56,000
notes and that

533
22:08:56,000 --> 22:08:58,480
note is going to be extracted from notes at

534
22:08:58,480 --> 22:09:02,960
that index and the exciting part now is that

535
22:09:02,960 --> 22:09:07,120
we don't just use the title property of our list tile anymore we're going to

536
22:09:07,120 --> 22:09:12,640
start using something called trailing and trailing is a as a property of list

537
22:09:12,640 --> 22:09:15,600
tile that as its name indicates it's going to allow you to

538
22:09:15,600 --> 22:09:20,160
specify a widget that needs to be displayed at the end or the trail of

539
22:09:20,160 --> 22:09:23,680
every list tile and this is where we're going to use an

540
22:09:23,680 --> 22:09:28,320
icon button so to display our little trash can okay so

541
22:09:28,320 --> 22:09:31,600
let's say icon button

542
22:09:31,600 --> 22:09:35,920
and in this icon button what we're going to do then is we're going to define the

543
22:09:35,920 --> 22:09:40,640
uncrest which looks like this and it's icon then

544
22:09:40,640 --> 22:09:45,120
it's going to be icon of icons delete i believe it's called

545
22:09:45,120 --> 22:09:48,320
let's have a look at how delete looks like and you can see it's a little trash

546
22:09:48,320 --> 22:09:52,800
can fantastic and make this cons to make the

547
22:09:52,800 --> 22:09:57,280
analyzer happy as well all right so what do we do i'm pressed so what we

548
22:09:57,280 --> 22:10:00,552
need to do on press is as i mentioned before we need to take care of the

549
22:10:00,552 --> 22:10:05,832
displaying of a dialogue that says let's just call the show delete dialogue

550
22:10:05,832 --> 22:10:10,232
okay so this show delete dialogue we're going to call it and we expect it to

551
22:10:10,232 --> 22:10:15,280
return a true or false remember we haven't implemented the show

552
22:10:15,280 --> 22:10:20,160
delete dialog that's okay we can put some constraints on the

553
22:10:20,160 --> 22:10:25,360
interface of this function yet but it doesn't yet exist so let's just say that

554
22:10:25,360 --> 22:10:30,320
this function show delete dialog takes a build context and it returns true or

555
22:10:30,320 --> 22:10:35,192
false to us so if the user says yes i want to delete some item then it it

556
22:10:35,192 --> 22:10:38,640
returns true if it's if the user says no then this

557
22:10:38,640 --> 22:10:44,400
dialog should return false to us okay so let's go ahead and say final should

558
22:10:44,400 --> 22:10:48,720
uh you should delete is a weight

559
22:10:48,720 --> 22:10:53,120
and when you're using a weight you need to make your own press function async

560
22:10:53,120 --> 22:10:56,720
then we're going to say await show delete dialog we don't have that

561
22:10:56,720 --> 22:11:01,600
function remember but that's okay and when we say

562
22:11:01,600 --> 22:11:05,280
should delete okay if this is boolean then we say if

563
22:11:05,280 --> 22:11:09,512
should delete then what we're going to do is we say

564
22:11:09,512 --> 22:11:14,960
and we call our on deletes notes with the current note okay

565
22:11:14,960 --> 22:11:19,600
so that is just the implementation of this widget

566
22:11:19,600 --> 22:11:22,960
notes list view all right

567
22:11:22,960 --> 22:11:27,120
but don't worry about these errors we're gonna soon fix them so

568
22:11:27,120 --> 22:11:30,800
and just save this file as well

569
22:11:30,800 --> 22:11:35,120
now we need to move to the next item and that's our own generic dialogue you can

570
22:11:35,120 --> 22:11:39,512
see we're going to create a generic dialogue dart

571
22:11:39,512 --> 22:11:45,440
which is so important because pretty much this show generic dialogue and the

572
22:11:45,440 --> 22:11:49,120
variations that we're going to create on it is going to fix all these errors that

573
22:11:49,120 --> 22:11:52,720
we have in our application right now so i'm actually happy to start working on

574
22:11:52,720 --> 22:11:56,640
it i don't know about you so as the caption indicates we're going

575
22:11:56,640 --> 22:12:02,320
to create a file in lib utilities dialogues generic dialogue dart so we

576
22:12:02,320 --> 22:12:07,920
have what folders do we have in here we have lib consonants enums services

577
22:12:07,920 --> 22:12:12,400
utilities all right but inside utilities we don't have at

578
22:12:12,400 --> 22:12:17,120
the moment a dialogues folder and remember that we

579
22:12:17,120 --> 22:12:22,080
removed all the contents of this show error dialog let's just delete the file

580
22:12:22,080 --> 22:12:26,960
now we don't need that so i'm just gonna delete it and move it to trash

581
22:12:26,960 --> 22:12:31,280
so now inside utilities we have nothing so let's go create this new file as the

582
22:12:31,280 --> 22:12:36,000
caption indicates we're gonna say it's gonna be inside a folder called dialogs

583
22:12:36,000 --> 22:12:42,800
and we're going to call it generic dialog.art

584
22:12:42,800 --> 22:12:47,280
all right i'm going to get rid of the sidebar and we now need to start

585
22:12:47,280 --> 22:12:52,232
implementing our generic dialogue

586
22:12:52,232 --> 22:12:55,440
this show generic dialogue is going to be a

587
22:12:55,440 --> 22:12:59,920
little bit complicated and um and i'm saying it a little bit

588
22:12:59,920 --> 22:13:02,720
complicated simply because it's going to use generics

589
22:13:02,720 --> 22:13:07,192
and the reason um i've basically

590
22:13:07,192 --> 22:13:13,120
decided to make it generic is as the name generic indicates this

591
22:13:13,120 --> 22:13:17,192
generic dialogue i mean the file also says generic dialect so you need to kind

592
22:13:17,192 --> 22:13:20,552
of know already what you're getting yourself into

593
22:13:20,552 --> 22:13:25,040
the reason it has to be generic is that it needs to be able to produce

594
22:13:25,040 --> 22:13:29,360
different sorts of values let's go to our notes list view and you see here

595
22:13:29,360 --> 22:13:33,440
we're going to say show delete dialog a function we haven't implemented yet and

596
22:13:33,440 --> 22:13:37,440
show delete dialogue all of a sudden it's going to return true or false okay

597
22:13:37,440 --> 22:13:42,320
that's one thing how about in the case of login view so let's go to login view

598
22:13:42,320 --> 22:13:46,720
how about this case show air dot log remember show error dialog is a is also

599
22:13:46,720 --> 22:13:51,120
a function we're soon gonna develop which we have before we we killed it we

600
22:13:51,120 --> 22:13:54,160
have to develop a new function called show air dialog which in turn is gonna

601
22:13:54,160 --> 22:13:59,192
use our generic dialog but in this case it's not gonna return true or false so

602
22:13:59,192 --> 22:14:03,360
we need to make sure our generic dialogue as its name indicates is a

603
22:14:03,360 --> 22:14:09,280
generic function that can based on what you provide to it is able to return

604
22:14:09,280 --> 22:14:13,760
those values to you and what i mean by what you provide to

605
22:14:13,760 --> 22:14:18,480
it every item every option or every button that is

606
22:14:18,480 --> 22:14:22,480
displayed in our generic dialog is gonna have a value

607
22:14:22,480 --> 22:14:27,600
we're gonna assume that all the buttons that you display in any given dialog is

608
22:14:27,600 --> 22:14:31,680
going to have values of the exact same type so a

609
22:14:31,680 --> 22:14:35,680
dialogue that shows a yes or no button is going to have

610
22:14:35,680 --> 22:14:40,160
two buttons each of which contains a boolean value one true the other one

611
22:14:40,160 --> 22:14:44,480
false or maybe you want to display 10 buttons and two of them have the value

612
22:14:44,480 --> 22:14:49,040
of true and the other one had the others 8 have the value of false but what i

613
22:14:49,040 --> 22:14:52,160
mean is that the buttons inside your generic dialogue are going to have the

614
22:14:52,160 --> 22:14:57,192
same data type all right so we're going to call that data type t

615
22:14:57,192 --> 22:15:01,512
all right so let's go ahead and define this um show

616
22:15:01,512 --> 22:15:05,280
generic dialogue so we're going to say that this dialogue actually returns

617
22:15:05,280 --> 22:15:09,360
um a future of t

618
22:15:09,360 --> 22:15:13,280
and um what we're going to say we're going to say show generic

619
22:15:13,280 --> 22:15:18,232
dialogue and it's

620
22:15:18,232 --> 22:15:21,280
it's a function signature it kind of looks like this

621
22:15:21,280 --> 22:15:26,160
all right so what does it actually mean t optional and that's because remember

622
22:15:26,160 --> 22:15:29,280
on android for instance when you display a dialog to the user the user can

623
22:15:29,280 --> 22:15:33,192
actually press the hardware down button in order to dismiss a dialog without

624
22:15:33,192 --> 22:15:35,760
actually responding to it and ios is actually

625
22:15:35,760 --> 22:15:40,080
not so much like that in is when you display a dialogue it's a modal that the

626
22:15:40,080 --> 22:15:45,192
user has to reply to unless you create your own dialogue or if you're

627
22:15:45,192 --> 22:15:49,040
doing maybe something hacky on the side to say that oh if the user taps outside

628
22:15:49,040 --> 22:15:52,720
the dialogue then it should disappear otherwise dialogues in ios are modal and

629
22:15:52,720 --> 22:15:56,080
have to be responded to however in android it's possible that a user

630
22:15:56,080 --> 22:15:59,120
dismisses a dialogue without actually responding to it and in this case the

631
22:15:59,120 --> 22:16:02,640
show generic dialogue should actually return nil or null depending what

632
22:16:02,640 --> 22:16:05,920
language you're talking about if you're a python developer you'd say none

633
22:16:05,920 --> 22:16:08,872
so so we're going to

634
22:16:08,872 --> 22:16:13,280
define this saying we have a generic dialog that returns some sort of a

635
22:16:13,280 --> 22:16:17,832
optional value all right and the first parameter that we need is

636
22:16:17,832 --> 22:16:23,440
a build context so let's just say build context

637
22:16:23,440 --> 22:16:28,400
and we need a title and content so we're going to say required

638
22:16:28,400 --> 22:16:32,000
also before we do that let's also have a look at this thing that says build

639
22:16:32,000 --> 22:16:34,960
context isn't defined and that's because we have an important material so let's

640
22:16:34,960 --> 22:16:38,320
take care of that and we have to have curly brackets in

641
22:16:38,320 --> 22:16:43,512
these places because required actually requires that okay

642
22:16:43,512 --> 22:16:45,832
so the next parameter that we have to

643
22:16:45,832 --> 22:16:50,080
implement is the title and then the content so both are going to be text or

644
22:16:50,080 --> 22:16:52,552
string so that's the title and now i'm going to

645
22:16:52,552 --> 22:16:56,232
copy paste that i'm going to say content in here content

646
22:16:56,232 --> 22:17:00,640
all right now it's exciting part now what we need is

647
22:17:00,640 --> 22:17:04,552
some sort of ability and some sort of way for the user to be able

648
22:17:04,552 --> 22:17:09,360
to specify like a list of um

649
22:17:09,360 --> 22:17:14,960
a list of buttons to display the to the to the user now every button if we say

650
22:17:14,960 --> 22:17:18,160
every button by default should have for instance

651
22:17:18,160 --> 22:17:22,400
we should we're representing every button as a text button that every text

652
22:17:22,400 --> 22:17:27,280
button needs a string to display all right and then it will have an unpressed

653
22:17:27,280 --> 22:17:32,000
so what we're telling what we're saying is that okay we should be able to render

654
22:17:32,000 --> 22:17:35,832
multiple buttons and every button should have a text

655
22:17:35,832 --> 22:17:40,232
and also we set from before every button should also have some sort of a value

656
22:17:40,232 --> 22:17:45,920
all right which is t optional so we need a way for the user to specify a list of

657
22:17:45,920 --> 22:17:50,000
buttons each of which has a title of type string and also every one of those

658
22:17:50,000 --> 22:17:55,440
buttons should optionally have a value so that's best described with a map of

659
22:17:55,440 --> 22:17:59,360
string as titles and a value of t like this

660
22:17:59,360 --> 22:18:02,552
all right so we're going to type def that we're

661
22:18:02,552 --> 22:18:07,920
going to say we have a definition of a and we have basically a type to finish

662
22:18:07,920 --> 22:18:12,960
and we're going to call the dialog option builder

663
22:18:12,960 --> 22:18:15,832
and we're going to say it has it's a generic

664
22:18:15,832 --> 22:18:20,640
okay and we're going to say that is equal to a function

665
22:18:20,640 --> 22:18:24,800
that returns that value so

666
22:18:24,800 --> 22:18:30,640
let's also see the map all right key expected to find all right and

667
22:18:30,640 --> 22:18:35,192
that's probably because i've misspelled that am all right so now we have an

668
22:18:35,192 --> 22:18:39,280
option builder so we're gonna then use that option builder in our function so

669
22:18:39,280 --> 22:18:42,720
you're you'll see soon how we're going to use it

670
22:18:42,720 --> 22:18:46,320
so i'm going to say that we have a dialog option builder and let's just

671
22:18:46,320 --> 22:18:50,000
call it options builder

672
22:18:50,000 --> 22:18:54,080
okay so we have all those bits and pieces in place now what we need to do

673
22:18:54,080 --> 22:18:59,192
is inside this function actually use the build context to display a dialogue to

674
22:18:59,192 --> 22:19:04,800
the user so before we do that let's grab all the options that the caller

675
22:19:04,800 --> 22:19:07,512
wants us to display so we're going to call it options

676
22:19:07,512 --> 22:19:12,080
is options builder we call that function and now you'll see

677
22:19:12,080 --> 22:19:15,280
options is

678
22:19:15,280 --> 22:19:18,720
it smart enough to understand that yeah it's a map of string dynamic okay it

679
22:19:18,720 --> 22:19:23,832
doesn't understand yet what it is so let's go ahead and say in here in

680
22:19:23,832 --> 22:19:28,552
this function we return a show dialog of t

681
22:19:28,552 --> 22:19:32,480
all right and in here we have two parameters that

682
22:19:32,480 --> 22:19:37,920
we have to pass one is the context the other one is the actual builder

683
22:19:37,920 --> 22:19:42,480
function all right some help from your favorite editor to

684
22:19:42,480 --> 22:19:45,040
complete the builder function which is very simple it just takes to build

685
22:19:45,040 --> 22:19:52,720
context all right and in your builder we are going to return an alert dialogue

686
22:19:52,720 --> 22:19:56,320
this you should already know from before we've worked with alert dialogues and

687
22:19:56,320 --> 22:20:00,400
show dialogue from before so this is nothing revolutionary

688
22:20:00,400 --> 22:20:05,760
so for the title we're going to say we have a text which is equal to

689
22:20:05,760 --> 22:20:12,480
which contains the title string for the content we're going to say also

690
22:20:12,480 --> 22:20:16,720
a text which includes the content

691
22:20:16,720 --> 22:20:21,600
all right and then we're gonna go into our actions

692
22:20:21,600 --> 22:20:26,000
and this is this is the exciting part for me because for the actions what we

693
22:20:26,000 --> 22:20:31,280
need to do you see our actions are defined in here every key inside this

694
22:20:31,280 --> 22:20:34,232
options is the title

695
22:20:34,232 --> 22:20:38,000
which is defined by string of the actions

696
22:20:38,000 --> 22:20:41,920
of our dialogue so we need to start mapping them so we're going to say

697
22:20:41,920 --> 22:20:45,600
options keys

698
22:20:45,600 --> 22:20:49,512
keys and then we map them all right and this let's just call this

699
22:20:49,512 --> 22:20:54,000
a option title

700
22:20:54,000 --> 22:20:57,192
and we're not going to use a shorthand signature in here and we're just going

701
22:20:57,192 --> 22:21:02,160
to do it like this all right so now in here in the option title we're

702
22:21:02,160 --> 22:21:06,160
actually actually gonna return a text button so

703
22:21:06,160 --> 22:21:10,960
let's let's get the value first of this key so i'm just gonna say

704
22:21:10,960 --> 22:21:15,920
um final t value is equal to options

705
22:21:15,920 --> 22:21:20,640
at the option title like that

706
22:21:20,640 --> 22:21:23,280
right and now it's saying that yeah you're not using it that's fine we're

707
22:21:23,280 --> 22:21:27,760
gonna we're gonna fix that soon

708
22:21:27,760 --> 22:21:31,280
and this huge error that we're seeing here is because you see actions it

709
22:21:31,280 --> 22:21:35,440
requires an iterable i believe no it's actually a list of widget but

710
22:21:35,440 --> 22:21:39,920
when you do a map on your keys it's going to return an iterable so to fix

711
22:21:39,920 --> 22:21:45,040
that we're just going to go at the end here and say this is to list all right

712
22:21:45,040 --> 22:21:49,192
all right so let's now fix the rest of the problems i understand i mean this is

713
22:21:49,192 --> 22:21:52,160
quite a lot of errors and you may be a little bit overwhelmed by this but

714
22:21:52,160 --> 22:21:56,000
that's okay we're gonna fix them one at a time so a semi column at the end so to

715
22:21:56,000 --> 22:22:02,160
get rid of that huge er at the end and then what we're going to do in here

716
22:22:02,160 --> 22:22:05,512
where we get the value we're going to create a text button so let's just say

717
22:22:05,512 --> 22:22:08,832
return a text button every

718
22:22:08,832 --> 22:22:12,720
option and what the text button needs as we've

719
22:22:12,720 --> 22:22:20,480
seen before is two parameters unpressed and it also needs the i believe it's

720
22:22:20,480 --> 22:22:23,680
tiled and we're going to say the child is

721
22:22:23,680 --> 22:22:28,000
equal to text of our

722
22:22:28,000 --> 22:22:31,360
option title right

723
22:22:31,360 --> 22:22:34,720
so i mean you may be a little bit confused by all

724
22:22:34,720 --> 22:22:39,192
of this that's okay what we're doing is very simple we have like a list of

725
22:22:39,192 --> 22:22:43,360
titles to display for every button so every button has one title and that

726
22:22:43,360 --> 22:22:47,832
title is inside this map of string and the reason it's inside a map of string

727
22:22:47,832 --> 22:22:51,040
and an optional t is simply because we don't want to have

728
22:22:51,040 --> 22:22:54,400
we don't want to manage two separate lists a list of titles and a list of

729
22:22:54,400 --> 22:22:57,760
values and then we're going to match the titles with the values and map is

730
22:22:57,760 --> 22:23:01,832
already doing that for us furthermore what a map of string with a t does is

731
22:23:01,832 --> 22:23:06,552
ensures that every string or every key in this case of type string is unique so

732
22:23:06,552 --> 22:23:10,640
you can't have two buttons with the same title and different values so

733
22:23:10,640 --> 22:23:14,720
the map is perfect for this case all right and what we're doing in here for

734
22:23:14,720 --> 22:23:18,320
the actions of our alert dialog we're saying that okay

735
22:23:18,320 --> 22:23:24,160
every key inside our map is an option title is a title of a button all right

736
22:23:24,160 --> 22:23:28,640
so we're mapping that what are we mapping it to every one of those titles

737
22:23:28,640 --> 22:23:31,680
of type string is going to be mapped to a text button

738
22:23:31,680 --> 22:23:37,760
whose child is a text of the actual title which is inside this key all right

739
22:23:37,760 --> 22:23:41,760
i understand it could be confusing but please just pause the video have a look

740
22:23:41,760 --> 22:23:44,800
at the code and i'm sure you'll understand it better after we actually

741
22:23:44,800 --> 22:23:47,760
thought about it yourself the values then are going to be

742
22:23:47,760 --> 22:23:52,232
extracted of this type and what we're going to do is we're

743
22:23:52,232 --> 22:23:56,232
going to say let's see final value

744
22:23:56,232 --> 22:24:00,160
and in here if you look at value it's going to be dynamic and what we need to

745
22:24:00,160 --> 22:24:05,192
do is just to make sure that say if value is not null

746
22:24:05,192 --> 22:24:08,160
and we're going to say navigator of

747
22:24:08,160 --> 22:24:11,512
our context it was written already then i'm going to

748
22:24:11,512 --> 22:24:17,280
say pop it with that value otherwise we're just going to pop

749
22:24:17,280 --> 22:24:22,080
off just pop all right so this that is now

750
22:24:22,080 --> 22:24:27,832
you see why we're defining the value as in as an optional because you see some

751
22:24:27,832 --> 22:24:31,440
values some buttons on our dialogs may not

752
22:24:31,440 --> 22:24:36,160
actually have any values just like we have in our

753
22:24:36,160 --> 22:24:40,000
login view if we go back in here this login view is going to have an error

754
22:24:40,000 --> 22:24:44,552
dialog and this error dialog is going to use our generic dialog but this air

755
22:24:44,552 --> 22:24:48,000
dialog is just going to have an ok button it has no value the okay is just

756
22:24:48,000 --> 22:24:53,040
an ok just dismiss the dialog and that's exactly what this is going to do so as

757
22:24:53,040 --> 22:24:57,192
you'll soon see the way we'll implement our new show error dialog is going to

758
22:24:57,192 --> 22:25:01,832
use our generic dialog however it's going to place a little um option in

759
22:25:01,832 --> 22:25:07,360
there that says ok and that ok has a null value all right

760
22:25:07,360 --> 22:25:11,440
perfect a lot of talking a lot of logic but that's fine we sometimes need to do

761
22:25:11,440 --> 22:25:14,000
this okay

762
22:25:14,000 --> 22:25:18,480
wow um we've now written our generic dialogue

763
22:25:18,480 --> 22:25:22,800
what we need to do is we need to start using it and that is inside our error

764
22:25:22,800 --> 22:25:25,280
dialogue that we're going to implement now so

765
22:25:25,280 --> 22:25:30,000
let's go ahead and create an error dialog

766
22:25:30,000 --> 22:25:33,280
so i'm going to bring up my notes and

767
22:25:33,280 --> 22:25:37,040
let's as the caption indicates inside dialogs

768
22:25:37,040 --> 22:25:40,000
let's see where it is inside dialogues we're going to create a new file called

769
22:25:40,000 --> 22:25:44,960
error dialog here

770
22:25:44,960 --> 22:25:49,040
now inside error dialog what we need to do is we need to use our generic dialog

771
22:25:49,040 --> 22:25:52,232
so we need to have an import in here which

772
22:25:52,232 --> 22:25:55,680
we're going to get visual studio code to help us with so

773
22:25:55,680 --> 22:26:01,192
remember error dialog is going to just show an ok button it has no value so

774
22:26:01,192 --> 22:26:05,680
it the short error dialog is going to have the signature exactly as it had

775
22:26:05,680 --> 22:26:10,320
before which is a future void so let's go ahead and do that

776
22:26:10,320 --> 22:26:13,920
and we're going to call it show error dialogue

777
22:26:13,920 --> 22:26:18,232
and the only thing i mean the two things that the shower dialog needs is a build

778
22:26:18,232 --> 22:26:22,400
context and a text so we're saying build context

779
22:26:22,400 --> 22:26:26,080
and we're also going to say a string of text

780
22:26:26,080 --> 22:26:31,192
okay and let's import material to get rid of that error

781
22:26:31,192 --> 22:26:36,552
so that's that and then in here we're actually going to return an instance of

782
22:26:36,552 --> 22:26:40,160
our show err show generic dialogue

783
22:26:40,160 --> 22:26:46,320
and i believe it now should be imported is it not imported automatically in here

784
22:26:46,320 --> 22:26:51,280
it's not yet but somehow it's finding it and i can see we have a show generic

785
22:26:51,280 --> 22:26:55,680
dialogue actually inside in here so this is not the one that

786
22:26:55,680 --> 22:27:00,160
we're actually gonna use so we're gonna use the one with uh

787
22:27:00,160 --> 22:27:04,720
like this and then we're gonna say our air

788
22:27:04,720 --> 22:27:08,320
dialogue avoid so let's import our own uh

789
22:27:08,320 --> 22:27:14,160
show gener um show generic dialogue

790
22:27:14,160 --> 22:27:18,960
so was it a show general dialogue i'm actually curious general dialogue that's

791
22:27:18,960 --> 22:27:22,400
interesting so there's a function called show general dialogue

792
22:27:22,400 --> 22:27:25,920
but that's not what we've created we've called show generic dialects so be

793
22:27:25,920 --> 22:27:29,832
careful a little bit with that because i actually tripped on that right now so

794
22:27:29,832 --> 22:27:32,640
let's go back to our error dialog and say show

795
22:27:32,640 --> 22:27:35,512
generic dialog and it's going to also import

796
22:27:35,512 --> 22:27:39,360
that form you know so that's that's the correct one okay

797
22:27:39,360 --> 22:27:44,552
so put a comma at the end to get formatting also working fine

798
22:27:44,552 --> 22:27:49,760
and now add a comma in here to get the formatting finding there as well

799
22:27:49,760 --> 22:27:52,320
now the title we're going to hard code that

800
22:27:52,320 --> 22:27:55,192
we're going to say an error occurred

801
22:27:55,192 --> 22:27:58,320
like this and the content is just going to be the

802
22:27:58,320 --> 22:28:02,960
text and our options builder now is going to be i remember an options

803
22:28:02,960 --> 22:28:08,480
builder if you go back in here to our generic dialog is a function all

804
22:28:08,480 --> 22:28:13,192
right that returns that so let's go and define an inline function in here and we

805
22:28:13,192 --> 22:28:17,192
say that oops to remove this and we say it's a

806
22:28:17,192 --> 22:28:22,080
function that returns a map and the key in here is just going to be

807
22:28:22,080 --> 22:28:26,552
okay with the value of null all right see how see how generic that

808
22:28:26,552 --> 22:28:29,760
is now so we're actually defining saying that this is a show air dial again it

809
22:28:29,760 --> 22:28:33,040
just doesn't return anything it's just a void all right

810
22:28:33,040 --> 22:28:36,480
and to make it cleaner you could actually specify here that this is a

811
22:28:36,480 --> 22:28:40,400
void all right that's that part so now we've

812
22:28:40,400 --> 22:28:45,512
worked on our error dialogue um and now what we need to do in order to make our

813
22:28:45,512 --> 22:28:48,872
code a little bit less scary with so many errors at the moment that we have

814
22:28:48,872 --> 22:28:52,000
let's go and clean up some of these errors and let's go ahead and use this

815
22:28:52,000 --> 22:28:56,720
show error dialogue everywhere okay so let's go to our views and have a look at

816
22:28:56,720 --> 22:29:01,680
the login view you can see now we have show air dialog

817
22:29:01,680 --> 22:29:07,192
and and now we have our own implementation of uh show air dialog so

818
22:29:07,192 --> 22:29:11,512
let's get help from visual studio code to import our error dialog

819
22:29:11,512 --> 22:29:16,400
and all of a sudden you see all the errors in the login view and disappeared

820
22:29:16,400 --> 22:29:21,360
you can see we're in loginview. so let's save our login view

821
22:29:21,360 --> 22:29:25,600
and we have an error in here from our previous import which was show air

822
22:29:25,600 --> 22:29:30,800
dialog dart so let's remove that as well so

823
22:29:30,800 --> 22:29:35,512
your login view should now look quite clean i'm going to close that and let's

824
22:29:35,512 --> 22:29:39,680
then i'm going to save all of these things that we have in here because we

825
22:29:39,680 --> 22:29:44,960
have so many windows so many tabs open that it's kind of scary so let's then go

826
22:29:44,960 --> 22:29:49,680
inside the register view and clean up this import so let's remove

827
22:29:49,680 --> 22:29:52,872
the old import from utilities show error dialog

828
22:29:52,872 --> 22:29:56,232
and let's go and to these errors that we're getting here

829
22:29:56,232 --> 22:30:00,400
for show air dialing and get visual studio code or your favorite editor or

830
22:30:00,400 --> 22:30:05,360
id to auto import our new function called short error dialogue which

831
22:30:05,360 --> 22:30:10,160
resides inside this utilities dialogues error dialog

832
22:30:10,160 --> 22:30:12,480
okay

833
22:30:12,480 --> 22:30:16,320
now you remember now that we also broke

834
22:30:16,320 --> 22:30:18,800
our notes view

835
22:30:18,800 --> 22:30:23,360
here which at the moment uh let's see

836
22:30:23,360 --> 22:30:27,440
yeah we've broken notes view simply because we're not returning anything in

837
22:30:27,440 --> 22:30:31,360
here because we migrated or moved all the code to the

838
22:30:31,360 --> 22:30:37,280
notes list view so what we need to do now is to go and

839
22:30:37,280 --> 22:30:41,192
basically work on our

840
22:30:41,192 --> 22:30:44,720
show delete dialogue okay so that's not the one that we we need we need to work

841
22:30:44,720 --> 22:30:48,320
on the notes views log out functionality which is here show

842
22:30:48,320 --> 22:30:53,512
log out dialogue you see so we need to create a new logout dialog

843
22:30:53,512 --> 22:30:57,680
as well and this this log out dialog is going to be very similar to how we

844
22:30:57,680 --> 22:31:02,400
created our um error dialog so it's gonna be very similar

845
22:31:02,400 --> 22:31:06,232
okay so let's i'm actually gonna i don't know

846
22:31:06,232 --> 22:31:10,000
if it's worth copying this code i usually don't like copying even if it's

847
22:31:10,000 --> 22:31:13,360
my own code sometimes i do but in this case i think it's actually better that

848
22:31:13,360 --> 22:31:17,512
we write it by hand okay so let's go ahead as the caption

849
22:31:17,512 --> 22:31:21,760
indicates inside dialogues folder create a new file called log out dialog

850
22:31:21,760 --> 22:31:28,480
so in here i'm going to say new file log out dialogue drop down

851
22:31:28,480 --> 22:31:33,760
and in the log out dialog so i'm going to go to my notes as well and log out

852
22:31:33,760 --> 22:31:38,960
that one all right so let's go and say and then we need a function called show

853
22:31:38,960 --> 22:31:43,512
logout dialog all right as we have it here okay so i'm going to just copy that

854
22:31:43,512 --> 22:31:47,920
name so we're going to say it's a future of boolean

855
22:31:47,920 --> 22:31:52,480
and call show logout dialog and the only thing it needs is a build

856
22:31:52,480 --> 22:31:54,960
context okay

857
22:31:54,960 --> 22:31:57,920
we're going to get an error for build content simply because we don't have it

858
22:31:57,920 --> 22:32:02,800
inside our file in here and you see now the only error that

859
22:32:02,800 --> 22:32:05,832
we're getting is saying that the body might complete normally

860
22:32:05,832 --> 22:32:08,960
which means yeah it's not returning any value at the moment and we're going to

861
22:32:08,960 --> 22:32:12,960
fix us so what we need in here we're actually

862
22:32:12,960 --> 22:32:18,232
going to return our show generic dialog and auto import it

863
22:32:18,232 --> 22:32:22,160
a comma at the end and a semicolon just to get the formatting right

864
22:32:22,160 --> 22:32:25,832
the context is there and we're in this case we're actually going to say that

865
22:32:25,832 --> 22:32:29,512
show generic dialogue is going to return a boolean value all right

866
22:32:29,512 --> 22:32:34,000
so the context is there the title we need to specify kind of we're just going

867
22:32:34,000 --> 22:32:38,640
to say log out and for the content we're going to say are you sure you want to

868
22:32:38,640 --> 22:32:42,320
log out the optional remember it's a function

869
22:32:42,320 --> 22:32:46,400
we're going to make an anonymous function in here and returns a map

870
22:32:46,400 --> 22:32:50,232
and for the option of cancel we're going to say false and for the option of

871
22:32:50,232 --> 22:32:54,400
logout we're going to say true all right we're getting a huge error in here

872
22:32:54,400 --> 22:32:59,192
saying that there is a future of boolean you're returning a boolean optional

873
22:32:59,192 --> 22:33:04,000
for a function that is supposed to return a future of bull again remember

874
22:33:04,000 --> 22:33:07,832
on some platforms you're able to dismiss your dialogues without actually

875
22:33:07,832 --> 22:33:12,640
responding to any of the options presented in the dialogue in those

876
22:33:12,640 --> 22:33:16,800
platforms you actually need to guard yourself against that case by returning

877
22:33:16,800 --> 22:33:20,800
a default value so let's go in here and say then

878
22:33:20,800 --> 22:33:24,552
so if we get this value which as you can see is an optional bool then we say

879
22:33:24,552 --> 22:33:29,512
either return that or just return false and that's it we can put a comma at the

880
22:33:29,512 --> 22:33:34,400
end as well just to get the formatting right okay

881
22:33:34,400 --> 22:33:38,720
perfect um now what we need to do is now that we've written our show logout

882
22:33:38,720 --> 22:33:42,480
dialog we have to put it to use so let's go into our notes view

883
22:33:42,480 --> 22:33:45,360
and get help from your favorite editor to

884
22:33:45,360 --> 22:33:52,400
import your new logout dialog in here so that error goes away

885
22:33:52,400 --> 22:33:56,080
okay so we've actually worked on that so what i

886
22:33:56,080 --> 22:33:58,400
want to do is uh

887
22:33:58,400 --> 22:34:01,192
edit my caption a little bit and i'm sorry about and i'm sorry about this

888
22:34:01,192 --> 22:34:05,440
because this caption wasn't completely right so

889
22:34:05,440 --> 22:34:13,440
i need to fix that

890
22:34:13,440 --> 22:34:17,920
that's fine now let's now now that we've worked on the notes list view let's go

891
22:34:17,920 --> 22:34:23,280
and bring notes list view inside notes view all right so you can see here we

892
22:34:23,280 --> 22:34:27,832
have our notes view and but we also have our notes list view

893
22:34:27,832 --> 22:34:32,480
which we have to import in here i'm going to go to my notes and just to

894
22:34:32,480 --> 22:34:37,600
make sure i have everything in place all right so in this case that we have

895
22:34:37,600 --> 22:34:42,160
all notes let's go ahead and say we return an instance of our notes list

896
22:34:42,160 --> 22:34:44,872
view and this is gonna auto import it for me

897
22:34:44,872 --> 22:34:51,040
so like that and for the notes i'm going to say here are all the notes and

898
22:34:51,040 --> 22:34:54,480
upon the user wanting to delete a note i'm

899
22:34:54,480 --> 22:34:59,120
just going to get visual studio code to complete that for me you can see here

900
22:34:59,120 --> 22:35:04,400
and we get the note that the user wants to delete all right

901
22:35:04,400 --> 22:35:08,720
then in here we're going to make this function asynchronous and just a wait on

902
22:35:08,720 --> 22:35:12,872
our node service delete this

903
22:35:12,872 --> 22:35:16,800
node with this id

904
22:35:16,800 --> 22:35:20,552
all right i'm going to save now if you look at your

905
22:35:20,552 --> 22:35:25,832
code in here you can see we have one error here in our notes list view and

906
22:35:25,832 --> 22:35:31,920
let's go ahead and fix that and we can say it says show delete dialog

907
22:35:31,920 --> 22:35:37,120
and we haven't yet actually written the delete dialogue so

908
22:35:37,120 --> 22:35:41,512
what we need to do is need to go and fix that actually so it creates a delete

909
22:35:41,512 --> 22:35:44,480
dialogue as well

910
22:35:44,480 --> 22:35:51,040
so let's go inside our dialogues that we have here

911
22:35:51,040 --> 22:35:56,160
in here utilities dialogs so let's go and right click on it and

912
22:35:56,160 --> 22:36:00,872
create a new file called delete dialog

913
22:36:00,872 --> 22:36:05,512
and delete dialog is going to be very very similar to the log out dialog so

914
22:36:05,512 --> 22:36:09,512
let's just go ahead kind of maybe we could use the log out dialog so copy the

915
22:36:09,512 --> 22:36:13,680
code from log out dialog and bring it into your new file called

916
22:36:13,680 --> 22:36:17,040
delete dialog and just paste it in there and we're going to call this function

917
22:36:17,040 --> 22:36:20,720
show delete dialog

918
22:36:20,720 --> 22:36:23,280
okay and it's going to create a generic

919
22:36:23,280 --> 22:36:27,360
dialogue in here and in here we're going to say delete

920
22:36:27,360 --> 22:36:30,960
and we're just going to say are you sure you want to delete

921
22:36:30,960 --> 22:36:34,552
this item the option builder is going to be cancel

922
22:36:34,552 --> 22:36:37,280
false and then we're going to have an option that just

923
22:36:37,280 --> 22:36:41,760
says yes true all right so now you see how easy it is now that

924
22:36:41,760 --> 22:36:46,232
we have a generic dialog just we're reusing it everywhere okay

925
22:36:46,232 --> 22:36:50,872
so then let's go back to our notes list view and fix this function fix the

926
22:36:50,872 --> 22:36:53,760
calling of this function and get help from visual studio code to import our

927
22:36:53,760 --> 22:36:56,800
delete dialogue and that error also goes away

928
22:36:56,800 --> 22:37:02,400
so now i save my project and all of a sudden you see we have delete icons

929
22:37:02,400 --> 22:37:06,480
appear to our every tile and

930
22:37:06,480 --> 22:37:10,160
we should now be ready to actually put this into test so i'm going to tap on

931
22:37:10,160 --> 22:37:14,400
the hello world item here and now you see it says are you sure you want to

932
22:37:14,400 --> 22:37:18,800
delete delete this item pressing cancel doesn't do anything but if i press on it

933
22:37:18,800 --> 22:37:24,232
and say yes then the hello world note is deleted and our notes view is getting

934
22:37:24,232 --> 22:37:29,512
notified of that information from its stream builder because remember

935
22:37:29,512 --> 22:37:32,720
notes service as we have it here let's go to our

936
22:37:32,720 --> 22:37:35,760
services here uh crud

937
22:37:35,760 --> 22:37:39,512
and node service upon deleting a node let's have a look

938
22:37:39,512 --> 22:37:44,080
at the leaks node function here you see what it does is that if it could delete

939
22:37:44,080 --> 22:37:49,192
a node it actually removes it from its array of nodes and it notifies the

940
22:37:49,192 --> 22:37:53,920
stream controller actually no that's the delete node

941
22:37:53,920 --> 22:37:58,640
oh yeah basically it removes the node and then puts the entire array of nodes

942
22:37:58,640 --> 22:38:03,760
in the node stream controller okay so that's how the notes view is getting

943
22:38:03,760 --> 22:38:07,600
notified of a deletion of an item we can delete another one if you want and

944
22:38:07,600 --> 22:38:12,720
that's it so well done great job for sticking with

945
22:38:12,720 --> 22:38:16,160
me throughout this chapter this was probably one of like the most

946
22:38:16,160 --> 22:38:20,800
challenging chapters in that we had a lot of errors from the beginning

947
22:38:20,800 --> 22:38:25,832
and we had to fix them but one of my goals for for this course is

948
22:38:25,832 --> 22:38:29,280
not for you just to learn how to write flutter application but actually get in

949
22:38:29,280 --> 22:38:34,160
the mindset of a software developer so and every software developer they have

950
22:38:34,160 --> 22:38:37,760
their own preferences i included and one of my preferences when i'm doing

951
22:38:37,760 --> 22:38:40,480
refactoring is like to cut things from the source as i mentioned in the

952
22:38:40,480 --> 22:38:44,000
beginning of this chapter so that's why we got so many errors in the beginning

953
22:38:44,000 --> 22:38:47,360
but you stuck with me and we fixed all those errors and now we came out of this

954
22:38:47,360 --> 22:38:53,440
chapter actually quite victorious so now we have the delete functionality

955
22:38:53,440 --> 22:38:58,000
what we need to do now is just to go and we because we've done a lot of work what

956
22:38:58,000 --> 22:39:02,320
we need to make sure now is to commit and tag our work so that we don't

957
22:39:02,320 --> 22:39:06,160
lose this work so um i'm gonna do some um

958
22:39:06,160 --> 22:39:11,440
reorganization on the windows here so you see things a little bit better

959
22:39:11,440 --> 22:39:16,552
i'm going to increase the size okay and let's see now

960
22:39:16,552 --> 22:39:20,552
if we look at the previous tags we've come to tag 15 from the previous chapter

961
22:39:20,552 --> 22:39:25,600
and now we need to do a tag 16 okay so let's go and look at the status

962
22:39:25,600 --> 22:39:29,512
we have quite a lot of things that we've modified we've deleted the show error

963
22:39:29,512 --> 22:39:34,080
dialogue from before we've also excuse me we've also added a whole new

964
22:39:34,080 --> 22:39:38,320
folder here on under lib utilities dialogues

965
22:39:38,320 --> 22:39:42,640
so let's do get at all and let's look at the status

966
22:39:42,640 --> 22:39:45,760
a lot of things changed okay and what we're going to do is we're

967
22:39:45,760 --> 22:39:48,720
going to commit these and let's just say step

968
22:39:48,720 --> 22:39:53,760
16 okay and push your changes into your

969
22:39:53,760 --> 22:40:00,160
host git repo we're also going to tag as step 16 so

970
22:40:00,160 --> 22:40:05,280
and we're gonna push our tags if you look at your tags right now you

971
22:40:05,280 --> 22:40:09,680
have one two three four five six seven blah blah blah so we have all our tags

972
22:40:09,680 --> 22:40:14,800
up and including step 16. all right so that was for committing and also

973
22:40:14,800 --> 22:40:17,760
tagging our work as it's tradition we're going to talk

974
22:40:17,760 --> 22:40:22,160
about what we what we need to discuss in the next chapter

975
22:40:22,160 --> 22:40:25,680
you can see we have the ability to create new notes and we also have the

976
22:40:25,680 --> 22:40:28,872
ability to delete notes and also something that we didn't test is this

977
22:40:28,872 --> 22:40:33,440
thing that when we create a new note and if we back out of it you see that that

978
22:40:33,440 --> 22:40:37,280
note actually is deleted from the database so that's also working so we

979
22:40:37,280 --> 22:40:40,160
have the ability to delete notes and the ability to create notes but we don't

980
22:40:40,160 --> 22:40:43,920
have the ability to update notes and that's exactly what we're going to talk

981
22:40:43,920 --> 22:40:47,512
about in the next chapter so i'll see you there

982
22:40:47,512 --> 22:40:51,832
hello everyone and welcome to chapter 34 of the slaughter course in the previous

983
22:40:51,832 --> 22:40:55,600
chapters we've been talking quite a bit about how we can create

984
22:40:55,600 --> 22:40:59,192
and notes and how we can delete them so we've been working quite a bit with some

985
22:40:59,192 --> 22:41:03,120
generic dialogues that we've also developed in order to be able to handle

986
22:41:03,120 --> 22:41:06,960
error dialogues and also the log out dialogue for instance and also the

987
22:41:06,960 --> 22:41:10,400
delete dialogue so there's been quite a lot of work done on

988
22:41:10,400 --> 22:41:15,512
that side but we haven't really talked at all about how the user can tap on or

989
22:41:15,512 --> 22:41:18,960
click on their existing notes in order to be able to

990
22:41:18,960 --> 22:41:23,192
update that for instance and update that's a particular node so that's what

991
22:41:23,192 --> 22:41:27,440
we're gonna take care of in um this chapter

992
22:41:27,440 --> 22:41:30,480
so if we now start looking at the code that

993
22:41:30,480 --> 22:41:34,160
we've written you you will see that we've called

994
22:41:34,160 --> 22:41:39,192
the view that actually creates a note um the new node view

995
22:41:39,192 --> 22:41:42,000
however we're not going to go and create a whole

996
22:41:42,000 --> 22:41:47,512
new view that looks exactly the same as this new note view just so that we can

997
22:41:47,512 --> 22:41:51,920
update existing notes so the goal of this chapter is to reuse this view so

998
22:41:51,920 --> 22:41:55,832
that we can just use the exact same view but

999
22:41:55,832 --> 22:41:59,440
when we when the user taps on a note in the note list we're going to pass the

1000
22:41:59,440 --> 22:42:03,512
tapped note to this existing view all right so that's what

1001
22:42:03,512 --> 22:42:07,360
we're gonna take care of in this chapter let me do a little bit of a shuffling

1002
22:42:07,360 --> 22:42:10,720
around here so you'll see the screen better i'm gonna

1003
22:42:10,720 --> 22:42:14,000
bring up visual studio code as usual here

1004
22:42:14,000 --> 22:42:20,000
i have scrcpy who is taking care of this android screen

1005
22:42:20,000 --> 22:42:23,760
and we can then have a look at the first task that we have to do as you can see

1006
22:42:23,760 --> 22:42:29,040
in the cache it says we have to rename the new node to your dart to create

1007
22:42:29,040 --> 22:42:33,760
update node view alright so let's take care of that i'm going to close all the

1008
22:42:33,760 --> 22:42:37,120
tabs in here and let's go and say command p visual

1009
22:42:37,120 --> 22:42:42,080
studio code or maybe an android studio is another command that you have to

1010
22:42:42,080 --> 22:42:45,920
execute in order in order to bring up the list of files i don't really know

1011
22:42:45,920 --> 22:42:49,512
the command in android studio but if you're not comfortable with any of those

1012
22:42:49,512 --> 22:42:54,552
you can just go to this new note view right here and we are going to rename it

1013
22:42:54,552 --> 22:42:57,600
so let's just do that now so i'm just going

1014
22:42:57,600 --> 22:43:02,000
to call as a cache in the case create updates note view okay

1015
22:43:02,000 --> 22:43:09,192
create updates notes view like that if the updating i mean if if your editor

1016
22:43:09,192 --> 22:43:14,320
is intelligent enough and it has some like um refactoring features built in

1017
22:43:14,320 --> 22:43:16,960
then you don't have to do anything special

1018
22:43:16,960 --> 22:43:21,040
for for this command to work but um you can

1019
22:43:21,040 --> 22:43:25,280
see in here for instance now we've changed this file name to create updates

1020
22:43:25,280 --> 22:43:30,232
nodes view but we haven't really changed for instance the class name so if i go

1021
22:43:30,232 --> 22:43:34,640
here this thing is still called new node view all right

1022
22:43:34,640 --> 22:43:39,920
so let's go in there and perhaps change that as well let me go to my notes

1023
22:43:39,920 --> 22:43:45,512
uh let's see create update note view and we're going to go actually and

1024
22:43:45,512 --> 22:43:50,000
rename this new note view as well so let's go ahead and do some refactoring

1025
22:43:50,000 --> 22:43:54,080
in here so i'm just going to say refactor and let's see do we have any

1026
22:43:54,080 --> 22:44:00,552
refactoring features here um we have rename symbol so maybe let's use

1027
22:44:00,552 --> 22:44:06,800
that and i'm going to call it create update node view

1028
22:44:06,800 --> 22:44:09,832
right let's see if it's successfully going to

1029
22:44:09,832 --> 22:44:13,600
be able to rename this for me so i can see it renamed the class for me and it

1030
22:44:13,600 --> 22:44:18,480
also renamed the state class which is exactly what i needed so if i now save

1031
22:44:18,480 --> 22:44:22,552
this we should have some problems excuse me

1032
22:44:22,552 --> 22:44:26,080
but i can see visual studio code was intelligent enough actually to rename

1033
22:44:26,080 --> 22:44:30,000
the main dart reference to this route as well

1034
22:44:30,000 --> 22:44:33,600
remember when we created this create

1035
22:44:33,600 --> 22:44:36,552
or what we call it actually before it was called

1036
22:44:36,552 --> 22:44:38,800
um new note view

1037
22:44:38,800 --> 22:44:43,680
that note view was a new note view was actually being used inside our routes in

1038
22:44:43,680 --> 22:44:48,080
the main function of our of our application inside main.dart now that

1039
22:44:48,080 --> 22:44:52,800
we've renamed that to create update note view both the class name the stateful

1040
22:44:52,800 --> 22:44:57,512
widget and its state then that new name should be used in

1041
22:44:57,512 --> 22:45:01,360
main.dart so if you're using vim or any other

1042
22:45:01,360 --> 22:45:04,872
code editor like if you're using sublime supply may not have this refactoring

1043
22:45:04,872 --> 22:45:10,160
feature that can actually go and rename where you've used that symbol so you may

1044
22:45:10,160 --> 22:45:13,120
need to do that by hand so you may actually get some errors in your

1045
22:45:13,120 --> 22:45:16,960
main.dart file but if you get those errors don't worry

1046
22:45:16,960 --> 22:45:19,832
about it at least you know what the problem is okay so you can go and fix it

1047
22:45:19,832 --> 22:45:23,040
yourself

1048
22:45:23,040 --> 22:45:27,192
all right so we've done that and now what we need to do is i'm actually going

1049
22:45:27,192 --> 22:45:30,160
to press command s here and command s in here just to make sure everything's

1050
22:45:30,160 --> 22:45:35,360
saved and as the caption indicates remember we also have our routes inside

1051
22:45:35,360 --> 22:45:39,600
constants so you can see our route is still called

1052
22:45:39,600 --> 22:45:44,080
new node route okay so i'm gonna rename this now and i

1053
22:45:44,080 --> 22:45:48,160
suggest that you do the same thing too let's just say rename and let's rename

1054
22:45:48,160 --> 22:45:54,080
that to as the caching indicates create or update node route okay so create or

1055
22:45:54,080 --> 22:45:59,600
update snow throughout just like that and as you can see again visual studio

1056
22:45:59,600 --> 22:46:03,760
code helped us quite a lot now it went and updated this as well

1057
22:46:03,760 --> 22:46:05,832
you see right

1058
22:46:05,832 --> 22:46:09,512
and something also happened in the notes view as well i can see and that's

1059
22:46:09,512 --> 22:46:12,800
because you see the where we actually

1060
22:46:12,800 --> 22:46:19,040
press the plus button in here to create a new node that was also using the uh

1061
22:46:19,040 --> 22:46:21,680
previously uh named

1062
22:46:21,680 --> 22:46:26,640
new node route but now it's updated to create or update node routes so all i'm

1063
22:46:26,640 --> 22:46:31,120
trying to say in here you need to rename that route so that it becomes create or

1064
22:46:31,120 --> 22:46:35,360
update new node route and depending on your editor it may be smart enough to

1065
22:46:35,360 --> 22:46:38,160
have some refactoring features if it's like visual studio code then you're good

1066
22:46:38,160 --> 22:46:42,232
to go just rename it but if it's not you may have to do that by hand so just go

1067
22:46:42,232 --> 22:46:46,720
ahead and rename where you refactor in your code where you're using

1068
22:46:46,720 --> 22:46:50,640
that route to use the new name okay

1069
22:46:50,640 --> 22:46:54,160
all right so let's have a look at this dilemma now

1070
22:46:54,160 --> 22:46:57,120
you see in our

1071
22:46:57,120 --> 22:47:01,360
notes view when we create a new note we just say

1072
22:47:01,360 --> 22:47:09,040
navigator of context push name all right now the goal here is when we create this

1073
22:47:09,040 --> 22:47:13,512
nodes list view we're going to allow the users you see at the moment we have on

1074
22:47:13,512 --> 22:47:17,920
delete node but we're also going to have a parameter called untap we're going to

1075
22:47:17,920 --> 22:47:22,080
develop that soon but the dilemma here is that when you

1076
22:47:22,080 --> 22:47:26,080
then say on tap we need to also go to this view into

1077
22:47:26,080 --> 22:47:31,280
this route that we have create or update node route but we have to pass an

1078
22:47:31,280 --> 22:47:35,832
argument to that route an argument just as it is for a parameter of a function

1079
22:47:35,832 --> 22:47:40,480
or an argument to a function is like data that you pass to that

1080
22:47:40,480 --> 22:47:45,192
route and you say hey i'm initializing this route but i'm passing some data to

1081
22:47:45,192 --> 22:47:51,192
it so then that route can then in turn reactively sorry that ralph can then

1082
22:47:51,192 --> 22:47:55,040
react to that and go and read that argument and say oh was i pass an

1083
22:47:55,040 --> 22:47:58,872
argument yes then i'm going to do this was i not pass an argument then i'm

1084
22:47:58,872 --> 22:48:03,680
going to do something else in this case if you pass a note to our create or

1085
22:48:03,680 --> 22:48:07,600
update note route then it's going to say oh i have an existing node i'm just

1086
22:48:07,600 --> 22:48:11,760
going to populate myself and my contents with that note and i'm not going to

1087
22:48:11,760 --> 22:48:16,080
create a new node remember at the moment our create update note

1088
22:48:16,080 --> 22:48:18,960
view we have this function set up in here

1089
22:48:18,960 --> 22:48:24,232
that says create a new node we're gonna fix that soon okay but remember that

1090
22:48:24,232 --> 22:48:28,640
at the moment when you go into that view by default it's creating a new node and

1091
22:48:28,640 --> 22:48:31,920
we're gonna change that so that we're saying we're going to rename that and

1092
22:48:31,920 --> 22:48:37,040
saying like create or get note or something like that soon you'll see um

1093
22:48:37,040 --> 22:48:39,600
but in that function then we're going to say

1094
22:48:39,600 --> 22:48:44,080
where we passed an argument where we pass an existing note if yes we don't

1095
22:48:44,080 --> 22:48:48,232
have to create a new node if no we have to create one okay

1096
22:48:48,232 --> 22:48:53,440
so the way arguments work then is if you have a look at our notes view where

1097
22:48:53,440 --> 22:48:58,552
we're using push name there is a parameter in here called arguments and

1098
22:48:58,552 --> 22:49:02,800
as you can see at the moment it is just an optional object meaning that well it

1099
22:49:02,800 --> 22:49:06,720
can be no or no we're not we're not leveraging that at

1100
22:49:06,720 --> 22:49:12,080
the moment but we are going to soon so at the call side where you're creating a

1101
22:49:12,080 --> 22:49:15,120
where you're creating a route and pushing it to the to the

1102
22:49:15,120 --> 22:49:19,832
navigation stack you can pass your argument using that arguments parameter

1103
22:49:19,832 --> 22:49:23,120
okay and at the receiving side in this case

1104
22:49:23,120 --> 22:49:27,680
are let's see create or update node view here

1105
22:49:27,680 --> 22:49:32,232
in here you can read then your argument

1106
22:49:32,232 --> 22:49:36,232
let's see let's go to some place that does make sense let's say in here

1107
22:49:36,232 --> 22:49:40,552
okay you can read that argument calling now you don't have to type as i'm typing

1108
22:49:40,552 --> 22:49:46,400
i'm just demonstrating something to you okay and we can use model uh route

1109
22:49:46,400 --> 22:49:51,760
and we say of is context and then you can say settings

1110
22:49:51,760 --> 22:49:58,552
dot arguments then that's where you basically get access to your arguments

1111
22:49:58,552 --> 22:50:03,920
through your modal route so now you know how to pass arguments and you know also

1112
22:50:03,920 --> 22:50:08,080
how to receive them all right so

1113
22:50:08,080 --> 22:50:12,320
let's go to the next point um you see

1114
22:50:12,320 --> 22:50:19,120
we may need to somewhere also in the future receive an argument inside our

1115
22:50:19,120 --> 22:50:23,440
any of our widgets and that argument can be any type that

1116
22:50:23,440 --> 22:50:27,440
you specify for instance you can pass an integer from one screen to the other or

1117
22:50:27,440 --> 22:50:31,280
you can pass a string or you can pass an array or in our case you can pass a

1118
22:50:31,280 --> 22:50:35,360
database node so as you could see in in this code let's

1119
22:50:35,360 --> 22:50:39,120
go in here um

1120
22:50:39,120 --> 22:50:44,000
what's this optional yes settings and then arguments

1121
22:50:44,000 --> 22:50:48,160
you see at the moment this guy is an object so it doesn't really know what it

1122
22:50:48,160 --> 22:50:51,120
is but it'd be really good if you could

1123
22:50:51,120 --> 22:50:55,280
create a function somehow that allows us just to say for

1124
22:50:55,280 --> 22:51:01,920
instance context get object of type t something like that so we

1125
22:51:01,920 --> 22:51:04,960
could just say given a build context

1126
22:51:04,960 --> 22:51:10,872
we want to extract an argument of any type from it if that argument exists

1127
22:51:10,872 --> 22:51:13,680
okay and then we're going to use it in our

1128
22:51:13,680 --> 22:51:18,800
code in here and to and we get our build context and then grab our notes out of

1129
22:51:18,800 --> 22:51:23,440
it so it's what we're going to do is like create a generic way of extracting

1130
22:51:23,440 --> 22:51:27,440
arguments from our build context and that's exactly what we're going to do

1131
22:51:27,440 --> 22:51:30,480
now okay so

1132
22:51:30,480 --> 22:51:34,080
to do that we're going to create an extension on build context and that

1133
22:51:34,080 --> 22:51:39,040
extension is going to be called guest argument and as i've indicated in the um

1134
22:51:39,040 --> 22:51:43,192
as i've indicated here in the caption at the bottom of the screen you

1135
22:51:43,192 --> 22:51:46,160
can see that we are going to create a new file

1136
22:51:46,160 --> 22:51:52,552
under lib utilities generics and a file call gets arguments so you can see we

1137
22:51:52,552 --> 22:51:57,120
have utilities at the moment here and that utilities follow me just fold

1138
22:51:57,120 --> 22:52:01,120
everything in here so it's not so scary to look at you can see utilities

1139
22:52:01,120 --> 22:52:04,720
at the moment has a folder called dialogues under it but

1140
22:52:04,720 --> 22:52:08,160
what we want to create is a folder called generics and then a file under

1141
22:52:08,160 --> 22:52:11,920
that called get arguments okay so

1142
22:52:11,920 --> 22:52:17,680
uh let's go ahead and do that right now so i'm gonna go to uh

1143
22:52:17,680 --> 22:52:21,760
utilities where where to go utilities dialogues okay so i'm just gonna right

1144
22:52:21,760 --> 22:52:25,920
right click on utilities and say new file and i'm gonna say generics

1145
22:52:25,920 --> 22:52:30,800
lyrics and get arguments dot

1146
22:52:30,800 --> 22:52:36,320
dart now in here what we need is um

1147
22:52:36,320 --> 22:52:41,440
to just start writing our extensions so i'm just going to say extension

1148
22:52:41,440 --> 22:52:45,920
and get argument on build context okay

1149
22:52:45,920 --> 22:52:50,080
now if i typed build context visual studio

1150
22:52:50,080 --> 22:52:54,000
code was smart enough to import material if you're using sublime or any other

1151
22:52:54,000 --> 22:52:57,192
text editor it may not be intelligent enough to do that for you may not have

1152
22:52:57,192 --> 22:53:00,720
like the extension to work with dart and flutter and

1153
22:53:00,720 --> 22:53:05,512
kind of so you may have to import material yourself but remember we also

1154
22:53:05,512 --> 22:53:10,080
only need um build context and modal route from

1155
22:53:10,080 --> 22:53:15,360
entire material uh packaging here so it would be it would make a lot more sense

1156
22:53:15,360 --> 22:53:19,360
if you just say show build context

1157
22:53:19,360 --> 22:53:23,440
and modal route

1158
22:53:23,440 --> 22:53:29,600
right so we're not going to use more from the material package

1159
22:53:29,600 --> 22:53:32,640
than those two

1160
22:53:32,640 --> 22:53:36,552
all right so let's go ahead and create this function so we're saying

1161
22:53:36,552 --> 22:53:42,320
that we are going to optionally return a value of type t that means any type that

1162
22:53:42,320 --> 22:53:46,800
you ask us to and we're going to call this function get

1163
22:53:46,800 --> 22:53:51,920
argument okay and get argument itself takes t all

1164
22:53:51,920 --> 22:53:56,640
right so in here what we're going to say is going to say modal route is model

1165
22:53:56,640 --> 22:54:01,360
route of our build context

1166
22:54:01,360 --> 22:54:05,760
or this because you see we we are creating an extension on build

1167
22:54:05,760 --> 22:54:11,192
context and this identifier in here refers to the current build context on

1168
22:54:11,192 --> 22:54:15,192
which the get argument function is actually invoked so if you're not

1169
22:54:15,192 --> 22:54:18,800
familiar with extensions i've talked about them before

1170
22:54:18,800 --> 22:54:23,600
and so it i think it was part of also the dart introduction in the beginning

1171
22:54:23,600 --> 22:54:26,872
absolute beginning of this course so you may want to go back to that in order to

1172
22:54:26,872 --> 22:54:32,160
understand how extensions actually work okay so remember model route in here if

1173
22:54:32,160 --> 22:54:36,000
you look at it it can be an optional in here you see so

1174
22:54:36,000 --> 22:54:40,800
what we need to do is to guard ourselves against that so we just say if modal

1175
22:54:40,800 --> 22:54:44,000
route is not null

1176
22:54:44,000 --> 22:54:47,600
and otherwise we're just going to return null we're saying that if we can't get

1177
22:54:47,600 --> 22:54:52,800
the model route then we can't extract any argument from it okay so let's get

1178
22:54:52,800 --> 22:54:55,192
the let's get all the arguments from our

1179
22:54:55,192 --> 22:54:59,680
model route now so we're gonna say args is model route settings

1180
22:54:59,680 --> 22:55:06,320
dot arguments okay and then remember args is also now an object as it was

1181
22:55:06,320 --> 22:55:11,760
on the call site the call site may skip over passing an argument to us and we in

1182
22:55:11,760 --> 22:55:14,960
that case we're not going to get any arguments which means args is going to

1183
22:55:14,960 --> 22:55:19,360
be null in here okay so let's just guard ourselves against

1184
22:55:19,360 --> 22:55:23,832
that so we say if args is not null and args

1185
22:55:23,832 --> 22:55:29,832
is of this given type then we're going to return rx okay uh oops

1186
22:55:29,832 --> 22:55:35,120
rx as t so what we're saying in here is that if

1187
22:55:35,120 --> 22:55:40,320
we could grab any arguments from um our modal route settings arguments and if

1188
22:55:40,320 --> 22:55:45,280
that argument is of the type that you are asking this function to extract then

1189
22:55:45,280 --> 22:55:48,640
we're going to give it back to otherwise we're just going to fall through to line

1190
22:55:48,640 --> 22:55:52,872
number 12 in here and just return and null all right

1191
22:55:52,872 --> 22:55:56,872
now i'm going to save this file okay

1192
22:55:56,872 --> 22:56:01,832
that was that part now what we need is let me bring up the

1193
22:56:01,832 --> 22:56:06,080
caption so you see what we have to do

1194
22:56:06,080 --> 22:56:11,760
so let's now go to our view which we call create actually it's

1195
22:56:11,760 --> 22:56:15,040
easy now now that we have a lot of files in our project it's actually easier to

1196
22:56:15,040 --> 22:56:18,872
navigate if we just do command p in visual studio code for instance to jump

1197
22:56:18,872 --> 22:56:23,512
to specific files so in that file it is now called

1198
22:56:23,512 --> 22:56:27,192
create update node view so let's go there

1199
22:56:27,192 --> 22:56:32,480
and as the caption indicates our creates note in here let's have a look and see

1200
22:56:32,480 --> 22:56:36,480
if we can find that function create new node here you see

1201
22:56:36,480 --> 22:56:40,960
so what we need to do is we just need to rename that um

1202
22:56:40,960 --> 22:56:44,872
create new notes to ask them captions to get create or get

1203
22:56:44,872 --> 22:56:48,640
existing notes so i'm gonna do that i'm gonna say create

1204
22:56:48,640 --> 22:56:53,832
or get existing note and again we just do the code smart

1205
22:56:53,832 --> 22:56:57,920
enough to rename where i'm actually using that function as well you can see

1206
22:56:57,920 --> 22:57:02,552
in here okay so you may otherwise if you're not using

1207
22:57:02,552 --> 22:57:05,920
visual code or if you're not using the refactoring features of your favorite

1208
22:57:05,920 --> 22:57:10,640
editor you may have to rename that a call site as well

1209
22:57:10,640 --> 22:57:14,400
so i don't think i have to mention this again i think i've now mentioned it

1210
22:57:14,400 --> 22:57:17,512
three times so just so you know if you're renaming something just make sure

1211
22:57:17,512 --> 22:57:23,440
that all the call sites are also updated okay

1212
22:57:23,440 --> 22:57:29,600
all right so now that we've done that we actually need to grab the existing nodes

1213
22:57:29,600 --> 22:57:32,960
if it is already there okay

1214
22:57:32,960 --> 22:57:37,832
so um so let's do that you can see it says in

1215
22:57:37,832 --> 22:57:42,872
create or get existing no gets note argument if any all right

1216
22:57:42,872 --> 22:57:48,720
so let's then in here say if we if our widgets like the widget that actually

1217
22:57:48,720 --> 22:57:52,720
called us created us has passed us an argument of type

1218
22:57:52,720 --> 22:57:56,080
database note then we're going to get that okay so let's just call it widget

1219
22:57:56,080 --> 22:57:58,872
note is um

1220
22:57:58,872 --> 22:58:02,552
we need now a build context because remember our extension was created on

1221
22:58:02,552 --> 22:58:06,720
build context however this function at the moment has no build context so let's

1222
22:58:06,720 --> 22:58:10,160
go ahead and pass a build context in here

1223
22:58:10,160 --> 22:58:13,760
okay so let's then go into the call site and

1224
22:58:13,760 --> 22:58:17,832
pass the build context in here call context which is passed to us in the

1225
22:58:17,832 --> 22:58:23,120
build function all right so trusting that you've done that

1226
22:58:23,120 --> 22:58:26,480
we're now going to go and say context get

1227
22:58:26,480 --> 22:58:31,832
and you see now we need our get argument function in here but as i type nothing

1228
22:58:31,832 --> 22:58:35,192
appears here and that's because we don't have an import so

1229
22:58:35,192 --> 22:58:38,640
i can see if i just type get the argument and ask visual studio code to

1230
22:58:38,640 --> 22:58:43,480
see if it can solve that problem for me it's saying that oh there is again

1231
22:58:43,480 --> 22:58:47,440
arguments.dart file which has a function do you want me to import it so i'm just

1232
22:58:47,440 --> 22:58:50,960
going to say yes please otherwise if you're not doing this you

1233
22:58:50,960 --> 22:58:55,600
may have to import your get arguments.dart file by hand all right so

1234
22:58:55,600 --> 22:58:59,192
now i'm just saying get arguments and remember get arguments function in

1235
22:58:59,192 --> 22:59:05,040
itself has no parameters so how do you call this function okay how do you tell

1236
22:59:05,040 --> 22:59:09,440
it to extract a t of like database node well that's very

1237
22:59:09,440 --> 22:59:13,680
easy you just put this less than sign and and grade it inside

1238
22:59:13,680 --> 22:59:18,000
like that and then you type the type of object that you want to extract so if we

1239
22:59:18,000 --> 22:59:21,680
just say data base notes all right

1240
22:59:21,680 --> 22:59:27,192
and now that we did that remember get arguments returns an optional object of

1241
22:59:27,192 --> 22:59:31,680
that type and in this case our database node is then an optional database node

1242
22:59:31,680 --> 22:59:35,040
all right meaning that you either have a node

1243
22:59:35,040 --> 22:59:38,960
so that the user has tapped on an existing node and came here or you don't

1244
22:59:38,960 --> 22:59:43,360
meaning that a user tapped on the plus button and came here okay

1245
22:59:43,360 --> 22:59:48,640
so then we say if the widget node is not null meaning that we are updating

1246
22:59:48,640 --> 22:59:52,232
an existing node so that the user has tapped on an existing node and ended up

1247
22:59:52,232 --> 22:59:54,640
on the screen then what we're going to do we're going

1248
22:59:54,640 --> 22:59:59,280
to save that inside our node private variable here

1249
22:59:59,280 --> 23:00:02,872
i think we set it up somewhere around here you see

1250
23:00:02,872 --> 23:00:05,760
so we're going to say our node is the widget node

1251
23:00:05,760 --> 23:00:09,120
okay and in this case what we also need to do

1252
23:00:09,120 --> 23:00:15,120
we need to make sure that the text field inside our on our screen

1253
23:00:15,120 --> 23:00:17,920
and i can show you here so if you go here

1254
23:00:17,920 --> 23:00:22,080
this text field it should be pre-populated with that existing notes

1255
23:00:22,080 --> 23:00:26,720
text and the way we can do that i mean we don't have direct access to our text

1256
23:00:26,720 --> 23:00:31,680
field but what we do have is this text controller which we set up in here text

1257
23:00:31,680 --> 23:00:36,320
controller okay so let's go and set that text controller's text so i'm just gonna

1258
23:00:36,320 --> 23:00:42,000
say text controller the text is equal to widget note

1259
23:00:42,000 --> 23:00:46,480
dot text and then we're just going to return the

1260
23:00:46,480 --> 23:00:51,680
widget note so the notes that we

1261
23:00:51,680 --> 23:00:55,192
could extract okay otherwise uh

1262
23:00:55,192 --> 23:00:59,600
what we're doing in here we're saying existing note notes so the logic

1263
23:00:59,600 --> 23:01:03,512
is going to stay the same the rest so if we could extract the node from the

1264
23:01:03,512 --> 23:01:08,232
passing widget or the color widget then we set that as our node set the text and

1265
23:01:08,232 --> 23:01:12,160
then just return the widget note otherwise we continue exactly as we did

1266
23:01:12,160 --> 23:01:16,552
before okay so let's see in here what we're also

1267
23:01:16,552 --> 23:01:21,680
doing existing note we're just returning in but i can also see that upon doing a

1268
23:01:21,680 --> 23:01:26,720
creates note in here we're not setting that note so what we need to do in here

1269
23:01:26,720 --> 23:01:31,040
let's just say final new note okay

1270
23:01:31,040 --> 23:01:35,440
and and then we store that note we say note is

1271
23:01:35,440 --> 23:01:39,760
new note and then we just say return you know so

1272
23:01:39,760 --> 23:01:45,120
in here we're also saving our notes okay so that's really good so we actually

1273
23:01:45,120 --> 23:01:49,832
working with an existing notes all right

1274
23:01:49,832 --> 23:01:53,192
okay so i'm actually not sure how this has

1275
23:01:53,192 --> 23:01:57,600
worked before this may have been a bug in the previous um sections in that we

1276
23:01:57,600 --> 23:02:01,440
didn't actually store the node in this node private variable

1277
23:02:01,440 --> 23:02:04,552
so maybe we had that bug from before i

1278
23:02:04,552 --> 23:02:09,040
can't be completely sure about that so i'm just gonna press back in here but if

1279
23:02:09,040 --> 23:02:12,800
you had that bug as well if you were like returning just on a weight of node

1280
23:02:12,800 --> 23:02:17,192
service create node and you weren't saving that i'm not sure how these

1281
23:02:17,192 --> 23:02:20,160
um these functions were actually working

1282
23:02:20,160 --> 23:02:24,160
because i personally oh i can see that we were setting it in

1283
23:02:24,160 --> 23:02:29,120
here so we may not have to do that anymore so let's then go ahead and i

1284
23:02:29,120 --> 23:02:34,720
mean this was quite smart but it wasn't that good idea that the widget's build

1285
23:02:34,720 --> 23:02:39,760
function was changing like a core part of this widget so let's

1286
23:02:39,760 --> 23:02:44,640
remove that now okay how it was working so that's the reason

1287
23:02:44,640 --> 23:02:49,832
it was working but it shouldn't work like that all right

1288
23:02:49,832 --> 23:02:53,920
okay let's move to the next section now um

1289
23:02:53,920 --> 23:02:59,120
you see if we go back to this part in here if i press the delete

1290
23:02:59,120 --> 23:03:02,320
button do you remember this we developed this

1291
23:03:02,320 --> 23:03:06,552
in one of the previous chapters of this course we made sure that we have a

1292
23:03:06,552 --> 23:03:10,552
callback and that callback was defined let's go in our

1293
23:03:10,552 --> 23:03:15,512
notes list view i'm actually going to do it like this notes list view

1294
23:03:15,512 --> 23:03:19,120
do you remember this callback it's called delete note callback

1295
23:03:19,120 --> 23:03:23,920
it was just a function that returned nothing and accepted the notes and this

1296
23:03:23,920 --> 23:03:27,360
way we could tell the notes view that hey

1297
23:03:27,360 --> 23:03:31,680
the user wants to delete a note do it delete that now

1298
23:03:31,680 --> 23:03:35,040
and that was being called upon the user pressing the yes button remember it's

1299
23:03:35,040 --> 23:03:38,320
this view that is actually showing the delete

1300
23:03:38,320 --> 23:03:42,080
dialog all right but if you look at that

1301
23:03:42,080 --> 23:03:45,360
but if you look at this delete node callback

1302
23:03:45,360 --> 23:03:49,832
what is it actually a call backup is a callback of a note all right so it has

1303
23:03:49,832 --> 23:03:53,920
nothing really to do with delete it's just called delete node callback all

1304
23:03:53,920 --> 23:03:58,320
right can we utilize this also to

1305
23:03:58,320 --> 23:04:02,320
tell somehow when the any of these notes is

1306
23:04:02,320 --> 23:04:07,512
tapped can we utilize the exact same function to tell the notes list view

1307
23:04:07,512 --> 23:04:13,120
sorry to tell the notes view that hey you the user tapped on a note well of

1308
23:04:13,120 --> 23:04:16,480
course we could do that because it has no return value and it just

1309
23:04:16,480 --> 23:04:20,552
accepts a note so we have a little problem with the naming of this right

1310
23:04:20,552 --> 23:04:23,680
now it's just called delete note call back but it shouldn't be all right so

1311
23:04:23,680 --> 23:04:27,120
we're going to utilize that both for delete and also for tapping

1312
23:04:27,120 --> 23:04:31,192
on an existing node so let me bring up the caption let's rename

1313
23:04:31,192 --> 23:04:35,360
that delete node callback to just node callback so i'm going to right click on

1314
23:04:35,360 --> 23:04:40,480
it i'm just going to say rename rename symbol and let's just call it

1315
23:04:40,480 --> 23:04:44,720
node callback okay and now you can see it's actually renamed it here for me as

1316
23:04:44,720 --> 23:04:48,552
well and everything should be working the way

1317
23:04:48,552 --> 23:04:51,920
it was before so we don't have to do anything special it's just called node

1318
23:04:51,920 --> 23:04:56,320
callback now all right

1319
23:04:56,320 --> 23:04:59,832
okay let's move on to the next section now

1320
23:04:59,832 --> 23:05:04,640
which is very related so what we need to do now is you see at the moment the

1321
23:05:04,640 --> 23:05:11,760
nodes list view it's not handling at all the user tapping on any of these list

1322
23:05:11,760 --> 23:05:15,680
tiles and we're going to fix that so i'm just going to go to my notes

1323
23:05:15,680 --> 23:05:21,192
and make sure that i have all the information here

1324
23:05:21,192 --> 23:05:26,320
so what we need now is just to make sure that the user can tap um

1325
23:05:26,320 --> 23:05:31,600
on those uh on the on tap all right so sorry that the user can tap on these

1326
23:05:31,600 --> 23:05:37,120
list tiles and then um we're then going to call a function just like the node

1327
23:05:37,120 --> 23:05:41,760
callback and tell our owner widget that hey the user tapped on one

1328
23:05:41,760 --> 23:05:45,600
of these just do whatever you want so let's go ahead and add a field here and

1329
23:05:45,600 --> 23:05:51,040
say on tap sorry note callback and we'll just call it ontap

1330
23:05:51,040 --> 23:05:54,480
the constructor is not happy now saying that yeah you have a final field that

1331
23:05:54,480 --> 23:05:58,480
you haven't initialized so let's just add that here right after undelete and

1332
23:05:58,480 --> 23:06:03,120
i'm just going to make this required parameter and a comma at the end just to

1333
23:06:03,120 --> 23:06:06,400
make sure that you get the formatting right as well

1334
23:06:06,400 --> 23:06:10,720
we're not using on tap right now and if you've noticed we've also broken the

1335
23:06:10,720 --> 23:06:14,080
notes here that's okay we'll get there we'll fix that soon the reason we've

1336
23:06:14,080 --> 23:06:17,600
broken note2 is because we're not passing on tap since it's a required

1337
23:06:17,600 --> 23:06:23,040
parameter okay we're gonna fix this luckily in order to handle tabs on a

1338
23:06:23,040 --> 23:06:26,872
list tile we don't have to work with gesture recognition or anything like

1339
23:06:26,872 --> 23:06:31,832
that but what we could do is just to say untapped you see it's already there so

1340
23:06:31,832 --> 23:06:36,080
there is a function that has no parameters

1341
23:06:36,080 --> 23:06:40,320
and what we need to do in here just to call our own ontap in here and you can

1342
23:06:40,320 --> 23:06:45,440
see we have to pass a database node and luckily we already have i believe a note

1343
23:06:45,440 --> 23:06:48,552
right here okay so we're just gonna say untap and

1344
23:06:48,552 --> 23:06:52,960
note that's it

1345
23:06:52,960 --> 23:06:59,192
okay um so we're doing that now now what we need to do is to go back to

1346
23:06:59,192 --> 23:07:03,192
our notes view and handle that case you see

1347
23:07:03,192 --> 23:07:06,960
so i'm going to go back to our note 2 and and scroll to the part where we're

1348
23:07:06,960 --> 23:07:11,600
getting an error and we have on delete um

1349
23:07:11,600 --> 23:07:16,400
but we don't have the on tap so i'm going to go to my notes as well all

1350
23:07:16,400 --> 23:07:20,400
right now in here right after on delete note

1351
23:07:20,400 --> 23:07:24,000
let's go and add this untapped functionality in here

1352
23:07:24,000 --> 23:07:27,280
and you can see visuals helping me and saying oh this function actually accepts

1353
23:07:27,280 --> 23:07:33,192
a node so if i move my mouse over it it already tells me it's a database node

1354
23:07:33,192 --> 23:07:37,120
and remember that's just what the nodes list view is giving us all right

1355
23:07:37,120 --> 23:07:41,832
and then here let's make this function an asynchronous function the reason for

1356
23:07:41,832 --> 23:07:45,360
that is because we're going to actually grab our

1357
23:07:45,360 --> 23:07:47,920
um let me actually see if we have to make

1358
23:07:47,920 --> 23:07:50,640
it asynchronous i don't think it needs to be async first let's just not make it

1359
23:07:50,640 --> 23:07:54,080
asynchronous i had it as asynchronous in my notes and i thought that we have to

1360
23:07:54,080 --> 23:07:56,400
do that but maybe there is a reason behind it i

1361
23:07:56,400 --> 23:07:59,920
don't know yet but uh let's just go ahead and not add asynchronous at the

1362
23:07:59,920 --> 23:08:03,440
moment so what we need to do in this case is

1363
23:08:03,440 --> 23:08:07,440
also do something very similar to what we're doing in here navigator of blah

1364
23:08:07,440 --> 23:08:12,720
blah push no not that one sorry this one navigator of context push name create or

1365
23:08:12,720 --> 23:08:18,080
update note route so it may actually make sense to copy that code and let's

1366
23:08:18,080 --> 23:08:21,832
go to in on tab and paste that i'm going to

1367
23:08:21,832 --> 23:08:25,192
put a comma here so it breaks it down for me

1368
23:08:25,192 --> 23:08:28,800
and in here what we're going to do is just to say arguments and we're going to

1369
23:08:28,800 --> 23:08:31,512
pass the notes there okay

1370
23:08:31,512 --> 23:08:34,552
so we're just saying that here's a note and

1371
23:08:34,552 --> 23:08:38,640
go to that screen and pass that argument to it then when we go to

1372
23:08:38,640 --> 23:08:42,552
the um create update note view

1373
23:08:42,552 --> 23:08:46,232
this function gets called create or get existing node

1374
23:08:46,232 --> 23:08:49,512
which in turn tries to grab that argument of type

1375
23:08:49,512 --> 23:08:53,512
database node from our context using our get argument

1376
23:08:53,512 --> 23:08:57,192
generic function which then goes to the modal route of that context and then

1377
23:08:57,192 --> 23:09:01,360
grabs that argument so it's like three layers of extraction but that's that's

1378
23:09:01,360 --> 23:09:04,872
quite fine now at least you have a generic function to grab your arguments

1379
23:09:04,872 --> 23:09:10,000
okay so i'm going to press command s it might be good to do a hot reload

1380
23:09:10,000 --> 23:09:14,160
sorry hot restart just because we've done quite a bit of

1381
23:09:14,160 --> 23:09:18,720
changing so i'm going to delete these two nodes like that and then i'm gonna

1382
23:09:18,720 --> 23:09:24,872
press the plus button let's just in here i'm gonna say my note

1383
23:09:24,872 --> 23:09:28,552
number one i'm gonna go back and then i'm gonna

1384
23:09:28,552 --> 23:09:31,600
press press and i'm just gonna say my note

1385
23:09:31,600 --> 23:09:35,600
number two now i have my note number one and two in

1386
23:09:35,600 --> 23:09:39,832
here then i'm now gonna test that to see that we can actually go and edit an

1387
23:09:39,832 --> 23:09:43,512
existing note all right so i'm gonna go to my note number one and tap on it and

1388
23:09:43,512 --> 23:09:48,960
now i can see i actually went to our notes and it says it still says new

1389
23:09:48,960 --> 23:09:52,480
notes and maybe that's okay we could just

1390
23:09:52,480 --> 23:09:56,400
leave it like that we could update the text maybe later that's that's fine

1391
23:09:56,400 --> 23:09:59,512
but at least i can see the text so i'm now going to change actually this my new

1392
23:09:59,512 --> 23:10:04,872
note sorry my note 1 to my note 3 and go back and i can see now i have my note 2

1393
23:10:04,872 --> 23:10:09,192
and 3. so this is a really good sign because that means that updating an

1394
23:10:09,192 --> 23:10:13,440
existing note is actually working and we're not creating a new note because

1395
23:10:13,440 --> 23:10:16,552
otherwise that note would have appeared in this list so i'm going to go to this

1396
23:10:16,552 --> 23:10:21,040
new note 3 and then change it to one as well so now you see it gets

1397
23:10:21,040 --> 23:10:26,720
updated all right perfect we got updating working and it

1398
23:10:26,720 --> 23:10:29,920
was quite a breeze to be honest with you if you ask me so

1399
23:10:29,920 --> 23:10:33,832
well done um what we need now is to make sure we

1400
23:10:33,832 --> 23:10:38,400
don't lose our code so let's go as we usually do at the end of every chapter

1401
23:10:38,400 --> 23:10:43,680
and we're gonna go commit and tag our code okay i'm gonna change the screen

1402
23:10:43,680 --> 23:10:49,760
layout and i'm then going to increase the size of the screen so you

1403
23:10:49,760 --> 23:10:54,720
see what i'm doing a little bit better let's go to our terminal and if you look

1404
23:10:54,720 --> 23:10:58,800
at oops if you look at

1405
23:10:58,800 --> 23:11:04,872
um i think it's was it command k yeah let's look at our git log and you see

1406
23:11:04,872 --> 23:11:10,160
the last uh commit that we did was step 16 and also your tags the last tag was

1407
23:11:10,160 --> 23:11:13,832
also step 16 okay let's go and commit now

1408
23:11:13,832 --> 23:11:16,480
as maybe before that let's have a look at

1409
23:11:16,480 --> 23:11:19,760
status and a bit has changed modified modified

1410
23:11:19,760 --> 23:11:23,680
deleted it thinks that this file was deleted

1411
23:11:23,680 --> 23:11:28,640
though it really wasn't um it was just renamed so

1412
23:11:28,640 --> 23:11:31,832
um that's unfortunate that it marked it as

1413
23:11:31,832 --> 23:11:36,720
deleted that's okay though but a little bit unfortunate there there are ways of

1414
23:11:36,720 --> 23:11:40,720
doing that so that git actually understands that you rename the file but

1415
23:11:40,720 --> 23:11:44,480
i can see that visual studio code wasn't able to actually mark that as rename and

1416
23:11:44,480 --> 23:11:48,400
it also it just marked it basically was marked as deleted

1417
23:11:48,400 --> 23:11:52,160
but that's okay we can live with that so let's just say git add all and let's

1418
23:11:52,160 --> 23:11:56,800
just say then git commit step 17

1419
23:11:56,800 --> 23:11:59,832
all right and then we just say git push so we push

1420
23:11:59,832 --> 23:12:03,192
all our changes and let's do a git status to make sure we didn't leave any

1421
23:12:03,192 --> 23:12:07,120
files behind and we haven't so in here we're then going to say get

1422
23:12:07,120 --> 23:12:12,872
tag step 17 as well and push our tags okay

1423
23:12:12,872 --> 23:12:16,000
so that part is now done we've

1424
23:12:16,000 --> 23:12:19,280
done our updating of

1425
23:12:19,280 --> 23:12:24,480
existing notes and that's fantastic so as is tradition for every chapter in

1426
23:12:24,480 --> 23:12:29,280
this course we always talk about what we when we need to work on in the coming

1427
23:12:29,280 --> 23:12:31,920
chapter so

1428
23:12:31,920 --> 23:12:35,040
we have a little bit of a problem in our source code at the moment and that is

1429
23:12:35,040 --> 23:12:39,360
inside our node service so i'm going to get rid of this bottom bar here and go

1430
23:12:39,360 --> 23:12:42,960
to node service and you can see in our node service

1431
23:12:42,960 --> 23:12:47,600
we're exposing a functionality here called gets all nodes actually i don't

1432
23:12:47,600 --> 23:12:51,040
think we're using this get all notes we're just using

1433
23:12:51,040 --> 23:12:54,640
all notes stream and um

1434
23:12:54,640 --> 23:12:58,000
let's see where that is here all notes stream and that is just reading the

1435
23:12:58,000 --> 23:13:01,280
notes stream controllers stream and

1436
23:13:01,280 --> 23:13:04,720
and uh that is coming from here you can see

1437
23:13:04,720 --> 23:13:09,280
from our notes and that notes is

1438
23:13:09,280 --> 23:13:17,920
being populated inside let's see get all nodes remove we have here

1439
23:13:17,920 --> 23:13:23,360
so you see we are at the moment reading all notes and we're just exposing them

1440
23:13:23,360 --> 23:13:28,960
to the outside world but wait a minute our application has the concept of users

1441
23:13:28,960 --> 23:13:33,360
so so if we if we now log out of the

1442
23:13:33,360 --> 23:13:37,600
application and log back in with another user then

1443
23:13:37,600 --> 23:13:43,440
that new user is going to see my notes because there is nowhere inside this

1444
23:13:43,440 --> 23:13:48,480
node service that we have a concept of a user like we're not actually filtering

1445
23:13:48,480 --> 23:13:52,800
these things out and exposing only relevant data to the user okay so

1446
23:13:52,800 --> 23:13:56,720
we need to fix that it's very serious uh it's not a bug it's actually something

1447
23:13:56,720 --> 23:13:59,920
that i've intentionally left until this point because yeah we didn't have to

1448
23:13:59,920 --> 23:14:03,760
handle that it was just more fun to work with the ui of the application but we

1449
23:14:03,760 --> 23:14:06,552
have to be very conscious about these little things that we haven't

1450
23:14:06,552 --> 23:14:10,400
implemented and that's exactly what we're gonna do and fix in the next

1451
23:14:10,400 --> 23:14:12,872
chapter so i'll see you there

1452
23:14:12,872 --> 23:14:16,872
hello everyone and welcome to chapter 35 of the swati course

1453
23:14:16,872 --> 23:14:20,720
in the previous chapter as you saw we started talking about how we can update

1454
23:14:20,720 --> 23:14:26,640
an existing node in the node list and we refactored our new node view as it was

1455
23:14:26,640 --> 23:14:31,680
called before to become i believe create update node view and this node view is

1456
23:14:31,680 --> 23:14:35,192
now able to do two things either create a new node

1457
23:14:35,192 --> 23:14:40,320
or update an existing one so we didn't create a whole new view just to be able

1458
23:14:40,320 --> 23:14:44,000
to update an existing node so that went really fine

1459
23:14:44,000 --> 23:14:47,040
and however as i mentioned

1460
23:14:47,040 --> 23:14:50,960
at the end of the previous chapter we have a little bit of a problem with our

1461
23:14:50,960 --> 23:14:56,552
node service in that right now node service doesn't really take into

1462
23:14:56,552 --> 23:15:02,320
consideration which users logged into the application and hence it cannot

1463
23:15:02,320 --> 23:15:06,320
return relevant nodes for that particular user so what the node service

1464
23:15:06,320 --> 23:15:09,360
at the moment is doing is just fetching all the nodes from the database and

1465
23:15:09,360 --> 23:15:13,680
returning it to the current user this is going to cause an issue in that when we

1466
23:15:13,680 --> 23:15:17,600
log in with one user we're going to see all the nodes in the system and when we

1467
23:15:17,600 --> 23:15:21,512
log out with a user and log in with a completely new user we're again going to

1468
23:15:21,512 --> 23:15:24,960
see all the notes that are stored in the note server so we have to fix that in

1469
23:15:24,960 --> 23:15:29,600
this chapter before we get started with that we have

1470
23:15:29,600 --> 23:15:33,360
a little bit of a problem with our updating

1471
23:15:33,360 --> 23:15:36,400
and this is a bug that's been inside the application for a while since we

1472
23:15:36,400 --> 23:15:40,480
basically created our cloud service and we have to fix that so let's have a look

1473
23:15:40,480 --> 23:15:43,920
at what this bug actually is before i can

1474
23:15:43,920 --> 23:15:47,192
before we go on so i'm going to put scrcpy in here

1475
23:15:47,192 --> 23:15:51,120
and i'm going to put visual studio code in here as well

1476
23:15:51,120 --> 23:15:55,040
all right so i hope you can see the screen so here right now we have um

1477
23:15:55,040 --> 23:15:58,160
maybe i don't have to hope for it i could just bring the screen to be a

1478
23:15:58,160 --> 23:16:03,440
little bit bigger so if you look in scr cpy right now we have two my note number

1479
23:16:03,440 --> 23:16:08,160
two and that is exactly the box so let's go in here and to the first one and i'm

1480
23:16:08,160 --> 23:16:11,512
just gonna say my note number one oops

1481
23:16:11,512 --> 23:16:15,920
and go out and everything looks fine right now it's just because we are

1482
23:16:15,920 --> 23:16:20,552
updating our local cache as well so things are looking good however if you

1483
23:16:20,552 --> 23:16:27,120
do a hot restart of the application and my scr cpy just died so that's okay

1484
23:16:27,120 --> 23:16:31,760
i can live with that it's a free software so as your cpy and and i can

1485
23:16:31,760 --> 23:16:37,192
see now i've lost actually my debug command of scrcpy as well

1486
23:16:37,192 --> 23:16:42,640
so i'm gonna restart the application but what is going to happen now is as

1487
23:16:42,640 --> 23:16:47,120
you'll soon see is we have a little bit of a problem with our updates note

1488
23:16:47,120 --> 23:16:51,440
functionality so you can see now that i now that i restarted the application all

1489
23:16:51,440 --> 23:16:56,160
of a sudden both notes were changed to my notes number one and that's not

1490
23:16:56,160 --> 23:16:59,832
that's not correct that's because there's a bug inside the application so

1491
23:16:59,832 --> 23:17:04,720
how it's manifest manifesting itself is that when you update a note

1492
23:17:04,720 --> 23:17:09,440
locally it looks fine but if you do a hot restart excuse me then it's gonna be

1493
23:17:09,440 --> 23:17:13,760
tripping like it is tripping right now and the bug is right here i don't know

1494
23:17:13,760 --> 23:17:17,360
if you can notice that excuse me

1495
23:17:17,360 --> 23:17:20,160
i don't know if you can notice that but we have this call to

1496
23:17:20,160 --> 23:17:25,760
the update function however we are not actually telling and this is also by the

1497
23:17:25,760 --> 23:17:30,640
way this is inside node services dart inside the update node function

1498
23:17:30,640 --> 23:17:34,480
in here you can see we're issuing a query to sqlite and we're saying update

1499
23:17:34,480 --> 23:17:39,680
the nodes table and set the text to this text all right and that's exactly what

1500
23:17:39,680 --> 23:17:44,232
sqlite is doing it's going through all the rows inside the note table and

1501
23:17:44,232 --> 23:17:46,960
updating their text column with the given text

1502
23:17:46,960 --> 23:17:51,600
so what we missed in there is a where argument so we're not telling sqlite

1503
23:17:51,600 --> 23:17:55,760
right now which row to update so it's updating all

1504
23:17:55,760 --> 23:18:00,000
the rows okay so we need to fix that as a matter of

1505
23:18:00,000 --> 23:18:03,832
urgency so let's go in here and say we have now

1506
23:18:03,832 --> 23:18:07,512
let's see this is our update

1507
23:18:07,512 --> 23:18:12,320
and right after the creation of this

1508
23:18:12,320 --> 23:18:17,440
dictionary we're going to say a were and we're going to say the id field of

1509
23:18:17,440 --> 23:18:21,280
that column that we want to update or sorry the id field of the row or note

1510
23:18:21,280 --> 23:18:26,160
that we want to update is going to be equal to something and where args

1511
23:18:26,160 --> 23:18:31,440
are going to be equal to our nodes id so i need you to also write this code

1512
23:18:31,440 --> 23:18:35,680
the way i've written it here so now if you say my note number one and i go in

1513
23:18:35,680 --> 23:18:39,760
here and i say minor number two then it's going to do the right thing so if

1514
23:18:39,760 --> 23:18:42,960
you do a hot restart then you can see that the notes are actually populated

1515
23:18:42,960 --> 23:18:46,400
correctly okay i'm not going to do a hot restart just

1516
23:18:46,400 --> 23:18:50,480
because i know scr cpy may crash again and i have to restart the whole process

1517
23:18:50,480 --> 23:18:52,720
so i don't want to waste your time with

1518
23:18:52,720 --> 23:18:55,360
that and that's why i'm not gonna do a hot

1519
23:18:55,360 --> 23:19:02,400
restart but this should work okay sorry again

1520
23:19:02,400 --> 23:19:06,960
okay um now back to what we were working on um

1521
23:19:06,960 --> 23:19:10,872
or back to what the main goal of this chapter is so

1522
23:19:10,872 --> 23:19:15,280
let's have a look at how we can fix the problem with our user server with our

1523
23:19:15,280 --> 23:19:20,000
node service if you go here not being able to return relevant nodes

1524
23:19:20,000 --> 23:19:24,232
except it's returning all the nodes so i believe it's inside node service right

1525
23:19:24,232 --> 23:19:28,800
here oh we were there already sorry about that so we have our node service

1526
23:19:28,800 --> 23:19:32,800
and you can see at the moment when we say

1527
23:19:32,800 --> 23:19:39,120
here notes this is happening inside uh cache all cache notes which is you can

1528
23:19:39,120 --> 23:19:42,640
see it's reading all the notes from the database using get all notes putting it

1529
23:19:42,640 --> 23:19:46,960
inside putting it sorry you couldn't see that cache notes is reading all the

1530
23:19:46,960 --> 23:19:51,512
notes and then putting them inside the local local variable and also populating

1531
23:19:51,512 --> 23:19:57,280
the stream controller with that okay but what we need to do is need is that

1532
23:19:57,280 --> 23:20:03,512
we need to make sure that the current user is saved somewhere inside this note

1533
23:20:03,512 --> 23:20:07,120
service so that note service knows that okay here's the current user whenever i

1534
23:20:07,120 --> 23:20:12,320
return all my notes to the call site using this all nodes functionality in

1535
23:20:12,320 --> 23:20:16,640
here i need to actually filter out the notes

1536
23:20:16,640 --> 23:20:21,360
inside that list to make sure only relevant notes that were created by that

1537
23:20:21,360 --> 23:20:27,600
current user are returned from this stream okay

1538
23:20:27,600 --> 23:20:31,120
so what we need then is to kind of keep

1539
23:20:31,120 --> 23:20:35,512
hold of some sort of a current user in our um

1540
23:20:35,512 --> 23:20:40,872
in our service inside this uh node service so let's go ahead and do that

1541
23:20:40,872 --> 23:20:46,160
let's go actually define our um database user in here

1542
23:20:46,160 --> 23:20:49,512
and we say this is optional and it's equal to user

1543
23:20:49,512 --> 23:20:54,960
however we always want to make sure that that user is set before you actually

1544
23:20:54,960 --> 23:20:58,080
grab a list of notes okay so this is the

1545
23:20:58,080 --> 23:21:01,600
expectation of this note server so the note server says that if you want to be

1546
23:21:01,600 --> 23:21:05,512
able to read all the notes the way you're doing it as clean as

1547
23:21:05,512 --> 23:21:10,552
you're doing it you also make sure that you've set this current user okay

1548
23:21:10,552 --> 23:21:15,280
so if that if that expectation is not met we're going to throw an exception

1549
23:21:15,280 --> 23:21:19,760
and we're going to call that exception user should be set before reading all

1550
23:21:19,760 --> 23:21:24,480
nodes as the caption indicates we're going to go to our crowd exceptions

1551
23:21:24,480 --> 23:21:29,120
which we have from before so let's find that crowd exceptions in the given

1552
23:21:29,120 --> 23:21:32,720
folder is sorry yes in the given path that i've mentioned in the bottom of the

1553
23:21:32,720 --> 23:21:35,832
screen lib services cross crowd exceptions

1554
23:21:35,832 --> 23:21:39,192
and we're going to define a new exception called user should be set

1555
23:21:39,192 --> 23:21:42,552
before reading all notes like this

1556
23:21:42,552 --> 23:21:46,960
all right so please go ahead and define that as one of the exceptions in your

1557
23:21:46,960 --> 23:21:50,800
application as well under crowd exceptions

1558
23:21:50,800 --> 23:21:53,680
all right so

1559
23:21:53,680 --> 23:21:58,080
what we need now is a way for us to be able to filter

1560
23:21:58,080 --> 23:22:01,600
all the given nodes based on the current user

1561
23:22:01,600 --> 23:22:05,360
so let's have a look at our all nodes at

1562
23:22:05,360 --> 23:22:10,872
the moment here you see what we need is to ensure that this all

1563
23:22:10,872 --> 23:22:18,000
nodes can actually filter uh the given nodes inside this stream

1564
23:22:18,000 --> 23:22:21,440
and using some sort of filter functionality

1565
23:22:21,440 --> 23:22:24,720
so what we have you can see a stream here

1566
23:22:24,720 --> 23:22:30,400
let's say stream a stream has a function called where

1567
23:22:30,400 --> 23:22:32,720
so what it does is that as you can see it

1568
23:22:32,720 --> 23:22:38,960
has um it it allows you to grab the current content of that

1569
23:22:38,960 --> 23:22:44,080
stream and then you can pass a test on that so you can say if this object is

1570
23:22:44,080 --> 23:22:48,160
equal to this then do that and return this value otherwise return something

1571
23:22:48,160 --> 23:22:51,832
else so it's kind of like a filtering mechanism on a string on a stream's

1572
23:22:51,832 --> 23:22:58,640
value however our stream includes a list remember let's go back here

1573
23:22:58,640 --> 23:23:02,800
in excuse me in here you can see

1574
23:23:02,800 --> 23:23:07,440
we return a stream of a list of database nodes

1575
23:23:07,440 --> 23:23:11,280
so what we want is a where clause that's two layers deep

1576
23:23:11,280 --> 23:23:16,400
we want to be able to filter out and change the contents of

1577
23:23:16,400 --> 23:23:21,360
this stream based on the current user and we need to then filter the list

1578
23:23:21,360 --> 23:23:25,360
based on the current user's id and only return the database notes that are

1579
23:23:25,360 --> 23:23:29,512
relevant for that user so this is a bit of a special case

1580
23:23:29,512 --> 23:23:32,960
so for that we need to create our own function

1581
23:23:32,960 --> 23:23:39,920
which is a manual like filter function on our

1582
23:23:39,920 --> 23:23:46,000
on our stream okay so let's go ahead and do that so what we need to do in here

1583
23:23:46,000 --> 23:23:50,640
and is to create a new file as you can see under lib extensions list filter so

1584
23:23:50,640 --> 23:23:56,232
i'm going to go ahead and do that let's see if we already have some extensions

1585
23:23:56,232 --> 23:24:00,960
so i can see under lib right now we have constants enum services utilities views

1586
23:24:00,960 --> 23:24:06,400
but we don't have any extensions so the best way then to do that to create that

1587
23:24:06,400 --> 23:24:10,640
filter the dart file is just right click on live and say new file

1588
23:24:10,640 --> 23:24:15,080
and then i'm going to say extensions list

1589
23:24:15,080 --> 23:24:18,000
filter. okay

1590
23:24:18,000 --> 23:24:23,040
so then what we're going to do in here is to create an extension on our

1591
23:24:23,040 --> 23:24:29,920
on our stream so let's go ahead and just say extension

1592
23:24:29,920 --> 23:24:34,160
filter on stream of t

1593
23:24:34,160 --> 23:24:37,680
so the reason i'm doing it like this is

1594
23:24:37,680 --> 23:24:43,832
that so we can grab hold of the contents of that stream inside our extension okay

1595
23:24:43,832 --> 23:24:48,400
so like if you did something like this

1596
23:24:48,400 --> 23:24:53,920
that would still work but in here what we're saying is that we're extending any

1597
23:24:53,920 --> 23:24:59,440
stream that has a value of t and in our filter function then we can

1598
23:24:59,440 --> 23:25:03,760
access that t as you'll soon see okay so then we're going to say

1599
23:25:03,760 --> 23:25:08,872
stream of a list of that object

1600
23:25:08,872 --> 23:25:11,680
and we're going to call our function filter

1601
23:25:11,680 --> 23:25:16,320
and in our filter function we want to grab another function that does a

1602
23:25:16,320 --> 23:25:20,872
testing of the items so let's then say bool

1603
23:25:20,872 --> 23:25:27,192
um function that grabs an item of that type

1604
23:25:27,192 --> 23:25:32,400
so you can see now we're basically broken down the requirements of our

1605
23:25:32,400 --> 23:25:35,280
filtering that is what's supposed to be two levels

1606
23:25:35,280 --> 23:25:40,800
deep is now one level leap because our filter function passes t

1607
23:25:40,800 --> 23:25:45,512
which is our database node to this where function okay

1608
23:25:45,512 --> 23:25:48,720
so this doesn't exist at the moment but we're creating that okay

1609
23:25:48,720 --> 23:25:51,440
so in here what we're going to say then is

1610
23:25:51,440 --> 23:25:56,080
what we are going to do is we need to map our um

1611
23:25:56,080 --> 23:25:59,440
stream and that will you can see it gives us

1612
23:25:59,440 --> 23:26:06,720
the values so in here we get the items and in here then we say items where

1613
23:26:06,720 --> 23:26:13,600
we pass that word clause in here and we say to list like this

1614
23:26:13,600 --> 23:26:17,600
so and i can see in here actually we have a

1615
23:26:17,600 --> 23:26:22,320
filter of t but our stream needs to have a list of t so then that's gonna fix the

1616
23:26:22,320 --> 23:26:25,440
problem for us so in this case we're actually drilling down two levels deep

1617
23:26:25,440 --> 23:26:29,040
inside the list okay so this is the function that we just

1618
23:26:29,040 --> 23:26:34,000
created so it allows us to filter a stream of lists of something and then

1619
23:26:34,000 --> 23:26:38,232
our where clause is going to get that something and should that something pass

1620
23:26:38,232 --> 23:26:42,800
the test then it will be included in the final list so

1621
23:26:42,800 --> 23:26:46,400
look i know this is complicated stuff but please pause the video think a

1622
23:26:46,400 --> 23:26:51,120
little bit about it we have a stream containing a list of things

1623
23:26:51,120 --> 23:26:57,680
now we want to stream of the list of the same thing as long as those things

1624
23:26:57,680 --> 23:27:01,040
any individual thing passes a specific test

1625
23:27:01,040 --> 23:27:04,552
which is specified using this work loss okay

1626
23:27:04,552 --> 23:27:09,192
this is difficult i know it may be some it may be like so difficult for some

1627
23:27:09,192 --> 23:27:12,640
users that you'll be like i don't get any of this i don't understand but

1628
23:27:12,640 --> 23:27:17,512
you will just need to practice you need to just grab a hold of this code go go

1629
23:27:17,512 --> 23:27:22,000
ahead and implement this on some other functionalities like a list of list of

1630
23:27:22,000 --> 23:27:26,400
things and see okay if i have a list of lists of things how do i filter out that

1631
23:27:26,400 --> 23:27:30,800
thing inside and it will finally click okay

1632
23:27:30,800 --> 23:27:36,160
i know it's it's a bit complicated so we've done that now

1633
23:27:36,160 --> 23:27:40,400
what we need now um is to set the current user in the node

1634
23:27:40,400 --> 23:27:44,552
service as you can see right now we have get or

1635
23:27:44,552 --> 23:27:47,832
create user functionality in our node service

1636
23:27:47,832 --> 23:27:53,360
so let's go back to our node service and find that function get or create user

1637
23:27:53,360 --> 23:27:57,920
and at the moment it just takes an email as the caption indicates we need a

1638
23:27:57,920 --> 23:28:03,360
parameter inside this function that also says set as current user so when you get

1639
23:28:03,360 --> 23:28:06,800
or create a user which we're at the moment doing i

1640
23:28:06,800 --> 23:28:11,512
believe in our notes view so let's go in here

1641
23:28:11,512 --> 23:28:17,832
notes notes view in here uh you see get or create a user so this

1642
23:28:17,832 --> 23:28:22,640
is like the bare bone this is the actual very important part of our application

1643
23:28:22,640 --> 23:28:26,320
where a user either is retrieved from the database the way he or she was or

1644
23:28:26,320 --> 23:28:31,040
it's created and it just makes sense to make that user the current user at this

1645
23:28:31,040 --> 23:28:35,920
point okay so let's go in our node service

1646
23:28:35,920 --> 23:28:43,040
and let's change that functionality so i'm going to bring up my notes as well

1647
23:28:43,040 --> 23:28:48,232
and let's add a parameter called set as current user right here going to put a

1648
23:28:48,232 --> 23:28:52,000
comma there and let's just say um that this

1649
23:28:52,000 --> 23:28:57,192
parameter is a boolean set as current user and we're going to set it to true

1650
23:28:57,192 --> 23:29:02,960
by default all right so i need to do the same thing please

1651
23:29:02,960 --> 23:29:06,400
so after doing that when we retrieve the user we're going to look at this

1652
23:29:06,400 --> 23:29:10,640
parameter we're going to say if set as current user set

1653
23:29:10,640 --> 23:29:15,360
as current user then we're going to set our own user to this user that we just

1654
23:29:15,360 --> 23:29:19,920
retrieved from the database and also don't forget when you create

1655
23:29:19,920 --> 23:29:23,920
this user and you also have to set the current

1656
23:29:23,920 --> 23:29:27,512
user if that boolean flag is true so let's just say

1657
23:29:27,512 --> 23:29:33,760
set as current user here as well then we're going to say user is created user

1658
23:29:33,760 --> 23:29:39,280
so what we did here is we just said if we could retrieve that user from the

1659
23:29:39,280 --> 23:29:44,000
database we and this boolean parameter is true then we set our own user to this

1660
23:29:44,000 --> 23:29:47,920
user otherwise if we had to create that user

1661
23:29:47,920 --> 23:29:52,000
and this parameter is true then we do the same thing we set this current user

1662
23:29:52,000 --> 23:29:55,040
to the created user and if you're getting some errors in here saying that

1663
23:29:55,040 --> 23:29:58,232
this underscore user cannot be found it's probably because you missed adding

1664
23:29:58,232 --> 23:30:01,040
this a database user to your node service

1665
23:30:01,040 --> 23:30:03,920
which is something i mentioned just before we moved on to creating that

1666
23:30:03,920 --> 23:30:09,360
filter function okay or sorry before we created this exception

1667
23:30:09,360 --> 23:30:13,360
all right that part is now done as well um

1668
23:30:13,360 --> 23:30:16,960
now what we need to do is to do the actual

1669
23:30:16,960 --> 23:30:22,080
filtering and and that is something that we need to do is uh you can see as a

1670
23:30:22,080 --> 23:30:27,120
cache index change all nodes stream to filter for the current user

1671
23:30:27,120 --> 23:30:30,960
and that's something we need to do in the all nodes

1672
23:30:30,960 --> 23:30:35,040
function or sorry the getter so right here

1673
23:30:35,040 --> 23:30:41,600
what we're going to say is i'm actually i think i'm going to change them

1674
23:30:41,600 --> 23:30:44,720
yeah just let's leave it like this so i'm just going to say no stream

1675
23:30:44,720 --> 23:30:47,760
controller and dot

1676
23:30:47,760 --> 23:30:51,600
stream and right here we can use our filter function you see now visual

1677
23:30:51,600 --> 23:30:55,040
studio code is like confused like oh there is no filter function on a stream

1678
23:30:55,040 --> 23:30:58,160
but remember we actually added that ourselves so i'm going to get help from

1679
23:30:58,160 --> 23:31:01,832
visual studio code and say command dot on mac or control dot on linux and

1680
23:31:01,832 --> 23:31:05,832
windows and visual studio code and then it's gonna understand oh there is a

1681
23:31:05,832 --> 23:31:09,760
filter function that you've defined on stream do you want me to import that and

1682
23:31:09,760 --> 23:31:12,832
i'm gonna say yes please so now we have the

1683
23:31:12,832 --> 23:31:18,872
filter remember filter then gets a note right and if i move my mouse over it now

1684
23:31:18,872 --> 23:31:23,280
you can see that says oh you have a database note however our stream

1685
23:31:23,280 --> 23:31:27,360
actually contains a list of database nodes and all of a sudden our filter

1686
23:31:27,360 --> 23:31:31,512
gets one note at a time so this is the beauty of creating your own extensions

1687
23:31:31,512 --> 23:31:37,440
so that you can drill down inside existing objects and grab what you need

1688
23:31:37,440 --> 23:31:42,872
inside your application all right so in here what we need is to create a

1689
23:31:42,872 --> 23:31:46,400
function then you remember this function has to return a boolean we haven't

1690
23:31:46,400 --> 23:31:49,360
returned anything from here yet that's why we're getting an error

1691
23:31:49,360 --> 23:31:53,360
so at the end of this function we need to return a volume so let's just say

1692
23:31:53,360 --> 23:31:59,512
final current user is this user and if this current user

1693
23:31:59,512 --> 23:32:04,000
is not null which is like the condition that we actually expect then we're going

1694
23:32:04,000 --> 23:32:07,760
to do some code otherwise we need to throw our exception

1695
23:32:07,760 --> 23:32:12,080
user should be said before okay so this is

1696
23:32:12,080 --> 23:32:16,552
our expectation from the caller if you're reading all notes from this

1697
23:32:16,552 --> 23:32:21,440
interface you need to make sure that the current user was set when you call this

1698
23:32:21,440 --> 23:32:27,120
function so this needs to be true okay sorry this yeah you may not have seen

1699
23:32:27,120 --> 23:32:30,552
the code but you could also argue that oh wait a

1700
23:32:30,552 --> 23:32:34,872
minute if this is like the expectation of this interface that the current user

1701
23:32:34,872 --> 23:32:37,832
should always be said before you read all notes

1702
23:32:37,832 --> 23:32:41,600
then why don't you make that the default why

1703
23:32:41,600 --> 23:32:45,920
don't you just do that and remove this function and always set the user as a

1704
23:32:45,920 --> 23:32:49,120
default well the reason behind that is

1705
23:32:49,120 --> 23:32:53,920
the current user has to be sent only when you're working with all nodes now

1706
23:32:53,920 --> 23:32:58,872
this node service should be able to work like to update existing nodes or remove

1707
23:32:58,872 --> 23:33:03,040
existing nodes it in those functionalities should still

1708
23:33:03,040 --> 23:33:07,832
work if the current user is not set right because those functionalities are

1709
23:33:07,832 --> 23:33:12,552
pure cross functions that say update a node with this id get a user with this

1710
23:33:12,552 --> 23:33:18,960
id delete a node with this id etc etc they are not dependent on a current user

1711
23:33:18,960 --> 23:33:24,160
however all nodes is dependent on the current user and it just makes sense to

1712
23:33:24,160 --> 23:33:27,192
have this functionality in here that says set as current user that is

1713
23:33:27,192 --> 23:33:32,552
defaulted to true so if you're using all nodes then it throws an exception if the

1714
23:33:32,552 --> 23:33:36,320
current user is not set okay so that's my reasoning for having this as a

1715
23:33:36,320 --> 23:33:39,832
parameter and not making it the default um

1716
23:33:39,832 --> 23:33:44,960
behavior of this class all right so if current user was not

1717
23:33:44,960 --> 23:33:50,720
null that's like the happy path so then we say we return this note

1718
23:33:50,720 --> 23:33:57,440
it's not as long as its um user id is the same as

1719
23:33:57,440 --> 23:34:01,680
the current user id so we say note

1720
23:34:01,680 --> 23:34:05,280
a user id should be equal to current user

1721
23:34:05,280 --> 23:34:09,760
dot id okay and remember we're not returning a note we're returning a

1722
23:34:09,760 --> 23:34:14,080
boolean remember our filter function it has a where statement that has to return

1723
23:34:14,080 --> 23:34:17,680
a boolean so we're not returning any nodes in here we're just checking is

1724
23:34:17,680 --> 23:34:22,640
this node's use ready the same as that then do this okay

1725
23:34:22,640 --> 23:34:25,832
so that should now be good to go so what we

1726
23:34:25,832 --> 23:34:31,832
could do i know this may actually and break things now because i have some

1727
23:34:31,832 --> 23:34:35,832
problems with scr cpy but you have to excuse me for that it's it's nothing

1728
23:34:35,832 --> 23:34:40,640
that i have control over but since we've changed quite a lot of code uh i'm gonna

1729
23:34:40,640 --> 23:34:45,280
now close all these screens at these tabs and i'm going to do a hot reload

1730
23:34:45,280 --> 23:34:49,192
but this most probably is going to crash the scr cpy

1731
23:34:49,192 --> 23:34:54,000
oh it didn't great thank god for that so we have our notes now how do we put

1732
23:34:54,000 --> 23:34:58,000
this into test what we need to do is to log out and log

1733
23:34:58,000 --> 23:35:01,440
in so i'm going to go to console firebase

1734
23:35:01,440 --> 23:35:06,000
and let's go to our application which is my notes flutter project

1735
23:35:06,000 --> 23:35:11,832
we have two authenticated users these two emails at the moment so right

1736
23:35:11,832 --> 23:35:15,120
now i'm logged in with one of them i don't really know which one so i'm going

1737
23:35:15,120 --> 23:35:19,120
to log out here so i'm then going to log in with

1738
23:35:19,120 --> 23:35:24,552
pixeltab gmail.com foobarbas log in

1739
23:35:24,552 --> 23:35:29,920
and i can see those email those um notes were under pixel tab so then i'm

1740
23:35:29,920 --> 23:35:34,640
going to log out again and i'm going to log in with the other user

1741
23:35:34,640 --> 23:35:37,680
like this toolbarbad and i'm going to then press

1742
23:35:37,680 --> 23:35:42,552
the login button and i haven't yet verified my email so i will have to do

1743
23:35:42,552 --> 23:35:47,600
that so let me just see if i can take care of that right now

1744
23:35:47,600 --> 23:35:53,440
i'm going to then bring my email and go to

1745
23:35:53,440 --> 23:35:58,872
and see if i can find this um verification email and i can't so i'm

1746
23:35:58,872 --> 23:36:02,400
just gonna send send email verification and it's gonna send a new email

1747
23:36:02,400 --> 23:36:08,160
verification to me all right i got the email verification

1748
23:36:08,160 --> 23:36:12,160
and it looks like this so i'm just gonna click on that and i

1749
23:36:12,160 --> 23:36:16,080
can see now it says your email has been verified okay

1750
23:36:16,080 --> 23:36:20,000
so let me go to restart then and now that

1751
23:36:20,000 --> 23:36:26,480
i've verified my email i'm going to try to log in with a user

1752
23:36:26,480 --> 23:36:29,920
as oops this is register i want to go to

1753
23:36:29,920 --> 23:36:32,800
login so

1754
23:36:32,800 --> 23:36:35,192
here foo barbats

1755
23:36:35,192 --> 23:36:39,280
and then log in and now i can see for my user i'm not

1756
23:36:39,280 --> 23:36:42,960
seeing any notes but just to make sure i'm just going to create a new user and

1757
23:36:42,960 --> 23:36:47,192
say this no sorry create a new node i'm going to say this node was created

1758
23:36:47,192 --> 23:36:52,160
for van dot or just put my email in here like this

1759
23:36:52,160 --> 23:36:54,720
okay i'm going to go back and i can see that

1760
23:36:54,720 --> 23:37:00,640
the note is displayed here then what i'm going to do is just to

1761
23:37:00,640 --> 23:37:05,512
log out of this user and log in with the other user

1762
23:37:05,512 --> 23:37:09,680
just to make sure that that oh that was created by the other user is

1763
23:37:09,680 --> 23:37:13,512
not displayed to this user okay

1764
23:37:13,512 --> 23:37:19,920
and now we can log in and i can only see notes that were for this user so

1765
23:37:19,920 --> 23:37:24,480
congratulations that was a lot of work that we did and that we did and uh the

1766
23:37:24,480 --> 23:37:28,320
application seems to be working the way we've designed it so

1767
23:37:28,320 --> 23:37:32,320
that's great job what we need to do now is just ensure

1768
23:37:32,320 --> 23:37:38,232
that we we won't lose our code as is a tradition and so we need to commit our

1769
23:37:38,232 --> 23:37:42,872
code and also tag our code okay so i'm gonna do some uh

1770
23:37:42,872 --> 23:37:46,552
shuffling around here on the screens and i'm gonna increase the size of visual

1771
23:37:46,552 --> 23:37:51,440
studio code so you see it better let's do git status and see what the

1772
23:37:51,440 --> 23:37:55,832
status is we've modified two files and we've also added a whole new folder so

1773
23:37:55,832 --> 23:38:00,000
i'm just gonna say git add all and if you look at our logs the previous

1774
23:38:00,000 --> 23:38:04,232
step was step 17 now we have to commit our work and tag

1775
23:38:04,232 --> 23:38:08,232
it as step 18 and if you look at our are your tags as well you should have step

1776
23:38:08,232 --> 23:38:11,440
17 here let's say git commit and i'm going to

1777
23:38:11,440 --> 23:38:16,552
say step 18. here i'm gonna push these changes to

1778
23:38:16,552 --> 23:38:20,640
remotes which in my case is github you may be using bitbucket or some other

1779
23:38:20,640 --> 23:38:25,120
remote and less than tag as step 18 as well

1780
23:38:25,120 --> 23:38:29,600
here and put your tags

1781
23:38:29,600 --> 23:38:34,160
alright so that part is done now we have tagged and committed or code so if you

1782
23:38:34,160 --> 23:38:40,400
say git status you should have nothing handling here to be committed all right

1783
23:38:40,400 --> 23:38:44,552
wow fantastic so again as tradition is we always talk

1784
23:38:44,552 --> 23:38:47,512
about what we need to mention in the next chapter what we're going to go

1785
23:38:47,512 --> 23:38:50,400
through in the next chapter at the end of every chapter so

1786
23:38:50,400 --> 23:38:54,000
up until this point we've been using our notes crot service and

1787
23:38:54,000 --> 23:38:57,120
that's been working really good everything's been saved on the on the

1788
23:38:57,120 --> 23:39:01,040
device however if you really think about it

1789
23:39:01,040 --> 23:39:04,480
you've now learned how to work with crowd and that was my that was like one

1790
23:39:04,480 --> 23:39:07,680
of my intentions at the beginning of this course i wanted to teach you about

1791
23:39:07,680 --> 23:39:12,400
crud because it's one of the absolute most important things that any back-end

1792
23:39:12,400 --> 23:39:15,040
developer or front-end developer such as flutter

1793
23:39:15,040 --> 23:39:19,280
developer has to know about so i hope that you've learned that now

1794
23:39:19,280 --> 23:39:23,920
however we have a big problem here and that is all our notes are saved locally

1795
23:39:23,920 --> 23:39:28,800
in a sql like database and should anything go wrong for instance if

1796
23:39:28,800 --> 23:39:33,120
if the users something happens to the user's telephone all that data is going

1797
23:39:33,120 --> 23:39:36,720
to disappear so the user's notes may disappear and

1798
23:39:36,720 --> 23:39:40,320
you may think well what's so wrong about that well if

1799
23:39:40,320 --> 23:39:44,960
you're like me i use my notes like my the default notes

1800
23:39:44,960 --> 23:39:50,000
application in macintosh and also on linux quite a lot so i store very very

1801
23:39:50,000 --> 23:39:54,872
important information sometimes in my notes and you'd be surprised that the

1802
23:39:54,872 --> 23:39:59,120
outline for this course i actually managed it all i managed all of that

1803
23:39:59,120 --> 23:40:02,872
inside the notes application on my macintosh so i wrote the entire outline

1804
23:40:02,872 --> 23:40:06,400
took many many hours and i would have been devastated

1805
23:40:06,400 --> 23:40:10,872
if those notes disappeared for some reason or if my kids got a hold of my

1806
23:40:10,872 --> 23:40:13,832
telephone and just removed the notes and there was no reason and then there was

1807
23:40:13,832 --> 23:40:17,280
no way for me to grab those notes back again so

1808
23:40:17,280 --> 23:40:21,832
what we need to do now is just ensure that we can store these nodes in some

1809
23:40:21,832 --> 23:40:24,872
sort of a back end so that it's sitting in the

1810
23:40:24,872 --> 23:40:28,800
cloud so we don't have to manage them locally and that's what we're going to

1811
23:40:28,800 --> 23:40:32,320
use firebase for and we're going to start talking more and more about

1812
23:40:32,320 --> 23:40:36,720
firebase storage from the beginning of next chapter so i hope

1813
23:40:36,720 --> 23:40:40,872
you enjoyed this chapter and grab your refreshments coffee or tea or whatever

1814
23:40:40,872 --> 23:40:44,720
you want some chocolates and i'll see you in the next chapter

1815
23:40:44,720 --> 23:40:49,040
hello and welcome to chapter 36 of this flutter course in previous chapters

1816
23:40:49,040 --> 23:40:52,400
we've been working with our quad service quite a lot and also we've been working

1817
23:40:52,400 --> 23:40:57,192
with firebase authentication so far we've stored the user generated

1818
23:40:57,192 --> 23:41:03,040
notes inside the crotch store which we're backing with a sqlite database and

1819
23:41:03,040 --> 23:41:06,872
we've also made that cloud service kind of um

1820
23:41:06,872 --> 23:41:10,160
aware of the currently logged in user so when

1821
23:41:10,160 --> 23:41:14,720
a user logs in he or she can only see their own notes and when that user logs

1822
23:41:14,720 --> 23:41:19,040
out and another user logs and then the previously created notes in the

1823
23:41:19,040 --> 23:41:25,440
database aren't exposed to the new user so we've taken care of all those but we

1824
23:41:25,440 --> 23:41:29,192
still have our notes only stored in a local storage

1825
23:41:29,192 --> 23:41:33,040
and from this chapter on we're going to be working with actually moving away

1826
23:41:33,040 --> 23:41:36,400
from storing the user data in a local database

1827
23:41:36,400 --> 23:41:41,040
and instead going towards storing that inside firebase

1828
23:41:41,040 --> 23:41:43,832
now when i was designing this course i was

1829
23:41:43,832 --> 23:41:48,000
thinking about how i can introduce more and more concepts to to become a better

1830
23:41:48,000 --> 23:41:51,680
software developer and a flutter developer and one of those absolutely

1831
23:41:51,680 --> 23:41:57,280
crucial things was crud create read update and delete and um though firebase

1832
23:41:57,280 --> 23:42:02,800
is a good way of doing that but firebase removes quite a lot of the logic that

1833
23:42:02,800 --> 23:42:07,360
you otherwise need to understand to become a better developer so firebase

1834
23:42:07,360 --> 23:42:11,920
has abstracted away the concept of crowd quite a lot and that you work with data

1835
23:42:11,920 --> 23:42:14,872
in the cloud and you don't really know how that is being populated and where

1836
23:42:14,872 --> 23:42:18,400
that is being populated so when i started designing the course i

1837
23:42:18,400 --> 23:42:22,960
thought maybe okay we could have a look at storing data locally first to get a

1838
23:42:22,960 --> 23:42:27,280
good grip of crud and then after that we now we understand

1839
23:42:27,280 --> 23:42:30,800
how crop works and how those operations are performed at a low level on a

1840
23:42:30,800 --> 23:42:35,280
database level then we can move away from it and go to a more abstract layer

1841
23:42:35,280 --> 23:42:39,832
so this was a choice that i met early on when designing this course and it is

1842
23:42:39,832 --> 23:42:44,160
definitely not like wasted time you now know how to work with sql light in your

1843
23:42:44,160 --> 23:42:49,040
applications and you will probably be using sqlite more and more as you go on

1844
23:42:49,040 --> 23:42:53,680
in your flutter development um career so

1845
23:42:53,680 --> 23:42:56,872
i am i hope that you understand that we are

1846
23:42:56,872 --> 23:43:01,600
we still have good use of uh sqlite and we've understood that but now it's time

1847
23:43:01,600 --> 23:43:08,320
that we move away from our local storage and move to using um firebase instead

1848
23:43:08,320 --> 23:43:11,600
so i want to bring up the caption for the next section of this chapter and

1849
23:43:11,600 --> 23:43:16,640
that's uh that we're going to talk about cloud firestore so if i bring up my

1850
23:43:16,640 --> 23:43:21,040
notes and go to that url that i provided right right there for you

1851
23:43:21,040 --> 23:43:25,512
and bring it up here and you can see here in in here it says

1852
23:43:25,512 --> 23:43:31,040
firestore is a flexible scalable a nosql cloud database to store and sync data

1853
23:43:31,040 --> 23:43:34,552
um the way the way it works i mean you can

1854
23:43:34,552 --> 23:43:38,232
go actually to this link that i've provided for you here and it tells you

1855
23:43:38,232 --> 23:43:41,832
about how you can actually add cloud firestore to your application but i

1856
23:43:41,832 --> 23:43:45,040
believe we've already done that so if i bring our um

1857
23:43:45,040 --> 23:43:49,360
application also to the screen increase the size and we go to our pop

1858
23:43:49,360 --> 23:43:52,552
special and we'll look at our dependencies we're

1859
23:43:52,552 --> 23:43:57,280
at the moment using firebase core firebase auth and um in here also tells

1860
23:43:57,280 --> 23:44:01,120
you you have to use cloud firestore so let's go in here and we can see we've

1861
23:44:01,120 --> 23:44:04,872
already dragged in cloud firestore from one of the absolute absolute earliest

1862
23:44:04,872 --> 23:44:08,400
chapters in this course we've already

1863
23:44:08,400 --> 23:44:12,080
added this dependency to our application so you don't have to do this but if you

1864
23:44:12,080 --> 23:44:17,440
don't have cloud firestore added to your application you may need to do that now

1865
23:44:17,440 --> 23:44:21,192
by following the instructions in this link and if you've if you don't have it

1866
23:44:21,192 --> 23:44:25,680
it's probably because you've missed one of the early chapters in this um

1867
23:44:25,680 --> 23:44:29,832
course so

1868
23:44:29,832 --> 23:44:34,000
we're going to be using the cloud firestore in order to store user

1869
23:44:34,000 --> 23:44:36,800
generated data and in this case our nodes

1870
23:44:36,800 --> 23:44:41,600
now you may be familiar with sql and nosql

1871
23:44:41,600 --> 23:44:44,720
but what i mean what

1872
23:44:44,720 --> 23:44:50,160
i can explain cloud fire stories is that you will have um

1873
23:44:50,160 --> 23:44:55,832
two concepts that you need to understand um which are called um collections and

1874
23:44:55,832 --> 23:45:01,512
the other ones are documents so whereas in traditional sql storage you

1875
23:45:01,512 --> 23:45:06,640
will have hard dependencies and every uh table for instance when we design our

1876
23:45:06,640 --> 23:45:10,960
sqlite database we actually have to design our tables with specific

1877
23:45:10,960 --> 23:45:14,720
layouts inside the table so we have different fields we have

1878
23:45:14,720 --> 23:45:20,000
foreign keys etc so that's like a typical sql relation relational database

1879
23:45:20,000 --> 23:45:24,800
but when you go to node sql for instance firestore then things are more document

1880
23:45:24,800 --> 23:45:27,600
based so for those of you who are doing backend development you already know

1881
23:45:27,600 --> 23:45:30,720
about that for instance so um

1882
23:45:30,720 --> 23:45:35,120
if you're using sequel light then things aren't document based as you would think

1883
23:45:35,120 --> 23:45:38,080
um but when we go to firestore then you

1884
23:45:38,080 --> 23:45:44,232
will have like a lot more looser data definition for your tables and for your

1885
23:45:44,232 --> 23:45:48,800
documents basically so one document inside the same collection can contain

1886
23:45:48,800 --> 23:45:52,552
two fields and the next document can contain three fields so

1887
23:45:52,552 --> 23:45:57,192
that's a lot more open the way it is created with firestar

1888
23:45:57,192 --> 23:46:00,872
so for the entirety of this course from this point on we're going to be

1889
23:46:00,872 --> 23:46:06,080
dependent on firestore in order to use it to store user generated content which

1890
23:46:06,080 --> 23:46:11,192
are notes in our case so let's now talk a little bit about

1891
23:46:11,192 --> 23:46:16,872
production versus test mode um firebase as use firestore as you'll soon see it

1892
23:46:16,872 --> 23:46:19,920
has um different ways

1893
23:46:19,920 --> 23:46:26,160
of allowing you as a developer to interact with your database so

1894
23:46:26,160 --> 23:46:30,080
and there is a thing called a test mode and another caller production mode and

1895
23:46:30,080 --> 23:46:34,080
in test mode and what it means is that as you're developing your application

1896
23:46:34,080 --> 23:46:38,960
which we are for instance at the moment then you may need to for instance open

1897
23:46:38,960 --> 23:46:43,040
up your database um so that you can actually interact

1898
23:46:43,040 --> 23:46:46,960
with it with your from your application without even authenticating a user for

1899
23:46:46,960 --> 23:46:50,232
instance so even if a user is not authenticated you can actually issue

1900
23:46:50,232 --> 23:46:55,280
some commands toward firestore in order to read data delete data

1901
23:46:55,280 --> 23:46:59,680
and and change data so that's that's as you're developing

1902
23:46:59,680 --> 23:47:02,720
your application while you're still working with your authentication but

1903
23:47:02,720 --> 23:47:06,720
remember we've already nailed down the authentication so you cannot actually

1904
23:47:06,720 --> 23:47:10,872
end up in the notes view or the notes list view which is embedded

1905
23:47:10,872 --> 23:47:13,680
inside notes view if you forgot about that

1906
23:47:13,680 --> 23:47:18,320
you cannot end up in there if you haven't authenticated and if you haven't

1907
23:47:18,320 --> 23:47:22,720
verified your email address so we know that in our case we don't actually

1908
23:47:22,720 --> 23:47:27,832
really need to use the test mode of our database with firestore we're kind of

1909
23:47:27,832 --> 23:47:32,872
gonna immediately switch to production mode and what production mode is is for

1910
23:47:32,872 --> 23:47:37,192
instance when you develop your firestore database as you'll soon see in this

1911
23:47:37,192 --> 23:47:39,192
chapter as well um

1912
23:47:39,192 --> 23:47:43,120
you will be able to add some more rules to the database

1913
23:47:43,120 --> 23:47:46,400
so that unauthenticated access to the database

1914
23:47:46,400 --> 23:47:50,800
is going to be denied and this is the kind of like model that we're going to

1915
23:47:50,800 --> 23:47:55,120
be using in the rest of the this course and also almost at the end of this

1916
23:47:55,120 --> 23:47:58,640
course we're also going to add some more rules to

1917
23:47:58,640 --> 23:48:02,480
our firebase uh sorry firestore database so that we make

1918
23:48:02,480 --> 23:48:07,512
it even more explicit who has access to what

1919
23:48:07,512 --> 23:48:10,872
just know that there is a test mode and a production mode test mode is a bit

1920
23:48:10,872 --> 23:48:14,800
looser in terms of um in terms of security but production mode

1921
23:48:14,800 --> 23:48:18,720
is a little bit tighter in that case that it it just tries to

1922
23:48:18,720 --> 23:48:21,832
make sure that on authenticated access to

1923
23:48:21,832 --> 23:48:25,440
uh for instance a document so the user doesn't have access to are going to be

1924
23:48:25,440 --> 23:48:29,120
rejected

1925
23:48:29,120 --> 23:48:32,720
all right we've i've just noticed that i just

1926
23:48:32,720 --> 23:48:37,120
mentioned a few things about rules and you may be wondering about what these

1927
23:48:37,120 --> 23:48:40,080
rules actually are and what they actually mean

1928
23:48:40,080 --> 23:48:44,480
so i've prepared the link here so i'm gonna see if i can actually open it on

1929
23:48:44,480 --> 23:48:47,440
my computer as well so i can bring it to the screen

1930
23:48:47,440 --> 23:48:51,832
here it is okay so these are the rules that i was

1931
23:48:51,832 --> 23:48:55,192
talking about so you see if you're for instance a back-end

1932
23:48:55,192 --> 23:48:59,920
developer like i am you will also be very familiar with deploying your

1933
23:48:59,920 --> 23:49:03,680
application so if you're for instance django developer or node.js with express

1934
23:49:03,680 --> 23:49:08,960
or whatever or flask developer then you are probably used to

1935
23:49:08,960 --> 23:49:12,872
deploying your application to some sort of a cloud

1936
23:49:12,872 --> 23:49:17,280
service and then you will also be

1937
23:49:17,280 --> 23:49:23,600
responsible for specifying how users can interact with your backend and what

1938
23:49:23,600 --> 23:49:29,280
rules are applied on what cases uh firebase since it is not like this

1939
23:49:29,280 --> 23:49:33,440
traditional backend that you have to deploy yourself since it is a product

1940
23:49:33,440 --> 23:49:37,760
that's already there and it's deployed it needs your help in order to

1941
23:49:37,760 --> 23:49:42,552
understand its security rules so as you can see this is a typical firebase

1942
23:49:42,552 --> 23:49:46,232
firestore configuration of a back-end and you can see in here it says the

1943
23:49:46,232 --> 23:49:51,600
service is the firestore service and match these documents at these paths and

1944
23:49:51,600 --> 23:49:56,000
also only allow read and write if the user is

1945
23:49:56,000 --> 23:49:59,192
authenticated so if you're a django developer you already know about like

1946
23:49:59,192 --> 23:50:04,872
requests you also get that you're in django so a request user will contain

1947
23:50:04,872 --> 23:50:08,960
the currently logged in an authenticated user there so that this is very similar

1948
23:50:08,960 --> 23:50:11,760
to that and i'm sorry if i'm talking a little

1949
23:50:11,760 --> 23:50:14,320
bit about back-end development that's just because i'm trying to like make

1950
23:50:14,320 --> 23:50:17,440
this connection for those of you who are back-end developers and trying to learn

1951
23:50:17,440 --> 23:50:21,040
about firebase firestore if you're not a back-end developer just

1952
23:50:21,040 --> 23:50:25,360
know that these security rules are there to help

1953
23:50:25,360 --> 23:50:28,800
you

1954
23:50:28,800 --> 23:50:33,832
they're there to help you secure your database because you see

1955
23:50:33,832 --> 23:50:37,192
the way we've actually generated our application let's go to the source code

1956
23:50:37,192 --> 23:50:41,760
and have a look at it a little bit and when we set up our uh firebase with

1957
23:50:41,760 --> 23:50:46,400
the firebase cli and firestore cli there were some files that were generated for

1958
23:50:46,400 --> 23:50:50,480
us automatically and they were inside this firebase option so

1959
23:50:50,480 --> 23:50:54,552
i'm going to open that for us here and you can see some information in here

1960
23:50:54,552 --> 23:50:58,872
as you can see for android application there is an api key app id messaging

1961
23:50:58,872 --> 23:51:05,192
sender id project id and storage bucket if anybody gets hold of this information

1962
23:51:05,192 --> 23:51:09,360
as you now are going to get hold of this information by watching this course

1963
23:51:09,360 --> 23:51:13,512
you will actually be able to replicate this firebase options. in your own

1964
23:51:13,512 --> 23:51:20,080
application with my api key app id and sender id and interact with the database

1965
23:51:20,080 --> 23:51:24,160
that i'm in control of even though you personally don't have access to that

1966
23:51:24,160 --> 23:51:28,160
database because that database is stored under my

1967
23:51:28,160 --> 23:51:30,320
profile in

1968
23:51:30,320 --> 23:51:34,480
firebase console so using this api key and app id you can

1969
23:51:34,480 --> 23:51:39,192
interact with the database and it is only the security information it's only

1970
23:51:39,192 --> 23:51:42,640
the um authentication information or the

1971
23:51:42,640 --> 23:51:46,400
authentication rules that i specify in my firebase

1972
23:51:46,400 --> 23:51:50,640
config that will then decide who has access to what

1973
23:51:50,640 --> 23:51:55,192
so don't worry also about this i'm going to delete this firebase project actually

1974
23:51:55,192 --> 23:51:59,280
by the time this course is released so i'm completely happy with this

1975
23:51:59,280 --> 23:52:04,552
information being public and shown to you just so you see what i actually mean

1976
23:52:04,552 --> 23:52:07,280
so just know that with various roles that

1977
23:52:07,280 --> 23:52:13,120
we can define on our firebase firestore project we can specify who has access to

1978
23:52:13,120 --> 23:52:17,760
what and based on what rules for instance if the user is authenticated or

1979
23:52:17,760 --> 23:52:23,512
if that user id is actually present in that document's id field for instance so

1980
23:52:23,512 --> 23:52:27,120
something like that

1981
23:52:27,120 --> 23:52:31,040
okay um now what we're gonna do is actually

1982
23:52:31,040 --> 23:52:36,960
start creating a um firestore database for our project so

1983
23:52:36,960 --> 23:52:41,360
uh what i'm gonna do in here is i'm going to bring up safari and i'm gonna

1984
23:52:41,360 --> 23:52:45,920
go to console firebase.com so i suggest that you do the same thing

1985
23:52:45,920 --> 23:52:49,120
change the screen layout a little bit here

1986
23:52:49,120 --> 23:52:52,720
so you see my screen better excuse me

1987
23:52:52,720 --> 23:52:57,512
and then i'm gonna go to our minus flower project so i suggest that you do

1988
23:52:57,512 --> 23:53:00,552
the same thing for your application all right

1989
23:53:00,552 --> 23:53:04,080
so when we end up here then on the left hand side you'll see something called

1990
23:53:04,080 --> 23:53:07,440
firestore database and i want you to click there and just ensure that you've

1991
23:53:07,440 --> 23:53:11,192
selected the correct application in here as well you may have quite a few just

1992
23:53:11,192 --> 23:53:14,800
like i do then what we'll need to do in here and

1993
23:53:14,800 --> 23:53:20,872
it's just to say create database okay and as you can see this is now the

1994
23:53:20,872 --> 23:53:26,000
screen that may look a little bit scary but it's completely fine

1995
23:53:26,000 --> 23:53:30,080
and you can see there are two different modes specified here as we talked about

1996
23:53:30,080 --> 23:53:33,832
production mode and then the other one is test mode

1997
23:53:33,832 --> 23:53:40,720
in production mode the rules by excuse me the rules by default are quite

1998
23:53:40,720 --> 23:53:46,080
um bad as you can see in here it says any document inside the database is

1999
23:53:46,080 --> 23:53:49,832
unaccessible so or inaccessible inaccessible

2000
23:53:49,832 --> 23:53:55,680
it says don't allow read or write because the condition is just false

2001
23:53:55,680 --> 23:53:59,920
so and you can see it says all third party reads and rights will be denied

2002
23:53:59,920 --> 23:54:03,600
but this is really not the um

2003
23:54:03,600 --> 23:54:06,552
this is not how we are going to set up our

2004
23:54:06,552 --> 23:54:10,800
firestore database we as i mentioned before we are going to tighten this up

2005
23:54:10,800 --> 23:54:16,640
quite a lot in in the future but not just right now so i need you go into

2006
23:54:16,640 --> 23:54:21,120
start in test mode and you'll get this absolutely beautiful um

2007
23:54:21,120 --> 23:54:25,600
message saying in um the default security rules for test mode allows

2008
23:54:25,600 --> 23:54:29,832
anyone with your database reference to view and remember database reference i

2009
23:54:29,832 --> 23:54:34,552
mentioned that that's inside this firebase options so that's the reference

2010
23:54:34,552 --> 23:54:38,552
that we're talking about okay so it may sound a little bit abstract but it's

2011
23:54:38,552 --> 23:54:41,920
really not that difficult to understand so

2012
23:54:41,920 --> 23:54:45,120
and it says edit and delete all your database from

2013
23:54:45,120 --> 23:54:50,400
all the data in your database for the next 30 days so okay

2014
23:54:50,400 --> 23:54:54,000
and you can see the rule that has been set up in here says allow read write if

2015
23:54:54,000 --> 23:54:58,480
request time is less than blah blah blah so it's opening up your database

2016
23:54:58,480 --> 23:55:02,800
basically for 30 days it's actually quite intelligent pretty nice okay so i

2017
23:55:02,800 --> 23:55:07,440
need you to do that and remember we're gonna tighten this up soon okay

2018
23:55:07,440 --> 23:55:11,760
and then you can see in here it says allow basically set up a location for

2019
23:55:11,760 --> 23:55:17,360
where your data is going to be stored now there may be some sort of like um

2020
23:55:17,360 --> 23:55:21,680
conflict of interest between like the legal portions of your

2021
23:55:21,680 --> 23:55:25,760
business and also where you want to store your data and where you actually

2022
23:55:25,760 --> 23:55:30,552
feel comfortable doing that but and gdpr definitely makes this even more

2023
23:55:30,552 --> 23:55:34,080
complicated if you're living in europe so

2024
23:55:34,080 --> 23:55:38,640
i mean even if you're living abroad gdpr makes things complicated some websites

2025
23:55:38,640 --> 23:55:43,040
that are hosted in the us are still not accessible by users in the eu

2026
23:55:43,040 --> 23:55:47,440
and this makes things a little bit complicated i'm i'm basically

2027
23:55:47,440 --> 23:55:50,320
in sweden right now so i i prefer to use

2028
23:55:50,320 --> 23:55:53,832
maybe a location that is um

2029
23:55:53,832 --> 23:55:59,600
has something to do with europe and uh i can see europe west while sweden is

2030
23:55:59,600 --> 23:56:04,000
kind of like in the middle so i'm just going to use europe west right now but

2031
23:56:04,000 --> 23:56:08,400
again this isn't so so significant right now it could have

2032
23:56:08,400 --> 23:56:12,160
some speed implications for application depending on where the server actually

2033
23:56:12,160 --> 23:56:16,000
is so it's really good that firebase is giving you the option to choose the

2034
23:56:16,000 --> 23:56:21,192
location of your firestore database so you may want to read more about this

2035
23:56:21,192 --> 23:56:25,680
and you can press learn more in order to read more about this but i'm just going

2036
23:56:25,680 --> 23:56:30,232
to pick europe west just because i believe it it could make more sense for

2037
23:56:30,232 --> 23:56:34,080
me since i am located in sweden so

2038
23:56:34,080 --> 23:56:38,960
choose a location that makes sense for you and then press the enable button

2039
23:56:38,960 --> 23:56:45,360
wow that is a an absolutely horrific looking loading screen

2040
23:56:45,360 --> 23:56:49,512
what that is i mean it's not even centered so that's okay firebase

2041
23:56:49,512 --> 23:56:53,680
remember we're using firebase as a free service so i just want to make sure that

2042
23:56:53,680 --> 23:56:56,872
everybody understands i'm very very thankful for having firebase because

2043
23:56:56,872 --> 23:57:00,872
it's made life a lot easier for me even though i can create my own backends

2044
23:57:00,872 --> 23:57:04,320
but i sometimes still prefer to use firebase so

2045
23:57:04,320 --> 23:57:10,320
um just because it's so it's so easy to use so uh thank you so

2046
23:57:10,320 --> 23:57:15,280
much any anybody who's working on firebase and providing us with free

2047
23:57:15,280 --> 23:57:19,600
services um so

2048
23:57:19,600 --> 23:57:25,120
so let's have a look in here um about in our rules so let me increase the size of

2049
23:57:25,120 --> 23:57:28,960
the screen like this and perhaps also

2050
23:57:28,960 --> 23:57:33,440
increase it like this so you see it better let me see if i can

2051
23:57:33,440 --> 23:57:37,120
perhaps close the section to the left a little

2052
23:57:37,120 --> 23:57:39,920
bit and i probably could actually have done that

2053
23:57:39,920 --> 23:57:43,832
so i'm going to go back in here and press this button to close that section

2054
23:57:43,832 --> 23:57:48,320
all right so what we need to do now is to as the caption indicates we're going

2055
23:57:48,320 --> 23:57:53,512
to change the the security rules in our database

2056
23:57:53,512 --> 23:57:57,440
and i change it so that

2057
23:57:57,440 --> 23:58:03,680
we allow read and write if the user is authenticated

2058
23:58:03,680 --> 23:58:09,040
um so we make sure you as you can see it says request off is not null so let's go

2059
23:58:09,040 --> 23:58:14,400
ahead and change that so i'm gonna remove everything after request

2060
23:58:14,400 --> 23:58:19,440
dot like this and you can see it gives you access to off path resource time

2061
23:58:19,440 --> 23:58:22,872
method so i'm just going to say off is not null

2062
23:58:22,872 --> 23:58:26,800
okay so you can actually bring it to the same

2063
23:58:26,800 --> 23:58:30,400
line as well if you want to so after you've done that you can say

2064
23:58:30,400 --> 23:58:35,680
allow read write if request auth is not all and that literally just means that

2065
23:58:35,680 --> 23:58:40,320
people who are authenticated with our application and they have

2066
23:58:40,320 --> 23:58:45,280
and they have a valid firebase user when they interact with the database are

2067
23:58:45,280 --> 23:58:49,040
allowed to read and write read from and write to the database

2068
23:58:49,040 --> 23:58:53,832
however remember this is database wide at the moment it

2069
23:58:53,832 --> 23:58:57,760
says any document and we still haven't talked about documents so much but i'll

2070
23:58:57,760 --> 23:59:02,400
tell you soon about that but any just imagine anything in your database can be

2071
23:59:02,400 --> 23:59:07,192
read from and written to if the user is logged in and that's not so secure

2072
23:59:07,192 --> 23:59:10,640
because that literally means that i as user one

2073
23:59:10,640 --> 23:59:15,192
and you as user two have access to each other's documents okay even if the

2074
23:59:15,192 --> 23:59:19,440
application itself is like segregating these two documents saying that oh

2075
23:59:19,440 --> 23:59:24,552
you're user one i'm gonna just give you user ones documents but internally as a

2076
23:59:24,552 --> 23:59:29,600
firebase user given our current security um

2077
23:59:29,600 --> 23:59:32,872
rules you will have access to my documents

2078
23:59:32,872 --> 23:59:36,872
even if the application's limiting your access just remember that okay

2079
23:59:36,872 --> 23:59:40,080
so after you've done that i need you to

2080
23:59:40,080 --> 23:59:44,960
please press the publish button so as you can see it says publish

2081
23:59:44,960 --> 23:59:48,000
changes can take up to a minute to take effect and that's all right because

2082
23:59:48,000 --> 23:59:53,120
we're going to actually take more than a minute before we jump into using these

2083
23:59:53,120 --> 23:59:58,232
new rules in our application so okay now

2084
23:59:58,232 --> 00:00:02,720
let's talk about collections here um

2085
00:00:02,720 --> 00:00:08,800
and i've prepared a doc and a link there so let me see if i can find that

2086
00:00:08,800 --> 00:00:12,872
link here as well so as you can see in here there is a

2087
00:00:12,872 --> 00:00:16,000
good documentation that will talk a little bit about collections and

2088
00:00:16,000 --> 00:00:20,720
documents and you could go through this um but i'm not gonna do that right now

2089
00:00:20,720 --> 00:00:24,080
but just so you know here's the link at the bottom of the screen if you want to

2090
00:00:24,080 --> 00:00:28,080
do that i'm going to talk about collections

2091
00:00:28,080 --> 00:00:31,600
personally so you will understand it in my words so

2092
00:00:31,600 --> 00:00:36,832
at this point what we need is just to go to our firebase database

2093
00:00:36,832 --> 00:00:42,080
okay and what you'll see is a screen that kind of looks like this so it has

2094
00:00:42,080 --> 00:00:47,120
your project name in here and then there is a button called start collection okay

2095
00:00:47,120 --> 00:00:52,080
just imagine collection as its name indicates is a group of related objects

2096
00:00:52,080 --> 00:00:56,640
objects could be you could interpret them as tables as you traditionally have

2097
00:00:56,640 --> 00:01:01,440
in your relational databases such as sqlite um

2098
00:01:01,440 --> 00:01:04,480
so a collection just imagine for instance

2099
00:01:04,480 --> 00:01:10,080
if we say what does our application do our application stores nodes for

2100
00:01:10,080 --> 00:01:15,512
all its users so user a has nodes user b has nodes but user c may not have nodes

2101
00:01:15,512 --> 00:01:18,720
so the only thing our application is storing in

2102
00:01:18,720 --> 00:01:25,360
in database right now is notes so that could be its own collection okay so we

2103
00:01:25,360 --> 00:01:29,920
just create a collection called notes and in that collection we're gonna store

2104
00:01:29,920 --> 00:01:33,832
all our notes okay so every user is going to have their own

2105
00:01:33,832 --> 00:01:37,600
notes that's how we are going to do it in this

2106
00:01:37,600 --> 00:01:40,480
course however you as a developer may just

2107
00:01:40,480 --> 00:01:43,760
think i'm going to do it differently what i'm

2108
00:01:43,760 --> 00:01:48,160
going to do is i'm going to create a new collection of notes for every user so

2109
00:01:48,160 --> 00:01:51,680
user a is going to have a collection called user a notes

2110
00:01:51,680 --> 00:01:56,080
user b is going to have user b notes or you may just

2111
00:01:56,080 --> 00:02:01,680
assign create a collection with every user id so you remember we get a user

2112
00:02:01,680 --> 00:02:06,232
identifier from firebase you may decide to you create a collection for every

2113
00:02:06,232 --> 00:02:10,800
user based on their user id okay that's fine but if you're following along with

2114
00:02:10,800 --> 00:02:13,920
this course i strongly suggest actually do it the way i'm doing especially if

2115
00:02:13,920 --> 00:02:18,720
you if you if it's the first time you're doing this if it's if you've done this

2116
00:02:18,720 --> 00:02:21,680
before you may just be comfortable with creating

2117
00:02:21,680 --> 00:02:25,440
another type of collection then be my guest please go ahead but it might then

2118
00:02:25,440 --> 00:02:30,720
be difficult for you later on to follow along with the course

2119
00:02:30,720 --> 00:02:34,552
okay so those are collections

2120
00:02:34,552 --> 00:02:40,640
so let's go ahead and um tap the start collection button in here

2121
00:02:40,640 --> 00:02:45,760
um as you can see in here it says okay this collection is being created in the

2122
00:02:45,760 --> 00:02:50,000
root path and just give me an id and here's a collection set of documents

2123
00:02:50,000 --> 00:02:53,760
that contain data and in here it's storing a collection of

2124
00:02:53,760 --> 00:02:56,400
users but remember we don't have to actually

2125
00:02:56,400 --> 00:03:00,480
store users in our database firebase is already taking care of this i actually

2126
00:03:00,480 --> 00:03:04,320
believe this is a bad example that they provided to ask people to say example

2127
00:03:04,320 --> 00:03:08,960
collection of users because this kind of gives id idea to developers oh now i

2128
00:03:08,960 --> 00:03:14,080
have to store my users here but those users are already stored at the firebase

2129
00:03:14,080 --> 00:03:18,160
level okay so let's go and go ahead in here and

2130
00:03:18,160 --> 00:03:23,760
just say we're storing nodes okay and we're just gonna say next

2131
00:03:23,760 --> 00:03:27,440
and you can see in here now we're getting something called a document

2132
00:03:27,440 --> 00:03:30,552
parent path notes and then it says a document id a

2133
00:03:30,552 --> 00:03:33,920
collection must contain at least one document cloud firestore's unit of

2134
00:03:33,920 --> 00:03:39,440
storage documents store your data as fields auto generate a document or the

2135
00:03:39,440 --> 00:03:44,480
id or customize one if needed okay so

2136
00:03:44,480 --> 00:03:47,832
that that brings us to what documents are

2137
00:03:47,832 --> 00:03:50,320
um a document

2138
00:03:50,320 --> 00:03:55,512
you could look at it as if you're if you know about uh

2139
00:03:55,512 --> 00:03:59,832
sql from before if you followed along with what being and what we've been

2140
00:03:59,832 --> 00:04:04,480
creating like when we looked at db browser for sql lite

2141
00:04:04,480 --> 00:04:08,080
then we had these tables like user and notes

2142
00:04:08,080 --> 00:04:13,440
these uh these are like the schemas of a document

2143
00:04:13,440 --> 00:04:17,440
so as you can see here and here says every note

2144
00:04:17,440 --> 00:04:21,600
is created this way it has an id it has a user id it has a text is synced with

2145
00:04:21,600 --> 00:04:25,600
cloud remember all those fields and it has that's the schema

2146
00:04:25,600 --> 00:04:31,192
in far in the firestore world those are documents so that entire notes

2147
00:04:31,192 --> 00:04:36,080
schema is one document and every field in it then it can have a data type so

2148
00:04:36,080 --> 00:04:38,640
those fields you may know them as columns

2149
00:04:38,640 --> 00:04:42,480
from before when we created our own tables okay so

2150
00:04:42,480 --> 00:04:47,120
if we go back into db browser you may not have this db browser for sql

2151
00:04:47,120 --> 00:04:50,552
light open and that's completely fine we're not gonna actually work with it

2152
00:04:50,552 --> 00:04:55,360
right now you may have you may even have like is toss that database in the trash

2153
00:04:55,360 --> 00:04:58,800
and that's completely fine i just want to show you this um

2154
00:04:58,800 --> 00:05:04,232
that when we created this node table or the node documents then we had different

2155
00:05:04,232 --> 00:05:09,280
fields remember id user id text and those were the exact same things in here

2156
00:05:09,280 --> 00:05:14,552
okay so if i if i go ahead and create a new

2157
00:05:14,552 --> 00:05:19,440
console firebase and have a look at for instance my

2158
00:05:19,440 --> 00:05:25,360
other uh firebase projects i can see i have a notes app and you can here see

2159
00:05:25,360 --> 00:05:30,160
that um the way i had designed this uh in the beginning of this course is i had

2160
00:05:30,160 --> 00:05:34,552
a collection and then every collection had documents in it that had text and

2161
00:05:34,552 --> 00:05:38,800
then user id okay so that's what we're gonna do in here we're just gonna say a

2162
00:05:38,800 --> 00:05:42,800
field of text and it's typed string and it has no

2163
00:05:42,800 --> 00:05:46,800
value okay and then we're gonna add a new field in here and just call it use

2164
00:05:46,800 --> 00:05:51,120
righty okay and then in here it has no value

2165
00:05:51,120 --> 00:05:56,800
either and then a document id that we're just gonna auto generate okay so we just

2166
00:05:56,800 --> 00:06:03,120
pretty much just created a new note okay with a random document id and it has a

2167
00:06:03,120 --> 00:06:07,280
field of text and another field called user id

2168
00:06:07,280 --> 00:06:11,832
great then i need you to press the save button and now you'll see here we have

2169
00:06:11,832 --> 00:06:16,080
our notes collection and inside there we have a document that has these two

2170
00:06:16,080 --> 00:06:20,960
fields okay so what you could do also is to delete

2171
00:06:20,960 --> 00:06:25,600
either a collection or delete a a document so i'm just going to say delete

2172
00:06:25,600 --> 00:06:30,552
document and start delete and as you can see now we have an empty collection

2173
00:06:30,552 --> 00:06:34,720
called nodes i still find this a little bit peculiar

2174
00:06:34,720 --> 00:06:38,080
that when we create a collection firebase

2175
00:06:38,080 --> 00:06:42,400
forces us to create a document inside it like if i go and say start collection

2176
00:06:42,400 --> 00:06:47,760
and then press the next button in here i can't actually save my empty collection

2177
00:06:47,760 --> 00:06:51,760
and it says every let's see here a collection must contain

2178
00:06:51,760 --> 00:06:54,552
at least one document so

2179
00:06:54,552 --> 00:06:57,600
i'm not sure if that's actually true because you can see now we have a

2180
00:06:57,600 --> 00:07:01,920
collection with no document so i'm not sure why that was created why

2181
00:07:01,920 --> 00:07:05,040
that uh rule was set when you create a new

2182
00:07:05,040 --> 00:07:08,552
collection but just know that it's not completely true so you can have a

2183
00:07:08,552 --> 00:07:12,960
collection with no documents all right

2184
00:07:12,960 --> 00:07:18,800
so now let's talk a little about streams of data if you remember from our

2185
00:07:18,800 --> 00:07:25,280
application in if we go to our i think it's called uh

2186
00:07:25,280 --> 00:07:28,552
node service here

2187
00:07:28,552 --> 00:07:33,600
you remember that we have this stream of database nodes as a stream of list of

2188
00:07:33,600 --> 00:07:39,120
database nodes and we call it all nodes in our application up to this point

2189
00:07:39,120 --> 00:07:43,680
we've had to manage these streams manually in that we have to like go

2190
00:07:43,680 --> 00:07:48,232
create a stream controller do this whole dance of um

2191
00:07:48,232 --> 00:07:52,080
unlisten populate the stream controller with the nodes

2192
00:07:52,080 --> 00:07:57,512
you'd be really really happy perhaps to hear that when we go to firebase and

2193
00:07:57,512 --> 00:08:02,232
firestore we don't have to do any of this because firestore

2194
00:08:02,232 --> 00:08:07,360
already has all of this built in in that when you for instance read all the

2195
00:08:07,360 --> 00:08:13,680
documents inside this notes collection that will actually be a stream of those

2196
00:08:13,680 --> 00:08:16,960
uh data points for you so

2197
00:08:16,960 --> 00:08:20,320
no more stream controller and no more streams

2198
00:08:20,320 --> 00:08:24,552
that you have to manage manually okay those will be exposed to your

2199
00:08:24,552 --> 00:08:28,552
application using firestore

2200
00:08:28,552 --> 00:08:32,320
so so as you saw and when i created this

2201
00:08:32,320 --> 00:08:35,920
collection to begin with i created it with

2202
00:08:35,920 --> 00:08:41,440
a note document that had a text and it had a user id field so

2203
00:08:41,440 --> 00:08:45,280
our goal in this chapter and going forward is to make sure that every node

2204
00:08:45,280 --> 00:08:50,872
has a text and it is actually linked to a firebase user using that user's user

2205
00:08:50,872 --> 00:08:53,360
id okay so

2206
00:08:53,360 --> 00:08:58,000
if we go to our application to our auth service so let's

2207
00:08:58,000 --> 00:09:02,960
go to off and then auth service in here and remember we're using firebase auth

2208
00:09:02,960 --> 00:09:06,872
provider so let's go in there and you can see that

2209
00:09:06,872 --> 00:09:11,280
when we say create user with email and password for instance then this function

2210
00:09:11,280 --> 00:09:15,512
returned something called user credential to us and user credential

2211
00:09:15,512 --> 00:09:19,040
actually has quite a few properties you can see it has a credential and it has a

2212
00:09:19,040 --> 00:09:23,832
user inside it of type user so if you go into that user you can see it has

2213
00:09:23,832 --> 00:09:28,232
different properties like display name email email verified metadata phone

2214
00:09:28,232 --> 00:09:33,832
number etc but this user also has something called a user's unique id

2215
00:09:33,832 --> 00:09:41,192
which we actually need in order to store notes into our collect notes collection

2216
00:09:41,192 --> 00:09:44,640
so and this is what i mean every document

2217
00:09:44,640 --> 00:09:47,760
that we create is for instance going to be node some

2218
00:09:47,760 --> 00:09:51,680
random id or something which we haven't decided yet and one of the fields let me

2219
00:09:51,680 --> 00:09:56,000
actually see if i can resize uh this safari window so you see it better so

2220
00:09:56,000 --> 00:09:59,120
it's going to have a text and the text is going to be generated by the user but

2221
00:09:59,120 --> 00:10:03,440
it's going to also have a field called user id okay so in this user id field we

2222
00:10:03,440 --> 00:10:07,040
actually need to store that user's gener

2223
00:10:07,040 --> 00:10:10,800
firebase generated id in there okay and

2224
00:10:10,800 --> 00:10:14,640
now going back to what we are doing with that user do you

2225
00:10:14,640 --> 00:10:20,720
remember we're not actually um exposing the firebase user to our application and

2226
00:10:20,720 --> 00:10:24,160
that's a great level of abstraction however we have a little bit of a

2227
00:10:24,160 --> 00:10:29,832
problem in that right now our user has email and is email verified it doesn't

2228
00:10:29,832 --> 00:10:34,552
actually have a unique id so our application is not going to be able to

2229
00:10:34,552 --> 00:10:39,680
associate new notes with an auth user

2230
00:10:39,680 --> 00:10:44,800
it's not going to be able to associate a new note with a user id okay

2231
00:10:44,800 --> 00:10:48,720
so we need to fix that so i'm just going to go to my notes a little bit in here

2232
00:10:48,720 --> 00:10:54,400
and what we need is to update our auth user as you can see in

2233
00:10:54,400 --> 00:10:58,480
here so in auth user.dart file as i've opened in

2234
00:10:58,480 --> 00:11:01,760
here and what we need is to add a new field

2235
00:11:01,760 --> 00:11:06,000
which is a required field and we need to make that

2236
00:11:06,000 --> 00:11:10,872
the id of that user okay

2237
00:11:10,872 --> 00:11:14,872
so let's go ahead and do that now so i'm just going to go ahead and say final

2238
00:11:14,872 --> 00:11:20,000
string and id so this field is not optional

2239
00:11:20,000 --> 00:11:25,680
here you see every user that comes into our application should have an id and

2240
00:11:25,680 --> 00:11:30,480
that's like the expectation that we have on our off users okay so i need you to

2241
00:11:30,480 --> 00:11:34,480
go ahead and add that please here of user class as well

2242
00:11:34,480 --> 00:11:40,000
let's then go in here and i'm going to add this um to um

2243
00:11:40,000 --> 00:11:43,920
the required fields i can see visual studio code wasn't able to actually meet

2244
00:11:43,920 --> 00:11:47,760
this required parameter i'm going to help visual studio code and

2245
00:11:47,760 --> 00:11:51,280
do that i'm just going to say required this id and i need you to do the same

2246
00:11:51,280 --> 00:11:55,832
thing please so now we have a problem in here in that

2247
00:11:55,832 --> 00:12:02,720
our auth user in here doesn't have an id where we created from firebase user

2248
00:12:02,720 --> 00:12:08,480
let's go and remedy that let's just say the id in here is the user uid remember

2249
00:12:08,480 --> 00:12:13,120
this uh parameter that i uh talked to you about okay

2250
00:12:13,120 --> 00:12:18,320
so that is now created and let me actually go to scrcpy i can see that

2251
00:12:18,320 --> 00:12:21,360
visual studio code has a little bit of problem hot reloading right now so

2252
00:12:21,360 --> 00:12:25,280
that's because probably the application wasn't in the foreground so that's fixed

2253
00:12:25,280 --> 00:12:28,480
now talking about scr cpy it's perhaps a

2254
00:12:28,480 --> 00:12:32,480
good idea for me to bring in crcpy here just to make sure that we're not

2255
00:12:32,480 --> 00:12:37,920
bringing and breaking anything okay so

2256
00:12:37,920 --> 00:12:41,192
so that's one change that we have to make to our auto user the other change

2257
00:12:41,192 --> 00:12:45,360
that we have to make is to make sure that the email parameter of our user is

2258
00:12:45,360 --> 00:12:48,400
not optional you see the way we are creating at the

2259
00:12:48,400 --> 00:12:50,720
moment are um

2260
00:12:50,720 --> 00:12:56,320
our application is that we've created the login process of a use email and

2261
00:12:56,320 --> 00:13:00,080
password authentication so we don't have like facebook authentication or google

2262
00:13:00,080 --> 00:13:03,040
authentication we only have username and password

2263
00:13:03,040 --> 00:13:08,232
sorry email and password so given that condition we can be sure that

2264
00:13:08,232 --> 00:13:11,832
every authenticated user in our application actually has an email

2265
00:13:11,832 --> 00:13:14,872
address okay so

2266
00:13:14,872 --> 00:13:20,160
let's go ahead and just say that email is not an optional field anymore and in

2267
00:13:20,160 --> 00:13:24,800
here we're going to explicitly unwrap that email all right so that's another

2268
00:13:24,800 --> 00:13:32,640
change that we made to our application so now that we've done that you can see

2269
00:13:32,640 --> 00:13:36,720
flutter is not so happy with those changes saying that well yeah you broke

2270
00:13:36,720 --> 00:13:41,120
something and it's our tests that have been broken

2271
00:13:41,120 --> 00:13:45,760
so as you can see uh we need to make sure that id is actually included in our

2272
00:13:45,760 --> 00:13:50,000
tests as well and since we're not actually creating a

2273
00:13:50,000 --> 00:13:55,120
specific test for that user id we can just add a random id in here

2274
00:13:55,120 --> 00:14:00,000
let's just say my id okay and i'm going to bring that and

2275
00:14:00,000 --> 00:14:05,512
bring it down here as well so we have an id field in both cases of auth user

2276
00:14:05,512 --> 00:14:09,360
inside our tests

2277
00:14:09,360 --> 00:14:12,480
okay now we have another problem as you can see

2278
00:14:12,480 --> 00:14:15,512
in the captions in our create update note view

2279
00:14:15,512 --> 00:14:20,960
we are unwrapping the user's email and that's what this little orange views um

2280
00:14:20,960 --> 00:14:25,192
folder is it's not red meaning that

2281
00:14:25,192 --> 00:14:29,920
well yeah it's not an error but it's a warning so let's go to this create

2282
00:14:29,920 --> 00:14:33,600
update note view and have a look at this uh

2283
00:14:33,600 --> 00:14:38,160
field in here as you can see we're in inside the get a create or get existing

2284
00:14:38,160 --> 00:14:42,400
note and we are unwrapping this email but

2285
00:14:42,400 --> 00:14:46,400
right now the warning is saying what is it saying the uh uh

2286
00:14:46,400 --> 00:14:50,480
asterisk will have no effect because the receiver can't be not try removing the

2287
00:14:50,480 --> 00:14:54,800
asterisk operator and i need you to do that please

2288
00:14:54,800 --> 00:14:58,552
we have another problem also we have another warning inside the notes of you

2289
00:14:58,552 --> 00:15:01,360
and i believe we're doing something similar in the notes view so let's see

2290
00:15:01,360 --> 00:15:05,360
if you can find a warning [Music]

2291
00:15:05,360 --> 00:15:08,720
where is the warning

2292
00:15:08,720 --> 00:15:12,872
i actually don't oh here we have the user email in here as well so i'm just

2293
00:15:12,872 --> 00:15:17,192
going to remove the asterisk after that so i need you to do the same thing

2294
00:15:17,192 --> 00:15:20,480
please

2295
00:15:20,480 --> 00:15:23,360
okay now we're gonna get to the juicy parts

2296
00:15:23,360 --> 00:15:28,480
of the uh cloud storage integration so i'm clean i'm basically removing all the

2297
00:15:28,480 --> 00:15:32,872
file all the dart um tabs from here i'm actually not deleting the files i'm

2298
00:15:32,872 --> 00:15:36,080
removing like that tab so it's a clean slate

2299
00:15:36,080 --> 00:15:40,480
then what we need is to um create

2300
00:15:40,480 --> 00:15:44,960
all our cloud storage exceptions you see if you remember from when we worked with

2301
00:15:44,960 --> 00:15:51,192
our quad service which is a node service then we also had a file under the croth

2302
00:15:51,192 --> 00:15:55,360
folder called crowd exceptions and in here we define all the different things

2303
00:15:55,360 --> 00:16:00,080
that could go wrong when the user is working with our node service now that

2304
00:16:00,080 --> 00:16:05,680
we're moving away from crud we need to have our new exceptions defined

2305
00:16:05,680 --> 00:16:09,192
somewhere and and

2306
00:16:09,192 --> 00:16:11,680
as you can see in the cache just like we had the crowd exceptions we're also

2307
00:16:11,680 --> 00:16:15,120
going to have some exceptions thrown by our new fire

2308
00:16:15,120 --> 00:16:19,440
firestore service which we haven't developed yet but we need to define

2309
00:16:19,440 --> 00:16:24,160
those exceptions at least okay so

2310
00:16:24,160 --> 00:16:28,160
what we need now is to go and create that file so i need you to please create

2311
00:16:28,160 --> 00:16:34,080
a file under lib services cloud and then create that file as cloud

2312
00:16:34,080 --> 00:16:38,080
storage exception so i'm going to do that as well so let's

2313
00:16:38,080 --> 00:16:41,600
see i'm going to fold all the folders in here

2314
00:16:41,600 --> 00:16:46,400
so we have lib services and then cloud you can see we don't have cloud at the

2315
00:16:46,400 --> 00:16:51,120
moment so we do have services and we have off in there and crowd so i'm gonna

2316
00:16:51,120 --> 00:16:55,600
right click on services and say new file and then in here i'm just gonna say

2317
00:16:55,600 --> 00:16:59,600
cloud and then slash cloud storage

2318
00:16:59,600 --> 00:17:04,080
exceptions.dart okay

2319
00:17:04,080 --> 00:17:08,552
so after the creation of that file

2320
00:17:08,552 --> 00:17:13,040
i'm going to remove the project explorer there as well what we need then is to

2321
00:17:13,040 --> 00:17:17,920
define a super class for all our cl cloud

2322
00:17:17,920 --> 00:17:20,552
exceptions if you remember from the crowd

2323
00:17:20,552 --> 00:17:24,552
exceptions that we created in here all those exceptions were actually of

2324
00:17:24,552 --> 00:17:28,480
type exception and that's one way of doing that however

2325
00:17:28,480 --> 00:17:32,080
if you want to group your exceptions under one

2326
00:17:32,080 --> 00:17:34,320
super exception

2327
00:17:34,320 --> 00:17:39,040
and you could then handle them quite smoothly or better

2328
00:17:39,040 --> 00:17:41,760
actually i would say in

2329
00:17:41,760 --> 00:17:46,720
at the call site and so that basically is going to use inheritance and then you

2330
00:17:46,720 --> 00:17:50,800
and we are going to create a new exception as you can see

2331
00:17:50,800 --> 00:17:55,680
here called cloud storage exception and all our cloud exceptions are going to be

2332
00:17:55,680 --> 00:18:00,160
of that type so makes grouping and catching these exceptions in the future

2333
00:18:00,160 --> 00:18:05,920
a lot easier okay so let's go ahead and

2334
00:18:05,920 --> 00:18:11,192
create our first exception it is called i can see it's called cloud storage

2335
00:18:11,192 --> 00:18:14,080
exception so let's go ahead and say clouds and

2336
00:18:14,080 --> 00:18:21,040
class cloud storage exception and implements exception

2337
00:18:21,040 --> 00:18:24,640
okay and we're also going to create a

2338
00:18:24,640 --> 00:18:29,680
constant constructor for it so it makes creating instance of this a lot easier

2339
00:18:29,680 --> 00:18:35,192
and you could also basically say that this is um an

2340
00:18:35,192 --> 00:18:39,360
immutable class meaning that this class and all its subclasses need to be

2341
00:18:39,360 --> 00:18:43,832
immutable you could do that all right that's fine as well but usually

2342
00:18:43,832 --> 00:18:47,512
exceptions aren't marked with this it's usually data classes that are marked

2343
00:18:47,512 --> 00:18:53,040
with immutable so i'm not gonna do that right now

2344
00:18:53,040 --> 00:18:57,512
okay that thing is done um

2345
00:18:57,512 --> 00:19:01,512
now so that's the parent exception we should try not to throw that exception

2346
00:19:01,512 --> 00:19:06,232
as it is we have to throw subclass subclasses of that exception okay

2347
00:19:06,232 --> 00:19:09,280
now the first exception that we're going to

2348
00:19:09,280 --> 00:19:13,360
define is could not create node exception i believe it's called yes and

2349
00:19:13,360 --> 00:19:20,640
we're going to throw this in our to be written a class soon uh upon you

2350
00:19:20,640 --> 00:19:25,280
trying to create a new note if firebase firestore is not able to actually create

2351
00:19:25,280 --> 00:19:28,160
that note then we're gonna throw this error okay

2352
00:19:28,160 --> 00:19:34,400
so i'm gonna then define that exception and you will need to type this then um i

2353
00:19:34,400 --> 00:19:38,800
just brought it from my notes

2354
00:19:38,800 --> 00:19:44,160
now also in this screen where we have all the notes displayed for a given user

2355
00:19:44,160 --> 00:19:47,920
we may also not be able to retrieve all the notes for that user for instance if

2356
00:19:47,920 --> 00:19:51,832
there is a network connection issue or whatever whatever other issues that may

2357
00:19:51,832 --> 00:19:54,232
arise so we need to have an exception for that

2358
00:19:54,232 --> 00:19:58,400
as well and that exception is called could not get all nodes exception okay

2359
00:19:58,400 --> 00:20:03,512
so let's define that as well and it's written just like could not get

2360
00:20:03,512 --> 00:20:07,760
all notes exceptions exception

2361
00:20:07,760 --> 00:20:12,480
the next exception that we have to define is called a could not update

2362
00:20:12,480 --> 00:20:17,360
nodes so we have create node exception get node exception and now we're on the

2363
00:20:17,360 --> 00:20:23,120
u part of crot so you see the

2364
00:20:23,120 --> 00:20:31,040
create part is a c in crud gets is r and now we're looking at you okay

2365
00:20:31,040 --> 00:20:36,640
and that is uh could not update node exception so

2366
00:20:36,640 --> 00:20:40,232
so we could say this is um

2367
00:20:40,232 --> 00:20:44,640
you in crud and the get

2368
00:20:44,640 --> 00:20:51,680
is r in crop and create a c in crud okay and so we

2369
00:20:51,680 --> 00:20:55,360
have c r u and then we have to define d

2370
00:20:55,360 --> 00:21:00,400
which is for delete infrared and that's exactly what we're going to

2371
00:21:00,400 --> 00:21:05,680
do now so let's go define could not delete node exception all right so

2372
00:21:05,680 --> 00:21:10,960
let's then say be in crop okay so now we have

2373
00:21:10,960 --> 00:21:16,552
um three four uh exceptions defined and all of those exceptions are uh

2374
00:21:16,552 --> 00:21:22,872
inheriting from cloud storage exception

2375
00:21:22,872 --> 00:21:26,400
okay um now that we've talked about the

2376
00:21:26,400 --> 00:21:30,552
exceptions we also have to talk about the actual cloud storage service you see

2377
00:21:30,552 --> 00:21:34,640
we have our quad service at the moment which we've been working quite a lot

2378
00:21:34,640 --> 00:21:38,960
with and we're very proud of it actually it's a lot of code in my implementation

2379
00:21:38,960 --> 00:21:45,600
at least in here we have about 360 lines of code

2380
00:21:45,600 --> 00:21:49,760
i mean it's not all code there there's also spaces there's like

2381
00:21:49,760 --> 00:21:53,680
i think there are some annotations like immutable etc but there's quite a lot of

2382
00:21:53,680 --> 00:21:56,960
code okay and there's a print statement in here which i actually have to remove

2383
00:21:56,960 --> 00:21:59,512
okay so

2384
00:21:59,512 --> 00:22:03,440
there's quite a lot of code and this is working with sql lite but we also need a

2385
00:22:03,440 --> 00:22:07,120
service that works with firebase firestore

2386
00:22:07,120 --> 00:22:12,320
so we need to create that service soon so just know that we are going to have

2387
00:22:12,320 --> 00:22:15,920
crud in here which is going to talk with sqlite

2388
00:22:15,920 --> 00:22:19,512
but we're moving actually away from it so

2389
00:22:19,512 --> 00:22:23,360
let's then fix that um

2390
00:22:23,360 --> 00:22:27,600
so let's go in here and have a look at our constants

2391
00:22:27,600 --> 00:22:31,512
and if you look at our node servicing here

2392
00:22:31,512 --> 00:22:36,640
and we have our constants in here we have routes and at

2393
00:22:36,640 --> 00:22:42,320
the end of node service we have some constants defined right in this class

2394
00:22:42,320 --> 00:22:46,720
or right in this dart file and some people may like this but i

2395
00:22:46,720 --> 00:22:51,360
personally prefer to have my constants defined in separate files even though

2396
00:22:51,360 --> 00:22:56,320
these constants are very related only to this file but just

2397
00:22:56,320 --> 00:23:00,400
making them putting them in separate places just makes it easier to look at

2398
00:23:00,400 --> 00:23:04,160
because these constants at the moment like hidden at the bottom very bottom of

2399
00:23:04,160 --> 00:23:07,832
this file so let's go ahead and define our

2400
00:23:07,832 --> 00:23:11,440
constants so let's have a look at the path it's going to be in services cloud

2401
00:23:11,440 --> 00:23:17,192
and then cloud storage constants on the services now we have cloud

2402
00:23:17,192 --> 00:23:22,552
and under cloud we have cloud storage exceptions i think exceptions yep now we

2403
00:23:22,552 --> 00:23:28,160
have to define cloud storage constants so new file cloud storage

2404
00:23:28,160 --> 00:23:32,552
constants dart and

2405
00:23:32,552 --> 00:23:35,120
i'm going to go to my notes [Music]

2406
00:23:35,120 --> 00:23:39,680
constants all right now if you remember from our note series

2407
00:23:39,680 --> 00:23:44,400
we define like the tables and excuse me

2408
00:23:44,400 --> 00:23:50,320
and we defined the tables the columns and and even the format of creating new

2409
00:23:50,320 --> 00:23:54,872
tables we don't really need these all we need are these two fields as you

2410
00:23:54,872 --> 00:24:00,232
remember the text and also we need a field for user

2411
00:24:00,232 --> 00:24:03,192
id like this

2412
00:24:03,192 --> 00:24:08,480
so let's define these let's just say owner user id so let's go in here and

2413
00:24:08,480 --> 00:24:15,280
say const increase the size owner user

2414
00:24:15,280 --> 00:24:23,192
id is just user id like this and then we're gonna say const text field name

2415
00:24:23,192 --> 00:24:28,080
excuse me so i need you to define these two fields as well for your application

2416
00:24:28,080 --> 00:24:32,160
okay so let's go back to the original font

2417
00:24:32,160 --> 00:24:36,000
size in there so

2418
00:24:36,000 --> 00:24:39,360
now that we've defined that if you remember from our note service we had

2419
00:24:39,360 --> 00:24:43,760
these beautiful classes in here a call called a database node and a database

2420
00:24:43,760 --> 00:24:47,600
user now given that we're moving away from

2421
00:24:47,600 --> 00:24:51,040
storing things and notes inside the sqlite

2422
00:24:51,040 --> 00:24:54,960
database and we're moving to towards a firestore um

2423
00:24:54,960 --> 00:24:58,640
databases we actually don't need a database user

2424
00:24:58,640 --> 00:25:02,000
anymore but we do need some sort of a class that

2425
00:25:02,000 --> 00:25:07,280
represents these documents that we're going to create in here okay and

2426
00:25:07,280 --> 00:25:11,512
what we are going to call that is called a cloud node

2427
00:25:11,512 --> 00:25:15,600
so let's go ahead you see here is called a database node so then you kind of know

2428
00:25:15,600 --> 00:25:19,832
that it is a local database maybe you could rename this local database node if

2429
00:25:19,832 --> 00:25:23,120
you want to but i'm not going to do that simply because we're moving away from

2430
00:25:23,120 --> 00:25:27,040
this so what's the point of refactoring it so

2431
00:25:27,040 --> 00:25:31,360
i'm going to close node service so then let's go ahead and create a new file

2432
00:25:31,360 --> 00:25:36,800
called cloud note dart under services lib services cloud

2433
00:25:36,800 --> 00:25:41,600
and i'm going to call it cloud underscore node.dark

2434
00:25:41,600 --> 00:25:47,600
in here now what we need to do is actually implement cloud nodes

2435
00:25:47,600 --> 00:25:50,640
excuse me so

2436
00:25:50,640 --> 00:25:55,040
what a cloud node actually is going to contain there are three properties that

2437
00:25:55,040 --> 00:25:59,920
the cloud node has to contain and they're namely the

2438
00:25:59,920 --> 00:26:04,640
actual identifier of that node and i apologize i actually have to put myself

2439
00:26:04,640 --> 00:26:10,640
into do not disturb so so

2440
00:26:10,640 --> 00:26:14,232
there are three things a cloud node has to contain

2441
00:26:14,232 --> 00:26:19,512
one is the actual like primary key of that note in our database every document

2442
00:26:19,512 --> 00:26:24,800
that is generated by firebase is going to have a unique id if you're

2443
00:26:24,800 --> 00:26:27,832
coming from like backend development then you're already familiar with this

2444
00:26:27,832 --> 00:26:32,160
for instance django has this idea of a pk which is primary key you can also

2445
00:26:32,160 --> 00:26:35,680
read it as id so everything that's stored in the database has some sort of

2446
00:26:35,680 --> 00:26:40,080
a primary key firestore is no different so every

2447
00:26:40,080 --> 00:26:43,832
document that is created inside a firestore database is also going to have

2448
00:26:43,832 --> 00:26:47,512
a primary key okay so that's the first property that our

2449
00:26:47,512 --> 00:26:52,960
cloud node is going to contain the other two are very familiar because

2450
00:26:52,960 --> 00:26:57,512
you saw here in the documents we're gonna have a text field and the other

2451
00:26:57,512 --> 00:27:01,280
one is like the owner user id so there are three fields that we have to add to

2452
00:27:01,280 --> 00:27:05,760
our class so let's go ahead and do that let's just say

2453
00:27:05,760 --> 00:27:11,832
um if i can type here so class sorry i have a microphone right

2454
00:27:11,832 --> 00:27:16,000
in front of my face like it's blocking my keyboard so that's sometimes that's

2455
00:27:16,000 --> 00:27:20,000
why i have to like look like this just to find my keyboard

2456
00:27:20,000 --> 00:27:23,040
so let's say cloud node um

2457
00:27:23,040 --> 00:27:26,960
and inside our cloud node let's define these three properties so let's just say

2458
00:27:26,960 --> 00:27:31,832
final string document id okay

2459
00:27:31,832 --> 00:27:36,552
and i'm going to copy the string here as well and say owner user id and then

2460
00:27:36,552 --> 00:27:41,512
we're going to say text okay help from visual studio code to

2461
00:27:41,512 --> 00:27:45,680
implement the constructor and um in here then i'm going to say

2462
00:27:45,680 --> 00:27:50,000
this is a constant constructor okay as i said you could actually go and define

2463
00:27:50,000 --> 00:27:53,040
this as immutable which i actually prefer in this case to be honest with

2464
00:27:53,040 --> 00:27:56,160
you i hadn't i hadn't planned to make this immutable but i think actually

2465
00:27:56,160 --> 00:28:02,160
makes sense if it's a cloud node then let's just say it's immutable okay

2466
00:28:02,160 --> 00:28:07,440
so that's that's the first part and i also know that we need to make these

2467
00:28:07,440 --> 00:28:11,512
required parameters so let's go ahead and do that let's just say required

2468
00:28:11,512 --> 00:28:16,400
before all of these parameters okay so that they're actually required named

2469
00:28:16,400 --> 00:28:20,400
parameters that are not optional basically

2470
00:28:20,400 --> 00:28:25,440
okay that's that if you look at how our database nodes

2471
00:28:25,440 --> 00:28:32,320
let's see if we can find database node inside nodes service

2472
00:28:32,320 --> 00:28:36,640
so let's have a look at database node do you remember that we had these fields

2473
00:28:36,640 --> 00:28:41,680
but we're pretty much never calling this database nodes a constructor we're

2474
00:28:41,680 --> 00:28:44,960
always using this thing database node from row

2475
00:28:44,960 --> 00:28:49,192
and this is basically the object you just see this map is the object that

2476
00:28:49,192 --> 00:28:53,600
we're reading from our sqlite database and crew and then we're internally

2477
00:28:53,600 --> 00:28:59,280
creating instances of our database node from that object okay

2478
00:28:59,280 --> 00:29:02,960
so this kind of map is what you will also

2479
00:29:02,960 --> 00:29:07,360
receive from firestore

2480
00:29:07,360 --> 00:29:11,280
however it's going to be wrapped inside something called a query document

2481
00:29:11,280 --> 00:29:17,360
snapshot so it's just a wrapper around your data so

2482
00:29:17,360 --> 00:29:22,000
let's go ahead in here and and what we're going to say is if you just type

2483
00:29:22,000 --> 00:29:27,440
query document snapshot then visual studio code is going to import

2484
00:29:27,440 --> 00:29:33,040
this automatically for you okay so then it should be imported in here so

2485
00:29:33,040 --> 00:29:37,600
that's great and also we need our um

2486
00:29:37,600 --> 00:29:41,920
cloud storage constants so let's go and import those as well so let's just say

2487
00:29:41,920 --> 00:29:47,280
package and my nodes and we have uh what do we have

2488
00:29:47,280 --> 00:29:51,832
where is this stored inside services cloud so services cloud

2489
00:29:51,832 --> 00:29:56,232
constant or sorry cloud storage constants so

2490
00:29:56,232 --> 00:30:01,512
you need cloud firestore dart and then your constants as well

2491
00:30:01,512 --> 00:30:05,920
let's go ahead and create kind of like a constructor that we are going to call

2492
00:30:05,920 --> 00:30:11,680
from snapshot and this constructor is going to allow firestore to give us a

2493
00:30:11,680 --> 00:30:15,920
snapshot of it and cloud nodes and then we're going to create an instance of our

2494
00:30:15,920 --> 00:30:21,600
cloud node from that okay so let's just say cloud node from

2495
00:30:21,600 --> 00:30:26,400
from snapshot and parameter is going to be query

2496
00:30:26,400 --> 00:30:32,000
document snapshot that has that map that we actually need

2497
00:30:32,000 --> 00:30:36,480
like this and we're going to call it snapshot like that okay

2498
00:30:36,480 --> 00:30:39,280
so now you can see that we're getting some

2499
00:30:39,280 --> 00:30:43,440
errors from um from dart saying all final variables

2500
00:30:43,440 --> 00:30:46,080
need to be initialized and a function body must be provided okay we're going

2501
00:30:46,080 --> 00:30:52,080
to fix it soon so this is this is the um signature of your function then in here

2502
00:30:52,080 --> 00:30:56,960
your job now is to make sure that all your fields are initialized so let's

2503
00:30:56,960 --> 00:31:01,040
let's just say if i can type again document id

2504
00:31:01,040 --> 00:31:06,872
it comes from our snapshot id that's a property that is stored on this

2505
00:31:06,872 --> 00:31:10,400
at the snapshot level so you can get that id okay

2506
00:31:10,400 --> 00:31:14,480
and what we're going to say is that we have an owner user id that we also have

2507
00:31:14,480 --> 00:31:18,552
to fill in so that comes from the snapshot

2508
00:31:18,552 --> 00:31:21,600
uh snap shot

2509
00:31:21,600 --> 00:31:24,800
data and in there then we have to say the

2510
00:31:24,800 --> 00:31:29,832
owner user id field name let's see owner user

2511
00:31:29,832 --> 00:31:32,400
id

2512
00:31:32,400 --> 00:31:36,552
under user id let's call this field name so sorry about that let's go back to the

2513
00:31:36,552 --> 00:31:40,872
cloud storage constants and fix this to say owner user id field name actually

2514
00:31:40,872 --> 00:31:43,360
okay

2515
00:31:43,360 --> 00:31:47,680
so we missed that but that's okay it's just a naming change so

2516
00:31:47,680 --> 00:31:50,720
then we're gonna say owner user id field name

2517
00:31:50,720 --> 00:31:55,600
so that's for the owner user id and we're going to get the text which

2518
00:31:55,600 --> 00:32:00,080
is equal to snapshot dot data

2519
00:32:00,080 --> 00:32:05,120
and text field name as string

2520
00:32:05,120 --> 00:32:09,512
okay so what we have is a beautiful cloud node immutable class with a

2521
00:32:09,512 --> 00:32:15,360
constant constructor and also we get this snapshot um query document snapshot

2522
00:32:15,360 --> 00:32:20,320
from firestore soon and we can create instances of our cloud nodes as you'll

2523
00:32:20,320 --> 00:32:23,832
soon see

2524
00:32:23,832 --> 00:32:29,920
all right now what we need um is to create our new cloud firestore

2525
00:32:29,920 --> 00:32:35,360
service so this is like the beginning of moving

2526
00:32:35,360 --> 00:32:41,920
away from cloud storage into firestore so this is actually very exciting and a

2527
00:32:41,920 --> 00:32:45,600
little bit um a little bit intimidating maybe at first

2528
00:32:45,600 --> 00:32:49,512
because well we kind of have to like redo quite a lot of work

2529
00:32:49,512 --> 00:32:54,232
but given that firestore provides you with pretty much all the tools that you

2530
00:32:54,232 --> 00:32:57,600
need as you'll soon see the implementations of the functions that

2531
00:32:57,600 --> 00:33:02,800
we're gonna that we're gonna do are so minimal because the base is there fire

2532
00:33:02,800 --> 00:33:06,640
stores already provided the base we just have to hook into it and grab the data

2533
00:33:06,640 --> 00:33:11,120
write the data etc so so let's close all these tabs that we

2534
00:33:11,120 --> 00:33:16,232
have at the moment excuse me and let's go to this um

2535
00:33:16,232 --> 00:33:20,800
services cloud and create our new firebase cloud storage dart file

2536
00:33:20,800 --> 00:33:26,800
firebase cloud storage dart

2537
00:33:26,800 --> 00:33:30,960
all right so i'm actually going to do that as well so

2538
00:33:30,960 --> 00:33:34,800
firebase cloud storage

2539
00:33:34,800 --> 00:33:39,680
in my notes all right so let's go ahead and say we have a new

2540
00:33:39,680 --> 00:33:45,192
class called firebase cloud storage like that

2541
00:33:45,192 --> 00:33:49,512
at the moment it doesn't do really anything but what we need to do uh is to

2542
00:33:49,512 --> 00:33:52,800
make uh make this a shared instance

2543
00:33:52,800 --> 00:33:56,400
and i'm gonna bring the caption for that and

2544
00:33:56,400 --> 00:34:00,480
if you remember we've already made our node service

2545
00:34:00,480 --> 00:34:03,120
a

2546
00:34:03,120 --> 00:34:06,480
a singleton so let's go back to our node service

2547
00:34:06,480 --> 00:34:10,480
command p on macintosh and visual studio code or control p in

2548
00:34:10,480 --> 00:34:15,120
windows and linux to bring up this search files by name field and i'm just

2549
00:34:15,120 --> 00:34:19,512
going to say note service if you remember inside note service i

2550
00:34:19,512 --> 00:34:23,440
think at the top we had this pattern

2551
00:34:23,440 --> 00:34:26,960
for creating a singleton do you remember this

2552
00:34:26,960 --> 00:34:32,400
right so we kind of need or sorry this part we

2553
00:34:32,400 --> 00:34:36,400
kind of need the same thing not kind of actually pretty much exactly

2554
00:34:36,400 --> 00:34:40,552
the same thing except for this part because this talks with a stream

2555
00:34:40,552 --> 00:34:45,920
controller so i find this pattern of creating singletons in dart still quite

2556
00:34:45,920 --> 00:34:49,920
hacky i think i've mentioned this before when we created the node service

2557
00:34:49,920 --> 00:34:53,920
but it's something that we have to do so make sure our firebase cloud storage is

2558
00:34:53,920 --> 00:34:58,800
actually a singleton okay so i'm gonna bring that code from my notes because i

2559
00:34:58,800 --> 00:35:02,800
don't think it's actually worth writing this and it's not worth your time or my

2560
00:35:02,800 --> 00:35:06,480
time but this is what you need to create so

2561
00:35:06,480 --> 00:35:10,720
what is happening in here is that we have a private constructor

2562
00:35:10,720 --> 00:35:13,760
then we're going to create a factory constructor which is the default

2563
00:35:13,760 --> 00:35:18,160
constructor of our of our class firebase cloud storage right here

2564
00:35:18,160 --> 00:35:23,360
and that is going to talk with a static final field which in turn calls this

2565
00:35:23,360 --> 00:35:26,400
private initializer so

2566
00:35:26,400 --> 00:35:33,512
in um in other languages like swift and rust it's it's a lot easier to create a

2567
00:35:33,512 --> 00:35:36,552
singleton but this is a pattern you have to do so

2568
00:35:36,552 --> 00:35:40,960
first create a private constructor then create a factory constructor that talks

2569
00:35:40,960 --> 00:35:48,400
with a static final which in turn talks with the private constructor okay

2570
00:35:48,400 --> 00:35:54,080
okay after you've taken care of that what we need to do is to grab all our

2571
00:35:54,080 --> 00:35:58,320
notes from our cloud storage okay

2572
00:35:58,320 --> 00:36:03,760
so let's just go ahead after this factory constructor we're gonna expose a

2573
00:36:03,760 --> 00:36:07,192
field as the note as the caption at the bottom of the screen in the case call

2574
00:36:07,192 --> 00:36:11,280
notes so i'm just going to say notes equal to

2575
00:36:11,280 --> 00:36:15,680
we're just going to say firebase and firestore and it's going to auto import

2576
00:36:15,680 --> 00:36:19,512
it for me so this is not a strange thing anymore to you as well

2577
00:36:19,512 --> 00:36:22,720
and then i'm just going to say our own instance and then

2578
00:36:22,720 --> 00:36:27,440
excuse me a collection called notes quotes as well

2579
00:36:27,440 --> 00:36:33,192
okay so this is how you actually talk with a

2580
00:36:33,192 --> 00:36:37,440
firestore so you can see that the signature of this collection is actually

2581
00:36:37,440 --> 00:36:40,872
returning use something called a collection reference

2582
00:36:40,872 --> 00:36:45,440
and you will soon see how we can extract our actual notes from this collection

2583
00:36:45,440 --> 00:36:48,400
all right and also remember

2584
00:36:48,400 --> 00:36:51,920
this isn't gonna work if you haven't actually created your notes collection

2585
00:36:51,920 --> 00:36:55,680
so if you haven't done that if you forgot to do that please go ahead

2586
00:36:55,680 --> 00:37:00,160
excuse me to go ahead and do that right now

2587
00:37:00,160 --> 00:37:05,040
so the first thing we need to do is to create a function for creating new nodes

2588
00:37:05,040 --> 00:37:08,400
all right excuse me

2589
00:37:08,400 --> 00:37:14,960
so let's go ahead um into our project and create a function as the

2590
00:37:14,960 --> 00:37:19,760
caption indicates i'm going to say void create new nodes in here

2591
00:37:19,760 --> 00:37:25,192
and then we're going to say we need a an owner id

2592
00:37:25,192 --> 00:37:30,480
so required string owner user id i believe we call it and then it's an

2593
00:37:30,480 --> 00:37:35,760
async function okay and then in here since you have

2594
00:37:35,760 --> 00:37:41,832
like a stream or a read write stream uh of all your notes and that's what this

2595
00:37:41,832 --> 00:37:45,512
uh collection reference means it's it's not

2596
00:37:45,512 --> 00:37:48,720
only a stream that you can read from but also it's a stream you can write to

2597
00:37:48,720 --> 00:37:51,920
that's why that's why it's not called a stream okay

2598
00:37:51,920 --> 00:37:55,832
because the stream is like you try to read only from it so

2599
00:37:55,832 --> 00:37:59,192
and in here what we're gonna do is going to say notes add

2600
00:37:59,192 --> 00:38:03,512
and you can see it literally says give me a map or a dictionary or however you

2601
00:38:03,512 --> 00:38:07,600
want to call it an object that has keys and values

2602
00:38:07,600 --> 00:38:11,192
what do you want me to store in a database and that's what nosql kind of

2603
00:38:11,192 --> 00:38:16,640
means in here is document based it's it has no real structure of what you're

2604
00:38:16,640 --> 00:38:21,360
adding everything that you add in here is going to be packaged into a document

2605
00:38:21,360 --> 00:38:25,192
that is going to be stored in here with the fields and the values that you

2606
00:38:25,192 --> 00:38:29,920
specified in here okay so let's go ahead and say we provide you

2607
00:38:29,920 --> 00:38:34,000
with a with a document in here and the first

2608
00:38:34,000 --> 00:38:38,872
field is owner user id field name and that's gonna auto import it from our

2609
00:38:38,872 --> 00:38:42,640
constants from before remember and in here the value of this is going

2610
00:38:42,640 --> 00:38:45,512
to be the owner user id and

2611
00:38:45,512 --> 00:38:48,320
the text field text

2612
00:38:48,320 --> 00:38:52,400
field name is just going to be an empty note

2613
00:38:52,400 --> 00:38:57,120
for now okay and remember this is an async asynchronous function which

2614
00:38:57,120 --> 00:39:00,640
returns a future of a document reference just like we have our collection

2615
00:39:00,640 --> 00:39:04,552
reference in here but we actually don't want its results right now at least so

2616
00:39:04,552 --> 00:39:08,080
we're just gonna wait on it so don't forget that weight because without doing

2617
00:39:08,080 --> 00:39:13,680
the weight this function is not actually going to be invoked

2618
00:39:13,680 --> 00:39:19,512
wow okay um what we need to do now then is to go to

2619
00:39:19,512 --> 00:39:24,000
the next item excuse me which is

2620
00:39:24,000 --> 00:39:27,440
getting notes by user id so the signature is going to be it's going to

2621
00:39:27,440 --> 00:39:30,720
return an i

2622
00:39:30,720 --> 00:39:34,872
of cloud note you given a user id so

2623
00:39:34,872 --> 00:39:39,280
as we said every every node we store in our database uh

2624
00:39:39,280 --> 00:39:42,960
is gonna have these two fields an owner and a text field so now what we want is

2625
00:39:42,960 --> 00:39:46,872
to grab all the nodes for a specific user okay

2626
00:39:46,872 --> 00:39:50,480
so let's go ahead and do that so it's called

2627
00:39:50,480 --> 00:39:56,480
um get notes and it's quite a meaty function actually i can see in here

2628
00:39:56,480 --> 00:40:04,400
so let's go ahead and do that right now let's say future of iterable um of cloud

2629
00:40:04,400 --> 00:40:07,600
nodes and i think we have to import cloud node as well so pressing this

2630
00:40:07,600 --> 00:40:10,232
button imports this for me if you're getting some errors it's probably

2631
00:40:10,232 --> 00:40:14,400
because your editor hasn't been able to find cloud nodes so

2632
00:40:14,400 --> 00:40:19,040
and then we're going to say get notes and a required parameter in here

2633
00:40:19,040 --> 00:40:26,160
under user id okay and it's an asynchronous function so like that

2634
00:40:26,160 --> 00:40:31,440
so what we're going to do then is to um a weights

2635
00:40:31,440 --> 00:40:35,920
uh on our on our notes in here you see we can

2636
00:40:35,920 --> 00:40:41,440
actually retrieve notes from our notes collection in here by saying notes where

2637
00:40:41,440 --> 00:40:45,360
so we're gonna do a search inside the notes uh

2638
00:40:45,360 --> 00:40:50,480
collection reference and that and you do that using the where clause okay

2639
00:40:50,480 --> 00:40:54,720
and these things could actually increa like create an exception i believe the

2640
00:40:54,720 --> 00:40:59,512
word clause could actually throw an exception whether it was this one

2641
00:40:59,512 --> 00:41:03,040
it's not documenting here but i do believe that it could actually create an

2642
00:41:03,040 --> 00:41:06,480
exception so let's go ahead and catch this so

2643
00:41:06,480 --> 00:41:11,192
let's just say try we're gonna try and then should anything happen in here

2644
00:41:11,192 --> 00:41:14,960
uh we're just gonna throw and could

2645
00:41:14,960 --> 00:41:20,160
not get all nodes exception and this is going to auto import that from our

2646
00:41:20,160 --> 00:41:24,320
previous code so i i shouldn't explain this over and over again you know

2647
00:41:24,320 --> 00:41:29,680
already how that works okay so now that we have that we have a try

2648
00:41:29,680 --> 00:41:35,832
and catch statement in there so let's just say we await on the notes

2649
00:41:35,832 --> 00:41:40,480
and we say uh where clause and the word clause is

2650
00:41:40,480 --> 00:41:45,360
going to say okay what is the field that you want to do

2651
00:41:45,360 --> 00:41:50,552
your work search on and we want to search for all notes that are for this

2652
00:41:50,552 --> 00:41:56,000
owner user id so let's just say owner user id field name

2653
00:41:56,000 --> 00:42:00,552
should be equal to you see that's the parameter is equal to owner user id like

2654
00:42:00,552 --> 00:42:03,360
that okay

2655
00:42:03,360 --> 00:42:07,680
waiting on it you see sorry after doing a word this gives you a query but then

2656
00:42:07,680 --> 00:42:11,512
you need to actually execute this query and you do that using its get function

2657
00:42:11,512 --> 00:42:14,640
and you see it returns and

2658
00:42:14,640 --> 00:42:19,440
let me see gets if i move my mouse over you see it returns a future of a query

2659
00:42:19,440 --> 00:42:22,640
snapshot with all the objects that firestore could retrieve from the

2660
00:42:22,640 --> 00:42:27,512
database okay so we have to get um

2661
00:42:27,512 --> 00:42:31,040
what we do then is to do then

2662
00:42:31,040 --> 00:42:35,680
that's that's how we work with future so event clause of the future allows you to

2663
00:42:35,680 --> 00:42:40,872
return it what it does is it returns the value of that future to you and it

2664
00:42:40,872 --> 00:42:44,960
allows you to return either a synchronous value inside the then

2665
00:42:44,960 --> 00:42:48,320
function or you could actually return another future

2666
00:42:48,320 --> 00:42:52,720
those who are familiar with node.js or just javascript in general

2667
00:42:52,720 --> 00:42:57,920
or even swift they're familiar with how promises and how futures work so this is

2668
00:42:57,920 --> 00:43:02,640
your chance of actually returning a value given this

2669
00:43:02,640 --> 00:43:07,760
future that is returned to you okay so we're going to call this basically

2670
00:43:07,760 --> 00:43:11,192
value at the moment and if i move my mouse over this you can see it says a

2671
00:43:11,192 --> 00:43:15,512
query snapshot of these um potentially written

2672
00:43:15,512 --> 00:43:19,680
red documents so in here what we're going to do is say

2673
00:43:19,680 --> 00:43:24,400
docs which is all the documents that could be read

2674
00:43:24,400 --> 00:43:27,920
and we're going to map all those and you can see in here

2675
00:43:27,920 --> 00:43:31,760
if i call this doc if i move my mouse over it so it creates

2676
00:43:31,760 --> 00:43:36,080
document snapshot whereas this one was a query snapshot this one is a query

2677
00:43:36,080 --> 00:43:41,192
document snapshot of those fields okay so let's go in here and what we're going

2678
00:43:41,192 --> 00:43:47,192
to do is to say we return inside this return a cloud node

2679
00:43:47,192 --> 00:43:51,760
and we have these three fields okay we have the document id owner user id and

2680
00:43:51,760 --> 00:43:55,920
the text so it's our chance basically to create

2681
00:43:55,920 --> 00:44:00,960
an instance of our cloud node right now i'm gonna put the

2682
00:44:00,960 --> 00:44:04,800
columns here so we get the formatting a little bit better

2683
00:44:04,800 --> 00:44:08,400
and what we need to do is to get the document id and the way to do that is

2684
00:44:08,400 --> 00:44:12,640
this dock has an id in here you can see it's a string so

2685
00:44:12,640 --> 00:44:19,040
and the other one is to dock and then we have the data

2686
00:44:19,040 --> 00:44:23,280
and let's just say owner user id field name

2687
00:44:23,280 --> 00:44:26,320
and that's a string

2688
00:44:26,320 --> 00:44:32,552
and in here we're gonna say then a doc data

2689
00:44:32,552 --> 00:44:38,640
and we say text field name as a string now remember this looks very

2690
00:44:38,640 --> 00:44:43,280
familiar where have we done this before yeah we've done this in cloud notes from

2691
00:44:43,280 --> 00:44:46,872
snapshot and don't worry we're actually gonna use

2692
00:44:46,872 --> 00:44:50,000
that function as soon we're gonna remove this return statement the way it's

2693
00:44:50,000 --> 00:44:53,440
written but let's just write it like this right now okay so it's easier to

2694
00:44:53,440 --> 00:44:56,552
understand

2695
00:44:56,552 --> 00:45:03,040
wow all right um i think i think that should be it

2696
00:45:03,040 --> 00:45:07,920
and so we have that excuse me

2697
00:45:07,920 --> 00:45:11,512
and um

2698
00:45:11,512 --> 00:45:15,512
yeah i believe i believe this is going to cover it for us right now so not much

2699
00:45:15,512 --> 00:45:19,280
more to explain about this to be honest so

2700
00:45:19,280 --> 00:45:23,360
we could also put a comma here to

2701
00:45:23,360 --> 00:45:27,440
make the code a little bit more readable and we have the value then

2702
00:45:27,440 --> 00:45:30,720
return and what we don't have to be honest with

2703
00:45:30,720 --> 00:45:34,400
you here is this return statement in here

2704
00:45:34,400 --> 00:45:38,720
or actually we created this like this so yeah it's an arrow function

2705
00:45:38,720 --> 00:45:42,800
so we don't have to have a special return statement but if you don't like

2706
00:45:42,800 --> 00:45:47,192
this kind of an arrow function you can grab your code that you've written up to

2707
00:45:47,192 --> 00:45:50,800
this point like this and create

2708
00:45:50,800 --> 00:45:56,320
curly brackets in here and instead use this syntax to say return

2709
00:45:56,320 --> 00:46:02,232
instead okay so it kind of depends on what you prefer um

2710
00:46:02,232 --> 00:46:05,832
i don't have a preference and i could use an error function the way it is so

2711
00:46:05,832 --> 00:46:09,040
i'm just going to leave it like this okay

2712
00:46:09,040 --> 00:46:12,872
and remember we're at the moment awaiting on this but we're not returning

2713
00:46:12,872 --> 00:46:18,320
it so let's just return so this is all basically just a fancy way of us

2714
00:46:18,320 --> 00:46:23,192
excuse me communicating with firebase firestore and reading documents and

2715
00:46:23,192 --> 00:46:27,360
there's so much to explain that i can't go through all of these but i really

2716
00:46:27,360 --> 00:46:30,160
suggest that you play with these functions yourself read the

2717
00:46:30,160 --> 00:46:35,280
documentations and see why is it that i'm using where and then get

2718
00:46:35,280 --> 00:46:39,192
so uh for that you need to read all the documentations

2719
00:46:39,192 --> 00:46:44,720
that come with these functions so you understand them better

2720
00:46:44,720 --> 00:46:51,440
okay um so that's getting notes by user id

2721
00:46:51,440 --> 00:46:54,570
now what we need is also um

2722
00:46:54,570 --> 00:46:58,160
[Music] what we need is

2723
00:46:58,160 --> 00:47:02,800
the ability for us to be able to provide our notes list

2724
00:47:02,800 --> 00:47:08,552
in here with a stream of notes for that particular user okay so

2725
00:47:08,552 --> 00:47:13,920
um as you as you know now in our note service the way we have it is we are

2726
00:47:13,920 --> 00:47:18,320
exposing this stream of list of database node and that's what we kind of also

2727
00:47:18,320 --> 00:47:21,600
need to do with our firebase cloud storage like have a function that our

2728
00:47:21,600 --> 00:47:25,120
nodes list excuse me can't subscribe to and read

2729
00:47:25,120 --> 00:47:28,480
all the available nodes for that given user so let's go ahead and do that let's

2730
00:47:28,480 --> 00:47:33,680
just call it a stream iterable and i have that function signature so i

2731
00:47:33,680 --> 00:47:38,160
don't think i should actually write it manually but you may need to write it so

2732
00:47:38,160 --> 00:47:42,800
so that's a function signature okay and in here what we're going to say is

2733
00:47:42,800 --> 00:47:47,040
that we're going to go to our notes collection in here and get all the

2734
00:47:47,040 --> 00:47:52,160
available snapshots let's see we have our notes and then we

2735
00:47:52,160 --> 00:47:57,280
have our snapshots and we're gonna map that and

2736
00:47:57,280 --> 00:48:01,600
let's just say yep gonna get our documents inside that

2737
00:48:01,600 --> 00:48:05,440
snapshot and then we're gonna

2738
00:48:05,440 --> 00:48:11,040
map that like that and let's just call it doc

2739
00:48:11,040 --> 00:48:15,832
and in here we're gonna create a cloud note from snapshots

2740
00:48:15,832 --> 00:48:21,440
of that doc like that and then in here

2741
00:48:21,440 --> 00:48:24,872
we're going to say where

2742
00:48:24,872 --> 00:48:28,480
that's our note and then we're going to say the notes

2743
00:48:28,480 --> 00:48:31,920
owner user id i'm gonna actually write this and then i'm gonna tell you what

2744
00:48:31,920 --> 00:48:34,800
i'm basically doing because there's quite a lot of code in here and like

2745
00:48:34,800 --> 00:48:39,120
pausing to describe every little bit of this code could actually make it look

2746
00:48:39,120 --> 00:48:43,512
more complicated than it is so and i'm just gonna then say owner user

2747
00:48:43,512 --> 00:48:45,760
id okay

2748
00:48:45,760 --> 00:48:50,400
but a semicolon there wait a minute

2749
00:48:50,400 --> 00:48:54,960
this ends there and then a semicolon there yeah so let's see what is

2750
00:48:54,960 --> 00:48:59,760
happening in here so this looks actually quite intimidating to look at but it's a

2751
00:48:59,760 --> 00:49:04,960
very simple piece of code so what we're doing in here is if you want

2752
00:49:04,960 --> 00:49:09,760
to grab a stream of data as it is evolving you want to be able to

2753
00:49:09,760 --> 00:49:12,872
subscribe to all the changes happening to it then you need to use something

2754
00:49:12,872 --> 00:49:17,512
called the snapshots as you can see this is a stream of query snapshot whereas

2755
00:49:17,512 --> 00:49:21,280
where is a query itself okay and then get

2756
00:49:21,280 --> 00:49:26,800
is a future so it just the get one literally takes a snapshot at that point

2757
00:49:26,800 --> 00:49:31,440
in time and returns it to you but if you want to like keep hold of

2758
00:49:31,440 --> 00:49:35,760
like if you want to be updated about all the changes live as they're happening to

2759
00:49:35,760 --> 00:49:40,552
your data in the notes collection then you need to subscribe to the snapshots

2760
00:49:40,552 --> 00:49:44,480
that's what we're doing okay so that's that first part with snapshots so we're

2761
00:49:44,480 --> 00:49:47,512
literally saying that we want to see all the changes as they're happening live

2762
00:49:47,512 --> 00:49:51,280
okay then it says okay i will give you all

2763
00:49:51,280 --> 00:49:54,800
the changes that are happening live and that comes inside the query snapshot

2764
00:49:54,800 --> 00:49:59,280
remember query snapshot from here remember query here

2765
00:49:59,280 --> 00:50:02,552
oops inside the get so

2766
00:50:02,552 --> 00:50:07,192
after this point is it's literally what we did in the get notes it's saying that

2767
00:50:07,192 --> 00:50:11,600
okay here is a query snapshot and then we're saying okay there are documents in

2768
00:50:11,600 --> 00:50:15,360
there and that's exactly what we're doing in here there's documents in the

2769
00:50:15,360 --> 00:50:20,480
query snapshot and then we're mapping every document to a cloud note all right

2770
00:50:20,480 --> 00:50:24,000
and then we're putting and where clause at the end

2771
00:50:24,000 --> 00:50:29,192
that says we're only interested in notes whose u owner user id is the owner user

2772
00:50:29,192 --> 00:50:34,552
id provided in here so without this word clause we're literally exposing all the

2773
00:50:34,552 --> 00:50:38,800
notes um to the current user for all users in the

2774
00:50:38,800 --> 00:50:43,600
system so that word clause is very important okay

2775
00:50:43,600 --> 00:50:47,600
so and this work clause as you can as you can see it is actually inside

2776
00:50:47,600 --> 00:50:53,512
flutter bin lip core iterable so that's nothing that is it's not a function that

2777
00:50:53,512 --> 00:50:57,920
firestore has provided for us okay

2778
00:50:57,920 --> 00:51:03,832
wow that was that was a lot of information

2779
00:51:03,832 --> 00:51:08,000
okay let's go ahead and talk about updating you notes sorry updating

2780
00:51:08,000 --> 00:51:12,720
existing notes so as we talked about it before if you have a note and you tap on

2781
00:51:12,720 --> 00:51:16,080
it the way it works in our application right now is i can tap on this node and

2782
00:51:16,080 --> 00:51:22,000
go and change its text like 22 and come back out and now it's changed to 22 okay

2783
00:51:22,000 --> 00:51:25,360
so we need to also expose this functionality

2784
00:51:25,360 --> 00:51:30,552
excuse me in inside our firebase cloud storage um

2785
00:51:30,552 --> 00:51:34,320
as well so the function is going to be update node and it's going to take two

2786
00:51:34,320 --> 00:51:38,000
parameters document id and a text so let's just say

2787
00:51:38,000 --> 00:51:41,280
it's going to be a future of void and we're going to call it update node

2788
00:51:41,280 --> 00:51:44,720
two parameters in here which are required i'm going to say required

2789
00:51:44,720 --> 00:51:48,160
string and document id

2790
00:51:48,160 --> 00:51:52,720
and then required string text

2791
00:51:52,720 --> 00:51:56,872
and let's make this an async function

2792
00:51:56,872 --> 00:52:00,232
all right then what we're going to do is we're going to put a try and catch in

2793
00:52:00,232 --> 00:52:05,360
here in case we can't update the notes and then here we're just going to

2794
00:52:05,360 --> 00:52:10,480
say throw could not update note exception okay and you may actually

2795
00:52:10,480 --> 00:52:14,400
ignore this e if you want to as well so you could just do like this

2796
00:52:14,400 --> 00:52:18,552
or you could just yeah i think actually we can't do an empty cache catch so you

2797
00:52:18,552 --> 00:52:23,192
may do like this if you prefer but i prefer to do it like this

2798
00:52:23,192 --> 00:52:26,232
all right and i can see that the formatting is a little bit messed up in

2799
00:52:26,232 --> 00:52:29,760
here so i'm going to put a

2800
00:52:29,760 --> 00:52:34,080
comma in there and inside the try statement in here now

2801
00:52:34,080 --> 00:52:39,040
what we need to do is to go to our collections again in here and

2802
00:52:39,040 --> 00:52:44,400
let's just say we get a doc you can see it says okay what is the path of that

2803
00:52:44,400 --> 00:52:47,832
doc and we're going to say the document id

2804
00:52:47,832 --> 00:52:52,832
is a path and then let's then go ahead and say

2805
00:52:52,832 --> 00:52:57,120
um dot update and it says okay what is the actual

2806
00:52:57,120 --> 00:53:00,720
update and inside the update what we're gonna do is gonna say

2807
00:53:00,720 --> 00:53:05,360
text field name is this text all right

2808
00:53:05,360 --> 00:53:09,040
so this may look a little bit crypt now also we have to wait on it may look a

2809
00:53:09,040 --> 00:53:12,800
little bit cryptic in the what is doc dock id

2810
00:53:12,800 --> 00:53:16,800
remember inside this function in here it says give me the path you see this

2811
00:53:16,800 --> 00:53:20,872
parameter path and what we said is that inside the

2812
00:53:20,872 --> 00:53:26,960
notes collection every document is going to have an identifier so we actually are

2813
00:53:26,960 --> 00:53:30,800
going to go with the document id which we instantiated in here do you remember

2814
00:53:30,800 --> 00:53:36,160
doc id is going to go into our cloud node document id so that's the path is

2815
00:53:36,160 --> 00:53:42,000
notes slash that document id so that's how far firebase firestore it called and

2816
00:53:42,000 --> 00:53:47,192
basically keeps hold of its paths it's the the path is in this case if i create

2817
00:53:47,192 --> 00:53:50,000
a collection you see it says oh the collection is being created in the root

2818
00:53:50,000 --> 00:53:54,720
folder and it has a collection id which in our case is called notes and we refer

2819
00:53:54,720 --> 00:53:58,872
to it here so we've already constructed the notes path and every document inside

2820
00:53:58,872 --> 00:54:03,760
it has its own id so it's going to be slash notes slash document id all right

2821
00:54:03,760 --> 00:54:08,872
so i hope and i'd explain it for you

2822
00:54:08,872 --> 00:54:13,600
let's now talk about deleting notes um so

2823
00:54:13,600 --> 00:54:17,440
deleting notes actually very easy as well so we don't have to do so much with

2824
00:54:17,440 --> 00:54:21,600
deleting nodes so it's very similar to updating nodes and

2825
00:54:21,600 --> 00:54:26,160
we're just going to go ahead and use document id for deleting notes so

2826
00:54:26,160 --> 00:54:30,400
as the caption indicates create a new feature of void in here and we're going

2827
00:54:30,400 --> 00:54:34,232
to say delete node and we're going to go ahead and use a required string

2828
00:54:34,232 --> 00:54:39,280
parameter called document id

2829
00:54:39,280 --> 00:54:44,000
it sync and let's just do a try cache in here in case we can't delete the

2830
00:54:44,000 --> 00:54:46,480
document and then we're going to say throw

2831
00:54:46,480 --> 00:54:49,440
could not

2832
00:54:49,440 --> 00:54:53,192
no notes exception i believe it's called

2833
00:54:53,192 --> 00:54:56,232
yeah inside the

2834
00:54:56,232 --> 00:55:00,400
try statement in here we are going to say notes

2835
00:55:00,400 --> 00:55:03,440
doc with that document id

2836
00:55:03,440 --> 00:55:06,480
all right and then we're just going to say delete

2837
00:55:06,480 --> 00:55:10,960
i remember i believe this is actually future void so let's just wait on it all

2838
00:55:10,960 --> 00:55:14,160
right so that's really all you have to do for

2839
00:55:14,160 --> 00:55:18,640
delete so there's no magic in that it's very similar to update note except that

2840
00:55:18,640 --> 00:55:24,640
it's not taking care of any like fields or anything like that

2841
00:55:24,640 --> 00:55:30,400
wow huge huge chapter we've talked a lot about now uh about firestore and

2842
00:55:30,400 --> 00:55:35,360
firebase storage so thank you so much for for sticking with

2843
00:55:35,360 --> 00:55:38,960
me throughout this chapter and but if you remember i mean if you look at what

2844
00:55:38,960 --> 00:55:43,600
we've done is not so much code it's 68 lines of code for me it may be less for

2845
00:55:43,600 --> 00:55:47,192
you if you haven't done all these extra commas in here so

2846
00:55:47,192 --> 00:55:52,400
maybe like 60 but there's a lot of new concepts so

2847
00:55:52,400 --> 00:55:57,192
i thought that i had to i took the liberty of maybe even over

2848
00:55:57,192 --> 00:55:59,760
explaining things but i think in the beginning it's very

2849
00:55:59,760 --> 00:56:02,160
important just to understand how everything works

2850
00:56:02,160 --> 00:56:04,080
um okay

2851
00:56:04,080 --> 00:56:08,480
so great job we've done what we promised to do in this chapter we have actually

2852
00:56:08,480 --> 00:56:11,832
tested to make sure that this is this is working we're gonna do this in the next

2853
00:56:11,832 --> 00:56:15,920
chapter but as it's tradition we're gonna make sure that our work is

2854
00:56:15,920 --> 00:56:20,960
committed to our uh github repository or bitbucket wherever

2855
00:56:20,960 --> 00:56:25,040
you're using your uh or wherever you're hosting your git project so let's go

2856
00:56:25,040 --> 00:56:30,320
ahead and do that i want to change the screen um

2857
00:56:30,320 --> 00:56:34,640
layout a little bit i'm going to get rid of scrcpy

2858
00:56:34,640 --> 00:56:38,480
oops and i'm going to close the screen

2859
00:56:38,480 --> 00:56:43,360
make this bigger in this uh view and then i'm

2860
00:56:43,360 --> 00:56:48,080
going to go to terminal okay excuse me let's have a look at our

2861
00:56:48,080 --> 00:56:53,360
status there's quite a bit modified in here and also we've added a whole new

2862
00:56:53,360 --> 00:56:56,232
folder so i'm just going to say git add all

2863
00:56:56,232 --> 00:56:59,920
and let's have a look at our log the previous commit was step 18 and let's

2864
00:56:59,920 --> 00:57:04,720
have a look at our tags i can see step 18 here as well

2865
00:57:04,720 --> 00:57:09,360
let's commit now let's say let's say step 19

2866
00:57:09,360 --> 00:57:13,600
excuse me again and then we have

2867
00:57:13,600 --> 00:57:17,040
commits and we've committed and let's push those

2868
00:57:17,040 --> 00:57:22,080
changes let's also tag and say step 19 in here

2869
00:57:22,080 --> 00:57:28,872
okay and let's push our tags as well

2870
00:57:28,872 --> 00:57:32,320
all right that's that as again is tradition at the end of

2871
00:57:32,320 --> 00:57:35,680
every chapter we'll talk about what we have to discuss in the next chapter

2872
00:57:35,680 --> 00:57:39,360
and as you can see it says uh we need to start using our new service instead of

2873
00:57:39,360 --> 00:57:41,760
sqlite database so that's a little bit of a

2874
00:57:41,760 --> 00:57:48,400
um like a turning point in our whole uh course in that we're gonna like toss our

2875
00:57:48,400 --> 00:57:54,160
local storage and go away from that and start using our firebase cloud storage

2876
00:57:54,160 --> 00:57:58,080
and so uh it's it's i think the next chapter is

2877
00:57:58,080 --> 00:58:00,960
actually one of the most exciting chapters

2878
00:58:00,960 --> 00:58:04,960
excuse me in this whole course so

2879
00:58:04,960 --> 00:58:08,640
grab some refreshments if you want to and i'll see you there

2880
00:58:08,640 --> 00:58:12,640
hello everyone and welcome to chapter 37 of this flutter course as you've seen in

2881
00:58:12,640 --> 00:58:17,280
previous chapters we've started to move away from our local database storage and

2882
00:58:17,280 --> 00:58:21,760
that was on sqlite and we started going more and more towards using firestore

2883
00:58:21,760 --> 00:58:27,512
databases that are hosted by firebase so that was a very exciting point in our um

2884
00:58:27,512 --> 00:58:32,000
in this course basically and for me as well as the as your instructor to go

2885
00:58:32,000 --> 00:58:36,320
over to a cloud storage rather than using local

2886
00:58:36,320 --> 00:58:40,552
uh storage and you see we used crud and as i mentioned in the previous chapter i

2887
00:58:40,552 --> 00:58:43,440
really wanted to introduce you to crowd because it's such

2888
00:58:43,440 --> 00:58:46,720
an important part of software development that you will sooner or

2889
00:58:46,720 --> 00:58:52,552
later need to use crowd storage locally on your computer on your applications so

2890
00:58:52,552 --> 00:58:55,440
um that was basically done

2891
00:58:55,440 --> 00:58:59,120
on purpose so we first talked about local storage and then we move away from

2892
00:58:59,120 --> 00:59:03,192
it and simply because uh even firebase in

2893
00:59:03,192 --> 00:59:08,400
itself is some sort of a crud storage not some sort of it is crud but it is

2894
00:59:08,400 --> 00:59:12,400
stored on the cloud and concepts of crop would have been a lot bit more difficult

2895
00:59:12,400 --> 00:59:16,960
for me to explain to you had me not first implemented implemented them

2896
00:59:16,960 --> 00:59:19,512
locally so um

2897
00:59:19,512 --> 00:59:25,600
in the previous chapter we prepared our service which we i will bring the code

2898
00:59:25,600 --> 00:59:29,512
here so we can have a look we we actually called it let's see

2899
00:59:29,512 --> 00:59:34,160
it's inside our services cloud we call it firebase cloud storage

2900
00:59:34,160 --> 00:59:38,480
right here and um we also talked about how we can

2901
00:59:38,480 --> 00:59:42,400
basically start integrating in this firebase cloud search in our

2902
00:59:42,400 --> 00:59:44,872
application and this is the chapter that we're gonna

2903
00:59:44,872 --> 00:59:49,832
um make those plans concrete okay

2904
00:59:49,832 --> 00:59:54,080
if you follow the chapters from the beginning chronologically in

2905
00:59:54,080 --> 00:59:57,920
this course you'll know that what i like to do when i try to refactor things is

2906
00:59:57,920 --> 01:00:01,120
to cut things from the source and by that i mean now we want to get rid of

2907
01:00:01,120 --> 01:00:06,320
our local crud storage and what i like to do as a strategy is to go to

2908
01:00:06,320 --> 01:00:10,320
uh the application and like either comment out that entire piece of code

2909
01:00:10,320 --> 01:00:13,600
which has to do with our note service and the crowd exceptions

2910
01:00:13,600 --> 01:00:16,480
or either we cut it out completely or we

2911
01:00:16,480 --> 01:00:21,360
commented out okay so let's go ahead and deal with that now

2912
01:00:21,360 --> 01:00:26,000
so i'm gonna change the screen layout a little bit here and i'm then gonna go

2913
01:00:26,000 --> 01:00:30,960
into our notes service so please go to the note service and select the entire

2914
01:00:30,960 --> 01:00:37,440
code in here and comment it out so that's for note service and then

2915
01:00:37,440 --> 01:00:40,800
we're also going to go to our i'm going to save this file and then we're going

2916
01:00:40,800 --> 01:00:46,080
to go to crowd exceptions select the entire content and comment it out please

2917
01:00:46,080 --> 01:00:49,360
so that's that um another thing that we need to take

2918
01:00:49,360 --> 01:00:56,720
care of is um inside our new firebase cloud storage inside uh get's notes what

2919
01:00:56,720 --> 01:01:00,800
we forgot to do is where i actually didn't forget to do i intentionally left

2920
01:01:00,800 --> 01:01:05,920
it like this so that we could get the basic idea is as you can see here we we

2921
01:01:05,920 --> 01:01:10,232
are inside this uh get notes function as the caption indicates at the bottom of

2922
01:01:10,232 --> 01:01:14,400
the screen we are returning an instance of our cloud node use using its

2923
01:01:14,400 --> 01:01:18,720
constructor its default constructor however if you remember from this cloud

2924
01:01:18,720 --> 01:01:23,280
node snapshot we have a convenient constructor that can create

2925
01:01:23,280 --> 01:01:28,480
an instance of our cloud node using a document snapshot and that's exactly

2926
01:01:28,480 --> 01:01:32,320
what we're getting in here you see query document snapshot but we're not using

2927
01:01:32,320 --> 01:01:36,480
that convenient constructor and that's exactly what we're going to fix

2928
01:01:36,480 --> 01:01:40,080
right now so excuse me

2929
01:01:40,080 --> 01:01:46,640
let's go in here where we have the dock and i'm going to change this code to go

2930
01:01:46,640 --> 01:01:51,512
from a normal function to an error function and then in here i'm gonna say

2931
01:01:51,512 --> 01:01:58,552
we return a cloud node from snapshot of that dock okay just like that

2932
01:01:58,552 --> 01:02:03,040
i press s to save this file command sorry and you can also remove that comma

2933
01:02:03,040 --> 01:02:06,720
at the end so you either leave it like this with a comma at the end so it

2934
01:02:06,720 --> 01:02:10,232
becomes multi-line or you remove the comma like i do in here and it just

2935
01:02:10,232 --> 01:02:16,480
becomes one line all right okay

2936
01:02:16,480 --> 01:02:19,600
that part is done

2937
01:02:19,600 --> 01:02:26,160
now what we need to do um is to be inside this

2938
01:02:26,160 --> 01:02:29,280
firebase cloud storage and you can see in here

2939
01:02:29,280 --> 01:02:33,120
inside the functionality uh sorry inside the create new node at the moment we're

2940
01:02:33,120 --> 01:02:37,832
saying void so we're not returning the node that we're actually creating and we

2941
01:02:37,832 --> 01:02:42,080
need to fix this so we need to actually create the new new

2942
01:02:42,080 --> 01:02:46,160
node and return it so let's go in here and i'm just going to say final

2943
01:02:46,160 --> 01:02:49,440
make the code a little bit bigger final

2944
01:02:49,440 --> 01:02:54,160
document is equal to a weight on this

2945
01:02:54,160 --> 01:02:59,280
and if you look at your document now you can see it is a document actually

2946
01:02:59,280 --> 01:03:02,320
you may not be able to see it now you can see it probably it is a document

2947
01:03:02,320 --> 01:03:06,872
reference okay so it's a reference as its name indicates is not the snapshot

2948
01:03:06,872 --> 01:03:12,872
in order to get the snapshot we need to just issue the get function on it

2949
01:03:12,872 --> 01:03:18,000
so let's just say final fetched note is a wait

2950
01:03:18,000 --> 01:03:23,192
on this document get and you'll see now fetch note is the

2951
01:03:23,192 --> 01:03:28,160
actual snapshot that will contain the data of that document all right

2952
01:03:28,160 --> 01:03:32,080
so in here we will just return a cloud node

2953
01:03:32,080 --> 01:03:35,192
like this or

2954
01:03:35,192 --> 01:03:39,440
let's see cloud node with these parameters

2955
01:03:39,440 --> 01:03:43,040
the document id is going to be the fetched note

2956
01:03:43,040 --> 01:03:46,720
id the owner user user id is provided to

2957
01:03:46,720 --> 01:03:51,192
our function already and the text is just going to be empty like this and

2958
01:03:51,192 --> 01:03:57,192
also make sure that uh in here we don't return void except we return a future of

2959
01:03:57,192 --> 01:04:00,160
cloud nodes okay so

2960
01:04:00,160 --> 01:04:06,480
save your file after that and this part's also done

2961
01:04:06,480 --> 01:04:08,640
okay um

2962
01:04:08,640 --> 01:04:11,920
now we need to make sure just i'm just gonna

2963
01:04:11,920 --> 01:04:16,800
close uh all these tabs and as the caption indicates we're gonna go to our

2964
01:04:16,800 --> 01:04:20,872
create update notes view and fix that up so it can

2965
01:04:20,872 --> 01:04:26,000
talk with our new service which is the cloud firebase storage i think we call

2966
01:04:26,000 --> 01:04:28,960
it firebase cloud storage sorry about that

2967
01:04:28,960 --> 01:04:32,872
so i'm going to press command p in visual studio code on mac or control p

2968
01:04:32,872 --> 01:04:38,720
and linux and windows and then just say create what's it called

2969
01:04:38,720 --> 01:04:44,320
create update node view okay and here as the caption indicates we

2970
01:04:44,320 --> 01:04:49,040
need to import three things our cloud node dart file

2971
01:04:49,040 --> 01:04:53,040
the cloud storage exceptions dark file and the firebase cloud storage dart

2972
01:04:53,040 --> 01:04:56,720
files so those are at the moment inside the um

2973
01:04:56,720 --> 01:05:01,040
let's see they're inside services cloud folder

2974
01:05:01,040 --> 01:05:05,040
so i'm going to go in here i'm just going to say import package my nodes and

2975
01:05:05,040 --> 01:05:09,440
then services cloud

2976
01:05:09,440 --> 01:05:12,800
so we have first cloud node so let's import that

2977
01:05:12,800 --> 01:05:17,512
i'm going to copy this path and then use it again to import cloud storage

2978
01:05:17,512 --> 01:05:22,160
exceptions like that and then we also need cloud

2979
01:05:22,160 --> 01:05:26,800
what's it called firebase cloud storage like that so that's

2980
01:05:26,800 --> 01:05:30,552
you will need to also do these three imports if you haven't called your

2981
01:05:30,552 --> 01:05:33,760
application my notes then this package is going to be different it's going to

2982
01:05:33,760 --> 01:05:41,920
be packaged the name of your application and then services etc etc okay

2983
01:05:41,920 --> 01:05:44,552
okay um

2984
01:05:44,552 --> 01:05:48,800
the next thing that we have to do as you can see in the captions here

2985
01:05:48,800 --> 01:05:53,440
we need to make sure that our create update node views state which is right

2986
01:05:53,440 --> 01:05:57,760
here which at the moment contains our node service as its node service it has

2987
01:05:57,760 --> 01:06:01,920
to move towards using the firebase cloud storage

2988
01:06:01,920 --> 01:06:04,872
so i'm going to go to my notes as well in here just to make sure i'm giving you

2989
01:06:04,872 --> 01:06:09,280
all the information that you need so let's change our node service in here

2990
01:06:09,280 --> 01:06:15,040
and call it now firebase cloud storage and that's the service okay

2991
01:06:15,040 --> 01:06:20,872
and in your init function then you need to also make sure that we get the

2992
01:06:20,872 --> 01:06:25,680
singleton instance of our firebase cloud storage in the init state function all

2993
01:06:25,680 --> 01:06:29,360
right also remember this note now is not a

2994
01:06:29,360 --> 01:06:33,680
database note anymore but it's actually a cloud node so let's call that cloud

2995
01:06:33,680 --> 01:06:38,400
node as well all right and and now we can see we have an unused

2996
01:06:38,400 --> 01:06:42,320
import in here so i'm just going to remove that since we don't need that

2997
01:06:42,320 --> 01:06:46,960
unused import then the next thing we need to do is as

2998
01:06:46,960 --> 01:06:50,552
a caption in the case we have to go to create or get existing node and we have

2999
01:06:50,552 --> 01:06:55,760
to make sure that it works with the cloud storage so let's go in here

3000
01:06:55,760 --> 01:06:58,552
perfect so in here


