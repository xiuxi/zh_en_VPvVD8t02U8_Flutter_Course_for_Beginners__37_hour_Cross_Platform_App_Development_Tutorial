1
03:34:57,760 --> 03:35:00,800
嗯，让我们说开关                            

2
03:35:00,800 --> 03:35:05,600
你把括号打开关闭然后打开关闭大括号并在这里                            

3
03:35:05,600 --> 03:35:09,040
你会把你的叙述说出来，所以你说动物类型好                            

4
03:35:09,040 --> 03:35:13,120
然后处理这些不同分支的方法是案例呃                            

5
03:35:13,120 --> 03:35:17,120
在动物类型的情况下你会说的关键字                            

6
03:35:17,120 --> 03:35:19,760
印钞                            

7
03:35:19,760 --> 03:35:23,359
嗯，钱听起来不错                            

8
03:35:23,359 --> 03:35:26,560
案例动物类型猫                            

9
03:35:26,560 --> 03:35:29,920
打印猫                            

10
03:35:29,920 --> 03:35:33,520
和案例动物类型                            

11
03:35:33,520 --> 03:35:39,680
og打印狗                            

12
03:35:39,680 --> 03:35:42,160
现在就这样好了                            

13
03:35:42,160 --> 03:35:46,560
这是我很好我真的很感激我们得到这个呃错误所以你                            

14
03:35:46,560 --> 03:35:50,640
可以清楚地看到它说的是什么情况下不应该正常完成尝试添加                            

15
03:35:50,640 --> 03:35:54,960
现在打破或返回你看到的这句话                            

16
03:35:54,960 --> 03:35:59,200
许多编程语言就像黑暗的程序来到这里                            

17
03:35:59,200 --> 03:36:03,680
case 语句有点像下降到下一行，然后 dart 尝试                            

18
03:36:03,680 --> 03:36:07,920
为了避免这种情况，所以如果我处理兔子，它说没关系，那么我正在做一些事情                            

19
03:36:07,920 --> 03:36:11,279
但感觉就像我在这之后掉到下一行                            

20
03:36:11,279 --> 03:36:15,600
因为你没有告诉我在打印声明之后该怎么做所以你要么                            

21
03:36:15,600 --> 03:36:18,640
告诉我要彻底摆脱这个                            

22
03:36:18,640 --> 03:36:23,120
函数通过将return关键字放在这里退出测试函数我们                            

23
03:36:23,120 --> 03:36:27,040
还没有真正谈论过退货，但你可以这样做，你可以说                            

24
03:36:27,040 --> 03:36:31,439
好的，在所有这些之后立即返回，所以我将按 command s                            

25
03:36:31,439 --> 03:36:35,279
你会看到 cat 被打印到屏幕上，这没问题                            

26
03:36:35,279 --> 03:36:38,000
但如果你在这里没有这个返回声明语句，你会得到                            

27
03:36:38,000 --> 03:36:40,479
一个错误好吧                            

28
03:36:40,479 --> 03:36:45,520
你要么说 return 要么现在使用 break 关键字                            

29
03:36:45,520 --> 03:36:48,560
这些之间有区别让我们在这里放一个打印声明，我要走了                            

30
03:36:48,560 --> 03:36:53,520
说功能已经完成了，所以我有点期待                            

31
03:36:53,520 --> 03:36:56,640
通过执行我们的                            

32
03:36:56,640 --> 03:37:02,640
我们的代码在这里我们的测试函数在这里传递 cat 的值                            

33
03:37:02,640 --> 03:37:07,359
我们进入开关我们检查这是猫然后打印                            

34
03:37:07,359 --> 03:37:11,279
猫，然后我们回来，好吧，这有点像                            

35
03:37:11,279 --> 03:37:15,439
它在做什么意味着它跳过了这个打印语句，并且                            

36
03:37:15,439 --> 03:37:19,520
你很快就会看到如果我说 command s 它只会说 cat 然后我们会回来                            

37
03:37:19,520 --> 03:37:22,720
所以这不是我真正想要的                            

38
03:37:22,720 --> 03:37:26,640
希望这个 switch 语句被执行 print cat 然后继续                            

39
03:37:26,640 --> 03:37:31,439
在 switch 好之后，这就是你使用 break 语句的地方                            

40
03:37:31,439 --> 03:37:35,920
或者这里的关键词，所以如果你说 break 它打破了 switch 语句                            

41
03:37:35,920 --> 03:37:39,840
然后按照您所期望的那样继续执行其余的功能，如果                            

42
03:37:39,840 --> 03:37:44,640
我在这里按 command s 你说 cat 然后函数就完成了                            

43
03:37:44,640 --> 03:37:48,479
所以switch是首选的工作方式                            

44
03:37:48,479 --> 03:37:51,840
用 um 枚举，特别是如果你正在做                            

45
03:37:51,840 --> 03:37:56,000
分支所以你也可以喜欢                            

46
03:37:56,000 --> 03:38:01,040
例如，如果在这种情况下，他说，呃，请确保                            

47
03:38:01,040 --> 03:38:04,080
这是一只猫                            

48
03:38:04,080 --> 03:38:08,880
在这种情况下，您也可以说动物类型                            

49
03:38:08,880 --> 03:38:12,800
不是动物类型的聊天                            

50
03:38:12,800 --> 03:38:17,680
你会回来的，你也可以这样做，所以这有点像                            

51
03:38:17,680 --> 03:38:20,479
一个条件语句，你放在你的开头                            

52
03:38:20,479 --> 03:38:25,760
确保在第 10 行之后执行的任何代码的函数                            

53
03:38:25,760 --> 03:38:29,199
完全确定动物类型是                            

54
03:38:29,199 --> 03:38:33,680
一只猫可以，所以在这种情况下，你可以只使用典型的 if 语句，这样你就不会                            

55
03:38:33,680 --> 03:38:39,920
必须做开关没问题，但如果你试图执行规范的特殊部分                            

56
03:38:39,920 --> 03:38:44,319
代码取决于此枚举包含的值                            

57
03:38:44,319 --> 03:38:47,199
那一刻我强烈建议你使用                            

58
03:38:47,199 --> 03:38:51,920
switch 语句而不是 if 语句好吧，这取决于你的 on                            

59
03:38:51,920 --> 03:38:57,120
你的用例没问题，我只是要把这个项目标记为                            

60
03:38:57,120 --> 03:39:02,720
在我的笔记中完成现在让我们谈谈课程好吧                            

61
03:39:02,720 --> 03:39:07,439
这是我最喜欢谈论的话题之一                            

62
03:39:07,439 --> 03:39:10,160
嗯很好上课                            

63
03:39:10,160 --> 03:39:14,720
嗯，飞镖和许多其他语言，让我们实际上把它带回它的方式                            

64
03:39:14,720 --> 03:39:18,399
在使它成为测试功能之前                            

65
03:39:18,399 --> 03:39:23,520
并从这里删除动物类型并删除它们我实际上可以继续                            

66
03:39:23,520 --> 03:39:27,439
我们其实也可以                            

67
03:39:27,439 --> 03:39:35,680
所以 dart 中的类是各种功能的分组                            

68
03:39:35,680 --> 03:39:42,160
到一个可打包的数据中，我的意思是例如                            

69
03:39:42,160 --> 03:39:45,680
假设您有一个名为 run 的函数                            

70
03:39:45,680 --> 03:39:50,479
另一个叫做呼吸的函数，然后你就有了一个人的名字                            

71
03:39:50,479 --> 03:39:54,080
一个人的姓当然你可以去定义这些                            

72
03:39:54,080 --> 03:39:57,520
像这样的事情你可以说可汗的名字                            

73
03:39:57,520 --> 03:40:01,199
是的东西，汗的姓是东西                            

74
03:40:01,199 --> 03:40:05,120
像这样可以                            

75
03:40:05,120 --> 03:40:10,239
嗯，就这样，然后你可以有一个功能，对不起，你会说                            

76
03:40:10,239 --> 03:40:12,960
运行 um 然后你会有另一个功能                            

77
03:40:12,960 --> 03:40:16,319
叫呼吸                            

78
03:40:16,319 --> 03:40:20,640
你可以这样做，但这些功能对我们来说有点像                            

79
03:40:20,640 --> 03:40:24,479
特殊情况，或者至少在我脑海中，我现在正在想象这些                            

80
03:40:24,479 --> 03:40:27,680
与人相关的功能                            

81
03:40:27,680 --> 03:40:30,800
那个人可以跑步 那个人可以呼吸 那个人有名字和                            

82
03:40:30,800 --> 03:40:35,520
姓氏，所以这些相关事物的分组                            

83
03:40:35,520 --> 03:40:38,160
完成了一堂课                            

84
03:40:38,160 --> 03:40:42,160
至少在飞镖中，这样做的方法是你会说                            

85
03:40:42,160 --> 03:40:46,399
实例类，它是 dart 中的关键字                            

86
03:40:46,399 --> 03:40:49,600
让我们现在说类的名称                            

87
03:40:49,600 --> 03:40:52,960
类和枚举的命名以及任何其他                            

88
03:40:52,960 --> 03:40:56,160
除变量和常量外的实体                            

89
03:40:56,160 --> 03:41:00,080
你应该使用嗯只是普通的外壳你会我真的不知道它是否是                            

90
03:41:00,080 --> 03:41:04,160
叫帕斯卡套管或者我想是这样的                            

91
03:41:04,160 --> 03:41:08,560
但是您只需将每个单词的第一个字母都使用大写就可以了                            

92
03:41:08,560 --> 03:41:14,160
让我们说人好吧这就是你说一个人的方式                            

93
03:41:14,160 --> 03:41:18,319
上课没问题，所以我认为实际上我们不能放 const                            

94
03:41:18,319 --> 03:41:22,880
在那里，我将抓住这两个功能并放置它们                            

95
03:41:22,880 --> 03:41:27,920
在这个人的类里面好吧，让我们在这个说打印                            

96
03:41:27,920 --> 03:41:31,680
运行运行功能并阅读我们                            

97
03:41:31,680 --> 03:41:34,800
会说呼吸正常                            

98
03:41:34,800 --> 03:41:38,800
在你想要的测试功能中                            

99
03:41:38,800 --> 03:41:42,080
创建一个叫做 this 的实例                            

100
03:41:42,080 --> 03:41:47,520
类现在实例是对象，对象是                            

101
03:41:47,520 --> 03:41:52,560
从类创建，因此您需要了解如何                            

102
03:41:52,560 --> 03:41:56,640
实例化在软件开发中起作用，这                            

103
03:41:56,640 --> 03:41:59,920
适用于任何编程语言，例如 dart                            

104
03:41:59,920 --> 03:42:05,040
rust swift python javascript在哪里                            

105
03:42:05,040 --> 03:42:08,319
他们允许你创建类                            

106
03:42:08,319 --> 03:42:13,920
既然你知道了一个类是什么为了使用一个你需要的类                            

107
03:42:13,920 --> 03:42:18,000
通常会创建一个称为该类实例的东西，这意味着                            

108
03:42:18,000 --> 03:42:21,040
你告诉编程语言在这里没问题                            

109
03:42:21,040 --> 03:42:24,880
是我知道的课程，但给我一份                            

110
03:42:24,880 --> 03:42:27,760
所以每一堂课                            

111
03:42:27,760 --> 03:42:32,479
可以被实例化，这意味着 dart 编译器将创建一个副本                            

112
03:42:32,479 --> 03:42:37,120
确切的类及其数据及其功能及其属性并将该副本提供给您                            

113
03:42:37,120 --> 03:42:41,840
好吧，这就是所谓的实例化，它                            

114
03:42:41,840 --> 03:42:47,600
通过使用等号并创建一个括号来工作                            

115
03:42:47,600 --> 03:42:50,960
在课程名称的末尾，我将在这里向您展示，所以让我们说                            

116
03:42:50,960 --> 03:42:54,399
最后，我们说人                            

117
03:42:54,399 --> 03:42:58,239
在这种情况下，这是我们变量的名称等于我所说的等于                            

118
03:42:58,239 --> 03:43:01,760
签名然后我们会像这样写下类的名称和括号                            

119
03:43:01,760 --> 03:43:04,960
好的，所以现在你说一个人变量                            

120
03:43:04,960 --> 03:43:08,239
这个案例是那个人类的一个实例                            

121
03:43:08,239 --> 03:43:13,600
现在你会明白使用点和符号你可以说 person.run you                            

122
03:43:13,600 --> 03:43:16,319
看到该功能现在可以在您的                            

123
03:43:16,319 --> 03:43:19,600
person 类的实例，你会说 person                            

124
03:43:19,600 --> 03:43:22,319
点呼吸好                            

125
03:43:22,319 --> 03:43:28,160
所以这些是在实例中可用的功能                            

126
03:43:28,160 --> 03:43:32,160
我知道的人的水平有很多话我只是在说                            

127
03:43:32,160 --> 03:43:35,840
关于但我想你明白这里的意思                            

128
03:43:35,840 --> 03:43:40,720
这就是你如何实例化 person 类，这就是你如何调用各种                            

129
03:43:40,720 --> 03:43:44,720
该类上的功能，所以如果我按 command s 你可以看到它说正在运行                            

130
03:43:44,720 --> 03:43:49,439
如果你在这种情况下说人                            

131
03:43:49,439 --> 03:43:53,120
然后不使用他们的实例化                            

132
03:43:53,120 --> 03:43:57,359
括号如果你说呼吸你会在这里得到一个错误实例                            

133
03:43:57,359 --> 03:44:00,840
使用静态轴无法访问成员呼吸                            

134
03:44:00,840 --> 03:44:04,800
好吧，这就是我的意思是有点像                            

135
03:44:04,800 --> 03:44:09,680
实例成员也是记住实例成员的重要术语                            

136
03:44:09,680 --> 03:44:16,239
表示仅在实例级别可用的某些功能                            

137
03:44:16,239 --> 03:44:20,080
它在人员类级别不可用，但您必须制作副本                            

138
03:44:20,080 --> 03:44:24,080
的人，以便能够访问该所有权利                            

139
03:44:24,080 --> 03:44:26,720
所以那是                            

140
03:44:26,720 --> 03:44:31,359
课程的基础，您可以像我们一样在课程中做很多事情                            

141
03:44:31,359 --> 03:44:35,920
很快就谈了，所以我要离开那个人的班级                            

142
03:44:35,920 --> 03:44:40,800
然后将其标记为已讨论                            

143
03:44:40,800 --> 03:44:45,520
在我的笔记中，现在让我们稍微谈谈                            

144
03:44:45,520 --> 03:44:49,439
很好地了解对象                            

145
03:44:49,439 --> 03:44:53,680
对象实际上很容易解释一个对象是一个实例                            

146
03:44:53,680 --> 03:44:58,880
上课，所以你不喜欢                            

147
03:44:58,880 --> 03:45:02,479
当有人说哦，这是一个字符串类型的对象时，字面意思是                            

148
03:45:02,479 --> 03:45:07,840
有一个名为 string 的类，我创建了它的一个实例，并且                            

149
03:45:07,840 --> 03:45:13,600
那是一个对象，所以单词 instance 单词 instance 和 object                            

150
03:45:13,600 --> 03:45:19,359
通常可以互换使用，呃，但如果你听到有人说实例化一个                            

151
03:45:19,359 --> 03:45:25,279
班级然后你会说好吧班级名称是什么哦这是人好吧                            

152
03:45:25,279 --> 03:45:28,000
和人现在我创建了一个实例好的并且在                            

153
03:45:28,000 --> 03:45:30,640
在这种情况下，您可以看到我只是创建了一个人的实例，而实际上并没有                            

154
03:45:30,640 --> 03:45:34,479
用它做任何事情，这样它就有点像一个无用的对象了                            

155
03:45:34,479 --> 03:45:40,479
但是如果我说 foo 作为一个人，那么这个                            

156
03:45:40,479 --> 03:45:45,279
foo now 是 person 类型的对象，实际上你可以在这里写下它的名字                            

157
03:45:45,279 --> 03:45:49,920
你会看到它告诉你这是一个人没问题                            

158
03:45:49,920 --> 03:45:54,399
所以简而言之就是嗯                            

159
03:45:54,399 --> 03:45:57,920
对象是                            

160
03:45:57,920 --> 03:46:02,479
我可以看到我的笔记需要的对象有点像我在错误的地方                            

161
03:46:02,479 --> 03:46:05,439
会把它带到正确的地方对不起那个                            

162
03:46:05,439 --> 03:46:09,439
现在好了                            

163
03:46:09,439 --> 03:46:14,399
让我们谈谈 um 构造函数                            

164
03:46:14,399 --> 03:46:17,520
而且我可以在笔记中的错误位置看到构造函数，所以我要                            

165
03:46:17,520 --> 03:46:22,560
把那些也带到正确的地方好吧抱歉                            

166
03:46:22,560 --> 03:46:26,720
嗯，现在构造函数的名称是                            

167
03:46:26,720 --> 03:46:30,080
它的名字表明是一种特殊的                            

168
03:46:30,080 --> 03:46:37,199
构造或初始化或构建该类的类中的逻辑                            

169
03:46:37,199 --> 03:46:41,680
实例好吧，所以你可以说好吧，让我们去我们的                            

170
03:46:41,680 --> 03:46:44,399
对于我们班在这里的人来说，这里的功能                            

171
03:46:44,399 --> 03:46:49,760
假设每个人都有名字或名字，所以让我们                            

172
03:46:49,760 --> 03:46:54,239
定义我们说最终的字符串名称，就像你现在看到的那样 dart 说                            

173
03:46:54,239 --> 03:46:57,840
好吧，你说每个人都有名字，但是                            

174
03:46:57,840 --> 03:47:02,720
这是人被实例化之后或之后的最终含义                            

175
03:47:02,720 --> 03:47:07,680
那个人已经被初始化或创建了一个实例，你不能                            

176
03:47:07,680 --> 03:47:10,720
改变那个名字，因为你说最后没问题                            

177
03:47:10,720 --> 03:47:15,359
如果你说像字符串名称是 foo 那会有所不同，因为它意味着                            

178
03:47:15,359 --> 03:47:19,199
创建的每个人实例都有默认值                            

179
03:47:19,199 --> 03:47:22,720
foo 的名字，这是一种完全不同的说法                            

180
03:47:22,720 --> 03:47:26,800
呃，在这种情况下，你可以看到我们说的是什么名字                            

181
03:47:26,800 --> 03:47:30,239
那里每个人都实例每个人                            

182
03:47:30,239 --> 03:47:34,960
我们创建的副本现在有一个名字飞镖说好吧名字在哪里然后你                            

183
03:47:34,960 --> 03:47:39,199
没有告诉我如何创建它，这就是你想要使用的地方                            

184
03:47:39,199 --> 03:47:44,640
一个叫做构造函数的东西好吧构造函数有时你被称为                            

185
03:47:44,640 --> 03:47:48,960
作为初始化器，取决于程序员的背景，他们可能                            

186
03:47:48,960 --> 03:47:53,199
称它为构造函数初始化器，或者可能是我不知道的其他名称                            

187
03:47:53,199 --> 03:47:57,840
about 但是如果您听到构造函数，那么您现在将知道什么                            

188
03:47:57,840 --> 03:48:01,040
我说的很快                            

189
03:48:01,040 --> 03:48:04,399
所以现在你至少可以在视觉上做些什么                            

190
03:48:04,399 --> 03:48:08,800
当您收到此错误时，工作室代码是将鼠标悬停在它上面，然后                            

191
03:48:08,800 --> 03:48:14,560
在 mac 上按 command 或在 linux 上按 windows 上的 control 并按 dot                            

192
03:48:14,560 --> 03:48:17,760
现在你会看到你会在这里得到一些建议                            

193
03:48:17,760 --> 03:48:20,880
至少对我来说，第二个建议是创建                            

194
03:48:20,880 --> 03:48:24,720
最终字段的构造函数没问题，我可以按那个                            

195
03:48:24,720 --> 03:48:29,199
现在你看到这里发生的事情是它创造了一些看起来                            

196
03:48:29,199 --> 03:48:33,279
有点像一个函数，但它没有名字                            

197
03:48:33,279 --> 03:48:37,520
它的名字被隐式设置为类的名字好吗                            

198
03:48:37,520 --> 03:48:42,560
所以基本上它说我是一个与类同名的特殊函数                            

199
03:48:42,560 --> 03:48:49,040
我希望给我一个值，然后我将依次分配给                            

200
03:48:49,040 --> 03:48:53,439
命名我自己的财产这有点像一种奇怪的做事方式                            

201
03:48:53,439 --> 03:48:57,840
东西，但它很安静也很干净                            

202
03:48:57,840 --> 03:49:01,199
在你这样做之后，这就是你这样做之后创建构造函数的方式                            

203
03:49:01,199 --> 03:49:05,760
然后在你调用这个人类的调用站点创建一个                            

204
03:49:05,760 --> 03:49:10,399
它的实例会抱怨说哦，我期待一个论点                            

205
03:49:10,399 --> 03:49:14,319
但我没有找到任何东西，这就是你必须通过的地方                            

206
03:49:14,319 --> 03:49:18,880
名字所以我们说在这种情况下是 foo bar 好的                            

207
03:49:18,880 --> 03:49:22,880
然后在下一行你可以说 print foo name                            

208
03:49:22,880 --> 03:49:27,279
好的，然后按 command s 然后你可以看到 foo bar 被打印到                            

209
03:49:27,279 --> 03:49:31,359
screen 所以这就像构造函数的基础                            

210
03:49:31,359 --> 03:49:35,600
这就是你构建类实例的方式                            

211
03:49:35,600 --> 03:49:39,520
现在你可能会说好吧我不想要                            

212
03:49:39,520 --> 03:49:45,920
我的意思是你可以用构造函数做很多花哨的事情你可以说好的                            

213
03:49:45,920 --> 03:49:50,239
例如，默认情况下，此名称必须具有特殊值，您可以这样做                            

214
03:49:50,239 --> 03:49:52,800
你可以用构造函数做很多我不会去的事情                            

215
03:49:52,800 --> 03:49:56,160
进入细节，但现在只知道一个                            

216
03:49:56,160 --> 03:49:59,840
构造函数是一种特殊的函数，它与                            

217
03:49:59,840 --> 03:50:03,199
类的名称，然后是括号，然后你把                            

218
03:50:03,199 --> 03:50:08,399
你的价值观在这里                            

219
03:50:08,399 --> 03:50:11,040
好吧，那是                            

220
03:50:11,040 --> 03:50:14,880
建设者嗯                            

221
03:50:14,880 --> 03:50:21,120
现在让我们谈谈嗯                            

222
03:50:21,120 --> 03:50:25,359
方法没问题                            

223
03:50:25,359 --> 03:50:29,680
我实际上要去这里说什么方法                            

224
03:50:29,680 --> 03:50:34,160
我们将在我的笔记中讨论方法和那些错误的地方                            

225
03:50:34,160 --> 03:50:38,080
也很抱歉我们讨论过的一个类的方法                            

226
03:50:38,080 --> 03:50:41,520
已经对你说实话了，一个类的方法是                            

227
03:50:41,520 --> 03:50:45,359
嗯，课堂上的一个功能                            

228
03:50:45,359 --> 03:50:48,720
通常称为实例                            

229
03:50:48,720 --> 03:50:52,800
方法意味着该函数在您实例化后可用                            

230
03:50:52,800 --> 03:50:56,800
上课没问题，就像我们在第 14 行做的那样。                            

231
03:50:56,800 --> 03:51:03,040
name 是一个实例变量，所以是一个可用的变量                            

232
03:51:03,040 --> 03:51:08,080
实例级别不是实例方法，实例方法应该是函数                            

233
03:51:08,080 --> 03:51:12,000
好的，让我们在这里创建一个不返回任何函数的函数                            

234
03:51:12,000 --> 03:51:17,120
由 void 返回类型表示的值，我们说 print name 好吧                            

235
03:51:17,120 --> 03:51:20,319
此功能的功能仅                            

236
03:51:20,319 --> 03:51:24,479
只是为了打印课，这就是全部                            

237
03:51:24,479 --> 03:51:28,160
确实，在飞镖中，你现在也是                            

238
03:51:28,160 --> 03:51:31,920
谈论这个我也会在飞镖中提到它通常是                            

239
03:51:31,920 --> 03:51:38,880
最好不要在你的实例变量或实例函数前面加上前缀                            

240
03:51:38,880 --> 03:51:42,840
在类本身内部使用这个                            

241
03:51:42,840 --> 03:51:48,399
在 dart 中关键字 this 关键字                            

242
03:51:48,399 --> 03:51:54,080
那个这个这个或那个这个关键字                            

243
03:51:54,080 --> 03:51:59,120
基本上是指这个类的当前实例就可以了                            

244
03:51:59,120 --> 03:52:04,479
所以你可以告诉 print name 打印这个点名，或者它实际上是                            

245
03:52:04,479 --> 03:52:08,960
最好删除它并将其称为名称，这是推荐的做法                            

246
03:52:08,960 --> 03:52:13,199
没关系，所以尽可能避免关键字 this                            

247
03:52:13,199 --> 03:52:17,600
除非您必须这样做，否则我们希望能达到这些目的                            

248
03:52:17,600 --> 03:52:21,439
稍后在本课程中 为什么你可能必须这样做                            

249
03:52:21,439 --> 03:52:27,600
虽然你现在可能不得不使用它，但我们有打印名称                            

250
03:52:27,600 --> 03:52:32,479
实例方法好吧，所以让我们用它来代替这个                            

251
03:52:32,479 --> 03:52:36,399
我们在这里执行的打印功能让我们说 foo                            

252
03:52:36,399 --> 03:52:40,800
点打印 name 没问题 command s 或 control s                            

253
03:52:40,800 --> 03:52:45,760
在 linux 和 windows 上并在 macintosh 上命令 sun 然后你得到                            

254
03:52:45,760 --> 03:52:49,040
flutter foo bar 打印在这里，或者你可以                            

255
03:52:49,040 --> 03:52:50,960
说打印                            

256
03:52:50,960 --> 03:52:56,560
我要去我现在将打印此人的姓名                            

257
03:52:56,560 --> 03:53:00,080
在单引号中，我们不需要双引号 OK 命令，你会看到                            

258
03:53:00,080 --> 03:53:04,239
该消息在此处打印，后跟该消息的实际名称                            

259
03:53:04,239 --> 03:53:07,920
实例所以如果有人说方法或实例                            

260
03:53:07,920 --> 03:53:11,840
方法然后您将知道我们正在谈论的是在创建的函数                            

261
03:53:11,840 --> 03:53:18,800
可以做一些事情的班级水平，所以简短而甜蜜                            

262
03:53:18,800 --> 03:53:21,199
嗯好的                            

263
03:53:21,199 --> 03:53:25,399
既然我们已经谈过了，让我们谈谈一点                            

264
03:53:25,399 --> 03:53:30,720
继承和子类化我要在这里带一个标题，所以你知道什么                            

265
03:53:30,720 --> 03:53:34,479
我们现在正在谈论                            

266
03:53:34,479 --> 03:53:39,120
继承和子类化在 dart 中是如此重要                            

267
03:53:39,120 --> 03:53:42,800
以及我不认为的任何其他面向对象的编程语言                            

268
03:53:42,800 --> 03:53:47,279
任何人都应该喜欢跳过它，或者像我知道的那样                            

269
03:53:47,279 --> 03:53:50,479
使用对象的各种编程语言的开发人员                            

270
03:53:50,479 --> 03:53:55,040
面向，但他们有点避开了面向对象的方面                            

271
03:53:55,040 --> 03:54:00,239
语言，也许他们不需要它，也许他们只是觉得                            

272
03:54:00,239 --> 03:54:04,399
不必要的，或者他们觉得哦，这太复杂了，但如果你                            

273
03:54:04,399 --> 03:54:08,479
想成为一名优秀的 Flutter 开发者或优秀的 Dart 开发者，你需要                            

274
03:54:08,479 --> 03:54:12,800
了解嗯课程和嗯                            

275
03:54:12,800 --> 03:54:17,120
继承所以让我们                            

276
03:54:17,120 --> 03:54:22,000
谈继承 dart 中的继承是什么                            

277
03:54:22,000 --> 03:54:26,080
它允许您定义一个类                            

278
03:54:26,080 --> 03:54:30,960
然后为该类添加更多功能                            

279
03:54:30,960 --> 03:54:33,680
进入一个新的班级，所以                            

280
03:54:33,680 --> 03:54:40,239
例如，假设我们在这里进入我们的测试功能并                            

281
03:54:40,239 --> 03:54:44,399
删除该代码并删除该人                            

282
03:54:44,399 --> 03:54:48,319
现在让我们创建一个类                            

283
03:54:48,319 --> 03:54:53,199
类生活一切都好，然后我们说放克                            

284
03:54:53,199 --> 03:54:56,560
抱歉空虚的呼吸                            

285
03:54:56,560 --> 03:55:01,680
然后我们说印刷生物呼吸正常                            

286
03:55:01,680 --> 03:55:06,800
所以我们创造了一个有生命的东西，我们说任何有生命的东西                            

287
03:55:06,800 --> 03:55:10,080
现在需要呼吸这可能是一个假设，但无论如何                            

288
03:55:10,080 --> 03:55:15,840
任何有生命的东西，它在地上，它在地上，它在                            

289
03:55:15,840 --> 03:55:21,120
基本上活着就是呼吸正常，所以这就是我们对活着的功能                            

290
03:55:21,120 --> 03:55:25,120
现在你可以说好吧                            

291
03:55:25,120 --> 03:55:29,279
任何生物也可能有能力移动好吧，那么我们有一个                            

292
03:55:29,279 --> 03:55:35,040
名为 move 的函数我要说 print 我正在移动                            

293
03:55:35,040 --> 03:55:41,040
所以现在你可能会说好吧，我有点想要一门叫做呃猫的课程                            

294
03:55:41,040 --> 03:55:45,439
猫也是一种生物，这是一种创造方式                            

295
03:55:45,439 --> 03:55:49,840
一个类呃猫类就是说类猫                            

296
03:55:49,840 --> 03:55:54,319
然后你说嗯我有点需要这些功能你会去复制它                            

297
03:55:54,319 --> 03:55:59,279
然后你把它们贴在这里，然后你说好的，我现在可以走了                            

298
03:55:59,279 --> 03:56:04,319
但绝对至高无上的至高无上之一                            

299
03:56:04,319 --> 03:56:07,920
开发人员的素质是                            

300
03:56:07,920 --> 03:56:11,439
开发人员不喜欢重复自己                            

301
03:56:11,439 --> 03:56:14,720
这是一个如此重要的概念                            

302
03:56:14,720 --> 03:56:18,160
编程，你需要避免重复自己，你需要只是                            

303
03:56:18,160 --> 03:56:22,399
硬币掉下来，现在把它弄直，这样你就不会                            

304
03:56:22,399 --> 03:56:27,359
像我们现在在这段代码中所做的那样犯这个错误，所以                            

305
03:56:27,359 --> 03:56:31,439
作为开发人员，您要做的第一件事就是说我如何获取此代码                            

306
03:56:31,439 --> 03:56:34,319
而且很明显猫也是                            

307
03:56:34,319 --> 03:56:39,840
活的东西，所以这就是你想使用扩展的地方                            

308
03:56:39,840 --> 03:56:45,359
um 关键字，允许您继承生活中的功能                            

309
03:56:45,359 --> 03:56:50,640
东西类进入你的猫类，所以在这种情况下，我说的是猫类                            

310
03:56:50,640 --> 03:56:53,680
扩展或用英语阅读它作为继承                            

311
03:56:53,680 --> 03:56:57,120
活的很好                            

312
03:56:57,120 --> 03:57:00,800
你可以看到 cat 类本身现在是空的，但是如果你去                            

313
03:57:00,800 --> 03:57:05,439
测试功能，我说最后                            

314
03:57:05,439 --> 03:57:09,520
绒毛是一只猫                            

315
03:57:09,520 --> 03:57:14,399
然后我可以说fluffers uh you can see that now that cat                            

316
03:57:14,399 --> 03:57:21,040
类实际上具有呼吸和移动功能或功能                            

317
03:57:21,040 --> 03:57:25,439
所以虽然 cat 本身没有定义这些函数，但它们是可用的                            

318
03:57:25,439 --> 03:57:30,960
对于在这种情况下称为 cat 类型的绒毛的实例，您可以使用                            

319
03:57:30,960 --> 03:57:35,680
只是说移动然后你可以说fluffers                            

320
03:57:35,680 --> 03:57:38,960
好的，所以如果我运行此代码，如果我删除                            

321
03:57:38,960 --> 03:57:42,319
调试控制台中的所有内容并运行此代码，您可以看到 cat                            

322
03:57:42,319 --> 03:57:46,720
名为fluffer的实例是相同的移动，或者我正在移动，它也会说                            

323
03:57:46,720 --> 03:57:53,040
生物现在呼吸正常                            

324
03:57:53,040 --> 03:57:57,600
你也可以我的意思是我们现在也可以谈论我们正在谈论                            

325
03:57:57,600 --> 03:58:01,199
继承和子类化                            

326
03:58:01,199 --> 03:58:04,720
实际上也许我不应该调用子类，但我也认为它是                            

327
03:58:04,720 --> 03:58:07,920
对您了解什么是子类化很重要 子类化是字面意思                            

328
03:58:07,920 --> 03:58:11,040
与继承子类相同的事情是说你有一个                            

329
03:58:11,040 --> 03:58:14,000
类，并且您正在创建一个子组件，例如子组件                            

330
03:58:14,000 --> 03:58:18,160
实际上可能有的东西                            

331
03:58:18,160 --> 03:58:21,840
这有点奇怪的命名 sub 因为 sub 意味着有点像                            

332
03:58:21,840 --> 03:58:26,239
该类中可用的东西的子集，但它实际上就像一个超集                            

333
03:58:26,239 --> 03:58:28,479
因为它会                            

334
03:58:28,479 --> 03:58:32,160
抓住一切像猫一样拥有生活中的一切功能                            

335
03:58:32,160 --> 03:58:36,720
事情是对的，但它可能不一定会那样做                            

336
03:58:36,720 --> 03:58:41,920
解释起来有点复杂，但是如果您听到子类化或继承                            

337
03:58:41,920 --> 03:58:45,199
知道这就是我们的意思                            

338
03:58:45,199 --> 03:58:52,479
您通常可以使用 extends 关键字                            

339
03:58:52,479 --> 03:58:58,479
好的，现在我们已经讨论了继承和子类化                            

340
03:58:58,479 --> 03:59:00,880
所以我要                            

341
03:59:00,880 --> 03:59:05,279
移动一点，呃，我的笔记，对不起，我正在移开视线                            

342
03:59:05,279 --> 03:59:10,560
从屏幕上，嗯，现在我们要谈谈抽象                            

343
03:59:10,560 --> 03:59:14,960
类 好吧 有很好的文档关于                            

344
03:59:14,960 --> 03:59:18,640
抽象类和                            

345
03:59:18,640 --> 03:59:24,239
我们在这里要做的就是改变这个班级的生活                            

346
03:59:24,239 --> 03:59:28,000
此刻要抽象的东西                            

347
03:59:28,000 --> 03:59:32,560
你会看到一切都按预期进行                            

348
03:59:32,560 --> 03:59:36,800
一个抽象类                            

349
03:59:36,800 --> 03:59:42,080
和普通班非常相似，而且很好                            

350
03:59:42,080 --> 03:59:45,279
关于抽象类实际上来自 dart 的文档                            

351
03:59:45,279 --> 03:59:48,640
透视图，你可以看到它说使用 abs 抽象修饰符来定义                            

352
03:59:48,640 --> 03:59:52,840
不能实例化的抽象类类没关系                            

353
03:59:52,840 --> 03:59:59,279
所以抽象类就像一个普通的类，不能有实例                            

354
03:59:59,279 --> 04:00:02,800
所以在这种情况下，一旦我们谋生                            

355
04:00:02,800 --> 04:00:07,359
如果你然后去听说，那就做一个抽象类                            

356
04:00:07,359 --> 04:00:11,760
东西是有生命的                            

357
04:00:11,760 --> 04:00:14,319
对和                            

358
04:00:14,319 --> 04:00:18,319
它说哦抽象类不能被实例化                            

359
04:00:18,319 --> 04:00:24,880
所以抽象类是一个将逻辑组合成自身的类                            

360
04:00:24,880 --> 04:00:31,120
其他类使用其功能的唯一目的                            

361
04:00:31,120 --> 04:00:36,880
因此，如果您在 dart 中将某些东西标记为抽象类，那么您只需要                            

362
04:00:36,880 --> 04:00:40,880
在您的脑海中知道的是，这是一个具有一些实用程序的类                            

363
04:00:40,880 --> 04:00:46,960
一些应该在其他普通类中使用的代码好吧                            

364
04:00:46,960 --> 04:00:51,600
并且没有人应该只是去创造一个生物的实例                            

365
04:00:51,600 --> 04:00:54,239
这种情况改为                            

366
04:00:54,239 --> 04:00:59,920
在调用端，您需要实例化该类型的类，所以                            

367
04:00:59,920 --> 04:01:04,880
现在我们可以像以前一样说猫，我们可以说事物呼吸移动或                            

368
04:01:04,880 --> 04:01:08,239
绒毛                            

369
04:01:08,239 --> 04:01:12,960
这就是抽象类                            

370
04:01:12,960 --> 04:01:16,080
它只是一个无法实例化的类                            

371
04:01:16,080 --> 04:01:19,600
它通常就像其他类应该继承的实用程序类                            

372
04:01:19,600 --> 04:01:23,760
从好的                            

373
04:01:23,760 --> 04:01:28,160
好的，我现在可以在我的笔记中看到，我会                            

374
04:01:28,160 --> 04:01:32,640
假设我们已经快速讨论了抽象类                            

375
04:01:32,640 --> 04:01:36,640
我将提出我们将要讨论的下一个话题                            

376
04:01:36,640 --> 04:01:41,840
说说哪些是工厂构造函数                            

377
04:01:41,840 --> 04:01:45,840
所以我个人非常喜欢工厂                            

378
04:01:45,840 --> 04:01:49,359
对你说实话的构造函数                            

379
04:01:49,359 --> 04:01:55,040
让我们删除我们的抽象类我会向你解释什么是工厂                            

380
04:01:55,040 --> 04:01:59,279
现在让我们看看我们有一只玻璃猫好吗                            

381
04:01:59,279 --> 04:02:05,199
嗯，然后在这里让我们给猫起个名字                            

382
04:02:05,199 --> 04:02:10,319
类型为字符串命令点或控制点                            

383
04:02:10,319 --> 04:02:14,800
for linux windows on the name in visual studio code 至少要创建一个                            

384
04:02:14,800 --> 04:02:18,319
构造函数，你可以这样做并说创建构造函数，或者你可以手动                            

385
04:02:18,319 --> 04:02:24,080
创建一个构造函数，所以你说 cat 这个名字好吧 那是一个构造函数                            

386
04:02:24,080 --> 04:02:29,040
并且还知道你可以将其设为 const，因为它实际上是                            

387
04:02:29,040 --> 04:02:32,720
使用 final 字段，但我们稍后会讨论                            

388
04:02:32,720 --> 04:02:39,520
现在我们在这里有一个 cat 类，它有一个名为 cat 的构造函数                            

389
04:02:39,520 --> 04:02:44,399
在这里你可以说最终                            

390
04:02:44,399 --> 04:02:48,319
绒球是猫                            

391
04:02:48,319 --> 04:02:52,239
然后你说绒毛球没问题，所以现在你正在创建一个                            

392
04:02:52,239 --> 04:02:57,600
cat 类的实例和变量的名称称为 fluffball                            

393
04:02:57,600 --> 04:03:04,399
猫的名字是绒毛球吧                            

394
04:03:04,399 --> 04:03:08,880
那么你可以说打印                            

395
04:03:08,880 --> 04:03:10,479
无球                            

396
04:03:10,479 --> 04:03:13,920
点名可以这样                            

397
04:03:13,920 --> 04:03:16,160
那只是它具有的普通构造函数                            

398
04:03:16,160 --> 04:03:19,680
与工厂构造函数无关，但实际上是工厂构造函数                            

399
04:03:19,680 --> 04:03:24,160
is 是您构造实例的一种方式                            

400
04:03:24,160 --> 04:03:31,040
你的类和使用便利功能                            

401
04:03:31,040 --> 04:03:35,600
所以这意味着如果你在你的代码中看到                            

402
04:03:35,600 --> 04:03:41,199
您正在创建此类的实例，例如 20 次 30 次不同的地方                            

403
04:03:41,199 --> 04:03:46,319
在您的应用程序中使用这个完全相同的名称绒毛球                            

404
04:03:46,319 --> 04:03:49,439
然后你需要创建一个工厂                            

405
04:03:49,439 --> 04:03:55,040
构造函数，这是一个明确的标志，表明您通常用于创建一个                            

406
04:03:55,040 --> 04:03:57,920
类的实例是通过                            

407
04:03:57,920 --> 04:04:01,600
绒毛球的同名所以                            

408
04:04:01,600 --> 04:04:05,439
这就是工厂构造函数有用的地方，正如它们的名字所表明的那样                            

409
04:04:05,439 --> 04:04:07,760
是一种创造方式                            

410
04:04:07,760 --> 04:04:13,040
像工厂这样的产品对你来说超级快，好吧，所以它的速度                            

411
04:04:13,040 --> 04:04:16,399
您可以创建工厂构造函数的类的实例                            

412
04:04:16,399 --> 04:04:20,319
很亮，所以现在让我们看看一家工厂                            

413
04:04:20,319 --> 04:04:25,359
构造函数，它为我们提供了一个名称始终为 fluffball all 的 cap 实例                            

414
04:04:25,359 --> 04:04:28,560
正确的做法是你会说                            

415
04:04:28,560 --> 04:04:33,680
工厂，你会说猫点绒毛球                            

416
04:04:33,680 --> 04:04:39,120
所以你说任何名为 cat 的类，这个类都有一个名为                            

417
04:04:39,120 --> 04:04:43,359
fluffball 这是这个工厂构造函数，然后你会把你的                            

418
04:04:43,359 --> 04:04:48,319
括号在这里，然后你需要做的是善良                            

419
04:04:48,319 --> 04:04:51,600
在这种情况下设置你的类实例                            

420
04:04:51,600 --> 04:04:54,560
就像你说大括号并说这个名字                            

421
04:04:54,560 --> 04:04:59,520
是那样的绒毛，这就是你基本上的样子                            

422
04:04:59,520 --> 04:05:04,000
创建你的类的一个实例，但通常的做法是你说                            

423
04:05:04,000 --> 04:05:06,239
这个名字                            

424
04:05:06,239 --> 04:05:11,199
伙计，让我们看看呃工厂猫绒毛球                            

425
04:05:11,199 --> 04:05:16,720
然后你会说名字是绒毛                            

426
04:05:16,720 --> 04:05:20,239
看到我有点忘记了嗯                            

427
04:05:20,239 --> 04:05:24,319
uh 工厂的语法 uh so let's go i'm                            

428
04:05:24,319 --> 04:05:30,880
会在这里调出 safari，让我们去说守卫工厂的构造函数                            

429
04:05:30,880 --> 04:05:35,600
我会在这里提出工厂构造函数，让我们说工厂                            

430
04:05:35,600 --> 04:05:40,080
让我们来看一个例子，你可以在这里看到它说工厂记录器就像                            

431
04:05:40,080 --> 04:05:44,560
没关系，有一个工厂记录员就是这样的                            

432
04:05:44,560 --> 04:05:48,880
基本上就是这里所说的基本上是在说                            

433
04:05:48,880 --> 04:05:53,520
this 在这个函数中，你需要返回一些好的，所以让我们关闭它                            

434
04:05:53,520 --> 04:05:57,760
safari 窗口和我们要在这里做什么 我们要说 return cat                            

435
04:05:57,760 --> 04:06:01,359
作为名字，我们会说绒毛球好吧，这就是你的方式                            

436
04:06:01,359 --> 04:06:06,720
会像工厂构造函数一样创建，所以你在这里做的是说                            

437
04:06:06,720 --> 04:06:11,520
我有一个名为 fluffball 的构造函数，它的返回值是一只猫                            

438
04:06:11,520 --> 04:06:15,920
但在里面我有一些特殊的逻辑，就像把它打包起来一样                            

439
04:06:15,920 --> 04:06:19,760
你在工厂做，所以让我们进去而不是做 cat                            

440
04:06:19,760 --> 04:06:24,880
像那样的绒毛球然后你可以说猫点绒毛球好吧                            

441
04:06:24,880 --> 04:06:28,640
就像变成了一个嗯                            

442
04:06:28,640 --> 04:06:33,600
它变得像一个方便的功能，你可以说猫绒毛球和                            

443
04:06:33,600 --> 04:06:37,600
然后你说打印绒毛球                            

444
04:06:37,600 --> 04:06:42,479
点名称，默认情况下您可以看到它是                            

445
04:06:42,479 --> 04:06:46,880
或者你放在这里的任何东西fluffball 2 print，它会被打印到                            

446
04:06:46,880 --> 04:06:51,359
屏幕没问题，这就是你创建工厂的方式                            

447
04:06:51,359 --> 04:06:54,880
构造函数和工厂构造函数真的很重要                            

448
04:06:54,880 --> 04:06:58,479
谈论类集群我们还没有谈论类集群                            

449
04:06:58,479 --> 04:07:03,600
老实说，我不认为我们会在这篇文章中谈论这个                            

450
04:07:03,600 --> 04:07:06,000
当然我不认为这门课的任何地方                            

451
04:07:06,000 --> 04:07:10,239
我实际上已经讨论过类集群                            

452
04:07:10,239 --> 04:07:15,279
但要知道，在 dart 和 abstract 的上下文中                            

453
04:07:15,279 --> 04:07:20,160
类工厂构造函数不一定                            

454
04:07:20,160 --> 04:07:26,399
必须返回同一个类的一个实例，所以它实际上可以                            

455
04:07:26,399 --> 04:07:29,600
返回另一个类的实例                            

456
04:07:29,600 --> 04:07:35,279
但我强烈建议您实际上去阅读有关工厂构造函数的信息                            

457
04:07:35,279 --> 04:07:39,199
正如我刚刚做的那样，谷歌工厂构造函数                            

458
04:07:39,199 --> 04:07:42,479
飞镖，你会看到它的一些例子                            

459
04:07:42,479 --> 04:07:44,960
嗯，如果你在工作，它们真的很有用                            

460
04:07:44,960 --> 04:07:48,880
有很多数据，你正在做数据解析                            

461
04:07:48,880 --> 04:07:52,560
json解析等但是                            

462
04:07:52,560 --> 04:07:56,800
我不认为你现在知道它有什么用                            

463
04:07:56,800 --> 04:08:01,439
但知道它可供您使用，但                            

464
04:08:01,439 --> 04:08:07,279
我让你自己去阅读更多关于它的信息                            

465
04:08:07,279 --> 04:08:09,680
好的，我们现在已经谈到了工厂                            

466
04:08:09,680 --> 04:08:14,880
构造函数和嗯现在让我们谈谈                            

467
04:08:14,880 --> 04:08:20,960
自定义运算符，所以我要把自定义运算符带到这里好吧                            

468
04:08:20,960 --> 04:08:27,520
现在 dart 中的自定义运算符是                            

469
04:08:27,520 --> 04:08:33,439
运算符，例如等号或等号                            

470
04:08:33,439 --> 04:08:39,040
um 检查一个对象实例与另一个实例的相等性                            

471
04:08:39,040 --> 04:08:42,960
同一个对象 um 自定义运算符允许你在飞镖                            

472
04:08:42,960 --> 04:08:50,080
覆盖您的班级被比较或添加到或的能力                            

473
04:08:50,080 --> 04:08:54,159
减去乘以某物                            

474
04:08:54,159 --> 04:08:59,520
用你自己的逻辑现在让我们看看我的意思是什么让我们说                            

475
04:08:59,520 --> 04:09:05,279
你有最后的 uh cat one，它等于 cat 名称为 foo                            

476
04:09:05,279 --> 04:09:09,600
然后你说好吧，我现在有两只猫，名字完全相同                            

477
04:09:09,600 --> 04:09:16,239
然后你会说如果 cat 1 与 cat 2 打印完全一样，它们是相等的                            

478
04:09:16,239 --> 04:09:22,080
否则说打印它们不相等                            

479
04:09:22,080 --> 04:09:25,040
所以这两个实例具有完全相同的                            

480
04:09:25,040 --> 04:09:27,359
名字 foo                            

481
04:09:27,359 --> 04:09:30,479
如果您现在运行此代码，您将看到                            

482
04:09:30,479 --> 04:09:34,800
据说飞镖说它们不相等，尽管在内部你可能                            

483
04:09:34,800 --> 04:09:39,040
在我的项目中随时为我考虑                            

484
04:09:39,040 --> 04:09:44,720
两只猫有相同的名字我希望它们被认为是平等的并且                            

485
04:09:44,720 --> 04:09:48,000
这就像事情变得有趣的地方，因为那时你                            

486
04:09:48,000 --> 04:09:55,040
可以在语言中覆盖这个特定的函数或运算符                            

487
04:09:55,040 --> 04:10:00,640
仅适用于您的班级，因此要做到这一点的方法是您先去                            

488
04:10:00,640 --> 04:10:04,640
用广告标志书写覆盖                            

489
04:10:04,640 --> 04:10:09,600
你说布尔运算符等于等于协方差我是                            

490
04:10:09,600 --> 04:10:13,040
会解释这一切，别担心猫，你说猫，然后                            

491
04:10:13,040 --> 04:10:16,479
在这里你说嗯其他                            

492
04:10:16,479 --> 04:10:20,720
名字是我好的，然后我们遇到了哈希问题                            

493
04:10:20,720 --> 04:10:25,439
我也会补充一点，所以不要担心所有这些，嗯，我                            

494
04:10:25,439 --> 04:10:28,880
会详细解释的 um                            

495
04:10:28,880 --> 04:10:33,680
好吧，好吧，让我们先看看我刚才说的是什么                            

496
04:10:33,680 --> 04:10:38,080
在这里做了覆盖                            

497
04:10:38,080 --> 04:10:42,319
这里的符号覆盖对你来说是非常重要的术语                            

498
04:10:42,319 --> 04:10:45,359
理解面向对象的编程，那就是                            

499
04:10:45,359 --> 04:10:48,319
无论你在哪里                            

500
04:10:48,319 --> 04:10:53,040
一堂课，你是                            

501
04:10:53,040 --> 04:10:58,239
在我们的例子中从那个类继承，例如类 cat 你可以看到                            

502
04:10:58,239 --> 04:11:03,520
它没有任何范围，但默认情况下在每个类中                            

503
04:11:03,520 --> 04:11:08,720
从对象类隐式继承，所以你可以说扩展                            

504
04:11:08,720 --> 04:11:11,359
对象，这与                            

505
04:11:11,359 --> 04:11:14,720
省略写这两个词                            

506
04:11:14,720 --> 04:11:21,520
只知道 cat 来自对象，一个对象在内部已经定义了一个                            

507
04:11:21,520 --> 04:11:26,080
称为 equal 的运算符 equal 返回一个布尔值                            

508
04:11:26,080 --> 04:11:29,840
布尔值是一个可以包含 true 的值                            

509
04:11:29,840 --> 04:11:34,880
这可以是真的也可以是假的，这很好                            

510
04:11:34,880 --> 04:11:40,479
这 这 这 这 这 这 这 这 这 这 这 或 不 有点 像 那                            

511
04:11:40,479 --> 04:11:46,800
所以布尔值是一种数据类型，所以运算符运算符是关键字                            

512
04:11:46,800 --> 04:11:52,159
以及在飞镖中基本上说告诉飞镖我们要改变                            

513
04:11:52,159 --> 04:11:57,199
更改为覆盖此同等平等的功能                            

514
04:11:57,199 --> 04:12:01,600
使用我们自己的在对象级别定义的运算符                            

515
04:12:01,600 --> 04:12:05,439
实施好吧，让我们把范围实际带到这里                            

516
04:12:05,439 --> 04:12:09,680
并进入这个对象定义只需选择它右键单击它并说去                            

517
04:12:09,680 --> 04:12:14,640
定义好的并搜索运算符equal equal                            

518
04:12:14,640 --> 04:12:17,600
你会看到它在那里为你定义好了                            

519
04:12:17,600 --> 04:12:22,319
并且有很多关于它实际作用的文档                            

520
04:12:22,319 --> 04:12:26,960
所以这就是我们要覆盖的语法 我们正在改变它的定义                            

521
04:12:26,960 --> 04:12:30,800
功能正常所以                            

522
04:12:30,800 --> 04:12:35,040
那么由于这是一个简单的函数，因此运算符本身就是一个函数                            

523
04:12:35,040 --> 04:12:39,359
实际上你可以看到它开始它就像一个                            

524
04:12:39,359 --> 04:12:43,760
括号中的括号你得到的值                            

525
04:12:43,760 --> 04:12:50,000
该操作员正在将您的班级与好吧                            

526
04:12:50,000 --> 04:12:53,040
这就是您的班级所具有的价值                            

527
04:12:53,040 --> 04:12:56,319
相比也需要是一只猫，因为你不能在飞镖不是                            

528
04:12:56,319 --> 04:13:00,399
建议您将不同类型的调类与每个类进行比较                            

529
04:13:00,399 --> 04:13:04,560
其他所以这里我们说协方差协方差                            

530
04:13:04,560 --> 04:13:08,479
是您仅在飞镖中使用的关键字，但我认为这对您很重要                            

531
04:13:08,479 --> 04:13:13,600
明白它的作用是它告诉飞镖虽然                            

532
04:13:13,600 --> 04:13:17,920
在对象级别我们说传入的参数                            

533
04:13:17,920 --> 04:13:23,760
是 object 类型，但在我们的例子中，我们确信 this 中的值                            

534
04:13:23,760 --> 04:13:28,960
函数实际上是一只猫，所以协变告诉飞镖                            

535
04:13:28,960 --> 04:13:34,080
忘记作为对象的超类定义为参数类型                            

536
04:13:34,080 --> 04:13:39,279
这个参数，因为如果你删除协变，你会看到它说 cat                            

537
04:13:39,279 --> 04:13:43,439
一个对象作为参数，但如果它是协变的，你有点                            

538
04:13:43,439 --> 04:13:48,960
就像压倒这个假设一样，所以我们说好吧                            

539
04:13:48,960 --> 04:13:52,720
相等，所以我们的意思是比较我们的 cat 实例正在与                            

540
04:13:52,720 --> 04:13:56,080
另一个cath实例，我们正在做的是我们需要                            

541
04:13:56,080 --> 04:13:59,680
返回一个布尔值，表示它们是否相等，你可以看到我只是                            

542
04:13:59,680 --> 04:14:03,279
比较我只是比较我们的名字                            

543
04:14:03,279 --> 04:14:07,439
名称与其他实例名称都可以                            

544
04:14:07,439 --> 04:14:12,080
现在，当您按照您所看到的那样执行此操作时，我们会遇到一个问题，这有点像                            

545
04:14:12,080 --> 04:14:17,120
一个警告告诉你，现在你已经覆盖了它                            

546
04:14:17,120 --> 04:14:21,040
um 运算符，您还需要覆盖                            

547
04:14:21,040 --> 04:14:24,720
哈希码现在好了                            

548
04:14:24,720 --> 04:14:28,880
老实说，我不认为哈希码是这么重要的事情                            

549
04:14:28,880 --> 04:14:34,720
现在但只知道哈希码是一个特殊的数字                            

550
04:14:34,720 --> 04:14:39,279
您分配给您的或您指定的特殊标识符                            

551
04:14:39,279 --> 04:14:42,560
分配给您的类实例                            

552
04:14:42,560 --> 04:14:47,439
然后在集合中使用，例如，如果你把你的实例                            

553
04:14:47,439 --> 04:14:49,520
猫在里面                            

554
04:14:49,520 --> 04:14:53,279
字典然后或对不起或在地图内                            

555
04:14:53,279 --> 04:14:56,960
我们谈到的飞镖叫我相信章节                            

556
04:14:56,960 --> 04:14:59,920
第四章是的，所以如果你没有                            

557
04:14:59,920 --> 04:15:03,760
看第四章我强烈建议你这样做                            

558
04:15:03,760 --> 04:15:10,479
所以如果你把你的实例                            

559
04:15:10,479 --> 04:15:14,880
你的猫类在一个集合中                            

560
04:15:14,880 --> 04:15:20,159
或在地图内然后飞镖                            

561
04:15:20,159 --> 04:15:25,520
知道其映射内的键或集合内的值是                            

562
04:15:25,520 --> 04:15:28,880
实际上是唯一的，它使用这个哈希值                            

563
04:15:28,880 --> 04:15:32,479
所以如果你看看我是不是去这里说命令                            

564
04:15:32,479 --> 04:15:37,840
点来获得如何解决这个问题的建议它说创建方法哈希码                            

565
04:15:37,840 --> 04:15:40,720
这就是修复这个词所需要的                            

566
04:15:40,720 --> 04:15:45,680
所以你可以看到它是一个覆盖，这意味着这个哈希码                            

567
04:15:45,680 --> 04:15:50,800
如果我们去对象并寻找你，getter 是在对象类上定义的                            

568
04:15:50,800 --> 04:15:53,680
可以看到其实是在那里定义的                            

569
04:15:53,680 --> 04:15:57,840
我们正在覆盖它的值，这里它说我要去                            

570
04:15:57,840 --> 04:16:03,600
super 并获得该值 super 是我们的对象，因此作为超类                            

571
04:16:03,600 --> 04:16:08,000
它就在我们上面，但是如果你想覆盖它                            

572
04:16:08,000 --> 04:16:12,159
如果你在这种情况下，你可以说好吧，不要得到超级哈希码                            

573
04:16:12,159 --> 04:16:15,439
获取名称标签，老实说，这只是一个                            

574
04:16:15,439 --> 04:16:20,640
非常技术性的东西，我认为不属于第六章，但是                            

575
04:16:20,640 --> 04:16:26,239
只要知道我们在这里为我们的猫类创建一个标识符                            

576
04:16:26,239 --> 04:16:31,359
这让飞镖明白，如果这                            

577
04:16:31,359 --> 04:16:39,600
cat 类实例放置在集合中，例如地图或集合                            

578
04:16:39,600 --> 04:16:45,920
然后它会知道它们是否独特                            

579
04:16:45,920 --> 04:16:49,600
好吧，既然我们已经完成了这一切，我们                            

580
04:16:49,600 --> 04:16:54,479
可以重新运行代码，你现在会看到它说他们                            

581
04:16:54,479 --> 04:16:57,520
是平等的 这就是我们想要的                            

582
04:16:57,520 --> 04:17:00,880
真的是我们想要的，但实际上我有很多代码                            

583
04:17:00,880 --> 04:17:03,920
不知道就好像四行代码 um                            

584
04:17:03,920 --> 04:17:09,199
这甚至不被认为是一行代码，它有点像                            

585
04:17:09,199 --> 04:17:15,520
是对分析仪的提示，但呃                            

586
04:17:15,520 --> 04:17:18,640
你可以说它几乎只有两行代码，但数量很多                            

587
04:17:18,640 --> 04:17:21,199
对你诚实的新事物                            

588
04:17:21,199 --> 04:17:23,520
掌握                            

589
04:17:23,520 --> 04:17:27,600
所以我把这个留在这里，你可以看看                            

590
04:17:27,600 --> 04:17:30,399
嗯，我想                            

591
04:17:30,399 --> 04:17:34,560
为了本章老实说，我们在本章中已经谈了很多                            

592
04:17:34,560 --> 04:17:39,760
关于枚举 switch 语句 类 对象 uh 构造函数                            

593
04:17:39,760 --> 04:17:42,560
工厂建设者                            

594
04:17:42,560 --> 04:17:48,000
抽象类继承很多所以这一章是相当沉重的一章                            

595
04:17:48,000 --> 04:17:51,120
六，但我建议你                            

596
04:17:51,120 --> 04:17:55,279
去阅读飞镖的官方文档，因为正如我所说                            

597
04:17:55,279 --> 04:17:58,720
我们没有机会谈论一切                            

598
04:17:58,720 --> 04:18:02,560
嗯，否则这门课就是                            

599
04:18:02,560 --> 04:18:06,560
非常大，这不是我想做的                            

600
04:18:06,560 --> 04:18:09,120
请去阅读有关我们谈论的事情的文档                            

601
04:18:09,120 --> 04:18:14,560
尤其是 dart 中的面向对象编程，所以                            

602
04:18:14,560 --> 04:18:19,359
有了这一点，我们将在下一章中讨论                            

603
04:18:19,359 --> 04:18:23,279
关于 dart 中的一些高级功能，例如                            

604
04:18:23,279 --> 04:18:28,720
未来的异步操作流和生成器                            

605
04:18:28,720 --> 04:18:31,439
所以                            

606
04:18:31,439 --> 04:18:35,439
请看一下文档，我会在                            

607
04:18:35,439 --> 04:18:40,159
下一章大家好，欢迎来到第7章                            

608
04:18:40,159 --> 04:18:44,800
在本章的 Flutter 课程中，我们将讨论高级飞镖                            

609
04:18:44,800 --> 04:18:48,640
概念事物，例如扩展期货                            

610
04:18:48,640 --> 04:18:50,960
流嗯                            

611
04:18:50,960 --> 04:18:56,080
异步等待生成器和泛型以及                            

612
04:18:56,080 --> 04:18:58,800
所以呃，我有点假设你已经                            

613
04:18:58,800 --> 04:19:01,760
已经建立了我们在上一章讨论过的项目，所以                            

614
04:19:01,760 --> 04:19:05,439
我不会再经历一次，然后我假设我们喜欢                            

615
04:19:05,439 --> 04:19:10,640
某种 iphone 模拟器或 android 模拟器或任何设备                            

616
04:19:10,640 --> 04:19:13,760
你也许可以测试你的项目                            

617
04:19:13,760 --> 04:19:18,560
我要在这里提出我的项目，所以我要把它放在那里                            

618
04:19:18,560 --> 04:19:21,279
这就是我们在上一章离开项目的方式                            

619
04:19:21,279 --> 04:19:26,319
然后我将在 mac 上执行命令 shift p 或在 linux 中控制 shift p 和                            

620
04:19:26,319 --> 04:19:30,319
windows为了选择设备，我只想说iphone 13 pro                            

621
04:19:30,319 --> 04:19:35,040
这是我在这里的模拟器                            

622
04:19:35,040 --> 04:19:39,680
就在那里，然后我就去说跑                            

623
04:19:39,680 --> 04:19:43,760
无需调试即可运行，所以这需要时间，我只是                            

624
04:19:43,760 --> 04:19:47,120
想着然后利用这个时间解释一下                            

625
04:19:47,120 --> 04:19:49,920
关于扩展名                            

626
04:19:49,920 --> 04:19:53,920
正如你在这里看到的，扩展是能力                            

627
04:19:53,920 --> 04:19:58,720
程序员和飞镖为了er有没有程序员的能力                            

628
04:19:58,720 --> 04:20:00,640
延长                            

629
04:20:00,640 --> 04:20:05,439
或者为我们在第六章讨论过的现有类添加功能                            

630
04:20:05,439 --> 04:20:10,319
类和对象，所以我有点嗯会                            

631
04:20:10,319 --> 04:20:14,399
希望本章中采取行动的每个人实际上都遵循了这一点                            

632
04:20:14,399 --> 04:20:17,439
章以及呃我实际上要去这里去                            

633
04:20:17,439 --> 04:20:21,600
请勿打扰是的，我实际上在那里所以让我们看一个简单的                            

634
04:20:21,600 --> 04:20:25,120
dart 中的扩展以及我们如何使用它我可以看到编程                            

635
04:20:25,120 --> 04:20:28,640
程序正在运行我要删除我们拥有的旧代码，我要                            

636
04:20:28,640 --> 04:20:33,520
把我的脸带到右下角​​，我只是有点                            

637
04:20:33,520 --> 04:20:37,760
知道我在                            

638
04:20:37,760 --> 04:20:40,960
屏幕，他们挡住了屏幕，所以我会确保你                            

639
04:20:40,960 --> 04:20:45,439
可以看到内容，因为我们继续所以                            

640
04:20:45,439 --> 04:20:49,359
嗯，让我们也删除所有这些，然后我们就说我们有一个                            

641
04:20:49,359 --> 04:20:55,600
这里有一个简单的猫类，它有一个名字，我们可以进去说 final                            

642
04:20:55,600 --> 04:20:59,920
喵是猫的一个例子，我可以说                            

643
04:20:59,920 --> 04:21:02,159
打印和我                            

644
04:21:02,159 --> 04:21:07,359
实际上我们必须提供一个我可以在这里看到的名字，让我们说fluffers                            

645
04:21:07,359 --> 04:21:11,120
并保存 meow dot 的名字，所以我们打印那个名字                            

646
04:21:11,120 --> 04:21:17,600
我会说 command 就像那样，嗯，也许会                            

647
04:21:17,600 --> 04:21:21,680
调出 Visual Studio 代码，这样您就可以实际看到输出命令和                            

648
04:21:21,680 --> 04:21:25,359
你可以看到我们在哪里得到这个                            

649
04:21:25,359 --> 04:21:29,120
等于哦，这是一个旧命令，所以命令是，你可以看到 fluffers 是                            

650
04:21:29,120 --> 04:21:33,600
打印到屏幕上，这是因为我们这里有名字，所以我也是                            

651
04:21:33,600 --> 04:21:36,800
现在要去掉这个标题，这样你就可以看到整个                            

652
04:21:36,800 --> 04:21:41,279
像这样的代码把它带到这里我也将摆脱我的                            

653
04:21:41,279 --> 04:21:45,279
模拟器并将其带到另一个屏幕好吧，所以现在让我们说你想要                            

654
04:21:45,279 --> 04:21:49,600
向此添加功能或向此类添加功能                            

655
04:21:49,600 --> 04:21:55,120
允许猫奔跑或允许猫跳所以一种方法是                            

656
04:21:55,120 --> 04:22:00,239
实际上去猫类类本身并创建一个                            

657
04:22:00,239 --> 04:22:04,479
功能在那里，但你也可以做的是去说扩展                            

658
04:22:04,479 --> 04:22:10,000
例如在 cat 上运行，这是创建扩展的语法                            

659
04:22:10,000 --> 04:22:13,279
你说的是你正在扩展                            

660
04:22:13,279 --> 04:22:16,239
上课叫猫                            

661
04:22:16,239 --> 04:22:20,880
一个名为 run now 的新功能，这不是该功能的名称                            

662
04:22:20,880 --> 04:22:23,199
它本身只是您的扩展名                            

663
04:22:23,199 --> 04:22:27,439
而且你现在不必真正了解这个名字，它只是                            

664
04:22:27,439 --> 04:22:30,720
当您可以在飞镖中变得更高级时，例如创建                            

665
04:22:30,720 --> 04:22:33,680
你自己的图书馆                            

666
04:22:33,680 --> 04:22:37,520
在不同的类上创建扩展，例如在你的库中，然后                            

667
04:22:37,520 --> 04:22:41,279
使用您的库的人或程序员，然后他们可以                            

668
04:22:41,279 --> 04:22:45,840
基本上包括您已包含的特定扩展                            

669
04:22:45,840 --> 04:22:49,760
在他们的代码中的库中，或者他们可以排除它们                            

670
04:22:49,760 --> 04:22:53,840
所以只要知道它只是一个名字                            

671
04:22:53,840 --> 04:22:57,760
扩展名，所以它现在没有太大意义，好吧，那么你可以                            

672
04:22:57,760 --> 04:23:02,000
创建一个没有返回值的函数 run 然后你可以说                            

673
04:23:02,000 --> 04:23:06,319
打印和猫名正在运行                            

674
04:23:06,319 --> 04:23:09,760
你从前面的章节中知道了这个语法，这就是你的方式                            

675
04:23:09,760 --> 04:23:15,479
格式化一个字符串然后在这里你基本上是在做嗯弹簧插值                            

676
04:23:15,479 --> 04:23:20,239
插值我认为它被称为并且你在里面包含了那个名字                            

677
04:23:20,239 --> 04:23:23,600
你自己的字符串，所以结果将是 cat                            

678
04:23:23,600 --> 04:23:27,199
空格此 cat 实例的名称                            

679
04:23:27,199 --> 04:23:30,399
空间运行正常，所以                            

680
04:23:30,399 --> 04:23:34,399
使用它，你可以在你的每个 cat 实例                            

681
04:23:34,399 --> 04:23:39,439
项目将获得名为 run 的函数，因此您可以                            

682
04:23:39,439 --> 04:23:43,600
说我出去运行并命令它，你可以看到它                            

683
04:23:43,600 --> 04:23:49,760
说 cap fluffers 正在运行，所以只要知道扩展是                            

684
04:23:49,760 --> 04:23:53,760
如果您认为存在                            

685
04:23:53,760 --> 04:23:57,279
您要添加到现有类中的功能，它实际上并不                            

686
04:23:57,279 --> 04:24:01,120
属于那个类本身                            

687
04:24:01,120 --> 04:24:04,159
但它可能例如属于                            

688
04:24:04,159 --> 04:24:07,199
您正在使用的当前源文件                            

689
04:24:07,199 --> 04:24:12,159
扩展非常有用，但我也相信他们需要                            

690
04:24:12,159 --> 04:24:16,319
有点小心使用有点像稀疏所以当你真的需要一个                            

691
04:24:16,319 --> 04:24:20,479
扩展，你可以去创建一个扩展，它们有限制                            

692
04:24:20,479 --> 04:24:24,960
随着你越来越习惯用 dart 编程，你就会明白                            

693
04:24:24,960 --> 04:24:29,279
他们的局限性更好一点，所以只要知道他们在那里                            

694
04:24:29,279 --> 04:24:32,560
并且可以用作另一个示例                            

695
04:24:32,560 --> 04:24:34,960
扩展是例如，如果你有一个类                            

696
04:24:34,960 --> 04:24:39,199
人让我说名字                            

697
04:24:39,199 --> 04:24:43,359
属性没问题，所以这是一个实例属性，然后                            

698
04:24:43,359 --> 04:24:48,319
你会说 uh last name 然后你说 command dot individual                            

699
04:24:48,319 --> 04:24:52,880
mac 上的 studio 代码或 linux 和 windows 中的控制点，然后您创建一个                            

700
04:24:52,880 --> 04:24:57,920
您的个人课程的构造函数好的，这就是您创建实例的方式                            

701
04:24:57,920 --> 04:25:01,600
你的人班然后你可以进去然后你说                            

702
04:25:01,600 --> 04:25:05,600
um final fou 是名字是                            

703
04:25:05,600 --> 04:25:11,199
谁和谁的姓是酒吧好吧，在这里假设你想成为                            

704
04:25:11,199 --> 04:25:16,080
能算出一个人的全名没事所以你能做的就是对你                            

705
04:25:16,080 --> 04:25:19,199
可以为我说延期                            

706
04:25:19,199 --> 04:25:23,920
一个人，然后在这里你可以说我有                            

707
04:25:23,920 --> 04:25:28,479
我想计算全名，以便结果类型将是                            

708
04:25:28,479 --> 04:25:31,199
字符串，然后你想现在创建一个吸气剂                            

709
04:25:31,199 --> 04:25:33,760
我们还没有过多地谈论吸气剂，但只知道它有点像                            

710
04:25:33,760 --> 04:25:37,359
property 它是一个只能永久读取但不能写入的属性                            

711
04:25:37,359 --> 04:25:40,640
所以你只说得到然后你说假                            

712
04:25:40,640 --> 04:25:45,439
作为属性的名称，您会说等于                            

713
04:25:45,439 --> 04:25:50,000
美元名字空间美元姓氏好的                            

714
04:25:50,000 --> 04:25:53,600
所以你在这里说的是我有一个getter，它的返回类型是                            

715
04:25:53,600 --> 04:25:56,880
字符串，其名称为全名，它返回名字和姓氏                            

716
04:25:56,880 --> 04:26:01,760
中间有空格的内存，然后在这里你可以说打印                            

717
04:26:01,760 --> 04:26:04,399
对我来说 foo 好吧                            

718
04:26:04,399 --> 04:26:09,279
和 command s 然后我会带上我会删除标题，这样你就可以看到                            

719
04:26:09,279 --> 04:26:13,279
foo bar 打印到屏幕上好吗                            

720
04:26:13,279 --> 04:26:19,199
所以这是扩展名，我要注意，在我这里我要标记它                            

721
04:26:19,199 --> 04:26:23,439
在我的笔记中，我们已经讨论过扩展了                            

722
04:26:23,439 --> 04:26:27,279
现在接下来要谈的下一个话题是期货                            

723
04:26:27,279 --> 04:26:30,960
正如您在此处看到的那样，future 是将来要作为其名称返回的数据                            

724
04:26:30,960 --> 04:26:33,520
建议所以嗯                            

725
04:26:33,520 --> 04:26:36,880
如果你还没有的话，这就是所谓的异步编程的一部分                            

726
04:26:36,880 --> 04:26:40,800
你之前一直在做编程，你可能不是这样                            

727
04:26:40,800 --> 04:26:44,800
熟悉术语同步或异步 um                            

728
04:26:44,800 --> 04:26:49,600
同步任务是当你请求它并且它发生时发生的任务                            

729
04:26:49,600 --> 04:26:53,199
立即返回您要求的数据                            

730
04:26:53,199 --> 04:26:58,560
例如，如果你说 um 什么是 2 plus 2 然后我们会说                            

731
04:26:58,560 --> 04:27:03,600
好的，这是同步任务的四个，但是如果您例如对您的                            

732
04:27:03,600 --> 04:27:08,159
嗯，配偶或你的朋友今天请去杂货店，然后                            

733
04:27:08,159 --> 04:27:11,760
得到一些不会在这一刻发生的牛奶                            

734
04:27:11,760 --> 04:27:16,399
我的意思是即使你是你旁边的杂货店                            

735
04:27:16,399 --> 04:27:19,359
房子或你的公寓，然后你的朋友必须离开                            

736
04:27:19,359 --> 04:27:25,040
准备好穿上鞋子去商店取邮​​件可以回来所以                            

737
04:27:25,040 --> 04:27:31,040
嗯，那是一个异步任务，所以异步任务基本上是一个任务                            

738
04:27:31,040 --> 04:27:34,159
结果未返回的                            

739
04:27:34,159 --> 04:27:36,800
马上就好了                            

740
04:27:36,800 --> 04:27:40,080
到目前为止，我们已经查看了我实际上要使用的功能                            

741
04:27:40,080 --> 04:27:44,239
从这里删除所有这些代码，这样我们就没有所有这些了                            

742
04:27:44,239 --> 04:27:48,239
现在我们这里只有 void 测试功能了                            

743
04:27:48,239 --> 04:27:51,600
所以                            

744
04:27:51,600 --> 04:27:55,520
到目前为止，我们编写的所有函数都是同步函数                            

745
04:27:55,520 --> 04:28:00,399
例如，您会说字符串乘以                            

746
04:28:00,399 --> 04:28:05,600
2 然后它得到一个整数 a 它只是说 a 乘以 2 all                            

747
04:28:05,600 --> 04:28:09,760
正确且实际上很抱歉的提示，因此它返回一个                            

748
04:28:09,760 --> 04:28:13,120
整数 函数调用 函数名被调用乘以 2 it                            

749
04:28:13,120 --> 04:28:16,080
将整数作为参数，然后将该整数乘以 2，然后                            

750
04:28:16,080 --> 04:28:21,040
返回它这是一个同步操作，但是如果你想工作的话，在泥土中                            

751
04:28:21,040 --> 04:28:24,080
使用您必须执行的异步操作                            

752
04:28:24,080 --> 04:28:29,520
使用一个名为 future 的类，所以让我们看看那个，嗯，让我们说                            

753
04:28:29,520 --> 04:28:35,600
你有一个函数乘以它可能需要的两倍                            

754
04:28:35,600 --> 04:28:40,319
一些时间来乘以一个值，好吧，这是假设的，因为是的                            

755
04:28:40,319 --> 04:28:43,120
乘法将立即完成，但我们只是要                            

756
04:28:43,120 --> 04:28:46,399
假设是的，这是一个复杂的乘法，它需要一些                            

757
04:28:46,399 --> 04:28:51,040
时间好吧，让我们说未来，然后你会说什么是实际的                            

758
04:28:51,040 --> 04:28:55,760
未来它包含什么数据类型我们可以说整数然后我们说                            

759
04:28:55,760 --> 04:28:58,000
沉重的未来                            

760
04:28:58,000 --> 04:29:02,399
好的，它的值是 int a heavy                            

761
04:29:02,399 --> 04:29:06,880
未来乘以两个类似的东西                            

762
04:29:06,880 --> 04:29:12,640
好的，所以它说我现在返回一个未来                            

763
04:29:12,640 --> 04:29:16,880
在这里然后你你的嗯                            

764
04:29:16,880 --> 04:29:21,600
职责是创建和打包一个整数并将其返回到一个                            

765
04:29:21,600 --> 04:29:25,439
未来所以如果你在这里说好的                            

766
04:29:25,439 --> 04:29:29,359
return 10 好吧，你看它说 l10 不是                            

767
04:29:29,359 --> 04:29:34,479
与整数的未来兼容，因为 10 是一个同步值                            

768
04:29:34,479 --> 04:29:39,359
就在那里，它就在那儿，所以你在这里做什么，然后你可以说                            

769
04:29:39,359 --> 04:29:43,760
好吧，我返回的是一个未来，然后你可以说哦，我要去                            

770
04:29:43,760 --> 04:29:49,120
将这个未来延迟三秒，好吧                            

771
04:29:49,120 --> 04:29:53,359
然后你会看到这个延迟函数有第二个参数                            

772
04:29:53,359 --> 04:29:57,680
嗯，你可以看到它让我们看看                            

773
04:29:57,680 --> 04:30:02,399
呃，如果我们看看这里的延迟函数，你会发现还有第二个                            

774
04:30:02,399 --> 04:30:06,080
称为未来或计算的参数                            

775
04:30:06,080 --> 04:30:09,840
在这里你需要做的就是说好                            

776
04:30:09,840 --> 04:30:14,640
我的第二个参数是一个函数，我将很好地忽略它的返回值                            

777
04:30:14,640 --> 04:30:17,439
我只是要返回一个好的值                            

778
04:30:17,439 --> 04:30:22,880
所以让我们实际看看我们是否说未来延迟持续时间秒然后                            

779
04:30:22,880 --> 04:30:29,840
我们说参数是让我们说 e 然后我只想说 return a                            

780
04:30:29,840 --> 04:30:34,319
这个值是多少然后你知道我们实际上可以看到什么                            

781
04:30:34,319 --> 04:30:38,399
未来的文档延迟，所以我也可以刷新我的想法                            

782
04:30:38,399 --> 04:30:41,920
所以我要去打开一个新的野生动物园窗口，我要说未来                            

783
04:30:41,920 --> 04:30:44,960
延迟这是通常的东西类型                            

784
04:30:44,960 --> 04:30:48,560
无论如何，如果你用 dart 编程我也会增加                            

785
04:30:48,560 --> 04:30:50,880
大小，以便您可以更好地看到它                            

786
04:30:50,880 --> 04:30:54,399
让我们看看未来的延迟                            

787
04:30:54,399 --> 04:30:58,080
在这里我们可以看到它是如何构建的                            

788
04:30:58,080 --> 04:31:02,159
如何使用future 好，所以你可以在这里看到有一个                            

789
04:31:02,159 --> 04:31:06,720
它基本上不带任何价值的功能，所以                            

790
04:31:06,720 --> 04:31:12,000
我认为问题在于我可能刚刚创建了一个类似 um 的函数                            

791
04:31:12,000 --> 04:31:16,720
期待一个参数，所以这就是你要这样做的方式，我的意思是                            

792
04:31:16,720 --> 04:31:20,319
这是一个有点奇怪的论点，就像我实际上要清理它一样                            

793
04:31:20,319 --> 04:31:23,760
一点点，然后尽可能使它成为一个常数                            

794
04:31:23,760 --> 04:31:28,000
看到这里的建议然后返回所以我写了很多我没有的代码                            

795
04:31:28,000 --> 04:31:31,840
真的解释了我在这里做了什么，但我现在会这样做，让我们看看                            

796
04:31:31,840 --> 04:31:36,960
呃，我们是说我们将来会返回一个整数，所以                            

797
04:31:36,960 --> 04:31:39,680
它不会立即归还它需要一些时间                            

798
04:31:39,680 --> 04:31:44,640
让它做它的计算好吧，然后在这里让我们说 a 乘以 2 为                            

799
04:31:44,640 --> 04:31:48,640
正如我们在函数签名中所承诺的那样，这就是未来的 int                            

800
04:31:48,640 --> 04:31:52,080
这是函数的名称，所以没有什么神奇的，然后它                            

801
04:31:52,080 --> 04:31:56,560
在我们所说的函数体中接受一个表示整数 a 的参数                            

802
04:31:56,560 --> 04:32:02,080
好的，我们正在返回一个未来，但我们将它的返回延迟了                            

803
04:32:02,080 --> 04:32:06,479
三秒，所以你可以看到，如果你进去的话，这里是一堂课                            

804
04:32:06,479 --> 04:32:09,680
实际上是宪法还可以，然后可能有一个班级                            

805
04:32:09,680 --> 04:32:15,520
在某个地方，让我们看看                            

806
04:32:15,520 --> 04:32:22,000
我相信宪法在等等等等宪法持续时间运营商                            

807
04:32:22,000 --> 04:32:27,040
这是我的意思是持续时间飞镖它可能只是一个课程持续时间                            

808
04:32:27,040 --> 04:32:31,120
如果您在这里查看课程持续时间，那么在某个地方                            

809
04:32:31,120 --> 04:32:34,239
所以我们说我们正在创建一个持续时间作为第一个参数                            

810
04:32:34,239 --> 04:32:38,319
未来的延迟功能所以我们说我们正在延迟这个未来的                            

811
04:32:38,319 --> 04:32:41,840
返回值三秒，然后它说好的，我要等三秒                            

812
04:32:41,840 --> 04:32:45,359
秒，但我等了三秒后，我要打电话给这个                            

813
04:32:45,359 --> 04:32:48,000
函数，这有点像                            

814
04:32:48,000 --> 04:32:52,720
创建一个内联函数你也可以这样做你说好吧我的                            

815
04:32:52,720 --> 04:32:56,319
我提供给这个函数的函数，所以就像你在传递一个                            

816
04:32:56,319 --> 04:33:00,720
函数到未来的延迟函数，然后在这里你可以说好的                            

817
04:33:00,720 --> 04:33:06,080
我返回一个乘以二，然后是一个分号，所以这可能有点                            

818
04:33:06,080 --> 04:33:09,920
更容易阅读所以嗯                            

819
04:33:09,920 --> 04:33:15,199
现在我们有了这个，我们实际上可以在                            

820
04:33:15,199 --> 04:33:19,760
我们的测试在我们的测试功能所以                            

821
04:33:19,760 --> 04:33:24,000
当你然后嗯我的意思是现在我们实际上我们现在                            

822
04:33:24,000 --> 04:33:29,039
谈了一点关于未来的事情，为了使用                            

823
04:33:29,039 --> 04:33:32,000
未来那么你需要知道一些关于                            

824
04:33:32,000 --> 04:33:35,199
现在异步并等待飞镖                            

825
04:33:35,199 --> 04:33:39,920
async 和 await 彼此非常相关，但相当                            

826
04:33:39,920 --> 04:33:42,561
它们的含义不同，嗯                            

827
04:33:42,561 --> 04:33:46,639
我现在只想解释一下实际上首先 async                            

828
04:33:46,639 --> 04:33:52,320
async 是 dart 中的一个关键词，将函数标记为异步                            

829
04:33:52,320 --> 04:33:55,680
记住同步是立即返回的东西，而异步是                            

830
04:33:55,680 --> 04:33:59,520
不会立即返回的东西需要一些时间                            

831
04:33:59,520 --> 04:34:04,959
在这里标记一个函数异步，这意味着这个函数在内部                            

832
04:34:04,959 --> 04:34:09,840
可以执行不立即返回的命令                            

833
04:34:09,840 --> 04:34:13,920
所以 ac 将函数标记为异步它                            

834
04:34:13,920 --> 04:34:18,561
这意味着这个函数在内部调用了其他函数                            

835
04:34:18,561 --> 04:34:24,639
异步工作所以我们现在说最终的结果是                            

836
04:34:24,639 --> 04:34:28,561
沉重的未来，我们说 10 好吧                            

837
04:34:28,561 --> 04:34:32,480
现在我们已经完成了，让我打印结果，你会感到惊讶                            

838
04:34:32,480 --> 04:34:36,240
当我们这样做时实际看到结果，你会看到它                            

839
04:34:36,240 --> 04:34:39,199
不是你想的那样不会是 20 好吧                            

840
04:34:39,199 --> 04:34:43,760
所以我要去掉这个标题，这样你就可以看到结果了                            

841
04:34:43,760 --> 04:34:47,279
将在控制台和命令中清除结果                            

842
04:34:47,279 --> 04:34:52,320
你会看到打印到屏幕上的实际上是未来不是                            

843
04:34:52,320 --> 04:34:56,561
不是您认为的值 20 应该是                            

844
04:34:56,561 --> 04:35:00,879
乘以 2 应该是 20。所以这里发生的事情是当你打电话时                            

845
04:35:00,879 --> 04:35:04,561
一个返回未来的函数，你实际上正在获得未来                            

846
04:35:04,561 --> 04:35:09,520
没有取回其数据，那么您如何通过以下方式很好地取回该数据                            

847
04:35:09,520 --> 04:35:14,080
在函数前面加上关键字 await                            

848
04:35:14,080 --> 04:35:20,240
所以它的名字表明这个关键字只是等待                            

849
04:35:20,240 --> 04:35:23,840
这个函数的结果被计算然后它会去                            

850
04:35:23,840 --> 04:35:26,959
下一行好吧                            

851
04:35:26,959 --> 04:35:30,879
这两个彼此非常相关，如果我删除 async 你会看到                            

852
04:35:30,879 --> 04:35:34,879
然后我会收到一个错误，说你说的很好                            

853
04:35:34,879 --> 04:35:38,959
调用 test 是一个同步函数，它只返回 void                            

854
04:35:38,959 --> 04:35:43,600
基本上意味着它不返回任何东西并且它异步执行它                            

855
04:35:43,600 --> 04:35:47,600
工作，不必等待任何事情                            

856
04:35:47,600 --> 04:35:51,119
但是然后在你说的函数里面等待，这意味着是的，我必须                            

857
04:35:51,119 --> 04:35:54,320
等待一些时间，这不好，所以                            

858
04:35:54,320 --> 04:35:58,400
那么你需要做的是你在内部用 async 标记你的函数                            

859
04:35:58,400 --> 04:36:02,160
在那个功能中，您可以使用权重                            

860
04:36:02,160 --> 04:36:07,520
然后重量本身用于                            

861
04:36:07,520 --> 04:36:12,480
等待未来的结果好吧，所以如果你删除这个异步和                            

862
04:36:12,480 --> 04:36:16,840
然后你删除这个等待一切都会正常工作，但它只是                            

863
04:36:16,840 --> 04:36:22,719
同步得到乘以二的沉重未来的未来和                            

864
04:36:22,719 --> 04:36:27,199
打印它，这样它就不会在这里做任何异步工作你可以看到                            

865
04:36:27,199 --> 04:36:31,840
它只是获取那个实例，所以现在我们调用 let's command s                            

866
04:36:31,840 --> 04:36:35,520
你会看到它正在等待三秒钟然后打印                            

867
04:36:35,520 --> 04:36:39,119
结果 20 到屏幕上没问题，所以                            

868
04:36:39,119 --> 04:36:43,920
对我们来说是异步的，重量级的，我们将使用异步，并且以某种方式                            

869
04:36:43,920 --> 04:36:48,160
并且在这门课程中等待很多，所以如果可以的话，那就太好了                            

870
04:36:48,160 --> 04:36:51,279
有了我给你的这些信息，如果你能有一点点的话                            

871
04:36:51,279 --> 04:36:54,879
阅读关于未来之类的文档                            

872
04:36:54,879 --> 04:36:58,320
在网络上，所以如果你只是搜索未来                            

873
04:36:58,320 --> 04:37:03,760
dart um 和 async await 并阅读一些关于它们的信息，因为                            

874
04:37:03,760 --> 04:37:06,959
它们对于在 dart 中进行异步工作非常重要，以至于我们只是                            

875
04:37:06,959 --> 04:37:10,719
不能跳过他们好吗                            

876
04:37:10,719 --> 04:37:15,199
好吧，现在我们已经谈到了未来                            

877
04:37:15,199 --> 04:37:19,119
呃，我们已经讨论过异步和等待                            

878
04:37:19,119 --> 04:37:23,039
所以我会把它们标记为                            

879
04:37:23,039 --> 04:37:28,400
在我的笔记中完成 嗯下一个话题要谈                            

880
04:37:28,400 --> 04:37:31,760
这将是流                            

881
04:37:31,760 --> 04:37:38,000
所以正如你在这里看到的，dart 中的 future 是一个控制计算的类                            

882
04:37:38,000 --> 04:37:42,561
一个异步值，以便在将来的某个时间点返回                            

883
04:37:42,561 --> 04:37:45,920
但是经常在                            

884
04:37:45,920 --> 04:37:50,719
在您的客户工作甚至服务器工作中，您需要做的工作是                            

885
04:37:50,719 --> 04:37:56,240
异步但是它是连续工作，例如，如果你喜欢我有                            

886
04:37:56,240 --> 04:38:01,600
时间呃显示在我屏幕右上角的时间                            

887
04:38:01,600 --> 04:38:05,359
那是一个字符串流                            

888
04:38:05,359 --> 04:38:11,840
它是一个它是一个流，因为它没有准备好结束它它是一个                            

889
04:38:11,840 --> 04:38:15,920
每分钟都有连续的信息管道                            

890
04:38:15,920 --> 04:38:20,400
右上角的小自动收报机它会增加                            

891
04:38:20,400 --> 04:38:24,639
它会去零六五十零六五十六百五十六所以                            

892
04:38:24,639 --> 04:38:29,039
它不断计算当前时间，就像发送它一样                            

893
04:38:29,039 --> 04:38:32,240
这个管道现在在异步编程和                            

894
04:38:32,240 --> 04:38:36,240
反应式编程，如果你是                            

895
04:38:36,240 --> 04:38:39,199
学习本课程，或者如果您正在学习其他课程，您可以                            

896
04:38:39,199 --> 04:38:43,199
实际上有兴趣了解有关流的更多信息                            

897
04:38:43,199 --> 04:38:47,760
和反应流一个流只是一个数据管道                            

898
04:38:47,760 --> 04:38:50,719
嗯，要么                            

899
04:38:50,719 --> 04:38:56,561
它要么完成，要么永远不会完成                            

900
04:38:56,561 --> 04:39:02,160
实际上它成功完成或从未完成或出错                            

901
04:39:02,160 --> 04:39:06,561
死了好吧                            

902
04:39:06,561 --> 04:39:11,840
它不是早上的 0 6 50，而是永远不会完成的数据流                            

903
04:39:11,840 --> 04:39:15,680
因为时间只是不断向前                            

904
04:39:15,680 --> 04:39:21,359
所以当我们谈论流时，我们只是指未来的数据管道                            

905
04:39:21,359 --> 04:39:25,279
将数据发送到这个管道                            

906
04:39:25,279 --> 04:39:28,480
永远不会像你在未来的情况下看到的那样结束                            

907
04:39:28,480 --> 04:39:32,959
未来结束它计算它的数据并返回它说我完成了                            

908
04:39:32,959 --> 04:39:38,958
但是 dart 中的流是一个继续工作的未来                            

909
04:39:38,958 --> 04:39:42,878
好的，所以它会在未来计算一些数据，并将其发送到                            

910
04:39:42,878 --> 04:39:46,560
流，它说哦，好吧，我还没完成这里的另一个数据这里的另一个数据                            

911
04:39:46,560 --> 04:39:49,120
可以，然后呢                            

912
04:39:49,120 --> 04:39:55,520
让我们看看这个呃流，看看我们如何处理流                            

913
04:39:55,520 --> 04:40:02,798
所以让我们去创建一个 um 的流让我们说一个字符串                            

914
04:40:02,798 --> 04:40:08,798
然后我们说现在在这里取名字好                            

915
04:40:08,798 --> 04:40:14,560
你的工作是创建一个字符串，所以如果你说 return hello                            

916
04:40:14,560 --> 04:40:18,560
看到 hello 与您承诺的返回类型不兼容                            

917
04:40:18,560 --> 04:40:22,798
将是一个字符串，嗯，所以你这与如何                            

918
04:40:22,798 --> 04:40:26,718
我们处理了你无法返回的整数的未来                            

919
04:40:26,718 --> 04:40:30,638
那个未来的整数，但你必须创造一个整数和内部的未来                            

920
04:40:30,638 --> 04:40:33,920
该函数返回的实际整数是                            

921
04:40:33,920 --> 04:40:36,958
计算如果我回去你会看到                            

922
04:40:36,958 --> 04:40:40,878
代码在这里正确的未来延迟和里面                            

923
04:40:40,878 --> 04:40:43,920
函数你实际上在做计算                            

924
04:40:43,920 --> 04:40:46,878
那么我们如何创建一个流，你可以                            

925
04:40:46,878 --> 04:40:50,878
只是说流然后你可以说                            

926
04:40:50,878 --> 04:40:57,600
好的，例如周期性的，或者一个值，如果你说我们返回一个流                            

927
04:40:57,600 --> 04:41:00,560
value 然后你可以说 foo                            

928
04:41:00,560 --> 04:41:03,840
被接受 这意味着你有一个管道                            

929
04:41:03,840 --> 04:41:07,760
数据，但它包含的唯一值是                            

930
04:41:07,760 --> 04:41:10,878
foo 是食物的价值，没关系                            

931
04:41:10,878 --> 04:41:16,878
所以现在让我们进入这个测试函数并尝试使用这个 uh 流，如果你                            

932
04:41:16,878 --> 04:41:21,200
刚刚说最终价值是让我                            

933
04:41:21,200 --> 04:41:25,920
你只需打印这个值然后我会清除日志                            

934
04:41:25,920 --> 04:41:30,000
在这里说 command s 你会看到就像 future 它只是说 instance                            

935
04:41:30,000 --> 04:41:35,760
控制器流可以，所以它不是字符串中的实际值，所以                            

936
04:41:35,760 --> 04:41:39,280
问题是你如何等待值                            

937
04:41:39,280 --> 04:41:44,480
在流中你可以说好的等待                            

938
04:41:44,480 --> 04:41:47,440
它说好的你实际上我们可以读到这个重量                            

939
04:41:47,440 --> 04:41:50,798
应用于不是未来的流字符串，所以                            

940
04:41:50,798 --> 04:41:54,958
dart 理解你正在等待流，但是                            

941
04:41:54,958 --> 04:41:58,160
这不仅仅是你要等待的未来                            

942
04:41:58,160 --> 04:42:02,400
没有什么可以等待的，就像它不是一个单一的值是一个流，所以                            

943
04:42:02,400 --> 04:42:05,840
这样做的语法是等待                            

944
04:42:05,840 --> 04:42:10,160
四个好的所以这是一个语法                            

945
04:42:10,160 --> 04:42:15,040
对于等待流中的值，您可以说等待最终值                            

946
04:42:15,040 --> 04:42:18,000
以它的名义好吧                            

947
04:42:18,000 --> 04:42:20,958
然后你可以打印这个值，所以这有点奇怪                            

948
04:42:20,958 --> 04:42:25,440
语法，但如果你像用英语一样阅读它，那么你是完全有道理的                            

949
04:42:25,440 --> 04:42:31,040
如果您只是忽略此处的 final，则等待 get 名称中的值                            

950
04:42:31,040 --> 04:42:33,520
好的，但是用英语从左到右阅读                            

951
04:42:33,520 --> 04:42:37,760
正确等待获取名称中的值就是这样                            

952
04:42:37,760 --> 04:42:41,360
然后最后我要说打印流                            

953
04:42:41,360 --> 04:42:45,520
完成工作                            

954
04:42:45,520 --> 04:42:50,638
这里是控制台命令 s，你会立即看到它说 foo                            

955
04:42:50,638 --> 04:42:54,638
然后流完成工作我要清除它命令                            

956
04:42:54,638 --> 04:42:59,680
foo 流完成工作正常，所以这是一个有趣的概念，但是                            

957
04:42:59,680 --> 04:43:03,280
它仍然不是流，我的意思是我们正在将完整的字符串打包在里面                            

958
04:43:03,280 --> 04:43:07,600
流，但这只是我们可以做的一个值                            

959
04:43:07,600 --> 04:43:11,600
有了未来，所以让我们利用实际的流                            

960
04:43:11,600 --> 04:43:15,920
在其管道中发送数据的功能                            

961
04:43:15,920 --> 04:43:19,760
连续所以我们可以在这里做的说流                            

962
04:43:19,760 --> 04:43:24,718
周期性的，它意味着周期性地产生值，在这里你可以看到第一个                            

963
04:43:24,718 --> 04:43:28,958
参数是一个持续时间，所以我们说恒定的持续时间                            

964
04:43:28,958 --> 04:43:34,958
每秒秒数可以，然后这里有第二个参数                            

965
04:43:34,958 --> 04:43:38,560
如果我定期将鼠标移到上方，您必须提供，您会看到                            

966
04:43:38,560 --> 04:43:44,000
第二个参数是这个字符串函数 int 好所以这意味着给我一个                            

967
04:43:44,000 --> 04:43:49,440
接受整数然后返回字符串的函数                            

968
04:43:49,440 --> 04:43:52,958
它知道它需要返回一个字符串，因为你在说                            

969
04:43:52,958 --> 04:43:59,040
如果您将其更改为 int 然后转到此处，则您的流是一个字符串                            

970
04:43:59,040 --> 04:44:03,760
嗯到文档和文档实际上或                            

971
04:44:03,760 --> 04:44:07,040
方法签名会变成说你应该支持你                            

972
04:44:07,040 --> 04:44:10,480
应该在你提供给我的这个函数中取一个整数，然后                            

973
04:44:10,480 --> 04:44:13,840
你需要返回一个整数，这样我只想给你看                            

974
04:44:13,840 --> 04:44:17,920
函数签名中显示的那个字符串是因为我们                            

975
04:44:17,920 --> 04:44:21,680
承诺在我们的函数中返回一个字符串                            

976
04:44:21,680 --> 04:44:25,040
让我们进入这里基本上是函数签名说的                            

977
04:44:25,040 --> 04:44:28,878
你需要接受一个整数，所以我只想说价值                            

978
04:44:28,878 --> 04:44:34,080
然后让我们进去吧，我只想说 return foo                            

979
04:44:34,080 --> 04:44:38,718
所以我们基本上符合我们的函数签名                            

980
04:44:38,718 --> 04:44:42,560
说我们取了一些值，你看到这个值是一个整数                            

981
04:44:42,560 --> 04:44:47,520
然后我们会返回一个字符串，所以现在我们可以使用它，所以如果我清除                            

982
04:44:47,520 --> 04:44:52,480
这个日志，我说命令，你看到每秒 foo 的值是                            

983
04:44:52,480 --> 04:44:54,560
将被打印到屏幕上                            

984
04:44:54,560 --> 04:44:58,638
实际上我需要删除这个标题我可以看到你看不到它                            

985
04:44:58,638 --> 04:45:02,400
你看 10 次 11 次 12 13                            

986
04:45:02,400 --> 04:45:05,760
14. 所以没关系                            

987
04:45:05,760 --> 04:45:09,280
嗯，我很抱歉标题挡住了我不知道的屏幕                            

988
04:45:09,280 --> 04:45:13,920
嗯，或者实际上我知道这一点，但我忘记了在                            

989
04:45:13,920 --> 04:45:19,040
在我说话的时候，你可以看到每一秒                            

990
04:45:19,040 --> 04:45:25,280
流现在正在发送一个值，这基本上就是                            

991
04:45:25,280 --> 04:45:28,638
使用流，你会                            

992
04:45:28,638 --> 04:45:33,840
实际上我想知道我们是否要在这门课程中使用流，我相信                            

993
04:45:33,840 --> 04:45:39,840
在某些时候，我们可能需要看看嗯                            

994
04:45:39,840 --> 04:45:44,400
看看我的笔记是的，我可以看到我们实际上正在使用                            

995
04:45:44,400 --> 04:45:48,560
本课程中的流，所以不用担心                            

996
04:45:48,560 --> 04:45:53,040
如果你现在不完全理解流，因为我们要谈谈                            

997
04:45:53,040 --> 04:45:57,440
关于流和嗯                            

998
04:45:57,440 --> 04:46:01,920
因为我们稍后会真正讨论流和流控制器                            

999
04:46:01,920 --> 04:46:03,760
这在这                            

1000
04:46:03,760 --> 04:46:07,200
当然，现在只知道流就像                            

1001
04:46:07,200 --> 04:46:11,680
未来，但它可以连续或定期返回                            

1002
04:46:11,680 --> 04:46:18,638
值，然后您可以使用 await for 等待这些值                            

1003
04:46:18,638 --> 04:46:23,040
语法和飞镖没问题                            

1004
04:46:23,040 --> 04:46:25,920
好的嗯                            

1005
04:46:25,920 --> 04:46:30,240
现在下一个话题                            

1006
04:46:30,240 --> 04:46:36,480
本章讲的是生成器所以                            

1007
04:46:36,480 --> 04:46:39,760
生成器在飞镖中非常有趣                            

1008
04:46:39,760 --> 04:46:45,200
其他一些语言也支持生成器和                            

1009
04:46:45,200 --> 04:46:48,958
但并非所有现代语言都这样做                            

1010
04:46:48,958 --> 04:46:55,360
dart 中的生成器是一个返回的函数                            

1011
04:46:55,360 --> 04:47:03,040
我不想说可迭代，但它会返回一个列表                            

1012
04:47:03,040 --> 04:47:07,360
但它在内部计算数据                            

1013
04:47:07,360 --> 04:47:12,160
非常简单的方法，这是我能来的最好的解释                            

1014
04:47:12,160 --> 04:47:14,638
说实话，让我们看看这里                            

1015
04:47:14,638 --> 04:47:18,240
我认为最好的方法实际上是编写一个函数                            

1016
04:47:18,240 --> 04:47:23,440
创建一个生成器，好吧，我要清除这个，嗯                            

1017
04:47:23,440 --> 04:47:26,638
然后我们在这里有一个测试功能让我们标记系带好                            

1018
04:47:26,638 --> 04:47:30,320
嗯，让我们现在去创建一个生成器，然后                            

1019
04:47:30,320 --> 04:47:32,958
假设我们想要                            

1020
04:47:32,958 --> 04:47:36,638
创建一个返回值一二三的函数                            

1021
04:47:36,638 --> 04:47:38,878
嗯                            

1022
04:47:38,878 --> 04:47:44,718
一种方法是说我想要一个整数列表，我的                            

1023
04:47:44,718 --> 04:47:50,638
函数或像这样得到一二三                            

1024
04:47:50,638 --> 04:47:54,320
你可以说像那样返回一二三，这完全是                            

1025
04:47:54,320 --> 04:47:57,040
有效的另一种方法是使用                            

1026
04:47:57,040 --> 04:48:02,638
称为可迭代和可迭代的东西我的意思是你需要                            

1027
04:48:02,638 --> 04:48:05,760
了解迭代实际上是什么，它们有点像懒惰                            

1028
04:48:05,760 --> 04:48:10,638
集合，当你习惯做更多的软件工程时，你会                            

1029
04:48:10,638 --> 04:48:15,760
了解更多为什么我们使用惰性集合                            

1030
04:48:15,760 --> 04:48:21,920
但现在只知道迭代是一个准备好的和打包的列表                            

1031
04:48:21,920 --> 04:48:24,798
事情，但不是                            

1032
04:48:24,798 --> 04:48:29,840
刚开始时未完全计算                            

1033
04:48:29,840 --> 04:48:34,080
有点像餐厅的运作方式                            

1034
04:48:34,080 --> 04:48:38,160
例如，在一个典型的夜晚，一家餐厅可能有 50 位顾客                            

1035
04:48:38,160 --> 04:48:42,878
当夜班开始时                            

1036
04:48:42,878 --> 04:48:47,360
不是所有的食物都准备好了我的意思是它不可能像第一次切的那样                            

1037
04:48:47,360 --> 04:48:51,040
顾客进来我们可以说第 50 位顾客的食物已经                            

1038
04:48:51,040 --> 04:48:55,120
在厨房里准备好这就是餐厅的运作方式                            

1039
04:48:55,120 --> 04:48:59,680
听取客户的订单，然后根据                            

1040
04:48:59,680 --> 04:49:05,040
订单这就是可迭代的工作方式，但是 dart 中的列表已经是                            

1041
04:49:05,040 --> 04:49:09,280
打包清单这意味着就像你去超市然后                            

1042
04:49:09,280 --> 04:49:12,480
你买好了准备出发                            

1043
04:49:12,480 --> 04:49:18,638
已经包装好的食物 30 包 30 准备好的清单                            

1044
04:49:18,638 --> 04:49:24,320
容易包装的食品，然后你拿走这就是清单的工作方式，但是                            

1045
04:49:24,320 --> 04:49:27,040
可迭代更像是                            

1046
04:49:27,040 --> 04:49:32,240
这是一个在旅途中计算出来的类似事物的列表                            

1047
04:49:32,240 --> 04:49:35,600
在飞行中没事，所以                            

1048
04:49:35,600 --> 04:49:38,798
嗯，现在只知道，所以我们只是说                            

1049
04:49:38,798 --> 04:49:42,320
要么很好，正如你所看到的，dart 明白，好的，列表也是                            

1050
04:49:42,320 --> 04:49:45,440
眼睛有问题，所以我不必担心，所以它没有给你一个                            

1051
04:49:45,440 --> 04:49:48,480
错误所以让我们走吧，实际上而不是                            

1052
04:49:48,480 --> 04:49:51,760
做一二三让我们去标记我们的                            

1053
04:49:51,760 --> 04:49:56,560
嗯，作为一个发电机，你用                            

1054
04:49:56,560 --> 04:50:03,920
同步或异步都可以，这将是一个流                            

1055
04:50:03,920 --> 04:50:09,680
现在带星号的同步和带星号的异步之间的区别                            

1056
04:50:09,680 --> 04:50:13,520
星号是同步功能是                            

1057
04:50:13,520 --> 04:50:19,280
它是一个生成器函数，它返回一个事物列表，但它计算出                            

1058
04:50:19,280 --> 04:50:22,958
异步的事情列表，你可以猜到                            

1059
04:50:22,958 --> 04:50:28,638
与同步星号等效的异步它执行完全相同的操作，但返回                            

1060
04:50:28,638 --> 04:50:32,560
一个流，这意味着它是异步的                            

1061
04:50:32,560 --> 04:50:38,000
计算它的结果没问题，所以当你将函数标记为同步时                            

1062
04:50:38,000 --> 04:50:42,560
然后不要像这样去回来，因为你可以看到你                            

1063
04:50:42,560 --> 04:50:46,560
可以看到它说你正在创建一个生成器函数，所以你必须善良                            

1064
04:50:46,560 --> 04:50:52,480
现在计算你的结果你不能只把一堆东西还给我好吗                            

1065
04:50:52,480 --> 04:50:56,560
所以要做到这一点，你会在                            

1066
04:50:56,560 --> 04:51:00,480
飞镖称为产量现在产量是                            

1067
04:51:00,480 --> 04:51:04,400
一个非常有趣的关键字，您只能在生成器函数中使用                            

1068
04:51:04,400 --> 04:51:07,760
据我所知，在这里你告诉飞镖                            

1069
04:51:07,760 --> 04:51:14,480
好的，我在可迭代中输出的第一个值是一个的值，所以                            

1070
04:51:14,480 --> 04:51:19,440
如果在这里我们去说嗯                            

1071
04:51:19,440 --> 04:51:24,798
我知道或者说我们说四值                            

1072
04:51:24,798 --> 04:51:30,240
得到一二三然后你可以说打印值                            

1073
04:51:30,240 --> 04:51:33,760
你可以看到它只打印 1 的值。我实际上要摆脱这个                            

1074
04:51:33,760 --> 04:51:38,638
标题你可以看到输出它只打印 1 的值                            

1075
04:51:38,638 --> 04:51:43,040
因为我们产生了 1 的值。好的，所以你可以发送然后说 yield                            

1076
04:51:43,040 --> 04:51:47,600
一产生二和产生三然后你会看到值一二三                            

1077
04:51:47,600 --> 04:51:50,638
所以在这个函数内部然后你                            

1078
04:51:50,638 --> 04:51:54,240
可以做很多其他重要的事情，也许是同步的，呃，其他的                            

1079
04:51:54,240 --> 04:51:58,160
同步计算，每次你有一个值要输出                            

1080
04:51:58,160 --> 04:52:01,840
那么你基本上会嗯                            

1081
04:52:01,840 --> 04:52:08,560
你会做一个产量，你也可以打印整个返回值                            

1082
04:52:08,560 --> 04:52:12,638
是的，你不必做一个四循环，所以你可以说打印它然后                            

1083
04:52:12,638 --> 04:52:16,798
它会说一二三好，但如果你做一个 for 循环，那么你                            

1084
04:52:16,798 --> 04:52:20,638
实际上利用了那个懒惰的嗯                            

1085
04:52:20,638 --> 04:52:25,360
eye turbo 的功能，因此您可以随时在循环中断开循环                            

1086
04:52:25,360 --> 04:52:30,400
是时候说打印值了                            

1087
04:52:30,400 --> 04:52:34,958
如果值为 2                            

1088
04:52:34,958 --> 04:52:40,080
那么你可以休息好，所以让我们清除日志和命令                            

1089
04:52:40,080 --> 04:52:44,160
你会看到只有一和二的值被打印出来，然后只要你                            

1090
04:52:44,160 --> 04:52:47,680
价值为 2 时，你正在打破，这意味着这个产量                            

1091
04:52:47,680 --> 04:52:54,480
基本上从来没有计算过，所以这就像美丽的                            

1092
04:52:54,480 --> 04:52:57,360
生成器函数                            

1093
04:52:57,360 --> 04:53:01,280
所以你也可以像我提到的那样创建异步生成器函数                            

1094
04:53:01,280 --> 04:53:06,160
这意味着你有点像创建一个迭代流                            

1095
04:53:06,160 --> 04:53:11,040
老实说异步生成器我已经用过                            

1096
04:53:11,040 --> 04:53:14,718
在我用飞镖的很多年里，有一两次呃                            

1097
04:53:14,718 --> 04:53:17,280
所以我认为你不会使用它们                            

1098
04:53:17,280 --> 04:53:22,320
很多，但只要知道它们就在那里，你可以通过给你的眼睛加上前缀来使用它们                            

1099
04:53:22,320 --> 04:53:25,680
高音与流说基本上你正在返回一个                            

1100
04:53:25,680 --> 04:53:29,840
一连串眼睛问题，然后用 async 为您的功能添加后缀                            

1101
04:53:29,840 --> 04:53:34,000
就这样，然后在这里它说好的，你说                            

1102
04:53:34,000 --> 04:53:37,200
你正在返回一个理想整数流，但你只转了一个                            

1103
04:53:37,200 --> 04:53:41,680
在这里的价值然后你会说好的一二                            

1104
04:53:41,680 --> 04:53:44,240
好的，但是你会说是的，然后你                            

1105
04:53:44,240 --> 04:53:47,920
有能力在这里做任何你想做的事情，比如返回一个实际的眼睛变量                            

1106
04:53:47,920 --> 04:53:51,360
好吧，老实说，我不打算谈论异步生成器                            

1107
04:53:51,360 --> 04:53:55,440
和你一起参加这门课程，因为它们有点超出范围                            

1108
04:53:55,440 --> 04:54:01,680
所以只要知道它们的存在，你就可以使用它们                            

1109
04:54:01,680 --> 04:54:05,040
好的，我将在我的笔记中标记我们已经讨论过生成器，所以                            

1110
04:54:05,040 --> 04:54:09,200
下一个话题是泛型                            

1111
04:54:09,200 --> 04:54:14,560
我要在这里提出一个标题，所以泛型                            

1112
04:54:14,560 --> 04:54:17,680
支持它的编程语言是                            

1113
04:54:17,680 --> 04:54:22,400
这样您就可以避免一遍又一遍地编写相同的代码                            

1114
04:54:22,400 --> 04:54:26,958
所以让我们说你我的意思是这是一个非常                            

1115
04:54:26,958 --> 04:54:30,480
典型的例子我知道这有点陈词滥调                            

1116
04:54:30,480 --> 04:54:33,600
但我认为这是陈词滥调是有原因的                            

1117
04:54:33,600 --> 04:54:36,798
那是因为这是一个很好的例子                            

1118
04:54:36,798 --> 04:54:41,280
假设你有一堂课                            

1119
04:54:41,280 --> 04:54:46,240
存储一对数据让我们说类                            

1120
04:54:46,240 --> 04:54:50,320
配对好吧，然后在这里你可以说好吧                            

1121
04:54:50,320 --> 04:54:55,520
我要存储的一对数据好吗我要存储                            

1122
04:54:55,520 --> 04:55:00,160
值一作为字符串，我还想将值二存储为字符串，然后你                            

1123
04:55:00,160 --> 04:55:04,080
为它创建构造函数                            

1124
04:55:04,080 --> 04:55:09,040
一对字符串，但是你如何将一个整数像两个整数那样配对                            

1125
04:55:09,040 --> 04:55:13,200
你会说好吧，我必须再上一对课，然后                            

1126
04:55:13,200 --> 04:55:18,240
这是一个整数，但是你有这个问题，因为                            

1127
04:55:18,240 --> 04:55:22,080
pair 已经在第七行定义为一个类                            

1128
04:55:22,080 --> 04:55:26,240
所以你不能重复使用你不能有相同的名字然后你会说好的                            

1129
04:55:26,240 --> 04:55:30,560
整数对                            

1130
04:55:30,560 --> 04:55:33,680
然后在这里你会说一对字符串                            

1131
04:55:33,680 --> 04:55:37,040
并且您确保构造函数名称也是                            

1132
04:55:37,040 --> 04:55:39,040
现在改正                            

1133
04:55:39,040 --> 04:55:44,480
我的意思是你可能也有我的意思是在这一点上我们没有逻辑                            

1134
04:55:44,480 --> 04:55:48,000
在这两个课程中，您实际上可能有很多逻辑                            

1135
04:55:48,000 --> 04:55:52,000
课程，但正如我提到的，我认为在其中一个                            

1136
04:55:52,000 --> 04:55:55,440
这些章节我认为是第一章或第二章的主要程序之一                            

1137
04:55:55,440 --> 04:56:00,240
软件工程师的特点就是大家都不喜欢                            

1138
04:56:00,240 --> 04:56:04,798
嗯，一遍又一遍地写相同的代码，所以                            

1139
04:56:04,798 --> 04:56:08,560
我们尽量避免                            

1140
04:56:08,560 --> 04:56:12,400
嗯重复我们自己                            

1141
04:56:12,400 --> 04:56:17,600
那就是泛型可以进来的地方，所以你可以做的不是做                            

1142
04:56:17,600 --> 04:56:22,000
这双让我把这​​个带到这里走走                            

1143
04:56:22,000 --> 04:56:25,840
创建一个通用的类，你会说pair                            

1144
04:56:25,840 --> 04:56:31,360
然后创建泛型类的一种格式是写在                            

1145
04:56:31,360 --> 04:56:37,200
类哦，只是到一个小于和大于符号好，然后打开你的广场                            

1146
04:56:37,200 --> 04:56:39,360
现在括号                            

1147
04:56:39,360 --> 04:56:43,440
在这里然后你定义你的泛型                            

1148
04:56:43,440 --> 04:56:50,560
像通常带有单个字符的数据类型的名称让我们说                            

1149
04:56:50,560 --> 04:56:56,240
你想要的是一对任何数据类型让我们称第一个数据类型为                            

1150
04:56:56,240 --> 04:57:00,638
第二个数据类型 b 因为有两个值所以我们称之为                            

1151
04:57:00,638 --> 04:57:06,240
一个 a 和一个 b 好的，你可以写它们，因为我们只是说我们说 a 和 b                            

1152
04:57:06,240 --> 04:57:10,878
好的，那么在这里你会说最终                            

1153
04:57:10,878 --> 04:57:14,000
一个值，所以你告诉编译器                            

1154
04:57:14,000 --> 04:57:19,760
好吧，我创建的第一个数据类型是我接受的                            

1155
04:57:19,760 --> 04:57:23,600
那应该放在这里然后我们说好的然后b是                            

1156
04:57:23,600 --> 04:57:26,638
第二个，然后我们为                            

1157
04:57:26,638 --> 04:57:30,240
没关系，那么您将如何使用它，那是您                            

1158
04:57:30,240 --> 04:57:37,360
会说 final 和 is pair 然后你会说 foo 和 bar 好                            

1159
04:57:37,360 --> 04:57:43,120
然后这就像一个简单的它非常类似于pair                            

1160
04:57:43,120 --> 04:57:46,878
我们在那里写的字符串，您会看到它也可以正常工作，但是现在在这种情况下                            

1161
04:57:46,878 --> 04:57:51,520
dart 足够聪明，可以理解 names 是一对字符串和字符串                            

1162
04:57:51,520 --> 04:57:56,560
这意味着您传递给这对泛型类的两个值是                            

1163
04:57:56,560 --> 04:58:02,718
实际上然后神奇地为您放置在 a 和 b 模板中                            

1164
04:58:02,718 --> 04:58:07,040
你在这里提供好的，所以如果在这种情况下，那么你说                            

1165
04:58:07,040 --> 04:58:10,560
好的，我有 foo 然后我有 20 的值                            

1166
04:58:10,560 --> 04:58:14,560
然后飞镖足够聪明，可以理解哦，现在它是一对绳子                            

1167
04:58:14,560 --> 04:58:16,958
整数所以                            

1168
04:58:16,958 --> 04:58:22,080
这就是你基本上使用呃泛型的方式所以我的意思是有这么多                            

1169
04:58:22,080 --> 04:58:27,120
谈论泛型以及如何做                            

1170
04:58:27,120 --> 04:58:30,240
呃基本上是利用它们来创造                            

1171
04:58:30,240 --> 04:58:35,520
非常简单的类，以便它们可以重复使用                            

1172
04:58:35,520 --> 04:58:41,360
功能或尽可能多的代码，而无需复制该代码，因此                            

1173
04:58:41,360 --> 04:58:45,840
老实说，谈论泛型可能是它自己的全部                            

1174
04:58:45,840 --> 04:58:51,440
当然我们可以继续，四点五六小时我可以谈论仿制药，所以                            

1175
04:58:51,440 --> 04:58:55,840
只知道泛型是这样创建的，你说类对，然后你                            

1176
04:58:55,840 --> 04:58:58,638
会说你的通用数据类型，然后在                            

1177
04:58:58,638 --> 04:59:02,160
案件然后反过来被放置在里面                            

1178
04:59:02,160 --> 04:59:06,240
类本身内部的定义很好                            

1179
04:59:06,240 --> 04:59:08,718
嗯                            

1180
04:59:08,718 --> 04:59:12,400
好吧，现在我们已经讨论了泛型，嗯，我相信我们可以                            

1181
04:59:12,400 --> 04:59:16,638
就像结束我们聊过的这个嗯章节                            

1182
04:59:16,638 --> 04:59:20,400
更多关于飞镖扩展期货的高级主题                            

1183
04:59:20,400 --> 04:59:24,480
异步等待流的权重流生成器和                            

1184
04:59:24,480 --> 04:59:29,520
仿制药现在好了，我真的很高兴我们                            

1185
04:59:29,520 --> 04:59:33,840
经历了第七章，也就是这一章，因为直到这                            

1186
04:59:33,840 --> 04:59:38,400
点我们有点像为我们的发布做准备                            

1187
04:59:38,400 --> 04:59:42,240
现在是我们把所有东西都放好的时候了                            

1188
04:59:42,240 --> 04:59:47,840
我们已经在实践中学到并实际开始构建我们的项目                            

1189
04:59:47,840 --> 04:59:52,000
所以我真的起鸡皮疙瘩了，因为它是如此重要的一部分                            

1190
04:59:52,000 --> 04:59:55,600
这门课程我们实际上已经完成了我们讨论过的基础知识                            

1191
04:59:55,600 --> 04:59:59,520
dart 我们已经讨论过一些设置模拟器的基础知识等                            

1192
04:59:59,520 --> 05:00:04,240
等等，我很高兴我可以说好的，我们现在已经经历了                            

1193
05:00:04,240 --> 05:00:08,000
而你现在需要做的就是练习，还有什么更好的方法来练习                            

1194
05:00:08,000 --> 05:00:13,200
练习而不是把你学到的东西付诸实践                            

1195
05:00:13,200 --> 05:00:15,680
书面申请                            

1196
05:00:15,680 --> 05:00:18,878
我们一直瞄准的颤振项目                            

1197
05:00:18,878 --> 05:00:23,440
从头做起 所以事不宜迟                            

1198
05:00:23,440 --> 05:00:26,798
准备下一章，即第八章，在第八章中，我们                            

1199
05:00:26,798 --> 05:00:30,718
会谈谈呃项目设置然后我们实际上是                            

1200
05:00:30,718 --> 05:00:34,638
将一些依赖项添加到我们将要使用的项目中                            

1201
05:00:34,638 --> 05:00:39,440
稍后好吧，所以让我们瞄准那个，我会看到你的                            

1202
05:00:39,440 --> 05:00:43,120
下一章你好，欢迎来到章号                            

1203
05:00:43,120 --> 05:00:47,040
本章要讲的八门课                            

1204
05:00:47,040 --> 05:00:50,958
关于我们在前几章中的基本项目设置                            

1205
05:00:50,958 --> 05:00:54,160
到目前为止，老实说，我们一直在使用 dart                            

1206
05:00:54,160 --> 05:00:57,680
有点像嗯为学习奠定基础                            

1207
05:00:57,680 --> 05:01:01,200
实际上嗯的编程语言                            

1208
05:01:01,200 --> 05:01:05,600
呃它助长了颤振，所以它是一种编程语言，你会                            

1209
05:01:05,600 --> 05:01:08,958
需要很舒服才能写出你的颤动                            

1210
05:01:08,958 --> 05:01:13,280
应用程序，因此随着我们继续进行，您将越来越多地了解飞镖                            

1211
05:01:13,280 --> 05:01:16,400
当然，但如果可以的话，那就太好了                            

1212
05:01:16,400 --> 05:01:21,040
看看介绍章节，然后就像跟随                            

1213
05:01:21,040 --> 05:01:26,400
直到这一点的章节，以便您大致了解飞镖是什么                            

1214
05:01:26,400 --> 05:01:30,400
关于然后如何在非常浅的层次上使用它我的意思是我知道                            

1215
05:01:30,400 --> 05:01:33,840
我有很多材料，但是                            

1216
05:01:33,840 --> 05:01:38,080
我们真的不喜欢深入每个话题所以我只是想给你                            

1217
05:01:38,080 --> 05:01:43,280
喜欢 dart 中不同可用选项的味道和味道                            

1218
05:01:43,280 --> 05:01:45,840
所以如果你还没有看过那些章节                            

1219
05:01:45,840 --> 05:01:50,160
请继续浏览它们，即使你已经很舒服了                            

1220
05:01:50,160 --> 05:01:52,798
用飞镖所以                            

1221
05:01:52,798 --> 05:01:56,080
在本章中，我们将讨论项目设置，这是                            

1222
05:01:56,080 --> 05:02:00,080
就像设置中绝对最重要的部分之一                            

1223
05:02:00,080 --> 05:02:04,798
嗯，一个颤振的申请，所以如果你是                            

1224
05:02:04,798 --> 05:02:09,760
如果你想跳过这一章，那也没关系，如果                            

1225
05:02:09,760 --> 05:02:12,240
你知道你在做什么，但如果这是你第一次设置                            

1226
05:02:12,240 --> 05:02:16,000
一个颤振的项目，如果可以的话，我认为它真的很好                            

1227
05:02:16,000 --> 05:02:23,840
跟随本章，所以我现在要进入 um                            

1228
05:02:23,840 --> 05:02:27,760
让我们在这里做一些设置所以我要做什么我要带我的脸                            

1229
05:02:27,760 --> 05:02:32,320
到右下角，这样你就可以看到整个屏幕                            

1230
05:02:32,320 --> 05:02:36,798
然后我要调出我们下一个项目的标题                            

1231
05:02:36,798 --> 05:02:43,440
要去谈谈，在这里我们有一个嗯                            

1232
05:02:43,440 --> 05:02:46,240
如您所见，您可以在终端中发出一个命令来创建                            

1233
05:02:46,240 --> 05:02:49,840
一个新的牙线项目，所以每个牙线项目都有不同的                            

1234
05:02:49,840 --> 05:02:54,798
属性它具有例如一个完整的名称，就像它的名称一样                            

1235
05:02:54,798 --> 05:02:59,280
整个项目嗯，也是其中之一                            

1236
05:02:59,280 --> 05:03:02,480
Flutter项目的主要属性是                            

1237
05:03:02,480 --> 05:03:05,680
标识符现在标识符不会这样                            

1238
05:03:05,680 --> 05:03:11,520
重要的是不是颤振实际上可以部署到 ios 和 android                            

1239
05:03:11,520 --> 05:03:16,080
一个 ios 应用程序和一个 android 应用程序的标识符是                            

1240
05:03:16,080 --> 05:03:20,320
实际上是什么将该应用程序定义为独特的                            

1241
05:03:20,320 --> 05:03:26,400
如在 ios ios 用户和 ipad os 用户可以下载的应用商店                            

1242
05:03:26,400 --> 05:03:30,958
应用程序和 um play 商店，其中 android 用户可以                            

1243
05:03:30,958 --> 05:03:34,798
下载 android 应用程序，使这些标识符为                            

1244
05:03:34,798 --> 05:03:38,160
我在前一章中提到的有点像反向域                            

1245
05:03:38,160 --> 05:03:41,840
标识符，所以有点像您的网站是                            

1246
05:03:41,840 --> 05:03:45,760
foob​​ar.com 并且您的应用程序称为 baz                            

1247
05:03:45,760 --> 05:03:50,560
那么您的应用程序的反向域标识符将变为点                            

1248
05:03:50,560 --> 05:03:54,400
foob​​ar.bass 所以有点像                            

1249
05:03:54,400 --> 05:03:59,680
你把你的域名倒过来，所以如果 foobar.com 变成 com.fubar 并且                            

1250
05:03:59,680 --> 05:04:04,480
然后你在后面加上点，然后你输入你的实际应用程序名称                            

1251
05:04:04,480 --> 05:04:09,360
所以这些标识符需要是唯一的，我的意思是                            

1252
05:04:09,360 --> 05:04:14,718
if a if a if a if a developer on the ios app store or google play                            

1253
05:04:14,718 --> 05:04:19,680
商店已经消失并注册了反向嗯基本上那个项目                            

1254
05:04:19,680 --> 05:04:24,320
identifier.com.fubar.bass 用于他们的任何应用程序，因此他们                            

1255
05:04:24,320 --> 05:04:28,400
说好的，这是我的应用程序，叫做图片库，但它有一个完全                            

1256
05:04:28,400 --> 05:04:32,798
com.foobar.pass 的随机标识符                            

1257
05:04:32,798 --> 05:04:37,760
那么你作为一个新的开发人员，即使你想做同样时髦的部署                            

1258
05:04:37,760 --> 05:04:41,760
到应用商店，你不能再注册那个名字了，因为它是                            

1259
05:04:41,760 --> 05:04:44,160
已经采取了                            

1260
05:04:44,160 --> 05:04:47,680
将项目的标识符视为                            

1261
05:04:47,680 --> 05:04:52,480
从你创建项目的开始会发生什么                            

1262
05:04:52,480 --> 05:04:56,080
通过应用程序商店的方式好吧                            

1263
05:04:56,080 --> 05:05:00,480
明智地选择它是非常重要的，因为如果你不这样做                            

1264
05:05:00,480 --> 05:05:04,320
不幸的是，从一开始就明智地做一些事情                            

1265
05:05:04,320 --> 05:05:10,400
将来填补自己去更新                            

1266
05:05:10,400 --> 05:05:13,920
嗯，所以我真的会建议和                            

1267
05:05:13,920 --> 05:05:18,480
在这里建议您花一点时间考虑一下                            

1268
05:05:18,480 --> 05:05:22,798
标识符将是您喜欢的标识符                            

1269
05:05:22,798 --> 05:05:26,000
以及您对什么感到满意，例如，如果您有一个域                            

1270
05:05:26,000 --> 05:05:31,440
作为应用商店和谷歌游戏商店的开发者命名                            

1271
05:05:31,440 --> 05:05:35,680
所以如果你的名字已经注册了一个域名，我建议                            

1272
05:05:35,680 --> 05:05:39,760
强烈建议您使用它，并且如果您个人拥有域名并且                            

1273
05:05:39,760 --> 05:05:43,280
域名选择为like a                            

1274
05:05:43,280 --> 05:05:47,200
对于您的公司，您现在需要知道是否要发布                            

1275
05:05:47,200 --> 05:05:51,280
此应用程序以您个人的名义或如果您要发布                            

1276
05:05:51,280 --> 05:05:57,600
它在您公司的名称上，所以这些都起作用，但是                            

1277
05:05:57,600 --> 05:06:02,480
事不宜迟，让我们在这里创建我们的项目                            

1278
05:06:02,480 --> 05:06:05,120
嗯，老实说，我个人                            

1279
05:06:05,120 --> 05:06:08,638
还没有真正考虑过我是否要将此应用程序作为                            

1280
05:06:08,638 --> 05:06:12,240
私人，或者如果我想在我的公司下创建它，我认为                            

1281
05:06:12,240 --> 05:06:18,240
因为我的开发者帐户在苹果和谷歌是在                            

1282
05:06:18,240 --> 05:06:24,240
我公司的名字在瑞典是 pixelity ab 然后我实际上要使用                            

1283
05:06:24,240 --> 05:06:28,560
该公司的域名是 pixelity.se                            

1284
05:06:28,560 --> 05:06:34,480
因为 s 就像瑞典域名一样 code.uk 是                            

1285
05:06:34,480 --> 05:06:40,320
嗯，例如英国的，所以我想我会这样做，所以让我们去吧                            

1286
05:06:40,320 --> 05:06:44,320
并打开一个新终端让我们去终端嗯                            

1287
05:06:44,320 --> 05:06:47,680
我现在看不到我的屏幕，但我只是要打开一个新终端                            

1288
05:06:47,680 --> 05:06:50,798
这里的窗口                            

1289
05:06:50,798 --> 05:06:54,240
把它拿出来让你也能看到 嗯                            

1290
05:06:54,240 --> 05:07:01,600
我要增加文本的大小，这样我输入的内容就很清楚了                            

1291
05:07:01,600 --> 05:07:08,000
所以让我继续创建一个项目，所以我要去我的开发                            

1292
05:07:08,000 --> 05:07:11,600
我有所有项目的文件夹，我要去项目                            

1293
05:07:11,600 --> 05:07:15,840
颤动好吧，然后你可以看到颤动                            

1294
05:07:15,840 --> 05:07:19,600
创建然后然后破折号破折号组织作为                            

1295
05:07:19,600 --> 05:07:25,040
组织，我会看到说 se dot pixelity                            

1296
05:07:25,040 --> 05:07:30,160
现在正如我所说，我的域名称为 pixelity.sc，但您的组织必须是                            

1297
05:07:30,160 --> 05:07:35,760
反向那个好吧，所以记住反向标识符所以反向域标识符                            

1298
05:07:35,760 --> 05:07:38,480
那么，如果您的例如组织                            

1299
05:07:38,480 --> 05:07:41,680
是 hello dot com 那么在这里你会有                            

1300
05:07:41,680 --> 05:07:46,958
写 com dot hello 好吧，所以我要说 s epixody 但你                            

1301
05:07:46,958 --> 05:07:50,080
不应该这样做，所以如果您正在学习本课程，请                            

1302
05:07:50,080 --> 05:07:54,480
为您的域选择一个对您有意义的标识符，如果您                            

1303
05:07:54,480 --> 05:07:57,920
如果你没有被所有这些困扰，就没有域                            

1304
05:07:57,920 --> 05:08:02,320
将您的应用程序发布到您甚至不必关心的应用程序商店                            

1305
05:08:02,320 --> 05:08:05,760
关于这个只要把任何东西放在这里你可以说                            

1306
05:08:05,760 --> 05:08:09,840
来吧，嗯，编造东西                            

1307
05:08:09,840 --> 05:08:14,400
如果这就是你想要的，那么对你说实话没什么大不了的                            

1308
05:08:14,400 --> 05:08:19,600
继续选择一个标识符，所以我要说 s epixody 因为                            

1309
05:08:19,600 --> 05:08:25,040
那是我的反向域名，然后在这里你必须写你的                            

1310
05:08:25,040 --> 05:08:28,080
应用程序名称所以                            

1311
05:08:28,080 --> 05:08:31,120
嗯，我们应该怎么称呼这个应用程序                            

1312
05:08:31,120 --> 05:08:34,240
老实说，我的意思是我个人还没有                            

1313
05:08:34,240 --> 05:08:38,080
我决定这个应用程序应该叫什么也许我们应该叫它                            

1314
05:08:38,080 --> 05:08:41,040
呃我的个人                            

1315
05:08:41,040 --> 05:08:45,840
记下我的个人笔记或我的笔记                            

1316
05:08:45,840 --> 05:08:48,560
类似的东西或                            

1317
05:08:48,560 --> 05:08:52,638
私人笔记还行                            

1318
05:08:52,638 --> 05:08:55,760
所有私人笔记                            

1319
05:08:55,760 --> 05:09:01,600
或笔记列表我不知道我的笔记会不会起作用                            

1320
05:09:01,600 --> 05:09:06,000
我笔记中的 sd 像素是的，为什么不呢？                            

1321
05:09:06,000 --> 05:09:09,600
让我们称之为我的笔记然后好吧                            

1322
05:09:09,600 --> 05:09:12,560
所以让我们继续前进吧                            

1323
05:09:12,560 --> 05:09:15,600
创建，我可以看到我的意思是实际上我非常                            

1324
05:09:15,600 --> 05:09:19,600
感谢我们在上面收到了那个小通知，所以让它这样做                            

1325
05:09:19,600 --> 05:09:22,718
工作和嗯                            

1326
05:09:22,718 --> 05:09:26,560
它完成了它的工作，它完成了，它调用了一些东西，它创建了一个文件夹                            

1327
05:09:26,560 --> 05:09:30,798
如果你看到了，你可以看到我的笔记和在这个窗口的顶部                            

1328
05:09:30,798 --> 05:09:34,320
然后打印了一条小消息，可以使用新版本的颤振                            

1329
05:09:34,320 --> 05:09:38,560
更新到最新版本只是运行更平坦的升级，所以这不是一部分                            

1330
05:09:38,560 --> 05:09:41,920
这当然我不是故意的，但我也无法控制它                            

1331
05:09:41,920 --> 05:09:45,520
因为颤振是谷歌正在开发的一个工具，它是一个开源的                            

1332
05:09:45,520 --> 05:09:49,440
运行任何这些颤振命令时有新版本时的工具                            

1333
05:09:49,440 --> 05:09:53,440
它会用版本库检查嗯，看看是                            

1334
05:09:53,440 --> 05:09:56,958
有任何可用的新版本，如果有那么它会给我这个                            

1335
05:09:56,958 --> 05:10:00,878
颤振升级消息在这里所以                            

1336
05:10:00,878 --> 05:10:04,320
嗯，正如我在课程介绍中提到的                            

1337
05:10:04,320 --> 05:10:09,120
我已经计划了很多这门课程，但我没有，我无法计划 100 所以事情                            

1338
05:10:09,120 --> 05:10:12,480
会发生我没有计划的，然后我们只需要滚动                            

1339
05:10:12,480 --> 05:10:16,160
拳打，我真的很高兴这件事发生在这里，所以你可以看到                            

1340
05:10:16,160 --> 05:10:21,040
如何升级颤振以及你可以看到它很容易复制                            

1341
05:10:21,040 --> 05:10:23,840
只是说颤振升级好吧，所以我要去底部                            

1342
05:10:23,840 --> 05:10:29,360
终端我只想说颤振升级                            

1343
05:10:29,360 --> 05:10:34,000
对，所以这实际上需要一些时间，具体取决于                            

1344
05:10:34,000 --> 05:10:38,718
升级是因为flutter分为                            

1345
05:10:38,718 --> 05:10:43,680
你知道的不同类型的引擎颤振可以输出嗯                            

1346
05:10:43,680 --> 05:10:49,840
ios的二进制文件或应用程序它可以为android输出它可以为它做                            

1347
05:10:49,840 --> 05:10:53,040
mac os 可以为 um 做                            

1348
05:10:53,040 --> 05:10:56,080
windows和基本上桌面搜索和mac                            

1349
05:10:56,080 --> 05:11:00,480
windows linux 然后你也会有网络所以有                            

1350
05:11:00,480 --> 05:11:04,080
正如你在这里看到的，很多事情都涉及到颤振，就像                            

1351
05:11:04,080 --> 05:11:07,520
下载所有必要的东西，以便您能够创建                            

1352
05:11:07,520 --> 05:11:12,718
android应用程序所以完成后你会看到它                            

1353
05:11:12,718 --> 05:11:17,360
ios工具，所以它正在下载，但我也相信它完成后                            

1354
05:11:17,360 --> 05:11:21,280
下载东西它还需要确保它可以                            

1355
05:11:21,280 --> 05:11:26,638
构建这些工具集，因此这是一个可能需要一些时间的过程                            

1356
05:11:26,638 --> 05:11:30,240
时间，为了避免我们不得不等待                            

1357
05:11:30,240 --> 05:11:34,560
对于整个过程，您可以看到它现在将转到 web sdk                            

1358
05:11:34,560 --> 05:11:38,878
等等等等，所以我们不必等待                            

1359
05:11:38,878 --> 05:11:44,080
所以我只是要创建一个新的哦它实际上已经完成了                            

1360
05:11:44,080 --> 05:11:48,160
很快，所以它完成了工作，我们不需要做任何事情                            

1361
05:11:48,160 --> 05:11:52,798
在这里特别，嗯，这就是你升级颤振的方式                            

1362
05:11:52,798 --> 05:11:56,798
只需按照颤振工具本身的平面升级建议运行此命令                            

1363
05:11:56,798 --> 05:12:01,600
然后你就可以了                            

1364
05:12:01,600 --> 05:12:06,160
我们现在已经完成了这一步，所以我们已经建立了我们的项目，我要搬到我的                            

1365
05:12:06,160 --> 05:12:09,360
笔记在这里，我会确保那个话题                            

1366
05:12:09,360 --> 05:12:13,520
打勾，下一个项目我们要做什么                            

1367
05:12:13,520 --> 05:12:18,878
这里是我们要谈论的，嗯，我们基本上要快速浏览一下                            

1368
05:12:18,878 --> 05:12:23,360
围绕flutter搭建的环境时                            

1369
05:12:23,360 --> 05:12:27,680
您运行照片创建，因为创建流程不仅仅是创建一个空的                            

1370
05:12:27,680 --> 05:12:32,878
导演它实际上创建了你的骨架或脚手架                            

1371
05:12:32,878 --> 05:12:36,320
牙线项目，但几乎所有必要的东西让你能够                            

1372
05:12:36,320 --> 05:12:41,680
运行那个项目没问题所以在这个应用程序中我的意思是                            

1373
05:12:41,680 --> 05:12:46,240
在第 8 章的这一步中，我们实际上并不会在其上运行应用程序                            

1374
05:12:46,240 --> 05:12:50,320
任何适用于第 9 章和第 10 章的设备。                            

1375
05:12:50,320 --> 05:12:54,638
但我们要做的是快速浏览一下                            

1376
05:12:54,638 --> 05:13:00,400
项目结构，所以让我在这里做笔记，我要做的是                            

1377
05:13:00,400 --> 05:13:04,400
我将使用此代码 Visual Studio 代码                            

1378
05:13:04,400 --> 05:13:08,400
路径中提供的扩展名，所以我只能说打开的代码点                            

1379
05:13:08,400 --> 05:13:11,520
在当前文件夹中启动 Visual Studio 代码                            

1380
05:13:11,520 --> 05:13:15,200
所以一旦完成，我将                            

1381
05:13:15,200 --> 05:13:18,400
在这里带来一个视觉工作室代码，我只是要稍微注意一下                            

1382
05:13:18,400 --> 05:13:22,878
确保您可以看到屏幕的重要部分                            

1383
05:13:22,878 --> 05:13:27,760
好的，我将显着增加尺寸，以便对                            

1384
05:13:27,760 --> 05:13:32,160
你也在我的屏幕上很大，但我认为它就像                            

1385
05:13:32,160 --> 05:13:36,320
实际输出视频上的一个不错的尺寸                            

1386
05:13:36,320 --> 05:13:42,080
好吧，你可以看到这里是由flutter create创建的文件夹                            

1387
05:13:42,080 --> 05:13:45,520
这里有很多零碎的东西                            

1388
05:13:45,520 --> 05:13:49,120
我只想告诉你                            

1389
05:13:49,120 --> 05:13:54,878
关于这些文件夹中的一些以及它们所代表的内容                            

1390
05:13:54,878 --> 05:13:58,958
关于颤振，您需要了解的一件事是它实际上不是                            

1391
05:13:58,958 --> 05:14:03,920
就像嗯，它不是真的像反应原生                            

1392
05:14:03,920 --> 05:14:09,200
呃，如果你熟悉 ios 上的颤振，例如对于那些                            

1393
05:14:09,200 --> 05:14:15,520
已经完成了 ios 开发 uh flutter 它会在您的设备上输出本机二进制文件                            

1394
05:14:15,520 --> 05:14:18,400
打电话给本地人                            

1395
05:14:18,400 --> 05:14:23,520
fat binary 基本上适用于您的 uh ios 应用程序，它只放一个                            

1396
05:14:23,520 --> 05:14:28,080
在屏幕上查看，然后以图形方式呈现其所有内容                            

1397
05:14:28,080 --> 05:14:32,718
使用金属没问题，所以如果你不是 ios 开发人员，可能不会这样做                            

1398
05:14:32,718 --> 05:14:36,958
对你来说很有意义，但我现在要提到的这部分                            

1399
05:14:36,958 --> 05:14:42,080
应该对每个人都有意义，但是当您创建颤振应用程序时                            

1400
05:14:42,080 --> 05:14:47,600
并且颤振创建命令基本上会吐出可能的不同部分                            

1401
05:14:47,600 --> 05:14:51,120
您的应用程序在不同平台上运行所必需的                            

1402
05:14:51,120 --> 05:14:55,920
Flutter 运行的关键平台之一是 ioso                            

1403
05:14:55,920 --> 05:15:01,920
那是包含所需的本机位和片段的文件夹                            

1404
05:15:01,920 --> 05:15:07,280
能够在 ios 模拟器或 ios 设备上运行的照片                            

1405
05:15:07,280 --> 05:15:11,680
例如 iphone 或 ipad 好的，所以这就像你可以看到的                            

1406
05:15:11,680 --> 05:15:16,160
项目或工作区，对不起和工作区，因为对于你们这些人                            

1407
05:15:16,160 --> 05:15:18,560
谁是 ios 开发者你会知道的                            

1408
05:15:18,560 --> 05:15:22,080
有一种叫做 cocoapods 的东西，flutter 在内部实际上使用                            

1409
05:15:22,080 --> 05:15:28,000
ios 的 cocoapods 如果你不是 ios 开发者，你就知道                            

1410
05:15:28,000 --> 05:15:32,718
每个 ios 或 android 或 Web 应用程序                            

1411
05:15:32,718 --> 05:15:39,200
可以自带依赖项，并且依赖项是您的应用程序的一种方式                            

1412
05:15:39,200 --> 05:15:44,400
从其他人那里引入代码，以便能够实现特殊的                            

1413
05:15:44,400 --> 05:15:49,920
功能，因此有各种工具可用于                            

1414
05:15:49,920 --> 05:15:55,440
ios 开发者 android 开发者 web 开发者能够引入                            

1415
05:15:55,440 --> 05:15:58,638
例如，如果您正在编写一个节点应用程序，则 web 的依赖项                            

1416
05:15:58,638 --> 05:16:03,600
如果您使用 swift，将只使用 npm 这是一个节点包管理器                            

1417
05:16:03,600 --> 05:16:07,920
你可能会带来例如 spm 我认为嗯 swift 包                            

1418
05:16:07,920 --> 05:16:13,760
经理或 cocoapods 还有第三个                            

1419
05:16:13,760 --> 05:16:17,280
嗯，我有点忘记了你的名字                            

1420
05:16:17,280 --> 05:16:21,680
如果您使用的是android，我稍后可能会记得，您可能很熟悉                            

1421
05:16:21,680 --> 05:16:24,480
使用 gradle，你可以喜欢使用                            

1422
05:16:24,480 --> 05:16:28,878
引入外部依赖，所以                            

1423
05:16:28,878 --> 05:16:30,718
因此，如果                            

1424
05:16:30,718 --> 05:16:34,480
这是一个android平台，这是一个ios平台，这里是web和                            

1425
05:16:34,480 --> 05:16:38,878
例如，这里是嗯桌面                            

1426
05:16:38,878 --> 05:16:44,400
颤振位于这些之上，因此它可以控制所有                            

1427
05:16:44,400 --> 05:16:48,000
能够打包这些平台的所有小部件                            

1428
05:16:48,000 --> 05:16:52,718
打包在一个颤振应用程序中，该应用程序位于此处的顶部                            

1429
05:16:52,718 --> 05:16:55,600
所有这些不同的平台都在这里                            

1430
05:16:55,600 --> 05:17:00,000
对不起，他们可以有自己的依赖管理，所以依赖                            

1431
05:17:00,000 --> 05:17:03,040
管理层有点坐在下面的一层                            

1432
05:17:03,040 --> 05:17:07,280
然后颤振与这些依赖管理器交谈并说好的，你需要                            

1433
05:17:07,280 --> 05:17:10,958
为我安装此依赖项以便能够工作                            

1434
05:17:10,958 --> 05:17:15,120
所以我提到这一切的原因是                            

1435
05:17:15,120 --> 05:17:19,520
这就是你可以在这里看到一个工作区和一个 xcode 项目的原因                            

1436
05:17:19,520 --> 05:17:23,280
那是因为颤振内部正在使用依赖管理器                            

1437
05:17:23,280 --> 05:17:26,638
称为 cocoapods 的系统反过来创建了一个                            

1438
05:17:26,638 --> 05:17:28,798
工作区                            

1439
05:17:28,798 --> 05:17:32,240
将主项目及其所有依赖项链接在一起                            

1440
05:17:32,240 --> 05:17:35,280
如果您不是 ios 开发人员，如果您对所有这些都不感兴趣，请知道                            

1441
05:17:35,280 --> 05:17:40,000
这个 ios 文件夹只是为了让您的应用程序运行可以                            

1442
05:17:40,000 --> 05:17:44,000
在 ios 设备上运行 um                            

1443
05:17:44,000 --> 05:17:47,760
所以这就是下一个重要的部分是                            

1444
05:17:47,760 --> 05:17:51,200
我们将在本课程中实际使用的测试文件夹                            

1445
05:17:51,200 --> 05:17:55,040
test 文件夹是您创建测试的地方                            

1446
05:17:55,040 --> 05:17:57,680
如果你以前不熟悉软件开发 如果你不                            

1447
05:17:57,680 --> 05:18:01,760
有软件工程测试的背景是                            

1448
05:18:01,760 --> 05:18:05,680
程序员为了能够做出某些断言的能力                            

1449
05:18:05,680 --> 05:18:10,320
他们的代码，并为了确保他们可以自动运行                            

1450
05:18:10,320 --> 05:18:15,120
对自己的代码进行一系列测试，以确保一切正常                            

1451
05:18:15,120 --> 05:18:20,718
就像程序员的意图那样，如果你是，如果你是                            

1452
05:18:20,718 --> 05:18:23,840
来自软件工程背景，知道我们会                            

1453
05:18:23,840 --> 05:18:26,798
把我们的集成测试，我们将把我们的                            

1454
05:18:26,798 --> 05:18:32,160
此测试文件夹中的小部件测试和单元测试可以，所以我希望涵盖                            

1455
05:18:32,160 --> 05:18:36,240
每个人都可能在看这个课程                            

1456
05:18:36,240 --> 05:18:40,480
那么您还有一个名为 android 的文件夹，这正如您所期望的那样                            

1457
05:18:40,480 --> 05:18:46,240
它正在放置您所需的所有必要文件和文件夹                            

1458
05:18:46,240 --> 05:18:52,480
android 项目来托管你的颤振应用程序，所以                            

1459
05:18:52,480 --> 05:18:58,000
只知道flutter 那种是一系列的工具就像一个手机                            

1460
05:18:58,000 --> 05:19:03,600
就像一个漂亮的 sdk 被注入到这些本地                            

1461
05:19:03,600 --> 05:19:08,878
应用程序和本机也呈现其内容，所以                            

1462
05:19:08,878 --> 05:19:11,840
嗯，就像我们有一个主机 ios                            

1463
05:19:11,840 --> 05:19:16,718
应用程序在这里，您还将有一个包含所有                            

1464
05:19:16,718 --> 05:19:21,600
应用程序本地运行所需的点点滴滴                            

1465
05:19:21,600 --> 05:19:24,160
在安卓上                            

1466
05:19:24,160 --> 05:19:27,840
手机和安卓平板电脑上                            

1467
05:19:27,840 --> 05:19:30,878
如果您是一名 android 开发人员，您可能已经这样做了                            

1468
05:19:30,878 --> 05:19:34,080
熟悉这一点，就像您拥有自己的应用程序并在其中构建出色的 gradle                            

1469
05:19:34,080 --> 05:19:38,638
app 文件夹，所以这里没有什么花哨的东西，它是一个简单的 android                            

1470
05:19:38,638 --> 05:19:42,718
如果您安装了android studio，您实际上可以使用的应用程序                            

1471
05:19:42,718 --> 05:19:45,840
如果您愿意，可以在您的计算机上打开该文件夹并实际拥有一个                            

1472
05:19:45,840 --> 05:19:50,160
环顾四周，甚至将该应用程序作为本机和 Android 应用程序运行                            

1473
05:19:50,160 --> 05:19:53,040
在你的手机上                            

1474
05:19:53,040 --> 05:19:56,560
所以这是我们的 android 文件夹和你                            

1475
05:19:56,560 --> 05:20:00,240
猜猜我们有一个 web 文件夹，因为                            

1476
05:20:00,240 --> 05:20:04,560
我想我之前提到过这个但是颤振支持呃部署闪存                            

1477
05:20:04,560 --> 05:20:07,520
Web 应用程序，因此您可以实际创建 Web 应用程序                            

1478
05:20:07,520 --> 05:20:10,638
有了颤振，这不是我们要在本课程中讨论的内容                            

1479
05:20:10,638 --> 05:20:14,160
特别是如果你对使用 Flutter 编写 Web 应用程序感兴趣                            

1480
05:20:14,160 --> 05:20:18,560
你也可以用谷歌搜索一下，如果你是                            

1481
05:20:18,560 --> 05:20:24,638
对 Web 应用程序感兴趣，因为尽管 Flutter 中的 Web 应用程序是                            

1482
05:20:24,638 --> 05:20:29,840
相对较新，但福斯特实际上已经走了很远，所以人们                            

1483
05:20:29,840 --> 05:20:34,878
已经在用颤振创建各种网站                            

1484
05:20:34,878 --> 05:20:39,760
抱歉，好吧，嗯，我们这里有一个小文件                            

1485
05:20:39,760 --> 05:20:44,000
称为分析选项，嗯，你可以看到它说这个文件                            

1486
05:20:44,000 --> 05:20:47,600
配置分析仪所以嗯                            

1487
05:20:47,600 --> 05:20:51,840
如果您不是来自软件工程背景，那么您可能不会                            

1488
05:20:51,840 --> 05:20:55,840
知道分析的实际含义，但将分析视为                            

1489
05:20:55,840 --> 05:21:01,120
一种让颤振能够查看您编写的代码的方法                            

1490
05:21:01,120 --> 05:21:03,680
并纠正你                            

1491
05:21:03,680 --> 05:21:07,440
它认为合适的地方，所以它认为，哦，你已经                            

1492
05:21:07,440 --> 05:21:12,160
在写一些可以用比它更好的方式写的东西时犯了一个错误                            

1493
05:21:12,160 --> 05:21:16,638
查阅这个分析选项 yaml 文件，然后它说好的，规则是什么                            

1494
05:21:16,638 --> 05:21:20,160
我必须坚持的，你想让我对某些事情非常严格吗？                            

1495
05:21:20,160 --> 05:21:23,760
规则还是你想让我对其他规则不那么严格还是你想要                            

1496
05:21:23,760 --> 05:21:28,240
我完全忽略了你正在犯的某些错误                            

1497
05:21:28,240 --> 05:21:32,080
分析选项 yaml 文件的发音                            

1498
05:21:32,080 --> 05:21:37,440
它允许您基本上定义使                            

1499
05:21:37,440 --> 05:21:40,240
在本课程中对您的项目有意义，我们不打算谈论                            

1500
05:21:40,240 --> 05:21:43,200
老实说，关于这么多分析选项，但只知道它是                            

1501
05:21:43,200 --> 05:21:48,638
所以让我提起呃                            

1502
05:21:48,638 --> 05:21:53,920
又是这里的项目结构 嗯，接下来我们需要做的事情                            

1503
05:21:53,920 --> 05:22:00,320
看看这个文件 pop spec dot yaml 哪个非常重要                            

1504
05:22:00,320 --> 05:22:05,760
现在，嗯，这是一个文件，我的意思是你需要的东西之一                            

1505
05:22:05,760 --> 05:22:09,520
了解颤振及其为您创建的基本结构是                            

1506
05:22:09,520 --> 05:22:14,798
有大量的文件和文件是如此的好                            

1507
05:22:14,798 --> 05:22:19,120
在我个人看来，在我个人来自的颤振世界中完成                            

1508
05:22:19,120 --> 05:22:22,958
后端开发者开发背景，比如我在做 django 或                            

1509
05:22:22,958 --> 05:22:26,878
我在哪里做 ios 开发有时文档可以例如                            

1510
05:22:26,878 --> 05:22:30,638
在ios原生世界上是很欠缺的                            

1511
05:22:30,638 --> 05:22:33,760
所以颤振已经远远高于                            

1512
05:22:33,760 --> 05:22:37,360
从开发人员的角度来看，在以下方面需要什么                            

1513
05:22:37,360 --> 05:22:41,040
文档，他们提供了很多文档                            

1514
05:22:41,040 --> 05:22:44,400
如果您不是来自软件开发背景的文档                            

1515
05:22:44,400 --> 05:22:47,600
很像开发者提供的信息                            

1516
05:22:47,600 --> 05:22:52,400
谁为您创建了该工具以帮助您更好地使用该工具                            

1517
05:22:52,400 --> 05:22:56,240
你可以看到这里有一个为你创建的文件 pop special 你可以看到                            

1518
05:22:56,240 --> 05:23:00,080
这里有很多以这个为前缀的灰线                            

1519
05:23:00,080 --> 05:23:03,040
标签如果你删除它们，你会看到它们                            

1520
05:23:03,040 --> 05:23:06,400
变成正常的句子，但如果你把它们放回去，它们就会变成一种叫做 a                            

1521
05:23:06,400 --> 05:23:09,600
文档和文档（如果您不是来自软件工程）                            

1522
05:23:09,600 --> 05:23:14,320
背景 它意味着只是作为信息块提供给您的一段文本                            

1523
05:23:14,320 --> 05:23:18,638
这不再是代码，所以程序不会                            

1524
05:23:18,638 --> 05:23:22,798
把它变成任何类型的代码，它只会忽略这个                            

1525
05:23:22,798 --> 05:23:27,440
只是为了让你学习好，所以让我们回到这个流行的斑点弹药                            

1526
05:23:27,440 --> 05:23:31,920
并谈论它实际上是什么流行规范 yaml 是如此重要的一部分                            

1527
05:23:31,920 --> 05:23:34,958
颤抖，我认为你实际上需要                            

1528
05:23:34,958 --> 05:23:41,200
忽略我的意思是不要忽略评论去花点时间阅读                            

1529
05:23:41,200 --> 05:23:44,480
评论只是为了理解它们的意思                            

1530
05:23:44,480 --> 05:23:48,240
所以嗯，我要在这里谈论的是                            

1531
05:23:48,240 --> 05:23:52,240
稍微了解一下这个流行的尖峰 yaml 实际上是什么，如果你是为了                            

1532
05:23:52,240 --> 05:23:56,878
来自网络背景的实例，如果您曾经使用过                            

1533
05:23:56,878 --> 05:24:00,240
node.js 然后我们将有某种配置                            

1534
05:24:00,240 --> 05:24:05,200
json 文件，或者如果您来自 django，您将拥有 settings.pi 文件，如果                            

1535
05:24:05,200 --> 05:24:10,400
你来自原生 ios 世界什么相当于配置                            

1536
05:24:10,400 --> 05:24:14,798
它有点像你的信息加文件                            

1537
05:24:14,798 --> 05:24:19,920
所以我的意思是这是你的，有点像                            

1538
05:24:19,920 --> 05:24:24,400
您的项目实际应该是什么的控制面板                            

1539
05:24:24,400 --> 05:24:31,520
看起来像它的图标版本号它的名称所有依赖项所以                            

1540
05:24:31,520 --> 05:24:36,798
这些东西都会放在这个文件里面                            

1541
05:24:36,798 --> 05:24:40,240
如果您已经在运行您的应用程序，那么当您更改此文件时                            

1542
05:24:40,240 --> 05:24:45,040
flutter 会自动理解对此文件的更改，并且                            

1543
05:24:45,040 --> 05:24:49,280
然后重新配置自己，如果它可以在运行中                            

1544
05:24:49,280 --> 05:24:53,520
如果不能使用新配置，则可能必须重新启动                            

1545
05:24:53,520 --> 05:24:57,360
应用程序，例如，如果您进行重大更改，例如，如果您引入                            

1546
05:24:57,360 --> 05:25:02,718
对您的项目的全新依赖                            

1547
05:25:02,718 --> 05:25:07,120
那么项目不能像立即重新运行它实际上需要                            

1548
05:25:07,120 --> 05:25:10,958
重新编译并链接到该依赖项，就像人类一样                            

1549
05:25:10,958 --> 05:25:16,000
它不可能或在计算机上不可能这样做                            

1550
05:25:16,000 --> 05:25:19,200
嗯，让我们看看周围                            

1551
05:25:19,200 --> 05:25:24,320
这个pop specky ammo文件，你可以看到这里有一个名为name的标签，它是                            

1552
05:25:24,320 --> 05:25:27,600
这是我的笔记 如果你记得的话                            

1553
05:25:27,600 --> 05:25:31,280
如果我带回终端，则从终端                            

1554
05:25:31,280 --> 05:25:35,760
稍微调出文本，嗯，这就是我们创建的正确的，这是                            

1555
05:25:35,760 --> 05:25:38,400
项目 这就是我们创建项目的方式                            

1556
05:25:38,400 --> 05:25:43,280
我们说颤振创建了一个 seda 像素的组织，然后我的笔记全部                            

1557
05:25:43,280 --> 05:25:47,680
对，这就是我的笔记是为了这个                            

1558
05:25:47,680 --> 05:25:51,520
你的项目名称我的笔记没问题，这有点只是一点点                            

1559
05:25:51,520 --> 05:25:55,120
描述此应用程序现在的全部内容                            

1560
05:25:55,120 --> 05:25:58,638
你可能会好奇到底是什么词                            

1561
05:25:58,638 --> 05:26:02,718
s e se.pixelity 或您创建的任何内容                            

1562
05:26:02,718 --> 05:26:07,040
项目组织现在你可以看到我搜索它我说                            

1563
05:26:07,040 --> 05:26:12,798
在 mac 中的 Visual Studio 代码中的命令 f 或在 linux 中的控制 f 和                            

1564
05:26:12,798 --> 05:26:15,520
windows和visual studio代码，我实际上不知道快捷方式是什么                            

1565
05:26:15,520 --> 05:26:19,920
因为那个罚款是在呃 android studio 我刚刚听到 studios                            

1566
05:26:19,920 --> 05:26:24,320
它的 uh 键映射有点奇怪，所以它可能不是命令 f on                            

1567
05:26:24,320 --> 05:26:28,878
用于 linux 和 windows 的 mac 或控制器，所以我现在在这里搜索 sepixology 和                            

1568
05:26:28,878 --> 05:26:34,000
你可以看到没有结果所以我强调的这个特别的事情                            

1569
05:26:34,000 --> 05:26:37,120
一开始很重要，你明智地选择                            

1570
05:26:37,120 --> 05:26:41,120
正如我提到的那样，实际上并不是颤振本身需要的东西                            

1571
05:26:41,120 --> 05:26:46,240
您将部署的不同平台需要的东西所以如果我现在                            

1572
05:26:46,240 --> 05:26:50,240
实际上是在整个搜索的 Visual Studio 代码中说命令 shift f                            

1573
05:26:50,240 --> 05:26:55,760
项目说 se.pixolity 你会看到它在不同的地方找到                            

1574
05:26:55,760 --> 05:27:01,280
例如，在这个 ios 项目中，您可以看到这里是在项目 pbx 中                            

1575
05:27:01,280 --> 05:27:04,558
在我们的构建中，方法和 android 也一样                            

1576
05:27:04,558 --> 05:27:09,600
gradle 所以你会看到应用程序 id 变成了我的节点的像素                            

1577
05:27:09,600 --> 05:27:14,320
对于 ios，如果你也看看这里，你会发现它是 s e 像素                            

1578
05:27:14,320 --> 05:27:18,638
我的笔记还可以                            

1579
05:27:18,638 --> 05:27:24,080
那只是旁注，嗯，所以你需要做的另一件事                            

1580
05:27:24,080 --> 05:27:29,440
了解流行规范 yaml 是这里的版本号，这是                            

1581
05:27:29,440 --> 05:27:32,638
如果你不是软件开发背景的话                            

1582
05:27:32,638 --> 05:27:37,840
在版本控制之前完成软件开发是一种告诉你的方式                            

1583
05:27:37,840 --> 05:27:42,240
您发布应用程序的各个地方，例如 ios 应用商店                            

1584
05:27:42,240 --> 05:27:46,080
或谷歌游戏商店什么                            

1585
05:27:46,080 --> 05:27:50,240
如果您的应用程序中有新内容                            

1586
05:27:50,240 --> 05:27:54,080
因此，例如，如果您和这就是软件实际上的样子                            

1587
05:27:54,080 --> 05:27:56,718
像软件一样标记有不同的属性                            

1588
05:27:56,718 --> 05:28:00,558
你正在部署什么你在这里开发的是一个混乱的应用程序                            

1589
05:28:00,558 --> 05:28:05,520
但从应用商店等商店的角度来看，它只是一个包                            

1590
05:28:05,520 --> 05:28:08,638
有一些属性的东西，比如它的名字                            

1591
05:28:08,638 --> 05:28:13,200
标识符及其版本 现在这个版本非常重要，因为它是                            

1592
05:28:13,200 --> 05:28:18,480
一个数字，通常是三位数，或者我知道谷歌游戏商店                            

1593
05:28:18,480 --> 05:28:22,400
实际上还支持用点分隔的四位数字                            

1594
05:28:22,400 --> 05:28:26,400
这些数字实际上意味着什么                            

1595
05:28:26,400 --> 05:28:30,000
特别是如果你从左边开始然后你                            

1596
05:28:30,000 --> 05:28:35,680
到中间再到右边左边的数字叫做a                            

1597
05:28:35,680 --> 05:28:38,798
主要数字中间的数字称为次要数字                            

1598
05:28:38,798 --> 05:28:44,480
数字和最右边的数字，然后最右边的数字通常被称为                            

1599
05:28:44,480 --> 05:28:48,718
正常软件开发中的内部版本号                            

1600
05:28:48,718 --> 05:28:53,360
过程有点像这样，你从一个想法开始，你说好的，我的                            

1601
05:28:53,360 --> 05:28:57,760
想法是创建一个笔记应用程序，这是第一个想法就是想法                            

1602
05:28:57,760 --> 05:29:03,600
第一然后你把一个作为主要数字然后你从零和零开始                            

1603
05:29:03,600 --> 05:29:07,280
好吧，这就是版本号有点像出生                            

1604
05:29:07,280 --> 05:29:11,680
所以你说一零零那是通常称为好的版本一                            

1605
05:29:11,680 --> 05:29:15,680
然后你发布那个应用程序你说好的我对那个版本很好                            

1606
05:29:15,680 --> 05:29:19,120
然后你在厨房做饭然后你说好吧                            

1607
05:29:19,120 --> 05:29:22,718
如果我能像我一样添加的话会很棒                            

1608
05:29:22,718 --> 05:29:26,240
用户能够删除他们的笔记的能力                            

1609
05:29:26,240 --> 05:29:30,798
这不是一个巨大的功能，它只是对我的一点点改进                            

1610
05:29:30,798 --> 05:29:35,360
已经在商店里了，然后你会去说好吧                            

1611
05:29:35,360 --> 05:29:40,160
主要想法或次要想法 嗯 这不是主要想法 主要想法                            

1612
05:29:40,160 --> 05:29:44,000
就像是对应用程序的完全重写，添加了大量的                            

1613
05:29:44,000 --> 05:29:48,558
具有修复大量错误等的功能，所以这不是一个主要的想法然后你去                            

1614
05:29:48,558 --> 05:29:53,040
到次要想法并且那个次要想法对应于这里的次要版本                            

1615
05:29:53,040 --> 05:29:57,520
所以你说好吧 前一个是零 这个差别有多大                            

1616
05:29:57,520 --> 05:30:01,440
嗯，这只是一个很小的未来，所以我们只说一个                            

1617
05:30:01,440 --> 05:30:06,080
这是一个巨大的想法                            

1618
05:30:06,080 --> 05:30:09,600
不够重要，不足以成为主要想法，但次要                            

1619
05:30:09,600 --> 05:30:14,558
但你可能会喜欢一个很大的小想法                            

1620
05:30:14,558 --> 05:30:20,638
从零到两到三，通常不那么受欢迎                            

1621
05:30:20,638 --> 05:30:24,878
会按时间顺序排列，如一二三四，但你也是                            

1622
05:30:24,878 --> 05:30:28,240
欢迎跳转版本嗯                            

1623
05:30:28,240 --> 05:30:32,240
在特殊情况下，假设你说好的，我修好了                            

1624
05:30:32,240 --> 05:30:35,840
我现在将它构建并发送到                            

1625
05:30:35,840 --> 05:30:39,440
苹果和谷歌只记得你以前的构建                            

1626
05:30:39,440 --> 05:30:42,958
现在是零构建                            

1627
05:30:42,958 --> 05:30:48,000
取决于您的项目的结构，您可能会决定可以                            

1628
05:30:48,000 --> 05:30:51,840
我做的每一个版本我都会增加这个版本号，所以                            

1629
05:30:51,840 --> 05:30:56,400
前一个是零 现在是一 然后是二 三                            

1630
05:30:56,400 --> 05:31:00,798
四个五个六个块，因此每次您构建并将其发送到您的                            

1631
05:31:00,798 --> 05:31:04,638
消费者，即使他们是一组测试人员或                            

1632
05:31:04,638 --> 05:31:08,000
作为您唯一消费者的人实际上可能只是                            

1633
05:31:08,000 --> 05:31:10,558
直接从应用商店下载您的应用程序的人                            

1634
05:31:10,558 --> 05:31:13,760
或谷歌游戏商店或他们可能正在互动的网络                            

1635
05:31:13,760 --> 05:31:17,680
和你的申请一样，那么每次我做的时候你都可以说好                            

1636
05:31:17,680 --> 05:31:21,360
一个新的账单并寄出那是我真正增加这个内部版本号的时候                            

1637
05:31:21,360 --> 05:31:24,080
或者根据您的项目设置，您可以                            

1638
05:31:24,080 --> 05:31:28,480
和你的队友达成协议，说好的，我们不增加                            

1639
05:31:28,480 --> 05:31:32,638
账单按时间顺序排列，但每次我们更改主要或次要时，我们                            

1640
05:31:32,638 --> 05:31:37,360
实际上将构建重置为零，然后我们按时间顺序上升                            

1641
05:31:37,360 --> 05:31:40,080
嗯，我不想说实话                            

1642
05:31:40,080 --> 05:31:43,040
你对版本的细节太详细了，但如果你是                            

1643
05:31:43,040 --> 05:31:45,760
对软件开发感兴趣，我想如果您正在观看本课程                            

1644
05:31:45,760 --> 05:31:48,638
那意味着你对软件开发感兴趣                            

1645
05:31:48,638 --> 05:31:52,240
你需要知道这一点，所以只要知道那个版本是你的方式                            

1646
05:31:52,240 --> 05:31:57,040
标记您的软件及其功能以及其中的新功能                            

1647
05:31:57,040 --> 05:32:02,240
数字没问题，所以只要记住专业                            

1648
05:32:02,240 --> 05:32:06,160
嗯，小的构建没问题，但你不必玩这个所以                            

1649
05:32:06,160 --> 05:32:09,600
老实说，我认为在整个课程中我们实际上不是                            

1650
05:32:09,600 --> 05:32:12,798
会玩的                            

1651
05:32:12,798 --> 05:32:16,400
呃流行特辑中的下一点信息是你的环境                            

1652
05:32:16,400 --> 05:32:21,040
可以看到那里现在说 sdk 当你看到 sdk 只是想到                            

1653
05:32:21,040 --> 05:32:25,520
软件开发包，这个sdk指的是flutter                            

1654
05:32:25,520 --> 05:32:30,080
sdk 所以这意味着如果你与一些人分享你的源代码                            

1655
05:32:30,080 --> 05:32:34,558
可能在地球另一端的其他开发人员                            

1656
05:32:34,558 --> 05:32:37,920
如果他们获得了您的源代码并且他们希望能够进行测试                            

1657
05:32:37,920 --> 05:32:42,480
这个应用程序在模拟器或真实设备上的模拟器上，那么它们是                            

1658
05:32:42,480 --> 05:32:47,120
需要有flutter sdk版本这个                            

1659
05:32:47,120 --> 05:32:51,920
或者少于这个，所以你实际上可以通过 i 获得你的颤振版本                            

1660
05:32:51,920 --> 05:32:55,680
相信如果你运行颤振破折号版本                            

1661
05:32:55,680 --> 05:33:01,680
它会告诉你我是 281 绘图仪，正如你在这里看到的那样                            

1662
05:33:01,680 --> 05:33:06,240
是的，运行此应用程序所需的 sdk 是两个                            

1663
05:33:06,240 --> 05:33:13,200
一五零大于或等于至少二一五零可以                            

1664
05:33:13,200 --> 05:33:18,400
所以这就是你的 sdk 颤振 sdk 你需要知道的另一部分                            

1665
05:33:18,400 --> 05:33:22,240
about 是 pops wiki ammo 中的这一部分，它被称为                            

1666
05:33:22,240 --> 05:33:26,160
依赖关系，这就是我们要讨论的内容                            

1667
05:33:26,160 --> 05:33:29,040
嗯现在                            

1668
05:33:29,040 --> 05:33:33,600
嗯和我之前提到的依赖项                            

1669
05:33:33,600 --> 05:33:38,558
作为一名软件开发人员，你可以通过多种方式引入其他人的代码                            

1670
05:33:38,558 --> 05:33:43,120
人们为了使您的应用程序应用功能而编写                            

1671
05:33:43,120 --> 05:33:47,120
例如，更好或以全新的方式发挥作用                            

1672
05:33:47,120 --> 05:33:50,638
嗯，你需要小心依赖，因为                            

1673
05:33:50,638 --> 05:33:55,440
取决于您将哪些依赖项或库带入项目中                            

1674
05:33:55,440 --> 05:33:58,558
实际上可以让你的生活变得更好或更糟                            

1675
05:33:58,558 --> 05:34:01,680
依赖是嗯                            

1676
05:34:01,680 --> 05:34:04,878
基本上，当您将其引入依赖项时，它们通常是编写的代码                            

1677
05:34:04,878 --> 05:34:11,040
由其他人或其他可能在图书馆工作的人，所以                            

1678
05:34:11,040 --> 05:34:14,558
如果您不是来自软件开发背景，那么您                            

1679
05:34:14,558 --> 05:34:18,240
需要知道这一点，我从现在开始警告你，这样                            

1680
05:34:18,240 --> 05:34:22,400
当您选择时，您至少从某人的依赖项中听说过                            

1681
05:34:22,400 --> 05:34:26,320
依赖关系只是要小心一点                            

1682
05:34:26,320 --> 05:34:31,600
他们可能是他们最初让你                            

1683
05:34:31,600 --> 05:34:34,480
受苦更好，但                            

1684
05:34:34,480 --> 05:34:38,400
因为依赖项是其他人编写的代码                            

1685
05:34:38,400 --> 05:34:43,280
和其他人的优先事项改变他们的生活可能会改变，所以他们                            

1686
05:34:43,280 --> 05:34:47,120
没有足够的时间继续处理这些依赖项                            

1687
05:34:47,120 --> 05:34:49,520
所以我个人遇到了这个问题                            

1688
05:34:49,520 --> 05:34:53,280
嗯，我们在项目中引入了一个依赖项，然后过了一会儿我们就                            

1689
05:34:53,280 --> 05:34:57,120
意识到哦，开发商不是呃                            

1690
05:34:57,120 --> 05:35:02,878
积极致力于此，甚至可能开发人员制作了那个库                            

1691
05:35:02,878 --> 05:35:07,120
deprecated 和 deprecated 是一个词，你会在什么时候知道的世界                            

1692
05:35:07,120 --> 05:35:10,958
您更多地从事软件开发和不推荐使用的方式，即                            

1693
05:35:10,958 --> 05:35:14,480
不再支持库 不再支持库                            

1694
05:35:14,480 --> 05:35:19,040
不再积极工作，开发人员正在鼓励你                            

1695
05:35:19,040 --> 05:35:21,680
远离他们                            

1696
05:35:21,680 --> 05:35:26,320
当您引入依赖项时，我希望您做的只是看看                            

1697
05:35:26,320 --> 05:35:31,920
谁在依赖背后并优先考虑您的采摘和樱桃                            

1698
05:35:31,920 --> 05:35:36,558
选择基于几个因素                            

1699
05:35:36,558 --> 05:35:41,200
if the divi if the if 依赖项是由单个写入的                            

1700
05:35:41,200 --> 05:35:44,320
人，嗯，要小心一点                            

1701
05:35:44,320 --> 05:35:49,040
仅仅因为单身人士的优先事项可能会改变，他们可能不会                            

1702
05:35:49,040 --> 05:35:53,520
能够喜欢不断地工作                            

1703
05:35:53,520 --> 05:35:56,558
即使它是一个开源项目，他们也可能无法持续                            

1704
05:35:56,558 --> 05:35:59,840
如果独立是由一个写的                            

1705
05:35:59,840 --> 05:36:02,878
组织，尤其是你有很多的组织                            

1706
05:36:02,878 --> 05:36:07,120
相信然后将其优先级高一点                            

1707
05:36:07,120 --> 05:36:09,760
嗯，至少这是我的看法                            

1708
05:36:09,760 --> 05:36:15,760
如果一个依赖是由一群独立的人编写的                            

1709
05:36:15,760 --> 05:36:21,360
在一个组织下，优先级也高于一个拥有                            

1710
05:36:21,360 --> 05:36:24,958
一个有私人图书馆的人                            

1711
05:36:24,958 --> 05:36:27,760
名字好，不一定总是意味着                            

1712
05:36:27,760 --> 05:36:31,520
一个组织创建的依赖实际上是更好的质量                            

1713
05:36:31,520 --> 05:36:35,680
这只是意味着它被弃用的可能性要小一些                            

1714
05:36:35,680 --> 05:36:37,760
比呃                            

1715
05:36:37,760 --> 05:36:40,798
如果同一个库是由                            

1716
05:36:40,798 --> 05:36:46,320
以他们的私人名义单身的人，所以这些实际上可能是诚实的                            

1717
05:36:46,320 --> 05:36:48,958
你现在听起来有点高水平                            

1718
05:36:48,958 --> 05:36:51,920
你可能会想好吧为什么我必须需要所有                            

1719
05:36:51,920 --> 05:36:58,558
这只是新人很容易扑得到                            

1720
05:36:58,558 --> 05:37:02,798
依赖依赖，因为它很容易引入依赖和                            

1721
05:37:02,798 --> 05:37:05,600
只需使用它，人们就会忘记它哦                            

1722
05:37:05,600 --> 05:37:09,040
这实际上是一个人坐在他们的                            

1723
05:37:09,040 --> 05:37:12,798
房间就像我坐在这里告诉你不要听那些                            

1724
05:37:12,798 --> 05:37:17,680
坐在他们的房间里，但我相信                            

1725
05:37:17,680 --> 05:37:23,040
试着引导你的想法多一点                            

1726
05:37:23,040 --> 05:37:28,638
从长远来看对您的项目有益的建设性依赖关系，但如果                            

1727
05:37:28,638 --> 05:37:31,200
您正在编写一个应用程序，我只想发布它而不关心                            

1728
05:37:31,200 --> 05:37:34,638
在你发布它之后它就不再存在了                            

1729
05:37:34,638 --> 05:37:39,120
也许可以只从一个                            

1730
05:37:39,120 --> 05:37:42,638
那种你根本不在乎但我什至会挑战的依赖                            

1731
05:37:42,638 --> 05:37:46,160
发布您可能不关心的应用程序的想法                            

1732
05:37:46,160 --> 05:37:49,920
第一次发布，但因为这通常不是一个好主意                            

1733
05:37:49,920 --> 05:37:55,040
好的，很多关于依赖关系的讨论，但我认为必须说                            

1734
05:37:55,040 --> 05:37:58,718
所以我们在谈论依赖 我只是要带上字幕所以                            

1735
05:37:58,718 --> 05:38:02,638
嗯现在在这里你也可以看到有一个                            

1736
05:38:02,638 --> 05:38:06,718
默认情况下，这里的依赖依赖是由颤振本身带入你的                            

1737
05:38:06,718 --> 05:38:11,680
称为 cupertino 图标和 cupertino 图标是一个依赖项                            

1738
05:38:11,680 --> 05:38:15,520
我相信flutter团队本身其实是落后的                            

1739
05:38:15,520 --> 05:38:19,120
所以你可能会想好吧，这些是什么                            

1740
05:38:19,120 --> 05:38:22,240
依赖关系，比如它们来自哪里，它们实际上来自正常                            

1741
05:38:22,240 --> 05:38:26,480
人和公司，所以我要提出一个                            

1742
05:38:26,480 --> 05:38:31,680
嗯网站在这里给你，它叫做pop.dev 我会带来它                            

1743
05:38:31,680 --> 05:38:38,160
起来，这样你就可以在这里看到它，嗯                            

1744
05:38:38,160 --> 05:38:42,240
您可以看到在弹出的这个网站中您可以搜索依赖项                            

1745
05:38:42,240 --> 05:38:45,440
所以我实际上要从这里复制这个 Cupertino 图标                            

1746
05:38:45,440 --> 05:38:50,878
我要把它粘贴到那里 um kupertino icon just enter and I'm                            

1747
05:38:50,878 --> 05:38:54,638
按下它，你会看到它是由颤振团队发布的                            

1748
05:38:54,638 --> 05:38:57,040
自己还好吧                            

1749
05:38:57,040 --> 05:39:01,200
pop.dev 是您将在其中搜索依赖项的网站，因此您只需                            

1750
05:39:01,200 --> 05:39:07,040
搜索一个包，然后它会在这里为您显示结果                            

1751
05:39:07,040 --> 05:39:11,280
嗯，这就是你搜索依赖项的方式好吧                            

1752
05:39:11,280 --> 05:39:13,760
嗯和                            

1753
05:39:13,760 --> 05:39:17,040
既然我们谈到了这个，让我们也谈谈一个叫做 dev 的东西                            

1754
05:39:17,040 --> 05:39:21,840
他们拥有的依赖关系是                            

1755
05:39:21,840 --> 05:39:24,638
将带入您的项目的依赖项                            

1756
05:39:24,638 --> 05:39:29,280
只有在开发中才有用                            

1757
05:39:29,280 --> 05:39:33,040
如果您熟悉软件工程，则正常的依赖关系将                            

1758
05:39:33,040 --> 05:39:36,480
链接到您的项目，然后您将与您的项目一起发货                            

1759
05:39:36,480 --> 05:39:41,600
应用程序而开发依赖项只有依赖项                            

1760
05:39:41,600 --> 05:39:45,280
你在开发的时候会用到                            

1761
05:39:45,280 --> 05:39:48,558
为了使您的软件更好，正如您在这里看到的那样                            

1762
05:39:48,558 --> 05:39:51,680
例如依赖项是颤振测试                            

1763
05:39:51,680 --> 05:39:56,320
或者在这种情况下颤动镜头以及对不起                            

1764
05:39:56,320 --> 05:40:00,000
好的，所以这里有很多很多的事情要讨论，你可以                            

1765
05:40:00,000 --> 05:40:03,040
将来看到这里 实际上我们会处理这个你可以带进来的                            

1766
05:40:03,040 --> 05:40:08,000
资产和图像并将它们带入您的项目中                            

1767
05:40:08,000 --> 05:40:11,680
所以这是对酒吧的快速浏览                            

1768
05:40:11,680 --> 05:40:16,240
规范yaml，我要让它在这里                            

1769
05:40:16,240 --> 05:40:20,240
我只是在我的笔记中打勾，弹出我们讨论过的 yaml                            

1770
05:40:20,240 --> 05:40:24,558
现在到了重要的部分                            

1771
05:40:24,558 --> 05:40:29,120
实际上，在我们的应用程序中，我们将需要一些依赖项                            

1772
05:40:29,120 --> 05:40:32,000
现在能够继续使用该应用程序                            

1773
05:40:32,000 --> 05:40:36,958
我们之前没有谈过太多关于 firebase 的事情，但只知道 firebase 是                            

1774
05:40:36,958 --> 05:40:43,680
一个工具，它允许你去无服务器，但也有一个                            

1775
05:40:43,680 --> 05:40:48,958
现在服务器无服务器只是一个有趣的时髦词，现在正在使用                            

1776
05:40:48,958 --> 05:40:53,040
描述由其他人编写的服务器，因此您不知道的服务器                            

1777
05:40:53,040 --> 05:40:56,160
如果您不是软件开发人员，则必须亲自编写                            

1778
05:40:56,160 --> 05:40:59,040
背景，例如您是产品所有者或设计师                            

1779
05:40:59,040 --> 05:41:03,680
服务器是您的数据在云中的位置                            

1780
05:41:03,680 --> 05:41:06,160
所以                            

1781
05:41:06,160 --> 05:41:09,760
作为一名开发人员，你现在正坐在电脑前编写一个                            

1782
05:41:09,760 --> 05:41:12,320
颤振应用程序和您的闪存应用程序将安装在                            

1783
05:41:12,320 --> 05:41:16,480
ios和android设备，即客户端，客户端是消费者                            

1784
05:41:16,480 --> 05:41:21,120
服务器发送的数据没问题，因此服务器是逻辑所在的位置                            

1785
05:41:21,120 --> 05:41:26,718
云中的计算机好吧，firebase 是云中的计算机，只是想                            

1786
05:41:26,718 --> 05:41:30,958
想想那是谷歌写的，所以你用简单的命令来控制它                            

1787
05:41:30,958 --> 05:41:35,840
在您的计算机上，但它控制您的数据，因此您的客户会颤抖                            

1788
05:41:35,840 --> 05:41:39,840
应用程序可以连接到它并获取数据并读取数据和                            

1789
05:41:39,840 --> 05:41:43,680
在客户端操作数据，以便                            

1790
05:41:43,680 --> 05:41:49,040
现在为了与firebase交谈，我们实际上需要一些嗯                            

1791
05:41:49,040 --> 05:41:55,200
依赖项和 firebase 嗯，我会在这里打开我的 safari 窗口                            

1792
05:41:55,200 --> 05:42:01,040
现在让我们看看我要搜索的firebase核心                            

1793
05:42:01,040 --> 05:42:04,480
点击它firebase core，你可以看到它是由出版商写的                            

1794
05:42:04,480 --> 05:42:07,840
firebase.google.com 并记住颤振是                            

1795
05:42:07,840 --> 05:42:12,480
实际上也是由谷歌创建的工具                            

1796
05:42:12,480 --> 05:42:17,120
我个人认为任何与 firebase 相关的东西都可以携带                            

1797
05:42:17,120 --> 05:42:21,120
进入你的颤振应用程序有一个依赖关系                            

1798
05:42:21,120 --> 05:42:25,600
所以我要去这里然后说                            

1799
05:42:25,600 --> 05:42:31,520
我们需要这个特定项目的四个依赖项，好吧                            

1800
05:42:31,520 --> 05:42:34,878
如果您在 Visual Studio Code 中，您可以带上                            

1801
05:42:34,878 --> 05:42:38,558
终端启动 呃我实际上忘记了带终端的命令我                            

1802
05:42:38,558 --> 05:42:43,440
认为在我的 Mac 上是控制反引号，但我相信你也可以随时带来                            

1803
05:42:43,440 --> 05:42:48,958
up 终端建议 去终端和新终端 好的，现在我可以看到那里                            

1804
05:42:48,958 --> 05:42:53,040
这里有两个终端窗口好吗现在我要摆脱资源管理器                            

1805
05:42:53,040 --> 05:42:58,240
左边，所以你可以看到这里的数据好一点                            

1806
05:42:58,240 --> 05:43:02,638
我们需要将四个依赖项引入到我们的项目中                            

1807
05:43:02,638 --> 05:43:07,360
我希望你能完全按照我的做法去做                            

1808
05:43:07,360 --> 05:43:10,480
以前我们必须做的事情，我的意思是以前的                            

1809
05:43:10,480 --> 05:43:13,680
如果您想引入依赖项，则必须使用颤振版本                            

1810
05:43:13,680 --> 05:43:17,760
去说你去你的流行规范然后                            

1811
05:43:17,760 --> 05:43:22,160
使用特殊版本手动添加依赖项，然后                            

1812
05:43:22,160 --> 05:43:27,200
你必须去那些依赖项顶级开发网站查看当前版本                            

1813
05:43:27,200 --> 05:43:29,680
除了最新版本的颤振之外                            

1814
05:43:29,680 --> 05:43:34,080
你不必那样做你所要做的就是说flutter pop add                            

1815
05:43:34,080 --> 05:43:37,280
我现在就去做                            

1816
05:43:37,280 --> 05:43:41,120
所以这就是你引入依赖的方式                            

1817
05:43:41,120 --> 05:43:46,240
我们需要的第一个依赖项是 firebase 核心，所以只需输入此命令                            

1818
05:43:46,240 --> 05:43:50,240
也许需要一些时间                            

1819
05:43:50,240 --> 05:43:53,360
好的，然后说相同的命令，但说                            

1820
05:43:53,360 --> 05:43:56,638
firebase off 我要看看我的笔记                            

1821
05:43:56,638 --> 05:44:00,480
基本上这里是为了确保我输入了正确的依赖项                            

1822
05:44:00,480 --> 05:44:03,600
我现在不打算过多地谈论这些依赖项是什么                            

1823
05:44:03,600 --> 05:44:06,958
实际上是因为这需要很多                            

1824
05:44:06,958 --> 05:44:10,958
时间也是如此，所以让我们把依赖项带进来，有四个                            

1825
05:44:10,958 --> 05:44:16,160
依赖项，所以我们必须引入的下一个依赖项是云                            

1826
05:44:16,160 --> 05:44:19,040
火库                            

1827
05:44:19,040 --> 05:44:21,440
和                            

1828
05:44:21,440 --> 05:44:27,920
让我们去下一个，我们说                            

1829
05:44:27,920 --> 05:44:35,760
cloud firestore 是第三个依赖项，然后我们说 firebase analytics                            

1830
05:44:35,760 --> 05:44:41,280
所以这是第四个依赖所以                            

1831
05:44:41,280 --> 05:44:45,360
如果你看这里，我们目前已经引入了四个依赖项                            

1832
05:44:45,360 --> 05:44:50,240
有一个火力核心，就像                            

1833
05:44:50,240 --> 05:44:55,200
内核是firebase的主要重要部分，这又是什么                            

1834
05:44:55,200 --> 05:44:59,760
我们将用作我们所有用户的所有节点的服务器                            

1835
05:44:59,760 --> 05:45:04,320
下一个是firebase auth                            

1836
05:45:04,320 --> 05:45:09,360
auth 是简短的形式，让我看看它去哪儿了，嗯，这里是火力基地                            

1837
05:45:09,360 --> 05:45:12,320
用于身份验证和                            

1838
05:45:12,320 --> 05:45:15,360
嗯，我还没有展示我们的应用程序的实际外观                            

1839
05:45:15,360 --> 05:45:19,600
喜欢，但 auth 用于身份验证是我们的用户将在哪里                            

1840
05:45:19,600 --> 05:45:23,920
能够注册 uh 登录我们的应用程序并注销                            

1841
05:45:23,920 --> 05:45:28,400
并获得电子邮件确认发送到他们的电子邮件，以便能够                            

1842
05:45:28,400 --> 05:45:31,760
验证帐户，因此 auth 用于身份验证，那就是                            

1843
05:45:31,760 --> 05:45:35,120
我们要用它来做什么，以确保那些                            

1844
05:45:35,120 --> 05:45:39,920
正在与我们的应用程序交互他们实际上已经登录了                            

1845
05:45:39,920 --> 05:45:46,400
下一部分是 cloud firestore，当我们使用这个依赖项时                            

1846
05:45:46,400 --> 05:45:51,760
实际上将登录的用户注释存储在 firebase 后端                            

1847
05:45:51,760 --> 05:45:54,160
好吧，老实说，这只是时髦的名字                            

1848
05:45:54,160 --> 05:46:01,440
你他们只是像我和你这样的开发人员决定的名字                            

1849
05:46:01,440 --> 05:46:05,840
下一部分是 Firebase 分析，用于                            

1850
05:46:05,840 --> 05:46:10,958
如果您在基本设置 Firebase 后端时使用 Firebase 分析                            

1851
05:46:10,958 --> 05:46:14,958
例如，您将获得一些免费的分析                            

1852
05:46:14,958 --> 05:46:18,000
屏幕用户是否去了他们按下了哪个按钮，你可以看看                            

1853
05:46:18,000 --> 05:46:22,160
在这些分析中，当您查看您的 Firebase 控制台时，我们将                            

1854
05:46:22,160 --> 05:46:27,200
稍后再说我的意思是我知道所有这些都是安静的                            

1855
05:46:27,200 --> 05:46:30,080
如果您不熟悉 Firebase，则可能是高水平                            

1856
05:46:30,080 --> 05:46:34,958
可能就像我们刚刚做了什么，没关系，你不必知道                            

1857
05:46:34,958 --> 05:46:39,840
所有这一切只知道我们是这四个依赖项是我们需要的东西                            

1858
05:46:39,840 --> 05:46:43,360
为了使我们的应用程序功能正常所以现在我们已经添加了这些                            

1859
05:46:43,360 --> 05:46:47,120
依赖项，你实际上可以回到你的 popspakiano 文件，并有一个                            

1860
05:46:47,120 --> 05:46:51,760
在这里查看我们添加的依赖项和                            

1861
05:46:51,760 --> 05:46:56,080
您可以看到所有这些都是自动为您添加的，并带有最新的                            

1862
05:46:56,080 --> 05:47:00,798
版本还可以，所以在以前的颤振版本中，我们必须这样做                            

1863
05:47:00,798 --> 05:47:04,558
手动，但现在你可以说flutter pop ad，它会添加                            

1864
05:47:04,558 --> 05:47:09,280
依赖项让你直接弹出特别好的                            

1865
05:47:09,280 --> 05:47:13,120
我们在这里讨论了很多事情                            

1866
05:47:13,120 --> 05:47:17,200
几乎花了 50 分钟来完成所有这些基础知识，但我相信                            

1867
05:47:17,200 --> 05:47:21,600
实际上基础知识应该比更高级的东西需要更多的时间来解释                            

1868
05:47:21,600 --> 05:47:25,440
因为越高级你得到的越少                            

1869
05:47:25,440 --> 05:47:30,160
你需要的解释，这就是为什么所有这些基本的事情基本上都需要时间                            

1870
05:47:30,160 --> 05:47:33,680
解释[音乐]                            

1871
05:47:33,680 --> 05:47:36,400
好吧，我只是要记下我的笔记                            

1872
05:47:36,400 --> 05:47:40,160
我们已经讨论过所有这些                            

1873
05:47:40,160 --> 05:47:44,638
主题，我认为这实际上是一个包装                            

1874
05:47:44,638 --> 05:47:48,958
第八章所以第八章我们谈到了                            

1875
05:47:48,958 --> 05:47:52,160
如何设置我们的项目 我们实际上已经设置了我们的项目 现在我们已经设置了我们的项目                            

1876
05:47:52,160 --> 05:47:57,680
依赖项查看了默认的颤振模板，我们也                            

1877
05:47:57,680 --> 05:48:02,558
谈到流行特别节目，所以这在章节编号中很棒                            

1878
05:48:02,558 --> 05:48:08,160
九 我们要谈谈我最喜欢的 ios 应用程序设置                            

1879
05:48:08,160 --> 05:48:14,558
章实际上我们要经历很多事情简介证书                            

1880
05:48:14,558 --> 05:48:19,920
我们将谈论很多很多我可以在这里看到的应用程序 ID                            

1881
05:48:19,920 --> 05:48:23,680
列出，所以我真的很兴奋第九章                            

1882
05:48:23,680 --> 05:48:27,120
所以去喝杯咖啡或茶                            

1883
05:48:27,120 --> 05:48:32,000
我会在下一章见到你你好，欢迎来到第九章                            

1884
05:48:32,000 --> 05:48:34,480
本章我们要讲的这门课程                            

1885
05:48:34,480 --> 05:48:41,520
关于我们的 ios 应用程序的设置，正如我所提到的，我认为它在 um                            

1886
05:48:41,520 --> 05:48:44,320
介绍呃绝对第一章                            

1887
05:48:44,320 --> 05:48:48,480
实际上这不是一章它只是对整个课程的介绍                            

1888
05:48:48,480 --> 05:48:52,798
嗯，我们谈了一些关于我们打算用这个做什么                            

1889
05:48:52,798 --> 05:48:56,878
我们在这里开发的应用程序和我们正在开发的两件事                            

1890
05:48:56,878 --> 05:49:01,040
要做的是在应用商店和游戏中实际发布应用程序                            

1891
05:49:01,040 --> 05:49:05,040
现在存储，如果您不打算实际这样做，您可以                            

1892
05:49:05,040 --> 05:49:08,480
可能跳过这一章                            

1893
05:49:08,480 --> 05:49:13,200
但我仍然相信，如果你打算成为一名颤振开发者                            

1894
05:49:13,200 --> 05:49:16,718
你需要知道这些东西是如何工作的，因为                            

1895
05:49:16,718 --> 05:49:20,400
作为一个慌张的开发者，取决于你是什么样的颤振开发者                            

1896
05:49:20,400 --> 05:49:24,080
实际上想和我成为嗯，假设你想                            

1897
05:49:24,080 --> 05:49:27,360
成为一名真正的 Flutter 开发人员，您可以在其中从事不同的工作                            

1898
05:49:27,360 --> 05:49:32,840
应用程序并亲自发布它们，或者您可以像团队一样工作                            

1899
05:49:32,840 --> 05:49:36,480
概念，呃，在你所在的团队的背景下                            

1900
05:49:36,480 --> 05:49:40,320
例如，与公司内部的其他开发人员合作，以便在                            

1901
05:49:40,320 --> 05:49:44,400
他们的应用程序并发布它们比在应用程序商店中如此                            

1902
05:49:44,400 --> 05:49:47,040
如果您属于您真正想要的任何类别                            

1903
05:49:47,040 --> 05:49:50,558
发布您的应用程序，然后我坚信您应该知道该怎么做                            

1904
05:49:50,558 --> 05:49:53,760
那你自己虽然你可能是其中的一部分                            

1905
05:49:53,760 --> 05:49:58,878
一个庞大组织的团队，其中发布过程是自己的类似过程                            

1906
05:49:58,878 --> 05:50:02,480
你基本上把你的源代码交给他们，然后他们基本上                            

1907
05:50:02,480 --> 05:50:06,240
构建它并修复它并发布它，但如果你想变得像一个                            

1908
05:50:06,240 --> 05:50:10,558
成熟的颤振开发人员或移动开发人员，你会                            

1909
05:50:10,558 --> 05:50:13,120
需要知道如何真正释放你的                            

1910
05:50:13,120 --> 05:50:16,400
好的应用程序，所以在本章中，我们将讨论                            

1911
05:50:16,400 --> 05:50:20,400
关于发布您的应用程序，或者实际上我们是                            

1912
05:50:20,400 --> 05:50:24,558
将谈论准备您的应用程序以发布                            

1913
05:50:24,558 --> 05:50:29,600
稍后应用商店，所以你需要知道的                            

1914
05:50:29,600 --> 05:50:33,600
是你如何设置你的颤振应用程序，这样你就可以真正                            

1915
05:50:33,600 --> 05:50:38,240
稍后构建并在 ios 应用程序中发布                            

1916
05:50:38,240 --> 05:50:44,958
存储好，如果我在这里提出下一个标题                            

1917
05:50:44,958 --> 05:50:48,718
你会看到，为了让你能够                            

1918
05:50:48,718 --> 05:50:54,400
构建您的应用程序，然后将其部署在您需要 ios 的应用商店中                            

1919
05:50:54,400 --> 05:50:59,600
开发者帐户，我之前谈到过这个，嗯                            

1920
05:50:59,600 --> 05:51:03,040
开发者帐户是什么以及                            

1921
05:51:03,040 --> 05:51:08,638
你必须申请它我想这是我们在第一章谈到的                            

1922
05:51:08,638 --> 05:51:11,520
但如果你跳过了那一章，你需要知道你必须                            

1923
05:51:11,520 --> 05:51:16,878
在 Apple 申请开发者帐户并获得该开发者帐户                            

1924
05:51:16,878 --> 05:51:21,520
那么您将能够访问一个名为                            

1925
05:51:21,520 --> 05:51:25,360
应用商店连接应用商店连接是您的门户                            

1926
05:51:25,360 --> 05:51:30,000
管理您的应用程序并上传到应用商店                            

1927
05:51:30,000 --> 05:51:33,440
下载一些调试信息等，我不会过多介绍                            

1928
05:51:33,440 --> 05:51:38,480
详细信息，它还有一个旁注，作为开发人员，您将获得访问权限                            

1929
05:51:38,480 --> 05:51:42,080
我认为开发人员门户或类似的东西我认为                            

1930
05:51:42,080 --> 05:51:45,280
它叫我相信所以我想我们就叫它                            

1931
05:51:45,280 --> 05:51:49,280
开发者门户或开发者开发者网站                            

1932
05:51:49,280 --> 05:51:53,040
这样您就可以访问它，并且可以管理诸如                            

1933
05:51:53,040 --> 05:51:58,080
证书和配置文件没问题，我们很快就会谈到                            

1934
05:51:58,080 --> 05:52:00,798
实际上，假设您有您的开发人员                            

1935
05:52:00,798 --> 05:52:03,920
帐户，如果您没有开发者帐户，那么请去                            

1936
05:52:03,920 --> 05:52:09,120
并在线搜索注册开发者帐户或观看第一章                            

1937
05:52:09,120 --> 05:52:12,718
我得看看我的笔记实际上是不是我们谈论的                            

1938
05:52:12,718 --> 05:52:17,200
在第一章实际上是的，我可以在这里看到第一章                            

1939
05:52:17,200 --> 05:52:21,040
标题为开发者帐户，在那一章中我们讨论了如何                            

1940
05:52:21,040 --> 05:52:25,760
再次深度注册ios开发者，请去观看                            

1941
05:52:25,760 --> 05:52:29,040
第一章，如果你还没有这样做，如果你打算实际发布                            

1942
05:52:29,040 --> 05:52:33,200
您在 ios 应用商店中的应用                            

1943
05:52:33,200 --> 05:52:36,878
很抱歉                            

1944
05:52:36,878 --> 05:52:40,160
所以现在你知道你需要开发者帐户并且它需要花费一点                            

1945
05:52:40,160 --> 05:52:45,040
一点钱，我想大约是 99，所以在瑞典大约是 990 瑞典克朗                            

1946
05:52:45,040 --> 05:52:49,120
类似的东西，或者差不多 1000 瑞典克朗                            

1947
05:52:49,120 --> 05:52:51,280
嗯，现在我们已经谈到了                            

1948
05:52:51,280 --> 05:52:55,120
开发者帐户让我们谈谈证书和配置文件，因为这                            

1949
05:52:55,120 --> 05:52:58,558
是许多移动开发人员在使用 ios 时绊倒的事情                            

1950
05:52:58,558 --> 05:53:01,680
开发 嗯，我的意思是我一直在做 ios                            

1951
05:53:01,680 --> 05:53:06,160
自 2000 年末 2007 年以来的发展                            

1952
05:53:06,160 --> 05:53:11,680
几乎没有 um ios sdk，所以它就像一个集合                            

1953
05:53:11,680 --> 05:53:16,638
工具和很少的库支持，因为最初是史蒂夫的 ios 应用程序                            

1954
05:53:16,638 --> 05:53:20,240
工作定义应该是 Web 应用程序，然后                            

1955
05:53:20,240 --> 05:53:23,600
苹果刚刚转变为不相信是的，我们实际上必须拥有                            

1956
05:53:23,600 --> 05:53:27,040
原生应用程序，所以他们发布了一些工具，xcode 在那里，所以你                            

1957
05:53:27,040 --> 05:53:30,878
可以用 ios opengl es 构建一些简单的应用程序，所以你                            

1958
05:53:30,878 --> 05:53:34,480
也可以制作一些游戏，但是                            

1959
05:53:34,480 --> 05:53:37,680
它是如何开始的，苹果想要确保                            

1960
05:53:37,680 --> 05:53:42,558
开发的应用程序只能通过应用商店分发，因此                            

1961
05:53:42,558 --> 05:53:47,120
他们说好吧，如果我给破坏者例如                            

1962
05:53:47,120 --> 05:53:50,480
开发者帐户，他不应该能够创建自己的应用商店，因为他们                            

1963
05:53:50,480 --> 05:53:53,520
这只是一个我不打算详细说明什么                            

1964
05:53:53,520 --> 05:53:58,000
他们为什么这样做有一个完整的话题，我们可以像讨论                            

1965
05:53:58,000 --> 05:54:01,280
几天我们可以谈论它是否是垄断我不                            

1966
05:54:01,280 --> 05:54:04,638
知道所以我不打算详细介绍，但你需要什么                            

1967
05:54:04,638 --> 05:54:09,360
知道有没有app store 嗯                            

1968
05:54:09,360 --> 05:54:12,958
基本上只是称为应用商店，但您可以调用 ios 应用商店 mac 应用程序或                            

1969
05:54:12,958 --> 05:54:16,878
无论你想要什么，苹果都可以控制它，所以它是                            

1970
05:54:16,878 --> 05:54:19,680
坐在那里喜欢控制的苹果                            

1971
05:54:19,680 --> 05:54:24,480
衡量在应用商店发布的应用质量良好                            

1972
05:54:24,480 --> 05:54:31,200
例如好吧，所以苹果自己有一个证书现在证书是                            

1973
05:54:31,200 --> 05:54:35,600
就像一张纸 呃想象一下他们的一张纸质证书                            

1974
05:54:35,600 --> 05:54:40,000
坚持下去，他们说好的，无论我们在应用商店发布什么                            

1975
05:54:40,000 --> 05:54:44,878
嗯，它来自我们，好吧，所以每个应用程序都在                            

1976
05:54:44,878 --> 05:54:48,638
ios应用商店实际上来自苹果，我不是这个意思                            

1977
05:54:48,638 --> 05:54:52,718
苹果已经编写了应用程序我的意思是苹果已经使用                            

1978
05:54:52,718 --> 05:54:55,680
他们证明那张纸没问题，所以                            

1979
05:54:55,680 --> 05:55:00,878
然后当应用程序下载到您的 iPhone 时，您的 iphone 实际上会检查                            

1980
05:55:00,878 --> 05:55:04,160
这是一个这是一个受信任的应用程序吗                            

1981
05:55:04,160 --> 05:55:09,120
它来自所以 ios 作为一个操作系统它可以                            

1982
05:55:09,120 --> 05:55:12,000
包含并且您可以安装许多不同类型的应用程序                            

1983
05:55:12,000 --> 05:55:14,320
来自许多不同类型的来源                            

1984
05:55:14,320 --> 05:55:17,440
例如 ios 应用商店，或者您实际上可以                            

1985
05:55:17,440 --> 05:55:21,840
下载直接来自特定开发人员的应用程序                            

1986
05:55:21,840 --> 05:55:25,440
现在所有这些应用程序都需要签名                            

1987
05:55:25,440 --> 05:55:28,798
他们需要使用仅用于识别的证书进行签名                            

1988
05:55:28,798 --> 05:55:33,520
它们来自哪里，因此证书是您作为开发人员的一张纸                            

1989
05:55:33,520 --> 05:55:37,840
持有，每一份申请，请原谅你的每一份申请                            

1990
05:55:37,840 --> 05:55:42,718
develop 将使用该证书进行签名，好吧，因此该证书是                            

1991
05:55:42,718 --> 05:55:47,680
您作为开发人员的身份，它变得有点                            

1992
05:55:47,680 --> 05:55:52,958
将您的应用程序带到目的地，所以如果您开发                            

1993
05:55:52,958 --> 05:55:56,000
我们在这门课程中做的这个笔记应用程序，你用你的签名                            

1994
05:55:56,000 --> 05:56:00,160
证书，那么您的应用程序将具有该证书签名                            

1995
05:56:00,160 --> 05:56:04,638
在里面所以当我把它寄给苹果然后苹果就像啊哈就是这样                            

1996
05:56:04,638 --> 05:56:09,440
创建此应用程序的开发人员还可以，然后当苹果时                            

1997
05:56:09,440 --> 05:56:13,920
说好的你的应用程序很好你不能将它发布到应用商店然后                            

1998
05:56:13,920 --> 05:56:18,638
苹果用他们自己的证书重新签署你的申请                            

1999
05:56:18,638 --> 05:56:22,638
那只是为了确保您的应用程序在签署后                            

2000
05:56:22,638 --> 05:56:28,080
苹果证书可以分发到ios应用商店并通过以下方式下载                            

2001
05:56:28,080 --> 05:56:34,480
全球数百万用户，所以先生只知道该证书                            

2002
05:56:34,480 --> 05:56:38,878
你作为开发者的身份可以吗[音乐]                            

2003
05:56:38,878 --> 05:56:42,320
现在我们讨论了证书让我们谈谈配置文件                            

2004
05:56:42,320 --> 05:56:46,798
因为这也是一些开发人员的绊脚石                            

2005
05:56:46,798 --> 05:56:50,400
嗯，特别是如果他们不是来自原生 ios 开发背景                            

2006
05:56:50,400 --> 05:56:52,958
我做什么                            

2007
05:56:52,958 --> 05:56:58,240
配置文件，您看到证书识别您                            

2008
05:56:58,240 --> 05:57:04,558
简而言之，配置文件可以识别您的应用，就像                            

2009
05:57:04,558 --> 05:57:08,798
非常简短的表达方式，因此您作为开发人员可能会                            

2010
05:57:08,798 --> 05:57:13,440
10 20 30 个您正在开发或已开发的应用程序                            

2011
05:57:13,440 --> 05:57:17,440
这些应用程序中的每一个都有自己的身份                            

2012
05:57:17,440 --> 05:57:21,600
最后的身份与您作为开发人员有关，所以您说这是我的                            

2013
05:57:21,600 --> 05:57:24,558
证书我是谁                            

2014
05:57:24,558 --> 05:57:28,558
但是当您创建一个应用程序时，该应用程序也需要                            

2015
05:57:28,558 --> 05:57:32,958
识别自己，就像在这里我是我是一个用这个签名的应用程序                            

2016
05:57:32,958 --> 05:57:38,400
使用此证书的配置文件，因此只需知道配置文件有点像                            

2017
05:57:38,400 --> 05:57:42,240
您的应用程序的身份和不同的风格                            

2018
05:57:42,240 --> 05:57:47,200
申请和证书是您的身份                            

2019
05:57:47,200 --> 05:57:49,920
作为开发该应用程序的人好吧                            

2020
05:57:49,920 --> 05:57:53,840
所以，如果你注意到我只是说不同                            

2021
05:57:53,840 --> 05:57:58,240
你的应用程序的风格，我的意思是，如果你不是                            

2022
05:57:58,240 --> 05:58:02,958
来自开发背景，例如，如果您来自                            

2023
05:58:02,958 --> 05:58:07,600
设计背景，你有一个你正在设计的 figma 文件或 visio 文件                            

2024
05:58:07,600 --> 05:58:11,360
你的 wi-frames 以及任何你来自产品所有者所有权的东西                            

2025
05:58:11,360 --> 05:58:14,638
背景比你可能喜欢的                            

2026
05:58:14,638 --> 05:58:18,400
使用 jira 或 excel 表或任何你放置的东西                            

2027
05:58:18,400 --> 05:58:23,520
您可能不熟悉应用程序的不同风格的要求                            

2028
05:58:23,520 --> 05:58:27,440
但是，如果您使用应用程序工作得有点接近                            

2029
05:58:27,440 --> 05:58:31,200
团队然后你就会知道每个应用程序都有不同的风格                            

2030
05:58:31,200 --> 05:58:34,240
这些味道通常是我的意思是它们是                            

2031
05:58:34,240 --> 05:58:38,160
通常有两种口味，一种是开发口味，另一种是开发口味                            

2032
05:58:38,160 --> 05:58:43,040
另一种是生产风味 开发风味是应用                            

2033
05:58:43,040 --> 05:58:47,040
你看看你是否与正在开发的软件工程师一起与开发人员坐在一起                            

2034
05:58:47,040 --> 05:58:50,798
他们每天都在编写您的应用程序                            

2035
05:58:50,798 --> 05:58:55,360
修复他们正在修复的错误添加新功能然后他们将提供                            

2036
05:58:55,360 --> 05:59:00,958
产品给你作为一个软件呃作为一个产品所有者或者一个设计师                            

2037
05:59:00,958 --> 05:59:04,160
你会在你的应用程序上下载那个味道，就像这样                            

2038
05:59:04,160 --> 05:59:07,360
现在看起来很好                            

2039
05:59:07,360 --> 05:59:11,040
突然之间，您按下一个按钮，该按钮使应用程序崩溃，因此                            

2040
05:59:11,040 --> 05:59:14,558
应用程序就消失了哦，它崩溃了                            

2041
05:59:14,558 --> 05:59:18,558
那时，如果开发人员正确地完成了他们的工作，那么他们                            

2042
05:59:18,558 --> 05:59:22,558
不得不在应用程序中加入一些崩溃分析                            

2043
05:59:22,558 --> 05:59:25,600
一旦应用程序崩溃或                            

2044
05:59:25,600 --> 05:59:29,600
应用程序的那种风格的应用程序发生了一些不好的事情                            

2045
05:59:29,600 --> 05:59:31,680
你安装在你的                            

2046
05:59:31,680 --> 05:59:37,360
iphone或android手机或平板电脑或其他任何东西，他们会得到                            

2047
05:59:37,360 --> 05:59:41,680
所谓的崩溃报告 崩溃报告顾名思义                            

2048
05:59:41,680 --> 05:59:46,240
这只是一份报告，其中崩溃信息完全可见，并且                            

2049
05:59:46,240 --> 05:59:50,080
他们甚至可能知道您在什么时间点击了哪个按钮，以及什么是                            

2050
05:59:50,080 --> 05:59:52,958
您的应用程序当时携带的信息                            

2051
05:59:52,958 --> 05:59:57,760
它崩溃了，所以它可以帮助他们调试和解决这个问题                            

2052
05:59:57,760 --> 06:00:01,840
现在，您在手机上安装的这些应用程序风格                            

2053
06:00:01,840 --> 06:00:06,240
每天都在工作 移动开发人员通常被称为调试                            

2054
06:00:06,240 --> 06:00:10,240
应用程序和调试应用程序这只是一种说法                            

2055
06:00:10,240 --> 06:00:15,040
创建它的开发人员创建了应用程序然后有机会                            

2056
06:00:15,040 --> 06:00:20,798
修复任何可能出现的错误，信息比通常情况下更多                            

2057
06:00:20,798 --> 06:00:24,878
他们是否以数百万的价格向商店发布了此应用程序                            

2058
06:00:24,878 --> 06:00:28,798
其他人下载所以这是一种风味它是一种调试风味或                            

2059
06:00:28,798 --> 06:00:32,718
是一种开发风格还可以，它只是意味着它是一种日常                            

2060
06:00:32,718 --> 06:00:36,878
就像一个定期更新的应用程序，只有                            

2061
06:00:36,878 --> 06:00:41,760
非常接近项目的人可以下载的很近的圈子，这很有味道                            

2062
06:00:41,760 --> 06:00:44,958
好的另一种应用程序                            

2063
06:00:44,958 --> 06:00:48,958
由开发人员发布可能是生产                            

2064
06:00:48,958 --> 06:00:51,840
风味和产品生产风味是                            

2065
06:00:51,840 --> 06:00:56,320
与调试风格相同，但有点像                            

2066
06:00:56,320 --> 06:01:00,558
有些东西可能会从中删除一些可能会记录的敏感信息                            

2067
06:01:00,558 --> 06:01:04,718
否则可能会从中删除它就像一个精简版                            

2068
06:01:04,718 --> 06:01:08,638
出于安全目的，不是类似功能或任何东西的精简版                            

2069
06:01:08,638 --> 06:01:12,080
只是他们把它弄得更紧了                            

2070
06:01:12,080 --> 06:01:16,718
它更安全一点，就像可以从中删除一些额外的东西                            

2071
06:01:16,718 --> 06:01:21,040
否则开发人员可能只需要额外的东西                            

2072
06:01:21,040 --> 06:01:24,480
当它被包装成这个美丽的小呃                            

2073
06:01:24,480 --> 06:01:30,480
是的，漂亮的小包装，基本上它也会是一种新的味道，叫做                            

2074
06:01:30,480 --> 06:01:34,718
生产味道所以现在你有两种味道一种就像                            

2075
06:01:34,718 --> 06:01:38,160
对于坐在产品旁边的近距离人员                            

2076
06:01:38,160 --> 06:01:42,160
在同一个产品室或现在每个人都在工作                            

2077
06:01:42,160 --> 06:01:46,000
远程也许人们坐在家里等，就像产品一样                            

2078
06:01:46,000 --> 06:01:50,558
团队紧密 开发人员 测试人员 产品负责人 设计师 uxers 每个人                            

2079
06:01:50,558 --> 06:01:55,040
他们通常获得开发构建的封闭圈                            

2080
06:01:55,040 --> 06:01:59,360
然后当你将你的申请发送给苹果时                            

2081
06:01:59,360 --> 06:02:02,878
例如或谷歌审查然后你会                            

2082
06:02:02,878 --> 06:02:06,798
让生产味道好，我谈论味道的原因是                            

2083
06:02:06,798 --> 06:02:11,680
至少ios上这些不同的味道基本上都是                            

2084
06:02:11,680 --> 06:02:16,718
分配有他们自己的特定配置文件，这样你就有一个                            

2085
06:02:16,718 --> 06:02:21,280
开发配置文件，您将拥有生产配置文件和这些教授                            

2086
06:02:21,280 --> 06:02:26,718
配置文件向您的应用程序指示它可以做什么和不能做什么                            

2087
06:02:26,718 --> 06:02:31,280
例如，ios 世界中开发配置文件的功能之一                            

2088
06:02:31,280 --> 06:02:35,840
是您的应用程序实际上可以安装在挂接电话的电话上                            

2089
06:02:35,840 --> 06:02:41,200
电缆甚至没有电缆并进行远程调试，因此                            

2090
06:02:41,200 --> 06:02:44,240
这是你可以用 ios 做的很酷的事情之一，因为你实际上可以                            

2091
06:02:44,240 --> 06:02:47,840
就像我是坐在这里的开发人员一样，我可以                            

2092
06:02:47,840 --> 06:02:52,480
拿到设计师的电话，说哦，是的，你想要这样的应用程序                            

2093
06:02:52,480 --> 06:02:56,240
你真的想看看我在做什么，是的，她或他会说                            

2094
06:02:56,240 --> 06:02:58,958
你会把他们的手机连接到你的                            

2095
06:02:58,958 --> 06:03:02,638
计算机并启用称为远程调试的功能                            

2096
06:03:02,638 --> 06:03:06,160
然后你会断开它然后把手机还给他们                            

2097
06:03:06,160 --> 06:03:09,600
每当他们希望应用程序像您一样在手机上实时运行时                            

2098
06:03:09,600 --> 06:03:14,558
开发它，您实际上可以使用您的 xcode 运行应用程序                            

2099
06:03:14,558 --> 06:03:18,718
住在呃iphone或ipad下所以                            

2100
06:03:18,718 --> 06:03:23,600
那是它自己的味道和轮廓是开发轮廓                            

2101
06:03:23,600 --> 06:03:29,040
指示您可以调试该应用程序，但如果您想要                            

2102
06:03:29,040 --> 06:03:33,440
使用生产配置文件签署您的应用程序并将其发送给苹果                            

2103
06:03:33,440 --> 06:03:37,600
该配置文件规定该应用程序不允许                            

2104
06:03:37,600 --> 06:03:40,320
调试，当你                            

2105
06:03:40,320 --> 06:03:45,360
创建您的应用程序并将其发送到苹果您需要确保两个                            

2106
06:03:45,360 --> 06:03:48,878
除了许多其他事情之外                            

2107
06:03:48,878 --> 06:03:52,320
证书和个人资料明智，您需要确保两件事                            

2108
06:03:52,320 --> 06:03:57,120
该应用程序使用您的生产证书和                            

2109
06:03:57,120 --> 06:04:02,878
应用程序还使用挂钩的生产配置文件进行签名                            

2110
06:04:02,878 --> 06:04:07,040
生产证书，所以首先证书应该在那里使用                            

2111
06:04:07,040 --> 06:04:11,760
证书您使用您签署应用程序的配置文件创建配置文件                            

2112
06:04:11,760 --> 06:04:16,878
然后你把这个应用程序发送到苹果苹果然后看起来哦一切都是                            

2113
06:04:16,878 --> 06:04:20,160
是为了配置文件使用是                            

2114
06:04:20,160 --> 06:04:25,680
生产资料和与资料相关联的证书也是正确的                            

2115
06:04:25,680 --> 06:04:30,240
将您标识为开发人员的生产证书                            

2116
06:04:30,240 --> 06:04:33,200
所以差不多 16 分钟                            

2117
06:04:33,200 --> 06:04:36,240
有关 ios 的配置文件和证书的信息，但我认为它们是                            

2118
06:04:36,240 --> 06:04:39,520
如此重要，我的意思是它是如此重要                            

2119
06:04:39,520 --> 06:04:43,280
明白你不应该真的跳过                            

2120
06:04:43,280 --> 06:04:46,878
这些概念就好像您想成为一名移动开发人员一样                            

2121
06:04:46,878 --> 06:04:49,680
如此重要                            

2122
06:04:49,680 --> 06:04:54,400
现在概念已经足够了，现在让我们来谈谈吧                            

2123
06:04:54,400 --> 06:04:57,440
关于嗯                            

2124
06:04:57,440 --> 06:05:01,040
开发者帐户，这里我实际上有一个链接，我要去                            

2125
06:05:01,040 --> 06:05:06,000
在单独的窗口中打开，然后我将把它带到                            

2126
06:05:06,000 --> 06:05:09,920
前景，所以你实际上可以看到                            

2127
06:05:09,920 --> 06:05:17,040
所以这是开发者帐户，您可以在苹果网站上看到，我要                            

2128
06:05:17,040 --> 06:05:21,680
把我的脸往右下角一点点，所以放大窗口                            

2129
06:05:21,680 --> 06:05:28,160
在这里，这实际上是在开发人员上                            

2130
06:05:28,160 --> 06:05:32,798
那么你就可以进入账户了，所以在你注册了一个账户之后                            

2131
06:05:32,798 --> 06:05:36,400
然后你就可以进入这里并用你的帐户登录，我就走了                            

2132
06:05:36,400 --> 06:05:43,520
使用我的 um 公司的 Apple ID 登录                            

2133
06:05:43,520 --> 06:05:48,958
我们走了，然后它说好的，我们给你发了一个验证码，我有                            

2134
06:05:48,958 --> 06:05:52,320
我的苹果手表在这里，所以我要                            

2135
06:05:52,320 --> 06:05:55,840
说我没有收到代码，然后把代码发短信给我好吗                            

2136
06:05:55,840 --> 06:05:59,120
所以不久我应该能够得到                            

2137
06:05:59,120 --> 06:06:03,760
这里有一个验证码，重要的是你不要显示                            

2138
06:06:03,760 --> 06:06:08,160
这个验证码给其他人只是你不应该这样做所以我                            

2139
06:06:08,160 --> 06:06:12,798
将屏幕从您可以看到的地方移除，我将输入代码                            

2140
06:06:12,798 --> 06:06:19,840
发给我的是六位数，嗯，基本上是数字，                            

2141
06:06:19,840 --> 06:06:23,870
带上手机我现在打开浏览器，我说相信这个浏览器好吧                            

2142
06:06:23,870 --> 06:06:26,480
[音乐] 所以                            

2143
06:06:26,480 --> 06:06:31,520
在这里你会看到嗯许可协议已经更新好了，所以我们                            

2144
06:06:31,520 --> 06:06:36,320
以后应该可以查看，所以我要增加                            

2145
06:06:36,320 --> 06:06:41,760
该屏幕目前占用的空间，因此您可以完整查看它                            

2146
06:06:41,760 --> 06:06:45,120
你可以看到，既然你已经登录了这个帐户，你应该是                            

2147
06:06:45,120 --> 06:06:49,280
能够看到诸如概览会员之类的东西                            

2148
06:06:49,280 --> 06:06:55,360
证书 ID 和配置文件还可以，然后我之前谈到的                            

2149
06:06:55,360 --> 06:07:00,080
这是你的应用商店连接好的所以嗯                            

2150
06:07:00,080 --> 06:07:04,480
这里发生的事情基本上是                            

2151
06:07:04,480 --> 06:07:08,160
会员证上的那个                            

2152
06:07:08,160 --> 06:07:11,920
ids 和 profiles 是您管理证书和所有                            

2153
06:07:11,920 --> 06:07:15,680
正如我之前提到的那样                            

2154
06:07:15,680 --> 06:07:18,718
嗯，你很重要                            

2155
06:07:18,718 --> 06:07:23,120
基本上为你的证书创建一个良好的基础创建开发                            

2156
06:07:23,120 --> 06:07:25,840
证明生产调查，然后你                            

2157
06:07:25,840 --> 06:07:29,120
之后创建您的个人资料，我们将在此实际讨论                            

2158
06:07:29,120 --> 06:07:33,920
嗯在这一章                            

2159
06:07:33,920 --> 06:07:37,920
所以这是我们缺少的部分                            

2160
06:07:37,920 --> 06:07:41,440
为了能够继续                            

2161
06:07:41,440 --> 06:07:46,480
所以我们需要我之前提到的证书配置文件和应用程序 ID 应用程序 ID                            

2162
06:07:46,480 --> 06:07:49,600
是我之前没有提到的东西，所以我认为这很重要                            

2163
06:07:49,600 --> 06:07:55,440
我提到什么是应用程序 ID 应用程序 ID 是                            

2164
06:07:55,440 --> 06:08:01,600
除了您创建应用程序 ID 的配置文件之外，还有一个标识符                            

2165
06:08:01,600 --> 06:08:07,120
苹果和你使用是为了知道你是哪个应用程序                            

2166
06:08:07,120 --> 06:08:11,120
和你自己说话，也                            

2167
06:08:11,120 --> 06:08:14,798
例如，如果您将来要启用                            

2168
06:08:14,798 --> 06:08:19,840
如果您不熟悉推送通知等功能                            

2169
06:08:19,840 --> 06:08:24,718
推送通知它们基本上是远程通知远程信息                            

2170
06:08:24,718 --> 06:08:28,400
您可以从互联网上某处的云端发送                            

2171
06:08:28,400 --> 06:08:33,360
到用户的手机，所以当他们拿到手机时，他们会看到哦，这是一条消息                            

2172
06:08:33,360 --> 06:08:36,958
从此应用程序中，您可以将其视为远程消息                            

2173
06:08:36,958 --> 06:08:41,520
就好像有人给你发了一条短信或一条信息一样                            

2174
06:08:41,520 --> 06:08:45,440
或者例如，如果您正在使用whatsapp或电报某人在其中写消息                            

2175
06:08:45,440 --> 06:08:47,920
聊天，然后您会在手机上收到通知                            

2176
06:08:47,920 --> 06:08:54,638
称为推送通知，因此应用程序 ID 主要用于                            

2177
06:08:54,638 --> 06:08:57,360
能够让您作为开发人员成为                            

2178
06:08:57,360 --> 06:09:01,760
能够指定应用程序的不同功能，例如它                            

2179
06:09:01,760 --> 06:09:04,320
可以接收推送通知，它可以                            

2180
06:09:04,320 --> 06:09:09,360
例如在手机等上存储安全信息等                            

2181
06:09:09,360 --> 06:09:12,160
所以当我之前提到你需要一个证书和个人资料时                            

2182
06:09:12,160 --> 06:09:16,878
要签署您的应用程序，您还需要一个应用程序 ID 来识别您的                            

2183
06:09:16,878 --> 06:09:20,638
应用程序及其功能还可以，所以我们将很快讨论                            

2184
06:09:20,638 --> 06:09:23,600
实际上                            

2185
06:09:23,600 --> 06:09:26,878
所以现在                            

2186
06:09:26,878 --> 06:09:30,080
在我们真正开始创建一个                            

2187
06:09:30,080 --> 06:09:34,000
证书呃是                            

2188
06:09:34,000 --> 06:09:38,480
如果你有的话，现在谈谈钥匙串                            

2189
06:09:38,480 --> 06:09:42,240
开发者帐户在这里，您正计划发布您的应用程序我                            

2190
06:09:42,240 --> 06:09:44,878
基本上可以假设你有                            

2191
06:09:44,878 --> 06:09:49,200
一个 Macintosh，这样你就注册了一个帐户                            

2192
06:09:49,200 --> 06:09:53,520
并且您希望能够使用证书签署您的申请，并且                            

2193
06:09:53,520 --> 06:09:56,400
个人资料，但是您可能在一群人中                            

2194
06:09:56,400 --> 06:10:00,798
谁没有 macintosh 和 xcode                            

2195
06:10:00,798 --> 06:10:04,558
等等，但您仍然希望能够将您的应用程序发布到应用程序                            

2196
06:10:04,558 --> 06:10:09,040
存储因此您可能希望例如创建您的证书配置文件一个应用程序                            

2197
06:10:09,040 --> 06:10:13,600
id 然后将该信息发送到某种云托管服务                            

2198
06:10:13,600 --> 06:10:17,520
让他们签署您的申请，然后将其发回给您                            

2199
06:10:17,520 --> 06:10:23,760
像那样我自己从来没有做过，但你可能在那个小组中，呃                            

2200
06:10:23,760 --> 06:10:27,680
为了具有包容性，我认为谈论这一点很重要                            

2201
06:10:27,680 --> 06:10:31,440
嗯，现在让我们谈谈我在这里放了什么                            

2202
06:10:31,440 --> 06:10:35,200
作为标题，就像钥匙串中的证书                            

2203
06:10:35,200 --> 06:10:39,280
您会看到每个证书都是由您创建的                            

2204
06:10:39,280 --> 06:10:43,440
开发者现在向苹果发送请求                            

2205
06:10:43,440 --> 06:10:47,520
这个要求基本上是你创建一个数字                            

2206
06:10:47,520 --> 06:10:50,718
在您的计算机上签名                            

2207
06:10:50,718 --> 06:10:54,718
您的计算机会保留您的请求，然后将其发送到                            

2208
06:10:54,718 --> 06:11:00,320
apple apple 说哦，你要一个证书 好的，这是证书                            

2209
06:11:00,320 --> 06:11:03,200
然后你下载该证书，然后当你双击                            

2210
06:11:03,200 --> 06:11:09,120
证书它已安装并与您的原始请求挂钩，好吧，所以这里是                            

2211
06:11:09,120 --> 06:11:13,040
证书，这是私钥，所以                            

2212
06:11:13,040 --> 06:11:17,200
私钥只是您的计算机存储的一条信息                            

2213
06:11:17,200 --> 06:11:22,400
仅在您的计算机上以数字方式保存，以便以后下载的证书可以                            

2214
06:11:22,400 --> 06:11:27,840
实际上被它迷住了，创造了一个链条，好吧                            

2215
06:11:27,840 --> 06:11:31,600
您的应用程序在使用您的证书签名时                            

2216
06:11:31,600 --> 06:11:35,840
从苹果下载它实际上包含一些信息                            

2217
06:11:35,840 --> 06:11:40,000
关于证书和私钥，然后您发送应用程序                            

2218
06:11:40,000 --> 06:11:45,280
使用这两条信息对苹果进行了签名，所以                            

2219
06:11:45,280 --> 06:11:48,080
我知道很多信息，但我认为这对每部手机都很重要                            

2220
06:11:48,080 --> 06:11:51,840
想要为 ios appstore 发布一些东西的开发人员                            

2221
06:11:51,840 --> 06:11:55,200
现在知道这个                            

2222
06:11:55,200 --> 06:11:59,360
私钥和证书它们都存储在您的程序中                            

2223
06:11:59,360 --> 06:12:03,040
如果您有 Macintosh，则计算机称为钥匙串                            

2224
06:12:03,040 --> 06:12:08,000
我可以调出钥匙串现在让我看看我有哪三个                            

2225
06:12:08,000 --> 06:12:12,000
屏幕在这里，所以我不知道哪个会打开                            

2226
06:12:12,000 --> 06:12:17,040
所以我会在这里提出钥匙串                            

2227
06:12:17,040 --> 06:12:21,600
我会告诉你它的样子                            

2228
06:12:21,600 --> 06:12:26,638
这是一个钥匙串的例子，你可以看到这里有一个分布                            

2229
06:12:26,638 --> 06:12:30,160
证书和开发证书可以                            

2230
06:12:30,160 --> 06:12:34,400
这些证书我没有创建它们我下载了它们但是东西                            

2231
06:12:34,400 --> 06:12:37,840
在他们下面，这是我在谈论的链条，这是我的关键                            

2232
06:12:37,840 --> 06:12:42,080
创建好，所以当您请求证书时                            

2233
06:12:42,080 --> 06:12:47,600
苹果你实际上在你的电脑上创建了这个东西然后你上传了这个东西                            

2234
06:12:47,600 --> 06:12:52,080
苹果让他们创建一个与那种不相关的证书                            

2235
06:12:52,080 --> 06:12:55,440
您实际上并没有完全上传此内容，而是与此相关的内容                            

2236
06:12:55,440 --> 06:12:57,280
可以，然后呢                            

2237
06:12:57,280 --> 06:13:01,200
对我们来说，为了能够继续下去，我认为重要的是我实际上                            

2238
06:13:01,200 --> 06:13:04,240
从我的计算机中删除这些现有证书                            

2239
06:13:04,240 --> 06:13:06,798
所以我就这样，我会像这样                            

2240
06:13:06,798 --> 06:13:11,120
删除两个项目好吧，然后就这样删除它们                            

2241
06:13:11,120 --> 06:13:14,798
好吧，现在他们走了，我们需要做的是                            

2242
06:13:14,798 --> 06:13:17,280
嗯                            

2243
06:13:17,280 --> 06:13:25,680
这里让我把标题放上来让你看看                            

2244
06:13:25,680 --> 06:13:33,440
那就是证书，现在我们还需要谈谈嗯                            

2245
06:13:33,440 --> 06:13:37,120
我们还需要谈论实际删除配置文件现在这是一个                            

2246
06:13:37,120 --> 06:13:40,638
如果您的计算机上已经安装了类似的配置文件，那么有趣的部分                            

2247
06:13:40,638 --> 06:13:45,520
你可能不想这样做，但我只是向你展示这一步，以便我们                            

2248
06:13:45,520 --> 06:13:49,360
从一张白纸开始好吧，所以如果你真的不应该这样做                            

2249
06:13:49,360 --> 06:13:52,638
知道你在用你的证书做什么，但如果这是第一个                            

2250
06:13:52,638 --> 06:13:55,760
你这样做的时候，可能已经有一些证书适合你                            

2251
06:13:55,760 --> 06:13:59,920
您的计算机出于某种原因，那么这就是真正摆脱它们的方法                            

2252
06:13:59,920 --> 06:14:04,080
所以我要打开finder um                            

2253
06:14:04,080 --> 06:14:08,000
让我在这里打开查找器，然后我会把它带到这里                            

2254
06:14:08,000 --> 06:14:13,200
我们需要做的是进入一个名为 um 的文件夹                            

2255
06:14:13,200 --> 06:14:16,160
我相信它被称为图书馆，然后是移动                            

2256
06:14:16,160 --> 06:14:18,638
设备，然后是所谓的供应                            

2257
06:14:18,638 --> 06:14:22,638
个人资料好的，你可以在这里看到，嗯，我会展示                            

2258
06:14:22,638 --> 06:14:28,320
你再次这条路径，所以它是我的用户库移动设备，然后配置                            

2259
06:14:28,320 --> 06:14:32,638
个人资料好的，所以在我进入该文件夹后，我                            

2260
06:14:32,638 --> 06:14:35,920
将删除这些在这里的配置文件好吗                            

2261
06:14:35,920 --> 06:14:38,878
因此，如果您不想这样做，则不必这样做，并且您确切地知道什么                            

2262
06:14:38,878 --> 06:14:42,558
你在做，但我这样做只是为了向你展示配置文件总是被存储的                            

2263
06:14:42,558 --> 06:14:46,798
在那个位置对您的用户来说还可以，您还可以做什么，我真的                            

2264
06:14:46,798 --> 06:14:50,638
就像如果你说在这里添加列然后把它拖到你的                            

2265
06:14:50,638 --> 06:14:53,840
收藏夹，因此您不必每次都输入该路径，所以让我们把它                            

2266
06:14:53,840 --> 06:14:57,360
在这里可以，这样每次我想安装配置文件时，我都可以点击                            

2267
06:14:57,360 --> 06:15:03,280
在这里，把我的个人资料放在那里                            

2268
06:15:03,280 --> 06:15:06,718
好的 嗯                            

2269
06:15:06,718 --> 06:15:10,400
既然我们已经完成了这里标题所示的下一步是删除                            

2270
06:15:10,400 --> 06:15:13,680
我们现有的来自苹果的证书和资料                            

2271
06:15:13,680 --> 06:15:17,200
开发帐户，所以让我们在此处转到证书 ID 和配置文件                            

2272
06:15:17,200 --> 06:15:21,840
左边，你会在这里看到我有很多东西存储在右边                            

2273
06:15:21,840 --> 06:15:26,000
在这里，好吧，您看到发行版开发开发等等                            

2274
06:15:26,000 --> 06:15:32,480
所以我们可以在这里做的是继续删除这些证书                            

2275
06:15:32,480 --> 06:15:35,600
左边你看到它是一个证书所以有很多                            

2276
06:15:35,600 --> 06:15:39,040
他们所以我要做的就是点击                            

2277
06:15:39,040 --> 06:15:44,000
在这个上，然后说撤销 撤销点击下一个，然后撤销它们                            

2278
06:15:44,000 --> 06:15:49,200
如果您是 ios 开发新手并且您刚刚获得                            

2279
06:15:49,200 --> 06:15:53,840
你的开发帐户你甚至没有任何证书所以这个屏幕是                            

2280
06:15:53,840 --> 06:15:58,798
对你来说是空的，所以 revoke revoke 所以你的屏幕看起来像                            

2281
06:15:58,798 --> 06:16:02,400
没关系，所以现在我们没有证书                            

2282
06:16:02,400 --> 06:16:07,360
我还将进入个人资料并删除这些个人资料，所以如果我只是进去                            

2283
06:16:07,360 --> 06:16:11,760
在这里，有点像说我所有的个人资料，然后删除这是                            

2284
06:16:11,760 --> 06:16:15,120
会好起来的，这样的问题好吧，所以现在我已经删除了                            

2285
06:16:15,120 --> 06:16:19,360
我所有的个人资料和证书                            

2286
06:16:19,360 --> 06:16:23,920
这就是本章这一部分的目标                            

2287
06:16:23,920 --> 06:16:27,280
9 我相信是的，我现在已经删除了现有的                            

2288
06:16:27,280 --> 06:16:30,400
开发和生产证书和                            

2289
06:16:30,400 --> 06:16:35,440
然后配置文件也完成了，它们也消失了                            

2290
06:16:35,440 --> 06:16:39,120
所以我们现在需要做的是创造一个叫做发展的东西                            

2291
06:16:39,120 --> 06:16:42,320
证书，只是回顾一下开发证书是                            

2292
06:16:42,320 --> 06:16:47,200
允许您作为开发人员运行和测试您的证书的证书                            

2293
06:16:47,200 --> 06:16:50,958
实际开发时的应用程序                            

2294
06:16:50,958 --> 06:16:56,798
iphone或者ipad都可以，所以不需要发布                            

2295
06:16:56,798 --> 06:17:00,558
应用程序，但我个人经过多年的开发经验                            

2296
06:17:00,558 --> 06:17:03,520
移动应用程序我得出的结论是我实际上更喜欢                            

2297
06:17:03,520 --> 06:17:07,600
运行我的应用程序测试我的应用程序是真实的设备，因为我                            

2298
06:17:07,600 --> 06:17:12,240
开发，因为你也有模拟器，你也有模拟器                            

2299
06:17:12,240 --> 06:17:16,638
模拟和模拟 iphone 的功能和                            

2300
06:17:16,638 --> 06:17:21,200
android 手机或平板电脑，但我得出的结论是它实际上是                            

2301
06:17:21,200 --> 06:17:26,160
我至少更好地测试我的应用程序真正的手机或平板电脑                            

2302
06:17:26,160 --> 06:17:29,760
所以为了能够做到这一点，如果你有一个 iphone                            

2303
06:17:29,760 --> 06:17:33,520
连接到你的电脑，你想测试你的标志                            

2304
06:17:33,520 --> 06:17:36,558
该 iphone 上的应用程序，那么您需要做的第一件事就是创建                            

2305
06:17:36,558 --> 06:17:40,798
开发证书，因此您需要将自己标识为开发人员                            

2306
06:17:40,798 --> 06:17:44,878
苹果所以让我们去证书部分然后说创建一个                            

2307
06:17:44,878 --> 06:17:50,160
证书然后选择苹果开发其实对不起ios app                            

2308
06:17:50,160 --> 06:17:55,200
发展这很有趣它说                            

2309
06:17:55,200 --> 06:17:58,240
是的所以它说苹果很有趣所以你基本上可以使用                            

2310
06:17:58,240 --> 06:18:00,638
所谓的苹果开发，但我们不打算这样做，我们只是                            

2311
06:18:00,638 --> 06:18:03,440
现在要说ios应用开发好了                            

2312
06:18:03,440 --> 06:18:06,080
所以让我们这样做只需选择 ios 应用程序                            

2313
06:18:06,080 --> 06:18:11,360
开发，然后按继续，这里说创建一个新证书                            

2314
06:18:11,360 --> 06:18:17,040
并创建一个新证书，它在等你告诉它你是                            

2315
06:18:17,040 --> 06:18:20,638
要求开发证书，您现在需要选择一个文件                            

2316
06:18:20,638 --> 06:18:22,958
你现在需要回到的神奇部分                            

2317
06:18:22,958 --> 06:18:26,798
钥匙串，让我看看我能不能再调出钥匙串                            

2318
06:18:26,798 --> 06:18:32,080
在这里只需转到钥匙串访问菜单                            

2319
06:18:32,080 --> 06:18:36,160
然后说证书助理 然后说                            

2320
06:18:36,160 --> 06:18:40,400
向证书颁发机构请求证书 好的                            

2321
06:18:40,400 --> 06:18:46,718
所以我要按那个，我要把我公司的电子邮件放在这里                            

2322
06:18:46,718 --> 06:18:50,798
和通用名，我只是把它作为我的名字，好吧                            

2323
06:18:50,798 --> 06:18:53,840
然后我只想说保存到磁盘                            

2324
06:18:53,840 --> 06:18:57,520
好吧，嗯                            

2325
06:18:57,520 --> 06:19:01,760
这就是我们现在正在做的事情然后我会说继续它说                            

2326
06:19:01,760 --> 06:19:05,840
好的，我将在您的桌面或任何您想要的地方写一个文件                            

2327
06:19:05,840 --> 06:19:09,520
请求所以把它保存在你知道它实际保存在哪里的地方，所以我                            

2328
06:19:09,520 --> 06:19:13,840
会保存它然后说现在你看到了                            

2329
06:19:13,840 --> 06:19:17,360
该证书请求本身并没有创建证书，它只是一个                            

2330
06:19:17,360 --> 06:19:22,000
证书请求，但它所做的是它创建了一个私钥                            

2331
06:19:22,000 --> 06:19:26,478
你实际上可以在这里找到你的钥匙 你会看到有一个                            

2332
06:19:26,478 --> 06:19:30,400
如果我说好的私钥，那么这些密钥中的一个就是刚才的那个                            

2333
06:19:30,400 --> 06:19:34,080
现在创建好了，我不知道是哪一个，因为                            

2334
06:19:34,080 --> 06:19:39,360
它没有日期，但它只是其中之一，所以每个请求创建一个                            

2335
06:19:39,360 --> 06:19:43,040
它用自己创建的证书 一个私钥                            

2336
06:19:43,040 --> 06:19:47,040
好的，请记住这一点，让我们回到我的证书                            

2337
06:19:47,040 --> 06:19:50,878
现在该文件已保存在您的桌面上，只需说选择文件和                            

2338
06:19:50,878 --> 06:19:56,718
然后转到您的桌面并选择该证书请求                            

2339
06:19:56,718 --> 06:20:00,478
你在这里看到证书请求搜索签名请求                            

2340
06:20:00,478 --> 06:20:05,600
然后说继续，然后说好的，它会在一个                            

2341
06:20:05,600 --> 06:20:08,798
年，您需要牢记这一点，因为开发证书可以                            

2342
06:20:08,798 --> 06:20:13,120
总是在一年内到期，你需要基本上更新它们好吗                            

2343
06:20:13,120 --> 06:20:15,600
所以，但现在你不必担心，因为我们不会                            

2344
06:20:15,600 --> 06:20:20,320
花了一年时间来开发这个应用程序，所以我们只说下载它就可以了                            

2345
06:20:20,320 --> 06:20:25,760
下载到我的下载文件夹，所以我要调出我的下载文件夹                            

2346
06:20:25,760 --> 06:20:29,040
呃，实际上只是                            

2347
06:20:29,040 --> 06:20:33,120
会像这样给你看                            

2348
06:20:33,120 --> 06:20:35,360
所以这里是                            

2349
06:20:35,360 --> 06:20:40,240
下载的文件你现在看到它是一个证书文件                            

2350
06:20:40,240 --> 06:20:44,240
认证本身不包含您的私钥，请记住                            

2351
06:20:44,240 --> 06:20:46,958
私钥在钥匙串中，所以你需要做的就是你需要                            

2352
06:20:46,958 --> 06:20:51,440
双击这个没问题所以双击它你会看到它                            

2353
06:20:51,440 --> 06:20:54,958
然后在我的证书下的钥匙串中创建一个证书并登录                            

2354
06:20:54,958 --> 06:20:59,200
与您看到的私钥链接的钥匙串，这就是您所看到的                            

2355
06:20:59,200 --> 06:21:03,440
从苹果下载这是您通过请求在您的计算机上创建的                            

2356
06:21:03,440 --> 06:21:07,520
证书，当您双击下载的证书时，这两个得到                            

2357
06:21:07,520 --> 06:21:12,080
勾搭在一起，好吧，这就是你所拥有的                            

2358
06:21:12,080 --> 06:21:16,320
创建开发证书和与之相关的密钥                            

2359
06:21:16,320 --> 06:21:20,160
好的，现在让我们去生产吧                            

2360
06:21:20,160 --> 06:21:24,000
证书，我们需要做同样的事情同样的过程                            

2361
06:21:24,000 --> 06:21:27,360
为了创建我们的生产证书，让我们回到所有                            

2362
06:21:27,360 --> 06:21:30,878
证书，我只想说加上证书和                            

2363
06:21:30,878 --> 06:21:36,638
我会说 ios 分发应用商店和临时好的，所以选择那个选项                            

2364
06:21:36,638 --> 06:21:40,718
请和对不起，我只是不会也在我的                            

2365
06:21:40,718 --> 06:21:44,478
注意这里我们谈到了开发证书                            

2366
06:21:44,478 --> 06:21:48,638
所以让我们继续，在这里按继续，你必须做准确的                            

2367
06:21:48,638 --> 06:21:52,558
与您为开发证书所做的相同过程并创建一个新的                            

2368
06:21:52,558 --> 06:21:56,958
证书请求，所以让我们基本上做同样的事情                            

2369
06:21:56,958 --> 06:22:01,360
一种复制和粘贴相同的过程去钥匙串访问                            

2370
06:22:01,360 --> 06:22:05,360
证书助理向证书颁发机构请求证书                            

2371
06:22:05,360 --> 06:22:08,638
并且要小心一点，因为我已经从什么                            

2372
06:22:08,638 --> 06:22:13,200
我看到的是，这取决于您在这里选择的菜单                            

2373
06:22:13,200 --> 06:22:16,000
实际上改变了                            

2374
06:22:16,000 --> 06:22:20,080
可能是您需要确保在您的钥匙串中您是                            

2375
06:22:20,080 --> 06:22:23,280
不选择任何东西，所以只要确保没有任何东西                            

2376
06:22:23,280 --> 06:22:27,760
选择然后去 嗯对不起 然后去                            

2377
06:22:27,760 --> 06:22:30,878
证书助理并为证书颁发机构申请证书                            

2378
06:22:30,878 --> 06:22:34,160
把你公司或你的开发者账户                            

2379
06:22:34,160 --> 06:22:36,558
发邮件给我，我会选一个坚实的 b                            

2380
06:22:36,558 --> 06:22:39,520
然后保存到磁盘然后说继续                            

2381
06:22:39,520 --> 06:22:42,878
然后将其保存到桌面，因为那里已经有一个文件                            

2382
06:22:42,878 --> 06:22:45,680
与上一步相同的名称它会说你确定要                            

2383
06:22:45,680 --> 06:22:50,320
替换它是的替换它并保存它然后我要去                            

2384
06:22:50,320 --> 06:22:54,000
在这里，然后选择相同的确切文件，但它是                            

2385
06:22:54,000 --> 06:22:56,958
实际上是一个被重写的新文件                            

2386
06:22:56,958 --> 06:23:00,400
然后说继续，你会看到现在有一​​个下载                            

2387
06:23:00,400 --> 06:23:03,760
所以我要下载它，如果我去                            

2388
06:23:03,760 --> 06:23:09,360
到我的下载文件夹，嗯，我会把它调出来，这样你就可以看到                            

2389
06:23:09,360 --> 06:23:13,120
嗯嗯                            

2390
06:23:13,120 --> 06:23:15,760
让我们看看我要把它带到这里你会看到                            

2391
06:23:15,760 --> 06:23:20,000
有一个名为 ios 发行版的新文件是您的产品                            

2392
06:23:20,000 --> 06:23:24,160
证书好的，所以双击那个钥匙串它会再次打开，你会看到                            

2393
06:23:24,160 --> 06:23:27,920
现在你有两个证书在这里 iphone 分发，然后是 iphone                            

2394
06:23:27,920 --> 06:23:31,920
开发人员，所以这些是您的证书并保留                            

2395
06:23:31,920 --> 06:23:35,440
抓住它们有点像尝试拯救它们，即使你不拯救它们                            

2396
06:23:35,440 --> 06:23:39,520
没关系，因为它们现在被放置在这里，所以你可以随时导出它们                            

2397
06:23:39,520 --> 06:23:43,360
但保持住它们也是一种很好的做法                            

2398
06:23:43,360 --> 06:23:45,520
现在很好                            

2399
06:23:45,520 --> 06:23:50,000
抱歉，现在我们已经创建了一个开发者和一个 dis                            

2400
06:23:50,000 --> 06:23:52,798
以及生产或经销证书                            

2401
06:23:52,798 --> 06:23:56,400
让我们谈谈下一步，这是我们能够发布所必需的                            

2402
06:23:56,400 --> 06:24:00,080
或在手机上测试我们的应用程序                            

2403
06:24:00,080 --> 06:24:05,520
让我们回到这里和标识符，这里是你创建你的                            

2404
06:24:05,520 --> 06:24:09,840
应用程序标识符，您可以看到它们实际上与特定的                            

2405
06:24:09,840 --> 06:24:12,798
我们谈到的组织和标识符                            

2406
06:24:12,798 --> 06:24:16,320
我们在哪一章里谈过，我想实际上是在哪一章里                            

2407
06:24:16,320 --> 06:24:18,958
八 是 如果你有 如果你不知道什么                            

2408
06:24:18,958 --> 06:24:23,120
标识符是请回到我讨论的第八章                            

2409
06:24:23,120 --> 06:24:26,080
所以让我们                            

2410
06:24:26,080 --> 06:24:30,478
在此处按加号按钮并说您要创建一个新的                            

2411
06:24:30,478 --> 06:24:37,600
应用 id 好，按继续，然后您将在此处选择应用，而不是应用剪辑                            

2412
06:24:37,600 --> 06:24:41,520
然后你会在这里看到这个屏幕，所以我要                            

2413
06:24:41,520 --> 06:24:45,920
向你解释这一切是什么所以在这里描述我们只是                            

2414
06:24:45,920 --> 06:24:50,478
将在此处打印一些描述我们的应用程序的信息                            

2415
06:24:50,478 --> 06:24:54,160
老实说，我不记得我们实际上调用了我们的应用程序时                            

2416
06:24:54,160 --> 06:24:57,360
在之前创建的我可以看到它被称为                            

2417
06:24:57,360 --> 06:25:01,440
我的笔记，所以我只想说我的笔记                            

2418
06:25:01,440 --> 06:25:06,000
Flutter 应用程序示例或 Flutter 应用程序都可以                            

2419
06:25:06,000 --> 06:25:09,760
在这里，捆绑标识符非常重要，您实际指定它                            

2420
06:25:09,760 --> 06:25:15,440
正如我们在第 8 章中创建的那样正确。所以我要提出                            

2421
06:25:15,440 --> 06:25:20,558
我的笔记应用程序在这里我将增加字体大小，以便您可以看到                            

2422
06:25:20,558 --> 06:25:25,280
嗯，如果你记得我们在哪里创建应用程序                            

2423
06:25:25,280 --> 06:25:30,320
使用此命令，您会看到我们说 se.pixelity，然后是我的注释含义                            

2424
06:25:30,320 --> 06:25:34,760
从此时起，应用程序标识符将是                            

2425
06:25:34,760 --> 06:25:39,440
se.pixelity.mynotes 没关系，中间有一个点，所以如果我搜索                            

2426
06:25:39,440 --> 06:25:43,120
在我们的项目中让我们说 sepixolity.mynotes                            

2427
06:25:43,120 --> 06:25:46,638
您会看到这里有一些结果，这取决于您创建的方式                            

2428
06:25:46,638 --> 06:25:50,878
您的浮动应用程序取决于您指定的组织                            

2429
06:25:50,878 --> 06:25:54,478
标识符对您来说可能不同，但因为在这种情况下我的标识符是 s                            

2430
06:25:54,478 --> 06:25:58,558
附注我的笔记，我只是要复制它                            

2431
06:25:58,558 --> 06:26:02,000
我要把它带到这里确保选择了显式并粘贴它                            

2432
06:26:02,000 --> 06:26:05,520
捆绑ID在那里好吧，是的，它被选中了                            

2433
06:26:05,520 --> 06:26:08,638
现在，如果您还记得我之前说过的话，应用标识符不仅仅是                            

2434
06:26:08,638 --> 06:26:12,240
标识捆绑包 id 本身，但它也像一个功能列表                            

2435
06:26:12,240 --> 06:26:16,240
例如，如果您想要推送通知，您的应用程序现在可以拥有                            

2436
06:26:16,240 --> 06:26:20,638
您还需要在这里启用它现在推送通知不是                            

2437
06:26:20,638 --> 06:26:25,040
我们将在本课程中做的事情，所以你不必这样做，但是                            

2438
06:26:25,040 --> 06:26:30,000
输入您的应用程序 ID 前缀后，您需要在此处执行的所有操作                            

2439
06:26:30,000 --> 06:26:35,040
应用程序捆绑标识符和描述只需按继续                            

2440
06:26:35,040 --> 06:26:38,320
你可以看到说好的你确定一切都很好是的                            

2441
06:26:38,320 --> 06:26:43,920
是的，太好了，然后我说现在注册标识符已全部创建                            

2442
06:26:43,920 --> 06:26:46,400
没错                            

2443
06:26:46,400 --> 06:26:48,558
嗯，你真的不需要做任何事情                            

2444
06:26:48,558 --> 06:26:52,878
现在有了那个标识符，只是你现在已经注册了                            

2445
06:26:52,878 --> 06:26:57,600
标识符，因此基本上没有其他人可以从您那里获取该应用程序                            

2446
06:26:57,600 --> 06:26:59,760
所以我要                            

2447
06:26:59,760 --> 06:27:02,160
实际上                            

2448
06:27:02,160 --> 06:27:06,558
在我的笔记中勾选这些项目，以便我们知道我们已经讨论过了                            

2449
06:27:06,558 --> 06:27:11,760
现在下一步是准备你的                            

2450
06:27:11,760 --> 06:27:15,840
呃您的应用程序，以便它可以实际安装和调试或                            

2451
06:27:15,840 --> 06:27:21,440
在真机上测试现在你看不到我的整个设置，但我在这里                            

2452
06:27:21,440 --> 06:27:26,000
有一个 iphone 12 pro，就在这里，有点脏                            

2453
06:27:26,000 --> 06:27:28,958
屏幕，但没关系，这只是我的测试电话                            

2454
06:27:28,958 --> 06:27:31,600
和这部手机                            

2455
06:27:31,600 --> 06:27:37,360
如您所见，已通过电缆连接到我的计算机，并且可用于                            

2456
06:27:37,360 --> 06:27:40,798
我的电脑要查看，所以我现在就用我的                            

2457
06:27:40,798 --> 06:27:45,360
密码，如果我再调出我的                            

2458
06:27:45,360 --> 06:27:48,878
发现者所以在这里                            

2459
06:27:48,878 --> 06:27:52,798
你可以看到它在这里可用                            

2460
06:27:52,798 --> 06:27:58,240
所以这是我的电话，它有一个特殊的标识符，如果你                            

2461
06:27:58,240 --> 06:28:02,000
想要获取您的设备标识符，这是我们需要在这里做的，因为您可以                            

2462
06:28:02,000 --> 06:28:06,160
看到为了在真实设备上调试，我们需要一个 uid 来注册我们的                            

2463
06:28:06,160 --> 06:28:08,558
简介                            

2464
06:28:08,558 --> 06:28:12,478
当你我的意思是，这有点像一件大事，因为它需要                            

2465
06:28:12,478 --> 06:28:15,520
很多时间，但我要在这里说的是，当你创建它时                            

2466
06:28:15,520 --> 06:28:21,040
开发专业和开发证书下一步是为您                            

2467
06:28:21,040 --> 06:28:25,440
基本上用苹果注册你的设备，这样苹果就知道在哪个设备上                            

2468
06:28:25,440 --> 06:28:29,120
您实际上想要测试您的应用程序的设备                            

2469
06:28:29,120 --> 06:28:34,718
以及它们存储在此处的设备 um 选项卡下的那些设备                            

2470
06:28:34,718 --> 06:28:40,080
并且有一些方法可以获取您的设备标识符，例如像我一样去 finder                            

2471
06:28:40,080 --> 06:28:43,360
刚刚显示在这里，只是点击你的                            

2472
06:28:43,360 --> 06:28:47,360
设备现在我有点打算在屏幕外做，所以你看不到全部                            

2473
06:28:47,360 --> 06:28:52,160
这里有什么                            

2474
06:28:52,160 --> 06:28:56,558
让我看看有没有办法让你真正获得你的设备标识符是的                            

2475
06:28:56,558 --> 06:29:00,878
我实际上可以在这里看到有一种方法可以得到那个                            

2476
06:29:00,878 --> 06:29:04,558
所以我要做的是我要把finder带到这里，所以你看                            

2477
06:29:04,558 --> 06:29:09,680
会发生什么我只需点击我的手机现在你需要注册你的设备                            

2478
06:29:09,680 --> 06:29:14,638
在您创建个人资料之前，此设备选项卡下的标识符                            

2479
06:29:14,638 --> 06:29:17,840
我不会那样做，因为我的手机已经注册但你需要                            

2480
06:29:17,840 --> 06:29:22,160
自己做这件事，方法是连接你的手机或你的                            

2481
06:29:22,160 --> 06:29:26,240
您想在计算机上测试您的颤振应用程序的平板电脑                            

2482
06:29:26,240 --> 06:29:30,000
然后进入查找器并点击您的手机并                            

2483
06:29:30,000 --> 06:29:35,200
然后只需单击此部分现在我不会在这里这样做以及原因                            

2484
06:29:35,200 --> 06:29:39,280
这背后是每个设备都说标识符确实标识了                            

2485
06:29:39,280 --> 06:29:42,958
设备，以便您可以在您的帐户下注册我的设备                            

2486
06:29:42,958 --> 06:29:45,600
所以，这不是一个好主意                            

2487
06:29:45,600 --> 06:29:49,200
你的设备标识符给别人所以我不是我不能这样做                            

2488
06:29:49,200 --> 06:29:53,760
不幸的是，在本课程中，但您必须采取的步骤是单击                            

2489
06:29:53,760 --> 06:29:56,798
在这个标签上，它会告诉你一个                            

2490
06:29:56,798 --> 06:30:03,520
称为 uuid 的部分复制该 uuid 并进入设备                            

2491
06:30:03,520 --> 06:30:07,760
苹果开发者的证书标识符和配置文件部分                            

2492
06:30:07,760 --> 06:30:12,718
帐户并将带有名称的 uuid 添加到您的帐户                            

2493
06:30:12,718 --> 06:30:16,638
好的，所以我假设你已经做到了，如果你需要一些时间                            

2494
06:30:16,638 --> 06:30:20,638
继续做吧，请暂停这个视频，然后这样做                            

2495
06:30:20,638 --> 06:30:24,958
关键是从这里获取标识符好吧还有一种方法也可以得到                            

2496
06:30:24,958 --> 06:30:29,840
您的标识符来自 xcode um 的设备标识符，并且完全可以使用                            

2497
06:30:29,840 --> 06:30:35,200
同样你只需要打开xcode然后去我相信进入菜单然后                            

2498
06:30:35,200 --> 06:30:38,320
选择设备，然后从那里选择您的设备，您会看到它                            

2499
06:30:38,320 --> 06:30:42,478
标识符就在那里，所以这是很多话题让我们说                            

2500
06:30:42,478 --> 06:30:46,478
你已经做到了，所以我们现在需要做的就是去                            

2501
06:30:46,478 --> 06:30:54,000
好的，创建一个开发配置文件，所以我将在这些项目中打勾                            

2502
06:30:54,000 --> 06:30:56,958
我的笔记也是如此，所以这是令人兴奋的部分，现在我们                            

2503
06:30:56,958 --> 06:31:01,280
转到配置文件部分并创建一个新的开发配置文件，以便                            

2504
06:31:01,280 --> 06:31:04,798
单击生成配置文件，我要说 ios 应用程序开发和                            

2505
06:31:04,798 --> 06:31:08,558
然后说继续然后它说好的选择一个你的应用程序ID                            

2506
06:31:08,558 --> 06:31:11,600
现在看到您的个人资料将与您的应用程序链接，所以                            

2507
06:31:11,600 --> 06:31:16,080
在这里做这个下拉，你可以看到我只是要说我的笔记和这个                            

2508
06:31:16,080 --> 06:31:20,638
是我创建的应用程序，对你来说，这个 id 可能有点                            

2509
06:31:20,638 --> 06:31:24,160
不同的描述可能有点不同，但只需选择                            

2510
06:31:24,160 --> 06:31:27,120
嗯，你之前创建的应用 id                            

2511
06:31:27,120 --> 06:31:31,520
步骤，所以我要选择我只想说继续                            

2512
06:31:31,520 --> 06:31:35,440
现在它会说好的这个配置文件连接到哪个证书                            

2513
06:31:35,440 --> 06:31:40,000
你还记得我说过个人资料与证书相关联吗？                            

2514
06:31:40,000 --> 06:31:43,680
这实际上意味着你已经创建了你的                            

2515
06:31:43,680 --> 06:31:47,440
正如我在本章中谈到的那样，只需选择您的开发证书                            

2516
06:31:47,440 --> 06:31:51,600
证书然后说现在继续                            

2517
06:31:51,600 --> 06:31:57,680
这里它问的是你想要哪些设备这个嗯                            

2518
06:31:57,680 --> 06:32:01,840
配置文件你想要哪个设备你的应用程序是用哪个设备签名的                            

2519
06:32:01,840 --> 06:32:06,878
这个配置文件现在肯定可以运行这些所有这些设备来自                            

2520
06:32:06,878 --> 06:32:10,080
设备部分我已经注册了很多设备，所以                            

2521
06:32:10,080 --> 06:32:14,320
嗯，甚至我的一些同事的设备                            

2522
06:32:14,320 --> 06:32:18,320
这使我们基本上也可以在他们的设备上调试应用程序                            

2523
06:32:18,320 --> 06:32:21,040
承认你已经做到了                            

2524
06:32:21,040 --> 06:32:26,000
如果你回到这里然后你会看到那些                            

2525
06:32:26,000 --> 06:32:30,958
正确查看此列表中的那些设备，所以我只想说选择                            

2526
06:32:30,958 --> 06:32:35,840
只是确保我的应用程序可以在我拥有的所有设备上运行                            

2527
06:32:35,840 --> 06:32:39,120
注册好然后说继续然后你会给                            

2528
06:32:39,120 --> 06:32:42,638
它是一个名字，所以我要给它一个我的笔记的名字                            

2529
06:32:42,638 --> 06:32:46,000
dival 开发人员简介                            

2530
06:32:46,000 --> 06:32:50,878
或者只是我的笔记开发好的，我只想说生成                            

2531
06:32:50,878 --> 06:32:54,638
你会得到一些关于它什么时候到期的信息等等也会在一个                            

2532
06:32:54,638 --> 06:32:58,400
一年，然后你不得不说下载                            

2533
06:32:58,400 --> 06:33:02,558
我们现在要对分布配置文件做同样的事情                            

2534
06:33:02,558 --> 06:33:06,798
分发配置文件类似于相同的开发配置文件，但您不能                            

2535
06:33:06,798 --> 06:33:10,638
用它调试你的应用程序你几乎可以做的就是签署                            

2536
06:33:10,638 --> 06:33:14,320
您的应用程序与该配置文件并将其发送到苹果，以便您可以部署                            

2537
06:33:14,320 --> 06:33:19,040
您在应用商店中的应用程序可以，所以按加号配置文件并在此和                            

2538
06:33:19,040 --> 06:33:23,600
这次去分发，说应用商店你看到分发小节                            

2539
06:33:23,600 --> 06:33:27,760
和应用商店，所以按继续按钮                            

2540
06:33:27,760 --> 06:33:32,320
然后去这里然后选择你的应用程序                            

2541
06:33:32,320 --> 06:33:36,478
所以这是开发配置文件对不起现在我们必须投入生产所以                            

2542
06:33:36,478 --> 06:33:39,840
我要把窗户抬高一点，这样你就可以看到它                            

2543
06:33:39,840 --> 06:33:44,240
全部，然后我要选择我的笔记                            

2544
06:33:44,240 --> 06:33:47,280
好的，然后我就按                            

2545
06:33:47,280 --> 06:33:50,320
继续按钮在这里                            

2546
06:33:50,320 --> 06:33:52,638
嗯，我会把它记在我的笔记里，所以我们已经                            

2547
06:33:52,638 --> 06:33:59,120
谈到了开发人员资料，好吧，既然你已经做到了，嗯                            

2548
06:33:59,120 --> 06:34:01,920
再次选择你的自信，你看到它说好的，现在你正在创建一个                            

2549
06:34:01,920 --> 06:34:05,920
证明分发的配置文件然后它应该与某种挂钩                            

2550
06:34:05,920 --> 06:34:09,360
分发证书，并且由于 ios 分发证书是唯一的                            

2551
06:34:09,360 --> 06:34:13,120
如果您还记得我删除了所有其他证书，我们创建的一个                            

2552
06:34:13,120 --> 06:34:16,798
所以这是这里唯一剩下的一个只需选择它并按继续                            

2553
06:34:16,798 --> 06:34:21,280
现在给它起个名字我要说我的笔记                            

2554
06:34:21,280 --> 06:34:23,840
产品生产                            

2555
06:34:23,840 --> 06:34:26,478
然后我只想说生成它说                            

2556
06:34:26,478 --> 06:34:29,760
好的，你去，你可以下载它                            

2557
06:34:29,760 --> 06:34:33,040
既然你已经完成了你需要提出你的                            

2558
06:34:33,040 --> 06:34:37,600
下载您的个人资料的文件夹，嗯                            

2559
06:34:37,600 --> 06:34:40,878
现在你看到这些是我下载的两个配置文件，除了他们的                            

2560
06:34:40,878 --> 06:34:45,840
移动供应条款的扩展，您需要以某种方式安装这些                            

2561
06:34:45,840 --> 06:34:50,240
您的计算机，以便您可以签署您的应用程序或您的 ios 应用程序                            

2562
06:34:50,240 --> 06:34:54,240
有了这些，所以你现在需要做的就是复制                            

2563
06:34:54,240 --> 06:34:58,400
这两个文件我将像这样复制它们并命令 c                            

2564
06:34:58,400 --> 06:35:02,718
然后将它们放入您的配置文件文件夹中，我只是要去                            

2565
06:35:02,718 --> 06:35:06,798
将它们剪切并粘贴到那里，这样它们就不再在下载文件夹中了                            

2566
06:35:06,798 --> 06:35:10,320
他们在那里还有其他安装这些的方法                            

2567
06:35:10,320 --> 06:35:14,718
配置文件有些人宁愿将其拖入 xcode 有些人双击它们                            

2568
06:35:14,718 --> 06:35:18,400
这些都很好，但是这样做有一点问题                            

2569
06:35:18,400 --> 06:35:22,000
方法与我在这里向您展示的方法相比，如果您双击                            

2570
06:35:22,000 --> 06:35:27,120
这些配置文件 mac os 知道如何安装它们，但是                            

2571
06:35:27,120 --> 06:35:31,440
mac os 只是弄乱了它们的命名，因此它们将安装在它们的非常                            

2572
06:35:31,440 --> 06:35:35,600
随机名称，因此如果您返回配置文件文件夹，它们可能是                            

2573
06:35:35,600 --> 06:35:39,360
在某种你不再认识的神秘名称下，所以在这个                            

2574
06:35:39,360 --> 06:35:43,200
他们基本上保持原来的名字                            

2575
06:35:43,200 --> 06:35:48,320
非常描述他们实际上是好的                            

2576
06:35:48,320 --> 06:35:58,558
好的，就是这样，所以现在我们已经创建了一个 um dev 配置文件和一个 prod 配置文件                            

2577
06:35:58,558 --> 06:36:03,760
令人兴奋的事情，所以我们现在需要做的实际上是工作，我们可以说我们是                            

2578
06:36:03,760 --> 06:36:07,280
在这里完成这个屏幕所以我要关闭它                            

2579
06:36:07,280 --> 06:36:12,240
然后我在这里要做的是我们现在需要谈论的是设置                            

2580
06:36:12,240 --> 06:36:17,200
在 xcode 中启动我们的项目，以便 xcode 理解                            

2581
06:36:17,200 --> 06:36:20,798
我们的应用程序需要使用正确的配置文件和证书进行签名，所以                            

2582
06:36:20,798 --> 06:36:26,080
我需要你做的是转到你的颤振项目中的 ios 文件夹，然后                            

2583
06:36:26,080 --> 06:36:30,160
只需右键单击它并说在查找器中显示即可                            

2584
06:36:30,160 --> 06:36:35,040
在查找器中显示后，双击工作区以打开                            

2585
06:36:35,040 --> 06:36:40,320
您在 xcode 中的颤振 xcode 工作区                            

2586
06:36:40,320 --> 06:36:44,320
而你现在需要做的是基本上                            

2587
06:36:44,320 --> 06:36:49,840
确保您的 ios 应用程序签名正确完成，因此选择                            

2588
06:36:49,840 --> 06:36:54,478
这个图标在你的左上角，我认为它是项目资源管理器或其他东西                            

2589
06:36:54,478 --> 06:36:58,718
项目导航器然后在目标上                            

2590
06:36:58,718 --> 06:37:04,160
选择您的目标，然后转到签名和功能，然后删除                            

2591
06:37:04,160 --> 06:37:08,160
自动签名可以用于我们不会使用的这门课程                            

2592
06:37:08,160 --> 06:37:12,400
自动签名我会接受                            

2593
06:37:12,400 --> 06:37:21,440
在我的笔记中，我谈到了删除自动签名                            

2594
06:37:21,440 --> 06:37:25,360
所以下一步是让我们能够                            

2595
06:37:25,360 --> 06:37:29,360
告诉 xcode 出于调试目的，以便我们能够运行我们的                            

2596
06:37:29,360 --> 06:37:32,958
在真实手机上的应用程序并对其进行调试                            

2597
06:37:32,958 --> 06:37:37,120
应用程序需要使用哪个配置文件和哪个证书                            

2598
06:37:37,120 --> 06:37:42,400
所以我要做的就是在这里进入这个部分，如你所见                            

2599
06:37:42,400 --> 06:37:48,798
在签名和功能下调试，然后我可以看到它实际上是                            

2600
06:37:48,798 --> 06:37:53,120
去它已经在使用自动签名                            

2601
06:37:53,120 --> 06:37:56,320
用于调试，我也要删除它                            

2602
06:37:56,320 --> 06:37:59,520
所以你需要在这里做的实际上是选择正确的配置文件                            

2603
06:37:59,520 --> 06:38:02,958
在这里，上面写着我的笔记开发者和我的笔记                            

2604
06:38:02,958 --> 06:38:07,360
配置文件对不起产品，你可以看到它说不合格                            

2605
06:38:07,360 --> 06:38:10,320
嗯，那是因为我们没有                            

2606
06:38:10,320 --> 06:38:14,638
开发团队尚未和亚历克斯，我会尽快解释，但现在只是去                            

2607
06:38:14,638 --> 06:38:19,040
您的配置文件并说出于调试目的，我们将使用                            

2608
06:38:19,040 --> 06:38:22,558
mynotes dev 嗯                            

2609
06:38:22,558 --> 06:38:29,040
然后去你的发布，然后说我要使用我的笔记，好吧                            

2610
06:38:29,040 --> 06:38:32,798
这里有一个小错误，您会看到它说正在生成个人资料 my notes pro                            

2611
06:38:32,798 --> 06:38:37,680
不包括签名证书苹果开发等等等等好吧                            

2612
06:38:37,680 --> 06:38:40,320
没关系，别担心                            

2613
06:38:40,320 --> 06:38:43,600
所以我们现在需要做的是                            

2614
06:38:43,600 --> 06:38:47,760
告诉它嗯，所以我真的要选这里                            

2615
06:38:47,760 --> 06:38:52,478
深度搜索设置发布配置文件插入好的                            

2616
06:38:52,478 --> 06:38:58,000
所以你需要在这里做的是去你的构建设置并确保                            

2617
06:38:58,000 --> 06:39:01,440
你的开发团队                            

2618
06:39:01,440 --> 06:39:06,240
这里实际上是被选中的，你看到像素是给我的，然后是给你的                            

2619
06:39:06,240 --> 06:39:10,240
可能是别的东西所以嗯现在我要做什么我的意思是                            

2620
06:39:10,240 --> 06:39:14,558
有时呃，我可以看到这里的签名证书实际上并不是真的                            

2621
06:39:14,558 --> 06:39:19,280
有时选择它可能是当我们玩时xcode有点发疯                            

2622
06:39:19,280 --> 06:39:22,798
证书和签名，所以我要关闭 xcode                            

2623
06:39:22,798 --> 06:39:27,120
我要在这里做同样的事情去                            

2624
06:39:27,120 --> 06:39:32,000
revealingfinder finder 在这里的另一个窗口中打开，所以                            

2625
06:39:32,000 --> 06:39:39,440
我要再次打开工作区                            

2626
06:39:39,440 --> 06:39:43,200
好的，我可以看到我们仍然遇到问题配置文件减去那个                            

2627
06:39:43,200 --> 06:39:46,718
不包括签名证书苹果开发，让我们打开我们的                            

2628
06:39:46,718 --> 06:39:49,360
再次钥匙扣，看看这里                            

2629
06:39:49,360 --> 06:39:54,478
不幸的是，我可以看到您之前可以看到的个人资料                            

2630
06:39:54,478 --> 06:39:59,360
两个配置文件，这是非常不幸的，因为嗯                            

2631
06:39:59,360 --> 06:40:03,680
所以在这里你可以看到这个发展                            

2632
06:40:03,680 --> 06:40:07,840
证书是由我们创建的，您会看到它们彼此非常接近                            

2633
06:40:07,840 --> 06:40:11,040
这两个是我们创建的，但这是 xcode 创建的                            

2634
06:40:11,040 --> 06:40:15,680
那是因为 xcode 尝试像您看到的那样进行自动签名                            

2635
06:40:15,680 --> 06:40:20,638
说自动管理签名，这样它就创建了一个证书                            

2636
06:40:20,638 --> 06:40:25,520
对我来说，我不想要，所以我们在这里看到的错误是                            

2637
06:40:25,520 --> 06:40:28,400
那个xcode现在说这个这个                            

2638
06:40:28,400 --> 06:40:32,478
您在此处拥有的个人资料未与此事物相关联                            

2639
06:40:32,478 --> 06:40:36,558
哪个 xcode 自己创建的 没有人要求它做 我没有要求 xcode 做                            

2640
06:40:36,558 --> 06:40:39,760
所以当你和一个女人一起工作时，只知道xco试图做一个                            

2641
06:40:39,760 --> 06:40:43,920
很多魔法对你来说，如果你真的想                            

2642
06:40:43,920 --> 06:40:47,840
手动做事可能会妨碍                            

2643
06:40:47,840 --> 06:40:51,440
所以我要在这里做的是我要删除这个                            

2644
06:40:51,440 --> 06:40:54,558
开发证书，因为我没有要求它好吧                            

2645
06:40:54,558 --> 06:40:57,360
所以我要说我相信那是正确的                            

2646
06:40:57,360 --> 06:41:01,760
是的，所以我要说删除删除，现在您可以看到该错误消失了                            

2647
06:41:01,760 --> 06:41:04,958
只是因为 xcode 就像 ooh 现在我明白你在说哪一个了                            

2648
06:41:04,958 --> 06:41:08,080
关于然后是的配置文件                            

2649
06:41:08,080 --> 06:41:11,440
产品也上瘾了                            

2650
06:41:11,440 --> 06:41:14,878
正确所以                            

2651
06:41:14,878 --> 06:41:18,400
现在我要做的是你可以在这里看到                            

2652
06:41:18,400 --> 06:41:24,160
我在这里打开了项目，然后我在这里选择了我的实际 iphone                            

2653
06:41:24,160 --> 06:41:28,000
能够确保您的应用程序实际上可以在此运行                            

2654
06:41:28,000 --> 06:41:33,040
经过所有这些艰苦的工作，现在手机只是在这里按下播放按钮                            

2655
06:41:33,040 --> 06:41:37,600
所以我想这样做，我想让它做它的事情，如果一切正常                            

2656
06:41:37,600 --> 06:41:42,160
正确，嗯，它基本上会允许                            

2657
06:41:42,160 --> 06:41:46,080
我们可以正常运行应用程序，所以现在它说                            

2658
06:41:46,080 --> 06:41:49,600
现在，这是一个你可能也会得到的对话                            

2659
06:41:49,600 --> 06:41:52,638
这里发生的事情是它试图签署应用程序和所有                            

2660
06:41:52,638 --> 06:41:56,558
使用该配置文件的库                            

2661
06:41:56,558 --> 06:42:00,080
发展概况，因为该发展概况是                            

2662
06:42:00,080 --> 06:42:04,638
链接到钥匙串中的开发证书，并且该钥匙串是                            

2663
06:42:04,638 --> 06:42:08,718
密码保护你看到登录钥匙串它说我无法访问                            

2664
06:42:08,718 --> 06:42:14,718
证书给我登录钥匙串的密码，所以我要输入                            

2665
06:42:14,718 --> 06:42:20,798
然后我会说总是允许所以让我们去做让它做它的事                            

2666
06:42:20,798 --> 06:42:25,360
这可能取决于您正在运行这个 uh 进程的机器                            

2667
06:42:25,360 --> 06:42:33,920
可能需要一些时间我才能看到它现在正在建造所以嗯                            

2668
06:42:33,920 --> 06:42:40,160
好的，然后我在这里遇到了实际故障，它说找不到云火库                            

2669
06:42:40,160 --> 06:42:43,920
这很有趣，实际上我的意思是我没有为此计划                            

2670
06:42:43,920 --> 06:42:48,478
发生了，但它确实发生了，我很高兴它发生了                            

2671
06:42:48,478 --> 06:42:53,360
这通常发生在你嗯                            

2672
06:42:53,360 --> 06:42:57,200
当您向项目添加新的依赖项时，例如这些大依赖项                            

2673
06:42:57,200 --> 06:43:01,280
但它们还没有真正链接到你的项目，所以解决这个问题的方法是                            

2674
06:43:01,280 --> 06:43:04,878
我要让 xcode 在这里 好吧 我要关门了                            

2675
06:43:04,878 --> 06:43:08,718
这我要带一个终端呃我是什么                            

2676
06:43:08,718 --> 06:43:13,760
要说这里是颤抖清洁我清洁                            

2677
06:43:13,760 --> 06:43:17,840
ios 或 clear ios 我觉得很干净                            

2678
06:43:17,840 --> 06:43:22,400
所以这基本上是要清理 ios 项目的设置方式和所有                            

2679
06:43:22,400 --> 06:43:25,600
这些依赖关系现在我也将关闭 xcode                            

2680
06:43:25,600 --> 06:43:32,160
那么我要说的是flutter pop get                            

2681
06:43:32,160 --> 06:43:37,440
和flutter pop得到它的作用是它设置了我们所有的依赖项                            

2682
06:43:37,440 --> 06:43:40,958
开始，只是为了确保我要进入 ios                            

2683
06:43:40,958 --> 06:43:46,558
文件夹，我要说 pod install                            

2684
06:43:46,558 --> 06:43:50,750
并且不能兼容版本好的 pod                            

2685
06:43:50,750 --> 06:43:52,958
[音乐] 安装                            

2686
06:43:52,958 --> 06:43:58,478
破折号更新回购呃                            

2687
06:43:58,478 --> 06:44:02,798
热安装，呃，让我们看看我们是否可以做一个更新回购                            

2688
06:44:02,798 --> 06:44:08,080
我只是会那样做，呃，现在不想解释太多，看看                            

2689
06:44:08,080 --> 06:44:11,760
如果这能解决我们的问题，我将打开一个新的 safari 窗口并说                            

2690
06:44:11,760 --> 06:44:15,280
pod install update repo 让我们看看命令是什么，但因为我已经                            

2691
06:44:15,280 --> 06:44:20,478
忘记了                            

2692
06:44:20,478 --> 06:44:28,718
我们有什么更新是的，让我们典当安装                            

2693
06:44:28,718 --> 06:44:32,558
我相信有一个变种                            

2694
06:44:32,558 --> 06:44:38,320
repo update 它被称为ok pot install repo update 让我们看看这是否解决了我们的问题                            

2695
06:44:38,320 --> 06:44:42,478
问题，如果 cisco 找不到兼容的                            

2696
06:44:42,478 --> 06:44:45,920
来自 blah blah 的 podcloud firestore 版本                            

2697
06:44:45,920 --> 06:44:51,040
找到了满足依赖项的规范，但它们需要更高的最小值                            

2698
06:44:51,040 --> 06:44:53,680
部署目标，这很有趣                            

2699
06:44:53,680 --> 06:44:57,040
所以这里发生的是                            

2700
06:44:57,040 --> 06:45:02,320
您会看到我们的应用程序的部署目标，嗯，它是什么                            

2701
06:45:02,320 --> 06:45:06,080
意思就是当我们用flutter创建项目的时候                            

2702
06:45:06,080 --> 06:45:10,320
颤振说它在内部做的是说                            

2703
06:45:10,320 --> 06:45:14,718
这个颤振应用程序应该在这些 ios 版本和这些 android 上运行                            

2704
06:45:14,718 --> 06:45:19,280
版本，我们在这里看到的是                            

2705
06:45:19,280 --> 06:45:22,718
我们在这里看到的是我们正在使用 cloud firestore 和 cloud                            

2706
06:45:22,718 --> 06:45:26,638
firestore 作为依赖项期望我们的应用程序具有最低要求                            

2707
06:45:26,638 --> 06:45:30,798
部署版本这意味着云火存储不能在应用程序中使用                            

2708
06:45:30,798 --> 06:45:35,760
例如，正在尝试在 ios 7 上运行，所以我们需要                            

2709
06:45:35,760 --> 06:45:40,958
要在您的 um flutter 项目中执行此操作，只需在 Visual Studio 代码中说命令 p                            

2710
06:45:40,958 --> 06:45:46,638
并打开一个名为 um pod file 的文件                            

2711
06:45:46,638 --> 06:45:49,680
你进去看看                            

2712
06:45:49,680 --> 06:45:55,200
在这里，我们设置了一些东西，让我们进入这里，只说平台 ios 和                            

2713
06:45:55,200 --> 06:45:59,600
我们要做的只是说平台 ios 13                            

2714
06:45:59,600 --> 06:46:06,080
刚才我的意思是 13 真的很好，因为现在 ios 15 可用                            

2715
06:46:06,080 --> 06:46:10,638
所以你可以说你支持 15 14 和 13。所以我会这样做                            

2716
06:46:10,638 --> 06:46:15,040
然后我将再次运行 pod install                            

2717
06:46:15,040 --> 06:46:19,680
这一次我可以看到事情变得更好并且正在安装                            

2718
06:46:19,680 --> 06:46:23,440
我们所有的依赖都没有问题，所以                            

2719
06:46:23,440 --> 06:46:27,680
嗯，你现在需要知道我在这里所做的事情，你可能                            

2720
06:46:27,680 --> 06:46:31,440
如果您对 ios 开发感到满意，则需要这样做，因此您需要修复                            

2721
06:46:31,440 --> 06:46:35,600
这些问题是手工解决的，但在我解释我实际上做了什么之前                            

2722
06:46:35,600 --> 06:46:38,000
你需要知道一个叫做 pod 的东西                            

2723
06:46:38,000 --> 06:46:42,000
我在前面的章节中解释了我们什么时候开始的                            

2724
06:46:42,000 --> 06:46:45,760
第 8 章，当我们谈到依赖时                            

2725
06:46:45,760 --> 06:46:50,080
flutter can in 可以创建ios应用程序 ios                            

2726
06:46:50,080 --> 06:46:56,400
应用程序依赖项基本上是使用呃可可豆荚                            

2727
06:46:56,400 --> 06:47:01,680
所以cocoapods是一个ios应用的依赖管理系统                            

2728
06:47:01,680 --> 06:47:04,638
你只需要知道                            

2729
06:47:04,638 --> 06:47:08,400
你需要为了能够做我刚刚做的伎俩你需要                            

2730
06:47:08,400 --> 06:47:12,160
安装 cocoapods 并且有一个很好的网站我的意思是你可以我会                            

2731
06:47:12,160 --> 06:47:19,280
调出我的，我说安装 cocoapods 然后我去这里你就说                            

2732
06:47:19,280 --> 06:47:23,520
cocoapods 然后有一个你需要在你的电脑中发出的命令                            

2733
06:47:23,520 --> 06:47:30,080
为了安装 cocoapods 好吧，在你安装 cocoapods 之后                            

2734
06:47:30,080 --> 06:47:32,878
然后你可以进入你的 ios 项目并喜欢                            

2735
06:47:32,878 --> 06:47:37,920
要求它重新安装您的依赖项，所以这里的关键是我要                            

2736
06:47:37,920 --> 06:47:42,478
在管理我的依赖项的 pod 文件中取消注释此平台行                            

2737
06:47:42,478 --> 06:47:47,760
所以我现在只想说我至少支持 ios 13                            

2738
06:47:47,760 --> 06:47:53,920
好的，然后我手动要求 io 重新创建 ios 的项目                            

2739
06:47:53,920 --> 06:47:58,240
使用 pod install repo update 重新创建项目                            

2740
06:47:58,240 --> 06:48:00,878
所以在你完成了你的依赖之后                            

2741
06:48:00,878 --> 06:48:04,558
已生成，然后我将再次右键单击 ios                            

2742
06:48:04,558 --> 06:48:08,160
我会说哦，我可以说在 xcode 中打开，这很有趣                            

2743
06:48:08,160 --> 06:48:10,958
工作 我不敢对你诚实 那样做                            

2744
06:48:10,958 --> 06:48:16,160
揭示发现者，然后我将这样做并打开一个项目，所以                            

2745
06:48:16,160 --> 06:48:22,320
我现在要去执行命令我执行命令 b 也许不让我们只是                            

2746
06:48:22,320 --> 06:48:25,600
直接运行它                            

2747
06:48:25,600 --> 06:48:29,040
所以我要调出xcode并按                            

2748
06:48:29,040 --> 06:48:32,320
再次运行，让我们看看它是否可以找到                            

2749
06:48:32,320 --> 06:48:36,400
以前找不到的那些依赖项                            

2750
06:48:36,400 --> 06:48:39,520
所以我们要                            

2751
06:48:39,520 --> 06:48:44,558
让它做它的事情，你可以看到它可能需要一些时间                            

2752
06:48:44,558 --> 06:48:47,840
因为我们拖入了很多依赖项                            

2753
06:48:47,840 --> 06:48:53,200
我认为有firebase关闭我们有firebase核心我们有云                            

2754
06:48:53,200 --> 06:48:56,958
firestore 和 firebase 分析，因此这些依赖项                            

2755
06:48:56,958 --> 06:49:01,040
他们自己可以带来很多其他的依赖，所以                            

2756
06:49:01,040 --> 06:49:05,600
嗯，重要的是，然后要知道                            

2757
06:49:05,600 --> 06:49:08,478
正如我在第八章的前一章中提到的，带来依赖                            

2758
06:49:08,478 --> 06:49:10,558
不仅仅是所有                            

2759
06:49:10,558 --> 06:49:13,920
天空中的蝴蝶和气球实际上是你需要的一个严肃的过程                            

2760
06:49:13,920 --> 06:49:17,840
考虑带来依赖的因素对您和您的团队意味着什么                            

2761
06:49:17,840 --> 06:49:20,878
和你的申请，所以在这种情况下，我们只带来了                            

2762
06:49:20,878 --> 06:49:25,040
谷歌和谷歌正式完成的依赖是flutter的背后                            

2763
06:49:25,040 --> 06:49:28,160
所以我认为                            

2764
06:49:28,160 --> 06:49:32,478
你基本上可以相信任何与firebase有关的东西，至少这样                            

2765
06:49:32,478 --> 06:49:37,840
如果它是由在 firebase 上工作的谷歌团队发布的                            

2766
06:49:37,840 --> 06:49:42,478
嗯，所以我们要让它做它的事情我要点击这里，我可以看到                            

2767
06:49:42,478 --> 06:49:47,120
它正在构建大量文件                            

2768
06:49:47,120 --> 06:49:50,718
如果一切按我们的计划进行                            

2769
06:49:50,718 --> 06:49:53,680
那么结果将是                            

2770
06:49:53,680 --> 06:49:58,320
应用程序在这部手机上运行所以嗯                            

2771
06:49:58,320 --> 06:50:01,760
看看这是否会真的很令人兴奋                            

2772
06:50:01,760 --> 06:50:07,440
按照我们的意图和我提到的那样工作，具体取决于                            

2773
06:50:07,440 --> 06:50:10,240
您正在使用此过程的计算机可能需要                            

2774
06:50:10,240 --> 06:50:14,400
一开始至少有相当多的时间                            

2775
06:50:14,400 --> 06:50:17,200
因此，如果您有一台功能强大的计算机，则可能需要更少的时间，如果您有一台                            

2776
06:50:17,200 --> 06:50:20,240
功能稍弱的计算机可能需要更多时间                            

2777
06:50:20,240 --> 06:50:23,520
嗯，现在我们正在等待，我也应该                            

2778
06:50:23,520 --> 06:50:28,878
可能会提到这个等待的过程只是最初                            

2779
06:50:28,878 --> 06:50:33,280
构建完成后您需要做的事情                            

2780
06:50:33,280 --> 06:50:36,958
有点像它的工件将被缓存在您的计算机中                            

2781
06:50:36,958 --> 06:50:41,680
这样您就不必从头开始重建整个项目好吗                            

2782
06:50:41,680 --> 06:50:44,558
所以嗯                            

2783
06:50:44,558 --> 06:50:49,360
我会让它做它的事情，呃，当我们在等待时，实际上我们                            

2784
06:50:49,360 --> 06:50:53,840
可以谈谈我带来的关于 quicktime 的说明                            

2785
06:50:53,840 --> 06:50:58,400
如果您像我一样喜欢在真实手机上调试您的应用程序                            

2786
06:50:58,400 --> 06:51:03,920
那么您可能想要查看或显示您的手机屏幕                            

2787
06:51:03,920 --> 06:51:07,360
并在您的计算机上，例如，如果                            

2788
06:51:07,360 --> 06:51:11,760
您正在与同事共享您的计算机作为屏幕，而他或她想要                            

2789
06:51:11,760 --> 06:51:16,000
还可以查看您需要使用的手机上运行的应用程序                            

2790
06:51:16,000 --> 06:51:19,840
一种叫做 quicktime 的网络 quicktime                            

2791
06:51:19,840 --> 06:51:22,558
所以我们现在要谈谈这个，但在我们这样做之前，让我先展示一下                            

2792
06:51:22,558 --> 06:51:27,840
你现在是我们的颤振应用程序                            

2793
06:51:27,840 --> 06:51:31,520
在这个电话上运行所以                            

2794
06:51:31,520 --> 06:51:34,478
好了，我们的应用程序现在正在运行                            

2795
06:51:34,478 --> 06:51:38,240
现在我们已经完成了所有这一切，你不再需要 xcode 所以我                            

2796
06:51:38,240 --> 06:51:41,920
只是要在这里停下来，我要做什么，我实际上要去做                            

2797
06:51:41,920 --> 06:51:47,040
从 Visual Studio 代码或 Flutter 应用程序运行我们的应用程序                            

2798
06:51:47,040 --> 06:51:50,958
iphone 没问题，所以命令 shift b 或控制 shift b 取决于哪个                            

2799
06:51:50,958 --> 06:51:53,440
您正在使用的平台并说选择设备                            

2800
06:51:53,440 --> 06:51:57,760
我要选择我的 iphone 12 pro 然后我要去跑步并说跑步                            

2801
06:51:57,760 --> 06:52:01,840
没有调试你没有任何扩展哦不                            

2802
06:52:01,840 --> 06:52:05,680
这个文件打开你的主 darp 文件                            

2803
06:52:05,680 --> 06:52:11,840
然后说运行运行而不调试，你会看到它说启动                            

2804
06:52:11,840 --> 06:52:16,160
所以这实际上是要咨询 xcode 并说嘿 xcode 这里是                            

2805
06:52:16,160 --> 06:52:22,478
颤振应用程序在这部手机上运行它                            

2806
06:52:22,478 --> 06:52:25,200
所以                            

2807
06:52:25,200 --> 06:52:27,840
老实说，我实际上不喜欢它使用的这个                            

2808
06:52:27,840 --> 06:52:31,360
自动签名它可能发生的事情是，当                            

2809
06:52:31,360 --> 06:52:36,400
我们确实拍得很干净，你可能搞砸了我们的                            

2810
06:52:36,400 --> 06:52:40,638
对你说实话，这不是一个好兆头                            

2811
06:52:40,638 --> 06:52:45,040
当我确实清理干净时，它实际上弄乱了配置文件                            

2812
06:52:45,040 --> 06:52:49,840
所以我要再次打开 xcode 并再次打开我们的应用程序，让我们                            

2813
06:52:49,840 --> 06:52:54,878
看看我们的配置文件，我可以看到调试，没关系，没关系                            

2814
06:52:54,878 --> 06:52:58,958
不是自动签名，所以你不必担心这个                            

2815
06:52:58,958 --> 06:53:03,680
呃由颤动打印到屏幕上的消息所以我不认为这是                            

2816
06:53:03,680 --> 06:53:09,120
我们需要担心的事情，所以既然你已经设置好了，那么你                            

2817
06:53:09,120 --> 06:53:12,798
实际上可以直接从                            

2818
06:53:12,798 --> 06:53:16,400
Visual Studio 代码或 android Studio，具体取决于您所在的环境                            

2819
06:53:16,400 --> 06:53:19,760
运行你的颤振应用程序或调试你的                            

2820
06:53:19,760 --> 06:53:26,878
好的应用程序现在让我们说这已经完成了                            

2821
06:53:26,878 --> 06:53:30,558
那么如果你想镜像你的应用程序你需要做什么                            

2822
06:53:30,558 --> 06:53:34,478
屏幕上你的电脑然后你可以调出一个叫做快速时间的东西                            

2823
06:53:34,478 --> 06:53:39,600
macintosh 上的播放器，然后转到文件，然后说现在正在录制电影                            

2824
06:53:39,600 --> 06:53:44,558
这可能会劫持我的不它没有劫持任何东西然后我                            

2825
06:53:44,558 --> 06:53:49,120
去iphone 12 pro看看能不能镜像                            

2826
06:53:49,120 --> 06:53:52,320
那部电话给我                            

2827
06:53:52,320 --> 06:53:55,680
呃                            

2828
06:53:55,680 --> 06:53:59,520
是不是不能这样做是因为我正在录制我的屏幕或我正在录制的东西                            

2829
06:53:59,520 --> 06:54:02,638
实际上会[音乐]                            

2830
06:54:02,638 --> 06:54:08,400
等待此调试过程继续                            

2831
06:54:08,400 --> 06:54:11,840
让我们先做它的事情我想我可能试图做太多的事情                            

2832
06:54:11,840 --> 06:54:15,060
在同一时间                            

2833
06:54:15,060 --> 06:54:18,798
[鼓掌] 我代理我真的不知道我代理什么                            

2834
06:54:18,798 --> 06:54:22,000
是这样的                            

2835
06:54:22,000 --> 06:54:25,840
um 连接到 vm 服务占用                            

2836
06:54:25,840 --> 06:54:28,878
比预期更长，这可能是因为我的 Macintosh 是                            

2837
06:54:28,878 --> 06:54:33,280
实际上阻​​止了 flopper 需要的东西，所以我要在这里保护隐私                            

2838
06:54:33,280 --> 06:54:36,878
这是安全和隐私，只​​是让 iproxy 运行                            

2839
06:54:36,878 --> 06:54:41,360
无论如何都允许这样可能有助于颤振然后得到它                            

2840
06:54:41,360 --> 06:54:46,798
过程工作                            

2841
06:54:46,798 --> 06:54:51,680
是的，这可能是因为也许我的 Macintosh 刚刚阻止了那个眼睛代理所以                            

2842
06:54:51,680 --> 06:54:55,680
我要停止这个过程，我只想说运行运行而不调试                            

2843
06:54:55,680 --> 06:55:00,958
再次让我们看看它这次是否可以完成它的工作                            

2844
06:55:00,958 --> 06:55:04,080
启动，这一次，因为它实际上构建了应用程序                            

2845
06:55:04,080 --> 06:55:09,520
以前它应该不会花很长时间才能运行应用程序                            

2846
06:55:09,520 --> 06:55:13,680
所以它已经构建了一次应用程序，所以它不应该花这么长时间                            

2847
06:55:13,680 --> 06:55:16,000
时间                            

2848
06:55:16,000 --> 06:55:18,638
所以我现在可以看到它说安装和                            

2849
06:55:18,638 --> 06:55:21,600
发射                            

2850
06:55:21,600 --> 06:55:26,000
所以让我们看看我们能不能让它发挥作用                            

2851
06:55:26,000 --> 06:55:29,920
xcode 构建在 8 秒内完成，老实说，这需要                            

2852
06:55:29,920 --> 06:55:34,400
比我预期的要长，运行应用程序不需要这么长时间，我                            

2853
06:55:34,400 --> 06:55:37,920
可以看到这次没有被阻止 mac os 无法验证开发者                            

2854
06:55:37,920 --> 06:55:42,718
iproxy，我只想说 open 我认为有问题                            

2855
06:55:42,718 --> 06:55:47,600
最新版本的 mac os 以及它如何尝试验证                            

2856
06:55:47,600 --> 06:55:51,440
Flutter 在内部使用的各种工具，但是                            

2857
06:55:51,440 --> 06:55:55,680
最后一切都很好，我实际上可以从中启动应用程序                            

2858
06:55:55,680 --> 06:56:00,000
视觉工作室代码，现在它在我的 iPhone 中运行                            

2859
06:56:00,000 --> 06:56:04,400
现在我要停止这个所以现在应用程序只要我说停止应用程序就会运行                            

2860
06:56:04,400 --> 06:56:08,638
停止在那里工作我要做的就是去                            

2861
06:56:08,638 --> 06:56:12,000
quicktime 看看我们能不能得到 quicktime                            

2862
06:56:12,000 --> 06:56:16,638
实际上镜像这个 iphone 我要拔掉它                            

2863
06:56:16,638 --> 06:56:20,320
手机然后再插上看看                            

2864
06:56:20,320 --> 06:56:25,120
如果它知道它必须镜像手机                            

2865
06:56:25,120 --> 06:56:30,798
我可以看到我的快速时间也给我带来了一些麻烦                            

2866
06:56:30,798 --> 06:56:34,160
它崩溃了                            

2867
06:56:34,160 --> 06:56:38,718
我的意思是这是这次会议的现场录音，所以你可以看到所有的问题                            

2868
06:56:38,718 --> 06:56:41,680
开发人员将不得不修复，这就是我                            

2869
06:56:41,680 --> 06:56:48,718
所以让我们去嗯，看看我们能不能得到它                            

2870
06:56:48,718 --> 06:56:53,440
让我们看看我能不能得到它                            

2871
06:56:53,440 --> 06:56:56,958
认出这部手机                            

2872
06:56:56,958 --> 06:56:59,840
老实说，我的意思是我实际上是在单独的屏幕上执行此操作                            

2873
06:56:59,840 --> 06:57:03,280
所以你不必看我的脸，但我可以看到我的 Macintosh                            

2874
06:57:03,280 --> 06:57:07,840
原因是无法识别这部手机，所以我基本上无法在此记录                            

2875
06:57:07,840 --> 06:57:12,000
嗯嗯现在在这个屏幕上                            

2876
06:57:12,000 --> 06:57:16,000
但如果你在家里做这个，它可能会为你工作，所以呃                            

2877
06:57:16,000 --> 06:57:19,760
用电缆将手机连接到计算机，然后转到 quicktime player                            

2878
06:57:19,760 --> 06:57:23,440
然后用quicktime播放器说新电影录制和电影录制                            

2879
06:57:23,440 --> 06:57:29,120
只需从下拉菜单中选择您的选择您的嗯                            

2880
06:57:29,120 --> 06:57:33,840
手机，你就可以镜像你的屏幕，所以                            

2881
06:57:33,840 --> 06:57:38,080
嗯，现在已经完成了，我的意思是我们实际上                            

2882
06:57:38,080 --> 06:57:43,040
遇到了很多我没有计划的障碍，我们看到了 iproxy 的东西                            

2883
06:57:43,040 --> 06:57:46,000
发生在这里感谢它发生了                            

2884
06:57:46,000 --> 06:57:49,840
我们看到了 pod 安装的错误，这是                            

2885
06:57:49,840 --> 06:57:53,680
我们的项目，因为我们的 Flutter 项目没有设置最低版本                            

2886
06:57:53,680 --> 06:57:58,478
我们修复了我们看到配置文件没有被拾取的问题                            

2887
06:57:58,478 --> 06:58:02,718
自动，因为 xcode 已经自动创建了我们修复的证书                            

2888
06:58:02,718 --> 06:58:04,478
这么                            

2889
06:58:04,478 --> 06:58:08,798
我的意思是我现在可以去过滤掉这些                            

2890
06:58:08,798 --> 06:58:13,200
从视频中，有点像当我真正为你输出最后的课程时                            

2891
06:58:13,200 --> 06:58:16,718
那么一切都会完美地工作                            

2892
06:58:16,718 --> 06:58:19,840
你不必看到任何打嗝                            

2893
06:58:19,840 --> 06:58:22,798
但老实说，我不想那样做，因为我认为它是如此                            

2894
06:58:22,798 --> 06:58:26,400
重要的是你看看什么问题                            

2895
06:58:26,400 --> 06:58:30,558
当你发展你的想法或应用程序时，你会得到它很重要                            

2896
06:58:30,558 --> 06:58:34,878
我不想擦亮这个，嗯，我不想擦亮这个呃课程这么多                            

2897
06:58:34,878 --> 06:58:37,520
你认为一切从一开始就是完美的，如果                            

2898
06:58:37,520 --> 06:58:40,638
你是，如果你犯了错误，那么方式有问题                            

2899
06:58:40,638 --> 06:58:44,558
你正在开发东西，但这些事情发生了你需要了解为什么                            

2900
06:58:44,558 --> 06:58:48,558
它们发生然后你需要学习如何修复它们                            

2901
06:58:48,558 --> 06:58:50,878
话虽如此，呃                            

2902
06:58:50,878 --> 06:58:54,798
我想那我们很高兴为 ios 我们已经解释过                            

2903
06:58:54,798 --> 06:58:58,798
我们需要解释的一切，嗯，一切正常，除了                            

2904
06:58:58,798 --> 06:59:01,600
快速时间的事情，我认为那是因为                            

2905
06:59:01,600 --> 06:59:05,920
嗯，我实际上我在这里打开了很多软件我正在玩停止播放                            

2906
06:59:05,920 --> 06:59:09,760
记录东西的东西，所以可能是因为它有点混乱                            

2907
06:59:09,760 --> 06:59:12,958
谁知道也许我的电脑需要重新启动                            

2908
06:59:12,958 --> 06:59:15,520
嗯所以说让我们准备                            

2909
06:59:15,520 --> 06:59:18,558
我们自己为下一章，那就是                            

2910
06:59:18,558 --> 06:59:23,520
希望现在用更少的解释为 ios 做同样的事情                            

2911
06:59:23,520 --> 06:59:27,440
我们已经了解了 android 的基础知识，所以                            

2912
06:59:27,440 --> 06:59:31,600
呃，随便拿一杯茶杯咖啡，我们下期见                            

2913
06:59:31,600 --> 06:59:34,798
你好，欢迎来到第 10 章                            

2914
06:59:34,798 --> 06:59:37,600
本章我们要学习的flutter课程                            

2915
06:59:37,600 --> 06:59:40,478
设置我们的安卓手机                            

2916
06:59:40,478 --> 06:59:44,320
或您手头上的任何安卓设备，以便我们能够                            

2917
06:59:44,320 --> 06:59:49,440
在上面运行我们的颤振代码，现在在第 9 章中，我们研究了如何运行                            

2918
06:59:49,440 --> 06:59:53,200
应用程序并基本上运行我们的闪存应用程序                            

2919
06:59:53,200 --> 06:59:58,878
在 ios 设备上，我们设置了我们设置的配置文件                            

2920
06:59:58,878 --> 07:00:03,120
证书还有什么应用程序ID                            

2921
07:00:03,120 --> 07:00:07,920
在应用商店可以在嗯苹果的开发者网站上                            

2922
07:00:07,920 --> 07:00:12,638
我的意思是有很多工作要做，你知道那一章花了大约一个小时                            

2923
07:00:12,638 --> 07:00:16,400
解释一切，但当涉及到                            

2924
07:00:16,400 --> 07:00:20,240
android方面的事情要容易得多                            

2925
07:00:20,240 --> 07:00:22,958
所以我想在这一章我们会                            

2926
07:00:22,958 --> 07:00:27,520
看看我们如何拥有一部安卓手机，例如在我的                            

2927
07:00:27,520 --> 07:00:35,840
案例在这里，我有一个用 USB 电缆连接到我的 oneplus pro 7 pro                            

2928
07:00:35,840 --> 07:00:40,478
电脑，所以没有什么特别之处，它只是一部安卓手机                            

2929
07:00:40,478 --> 07:00:44,478
嗯，我更喜欢实际上正如我在                            

2930
07:00:44,478 --> 07:00:48,638
我个人在开发时更喜欢第 9 章中的上一章                            

2931
07:00:48,638 --> 07:00:53,920
应用程序来开发牙线应用程序来运行我的                            

2932
07:00:53,920 --> 07:00:59,440
我现在正在测试的真实手机或真实设备上的应用程序                            

2933
07:00:59,440 --> 07:01:02,958
嗯，如果您来自设计背景或                            

2934
07:01:02,958 --> 07:01:08,798
以前与移动开发无关的背景，但                            

2935
07:01:08,798 --> 07:01:12,240
嗯，如果你正在开发应用程序                            

2936
07:01:12,240 --> 07:01:16,718
只有 ios 然后你有一个叫做 ios 模拟器的东西                            

2937
07:01:16,718 --> 07:01:22,080
嗯，一个 io 模拟器是一个在你的 macintosh 上运行的程序，它附带                            

2938
07:01:22,080 --> 07:01:28,160
xcode 和 ios sdk，它允许您模拟 ios 内部的工作方式以及它                            

2939
07:01:28,160 --> 07:01:33,840
允许您直接从 xcode 或从 Flutter 安装应用程序                            

2940
07:01:33,840 --> 07:01:39,200
直接进入模拟器并基本上模拟您的应用程序将如何                            

2941
07:01:39,200 --> 07:01:44,240
如果您正在开发应用程序，您的实际用户会感知到                            

2942
07:01:44,240 --> 07:01:50,558
android 然后有一个叫做 android 模拟器的东西现在模拟器是                            

2943
07:01:50,558 --> 07:01:55,520
与模拟器完全不同的是，模拟器正如其名称所表明的那样                            

2944
07:01:55,520 --> 07:01:59,600
实际上试图模拟有关操作系统和                            

2945
07:01:59,600 --> 07:02:05,440
设备，例如用于旧设备的 android 模拟器                            

2946
07:02:05,440 --> 07:02:09,840
你可能会得到一个五六岁的设备                            

2947
07:02:09,840 --> 07:02:15,680
它实际上会比安卓模拟器慢很多                            

2948
07:02:15,680 --> 07:02:18,798
现代设备，但你有没有做过同样的事情                            

2949
07:02:18,798 --> 07:02:23,280
ios模拟器并模拟了一个使用了五年的ios设备                            

2950
07:02:23,280 --> 07:02:29,280
它仍然会在今天像在你的电脑上一样运行                            

2951
07:02:29,280 --> 07:02:34,558
速度，因为它正在模拟 ios 它实际上并没有按照它的方式模拟它                            

2952
07:02:34,558 --> 07:02:38,240
真的可以在手机上使用，所以当谈到 android 你有这个                            

2953
07:02:38,240 --> 07:02:42,798
可以在更接近的模拟器上运行您的应用程序                            

2954
07:02:42,798 --> 07:02:47,040
您的用户将使用的实际设备                            

2955
07:02:47,040 --> 07:02:52,558
所以在大多数情况下它不是完美的副本，所以它不会像                            

2956
07:02:52,558 --> 07:02:58,718
与真正的实体手机完全​​一样工作，但它更接近实际                            

2957
07:02:58,718 --> 07:03:04,558
ios模拟器如此的物理设备                            

2958
07:03:04,558 --> 07:03:10,478
鉴于这种背景，我仍然更喜欢在真实的环境中运行我的颤振应用程序                            

2959
07:03:10,478 --> 07:03:13,840
电话和本章                            

2960
07:03:13,840 --> 07:03:17,440
如果你对此感兴趣 如果你有安卓手机并且你                            

2961
07:03:17,440 --> 07:03:22,478
例如，想在安卓手机上部署你的颤振应用程序并进行测试                            

2962
07:03:22,478 --> 07:03:27,280
当你在编程的时候，这一章就是为你准备的                            

2963
07:03:27,280 --> 07:03:32,000
现在我也不得不说嗯                            

2964
07:03:32,000 --> 07:03:34,240
意思是[音乐]                            

2965
07:03:34,240 --> 07:03:37,840
你不，你不必这样做，但为了                            

2966
07:03:37,840 --> 07:03:42,718
整个这门课程我实际上将成为                            

2967
07:03:42,718 --> 07:03:47,440
当我们正在开发应用程序时，我将亲自去笔记应用程序                            

2968
07:03:47,440 --> 07:03:50,878
使用我的安卓手机                            

2969
07:03:50,878 --> 07:03:55,680
所以嗯，所以我们基本上做热重装和                            

2970
07:03:55,680 --> 07:03:58,478
然后我们写一些代码，我们想测试它我不打算展示任何                            

2971
07:03:58,478 --> 07:04:01,360
模拟器我不打算展示任何模拟器我实际上要展示我的                            

2972
07:04:01,360 --> 07:04:05,360
真正的安卓手机现在可以工作了，我不会只用它来展示它                            

2973
07:04:05,360 --> 07:04:08,160
就像我不会安装应用程序一样                            

2974
07:04:08,160 --> 07:04:11,360
在这里，只是像这样向您展示，因为这行不通，这不是                            

2975
07:04:11,360 --> 07:04:16,160
向观看本课程的人展示东西的好方法那又如何                            

2976
07:04:16,160 --> 07:04:20,160
我们要做的就是第一个                            

2977
07:04:20,160 --> 07:04:26,478
在这个呃章节中的任务我们将在我们的 um 上安装一个应用程序                            

2978
07:04:26,478 --> 07:04:30,718
电脑叫 scrcpy 好                            

2979
07:04:30,718 --> 07:04:36,160
现在 srccp cpy 是一个开源项目                            

2980
07:04:36,160 --> 07:04:39,680
嗯，在 github 上                            

2981
07:04:39,680 --> 07:04:45,440
数千颗星星，它不像依赖，它不是什么                            

2982
07:04:45,440 --> 07:04:48,000
你将要构建到你的颤振应用程序中，但它实际上是                            

2983
07:04:48,000 --> 07:04:52,000
你要在你的电脑上安装的实用程序                            

2984
07:04:52,000 --> 07:04:57,680
您的计算机将能够镜像您的 android                            

2985
07:04:57,680 --> 07:05:02,718
手机或你的安卓平板电脑在你的电脑屏幕上，所以                            

2986
07:05:02,718 --> 07:05:06,638
这个 scr cpy 绝对漂亮，它是我最喜欢的之一                            

2987
07:05:06,638 --> 07:05:10,160
进行移动开发时的实用程序                            

2988
07:05:10,160 --> 07:05:13,520
而这背后的原因是，与                            

2989
07:05:13,520 --> 07:05:16,400
嗯，我之前展示的解决方案                            

2990
07:05:16,400 --> 07:05:21,600
章节是 quicktime quicktime 播放器，您可以在其中镜像您的 ios                            

2991
07:05:21,600 --> 07:05:26,878
电话在您的计算机上，但您无法与该镜像交互                            

2992
07:05:26,878 --> 07:05:30,160
您仍然需要拿起电话并与                            

2993
07:05:30,160 --> 07:05:33,840
电话并查看电话本身或您的互动                            

2994
07:05:33,840 --> 07:05:39,280
screen 与 scrcpy 不同，它允许您实际与手机交互或                            

2995
07:05:39,280 --> 07:05:42,080
你的平板电脑或你的安卓手机或平板电脑                            

2996
07:05:42,080 --> 07:05:46,240
从您的计算机屏幕上，这样您就可以实际拿起鼠标，然后转到                            

2997
07:05:46,240 --> 07:05:50,878
那个屏幕并点击一个按钮，它实际上会点击你的那个按钮                            

2998
07:05:50,878 --> 07:05:55,200
安卓手机所以很神奇很漂亮它是开放的                            

2999
07:05:55,200 --> 07:05:59,520
来源和免费所以如果你有一个安卓平板电脑或安卓手机和                            

3000
07:05:59,520 --> 07:06:03,840
                           

