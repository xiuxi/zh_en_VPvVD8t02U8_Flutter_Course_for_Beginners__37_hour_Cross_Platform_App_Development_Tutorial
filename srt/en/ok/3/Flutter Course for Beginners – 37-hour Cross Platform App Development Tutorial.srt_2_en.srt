1
03:34:57,760 --> 03:35:00,800
um so let's say switch

2
03:35:00,800 --> 03:35:05,600
you put parenthesis open close and then open close curly brackets and in here

3
03:35:05,600 --> 03:35:09,040
you would put your narration so you say animal type okay

4
03:35:09,040 --> 03:35:13,120
and the way to handle these different branches then is with the case uh

5
03:35:13,120 --> 03:35:17,120
keyword you'd say in the case of animal type

6
03:35:17,120 --> 03:35:19,760
money print

7
03:35:19,760 --> 03:35:23,359
uh money sound like this okay

8
03:35:23,359 --> 03:35:26,560
case animal type a cat

9
03:35:26,560 --> 03:35:29,920
print cat

10
03:35:29,920 --> 03:35:33,520
and case animal type

11
03:35:33,520 --> 03:35:39,680
og print dog

12
03:35:39,680 --> 03:35:42,160
just like that okay now

13
03:35:42,160 --> 03:35:46,560
this is i'm great i'm actually grateful that we're getting this uh error so you

14
03:35:46,560 --> 03:35:50,640
can clearly see what it says is the case should not complete normally try adding

15
03:35:50,640 --> 03:35:54,960
break or return now what this is saying that you see in

16
03:35:54,960 --> 03:35:59,200
many programming languages just like dark when the program comes here to the

17
03:35:59,200 --> 03:36:03,680
case statement it kind of like falls through to the next line and dart tries

18
03:36:03,680 --> 03:36:07,920
to avoid that so it says okay if i handle bunny then i'm doing some stuff

19
03:36:07,920 --> 03:36:11,279
but it kind of feels like i'm like falling down to the next line after this

20
03:36:11,279 --> 03:36:15,600
because you didn't tell me what to do after the print statement so you either

21
03:36:15,600 --> 03:36:18,640
tell me to like completely go out of this

22
03:36:18,640 --> 03:36:23,120
function go out of the test function by putting the return keyword here we

23
03:36:23,120 --> 03:36:27,040
haven't talked about return really yet but you could do that you could just say

24
03:36:27,040 --> 03:36:31,439
okay return right after all of these so i'm just going to press command s

25
03:36:31,439 --> 03:36:35,279
and you will see cat being printed to screen which is here okay

26
03:36:35,279 --> 03:36:38,000
but if you didn't have this return statement statement here you would get

27
03:36:38,000 --> 03:36:40,479
an error okay so

28
03:36:40,479 --> 03:36:45,520
you either say return or you would use the break keyword now

29
03:36:45,520 --> 03:36:48,560
there's a difference between these let's put a print statement here and i'm going

30
03:36:48,560 --> 03:36:53,520
to say function is finished okay so i'm kind of expecting that

31
03:36:53,520 --> 03:36:56,640
by executing our

32
03:36:56,640 --> 03:37:02,640
our code here our test function here passing the value of cat at the moment

33
03:37:02,640 --> 03:37:07,359
that we fall into the switch we check that this is cat and then print

34
03:37:07,359 --> 03:37:11,279
the cat and then we return okay this is kind of

35
03:37:11,279 --> 03:37:15,439
what it is doing it means that it kind of skips over this print statement and

36
03:37:15,439 --> 03:37:19,520
you'll see soon if i say command s it will just say cat and then we'll return

37
03:37:19,520 --> 03:37:22,720
from that so this is not really what i wanted i

38
03:37:22,720 --> 03:37:26,640
wanted this switch statement to be executed print cat and then continue

39
03:37:26,640 --> 03:37:31,439
after switch okay and that's where you use the break statement so

40
03:37:31,439 --> 03:37:35,920
or the key word here so if you say break it breaks out of the switch statement

41
03:37:35,920 --> 03:37:39,840
and then continues with the rest of the function as it as you would expect so if

42
03:37:39,840 --> 03:37:44,640
i press command s here you say cat and then function is finished all right

43
03:37:44,640 --> 03:37:48,479
so switch is the preferred way of working

44
03:37:48,479 --> 03:37:51,840
with um enumerations especially if you're doing

45
03:37:51,840 --> 03:37:56,000
branches so you could also like um

46
03:37:56,000 --> 03:38:01,040
for instance if in this case he said uh pray make sure

47
03:38:01,040 --> 03:38:04,080
this is is a cat

48
03:38:04,080 --> 03:38:08,880
you could also in this case say if animal type

49
03:38:08,880 --> 03:38:12,800
is not animal type chats

50
03:38:12,800 --> 03:38:17,680
and you would return okay you could do this as well so this is kind of like

51
03:38:17,680 --> 03:38:20,479
a conditional statement that you're putting in the beginning of your

52
03:38:20,479 --> 03:38:25,760
function making making sure that any code executed after line 10

53
03:38:25,760 --> 03:38:29,199
is completely sure that the animal type is

54
03:38:29,199 --> 03:38:33,680
a cat okay so in that case you may just use a typical if statement so you don't

55
03:38:33,680 --> 03:38:39,920
have to do switches okay but if you're trying to execute spec special pieces of

56
03:38:39,920 --> 03:38:44,319
code depending on which value this enumeration contains at

57
03:38:44,319 --> 03:38:47,199
the moment then i highly suggest that you use

58
03:38:47,199 --> 03:38:51,920
switch statement instead of if statement all right so kind of depends on your on

59
03:38:51,920 --> 03:38:57,120
your use case all right okay i'm just going to mark this item as

60
03:38:57,120 --> 03:39:02,720
done in my notes now let's talk about classes all right

61
03:39:02,720 --> 03:39:07,439
which is one of my favorite topics to talk about actually

62
03:39:07,439 --> 03:39:10,160
um well classes in

63
03:39:10,160 --> 03:39:14,720
uh dart and in many other languages let's actually bring this back to how it

64
03:39:14,720 --> 03:39:18,399
was before make it a test function all right

65
03:39:18,399 --> 03:39:23,520
and remove the animal type from here and remove them i can actually continue and

66
03:39:23,520 --> 03:39:27,439
we can actually as well okay

67
03:39:27,439 --> 03:39:35,680
so classes in dart are are grouping of various functionalities

68
03:39:35,680 --> 03:39:42,160
into one packageable piece of data and and by that i mean for instance

69
03:39:42,160 --> 03:39:45,680
let's say that you have a function called run

70
03:39:45,680 --> 03:39:50,479
another function called breathe and then you have a person's first name

71
03:39:50,479 --> 03:39:54,080
a person's last name of course you could go and define these

72
03:39:54,080 --> 03:39:57,520
things like this you could say khan's first name

73
03:39:57,520 --> 03:40:01,199
yeah something and khan's last name is something

74
03:40:01,199 --> 03:40:05,120
like this okay

75
03:40:05,120 --> 03:40:10,239
um just like that and then you could have a function and sorry you would say

76
03:40:10,239 --> 03:40:12,960
run um and then you'd have another function

77
03:40:12,960 --> 03:40:16,319
called breathe

78
03:40:16,319 --> 03:40:20,640
you can do that but these are functions that are kind of like for us in this

79
03:40:20,640 --> 03:40:24,479
particular case or at least in my head at the moment i'm imagining these

80
03:40:24,479 --> 03:40:27,680
functions to be related to a person

81
03:40:27,680 --> 03:40:30,800
and that person can run that person can breathe that person has a first name and

82
03:40:30,800 --> 03:40:35,520
last name so the grouping of these related things

83
03:40:35,520 --> 03:40:38,160
is done with a class

84
03:40:38,160 --> 03:40:42,160
in dart at least so the way to do that is you would say for

85
03:40:42,160 --> 03:40:46,399
instance class which is a keyword in dart

86
03:40:46,399 --> 03:40:49,600
let's say the name of the class now for the

87
03:40:49,600 --> 03:40:52,960
naming of classes and enumerations and any other

88
03:40:52,960 --> 03:40:56,160
entity except for variables and constants

89
03:40:56,160 --> 03:41:00,080
you should use um just normal casing you would i don't actually know if it's

90
03:41:00,080 --> 03:41:04,160
called pascal casing or i think so um

91
03:41:04,160 --> 03:41:08,560
but you would just use your upper case the first letter of every word okay so

92
03:41:08,560 --> 03:41:14,160
let's just say person okay this is how you would say a person

93
03:41:14,160 --> 03:41:18,319
class all right so i don't think actually we can put const

94
03:41:18,319 --> 03:41:22,880
in there i'm just gonna grab these two functions and just place them

95
03:41:22,880 --> 03:41:27,920
inside this person class all right and let's in this say print

96
03:41:27,920 --> 03:41:31,680
running run function and with reading we're

97
03:41:31,680 --> 03:41:34,800
going to say breathing all right

98
03:41:34,800 --> 03:41:38,800
and in the test function you would want to

99
03:41:38,800 --> 03:41:42,080
create something called an instance of this

100
03:41:42,080 --> 03:41:47,520
class now instances are objects and objects are

101
03:41:47,520 --> 03:41:52,560
created from classes so you need to understand how

102
03:41:52,560 --> 03:41:56,640
instantiation works in software development and this

103
03:41:56,640 --> 03:41:59,920
is for any programming language such as dart

104
03:41:59,920 --> 03:42:05,040
rust swift python javascript where

105
03:42:05,040 --> 03:42:08,319
they allow you to create classes

106
03:42:08,319 --> 03:42:13,920
and now that you know what a class is in order to use a class you need to

107
03:42:13,920 --> 03:42:18,000
usually create something called an instance of that class that means that

108
03:42:18,000 --> 03:42:21,040
you tell the programming language that okay here

109
03:42:21,040 --> 03:42:24,880
is the class i know about that but give me a copy of it

110
03:42:24,880 --> 03:42:27,760
so every class

111
03:42:27,760 --> 03:42:32,479
can be instantiated meaning that the dart compiler will create a copy of that

112
03:42:32,479 --> 03:42:37,120
exact class with its data its functions its properties and give that copy to you

113
03:42:37,120 --> 03:42:41,840
all right so that is called instantiation and it

114
03:42:41,840 --> 03:42:47,600
works by using the equal sign and creating putting a parenthesis

115
03:42:47,600 --> 03:42:50,960
at the end of the name of the class as i'll show you here so let's just say

116
03:42:50,960 --> 03:42:54,399
final and we say person

117
03:42:54,399 --> 03:42:58,239
which is the name of our variable in this case is equal to as i said equal

118
03:42:58,239 --> 03:43:01,760
sign then we would write the name of the class and parenthesis just like that

119
03:43:01,760 --> 03:43:04,960
okay so now you said a person variable in

120
03:43:04,960 --> 03:43:08,239
this case is an instance of that person class

121
03:43:08,239 --> 03:43:13,600
now you'll understand using dots and notation you could say person.run you

122
03:43:13,600 --> 03:43:16,319
see that function is now available on your

123
03:43:16,319 --> 03:43:19,600
instance of the person class and you would say person

124
03:43:19,600 --> 03:43:22,319
dot breathe okay

125
03:43:22,319 --> 03:43:28,160
so these are functions that are available at instance

126
03:43:28,160 --> 03:43:32,160
level of the person class i know there's a lot of words that i'm just talking

127
03:43:32,160 --> 03:43:35,840
about but i think you understand the point here so

128
03:43:35,840 --> 03:43:40,720
this is how you instantiate the person class and this is how you invoke various

129
03:43:40,720 --> 03:43:44,720
functions on that class so if i press command s you can see it says running

130
03:43:44,720 --> 03:43:49,439
and if you said in this case person

131
03:43:49,439 --> 03:43:53,120
and then without instantiating using their

132
03:43:53,120 --> 03:43:57,359
parenthesis if you said breathe you will get an error here instance

133
03:43:57,359 --> 03:44:00,840
member breathe can't be accessed using static axis

134
03:44:00,840 --> 03:44:04,800
okay and that's i mean that is kind of like

135
03:44:04,800 --> 03:44:09,680
instance member is an important term also to remember an instance member

136
03:44:09,680 --> 03:44:16,239
means some functionality that is only available at the instance level meaning

137
03:44:16,239 --> 03:44:20,080
that it's not available at the person class level but you have to make a copy

138
03:44:20,080 --> 03:44:24,080
of person in order to be able to access that all right

139
03:44:24,080 --> 03:44:26,720
so that's

140
03:44:26,720 --> 03:44:31,359
the basic of classes you can do a lot with classes as we will

141
03:44:31,359 --> 03:44:35,920
talk about soon so i'm just going to leave that person class right there

142
03:44:35,920 --> 03:44:40,800
and then just going to mark that as talked about

143
03:44:40,800 --> 03:44:45,520
in my notes as well and let's now talk a little bit a little

144
03:44:45,520 --> 03:44:49,439
bit about objects well

145
03:44:49,439 --> 03:44:53,680
objects are actually quite easy to explain an object is an instance of a

146
03:44:53,680 --> 03:44:58,880
class so you wouldn't like

147
03:44:58,880 --> 03:45:02,479
when someone says oh here's an object of type string it means literally that

148
03:45:02,479 --> 03:45:07,840
there is a class called string i've created an instance of it and

149
03:45:07,840 --> 03:45:13,600
and that is an object so the word instance the words instance and object

150
03:45:13,600 --> 03:45:19,359
are usually used interchangeably uh but if you hear someone say instantiate a

151
03:45:19,359 --> 03:45:25,279
class then you would say okay what's the class name oh it's person all right

152
03:45:25,279 --> 03:45:28,000
and person is now i created an instance okay and in

153
03:45:28,000 --> 03:45:30,640
this case you can see i'm just creating an instance of person without actually

154
03:45:30,640 --> 03:45:34,479
doing anything with it so that's got kind of like a useless object all right

155
03:45:34,479 --> 03:45:40,479
but if i put i say foo as a person then this

156
03:45:40,479 --> 03:45:45,279
foo now is an object of type of person and actually you can write its name here

157
03:45:45,279 --> 03:45:49,920
and you'll see that it tells you that this is a person okay

158
03:45:49,920 --> 03:45:54,399
so that in short is what um

159
03:45:54,399 --> 03:45:57,920
objects are

160
03:45:57,920 --> 03:46:02,479
and i can see my notes that objects need are kind of like in the wrong place i'm

161
03:46:02,479 --> 03:46:05,439
gonna bring it to the right place sorry about that um

162
03:46:05,439 --> 03:46:09,439
okay now

163
03:46:09,439 --> 03:46:14,399
let's talk a little bit about um constructors

164
03:46:14,399 --> 03:46:17,520
and i can see constructors also at the wrong place in my notes so i'm going to

165
03:46:17,520 --> 03:46:22,560
bring those also to the right place okay sorry about that

166
03:46:22,560 --> 03:46:26,720
um now what a constructor is at its name as

167
03:46:26,720 --> 03:46:30,080
its name indicates is a special

168
03:46:30,080 --> 03:46:37,199
logic in a class that constructs or initializes or builds that class's

169
03:46:37,199 --> 03:46:41,680
instance all right so you may say that okay let's go to our

170
03:46:41,680 --> 03:46:44,399
function here as to our class here person

171
03:46:44,399 --> 03:46:49,760
and let's say every person has a first name or name okay so let's just

172
03:46:49,760 --> 03:46:54,239
define that we say final string name all right as you can see now dart is saying

173
03:46:54,239 --> 03:46:57,840
okay you said that every person has a name but

174
03:46:57,840 --> 03:47:02,720
and it's a final meaning that after the person has been instantiated or after

175
03:47:02,720 --> 03:47:07,680
that person has been initialized or created an instance from you cannot

176
03:47:07,680 --> 03:47:10,720
change that name because you said final all right

177
03:47:10,720 --> 03:47:15,359
if you said like string name is foo that would be different because it means

178
03:47:15,359 --> 03:47:19,199
every person instance that gets created has the default value

179
03:47:19,199 --> 03:47:22,720
foo for its name that's a completely different way of saying

180
03:47:22,720 --> 03:47:26,800
uh what the name of in this case as you can see we're saying

181
03:47:26,800 --> 03:47:30,239
that there every person instance every person

182
03:47:30,239 --> 03:47:34,960
copy that we create has a name now dart to say okay where is the name then you

183
03:47:34,960 --> 03:47:39,199
didn't tell me how to create it and that's where you would want to use

184
03:47:39,199 --> 03:47:44,640
something called constructor okay constructors are sometimes you uh called

185
03:47:44,640 --> 03:47:48,960
as initializers depending on the background of the programmer they may

186
03:47:48,960 --> 03:47:53,199
call it constructor initializer uh or maybe some other names that i don't know

187
03:47:53,199 --> 03:47:57,840
about but if you if you hear that a constructor then you will now know what

188
03:47:57,840 --> 03:48:01,040
i'm talking about soon actually

189
03:48:01,040 --> 03:48:04,399
so now what you can do at least in visual

190
03:48:04,399 --> 03:48:08,800
studio code when you get this error is to just hover hover over it and then

191
03:48:08,800 --> 03:48:14,560
press command on mac or control on windows on linux and press dot

192
03:48:14,560 --> 03:48:17,760
now you will see you will get some suggestions here

193
03:48:17,760 --> 03:48:20,880
and it will the second suggestion at least for me here says create

194
03:48:20,880 --> 03:48:24,720
constructor for final fields okay and i can just press that

195
03:48:24,720 --> 03:48:29,199
and what happens here now you see it's that it creates something that looks

196
03:48:29,199 --> 03:48:33,279
kind of like a function but it doesn't have a name

197
03:48:33,279 --> 03:48:37,520
its name is implicitly set to the name of the class okay

198
03:48:37,520 --> 03:48:42,560
so basically it says i'm a special function with the same name as the class

199
03:48:42,560 --> 03:48:49,040
and i expect a value to be given to me which i will then in turn assign to the

200
03:48:49,040 --> 03:48:53,439
name property of myself it's kind of like a strange way of doing

201
03:48:53,439 --> 03:48:57,840
things but it is quiet clean as well okay

202
03:48:57,840 --> 03:49:01,199
after you do that so this is how you create a constructor after you do that

203
03:49:01,199 --> 03:49:05,760
then at the call site where you're calling this person class to create an

204
03:49:05,760 --> 03:49:10,399
instance of it it will complain saying that oh i'm expecting an argument

205
03:49:10,399 --> 03:49:14,319
but i didn't find any and that's where you have to pass the

206
03:49:14,319 --> 03:49:18,880
name so let's say in this case is foo bar okay

207
03:49:18,880 --> 03:49:22,880
and then on the next line you can just say print foo name

208
03:49:22,880 --> 03:49:27,279
all right and press command s and then you can see foo bar being printed to the

209
03:49:27,279 --> 03:49:31,359
screen so that is like the basic of a constructor

210
03:49:31,359 --> 03:49:35,600
that's how you construct instances of your class all right

211
03:49:35,600 --> 03:49:39,520
now you may be saying that all right i don't want

212
03:49:39,520 --> 03:49:45,920
i mean you can do many fancy things with constructors you could say okay

213
03:49:45,920 --> 03:49:50,239
this name for instance by default must have a special value you could do that

214
03:49:50,239 --> 03:49:52,800
there's lots of things you can do with constructors which i'm not going to go

215
03:49:52,800 --> 03:49:56,160
into the details of but right now just know that a

216
03:49:56,160 --> 03:49:59,840
constructor is this special kind of function that has the same name as the

217
03:49:59,840 --> 03:50:03,199
name of the class and then parenthesis and then you put

218
03:50:03,199 --> 03:50:08,399
your values in here all right

219
03:50:08,399 --> 03:50:11,040
okay that was

220
03:50:11,040 --> 03:50:14,880
constructors um

221
03:50:14,880 --> 03:50:21,120
now let's talk a little bit about um

222
03:50:21,120 --> 03:50:25,359
methods all right and

223
03:50:25,359 --> 03:50:29,680
what methods are i'm actually going to go here and say

224
03:50:29,680 --> 03:50:34,160
we're going to talk about methods and those at the wrong place in my notes

225
03:50:34,160 --> 03:50:38,080
as well sorry about that a method of a class we've talked about

226
03:50:38,080 --> 03:50:41,520
already to be honest with you and a method of a class is

227
03:50:41,520 --> 03:50:45,359
um a function on the class

228
03:50:45,359 --> 03:50:48,720
which is usually referred to as an instance

229
03:50:48,720 --> 03:50:52,800
method meaning that the function is available after you've instantiated that

230
03:50:52,800 --> 03:50:56,800
class all right as we're doing in line number 14.

231
03:50:56,800 --> 03:51:03,040
name is an instance variable so is a variable that is available at an

232
03:51:03,040 --> 03:51:08,080
instance level is not an instance method an instance method should be a function

233
03:51:08,080 --> 03:51:12,000
all right so let's go and create a function here that doesn't return any

234
03:51:12,000 --> 03:51:17,120
value denoted by the void return type and we say print name all right

235
03:51:17,120 --> 03:51:20,319
the functionality of this function is only

236
03:51:20,319 --> 03:51:24,479
just to print class all right that's all it all it

237
03:51:24,479 --> 03:51:28,160
does and in dart you're also now that we're

238
03:51:28,160 --> 03:51:31,920
talking about this i'll just mention also in dart it's usually

239
03:51:31,920 --> 03:51:38,880
better not to prefix your instance variables or instance functions

240
03:51:38,880 --> 03:51:42,840
inside the class itself using this

241
03:51:42,840 --> 03:51:48,399
keyword this keyword in dart

242
03:51:48,399 --> 03:51:54,080
that this this or that this keyword

243
03:51:54,080 --> 03:51:59,120
basically refers to the current instance of this class all right

244
03:51:59,120 --> 03:52:04,479
so you could either tell print name to print this dot name or it's actually

245
03:52:04,479 --> 03:52:08,960
better to remove this and refer to it as name that's the recommended way of doing

246
03:52:08,960 --> 03:52:13,199
it okay so avoid the keyword this as much as you can

247
03:52:13,199 --> 03:52:17,600
unless you have to and we'll come to those points hopefully

248
03:52:17,600 --> 03:52:21,439
later in this in this course why you may have to do

249
03:52:21,439 --> 03:52:27,600
that while you may have to use this all right now we have the print name

250
03:52:27,600 --> 03:52:32,479
instance method all right so let's just use it instead of this

251
03:52:32,479 --> 03:52:36,399
print function that we're doing here let's just say foo

252
03:52:36,399 --> 03:52:40,800
dot prints name all right command s or control s

253
03:52:40,800 --> 03:52:45,760
on linux and windows and command sun on the macintosh and then you get the

254
03:52:45,760 --> 03:52:49,040
flutter foo bar printed here or you could just

255
03:52:49,040 --> 03:52:50,960
say print

256
03:52:50,960 --> 03:52:56,560
i'm going to i will now print the name of this person

257
03:52:56,560 --> 03:53:00,080
in single quotes we don't need double quotes okay command s and you will see

258
03:53:00,080 --> 03:53:04,239
that message being printed here followed by the actual name of that

259
03:53:04,239 --> 03:53:07,920
instance so if someone says method or instance

260
03:53:07,920 --> 03:53:11,840
method you will then know what we're talking about is a function created at

261
03:53:11,840 --> 03:53:18,800
the class level that does some stuff all right so that's short and sweet

262
03:53:18,800 --> 03:53:21,199
um okay

263
03:53:21,199 --> 03:53:25,399
now that we've talked about that let's talk a little bit about

264
03:53:25,399 --> 03:53:30,720
inheritance and subclassing i'm gonna bring a caption here so you know what

265
03:53:30,720 --> 03:53:34,479
we're talking about now

266
03:53:34,479 --> 03:53:39,120
inheritance and subclassing are so so important in dart

267
03:53:39,120 --> 03:53:42,800
and in any other object-oriented programming language that i don't think

268
03:53:42,800 --> 03:53:47,279
anybody should like jump over it or um like for instance i know

269
03:53:47,279 --> 03:53:50,479
developers working in various programming languages that are object

270
03:53:50,479 --> 03:53:55,040
oriented but they kind of steer clear of the object oriented aspects of that

271
03:53:55,040 --> 03:54:00,239
language and maybe they don't need it and maybe they just feel like it's

272
03:54:00,239 --> 03:54:04,399
unnecessary or they feel like oh it's just too complicated but in dart if you

273
03:54:04,399 --> 03:54:08,479
want to become a good flutter developer or a good dart developer you need to

274
03:54:08,479 --> 03:54:12,800
know about um classes and um

275
03:54:12,800 --> 03:54:17,120
inheritance so so let's

276
03:54:17,120 --> 03:54:22,000
talk about inheritance what inheritance in dart is is that

277
03:54:22,000 --> 03:54:26,080
it allows you to define a class

278
03:54:26,080 --> 03:54:30,960
and then to add more functionality to that class

279
03:54:30,960 --> 03:54:33,680
into a new class so

280
03:54:33,680 --> 03:54:40,239
let's for instance say we go into our test function here and

281
03:54:40,239 --> 03:54:44,399
remove that okay that code and also remove the person

282
03:54:44,399 --> 03:54:48,319
class now let's create a

283
03:54:48,319 --> 03:54:53,199
class livingthing all right and then we say funk

284
03:54:53,199 --> 03:54:56,560
sorry void breathe

285
03:54:56,560 --> 03:55:01,680
and then we say print living thing is breathing okay

286
03:55:01,680 --> 03:55:06,800
so we created a class living thing and we're saying that anything that lives

287
03:55:06,800 --> 03:55:10,080
needs to breathe now this may be an assumption but anyways

288
03:55:10,080 --> 03:55:15,840
anything that lives and is above the and it's above the ground and it's

289
03:55:15,840 --> 03:55:21,120
basically alive is breathing okay so that's our function on the living

290
03:55:21,120 --> 03:55:25,120
thing now you may say okay

291
03:55:25,120 --> 03:55:29,279
any living thing may also have the ability to move okay then we have a

292
03:55:29,279 --> 03:55:35,040
function called move i'm going to say print i am moving all right

293
03:55:35,040 --> 03:55:41,040
so now you may say okay now i kind of want a class called uh cats all right

294
03:55:41,040 --> 03:55:45,439
cat is also a living thing one way to do that to go about creating

295
03:55:45,439 --> 03:55:49,840
a class uh the cat class is to say class cat

296
03:55:49,840 --> 03:55:54,319
and then you say um i kind of need these functions and you'll go and copy it and

297
03:55:54,319 --> 03:55:59,279
then you paste them here all right and then you say okay i'm good to go now

298
03:55:59,279 --> 03:56:04,319
but one of the absolute paramount paramount

299
03:56:04,319 --> 03:56:07,920
qualities of a developer is the

300
03:56:07,920 --> 03:56:11,439
developers do not like to repeat themselves

301
03:56:11,439 --> 03:56:14,720
and it is such an important concept in

302
03:56:14,720 --> 03:56:18,160
programming that you need to avoid repeating yourself that you need to just

303
03:56:18,160 --> 03:56:22,399
coin that down now get it straight so that you don't

304
03:56:22,399 --> 03:56:27,359
make this mistake as we're doing in this code right now so

305
03:56:27,359 --> 03:56:31,439
the first thing you want to do as a developer say how can i grab this code

306
03:56:31,439 --> 03:56:34,319
and and it's obvious that the cat is also a

307
03:56:34,319 --> 03:56:39,840
living thing so that's where you want to use the extends

308
03:56:39,840 --> 03:56:45,359
um keyword that allows you to inherit the functionality inside the living

309
03:56:45,359 --> 03:56:50,640
thing class into your cat class so in this case i'm saying cat class

310
03:56:50,640 --> 03:56:53,680
extends or read it in english as inherits

311
03:56:53,680 --> 03:56:57,120
living thing all right so

312
03:56:57,120 --> 03:57:00,800
you can see that the cat class in itself is empty right now but if you go to the

313
03:57:00,800 --> 03:57:05,439
test function and i say final

314
03:57:05,439 --> 03:57:09,520
fluffers is a cat

315
03:57:09,520 --> 03:57:14,399
and then i can say fluffers uh you can see that now that the cat

316
03:57:14,399 --> 03:57:21,040
class has breathe and move uh functionalities or functions actually

317
03:57:21,040 --> 03:57:25,439
so although cat itself didn't define these functions but they're available

318
03:57:25,439 --> 03:57:30,960
for the instance in this case called fluffers of type cat to use so you could

319
03:57:30,960 --> 03:57:35,680
just say move and then you can say fluffers

320
03:57:35,680 --> 03:57:38,960
okay so if i run this code if i delete

321
03:57:38,960 --> 03:57:42,319
everything in the debug console and run this code you can see that the cat

322
03:57:42,319 --> 03:57:46,720
instance called fluffer is the same move or i am moving and it will also say

323
03:57:46,720 --> 03:57:53,040
living thing is breathing okay now

324
03:57:53,040 --> 03:57:57,600
you could also i mean we could also talk about now that we're talking about

325
03:57:57,600 --> 03:58:01,199
inheritance and subclassing um

326
03:58:01,199 --> 03:58:04,720
actually maybe i shouldn't call a subclassing but i also think it's

327
03:58:04,720 --> 03:58:07,920
important for you to understand what subclassing is subclassing is literally

328
03:58:07,920 --> 03:58:11,040
the same thing as inheritance subclassing is saying that you have a

329
03:58:11,040 --> 03:58:14,000
class and you're creating a sub component like a sub

330
03:58:14,000 --> 03:58:18,160
thing of it which may actually have

331
03:58:18,160 --> 03:58:21,840
it's a little bit of a strange naming sub because sub means kind of like a

332
03:58:21,840 --> 03:58:26,239
subset of things available in that class but it actually is like a superset

333
03:58:26,239 --> 03:58:28,479
because it will

334
03:58:28,479 --> 03:58:32,160
grab everything like the cat at the moment has every functionality in living

335
03:58:32,160 --> 03:58:36,720
thing right but it may not necessarily do that

336
03:58:36,720 --> 03:58:41,920
it's kind of complicated to explain but if you hear subclassing or inheritance

337
03:58:41,920 --> 03:58:45,199
know that that is what we mean

338
03:58:45,199 --> 03:58:52,479
you use the extends keyword usually okay

339
03:58:52,479 --> 03:58:58,479
all right now we've talked about inheritance and subclassing

340
03:58:58,479 --> 03:59:00,880
so i'm gonna

341
03:59:00,880 --> 03:59:05,279
move a little bit uh my notes around sorry about that that i'm looking away

342
03:59:05,279 --> 03:59:10,560
from the screen and uh now we're gonna talk about abstract

343
03:59:10,560 --> 03:59:14,960
classes all right there's good documentation about

344
03:59:14,960 --> 03:59:18,640
abstract classes and

345
03:59:18,640 --> 03:59:24,239
what we're going to do here is to just change this class living

346
03:59:24,239 --> 03:59:28,000
thing at the moment to abstract

347
03:59:28,000 --> 03:59:32,560
and you see that everything works as expected

348
03:59:32,560 --> 03:59:36,800
well an abstract class

349
03:59:36,800 --> 03:59:42,080
is very similar to a normal class and there's good

350
03:59:42,080 --> 03:59:45,279
documentation about what an abstract class actually is from a dart

351
03:59:45,279 --> 03:59:48,640
perspective and you can see it says use the abs abstract modifier to define an

352
03:59:48,640 --> 03:59:52,840
abstract class class that cannot be instantiated all right

353
03:59:52,840 --> 03:59:59,279
so an abstract class is just like a normal class that can't have instances

354
03:59:59,279 --> 04:00:02,800
so in this in this case once we made living

355
04:00:02,800 --> 04:00:07,359
thing an abstract class if you then go and hear say

356
04:00:07,359 --> 04:00:11,760
thing is a living thing

357
04:00:11,760 --> 04:00:14,319
right and

358
04:00:14,319 --> 04:00:18,319
it says oh abstract classes can't be instantiated

359
04:00:18,319 --> 04:00:24,880
so an abstract class is a class that groups logic into itself

360
04:00:24,880 --> 04:00:31,120
with the sole purpose of other classes using its functionality okay

361
04:00:31,120 --> 04:00:36,880
so if you mark something as an abstract class in dart you what you need to just

362
04:00:36,880 --> 04:00:40,880
know in your head is that this is a class that has some utilities that has

363
04:00:40,880 --> 04:00:46,960
some code that is supposed to be used in other normal classes all right

364
04:00:46,960 --> 04:00:51,600
and no one is supposed to just go and create an instance of living thing in

365
04:00:51,600 --> 04:00:54,239
this case instead

366
04:00:54,239 --> 04:00:59,920
at the call side you need to instantiate classes of that type so

367
04:00:59,920 --> 04:01:04,880
now we can say cat as we did before and we can say thing breathe move or

368
04:01:04,880 --> 04:01:08,239
fluffers

369
04:01:08,239 --> 04:01:12,960
so that's what an abstract class is

370
04:01:12,960 --> 04:01:16,080
it is just a class that cannot be instantiated

371
04:01:16,080 --> 04:01:19,600
it's usually like a utility class that other classes are supposed to inherit

372
04:01:19,600 --> 04:01:23,760
from all right

373
04:01:23,760 --> 04:01:28,160
okay um i can see now in my notes and i'm gonna

374
04:01:28,160 --> 04:01:32,640
take that we've talked quickly about abstract classes

375
04:01:32,640 --> 04:01:36,640
and i'm going to bring the next topic up which we're going to

376
04:01:36,640 --> 04:01:41,840
talk about which are factory constructors

377
04:01:41,840 --> 04:01:45,840
so i absolutely personally love factory

378
04:01:45,840 --> 04:01:49,359
constructors to be honest with you

379
04:01:49,359 --> 04:01:55,040
let's remove our abstract class i'll explain to you what a factory

380
04:01:55,040 --> 04:01:59,279
is let's see now we have a glass cat all right

381
04:01:59,279 --> 04:02:05,199
um and then in here let's give the cat a name

382
04:02:05,199 --> 04:02:10,319
of type string command dot or control dot

383
04:02:10,319 --> 04:02:14,800
for linux windows on the name in visual studio code at least to create a

384
04:02:14,800 --> 04:02:18,319
constructor you can do that and say create constructor or you could manually

385
04:02:18,319 --> 04:02:24,080
create a constructor so you say cat this name okay that's a constructor

386
04:02:24,080 --> 04:02:29,040
and also know that um you could make this a const because it is actually

387
04:02:29,040 --> 04:02:32,720
using a final field but we're going to talk about that later

388
04:02:32,720 --> 04:02:39,520
now we have a cat class here that has a constructor called just cat meaning

389
04:02:39,520 --> 04:02:44,399
that in here you can say final

390
04:02:44,399 --> 04:02:48,319
fluffball is cat

391
04:02:48,319 --> 04:02:52,239
and then you say fluffball all right so now you're creating an

392
04:02:52,239 --> 04:02:57,600
instance of the cat class and the name of the variable is called fluffball

393
04:02:57,600 --> 04:03:04,399
and the name of the cat is fluffball right

394
04:03:04,399 --> 04:03:08,880
so then you can say print

395
04:03:08,880 --> 04:03:10,479
off ball

396
04:03:10,479 --> 04:03:13,920
dots name all right so

397
04:03:13,920 --> 04:03:16,160
that is just normal constructor it has

398
04:03:16,160 --> 04:03:19,680
nothing to do with a factory constructor but what a factory constructor actually

399
04:03:19,680 --> 04:03:24,160
is is a way for you to construct instances

400
04:03:24,160 --> 04:03:31,040
of your classes and using convenience functions

401
04:03:31,040 --> 04:03:35,600
so what that means is that if you in your code see that

402
04:03:35,600 --> 04:03:41,199
you are creating instances of this class like 20 times 30 times different places

403
04:03:41,199 --> 04:03:46,319
in your application using this exact same name fluffball

404
04:03:46,319 --> 04:03:49,439
then you need to then create a factory

405
04:03:49,439 --> 04:03:55,040
constructor that is a clear sign that your usual use case for create an

406
04:03:55,040 --> 04:03:57,920
instance of class is through

407
04:03:57,920 --> 04:04:01,600
the same name of fluffball so

408
04:04:01,600 --> 04:04:05,439
that's where factory constructors are useful for and as their name indicates

409
04:04:05,439 --> 04:04:07,760
is a way to create

410
04:04:07,760 --> 04:04:13,040
a product like a factory does uh super fast for you okay so it's the speed at

411
04:04:13,040 --> 04:04:16,399
which you can create an instance of a class that the factory constructor

412
04:04:16,399 --> 04:04:20,319
shines at all right so let's now look at a factory

413
04:04:20,319 --> 04:04:25,359
constructor that gives us an instance of cap whose name is always fluffball all

414
04:04:25,359 --> 04:04:28,560
right the way to do that is you would say

415
04:04:28,560 --> 04:04:33,680
factory and you would say cat dot fluffball

416
04:04:33,680 --> 04:04:39,120
so you say any class called cat which is this class has a function called

417
04:04:39,120 --> 04:04:43,359
fluffball which is this factory constructor and then you would put your

418
04:04:43,359 --> 04:04:48,319
parentheses in here and then what you need to do is to kind

419
04:04:48,319 --> 04:04:51,600
of set up your class instance in this case

420
04:04:51,600 --> 04:04:54,560
like if you say curly brackets and say this name

421
04:04:54,560 --> 04:04:59,520
is fluff like that that's how you're basically

422
04:04:59,520 --> 04:05:04,000
creating an instance of your class but the usual way of doing that is you say

423
04:05:04,000 --> 04:05:06,239
this name

424
04:05:06,239 --> 04:05:11,199
dude let's see uh factory cat fluff ball

425
04:05:11,199 --> 04:05:16,720
and then you would say name is fluff

426
04:05:16,720 --> 04:05:20,239
see that i've kind of like forgotten the um

427
04:05:20,239 --> 04:05:24,319
uh syntax for factory uh so let's go i'm

428
04:05:24,319 --> 04:05:30,880
gonna bring up safari here and let's go and say guard factory constructor

429
04:05:30,880 --> 04:05:35,600
i'll bring bring up here factory constructor so let's say factory

430
04:05:35,600 --> 04:05:40,080
and let's go and see an example and you can see here it says factory logger like

431
04:05:40,080 --> 04:05:44,560
that okay and there's a factory logger blah blah like that so

432
04:05:44,560 --> 04:05:48,880
are basically so what what it's basically saying in here is saying that

433
04:05:48,880 --> 04:05:53,520
this in this function you need to return something okay so let's close that

434
04:05:53,520 --> 04:05:57,760
safari window and what we're going to do in here we're going to say return cat

435
04:05:57,760 --> 04:06:01,359
and as the name we're gonna say fluffball all right so that's how you

436
04:06:01,359 --> 04:06:06,720
would create like a factory constructor so what you're doing here is saying that

437
04:06:06,720 --> 04:06:11,520
i have a constructor called fluffball whose return value is a cat

438
04:06:11,520 --> 04:06:15,920
but inside i have some special logic that kind of packages it up just like

439
04:06:15,920 --> 04:06:19,760
you do in a factory so let's go in here instead of doing cat

440
04:06:19,760 --> 04:06:24,880
fluff ball like that then you can just say cat dot fluffball okay so it kind of

441
04:06:24,880 --> 04:06:28,640
like became a um

442
04:06:28,640 --> 04:06:33,600
it became like a convenient function in that you can just say cat fluff ball and

443
04:06:33,600 --> 04:06:37,600
then you say print fluffball

444
04:06:37,600 --> 04:06:42,479
dot name and you can see by default it is

445
04:06:42,479 --> 04:06:46,880
or whatever you put here fluffball 2 print and it gets printed to

446
04:06:46,880 --> 04:06:51,359
the screen ok so that's how you would create a factory

447
04:06:51,359 --> 04:06:54,880
constructor and a factory constructor is really really important when you're

448
04:06:54,880 --> 04:06:58,479
talking about class clusters we haven't talked about class clusters

449
04:06:58,479 --> 04:07:03,600
and to be honest with you i don't think that we're gonna talk about that in this

450
04:07:03,600 --> 04:07:06,000
course i don't think anywhere in this course

451
04:07:06,000 --> 04:07:10,239
i've actually talked about class clusters

452
04:07:10,239 --> 04:07:15,279
but know that in the context of dart and abstract

453
04:07:15,279 --> 04:07:20,160
classes a factory constructor does not necessarily

454
04:07:20,160 --> 04:07:26,399
have to return an instance of the same class all right so it can actually

455
04:07:26,399 --> 04:07:29,600
return an instance of another class

456
04:07:29,600 --> 04:07:35,279
but i highly suggest that you actually go and read about factory constructors

457
04:07:35,279 --> 04:07:39,199
as i just did just google factory constructor

458
04:07:39,199 --> 04:07:42,479
dart and you will see some examples of it

459
04:07:42,479 --> 04:07:44,960
um they are really useful if you're working

460
04:07:44,960 --> 04:07:48,880
with a lot of data and you're doing like data parsing

461
04:07:48,880 --> 04:07:52,560
json parsing etc but

462
04:07:52,560 --> 04:07:56,800
i don't think it's so useful right now for you to know

463
04:07:56,800 --> 04:08:01,439
but know that it is there available for you to use but

464
04:08:01,439 --> 04:08:07,279
i leave it up to you to go and read more about it yourself

465
04:08:07,279 --> 04:08:09,680
okay and we've now talked about factory

466
04:08:09,680 --> 04:08:14,880
constructors and um now let's talk a little bit about

467
04:08:14,880 --> 04:08:20,960
custom operators so i'm going to bring custom operators here okay

468
04:08:20,960 --> 04:08:27,520
now a custom operator in dart is

469
04:08:27,520 --> 04:08:33,439
an operator such as an equal sign or equal equal sign for for instance

470
04:08:33,439 --> 04:08:39,040
um checking equality um of an instance of an object with another instance of

471
04:08:39,040 --> 04:08:42,960
the same object um a custom operator allows you in dart

472
04:08:42,960 --> 04:08:50,080
to override the ability of your class to be compared to or added to or

473
04:08:50,080 --> 04:08:54,159
subtracted from multiplied with something

474
04:08:54,159 --> 04:08:59,520
with your own logic now let's see what i mean by that let's say that

475
04:08:59,520 --> 04:09:05,279
you have final uh cat one and that is equal to cat with the name of foo

476
04:09:05,279 --> 04:09:09,600
then you say okay i have cat two now with the exact same name

477
04:09:09,600 --> 04:09:16,239
and then you'd say if cat one is exactly the same as cat 2 prints they are equal

478
04:09:16,239 --> 04:09:22,080
otherwise say print they are not equal ok

479
04:09:22,080 --> 04:09:25,040
so these two instances have the exact same

480
04:09:25,040 --> 04:09:27,359
name foo

481
04:09:27,359 --> 04:09:30,479
and if you run this code now you will see

482
04:09:30,479 --> 04:09:34,800
that dart is said it says that they're not equal although internally you may

483
04:09:34,800 --> 04:09:39,040
think hmm for me in my project anytime

484
04:09:39,040 --> 04:09:44,720
two cats have the same name i want them to be considered equal and

485
04:09:44,720 --> 04:09:48,000
this is like where things get interesting because then you

486
04:09:48,000 --> 04:09:55,040
can override this particular function or operator at the language

487
04:09:55,040 --> 04:10:00,640
level only for your class so the way to do that is you would go and start by

488
04:10:00,640 --> 04:10:04,640
writing override with an ad sign

489
04:10:04,640 --> 04:10:09,600
and you say bool operator equal equal covariance i'm

490
04:10:09,600 --> 04:10:13,040
going to explain all this don't worry about it cat and you say cat and then

491
04:10:13,040 --> 04:10:16,479
here you say um other

492
04:10:16,479 --> 04:10:20,720
name is me okay and then we get a problem with the hash

493
04:10:20,720 --> 04:10:25,439
i'll add that as well so don't worry about all of this um i

494
04:10:25,439 --> 04:10:28,880
will explain it in details um

495
04:10:28,880 --> 04:10:33,680
all right so okay so let's start by looking at what i just

496
04:10:33,680 --> 04:10:38,080
did here with the override

497
04:10:38,080 --> 04:10:42,319
notation here overwrite is very important term for you

498
04:10:42,319 --> 04:10:45,359
to understand in object-oriented programming and that is

499
04:10:45,359 --> 04:10:48,319
wherever you have um

500
04:10:48,319 --> 04:10:53,040
a class and you are

501
04:10:53,040 --> 04:10:58,239
inheriting from that class in in our case for instance class cat you can see

502
04:10:58,239 --> 04:11:03,520
that it doesn't have any extents but by default in dart every class

503
04:11:03,520 --> 04:11:08,720
inherits implicitly from the object class so you could just say extends

504
04:11:08,720 --> 04:11:11,359
object and that is the exact same thing as

505
04:11:11,359 --> 04:11:14,720
omitting writing that those two words so

506
04:11:14,720 --> 04:11:21,520
just know that cat comes from object an object internally already defines an

507
04:11:21,520 --> 04:11:26,080
operator called equal equal that returns a boolean

508
04:11:26,080 --> 04:11:29,840
a boolean is a value that can either include true

509
04:11:29,840 --> 04:11:34,880
that can either be true or false and it's great just for saying that is

510
04:11:34,880 --> 04:11:40,479
this this or is this that is this this or not kind of like that

511
04:11:40,479 --> 04:11:46,800
so a boolean is a data type all right so that operator an operator is a keyword

512
04:11:46,800 --> 04:11:52,159
as well in dart basically saying telling dart that we are going to change

513
04:11:52,159 --> 04:11:57,199
change as in override the functionality of this equally equal

514
04:11:57,199 --> 04:12:01,600
operator that is defined at the object level with our own

515
04:12:01,600 --> 04:12:05,439
implementation all right let's actually bring the extents here

516
04:12:05,439 --> 04:12:09,680
and go into this object definition just select it right click on it and say go

517
04:12:09,680 --> 04:12:14,640
to definition all right and search for operator equal equal

518
04:12:14,640 --> 04:12:17,600
you'll see that it is defined right there for you okay

519
04:12:17,600 --> 04:12:22,319
and there's lots of documentation about what it actually does

520
04:12:22,319 --> 04:12:26,960
so that's this syntax we're overriding we're changing the definition of that

521
04:12:26,960 --> 04:12:30,800
function all right so

522
04:12:30,800 --> 04:12:35,040
then since this is a simple function an operator in itself is a function it

523
04:12:35,040 --> 04:12:39,359
actually you can see it starts it has like a

524
04:12:39,359 --> 04:12:43,760
parenthesis here in the parenthesis you get the value

525
04:12:43,760 --> 04:12:50,000
that that operator is comparing your class with okay so

526
04:12:50,000 --> 04:12:53,040
it's that that value that your class is being

527
04:12:53,040 --> 04:12:56,319
compared to also needs to be a cat because you cannot in dart is not

528
04:12:56,319 --> 04:13:00,399
recommended that you compare tune classes of different types with each

529
04:13:00,399 --> 04:13:04,560
other so here we say covariance covariance

530
04:13:04,560 --> 04:13:08,479
is a keyword that you merely use in dart but i think it's important for you to

531
04:13:08,479 --> 04:13:13,600
understand what it does is that it tells dart that although

532
04:13:13,600 --> 04:13:17,920
at the object level we said that the parameter that comes in

533
04:13:17,920 --> 04:13:23,760
is of type object but in our case we are sure that the value that comes in this

534
04:13:23,760 --> 04:13:28,960
function is actually a cat all right so covariant tells dart that

535
04:13:28,960 --> 04:13:34,080
forget what the super class which is object defines as the parameter type for

536
04:13:34,080 --> 04:13:39,279
this parameter because if you remove covarian you see it says cat

537
04:13:39,279 --> 04:13:43,439
an object as a parameter but if it's a covariant you're kind of

538
04:13:43,439 --> 04:13:48,960
like overriding even that assumption all right so we say okay an

539
04:13:48,960 --> 04:13:52,720
equal so we're mean compared our instance of cat is being compared with

540
04:13:52,720 --> 04:13:56,080
another cath instance and what we're doing is that we need to

541
04:13:56,080 --> 04:13:59,680
return a boolean saying whether they're equal or not and you can see i'm just

542
04:13:59,680 --> 04:14:03,279
comparing i'm just comparing the name which is our

543
04:14:03,279 --> 04:14:07,439
name with the other instances name all right

544
04:14:07,439 --> 04:14:12,080
now when you do that as you saw then we get a problem here which is kind of like

545
04:14:12,080 --> 04:14:17,120
a warning that tells you that okay now that you've you've overwritten this

546
04:14:17,120 --> 04:14:21,040
um operator you also need to override the

547
04:14:21,040 --> 04:14:24,720
hash code all right now

548
04:14:24,720 --> 04:14:28,880
to honestly i don't think like hashcode is such an important thing to talk about

549
04:14:28,880 --> 04:14:34,720
right now but just know that hashcode is a special number

550
04:14:34,720 --> 04:14:39,279
that you assign to your or a special identifier that you

551
04:14:39,279 --> 04:14:42,560
assign to your instance of classes that is

552
04:14:42,560 --> 04:14:47,439
then used inside collections for instance if you put your instance of of

553
04:14:47,439 --> 04:14:49,520
cat inside a

554
04:14:49,520 --> 04:14:53,279
dictionary then or sorry or inside a map as it is

555
04:14:53,279 --> 04:14:56,960
called in dart which we talked about i believe in chapter

556
04:14:56,960 --> 04:14:59,920
four yes in chapter four so if you didn't

557
04:14:59,920 --> 04:15:03,760
watch chapter four i strongly suggest that you do that

558
04:15:03,760 --> 04:15:10,479
so if you put instances of your

559
04:15:10,479 --> 04:15:14,880
of your cat class inside a set

560
04:15:14,880 --> 04:15:20,159
or inside a map then the way dart

561
04:15:20,159 --> 04:15:25,520
knows that the the keys inside its map or the values inside the set are

562
04:15:25,520 --> 04:15:28,880
actually unique it's using this hash value all right

563
04:15:28,880 --> 04:15:32,479
so if you see if i go here and say command

564
04:15:32,479 --> 04:15:37,840
dot to get a suggestion how to fix this it says create method hash code

565
04:15:37,840 --> 04:15:40,720
that is what is required to fix this word

566
04:15:40,720 --> 04:15:45,680
so you can see that it's an override which means that this hash code

567
04:15:45,680 --> 04:15:50,800
getter was defined on the object class if we go to object and look for that you

568
04:15:50,800 --> 04:15:53,680
can see that it is actually defined there

569
04:15:53,680 --> 04:15:57,840
and we're overwriting its value and here it says i'm going to go to

570
04:15:57,840 --> 04:16:03,600
super and get that value super is our object so as super class

571
04:16:03,600 --> 04:16:08,000
that sits up above us all right but if you want to overwrite that in

572
04:16:08,000 --> 04:16:12,159
case you in this case you can just say okay don't get the supers hash code just

573
04:16:12,159 --> 04:16:15,439
get the name hashtag and to be honest with you this is just a

574
04:16:15,439 --> 04:16:20,640
very technical stuff which i don't think belongs right in this chapter six but

575
04:16:20,640 --> 04:16:26,239
just know that here we're creating an identifier for our cat class

576
04:16:26,239 --> 04:16:31,359
which allows dart to understand that if this

577
04:16:31,359 --> 04:16:39,600
cat classes instances are placed inside collections such as a map or a set

578
04:16:39,600 --> 04:16:45,920
then it will know if they're unique or not okay

579
04:16:45,920 --> 04:16:49,600
all right so now that we've done all of this we

580
04:16:49,600 --> 04:16:54,479
can rerun the code and you will now see that it says they

581
04:16:54,479 --> 04:16:57,520
are equal that's that's all we wanted that's

582
04:16:57,520 --> 04:17:00,880
really all we want but there was a lot of code actually i

583
04:17:00,880 --> 04:17:03,920
don't know it's like four lines of code um

584
04:17:03,920 --> 04:17:09,199
this is not even considered a line of code it's kind of like a

585
04:17:09,199 --> 04:17:15,520
is a hint to the analyzer but uh so

586
04:17:15,520 --> 04:17:18,640
you could just say it's pretty much just two lines of code but it is quite a lot

587
04:17:18,640 --> 04:17:21,199
of new things to be honest with you for you

588
04:17:21,199 --> 04:17:23,520
to grasp

589
04:17:23,520 --> 04:17:27,600
so i leave this here so you can have a look at it

590
04:17:27,600 --> 04:17:30,399
um and i think

591
04:17:30,399 --> 04:17:34,560
for this chapter to be honest with you we've talked a lot now in this chapter

592
04:17:34,560 --> 04:17:39,760
about enumeration switch statements classes objects uh constructors

593
04:17:39,760 --> 04:17:42,560
factory constructors

594
04:17:42,560 --> 04:17:48,000
abstract classes inheritance a lot so it was quite a heavy chapter this chapter

595
04:17:48,000 --> 04:17:51,120
six but i suggest that you

596
04:17:51,120 --> 04:17:55,279
go and read the also the official documentation for dart because as i said

597
04:17:55,279 --> 04:17:58,720
we don't have the possibility to talk about everything

598
04:17:58,720 --> 04:18:02,560
um otherwise this course will just be

599
04:18:02,560 --> 04:18:06,560
enormously big and that's not what i want to do so

600
04:18:06,560 --> 04:18:09,120
please go and read the documentation about the things that we talked about

601
04:18:09,120 --> 04:18:14,560
especially especially object oriented programming in dart so

602
04:18:14,560 --> 04:18:19,359
and with that said in the next chapter we're going to talk

603
04:18:19,359 --> 04:18:23,279
about some advanced features in dart such as

604
04:18:23,279 --> 04:18:28,720
future async operations streams and generators

605
04:18:28,720 --> 04:18:31,439
so

606
04:18:31,439 --> 04:18:35,439
please have a look about at the documentation and i will see you in the

607
04:18:35,439 --> 04:18:40,159
next chapter hello everyone and welcome to chapter 7

608
04:18:40,159 --> 04:18:44,800
of this flutter course in this chapter we're going to talk about advanced dart

609
04:18:44,800 --> 04:18:48,640
concepts things such as extensions futures

610
04:18:48,640 --> 04:18:50,960
streams um

611
04:18:50,960 --> 04:18:56,080
async await generators and um generics as well

612
04:18:56,080 --> 04:18:58,800
so uh i'm kind of assuming that you've

613
04:18:58,800 --> 04:19:01,760
already set up the project that we've talked about in the previous chapter so

614
04:19:01,760 --> 04:19:05,439
i'm not going to go through that again and then i'm assuming that we have like

615
04:19:05,439 --> 04:19:10,640
some sort of an iphone simulator so or an android emulator or any device

616
04:19:10,640 --> 04:19:13,760
that you may be able to test your project on so

617
04:19:13,760 --> 04:19:18,560
i'm going to bring up my project here so i'm going to place it right there

618
04:19:18,560 --> 04:19:21,279
this is how we left the project in the previous chapter

619
04:19:21,279 --> 04:19:26,319
and then i'm going to do command shift p on mac or control shift p in linux and

620
04:19:26,319 --> 04:19:30,319
windows in order to select the device and i'm just going to say iphone 13 pro

621
04:19:30,319 --> 04:19:35,040
which is a simulator that i have here um

622
04:19:35,040 --> 04:19:39,680
right there and then i'm just going to go and say run

623
04:19:39,680 --> 04:19:43,760
run without debugging okay so this is going to take its time and i just

624
04:19:43,760 --> 04:19:47,120
thought to then use this time to explain a little

625
04:19:47,120 --> 04:19:49,920
bit about extensions um

626
04:19:49,920 --> 04:19:53,920
as you can see here extensions are the ability for

627
04:19:53,920 --> 04:19:58,720
the programmer and dart in order to er are there the ability for the programmer

628
04:19:58,720 --> 04:20:00,640
to extend

629
04:20:00,640 --> 04:20:05,439
or add functionality to an existing class in chapter six we talked about

630
04:20:05,439 --> 04:20:10,319
classes and objects so i kind of um would

631
04:20:10,319 --> 04:20:14,399
wish for everyone who is in this chapter to act actually have followed that

632
04:20:14,399 --> 04:20:17,439
chapter as well uh i'm actually going to go here and go

633
04:20:17,439 --> 04:20:21,600
to do not disturb yeah i am actually there so let's have a look at a simple

634
04:20:21,600 --> 04:20:25,120
extension in dart and how we can use that i can see that the programming

635
04:20:25,120 --> 04:20:28,640
program is running i'm going to delete the old code that we had and i'm going

636
04:20:28,640 --> 04:20:33,520
to bring my face to that bottom right and i'm just going to be a little bit

637
04:20:33,520 --> 04:20:37,760
aware of these um captions that i'm displaying on the

638
04:20:37,760 --> 04:20:40,960
screen and that they're blocking the screen so i'll just make sure that you

639
04:20:40,960 --> 04:20:45,439
can see the contents as as we go on so

640
04:20:45,439 --> 04:20:49,359
um let's also remove all of that and then let's just say that we have a

641
04:20:49,359 --> 04:20:55,600
simple cat class here who has a name and we can go in here and say final

642
04:20:55,600 --> 04:20:59,920
meow is yeah an instance of cat and i can say

643
04:20:59,920 --> 04:21:02,159
print and me

644
04:21:02,159 --> 04:21:07,359
actually we have to provide a name i can see here and let's just say fluffers

645
04:21:07,359 --> 04:21:11,120
and save meow dot's name okay so we print that name

646
04:21:11,120 --> 04:21:17,600
and i'm gonna say command s just like that and um perhaps gonna

647
04:21:17,600 --> 04:21:21,680
bring up visual studio code so you can actually see the output so command s and

648
04:21:21,680 --> 04:21:25,359
you can see that um where are we getting this there are

649
04:21:25,359 --> 04:21:29,120
equals oh that's an old command so command is and you can see fluffers is

650
04:21:29,120 --> 04:21:33,600
printed to the screen so that's because we have the name here okay so i'm also

651
04:21:33,600 --> 04:21:36,800
going to get rid of this caption right now so you can see the entirety of the

652
04:21:36,800 --> 04:21:41,279
code so like that bring it down here i'm also going to get rid of my

653
04:21:41,279 --> 04:21:45,279
simulator and bring it to another screen okay so now let's say that you want to

654
04:21:45,279 --> 04:21:49,600
add a functionality to this or a function to this class

655
04:21:49,600 --> 04:21:55,120
that allows a cat to run or allow the cat to jump so one way to do that is to

656
04:21:55,120 --> 04:22:00,239
actually go to the cat class class itself and create a

657
04:22:00,239 --> 04:22:04,479
function in there but what you can also do is to go and say extension

658
04:22:04,479 --> 04:22:10,000
for instance run on cat that's the syntax for creating an extension what

659
04:22:10,000 --> 04:22:13,279
you're saying is that you're extending the

660
04:22:13,279 --> 04:22:16,239
class call cats with

661
04:22:16,239 --> 04:22:20,880
a new functionality that is called run now this is not the name of the function

662
04:22:20,880 --> 04:22:23,199
itself it's just the name of your extension

663
04:22:23,199 --> 04:22:27,439
and you don't have to really know about the name right now so much it's just

664
04:22:27,439 --> 04:22:30,720
when you can go and become more advanced in dart and you for instance create

665
04:22:30,720 --> 04:22:33,680
libraries for yourself that you

666
04:22:33,680 --> 04:22:37,520
create extensions on different classes for instance in your library and then

667
04:22:37,520 --> 04:22:41,279
people or programmers who use your library then they can in

668
04:22:41,279 --> 04:22:45,840
basically include specific extensions that you've included

669
04:22:45,840 --> 04:22:49,760
in your library in their code or they can exclude them

670
04:22:49,760 --> 04:22:53,840
and so just know that it's just a name on the

671
04:22:53,840 --> 04:22:57,760
extension so it doesn't mean so much right now okay so then you can just

672
04:22:57,760 --> 04:23:02,000
create a function that has no return value called run and then you can say

673
04:23:02,000 --> 04:23:06,319
print and cat name is running

674
04:23:06,319 --> 04:23:09,760
and you know this syntax from the previous chapters that this is how you

675
04:23:09,760 --> 04:23:15,479
format a string and then in here you're basically doing um spring interpolation

676
04:23:15,479 --> 04:23:20,239
interpolation i think it's called and you're including that name inside

677
04:23:20,239 --> 04:23:23,600
your own string so the result is going to be cat

678
04:23:23,600 --> 04:23:27,199
space the name of this cat instance

679
04:23:27,199 --> 04:23:30,399
space is running okay so

680
04:23:30,399 --> 04:23:34,399
using that then you can every cat instance in your

681
04:23:34,399 --> 04:23:39,439
project is gonna get that function called run so you can just

682
04:23:39,439 --> 04:23:43,600
say me out run and command this and you can see that it

683
04:23:43,600 --> 04:23:49,760
says cap fluffers is running so just know that extensions are

684
04:23:49,760 --> 04:23:53,760
they're a great tool for you to use if you believe that there is a

685
04:23:53,760 --> 04:23:57,279
functionality that you're adding to an existing class which it doesn't really

686
04:23:57,279 --> 04:24:01,120
belong in that class itself

687
04:24:01,120 --> 04:24:04,159
but it may for instance belong in the

688
04:24:04,159 --> 04:24:07,199
current source file that you're working with so

689
04:24:07,199 --> 04:24:12,159
extensions are very very useful and but i also believe that they need to

690
04:24:12,159 --> 04:24:16,319
kind of be used with care kind of like sparsely so when you really need an

691
04:24:16,319 --> 04:24:20,479
extension you could just go and create an extension and they have limitations

692
04:24:20,479 --> 04:24:24,960
and as you get more used to programming in dart you will understand

693
04:24:24,960 --> 04:24:29,279
their limitations a little bit better so just know that they're there

694
04:24:29,279 --> 04:24:32,560
and can be used another example of an

695
04:24:32,560 --> 04:24:34,960
extension is for instance if you had a class

696
04:24:34,960 --> 04:24:39,199
person let me say first name

697
04:24:39,199 --> 04:24:43,359
property okay so this is an instance property and then

698
04:24:43,359 --> 04:24:48,319
you would say uh last name and then you say command dot individual

699
04:24:48,319 --> 04:24:52,880
studio code on mac or control dot in linux and windows and you create a

700
04:24:52,880 --> 04:24:57,920
constructor for your personal class okay so that's how you create an instance of

701
04:24:57,920 --> 04:25:01,600
your person class then you can go in here and you say

702
04:25:01,600 --> 04:25:05,600
um final fou is person whose first name is

703
04:25:05,600 --> 04:25:11,199
who and whose last name is bar okay and in here let's say you want to be

704
04:25:11,199 --> 04:25:16,080
able to calculate a person's full name all right so what you could do is to you

705
04:25:16,080 --> 04:25:19,199
could say extension for me

706
04:25:19,199 --> 04:25:23,920
one person and then here you could just say i have

707
04:25:23,920 --> 04:25:28,479
a i want to calculate the full name so that the result type is going to be a

708
04:25:28,479 --> 04:25:31,199
string and then you want to create a getter now

709
04:25:31,199 --> 04:25:33,760
we haven't talked about getter so much but just know that it's kind of like a

710
04:25:33,760 --> 04:25:37,359
property it's a property that can only be read forever but it cannot be written

711
04:25:37,359 --> 04:25:40,640
to so you just say get and then you say phoney

712
04:25:40,640 --> 04:25:45,439
as the name of the property and you will say that is equal to

713
04:25:45,439 --> 04:25:50,000
dollar first name space dollar last name okay

714
04:25:50,000 --> 04:25:53,600
so what you're saying here is that i have a getter whose return type is

715
04:25:53,600 --> 04:25:56,880
string and whose name is full name and it returns the first name and last

716
04:25:56,880 --> 04:26:01,760
memory with the space in between and then in here you could just say print

717
04:26:01,760 --> 04:26:04,399
foo for me all right

718
04:26:04,399 --> 04:26:09,279
and command s then i will bring the i'll remove the caption so you can see

719
04:26:09,279 --> 04:26:13,279
that foo bar is printed to the screen okay

720
04:26:13,279 --> 04:26:19,199
so that's for extensions and i'm gonna note that here in my i'm gonna mark it

721
04:26:19,199 --> 04:26:23,439
in my notes that we've talked about extensions all right

722
04:26:23,439 --> 04:26:27,279
now the next thing to talk about the next topic is futures

723
04:26:27,279 --> 04:26:30,960
and as you can see here future is a data to be returned in the future as its name

724
04:26:30,960 --> 04:26:33,520
suggests so um

725
04:26:33,520 --> 04:26:36,880
and that is part of something called asynchronous programming if you haven't

726
04:26:36,880 --> 04:26:40,800
uh been doing uh programming before you may not be so

727
04:26:40,800 --> 04:26:44,800
familiar with the term synchronous or asynchronous um

728
04:26:44,800 --> 04:26:49,600
a synchronous task is a task that happens when you ask for it and it

729
04:26:49,600 --> 04:26:53,199
returns with the data that you ask for immediately

730
04:26:53,199 --> 04:26:58,560
for instance if you say um what is 2 plus 2 and then we'll say

731
04:26:58,560 --> 04:27:03,600
okay it's four that's the synchronous task but if you for instance say to your

732
04:27:03,600 --> 04:27:08,159
um spouse or your friend go to the grocery store today please and

733
04:27:08,159 --> 04:27:11,760
get some milk that is not gonna happen in this instant

734
04:27:11,760 --> 04:27:16,399
it's i mean even if you even if you're the grocery stores right next to your

735
04:27:16,399 --> 04:27:19,359
house or your apartment then your friend has to go

736
04:27:19,359 --> 04:27:25,040
get get ready put put on shoes go to the store get the mail can come back so

737
04:27:25,040 --> 04:27:31,040
um that that is an asynchronous task so an asynchronous task is basically a task

738
04:27:31,040 --> 04:27:34,159
that whose results are not returned

739
04:27:34,159 --> 04:27:36,800
immediately okay so

740
04:27:36,800 --> 04:27:40,080
up until this point we've looked at functions that i'm actually going to

741
04:27:40,080 --> 04:27:44,239
remove all of this code from here so that we don't have all of that

742
04:27:44,239 --> 04:27:48,239
now we only have the void test function in here okay

743
04:27:48,239 --> 04:27:51,600
so

744
04:27:51,600 --> 04:27:55,520
all the functions that we've written so far have been synchronous functions in

745
04:27:55,520 --> 04:28:00,399
that for instance you would say string multiplied by

746
04:28:00,399 --> 04:28:05,600
two and then it gets an integer of a and it just says a multiplied by two all

747
04:28:05,600 --> 04:28:09,760
right and actually sorry hint so it returns an

748
04:28:09,760 --> 04:28:13,120
integer the function call the function name is called multiplied by two it

749
04:28:13,120 --> 04:28:16,080
takes an integer as a parameter and just multiplies that integer by two and

750
04:28:16,080 --> 04:28:21,040
returns it it's a synchronous operation okay however in dirt if you wanna work

751
04:28:21,040 --> 04:28:24,080
with asynchronous operations that you have to

752
04:28:24,080 --> 04:28:29,520
use a class called future so let's have a look at that um let's say

753
04:28:29,520 --> 04:28:35,600
that you have a function multiplied by two it which it may take

754
04:28:35,600 --> 04:28:40,319
some time in order to multiply a value okay this is hypothetical because yeah

755
04:28:40,319 --> 04:28:43,120
the multiplication is going to be done immediately but we're just going to

756
04:28:43,120 --> 04:28:46,399
assume that yeah this is a complicated multiplication and it will take some

757
04:28:46,399 --> 04:28:51,040
time all right so let's say future and then you would say what is the actual

758
04:28:51,040 --> 04:28:55,760
future what does it contain what data type can we say integer and then we say

759
04:28:55,760 --> 04:28:58,000
heavy future

760
04:28:58,000 --> 04:29:02,399
okay and it takes a value of int a heavy

761
04:29:02,399 --> 04:29:06,880
future that multiplies by two something like that

762
04:29:06,880 --> 04:29:12,640
okay so it says i return a future okay now

763
04:29:12,640 --> 04:29:16,880
in here then your your um

764
04:29:16,880 --> 04:29:21,600
responsibility is to create and package up an integer and return it inside a

765
04:29:21,600 --> 04:29:25,439
future so if you for instance in here say okay

766
04:29:25,439 --> 04:29:29,359
return 10 okay you see that it says l10 isn't

767
04:29:29,359 --> 04:29:34,479
compatible with the future of integer because 10 is a synchronous value it's

768
04:29:34,479 --> 04:29:39,359
right there it's present so what are you doing here then you could say

769
04:29:39,359 --> 04:29:43,760
okay what i do return is a future and then you could say oh i'm going to

770
04:29:43,760 --> 04:29:49,120
delay this future by a duration of three seconds okay

771
04:29:49,120 --> 04:29:53,359
and then you'll see there's a second parameter to this delayed function

772
04:29:53,359 --> 04:29:57,680
um you can see it let's see

773
04:29:57,680 --> 04:30:02,399
uh if we have a look at delayed function in here you see there is a second

774
04:30:02,399 --> 04:30:06,080
parameter called future or a computation so

775
04:30:06,080 --> 04:30:09,840
in here what you're what you need to do is just to say okay

776
04:30:09,840 --> 04:30:14,640
my second parameter is a function i'm going to ignore its return value well

777
04:30:14,640 --> 04:30:17,439
i'm just going to return the value of a okay

778
04:30:17,439 --> 04:30:22,880
so let's actually see if we say future delay duration seconds and then

779
04:30:22,880 --> 04:30:29,840
we say the parameter is let's say e and then i'm just going to say return a

780
04:30:29,840 --> 04:30:34,319
what is this value going to be then you know what we could actually look at

781
04:30:34,319 --> 04:30:38,399
the documentation for future delayed so i can also refresh my mind

782
04:30:38,399 --> 04:30:41,920
so i'm going to go and open a new safari window and i'm going to say future

783
04:30:41,920 --> 04:30:44,960
delayed this is the type of stuff that usually

784
04:30:44,960 --> 04:30:48,560
happens anyways if you're programming with dart i'm also going to increase the

785
04:30:48,560 --> 04:30:50,880
size so that you can see it a little bit better

786
04:30:50,880 --> 04:30:54,399
and let's have a look at a future delay here

787
04:30:54,399 --> 04:30:58,080
and here we can see how it's constructed uh

788
04:30:58,080 --> 04:31:02,159
how to use future okay so you can see here that there is a

789
04:31:02,159 --> 04:31:06,720
function that it doesn't basically take anything any uh value so

790
04:31:06,720 --> 04:31:12,000
i think the problem was that i may have just created like a function that um was

791
04:31:12,000 --> 04:31:16,720
expecting a parameter so this is how you would do that and i mean

792
04:31:16,720 --> 04:31:20,319
it is a little bit strange argument like i'm actually going to clean it up a

793
04:31:20,319 --> 04:31:23,760
little bit as well and then make this a constant as you can

794
04:31:23,760 --> 04:31:28,000
see it's suggested here and then return so i've written a lot of code i haven't

795
04:31:28,000 --> 04:31:31,840
explained really what i've done here but i will do that now so let's see

796
04:31:31,840 --> 04:31:36,960
uh we're saying that we're returning an integer in the future so

797
04:31:36,960 --> 04:31:39,680
it's not going to be returned immediately it's going to take some time

798
04:31:39,680 --> 04:31:44,640
for it to do its calculation okay so and then here let's say a multiplied by 2 as

799
04:31:44,640 --> 04:31:48,640
we as we promised in the function signature okay so that's future int

800
04:31:48,640 --> 04:31:52,080
this is the name of the function so nothing magical about that and then it

801
04:31:52,080 --> 04:31:56,560
takes a parameter that says integer a in the function body itself we're saying

802
04:31:56,560 --> 04:32:02,080
okay we're returning a future but we're delaying its return by the duration of

803
04:32:02,080 --> 04:32:06,479
three seconds so duration as you can see is a class here if you go in it

804
04:32:06,479 --> 04:32:09,680
actually is a constitution okay and then there is a class on top probably

805
04:32:09,680 --> 04:32:15,520
somewhere uh let's see

806
04:32:15,520 --> 04:32:22,000
constitution in blah blah blah constitution duration operator i believe

807
04:32:22,000 --> 04:32:27,040
this is i mean the duration dart it's probably just a class duration

808
04:32:27,040 --> 04:32:31,120
somewhere if you look at here class duration so

809
04:32:31,120 --> 04:32:34,239
so we're saying that we're creating a duration as a first parameter to the

810
04:32:34,239 --> 04:32:38,319
delayed function of the future so we're saying that we're delaying this future's

811
04:32:38,319 --> 04:32:41,840
return value by three seconds and then it says okay i'm going to wait three

812
04:32:41,840 --> 04:32:45,359
seconds but then i'm after i waited three seconds i'm going to call this

813
04:32:45,359 --> 04:32:48,000
function and this is kind of like a shorthand for

814
04:32:48,000 --> 04:32:52,720
creating a an inline function you could also do it like this you say okay my

815
04:32:52,720 --> 04:32:56,319
function that i'm providing to this function so it's like you're passing a

816
04:32:56,319 --> 04:33:00,720
function to the future delay function and then in here you could just say okay

817
04:33:00,720 --> 04:33:06,080
i return a multiplied by two and then a semicolon so this is probably a little

818
04:33:06,080 --> 04:33:09,920
bit easier to read so um

819
04:33:09,920 --> 04:33:15,199
now that we have that um we could actually use this function in

820
04:33:15,199 --> 04:33:19,760
our test um in our test function so

821
04:33:19,760 --> 04:33:24,000
when you then um i mean now that actually we we've now

822
04:33:24,000 --> 04:33:29,039
talked a little bit a bit about future and in order to use a

823
04:33:29,039 --> 04:33:32,000
future then you need to know something about

824
04:33:32,000 --> 04:33:35,199
async and awaiting dart now

825
04:33:35,199 --> 04:33:39,920
async and await are very related to each other but quite

826
04:33:39,920 --> 04:33:42,561
different in their meaning and um

827
04:33:42,561 --> 04:33:46,639
i just want to now explain actually first async

828
04:33:46,639 --> 04:33:52,320
async is a key word in dart that marks a function as asynchronous in that

829
04:33:52,320 --> 04:33:55,680
remember synchronous is something that returns immediately and asynchronous is

830
04:33:55,680 --> 04:33:59,520
something that does not return immediately takes some time however to

831
04:33:59,520 --> 04:34:04,959
mark a function async in here it means that this function internally

832
04:34:04,959 --> 04:34:09,840
can execute commands that do not return immediately okay

833
04:34:09,840 --> 04:34:13,920
so ac marking a function as async it

834
04:34:13,920 --> 04:34:18,561
it it means that this function internally calls other functions that do

835
04:34:18,561 --> 04:34:24,639
asynchronous work so let's now say final um result is

836
04:34:24,639 --> 04:34:28,561
heavy future and we say 10 okay

837
04:34:28,561 --> 04:34:32,480
now that we've done that let me just print the result and you'd be surprised

838
04:34:32,480 --> 04:34:36,240
to actually see the result when we do that and you'll see that it

839
04:34:36,240 --> 04:34:39,199
is not what you think it's not going to be 20 okay

840
04:34:39,199 --> 04:34:43,760
so i'm gonna get rid of this caption so that you can see the the result and i'm

841
04:34:43,760 --> 04:34:47,279
gonna clear the results in the console and command s

842
04:34:47,279 --> 04:34:52,320
and you'll see that what got printed to the screen is actually the future is not

843
04:34:52,320 --> 04:34:56,561
is not what you think it's not the value 20 which should be a

844
04:34:56,561 --> 04:35:00,879
multiplied by 2 which should be 20. so what happened here is that when you call

845
04:35:00,879 --> 04:35:04,561
a function that returns a future you're actually getting the future back you're

846
04:35:04,561 --> 04:35:09,520
not getting its data back so how do you get that data back well by

847
04:35:09,520 --> 04:35:14,080
prefixing the function with the keyword await

848
04:35:14,080 --> 04:35:20,240
so as its name indicates this keyword is just going to wait for

849
04:35:20,240 --> 04:35:23,840
the result of this function to be calculated and then it's gonna go to the

850
04:35:23,840 --> 04:35:26,959
next line okay so

851
04:35:26,959 --> 04:35:30,879
these two are very related to each other and you'll see that if i remove async

852
04:35:30,879 --> 04:35:34,879
then i will get an error saying that well you said this function

853
04:35:34,879 --> 04:35:38,959
called test is a synchronous function it just returns void

854
04:35:38,959 --> 04:35:43,600
basically means it doesn't return anything and it asynchronously does its

855
04:35:43,600 --> 04:35:47,600
work and doesn't have to wait for anything so

856
04:35:47,600 --> 04:35:51,119
but then inside the function you're saying wait which means yeah i have to

857
04:35:51,119 --> 04:35:54,320
wait some time for something and that's not okay so

858
04:35:54,320 --> 04:35:58,400
what you need to do then is you mark your functions with async if internally

859
04:35:58,400 --> 04:36:02,160
in that function you're using a weight all right

860
04:36:02,160 --> 04:36:07,520
and the weight itself then is used for

861
04:36:07,520 --> 04:36:12,480
waiting for the result of the future okay so if you remove this async and

862
04:36:12,480 --> 04:36:16,840
then you remove this await everything will just work but it's just

863
04:36:16,840 --> 04:36:22,719
synchronously getting the future of the heavy future that multiplies by two and

864
04:36:22,719 --> 04:36:27,199
printing it so it's not doing any asynchronous work in here you can see

865
04:36:27,199 --> 04:36:31,840
it's just getting that instance so now that we're calling that let's command s

866
04:36:31,840 --> 04:36:35,520
and you'll see it's waiting three seconds and then printed the

867
04:36:35,520 --> 04:36:39,119
result 20 to the screen okay so

868
04:36:39,119 --> 04:36:43,920
that for us was async and in weight and we're going to use async and in a way

869
04:36:43,920 --> 04:36:48,160
and await quite a lot in this course so it would be really good if you could

870
04:36:48,160 --> 04:36:51,279
have with this information that i gave you if you could just have a little bit

871
04:36:51,279 --> 04:36:54,879
of a read about future like documentation

872
04:36:54,879 --> 04:36:58,320
on the web so if you just search future

873
04:36:58,320 --> 04:37:03,760
dart um and maybe async await and read a little bit about them because

874
04:37:03,760 --> 04:37:06,959
they're so important in doing asynchronous work in dart that we just

875
04:37:06,959 --> 04:37:10,719
can't jump over them okay

876
04:37:10,719 --> 04:37:15,199
all right um so now we've talked about future

877
04:37:15,199 --> 04:37:19,119
uh and we've talked about async and awaits

878
04:37:19,119 --> 04:37:23,039
so i'm just gonna mark them as

879
04:37:23,039 --> 04:37:28,400
done in my notes um the next topic to talk about

880
04:37:28,400 --> 04:37:31,760
it would be streams

881
04:37:31,760 --> 04:37:38,000
so as you saw here a future in dart is a class that controls the computation of

882
04:37:38,000 --> 04:37:42,561
an asynchronous value in order to be returned in some point in the future

883
04:37:42,561 --> 04:37:45,920
however quite often in

884
04:37:45,920 --> 04:37:50,719
in your client's work or even server work you need to do work that is

885
04:37:50,719 --> 04:37:56,240
asynchronous however it is continuous work for instance if you if like i have

886
04:37:56,240 --> 04:38:01,600
the time uh displayed on top of my screen on the right hand corner

887
04:38:01,600 --> 04:38:05,359
that is a stream of strings

888
04:38:05,359 --> 04:38:11,840
it is a it is a stream because it doesn't have an end ready it it's a

889
04:38:11,840 --> 04:38:15,920
continuous pipe of information every minute that

890
04:38:15,920 --> 04:38:20,400
little ticker up on top right it's gonna increase and

891
04:38:20,400 --> 04:38:24,639
it's gonna go to zero six fifty zero six fifty 651 so

892
04:38:24,639 --> 04:38:29,039
it is continuously calculating the current time and like sending it down at

893
04:38:29,039 --> 04:38:32,240
this pipe now in asynchronous programming and in

894
04:38:32,240 --> 04:38:36,240
reactive programming which you may also get into if you're

895
04:38:36,240 --> 04:38:39,199
following with this course or if you're following some other course you may

896
04:38:39,199 --> 04:38:43,199
actually be interested in learning about learning more about streams

897
04:38:43,199 --> 04:38:47,760
and reactive streams a stream is just a pipe of data

898
04:38:47,760 --> 04:38:50,719
um that either

899
04:38:50,719 --> 04:38:56,561
it either completes or it never completes

900
04:38:56,561 --> 04:39:02,160
actually it completes successfully or it never completes or it errors out and

901
04:39:02,160 --> 04:39:06,561
dies okay so um a stream of time up there you can see

902
04:39:06,561 --> 04:39:11,840
it's not 0 6 50 in the morning and it is a stream of data that never completes

903
04:39:11,840 --> 04:39:15,680
because time is just just continuously going forward okay

904
04:39:15,680 --> 04:39:21,359
so when we talk about streams we just mean a pipe of data a future

905
04:39:21,359 --> 04:39:25,279
that sends data down this pipe that

906
04:39:25,279 --> 04:39:28,480
never ends as you saw in the case of a future a

907
04:39:28,480 --> 04:39:32,959
future ends it calculates its data and it returns and it says i'm done

908
04:39:32,959 --> 04:39:38,958
but a stream in dart is a future that just continues working

909
04:39:38,958 --> 04:39:42,878
okay so it calculates some data in the future and it also sends it down the

910
04:39:42,878 --> 04:39:46,560
stream and it says oh well i'm not done here's another data here's another data

911
04:39:46,560 --> 04:39:49,120
okay so

912
04:39:49,120 --> 04:39:55,520
let's have a look at this uh stream and see how we can work with streams okay

913
04:39:55,520 --> 04:40:02,798
so let's go and create a stream of um let's say a string

914
04:40:02,798 --> 04:40:08,798
and then we say get name okay now in here

915
04:40:08,798 --> 04:40:14,560
you your job is to create a string so if you say return hello

916
04:40:14,560 --> 04:40:18,560
see that hello is not compatible with the return type that you promised it's

917
04:40:18,560 --> 04:40:22,798
going to be a string um so you it this is very similar to how

918
04:40:22,798 --> 04:40:26,718
we worked with the future of integer you couldn't return an

919
04:40:26,718 --> 04:40:30,638
integer in that future but you have to create a future of integer and inside

920
04:40:30,638 --> 04:40:33,920
the function return the actual integer which was the

921
04:40:33,920 --> 04:40:36,958
computation if i go back you will see that

922
04:40:36,958 --> 04:40:40,878
code here right the future delayed and inside this

923
04:40:40,878 --> 04:40:43,920
function you're actually doing the computation all right

924
04:40:43,920 --> 04:40:46,878
so how do we create a stream and you could

925
04:40:46,878 --> 04:40:50,878
just say stream and then you could say

926
04:40:50,878 --> 04:40:57,600
okay periodic for instance or a value okay if you say we return a stream of

927
04:40:57,600 --> 04:41:00,560
value and then you could say foo

928
04:41:00,560 --> 04:41:03,840
is accepted what this means is that you have a pipe

929
04:41:03,840 --> 04:41:07,760
of data but the only value that it contains is a

930
04:41:07,760 --> 04:41:10,878
foo is the value of food that's it all right

931
04:41:10,878 --> 04:41:16,878
so let's now go into this test function and try to consume this uh stream if you

932
04:41:16,878 --> 04:41:21,200
just said final value is gets me

933
04:41:21,200 --> 04:41:25,920
and you just print this value and then i'm going to clear the logs

934
04:41:25,920 --> 04:41:30,000
here and say command s you'll see that just like future it just says instance

935
04:41:30,000 --> 04:41:35,760
of controller stream okay so it is not the actual value inside the string so

936
04:41:35,760 --> 04:41:39,280
the question is how do you wait for values

937
04:41:39,280 --> 04:41:44,480
inside a stream you could just say okay await

938
04:41:44,480 --> 04:41:47,440
it says okay you've actually we could read this a weight

939
04:41:47,440 --> 04:41:50,798
applied to stream string which is not a future so

940
04:41:50,798 --> 04:41:54,958
dart is understanding that okay you're awaiting on a stream but

941
04:41:54,958 --> 04:41:58,160
this is this is not just like a future that you're gonna wait for there's

942
04:41:58,160 --> 04:42:02,400
nothing to await like it's not a single value is a stream so

943
04:42:02,400 --> 04:42:05,840
the syntax to do that is await

944
04:42:05,840 --> 04:42:10,160
four okay so this is a syntax

945
04:42:10,160 --> 04:42:15,040
for awaiting for values inside a stream then you could say wait for final value

946
04:42:15,040 --> 04:42:18,000
in its name okay

947
04:42:18,000 --> 04:42:20,958
and then you could just print the value so this is a little bit of a strange

948
04:42:20,958 --> 04:42:25,440
syntax but if you read it in like in english it makes perfect sense you're

949
04:42:25,440 --> 04:42:31,040
waiting for values in get's name if you just ignore the final in here

950
04:42:31,040 --> 04:42:33,520
okay but read it in english from left to

951
04:42:33,520 --> 04:42:37,760
right await for values in get name that's it

952
04:42:37,760 --> 04:42:41,360
and then at the end i'm going to say print stream

953
04:42:41,360 --> 04:42:45,520
finished working

954
04:42:45,520 --> 04:42:50,638
here the console command s and you'll see it immediately said foo

955
04:42:50,638 --> 04:42:54,638
and then stream finished working i'm gonna clear it command s

956
04:42:54,638 --> 04:42:59,680
foo stream finish working okay so this is an interesting concept but

957
04:42:59,680 --> 04:43:03,280
it's still not a stream really i mean we're packaging the full string inside

958
04:43:03,280 --> 04:43:07,600
the stream but it's only one value we could have done

959
04:43:07,600 --> 04:43:11,600
that with a future so let's take advantage of streams actual

960
04:43:11,600 --> 04:43:15,920
functionality of sending down data in its pipe

961
04:43:15,920 --> 04:43:19,760
continuously so what we could do in here say stream

962
04:43:19,760 --> 04:43:24,718
periodic it means periodically produce values and in here you can see the first

963
04:43:24,718 --> 04:43:28,958
parameter is a duration so let's say constant duration

964
04:43:28,958 --> 04:43:34,958
of seconds every second okay and then there is a second parameter in here

965
04:43:34,958 --> 04:43:38,560
that you'll have to provide if i move my mouse over periodic you'll see that the

966
04:43:38,560 --> 04:43:44,000
second parameter is this string function int okay so it means that give me a

967
04:43:44,000 --> 04:43:49,440
function that accepts an integer and then it returns a string all right

968
04:43:49,440 --> 04:43:52,958
and it understands that it needs to return a string because you're saying

969
04:43:52,958 --> 04:43:59,040
that your stream is a string if you change this to an int and then went here

970
04:43:59,040 --> 04:44:03,760
um to the documentation and the documentation will actually or the

971
04:44:03,760 --> 04:44:07,040
method signature will change to say that uh your you should support you're

972
04:44:07,040 --> 04:44:10,480
supposed to take an integer in this function that you provide to me and then

973
04:44:10,480 --> 04:44:13,840
you need to return an integer okay so that string i just wanted to show you

974
04:44:13,840 --> 04:44:17,920
that that string that was shown in the function signature there it's because we

975
04:44:17,920 --> 04:44:21,680
promised to return a string in our function okay so

976
04:44:21,680 --> 04:44:25,040
let's go in here basically the function signature said

977
04:44:25,040 --> 04:44:28,878
that you need to accept an integer so i'm just going to say value

978
04:44:28,878 --> 04:44:34,080
and then let's go in here i'm just going to say return foo

979
04:44:34,080 --> 04:44:38,718
so we basically conform to that function signature we

980
04:44:38,718 --> 04:44:42,560
said we take some value and you see the value is an integer

981
04:44:42,560 --> 04:44:47,520
and then we're returning a string okay so now we can consume that so if i clear

982
04:44:47,520 --> 04:44:52,480
this log and i say command s you see that every second the value of foo is

983
04:44:52,480 --> 04:44:54,560
going to get printed to the screen and that's

984
04:44:54,560 --> 04:44:58,638
actually i need to remove this caption i can see you can't see it

985
04:44:58,638 --> 04:45:02,400
you see that 10 times 11 times 12 13

986
04:45:02,400 --> 04:45:05,760
14. so all right

987
04:45:05,760 --> 04:45:09,280
um i'm sorry about that the caption was blocking the screen i wasn't aware of

988
04:45:09,280 --> 04:45:13,920
that um or actually i was aware of that but i forgot that that was the case in

989
04:45:13,920 --> 04:45:19,040
in this as i was talking so you can see that every second the

990
04:45:19,040 --> 04:45:25,280
stream is sending a value all right now that's that's basically the gist of

991
04:45:25,280 --> 04:45:28,638
using streams you will

992
04:45:28,638 --> 04:45:33,840
i'm wondering actually if we're gonna use the streams in this course i believe

993
04:45:33,840 --> 04:45:39,840
at some point we are i need to probably look at the um

994
04:45:39,840 --> 04:45:44,400
look at my notes yes i can see that we're actually using

995
04:45:44,400 --> 04:45:48,560
streams in this course so don't worry about

996
04:45:48,560 --> 04:45:53,040
if you don't fully understand streams at the moment because we're gonna talk

997
04:45:53,040 --> 04:45:57,440
about streams and um

998
04:45:57,440 --> 04:46:01,920
because we're gonna actually talk about streams and stream controllers later in

999
04:46:01,920 --> 04:46:03,760
this in this

1000
04:46:03,760 --> 04:46:07,200
course so just know for now that a stream is like

1001
04:46:07,200 --> 04:46:11,680
a future but it continuously or periodically can return

1002
04:46:11,680 --> 04:46:18,638
values and then you can wait for those values using the await for

1003
04:46:18,638 --> 04:46:23,040
syntax and dart okay

1004
04:46:23,040 --> 04:46:25,920
okay um

1005
04:46:25,920 --> 04:46:30,240
now the next topic to

1006
04:46:30,240 --> 04:46:36,480
talk about in this chapter is generators so

1007
04:46:36,480 --> 04:46:39,760
generators are very very interesting in dart

1008
04:46:39,760 --> 04:46:45,200
some other languages also support generators and

1009
04:46:45,200 --> 04:46:48,958
but not not all modern languages do that so

1010
04:46:48,958 --> 04:46:55,360
a generator in dart is a function that returns

1011
04:46:55,360 --> 04:47:03,040
i don't want to say iterable but it returns a list of things

1012
04:47:03,040 --> 04:47:07,360
but it internally calculates that data in a

1013
04:47:07,360 --> 04:47:12,160
very simple way that's the best explanation i can come

1014
04:47:12,160 --> 04:47:14,638
up with to be honest with you let's have a look here

1015
04:47:14,638 --> 04:47:18,240
i think the best way to do that is actually write a function that does uh

1016
04:47:18,240 --> 04:47:23,440
creates a generator okay um i'm gonna clear this um

1017
04:47:23,440 --> 04:47:26,638
and then we have a test function here let's mark lacing okay

1018
04:47:26,638 --> 04:47:30,320
um let's now go create a generator and

1019
04:47:30,320 --> 04:47:32,958
let's say we want to

1020
04:47:32,958 --> 04:47:36,638
create a function that returns the values one two three

1021
04:47:36,638 --> 04:47:38,878
um so

1022
04:47:38,878 --> 04:47:44,718
a way to do that is would be to say i want a list of integers okay and my

1023
04:47:44,718 --> 04:47:50,638
function or get one two three like this

1024
04:47:50,638 --> 04:47:54,320
and you could say return one two three like that okay so that's completely

1025
04:47:54,320 --> 04:47:57,040
valid another way of doing that is to use

1026
04:47:57,040 --> 04:48:02,638
something called iterable and iterables i mean you need to

1027
04:48:02,638 --> 04:48:05,760
understand what iterables actually are and they're kind of like lazy

1028
04:48:05,760 --> 04:48:10,638
collections and when you get used to doing more software engineering you will

1029
04:48:10,638 --> 04:48:15,760
understand more what why we use lazy collections

1030
04:48:15,760 --> 04:48:21,920
but for now just know that an iterable is a prepared and packaged up list of

1031
04:48:21,920 --> 04:48:24,798
things but it is not

1032
04:48:24,798 --> 04:48:29,840
it is not completely calculated when it first begins

1033
04:48:29,840 --> 04:48:34,080
it's kind of like it's kind of like how a restaurant works

1034
04:48:34,080 --> 04:48:38,160
in a typical night a restaurant might have for instance 50 customers

1035
04:48:38,160 --> 04:48:42,878
and when that shift begins during the night

1036
04:48:42,878 --> 04:48:47,360
not all food is ready i mean it can't possibly be like when cut the first

1037
04:48:47,360 --> 04:48:51,040
customer comes in we can say that the food for the 50th customer is already

1038
04:48:51,040 --> 04:48:55,120
ready in the kitchen that's how a restaurant works it it

1039
04:48:55,120 --> 04:48:59,680
listens to orders of its customers and then it generates the food based on the

1040
04:48:59,680 --> 04:49:05,040
orders that's how an iterable works okay however a list in dart is an already

1041
04:49:05,040 --> 04:49:09,280
packaged list it means that it's as if like you go to a supermarket and then

1042
04:49:09,280 --> 04:49:12,480
you buy ready ready to go

1043
04:49:12,480 --> 04:49:18,638
food that's already packaged 30 packs of that that is a list that is 30 ready

1044
04:49:18,638 --> 04:49:24,320
readily packaged food items and then you take away that's how list works but an

1045
04:49:24,320 --> 04:49:27,040
iterable is more like it's

1046
04:49:27,040 --> 04:49:32,240
it's a list of like things that gets calculated on the go

1047
04:49:32,240 --> 04:49:35,600
on the fly all right so

1048
04:49:35,600 --> 04:49:38,798
um just know that for now so we just said

1049
04:49:38,798 --> 04:49:42,320
either well and as you can see dart understood that okay a list is also an

1050
04:49:42,320 --> 04:49:45,440
eye trouble so i don't have to worry about that so it didn't give you an

1051
04:49:45,440 --> 04:49:48,480
error so let's go and actually instead of

1052
04:49:48,480 --> 04:49:51,760
doing one two three let's go and mark our

1053
04:49:51,760 --> 04:49:56,560
um function as uh a generator and you do that with

1054
04:49:56,560 --> 04:50:03,920
either sync or async okay so and this would be a stream like

1055
04:50:03,920 --> 04:50:09,680
now the difference between sync with a an asterisk an async with an

1056
04:50:09,680 --> 04:50:13,520
asterisk is a sync function is an

1057
04:50:13,520 --> 04:50:19,280
it is a generator function that returns a list of things but it calculates that

1058
04:50:19,280 --> 04:50:22,958
list of things asynchronously and as you can guess the

1059
04:50:22,958 --> 04:50:28,638
async equivalent of the sync asterisk it does the exact same thing but it returns

1060
04:50:28,638 --> 04:50:32,560
a stream and which means it's asynchronously

1061
04:50:32,560 --> 04:50:38,000
calculating its result okay so when you mark a function as sync you

1062
04:50:38,000 --> 04:50:42,560
don't then go and return like this because you can see that you

1063
04:50:42,560 --> 04:50:46,560
can see that it says you're creating a generator function so you have to kind

1064
04:50:46,560 --> 04:50:52,480
of calculate your results now you can't just return a bunch of things to me okay

1065
04:50:52,480 --> 04:50:56,560
so to do that you would use a keyword in

1066
04:50:56,560 --> 04:51:00,480
dart called yield now yield is

1067
04:51:00,480 --> 04:51:04,400
a very interesting keyword that you would use only in generator functions as

1068
04:51:04,400 --> 04:51:07,760
far as i know and in here you're telling dart that

1069
04:51:07,760 --> 04:51:14,480
okay the first value that i'm outputting in my iterable is the value of one so

1070
04:51:14,480 --> 04:51:19,440
if in here we went and said um

1071
04:51:19,440 --> 04:51:24,798
i know or say we say four value in

1072
04:51:24,798 --> 04:51:30,240
gets one two three and then you could just say print value

1073
04:51:30,240 --> 04:51:33,760
you can see it only prints the value of 1. i'm actually going to get rid of this

1074
04:51:33,760 --> 04:51:38,638
caption you can see the output it only prints the value of 1 just

1075
04:51:38,638 --> 04:51:43,040
because we yielded the value of 1. okay so you could just send then say yield

1076
04:51:43,040 --> 04:51:47,600
one yield two and yield three then you'd see the values one two three

1077
04:51:47,600 --> 04:51:50,638
so in this function internally then you

1078
04:51:50,638 --> 04:51:54,240
could do a lot of other important things maybe some synchronous uh some other

1079
04:51:54,240 --> 04:51:58,160
synchronous calculations and every time you have a value to output

1080
04:51:58,160 --> 04:52:01,840
then you would basically um

1081
04:52:01,840 --> 04:52:08,560
you would do a yield and you could also print the entire return value

1082
04:52:08,560 --> 04:52:12,638
yes you don't have to do a four loop so you could just say print it and then

1083
04:52:12,638 --> 04:52:16,798
it would say one two three okay but if you do a for loop then you're

1084
04:52:16,798 --> 04:52:20,638
actually taking advantage of that lazy um

1085
04:52:20,638 --> 04:52:25,360
capabilities of an eye turbo so you could break out the loop at loop at any

1086
04:52:25,360 --> 04:52:30,400
time you could just say print value

1087
04:52:30,400 --> 04:52:34,958
if value is two

1088
04:52:34,958 --> 04:52:40,080
then you could break okay so let's clear the logs and command s

1089
04:52:40,080 --> 04:52:44,160
you'll see only the value of one and two gets printed and then as soon as you're

1090
04:52:44,160 --> 04:52:47,680
at the value of two then you're breaking and that means that this yield

1091
04:52:47,680 --> 04:52:54,480
was basically never calculated so that's that's like the beauty of

1092
04:52:54,480 --> 04:52:57,360
generator functions

1093
04:52:57,360 --> 04:53:01,280
so you could also create asynchronous generator functions as i mentioned and

1094
04:53:01,280 --> 04:53:06,160
that means that you're kind of like creating a stream of iterables

1095
04:53:06,160 --> 04:53:11,040
to be honest with you asynchronous generators i've i've maybe used them

1096
04:53:11,040 --> 04:53:14,718
once or twice uh in in the many years i've used dart

1097
04:53:14,718 --> 04:53:17,280
so i don't think you're going to use them a

1098
04:53:17,280 --> 04:53:22,320
lot but just know that they're there and you could use them by prefixing your eye

1099
04:53:22,320 --> 04:53:25,680
treble with a stream saying that basically you're returning a

1100
04:53:25,680 --> 04:53:29,840
stream of eye troubles and then suffixing your function with async just

1101
04:53:29,840 --> 04:53:34,000
like that all right so and then here it says okay you said

1102
04:53:34,000 --> 04:53:37,200
that you're returning a stream of ideal integers but you're turning only one

1103
04:53:37,200 --> 04:53:41,680
value in here then you would just say okay one two

1104
04:53:41,680 --> 04:53:44,240
okay um but then you would say yeah then you

1105
04:53:44,240 --> 04:53:47,920
have the ability to do whatever you want here like return an actual eye variable

1106
04:53:47,920 --> 04:53:51,360
okay so i'm not going to talk about asynchronous generators to be honest

1107
04:53:51,360 --> 04:53:55,440
with you in this course because they're kind of like outside the scope

1108
04:53:55,440 --> 04:54:01,680
so just know that they exist and you can use them

1109
04:54:01,680 --> 04:54:05,040
okay i'm going to mark in my notes that we've talked about generators so

1110
04:54:05,040 --> 04:54:09,200
the next topic to talk about are generics

1111
04:54:09,200 --> 04:54:14,560
and i'm going to bring up a caption here so generics in

1112
04:54:14,560 --> 04:54:17,680
programming languages that do support it are

1113
04:54:17,680 --> 04:54:22,400
there so that you avoid writing the same code over and over again okay

1114
04:54:22,400 --> 04:54:26,958
so let's say that you i mean this is a very

1115
04:54:26,958 --> 04:54:30,480
typical example i know it's a little bit cliche

1116
04:54:30,480 --> 04:54:33,600
but i think it's cliche for a reason and

1117
04:54:33,600 --> 04:54:36,798
that's because it's such a good example um

1118
04:54:36,798 --> 04:54:41,280
let's say you have a class

1119
04:54:41,280 --> 04:54:46,240
that stores a pair of data let's just say class

1120
04:54:46,240 --> 04:54:50,320
pair okay and then in here you could say okay what

1121
04:54:50,320 --> 04:54:55,520
pair of data do i want to store okay i want to store

1122
04:54:55,520 --> 04:55:00,160
value one as a string and i want to also store value two as a string and then you

1123
04:55:00,160 --> 04:55:04,080
create the constructor for it okay all right that's that's great it's a

1124
04:55:04,080 --> 04:55:09,040
pair of strings but how do you then pair an integer like two integers then

1125
04:55:09,040 --> 04:55:13,200
you would say okay i have to have another pair class and

1126
04:55:13,200 --> 04:55:18,240
this one is an integer but then you have this problem because

1127
04:55:18,240 --> 04:55:22,080
pair is already defined as a class up there on line seven

1128
04:55:22,080 --> 04:55:26,240
so you cannot reuse that you cannot have the same name then you would say okay

1129
04:55:26,240 --> 04:55:30,560
pair of integers

1130
04:55:30,560 --> 04:55:33,680
and then here you would say pair of strings

1131
04:55:33,680 --> 04:55:37,040
and you make sure that the constructor name is also

1132
04:55:37,040 --> 04:55:39,040
correct now

1133
04:55:39,040 --> 04:55:44,480
i mean you may have also i mean in this point at this point we don't have logic

1134
04:55:44,480 --> 04:55:48,000
at all in these two classes you may have actually quite a lot of logic in your

1135
04:55:48,000 --> 04:55:52,000
classes but as i mentioned i think during one of

1136
04:55:52,000 --> 04:55:55,440
these chapters i think it was chapter one or two program one of the main

1137
04:55:55,440 --> 04:56:00,240
characteristics of software engineers is that we all dislike

1138
04:56:00,240 --> 04:56:04,798
um writing the same piece of code over and over again so

1139
04:56:04,798 --> 04:56:08,560
we try to as much as possible avoid

1140
04:56:08,560 --> 04:56:12,400
um repeating ourselves so

1141
04:56:12,400 --> 04:56:17,600
that's where generics can come in so what you could do is instead of doing

1142
04:56:17,600 --> 04:56:22,000
this pair of pair of let me bring this here let's go and

1143
04:56:22,000 --> 04:56:25,840
create a class that is generic and you would say pair

1144
04:56:25,840 --> 04:56:31,360
and then a format for creating a generic class is to write after the name of the

1145
04:56:31,360 --> 04:56:37,200
class oh just to a less than and greater than sign okay and then open your square

1146
04:56:37,200 --> 04:56:39,360
brackets now

1147
04:56:39,360 --> 04:56:43,440
in here then you define your generic

1148
04:56:43,440 --> 04:56:50,560
names like the data types with usually with single characters let's say that

1149
04:56:50,560 --> 04:56:56,240
what you want is a pair of any data type let's call the first data type a

1150
04:56:56,240 --> 04:57:00,638
and the second data type b because there's two values so let's call this

1151
04:57:00,638 --> 04:57:06,240
one a and this one b okay you would just write them as we just say we say a and b

1152
04:57:06,240 --> 04:57:10,878
okay so then in here you would say final

1153
04:57:10,878 --> 04:57:14,000
a value one so you're telling the compiler

1154
04:57:14,000 --> 04:57:19,760
that okay whatever pair i'm creating the first data type that i accept is a

1155
04:57:19,760 --> 04:57:23,600
and that should be placed here and then we say okay then the b is the

1156
04:57:23,600 --> 04:57:26,638
second one and then we create a constructor for

1157
04:57:26,638 --> 04:57:30,240
this okay so how you would use this then is you

1158
04:57:30,240 --> 04:57:37,360
would say final and is pair then you would say foo and bar okay

1159
04:57:37,360 --> 04:57:43,120
and then this is just like a simple it's very similar than to pair of

1160
04:57:43,120 --> 04:57:46,878
strings that we wrote up there you see it worked as well but now in this case

1161
04:57:46,878 --> 04:57:51,520
dart is smart enough to understand that names is a pair of string and string

1162
04:57:51,520 --> 04:57:56,560
meaning that the two values that you pass to this pair generic class were

1163
04:57:56,560 --> 04:58:02,718
actually then placed for you magically inside the a and b templates

1164
04:58:02,718 --> 04:58:07,040
that you provided up here okay so if in if in this case then you said

1165
04:58:07,040 --> 04:58:10,560
okay i have foo and then i have the value of 20

1166
04:58:10,560 --> 04:58:14,560
then dart smart enough to understand that oh now it's a pair of string and

1167
04:58:14,560 --> 04:58:16,958
integer so

1168
04:58:16,958 --> 04:58:22,080
that's how you would use uh generics basically so i mean there are so much to

1169
04:58:22,080 --> 04:58:27,120
talk about about generics and how you can

1170
04:58:27,120 --> 04:58:30,240
uh basically utilize them in order to create

1171
04:58:30,240 --> 04:58:35,520
very simple classes so that they're so that they're reusing as much

1172
04:58:35,520 --> 04:58:41,360
capability or as much code as possible without duplicating that code so

1173
04:58:41,360 --> 04:58:45,840
and talking about generics to be honest with you it could be it's its own entire

1174
04:58:45,840 --> 04:58:51,440
course we could go on and on four five six hours i could talk about generics so

1175
04:58:51,440 --> 04:58:55,840
just know that generics are created like this you say class pair and then you

1176
04:58:55,840 --> 04:58:58,638
would say your generic data types which then in

1177
04:58:58,638 --> 04:59:02,160
case then in turn get placed inside the

1178
04:59:02,160 --> 04:59:06,240
definitions inside the class itself so okay

1179
04:59:06,240 --> 04:59:08,718
um

1180
04:59:08,718 --> 04:59:12,400
all right now that we've talked about generics um i believe that we could kind

1181
04:59:12,400 --> 04:59:16,638
of like wrap up this um chapter where we talked a little bit

1182
04:59:16,638 --> 04:59:20,400
more about advanced topics in dart extensions futures

1183
04:59:20,400 --> 04:59:24,480
async awaits streams the weight for stream generators and

1184
04:59:24,480 --> 04:59:29,520
generics okay now i'm actually really happy that we

1185
04:59:29,520 --> 04:59:33,840
went through chapter number seven which is this chapter because up until this

1186
04:59:33,840 --> 04:59:38,400
point we've kind of been like preparing ourselves for our launch

1187
04:59:38,400 --> 04:59:42,240
it's it's now time that we put everything

1188
04:59:42,240 --> 04:59:47,840
that we've learned into practice and actually start building our project

1189
04:59:47,840 --> 04:59:52,000
so i'm actually getting goosebumps because it's such an important part of

1190
04:59:52,000 --> 04:59:55,600
this course that we've actually gone through the basics we've talked about

1191
04:59:55,600 --> 04:59:59,520
dart we've talked about like some of the basics of setting up the simulator etc

1192
04:59:59,520 --> 05:00:04,240
etc that it's with great pleasure that i can say okay we've gone through that now

1193
05:00:04,240 --> 05:00:08,000
and all you need to do right now is just to practice and what better way to

1194
05:00:08,000 --> 05:00:13,200
practice than to put what you've learned um into

1195
05:00:13,200 --> 05:00:15,680
application by writing

1196
05:00:15,680 --> 05:00:18,878
the flutter project that we've been aiming

1197
05:00:18,878 --> 05:00:23,440
to do from the beginning so without further ado let's then

1198
05:00:23,440 --> 05:00:26,798
prepare for the next chapter which is chapter eight and in chapter eight we're

1199
05:00:26,798 --> 05:00:30,718
gonna talk about uh project setup and then we're actually

1200
05:00:30,718 --> 05:00:34,638
gonna add some dependencies to our project which we're gonna use

1201
05:00:34,638 --> 05:00:39,440
later okay so let's aim for that and i'll see you in

1202
05:00:39,440 --> 05:00:43,120
the next chapter hello and welcome to chapter number

1203
05:00:43,120 --> 05:00:47,040
eight of the slatter course in this chapter we're going to talk

1204
05:00:47,040 --> 05:00:50,958
about our basic project setup in the previous chapters

1205
05:00:50,958 --> 05:00:54,160
up until this point to be honest with you we've been just working with dart

1206
05:00:54,160 --> 05:00:57,680
and kind of like um laying the foundation for learning

1207
05:00:57,680 --> 05:01:01,200
the programming language that actually um

1208
05:01:01,200 --> 05:01:05,600
uh it fuels flutter so it's a programming language that you're gonna

1209
05:01:05,600 --> 05:01:08,958
need to be quite comfortable with in order to be able to write your flutter

1210
05:01:08,958 --> 05:01:13,280
applications so you're gonna learn more and more about dart as we go on in this

1211
05:01:13,280 --> 05:01:16,400
course but it is very very good if you can

1212
05:01:16,400 --> 05:01:21,040
look at the intro chapter and then just kind of like follow along on the

1213
05:01:21,040 --> 05:01:26,400
chapters up until this point so that you get the general idea of what dart is all

1214
05:01:26,400 --> 05:01:30,400
about and then how you can use it at a very shallow level i mean i know

1215
05:01:30,400 --> 05:01:33,840
there's lots of material that i put out on that but

1216
05:01:33,840 --> 05:01:38,080
we really didn't like go so deep in every topic so i just wanted to give you

1217
05:01:38,080 --> 05:01:43,280
like a flavor and taste of the different available options in dart

1218
05:01:43,280 --> 05:01:45,840
so if you haven't watched those chapters

1219
05:01:45,840 --> 05:01:50,160
please just go ahead and skim skim over them even if you're comfortable already

1220
05:01:50,160 --> 05:01:52,798
with dart so

1221
05:01:52,798 --> 05:01:56,080
in this chapter we're going to talk about the project setup and this is the

1222
05:01:56,080 --> 05:02:00,080
like one of the absolute most important parts of setting up

1223
05:02:00,080 --> 05:02:04,798
um an application for flutter so if you're

1224
05:02:04,798 --> 05:02:09,760
if you're thinking of maybe skipping um over this chapter that's also okay if

1225
05:02:09,760 --> 05:02:12,240
you know what you're doing but if this is the first time that you're setting up

1226
05:02:12,240 --> 05:02:16,000
a flutter project that then i think it's really good if you can

1227
05:02:16,000 --> 05:02:23,840
follow along with this chapter so i'm going to go now into um

1228
05:02:23,840 --> 05:02:27,760
let's do some setup here so what am i going to do i'm going to bring my face

1229
05:02:27,760 --> 05:02:32,320
to the bottom right here so you can see the entirety of the screen

1230
05:02:32,320 --> 05:02:36,798
and then i'm going to bring up the caption for the next item that we're

1231
05:02:36,798 --> 05:02:43,440
going to talk about and in here well we have a um

1232
05:02:43,440 --> 05:02:46,240
as you can see there is a command that you can issue in the terminal to create

1233
05:02:46,240 --> 05:02:49,840
a new flosser project so every flosser project has different

1234
05:02:49,840 --> 05:02:54,798
properties it has for instance a name which is the entire like the name of the

1235
05:02:54,798 --> 05:02:59,280
entire project um and also one of

1236
05:02:59,280 --> 05:03:02,480
the main properties of flutter project is

1237
05:03:02,480 --> 05:03:05,680
identifier now the identifier wouldn't be so

1238
05:03:05,680 --> 05:03:11,520
important had it not been that flutter can actually deploy to ios and android

1239
05:03:11,520 --> 05:03:16,080
and an identifier for an ios app and an android app is

1240
05:03:16,080 --> 05:03:20,320
actually what defines that application as unique

1241
05:03:20,320 --> 05:03:26,400
as on the app store where ios ios users and ipad os users can download

1242
05:03:26,400 --> 05:03:30,958
applications and on the um play store where android users can

1243
05:03:30,958 --> 05:03:34,798
download android apps so these identifiers are as

1244
05:03:34,798 --> 05:03:38,160
i mentioned in one of the previous chapters are kind of like reverse domain

1245
05:03:38,160 --> 05:03:41,840
identifiers so it's kind of like if your website is

1246
05:03:41,840 --> 05:03:45,760
foobar.com and your application is called baz

1247
05:03:45,760 --> 05:03:50,560
then your reverse domain identifier for your application will become dot

1248
05:03:50,560 --> 05:03:54,400
foobar.bass so it's kind of like

1249
05:03:54,400 --> 05:03:59,680
you take your domain name and reverse it so if foobar.com becomes com.fubar and

1250
05:03:59,680 --> 05:04:04,480
then you put dots after that and then you put your actual application name

1251
05:04:04,480 --> 05:04:09,360
so these identifiers need to be unique and by that i mean like

1252
05:04:09,360 --> 05:04:14,718
if a if a developer on the ios app store or google play

1253
05:04:14,718 --> 05:04:19,680
store is already gone and registered the reverse um basically that item

1254
05:04:19,680 --> 05:04:24,320
identifier.com.fubar.bass for any of their applications so they

1255
05:04:24,320 --> 05:04:28,400
said okay here's my application called image gallery but it has a completely

1256
05:04:28,400 --> 05:04:32,798
random identifier of com.foobar.pass

1257
05:04:32,798 --> 05:04:37,760
then you as a new developer even if you want to do the same funky uh deployment

1258
05:04:37,760 --> 05:04:41,760
to the app store you can't register that name anymore because because it is

1259
05:04:41,760 --> 05:04:44,160
already taken so

1260
05:04:44,160 --> 05:04:47,680
think of the identifier of your project as

1261
05:04:47,680 --> 05:04:52,480
what is gonna carry on from the start of where you create your project all the

1262
05:04:52,480 --> 05:04:56,080
way through to the app stores okay so

1263
05:04:56,080 --> 05:05:00,480
it is quite important that you actually choose it wisely because if you don't do

1264
05:05:00,480 --> 05:05:04,320
that wisely from the absolute start unfortunately you will have to do some

1265
05:05:04,320 --> 05:05:10,400
filling around in the future to go and update that yourself so

1266
05:05:10,400 --> 05:05:13,920
um so i would i would really suggest and

1267
05:05:13,920 --> 05:05:18,480
recommend here that you take a little bit of um time to think about what that

1268
05:05:18,480 --> 05:05:22,798
identifier is going to be what you prefer that identifier to be

1269
05:05:22,798 --> 05:05:26,000
and what you're comfortable with and what for instance if you have a domain

1270
05:05:26,000 --> 05:05:31,440
name as a developer for the app store and for google play store

1271
05:05:31,440 --> 05:05:35,680
so if you have a domain name already registered on your name i suggest

1272
05:05:35,680 --> 05:05:39,760
strongly then that you use that and if you have domain names personally and

1273
05:05:39,760 --> 05:05:43,280
domain names selected as like a

1274
05:05:43,280 --> 05:05:47,200
and for your company then you need to now know whether you're going to release

1275
05:05:47,200 --> 05:05:51,280
this application under your name personally or if you're going to release

1276
05:05:51,280 --> 05:05:57,600
it on your company's name so these all play a role but

1277
05:05:57,600 --> 05:06:02,480
without further ado let's just go and create our project here and

1278
05:06:02,480 --> 05:06:05,120
um i to be honest with you i personally

1279
05:06:05,120 --> 05:06:08,638
haven't really thought about whether i want to release this application as a

1280
05:06:08,638 --> 05:06:12,240
private person or if i want to create it under my company and i think

1281
05:06:12,240 --> 05:06:18,240
since my developer account is at apple and at google is under

1282
05:06:18,240 --> 05:06:24,240
my company's name which is pixelity ab in sweden then i'm actually going to use

1283
05:06:24,240 --> 05:06:28,560
that company's domain name which is pixelity.se

1284
05:06:28,560 --> 05:06:34,480
because s is like the swedish domain name just as code.uk is the

1285
05:06:34,480 --> 05:06:40,320
um british one for instance so i think i will do that so let's go to

1286
05:06:40,320 --> 05:06:44,320
and open a new terminal let's go to terminal um

1287
05:06:44,320 --> 05:06:47,680
i don't see my screen right now but i'm just going to bring up a new terminal

1288
05:06:47,680 --> 05:06:50,798
window here

1289
05:06:50,798 --> 05:06:54,240
and bring it up so that you can also see it um

1290
05:06:54,240 --> 05:07:01,600
and i'm gonna increase the size of the text so it is clear what i'm typing okay

1291
05:07:01,600 --> 05:07:08,000
so let me go ahead and create a project so i'm gonna go to my development um

1292
05:07:08,000 --> 05:07:11,600
folder where i have all my projects and i'm gonna go to projects

1293
05:07:11,600 --> 05:07:15,840
flutter okay and then as you can see is flutter

1294
05:07:15,840 --> 05:07:19,600
create and then and then dash dash org as an

1295
05:07:19,600 --> 05:07:25,040
organization and i'm going to see say se dot pixelity

1296
05:07:25,040 --> 05:07:30,160
now as i said my domain name is called pixelity.sc but your org needs to be the

1297
05:07:30,160 --> 05:07:35,760
reverse of that okay so remember reverse identifier so reverse domain identifier

1298
05:07:35,760 --> 05:07:38,480
so then if your for instance organization

1299
05:07:38,480 --> 05:07:41,680
is hello dot com then here you would have

1300
05:07:41,680 --> 05:07:46,958
to write com dot hello alright so i'm gonna say s epixody but you

1301
05:07:46,958 --> 05:07:50,080
shouldn't do this so if you're following along with this course please just

1302
05:07:50,080 --> 05:07:54,480
choose an identifier for your domain that it makes sense to you and if you

1303
05:07:54,480 --> 05:07:57,920
don't have a domain if you if you're not bothered by all of that if you're not

1304
05:07:57,920 --> 05:08:02,320
going to release your application to the app store you don't even have to care

1305
05:08:02,320 --> 05:08:05,760
about this just put anything in here you could just say

1306
05:08:05,760 --> 05:08:09,840
come um making stuff up

1307
05:08:09,840 --> 05:08:14,400
if that's what you want so it's not a big deal to be honest with you so just

1308
05:08:14,400 --> 05:08:19,600
go ahead and pick an identifier so i'm going to say s epixody because

1309
05:08:19,600 --> 05:08:25,040
that's my reverse domain name and then in here you have to write your

1310
05:08:25,040 --> 05:08:28,080
app application name so

1311
05:08:28,080 --> 05:08:31,120
um what should we call this application to

1312
05:08:31,120 --> 05:08:34,240
be honest with you i i mean i personally haven't really

1313
05:08:34,240 --> 05:08:38,080
made up my mind what this application should be called maybe we should call it

1314
05:08:38,080 --> 05:08:41,040
uh my personal

1315
05:08:41,040 --> 05:08:45,840
notes my personal notes or my notes

1316
05:08:45,840 --> 05:08:48,560
something like that or

1317
05:08:48,560 --> 05:08:52,638
private notes okay

1318
05:08:52,638 --> 05:08:55,760
all the private notes

1319
05:08:55,760 --> 05:09:01,600
or notes list i don't know not my notes that would work

1320
05:09:01,600 --> 05:09:06,000
sd pixel in my notes yeah why not and

1321
05:09:06,000 --> 05:09:09,600
let's just call it my notes then all right

1322
05:09:09,600 --> 05:09:12,560
so let's go ahead and do that flutter

1323
05:09:12,560 --> 05:09:15,600
create and i can see i mean actually i'm very

1324
05:09:15,600 --> 05:09:19,600
grateful that we got that little notification on top so let this do its

1325
05:09:19,600 --> 05:09:22,718
work and um

1326
05:09:22,718 --> 05:09:26,560
it did its work and it's done and it called something and it created a folder

1327
05:09:26,560 --> 05:09:30,798
you can see called my notes and on top of this window if you saw

1328
05:09:30,798 --> 05:09:34,320
then there was a little message printed a new version of flutter is available to

1329
05:09:34,320 --> 05:09:38,560
update to the latest version just run flatter upgrade so that was not a part

1330
05:09:38,560 --> 05:09:41,920
of this course i didn't mean it for this to happen but i can't control it either

1331
05:09:41,920 --> 05:09:45,520
because flutter is a tool that is being developed by google it's an open source

1332
05:09:45,520 --> 05:09:49,440
tool when there is a new version when you run any of these flutter commands

1333
05:09:49,440 --> 05:09:53,440
and it's going to check um with the version repository to see is

1334
05:09:53,440 --> 05:09:56,958
there any new version available and if there is then it's going to give me this

1335
05:09:56,958 --> 05:10:00,878
flutter upgrade message here so

1336
05:10:00,878 --> 05:10:04,320
um as i mentioned in the introduction of the course

1337
05:10:04,320 --> 05:10:09,120
i've planned this course quite a lot but i haven't i can't plan it 100 so things

1338
05:10:09,120 --> 05:10:12,480
will happen that i hadn't planned for and then we just have to roll with the

1339
05:10:12,480 --> 05:10:16,160
punches and i'm actually glad that this thing happened right here so you can see

1340
05:10:16,160 --> 05:10:21,040
how to upgrade flutter as well so as you can see it's very easy just copy

1341
05:10:21,040 --> 05:10:23,840
just say flutter upgrade okay so i'm going to go at the bottom of the

1342
05:10:23,840 --> 05:10:29,360
terminal i'm just going to say flutter upgrade

1343
05:10:29,360 --> 05:10:34,000
right so this is going to actually take some time depending on how big the

1344
05:10:34,000 --> 05:10:38,718
upgrade is because flutter is divided into

1345
05:10:38,718 --> 05:10:43,680
different kind of engines as you know flutter can output um

1346
05:10:43,680 --> 05:10:49,840
binaries or applications for ios it can output it for android it can do it for

1347
05:10:49,840 --> 05:10:53,040
mac os it can do it for um

1348
05:10:53,040 --> 05:10:56,080
windows and basically desktop searches and mac

1349
05:10:56,080 --> 05:11:00,480
windows linux and then you will have web as well so there's

1350
05:11:00,480 --> 05:11:04,080
quite a lot of things involved in flutter as you can see in here it's like

1351
05:11:04,080 --> 05:11:07,520
downloading everything necessary in order for you to be able to create

1352
05:11:07,520 --> 05:11:12,718
android applications so so after that is done you see it goes to

1353
05:11:12,718 --> 05:11:17,360
the ios tool so it's downloading but it's also i believe after it's done

1354
05:11:17,360 --> 05:11:21,280
downloading stuff it also needs to make sure that it can

1355
05:11:21,280 --> 05:11:26,638
build those tool sets so this is a process that might take some

1356
05:11:26,638 --> 05:11:30,240
time and in order to avoid us having to wait

1357
05:11:30,240 --> 05:11:34,560
for that entire process as you can see it's now going to web sdk

1358
05:11:34,560 --> 05:11:38,878
and blah blah so we don't have to necessarily wait for

1359
05:11:38,878 --> 05:11:44,080
this so i'm just going to create a new oh it actually finished so that was

1360
05:11:44,080 --> 05:11:48,160
quite fast all right so it it finishes work we don't have to do anything

1361
05:11:48,160 --> 05:11:52,798
special here um so that's how you upgrade flutter so

1362
05:11:52,798 --> 05:11:56,798
just run this command as suggested by the flutter tools itself flat upgrade

1363
05:11:56,798 --> 05:12:01,600
and then you're good to go okay so

1364
05:12:01,600 --> 05:12:06,160
we've done that step now so we've set up our project i'm just gonna move to my

1365
05:12:06,160 --> 05:12:09,360
notes here and i'm gonna make sure that that topic

1366
05:12:09,360 --> 05:12:13,520
is ticked and for the next item what we're gonna

1367
05:12:13,520 --> 05:12:18,878
do here is we're gonna talk about um we're gonna basically have a quick look

1368
05:12:18,878 --> 05:12:23,360
around the the environment set up by flutter when

1369
05:12:23,360 --> 05:12:27,680
you run photo create because the flow to create doesn't just like create an empty

1370
05:12:27,680 --> 05:12:32,878
director it actually creates the skeleton or the scaffold of your

1371
05:12:32,878 --> 05:12:36,320
flosser project but pretty much everything necessary for you to be able

1372
05:12:36,320 --> 05:12:41,680
to run that project okay so in this in this application i mean in

1373
05:12:41,680 --> 05:12:46,240
this in this step of chapter 8 we're not actually going to run the application on

1374
05:12:46,240 --> 05:12:50,320
any device that's for chapter 9 and for chapter 10.

1375
05:12:50,320 --> 05:12:54,638
but what we are going to do is to have a quick look around the

1376
05:12:54,638 --> 05:13:00,400
project structure so let me go to my notes here and what i'm going to do is

1377
05:13:00,400 --> 05:13:04,400
i'm going to use this code visual studio code

1378
05:13:04,400 --> 05:13:08,400
extension which is provided in the path so i can just say code dot which opens

1379
05:13:08,400 --> 05:13:11,520
up visual studio code in the current folder okay

1380
05:13:11,520 --> 05:13:15,200
so then once that is done i'm going to

1381
05:13:15,200 --> 05:13:18,400
bring a visual studio code here i'm just going to take a little bit of care to

1382
05:13:18,400 --> 05:13:22,878
ensure that you can see the important parts of the screen

1383
05:13:22,878 --> 05:13:27,760
okay and i'm going to increase the size quite dramatically so it's visible for

1384
05:13:27,760 --> 05:13:32,160
you as well it is very big on my screen but i think it's like

1385
05:13:32,160 --> 05:13:36,320
a nice size on the on the actual output video

1386
05:13:36,320 --> 05:13:42,080
alright so as you can see here is the folder created by flutter create

1387
05:13:42,080 --> 05:13:45,520
and there are quite a lot of bits and pieces in here

1388
05:13:45,520 --> 05:13:49,120
and i'm just going to tell you

1389
05:13:49,120 --> 05:13:54,878
a bit about a few of these folders and what they they represent so

1390
05:13:54,878 --> 05:13:58,958
one thing that you need to understand about flutter is that it actually is not

1391
05:13:58,958 --> 05:14:03,920
like um it's not really like react native

1392
05:14:03,920 --> 05:14:09,200
uh if you're familiar with that flutter on ios for instance it for those who

1393
05:14:09,200 --> 05:14:15,520
have done ios development uh flutter it outputs a native binary on your on your

1394
05:14:15,520 --> 05:14:18,400
phone a native um

1395
05:14:18,400 --> 05:14:23,520
fat binary basically for your uh ios application and it just puts one

1396
05:14:23,520 --> 05:14:28,080
view on the screen and then it graphically renders all its contents

1397
05:14:28,080 --> 05:14:32,718
using metal okay so if you're not an ios developer that probably doesn't make so

1398
05:14:32,718 --> 05:14:36,958
much sense to you but this part that i'm going to mention now

1399
05:14:36,958 --> 05:14:42,080
should make sense for everybody but when you create a flutter application

1400
05:14:42,080 --> 05:14:47,600
and the flutter create command basically spits out different parts that may be

1401
05:14:47,600 --> 05:14:51,120
necessary for your application to run on different platforms

1402
05:14:51,120 --> 05:14:55,920
one of those platforms one of the key platforms that flutter runs on is ioso

1403
05:14:55,920 --> 05:15:01,920
that is the folder that contains the native bits and pieces necessary for

1404
05:15:01,920 --> 05:15:07,280
photos to be able to run in an ios simulator or on an ios device

1405
05:15:07,280 --> 05:15:11,680
such as an iphone or an ipad okay so this is like as you can see it's the

1406
05:15:11,680 --> 05:15:16,160
project or the workspace and sorry and the workspace because for those of you

1407
05:15:16,160 --> 05:15:18,560
who are ios developers you will know that

1408
05:15:18,560 --> 05:15:22,080
there's a thing called cocoapods and flutter internally actually uses

1409
05:15:22,080 --> 05:15:28,000
cocoapods for ios if you're not an ios developer just know that

1410
05:15:28,000 --> 05:15:32,718
every ios or android or web application

1411
05:15:32,718 --> 05:15:39,200
can bring with itself dependencies and a dependency is a way for your application

1412
05:15:39,200 --> 05:15:44,400
to bring in code from other people in order to be able to achieve special

1413
05:15:44,400 --> 05:15:49,920
functionalities so there are various tools available for

1414
05:15:49,920 --> 05:15:55,440
ios developers android developers web developers to be able to bring in

1415
05:15:55,440 --> 05:15:58,638
dependencies for web for instance if you're writing a node application you

1416
05:15:58,638 --> 05:16:03,600
will just use npm which is a node package manager if you're using swift

1417
05:16:03,600 --> 05:16:07,920
you will probably just bring in for instance spm i think um swift package

1418
05:16:07,920 --> 05:16:13,760
manager or cocoapods and there's another a third one

1419
05:16:13,760 --> 05:16:17,280
um which i've kind of forgotten the name of um

1420
05:16:17,280 --> 05:16:21,680
which i may remember later if you're using android you're probably familiar

1421
05:16:21,680 --> 05:16:24,480
with gradle and that you can like use for

1422
05:16:24,480 --> 05:16:28,878
bringing in external dependencies so

1423
05:16:28,878 --> 05:16:30,718
so if

1424
05:16:30,718 --> 05:16:34,480
this is a platform of android and this is a platform of ios and here's web and

1425
05:16:34,480 --> 05:16:38,878
here's um desktop for instance

1426
05:16:38,878 --> 05:16:44,400
flutter sits on top of these so it can control all the um

1427
05:16:44,400 --> 05:16:48,000
all the small bits and pieces for these platforms to be able to be packed

1428
05:16:48,000 --> 05:16:52,718
packaged inside one flutter application which sits on on top here

1429
05:16:52,718 --> 05:16:55,600
and all these different platforms down here

1430
05:16:55,600 --> 05:17:00,000
excuse me they can have their own dependency management so the dependency

1431
05:17:00,000 --> 05:17:03,040
managements kind of sit under one layer under so

1432
05:17:03,040 --> 05:17:07,280
flutter then talks with these dependency managers and says okay you need to

1433
05:17:07,280 --> 05:17:10,958
install this dependency for me to be able to work

1434
05:17:10,958 --> 05:17:15,120
so the reason i mention all of that is

1435
05:17:15,120 --> 05:17:19,520
that is the reason you can see a workspace here and an xcode project and

1436
05:17:19,520 --> 05:17:23,280
that's because flutter internally is using a dependency manager

1437
05:17:23,280 --> 05:17:26,638
system called cocoapods which in turn creates a

1438
05:17:26,638 --> 05:17:28,798
workspace that

1439
05:17:28,798 --> 05:17:32,240
links together the main project and all its dependencies

1440
05:17:32,240 --> 05:17:35,280
if you're not an ios developer if you're not interested in all of this just know

1441
05:17:35,280 --> 05:17:40,000
that this ios folder is just so that your application run can

1442
05:17:40,000 --> 05:17:44,000
run on an ios device um

1443
05:17:44,000 --> 05:17:47,760
so that's that the next part which is important is the

1444
05:17:47,760 --> 05:17:51,200
test folder which we're actually going to use in this course

1445
05:17:51,200 --> 05:17:55,040
the test folder is where you create your tests

1446
05:17:55,040 --> 05:17:57,680
if you're not familiar with software development from before if you don't

1447
05:17:57,680 --> 05:18:01,760
have a background software engineering testing is

1448
05:18:01,760 --> 05:18:05,680
the ability for programmers in order to be able to make certain assertions about

1449
05:18:05,680 --> 05:18:10,320
their code and in order in order to make sure that they can automatically run a

1450
05:18:10,320 --> 05:18:15,120
series of tests against their own code to make sure that everything is

1451
05:18:15,120 --> 05:18:20,718
functioning as the programmer intended that to if you are if you if you are

1452
05:18:20,718 --> 05:18:23,840
coming from software engineering background that know that we're gonna

1453
05:18:23,840 --> 05:18:26,798
put our integration tests we're gonna put our

1454
05:18:26,798 --> 05:18:32,160
widget tests and unit tests inside this test folder okay so i hope that covered

1455
05:18:32,160 --> 05:18:36,240
everybody that's that may be watching this course

1456
05:18:36,240 --> 05:18:40,480
then you also have a folder called android and this is as you would expect

1457
05:18:40,480 --> 05:18:46,240
it is putting all the necessary files and folders that is required for your

1458
05:18:46,240 --> 05:18:52,480
android project to be hosting your flutter application so

1459
05:18:52,480 --> 05:18:58,000
just know that flutter kind of is a series of tools is like a mobile

1460
05:18:58,000 --> 05:19:03,600
kind it's like a beautiful sdk that gets injected into these native

1461
05:19:03,600 --> 05:19:08,878
applications and natively also renders its content so

1462
05:19:08,878 --> 05:19:11,840
um and just like we had a host ios

1463
05:19:11,840 --> 05:19:16,718
application here you will also have an android folder which contains all the

1464
05:19:16,718 --> 05:19:21,600
bits and pieces required for your application to be run natively

1465
05:19:21,600 --> 05:19:24,160
on android

1466
05:19:24,160 --> 05:19:27,840
phones and on android tablets so

1467
05:19:27,840 --> 05:19:30,878
this is as you can if you're an android developer you're probably like already

1468
05:19:30,878 --> 05:19:34,080
familiar with this like you have your app and build great gradle inside the

1469
05:19:34,080 --> 05:19:38,638
app folder so there's nothing like fancy going on here it's a simple android

1470
05:19:38,638 --> 05:19:42,718
application which you can actually uh if you have android studio installed

1471
05:19:42,718 --> 05:19:45,840
on your computer if you want to you can open that folder and actually have a

1472
05:19:45,840 --> 05:19:50,160
look around and even run that application as a native and android app

1473
05:19:50,160 --> 05:19:53,040
on your phone okay

1474
05:19:53,040 --> 05:19:56,560
so that is our android folder and as you

1475
05:19:56,560 --> 05:20:00,240
would guess then we have a web folder because

1476
05:20:00,240 --> 05:20:04,560
i think i mentioned this before but flutter supports uh deployment of flash

1477
05:20:04,560 --> 05:20:07,520
applications to the web as well so you can actually create web applications

1478
05:20:07,520 --> 05:20:10,638
with flutter it's nothing that we're going to discuss in this course

1479
05:20:10,638 --> 05:20:14,160
particularly but if you're interested in writing web applications with flutter

1480
05:20:14,160 --> 05:20:18,560
you can also google that so have a look at that if you're

1481
05:20:18,560 --> 05:20:24,638
interested in web applications because though web applications in flutter are

1482
05:20:24,638 --> 05:20:29,840
relatively new but foster has actually come really far with with that so people

1483
05:20:29,840 --> 05:20:34,878
are creating all sorts of websites with flutter already

1484
05:20:34,878 --> 05:20:39,760
sorry about that okay um then we have a little file here

1485
05:20:39,760 --> 05:20:44,000
called analysis options and um as you can see it says this file

1486
05:20:44,000 --> 05:20:47,600
configures the analyzer so um

1487
05:20:47,600 --> 05:20:51,840
if you are not coming from a software engineering background then you may not

1488
05:20:51,840 --> 05:20:55,840
know what analysis actually means but think of analysis as

1489
05:20:55,840 --> 05:21:01,120
a way for a flutter to be able to have a look at the code that you write

1490
05:21:01,120 --> 05:21:03,680
and and correct you

1491
05:21:03,680 --> 05:21:07,440
where it sees fit so where it sees that oh you've

1492
05:21:07,440 --> 05:21:12,160
made a mistake in writing something that could be written in a better way then it

1493
05:21:12,160 --> 05:21:16,638
consults this analysis options yaml file and then it says okay what are the rules

1494
05:21:16,638 --> 05:21:20,160
that i have to adhere to like do you want me to be very strict about certain

1495
05:21:20,160 --> 05:21:23,760
rules or do you want me to be like less strict about other rules or do you want

1496
05:21:23,760 --> 05:21:28,240
me to completely ignore certain mistakes that you're making so

1497
05:21:28,240 --> 05:21:32,080
the analysis options yaml file as it is pronounced

1498
05:21:32,080 --> 05:21:37,440
it allows you to basically define the roles that make

1499
05:21:37,440 --> 05:21:40,240
sense for your project in this course we're not going to talk

1500
05:21:40,240 --> 05:21:43,200
about so much analysis options to be honest with you but just know that it's

1501
05:21:43,200 --> 05:21:48,638
there so let me bring up the uh

1502
05:21:48,638 --> 05:21:53,920
the project structure here again um and the next thing that we need to

1503
05:21:53,920 --> 05:22:00,320
have a look at which is very very important is this file pop spec dot yaml

1504
05:22:00,320 --> 05:22:05,760
now um this is a file that i mean one of the things that you you'll need

1505
05:22:05,760 --> 05:22:09,520
to know about flutter and the basic structure that it creates for you is

1506
05:22:09,520 --> 05:22:14,798
that there are tons of documentations and documentations are like so so well

1507
05:22:14,798 --> 05:22:19,120
done in my opinion in in the flutter world where i personally come from like

1508
05:22:19,120 --> 05:22:22,958
the back-end developer development background like i'm doing django or

1509
05:22:22,958 --> 05:22:26,878
where i'm doing ios development sometimes documentation can for instance

1510
05:22:26,878 --> 05:22:30,638
on the ios native world be very kind of lacking

1511
05:22:30,638 --> 05:22:33,760
so flutter has gone like well above the

1512
05:22:33,760 --> 05:22:37,360
line of what is required from a developer's perspective in terms of

1513
05:22:37,360 --> 05:22:41,040
documentation and they provide a lot of documentation

1514
05:22:41,040 --> 05:22:44,400
and if you're not coming from a software development background the documentation

1515
05:22:44,400 --> 05:22:47,600
is pretty much like information provided by the developers

1516
05:22:47,600 --> 05:22:52,400
who created the tool for you in order to help you get better at that tool okay as

1517
05:22:52,400 --> 05:22:56,240
you can see here there's a file created for you pop special and you can see

1518
05:22:56,240 --> 05:23:00,080
there's lots of gray lines here prefixed with this

1519
05:23:00,080 --> 05:23:03,040
hashtag if you remove them you'll see that they

1520
05:23:03,040 --> 05:23:06,400
become normal sentences but if you put them back they become something called a

1521
05:23:06,400 --> 05:23:09,600
documentation and a documentation if you're not from software engineering

1522
05:23:09,600 --> 05:23:14,320
background it means just piece of text provided as an information block to you

1523
05:23:14,320 --> 05:23:18,638
which is not code anymore so the program is not going to

1524
05:23:18,638 --> 05:23:22,798
turn this into any sort of sort of a code it's just going to ignore that this

1525
05:23:22,798 --> 05:23:27,440
is just for you to learn okay so let's go back to this pop specky ammo

1526
05:23:27,440 --> 05:23:31,920
and talk about what it actually is pop spec yaml is such an important part of

1527
05:23:31,920 --> 05:23:34,958
flutter that i think that you need to actually

1528
05:23:34,958 --> 05:23:41,200
ignore i mean don't ignore the comments go and spend some time and read the

1529
05:23:41,200 --> 05:23:44,480
comments just to understand what they mean

1530
05:23:44,480 --> 05:23:48,240
so um what i'm going to talk about here is

1531
05:23:48,240 --> 05:23:52,240
a little bit about what this pop spike yaml actually is it is if you're for

1532
05:23:52,240 --> 05:23:56,878
instance from coming from a web background and if you've worked with

1533
05:23:56,878 --> 05:24:00,240
node.js then we will have some sort of a config

1534
05:24:00,240 --> 05:24:05,200
json file or if you're coming from django you'll have settings.pi file if

1535
05:24:05,200 --> 05:24:10,400
you're coming from native ios world what would be the equivalent of the config

1536
05:24:10,400 --> 05:24:14,798
it kind of will be kind of like your info plus file um

1537
05:24:14,798 --> 05:24:19,920
so i mean it is your it is kind of like a

1538
05:24:19,920 --> 05:24:24,400
control panel of what your project should actually be

1539
05:24:24,400 --> 05:24:31,520
looking like its icons the version number its name all your dependencies so

1540
05:24:31,520 --> 05:24:36,798
these things will be all placed inside inside this file and

1541
05:24:36,798 --> 05:24:40,240
when you change this file if you're already running your application then

1542
05:24:40,240 --> 05:24:45,040
flutter are automatically understands changes to this file and

1543
05:24:45,040 --> 05:24:49,280
then reconfigures itself if it can on the fly

1544
05:24:49,280 --> 05:24:53,520
with your new configurations if it can't then you may have to restart your

1545
05:24:53,520 --> 05:24:57,360
application like if you make drastic changes for instance if you bring in a

1546
05:24:57,360 --> 05:25:02,718
completely new dependency into your project

1547
05:25:02,718 --> 05:25:07,120
then the project cannot be like re-run immediately it needs to actually

1548
05:25:07,120 --> 05:25:10,958
recompile and link against that dependency it's just like humanly

1549
05:25:10,958 --> 05:25:16,000
impossible or computerly impossible for it to do so

1550
05:25:16,000 --> 05:25:19,200
um so let's have a little look around in

1551
05:25:19,200 --> 05:25:24,320
this pop specky ammo file as you can see there's a tag here called name and it's

1552
05:25:24,320 --> 05:25:27,600
and it's a value it's my notes and if you remember

1553
05:25:27,600 --> 05:25:31,280
from the terminal if i bring back the terminal

1554
05:25:31,280 --> 05:25:35,760
bring up the text a little bit uh this is what we created right this is

1555
05:25:35,760 --> 05:25:38,400
the project this is how we created the project so

1556
05:25:38,400 --> 05:25:43,280
we said flutter creates an organization of seda pixelity and then my notes all

1557
05:25:43,280 --> 05:25:47,680
right that is what the my notes is for this is

1558
05:25:47,680 --> 05:25:51,520
your project name my notes all right and this is a little just a little

1559
05:25:51,520 --> 05:25:55,120
description of what this application is all about now

1560
05:25:55,120 --> 05:25:58,638
you may be curious about what word is actually went

1561
05:25:58,638 --> 05:26:02,718
s e se.pixelity or whatever you created your

1562
05:26:02,718 --> 05:26:07,040
project organization under now you can see i search for it i said

1563
05:26:07,040 --> 05:26:12,798
command f in visual studio code on in mac or control f in linux and

1564
05:26:12,798 --> 05:26:15,520
windows and visual studio code and i don't know actually what the shortcut

1565
05:26:15,520 --> 05:26:19,920
for that fine is in uh android studio i just now heard studios

1566
05:26:19,920 --> 05:26:24,320
a little bit peculiar about its uh key mappings so it may not be command f on

1567
05:26:24,320 --> 05:26:28,878
mac or controller for linux and windows so i search here now for sepixology and

1568
05:26:28,878 --> 05:26:34,000
you can see that there are no results so this particular thing that i stressed so

1569
05:26:34,000 --> 05:26:37,120
much in the beginning that is very important you choose wisely

1570
05:26:37,120 --> 05:26:41,120
is not actually something that flutter itself needs as i mentioned it is

1571
05:26:41,120 --> 05:26:46,240
something that the different platforms that you'll deploy to need so if i now

1572
05:26:46,240 --> 05:26:50,240
actually say command shift f in visual studio code which searches in the entire

1573
05:26:50,240 --> 05:26:55,760
project say se.pixolity you will see that it is found in different places

1574
05:26:55,760 --> 05:27:01,280
inside this project for ios for instance you can see here is in the project pbx

1575
05:27:01,280 --> 05:27:04,558
approach and for android as well in our build

1576
05:27:04,558 --> 05:27:09,600
gradle so you'll see the application id became se pixelity my nodes

1577
05:27:09,600 --> 05:27:14,320
and for ios if you look around here as well you'll see that it is s e pixel in

1578
05:27:14,320 --> 05:27:18,638
my notes okay so

1579
05:27:18,638 --> 05:27:24,080
that was just side note um so the other thing that you'll need to

1580
05:27:24,080 --> 05:27:29,440
know about the pop spec yaml is this version number here and this is the

1581
05:27:29,440 --> 05:27:32,638
if you're not from a software development background um if you haven't

1582
05:27:32,638 --> 05:27:37,840
done software development before versioning is a way for you to tell

1583
05:27:37,840 --> 05:27:42,240
various places that you publish your application on for such as ios app store

1584
05:27:42,240 --> 05:27:46,080
or google play store what

1585
05:27:46,080 --> 05:27:50,240
if you have something new in your application

1586
05:27:50,240 --> 05:27:54,080
so for instance if you and this is this is how software is actually actually

1587
05:27:54,080 --> 05:27:56,718
labeled like a software has different properties

1588
05:27:56,718 --> 05:28:00,558
what you're deploying what you're developing here is a fluster application

1589
05:28:00,558 --> 05:28:05,520
but from the point of a store such as the app store it's it's just a package

1590
05:28:05,520 --> 05:28:08,638
of stuff with some properties like its name

1591
05:28:08,638 --> 05:28:13,200
identifier and its version now this version is very important because it is

1592
05:28:13,200 --> 05:28:18,480
a number usually three digits or i know that google play store

1593
05:28:18,480 --> 05:28:22,400
actually supports also four digits separated by a dot

1594
05:28:22,400 --> 05:28:26,400
and these these numbers actually mean something

1595
05:28:26,400 --> 05:28:30,000
special they if you begin from the left and then you

1596
05:28:30,000 --> 05:28:35,680
go to the middle and then to the right the left number is something called a

1597
05:28:35,680 --> 05:28:38,798
major number the middle number is called a minor

1598
05:28:38,798 --> 05:28:44,480
number and the right one and then most the rightmost number is usually called

1599
05:28:44,480 --> 05:28:48,718
the build number in normal software development the

1600
05:28:48,718 --> 05:28:53,360
process is kind of like this that you begin with an idea you say okay my

1601
05:28:53,360 --> 05:28:57,760
idea is to create a notes application that's that's the first idea that's idea

1602
05:28:57,760 --> 05:29:03,600
number one then you put one as the major number then you begin by zero and zero

1603
05:29:03,600 --> 05:29:07,280
okay so that's how a version number is kind of like birth

1604
05:29:07,280 --> 05:29:11,680
so you say one zero zero that's version one usually called okay

1605
05:29:11,680 --> 05:29:15,680
then you release that application you say okay i'm fine with that version one

1606
05:29:15,680 --> 05:29:19,120
and then you're in the kitchen cooking some food and then you say okay um it

1607
05:29:19,120 --> 05:29:22,718
would be great if i could put like um if i could add

1608
05:29:22,718 --> 05:29:26,240
the ability for users to be able to delete their notes

1609
05:29:26,240 --> 05:29:30,798
it's not a huge functionality it's just a little bit um improvement on what i

1610
05:29:30,798 --> 05:29:35,360
already have in the store then you will go and say okay is that a

1611
05:29:35,360 --> 05:29:40,160
major idea or a minor idea hmm it's not a major idea a major idea

1612
05:29:40,160 --> 05:29:44,000
would be like a total rewrite of the application adding massive number of

1613
05:29:44,000 --> 05:29:48,558
features fixing massive number of bugs etc so it's not a major idea then you go

1614
05:29:48,558 --> 05:29:53,040
to the minor idea and that minor idea corresponds to this minor version here

1615
05:29:53,040 --> 05:29:57,520
so you say okay the previous one was zero this one is how big of a difference

1616
05:29:57,520 --> 05:30:01,440
hmm it's just a small future so let's just say one

1617
05:30:01,440 --> 05:30:06,080
it was a huge like uh minor idea

1618
05:30:06,080 --> 05:30:09,600
not major enough to be a major idea but minor

1619
05:30:09,600 --> 05:30:14,558
but quite a big minor idea then you would probably like

1620
05:30:14,558 --> 05:30:20,638
from zero to maybe two or three it's not so popular to do that usually

1621
05:30:20,638 --> 05:30:24,878
would go chronologically in that order like one two three four but you're also

1622
05:30:24,878 --> 05:30:28,240
welcome to jump versions um

1623
05:30:28,240 --> 05:30:32,240
in special cases so let's say then you say okay i fixed that

1624
05:30:32,240 --> 05:30:35,840
and i'll now make it build and send it to

1625
05:30:35,840 --> 05:30:39,440
apple and google just remember that your previous build

1626
05:30:39,440 --> 05:30:42,958
was build zero now

1627
05:30:42,958 --> 05:30:48,000
depending on how your project is structured like you may decide that okay

1628
05:30:48,000 --> 05:30:51,840
every build that i make i'm going to actually increase this build number so

1629
05:30:51,840 --> 05:30:56,400
the previous one was zero now it's gonna be one then it's going to be two three

1630
05:30:56,400 --> 05:31:00,798
four five six blocks so every time you make build and send it out to your

1631
05:31:00,798 --> 05:31:04,638
consumers even if they're a group of testers or

1632
05:31:04,638 --> 05:31:08,000
people who are your only consumers may actually just be

1633
05:31:08,000 --> 05:31:10,558
people who are downloading your application directly from the app store

1634
05:31:10,558 --> 05:31:13,760
or google play store or from the web they may be interacting

1635
05:31:13,760 --> 05:31:17,680
with your application as well then you may say okay every time i make

1636
05:31:17,680 --> 05:31:21,360
a new bill and send it out that's when i actually increase this build number

1637
05:31:21,360 --> 05:31:24,080
or depending on your project setup you may

1638
05:31:24,080 --> 05:31:28,480
come with into an agreement with your teammates to say okay we don't increase

1639
05:31:28,480 --> 05:31:32,638
the bills chronologically but every time we change the major or the minor we

1640
05:31:32,638 --> 05:31:37,360
actually reset the build back to zero and then we go up chronologically so

1641
05:31:37,360 --> 05:31:40,080
um i i don't want to go to be honest with

1642
05:31:40,080 --> 05:31:43,040
you too much into detail about the version but if you're

1643
05:31:43,040 --> 05:31:45,760
interested in software development and i think if you're watching this course

1644
05:31:45,760 --> 05:31:48,638
that kind of means that you're interested in software development

1645
05:31:48,638 --> 05:31:52,240
you'll need to know about this so just know that version is your way of

1646
05:31:52,240 --> 05:31:57,040
labeling your software and its features and what's new in it

1647
05:31:57,040 --> 05:32:02,240
with numbers okay so just remember major

1648
05:32:02,240 --> 05:32:06,160
uh minor build all right but you don't have to play with this so

1649
05:32:06,160 --> 05:32:09,600
much to be honest with you so i think in this entire course we're actually not

1650
05:32:09,600 --> 05:32:12,798
gonna play with it so all right

1651
05:32:12,798 --> 05:32:16,400
uh the next bit of information in the pop special is the environment as you

1652
05:32:16,400 --> 05:32:21,040
can see there it says sdk now when you see sdk just think of

1653
05:32:21,040 --> 05:32:25,520
software development kit and this sdk is referring to the flutter

1654
05:32:25,520 --> 05:32:30,080
sdk so it means that if you share your source code with some

1655
05:32:30,080 --> 05:32:34,558
other developer who's sitting maybe on the other side of the planet

1656
05:32:34,558 --> 05:32:37,920
if they get your source code and they want to for instance be able to test

1657
05:32:37,920 --> 05:32:42,480
this application on a simulator or an emulator on a real device then they are

1658
05:32:42,480 --> 05:32:47,120
required to have flutter sdk version this

1659
05:32:47,120 --> 05:32:51,920
or less than this all right so you can actually get your flutter version by i

1660
05:32:51,920 --> 05:32:55,680
believe if you run flutter dash dash version

1661
05:32:55,680 --> 05:33:01,680
it will tell you that i'm plotter 281 and that as you can see here it says

1662
05:33:01,680 --> 05:33:06,240
yeah the sdk required in order to run this application is two

1663
05:33:06,240 --> 05:33:13,200
one five zero more than or equal to that at least at least two one five zero okay

1664
05:33:13,200 --> 05:33:18,400
so that's your sdk the flutter sdk the other part that you'll need to know

1665
05:33:18,400 --> 05:33:22,240
about is this section in the pops wiki ammo and that that is called the

1666
05:33:22,240 --> 05:33:26,160
dependencies and this is what we're going to talk about actually

1667
05:33:26,160 --> 05:33:29,040
um right now

1668
05:33:29,040 --> 05:33:33,600
um and dependencies as i mentioned before

1669
05:33:33,600 --> 05:33:38,558
uh are ways for you as a software developer to bring in code that other

1670
05:33:38,558 --> 05:33:43,120
people have written in order to make your application application function

1671
05:33:43,120 --> 05:33:47,120
better or function in a completely new way for instance

1672
05:33:47,120 --> 05:33:50,638
um you need to kind of be careful with dependencies just because

1673
05:33:50,638 --> 05:33:55,440
depending on what dependencies or libraries you bring into your project it

1674
05:33:55,440 --> 05:33:58,558
can actually make your life better or worse

1675
05:33:58,558 --> 05:34:01,680
dependencies are um

1676
05:34:01,680 --> 05:34:04,878
basically when you bring it in a dependency they're usually code written

1677
05:34:04,878 --> 05:34:11,040
by somebody else or other people that may be working on a library so

1678
05:34:11,040 --> 05:34:14,558
when you're if you're not coming from software development background then you

1679
05:34:14,558 --> 05:34:18,240
will need to know this and i'm just going to warn you from from now so that

1680
05:34:18,240 --> 05:34:22,400
you've heard it at least from somebody dependencies when you're picking

1681
05:34:22,400 --> 05:34:26,320
dependencies just be a little bit careful in that

1682
05:34:26,320 --> 05:34:31,600
they may it may be that they initially make your

1683
05:34:31,600 --> 05:34:34,480
suffer better but

1684
05:34:34,480 --> 05:34:38,400
since dependencies are code written by other people

1685
05:34:38,400 --> 05:34:43,280
and other people's priorities change their lives may change so that they

1686
05:34:43,280 --> 05:34:47,120
don't have time enough enough time to continue working on those dependencies

1687
05:34:47,120 --> 05:34:49,520
so i have personally run into the issue

1688
05:34:49,520 --> 05:34:53,280
that uh we brought in a dependency into a project and then after a while we just

1689
05:34:53,280 --> 05:34:57,120
realized that oh the developer isn't uh

1690
05:34:57,120 --> 05:35:02,878
actively working on this and maybe even the developer made that library um

1691
05:35:02,878 --> 05:35:07,120
deprecated and deprecated is the world that a word that you'll get to know when

1692
05:35:07,120 --> 05:35:10,958
you work more with software development and deprecated kind of means that the

1693
05:35:10,958 --> 05:35:14,480
library is not supported anymore the library is not

1694
05:35:14,480 --> 05:35:19,040
is not actively being worked on anymore and the developers are encouraging you

1695
05:35:19,040 --> 05:35:21,680
to move away from them so

1696
05:35:21,680 --> 05:35:26,320
when you bring in dependencies what i'd like you to do is just to have a look at

1697
05:35:26,320 --> 05:35:31,920
who is behind the dependency and prioritize your picking and cherry

1698
05:35:31,920 --> 05:35:36,558
picking based on a few factors

1699
05:35:36,558 --> 05:35:41,200
if the divi if the if the dependency is written by a single

1700
05:35:41,200 --> 05:35:44,320
person um be a little bit careful about that

1701
05:35:44,320 --> 05:35:49,040
just because single persons priorities may change and they may not

1702
05:35:49,040 --> 05:35:53,520
be able to like continuously work on a

1703
05:35:53,520 --> 05:35:56,558
even if if it's an open source project they may not be able to continuously

1704
05:35:56,558 --> 05:35:59,840
work on that um if independence is written by an

1705
05:35:59,840 --> 05:36:02,878
organization especially an organization that you have a lot of

1706
05:36:02,878 --> 05:36:07,120
faith in then prioritize it a little bit higher

1707
05:36:07,120 --> 05:36:09,760
um at least that's my opinion

1708
05:36:09,760 --> 05:36:15,760
if a dependency is written by a bunch of independent people

1709
05:36:15,760 --> 05:36:21,360
under an organization prioritize that also higher than a single person who has

1710
05:36:21,360 --> 05:36:24,958
a who has a library under their private

1711
05:36:24,958 --> 05:36:27,760
name okay that doesn't necessarily always mean

1712
05:36:27,760 --> 05:36:31,520
that a dependency created by an organization is actually better quality

1713
05:36:31,520 --> 05:36:35,680
it just means that the chances of it being deprecated are a little bit less

1714
05:36:35,680 --> 05:36:37,760
than uh

1715
05:36:37,760 --> 05:36:40,798
chances of the same library being deprecated had it been written by a

1716
05:36:40,798 --> 05:36:46,320
single person under their private name so these may actually to be honest with

1717
05:36:46,320 --> 05:36:48,958
you sound a little bit high level at the moment

1718
05:36:48,958 --> 05:36:51,920
and you may think okay why do i have to need all

1719
05:36:51,920 --> 05:36:58,558
this it's just that it is very easy for newcomers to flutter to get

1720
05:36:58,558 --> 05:37:02,798
dependent on dependencies in that it's so easy to bring in a dependency and

1721
05:37:02,798 --> 05:37:05,600
just work with it that people forget that oh

1722
05:37:05,600 --> 05:37:09,040
this is actually code written by a single person sitting in there in their

1723
05:37:09,040 --> 05:37:12,798
room just like me sitting here and telling you not to listen to people who

1724
05:37:12,798 --> 05:37:17,680
are sitting in their rooms but i believe it is very important to

1725
05:37:17,680 --> 05:37:23,040
try to steer your thoughts towards a little bit more

1726
05:37:23,040 --> 05:37:28,638
constructive dependencies that are good for your project in the long run but if

1727
05:37:28,638 --> 05:37:31,200
you're writing an application i just want to release it and don't care about

1728
05:37:31,200 --> 05:37:34,638
it anymore after you've released it maybe

1729
05:37:34,638 --> 05:37:39,120
maybe it's okay to bring in a dependency from just a

1730
05:37:39,120 --> 05:37:42,638
that that dependency that you don't even care about but i would even challenge

1731
05:37:42,638 --> 05:37:46,160
that idea of releasing an application which you may not care about after the

1732
05:37:46,160 --> 05:37:49,920
first release but because that's usually not a good idea

1733
05:37:49,920 --> 05:37:55,040
okay a lot of talk about dependencies but i think that had to be said

1734
05:37:55,040 --> 05:37:58,718
so we're talking about dependency i'm just gonna bring in the captions so

1735
05:37:58,718 --> 05:38:02,638
um now here you can also see there is a

1736
05:38:02,638 --> 05:38:06,718
dependency dependency here by default brought into you by flutter itself

1737
05:38:06,718 --> 05:38:11,680
called cupertino icons and cupertino icons is a dependency that

1738
05:38:11,680 --> 05:38:15,520
i believe that the flutter team itself is actually behind

1739
05:38:15,520 --> 05:38:19,120
so you may be thinking okay what are these

1740
05:38:19,120 --> 05:38:22,240
dependencies like where do they come from they actually come from normal

1741
05:38:22,240 --> 05:38:26,480
people and companies so i'm going to bring up a

1742
05:38:26,480 --> 05:38:31,680
um website here for you and it is called pop.dev i'll bring it

1743
05:38:31,680 --> 05:38:38,160
up so that you can actually see it here and um

1744
05:38:38,160 --> 05:38:42,240
you can see that in this website popped up there you can search for dependencies

1745
05:38:42,240 --> 05:38:45,440
so i'm actually going to copy this cupertino icons from here

1746
05:38:45,440 --> 05:38:50,878
and i'm going to paste it right there um kupertino icon just enter and i'm

1747
05:38:50,878 --> 05:38:54,638
gonna press on it and you'll see that it's published by the flutter team

1748
05:38:54,638 --> 05:38:57,040
themselves okay so

1749
05:38:57,040 --> 05:39:01,200
pop.dev is the website where you will search for dependencies so you just

1750
05:39:01,200 --> 05:39:07,040
search for a package and then it will bring up results here for you so

1751
05:39:07,040 --> 05:39:11,280
um this is how you'll search for dependencies okay

1752
05:39:11,280 --> 05:39:13,760
um and

1753
05:39:13,760 --> 05:39:17,040
now that we talked about that let's also talk about something called dev

1754
05:39:17,040 --> 05:39:21,840
dependencies they have dependencies are

1755
05:39:21,840 --> 05:39:24,638
dependencies that will bring into your project

1756
05:39:24,638 --> 05:39:29,280
which are useful only under development so

1757
05:39:29,280 --> 05:39:33,040
if you're familiar with software engineering the normal dependencies will

1758
05:39:33,040 --> 05:39:36,480
get linked to your project and then you will they will be shipped with your

1759
05:39:36,480 --> 05:39:41,600
application whereas dev dependencies there are only dependencies that

1760
05:39:41,600 --> 05:39:45,280
you under the development time will use in

1761
05:39:45,280 --> 05:39:48,558
order to make your software better and as you can see here one of the

1762
05:39:48,558 --> 05:39:51,680
dependencies for instance is flutter test

1763
05:39:51,680 --> 05:39:56,320
or flutter lens in this case as well excuse me

1764
05:39:56,320 --> 05:40:00,000
okay so there are lots and lots of things to talk about here and as you can

1765
05:40:00,000 --> 05:40:03,040
see here in the future actually we'll work with this that you can bring in

1766
05:40:03,040 --> 05:40:08,000
assets and images and bringing them into your project okay

1767
05:40:08,000 --> 05:40:11,680
so this is a quick look around at the pub

1768
05:40:11,680 --> 05:40:16,240
spec yaml and i'm going to let this be here

1769
05:40:16,240 --> 05:40:20,240
i'm just going to tick in my notes here that pops back yaml we've talked about

1770
05:40:20,240 --> 05:40:24,558
it now to the important part

1771
05:40:24,558 --> 05:40:29,120
we actually in our application we're going to need some dependencies in order

1772
05:40:29,120 --> 05:40:32,000
to be able to continue working with the application now

1773
05:40:32,000 --> 05:40:36,958
we haven't talked so much about firebase before but just know that firebase is

1774
05:40:36,958 --> 05:40:43,680
a tool that allows you to kind of go serverless but also have a

1775
05:40:43,680 --> 05:40:48,958
server now serverless is just a fun funky word that is being used nowadays

1776
05:40:48,958 --> 05:40:53,040
to describe a server written by somebody else so a server that you don't

1777
05:40:53,040 --> 05:40:56,160
personally have to write if you don't come from a software development

1778
05:40:56,160 --> 05:40:59,040
background for instance you're a product owner or a designer

1779
05:40:59,040 --> 05:41:03,680
a server is where your data sits in the cloud kind of

1780
05:41:03,680 --> 05:41:06,160
so

1781
05:41:06,160 --> 05:41:09,760
you as a developer sitting in front of your computer right now you're writing a

1782
05:41:09,760 --> 05:41:12,320
flutter application and your flash application is going to be installed on

1783
05:41:12,320 --> 05:41:16,480
ios and android devices and that is the client the client is the consumer of the

1784
05:41:16,480 --> 05:41:21,120
data sent by the server okay so the server is where the logic sits on a

1785
05:41:21,120 --> 05:41:26,718
computer in the cloud okay and firebase is a computer in the cloud just think of

1786
05:41:26,718 --> 05:41:30,958
think of that that is written by google so you control it with simple commands

1787
05:41:30,958 --> 05:41:35,840
on your computer but it controls your data so your client your flutter

1788
05:41:35,840 --> 05:41:39,840
application can connect to it and grab the data and read the data and

1789
05:41:39,840 --> 05:41:43,680
manipulate the data on the client side so

1790
05:41:43,680 --> 05:41:49,040
now in order to talk to firebase we actually need some um

1791
05:41:49,040 --> 05:41:55,200
dependencies and firebase um will i'll bring up my safari window here

1792
05:41:55,200 --> 05:42:01,040
now let's have a look at firebase core i'm going to search for it

1793
05:42:01,040 --> 05:42:04,480
click on it firebase core as you can see it's written by the publisher is

1794
05:42:04,480 --> 05:42:07,840
firebase.google.com and just remember that flutter is

1795
05:42:07,840 --> 05:42:12,480
actually a tool created by google as well so

1796
05:42:12,480 --> 05:42:17,120
i personally think that anything related to firebase is completely okay to bring

1797
05:42:17,120 --> 05:42:21,120
in into your flutter application has a dependency all right

1798
05:42:21,120 --> 05:42:25,600
so um i'm going to go here and then say

1799
05:42:25,600 --> 05:42:31,520
we need four dependencies for this particular project okay so

1800
05:42:31,520 --> 05:42:34,878
if you're in visual studio code you can bring um

1801
05:42:34,878 --> 05:42:38,558
the terminal up uh i actually forgot the command for bringing the terminal i

1802
05:42:38,558 --> 05:42:43,440
think on my mac is control backtick but i believe you can also always bring

1803
05:42:43,440 --> 05:42:48,958
up terminal advice going to terminal and new terminal okay now i can see there

1804
05:42:48,958 --> 05:42:53,040
are two terminal windows here okay now i'm going to get rid of the explorer on

1805
05:42:53,040 --> 05:42:58,240
the left hand side so you can see that the data a little bit better here

1806
05:42:58,240 --> 05:43:02,638
there are four dependencies that we need to bring into our project all right and

1807
05:43:02,638 --> 05:43:07,360
i want you to follow along with this exactly as i'm doing

1808
05:43:07,360 --> 05:43:10,480
previously what we had to do in order to i mean previously in the previous

1809
05:43:10,480 --> 05:43:13,680
versions of flutter if you wanted to bring in a dependency then you'd have to

1810
05:43:13,680 --> 05:43:17,760
go and say you go to your in your pop spec and then

1811
05:43:17,760 --> 05:43:22,160
add your dependencies manually with special versions and then

1812
05:43:22,160 --> 05:43:27,200
you have to go to those dependencies top dev websites to see the current version

1813
05:43:27,200 --> 05:43:29,680
all but with the latest versions of flutter

1814
05:43:29,680 --> 05:43:34,080
you don't have to do that all you have to do is just to say flutter pop add

1815
05:43:34,080 --> 05:43:37,280
and i'm going to do that right now

1816
05:43:37,280 --> 05:43:41,120
so that's how you bring in a dependency all right

1817
05:43:41,120 --> 05:43:46,240
the first dependency that we need is firebase core so just enter this command

1818
05:43:46,240 --> 05:43:50,240
it'll take some time perhaps

1819
05:43:50,240 --> 05:43:53,360
okay then say the same command but say

1820
05:43:53,360 --> 05:43:56,638
firebase off i'm gonna have a look at my notes

1821
05:43:56,638 --> 05:44:00,480
basically here to make sure that i'm entering the correct dependencies

1822
05:44:00,480 --> 05:44:03,600
and i'm not going to talk so much right now about what these dependencies

1823
05:44:03,600 --> 05:44:06,958
actually are because that is going to take a lot of

1824
05:44:06,958 --> 05:44:10,958
time as well so let's just bring the dependencies in there are four

1825
05:44:10,958 --> 05:44:16,160
dependencies so the next dependency that we have to bring in is cloud

1826
05:44:16,160 --> 05:44:19,040
firestore

1827
05:44:19,040 --> 05:44:21,440
and

1828
05:44:21,440 --> 05:44:27,920
let's go to the next one and we say that

1829
05:44:27,920 --> 05:44:35,760
cloud firestore is the third dependency and then we say firebase analytics

1830
05:44:35,760 --> 05:44:41,280
so that is the fourth dependency so

1831
05:44:41,280 --> 05:44:45,360
we've brought in four dependencies at the moment if you look here

1832
05:44:45,360 --> 05:44:50,240
there is a firebase core which is like the

1833
05:44:50,240 --> 05:44:55,200
the kernel the main important parts parts of firebase which again is what

1834
05:44:55,200 --> 05:44:59,760
we're going to use as our server where all the nodes for all our users are

1835
05:44:59,760 --> 05:45:04,320
going to sit the next one is firebase auth

1836
05:45:04,320 --> 05:45:09,360
auth is the short form let me see where did it go um here firebase off that is

1837
05:45:09,360 --> 05:45:12,320
for authentication and

1838
05:45:12,320 --> 05:45:15,360
um i haven't yet shown how that our application is actually going to look

1839
05:45:15,360 --> 05:45:19,600
like but auth is for authentication is where our users will

1840
05:45:19,600 --> 05:45:23,920
be able to register uh log into our application and log out

1841
05:45:23,920 --> 05:45:28,400
and also get email confirmations to send to their emails in order to be able to

1842
05:45:28,400 --> 05:45:31,760
verify the account so auth is for authentication and that's

1843
05:45:31,760 --> 05:45:35,120
what we're gonna use it for in order to make sure that people who

1844
05:45:35,120 --> 05:45:39,920
are interacting with our application they're actually logged in okay

1845
05:45:39,920 --> 05:45:46,400
the next part is cloud firestore and this dependency is used for when we

1846
05:45:46,400 --> 05:45:51,760
actually store a logged in users notes in the firebase backend

1847
05:45:51,760 --> 05:45:54,160
all right it's just funky names to be honest with

1848
05:45:54,160 --> 05:46:01,440
you they're just names decided by developers just like me and you so

1849
05:46:01,440 --> 05:46:05,840
and the next part is firebase analytics and that is for

1850
05:46:05,840 --> 05:46:10,958
if you use firebase analytics when you basically set up your firebase backend

1851
05:46:10,958 --> 05:46:14,958
you will get some free analytics in for instance oh which

1852
05:46:14,958 --> 05:46:18,000
screen did the user go to which button did they press and you can have a look

1853
05:46:18,000 --> 05:46:22,160
at these analytics when you then look at your firebase console which we're gonna

1854
05:46:22,160 --> 05:46:27,200
talk about later i mean i know all of these are quiet um

1855
05:46:27,200 --> 05:46:30,080
maybe a high level if you're not if you're not familiar with firebase you

1856
05:46:30,080 --> 05:46:34,958
may be like what the hell did we just do and that is okay you don't have to know

1857
05:46:34,958 --> 05:46:39,840
all of this just know that we are these four dependencies are stuff we need in

1858
05:46:39,840 --> 05:46:43,360
order to make our application function all right so now that we've added these

1859
05:46:43,360 --> 05:46:47,120
dependencies you can actually go back to your popspakiano file and kind of have a

1860
05:46:47,120 --> 05:46:51,760
look here at the dependencies that we added and

1861
05:46:51,760 --> 05:46:56,080
you can see all of them were added here automatically for you with their latest

1862
05:46:56,080 --> 05:47:00,798
versions okay so previously in previous versions of flutter we had to do this

1863
05:47:00,798 --> 05:47:04,558
manually but now you can just say flutter pop ad and it will add the

1864
05:47:04,558 --> 05:47:09,280
dependencies for you directly to pop special all right

1865
05:47:09,280 --> 05:47:13,120
so great a lot of things we discussed here

1866
05:47:13,120 --> 05:47:17,200
it almost took 50 minutes to go through all of these basics but i believe

1867
05:47:17,200 --> 05:47:21,600
actually basics should take more time to explain than the more advanced stuff

1868
05:47:21,600 --> 05:47:25,440
because the more advanced you get the less

1869
05:47:25,440 --> 05:47:30,160
explanation you need so that is why all these basic things basically take time

1870
05:47:30,160 --> 05:47:33,680
to explain [Music]

1871
05:47:33,680 --> 05:47:36,400
okay i'm just going to take in my notes that

1872
05:47:36,400 --> 05:47:40,160
we've talked about all of these

1873
05:47:40,160 --> 05:47:44,638
topics and i think this is actually a wrap for

1874
05:47:44,638 --> 05:47:48,958
chapter number eight so chapter number eight we talked about um

1875
05:47:48,958 --> 05:47:52,160
how to set up our project we've actually set up our project now we've set up our

1876
05:47:52,160 --> 05:47:57,680
dependencies had a look around uh the default flutter template and we also

1877
05:47:57,680 --> 05:48:02,558
talked about pop special so that's great stuff in chapter number

1878
05:48:02,558 --> 05:48:08,160
nine we're gonna talk about my favorite which is the ios app setup and in this

1879
05:48:08,160 --> 05:48:14,558
chapter actually we're gonna go through a lot of things profiles certificates

1880
05:48:14,558 --> 05:48:19,920
we're gonna talk about app ids a lot a lot a lot i can see here in the

1881
05:48:19,920 --> 05:48:23,680
list so i'm really excited actually for chapter number nine

1882
05:48:23,680 --> 05:48:27,120
so go grab a cup of coffee or a cup of tea

1883
05:48:27,120 --> 05:48:32,000
and i'll see you in the next chapter hello and welcome to chapter nine of

1884
05:48:32,000 --> 05:48:34,480
this course in this chapter we're going to talk

1885
05:48:34,480 --> 05:48:41,520
about the setup of our ios app and as i mentioned it i think it was in um the

1886
05:48:41,520 --> 05:48:44,320
introduction uh chapter in the absolute first

1887
05:48:44,320 --> 05:48:48,480
actually it's not a chapter it's just introduction to this whole course

1888
05:48:48,480 --> 05:48:52,798
um we talked a little bit about what we're planning to do with this

1889
05:48:52,798 --> 05:48:56,878
application that we're developing here and um two of the things that we're

1890
05:48:56,878 --> 05:49:01,040
going to do is to actually release the app in the app store and in the play

1891
05:49:01,040 --> 05:49:05,040
store now if you're not planning to actually do that you could

1892
05:49:05,040 --> 05:49:08,480
potentially skip over this chapter um

1893
05:49:08,480 --> 05:49:13,200
but i still believe that if you're planning on becoming a flutter developer

1894
05:49:13,200 --> 05:49:16,718
you need to know how these things work because

1895
05:49:16,718 --> 05:49:20,400
being a flustered developer depending on what kind of flutter developer that you

1896
05:49:20,400 --> 05:49:24,080
actually want to become um with me assuming that you want to

1897
05:49:24,080 --> 05:49:27,360
become an actual flutter developer where you can for instance work on different

1898
05:49:27,360 --> 05:49:32,840
applications and release them personally or you can work in like a team con

1899
05:49:32,840 --> 05:49:36,480
concept uh and in the context of a team where you

1900
05:49:36,480 --> 05:49:40,320
work with other developers inside a company for instance in order to work on

1901
05:49:40,320 --> 05:49:44,400
their applications and release them than in the app stores so

1902
05:49:44,400 --> 05:49:47,040
if you're if you fall into any of those categories that you actually want to

1903
05:49:47,040 --> 05:49:50,558
release your application then i strongly believe that you should know how to do

1904
05:49:50,558 --> 05:49:53,760
that yourself so although you may be a part of a part of

1905
05:49:53,760 --> 05:49:58,878
a team of a huge organization where the release process is its own like process

1906
05:49:58,878 --> 05:50:02,480
that you basically hand over your source code to them and then they basically

1907
05:50:02,480 --> 05:50:06,240
build it and repair it and release it but if you want to become like a

1908
05:50:06,240 --> 05:50:10,558
full-fledged flutter developer or a mobile developer for that matter you'd

1909
05:50:10,558 --> 05:50:13,120
need to know how to actually release your

1910
05:50:13,120 --> 05:50:16,400
applications okay so in this chapter we're going to talk

1911
05:50:16,400 --> 05:50:20,400
about releasing your app or actually we're

1912
05:50:20,400 --> 05:50:24,558
going to talk about preparing your application for releasing in

1913
05:50:24,558 --> 05:50:29,600
app store later so what you need to know

1914
05:50:29,600 --> 05:50:33,600
is how do you set up your flutter application so that you can actually

1915
05:50:33,600 --> 05:50:38,240
build it later and release it in the ios app

1916
05:50:38,240 --> 05:50:44,958
store okay and if i bring up the next caption here

1917
05:50:44,958 --> 05:50:48,718
you'll see that in order for you to be able to

1918
05:50:48,718 --> 05:50:54,400
build your application and then deploy it in the app store you need an ios

1919
05:50:54,400 --> 05:50:59,600
developer account and i talked about this previously um

1920
05:50:59,600 --> 05:51:03,040
that how what a developer account is and that

1921
05:51:03,040 --> 05:51:08,638
you'd have to apply for it i think it was in chapter one we talked about this

1922
05:51:08,638 --> 05:51:11,520
but if you've jumped over that chapter you'd need to know that you have to

1923
05:51:11,520 --> 05:51:16,878
apply for a developer account at apple and once granted that developer account

1924
05:51:16,878 --> 05:51:21,520
then you're going to be able to get access to a portal portal called the

1925
05:51:21,520 --> 05:51:25,360
app store connect app store connect is your portal for

1926
05:51:25,360 --> 05:51:30,000
managing your applications and uploading to the app store

1927
05:51:30,000 --> 05:51:33,440
downloading some debug information etc which i'm not going to go into so much

1928
05:51:33,440 --> 05:51:38,480
detail right now and it also has a side note as a developer you will get access

1929
05:51:38,480 --> 05:51:42,080
something called i think the developer portal or something like that i think

1930
05:51:42,080 --> 05:51:45,280
it's called i believe so i think we just call it

1931
05:51:45,280 --> 05:51:49,280
developer portal or developer developer site

1932
05:51:49,280 --> 05:51:53,040
so you'll get access to that and you'll be able to manage things such as

1933
05:51:53,040 --> 05:51:58,080
certificates and profiles okay so which we're going to talk about soon

1934
05:51:58,080 --> 05:52:00,798
actually so let's say that you have your developer

1935
05:52:00,798 --> 05:52:03,920
account and if you don't have your developer account then please just go

1936
05:52:03,920 --> 05:52:09,120
and search online for register developer account or just watch the first chapter

1937
05:52:09,120 --> 05:52:12,718
i have to look at my notes actually here and see if that's what we talked about

1938
05:52:12,718 --> 05:52:17,200
in chapter one actually yeah i can see here chapter one

1939
05:52:17,200 --> 05:52:21,040
was titled developer accounts and in that chapter we talked about how to

1940
05:52:21,040 --> 05:52:25,760
register for an ios developer again in depth so please go and watch

1941
05:52:25,760 --> 05:52:29,040
chapter one if you haven't done that and if you are planning to actually release

1942
05:52:29,040 --> 05:52:33,200
your application in the ios app store

1943
05:52:33,200 --> 05:52:36,878
so sorry about that

1944
05:52:36,878 --> 05:52:40,160
so now you know that you need the developer account and it costs a little

1945
05:52:40,160 --> 05:52:45,040
bit of money i think it's about 99 so in sweden it's about 990 swedish crowns

1946
05:52:45,040 --> 05:52:49,120
something like that or 1000 swedish crowns almost

1947
05:52:49,120 --> 05:52:51,280
so um now that we've talked about the

1948
05:52:51,280 --> 05:52:55,120
developer account let's talk about the certificates and profiles because this

1949
05:52:55,120 --> 05:52:58,558
is the thing that trips up a lot of mobile developers when they come to ios

1950
05:52:58,558 --> 05:53:01,680
development um i mean i've been doing ios

1951
05:53:01,680 --> 05:53:06,160
development since late 2000 2007 when

1952
05:53:06,160 --> 05:53:11,680
there was pretty much no um ios sdk as such it was like just a set

1953
05:53:11,680 --> 05:53:16,638
of tools and very little library support because originally ios apps by steve

1954
05:53:16,638 --> 05:53:20,240
jobs definition were supposed to be web applications and then

1955
05:53:20,240 --> 05:53:23,600
apple just transitioned to disbelief that yeah we actually have to have

1956
05:53:23,600 --> 05:53:27,040
native applications so they released some tools and xcode was there so you

1957
05:53:27,040 --> 05:53:30,878
could build some simple applications with ios opengl es what's there so you

1958
05:53:30,878 --> 05:53:34,480
can build some games as well but

1959
05:53:34,480 --> 05:53:37,680
how it started was that apple wanted to make sure that the

1960
05:53:37,680 --> 05:53:42,558
applications that are developed can only be distributed through the app store so

1961
05:53:42,558 --> 05:53:47,120
they said that okay if i give vandal for instance a

1962
05:53:47,120 --> 05:53:50,480
developer account he shouldn't be able to create his own app store because they

1963
05:53:50,480 --> 05:53:53,520
it's just a i'm not going into the details of what

1964
05:53:53,520 --> 05:53:58,000
why they're doing that there's a whole topic and what we could discuss like a

1965
05:53:58,000 --> 05:54:01,280
few days we could talk about that whether it's a monopoly or not i don't

1966
05:54:01,280 --> 05:54:04,638
know so i'm not going to go into the detail about that but what you need to

1967
05:54:04,638 --> 05:54:09,360
know that is there is an app store the um

1968
05:54:09,360 --> 05:54:12,958
basically just called app store but you could call ios app store mac apps or

1969
05:54:12,958 --> 05:54:16,878
whatever you want and apple has control over that so it's

1970
05:54:16,878 --> 05:54:19,680
apple who sits there and like controls the

1971
05:54:19,680 --> 05:54:24,480
measures that apps that are published on the app store they're of a good quality

1972
05:54:24,480 --> 05:54:31,200
for instance okay so apple themselves have a certificate now a certificate is

1973
05:54:31,200 --> 05:54:35,600
like a piece of paper uh just imagine a piece of paper certificate that they

1974
05:54:35,600 --> 05:54:40,000
hold onto and they said okay whatever we publish on the app store

1975
05:54:40,000 --> 05:54:44,878
um it comes from us okay so every app on

1976
05:54:44,878 --> 05:54:48,638
the ios app store comes actually from apple i don't mean

1977
05:54:48,638 --> 05:54:52,718
that the apple has written the app i mean that apple has signed the app using

1978
05:54:52,718 --> 05:54:55,680
their certified that piece of paper okay so

1979
05:54:55,680 --> 05:55:00,878
and then when the app gets downloaded to your iphone your iphone actually checks

1980
05:55:00,878 --> 05:55:04,160
is this a is this a trusted application where does

1981
05:55:04,160 --> 05:55:09,120
it come from so ios as an operating system it can

1982
05:55:09,120 --> 05:55:12,000
contain and you can install many different types of applications that

1983
05:55:12,000 --> 05:55:14,320
come from many different types of sources

1984
05:55:14,320 --> 05:55:17,440
such as the ios app store or you could actually

1985
05:55:17,440 --> 05:55:21,840
download application that comes directly from a specific developer

1986
05:55:21,840 --> 05:55:25,440
now all these applications need to be signed

1987
05:55:25,440 --> 05:55:28,798
they need to be signed with a certificate that is just to identify

1988
05:55:28,798 --> 05:55:33,520
where they come from so certificate is a piece of paper that you as a developer

1989
05:55:33,520 --> 05:55:37,840
hold and every application excuse me every application that you

1990
05:55:37,840 --> 05:55:42,718
develop will be signed using that certificate okay so that certificate is

1991
05:55:42,718 --> 05:55:47,680
your identity as a developer and it gets kind of

1992
05:55:47,680 --> 05:55:52,958
carried around in with your application to the destination so if you develop

1993
05:55:52,958 --> 05:55:56,000
this notes application that we're doing in this course and you sign it with your

1994
05:55:56,000 --> 05:56:00,160
certificate then your application is going to have that certificate signature

1995
05:56:00,160 --> 05:56:04,638
inside it so when i send it to apple and then apple is like aha that's this

1996
05:56:04,638 --> 05:56:09,440
developer who created this app okay and then when apple then

1997
05:56:09,440 --> 05:56:13,920
says okay your application's fine you can't release it to the app store then

1998
05:56:13,920 --> 05:56:18,638
apple re-signs your application with their own certificate

1999
05:56:18,638 --> 05:56:22,638
that is just to make sure that your application after it's been signed with

2000
05:56:22,638 --> 05:56:28,080
apple certificate can be distributed into the ios app store and downloaded by

2001
05:56:28,080 --> 05:56:34,480
millions of users around the world so it's just sir just know that certificate

2002
05:56:34,480 --> 05:56:38,878
is your identity as a developer okay [Music]

2003
05:56:38,878 --> 05:56:42,320
now now that we talked about certificates let's talk about profiles

2004
05:56:42,320 --> 05:56:46,798
because that also is a tripping point for some developers

2005
05:56:46,798 --> 05:56:50,400
um especially if they don't come from like a native ios development background

2006
05:56:50,400 --> 05:56:52,958
which i do um

2007
05:56:52,958 --> 05:56:58,240
profiles you see a certificate identifies you

2008
05:56:58,240 --> 05:57:04,558
in short profiles identify your app so that's like the

2009
05:57:04,558 --> 05:57:08,798
very short way of saying it so you as a developer might have

2010
05:57:08,798 --> 05:57:13,440
10 20 30 applications that you're developing or you have developed

2011
05:57:13,440 --> 05:57:17,440
each of these applications will have their own identity

2012
05:57:17,440 --> 05:57:21,600
and that identity at the end is tied to you as a developer so you say here's my

2013
05:57:21,600 --> 05:57:24,558
certificate here's who i am

2014
05:57:24,558 --> 05:57:28,558
but when you then create an application then that application also needs to

2015
05:57:28,558 --> 05:57:32,958
identify itself it will be like here i am i am an application signed with this

2016
05:57:32,958 --> 05:57:38,400
profile using this certificate so just know that a profile is kind of like

2017
05:57:38,400 --> 05:57:42,240
an identity for your application and different flavors of that

2018
05:57:42,240 --> 05:57:47,200
application and a certificate is an identity of you

2019
05:57:47,200 --> 05:57:49,920
as the person who developed that application all right

2020
05:57:49,920 --> 05:57:53,840
so and if you notice i just said different

2021
05:57:53,840 --> 05:57:58,240
flavors of your application and by that i mean that if you're not

2022
05:57:58,240 --> 05:58:02,958
coming from a development background um if you're for instance coming from a

2023
05:58:02,958 --> 05:58:07,600
design background and you have a figma file or visio file that you're designing

2024
05:58:07,600 --> 05:58:11,360
your wi-frames and whatever if you're coming from a product owner ownership

2025
05:58:11,360 --> 05:58:14,638
background than your probably may have like um

2026
05:58:14,638 --> 05:58:18,400
working with jira or excel sheets or whatever wherever you put your

2027
05:58:18,400 --> 05:58:23,520
requirements you may not be familiar with different flavors of an application

2028
05:58:23,520 --> 05:58:27,440
but if you've worked a little bit close with an app

2029
05:58:27,440 --> 05:58:31,200
team then you'll know that there are different flavors of every application

2030
05:58:31,200 --> 05:58:34,240
and those flavors are usually i mean they're

2031
05:58:34,240 --> 05:58:38,160
usually two flavors one is a development flavor and the

2032
05:58:38,160 --> 05:58:43,040
other one is a production flavor a development flavor is the application

2033
05:58:43,040 --> 05:58:47,040
you see if you sit with developers with software engineers that are working on

2034
05:58:47,040 --> 05:58:50,798
your application on a daily basis they're coding they're

2035
05:58:50,798 --> 05:58:55,360
fixing things they're fixing bugs adding new features and then they will provide

2036
05:58:55,360 --> 05:59:00,958
the product to you as a software uh as a product owner for instance or a designer

2037
05:59:00,958 --> 05:59:04,160
and you will download that flavor on your application and be like okay this

2038
05:59:04,160 --> 05:59:07,360
this looks fine great now

2039
05:59:07,360 --> 05:59:11,040
all of a sudden you press a button and that button crashes the application so

2040
05:59:11,040 --> 05:59:14,558
the application just disappears oh it crashed

2041
05:59:14,558 --> 05:59:18,558
well at that point if the developers were doing their job correctly then they

2042
05:59:18,558 --> 05:59:22,558
had had to put some crash analytics into the application

2043
05:59:22,558 --> 05:59:25,600
that as soon as the application crashes or

2044
05:59:25,600 --> 05:59:29,600
something bad happens to the application of that flavor of the application that

2045
05:59:29,600 --> 05:59:31,680
you installed on your

2046
05:59:31,680 --> 05:59:37,360
iphone or android phone or tablet or whatever and they will get

2047
05:59:37,360 --> 05:59:41,680
something called a crash report a crash report is as its name indicates

2048
05:59:41,680 --> 05:59:46,240
it's just a report where the crash information is completely visible and

2049
05:59:46,240 --> 05:59:50,080
they probably even know which button you tapped at what time and what was the

2050
05:59:50,080 --> 05:59:52,958
information that your app was carrying at the point

2051
05:59:52,958 --> 05:59:57,760
that it crashed so it helps them debug and fix that problem

2052
05:59:57,760 --> 06:00:01,840
now these flavors of the application that you install on your phone on a

2053
06:00:01,840 --> 06:00:06,240
daily basis were working mobile developers are usually called debug

2054
06:00:06,240 --> 06:00:10,240
applications and a debug application it's just a way of saying that the

2055
06:00:10,240 --> 06:00:15,040
developers who created it it created the application have the opportunity then to

2056
06:00:15,040 --> 06:00:20,798
fix any bugs that may arise with more information than they would usually have

2057
06:00:20,798 --> 06:00:24,878
had they released this application to the store for millions of

2058
06:00:24,878 --> 06:00:28,798
others to download so that is a flavor it's a debug flavor or

2059
06:00:28,798 --> 06:00:32,718
is a development flavor okay and it just means that it's a daily it's kind of

2060
06:00:32,718 --> 06:00:36,878
like a updating regularly application that only

2061
06:00:36,878 --> 06:00:41,760
very close circle of people close to the project can download so that's a flavor

2062
06:00:41,760 --> 06:00:44,958
okay another flavor of an application that

2063
06:00:44,958 --> 06:00:48,958
gets released by developers could be the production

2064
06:00:48,958 --> 06:00:51,840
flavor and the product production flavor is

2065
06:00:51,840 --> 06:00:56,320
the same as the debug flavor but a little bit like

2066
06:00:56,320 --> 06:01:00,558
some stuff maybe removed from it some sensitive information that may be logged

2067
06:01:00,558 --> 06:01:04,718
otherwise maybe removed from it it's just like a stripped-down version

2068
06:01:04,718 --> 06:01:08,638
for security purposes not stripped-down version of like features or anything

2069
06:01:08,638 --> 06:01:12,080
it's just they make it tighter they make it so

2070
06:01:12,080 --> 06:01:16,718
that it is a little bit more secure like some extra stuff may be removed from it

2071
06:01:16,718 --> 06:01:21,040
extra stuff that otherwise developers only may need so

2072
06:01:21,040 --> 06:01:24,480
when it then gets packaged into this beautiful little uh

2073
06:01:24,480 --> 06:01:30,480
yeah beautiful little package basically then it will also be a new flavor called

2074
06:01:30,480 --> 06:01:34,718
the production flavor so now you have two flavors one is like

2075
06:01:34,718 --> 06:01:38,160
for a close circle people sitting next to the product

2076
06:01:38,160 --> 06:01:42,160
in the same product room or now that everyone's working

2077
06:01:42,160 --> 06:01:46,000
remotely maybe people are sitting at home etc and that is like the product

2078
06:01:46,000 --> 06:01:50,558
team closely developers testers product owners designers uxers everyone that is

2079
06:01:50,558 --> 06:01:55,040
the closed circle they get the development builds usually

2080
06:01:55,040 --> 06:01:59,360
and then when you get to sending your application to apple for

2081
06:01:59,360 --> 06:02:02,878
instance or to google for review then you would

2082
06:02:02,878 --> 06:02:06,798
get the production flavor okay the reason i'm talking about flavors is that

2083
06:02:06,798 --> 06:02:11,680
these different flavors on ios at least are basically

2084
06:02:11,680 --> 06:02:16,718
assigned with their own specific profiles so then you'd have a

2085
06:02:16,718 --> 06:02:21,280
development profile and you would have a production profile and these prof

2086
06:02:21,280 --> 06:02:26,718
profiles dictate to your application what it what it can and it can't do

2087
06:02:26,718 --> 06:02:31,280
for instance one of the capabilities of a development profile in the ios world

2088
06:02:31,280 --> 06:02:35,840
is that your application can actually be installed on a telephone hooked with a

2089
06:02:35,840 --> 06:02:41,200
cable or even without a cable and debugged remotely so

2090
06:02:41,200 --> 06:02:44,240
this is one of the cool things you can do with ios in that you can actually

2091
06:02:44,240 --> 06:02:47,840
like if i'm a developer sitting here i can

2092
06:02:47,840 --> 06:02:52,480
get the designer's telephone and say oh yeah you want the application like do

2093
06:02:52,480 --> 06:02:56,240
you want to actually see what i'm working on yeah she or he would say

2094
06:02:56,240 --> 06:02:58,958
you would connect your their phone to your

2095
06:02:58,958 --> 06:03:02,638
computer and enable something called remote debugging

2096
06:03:02,638 --> 06:03:06,160
and then you would disconnect it and then give the phone back to them and

2097
06:03:06,160 --> 06:03:09,600
whenever they want the application running live on their phone as you're

2098
06:03:09,600 --> 06:03:14,558
developing it you can actually run the application with your xcode

2099
06:03:14,558 --> 06:03:18,718
live under uh iphone or ipad so

2100
06:03:18,718 --> 06:03:23,600
that is its own flavor and the profile which is the development profile

2101
06:03:23,600 --> 06:03:29,040
dictates to that application that you can be debugged but if you then want to

2102
06:03:29,040 --> 06:03:33,440
sign your application with a production profile and send it to apple

2103
06:03:33,440 --> 06:03:37,600
that profile dictates that this application is not allowed to be

2104
06:03:37,600 --> 06:03:40,320
debugged and when you

2105
06:03:40,320 --> 06:03:45,360
create your application and send it to apple you need to make sure of two

2106
06:03:45,360 --> 06:03:48,878
things among many other things but

2107
06:03:48,878 --> 06:03:52,320
certificate and profile wise you need to make sure of two things

2108
06:03:52,320 --> 06:03:57,120
the application is signed with your production certificate and the

2109
06:03:57,120 --> 06:04:02,878
application is signed also with the production profile which is hooked to

2110
06:04:02,878 --> 06:04:07,040
the production certificate so first the certificate should be there using the

2111
06:04:07,040 --> 06:04:11,760
certificate you create the profile with the profile you sign your application

2112
06:04:11,760 --> 06:04:16,878
and then you send this application to apple apple then looks oh everything is

2113
06:04:16,878 --> 06:04:20,160
is in order the profile to use was a

2114
06:04:20,160 --> 06:04:25,680
a production profile and the certificate linked to the profile was also correct a

2115
06:04:25,680 --> 06:04:30,240
production certificate identifying you as a developer

2116
06:04:30,240 --> 06:04:33,200
so that was almost 16 minutes of

2117
06:04:33,200 --> 06:04:36,240
information about profiles and certificates for ios but i think they're

2118
06:04:36,240 --> 06:04:39,520
so paramount in i mean it's so important to

2119
06:04:39,520 --> 06:04:43,280
understand that you shouldn't really jump over

2120
06:04:43,280 --> 06:04:46,878
these concepts as if you're if you want to become a mobile developer it's so

2121
06:04:46,878 --> 06:04:49,680
important so

2122
06:04:49,680 --> 06:04:54,400
now enough with concepts now let's talk a little bit

2123
06:04:54,400 --> 06:04:57,440
about um

2124
06:04:57,440 --> 06:05:01,040
the developer account and here i actually have a link which i'm going to

2125
06:05:01,040 --> 06:05:06,000
open in a separate window and then i'm going to bring it to the

2126
06:05:06,000 --> 06:05:09,920
foreground so you can actually see

2127
06:05:09,920 --> 06:05:17,040
so here is the developer account as you can see on apple's website and i'm gonna

2128
06:05:17,040 --> 06:05:21,680
bring my face a little bit to the right bottom right so zoom into the window

2129
06:05:21,680 --> 06:05:28,160
here and this is actually on developer

2130
06:05:28,160 --> 06:05:32,798
then you would go into accounts okay so after you've registered an account

2131
06:05:32,798 --> 06:05:36,400
then you will be able to go in here and sign in with your account and i'm going

2132
06:05:36,400 --> 06:05:43,520
to sign in with my um companies apple id

2133
06:05:43,520 --> 06:05:48,958
there we go and then it says okay we sent you a verification code and i have

2134
06:05:48,958 --> 06:05:52,320
my apple watch here so i'm i'm just gonna

2135
06:05:52,320 --> 06:05:55,840
say i didn't get a code and text me the code all right

2136
06:05:55,840 --> 06:05:59,120
so in a short while i should be able to get

2137
06:05:59,120 --> 06:06:03,760
a verification code here and it is important that you don't show

2138
06:06:03,760 --> 06:06:08,160
this verification code to other people it's just you shouldn't do that so i'm

2139
06:06:08,160 --> 06:06:12,798
gonna remove the screen from where you can see it and i'm gonna enter the code

2140
06:06:12,798 --> 06:06:19,840
that was sent to me it is six digits and it is uh just basically digits and

2141
06:06:19,840 --> 06:06:23,870
bring the phone i bring the browser up now and i say trust this browser okay

2142
06:06:23,870 --> 06:06:26,480
[Music] so

2143
06:06:26,480 --> 06:06:31,520
here you will see that um license agreement has been updated okay so we

2144
06:06:31,520 --> 06:06:36,320
should be able to review that later so i'm gonna increase the

2145
06:06:36,320 --> 06:06:41,760
space that this screen is taking at the moment so you can see it in its entirety

2146
06:06:41,760 --> 06:06:45,120
and you can see that now that you you've logged into this account you should be

2147
06:06:45,120 --> 06:06:49,280
able to see things such as overview membership people's

2148
06:06:49,280 --> 06:06:55,360
certificates ids and profiles okay so and then what i talked about earlier

2149
06:06:55,360 --> 06:07:00,080
which is your app store connect okay so um

2150
06:07:00,080 --> 06:07:04,480
and what happens here basically is

2151
06:07:04,480 --> 06:07:08,160
that in the membership people's certificates

2152
06:07:08,160 --> 06:07:11,920
ids and profiles is where you will manage your certificates and all your

2153
06:07:11,920 --> 06:07:15,680
profiles as i mentioned before so

2154
06:07:15,680 --> 06:07:18,718
um here it is very important that you

2155
06:07:18,718 --> 06:07:23,120
basically set up a good ground for your uh certificates create the dev

2156
06:07:23,120 --> 06:07:25,840
certificate the the production survey and then you

2157
06:07:25,840 --> 06:07:29,120
create your profiles after that which we're gonna talk actually about in this

2158
06:07:29,120 --> 06:07:33,920
um in this chapter

2159
06:07:33,920 --> 06:07:37,920
so here are the missing pieces for us in

2160
06:07:37,920 --> 06:07:41,440
order to be able to carry on

2161
06:07:41,440 --> 06:07:46,480
so we need as i mentioned before certificates profiles and app ids app id

2162
06:07:46,480 --> 06:07:49,600
is something that i didn't mention before so i think it's just important

2163
06:07:49,600 --> 06:07:55,440
that i mention what an app id is an app id is

2164
06:07:55,440 --> 06:08:01,600
additional to the profile that you create an app id is an identifier that

2165
06:08:01,600 --> 06:08:07,120
apple and you use in order to know which application you are

2166
06:08:07,120 --> 06:08:11,120
talking with both you yourself and also

2167
06:08:11,120 --> 06:08:14,798
if you for instance in the in the future are going to enable

2168
06:08:14,798 --> 06:08:19,840
features such as push notifications now if you're not familiar with what

2169
06:08:19,840 --> 06:08:24,718
push notifications are they're basically remote notifications remote information

2170
06:08:24,718 --> 06:08:28,400
that you can send from a cloud somewhere on the internet

2171
06:08:28,400 --> 06:08:33,360
to a user's phone so when they get their phone they will see oh here is a message

2172
06:08:33,360 --> 06:08:36,958
from this application you can think of it as remote messages

2173
06:08:36,958 --> 06:08:41,520
just as if someone sent you an sms or an imessage

2174
06:08:41,520 --> 06:08:45,440
or for instance if you're using whatsapp or telegram someone writing a message in

2175
06:08:45,440 --> 06:08:47,920
a chat and then you're getting a notification on your phone that is

2176
06:08:47,920 --> 06:08:54,638
called a push notification so an app id is used mainly in order to

2177
06:08:54,638 --> 06:08:57,360
be able in order for you as a developer to be

2178
06:08:57,360 --> 06:09:01,760
able to specify different capabilities of your application for instance that it

2179
06:09:01,760 --> 06:09:04,320
can receive push notifications that it can

2180
06:09:04,320 --> 06:09:09,360
for instance store secure information on the phone etc etc so

2181
06:09:09,360 --> 06:09:12,160
so when i previously mentioned that you need a certificate and profile in order

2182
06:09:12,160 --> 06:09:16,878
to sign your application you also need an app id in order to identify your

2183
06:09:16,878 --> 06:09:20,638
application and its capabilities okay so we're going to talk about that soon

2184
06:09:20,638 --> 06:09:23,600
actually

2185
06:09:23,600 --> 06:09:26,878
so now

2186
06:09:26,878 --> 06:09:30,080
what we need to do here before we actually get started creating a

2187
06:09:30,080 --> 06:09:34,000
certificate uh is to

2188
06:09:34,000 --> 06:09:38,480
talk about the keychain now if you're if you're if you have a

2189
06:09:38,480 --> 06:09:42,240
developer account here and you are planning on releasing your application i

2190
06:09:42,240 --> 06:09:44,878
kind of can basically assume that you have

2191
06:09:44,878 --> 06:09:49,200
a macintosh so that you have registered for an account

2192
06:09:49,200 --> 06:09:53,520
and that you want to be able to sign your application with a certificate and

2193
06:09:53,520 --> 06:09:56,400
profile however you may be in a group of people

2194
06:09:56,400 --> 06:10:00,798
who doesn't have a who doesn't have a macintosh and xcode

2195
06:10:00,798 --> 06:10:04,558
etc but you still want to be able to release your application to the app

2196
06:10:04,558 --> 06:10:09,040
store so you may want to for instance create your certificate profiles an app

2197
06:10:09,040 --> 06:10:13,600
id and then later send that information to some sort of a cloud hosting service

2198
06:10:13,600 --> 06:10:17,520
for for them to sign your application and then send it back to you something

2199
06:10:17,520 --> 06:10:23,760
like that i have never done that myself but you may be in that group and uh

2200
06:10:23,760 --> 06:10:27,680
for the sake of being inclusive i think it's important to talk about that

2201
06:10:27,680 --> 06:10:31,440
um now let's talk about what i've put up here

2202
06:10:31,440 --> 06:10:35,200
as the caption and that is like the certificates in the keychain

2203
06:10:35,200 --> 06:10:39,280
you see every certificate gets created by you as a

2204
06:10:39,280 --> 06:10:43,440
developer sending a request to apple now

2205
06:10:43,440 --> 06:10:47,520
this request is you basically creating a digital

2206
06:10:47,520 --> 06:10:50,718
signature on your computer which

2207
06:10:50,718 --> 06:10:54,718
your computer holds onto then your request you will send it to

2208
06:10:54,718 --> 06:11:00,320
apple apple says oh you're asking for a certificate okay here's the certificate

2209
06:11:00,320 --> 06:11:03,200
and then you download that certificate and then when you double click on the

2210
06:11:03,200 --> 06:11:09,120
certificate it gets installed and hooked to your original request okay so here's

2211
06:11:09,120 --> 06:11:13,040
the certificate and here's the private key so

2212
06:11:13,040 --> 06:11:17,200
the private key is just a piece of information that your computer stores

2213
06:11:17,200 --> 06:11:22,400
digitally on only your computer so that later the downloaded certificate can

2214
06:11:22,400 --> 06:11:27,840
actually be hooked to it creating a chain okay so

2215
06:11:27,840 --> 06:11:31,600
your application when it gets signed with your certificate that you then

2216
06:11:31,600 --> 06:11:35,840
download from apple it actually contains some information

2217
06:11:35,840 --> 06:11:40,000
about the certificate and the private key and then you send the application

2218
06:11:40,000 --> 06:11:45,280
that was signed using these two pieces of information to apple so

2219
06:11:45,280 --> 06:11:48,080
there's a lot of information i know but i think it's important for every mobile

2220
06:11:48,080 --> 06:11:51,840
developer who wants to release something for ios appstore to

2221
06:11:51,840 --> 06:11:55,200
know this um now this

2222
06:11:55,200 --> 06:11:59,360
private key and the certificate they both get stored inside a program on your

2223
06:11:59,360 --> 06:12:03,040
computer called keychain if you have macintosh

2224
06:12:03,040 --> 06:12:08,000
and i can bring up keychain actually now let me see which i have three

2225
06:12:08,000 --> 06:12:12,000
screens here so i don't know which one is gonna get open on

2226
06:12:12,000 --> 06:12:17,040
so i will bring up keychain here um

2227
06:12:17,040 --> 06:12:21,600
and i will show you how it looks like so

2228
06:12:21,600 --> 06:12:26,638
here is an example of keychain and you can see here there's a distribution

2229
06:12:26,638 --> 06:12:30,160
certificate and a development certificate okay

2230
06:12:30,160 --> 06:12:34,400
and these certificates i didn't create them i downloaded them but the things

2231
06:12:34,400 --> 06:12:37,840
under them this is the chain i was talking about this is the key that i

2232
06:12:37,840 --> 06:12:42,080
created okay so when you request a certificate from

2233
06:12:42,080 --> 06:12:47,600
apple you actually create this thing on your computer and you upload this thing

2234
06:12:47,600 --> 06:12:52,080
to apple for them to create a certificate hooked to that kind of not

2235
06:12:52,080 --> 06:12:55,440
you don't actually upload exactly this but something that is related to this

2236
06:12:55,440 --> 06:12:57,280
okay so

2237
06:12:57,280 --> 06:13:01,200
for us in order to be able to continue i think it's important that i actually

2238
06:13:01,200 --> 06:13:04,240
delete these existing certificates from my computer

2239
06:13:04,240 --> 06:13:06,798
so i'm just going to go like this and i'm going to be like

2240
06:13:06,798 --> 06:13:11,120
delete two items all right and delete them just like that

2241
06:13:11,120 --> 06:13:14,798
okay so now they're gone now what we need to do is

2242
06:13:14,798 --> 06:13:17,280
um

2243
06:13:17,280 --> 06:13:25,680
here let me put up the captions so you can see

2244
06:13:25,680 --> 06:13:33,440
so that was the certificates and now we also need to talk about um

2245
06:13:33,440 --> 06:13:37,120
we also need to talk about actually deleting the profiles now this is an

2246
06:13:37,120 --> 06:13:40,638
interesting part if you already have like profiles installed on your computer

2247
06:13:40,638 --> 06:13:45,520
you may not want to do this but i'm just going to show you this step so that we

2248
06:13:45,520 --> 06:13:49,360
start with a clean slate okay so you're not supposed to do this if you exactly

2249
06:13:49,360 --> 06:13:52,638
know what you're doing with your certificates but if if this is the first

2250
06:13:52,638 --> 06:13:55,760
time you're doing this and there may already be some certificates for you on

2251
06:13:55,760 --> 06:13:59,920
your computer for some reason then this is the way to actually get rid of them

2252
06:13:59,920 --> 06:14:04,080
so i'm gonna open up finder um

2253
06:14:04,080 --> 06:14:08,000
let me open up finder here and i'm gonna bring it up here

2254
06:14:08,000 --> 06:14:13,200
and what we need to do is to go into a folder called um

2255
06:14:13,200 --> 06:14:16,160
i believe it's called library and then mobile

2256
06:14:16,160 --> 06:14:18,638
device and then something called provision

2257
06:14:18,638 --> 06:14:22,638
profiles okay and you can see here um and i will show

2258
06:14:22,638 --> 06:14:28,320
you this path again so it's my user library mobile device and then provision

2259
06:14:28,320 --> 06:14:32,638
profiles okay so after i've gone into that folder i'm

2260
06:14:32,638 --> 06:14:35,920
going to delete these profiles that are here okay

2261
06:14:35,920 --> 06:14:38,878
so you don't have to do this if you don't want to and you know exactly what

2262
06:14:38,878 --> 06:14:42,558
you're doing but i'm just doing it to show you that profiles are always stored

2263
06:14:42,558 --> 06:14:46,798
in that location for your user okay and what you can also do which i really

2264
06:14:46,798 --> 06:14:50,638
like is to if you say add columns here and kind of like drag it into your

2265
06:14:50,638 --> 06:14:53,840
favorites so you don't have to type that path every time so let's just put it

2266
06:14:53,840 --> 06:14:57,360
here okay so that every time i want to install the profile i can just click

2267
06:14:57,360 --> 06:15:03,280
here and put my profile there all right

2268
06:15:03,280 --> 06:15:06,718
all right um

2269
06:15:06,718 --> 06:15:10,400
now that we've done that the next step as the caption shows here is to delete

2270
06:15:10,400 --> 06:15:13,680
our existing certificates and profiles from apple's

2271
06:15:13,680 --> 06:15:17,200
development account so let's go to certificates ids and profiles here on

2272
06:15:17,200 --> 06:15:21,840
the left hand side and you'll see here i have quite a lot of things stored right

2273
06:15:21,840 --> 06:15:26,000
here okay you see distribution development development blah blah

2274
06:15:26,000 --> 06:15:32,480
so what we can do here is to go ahead and delete these certificates on the

2275
06:15:32,480 --> 06:15:35,600
left hand side you see it's a certificate so there are quite a few of

2276
06:15:35,600 --> 06:15:39,040
them so what i'm going to do is just to tap

2277
06:15:39,040 --> 06:15:44,000
on this one and just say revoke revoke tap on the next one and just revoke them

2278
06:15:44,000 --> 06:15:49,200
one by one so and again if you're new to ios development and you've just gotten

2279
06:15:49,200 --> 06:15:53,840
your development account you don't even have any certificates so this screen is

2280
06:15:53,840 --> 06:15:58,798
going to be empty for you so revoke revoke so your screen is gonna look like

2281
06:15:58,798 --> 06:16:02,400
this all right so now that we don't have certificates

2282
06:16:02,400 --> 06:16:07,360
i'm also going to go into profiles and delete these profiles so if i just go in

2283
06:16:07,360 --> 06:16:11,760
here and kind of like say all my profiles and then just delete this is

2284
06:16:11,760 --> 06:16:15,120
going to be fine as well so sort of problem all right so now i've deleted

2285
06:16:15,120 --> 06:16:19,360
all my profiles and certificates

2286
06:16:19,360 --> 06:16:23,920
and that was the goal of this part of the chapter

2287
06:16:23,920 --> 06:16:27,280
9 i believe so yeah i've now deleted the existing

2288
06:16:27,280 --> 06:16:30,400
development and production certs and

2289
06:16:30,400 --> 06:16:35,440
then that is done with the profiles as well they're also gone

2290
06:16:35,440 --> 06:16:39,120
so what we need to do now is to create something called a development

2291
06:16:39,120 --> 06:16:42,320
certificate and just to recap a development certificate is

2292
06:16:42,320 --> 06:16:47,200
a certificate that will allow you as a developer to run and test your

2293
06:16:47,200 --> 06:16:50,958
application while you're developing it on real

2294
06:16:50,958 --> 06:16:56,798
iphone or ipad all right so it's it's not necessary for releasing

2295
06:16:56,798 --> 06:17:00,558
the application but i personally after many years of experience developing

2296
06:17:00,558 --> 06:17:03,520
mobile applications i've come to the conclusion that i prefer actually

2297
06:17:03,520 --> 06:17:07,600
running my application testing my applications are real devices as i

2298
06:17:07,600 --> 06:17:12,240
develop because you also have emulators and you also have simulators that

2299
06:17:12,240 --> 06:17:16,638
simulate and emulate the capabilities of iphone and

2300
06:17:16,638 --> 06:17:21,200
android phones or tablets but i've come to the conclusion that it's actually for

2301
06:17:21,200 --> 06:17:26,160
me at least better to test my application real phones or tablets

2302
06:17:26,160 --> 06:17:29,760
so in order to be able to do that and if you have for instance an iphone

2303
06:17:29,760 --> 06:17:33,520
connected to your computer um and you want to test your flag

2304
06:17:33,520 --> 06:17:36,558
application on that iphone then the first thing you need to do is to create

2305
06:17:36,558 --> 06:17:40,798
a development certificate so you need to identify yourself as a developer to

2306
06:17:40,798 --> 06:17:44,878
apple so let's go to the certificate section and then just say create a

2307
06:17:44,878 --> 06:17:50,160
certificate and then choose apple development actually sorry ios app

2308
06:17:50,160 --> 06:17:55,200
development this is interesting it says

2309
06:17:55,200 --> 06:17:58,240
yeah so it says apple that's very interesting so you can basically use

2310
06:17:58,240 --> 06:18:00,638
something called apple development but we're not going to do that we're just

2311
06:18:00,638 --> 06:18:03,440
going to say ios app development at the moment okay

2312
06:18:03,440 --> 06:18:06,080
so let's do that just choose ios app

2313
06:18:06,080 --> 06:18:11,360
development and just press continue and here it says create a new certificate

2314
06:18:11,360 --> 06:18:17,040
and create a new certificate is it's waiting for you to tell it that you're

2315
06:18:17,040 --> 06:18:20,638
asking for a development certificate and you need to choose a file now this is

2316
06:18:20,638 --> 06:18:22,958
the magic part you need to now go back to

2317
06:18:22,958 --> 06:18:26,798
keychain so let me see if i can bring up keychain again

2318
06:18:26,798 --> 06:18:32,080
and in here just go to keychain access menu

2319
06:18:32,080 --> 06:18:36,160
and then say a certificate assistant and then say

2320
06:18:36,160 --> 06:18:40,400
request a certificate from a certificate authority okay

2321
06:18:40,400 --> 06:18:46,718
so i'm gonna press that and i'm gonna put my company's email here

2322
06:18:46,718 --> 06:18:50,798
and the common name i'm just gonna leave it as my name all right

2323
06:18:50,798 --> 06:18:53,840
and then i'm just going to say save to disk

2324
06:18:53,840 --> 06:18:57,520
all right so um

2325
06:18:57,520 --> 06:19:01,760
that's what we're doing now then i'm gonna say continue and it says

2326
06:19:01,760 --> 06:19:05,840
okay i'm gonna write a file on your desktop or wherever you want with that

2327
06:19:05,840 --> 06:19:09,520
request so save it somewhere that you know where it is actually saved so i'm

2328
06:19:09,520 --> 06:19:13,840
gonna save that and then say done all right now you see

2329
06:19:13,840 --> 06:19:17,360
that certificate request in itself didn't create a certificate it's just a

2330
06:19:17,360 --> 06:19:22,000
certificate request but what it did is that it created a private key

2331
06:19:22,000 --> 06:19:26,478
and you can actually go to your keys here and you'll see that there was a

2332
06:19:26,478 --> 06:19:30,400
if i say kind private key so one of these keys is the one that was just

2333
06:19:30,400 --> 06:19:34,080
created right now okay i don't exactly know which one because

2334
06:19:34,080 --> 06:19:39,360
it doesn't have a date but it's just one of these so every request for creating a

2335
06:19:39,360 --> 06:19:43,040
certificate it creates with itself a private key

2336
06:19:43,040 --> 06:19:47,040
okay so keep that in mind let's go back to my certificates

2337
06:19:47,040 --> 06:19:50,878
now that that file has been saved on your desktop just say choose file and

2338
06:19:50,878 --> 06:19:56,718
then go to your desktop and pick that certificate request okay

2339
06:19:56,718 --> 06:20:00,478
and it's you see here certificate request search sign request

2340
06:20:00,478 --> 06:20:05,600
and just say continue and then it says okay it expires in a

2341
06:20:05,600 --> 06:20:08,798
year and you need to keep that in mind because development certificates do

2342
06:20:08,798 --> 06:20:13,120
always expire in a year and you need to by basically renew them okay

2343
06:20:13,120 --> 06:20:15,600
so but for now you don't have to worry about that because we're not going to

2344
06:20:15,600 --> 06:20:20,320
take a year to develop this application so let's just say download and it got

2345
06:20:20,320 --> 06:20:25,760
downloaded to my downloads folder so i'm gonna bring up my downloads folder

2346
06:20:25,760 --> 06:20:29,040
uh and actually just

2347
06:20:29,040 --> 06:20:33,120
gonna show you here like this

2348
06:20:33,120 --> 06:20:35,360
so here is

2349
06:20:35,360 --> 06:20:40,240
the file that got downloaded you see it's a cert file all right now this

2350
06:20:40,240 --> 06:20:44,240
certification in itself it doesn't contain your private key remember the

2351
06:20:44,240 --> 06:20:46,958
private key is in the keychain so what you need to do is just you need to

2352
06:20:46,958 --> 06:20:51,440
double click on this all right so double clicking on it you see it will

2353
06:20:51,440 --> 06:20:54,958
then create a certificate in your keychain under my certificates and login

2354
06:20:54,958 --> 06:20:59,200
keychain that is linked with your private key you see so this is what you

2355
06:20:59,200 --> 06:21:03,440
downloaded from apple this is what you created on your computer by requesting a

2356
06:21:03,440 --> 06:21:07,520
certificate and when you double click on the downloaded certificate these two get

2357
06:21:07,520 --> 06:21:12,080
hooked together okay so that's it that that is what you have

2358
06:21:12,080 --> 06:21:16,320
to do to create a development certificate and the key related to it

2359
06:21:16,320 --> 06:21:20,160
all right now let's go to the production

2360
06:21:20,160 --> 06:21:24,000
certificate and we need to kind of do the same thing same process

2361
06:21:24,000 --> 06:21:27,360
in order to create our production certificate so let's go back to all

2362
06:21:27,360 --> 06:21:30,878
certificates and i'm just going to say plus certificate and

2363
06:21:30,878 --> 06:21:36,638
i'm gonna say ios distribution app store and ad hoc okay so choose that option

2364
06:21:36,638 --> 06:21:40,718
please and sorry i'm just gonna not also in my

2365
06:21:40,718 --> 06:21:44,478
notes here that we talked about the dev certificate

2366
06:21:44,478 --> 06:21:48,638
so let's go ahead and press continue here and you'll have to do the exact

2367
06:21:48,638 --> 06:21:52,558
same process as you did for the development certificate and create a new

2368
06:21:52,558 --> 06:21:56,958
certificate request so let's do the same thing just basically

2369
06:21:56,958 --> 06:22:01,360
kind of copy and paste the same process go to keychain access

2370
06:22:01,360 --> 06:22:05,360
certificate assistant request a certificate from a certificate authority

2371
06:22:05,360 --> 06:22:08,638
and just be careful a little bit with this because i've understood from what

2372
06:22:08,638 --> 06:22:13,200
i've what i've seen is that depending on what you've chosen here this menu

2373
06:22:13,200 --> 06:22:16,000
actually changes so

2374
06:22:16,000 --> 06:22:20,080
it could be that you kind of need to make sure in your keychain that you're

2375
06:22:20,080 --> 06:22:23,280
not selecting anything so just make sure that nothing is

2376
06:22:23,280 --> 06:22:27,760
selected and then go to um sorry then go to

2377
06:22:27,760 --> 06:22:30,878
certificate assistant and request a certificate for certificate authority

2378
06:22:30,878 --> 06:22:34,160
put your company's or your developer accounts

2379
06:22:34,160 --> 06:22:36,558
email there i'm just gonna pick solid a b

2380
06:22:36,558 --> 06:22:39,520
and then save to disk and then say continue

2381
06:22:39,520 --> 06:22:42,878
and then save it to desktop and since there is a file already there with the

2382
06:22:42,878 --> 06:22:45,680
same name from the previous step it's going to say are you sure you want to

2383
06:22:45,680 --> 06:22:50,320
replace it yes replace it and it got saved then i'm going to go

2384
06:22:50,320 --> 06:22:54,000
here and then choose the same exact file but it's

2385
06:22:54,000 --> 06:22:56,958
actually is a new file which got rewritten

2386
06:22:56,958 --> 06:23:00,400
and then say continue and you'll see now there is a download

2387
06:23:00,400 --> 06:23:03,760
so i'm going to download that and if i go

2388
06:23:03,760 --> 06:23:09,360
to my downloads folder um here i'll bring it up so you can see as

2389
06:23:09,360 --> 06:23:13,120
well um

2390
06:23:13,120 --> 06:23:15,760
let's see i'm going to bring it here you will see

2391
06:23:15,760 --> 06:23:20,000
that there is a new file called ios distribution that is your production

2392
06:23:20,000 --> 06:23:24,160
certificate okay so double click on that keychain it's open again and you'll see

2393
06:23:24,160 --> 06:23:27,920
now you have two certificates here iphone distribution and then iphone

2394
06:23:27,920 --> 06:23:31,920
developer so these are your certificates and keep

2395
06:23:31,920 --> 06:23:35,440
hold of them kind of like try to save them and if even if you don't save them

2396
06:23:35,440 --> 06:23:39,520
it's okay because they're now placed here so you can always export them okay

2397
06:23:39,520 --> 06:23:43,360
but it's also good practice just to keep hold of them

2398
06:23:43,360 --> 06:23:45,520
great now

2399
06:23:45,520 --> 06:23:50,000
sorry about that now we've created a developer and a dis

2400
06:23:50,000 --> 06:23:52,798
and a production or distribution certificate

2401
06:23:52,798 --> 06:23:56,400
let's talk about the next step and that is required for us to be able to release

2402
06:23:56,400 --> 06:24:00,080
or test our application on on phones so

2403
06:24:00,080 --> 06:24:05,520
let's go back here and to identifiers and in here is where you create your

2404
06:24:05,520 --> 06:24:09,840
application identifiers and you can see that they're actually tied to a specific

2405
06:24:09,840 --> 06:24:12,798
organization and identifier which we talked about

2406
06:24:12,798 --> 06:24:16,320
in which chapter was it that we talked about i think it was actually in chapter

2407
06:24:16,320 --> 06:24:18,958
eight yes if you have if you don't know what

2408
06:24:18,958 --> 06:24:23,120
an identifier is please go back to chapter number eight where i discussed

2409
06:24:23,120 --> 06:24:26,080
that so let's

2410
06:24:26,080 --> 06:24:30,478
press the plus button here and say that you want to create a new

2411
06:24:30,478 --> 06:24:37,600
app id okay press continue and then you will choose app here not an app clip

2412
06:24:37,600 --> 06:24:41,520
and then you will be presented with this screen here so i'm gonna

2413
06:24:41,520 --> 06:24:45,920
explain to you what all this is so in here the description um we're just

2414
06:24:45,920 --> 06:24:50,478
gonna print some information here that describes our application and to be

2415
06:24:50,478 --> 06:24:54,160
honest with you i don't remember what we actually called our application when we

2416
06:24:54,160 --> 06:24:57,360
created in the previous i can see it was called

2417
06:24:57,360 --> 06:25:01,440
my notes so i'm just going to say my notes

2418
06:25:01,440 --> 06:25:06,000
flutter application sample or flutter app all right

2419
06:25:06,000 --> 06:25:09,760
here the bundle identifier is very important that you actually specify it

2420
06:25:09,760 --> 06:25:15,440
correctly as we created it in our in chapter 8. so i'm going to bring up

2421
06:25:15,440 --> 06:25:20,558
the my notes application here i'm going to increase the font size so you can see

2422
06:25:20,558 --> 06:25:25,280
um if you remember where we created the application

2423
06:25:25,280 --> 06:25:30,320
with this command you see we said se.pixelity and then my notes meaning

2424
06:25:30,320 --> 06:25:34,760
that the application identifier from this point on is going to be

2425
06:25:34,760 --> 06:25:39,440
se.pixelity.mynotes okay with a dot in between all right so if i search for

2426
06:25:39,440 --> 06:25:43,120
that in our project let's say sepixolity.mynotes

2427
06:25:43,120 --> 06:25:46,638
you will see there are some results here you see so depending on how you created

2428
06:25:46,638 --> 06:25:50,878
your floater application depending on what organization you specified this

2429
06:25:50,878 --> 06:25:54,478
identifier may be different for you but since my identifier in this case is s

2430
06:25:54,478 --> 06:25:58,558
epixody my notes i'm just gonna copy that

2431
06:25:58,558 --> 06:26:02,000
and i'm going to bring it here make sure explicit is selected and just paste that

2432
06:26:02,000 --> 06:26:05,520
bundle id in there okay so yeah it's chosen

2433
06:26:05,520 --> 06:26:08,638
now if you remember what i said before an app identifier is not just the

2434
06:26:08,638 --> 06:26:12,240
identifier the bundle id itself but it's also like a list of capabilities that

2435
06:26:12,240 --> 06:26:16,240
your application can have now if you for instance want to have push notifications

2436
06:26:16,240 --> 06:26:20,638
you will also need to enable that in here now push notification is not not

2437
06:26:20,638 --> 06:26:25,040
something that we're going to do in this course so you don't have to do that but

2438
06:26:25,040 --> 06:26:30,000
all you need to do here after you've entered your app id prefix sorry your

2439
06:26:30,000 --> 06:26:35,040
app bundle an identifier and a description just press continue

2440
06:26:35,040 --> 06:26:38,320
and you can see that says okay are you sure everything's fine yeah explicit

2441
06:26:38,320 --> 06:26:43,920
yeah great and then i say register now that identifier got created all

2442
06:26:43,920 --> 06:26:46,400
right so

2443
06:26:46,400 --> 06:26:48,558
um you don't really have to do anything

2444
06:26:48,558 --> 06:26:52,878
with that identifier right now it's just that you have now registered that

2445
06:26:52,878 --> 06:26:57,600
identifier so no one else can basically take that app from you

2446
06:26:57,600 --> 06:26:59,760
so i'm gonna

2447
06:26:59,760 --> 06:27:02,160
actually

2448
06:27:02,160 --> 06:27:06,558
tick these items in my notes so that we know we've talked about it all right

2449
06:27:06,558 --> 06:27:11,760
now the next step is to prepare your

2450
06:27:11,760 --> 06:27:15,840
uh your application so that it can actually be installed and debugged or

2451
06:27:15,840 --> 06:27:21,440
tested on real phone now you can't see my entire setup but here i

2452
06:27:21,440 --> 06:27:26,000
have an iphone 12 pro which is just right here it's a little bit dirty

2453
06:27:26,000 --> 06:27:28,958
screen but that doesn't matter it's just my test telephone

2454
06:27:28,958 --> 06:27:31,600
and this phone

2455
06:27:31,600 --> 06:27:37,360
is connected as you can see with a cable to my computer and it is available for

2456
06:27:37,360 --> 06:27:40,798
my computer to see so i'm just going to unlock this phone right now with my

2457
06:27:40,798 --> 06:27:45,360
passcode and if i then bring up my

2458
06:27:45,360 --> 06:27:48,878
finder so here

2459
06:27:48,878 --> 06:27:52,798
you can see that it is available here right here okay

2460
06:27:52,798 --> 06:27:58,240
so it's my telephone and it has a special identifier and if you

2461
06:27:58,240 --> 06:28:02,000
want to get your device identifier which is what we need to do here as you can

2462
06:28:02,000 --> 06:28:06,160
see in order to debug on a real device we need a uid to register for our

2463
06:28:06,160 --> 06:28:08,558
profile so

2464
06:28:08,558 --> 06:28:12,478
when you i mean this is a kind of like a big thing to talk about because it takes

2465
06:28:12,478 --> 06:28:15,520
a lot of time but what i'm going to say here is that when you created that

2466
06:28:15,520 --> 06:28:21,040
development pro and development certificate the next step is for you to

2467
06:28:21,040 --> 06:28:25,440
basically register your device with apple so that apple knows on which

2468
06:28:25,440 --> 06:28:29,120
devices you actually want to test your application all right

2469
06:28:29,120 --> 06:28:34,718
and those devices they're stored in here in under the devices um tab

2470
06:28:34,718 --> 06:28:40,080
and there are ways to get your device identifier such as going to finder as i

2471
06:28:40,080 --> 06:28:43,360
just showed here and just tapping on your

2472
06:28:43,360 --> 06:28:47,360
device now i'm kind of going to do it off screen so you don't see the entirety

2473
06:28:47,360 --> 06:28:52,160
of what is here so

2474
06:28:52,160 --> 06:28:56,558
let me see if there's any way for you to actually get your device identifier yes

2475
06:28:56,558 --> 06:29:00,878
and it is i can actually see here there's a way to get that um

2476
06:29:00,878 --> 06:29:04,558
so what i'm going to do is i'm going to actually bring finder up here so you see

2477
06:29:04,558 --> 06:29:09,680
what happens i just tap on my phone now you need to register your device on

2478
06:29:09,680 --> 06:29:14,638
identifier under this devices tab before you create your profile okay

2479
06:29:14,638 --> 06:29:17,840
i'm not going to do that because my phone is already registered but you need

2480
06:29:17,840 --> 06:29:22,160
to do this on your own and the way to do that is to connect your phone or your

2481
06:29:22,160 --> 06:29:26,240
tablet which you want to test your flutter application on to your computer

2482
06:29:26,240 --> 06:29:30,000
then go into finder and tap on your phone and

2483
06:29:30,000 --> 06:29:35,200
then just click on this section now i'm not going to do that here and the reason

2484
06:29:35,200 --> 06:29:39,280
behind that is that every device says identifier really identifies that

2485
06:29:39,280 --> 06:29:42,958
device so you could go and register my device under your account

2486
06:29:42,958 --> 06:29:45,600
so and it's just not a good idea to show

2487
06:29:45,600 --> 06:29:49,200
your device identifier to others so i'm not i'm not going to be able to do that

2488
06:29:49,200 --> 06:29:53,760
unfortunately in this course but the steps you have to take is to click

2489
06:29:53,760 --> 06:29:56,798
here on this label and it will show you a

2490
06:29:56,798 --> 06:30:03,520
section called uuid copy that uuid and go into devices

2491
06:30:03,520 --> 06:30:07,760
section of the certificate identifiers and profile section of apple developer

2492
06:30:07,760 --> 06:30:12,718
account and add that uuid with a name to your account

2493
06:30:12,718 --> 06:30:16,638
okay so i'm just gonna assume you've done that and if you need some time to

2494
06:30:16,638 --> 06:30:20,638
go ahead and do that please pause this video and do that so

2495
06:30:20,638 --> 06:30:24,958
the key is just to get the identifier from here okay there's a way also get

2496
06:30:24,958 --> 06:30:29,840
your identifier your device identifier from xcode um and that works exactly the

2497
06:30:29,840 --> 06:30:35,200
same you just have to open xcode then go to um i believe go into menu and then

2498
06:30:35,200 --> 06:30:38,320
pick devices and from there you pick your device and you'll see it's

2499
06:30:38,320 --> 06:30:42,478
identifier right there so that was a lot of talk let's say that

2500
06:30:42,478 --> 06:30:46,478
you've already done that so what we need to do now is to go and

2501
06:30:46,478 --> 06:30:54,000
create a development profile all right so i'm just going to tick these items in

2502
06:30:54,000 --> 06:30:56,958
my notes as well so this is the exciting part now we're

2503
06:30:56,958 --> 06:31:01,280
going to go to the profile section and create a new development profile so

2504
06:31:01,280 --> 06:31:04,798
click on generate a profile and i'm going to say ios app development and

2505
06:31:04,798 --> 06:31:08,558
then say continue then it says okay choose an app id you

2506
06:31:08,558 --> 06:31:11,600
see now your profile is going to be linked with your app so

2507
06:31:11,600 --> 06:31:16,080
do this drop down here and you can see i'm just going to say my notes and this

2508
06:31:16,080 --> 06:31:20,638
is the app that i created and for you this id maybe a little bit

2509
06:31:20,638 --> 06:31:24,160
different the description maybe a little different but just choose the

2510
06:31:24,160 --> 06:31:27,120
um app id that you created in the previous

2511
06:31:27,120 --> 06:31:31,520
steps so i'm going to choose that i'm just going to say continue

2512
06:31:31,520 --> 06:31:35,440
now it's going to say okay which certificate is this profile connected to

2513
06:31:35,440 --> 06:31:40,000
do you remember i said that a profile is linked to a certificate this is what

2514
06:31:40,000 --> 06:31:43,680
that actually means so granted that you've created your

2515
06:31:43,680 --> 06:31:47,440
development certificate in as i talked about in this chapter just select your

2516
06:31:47,440 --> 06:31:51,600
certificate so and then say continue now

2517
06:31:51,600 --> 06:31:57,680
here it asks is that which devices do you want this um

2518
06:31:57,680 --> 06:32:01,840
profile which which device do you want your application which is signed with

2519
06:32:01,840 --> 06:32:06,878
this profile certainly to be able to run on now these all these devices come from

2520
06:32:06,878 --> 06:32:10,080
the devices section i've registered many devices so

2521
06:32:10,080 --> 06:32:14,320
um even some of my co-workers devices

2522
06:32:14,320 --> 06:32:18,320
which allow us to basically debug an application on their devices as well so

2523
06:32:18,320 --> 06:32:21,040
granted that you've done that

2524
06:32:21,040 --> 06:32:26,000
if you go back here then you will see those um

2525
06:32:26,000 --> 06:32:30,958
see those devices in this list right so i'm just going to say select

2526
06:32:30,958 --> 06:32:35,840
all just make sure my application can be run on all those devices that i've

2527
06:32:35,840 --> 06:32:39,120
registered okay then say continue and then you will give

2528
06:32:39,120 --> 06:32:42,638
it a name so i'm going to give it a name of my notes

2529
06:32:42,638 --> 06:32:46,000
dival dev profile

2530
06:32:46,000 --> 06:32:50,878
or just my notes dev okay i'm just going to say generate

2531
06:32:50,878 --> 06:32:54,638
and you will get some information about when it expires etc also expires in a

2532
06:32:54,638 --> 06:32:58,400
year so and then you'll have to say download

2533
06:32:58,400 --> 06:33:02,558
and we're going to do the exact same thing now for a distribution profile a

2534
06:33:02,558 --> 06:33:06,798
distribution profile is the kind of like the same dev profile but you cannot

2535
06:33:06,798 --> 06:33:10,638
debug your application with it all you can pretty much do with it is to sign

2536
06:33:10,638 --> 06:33:14,320
your application with that profile and send it to apple so that you can deploy

2537
06:33:14,320 --> 06:33:19,040
your application in the app store okay so press plus profile and in this and

2538
06:33:19,040 --> 06:33:23,600
this time go to distribution and say app store you see distribution subsection

2539
06:33:23,600 --> 06:33:27,760
and app store so press the continue button

2540
06:33:27,760 --> 06:33:32,320
then go here and then choose your application

2541
06:33:32,320 --> 06:33:36,478
so that was the development profile sorry now we have to go to production so

2542
06:33:36,478 --> 06:33:39,840
i'm going to bring the window a little bit up so that you can see it in its

2543
06:33:39,840 --> 06:33:44,240
entirety so then i'm gonna choose my notes

2544
06:33:44,240 --> 06:33:47,280
all right and then i'm just gonna press the

2545
06:33:47,280 --> 06:33:50,320
continue button here

2546
06:33:50,320 --> 06:33:52,638
um i'm gonna take it in my notes so we've

2547
06:33:52,638 --> 06:33:59,120
talked about the dev profile okay so now that you've done that uh

2548
06:33:59,120 --> 06:34:01,920
choose your assertive again you see it says okay now you're creating a

2549
06:34:01,920 --> 06:34:05,920
certificate a profile for a distribution then it should be hooked with some sort

2550
06:34:05,920 --> 06:34:09,360
of distribution certificate and since ios distribution certificate is the only

2551
06:34:09,360 --> 06:34:13,120
one that we created if you remember i deleted all my other certificates

2552
06:34:13,120 --> 06:34:16,798
so that's the only one left here just pick that and press continue

2553
06:34:16,798 --> 06:34:21,280
now give it a name i'm going to say my notes

2554
06:34:21,280 --> 06:34:23,840
prod production

2555
06:34:23,840 --> 06:34:26,478
and then i'm just gonna say generate it says

2556
06:34:26,478 --> 06:34:29,760
okay there you go and you can download it all right

2557
06:34:29,760 --> 06:34:33,040
now that you've done that you need to bring up your

2558
06:34:33,040 --> 06:34:37,600
downloads folder where your profiles got downloaded um

2559
06:34:37,600 --> 06:34:40,878
now you see these are the two profiles i got downloaded except with their

2560
06:34:40,878 --> 06:34:45,840
extension of mobile provision provision you need to install these somehow on

2561
06:34:45,840 --> 06:34:50,240
your computer so that you can sign your applications or your ios application

2562
06:34:50,240 --> 06:34:54,240
with this with these so what you need to do now is to copy

2563
06:34:54,240 --> 06:34:58,400
these two files i'm going to copy them like this and command c

2564
06:34:58,400 --> 06:35:02,718
and then bring them into your provision profiles folder i'm just going to

2565
06:35:02,718 --> 06:35:06,798
cut and paste them there okay so they're not in the downloads folder anymore so

2566
06:35:06,798 --> 06:35:10,320
there they are there are other ways of installing these

2567
06:35:10,320 --> 06:35:14,718
profiles some people rather drag it into xcode some people double click on them

2568
06:35:14,718 --> 06:35:18,400
and those are all fine but there's a little bit of a problem by doing those

2569
06:35:18,400 --> 06:35:22,000
methods compared with the method i showed you here if you double click

2570
06:35:22,000 --> 06:35:27,120
these profiles mac os knows how how to install them but

2571
06:35:27,120 --> 06:35:31,440
mac os just messes up their naming so they will be installed on their very

2572
06:35:31,440 --> 06:35:35,600
random names so if you come back to your provisioning profiles folder they may be

2573
06:35:35,600 --> 06:35:39,360
under some sort of a cryptic name that you don't recognize anymore so in this

2574
06:35:39,360 --> 06:35:43,200
way they basically keep their original name which

2575
06:35:43,200 --> 06:35:48,320
is very descriptive of what they actually are okay

2576
06:35:48,320 --> 06:35:58,558
okay that was that so now we've created a um dev profile and a prod profile

2577
06:35:58,558 --> 06:36:03,760
exciting stuff so what we need to do now is actually work we can say that we're

2578
06:36:03,760 --> 06:36:07,280
done with this screen here so i'm going to close that

2579
06:36:07,280 --> 06:36:12,240
and what i'm going to do here then is to what we need to talk about now is to set

2580
06:36:12,240 --> 06:36:17,200
up our project in xcode so that xcode understands that

2581
06:36:17,200 --> 06:36:20,798
our application needs to be signed with the correct profiles and certificates so

2582
06:36:20,798 --> 06:36:26,080
what i need you to do is to go to the ios folder in your flutter project and

2583
06:36:26,080 --> 06:36:30,160
just right click on it and say reveal in finder okay

2584
06:36:30,160 --> 06:36:35,040
after you do reveal in finder double click on the workspace in order to open

2585
06:36:35,040 --> 06:36:40,320
your flutter xcode workspace in xcode

2586
06:36:40,320 --> 06:36:44,320
and what you'll need to do now is to basically

2587
06:36:44,320 --> 06:36:49,840
make sure that your signing of your ios application is done correctly so choose

2588
06:36:49,840 --> 06:36:54,478
this icon on top left in your um i think it's project explorer or something

2589
06:36:54,478 --> 06:36:58,718
project navigator then on the targets

2590
06:36:58,718 --> 06:37:04,160
choose your targets and then go to signing and capabilities and just remove

2591
06:37:04,160 --> 06:37:08,160
automatic signing okay for this course we're not going to use

2592
06:37:08,160 --> 06:37:12,400
automatic signing i'm just going to take it

2593
06:37:12,400 --> 06:37:21,440
here in my notes that i've talked about removing automatic signing

2594
06:37:21,440 --> 06:37:25,360
so the next step is for us to be able to

2595
06:37:25,360 --> 06:37:29,360
tell xcode that for debug purposes in order for us to be able to run our

2596
06:37:29,360 --> 06:37:32,958
application on a real phone and debug that

2597
06:37:32,958 --> 06:37:37,120
application which profile and which certificate it needs to use

2598
06:37:37,120 --> 06:37:42,400
so what i'm going to do here is to go into this section here as you can see

2599
06:37:42,400 --> 06:37:48,798
debug on under signing and capabilities and then i can see that actually it is

2600
06:37:48,798 --> 06:37:53,120
going to it's already using the automatic signing

2601
06:37:53,120 --> 06:37:56,320
for debug and i'm going to remove that as well okay

2602
06:37:56,320 --> 06:37:59,520
so what you need what you need to do here is actually pick the right profile

2603
06:37:59,520 --> 06:38:02,958
here and it says my notes dev and my notes

2604
06:38:02,958 --> 06:38:07,360
profile sorry prod and you can see it says ineligible

2605
06:38:07,360 --> 06:38:10,320
and um that is because we don't have a

2606
06:38:10,320 --> 06:38:14,638
development team yet and alex and i'll explain that soon but for now just go to

2607
06:38:14,638 --> 06:38:19,040
your provisioning profile and say for debug purposes we're gonna use the

2608
06:38:19,040 --> 06:38:22,558
mynotes dev um

2609
06:38:22,558 --> 06:38:29,040
and then go to your release and then say i'm gonna use my notes prod okay and

2610
06:38:29,040 --> 06:38:32,798
here's a little error here you see it says producing profile my notes pro

2611
06:38:32,798 --> 06:38:37,680
doesn't include signing certificate apple development blah blah blah okay

2612
06:38:37,680 --> 06:38:40,320
that's that's fine don't worry about that

2613
06:38:40,320 --> 06:38:43,600
so what we need to do now is to actually

2614
06:38:43,600 --> 06:38:47,760
tell it um so i'm going to actually pick here

2615
06:38:47,760 --> 06:38:52,478
profound search setup release profile insert okay

2616
06:38:52,478 --> 06:38:58,000
so what you need to do here is to go to your build settings and make sure

2617
06:38:58,000 --> 06:39:01,440
that your development team

2618
06:39:01,440 --> 06:39:06,240
here is actually selected you see pixelity is for me and then for you it

2619
06:39:06,240 --> 06:39:10,240
may be something else so um now what i'm gonna do i mean

2620
06:39:10,240 --> 06:39:14,558
sometimes uh and i can see signing certificate here is actually not really

2621
06:39:14,558 --> 06:39:19,280
selected sometimes it can be that xcode kind of goes crazy when we play with

2622
06:39:19,280 --> 06:39:22,798
certificates and signings so i'm going to close xcode

2623
06:39:22,798 --> 06:39:27,120
i'm going to do the same thing here go to

2624
06:39:27,120 --> 06:39:32,000
revealingfinder finder open up in another window here so

2625
06:39:32,000 --> 06:39:39,440
i'm going to open up the workspace again

2626
06:39:39,440 --> 06:39:43,200
okay i can see we're still getting the problem provisioning profile minus that

2627
06:39:43,200 --> 06:39:46,718
doesn't include signing certificate apple development and let's open up our

2628
06:39:46,718 --> 06:39:49,360
keychain again and have a look a little bit here

2629
06:39:49,360 --> 06:39:54,478
and i can see unfortunately there is a profile you can see previously we had

2630
06:39:54,478 --> 06:39:59,360
two profiles and it is very unfortunate because um

2631
06:39:59,360 --> 06:40:03,680
so in here you can see this this development

2632
06:40:03,680 --> 06:40:07,840
certificate was created by us you see they're very tightly close to each other

2633
06:40:07,840 --> 06:40:11,040
these two we created but this is something that xcode has created and

2634
06:40:11,040 --> 06:40:15,680
that is because xcode tries to do automatic signing as you saw it was

2635
06:40:15,680 --> 06:40:20,638
saying automatically manage signing so by doing that it created a certificate

2636
06:40:20,638 --> 06:40:25,520
for me on my behalf which i don't want so the error that we're seeing here is

2637
06:40:25,520 --> 06:40:28,400
that xcode is now saying that this this

2638
06:40:28,400 --> 06:40:32,478
profile that you have here is not linked to this thing

2639
06:40:32,478 --> 06:40:36,558
which xcode created itself no one asked it to do that i didn't ask xcode to do

2640
06:40:36,558 --> 06:40:39,760
that so when you're working with is a woman just know that xco tries to do a

2641
06:40:39,760 --> 06:40:43,920
lot of magic for you and if you want to actually

2642
06:40:43,920 --> 06:40:47,840
do things manually it may get in the way

2643
06:40:47,840 --> 06:40:51,440
so what i'm going to do here is i'm going to delete this

2644
06:40:51,440 --> 06:40:54,558
development certificate because i didn't ask for it okay

2645
06:40:54,558 --> 06:40:57,360
so i'm going to say i believe actually that's the right one

2646
06:40:57,360 --> 06:41:01,760
yeah so i'm going to say delete delete and now you can see that error went away

2647
06:41:01,760 --> 06:41:04,958
simply because xcode was like ooh now i understand which one you're talking

2648
06:41:04,958 --> 06:41:08,080
about and then the provision profile of the

2649
06:41:08,080 --> 06:41:11,440
prod also is hooked

2650
06:41:11,440 --> 06:41:14,878
correctly so

2651
06:41:14,878 --> 06:41:18,400
now what i'm gonna do is as you can see here

2652
06:41:18,400 --> 06:41:24,160
i've opened the project here and then i have my actual iphone selected here to

2653
06:41:24,160 --> 06:41:28,000
be able to make sure that your application can actually run on this

2654
06:41:28,000 --> 06:41:33,040
phone now after all of this hard work is just to press the play button here

2655
06:41:33,040 --> 06:41:37,600
so i want to do that and i want to let it do its thing and if everything works

2656
06:41:37,600 --> 06:41:42,160
correctly um it's going to basically then um allow

2657
06:41:42,160 --> 06:41:46,080
us to run the application all right so now it says

2658
06:41:46,080 --> 06:41:49,600
now and this is a dialogue that you're probably also going to get

2659
06:41:49,600 --> 06:41:52,638
what's happening here is that it's trying to sign the application and all

2660
06:41:52,638 --> 06:41:56,558
its libraries using that profile

2661
06:41:56,558 --> 06:42:00,080
development profile and since that development profile is

2662
06:42:00,080 --> 06:42:04,638
linked to a development certificate in the keychain and that keychain is

2663
06:42:04,638 --> 06:42:08,718
password protected you see the login keychain it says i can't access that

2664
06:42:08,718 --> 06:42:14,718
certificate give me the password for the login keychain so i'm going to type that

2665
06:42:14,718 --> 06:42:20,798
and then i'm going to say always allow so let's do it let it do its thing

2666
06:42:20,798 --> 06:42:25,360
and this may depending on the machine that you're running this uh process on

2667
06:42:25,360 --> 06:42:33,920
it may take some time i can see it's saying now building so um

2668
06:42:33,920 --> 06:42:40,160
okay then i got an actual failure here it says cloud firestore wasn't found

2669
06:42:40,160 --> 06:42:43,920
and this is very interesting um actually i mean i didn't plan for this

2670
06:42:43,920 --> 06:42:48,478
to happen but it did happen i'm kind of glad that it happened

2671
06:42:48,478 --> 06:42:53,360
this happens usually when you um

2672
06:42:53,360 --> 06:42:57,200
when you add new dependencies to your projects such as these big dependencies

2673
06:42:57,200 --> 06:43:01,280
but they're not really linked to your project yet so the way to fix that is

2674
06:43:01,280 --> 06:43:04,878
i'm gonna let xcode be here okay i'm gonna close

2675
06:43:04,878 --> 06:43:08,718
this i'm gonna bring a terminal uh what i'm

2676
06:43:08,718 --> 06:43:13,760
going to say here is flutter clean i clean

2677
06:43:13,760 --> 06:43:17,840
ios or clear ios i think clean

2678
06:43:17,840 --> 06:43:22,400
so this is basically going to clean up how the ios project was set up and all

2679
06:43:22,400 --> 06:43:25,600
those dependencies all right now i'm going to close actually xcode as well

2680
06:43:25,600 --> 06:43:32,160
then what i'm going to say is to say flutter pop get

2681
06:43:32,160 --> 06:43:37,440
and flutter pop get what it does is that it sets up all our dependencies from the

2682
06:43:37,440 --> 06:43:40,958
beginning and just to make sure i'm going to go into the ios

2683
06:43:40,958 --> 06:43:46,558
folder and i'm going to say pod install

2684
06:43:46,558 --> 06:43:50,750
and could not be compatible version okay pod

2685
06:43:50,750 --> 06:43:52,958
[Music] install

2686
06:43:52,958 --> 06:43:58,478
dash dash update repo uh

2687
06:43:58,478 --> 06:44:02,798
hot install uh let's see if we can do an update repo

2688
06:44:02,798 --> 06:44:08,080
i'm just gonna do that uh without like explaining it right now so much and see

2689
06:44:08,080 --> 06:44:11,760
if that fixes our problem i'm going to bring up a new safari window and say

2690
06:44:11,760 --> 06:44:15,280
pod install update repo let's see what the command was but because i've

2691
06:44:15,280 --> 06:44:20,478
forgotten that

2692
06:44:20,478 --> 06:44:28,718
what update we have yeah um let's pawn install

2693
06:44:28,718 --> 06:44:32,558
i believe there is a variant of

2694
06:44:32,558 --> 06:44:38,320
repo update it's called okay pot install repo update let's see if this fixes our

2695
06:44:38,320 --> 06:44:42,478
problem and if cisco could not find compatible

2696
06:44:42,478 --> 06:44:45,920
version for podcloud firestore from blah blah

2697
06:44:45,920 --> 06:44:51,040
specs satisfying from dependencies were found but they require higher minimum

2698
06:44:51,040 --> 06:44:53,680
deployment target and that's very interesting

2699
06:44:53,680 --> 06:44:57,040
so what is happening here is

2700
06:44:57,040 --> 06:45:02,320
you see the deployment target that we have for our application um what it

2701
06:45:02,320 --> 06:45:06,080
means is that when we created the project with flutter

2702
06:45:06,080 --> 06:45:10,320
flutter said that what it does internally is says

2703
06:45:10,320 --> 06:45:14,718
this flutter application should be run on these ios versions and these android

2704
06:45:14,718 --> 06:45:19,280
versions and what we're seeing here is that

2705
06:45:19,280 --> 06:45:22,718
what we're seeing here is that we are using cloud firestore and cloud

2706
06:45:22,718 --> 06:45:26,638
firestore as a dependency is expecting our application to have a minimum

2707
06:45:26,638 --> 06:45:30,798
deployment version it means that cloud firestore cannot be used in applications

2708
06:45:30,798 --> 06:45:35,760
that for instance are trying to run on ios 7 for instance okay so what we need

2709
06:45:35,760 --> 06:45:40,958
to do here in your um flutter project just say command p in visual studio code

2710
06:45:40,958 --> 06:45:46,638
and open up a file called um pod file all right

2711
06:45:46,638 --> 06:45:49,680
you go in there and let's see

2712
06:45:49,680 --> 06:45:55,200
here we have some stuff set up let's go in here and just say platform ios and

2713
06:45:55,200 --> 06:45:59,600
what we're going to do is just to say platform ios 13

2714
06:45:59,600 --> 06:46:06,080
just just now i mean 13 it's really good because right now is ios 15 is available

2715
06:46:06,080 --> 06:46:10,638
so you could just say you're supporting 15 14 and 13. so i'm going to do that

2716
06:46:10,638 --> 06:46:15,040
and then i'm going to run pod install again

2717
06:46:15,040 --> 06:46:19,680
and this time i can see that things are going a lot better and it's installing

2718
06:46:19,680 --> 06:46:23,440
all our dependencies without a problem so

2719
06:46:23,440 --> 06:46:27,680
um what you need to know now what i did here was something that you probably

2720
06:46:27,680 --> 06:46:31,440
would need to do if you're comfortable with ios development so you need to fix

2721
06:46:31,440 --> 06:46:35,600
these problems by hand but before i explain what i actually did

2722
06:46:35,600 --> 06:46:38,000
you need to know about something called pod

2723
06:46:38,000 --> 06:46:42,000
and i explained this in the previous chapters about when we started in

2724
06:46:42,000 --> 06:46:45,760
chapter 8 when we talked about dependencies

2725
06:46:45,760 --> 06:46:50,080
flutter can in can create ios applications ios

2726
06:46:50,080 --> 06:46:56,400
applications dependencies are basically using uh cocoa pods

2727
06:46:56,400 --> 06:47:01,680
so cocoapods is a dependency management system for ios applications

2728
06:47:01,680 --> 06:47:04,638
and you need to just know that

2729
06:47:04,638 --> 06:47:08,400
you need to in order to be able to do the trick that i just did you need to

2730
06:47:08,400 --> 06:47:12,160
install cocoapods and there is a good website for that i mean you can i'll

2731
06:47:12,160 --> 06:47:19,280
bring up my and i say install cocoapods and then i go here and you just say

2732
06:47:19,280 --> 06:47:23,520
cocoapods and then there is a command that you need to issue in your computer

2733
06:47:23,520 --> 06:47:30,080
in order to install cocoapods okay so um after you've installed cocoapods

2734
06:47:30,080 --> 06:47:32,878
then you can go into your ios project and like

2735
06:47:32,878 --> 06:47:37,920
ask it to reinstall your dependencies so the key here though was for me to

2736
06:47:37,920 --> 06:47:42,478
uncomment this platform line in the pod file where my dependencies are managed

2737
06:47:42,478 --> 06:47:47,760
so i'm just going to say now i'm supporting ios 13 at the minimum

2738
06:47:47,760 --> 06:47:53,920
all right and then i manually ask the io the project to be recreated the ios

2739
06:47:53,920 --> 06:47:58,240
project to be recreated using pod install repo update

2740
06:47:58,240 --> 06:48:00,878
so after you've done that your dependencies

2741
06:48:00,878 --> 06:48:04,558
are generated and then i'm going to right click on ios again

2742
06:48:04,558 --> 06:48:08,160
and i'm going to say oh i can say open in xcode that's interesting will that

2743
06:48:08,160 --> 06:48:10,958
work i don't dare to be honest with you do that

2744
06:48:10,958 --> 06:48:16,160
revealing finder and then i'm going to do that and open a project so

2745
06:48:16,160 --> 06:48:22,320
i'm going to go now do command do i do command b maybe not let's just

2746
06:48:22,320 --> 06:48:25,600
run it directly so

2747
06:48:25,600 --> 06:48:29,040
so i'm gonna then bring up xcode and press

2748
06:48:29,040 --> 06:48:32,320
run again and let's see if it can then find

2749
06:48:32,320 --> 06:48:36,400
those dependencies that it couldn't find previously okay

2750
06:48:36,400 --> 06:48:39,520
so we're gonna

2751
06:48:39,520 --> 06:48:44,558
let it do its thing and it may take some time as you can see

2752
06:48:44,558 --> 06:48:47,840
because there's lots of dependencies we dragged in

2753
06:48:47,840 --> 06:48:53,200
and all i think there were firebase off we had firebase core we had cloud

2754
06:48:53,200 --> 06:48:56,958
firestore and also firebase analytics so these dependencies

2755
06:48:56,958 --> 06:49:01,040
themselves can bring with them a lot of other dependencies so

2756
06:49:01,040 --> 06:49:05,600
um it is important that that then to know that

2757
06:49:05,600 --> 06:49:08,478
as i mentioned in the previous chapter in chapter eight bringing dependencies

2758
06:49:08,478 --> 06:49:10,558
is not just all

2759
06:49:10,558 --> 06:49:13,920
butterflies and balloons in the sky it is actually a serious process you need

2760
06:49:13,920 --> 06:49:17,840
to consider what's bringing in a dependency means to you and your team

2761
06:49:17,840 --> 06:49:20,878
and your application so in this case we've only brought

2762
06:49:20,878 --> 06:49:25,040
dependencies that were officially done by google and google is behind flutter

2763
06:49:25,040 --> 06:49:28,160
so i think then the

2764
06:49:28,160 --> 06:49:32,478
you can basically trust anything that has to do with firebase at least so

2765
06:49:32,478 --> 06:49:37,840
if it's released by the google team that work on firebase of course

2766
06:49:37,840 --> 06:49:42,478
um so we're gonna let it do its thing i'm gonna just tap here and i can see

2767
06:49:42,478 --> 06:49:47,120
that it's building quite a lot of files

2768
06:49:47,120 --> 06:49:50,718
if everything goes according to our plan

2769
06:49:50,718 --> 06:49:53,680
then the result is going to be that

2770
06:49:53,680 --> 06:49:58,320
application run on this phone so um

2771
06:49:58,320 --> 06:50:01,760
it would be very exciting actually to see if this will

2772
06:50:01,760 --> 06:50:07,440
work as we intend to and as i mentioned depending on the

2773
06:50:07,440 --> 06:50:10,240
computer that you're using this process may take

2774
06:50:10,240 --> 06:50:14,400
in the beginning at least quite a lot of time

2775
06:50:14,400 --> 06:50:17,200
so if you have a powerful computer it may take less time and if you have a

2776
06:50:17,200 --> 06:50:20,240
little bit less powerful computer it may take some more time

2777
06:50:20,240 --> 06:50:23,520
and um now that we're waiting i should also

2778
06:50:23,520 --> 06:50:28,878
probably mention that this process of waiting is only initially

2779
06:50:28,878 --> 06:50:33,280
something you need to do once the build has been done once it

2780
06:50:33,280 --> 06:50:36,958
kind of like its artifacts will be cached inside your computer

2781
06:50:36,958 --> 06:50:41,680
so that you don't have to rebuild the entire project from the beginning okay

2782
06:50:41,680 --> 06:50:44,558
so um

2783
06:50:44,558 --> 06:50:49,360
i'm gonna let it do its thing and uh while we're waiting actually we

2784
06:50:49,360 --> 06:50:53,840
could talk a little bit about quicktime which is a caption i brought here

2785
06:50:53,840 --> 06:50:58,400
if you're like me and you like to like debug your applications on real phones

2786
06:50:58,400 --> 06:51:03,920
then you may want to see or show that your your phone's screen

2787
06:51:03,920 --> 06:51:07,360
and on your computer so for instance if

2788
06:51:07,360 --> 06:51:11,760
you're sharing your computer as a screen with a co-worker and he or she wants to

2789
06:51:11,760 --> 06:51:16,000
also see your application running on your phone you will need to use

2790
06:51:16,000 --> 06:51:19,840
something called a quicktime network quicktime

2791
06:51:19,840 --> 06:51:22,558
so we're going to talk about that now but before we do that let me just show

2792
06:51:22,558 --> 06:51:27,840
you that here is now our flutter application

2793
06:51:27,840 --> 06:51:31,520
run on this telephone so

2794
06:51:31,520 --> 06:51:34,478
there we go our app is now running

2795
06:51:34,478 --> 06:51:38,240
now that we've done that all of this is done you don't need xcode anymore so i'm

2796
06:51:38,240 --> 06:51:41,920
just going to press stop here and what i'm going to do i'm actually going to

2797
06:51:41,920 --> 06:51:47,040
run our application from visual studio code or flutter application on that

2798
06:51:47,040 --> 06:51:50,958
iphone all right so command shift b or control shift b depending on which

2799
06:51:50,958 --> 06:51:53,440
platform you're using and say select device

2800
06:51:53,440 --> 06:51:57,760
i'm going to choose my iphone 12 pro then i'm going to go to run and say run

2801
06:51:57,760 --> 06:52:01,840
without debugging you don't have any extensions oh not

2802
06:52:01,840 --> 06:52:05,680
this file open up your main darp file okay

2803
06:52:05,680 --> 06:52:11,840
and then say run run without debugging and you'll see it says launching

2804
06:52:11,840 --> 06:52:16,160
so this is going to actually consult xcode and say that hey xcode here's the

2805
06:52:16,160 --> 06:52:22,478
flutter application run it on this telephone

2806
06:52:22,478 --> 06:52:25,200
so

2807
06:52:25,200 --> 06:52:27,840
and to be honest with you i actually didn't like this that it's using

2808
06:52:27,840 --> 06:52:31,360
automatic signing it what may have happened is that when

2809
06:52:31,360 --> 06:52:36,400
we did flutter clea clean you may have messed up our

2810
06:52:36,400 --> 06:52:40,638
profiles to be honest with you and this is not a good sign it could be

2811
06:52:40,638 --> 06:52:45,040
that when i did flutter clean it actually messed up the profile

2812
06:52:45,040 --> 06:52:49,840
so i'm going to open up xcode again and bring up our application again and let's

2813
06:52:49,840 --> 06:52:54,878
have a look at our profiles and i can see debug no it's fine it's

2814
06:52:54,878 --> 06:52:58,958
not automatic signing so you don't have to worry about this

2815
06:52:58,958 --> 06:53:03,680
message that was printed to the screen by uh by flutter so i don't think this

2816
06:53:03,680 --> 06:53:09,120
something that we need to worry about so now that you've set that up then you

2817
06:53:09,120 --> 06:53:12,798
could actually run your application directly from

2818
06:53:12,798 --> 06:53:16,400
visual studio code or android studio depending on which environment you're

2819
06:53:16,400 --> 06:53:19,760
running your flutter applications or debugging your

2820
06:53:19,760 --> 06:53:26,878
applications from okay now let's say that that is done um

2821
06:53:26,878 --> 06:53:30,558
then what you need to do if you want to mirror your application

2822
06:53:30,558 --> 06:53:34,478
screen on your computer then you can bring up something called quicktime

2823
06:53:34,478 --> 06:53:39,600
player on your macintosh and then go to file and then say movie recording now

2824
06:53:39,600 --> 06:53:44,558
this is probably going to hijack my no it didn't hijack anything then i'm

2825
06:53:44,558 --> 06:53:49,120
going to go to iphone 12 pro and see if it can mirror

2826
06:53:49,120 --> 06:53:52,320
that phone for me

2827
06:53:52,320 --> 06:53:55,680
uh

2828
06:53:55,680 --> 06:53:59,520
is it not able to do that is it because i'm recording my screen or something i'm

2829
06:53:59,520 --> 06:54:02,638
gonna actually [Music]

2830
06:54:02,638 --> 06:54:08,400
wait for this debug process to continue

2831
06:54:08,400 --> 06:54:11,840
let us do its thing first i think i'm probably trying to do too many things at

2832
06:54:11,840 --> 06:54:15,060
the same time so uh

2833
06:54:15,060 --> 06:54:18,798
[Applause] i proxy i don't really know what i proxy

2834
06:54:18,798 --> 06:54:22,000
is so

2835
06:54:22,000 --> 06:54:25,840
um connecting to the vm service taking

2836
06:54:25,840 --> 06:54:28,878
longer than except expected and that could be because my macintosh is

2837
06:54:28,878 --> 06:54:33,280
actually blocking something that flopper needs so i'm going to go to privacy here

2838
06:54:33,280 --> 06:54:36,878
which is security and privacy and just let iproxy to run

2839
06:54:36,878 --> 06:54:41,360
allow anyway so that may help flutter then get its

2840
06:54:41,360 --> 06:54:46,798
process working

2841
06:54:46,798 --> 06:54:51,680
yeah that could be it because maybe my macintosh just blocked that eye proxy so

2842
06:54:51,680 --> 06:54:55,680
i'm gonna stop this process and i'm just going to say run run without debugging

2843
06:54:55,680 --> 06:55:00,958
again let's see if it can do its work this time

2844
06:55:00,958 --> 06:55:04,080
launching and this time since it's actually built the application

2845
06:55:04,080 --> 06:55:09,520
previously it shouldn't take long this time before it can run the app

2846
06:55:09,520 --> 06:55:13,680
so it has already built the app once so it shouldn't really take as long this

2847
06:55:13,680 --> 06:55:16,000
time

2848
06:55:16,000 --> 06:55:18,638
so i can now see it says installing and

2849
06:55:18,638 --> 06:55:21,600
launching

2850
06:55:21,600 --> 06:55:26,000
so let's see if we can get that to work

2851
06:55:26,000 --> 06:55:29,920
xcode build done in eight seconds and to be honest with you this is taking

2852
06:55:29,920 --> 06:55:34,400
longer than i expected it shouldn't take this long to run the application and i

2853
06:55:34,400 --> 06:55:37,920
can see nothing was blocked this time mac os cannot verify the developer of

2854
06:55:37,920 --> 06:55:42,718
iproxy and i'm just going to say open i think there is something wrong with

2855
06:55:42,718 --> 06:55:47,600
the latest versions of mac os and how it tries to for instance verify

2856
06:55:47,600 --> 06:55:51,440
various tools that flutter is using internally but

2857
06:55:51,440 --> 06:55:55,680
everything went fine at the end i could actually launch the application from

2858
06:55:55,680 --> 06:56:00,000
visual studio code and now it's running inside my iphone

2859
06:56:00,000 --> 06:56:04,400
now i'm gonna stop this so now the app as soon as i say stop the app is going

2860
06:56:04,400 --> 06:56:08,638
to stop working there what i'm going to do then is to go to

2861
06:56:08,638 --> 06:56:12,000
quicktime and see if we can get quicktime to

2862
06:56:12,000 --> 06:56:16,638
actually mirror this iphone i'm going to unplug it

2863
06:56:16,638 --> 06:56:20,320
the phone and then plug it again and see

2864
06:56:20,320 --> 06:56:25,120
if it understands that it has to mirror the phone

2865
06:56:25,120 --> 06:56:30,798
i can see my quicktime is also giving me some trouble

2866
06:56:30,798 --> 06:56:34,160
and it crashed

2867
06:56:34,160 --> 06:56:38,718
i mean this is live uh recording of this session so you can see all the problems

2868
06:56:38,718 --> 06:56:41,680
a developer will have to fix and this is me

2869
06:56:41,680 --> 06:56:48,718
so let's go to um and see if we can get it to

2870
06:56:48,718 --> 06:56:53,440
let's see if i can get it to

2871
06:56:53,440 --> 06:56:56,958
recognize this phone

2872
06:56:56,958 --> 06:56:59,840
and to be honest with you i mean i'm actually doing this on a separate screen

2873
06:56:59,840 --> 06:57:03,280
so you don't have to see my face so much but i can see that my macintosh for some

2874
06:57:03,280 --> 06:57:07,840
reason is not recognizing this telephone so i cannot record it basically on this

2875
06:57:07,840 --> 06:57:12,000
um uh on this screen right now

2876
06:57:12,000 --> 06:57:16,000
but if you're doing this at home it's probably gonna work for you so uh

2877
06:57:16,000 --> 06:57:19,760
connect your phone with a cable to your computer and then go to quicktime player

2878
06:57:19,760 --> 06:57:23,440
and then with quicktime player say new movie recording and from movie recording

2879
06:57:23,440 --> 06:57:29,120
just from the drop down choose your choose your um

2880
06:57:29,120 --> 06:57:33,840
phone and you'll be able to mirror your screen so

2881
06:57:33,840 --> 06:57:38,080
um now that that is done i mean we actually

2882
06:57:38,080 --> 06:57:43,040
got to a lot of hurdles that i hadn't planned for we saw the iproxy thing

2883
06:57:43,040 --> 06:57:46,000
happening here grateful that it happened

2884
06:57:46,000 --> 06:57:49,840
we saw the error with the pod installation which is the dependency of

2885
06:57:49,840 --> 06:57:53,680
our project because there was no minimum version set up for our flutter project

2886
06:57:53,680 --> 06:57:58,478
we fixed that we saw a problem with the profile not being picked up

2887
06:57:58,478 --> 06:58:02,718
automatically because xcode had created the certificate automatically we fixed

2888
06:58:02,718 --> 06:58:04,478
that so

2889
06:58:04,478 --> 06:58:08,798
i mean i could for instance now go and filter these out

2890
06:58:08,798 --> 06:58:13,200
from the video and kind of like when i actually output the final course for you

2891
06:58:13,200 --> 06:58:16,718
then everything will just work perfectly so

2892
06:58:16,718 --> 06:58:19,840
you don't have to see any of that hiccup

2893
06:58:19,840 --> 06:58:22,798
but i don't want to do that to be honest with you because i think it's so

2894
06:58:22,798 --> 06:58:26,400
important for you to see what issues

2895
06:58:26,400 --> 06:58:30,558
you will get as you develop your thoughts or applications it is important

2896
06:58:30,558 --> 06:58:34,878
i don't want to polish this um i don't want to polish this uh course so much

2897
06:58:34,878 --> 06:58:37,520
that you think everything is perfect from the absolute beginning and if

2898
06:58:37,520 --> 06:58:40,638
you're and if you're making mistakes then something is wrong with the way

2899
06:58:40,638 --> 06:58:44,558
you're developing things but these things happen you need to understand why

2900
06:58:44,558 --> 06:58:48,558
they happen then you need to learn how to fix them so

2901
06:58:48,558 --> 06:58:50,878
with that said uh

2902
06:58:50,878 --> 06:58:54,798
i think then we're good to go uh for ios we've explained

2903
06:58:54,798 --> 06:58:58,798
everything we needed to explain uh everything worked except for the

2904
06:58:58,798 --> 06:59:01,600
quicktime thing and i think that is because

2905
06:59:01,600 --> 06:59:05,920
um i'm actually i have a lot of software open here i am playing stop playing in

2906
06:59:05,920 --> 06:59:09,760
stuff recording stuff so it may be because of that is a little bit confused

2907
06:59:09,760 --> 06:59:12,958
and who knows maybe my computer needs to restart so

2908
06:59:12,958 --> 06:59:15,520
um so with that said let's prepare

2909
06:59:15,520 --> 06:59:18,558
ourselves for the next chapter and that is

2910
06:59:18,558 --> 06:59:23,520
to do the exact same thing with it for ios hopefully with less explanation now

2911
06:59:23,520 --> 06:59:27,440
that we've gone through the basics for android so

2912
06:59:27,440 --> 06:59:31,600
uh grab a cup of tea cup coffee whatever you want and i'll see you in the next

2913
06:59:31,600 --> 06:59:34,798
chapter hello and welcome to chapter 10 of this

2914
06:59:34,798 --> 06:59:37,600
flutter course in this chapter we're going to look at

2915
06:59:37,600 --> 06:59:40,478
setting up our android phone

2916
06:59:40,478 --> 06:59:44,320
or any android device that you may have at hand in order for us to be able to

2917
06:59:44,320 --> 06:59:49,440
run our flutter code on it and now in chapter nine we looked at how we can run

2918
06:59:49,440 --> 06:59:53,200
the application and basically run our flash application

2919
06:59:53,200 --> 06:59:58,878
on an ios device and we set up the provisioning profiles we set up the

2920
06:59:58,878 --> 07:00:03,120
certificates what else the app id

2921
07:00:03,120 --> 07:00:07,920
at app store can on um apple's developer website

2922
07:00:07,920 --> 07:00:12,638
i mean there is a lot of work to do and you know that chapter took about an hour

2923
07:00:12,638 --> 07:00:16,400
to explain everything but when it then comes to

2924
07:00:16,400 --> 07:00:20,240
the android side things are a lot easier um

2925
07:00:20,240 --> 07:00:22,958
so i thought in this chapter we're gonna

2926
07:00:22,958 --> 07:00:27,520
have a look at how we can have an android phone for instance in my

2927
07:00:27,520 --> 07:00:35,840
case here i have a oneplus pro 7 pro that is connected with a usb cable to my

2928
07:00:35,840 --> 07:00:40,478
computer so there's nothing special about it it's just an android phone and

2929
07:00:40,478 --> 07:00:44,478
um i prefer to actually as i mentioned in

2930
07:00:44,478 --> 07:00:48,638
the previous chapter in chapter 9 that i prefer personally when i'm developing

2931
07:00:48,638 --> 07:00:53,920
applications to developing floss applications to run my

2932
07:00:53,920 --> 07:00:59,440
applications on a real phone or a real device as i'm testing now

2933
07:00:59,440 --> 07:01:02,958
um you may not know this if you're coming from like a design background or

2934
07:01:02,958 --> 07:01:08,798
a background that's not really related to mobile development in previously but

2935
07:01:08,798 --> 07:01:12,240
um if you're developing applications for

2936
07:01:12,240 --> 07:01:16,718
only ios then you have something called an ios simulator

2937
07:01:16,718 --> 07:01:22,080
um an io simulator is a program that runs on your macintosh that comes with

2938
07:01:22,080 --> 07:01:28,160
xcode and the ios sdk that allows you to simulate how ios internally works and it

2939
07:01:28,160 --> 07:01:33,840
allows you to install your applications from xcode directly or from from flutter

2940
07:01:33,840 --> 07:01:39,200
directly into the simulator and simulate basically how your application will be

2941
07:01:39,200 --> 07:01:44,240
perceived by your actual users if you're developing applications for

2942
07:01:44,240 --> 07:01:50,558
android then there is something called an android emulator now an emulator is

2943
07:01:50,558 --> 07:01:55,520
quite different from a simulator in that an emulator as its name indicates it

2944
07:01:55,520 --> 07:01:59,600
actually tries to emulate everything about the operating system and the

2945
07:01:59,600 --> 07:02:05,440
device so for instance an android emulator for an old device for instance

2946
07:02:05,440 --> 07:02:09,840
that you may get a hold of a device that's five six years old

2947
07:02:09,840 --> 07:02:15,680
it will actually work slower than an android emulator for a very

2948
07:02:15,680 --> 07:02:18,798
modern device but had you done the same thing for an

2949
07:02:18,798 --> 07:02:23,280
ios simulator and simulated an ios device that's five years old

2950
07:02:23,280 --> 07:02:29,280
it would still perform at today's like at your computer's uh

2951
07:02:29,280 --> 07:02:34,558
speed because it is simulating ios it's not actually emulating it the way it

2952
07:02:34,558 --> 07:02:38,240
really works on a phone so when it comes to android you have this

2953
07:02:38,240 --> 07:02:42,798
possibility to run your application on an emulator which is a lot closer to the

2954
07:02:42,798 --> 07:02:47,040
actual device that your user will be using

2955
07:02:47,040 --> 07:02:52,558
so it is not the exact perfect copy in most cases so it's not gonna be like

2956
07:02:52,558 --> 07:02:58,718
working exactly as a real physical phone but it's a lot closer to the actual

2957
07:02:58,718 --> 07:03:04,558
physical device that an ios simulator is so

2958
07:03:04,558 --> 07:03:10,478
given that background i still prefer to run my flutter applications on a real

2959
07:03:10,478 --> 07:03:13,840
phone and in this chapter

2960
07:03:13,840 --> 07:03:17,440
if you're interested in that if you're if you have an android phone and you

2961
07:03:17,440 --> 07:03:22,478
want to for instance deploy your flutter application on an android phone and test

2962
07:03:22,478 --> 07:03:27,280
it while you're programming it then this chapter is for you

2963
07:03:27,280 --> 07:03:32,000
now i also have to say that um

2964
07:03:32,000 --> 07:03:34,240
mean [Music]

2965
07:03:34,240 --> 07:03:37,840
you don't you don't have to do this but for the

2966
07:03:37,840 --> 07:03:42,718
entire entirety of this course i'm actually going to be

2967
07:03:42,718 --> 07:03:47,440
as we're developing the application the notes application i'm personally going

2968
07:03:47,440 --> 07:03:50,878
to be using my android phone

2969
07:03:50,878 --> 07:03:55,680
so that um so as we basically do hot reloads and

2970
07:03:55,680 --> 07:03:58,478
then we write some code and we want to test it i'm not going to show any

2971
07:03:58,478 --> 07:04:01,360
emulator i'm not going to show any simulator i'm actually going to show my

2972
07:04:01,360 --> 07:04:05,360
real android phone working now i'm not going to show it with just

2973
07:04:05,360 --> 07:04:08,160
like i'm not going to install the application

2974
07:04:08,160 --> 07:04:11,360
here and just show you like this because this is not going to work it's not a

2975
07:04:11,360 --> 07:04:16,160
good way of showing things to uh to someone watching this course so what

2976
07:04:16,160 --> 07:04:20,160
we're gonna do is as the first

2977
07:04:20,160 --> 07:04:26,478
task in this uh chapter we are going to install an application on our um

2978
07:04:26,478 --> 07:04:30,718
computer called scrcpy okay

2979
07:04:30,718 --> 07:04:36,160
now scrcp cpy is a is an open source project

2980
07:04:36,160 --> 07:04:39,680
um that is on github with

2981
07:04:39,680 --> 07:04:45,440
many thousand stars and it is not like a dependency it's not something

2982
07:04:45,440 --> 07:04:48,000
that you're going to build into your flutter application but it's actually

2983
07:04:48,000 --> 07:04:52,000
utility you're going to install on your computer okay so

2984
07:04:52,000 --> 07:04:57,680
your computer will will then be able to mirror your android

2985
07:04:57,680 --> 07:05:02,718
phone or your android tablet on your computer's screen so

2986
07:05:02,718 --> 07:05:06,638
and this scr cpy is absolutely beautiful it's one of my absolute favorite

2987
07:05:06,638 --> 07:05:10,160
utilities to have when doing mobile development

2988
07:05:10,160 --> 07:05:13,520
and the reason behind that is that unlike the

2989
07:05:13,520 --> 07:05:16,400
um solution that i showed in the previous

2990
07:05:16,400 --> 07:05:21,600
chapter which is quicktime quicktime player where you mirror your ios

2991
07:05:21,600 --> 07:05:26,878
telephone on your computer but you cannot interact with that mirrored image

2992
07:05:26,878 --> 07:05:30,160
you still have to bring up your telephone and interact with the

2993
07:05:30,160 --> 07:05:33,840
telephone and see the interactions either on the phone itself or on your

2994
07:05:33,840 --> 07:05:39,280
screen unlike that scrcpy allows you to actually interact with your phone or

2995
07:05:39,280 --> 07:05:42,080
your tablet or your android phone or tablet

2996
07:05:42,080 --> 07:05:46,240
from your computer screen so you can actually take your mouse and then go to

2997
07:05:46,240 --> 07:05:50,878
that screen and tap on a button and it will actually tap on that button on your

2998
07:05:50,878 --> 07:05:55,200
android telephone so it is magical it's beautiful it's open

2999
07:05:55,200 --> 07:05:59,520
source and free so if you have an android tablet or an android phone and

3000
07:05:59,520 --> 07:06:03,840
you're following along with this course i highly recommend that we install


