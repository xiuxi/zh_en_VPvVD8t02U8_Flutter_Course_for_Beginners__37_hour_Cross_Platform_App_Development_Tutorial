1
00:34:57,760 --> 00:35:00,799
嗯，让我们说开关

2
00:35:00,799 --> 00:35:05,600
你把括号打开关闭然后打开关闭大括号并在这里

3
00:35:05,600 --> 00:35:09,040
你会把你的叙述说出来，所以你说动物类型好

4
00:35:09,040 --> 00:35:13,120
然后处理这些不同分支的方法是案例呃

5
00:35:13,120 --> 00:35:17,120
在动物类型的情况下你会说的关键字

6
00:35:17,120 --> 00:35:19,760
印钞

7
00:35:19,760 --> 00:35:23,359
嗯，钱听起来不错

8
00:35:23,359 --> 00:35:26,559
案例动物类型猫

9
00:35:26,559 --> 00:35:29,920
打印猫

10
00:35:29,920 --> 00:35:33,520
和案例动物类型

11
00:35:33,520 --> 00:35:39,680
og打印狗

12
00:35:39,680 --> 00:35:42,159
现在就这样好了

13
00:35:42,159 --> 00:35:46,559
这是我很好我真的很感激我们得到这个呃错误所以你

14
00:35:46,559 --> 00:35:50,639
可以清楚地看到它说的是什么情况下不应该正常完成尝试添加

15
00:35:50,639 --> 00:35:54,959
现在打破或返回你看到的这句话

16
00:35:54,959 --> 00:35:59,200
许多编程语言就像黑暗的程序来到这里

17
00:35:59,200 --> 00:36:03,680
case 语句有点像下降到下一行，然后 dart 尝试

18
00:36:03,680 --> 00:36:07,920
为了避免这种情况，所以如果我处理兔子，它说没关系，那么我正在做一些事情

19
00:36:07,920 --> 00:36:11,279
但感觉就像我在这之后掉到下一行

20
00:36:11,279 --> 00:36:15,600
因为你没有告诉我在打印声明之后该怎么做所以你要么

21
00:36:15,600 --> 00:36:18,639
告诉我要彻底摆脱这个

22
00:36:18,639 --> 00:36:23,120
函数通过将return关键字放在这里退出测试函数我们

23
00:36:23,120 --> 00:36:27,040
还没有真正谈论过退货，但你可以这样做，你可以说

24
00:36:27,040 --> 00:36:31,439
好的，在所有这些之后立即返回，所以我将按 command s

25
00:36:31,439 --> 00:36:35,279
你会看到 cat 被打印到屏幕上，这没问题

26
00:36:35,279 --> 00:36:38,000
但如果你在这里没有这个返回声明语句，你会得到

27
00:36:38,000 --> 00:36:40,478
一个错误好吧

28
00:36:40,478 --> 00:36:45,520
你要么说 return 要么现在使用 break 关键字

29
00:36:45,520 --> 00:36:48,559
这些之间有区别让我们在这里放一个打印声明，我要走了

30
00:36:48,559 --> 00:36:53,520
说功能已经完成了，所以我有点期待

31
00:36:53,520 --> 00:36:56,639
通过执行我们的

32
00:36:56,639 --> 00:37:02,639
我们的代码在这里我们的测试函数在这里传递 cat 的值

33
00:37:02,639 --> 00:37:07,359
我们进入开关我们检查这是猫然后打印

34
00:37:07,359 --> 00:37:11,279
猫，然后我们回来，好吧，这有点像

35
00:37:11,279 --> 00:37:15,439
它在做什么意味着它跳过了这个打印语句，并且

36
00:37:15,439 --> 00:37:19,520
你很快就会看到如果我说 command s 它只会说 cat 然后我们会回来

37
00:37:19,520 --> 00:37:22,719
所以这不是我真正想要的

38
00:37:22,719 --> 00:37:26,639
希望这个 switch 语句被执行 print cat 然后继续

39
00:37:26,639 --> 00:37:31,439
在 switch 好之后，这就是你使用 break 语句的地方

40
00:37:31,439 --> 00:37:35,920
或者这里的关键词，所以如果你说 break 它打破了 switch 语句

41
00:37:35,920 --> 00:37:39,840
然后按照您所期望的那样继续执行其余的功能，如果

42
00:37:39,840 --> 00:37:44,639
我在这里按 command s 你说 cat 然后函数就完成了

43
00:37:44,639 --> 00:37:48,478
所以switch是首选的工作方式

44
00:37:48,478 --> 00:37:51,840
用 um 枚举，特别是如果你正在做

45
00:37:51,840 --> 00:37:56,000
分支所以你也可以喜欢

46
00:37:56,000 --> 00:38:01,040
例如，如果在这种情况下，他说，呃，请确保

47
00:38:01,040 --> 00:38:04,079
这是一只猫

48
00:38:04,079 --> 00:38:08,879
在这种情况下，您也可以说动物类型

49
00:38:08,879 --> 00:38:12,799
不是动物类型的聊天

50
00:38:12,799 --> 00:38:17,680
你会回来的，你也可以这样做，所以这有点像

51
00:38:17,680 --> 00:38:20,478
一个条件语句，你放在你的开头

52
00:38:20,478 --> 00:38:25,760
确保在第 10 行之后执行的任何代码的函数

53
00:38:25,760 --> 00:38:29,199
完全确定动物类型是

54
00:38:29,199 --> 00:38:33,680
一只猫可以，所以在这种情况下，你可以只使用典型的 if 语句，这样你就不会

55
00:38:33,680 --> 00:38:39,920
必须做开关没问题，但如果你试图执行规范的特殊部分

56
00:38:39,920 --> 00:38:44,318
代码取决于此枚举包含的值

57
00:38:44,318 --> 00:38:47,199
那一刻我强烈建议你使用

58
00:38:47,199 --> 00:38:51,920
switch 语句而不是 if 语句好吧，这取决于你的 on

59
00:38:51,920 --> 00:38:57,120
你的用例没问题，我只是要把这个项目标记为

60
00:38:57,120 --> 00:39:02,719
在我的笔记中完成现在让我们谈谈课程好吧

61
00:39:02,719 --> 00:39:07,439
这是我最喜欢谈论的话题之一

62
00:39:07,439 --> 00:39:10,159
嗯很好上课

63
00:39:10,159 --> 00:39:14,719
嗯，飞镖和许多其他语言，让我们实际上把它带回它的方式

64
00:39:14,719 --> 00:39:18,398
在使它成为测试功能之前

65
00:39:18,398 --> 00:39:23,520
并从这里删除动物类型并删除它们我实际上可以继续

66
00:39:23,520 --> 00:39:27,439
我们其实也可以

67
00:39:27,439 --> 00:39:35,680
所以 dart 中的类是各种功能的分组

68
00:39:35,680 --> 00:39:42,159
到一个可打包的数据中，我的意思是例如

69
00:39:42,159 --> 00:39:45,680
假设您有一个名为 run 的函数

70
00:39:45,680 --> 00:39:50,478
另一个叫做呼吸的函数，然后你就有了一个人的名字

71
00:39:50,478 --> 00:39:54,079
一个人的姓当然你可以去定义这些

72
00:39:54,079 --> 00:39:57,520
像这样的事情你可以说可汗的名字

73
00:39:57,520 --> 00:40:01,199
是的东西，汗的姓是东西

74
00:40:01,199 --> 00:40:05,120
像这样可以

75
00:40:05,120 --> 00:40:10,238
嗯，就这样，然后你可以有一个功能，对不起，你会说

76
00:40:10,238 --> 00:40:12,959
运行 um 然后你会有另一个功能

77
00:40:12,959 --> 00:40:16,318
叫呼吸

78
00:40:16,318 --> 00:40:20,639
你可以这样做，但这些功能对我们来说有点像

79
00:40:20,639 --> 00:40:24,478
特殊情况，或者至少在我脑海中，我现在正在想象这些

80
00:40:24,478 --> 00:40:27,680
与人相关的功能

81
00:40:27,680 --> 00:40:30,799
那个人可以跑步 那个人可以呼吸 那个人有名字和

82
00:40:30,799 --> 00:40:35,520
姓氏，所以这些相关事物的分组

83
00:40:35,520 --> 00:40:38,159
完成了一堂课

84
00:40:38,159 --> 00:40:42,159
至少在飞镖中，这样做的方法是你会说

85
00:40:42,159 --> 00:40:46,398
实例类，它是 dart 中的关键字

86
00:40:46,398 --> 00:40:49,600
让我们现在说类的名称

87
00:40:49,600 --> 00:40:52,959
类和枚举的命名以及任何其他

88
00:40:52,959 --> 00:40:56,159
除变量和常量外的实体

89
00:40:56,159 --> 00:41:00,079
你应该使用嗯只是普通的外壳你会我真的不知道它是否是

90
00:41:00,079 --> 00:41:04,159
叫帕斯卡套管或者我想是这样的

91
00:41:04,159 --> 00:41:08,559
但是您只需将每个单词的第一个字母都使用大写就可以了

92
00:41:08,559 --> 00:41:14,159
让我们说人好吧这就是你说一个人的方式

93
00:41:14,159 --> 00:41:18,318
上课没问题，所以我认为实际上我们不能放 const

94
00:41:18,318 --> 00:41:22,879
在那里，我将抓住这两个功能并放置它们

95
00:41:22,879 --> 00:41:27,920
在这个人的类里面好吧，让我们在这个说打印

96
00:41:27,920 --> 00:41:31,680
运行运行功能并阅读我们

97
00:41:31,680 --> 00:41:34,799
会说呼吸正常

98
00:41:34,799 --> 00:41:38,799
在你想要的测试功能中

99
00:41:38,799 --> 00:41:42,079
创建一个叫做 this 的实例

100
00:41:42,079 --> 00:41:47,520
类现在实例是对象，对象是

101
00:41:47,520 --> 00:41:52,559
从类创建，因此您需要了解如何

102
00:41:52,559 --> 00:41:56,639
实例化在软件开发中起作用，这

103
00:41:56,639 --> 00:41:59,920
适用于任何编程语言，例如 dart

104
00:41:59,920 --> 00:42:05,040
rust swift python javascript在哪里

105
00:42:05,040 --> 00:42:08,318
他们允许你创建类

106
00:42:08,318 --> 00:42:13,920
既然你知道了一个类是什么为了使用一个你需要的类

107
00:42:13,920 --> 00:42:18,000
通常会创建一个称为该类实例的东西，这意味着

108
00:42:18,000 --> 00:42:21,040
你告诉编程语言在这里没问题

109
00:42:21,040 --> 00:42:24,879
是我知道的课程，但给我一份

110
00:42:24,879 --> 00:42:27,760
所以每一堂课

111
00:42:27,760 --> 00:42:32,478
可以被实例化，这意味着 dart 编译器将创建一个副本

112
00:42:32,478 --> 00:42:37,120
确切的类及其数据及其功能及其属性并将该副本提供给您

113
00:42:37,120 --> 00:42:41,840
好吧，这就是所谓的实例化，它

114
00:42:41,840 --> 00:42:47,600
通过使用等号并创建一个括号来工作

115
00:42:47,600 --> 00:42:50,959
在课程名称的末尾，我将在这里向您展示，所以让我们说

116
00:42:50,959 --> 00:42:54,398
最后，我们说人

117
00:42:54,398 --> 00:42:58,238
在这种情况下，这是我们变量的名称等于我所说的等于

118
00:42:58,238 --> 00:43:01,760
签名然后我们会像这样写下类的名称和括号

119
00:43:01,760 --> 00:43:04,959
好的，所以现在你说一个人变量

120
00:43:04,959 --> 00:43:08,238
这个案例是那个人类的一个实例

121
00:43:08,238 --> 00:43:13,600
现在你会明白使用点和符号你可以说 person.run you

122
00:43:13,600 --> 00:43:16,318
看到该功能现在可以在您的

123
00:43:16,318 --> 00:43:19,600
person 类的实例，你会说 person

124
00:43:19,600 --> 00:43:22,318
点呼吸好

125
00:43:22,318 --> 00:43:28,159
所以这些是在实例中可用的功能

126
00:43:28,159 --> 00:43:32,159
我知道的人的水平有很多话我只是在说

127
00:43:32,159 --> 00:43:35,840
关于但我想你明白这里的意思

128
00:43:35,840 --> 00:43:40,719
这就是你如何实例化 person 类，这就是你如何调用各种

129
00:43:40,719 --> 00:43:44,719
该类上的功能，所以如果我按 command s 你可以看到它说正在运行

130
00:43:44,719 --> 00:43:49,439
如果你在这种情况下说人

131
00:43:49,439 --> 00:43:53,120
然后不使用他们的实例化

132
00:43:53,120 --> 00:43:57,359
括号如果你说呼吸你会在这里得到一个错误实例

133
00:43:57,359 --> 00:44:00,840
使用静态轴无法访问成员呼吸

134
00:44:00,840 --> 00:44:04,799
好吧，这就是我的意思是有点像

135
00:44:04,799 --> 00:44:09,680
实例成员也是记住实例成员的重要术语

136
00:44:09,680 --> 00:44:16,238
表示仅在实例级别可用的某些功能

137
00:44:16,238 --> 00:44:20,079
它在人员类级别不可用，但您必须制作副本

138
00:44:20,079 --> 00:44:24,079
的人，以便能够访问该所有权利

139
00:44:24,079 --> 00:44:26,719
所以那是

140
00:44:26,719 --> 00:44:31,359
课程的基础，您可以像我们一样在课程中做很多事情

141
00:44:31,359 --> 00:44:35,920
很快就谈了，所以我要离开那个人的班级

142
00:44:35,920 --> 00:44:40,799
然后将其标记为已讨论

143
00:44:40,799 --> 00:44:45,520
在我的笔记中，现在让我们稍微谈谈

144
00:44:45,520 --> 00:44:49,439
很好地了解对象

145
00:44:49,439 --> 00:44:53,680
对象实际上很容易解释一个对象是一个实例

146
00:44:53,680 --> 00:44:58,879
上课，所以你不喜欢

147
00:44:58,879 --> 00:45:02,478
当有人说哦，这是一个字符串类型的对象时，字面意思是

148
00:45:02,478 --> 00:45:07,840
有一个名为 string 的类，我创建了它的一个实例，并且

149
00:45:07,840 --> 00:45:13,600
那是一个对象，所以单词 instance 单词 instance 和 object

150
00:45:13,600 --> 00:45:19,359
通常可以互换使用，呃，但如果你听到有人说实例化一个

151
00:45:19,359 --> 00:45:25,279
班级然后你会说好吧班级名称是什么哦这是人好吧

152
00:45:25,279 --> 00:45:28,000
和人现在我创建了一个实例好的并且在

153
00:45:28,000 --> 00:45:30,639
在这种情况下，您可以看到我只是创建了一个人的实例，而实际上并没有

154
00:45:30,639 --> 00:45:34,478
用它做任何事情，这样它就有点像一个无用的对象了

155
00:45:34,478 --> 00:45:40,478
但是如果我说 foo 作为一个人，那么这个

156
00:45:40,478 --> 00:45:45,279
foo now 是 person 类型的对象，实际上你可以在这里写下它的名字

157
00:45:45,279 --> 00:45:49,920
你会看到它告诉你这是一个人没问题

158
00:45:49,920 --> 00:45:54,398
所以简而言之就是嗯

159
00:45:54,398 --> 00:45:57,920
对象是

160
00:45:57,920 --> 00:46:02,478
我可以看到我的笔记需要的对象有点像我在错误的地方

161
00:46:02,478 --> 00:46:05,439
会把它带到正确的地方对不起那个

162
00:46:05,439 --> 00:46:09,439
现在好了

163
00:46:09,439 --> 00:46:14,398
让我们谈谈 um 构造函数

164
00:46:14,398 --> 00:46:17,520
而且我可以在笔记中的错误位置看到构造函数，所以我要

165
00:46:17,520 --> 00:46:22,559
把那些也带到正确的地方好吧抱歉

166
00:46:22,559 --> 00:46:26,719
嗯，现在构造函数的名称是

167
00:46:26,719 --> 00:46:30,079
它的名字表明是一种特殊的

168
00:46:30,079 --> 00:46:37,199
构造或初始化或构建该类的类中的逻辑

169
00:46:37,199 --> 00:46:41,680
实例好吧，所以你可以说好吧，让我们去我们的

170
00:46:41,680 --> 00:46:44,398
对于我们班在这里的人来说，这里的功能

171
00:46:44,398 --> 00:46:49,760
假设每个人都有名字或名字，所以让我们

172
00:46:49,760 --> 00:46:54,238
定义我们说最终的字符串名称，就像你现在看到的那样 dart 说

173
00:46:54,238 --> 00:46:57,840
好吧，你说每个人都有名字，但是

174
00:46:57,840 --> 00:47:02,719
这是人被实例化之后或之后的最终含义

175
00:47:02,719 --> 00:47:07,680
那个人已经被初始化或创建了一个实例，你不能

176
00:47:07,680 --> 00:47:10,719
改变那个名字，因为你说最后没问题

177
00:47:10,719 --> 00:47:15,359
如果你说像字符串名称是 foo 那会有所不同，因为它意味着

178
00:47:15,359 --> 00:47:19,199
创建的每个人实例都有默认值

179
00:47:19,199 --> 00:47:22,719
foo 的名字，这是一种完全不同的说法

180
00:47:22,719 --> 00:47:26,799
呃，在这种情况下，你可以看到我们说的是什么名字

181
00:47:26,799 --> 00:47:30,238
那里每个人都实例每个人

182
00:47:30,238 --> 00:47:34,959
我们创建的副本现在有一个名字飞镖说好吧名字在哪里然后你

183
00:47:34,959 --> 00:47:39,199
没有告诉我如何创建它，这就是你想要使用的地方

184
00:47:39,199 --> 00:47:44,639
一个叫做构造函数的东西好吧构造函数有时你被称为

185
00:47:44,639 --> 00:47:48,959
作为初始化器，取决于程序员的背景，他们可能

186
00:47:48,959 --> 00:47:53,199
称它为构造函数初始化器，或者可能是我不知道的其他名称

187
00:47:53,199 --> 00:47:57,840
about 但是如果您听到构造函数，那么您现在将知道什么

188
00:47:57,840 --> 00:48:01,040
我说的很快

189
00:48:01,040 --> 00:48:04,398
所以现在你至少可以在视觉上做些什么

190
00:48:04,398 --> 00:48:08,799
当您收到此错误时，工作室代码是将鼠标悬停在它上面，然后

191
00:48:08,799 --> 00:48:14,559
在 mac 上按 command 或在 linux 上按 windows 上的 control 并按 dot

192
00:48:14,559 --> 00:48:17,760
现在你会看到你会在这里得到一些建议

193
00:48:17,760 --> 00:48:20,879
至少对我来说，第二个建议是创建

194
00:48:20,879 --> 00:48:24,719
最终字段的构造函数没问题，我可以按那个

195
00:48:24,719 --> 00:48:29,199
现在你看到这里发生的事情是它创造了一些看起来

196
00:48:29,199 --> 00:48:33,279
有点像一个函数，但它没有名字

197
00:48:33,279 --> 00:48:37,520
它的名字被隐式设置为类的名字好吗

198
00:48:37,520 --> 00:48:42,559
所以基本上它说我是一个与类同名的特殊函数

199
00:48:42,559 --> 00:48:49,040
我希望给我一个值，然后我将依次分配给

200
00:48:49,040 --> 00:48:53,439
命名我自己的财产这有点像一种奇怪的做事方式

201
00:48:53,439 --> 00:48:57,840
东西，但它很安静也很干净

202
00:48:57,840 --> 00:49:01,199
在你这样做之后，这就是你这样做之后创建构造函数的方式

203
00:49:01,199 --> 00:49:05,760
然后在你调用这个人类的调用站点创建一个

204
00:49:05,760 --> 00:49:10,398
它的实例会抱怨说哦，我期待一个论点

205
00:49:10,398 --> 00:49:14,318
但我没有找到任何东西，这就是你必须通过的地方

206
00:49:14,318 --> 00:49:18,879
名字所以我们说在这种情况下是 foo bar 好的

207
00:49:18,879 --> 00:49:22,879
然后在下一行你可以说 print foo name

208
00:49:22,879 --> 00:49:27,279
好的，然后按 command s 然后你可以看到 foo bar 被打印到

209
00:49:27,279 --> 00:49:31,359
screen 所以这就像构造函数的基础

210
00:49:31,359 --> 00:49:35,600
这就是你构建类实例的方式

211
00:49:35,600 --> 00:49:39,520
现在你可能会说好吧我不想要

212
00:49:39,520 --> 00:49:45,920
我的意思是你可以用构造函数做很多花哨的事情你可以说好的

213
00:49:45,920 --> 00:49:50,238
例如，默认情况下，此名称必须具有特殊值，您可以这样做

214
00:49:50,238 --> 00:49:52,799
你可以用构造函数做很多我不会去的事情

215
00:49:52,799 --> 00:49:56,159
进入细节，但现在只知道一个

216
00:49:56,159 --> 00:49:59,840
构造函数是一种特殊的函数，它与

217
00:49:59,840 --> 00:50:03,199
类的名称，然后是括号，然后你把

218
00:50:03,199 --> 00:50:08,398
你的价值观在这里

219
00:50:08,398 --> 00:50:11,040
好吧，那是

220
00:50:11,040 --> 00:50:14,879
建设者嗯

221
00:50:14,879 --> 00:50:21,120
现在让我们谈谈嗯

222
00:50:21,120 --> 00:50:25,359
方法没问题

223
00:50:25,359 --> 00:50:29,680
我实际上要去这里说什么方法

224
00:50:29,680 --> 00:50:34,159
我们将在我的笔记中讨论方法和那些错误的地方

225
00:50:34,159 --> 00:50:38,079
也很抱歉我们讨论过的一个类的方法

226
00:50:38,079 --> 00:50:41,520
已经对你说实话了，一个类的方法是

227
00:50:41,520 --> 00:50:45,359
嗯，课堂上的一个功能

228
00:50:45,359 --> 00:50:48,719
通常称为实例

229
00:50:48,719 --> 00:50:52,799
方法意味着该函数在您实例化后可用

230
00:50:52,799 --> 00:50:56,799
上课没问题，就像我们在第 14 行做的那样。

231
00:50:56,799 --> 00:51:03,040
name 是一个实例变量，所以是一个可用的变量

232
00:51:03,040 --> 00:51:08,079
实例级别不是实例方法，实例方法应该是函数

233
00:51:08,079 --> 00:51:12,000
好的，让我们在这里创建一个不返回任何函数的函数

234
00:51:12,000 --> 00:51:17,120
由 void 返回类型表示的值，我们说 print name 好吧

235
00:51:17,120 --> 00:51:20,318
此功能的功能仅

236
00:51:20,318 --> 00:51:24,478
只是为了打印课，这就是全部

237
00:51:24,478 --> 00:51:28,159
确实，在飞镖中，你现在也是

238
00:51:28,159 --> 00:51:31,920
谈论这个我也会在飞镖中提到它通常是

239
00:51:31,920 --> 00:51:38,879
最好不要在你的实例变量或实例函数前面加上前缀

240
00:51:38,879 --> 00:51:42,840
在类本身内部使用这个

241
00:51:42,840 --> 00:51:48,398
在 dart 中关键字 this 关键字

242
00:51:48,398 --> 00:51:54,079
那个这个这个或那个这个关键字

243
00:51:54,079 --> 00:51:59,120
基本上是指这个类的当前实例就可以了

244
00:51:59,120 --> 00:52:04,478
所以你可以告诉 print name 打印这个点名，或者它实际上是

245
00:52:04,478 --> 00:52:08,959
最好删除它并将其称为名称，这是推荐的做法

246
00:52:08,959 --> 00:52:13,199
没关系，所以尽可能避免关键字 this

247
00:52:13,199 --> 00:52:17,600
除非您必须这样做，否则我们希望能达到这些目的

248
00:52:17,600 --> 00:52:21,439
稍后在本课程中 为什么你可能必须这样做

249
00:52:21,439 --> 00:52:27,600
虽然你现在可能不得不使用它，但我们有打印名称

250
00:52:27,600 --> 00:52:32,478
实例方法好吧，所以让我们用它来代替这个

251
00:52:32,478 --> 00:52:36,398
我们在这里执行的打印功能让我们说 foo

252
00:52:36,398 --> 00:52:40,799
点打印 name 没问题 command s 或 control s

253
00:52:40,799 --> 00:52:45,760
在 linux 和 windows 上并在 macintosh 上命令 sun 然后你得到

254
00:52:45,760 --> 00:52:49,040
flutter foo bar 打印在这里，或者你可以

255
00:52:49,040 --> 00:52:50,959
说打印

256
00:52:50,959 --> 00:52:56,559
我要去我现在将打印此人的姓名

257
00:52:56,559 --> 00:53:00,079
在单引号中，我们不需要双引号 OK 命令，你会看到

258
00:53:00,079 --> 00:53:04,238
该消息在此处打印，后跟该消息的实际名称

259
00:53:04,238 --> 00:53:07,920
实例所以如果有人说方法或实例

260
00:53:07,920 --> 00:53:11,840
方法然后您将知道我们正在谈论的是在创建的函数

261
00:53:11,840 --> 00:53:18,799
可以做一些事情的班级水平，所以简短而甜蜜

262
00:53:18,799 --> 00:53:21,199
嗯好的

263
00:53:21,199 --> 00:53:25,398
既然我们已经谈过了，让我们谈谈一点

264
00:53:25,398 --> 00:53:30,719
继承和子类化我要在这里带一个标题，所以你知道什么

265
00:53:30,719 --> 00:53:34,478
我们现在正在谈论

266
00:53:34,478 --> 00:53:39,120
继承和子类化在 dart 中是如此重要

267
00:53:39,120 --> 00:53:42,799
以及我不认为的任何其他面向对象的编程语言

268
00:53:42,799 --> 00:53:47,279
任何人都应该喜欢跳过它，或者像我知道的那样

269
00:53:47,279 --> 00:53:50,478
使用对象的各种编程语言的开发人员

270
00:53:50,478 --> 00:53:55,040
面向，但他们有点避开了面向对象的方面

271
00:53:55,040 --> 00:54:00,238
语言，也许他们不需要它，也许他们只是觉得

272
00:54:00,238 --> 00:54:04,398
不必要的，或者他们觉得哦，这太复杂了，但如果你

273
00:54:04,398 --> 00:54:08,478
想成为一名优秀的 Flutter 开发者或优秀的 Dart 开发者，你需要

274
00:54:08,478 --> 00:54:12,799
了解嗯课程和嗯

275
00:54:12,799 --> 00:54:17,120
继承所以让我们

276
00:54:17,120 --> 00:54:22,000
谈继承 dart 中的继承是什么

277
00:54:22,000 --> 00:54:26,079
它允许您定义一个类

278
00:54:26,079 --> 00:54:30,959
然后为该类添加更多功能

279
00:54:30,959 --> 00:54:33,680
进入一个新的班级，所以

280
00:54:33,680 --> 00:54:40,238
例如，假设我们在这里进入我们的测试功能并

281
00:54:40,238 --> 00:54:44,398
删除该代码并删除该人

282
00:54:44,398 --> 00:54:48,318
现在让我们创建一个类

283
00:54:48,318 --> 00:54:53,199
类生活一切都好，然后我们说放克

284
00:54:53,199 --> 00:54:56,559
抱歉空虚的呼吸

285
00:54:56,559 --> 00:55:01,680
然后我们说印刷生物呼吸正常

286
00:55:01,680 --> 00:55:06,799
所以我们创造了一个有生命的东西，我们说任何有生命的东西

287
00:55:06,799 --> 00:55:10,079
现在需要呼吸这可能是一个假设，但无论如何

288
00:55:10,079 --> 00:55:15,840
任何有生命的东西，它在地上，它在地上，它在

289
00:55:15,840 --> 00:55:21,120
基本上活着就是呼吸正常，所以这就是我们对活着的功能

290
00:55:21,120 --> 00:55:25,120
现在你可以说好吧

291
00:55:25,120 --> 00:55:29,279
任何生物也可能有能力移动好吧，那么我们有一个

292
00:55:29,279 --> 00:55:35,040
名为 move 的函数我要说 print 我正在移动

293
00:55:35,040 --> 00:55:41,040
所以现在你可能会说好吧，我有点想要一门叫做呃猫的课程

294
00:55:41,040 --> 00:55:45,439
猫也是一种生物，这是一种创造方式

295
00:55:45,439 --> 00:55:49,840
一个类呃猫类就是说类猫

296
00:55:49,840 --> 00:55:54,318
然后你说嗯我有点需要这些功能你会去复制它

297
00:55:54,318 --> 00:55:59,279
然后你把它们贴在这里，然后你说好的，我现在可以走了

298
00:55:59,279 --> 00:56:04,318
但绝对至高无上的至高无上之一

299
00:56:04,318 --> 00:56:07,920
开发人员的素质是

300
00:56:07,920 --> 00:56:11,439
开发人员不喜欢重复自己

301
00:56:11,439 --> 00:56:14,719
这是一个如此重要的概念

302
00:56:14,719 --> 00:56:18,159
编程，你需要避免重复自己，你需要只是

303
00:56:18,159 --> 00:56:22,398
硬币掉下来，现在把它弄直，这样你就不会

304
00:56:22,398 --> 00:56:27,359
像我们现在在这段代码中所做的那样犯这个错误，所以

305
00:56:27,359 --> 00:56:31,439
作为开发人员，您要做的第一件事就是说我如何获取此代码

306
00:56:31,439 --> 00:56:34,318
而且很明显猫也是

307
00:56:34,318 --> 00:56:39,840
活的东西，所以这就是你想使用扩展的地方

308
00:56:39,840 --> 00:56:45,359
um 关键字，允许您继承生活中的功能

309
00:56:45,359 --> 00:56:50,639
东西类进入你的猫类，所以在这种情况下，我说的是猫类

310
00:56:50,639 --> 00:56:53,680
扩展或用英语阅读它作为继承

311
00:56:53,680 --> 00:56:57,120
活的很好

312
00:56:57,120 --> 00:57:00,799
你可以看到 cat 类本身现在是空的，但是如果你去

313
00:57:00,799 --> 00:57:05,439
测试功能，我说最后

314
00:57:05,439 --> 00:57:09,520
绒毛是一只猫

315
00:57:09,520 --> 00:57:14,398
然后我可以说fluffers uh you can see that now that cat

316
00:57:14,398 --> 00:57:21,040
类实际上具有呼吸和移动功能或功能

317
00:57:21,040 --> 00:57:25,439
所以虽然 cat 本身没有定义这些函数，但它们是可用的

318
00:57:25,439 --> 00:57:30,959
对于在这种情况下称为 cat 类型的绒毛的实例，您可以使用

319
00:57:30,959 --> 00:57:35,680
只是说移动然后你可以说fluffers

320
00:57:35,680 --> 00:57:38,959
好的，所以如果我运行此代码，如果我删除

321
00:57:38,959 --> 00:57:42,318
调试控制台中的所有内容并运行此代码，您可以看到 cat

322
00:57:42,318 --> 00:57:46,719
名为fluffer的实例是相同的移动，或者我正在移动，它也会说

323
00:57:46,719 --> 00:57:53,040
生物现在呼吸正常

324
00:57:53,040 --> 00:57:57,600
你也可以我的意思是我们现在也可以谈论我们正在谈论

325
00:57:57,600 --> 00:58:01,199
继承和子类化

326
00:58:01,199 --> 00:58:04,719
实际上也许我不应该调用子类，但我也认为它是

327
00:58:04,719 --> 00:58:07,920
对您了解什么是子类化很重要 子类化是字面意思

328
00:58:07,920 --> 00:58:11,040
与继承子类相同的事情是说你有一个

329
00:58:11,040 --> 00:58:14,000
类，并且您正在创建一个子组件，例如子组件

330
00:58:14,000 --> 00:58:18,159
实际上可能有的东西

331
00:58:18,159 --> 00:58:21,840
这有点奇怪的命名 sub 因为 sub 意味着有点像

332
00:58:21,840 --> 00:58:26,238
该类中可用的东西的子集，但它实际上就像一个超集

333
00:58:26,238 --> 00:58:28,478
因为它会

334
00:58:28,478 --> 00:58:32,159
抓住一切像猫一样拥有生活中的一切功能

335
00:58:32,159 --> 00:58:36,719
事情是对的，但它可能不一定会那样做

336
00:58:36,719 --> 00:58:41,920
解释起来有点复杂，但是如果您听到子类化或继承

337
00:58:41,920 --> 00:58:45,199
知道这就是我们的意思

338
00:58:45,199 --> 00:58:52,478
您通常可以使用 extends 关键字

339
00:58:52,478 --> 00:58:58,478
好的，现在我们已经讨论了继承和子类化

340
00:58:58,478 --> 00:59:00,879
所以我要

341
00:59:00,879 --> 00:59:05,279
移动一点，呃，我的笔记，对不起，我正在移开视线

342
00:59:05,279 --> 00:59:10,559
从屏幕上，嗯，现在我们要谈谈抽象

343
00:59:10,559 --> 00:59:14,959
类 好吧 有很好的文档关于

344
00:59:14,959 --> 00:59:18,639
抽象类和

345
00:59:18,639 --> 00:59:24,238
我们在这里要做的就是改变这个班级的生活

346
00:59:24,238 --> 00:59:28,000
此刻要抽象的东西

347
00:59:28,000 --> 00:59:32,559
你会看到一切都按预期进行

348
00:59:32,559 --> 00:59:36,799
一个抽象类

349
00:59:36,799 --> 00:59:42,079
和普通班非常相似，而且很好

350
00:59:42,079 --> 00:59:45,279
关于抽象类实际上来自 dart 的文档

351
00:59:45,279 --> 00:59:48,639
透视图，你可以看到它说使用 abs 抽象修饰符来定义

352
00:59:48,639 --> 00:59:52,840
不能实例化的抽象类类没关系

353
00:59:52,840 --> 00:59:59,279
所以抽象类就像一个普通的类，不能有实例

354
00:59:59,279 --> 01:00:02,799
所以在这种情况下，一旦我们谋生

355
01:00:02,799 --> 01:00:07,359
如果你然后去听说，那就做一个抽象类

356
01:00:07,359 --> 01:00:11,760
东西是有生命的

357
01:00:11,760 --> 01:00:14,318
对和

358
01:00:14,318 --> 01:00:18,318
它说哦抽象类不能被实例化

359
01:00:18,318 --> 01:00:24,879
所以抽象类是一个将逻辑组合成自身的类

360
01:00:24,879 --> 01:00:31,120
其他类使用其功能的唯一目的

361
01:00:31,120 --> 01:00:36,879
因此，如果您在 dart 中将某些东西标记为抽象类，那么您只需要

362
01:00:36,879 --> 01:00:40,879
在您的脑海中知道的是，这是一个具有一些实用程序的类

363
01:00:40,879 --> 01:00:46,959
一些应该在其他普通类中使用的代码好吧

364
01:00:46,959 --> 01:00:51,600
并且没有人应该只是去创造一个生物的实例

365
01:00:51,600 --> 01:00:54,238
这种情况改为

366
01:00:54,238 --> 01:00:59,920
在调用端，您需要实例化该类型的类，所以

367
01:00:59,920 --> 01:01:04,879
现在我们可以像以前一样说猫，我们可以说事物呼吸移动或

368
01:01:04,879 --> 01:01:08,238
绒毛

369
01:01:08,238 --> 01:01:12,959
这就是抽象类

370
01:01:12,959 --> 01:01:16,079
它只是一个无法实例化的类

371
01:01:16,079 --> 01:01:19,600
它通常就像其他类应该继承的实用程序类

372
01:01:19,600 --> 01:01:23,760
从好的

373
01:01:23,760 --> 01:01:28,159
好的，我现在可以在我的笔记中看到，我会

374
01:01:28,159 --> 01:01:32,639
假设我们已经快速讨论了抽象类

375
01:01:32,639 --> 01:01:36,639
我将提出我们将要讨论的下一个话题

376
01:01:36,639 --> 01:01:41,840
说说哪些是工厂构造函数

377
01:01:41,840 --> 01:01:45,840
所以我个人非常喜欢工厂

378
01:01:45,840 --> 01:01:49,359
对你说实话的构造函数

379
01:01:49,359 --> 01:01:55,040
让我们删除我们的抽象类我会向你解释什么是工厂

380
01:01:55,040 --> 01:01:59,279
现在让我们看看我们有一只玻璃猫好吗

381
01:01:59,279 --> 01:02:05,199
嗯，然后在这里让我们给猫起个名字

382
01:02:05,199 --> 01:02:10,318
类型为字符串命令点或控制点

383
01:02:10,318 --> 01:02:14,799
for linux windows on the name in visual studio code 至少要创建一个

384
01:02:14,799 --> 01:02:18,318
构造函数，你可以这样做并说创建构造函数，或者你可以手动

385
01:02:18,318 --> 01:02:24,079
创建一个构造函数，所以你说 cat 这个名字好吧 那是一个构造函数

386
01:02:24,079 --> 01:02:29,040
并且还知道你可以将其设为 const，因为它实际上是

387
01:02:29,040 --> 01:02:32,719
使用 final 字段，但我们稍后会讨论

388
01:02:32,719 --> 01:02:39,520
现在我们在这里有一个 cat 类，它有一个名为 cat 的构造函数

389
01:02:39,520 --> 01:02:44,398
在这里你可以说最终

390
01:02:44,398 --> 01:02:48,318
绒球是猫

391
01:02:48,318 --> 01:02:52,238
然后你说绒毛球没问题，所以现在你正在创建一个

392
01:02:52,238 --> 01:02:57,600
cat 类的实例和变量的名称称为 fluffball

393
01:02:57,600 --> 01:03:04,398
猫的名字是绒毛球吧

394
01:03:04,398 --> 01:03:08,879
那么你可以说打印

395
01:03:08,879 --> 01:03:10,478
无球

396
01:03:10,478 --> 01:03:13,920
点名可以这样

397
01:03:13,920 --> 01:03:16,159
那只是它具有的普通构造函数

398
01:03:16,159 --> 01:03:19,680
与工厂构造函数无关，但实际上是工厂构造函数

399
01:03:19,680 --> 01:03:24,159
is 是您构造实例的一种方式

400
01:03:24,159 --> 01:03:31,040
你的类和使用便利功能

401
01:03:31,040 --> 01:03:35,600
所以这意味着如果你在你的代码中看到

402
01:03:35,600 --> 01:03:41,199
您正在创建此类的实例，例如 20 次 30 次不同的地方

403
01:03:41,199 --> 01:03:46,318
在您的应用程序中使用这个完全相同的名称绒毛球

404
01:03:46,318 --> 01:03:49,439
然后你需要创建一个工厂

405
01:03:49,439 --> 01:03:55,040
构造函数，这是一个明确的标志，表明您通常用于创建一个

406
01:03:55,040 --> 01:03:57,920
类的实例是通过

407
01:03:57,920 --> 01:04:01,600
绒毛球的同名所以

408
01:04:01,600 --> 01:04:05,439
这就是工厂构造函数有用的地方，正如它们的名字所表明的那样

409
01:04:05,439 --> 01:04:07,760
是一种创造方式

410
01:04:07,760 --> 01:04:13,040
像工厂这样的产品对你来说超级快，好吧，所以它的速度

411
01:04:13,040 --> 01:04:16,398
您可以创建工厂构造函数的类的实例

412
01:04:16,398 --> 01:04:20,318
很亮，所以现在让我们看看一家工厂

413
01:04:20,318 --> 01:04:25,359
构造函数，它为我们提供了一个名称始终为 fluffball all 的 cap 实例

414
01:04:25,359 --> 01:04:28,559
正确的做法是你会说

415
01:04:28,559 --> 01:04:33,680
工厂，你会说猫点绒毛球

416
01:04:33,680 --> 01:04:39,120
所以你说任何名为 cat 的类，这个类都有一个名为

417
01:04:39,120 --> 01:04:43,359
fluffball 这是这个工厂构造函数，然后你会把你的

418
01:04:43,359 --> 01:04:48,318
括号在这里，然后你需要做的是善良

419
01:04:48,318 --> 01:04:51,600
在这种情况下设置你的类实例

420
01:04:51,600 --> 01:04:54,559
就像你说大括号并说这个名字

421
01:04:54,559 --> 01:04:59,520
是那样的绒毛，这就是你基本上的样子

422
01:04:59,520 --> 01:05:04,000
创建你的类的一个实例，但通常的做法是你说

423
01:05:04,000 --> 01:05:06,238
这个名字

424
01:05:06,238 --> 01:05:11,199
伙计，让我们看看呃工厂猫绒毛球

425
01:05:11,199 --> 01:05:16,719
然后你会说名字是绒毛

426
01:05:16,719 --> 01:05:20,238
看到我有点忘记了嗯

427
01:05:20,238 --> 01:05:24,318
uh 工厂的语法 uh so let's go i'm

428
01:05:24,318 --> 01:05:30,879
会在这里调出 safari，让我们去说守卫工厂的构造函数

429
01:05:30,879 --> 01:05:35,600
我会在这里提出工厂构造函数，让我们说工厂

430
01:05:35,600 --> 01:05:40,079
让我们来看一个例子，你可以在这里看到它说工厂记录器就像

431
01:05:40,079 --> 01:05:44,559
没关系，有一个工厂记录员就是这样的

432
01:05:44,559 --> 01:05:48,879
基本上就是这里所说的基本上是在说

433
01:05:48,879 --> 01:05:53,520
this 在这个函数中，你需要返回一些好的，所以让我们关闭它

434
01:05:53,520 --> 01:05:57,760
safari 窗口和我们要在这里做什么 我们要说 return cat

435
01:05:57,760 --> 01:06:01,359
作为名字，我们会说绒毛球好吧，这就是你的方式

436
01:06:01,359 --> 01:06:06,719
会像工厂构造函数一样创建，所以你在这里做的是说

437
01:06:06,719 --> 01:06:11,520
我有一个名为 fluffball 的构造函数，它的返回值是一只猫

438
01:06:11,520 --> 01:06:15,920
但在里面我有一些特殊的逻辑，就像把它打包起来一样

439
01:06:15,920 --> 01:06:19,760
你在工厂做，所以让我们进去而不是做 cat

440
01:06:19,760 --> 01:06:24,879
像那样的绒毛球然后你可以说猫点绒毛球好吧

441
01:06:24,879 --> 01:06:28,639
就像变成了一个嗯

442
01:06:28,639 --> 01:06:33,600
它变得像一个方便的功能，你可以说猫绒毛球和

443
01:06:33,600 --> 01:06:37,600
然后你说打印绒毛球

444
01:06:37,600 --> 01:06:42,478
点名称，默认情况下您可以看到它是

445
01:06:42,478 --> 01:06:46,879
或者你放在这里的任何东西fluffball 2 print，它会被打印到

446
01:06:46,879 --> 01:06:51,359
屏幕没问题，这就是你创建工厂的方式

447
01:06:51,359 --> 01:06:54,879
构造函数和工厂构造函数真的很重要

448
01:06:54,879 --> 01:06:58,478
谈论类集群我们还没有谈论类集群

449
01:06:58,478 --> 01:07:03,600
老实说，我不认为我们会在这篇文章中谈论这个

450
01:07:03,600 --> 01:07:06,000
当然我不认为这门课的任何地方

451
01:07:06,000 --> 01:07:10,238
我实际上已经讨论过类集群

452
01:07:10,238 --> 01:07:15,279
但要知道，在 dart 和 abstract 的上下文中

453
01:07:15,279 --> 01:07:20,159
类工厂构造函数不一定

454
01:07:20,159 --> 01:07:26,398
必须返回同一个类的一个实例，所以它实际上可以

455
01:07:26,398 --> 01:07:29,600
返回另一个类的实例

456
01:07:29,600 --> 01:07:35,279
但我强烈建议您实际上去阅读有关工厂构造函数的信息

457
01:07:35,279 --> 01:07:39,199
正如我刚刚做的那样，谷歌工厂构造函数

458
01:07:39,199 --> 01:07:42,478
飞镖，你会看到它的一些例子

459
01:07:42,478 --> 01:07:44,959
嗯，如果你在工作，它们真的很有用

460
01:07:44,959 --> 01:07:48,879
有很多数据，你正在做数据解析

461
01:07:48,879 --> 01:07:52,559
json解析等但是

462
01:07:52,559 --> 01:07:56,799
我不认为你现在知道它有什么用

463
01:07:56,799 --> 01:08:01,439
但知道它可供您使用，但

464
01:08:01,439 --> 01:08:07,279
我让你自己去阅读更多关于它的信息

465
01:08:07,279 --> 01:08:09,680
好的，我们现在已经谈到了工厂

466
01:08:09,680 --> 01:08:14,879
构造函数和嗯现在让我们谈谈

467
01:08:14,879 --> 01:08:20,959
自定义运算符，所以我要把自定义运算符带到这里好吧

468
01:08:20,959 --> 01:08:27,520
现在 dart 中的自定义运算符是

469
01:08:27,520 --> 01:08:33,439
运算符，例如等号或等号

470
01:08:33,439 --> 01:08:39,040
um 检查一个对象实例与另一个实例的相等性

471
01:08:39,040 --> 01:08:42,959
同一个对象 um 自定义运算符允许你在飞镖

472
01:08:42,959 --> 01:08:50,079
覆盖您的班级被比较或添加到或的能力

473
01:08:50,079 --> 01:08:54,158
减去乘以某物

474
01:08:54,158 --> 01:08:59,520
用你自己的逻辑现在让我们看看我的意思是什么让我们说

475
01:08:59,520 --> 01:09:05,279
你有最后的 uh cat one，它等于 cat 名称为 foo

476
01:09:05,279 --> 01:09:09,600
然后你说好吧，我现在有两只猫，名字完全相同

477
01:09:09,600 --> 01:09:16,238
然后你会说如果 cat 1 与 cat 2 打印完全一样，它们是相等的

478
01:09:16,238 --> 01:09:22,079
否则说打印它们不相等

479
01:09:22,079 --> 01:09:25,040
所以这两个实例具有完全相同的

480
01:09:25,040 --> 01:09:27,359
名字 foo

481
01:09:27,359 --> 01:09:30,478
如果您现在运行此代码，您将看到

482
01:09:30,478 --> 01:09:34,799
据说飞镖说它们不相等，尽管在内部你可能

483
01:09:34,799 --> 01:09:39,040
在我的项目中随时为我考虑

484
01:09:39,040 --> 01:09:44,719
两只猫有相同的名字我希望它们被认为是平等的并且

485
01:09:44,719 --> 01:09:48,000
这就像事情变得有趣的地方，因为那时你

486
01:09:48,000 --> 01:09:55,040
可以在语言中覆盖这个特定的函数或运算符

487
01:09:55,040 --> 01:10:00,639
仅适用于您的班级，因此要做到这一点的方法是您先去

488
01:10:00,639 --> 01:10:04,639
用广告标志书写覆盖

489
01:10:04,639 --> 01:10:09,600
你说布尔运算符等于等于协方差我是

490
01:10:09,600 --> 01:10:13,040
会解释这一切，别担心猫，你说猫，然后

491
01:10:13,040 --> 01:10:16,478
在这里你说嗯其他

492
01:10:16,478 --> 01:10:20,719
名字是我好的，然后我们遇到了哈希问题

493
01:10:20,719 --> 01:10:25,439
我也会补充一点，所以不要担心所有这些，嗯，我

494
01:10:25,439 --> 01:10:28,879
会详细解释的 um

495
01:10:28,879 --> 01:10:33,680
好吧，好吧，让我们先看看我刚才说的是什么

496
01:10:33,680 --> 01:10:38,079
在这里做了覆盖

497
01:10:38,079 --> 01:10:42,318
这里的符号覆盖对你来说是非常重要的术语

498
01:10:42,318 --> 01:10:45,359
理解面向对象的编程，那就是

499
01:10:45,359 --> 01:10:48,318
无论你在哪里

500
01:10:48,318 --> 01:10:53,040
一堂课，你是

501
01:10:53,040 --> 01:10:58,238
在我们的例子中从那个类继承，例如类 cat 你可以看到

502
01:10:58,238 --> 01:11:03,520
它没有任何范围，但默认情况下在每个类中

503
01:11:03,520 --> 01:11:08,719
从对象类隐式继承，所以你可以说扩展

504
01:11:08,719 --> 01:11:11,359
对象，这与

505
01:11:11,359 --> 01:11:14,719
省略写这两个词

506
01:11:14,719 --> 01:11:21,520
只知道 cat 来自对象，一个对象在内部已经定义了一个

507
01:11:21,520 --> 01:11:26,079
称为 equal 的运算符 equal 返回一个布尔值

508
01:11:26,079 --> 01:11:29,840
布尔值是一个可以包含 true 的值

509
01:11:29,840 --> 01:11:34,879
这可以是真的也可以是假的，这很好

510
01:11:34,879 --> 01:11:40,478
这 这 这 这 这 这 这 这 这 这 这 或 不 有点 像 那

511
01:11:40,478 --> 01:11:46,799
所以布尔值是一种数据类型，所以运算符运算符是关键字

512
01:11:46,799 --> 01:11:52,158
以及在飞镖中基本上说告诉飞镖我们要改变

513
01:11:52,158 --> 01:11:57,199
更改为覆盖此同等平等的功能

514
01:11:57,199 --> 01:12:01,600
使用我们自己的在对象级别定义的运算符

515
01:12:01,600 --> 01:12:05,439
实施好吧，让我们把范围实际带到这里

516
01:12:05,439 --> 01:12:09,680
并进入这个对象定义只需选择它右键单击它并说去

517
01:12:09,680 --> 01:12:14,639
定义好的并搜索运算符equal equal

518
01:12:14,639 --> 01:12:17,600
你会看到它在那里为你定义好了

519
01:12:17,600 --> 01:12:22,318
并且有很多关于它实际作用的文档

520
01:12:22,318 --> 01:12:26,959
所以这就是我们要覆盖的语法 我们正在改变它的定义

521
01:12:26,959 --> 01:12:30,799
功能正常所以

522
01:12:30,799 --> 01:12:35,040
那么由于这是一个简单的函数，因此运算符本身就是一个函数

523
01:12:35,040 --> 01:12:39,359
实际上你可以看到它开始它就像一个

524
01:12:39,359 --> 01:12:43,760
括号中的括号你得到的值

525
01:12:43,760 --> 01:12:50,000
该操作员正在将您的班级与好吧

526
01:12:50,000 --> 01:12:53,040
这就是您的班级所具有的价值

527
01:12:53,040 --> 01:12:56,318
相比也需要是一只猫，因为你不能在飞镖不是

528
01:12:56,318 --> 01:13:00,398
建议您将不同类型的调类与每个类进行比较

529
01:13:00,398 --> 01:13:04,559
其他所以这里我们说协方差协方差

530
01:13:04,559 --> 01:13:08,478
是您仅在飞镖中使用的关键字，但我认为这对您很重要

531
01:13:08,478 --> 01:13:13,600
明白它的作用是它告诉飞镖虽然

532
01:13:13,600 --> 01:13:17,920
在对象级别我们说传入的参数

533
01:13:17,920 --> 01:13:23,760
是 object 类型，但在我们的例子中，我们确信 this 中的值

534
01:13:23,760 --> 01:13:28,959
函数实际上是一只猫，所以协变告诉飞镖

535
01:13:28,959 --> 01:13:34,079
忘记作为对象的超类定义为参数类型

536
01:13:34,079 --> 01:13:39,279
这个参数，因为如果你删除协变，你会看到它说 cat

537
01:13:39,279 --> 01:13:43,439
一个对象作为参数，但如果它是协变的，你有点

538
01:13:43,439 --> 01:13:48,959
就像压倒这个假设一样，所以我们说好吧

539
01:13:48,959 --> 01:13:52,719
相等，所以我们的意思是比较我们的 cat 实例正在与

540
01:13:52,719 --> 01:13:56,079
另一个cath实例，我们正在做的是我们需要

541
01:13:56,079 --> 01:13:59,680
返回一个布尔值，表示它们是否相等，你可以看到我只是

542
01:13:59,680 --> 01:14:03,279
比较我只是比较我们的名字

543
01:14:03,279 --> 01:14:07,439
名称与其他实例名称都可以

544
01:14:07,439 --> 01:14:12,079
现在，当您按照您所看到的那样执行此操作时，我们会遇到一个问题，这有点像

545
01:14:12,079 --> 01:14:17,120
一个警告告诉你，现在你已经覆盖了它

546
01:14:17,120 --> 01:14:21,040
um 运算符，您还需要覆盖

547
01:14:21,040 --> 01:14:24,719
哈希码现在好了

548
01:14:24,719 --> 01:14:28,879
老实说，我不认为哈希码是这么重要的事情

549
01:14:28,879 --> 01:14:34,719
现在但只知道哈希码是一个特殊的数字

550
01:14:34,719 --> 01:14:39,279
您分配给您的或您指定的特殊标识符

551
01:14:39,279 --> 01:14:42,559
分配给您的类实例

552
01:14:42,559 --> 01:14:47,439
然后在集合中使用，例如，如果你把你的实例

553
01:14:47,439 --> 01:14:49,520
猫在里面

554
01:14:49,520 --> 01:14:53,279
字典然后或对不起或在地图内

555
01:14:53,279 --> 01:14:56,959
我们谈到的飞镖叫我相信章节

556
01:14:56,959 --> 01:14:59,920
第四章是的，所以如果你没有

557
01:14:59,920 --> 01:15:03,760
看第四章我强烈建议你这样做

558
01:15:03,760 --> 01:15:10,478
所以如果你把你的实例

559
01:15:10,478 --> 01:15:14,879
你的猫类在一个集合中

560
01:15:14,879 --> 01:15:20,158
或在地图内然后飞镖

561
01:15:20,158 --> 01:15:25,520
知道其映射内的键或集合内的值是

562
01:15:25,520 --> 01:15:28,879
实际上是唯一的，它使用这个哈希值

563
01:15:28,879 --> 01:15:32,478
所以如果你看看我是不是去这里说命令

564
01:15:32,478 --> 01:15:37,840
点来获得如何解决这个问题的建议它说创建方法哈希码

565
01:15:37,840 --> 01:15:40,719
这就是修复这个词所需要的

566
01:15:40,719 --> 01:15:45,680
所以你可以看到它是一个覆盖，这意味着这个哈希码

567
01:15:45,680 --> 01:15:50,799
如果我们去对象并寻找你，getter 是在对象类上定义的

568
01:15:50,799 --> 01:15:53,680
可以看到其实是在那里定义的

569
01:15:53,680 --> 01:15:57,840
我们正在覆盖它的值，这里它说我要去

570
01:15:57,840 --> 01:16:03,600
super 并获得该值 super 是我们的对象，因此作为超类

571
01:16:03,600 --> 01:16:08,000
它就在我们上面，但是如果你想覆盖它

572
01:16:08,000 --> 01:16:12,158
如果你在这种情况下，你可以说好吧，不要得到超级哈希码

573
01:16:12,158 --> 01:16:15,439
获取名称标签，老实说，这只是一个

574
01:16:15,439 --> 01:16:20,639
非常技术性的东西，我认为不属于第六章，但是

575
01:16:20,639 --> 01:16:26,238
只要知道我们在这里为我们的猫类创建一个标识符

576
01:16:26,238 --> 01:16:31,359
这让飞镖明白，如果这

577
01:16:31,359 --> 01:16:39,600
cat 类实例放置在集合中，例如地图或集合

578
01:16:39,600 --> 01:16:45,920
然后它会知道它们是否独特

579
01:16:45,920 --> 01:16:49,600
好吧，既然我们已经完成了这一切，我们

580
01:16:49,600 --> 01:16:54,478
可以重新运行代码，你现在会看到它说他们

581
01:16:54,478 --> 01:16:57,520
是平等的 这就是我们想要的

582
01:16:57,520 --> 01:17:00,879
真的是我们想要的，但实际上我有很多代码

583
01:17:00,879 --> 01:17:03,920
不知道就好像四行代码 um

584
01:17:03,920 --> 01:17:09,199
这甚至不被认为是一行代码，它有点像

585
01:17:09,199 --> 01:17:15,520
是对分析仪的提示，但呃

586
01:17:15,520 --> 01:17:18,639
你可以说它几乎只有两行代码，但数量很多

587
01:17:18,639 --> 01:17:21,199
对你诚实的新事物

588
01:17:21,199 --> 01:17:23,520
掌握

589
01:17:23,520 --> 01:17:27,600
所以我把这个留在这里，你可以看看

590
01:17:27,600 --> 01:17:30,398
嗯，我想

591
01:17:30,398 --> 01:17:34,559
为了本章老实说，我们在本章中已经谈了很多

592
01:17:34,559 --> 01:17:39,760
关于枚举 switch 语句 类 对象 uh 构造函数

593
01:17:39,760 --> 01:17:42,559
工厂建设者

594
01:17:42,559 --> 01:17:48,000
抽象类继承很多所以这一章是相当沉重的一章

595
01:17:48,000 --> 01:17:51,120
六，但我建议你

596
01:17:51,120 --> 01:17:55,279
去阅读飞镖的官方文档，因为正如我所说

597
01:17:55,279 --> 01:17:58,719
我们没有机会谈论一切

598
01:17:58,719 --> 01:18:02,559
嗯，否则这门课就是

599
01:18:02,559 --> 01:18:06,559
非常大，这不是我想做的

600
01:18:06,559 --> 01:18:09,120
请去阅读有关我们谈论的事情的文档

601
01:18:09,120 --> 01:18:14,559
尤其是 dart 中的面向对象编程，所以

602
01:18:14,559 --> 01:18:19,359
有了这一点，我们将在下一章中讨论

603
01:18:19,359 --> 01:18:23,279
关于 dart 中的一些高级功能，例如

604
01:18:23,279 --> 01:18:28,719
未来的异步操作流和生成器

605
01:18:28,719 --> 01:18:31,439
所以

606
01:18:31,439 --> 01:18:35,439
请看一下文档，我会在

607
01:18:35,439 --> 01:18:40,158
下一章大家好，欢迎来到第7章

608
01:18:40,158 --> 01:18:44,799
在本章的 Flutter 课程中，我们将讨论高级飞镖

609
01:18:44,799 --> 01:18:48,639
概念事物，例如扩展期货

610
01:18:48,639 --> 01:18:50,959
流嗯

611
01:18:50,959 --> 01:18:56,079
异步等待生成器和泛型以及

612
01:18:56,079 --> 01:18:58,799
所以呃，我有点假设你已经

613
01:18:58,799 --> 01:19:01,760
已经建立了我们在上一章讨论过的项目，所以

614
01:19:01,760 --> 01:19:05,439
我不会再经历一次，然后我假设我们喜欢

615
01:19:05,439 --> 01:19:10,639
某种 iphone 模拟器或 android 模拟器或任何设备

616
01:19:10,639 --> 01:19:13,760
你也许可以测试你的项目

617
01:19:13,760 --> 01:19:18,559
我要在这里提出我的项目，所以我要把它放在那里

618
01:19:18,559 --> 01:19:21,279
这就是我们在上一章离开项目的方式

619
01:19:21,279 --> 01:19:26,318
然后我将在 mac 上执行命令 shift p 或在 linux 中控制 shift p 和

620
01:19:26,318 --> 01:19:30,318
windows为了选择设备，我只想说iphone 13 pro

621
01:19:30,318 --> 01:19:35,040
这是我在这里的模拟器

622
01:19:35,040 --> 01:19:39,680
就在那里，然后我就去说跑

623
01:19:39,680 --> 01:19:43,760
无需调试即可运行，所以这需要时间，我只是

624
01:19:43,760 --> 01:19:47,120
想着然后利用这个时间解释一下

625
01:19:47,120 --> 01:19:49,920
关于扩展名

626
01:19:49,920 --> 01:19:53,920
正如你在这里看到的，扩展是能力

627
01:19:53,920 --> 01:19:58,719
程序员和飞镖为了er有没有程序员的能力

628
01:19:58,719 --> 01:20:00,639
延长

629
01:20:00,639 --> 01:20:05,439
或者为我们在第六章讨论过的现有类添加功能

630
01:20:05,439 --> 01:20:10,318
类和对象，所以我有点嗯会

631
01:20:10,318 --> 01:20:14,398
希望本章中采取行动的每个人实际上都遵循了这一点

632
01:20:14,398 --> 01:20:17,439
章以及呃我实际上要去这里去

633
01:20:17,439 --> 01:20:21,600
请勿打扰是的，我实际上在那里所以让我们看一个简单的

634
01:20:21,600 --> 01:20:25,120
dart 中的扩展以及我们如何使用它我可以看到编程

635
01:20:25,120 --> 01:20:28,639
程序正在运行我要删除我们拥有的旧代码，我要

636
01:20:28,639 --> 01:20:33,520
把我的脸带到右下角​​，我只是有点

637
01:20:33,520 --> 01:20:37,760
知道我在

638
01:20:37,760 --> 01:20:40,959
屏幕，他们挡住了屏幕，所以我会确保你

639
01:20:40,959 --> 01:20:45,439
可以看到内容，因为我们继续所以

640
01:20:45,439 --> 01:20:49,359
嗯，让我们也删除所有这些，然后我们就说我们有一个

641
01:20:49,359 --> 01:20:55,600
这里有一个简单的猫类，它有一个名字，我们可以进去说 final

642
01:20:55,600 --> 01:20:59,920
喵是猫的一个例子，我可以说

643
01:20:59,920 --> 01:21:02,158
打印和我

644
01:21:02,158 --> 01:21:07,359
实际上我们必须提供一个我可以在这里看到的名字，让我们说fluffers

645
01:21:07,359 --> 01:21:11,120
并保存 meow dot 的名字，所以我们打印那个名字

646
01:21:11,120 --> 01:21:17,600
我会说 command 就像那样，嗯，也许会

647
01:21:17,600 --> 01:21:21,680
调出 Visual Studio 代码，这样您就可以实际看到输出命令和

648
01:21:21,680 --> 01:21:25,359
你可以看到我们在哪里得到这个

649
01:21:25,359 --> 01:21:29,120
等于哦，这是一个旧命令，所以命令是，你可以看到 fluffers 是

650
01:21:29,120 --> 01:21:33,600
打印到屏幕上，这是因为我们这里有名字，所以我也是

651
01:21:33,600 --> 01:21:36,799
现在要去掉这个标题，这样你就可以看到整个

652
01:21:36,799 --> 01:21:41,279
像这样的代码把它带到这里我也将摆脱我的

653
01:21:41,279 --> 01:21:45,279
模拟器并将其带到另一个屏幕好吧，所以现在让我们说你想要

654
01:21:45,279 --> 01:21:49,600
向此添加功能或向此类添加功能

655
01:21:49,600 --> 01:21:55,120
允许猫奔跑或允许猫跳所以一种方法是

656
01:21:55,120 --> 01:22:00,238
实际上去猫类类本身并创建一个

657
01:22:00,238 --> 01:22:04,478
功能在那里，但你也可以做的是去说扩展

658
01:22:04,478 --> 01:22:10,000
例如在 cat 上运行，这是创建扩展的语法

659
01:22:10,000 --> 01:22:13,279
你说的是你正在扩展

660
01:22:13,279 --> 01:22:16,238
上课叫猫

661
01:22:16,238 --> 01:22:20,879
一个名为 run now 的新功能，这不是该功能的名称

662
01:22:20,879 --> 01:22:23,199
它本身只是您的扩展名

663
01:22:23,199 --> 01:22:27,439
而且你现在不必真正了解这个名字，它只是

664
01:22:27,439 --> 01:22:30,719
当您可以在飞镖中变得更高级时，例如创建

665
01:22:30,719 --> 01:22:33,680
你自己的图书馆

666
01:22:33,680 --> 01:22:37,520
在不同的类上创建扩展，例如在你的库中，然后

667
01:22:37,520 --> 01:22:41,279
使用您的库的人或程序员，然后他们可以

668
01:22:41,279 --> 01:22:45,840
基本上包括您已包含的特定扩展

669
01:22:45,840 --> 01:22:49,760
在他们的代码中的库中，或者他们可以排除它们

670
01:22:49,760 --> 01:22:53,840
所以只要知道它只是一个名字

671
01:22:53,840 --> 01:22:57,760
扩展名，所以它现在没有太大意义，好吧，那么你可以

672
01:22:57,760 --> 01:23:02,000
创建一个没有返回值的函数 run 然后你可以说

673
01:23:02,000 --> 01:23:06,318
打印和猫名正在运行

674
01:23:06,318 --> 01:23:09,760
你从前面的章节中知道了这个语法，这就是你的方式

675
01:23:09,760 --> 01:23:15,478
格式化一个字符串然后在这里你基本上是在做嗯弹簧插值

676
01:23:15,478 --> 01:23:20,238
插值我认为它被称为并且你在里面包含了那个名字

677
01:23:20,238 --> 01:23:23,600
你自己的字符串，所以结果将是 cat

678
01:23:23,600 --> 01:23:27,199
空格此 cat 实例的名称

679
01:23:27,199 --> 01:23:30,398
空间运行正常，所以

680
01:23:30,398 --> 01:23:34,398
使用它，你可以在你的每个 cat 实例

681
01:23:34,398 --> 01:23:39,439
项目将获得名为 run 的函数，因此您可以

682
01:23:39,439 --> 01:23:43,600
说我出去运行并命令它，你可以看到它

683
01:23:43,600 --> 01:23:49,760
说 cap fluffers 正在运行，所以只要知道扩展是

684
01:23:49,760 --> 01:23:53,760
如果您认为存在

685
01:23:53,760 --> 01:23:57,279
您要添加到现有类中的功能，它实际上并不

686
01:23:57,279 --> 01:24:01,120
属于那个类本身

687
01:24:01,120 --> 01:24:04,158
但它可能例如属于

688
01:24:04,158 --> 01:24:07,199
您正在使用的当前源文件

689
01:24:07,199 --> 01:24:12,158
扩展非常有用，但我也相信他们需要

690
01:24:12,158 --> 01:24:16,318
有点小心使用有点像稀疏所以当你真的需要一个

691
01:24:16,318 --> 01:24:20,478
扩展，你可以去创建一个扩展，它们有限制

692
01:24:20,478 --> 01:24:24,959
随着你越来越习惯用 dart 编程，你就会明白

693
01:24:24,959 --> 01:24:29,279
他们的局限性更好一点，所以只要知道他们在那里

694
01:24:29,279 --> 01:24:32,559
并且可以用作另一个示例

695
01:24:32,559 --> 01:24:34,959
扩展是例如，如果你有一个类

696
01:24:34,959 --> 01:24:39,199
人让我说名字

697
01:24:39,199 --> 01:24:43,359
属性没问题，所以这是一个实例属性，然后

698
01:24:43,359 --> 01:24:48,318
你会说 uh last name 然后你说 command dot individual

699
01:24:48,318 --> 01:24:52,879
mac 上的 studio 代码或 linux 和 windows 中的控制点，然后您创建一个

700
01:24:52,879 --> 01:24:57,920
您的个人课程的构造函数好的，这就是您创建实例的方式

701
01:24:57,920 --> 01:25:01,600
你的人班然后你可以进去然后你说

702
01:25:01,600 --> 01:25:05,600
um final fou 是名字是

703
01:25:05,600 --> 01:25:11,199
谁和谁的姓是酒吧好吧，在这里假设你想成为

704
01:25:11,199 --> 01:25:16,079
能算出一个人的全名没事所以你能做的就是对你

705
01:25:16,079 --> 01:25:19,199
可以为我说延期

706
01:25:19,199 --> 01:25:23,920
一个人，然后在这里你可以说我有

707
01:25:23,920 --> 01:25:28,478
我想计算全名，以便结果类型将是

708
01:25:28,478 --> 01:25:31,199
字符串，然后你想现在创建一个吸气剂

709
01:25:31,199 --> 01:25:33,760
我们还没有过多地谈论吸气剂，但只知道它有点像

710
01:25:33,760 --> 01:25:37,359
property 它是一个只能永久读取但不能写入的属性

711
01:25:37,359 --> 01:25:40,639
所以你只说得到然后你说假

712
01:25:40,639 --> 01:25:45,439
作为属性的名称，您会说等于

713
01:25:45,439 --> 01:25:50,000
美元名字空间美元姓氏好的

714
01:25:50,000 --> 01:25:53,600
所以你在这里说的是我有一个getter，它的返回类型是

715
01:25:53,600 --> 01:25:56,879
字符串，其名称为全名，它返回名字和姓氏

716
01:25:56,879 --> 01:26:01,760
中间有空格的内存，然后在这里你可以说打印

717
01:26:01,760 --> 01:26:04,398
对我来说 foo 好吧

718
01:26:04,398 --> 01:26:09,279
和 command s 然后我会带上我会删除标题，这样你就可以看到

719
01:26:09,279 --> 01:26:13,279
foo bar 打印到屏幕上好吗

720
01:26:13,279 --> 01:26:19,199
所以这是扩展名，我要注意，在我这里我要标记它

721
01:26:19,199 --> 01:26:23,439
在我的笔记中，我们已经讨论过扩展了

722
01:26:23,439 --> 01:26:27,279
现在接下来要谈的下一个话题是期货

723
01:26:27,279 --> 01:26:30,959
正如您在此处看到的那样，future 是将来要作为其名称返回的数据

724
01:26:30,959 --> 01:26:33,520
建议所以嗯

725
01:26:33,520 --> 01:26:36,879
如果你还没有的话，这就是所谓的异步编程的一部分

726
01:26:36,879 --> 01:26:40,799
你之前一直在做编程，你可能不是这样

727
01:26:40,799 --> 01:26:44,799
熟悉术语同步或异步 um

728
01:26:44,799 --> 01:26:49,600
同步任务是当你请求它并且它发生时发生的任务

729
01:26:49,600 --> 01:26:53,199
立即返回您要求的数据

730
01:26:53,199 --> 01:26:58,559
例如，如果你说 um 什么是 2 plus 2 然后我们会说

731
01:26:58,559 --> 01:27:03,600
好的，这是同步任务的四个，但是如果您例如对您的

732
01:27:03,600 --> 01:27:08,158
嗯，配偶或你的朋友今天请去杂货店，然后

733
01:27:08,158 --> 01:27:11,760
得到一些不会在这一刻发生的牛奶

734
01:27:11,760 --> 01:27:16,398
我的意思是即使你是你旁边的杂货店

735
01:27:16,398 --> 01:27:19,359
房子或你的公寓，然后你的朋友必须离开

736
01:27:19,359 --> 01:27:25,040
准备好穿上鞋子去商店取邮​​件可以回来所以

737
01:27:25,040 --> 01:27:31,040
嗯，那是一个异步任务，所以异步任务基本上是一个任务

738
01:27:31,040 --> 01:27:34,158
结果未返回的

739
01:27:34,158 --> 01:27:36,799
马上就好了

740
01:27:36,799 --> 01:27:40,079
到目前为止，我们已经查看了我实际上要使用的功能

741
01:27:40,079 --> 01:27:44,238
从这里删除所有这些代码，这样我们就没有所有这些了

742
01:27:44,238 --> 01:27:48,238
现在我们这里只有 void 测试功能了

743
01:27:48,238 --> 01:27:51,600
所以

744
01:27:51,600 --> 01:27:55,520
到目前为止，我们编写的所有函数都是同步函数

745
01:27:55,520 --> 01:28:00,398
例如，您会说字符串乘以

746
01:28:00,398 --> 01:28:05,600
2 然后它得到一个整数 a 它只是说 a 乘以 2 all

747
01:28:05,600 --> 01:28:09,760
正确且实际上很抱歉的提示，因此它返回一个

748
01:28:09,760 --> 01:28:13,120
整数 函数调用 函数名被调用乘以 2 it

749
01:28:13,120 --> 01:28:16,079
将整数作为参数，然后将该整数乘以 2，然后

750
01:28:16,079 --> 01:28:21,040
返回它这是一个同步操作，但是如果你想工作的话，在泥土中

751
01:28:21,040 --> 01:28:24,079
使用您必须执行的异步操作

752
01:28:24,079 --> 01:28:29,520
使用一个名为 future 的类，所以让我们看看那个，嗯，让我们说

753
01:28:29,520 --> 01:28:35,600
你有一个函数乘以它可能需要的两倍

754
01:28:35,600 --> 01:28:40,318
一些时间来乘以一个值，好吧，这是假设的，因为是的

755
01:28:40,318 --> 01:28:43,120
乘法将立即完成，但我们只是要

756
01:28:43,120 --> 01:28:46,398
假设是的，这是一个复杂的乘法，它需要一些

757
01:28:46,398 --> 01:28:51,040
时间好吧，让我们说未来，然后你会说什么是实际的

758
01:28:51,040 --> 01:28:55,760
未来它包含什么数据类型我们可以说整数然后我们说

759
01:28:55,760 --> 01:28:58,000
沉重的未来

760
01:28:58,000 --> 01:29:02,398
好的，它的值是 int a heavy

761
01:29:02,398 --> 01:29:06,879
未来乘以两个类似的东西

762
01:29:06,879 --> 01:29:12,639
好的，所以它说我现在返回一个未来

763
01:29:12,639 --> 01:29:16,879
在这里然后你你的嗯

764
01:29:16,879 --> 01:29:21,600
职责是创建和打包一个整数并将其返回到一个

765
01:29:21,600 --> 01:29:25,439
未来所以如果你在这里说好的

766
01:29:25,439 --> 01:29:29,359
return 10 好吧，你看它说 l10 不是

767
01:29:29,359 --> 01:29:34,478
与整数的未来兼容，因为 10 是一个同步值

768
01:29:34,478 --> 01:29:39,359
就在那里，它就在那儿，所以你在这里做什么，然后你可以说

769
01:29:39,359 --> 01:29:43,760
好吧，我返回的是一个未来，然后你可以说哦，我要去

770
01:29:43,760 --> 01:29:49,120
将这个未来延迟三秒，好吧

771
01:29:49,120 --> 01:29:53,359
然后你会看到这个延迟函数有第二个参数

772
01:29:53,359 --> 01:29:57,680
嗯，你可以看到它让我们看看

773
01:29:57,680 --> 01:30:02,398
呃，如果我们看看这里的延迟函数，你会发现还有第二个

774
01:30:02,398 --> 01:30:06,079
称为未来或计算的参数

775
01:30:06,079 --> 01:30:09,840
在这里你需要做的就是说好

776
01:30:09,840 --> 01:30:14,639
我的第二个参数是一个函数，我将很好地忽略它的返回值

777
01:30:14,639 --> 01:30:17,439
我只是要返回一个好的值

778
01:30:17,439 --> 01:30:22,879
所以让我们实际看看我们是否说未来延迟持续时间秒然后

779
01:30:22,879 --> 01:30:29,840
我们说参数是让我们说 e 然后我只想说 return a

780
01:30:29,840 --> 01:30:34,318
这个值是多少然后你知道我们实际上可以看到什么

781
01:30:34,318 --> 01:30:38,398
未来的文档延迟，所以我也可以刷新我的想法

782
01:30:38,398 --> 01:30:41,920
所以我要去打开一个新的野生动物园窗口，我要说未来

783
01:30:41,920 --> 01:30:44,959
延迟这是通常的东西类型

784
01:30:44,959 --> 01:30:48,559
无论如何，如果你用 dart 编程我也会增加

785
01:30:48,559 --> 01:30:50,879
大小，以便您可以更好地看到它

786
01:30:50,879 --> 01:30:54,398
让我们看看未来的延迟

787
01:30:54,398 --> 01:30:58,079
在这里我们可以看到它是如何构建的

788
01:30:58,079 --> 01:31:02,158
如何使用future 好，所以你可以在这里看到有一个

789
01:31:02,158 --> 01:31:06,719
它基本上不带任何价值的功能，所以

790
01:31:06,719 --> 01:31:12,000
我认为问题在于我可能刚刚创建了一个类似 um 的函数

791
01:31:12,000 --> 01:31:16,719
期待一个参数，所以这就是你要这样做的方式，我的意思是

792
01:31:16,719 --> 01:31:20,318
这是一个有点奇怪的论点，就像我实际上要清理它一样

793
01:31:20,318 --> 01:31:23,760
一点点，然后尽可能使它成为一个常数

794
01:31:23,760 --> 01:31:28,000
看到这里的建议然后返回所以我写了很多我没有的代码

795
01:31:28,000 --> 01:31:31,840
真的解释了我在这里做了什么，但我现在会这样做，让我们看看

796
01:31:31,840 --> 01:31:36,959
呃，我们是说我们将来会返回一个整数，所以

797
01:31:36,959 --> 01:31:39,680
它不会立即归还它需要一些时间

798
01:31:39,680 --> 01:31:44,639
让它做它的计算好吧，然后在这里让我们说 a 乘以 2 为

799
01:31:44,639 --> 01:31:48,639
正如我们在函数签名中所承诺的那样，这就是未来的 int

800
01:31:48,639 --> 01:31:52,079
这是函数的名称，所以没有什么神奇的，然后它

801
01:31:52,079 --> 01:31:56,559
在我们所说的函数体中接受一个表示整数 a 的参数

802
01:31:56,559 --> 01:32:02,079
好的，我们正在返回一个未来，但我们将它的返回延迟了

803
01:32:02,079 --> 01:32:06,478
三秒，所以你可以看到，如果你进去的话，这里是一堂课

804
01:32:06,478 --> 01:32:09,680
实际上是宪法还可以，然后可能有一个班级

805
01:32:09,680 --> 01:32:15,520
在某个地方，让我们看看

806
01:32:15,520 --> 01:32:22,000
我相信宪法在等等等等宪法持续时间运营商

807
01:32:22,000 --> 01:32:27,040
这是我的意思是持续时间飞镖它可能只是一个课程持续时间

808
01:32:27,040 --> 01:32:31,120
如果您在这里查看课程持续时间，那么在某个地方

809
01:32:31,120 --> 01:32:34,238
所以我们说我们正在创建一个持续时间作为第一个参数

810
01:32:34,238 --> 01:32:38,318
未来的延迟功能所以我们说我们正在延迟这个未来的

811
01:32:38,318 --> 01:32:41,840
返回值三秒，然后它说好的，我要等三秒

812
01:32:41,840 --> 01:32:45,359
秒，但我等了三秒后，我要打电话给这个

813
01:32:45,359 --> 01:32:48,000
函数，这有点像

814
01:32:48,000 --> 01:32:52,719
创建一个内联函数你也可以这样做你说好吧我的

815
01:32:52,719 --> 01:32:56,318
我提供给这个函数的函数，所以就像你在传递一个

816
01:32:56,318 --> 01:33:00,719
函数到未来的延迟函数，然后在这里你可以说好的

817
01:33:00,719 --> 01:33:06,080
我返回一个乘以二，然后是一个分号，所以这可能有点

818
01:33:06,080 --> 01:33:09,919
更容易阅读所以嗯

819
01:33:09,919 --> 01:33:15,199
现在我们有了这个，我们实际上可以在

820
01:33:15,199 --> 01:33:19,759
我们的测试在我们的测试功能所以

821
01:33:19,759 --> 01:33:24,000
当你然后嗯我的意思是现在我们实际上我们现在

822
01:33:24,000 --> 01:33:29,039
谈了一点关于未来的事情，为了使用

823
01:33:29,039 --> 01:33:32,000
未来那么你需要知道一些关于

824
01:33:32,000 --> 01:33:35,199
现在异步并等待飞镖

825
01:33:35,199 --> 01:33:39,919
async 和 await 彼此非常相关，但相当

826
01:33:39,919 --> 01:33:42,561
它们的含义不同，嗯

827
01:33:42,561 --> 01:33:46,638
我现在只想解释一下实际上首先 async

828
01:33:46,638 --> 01:33:52,319
async 是 dart 中的一个关键词，将函数标记为异步

829
01:33:52,319 --> 01:33:55,680
记住同步是立即返回的东西，而异步是

830
01:33:55,680 --> 01:33:59,520
不会立即返回的东西需要一些时间

831
01:33:59,520 --> 01:34:04,958
在这里标记一个函数异步，这意味着这个函数在内部

832
01:34:04,958 --> 01:34:09,840
可以执行不立即返回的命令

833
01:34:09,840 --> 01:34:13,919
所以 ac 将函数标记为异步它

834
01:34:13,919 --> 01:34:18,561
这意味着这个函数在内部调用了其他函数

835
01:34:18,561 --> 01:34:24,638
异步工作所以我们现在说最终的结果是

836
01:34:24,638 --> 01:34:28,561
沉重的未来，我们说 10 好吧

837
01:34:28,561 --> 01:34:32,479
现在我们已经完成了，让我打印结果，你会感到惊讶

838
01:34:32,479 --> 01:34:36,240
当我们这样做时实际看到结果，你会看到它

839
01:34:36,240 --> 01:34:39,199
不是你想的那样不会是 20 好吧

840
01:34:39,199 --> 01:34:43,759
所以我要去掉这个标题，这样你就可以看到结果了

841
01:34:43,759 --> 01:34:47,278
将在控制台和命令中清除结果

842
01:34:47,278 --> 01:34:52,319
你会看到打印到屏幕上的实际上是未来不是

843
01:34:52,319 --> 01:34:56,561
不是您认为的值 20 应该是

844
01:34:56,561 --> 01:35:00,879
乘以 2 应该是 20。所以这里发生的事情是当你打电话时

845
01:35:00,879 --> 01:35:04,561
一个返回未来的函数，你实际上正在获得未来

846
01:35:04,561 --> 01:35:09,520
没有取回其数据，那么您如何通过以下方式很好地取回该数据

847
01:35:09,520 --> 01:35:14,080
在函数前面加上关键字 await

848
01:35:14,080 --> 01:35:20,240
所以它的名字表明这个关键字只是等待

849
01:35:20,240 --> 01:35:23,840
这个函数的结果被计算然后它会去

850
01:35:23,840 --> 01:35:26,958
下一行好吧

851
01:35:26,958 --> 01:35:30,879
这两个彼此非常相关，如果我删除 async 你会看到

852
01:35:30,879 --> 01:35:34,879
然后我会收到一个错误，说你说的很好

853
01:35:34,879 --> 01:35:38,958
调用 test 是一个同步函数，它只返回 void

854
01:35:38,958 --> 01:35:43,599
基本上意味着它不返回任何东西并且它异步执行它

855
01:35:43,599 --> 01:35:47,599
工作，不必等待任何事情

856
01:35:47,599 --> 01:35:51,118
但是然后在你说的函数里面等待，这意味着是的，我必须

857
01:35:51,118 --> 01:35:54,319
等待一些时间，这不好，所以

858
01:35:54,319 --> 01:35:58,400
那么你需要做的是你在内部用 async 标记你的函数

859
01:35:58,400 --> 01:36:02,159
在那个功能中，您可以使用权重

860
01:36:02,159 --> 01:36:07,520
然后重量本身用于

861
01:36:07,520 --> 01:36:12,479
等待未来的结果好吧，所以如果你删除这个异步和

862
01:36:12,479 --> 01:36:16,840
然后你删除这个等待一切都会正常工作，但它只是

863
01:36:16,840 --> 01:36:22,719
同步得到乘以二的沉重未来的未来和

864
01:36:22,719 --> 01:36:27,199
打印它，这样它就不会在这里做任何异步工作你可以看到

865
01:36:27,199 --> 01:36:31,840
它只是获取那个实例，所以现在我们调用 let's command s

866
01:36:31,840 --> 01:36:35,520
你会看到它正在等待三秒钟然后打印

867
01:36:35,520 --> 01:36:39,118
结果 20 到屏幕上没问题，所以

868
01:36:39,118 --> 01:36:43,919
对我们来说是异步的，重量级的，我们将使用异步，并且以某种方式

869
01:36:43,919 --> 01:36:48,159
并且在这门课程中等待很多，所以如果可以的话，那就太好了

870
01:36:48,159 --> 01:36:51,278
有了我给你的这些信息，如果你能有一点点的话

871
01:36:51,278 --> 01:36:54,879
阅读关于未来之类的文档

872
01:36:54,879 --> 01:36:58,319
在网络上，所以如果你只是搜索未来

873
01:36:58,319 --> 01:37:03,759
dart um 和 async await 并阅读一些关于它们的信息，因为

874
01:37:03,759 --> 01:37:06,958
它们对于在 dart 中进行异步工作非常重要，以至于我们只是

875
01:37:06,958 --> 01:37:10,719
不能跳过他们好吗

876
01:37:10,719 --> 01:37:15,199
好吧，现在我们已经谈到了未来

877
01:37:15,199 --> 01:37:19,118
呃，我们已经讨论过异步和等待

878
01:37:19,118 --> 01:37:23,039
所以我会把它们标记为

879
01:37:23,039 --> 01:37:28,400
在我的笔记中完成 嗯下一个话题要谈

880
01:37:28,400 --> 01:37:31,759
这将是流

881
01:37:31,759 --> 01:37:38,000
所以正如你在这里看到的，dart 中的 future 是一个控制计算的类

882
01:37:38,000 --> 01:37:42,561
一个异步值，以便在将来的某个时间点返回

883
01:37:42,561 --> 01:37:45,919
但是经常在

884
01:37:45,919 --> 01:37:50,719
在您的客户工作甚至服务器工作中，您需要做的工作是

885
01:37:50,719 --> 01:37:56,240
异步但是它是连续工作，例如，如果你喜欢我有

886
01:37:56,240 --> 01:38:01,599
时间呃显示在我屏幕右上角的时间

887
01:38:01,599 --> 01:38:05,359
那是一个字符串流

888
01:38:05,359 --> 01:38:11,840
它是一个它是一个流，因为它没有准备好结束它它是一个

889
01:38:11,840 --> 01:38:15,919
每分钟都有连续的信息管道

890
01:38:15,919 --> 01:38:20,400
右上角的小自动收报机它会增加

891
01:38:20,400 --> 01:38:24,638
它会去零六五十零六五十六百五十六所以

892
01:38:24,638 --> 01:38:29,039
它不断计算当前时间，就像发送它一样

893
01:38:29,039 --> 01:38:32,240
这个管道现在在异步编程和

894
01:38:32,240 --> 01:38:36,240
反应式编程，如果你是

895
01:38:36,240 --> 01:38:39,199
学习本课程，或者如果您正在学习其他课程，您可以

896
01:38:39,199 --> 01:38:43,199
实际上有兴趣了解有关流的更多信息

897
01:38:43,199 --> 01:38:47,759
和反应流一个流只是一个数据管道

898
01:38:47,759 --> 01:38:50,719
嗯，要么

899
01:38:50,719 --> 01:38:56,561
它要么完成，要么永远不会完成

900
01:38:56,561 --> 01:39:02,159
实际上它成功完成或从未完成或出错

901
01:39:02,159 --> 01:39:06,561
死了好吧

902
01:39:06,561 --> 01:39:11,840
它不是早上的 0 6 50，而是永远不会完成的数据流

903
01:39:11,840 --> 01:39:15,680
因为时间只是不断向前

904
01:39:15,680 --> 01:39:21,359
所以当我们谈论流时，我们只是指未来的数据管道

905
01:39:21,359 --> 01:39:25,278
将数据发送到这个管道

906
01:39:25,278 --> 01:39:28,479
永远不会像你在未来的情况下看到的那样结束

907
01:39:28,479 --> 01:39:32,958
未来结束它计算它的数据并返回它说我完成了

908
01:39:32,958 --> 01:39:38,957
但是 dart 中的流是一个继续工作的未来

909
01:39:38,957 --> 01:39:42,878
好的，所以它会在未来计算一些数据，并将其发送到

910
01:39:42,878 --> 01:39:46,560
流，它说哦，好吧，我还没完成这里的另一个数据这里的另一个数据

911
01:39:46,560 --> 01:39:49,119
可以，然后呢

912
01:39:49,119 --> 01:39:55,520
让我们看看这个呃流，看看我们如何处理流

913
01:39:55,520 --> 01:40:02,797
所以让我们去创建一个 um 的流让我们说一个字符串

914
01:40:02,797 --> 01:40:08,797
然后我们说现在在这里取名字好

915
01:40:08,797 --> 01:40:14,560
你的工作是创建一个字符串，所以如果你说 return hello

916
01:40:14,560 --> 01:40:18,560
看到 hello 与您承诺的返回类型不兼容

917
01:40:18,560 --> 01:40:22,797
将是一个字符串，嗯，所以你这与如何

918
01:40:22,797 --> 01:40:26,718
我们处理了你无法返回的整数的未来

919
01:40:26,718 --> 01:40:30,637
那个未来的整数，但你必须创造一个整数和内部的未来

920
01:40:30,637 --> 01:40:33,919
该函数返回的实际整数是

921
01:40:33,919 --> 01:40:36,957
计算如果我回去你会看到

922
01:40:36,957 --> 01:40:40,878
代码在这里正确的未来延迟和里面

923
01:40:40,878 --> 01:40:43,919
函数你实际上在做计算

924
01:40:43,919 --> 01:40:46,878
那么我们如何创建一个流，你可以

925
01:40:46,878 --> 01:40:50,878
只是说流然后你可以说

926
01:40:50,878 --> 01:40:57,599
好的，例如周期性的，或者一个值，如果你说我们返回一个流

927
01:40:57,599 --> 01:41:00,560
value 然后你可以说 foo

928
01:41:00,560 --> 01:41:03,840
被接受 这意味着你有一个管道

929
01:41:03,840 --> 01:41:07,759
数据，但它包含的唯一值是

930
01:41:07,759 --> 01:41:10,878
foo 是食物的价值，没关系

931
01:41:10,878 --> 01:41:16,878
所以现在让我们进入这个测试函数并尝试使用这个 uh 流，如果你

932
01:41:16,878 --> 01:41:21,200
刚刚说最终价值是让我

933
01:41:21,200 --> 01:41:25,919
你只需打印这个值然后我会清除日志

934
01:41:25,919 --> 01:41:30,000
在这里说 command s 你会看到就像 future 它只是说 instance

935
01:41:30,000 --> 01:41:35,759
控制器流可以，所以它不是字符串中的实际值，所以

936
01:41:35,759 --> 01:41:39,279
问题是你如何等待值

937
01:41:39,279 --> 01:41:44,479
在流中你可以说好的等待

938
01:41:44,479 --> 01:41:47,439
它说好的你实际上我们可以读到这个重量

939
01:41:47,439 --> 01:41:50,797
应用于不是未来的流字符串，所以

940
01:41:50,797 --> 01:41:54,957
dart 理解你正在等待流，但是

941
01:41:54,957 --> 01:41:58,159
这不仅仅是你要等待的未来

942
01:41:58,159 --> 01:42:02,400
没有什么可以等待的，就像它不是一个单一的值是一个流，所以

943
01:42:02,400 --> 01:42:05,840
这样做的语法是等待

944
01:42:05,840 --> 01:42:10,159
四个好的所以这是一个语法

945
01:42:10,159 --> 01:42:15,040
对于等待流中的值，您可以说等待最终值

946
01:42:15,040 --> 01:42:18,000
以它的名义好吧

947
01:42:18,000 --> 01:42:20,957
然后你可以打印这个值，所以这有点奇怪

948
01:42:20,957 --> 01:42:25,439
语法，但如果你像用英语一样阅读它，那么你是完全有道理的

949
01:42:25,439 --> 01:42:31,040
如果您只是忽略此处的 final，则等待 get 名称中的值

950
01:42:31,040 --> 01:42:33,520
好的，但是用英语从左到右阅读

951
01:42:33,520 --> 01:42:37,759
正确等待获取名称中的值就是这样

952
01:42:37,759 --> 01:42:41,360
然后最后我要说打印流

953
01:42:41,360 --> 01:42:45,520
完成工作

954
01:42:45,520 --> 01:42:50,637
这里是控制台命令 s，你会立即看到它说 foo

955
01:42:50,637 --> 01:42:54,637
然后流完成工作我要清除它命令

956
01:42:54,637 --> 01:42:59,680
foo 流完成工作正常，所以这是一个有趣的概念，但是

957
01:42:59,680 --> 01:43:03,279
它仍然不是流，我的意思是我们正在将完整的字符串打包在里面

958
01:43:03,279 --> 01:43:07,599
流，但这只是我们可以做的一个值

959
01:43:07,599 --> 01:43:11,599
有了未来，所以让我们利用实际的流

960
01:43:11,599 --> 01:43:15,919
在其管道中发送数据的功能

961
01:43:15,919 --> 01:43:19,759
连续所以我们可以在这里做的说流

962
01:43:19,759 --> 01:43:24,718
周期性的，它意味着周期性地产生值，在这里你可以看到第一个

963
01:43:24,718 --> 01:43:28,957
参数是一个持续时间，所以我们说恒定的持续时间

964
01:43:28,957 --> 01:43:34,957
每秒秒数可以，然后这里有第二个参数

965
01:43:34,957 --> 01:43:38,560
如果我定期将鼠标移到上方，您必须提供，您会看到

966
01:43:38,560 --> 01:43:44,000
第二个参数是这个字符串函数 int 好所以这意味着给我一个

967
01:43:44,000 --> 01:43:49,439
接受整数然后返回字符串的函数

968
01:43:49,439 --> 01:43:52,957
它知道它需要返回一个字符串，因为你在说

969
01:43:52,957 --> 01:43:59,040
如果您将其更改为 int 然后转到此处，则您的流是一个字符串

970
01:43:59,040 --> 01:44:03,759
嗯到文档和文档实际上或

971
01:44:03,759 --> 01:44:07,040
方法签名会变成说你应该支持你

972
01:44:07,040 --> 01:44:10,479
应该在你提供给我的这个函数中取一个整数，然后

973
01:44:10,479 --> 01:44:13,840
你需要返回一个整数，这样我只想给你看

974
01:44:13,840 --> 01:44:17,919
函数签名中显示的那个字符串是因为我们

975
01:44:17,919 --> 01:44:21,680
承诺在我们的函数中返回一个字符串

976
01:44:21,680 --> 01:44:25,040
让我们进入这里基本上是函数签名说的

977
01:44:25,040 --> 01:44:28,878
你需要接受一个整数，所以我只想说价值

978
01:44:28,878 --> 01:44:34,080
然后让我们进去吧，我只想说 return foo

979
01:44:34,080 --> 01:44:38,718
所以我们基本上符合我们的函数签名

980
01:44:38,718 --> 01:44:42,560
说我们取了一些值，你看到这个值是一个整数

981
01:44:42,560 --> 01:44:47,520
然后我们会返回一个字符串，所以现在我们可以使用它，所以如果我清除

982
01:44:47,520 --> 01:44:52,479
这个日志，我说命令，你看到每秒 foo 的值是

983
01:44:52,479 --> 01:44:54,560
将被打印到屏幕上

984
01:44:54,560 --> 01:44:58,637
实际上我需要删除这个标题我可以看到你看不到它

985
01:44:58,637 --> 01:45:02,400
你看 10 次 11 次 12 13

986
01:45:02,400 --> 01:45:05,759
14. 所以没关系

987
01:45:05,759 --> 01:45:09,279
嗯，我很抱歉标题挡住了我不知道的屏幕

988
01:45:09,279 --> 01:45:13,919
嗯，或者实际上我知道这一点，但我忘记了在

989
01:45:13,919 --> 01:45:19,040
在我说话的时候，你可以看到每一秒

990
01:45:19,040 --> 01:45:25,279
流现在正在发送一个值，这基本上就是

991
01:45:25,279 --> 01:45:28,637
使用流，你会

992
01:45:28,637 --> 01:45:33,840
实际上我想知道我们是否要在这门课程中使用流，我相信

993
01:45:33,840 --> 01:45:39,840
在某些时候，我们可能需要看看嗯

994
01:45:39,840 --> 01:45:44,400
看看我的笔记是的，我可以看到我们实际上正在使用

995
01:45:44,400 --> 01:45:48,560
本课程中的流，所以不用担心

996
01:45:48,560 --> 01:45:53,040
如果你现在不完全理解流，因为我们要谈谈

997
01:45:53,040 --> 01:45:57,439
关于流和嗯

998
01:45:57,439 --> 01:46:01,919
因为我们稍后会真正讨论流和流控制器

999
01:46:01,919 --> 01:46:03,759
这在这

1000
01:46:03,759 --> 01:46:07,200
当然，现在只知道流就像

1001
01:46:07,200 --> 01:46:11,680
未来，但它可以连续或定期返回

1002
01:46:11,680 --> 01:46:18,637
值，然后您可以使用 await for 等待这些值

1003
01:46:18,637 --> 01:46:23,040
语法和飞镖没问题

1004
01:46:23,040 --> 01:46:25,919
好的嗯

1005
01:46:25,919 --> 01:46:30,240
现在下一个话题

1006
01:46:30,240 --> 01:46:36,479
本章讲的是生成器所以

1007
01:46:36,479 --> 01:46:39,759
生成器在飞镖中非常有趣

1008
01:46:39,759 --> 01:46:45,200
其他一些语言也支持生成器和

1009
01:46:45,200 --> 01:46:48,957
但并非所有现代语言都这样做

1010
01:46:48,957 --> 01:46:55,360
dart 中的生成器是一个返回的函数

1011
01:46:55,360 --> 01:47:03,040
我不想说可迭代，但它会返回一个列表

1012
01:47:03,040 --> 01:47:07,360
但它在内部计算数据

1013
01:47:07,360 --> 01:47:12,159
非常简单的方法，这是我能来的最好的解释

1014
01:47:12,159 --> 01:47:14,637
说实话，让我们看看这里

1015
01:47:14,637 --> 01:47:18,240
我认为最好的方法实际上是编写一个函数

1016
01:47:18,240 --> 01:47:23,439
创建一个生成器，好吧，我要清除这个，嗯

1017
01:47:23,439 --> 01:47:26,637
然后我们在这里有一个测试功能让我们标记系带好

1018
01:47:26,637 --> 01:47:30,319
嗯，让我们现在去创建一个生成器，然后

1019
01:47:30,319 --> 01:47:32,957
假设我们想要

1020
01:47:32,957 --> 01:47:36,637
创建一个返回值一二三的函数

1021
01:47:36,637 --> 01:47:38,878
嗯

1022
01:47:38,878 --> 01:47:44,718
一种方法是说我想要一个整数列表，我的

1023
01:47:44,718 --> 01:47:50,637
函数或像这样得到一二三

1024
01:47:50,637 --> 01:47:54,319
你可以说像那样返回一二三，这完全是

1025
01:47:54,319 --> 01:47:57,040
有效的另一种方法是使用

1026
01:47:57,040 --> 01:48:02,637
称为可迭代和可迭代的东西我的意思是你需要

1027
01:48:02,637 --> 01:48:05,759
了解迭代实际上是什么，它们有点像懒惰

1028
01:48:05,759 --> 01:48:10,637
集合，当你习惯做更多的软件工程时，你会

1029
01:48:10,637 --> 01:48:15,759
了解更多为什么我们使用惰性集合

1030
01:48:15,759 --> 01:48:21,919
但现在只知道迭代是一个准备好的和打包的列表

1031
01:48:21,919 --> 01:48:24,797
事情，但不是

1032
01:48:24,797 --> 01:48:29,840
刚开始时未完全计算

1033
01:48:29,840 --> 01:48:34,080
有点像餐厅的运作方式

1034
01:48:34,080 --> 01:48:38,159
例如，在一个典型的夜晚，一家餐厅可能有 50 位顾客

1035
01:48:38,159 --> 01:48:42,878
当夜班开始时

1036
01:48:42,878 --> 01:48:47,360
不是所有的食物都准备好了我的意思是它不可能像第一次切的那样

1037
01:48:47,360 --> 01:48:51,040
顾客进来我们可以说第 50 位顾客的食物已经

1038
01:48:51,040 --> 01:48:55,119
在厨房里准备好这就是餐厅的运作方式

1039
01:48:55,119 --> 01:48:59,680
听取客户的订单，然后根据

1040
01:48:59,680 --> 01:49:05,040
订单这就是可迭代的工作方式，但是 dart 中的列表已经是

1041
01:49:05,040 --> 01:49:09,279
打包清单这意味着就像你去超市然后

1042
01:49:09,279 --> 01:49:12,479
你买好了准备出发

1043
01:49:12,479 --> 01:49:18,637
已经包装好的食物 30 包 30 准备好的清单

1044
01:49:18,637 --> 01:49:24,319
容易包装的食品，然后你拿走这就是清单的工作方式，但是

1045
01:49:24,319 --> 01:49:27,040
可迭代更像是

1046
01:49:27,040 --> 01:49:32,240
这是一个在旅途中计算出来的类似事物的列表

1047
01:49:32,240 --> 01:49:35,599
在飞行中没事，所以

1048
01:49:35,599 --> 01:49:38,797
嗯，现在只知道，所以我们只是说

1049
01:49:38,797 --> 01:49:42,319
要么很好，正如你所看到的，dart 明白，好的，列表也是

1050
01:49:42,319 --> 01:49:45,439
眼睛有问题，所以我不必担心，所以它没有给你一个

1051
01:49:45,439 --> 01:49:48,479
错误所以让我们走吧，实际上而不是

1052
01:49:48,479 --> 01:49:51,759
做一二三让我们去标记我们的

1053
01:49:51,759 --> 01:49:56,560
嗯，作为一个发电机，你用

1054
01:49:56,560 --> 01:50:03,919
同步或异步都可以，这将是一个流

1055
01:50:03,919 --> 01:50:09,680
现在带星号的同步和带星号的异步之间的区别

1056
01:50:09,680 --> 01:50:13,520
星号是同步功能是

1057
01:50:13,520 --> 01:50:19,279
它是一个生成器函数，它返回一个事物列表，但它计算出

1058
01:50:19,279 --> 01:50:22,957
异步的事情列表，你可以猜到

1059
01:50:22,957 --> 01:50:28,637
与同步星号等效的异步它执行完全相同的操作，但返回

1060
01:50:28,637 --> 01:50:32,560
一个流，这意味着它是异步的

1061
01:50:32,560 --> 01:50:38,000
计算它的结果没问题，所以当你将函数标记为同步时

1062
01:50:38,000 --> 01:50:42,560
然后不要像这样去回来，因为你可以看到你

1063
01:50:42,560 --> 01:50:46,560
可以看到它说你正在创建一个生成器函数，所以你必须善良

1064
01:50:46,560 --> 01:50:52,479
现在计算你的结果你不能只把一堆东西还给我好吗

1065
01:50:52,479 --> 01:50:56,560
所以要做到这一点，你会在

1066
01:50:56,560 --> 01:51:00,479
飞镖称为产量现在产量是

1067
01:51:00,479 --> 01:51:04,400
一个非常有趣的关键字，您只能在生成器函数中使用

1068
01:51:04,400 --> 01:51:07,759
据我所知，在这里你告诉飞镖

1069
01:51:07,759 --> 01:51:14,479
好的，我在可迭代中输出的第一个值是一个的值，所以

1070
01:51:14,479 --> 01:51:19,439
如果在这里我们去说嗯

1071
01:51:19,439 --> 01:51:24,797
我知道或者说我们说四值

1072
01:51:24,797 --> 01:51:30,240
得到一二三然后你可以说打印值

1073
01:51:30,240 --> 01:51:33,759
你可以看到它只打印 1 的值。我实际上要摆脱这个

1074
01:51:33,759 --> 01:51:38,637
标题你可以看到输出它只打印 1 的值

1075
01:51:38,637 --> 01:51:43,040
因为我们产生了 1 的值。好的，所以你可以发送然后说 yield

1076
01:51:43,040 --> 01:51:47,599
一产生二和产生三然后你会看到值一二三

1077
01:51:47,599 --> 01:51:50,637
所以在这个函数内部然后你

1078
01:51:50,637 --> 01:51:54,240
可以做很多其他重要的事情，也许是同步的，呃，其他的

1079
01:51:54,240 --> 01:51:58,159
同步计算，每次你有一个值要输出

1080
01:51:58,159 --> 01:52:01,840
那么你基本上会嗯

1081
01:52:01,840 --> 01:52:08,560
你会做一个产量，你也可以打印整个返回值

1082
01:52:08,560 --> 01:52:12,637
是的，你不必做一个四循环，所以你可以说打印它然后

1083
01:52:12,637 --> 01:52:16,797
它会说一二三好，但如果你做一个 for 循环，那么你

1084
01:52:16,797 --> 01:52:20,637
实际上利用了那个懒惰的嗯

1085
01:52:20,637 --> 01:52:25,360
eye turbo 的功能，因此您可以随时在循环中断开循环

1086
01:52:25,360 --> 01:52:30,400
是时候说打印值了

1087
01:52:30,400 --> 01:52:34,957
如果值为 2

1088
01:52:34,957 --> 01:52:40,080
那么你可以休息好，所以让我们清除日志和命令

1089
01:52:40,080 --> 01:52:44,159
你会看到只有一和二的值被打印出来，然后只要你

1090
01:52:44,159 --> 01:52:47,680
价值为 2 时，你正在打破，这意味着这个产量

1091
01:52:47,680 --> 01:52:54,479
基本上从来没有计算过，所以这就像美丽的

1092
01:52:54,479 --> 01:52:57,360
生成器函数

1093
01:52:57,360 --> 01:53:01,279
所以你也可以像我提到的那样创建异步生成器函数

1094
01:53:01,279 --> 01:53:06,159
这意味着你有点像创建一个迭代流

1095
01:53:06,159 --> 01:53:11,040
老实说异步生成器我已经用过

1096
01:53:11,040 --> 01:53:14,718
在我用飞镖的很多年里，有一两次呃

1097
01:53:14,718 --> 01:53:17,279
所以我认为你不会使用它们

1098
01:53:17,279 --> 01:53:22,319
很多，但只要知道它们就在那里，你可以通过给你的眼睛加上前缀来使用它们

1099
01:53:22,319 --> 01:53:25,680
高音与流说基本上你正在返回一个

1100
01:53:25,680 --> 01:53:29,840
一连串眼睛问题，然后用 async 为您的功能添加后缀

1101
01:53:29,840 --> 01:53:34,000
就这样，然后在这里它说好的，你说

1102
01:53:34,000 --> 01:53:37,200
你正在返回一个理想整数流，但你只转了一个

1103
01:53:37,200 --> 01:53:41,680
在这里的价值然后你会说好的一二

1104
01:53:41,680 --> 01:53:44,240
好的，但是你会说是的，然后你

1105
01:53:44,240 --> 01:53:47,919
有能力在这里做任何你想做的事情，比如返回一个实际的眼睛变量

1106
01:53:47,919 --> 01:53:51,360
好吧，老实说，我不打算谈论异步生成器

1107
01:53:51,360 --> 01:53:55,439
和你一起参加这门课程，因为它们有点超出范围

1108
01:53:55,439 --> 01:54:01,680
所以只要知道它们的存在，你就可以使用它们

1109
01:54:01,680 --> 01:54:05,040
好的，我将在我的笔记中标记我们已经讨论过生成器，所以

1110
01:54:05,040 --> 01:54:09,200
下一个话题是泛型

1111
01:54:09,200 --> 01:54:14,560
我要在这里提出一个标题，所以泛型

1112
01:54:14,560 --> 01:54:17,680
支持它的编程语言是

1113
01:54:17,680 --> 01:54:22,400
这样您就可以避免一遍又一遍地编写相同的代码

1114
01:54:22,400 --> 01:54:26,957
所以让我们说你我的意思是这是一个非常

1115
01:54:26,957 --> 01:54:30,479
典型的例子我知道这有点陈词滥调

1116
01:54:30,479 --> 01:54:33,599
但我认为这是陈词滥调是有原因的

1117
01:54:33,599 --> 01:54:36,797
那是因为这是一个很好的例子

1118
01:54:36,797 --> 01:54:41,279
假设你有一堂课

1119
01:54:41,279 --> 01:54:46,240
存储一对数据让我们说类

1120
01:54:46,240 --> 01:54:50,319
配对好吧，然后在这里你可以说好吧

1121
01:54:50,319 --> 01:54:55,520
我要存储的一对数据好吗我要存储

1122
01:54:55,520 --> 01:55:00,159
值一作为字符串，我还想将值二存储为字符串，然后你

1123
01:55:00,159 --> 01:55:04,080
为它创建构造函数

1124
01:55:04,080 --> 01:55:09,040
一对字符串，但是你如何将一个整数像两个整数那样配对

1125
01:55:09,040 --> 01:55:13,200
你会说好吧，我必须再上一对课，然后

1126
01:55:13,200 --> 01:55:18,240
这是一个整数，但是你有这个问题，因为

1127
01:55:18,240 --> 01:55:22,080
pair 已经在第七行定义为一个类

1128
01:55:22,080 --> 01:55:26,240
所以你不能重复使用你不能有相同的名字然后你会说好的

1129
01:55:26,240 --> 01:55:30,560
整数对

1130
01:55:30,560 --> 01:55:33,680
然后在这里你会说一对字符串

1131
01:55:33,680 --> 01:55:37,040
并且您确保构造函数名称也是

1132
01:55:37,040 --> 01:55:39,040
现在改正

1133
01:55:39,040 --> 01:55:44,479
我的意思是你可能也有我的意思是在这一点上我们没有逻辑

1134
01:55:44,479 --> 01:55:48,000
在这两个课程中，您实际上可能有很多逻辑

1135
01:55:48,000 --> 01:55:52,000
课程，但正如我提到的，我认为在其中一个

1136
01:55:52,000 --> 01:55:55,439
这些章节我认为是第一章或第二章的主要程序之一

1137
01:55:55,439 --> 01:56:00,240
软件工程师的特点就是大家都不喜欢

1138
01:56:00,240 --> 01:56:04,797
嗯，一遍又一遍地写相同的代码，所以

1139
01:56:04,797 --> 01:56:08,560
我们尽量避免

1140
01:56:08,560 --> 01:56:12,400
嗯重复我们自己

1141
01:56:12,400 --> 01:56:17,599
那就是泛型可以进来的地方，所以你可以做的不是做

1142
01:56:17,599 --> 01:56:22,000
这双让我把这​​个带到这里走走

1143
01:56:22,000 --> 01:56:25,840
创建一个通用的类，你会说pair

1144
01:56:25,840 --> 01:56:31,360
然后创建泛型类的一种格式是写在

1145
01:56:31,360 --> 01:56:37,200
类哦，只是到一个小于和大于符号好，然后打开你的广场

1146
01:56:37,200 --> 01:56:39,360
现在括号

1147
01:56:39,360 --> 01:56:43,439
在这里然后你定义你的泛型

1148
01:56:43,439 --> 01:56:50,560
像通常带有单个字符的数据类型的名称让我们说

1149
01:56:50,560 --> 01:56:56,240
你想要的是一对任何数据类型让我们称第一个数据类型为

1150
01:56:56,240 --> 01:57:00,637
第二个数据类型 b 因为有两个值所以我们称之为

1151
01:57:00,637 --> 01:57:06,240
一个 a 和一个 b 好的，你可以写它们，因为我们只是说我们说 a 和 b

1152
01:57:06,240 --> 01:57:10,878
好的，那么在这里你会说最终

1153
01:57:10,878 --> 01:57:14,000
一个值，所以你告诉编译器

1154
01:57:14,000 --> 01:57:19,759
好吧，我创建的第一个数据类型是我接受的

1155
01:57:19,759 --> 01:57:23,599
那应该放在这里然后我们说好的然后b是

1156
01:57:23,599 --> 01:57:26,637
第二个，然后我们为

1157
01:57:26,637 --> 01:57:30,240
没关系，那么您将如何使用它，那是您

1158
01:57:30,240 --> 01:57:37,360
会说 final 和 is pair 然后你会说 foo 和 bar 好

1159
01:57:37,360 --> 01:57:43,119
然后这就像一个简单的它非常类似于pair

1160
01:57:43,119 --> 01:57:46,878
我们在那里写的字符串，您会看到它也可以正常工作，但是现在在这种情况下

1161
01:57:46,878 --> 01:57:51,520
dart 足够聪明，可以理解 names 是一对字符串和字符串

1162
01:57:51,520 --> 01:57:56,560
这意味着您传递给这对泛型类的两个值是

1163
01:57:56,560 --> 01:58:02,718
实际上然后神奇地为您放置在 a 和 b 模板中

1164
01:58:02,718 --> 01:58:07,040
你在这里提供好的，所以如果在这种情况下，那么你说

1165
01:58:07,040 --> 01:58:10,560
好的，我有 foo 然后我有 20 的值

1166
01:58:10,560 --> 01:58:14,560
然后飞镖足够聪明，可以理解哦，现在它是一对绳子

1167
01:58:14,560 --> 01:58:16,957
整数所以

1168
01:58:16,957 --> 01:58:22,080
这就是你基本上使用呃泛型的方式所以我的意思是有这么多

1169
01:58:22,080 --> 01:58:27,119
谈论泛型以及如何做

1170
01:58:27,119 --> 01:58:30,240
呃基本上是利用它们来创造

1171
01:58:30,240 --> 01:58:35,520
非常简单的类，以便它们可以重复使用

1172
01:58:35,520 --> 01:58:41,360
功能或尽可能多的代码，而无需复制该代码，因此

1173
01:58:41,360 --> 01:58:45,840
老实说，谈论泛型可能是它自己的全部

1174
01:58:45,840 --> 01:58:51,439
当然我们可以继续，四点五六小时我可以谈论仿制药，所以

1175
01:58:51,439 --> 01:58:55,840
只知道泛型是这样创建的，你说类对，然后你

1176
01:58:55,840 --> 01:58:58,637
会说你的通用数据类型，然后在

1177
01:58:58,637 --> 01:59:02,159
案件然后反过来被放置在里面

1178
01:59:02,159 --> 01:59:06,240
类本身内部的定义很好

1179
01:59:06,240 --> 01:59:08,718
嗯

1180
01:59:08,718 --> 01:59:12,400
好吧，现在我们已经讨论了泛型，嗯，我相信我们可以

1181
01:59:12,400 --> 01:59:16,637
就像结束我们聊过的这个嗯章节

1182
01:59:16,637 --> 01:59:20,400
更多关于飞镖扩展期货的高级主题

1183
01:59:20,400 --> 01:59:24,479
异步等待流的权重流生成器和

1184
01:59:24,479 --> 01:59:29,520
仿制药现在好了，我真的很高兴我们

1185
01:59:29,520 --> 01:59:33,840
经历了第七章，也就是这一章，因为直到这

1186
01:59:33,840 --> 01:59:38,400
点我们有点像为我们的发布做准备

1187
01:59:38,400 --> 01:59:42,240
现在是我们把所有东西都放好的时候了

1188
01:59:42,240 --> 01:59:47,840
我们已经在实践中学到并实际开始构建我们的项目

1189
01:59:47,840 --> 01:59:52,000
所以我真的起鸡皮疙瘩了，因为它是如此重要的一部分

1190
01:59:52,000 --> 01:59:55,599
这门课程我们实际上已经完成了我们讨论过的基础知识

1191
01:59:55,599 --> 01:59:59,520
dart 我们已经讨论过一些设置模拟器的基础知识等

1192
01:59:59,520 --> 02:00:04,240
等等，我很高兴我可以说好的，我们现在已经经历了

1193
02:00:04,240 --> 02:00:08,000
而你现在需要做的就是练习，还有什么更好的方法来练习

1194
02:00:08,000 --> 02:00:13,200
练习而不是把你学到的东西付诸实践

1195
02:00:13,200 --> 02:00:15,680
书面申请

1196
02:00:15,680 --> 02:00:18,878
我们一直瞄准的颤振项目

1197
02:00:18,878 --> 02:00:23,439
从头做起 所以事不宜迟

1198
02:00:23,439 --> 02:00:26,797
准备下一章，即第八章，在第八章中，我们

1199
02:00:26,797 --> 02:00:30,718
会谈谈呃项目设置然后我们实际上是

1200
02:00:30,718 --> 02:00:34,637
将一些依赖项添加到我们将要使用的项目中

1201
02:00:34,637 --> 02:00:39,439
稍后好吧，所以让我们瞄准那个，我会看到你的

1202
02:00:39,439 --> 02:00:43,119
下一章你好，欢迎来到章号

1203
02:00:43,119 --> 02:00:47,040
本章要讲的八门课

1204
02:00:47,040 --> 02:00:50,957
关于我们在前几章中的基本项目设置

1205
02:00:50,957 --> 02:00:54,159
到目前为止，老实说，我们一直在使用 dart

1206
02:00:54,159 --> 02:00:57,680
有点像嗯为学习奠定基础

1207
02:00:57,680 --> 02:01:01,200
实际上嗯的编程语言

1208
02:01:01,200 --> 02:01:05,599
呃它助长了颤振，所以它是一种编程语言，你会

1209
02:01:05,599 --> 02:01:08,957
需要很舒服才能写出你的颤动

1210
02:01:08,957 --> 02:01:13,279
应用程序，因此随着我们继续进行，您将越来越多地了解飞镖

1211
02:01:13,279 --> 02:01:16,400
当然，但如果可以的话，那就太好了

1212
02:01:16,400 --> 02:01:21,040
看看介绍章节，然后就像跟随

1213
02:01:21,040 --> 02:01:26,400
直到这一点的章节，以便您大致了解飞镖是什么

1214
02:01:26,400 --> 02:01:30,400
关于然后如何在非常浅的层次上使用它我的意思是我知道

1215
02:01:30,400 --> 02:01:33,840
我有很多材料，但是

1216
02:01:33,840 --> 02:01:38,080
我们真的不喜欢深入每个话题所以我只是想给你

1217
02:01:38,080 --> 02:01:43,279
喜欢 dart 中不同可用选项的味道和味道

1218
02:01:43,279 --> 02:01:45,840
所以如果你还没有看过那些章节

1219
02:01:45,840 --> 02:01:50,159
请继续浏览它们，即使你已经很舒服了

1220
02:01:50,159 --> 02:01:52,797
用飞镖所以

1221
02:01:52,797 --> 02:01:56,080
在本章中，我们将讨论项目设置，这是

1222
02:01:56,080 --> 02:02:00,080
就像设置中绝对最重要的部分之一

1223
02:02:00,080 --> 02:02:04,797
嗯，一个颤振的申请，所以如果你是

1224
02:02:04,797 --> 02:02:09,759
如果你想跳过这一章，那也没关系，如果

1225
02:02:09,759 --> 02:02:12,240
你知道你在做什么，但如果这是你第一次设置

1226
02:02:12,240 --> 02:02:16,000
一个颤振的项目，如果可以的话，我认为它真的很好

1227
02:02:16,000 --> 02:02:23,840
跟随本章，所以我现在要进入 um

1228
02:02:23,840 --> 02:02:27,759
让我们在这里做一些设置所以我要做什么我要带我的脸

1229
02:02:27,759 --> 02:02:32,319
到右下角，这样你就可以看到整个屏幕

1230
02:02:32,319 --> 02:02:36,797
然后我要调出我们下一个项目的标题

1231
02:02:36,797 --> 02:02:43,439
要去谈谈，在这里我们有一个嗯

1232
02:02:43,439 --> 02:02:46,240
如您所见，您可以在终端中发出一个命令来创建

1233
02:02:46,240 --> 02:02:49,840
一个新的牙线项目，所以每个牙线项目都有不同的

1234
02:02:49,840 --> 02:02:54,797
属性它具有例如一个完整的名称，就像它的名称一样

1235
02:02:54,797 --> 02:02:59,279
整个项目嗯，也是其中之一

1236
02:02:59,279 --> 02:03:02,479
Flutter项目的主要属性是

1237
02:03:02,479 --> 02:03:05,680
标识符现在标识符不会这样

1238
02:03:05,680 --> 02:03:11,520
重要的是不是颤振实际上可以部署到 ios 和 android

1239
02:03:11,520 --> 02:03:16,080
一个 ios 应用程序和一个 android 应用程序的标识符是

1240
02:03:16,080 --> 02:03:20,319
实际上是什么将该应用程序定义为独特的

1241
02:03:20,319 --> 02:03:26,400
如在 ios ios 用户和 ipad os 用户可以下载的应用商店

1242
02:03:26,400 --> 02:03:30,957
应用程序和 um play 商店，其中 android 用户可以

1243
02:03:30,957 --> 02:03:34,797
下载 android 应用程序，使这些标识符为

1244
02:03:34,797 --> 02:03:38,159
我在前一章中提到的有点像反向域

1245
02:03:38,159 --> 02:03:41,840
标识符，所以有点像您的网站是

1246
02:03:41,840 --> 02:03:45,759
foob​​ar.com 并且您的应用程序称为 baz

1247
02:03:45,759 --> 02:03:50,560
那么您的应用程序的反向域标识符将变为点

1248
02:03:50,560 --> 02:03:54,400
foob​​ar.bass 所以有点像

1249
02:03:54,400 --> 02:03:59,680
你把你的域名倒过来，所以如果 foobar.com 变成 com.fubar 并且

1250
02:03:59,680 --> 02:04:04,479
然后你在后面加上点，然后你输入你的实际应用程序名称

1251
02:04:04,479 --> 02:04:09,360
所以这些标识符需要是唯一的，我的意思是

1252
02:04:09,360 --> 02:04:14,718
if a if a if a if a developer on the ios app store or google play

1253
02:04:14,718 --> 02:04:19,680
商店已经消失并注册了反向嗯基本上那个项目

1254
02:04:19,680 --> 02:04:24,319
identifier.com.fubar.bass 用于他们的任何应用程序，因此他们

1255
02:04:24,319 --> 02:04:28,400
说好的，这是我的应用程序，叫做图片库，但它有一个完全

1256
02:04:28,400 --> 02:04:32,797
com.foobar.pass 的随机标识符

1257
02:04:32,797 --> 02:04:37,759
那么你作为一个新的开发人员，即使你想做同样时髦的部署

1258
02:04:37,759 --> 02:04:41,759
到应用商店，你不能再注册那个名字了，因为它是

1259
02:04:41,759 --> 02:04:44,159
已经采取了

1260
02:04:44,159 --> 02:04:47,680
将项目的标识符视为

1261
02:04:47,680 --> 02:04:52,479
从你创建项目的开始会发生什么

1262
02:04:52,479 --> 02:04:56,080
通过应用程序商店的方式好吧

1263
02:04:56,080 --> 02:05:00,479
明智地选择它是非常重要的，因为如果你不这样做

1264
02:05:00,479 --> 02:05:04,319
不幸的是，从一开始就明智地做一些事情

1265
02:05:04,319 --> 02:05:10,400
将来填补自己去更新

1266
02:05:10,400 --> 02:05:13,919
嗯，所以我真的会建议和

1267
02:05:13,919 --> 02:05:18,479
在这里建议您花一点时间考虑一下

1268
02:05:18,479 --> 02:05:22,797
标识符将是您喜欢的标识符

1269
02:05:22,797 --> 02:05:26,000
以及您对什么感到满意，例如，如果您有一个域

1270
02:05:26,000 --> 02:05:31,439
作为应用商店和谷歌游戏商店的开发者命名

1271
02:05:31,439 --> 02:05:35,680
所以如果你的名字已经注册了一个域名，我建议

1272
02:05:35,680 --> 02:05:39,759
强烈建议您使用它，并且如果您个人拥有域名并且

1273
02:05:39,759 --> 02:05:43,279
域名选择为like a

1274
02:05:43,279 --> 02:05:47,200
对于您的公司，您现在需要知道是否要发布

1275
02:05:47,200 --> 02:05:51,279
此应用程序以您个人的名义或如果您要发布

1276
02:05:51,279 --> 02:05:57,599
它在您公司的名称上，所以这些都起作用，但是

1277
02:05:57,599 --> 02:06:02,479
事不宜迟，让我们在这里创建我们的项目

1278
02:06:02,479 --> 02:06:05,119
嗯，老实说，我个人

1279
02:06:05,119 --> 02:06:08,637
还没有真正考虑过我是否要将此应用程序作为

1280
02:06:08,637 --> 02:06:12,240
私人，或者如果我想在我的公司下创建它，我认为

1281
02:06:12,240 --> 02:06:18,240
因为我的开发者帐户在苹果和谷歌是在

1282
02:06:18,240 --> 02:06:24,240
我公司的名字在瑞典是 pixelity ab 然后我实际上要使用

1283
02:06:24,240 --> 02:06:28,560
该公司的域名是 pixelity.se

1284
02:06:28,560 --> 02:06:34,479
因为 s 就像瑞典域名一样 code.uk 是

1285
02:06:34,479 --> 02:06:40,319
嗯，例如英国的，所以我想我会这样做，所以让我们去吧

1286
02:06:40,319 --> 02:06:44,319
并打开一个新终端让我们去终端嗯

1287
02:06:44,319 --> 02:06:47,680
我现在看不到我的屏幕，但我只是要打开一个新终端

1288
02:06:47,680 --> 02:06:50,797
这里的窗口

1289
02:06:50,797 --> 02:06:54,240
把它拿出来让你也能看到 嗯

1290
02:06:54,240 --> 02:07:01,599
我要增加文本的大小，这样我输入的内容就很清楚了

1291
02:07:01,599 --> 02:07:08,000
所以让我继续创建一个项目，所以我要去我的开发

1292
02:07:08,000 --> 02:07:11,599
我有所有项目的文件夹，我要去项目

1293
02:07:11,599 --> 02:07:15,840
颤动好吧，然后你可以看到颤动

1294
02:07:15,840 --> 02:07:19,599
创建然后然后破折号破折号组织作为

1295
02:07:19,599 --> 02:07:25,040
组织，我会看到说 se dot pixelity

1296
02:07:25,040 --> 02:07:30,159
现在正如我所说，我的域名称为 pixelity.sc，但您的组织必须是

1297
02:07:30,159 --> 02:07:35,759
反向那个好吧，所以记住反向标识符所以反向域标识符

1298
02:07:35,759 --> 02:07:38,479
那么，如果您的例如组织

1299
02:07:38,479 --> 02:07:41,680
是 hello dot com 那么在这里你会有

1300
02:07:41,680 --> 02:07:46,957
写 com dot hello 好吧，所以我要说 s epixody 但你

1301
02:07:46,957 --> 02:07:50,080
不应该这样做，所以如果您正在学习本课程，请

1302
02:07:50,080 --> 02:07:54,479
为您的域选择一个对您有意义的标识符，如果您

1303
02:07:54,479 --> 02:07:57,919
如果你没有被所有这些困扰，就没有域

1304
02:07:57,919 --> 02:08:02,319
将您的应用程序发布到您甚至不必关心的应用程序商店

1305
02:08:02,319 --> 02:08:05,759
关于这个只要把任何东西放在这里你可以说

1306
02:08:05,759 --> 02:08:09,840
来吧，嗯，编造东西

1307
02:08:09,840 --> 02:08:14,400
如果这就是你想要的，那么对你说实话没什么大不了的

1308
02:08:14,400 --> 02:08:19,599
继续选择一个标识符，所以我要说 s epixody 因为

1309
02:08:19,599 --> 02:08:25,040
那是我的反向域名，然后在这里你必须写你的

1310
02:08:25,040 --> 02:08:28,080
应用程序名称所以

1311
02:08:28,080 --> 02:08:31,119
嗯，我们应该怎么称呼这个应用程序

1312
02:08:31,119 --> 02:08:34,240
老实说，我的意思是我个人还没有

1313
02:08:34,240 --> 02:08:38,080
我决定这个应用程序应该叫什么也许我们应该叫它

1314
02:08:38,080 --> 02:08:41,040
呃我的个人

1315
02:08:41,040 --> 02:08:45,840
记下我的个人笔记或我的笔记

1316
02:08:45,840 --> 02:08:48,560
类似的东西或

1317
02:08:48,560 --> 02:08:52,637
私人笔记还行

1318
02:08:52,637 --> 02:08:55,759
所有私人笔记

1319
02:08:55,759 --> 02:09:01,599
或笔记列表我不知道我的笔记会不会起作用

1320
02:09:01,599 --> 02:09:06,000
我笔记中的 sd 像素是的，为什么不呢？

1321
02:09:06,000 --> 02:09:09,599
让我们称之为我的笔记然后好吧

1322
02:09:09,599 --> 02:09:12,560
所以让我们继续前进吧

1323
02:09:12,560 --> 02:09:15,599
创建，我可以看到我的意思是实际上我非常

1324
02:09:15,599 --> 02:09:19,599
感谢我们在上面收到了那个小通知，所以让它这样做

1325
02:09:19,599 --> 02:09:22,718
工作和嗯

1326
02:09:22,718 --> 02:09:26,560
它完成了它的工作，它完成了，它调用了一些东西，它创建了一个文件夹

1327
02:09:26,560 --> 02:09:30,797
如果你看到了，你可以看到我的笔记和在这个窗口的顶部

1328
02:09:30,797 --> 02:09:34,319
然后打印了一条小消息，可以使用新版本的颤振

1329
02:09:34,319 --> 02:09:38,560
更新到最新版本只是运行更平坦的升级，所以这不是一部分

1330
02:09:38,560 --> 02:09:41,919
这当然我不是故意的，但我也无法控制它

1331
02:09:41,919 --> 02:09:45,520
因为颤振是谷歌正在开发的一个工具，它是一个开源的

1332
02:09:45,520 --> 02:09:49,439
运行任何这些颤振命令时有新版本时的工具

1333
02:09:49,439 --> 02:09:53,439
它会用版本库检查嗯，看看是

1334
02:09:53,439 --> 02:09:56,957
有任何可用的新版本，如果有那么它会给我这个

1335
02:09:56,957 --> 02:10:00,878
颤振升级消息在这里所以

1336
02:10:00,878 --> 02:10:04,319
嗯，正如我在课程介绍中提到的

1337
02:10:04,319 --> 02:10:09,119
我已经计划了很多这门课程，但我没有，我无法计划 100 所以事情

1338
02:10:09,119 --> 02:10:12,479
会发生我没有计划的，然后我们只需要滚动

1339
02:10:12,479 --> 02:10:16,159
拳打，我真的很高兴这件事发生在这里，所以你可以看到

1340
02:10:16,159 --> 02:10:21,040
如何升级颤振以及你可以看到它很容易复制

1341
02:10:21,040 --> 02:10:23,840
只是说颤振升级好吧，所以我要去底部

1342
02:10:23,840 --> 02:10:29,360
终端我只想说颤振升级

1343
02:10:29,360 --> 02:10:34,000
对，所以这实际上需要一些时间，具体取决于

1344
02:10:34,000 --> 02:10:38,718
升级是因为flutter分为

1345
02:10:38,718 --> 02:10:43,680
你知道的不同类型的引擎颤振可以输出嗯

1346
02:10:43,680 --> 02:10:49,840
ios的二进制文件或应用程序它可以为android输出它可以为它做

1347
02:10:49,840 --> 02:10:53,040
mac os 可以为 um 做

1348
02:10:53,040 --> 02:10:56,080
windows和基本上桌面搜索和mac

1349
02:10:56,080 --> 02:11:00,479
windows linux 然后你也会有网络所以有

1350
02:11:00,479 --> 02:11:04,080
正如你在这里看到的，很多事情都涉及到颤振，就像

1351
02:11:04,080 --> 02:11:07,520
下载所有必要的东西，以便您能够创建

1352
02:11:07,520 --> 02:11:12,718
android应用程序所以完成后你会看到它

1353
02:11:12,718 --> 02:11:17,360
ios工具，所以它正在下载，但我也相信它完成后

1354
02:11:17,360 --> 02:11:21,279
下载东西它还需要确保它可以

1355
02:11:21,279 --> 02:11:26,637
构建这些工具集，因此这是一个可能需要一些时间的过程

1356
02:11:26,637 --> 02:11:30,240
时间，为了避免我们不得不等待

1357
02:11:30,240 --> 02:11:34,560
对于整个过程，您可以看到它现在将转到 web sdk

1358
02:11:34,560 --> 02:11:38,878
等等等等，所以我们不必等待

1359
02:11:38,878 --> 02:11:44,080
所以我只是要创建一个新的哦它实际上已经完成了

1360
02:11:44,080 --> 02:11:48,159
很快，所以它完成了工作，我们不需要做任何事情

1361
02:11:48,159 --> 02:11:52,797
在这里特别，嗯，这就是你升级颤振的方式

1362
02:11:52,797 --> 02:11:56,797
只需按照颤振工具本身的平面升级建议运行此命令

1363
02:11:56,797 --> 02:12:01,599
然后你就可以了

1364
02:12:01,599 --> 02:12:06,159
我们现在已经完成了这一步，所以我们已经建立了我们的项目，我要搬到我的

1365
02:12:06,159 --> 02:12:09,360
笔记在这里，我会确保那个话题

1366
02:12:09,360 --> 02:12:13,520
打勾，下一个项目我们要做什么

1367
02:12:13,520 --> 02:12:18,878
这里是我们要谈论的，嗯，我们基本上要快速浏览一下

1368
02:12:18,878 --> 02:12:23,360
围绕flutter搭建的环境时

1369
02:12:23,360 --> 02:12:27,680
您运行照片创建，因为创建流程不仅仅是创建一个空的

1370
02:12:27,680 --> 02:12:32,878
导演它实际上创建了你的骨架或脚手架

1371
02:12:32,878 --> 02:12:36,319
牙线项目，但几乎所有必要的东西让你能够

1372
02:12:36,319 --> 02:12:41,680
运行那个项目没问题所以在这个应用程序中我的意思是

1373
02:12:41,680 --> 02:12:46,240
在第 8 章的这一步中，我们实际上并不会在其上运行应用程序

1374
02:12:46,240 --> 02:12:50,319
任何适用于第 9 章和第 10 章的设备。

1375
02:12:50,319 --> 02:12:54,637
但我们要做的是快速浏览一下

1376
02:12:54,637 --> 02:13:00,400
项目结构，所以让我在这里做笔记，我要做的是

1377
02:13:00,400 --> 02:13:04,400
我将使用此代码 Visual Studio 代码

1378
02:13:04,400 --> 02:13:08,400
路径中提供的扩展名，所以我只能说打开的代码点

1379
02:13:08,400 --> 02:13:11,520
在当前文件夹中启动 Visual Studio 代码

1380
02:13:11,520 --> 02:13:15,200
所以一旦完成，我将

1381
02:13:15,200 --> 02:13:18,400
在这里带来一个视觉工作室代码，我只是要稍微注意一下

1382
02:13:18,400 --> 02:13:22,878
确保您可以看到屏幕的重要部分

1383
02:13:22,878 --> 02:13:27,759
好的，我将显着增加尺寸，以便对

1384
02:13:27,759 --> 02:13:32,159
你也在我的屏幕上很大，但我认为它就像

1385
02:13:32,159 --> 02:13:36,319
实际输出视频上的一个不错的尺寸

1386
02:13:36,319 --> 02:13:42,080
好吧，你可以看到这里是由flutter create创建的文件夹

1387
02:13:42,080 --> 02:13:45,520
这里有很多零碎的东西

1388
02:13:45,520 --> 02:13:49,119
我只想告诉你

1389
02:13:49,119 --> 02:13:54,878
关于这些文件夹中的一些以及它们所代表的内容

1390
02:13:54,878 --> 02:13:58,957
关于颤振，您需要了解的一件事是它实际上不是

1391
02:13:58,957 --> 02:14:03,919
就像嗯，它不是真的像反应原生

1392
02:14:03,919 --> 02:14:09,200
呃，如果你熟悉 ios 上的颤振，例如对于那些

1393
02:14:09,200 --> 02:14:15,520
已经完成了 ios 开发 uh flutter 它会在您的设备上输出本机二进制文件

1394
02:14:15,520 --> 02:14:18,400
打电话给本地人

1395
02:14:18,400 --> 02:14:23,520
fat binary 基本上适用于您的 uh ios 应用程序，它只放一个

1396
02:14:23,520 --> 02:14:28,080
在屏幕上查看，然后以图形方式呈现其所有内容

1397
02:14:28,080 --> 02:14:32,718
使用金属没问题，所以如果你不是 ios 开发人员，可能不会这样做

1398
02:14:32,718 --> 02:14:36,957
对你来说很有意义，但我现在要提到的这部分

1399
02:14:36,957 --> 02:14:42,080
应该对每个人都有意义，但是当您创建颤振应用程序时

1400
02:14:42,080 --> 02:14:47,599
并且颤振创建命令基本上会吐出可能的不同部分

1401
02:14:47,599 --> 02:14:51,119
您的应用程序在不同平台上运行所必需的

1402
02:14:51,119 --> 02:14:55,919
Flutter 运行的关键平台之一是 ioso

1403
02:14:55,919 --> 02:15:01,919
那是包含所需的本机位和片段的文件夹

1404
02:15:01,919 --> 02:15:07,279
能够在 ios 模拟器或 ios 设备上运行的照片

1405
02:15:07,279 --> 02:15:11,680
例如 iphone 或 ipad 好的，所以这就像你可以看到的

1406
02:15:11,680 --> 02:15:16,159
项目或工作区，对不起和工作区，因为对于你们这些人

1407
02:15:16,159 --> 02:15:18,560
谁是 ios 开发者你会知道的

1408
02:15:18,560 --> 02:15:22,080
有一种叫做 cocoapods 的东西，flutter 在内部实际上使用

1409
02:15:22,080 --> 02:15:28,000
ios 的 cocoapods 如果你不是 ios 开发者，你就知道

1410
02:15:28,000 --> 02:15:32,718
每个 ios 或 android 或 Web 应用程序

1411
02:15:32,718 --> 02:15:39,200
可以自带依赖项，并且依赖项是您的应用程序的一种方式

1412
02:15:39,200 --> 02:15:44,400
从其他人那里引入代码，以便能够实现特殊的

1413
02:15:44,400 --> 02:15:49,919
功能，因此有各种工具可用于

1414
02:15:49,919 --> 02:15:55,439
ios 开发者 android 开发者 web 开发者能够引入

1415
02:15:55,439 --> 02:15:58,637
例如，如果您正在编写一个节点应用程序，则 web 的依赖项

1416
02:15:58,637 --> 02:16:03,599
如果您使用 swift，将只使用 npm 这是一个节点包管理器

1417
02:16:03,599 --> 02:16:07,919
你可能会带来例如 spm 我认为嗯 swift 包

1418
02:16:07,919 --> 02:16:13,759
经理或 cocoapods 还有第三个

1419
02:16:13,759 --> 02:16:17,279
嗯，我有点忘记了你的名字

1420
02:16:17,279 --> 02:16:21,680
如果您使用的是android，我稍后可能会记得，您可能很熟悉

1421
02:16:21,680 --> 02:16:24,479
使用 gradle，你可以喜欢使用

1422
02:16:24,479 --> 02:16:28,878
引入外部依赖，所以

1423
02:16:28,878 --> 02:16:30,718
因此，如果

1424
02:16:30,718 --> 02:16:34,479
这是一个android平台，这是一个ios平台，这里是web和

1425
02:16:34,479 --> 02:16:38,878
例如，这里是嗯桌面

1426
02:16:38,878 --> 02:16:44,400
颤振位于这些之上，因此它可以控制所有

1427
02:16:44,400 --> 02:16:48,000
能够打包这些平台的所有小部件

1428
02:16:48,000 --> 02:16:52,718
打包在一个颤振应用程序中，该应用程序位于此处的顶部

1429
02:16:52,718 --> 02:16:55,599
所有这些不同的平台都在这里

1430
02:16:55,599 --> 02:17:00,000
对不起，他们可以有自己的依赖管理，所以依赖

1431
02:17:00,000 --> 02:17:03,040
管理层有点坐在下面的一层

1432
02:17:03,040 --> 02:17:07,279
然后颤振与这些依赖管理器交谈并说好的，你需要

1433
02:17:07,279 --> 02:17:10,957
为我安装此依赖项以便能够工作

1434
02:17:10,957 --> 02:17:15,119
所以我提到这一切的原因是

1435
02:17:15,119 --> 02:17:19,520
这就是你可以在这里看到一个工作区和一个 xcode 项目的原因

1436
02:17:19,520 --> 02:17:23,279
那是因为颤振内部正在使用依赖管理器

1437
02:17:23,279 --> 02:17:26,637
称为 cocoapods 的系统反过来创建了一个

1438
02:17:26,637 --> 02:17:28,797
工作区

1439
02:17:28,797 --> 02:17:32,240
将主项目及其所有依赖项链接在一起

1440
02:17:32,240 --> 02:17:35,279
如果您不是 ios 开发人员，如果您对所有这些都不感兴趣，请知道

1441
02:17:35,279 --> 02:17:40,000
这个 ios 文件夹只是为了让您的应用程序运行可以

1442
02:17:40,000 --> 02:17:44,000
在 ios 设备上运行 um

1443
02:17:44,000 --> 02:17:47,759
所以这就是下一个重要的部分是

1444
02:17:47,759 --> 02:17:51,200
我们将在本课程中实际使用的测试文件夹

1445
02:17:51,200 --> 02:17:55,040
test 文件夹是您创建测试的地方

1446
02:17:55,040 --> 02:17:57,680
如果你以前不熟悉软件开发 如果你不

1447
02:17:57,680 --> 02:18:01,759
有软件工程测试的背景是

1448
02:18:01,759 --> 02:18:05,680
程序员为了能够做出某些断言的能力

1449
02:18:05,680 --> 02:18:10,319
他们的代码，并为了确保他们可以自动运行

1450
02:18:10,319 --> 02:18:15,119
对自己的代码进行一系列测试，以确保一切正常

1451
02:18:15,119 --> 02:18:20,718
就像程序员的意图那样，如果你是，如果你是

1452
02:18:20,718 --> 02:18:23,840
来自软件工程背景，知道我们会

1453
02:18:23,840 --> 02:18:26,797
把我们的集成测试，我们将把我们的

1454
02:18:26,797 --> 02:18:32,159
此测试文件夹中的小部件测试和单元测试可以，所以我希望涵盖

1455
02:18:32,159 --> 02:18:36,240
每个人都可能在看这个课程

1456
02:18:36,240 --> 02:18:40,479
那么您还有一个名为 android 的文件夹，这正如您所期望的那样

1457
02:18:40,479 --> 02:18:46,240
它正在放置您所需的所有必要文件和文件夹

1458
02:18:46,240 --> 02:18:52,479
android 项目来托管你的颤振应用程序，所以

1459
02:18:52,479 --> 02:18:58,000
只知道flutter 那种是一系列的工具就像一个手机

1460
02:18:58,000 --> 02:19:03,599
就像一个漂亮的 sdk 被注入到这些本地

1461
02:19:03,599 --> 02:19:08,878
应用程序和本机也呈现其内容，所以

1462
02:19:08,878 --> 02:19:11,840
嗯，就像我们有一个主机 ios

1463
02:19:11,840 --> 02:19:16,718
应用程序在这里，您还将有一个包含所有

1464
02:19:16,718 --> 02:19:21,599
应用程序本地运行所需的点点滴滴

1465
02:19:21,599 --> 02:19:24,159
在安卓上

1466
02:19:24,159 --> 02:19:27,840
手机和安卓平板电脑上

1467
02:19:27,840 --> 02:19:30,878
如果您是一名 android 开发人员，您可能已经这样做了

1468
02:19:30,878 --> 02:19:34,080
熟悉这一点，就像您拥有自己的应用程序并在其中构建出色的 gradle

1469
02:19:34,080 --> 02:19:38,637
app 文件夹，所以这里没有什么花哨的东西，它是一个简单的 android

1470
02:19:38,637 --> 02:19:42,718
如果您安装了android studio，您实际上可以使用的应用程序

1471
02:19:42,718 --> 02:19:45,840
如果您愿意，可以在您的计算机上打开该文件夹并实际拥有一个

1472
02:19:45,840 --> 02:19:50,159
环顾四周，甚至将该应用程序作为本机和 Android 应用程序运行

1473
02:19:50,159 --> 02:19:53,040
在你的手机上

1474
02:19:53,040 --> 02:19:56,560
所以这是我们的 android 文件夹和你

1475
02:19:56,560 --> 02:20:00,240
猜猜我们有一个 web 文件夹，因为

1476
02:20:00,240 --> 02:20:04,560
我想我之前提到过这个但是颤振支持呃部署闪存

1477
02:20:04,560 --> 02:20:07,520
Web 应用程序，因此您可以实际创建 Web 应用程序

1478
02:20:07,520 --> 02:20:10,637
有了颤振，这不是我们要在本课程中讨论的内容

1479
02:20:10,637 --> 02:20:14,159
特别是如果你对使用 Flutter 编写 Web 应用程序感兴趣

1480
02:20:14,159 --> 02:20:18,560
你也可以用谷歌搜索一下，如果你是

1481
02:20:18,560 --> 02:20:24,637
对 Web 应用程序感兴趣，因为尽管 Flutter 中的 Web 应用程序是

1482
02:20:24,637 --> 02:20:29,840
相对较新，但福斯特实际上已经走了很远，所以人们

1483
02:20:29,840 --> 02:20:34,878
已经在用颤振创建各种网站

1484
02:20:34,878 --> 02:20:39,759
抱歉，好吧，嗯，我们这里有一个小文件

1485
02:20:39,759 --> 02:20:44,000
称为分析选项，嗯，你可以看到它说这个文件

1486
02:20:44,000 --> 02:20:47,599
配置分析仪所以嗯

1487
02:20:47,599 --> 02:20:51,840
如果您不是来自软件工程背景，那么您可能不会

1488
02:20:51,840 --> 02:20:55,840
知道分析的实际含义，但将分析视为

1489
02:20:55,840 --> 02:21:01,119
一种让颤振能够查看您编写的代码的方法

1490
02:21:01,119 --> 02:21:03,680
并纠正你

1491
02:21:03,680 --> 02:21:07,439
它认为合适的地方，所以它认为，哦，你已经

1492
02:21:07,439 --> 02:21:12,159
在写一些可以用比它更好的方式写的东西时犯了一个错误

1493
02:21:12,159 --> 02:21:16,637
查阅这个分析选项 yaml 文件，然后它说好的，规则是什么

1494
02:21:16,637 --> 02:21:20,159
我必须坚持的，你想让我对某些事情非常严格吗？

1495
02:21:20,159 --> 02:21:23,759
规则还是你想让我对其他规则不那么严格还是你想要

1496
02:21:23,759 --> 02:21:28,240
我完全忽略了你正在犯的某些错误

1497
02:21:28,240 --> 02:21:32,080
分析选项 yaml 文件的发音

1498
02:21:32,080 --> 02:21:37,439
它允许您基本上定义使

1499
02:21:37,439 --> 02:21:40,240
在本课程中对您的项目有意义，我们不打算谈论

1500
02:21:40,240 --> 02:21:43,200
老实说，关于这么多分析选项，但只知道它是

1501
02:21:43,200 --> 02:21:48,637
所以让我提起呃

1502
02:21:48,637 --> 02:21:53,919
又是这里的项目结构 嗯，接下来我们需要做的事情

1503
02:21:53,919 --> 02:22:00,319
看看这个文件 pop spec dot yaml 哪个非常重要

1504
02:22:00,319 --> 02:22:05,759
现在，嗯，这是一个文件，我的意思是你需要的东西之一

1505
02:22:05,759 --> 02:22:09,520
了解颤振及其为您创建的基本结构是

1506
02:22:09,520 --> 02:22:14,797
有大量的文件和文件是如此的好

1507
02:22:14,797 --> 02:22:19,119
在我个人看来，在我个人来自的颤振世界中完成

1508
02:22:19,119 --> 02:22:22,957
后端开发者开发背景，比如我在做 django 或

1509
02:22:22,957 --> 02:22:26,878
我在哪里做 ios 开发有时文档可以例如

1510
02:22:26,878 --> 02:22:30,637
在ios原生世界上是很欠缺的

1511
02:22:30,637 --> 02:22:33,759
所以颤振已经远远高于

1512
02:22:33,759 --> 02:22:37,360
从开发人员的角度来看，在以下方面需要什么

1513
02:22:37,360 --> 02:22:41,040
文档，他们提供了很多文档

1514
02:22:41,040 --> 02:22:44,400
如果您不是来自软件开发背景的文档

1515
02:22:44,400 --> 02:22:47,599
很像开发者提供的信息

1516
02:22:47,599 --> 02:22:52,400
谁为您创建了该工具以帮助您更好地使用该工具

1517
02:22:52,400 --> 02:22:56,240
你可以看到这里有一个为你创建的文件 pop special 你可以看到

1518
02:22:56,240 --> 02:23:00,080
这里有很多以这个为前缀的灰线

1519
02:23:00,080 --> 02:23:03,040
标签如果你删除它们，你会看到它们

1520
02:23:03,040 --> 02:23:06,400
变成正常的句子，但如果你把它们放回去，它们就会变成一种叫做 a

1521
02:23:06,400 --> 02:23:09,599
文档和文档（如果您不是来自软件工程）

1522
02:23:09,599 --> 02:23:14,319
背景 它意味着只是作为信息块提供给您的一段文本

1523
02:23:14,319 --> 02:23:18,637
这不再是代码，所以程序不会

1524
02:23:18,637 --> 02:23:22,797
把它变成任何类型的代码，它只会忽略这个

1525
02:23:22,797 --> 02:23:27,439
只是为了让你学习好，所以让我们回到这个流行的斑点弹药

1526
02:23:27,439 --> 02:23:31,919
并谈论它实际上是什么流行规范 yaml 是如此重要的一部分

1527
02:23:31,919 --> 02:23:34,957
颤抖，我认为你实际上需要

1528
02:23:34,957 --> 02:23:41,200
忽略我的意思是不要忽略评论去花点时间阅读

1529
02:23:41,200 --> 02:23:44,479
评论只是为了理解它们的意思

1530
02:23:44,479 --> 02:23:48,240
所以嗯，我要在这里谈论的是

1531
02:23:48,240 --> 02:23:52,240
稍微了解一下这个流行的尖峰 yaml 实际上是什么，如果你是为了

1532
02:23:52,240 --> 02:23:56,878
来自网络背景的实例，如果您曾经使用过

1533
02:23:56,878 --> 02:24:00,240
node.js 然后我们将有某种配置

1534
02:24:00,240 --> 02:24:05,200
json 文件，或者如果您来自 django，您将拥有 settings.pi 文件，如果

1535
02:24:05,200 --> 02:24:10,400
你来自原生 ios 世界什么相当于配置

1536
02:24:10,400 --> 02:24:14,797
它有点像你的信息加文件

1537
02:24:14,797 --> 02:24:19,919
所以我的意思是这是你的，有点像

1538
02:24:19,919 --> 02:24:24,400
您的项目实际应该是什么的控制面板

1539
02:24:24,400 --> 02:24:31,520
看起来像它的图标版本号它的名称所有依赖项所以

1540
02:24:31,520 --> 02:24:36,797
这些东西都会放在这个文件里面

1541
02:24:36,797 --> 02:24:40,240
如果您已经在运行您的应用程序，那么当您更改此文件时

1542
02:24:40,240 --> 02:24:45,040
flutter 会自动理解对此文件的更改，并且

1543
02:24:45,040 --> 02:24:49,279
然后重新配置自己，如果它可以在运行中

1544
02:24:49,279 --> 02:24:53,520
如果不能使用新配置，则可能必须重新启动

1545
02:24:53,520 --> 02:24:57,360
应用程序，例如，如果您进行重大更改，例如，如果您引入

1546
02:24:57,360 --> 02:25:02,718
对您的项目的全新依赖

1547
02:25:02,718 --> 02:25:07,119
那么项目不能像立即重新运行它实际上需要

1548
02:25:07,119 --> 02:25:10,957
重新编译并链接到该依赖项，就像人类一样

1549
02:25:10,957 --> 02:25:16,000
它不可能或在计算机上不可能这样做

1550
02:25:16,000 --> 02:25:19,200
嗯，让我们看看周围

1551
02:25:19,200 --> 02:25:24,319
这个pop specky ammo文件，你可以看到这里有一个名为name的标签，它是

1552
02:25:24,319 --> 02:25:27,599
这是我的笔记 如果你记得的话

1553
02:25:27,599 --> 02:25:31,279
如果我带回终端，则从终端

1554
02:25:31,279 --> 02:25:35,759
稍微调出文本，嗯，这就是我们创建的正确的，这是

1555
02:25:35,759 --> 02:25:38,400
项目 这就是我们创建项目的方式

1556
02:25:38,400 --> 02:25:43,279
我们说颤振创建了一个 seda 像素的组织，然后我的笔记全部

1557
02:25:43,279 --> 02:25:47,680
对，这就是我的笔记是为了这个

1558
02:25:47,680 --> 02:25:51,520
你的项目名称我的笔记没问题，这有点只是一点点

1559
02:25:51,520 --> 02:25:55,119
描述此应用程序现在的全部内容

1560
02:25:55,119 --> 02:25:58,637
你可能会好奇到底是什么词

1561
02:25:58,637 --> 02:26:02,718
s e se.pixelity 或您创建的任何内容

1562
02:26:02,718 --> 02:26:07,040
项目组织现在你可以看到我搜索它我说

1563
02:26:07,040 --> 02:26:12,797
在 mac 中的 Visual Studio 代码中的命令 f 或在 linux 中的控制 f 和

1564
02:26:12,797 --> 02:26:15,520
windows和visual studio代码，我实际上不知道快捷方式是什么

1565
02:26:15,520 --> 02:26:19,919
因为那个罚款是在呃 android studio 我刚刚听到 studios

1566
02:26:19,919 --> 02:26:24,319
它的 uh 键映射有点奇怪，所以它可能不是命令 f on

1567
02:26:24,319 --> 02:26:28,878
用于 linux 和 windows 的 mac 或控制器，所以我现在在这里搜索 sepixology 和

1568
02:26:28,878 --> 02:26:34,000
你可以看到没有结果所以我强调的这个特别的事情

1569
02:26:34,000 --> 02:26:37,119
一开始很重要，你明智地选择

1570
02:26:37,119 --> 02:26:41,119
正如我提到的那样，实际上并不是颤振本身需要的东西

1571
02:26:41,119 --> 02:26:46,240
您将部署的不同平台需要的东西所以如果我现在

1572
02:26:46,240 --> 02:26:50,240
实际上是在整个搜索的 Visual Studio 代码中说命令 shift f

1573
02:26:50,240 --> 02:26:55,759
项目说 se.pixolity 你会看到它在不同的地方找到

1574
02:26:55,759 --> 02:27:01,279
例如，在这个 ios 项目中，您可以看到这里是在项目 pbx 中

1575
02:27:01,279 --> 02:27:04,558
在我们的构建中，方法和 android 也一样

1576
02:27:04,558 --> 02:27:09,599
gradle 所以你会看到应用程序 id 变成了我的节点的像素

1577
02:27:09,599 --> 02:27:14,319
对于 ios，如果你也看看这里，你会发现它是 s e 像素

1578
02:27:14,319 --> 02:27:18,637
我的笔记还可以

1579
02:27:18,637 --> 02:27:24,080
那只是旁注，嗯，所以你需要做的另一件事

1580
02:27:24,080 --> 02:27:29,439
了解流行规范 yaml 是这里的版本号，这是

1581
02:27:29,439 --> 02:27:32,637
如果你不是软件开发背景的话

1582
02:27:32,637 --> 02:27:37,840
在版本控制之前完成软件开发是一种告诉你的方式

1583
02:27:37,840 --> 02:27:42,240
您发布应用程序的各个地方，例如 ios 应用商店

1584
02:27:42,240 --> 02:27:46,080
或谷歌游戏商店什么

1585
02:27:46,080 --> 02:27:50,240
如果您的应用程序中有新内容

1586
02:27:50,240 --> 02:27:54,080
因此，例如，如果您和这就是软件实际上的样子

1587
02:27:54,080 --> 02:27:56,718
像软件一样标记有不同的属性

1588
02:27:56,718 --> 02:28:00,558
你正在部署什么你在这里开发的是一个混乱的应用程序

1589
02:28:00,558 --> 02:28:05,520
但从应用商店等商店的角度来看，它只是一个包

1590
02:28:05,520 --> 02:28:08,637
有一些属性的东西，比如它的名字

1591
02:28:08,637 --> 02:28:13,200
标识符及其版本 现在这个版本非常重要，因为它是

1592
02:28:13,200 --> 02:28:18,479
一个数字，通常是三位数，或者我知道谷歌游戏商店

1593
02:28:18,479 --> 02:28:22,400
实际上还支持用点分隔的四位数字

1594
02:28:22,400 --> 02:28:26,400
这些数字实际上意味着什么

1595
02:28:26,400 --> 02:28:30,000
特别是如果你从左边开始然后你

1596
02:28:30,000 --> 02:28:35,680
到中间再到右边左边的数字叫做a

1597
02:28:35,680 --> 02:28:38,797
主要数字中间的数字称为次要数字

1598
02:28:38,797 --> 02:28:44,479
数字和最右边的数字，然后最右边的数字通常被称为

1599
02:28:44,479 --> 02:28:48,718
正常软件开发中的内部版本号

1600
02:28:48,718 --> 02:28:53,360
过程有点像这样，你从一个想法开始，你说好的，我的

1601
02:28:53,360 --> 02:28:57,759
想法是创建一个笔记应用程序，这是第一个想法就是想法

1602
02:28:57,759 --> 02:29:03,599
第一然后你把一个作为主要数字然后你从零和零开始

1603
02:29:03,599 --> 02:29:07,279
好吧，这就是版本号有点像出生

1604
02:29:07,279 --> 02:29:11,680
所以你说一零零那是通常称为好的版本一

1605
02:29:11,680 --> 02:29:15,680
然后你发布那个应用程序你说好的我对那个版本很好

1606
02:29:15,680 --> 02:29:19,119
然后你在厨房做饭然后你说好吧

1607
02:29:19,119 --> 02:29:22,718
如果我能像我一样添加的话会很棒

1608
02:29:22,718 --> 02:29:26,240
用户能够删除他们的笔记的能力

1609
02:29:26,240 --> 02:29:30,797
这不是一个巨大的功能，它只是对我的一点点改进

1610
02:29:30,797 --> 02:29:35,360
已经在商店里了，然后你会去说好吧

1611
02:29:35,360 --> 02:29:40,159
主要想法或次要想法 嗯 这不是主要想法 主要想法

1612
02:29:40,159 --> 02:29:44,000
就像是对应用程序的完全重写，添加了大量的

1613
02:29:44,000 --> 02:29:48,558
具有修复大量错误等的功能，所以这不是一个主要的想法然后你去

1614
02:29:48,558 --> 02:29:53,040
到次要想法并且那个次要想法对应于这里的次要版本

1615
02:29:53,040 --> 02:29:57,520
所以你说好吧 前一个是零 这个差别有多大

1616
02:29:57,520 --> 02:30:01,439
嗯，这只是一个很小的未来，所以我们只说一个

1617
02:30:01,439 --> 02:30:06,080
这是一个巨大的想法

1618
02:30:06,080 --> 02:30:09,599
不够重要，不足以成为主要想法，但次要

1619
02:30:09,599 --> 02:30:14,558
但你可能会喜欢一个很大的小想法

1620
02:30:14,558 --> 02:30:20,637
从零到两到三，通常不那么受欢迎

1621
02:30:20,637 --> 02:30:24,878
会按时间顺序排列，如一二三四，但你也是

1622
02:30:24,878 --> 02:30:28,240
欢迎跳转版本嗯

1623
02:30:28,240 --> 02:30:32,240
在特殊情况下，假设你说好的，我修好了

1624
02:30:32,240 --> 02:30:35,840
我现在将它构建并发送到

1625
02:30:35,840 --> 02:30:39,439
苹果和谷歌只记得你以前的构建

1626
02:30:39,439 --> 02:30:42,957
现在是零构建

1627
02:30:42,957 --> 02:30:48,000
取决于您的项目的结构，您可能会决定可以

1628
02:30:48,000 --> 02:30:51,840
我做的每一个版本我都会增加这个版本号，所以

1629
02:30:51,840 --> 02:30:56,400
前一个是零 现在是一 然后是二 三

1630
02:30:56,400 --> 02:31:00,797
四个五个六个块，因此每次您构建并将其发送到您的

1631
02:31:00,797 --> 02:31:04,637
消费者，即使他们是一组测试人员或

1632
02:31:04,637 --> 02:31:08,000
作为您唯一消费者的人实际上可能只是

1633
02:31:08,000 --> 02:31:10,558
直接从应用商店下载您的应用程序的人

1634
02:31:10,558 --> 02:31:13,759
或谷歌游戏商店或他们可能正在互动的网络

1635
02:31:13,759 --> 02:31:17,680
和你的申请一样，那么每次我做的时候你都可以说好

1636
02:31:17,680 --> 02:31:21,360
一个新的账单并寄出那是我真正增加这个内部版本号的时候

1637
02:31:21,360 --> 02:31:24,080
或者根据您的项目设置，您可以

1638
02:31:24,080 --> 02:31:28,479
和你的队友达成协议，说好的，我们不增加

1639
02:31:28,479 --> 02:31:32,637
账单按时间顺序排列，但每次我们更改主要或次要时，我们

1640
02:31:32,637 --> 02:31:37,360
实际上将构建重置为零，然后我们按时间顺序上升

1641
02:31:37,360 --> 02:31:40,080
嗯，我不想说实话

1642
02:31:40,080 --> 02:31:43,040
你对版本的细节太详细了，但如果你是

1643
02:31:43,040 --> 02:31:45,759
对软件开发感兴趣，我想如果您正在观看本课程

1644
02:31:45,759 --> 02:31:48,637
那意味着你对软件开发感兴趣

1645
02:31:48,637 --> 02:31:52,240
你需要知道这一点，所以只要知道那个版本是你的方式

1646
02:31:52,240 --> 02:31:57,040
标记您的软件及其功能以及其中的新功能

1647
02:31:57,040 --> 02:32:02,240
数字没问题，所以只要记住专业

1648
02:32:02,240 --> 02:32:06,159
嗯，小的构建没问题，但你不必玩这个所以

1649
02:32:06,159 --> 02:32:09,599
老实说，我认为在整个课程中我们实际上不是

1650
02:32:09,599 --> 02:32:12,797
会玩的

1651
02:32:12,797 --> 02:32:16,400
呃流行特辑中的下一点信息是你的环境

1652
02:32:16,400 --> 02:32:21,040
可以看到那里现在说 sdk 当你看到 sdk 只是想到

1653
02:32:21,040 --> 02:32:25,520
软件开发包，这个sdk指的是flutter

1654
02:32:25,520 --> 02:32:30,080
sdk 所以这意味着如果你与一些人分享你的源代码

1655
02:32:30,080 --> 02:32:34,558
可能在地球另一端的其他开发人员

1656
02:32:34,558 --> 02:32:37,919
如果他们获得了您的源代码并且他们希望能够进行测试

1657
02:32:37,919 --> 02:32:42,479
这个应用程序在模拟器或真实设备上的模拟器上，那么它们是

1658
02:32:42,479 --> 02:32:47,119
需要有flutter sdk版本这个

1659
02:32:47,119 --> 02:32:51,919
或者少于这个，所以你实际上可以通过 i 获得你的颤振版本

1660
02:32:51,919 --> 02:32:55,680
相信如果你运行颤振破折号版本

1661
02:32:55,680 --> 02:33:01,680
它会告诉你我是 281 绘图仪，正如你在这里看到的那样

1662
02:33:01,680 --> 02:33:06,240
是的，运行此应用程序所需的 sdk 是两个

1663
02:33:06,240 --> 02:33:13,200
一五零大于或等于至少二一五零可以

1664
02:33:13,200 --> 02:33:18,400
所以这就是你的 sdk 颤振 sdk 你需要知道的另一部分

1665
02:33:18,400 --> 02:33:22,240
about 是 pops wiki ammo 中的这一部分，它被称为

1666
02:33:22,240 --> 02:33:26,159
依赖关系，这就是我们要讨论的内容

1667
02:33:26,159 --> 02:33:29,040
嗯现在

1668
02:33:29,040 --> 02:33:33,599
嗯和我之前提到的依赖项

1669
02:33:33,599 --> 02:33:38,558
作为一名软件开发人员，你可以通过多种方式引入其他人的代码

1670
02:33:38,558 --> 02:33:43,119
人们为了使您的应用程序应用功能而编写

1671
02:33:43,119 --> 02:33:47,119
例如，更好或以全新的方式发挥作用

1672
02:33:47,119 --> 02:33:50,637
嗯，你需要小心依赖，因为

1673
02:33:50,637 --> 02:33:55,439
取决于您将哪些依赖项或库带入项目中

1674
02:33:55,439 --> 02:33:58,558
实际上可以让你的生活变得更好或更糟

1675
02:33:58,558 --> 02:34:01,680
依赖是嗯

1676
02:34:01,680 --> 02:34:04,878
基本上，当您将其引入依赖项时，它们通常是编写的代码

1677
02:34:04,878 --> 02:34:11,040
由其他人或其他可能在图书馆工作的人，所以

1678
02:34:11,040 --> 02:34:14,558
如果您不是来自软件开发背景，那么您

1679
02:34:14,558 --> 02:34:18,240
需要知道这一点，我从现在开始警告你，这样

1680
02:34:18,240 --> 02:34:22,400
当您选择时，您至少从某人的依赖项中听说过

1681
02:34:22,400 --> 02:34:26,319
依赖关系只是要小心一点

1682
02:34:26,319 --> 02:34:31,599
他们可能是他们最初让你

1683
02:34:31,599 --> 02:34:34,479
受苦更好，但

1684
02:34:34,479 --> 02:34:38,400
因为依赖项是其他人编写的代码

1685
02:34:38,400 --> 02:34:43,279
和其他人的优先事项改变他们的生活可能会改变，所以他们

1686
02:34:43,279 --> 02:34:47,119
没有足够的时间继续处理这些依赖项

1687
02:34:47,119 --> 02:34:49,520
所以我个人遇到了这个问题

1688
02:34:49,520 --> 02:34:53,279
嗯，我们在项目中引入了一个依赖项，然后过了一会儿我们就

1689
02:34:53,279 --> 02:34:57,119
意识到哦，开发商不是呃

1690
02:34:57,119 --> 02:35:02,878
积极致力于此，甚至可能开发人员制作了那个库

1691
02:35:02,878 --> 02:35:07,119
deprecated 和 deprecated 是一个词，你会在什么时候知道的世界

1692
02:35:07,119 --> 02:35:10,957
您更多地从事软件开发和不推荐使用的方式，即

1693
02:35:10,957 --> 02:35:14,479
不再支持库 不再支持库

1694
02:35:14,479 --> 02:35:19,040
不再积极工作，开发人员正在鼓励你

1695
02:35:19,040 --> 02:35:21,680
远离他们

1696
02:35:21,680 --> 02:35:26,319
当您引入依赖项时，我希望您做的只是看看

1697
02:35:26,319 --> 02:35:31,919
谁在依赖背后并优先考虑您的采摘和樱桃

1698
02:35:31,919 --> 02:35:36,558
选择基于几个因素

1699
02:35:36,558 --> 02:35:41,200
if the divi if the if 依赖项是由单个写入的

1700
02:35:41,200 --> 02:35:44,319
人，嗯，要小心一点

1701
02:35:44,319 --> 02:35:49,040
仅仅因为单身人士的优先事项可能会改变，他们可能不会

1702
02:35:49,040 --> 02:35:53,520
能够喜欢不断地工作

1703
02:35:53,520 --> 02:35:56,558
即使它是一个开源项目，他们也可能无法持续

1704
02:35:56,558 --> 02:35:59,840
如果独立是由一个写的

1705
02:35:59,840 --> 02:36:02,878
组织，尤其是你有很多的组织

1706
02:36:02,878 --> 02:36:07,119
相信然后将其优先级高一点

1707
02:36:07,119 --> 02:36:09,759
嗯，至少这是我的看法

1708
02:36:09,759 --> 02:36:15,759
如果一个依赖是由一群独立的人编写的

1709
02:36:15,759 --> 02:36:21,360
在一个组织下，优先级也高于一个拥有

1710
02:36:21,360 --> 02:36:24,957
一个有私人图书馆的人

1711
02:36:24,957 --> 02:36:27,759
名字好，不一定总是意味着

1712
02:36:27,759 --> 02:36:31,520
一个组织创建的依赖实际上是更好的质量

1713
02:36:31,520 --> 02:36:35,680
这只是意味着它被弃用的可能性要小一些

1714
02:36:35,680 --> 02:36:37,759
比呃

1715
02:36:37,759 --> 02:36:40,797
如果同一个库是由

1716
02:36:40,797 --> 02:36:46,319
以他们的私人名义单身的人，所以这些实际上可能是诚实的

1717
02:36:46,319 --> 02:36:48,957
你现在听起来有点高水平

1718
02:36:48,957 --> 02:36:51,919
你可能会想好吧为什么我必须需要所有

1719
02:36:51,919 --> 02:36:58,558
这只是新人很容易扑得到

1720
02:36:58,558 --> 02:37:02,797
依赖依赖，因为它很容易引入依赖和

1721
02:37:02,797 --> 02:37:05,599
只需使用它，人们就会忘记它哦

1722
02:37:05,599 --> 02:37:09,040
这实际上是一个人坐在他们的

1723
02:37:09,040 --> 02:37:12,797
房间就像我坐在这里告诉你不要听那些

1724
02:37:12,797 --> 02:37:17,680
坐在他们的房间里，但我相信

1725
02:37:17,680 --> 02:37:23,040
试着引导你的想法多一点

1726
02:37:23,040 --> 02:37:28,637
从长远来看对您的项目有益的建设性依赖关系，但如果

1727
02:37:28,637 --> 02:37:31,200
您正在编写一个应用程序，我只想发布它而不关心

1728
02:37:31,200 --> 02:37:34,637
在你发布它之后它就不再存在了

1729
02:37:34,637 --> 02:37:39,119
也许可以只从一个

1730
02:37:39,119 --> 02:37:42,637
那种你根本不在乎但我什至会挑战的依赖

1731
02:37:42,637 --> 02:37:46,159
发布您可能不关心的应用程序的想法

1732
02:37:46,159 --> 02:37:49,919
第一次发布，但因为这通常不是一个好主意

1733
02:37:49,919 --> 02:37:55,040
好的，很多关于依赖关系的讨论，但我认为必须说

1734
02:37:55,040 --> 02:37:58,718
所以我们在谈论依赖 我只是要带上字幕所以

1735
02:37:58,718 --> 02:38:02,637
嗯现在在这里你也可以看到有一个

1736
02:38:02,637 --> 02:38:06,718
默认情况下，这里的依赖依赖是由颤振本身带入你的

1737
02:38:06,718 --> 02:38:11,680
称为 cupertino 图标和 cupertino 图标是一个依赖项

1738
02:38:11,680 --> 02:38:15,520
我相信flutter团队本身其实是落后的

1739
02:38:15,520 --> 02:38:19,119
所以你可能会想好吧，这些是什么

1740
02:38:19,119 --> 02:38:22,240
依赖关系，比如它们来自哪里，它们实际上来自正常

1741
02:38:22,240 --> 02:38:26,479
人和公司，所以我要提出一个

1742
02:38:26,479 --> 02:38:31,680
嗯网站在这里给你，它叫做pop.dev 我会带来它

1743
02:38:31,680 --> 02:38:38,159
起来，这样你就可以在这里看到它，嗯

1744
02:38:38,159 --> 02:38:42,240
您可以看到在弹出的这个网站中您可以搜索依赖项

1745
02:38:42,240 --> 02:38:45,439
所以我实际上要从这里复制这个 Cupertino 图标

1746
02:38:45,439 --> 02:38:50,878
我要把它粘贴到那里 um kupertino icon just enter and I'm

1747
02:38:50,878 --> 02:38:54,637
按下它，你会看到它是由颤振团队发布的

1748
02:38:54,637 --> 02:38:57,040
自己还好吧

1749
02:38:57,040 --> 02:39:01,200
pop.dev 是您将在其中搜索依赖项的网站，因此您只需

1750
02:39:01,200 --> 02:39:07,040
搜索一个包，然后它会在这里为您显示结果

1751
02:39:07,040 --> 02:39:11,279
嗯，这就是你搜索依赖项的方式好吧

1752
02:39:11,279 --> 02:39:13,759
嗯和

1753
02:39:13,759 --> 02:39:17,040
既然我们谈到了这个，让我们也谈谈一个叫做 dev 的东西

1754
02:39:17,040 --> 02:39:21,840
他们拥有的依赖关系是

1755
02:39:21,840 --> 02:39:24,637
将带入您的项目的依赖项

1756
02:39:24,637 --> 02:39:29,279
只有在开发中才有用

1757
02:39:29,279 --> 02:39:33,040
如果您熟悉软件工程，则正常的依赖关系将

1758
02:39:33,040 --> 02:39:36,479
链接到您的项目，然后您将与您的项目一起发货

1759
02:39:36,479 --> 02:39:41,599
应用程序而开发依赖项只有依赖项

1760
02:39:41,599 --> 02:39:45,279
你在开发的时候会用到

1761
02:39:45,279 --> 02:39:48,558
为了使您的软件更好，正如您在这里看到的那样

1762
02:39:48,558 --> 02:39:51,680
例如依赖项是颤振测试

1763
02:39:51,680 --> 02:39:56,319
或者在这种情况下颤动镜头以及对不起

1764
02:39:56,319 --> 02:40:00,000
好的，所以这里有很多很多的事情要讨论，你可以

1765
02:40:00,000 --> 02:40:03,040
将来看到这里 实际上我们会处理这个你可以带进来的

1766
02:40:03,040 --> 02:40:08,000
资产和图像并将它们带入您的项目中

1767
02:40:08,000 --> 02:40:11,680
所以这是对酒吧的快速浏览

1768
02:40:11,680 --> 02:40:16,240
规范yaml，我要让它在这里

1769
02:40:16,240 --> 02:40:20,240
我只是在我的笔记中打勾，弹出我们讨论过的 yaml

1770
02:40:20,240 --> 02:40:24,558
现在到了重要的部分

1771
02:40:24,558 --> 02:40:29,119
实际上，在我们的应用程序中，我们将需要一些依赖项

1772
02:40:29,119 --> 02:40:32,000
现在能够继续使用该应用程序

1773
02:40:32,000 --> 02:40:36,957
我们之前没有谈过太多关于 firebase 的事情，但只知道 firebase 是

1774
02:40:36,957 --> 02:40:43,680
一个工具，它允许你去无服务器，但也有一个

1775
02:40:43,680 --> 02:40:48,957
现在服务器无服务器只是一个有趣的时髦词，现在正在使用

1776
02:40:48,957 --> 02:40:53,040
描述由其他人编写的服务器，因此您不知道的服务器

1777
02:40:53,040 --> 02:40:56,159
如果您不是软件开发人员，则必须亲自编写

1778
02:40:56,159 --> 02:40:59,040
背景，例如您是产品所有者或设计师

1779
02:40:59,040 --> 02:41:03,680
服务器是您的数据在云中的位置

1780
02:41:03,680 --> 02:41:06,159
所以

1781
02:41:06,159 --> 02:41:09,759
作为一名开发人员，你现在正坐在电脑前编写一个

1782
02:41:09,759 --> 02:41:12,319
颤振应用程序和您的闪存应用程序将安装在

1783
02:41:12,319 --> 02:41:16,479
ios和android设备，即客户端，客户端是消费者

1784
02:41:16,479 --> 02:41:21,119
服务器发送的数据没问题，因此服务器是逻辑所在的位置

1785
02:41:21,119 --> 02:41:26,718
云中的计算机好吧，firebase 是云中的计算机，只是想

1786
02:41:26,718 --> 02:41:30,957
想想那是谷歌写的，所以你用简单的命令来控制它

1787
02:41:30,957 --> 02:41:35,840
在您的计算机上，但它控制您的数据，因此您的客户会颤抖

1788
02:41:35,840 --> 02:41:39,840
应用程序可以连接到它并获取数据并读取数据和

1789
02:41:39,840 --> 02:41:43,680
在客户端操作数据，以便

1790
02:41:43,680 --> 02:41:49,040
现在为了与firebase交谈，我们实际上需要一些嗯

1791
02:41:49,040 --> 02:41:55,200
依赖项和 firebase 嗯，我会在这里打开我的 safari 窗口

1792
02:41:55,200 --> 02:42:01,040
现在让我们看看我要搜索的firebase核心

1793
02:42:01,040 --> 02:42:04,479
点击它firebase core，你可以看到它是由出版商写的

1794
02:42:04,479 --> 02:42:07,840
firebase.google.com 并记住颤振是

1795
02:42:07,840 --> 02:42:12,479
实际上也是由谷歌创建的工具

1796
02:42:12,479 --> 02:42:17,119
我个人认为任何与 firebase 相关的东西都可以携带

1797
02:42:17,119 --> 02:42:21,119
进入你的颤振应用程序有一个依赖关系

1798
02:42:21,119 --> 02:42:25,599
所以我要去这里然后说

1799
02:42:25,599 --> 02:42:31,520
我们需要这个特定项目的四个依赖项，好吧

1800
02:42:31,520 --> 02:42:34,878
如果您在 Visual Studio Code 中，您可以带上

1801
02:42:34,878 --> 02:42:38,558
终端启动 呃我实际上忘记了带终端的命令我

1802
02:42:38,558 --> 02:42:43,439
认为在我的 Mac 上是控制反引号，但我相信你也可以随时带来

1803
02:42:43,439 --> 02:42:48,957
up 终端建议 去终端和新终端 好的，现在我可以看到那里

1804
02:42:48,957 --> 02:42:53,040
这里有两个终端窗口好吗现在我要摆脱资源管理器

1805
02:42:53,040 --> 02:42:58,240
左边，所以你可以看到这里的数据好一点

1806
02:42:58,240 --> 02:43:02,637
我们需要将四个依赖项引入到我们的项目中

1807
02:43:02,637 --> 02:43:07,360
我希望你能完全按照我的做法去做

1808
02:43:07,360 --> 02:43:10,479
以前我们必须做的事情，我的意思是以前的

1809
02:43:10,479 --> 02:43:13,680
如果您想引入依赖项，则必须使用颤振版本

1810
02:43:13,680 --> 02:43:17,759
去说你去你的流行规范然后

1811
02:43:17,759 --> 02:43:22,159
使用特殊版本手动添加依赖项，然后

1812
02:43:22,159 --> 02:43:27,200
你必须去那些依赖项顶级开发网站查看当前版本

1813
02:43:27,200 --> 02:43:29,680
除了最新版本的颤振之外

1814
02:43:29,680 --> 02:43:34,080
你不必那样做你所要做的就是说flutter pop add

1815
02:43:34,080 --> 02:43:37,279
我现在就去做

1816
02:43:37,279 --> 02:43:41,119
所以这就是你引入依赖的方式

1817
02:43:41,119 --> 02:43:46,240
我们需要的第一个依赖项是 firebase 核心，所以只需输入此命令

1818
02:43:46,240 --> 02:43:50,240
也许需要一些时间

1819
02:43:50,240 --> 02:43:53,360
好的，然后说相同的命令，但说

1820
02:43:53,360 --> 02:43:56,637
firebase off 我要看看我的笔记

1821
02:43:56,637 --> 02:44:00,479
基本上这里是为了确保我输入了正确的依赖项

1822
02:44:00,479 --> 02:44:03,599
我现在不打算过多地谈论这些依赖项是什么

1823
02:44:03,599 --> 02:44:06,957
实际上是因为这需要很多

1824
02:44:06,957 --> 02:44:10,957
时间也是如此，所以让我们把依赖项带进来，有四个

1825
02:44:10,957 --> 02:44:16,159
依赖项，所以我们必须引入的下一个依赖项是云

1826
02:44:16,159 --> 02:44:19,040
火库

1827
02:44:19,040 --> 02:44:21,439
和

1828
02:44:21,439 --> 02:44:27,919
让我们去下一个，我们说

1829
02:44:27,919 --> 02:44:35,759
cloud firestore 是第三个依赖项，然后我们说 firebase analytics

1830
02:44:35,759 --> 02:44:41,279
所以这是第四个依赖所以

1831
02:44:41,279 --> 02:44:45,360
如果你看这里，我们目前已经引入了四个依赖项

1832
02:44:45,360 --> 02:44:50,240
有一个火力核心，就像

1833
02:44:50,240 --> 02:44:55,200
内核是firebase的主要重要部分，这又是什么

1834
02:44:55,200 --> 02:44:59,759
我们将用作我们所有用户的所有节点的服务器

1835
02:44:59,759 --> 02:45:04,319
下一个是firebase auth

1836
02:45:04,319 --> 02:45:09,360
auth 是简短的形式，让我看看它去哪儿了，嗯，这里是火力基地

1837
02:45:09,360 --> 02:45:12,319
用于身份验证和

1838
02:45:12,319 --> 02:45:15,360
嗯，我还没有展示我们的应用程序的实际外观

1839
02:45:15,360 --> 02:45:19,599
喜欢，但 auth 用于身份验证是我们的用户将在哪里

1840
02:45:19,599 --> 02:45:23,919
能够注册 uh 登录我们的应用程序并注销

1841
02:45:23,919 --> 02:45:28,400
并获得电子邮件确认发送到他们的电子邮件，以便能够

1842
02:45:28,400 --> 02:45:31,759
验证帐户，因此 auth 用于身份验证，那就是

1843
02:45:31,759 --> 02:45:35,119
我们要用它来做什么，以确保那些

1844
02:45:35,119 --> 02:45:39,919
正在与我们的应用程序交互他们实际上已经登录了

1845
02:45:39,919 --> 02:45:46,400
下一部分是 cloud firestore，当我们使用这个依赖项时

1846
02:45:46,400 --> 02:45:51,759
实际上将登录的用户注释存储在 firebase 后端

1847
02:45:51,759 --> 02:45:54,159
好吧，老实说，这只是时髦的名字

1848
02:45:54,159 --> 02:46:01,439
你他们只是像我和你这样的开发人员决定的名字

1849
02:46:01,439 --> 02:46:05,840
下一部分是 Firebase 分析，用于

1850
02:46:05,840 --> 02:46:10,957
如果您在基本设置 Firebase 后端时使用 Firebase 分析

1851
02:46:10,957 --> 02:46:14,957
例如，您将获得一些免费的分析

1852
02:46:14,957 --> 02:46:18,000
屏幕用户是否去了他们按下了哪个按钮，你可以看看

1853
02:46:18,000 --> 02:46:22,159
在这些分析中，当您查看您的 Firebase 控制台时，我们将

1854
02:46:22,159 --> 02:46:27,200
稍后再说我的意思是我知道所有这些都是安静的

1855
02:46:27,200 --> 02:46:30,080
如果您不熟悉 Firebase，则可能是高水平

1856
02:46:30,080 --> 02:46:34,957
可能就像我们刚刚做了什么，没关系，你不必知道

1857
02:46:34,957 --> 02:46:39,840
所有这一切只知道我们是这四个依赖项是我们需要的东西

1858
02:46:39,840 --> 02:46:43,360
为了使我们的应用程序功能正常所以现在我们已经添加了这些

1859
02:46:43,360 --> 02:46:47,119
依赖项，你实际上可以回到你的 popspakiano 文件，并有一个

1860
02:46:47,119 --> 02:46:51,759
在这里查看我们添加的依赖项和

1861
02:46:51,759 --> 02:46:56,080
您可以看到所有这些都是自动为您添加的，并带有最新的

1862
02:46:56,080 --> 02:47:00,797
版本还可以，所以在以前的颤振版本中，我们必须这样做

1863
02:47:00,797 --> 02:47:04,558
手动，但现在你可以说flutter pop ad，它会添加

1864
02:47:04,558 --> 02:47:09,279
依赖项让你直接弹出特别好的

1865
02:47:09,279 --> 02:47:13,119
我们在这里讨论了很多事情

1866
02:47:13,119 --> 02:47:17,200
几乎花了 50 分钟来完成所有这些基础知识，但我相信

1867
02:47:17,200 --> 02:47:21,599
实际上基础知识应该比更高级的东西需要更多的时间来解释

1868
02:47:21,599 --> 02:47:25,439
因为越高级你得到的越少

1869
02:47:25,439 --> 02:47:30,159
你需要的解释，这就是为什么所有这些基本的事情基本上都需要时间

1870
02:47:30,159 --> 02:47:33,680
解释[音乐]

1871
02:47:33,680 --> 02:47:36,400
好吧，我只是要记下我的笔记

1872
02:47:36,400 --> 02:47:40,159
我们已经讨论过所有这些

1873
02:47:40,159 --> 02:47:44,637
主题，我认为这实际上是一个包装

1874
02:47:44,637 --> 02:47:48,957
第八章所以第八章我们谈到了

1875
02:47:48,957 --> 02:47:52,159
如何设置我们的项目 我们实际上已经设置了我们的项目 现在我们已经设置了我们的项目

1876
02:47:52,159 --> 02:47:57,680
依赖项查看了默认的颤振模板，我们也

1877
02:47:57,680 --> 02:48:02,558
谈到流行特别节目，所以这在章节编号中很棒

1878
02:48:02,558 --> 02:48:08,159
九 我们要谈谈我最喜欢的 ios 应用程序设置

1879
02:48:08,159 --> 02:48:14,558
章实际上我们要经历很多事情简介证书

1880
02:48:14,558 --> 02:48:19,919
我们将谈论很多很多我可以在这里看到的应用程序 ID

1881
02:48:19,919 --> 02:48:23,680
列出，所以我真的很兴奋第九章

1882
02:48:23,680 --> 02:48:27,119
所以去喝杯咖啡或茶

1883
02:48:27,119 --> 02:48:32,000
我会在下一章见到你你好，欢迎来到第九章

1884
02:48:32,000 --> 02:48:34,479
本章我们要讲的这门课程

1885
02:48:34,479 --> 02:48:41,520
关于我们的 ios 应用程序的设置，正如我所提到的，我认为它在 um

1886
02:48:41,520 --> 02:48:44,319
介绍呃绝对第一章

1887
02:48:44,319 --> 02:48:48,479
实际上这不是一章它只是对整个课程的介绍

1888
02:48:48,479 --> 02:48:52,797
嗯，我们谈了一些关于我们打算用这个做什么

1889
02:48:52,797 --> 02:48:56,878
我们在这里开发的应用程序和我们正在开发的两件事

1890
02:48:56,878 --> 02:49:01,040
要做的是在应用商店和游戏中实际发布应用程序

1891
02:49:01,040 --> 02:49:05,040
现在存储，如果您不打算实际这样做，您可以

1892
02:49:05,040 --> 02:49:08,479
可能跳过这一章

1893
02:49:08,479 --> 02:49:13,200
但我仍然相信，如果你打算成为一名颤振开发者

1894
02:49:13,200 --> 02:49:16,718
你需要知道这些东西是如何工作的，因为

1895
02:49:16,718 --> 02:49:20,400
作为一个慌张的开发者，取决于你是什么样的颤振开发者

1896
02:49:20,400 --> 02:49:24,080
实际上想和我成为嗯，假设你想

1897
02:49:24,080 --> 02:49:27,360
成为一名真正的 Flutter 开发人员，您可以在其中从事不同的工作

1898
02:49:27,360 --> 02:49:32,840
应用程序并亲自发布它们，或者您可以像团队一样工作

1899
02:49:32,840 --> 02:49:36,479
概念，呃，在你所在的团队的背景下

1900
02:49:36,479 --> 02:49:40,319
例如，与公司内部的其他开发人员合作，以便在

1901
02:49:40,319 --> 02:49:44,400
他们的应用程序并发布它们比在应用程序商店中如此

1902
02:49:44,400 --> 02:49:47,040
如果您属于您真正想要的任何类别

1903
02:49:47,040 --> 02:49:50,558
发布您的应用程序，然后我坚信您应该知道该怎么做

1904
02:49:50,558 --> 02:49:53,759
那你自己虽然你可能是其中的一部分

1905
02:49:53,759 --> 02:49:58,878
一个庞大组织的团队，其中发布过程是自己的类似过程

1906
02:49:58,878 --> 02:50:02,479
你基本上把你的源代码交给他们，然后他们基本上

1907
02:50:02,479 --> 02:50:06,240
构建它并修复它并发布它，但如果你想变得像一个

1908
02:50:06,240 --> 02:50:10,558
成熟的颤振开发人员或移动开发人员，你会

1909
02:50:10,558 --> 02:50:13,119
需要知道如何真正释放你的

1910
02:50:13,119 --> 02:50:16,400
好的应用程序，所以在本章中，我们将讨论

1911
02:50:16,400 --> 02:50:20,400
关于发布您的应用程序，或者实际上我们是

1912
02:50:20,400 --> 02:50:24,558
将谈论准备您的应用程序以发布

1913
02:50:24,558 --> 02:50:29,599
稍后应用商店，所以你需要知道的

1914
02:50:29,599 --> 02:50:33,599
是你如何设置你的颤振应用程序，这样你就可以真正

1915
02:50:33,599 --> 02:50:38,240
稍后构建并在 ios 应用程序中发布

1916
02:50:38,240 --> 02:50:44,957
存储好，如果我在这里提出下一个标题

1917
02:50:44,957 --> 02:50:48,718
你会看到，为了让你能够

1918
02:50:48,718 --> 02:50:54,400
构建您的应用程序，然后将其部署在您需要 ios 的应用商店中

1919
02:50:54,400 --> 02:50:59,599
开发者帐户，我之前谈到过这个，嗯

1920
02:50:59,599 --> 02:51:03,040
开发者帐户是什么以及

1921
02:51:03,040 --> 02:51:08,637
你必须申请它我想这是我们在第一章谈到的

1922
02:51:08,637 --> 02:51:11,520
但如果你跳过了那一章，你需要知道你必须

1923
02:51:11,520 --> 02:51:16,878
在 Apple 申请开发者帐户并获得该开发者帐户

1924
02:51:16,878 --> 02:51:21,520
那么您将能够访问一个名为

1925
02:51:21,520 --> 02:51:25,360
应用商店连接应用商店连接是您的门户

1926
02:51:25,360 --> 02:51:30,000
管理您的应用程序并上传到应用商店

1927
02:51:30,000 --> 02:51:33,439
下载一些调试信息等，我不会过多介绍

1928
02:51:33,439 --> 02:51:38,479
详细信息，它还有一个旁注，作为开发人员，您将获得访问权限

1929
02:51:38,479 --> 02:51:42,080
我认为开发人员门户或类似的东西我认为

1930
02:51:42,080 --> 02:51:45,279
它叫我相信所以我想我们就叫它

1931
02:51:45,279 --> 02:51:49,279
开发者门户或开发者开发者网站

1932
02:51:49,279 --> 02:51:53,040
这样您就可以访问它，并且可以管理诸如

1933
02:51:53,040 --> 02:51:58,080
证书和配置文件没问题，我们很快就会谈到

1934
02:51:58,080 --> 02:52:00,797
实际上，假设您有您的开发人员

1935
02:52:00,797 --> 02:52:03,919
帐户，如果您没有开发者帐户，那么请去

1936
02:52:03,919 --> 02:52:09,119
并在线搜索注册开发者帐户或观看第一章

1937
02:52:09,119 --> 02:52:12,718
我得看看我的笔记实际上是不是我们谈论的

1938
02:52:12,718 --> 02:52:17,200
在第一章实际上是的，我可以在这里看到第一章

1939
02:52:17,200 --> 02:52:21,040
标题为开发者帐户，在那一章中我们讨论了如何

1940
02:52:21,040 --> 02:52:25,759
再次深度注册ios开发者，请去观看

1941
02:52:25,759 --> 02:52:29,040
第一章，如果你还没有这样做，如果你打算实际发布

1942
02:52:29,040 --> 02:52:33,200
您在 ios 应用商店中的应用

1943
02:52:33,200 --> 02:52:36,878
很抱歉

1944
02:52:36,878 --> 02:52:40,159
所以现在你知道你需要开发者帐户并且它需要花费一点

1945
02:52:40,159 --> 02:52:45,040
一点钱，我想大约是 99，所以在瑞典大约是 990 瑞典克朗

1946
02:52:45,040 --> 02:52:49,119
类似的东西，或者差不多 1000 瑞典克朗

1947
02:52:49,119 --> 02:52:51,279
嗯，现在我们已经谈到了

1948
02:52:51,279 --> 02:52:55,119
开发者帐户让我们谈谈证书和配置文件，因为这

1949
02:52:55,119 --> 02:52:58,558
是许多移动开发人员在使用 ios 时绊倒的事情

1950
02:52:58,558 --> 02:53:01,680
开发 嗯，我的意思是我一直在做 ios

1951
02:53:01,680 --> 02:53:06,159
自 2000 年末 2007 年以来的发展

1952
02:53:06,159 --> 02:53:11,680
几乎没有 um ios sdk，所以它就像一个集合

1953
02:53:11,680 --> 02:53:16,637
工具和很少的库支持，因为最初是史蒂夫的 ios 应用程序

1954
02:53:16,637 --> 02:53:20,240
工作定义应该是 Web 应用程序，然后

1955
02:53:20,240 --> 02:53:23,599
苹果刚刚转变为不相信是的，我们实际上必须拥有

1956
02:53:23,599 --> 02:53:27,040
原生应用程序，所以他们发布了一些工具，xcode 在那里，所以你

1957
02:53:27,040 --> 02:53:30,878
可以用 ios opengl es 构建一些简单的应用程序，所以你

1958
02:53:30,878 --> 02:53:34,479
也可以制作一些游戏，但是

1959
02:53:34,479 --> 02:53:37,680
它是如何开始的，苹果想要确保

1960
02:53:37,680 --> 02:53:42,558
开发的应用程序只能通过应用商店分发，因此

1961
02:53:42,558 --> 02:53:47,119
他们说好吧，如果我给破坏者例如

1962
02:53:47,119 --> 02:53:50,479
开发者帐户，他不应该能够创建自己的应用商店，因为他们

1963
02:53:50,479 --> 02:53:53,520
这只是一个我不打算详细说明什么

1964
02:53:53,520 --> 02:53:58,000
他们为什么这样做有一个完整的话题，我们可以像讨论

1965
02:53:58,000 --> 02:54:01,279
几天我们可以谈论它是否是垄断我不

1966
02:54:01,279 --> 02:54:04,637
知道所以我不打算详细介绍，但你需要什么

1967
02:54:04,637 --> 02:54:09,360
知道有没有app store 嗯

1968
02:54:09,360 --> 02:54:12,957
基本上只是称为应用商店，但您可以调用 ios 应用商店 mac 应用程序或

1969
02:54:12,957 --> 02:54:16,878
无论你想要什么，苹果都可以控制它，所以它是

1970
02:54:16,878 --> 02:54:19,680
坐在那里喜欢控制的苹果

1971
02:54:19,680 --> 02:54:24,479
衡量在应用商店发布的应用质量良好

1972
02:54:24,479 --> 02:54:31,200
例如好吧，所以苹果自己有一个证书现在证书是

1973
02:54:31,200 --> 02:54:35,599
就像一张纸 呃想象一下他们的一张纸质证书

1974
02:54:35,599 --> 02:54:40,000
坚持下去，他们说好的，无论我们在应用商店发布什么

1975
02:54:40,000 --> 02:54:44,878
嗯，它来自我们，好吧，所以每个应用程序都在

1976
02:54:44,878 --> 02:54:48,637
ios应用商店实际上来自苹果，我不是这个意思

1977
02:54:48,637 --> 02:54:52,718
苹果已经编写了应用程序我的意思是苹果已经使用

1978
02:54:52,718 --> 02:54:55,680
他们证明那张纸没问题，所以

1979
02:54:55,680 --> 02:55:00,878
然后当应用程序下载到您的 iPhone 时，您的 iphone 实际上会检查

1980
02:55:00,878 --> 02:55:04,159
这是一个这是一个受信任的应用程序吗

1981
02:55:04,159 --> 02:55:09,119
它来自所以 ios 作为一个操作系统它可以

1982
02:55:09,119 --> 02:55:12,000
包含并且您可以安装许多不同类型的应用程序

1983
02:55:12,000 --> 02:55:14,319
来自许多不同类型的来源

1984
02:55:14,319 --> 02:55:17,439
例如 ios 应用商店，或者您实际上可以

1985
02:55:17,439 --> 02:55:21,840
下载直接来自特定开发人员的应用程序

1986
02:55:21,840 --> 02:55:25,439
现在所有这些应用程序都需要签名

1987
02:55:25,439 --> 02:55:28,797
他们需要使用仅用于识别的证书进行签名

1988
02:55:28,797 --> 02:55:33,520
它们来自哪里，因此证书是您作为开发人员的一张纸

1989
02:55:33,520 --> 02:55:37,840
持有，每一份申请，请原谅你的每一份申请

1990
02:55:37,840 --> 02:55:42,718
develop 将使用该证书进行签名，好吧，因此该证书是

1991
02:55:42,718 --> 02:55:47,680
您作为开发人员的身份，它变得有点

1992
02:55:47,680 --> 02:55:52,957
将您的应用程序带到目的地，所以如果您开发

1993
02:55:52,957 --> 02:55:56,000
我们在这门课程中做的这个笔记应用程序，你用你的签名

1994
02:55:56,000 --> 02:56:00,159
证书，那么您的应用程序将具有该证书签名

1995
02:56:00,159 --> 02:56:04,637
在里面所以当我把它寄给苹果然后苹果就像啊哈就是这样

1996
02:56:04,637 --> 02:56:09,439
创建此应用程序的开发人员还可以，然后当苹果时

1997
02:56:09,439 --> 02:56:13,919
说好的你的应用程序很好你不能将它发布到应用商店然后

1998
02:56:13,919 --> 02:56:18,637
苹果用他们自己的证书重新签署你的申请

1999
02:56:18,637 --> 02:56:22,637
那只是为了确保您的应用程序在签署后

2000
02:56:22,637 --> 02:56:28,080
苹果证书可以分发到ios应用商店并通过以下方式下载

2001
02:56:28,080 --> 02:56:34,479
全球数百万用户，所以先生只知道该证书

2002
02:56:34,479 --> 02:56:38,878
你作为开发者的身份可以吗[音乐]

2003
02:56:38,878 --> 02:56:42,319
现在我们讨论了证书让我们谈谈配置文件

2004
02:56:42,319 --> 02:56:46,797
因为这也是一些开发人员的绊脚石

2005
02:56:46,797 --> 02:56:50,400
嗯，特别是如果他们不是来自原生 ios 开发背景

2006
02:56:50,400 --> 02:56:52,957
我做什么

2007
02:56:52,957 --> 02:56:58,240
配置文件，您看到证书识别您

2008
02:56:58,240 --> 02:57:04,558
简而言之，配置文件可以识别您的应用，就像

2009
02:57:04,558 --> 02:57:08,797
非常简短的表达方式，因此您作为开发人员可能会

2010
02:57:08,797 --> 02:57:13,439
10 20 30 个您正在开发或已开发的应用程序

2011
02:57:13,439 --> 02:57:17,439
这些应用程序中的每一个都有自己的身份

2012
02:57:17,439 --> 02:57:21,599
最后的身份与您作为开发人员有关，所以您说这是我的

2013
02:57:21,599 --> 02:57:24,558
证书我是谁

2014
02:57:24,558 --> 02:57:28,558
但是当您创建一个应用程序时，该应用程序也需要

2015
02:57:28,558 --> 02:57:32,957
识别自己，就像在这里我是我是一个用这个签名的应用程序

2016
02:57:32,957 --> 02:57:38,400
使用此证书的配置文件，因此只需知道配置文件有点像

2017
02:57:38,400 --> 02:57:42,240
您的应用程序的身份和不同的风格

2018
02:57:42,240 --> 02:57:47,200
申请和证书是您的身份

2019
02:57:47,200 --> 02:57:49,919
作为开发该应用程序的人好吧

2020
02:57:49,919 --> 02:57:53,840
所以，如果你注意到我只是说不同

2021
02:57:53,840 --> 02:57:58,240
你的应用程序的风格，我的意思是，如果你不是

2022
02:57:58,240 --> 02:58:02,957
来自开发背景，例如，如果您来自

2023
02:58:02,957 --> 02:58:07,599
设计背景，你有一个你正在设计的 figma 文件或 visio 文件

2024
02:58:07,599 --> 02:58:11,360
你的 wi-frames 以及任何你来自产品所有者所有权的东西

2025
02:58:11,360 --> 02:58:14,637
背景比你可能喜欢的

2026
02:58:14,637 --> 02:58:18,400
使用 jira 或 excel 表或任何你放置的东西

2027
02:58:18,400 --> 02:58:23,520
您可能不熟悉应用程序的不同风格的要求

2028
02:58:23,520 --> 02:58:27,439
但是，如果您使用应用程序工作得有点接近

2029
02:58:27,439 --> 02:58:31,200
团队然后你就会知道每个应用程序都有不同的风格

2030
02:58:31,200 --> 02:58:34,240
这些味道通常是我的意思是它们是

2031
02:58:34,240 --> 02:58:38,159
通常有两种口味，一种是开发口味，另一种是开发口味

2032
02:58:38,159 --> 02:58:43,040
另一种是生产风味 开发风味是应用

2033
02:58:43,040 --> 02:58:47,040
你看看你是否与正在开发的软件工程师一起与开发人员坐在一起

2034
02:58:47,040 --> 02:58:50,797
他们每天都在编写您的应用程序

2035
02:58:50,797 --> 02:58:55,360
修复他们正在修复的错误添加新功能然后他们将提供

2036
02:58:55,360 --> 02:59:00,957
产品给你作为一个软件呃作为一个产品所有者或者一个设计师

2037
02:59:00,957 --> 02:59:04,159
你会在你的应用程序上下载那个味道，就像这样

2038
02:59:04,159 --> 02:59:07,360
现在看起来很好

2039
02:59:07,360 --> 02:59:11,040
突然之间，您按下一个按钮，该按钮使应用程序崩溃，因此

2040
02:59:11,040 --> 02:59:14,558
应用程序就消失了哦，它崩溃了

2041
02:59:14,558 --> 02:59:18,558
那时，如果开发人员正确地完成了他们的工作，那么他们

2042
02:59:18,558 --> 02:59:22,558
不得不在应用程序中加入一些崩溃分析

2043
02:59:22,558 --> 02:59:25,599
一旦应用程序崩溃或

2044
02:59:25,599 --> 02:59:29,599
应用程序的那种风格的应用程序发生了一些不好的事情

2045
02:59:29,599 --> 02:59:31,680
你安装在你的

2046
02:59:31,680 --> 02:59:37,360
iphone或android手机或平板电脑或其他任何东西，他们会得到

2047
02:59:37,360 --> 02:59:41,680
所谓的崩溃报告 崩溃报告顾名思义

2048
02:59:41,680 --> 02:59:46,240
这只是一份报告，其中崩溃信息完全可见，并且

2049
02:59:46,240 --> 02:59:50,080
他们甚至可能知道您在什么时间点击了哪个按钮，以及什么是

2050
02:59:50,080 --> 02:59:52,957
您的应用程序当时携带的信息

2051
02:59:52,957 --> 02:59:57,759
它崩溃了，所以它可以帮助他们调试和解决这个问题

2052
02:59:57,759 --> 03:00:01,840
现在，您在手机上安装的这些应用程序风格

2053
03:00:01,840 --> 03:00:06,240
每天都在工作 移动开发人员通常被称为调试

2054
03:00:06,240 --> 03:00:10,240
应用程序和调试应用程序这只是一种说法

2055
03:00:10,240 --> 03:00:15,040
创建它的开发人员创建了应用程序然后有机会

2056
03:00:15,040 --> 03:00:20,797
修复任何可能出现的错误，信息比通常情况下更多

2057
03:00:20,797 --> 03:00:24,878
他们是否以数百万的价格向商店发布了此应用程序

2058
03:00:24,878 --> 03:00:28,797
其他人下载所以这是一种风味它是一种调试风味或

2059
03:00:28,797 --> 03:00:32,718
是一种开发风格还可以，它只是意味着它是一种日常

2060
03:00:32,718 --> 03:00:36,878
就像一个定期更新的应用程序，只有

2061
03:00:36,878 --> 03:00:41,759
非常接近项目的人可以下载的很近的圈子，这很有味道

2062
03:00:41,759 --> 03:00:44,957
好的另一种应用程序

2063
03:00:44,957 --> 03:00:48,957
由开发人员发布可能是生产

2064
03:00:48,957 --> 03:00:51,840
风味和产品生产风味是

2065
03:00:51,840 --> 03:00:56,319
与调试风格相同，但有点像

2066
03:00:56,319 --> 03:01:00,558
有些东西可能会从中删除一些可能会记录的敏感信息

2067
03:01:00,558 --> 03:01:04,718
否则可能会从中删除它就像一个精简版

2068
03:01:04,718 --> 03:01:08,637
出于安全目的，不是类似功能或任何东西的精简版

2069
03:01:08,637 --> 03:01:12,080
只是他们把它弄得更紧了

2070
03:01:12,080 --> 03:01:16,718
它更安全一点，就像可以从中删除一些额外的东西

2071
03:01:16,718 --> 03:01:21,040
否则开发人员可能只需要额外的东西

2072
03:01:21,040 --> 03:01:24,479
当它被包装成这个美丽的小呃

2073
03:01:24,479 --> 03:01:30,479
是的，漂亮的小包装，基本上它也会是一种新的味道，叫做

2074
03:01:30,479 --> 03:01:34,718
生产味道所以现在你有两种味道一种就像

2075
03:01:34,718 --> 03:01:38,159
对于坐在产品旁边的近距离人员

2076
03:01:38,159 --> 03:01:42,159
在同一个产品室或现在每个人都在工作

2077
03:01:42,159 --> 03:01:46,000
远程也许人们坐在家里等，就像产品一样

2078
03:01:46,000 --> 03:01:50,558
团队紧密 开发人员 测试人员 产品负责人 设计师 uxers 每个人

2079
03:01:50,558 --> 03:01:55,040
他们通常获得开发构建的封闭圈

2080
03:01:55,040 --> 03:01:59,360
然后当你将你的申请发送给苹果时

2081
03:01:59,360 --> 03:02:02,878
例如或谷歌审查然后你会

2082
03:02:02,878 --> 03:02:06,797
让生产味道好，我谈论味道的原因是

2083
03:02:06,797 --> 03:02:11,680
至少ios上这些不同的味道基本上都是

2084
03:02:11,680 --> 03:02:16,718
分配有他们自己的特定配置文件，这样你就有一个

2085
03:02:16,718 --> 03:02:21,279
开发配置文件，您将拥有生产配置文件和这些教授

2086
03:02:21,279 --> 03:02:26,718
配置文件向您的应用程序指示它可以做什么和不能做什么

2087
03:02:26,718 --> 03:02:31,279
例如，ios 世界中开发配置文件的功能之一

2088
03:02:31,279 --> 03:02:35,840
是您的应用程序实际上可以安装在挂接电话的电话上

2089
03:02:35,840 --> 03:02:41,200
电缆甚至没有电缆并进行远程调试，因此

2090
03:02:41,200 --> 03:02:44,240
这是你可以用 ios 做的很酷的事情之一，因为你实际上可以

2091
03:02:44,240 --> 03:02:47,840
就像我是坐在这里的开发人员一样，我可以

2092
03:02:47,840 --> 03:02:52,479
拿到设计师的电话，说哦，是的，你想要这样的应用程序

2093
03:02:52,479 --> 03:02:56,240
你真的想看看我在做什么，是的，她或他会说

2094
03:02:56,240 --> 03:02:58,957
你会把他们的手机连接到你的

2095
03:02:58,957 --> 03:03:02,637
计算机并启用称为远程调试的功能

2096
03:03:02,637 --> 03:03:06,159
然后你会断开它然后把手机还给他们

2097
03:03:06,159 --> 03:03:09,599
每当他们希望应用程序像您一样在手机上实时运行时

2098
03:03:09,599 --> 03:03:14,558
开发它，您实际上可以使用您的 xcode 运行应用程序

2099
03:03:14,558 --> 03:03:18,718
住在呃iphone或ipad下所以

2100
03:03:18,718 --> 03:03:23,599
那是它自己的味道和轮廓是开发轮廓

2101
03:03:23,599 --> 03:03:29,040
指示您可以调试该应用程序，但如果您想要

2102
03:03:29,040 --> 03:03:33,439
使用生产配置文件签署您的应用程序并将其发送给苹果

2103
03:03:33,439 --> 03:03:37,599
该配置文件规定该应用程序不允许

2104
03:03:37,599 --> 03:03:40,319
调试，当你

2105
03:03:40,319 --> 03:03:45,360
创建您的应用程序并将其发送到苹果您需要确保两个

2106
03:03:45,360 --> 03:03:48,878
除了许多其他事情之外

2107
03:03:48,878 --> 03:03:52,319
证书和个人资料明智，您需要确保两件事

2108
03:03:52,319 --> 03:03:57,119
该应用程序使用您的生产证书和

2109
03:03:57,119 --> 03:04:02,878
应用程序还使用挂钩的生产配置文件进行签名

2110
03:04:02,878 --> 03:04:07,040
生产证书，所以首先证书应该在那里使用

2111
03:04:07,040 --> 03:04:11,759
证书您使用您签署应用程序的配置文件创建配置文件

2112
03:04:11,759 --> 03:04:16,878
然后你把这个应用程序发送到苹果苹果然后看起来哦一切都是

2113
03:04:16,878 --> 03:04:20,159
是为了配置文件使用是

2114
03:04:20,159 --> 03:04:25,680
生产资料和与资料相关联的证书也是正确的

2115
03:04:25,680 --> 03:04:30,240
将您标识为开发人员的生产证书

2116
03:04:30,240 --> 03:04:33,200
所以差不多 16 分钟

2117
03:04:33,200 --> 03:04:36,240
有关 ios 的配置文件和证书的信息，但我认为它们是

2118
03:04:36,240 --> 03:04:39,520
如此重要，我的意思是它是如此重要

2119
03:04:39,520 --> 03:04:43,279
明白你不应该真的跳过

2120
03:04:43,279 --> 03:04:46,878
这些概念就好像您想成为一名移动开发人员一样

2121
03:04:46,878 --> 03:04:49,680
如此重要

2122
03:04:49,680 --> 03:04:54,400
现在概念已经足够了，现在让我们来谈谈吧

2123
03:04:54,400 --> 03:04:57,439
关于嗯

2124
03:04:57,439 --> 03:05:01,040
开发者帐户，这里我实际上有一个链接，我要去

2125
03:05:01,040 --> 03:05:06,000
在单独的窗口中打开，然后我将把它带到

2126
03:05:06,000 --> 03:05:09,919
前景，所以你实际上可以看到

2127
03:05:09,919 --> 03:05:17,040
所以这是开发者帐户，您可以在苹果网站上看到，我要

2128
03:05:17,040 --> 03:05:21,680
把我的脸往右下角一点点，所以放大窗口

2129
03:05:21,680 --> 03:05:28,159
在这里，这实际上是在开发人员上

2130
03:05:28,159 --> 03:05:32,797
那么你就可以进入账户了，所以在你注册了一个账户之后

2131
03:05:32,797 --> 03:05:36,400
然后你就可以进入这里并用你的帐户登录，我就走了

2132
03:05:36,400 --> 03:05:43,520
使用我的 um 公司的 Apple ID 登录

2133
03:05:43,520 --> 03:05:48,957
我们走了，然后它说好的，我们给你发了一个验证码，我有

2134
03:05:48,957 --> 03:05:52,319
我的苹果手表在这里，所以我要

2135
03:05:52,319 --> 03:05:55,840
说我没有收到代码，然后把代码发短信给我好吗

2136
03:05:55,840 --> 03:05:59,119
所以不久我应该能够得到

2137
03:05:59,119 --> 03:06:03,759
这里有一个验证码，重要的是你不要显示

2138
03:06:03,759 --> 03:06:08,159
这个验证码给其他人只是你不应该这样做所以我

2139
03:06:08,159 --> 03:06:12,797
将屏幕从您可以看到的地方移除，我将输入代码

2140
03:06:12,797 --> 03:06:19,840
发给我的是六位数，嗯，基本上是数字，

2141
03:06:19,840 --> 03:06:23,869
带上手机我现在打开浏览器，我说相信这个浏览器好吧

2142
03:06:23,869 --> 03:06:26,479
[音乐] 所以

2143
03:06:26,479 --> 03:06:31,520
在这里你会看到嗯许可协议已经更新好了，所以我们

2144
03:06:31,520 --> 03:06:36,319
以后应该可以查看，所以我要增加

2145
03:06:36,319 --> 03:06:41,759
该屏幕目前占用的空间，因此您可以完整查看它

2146
03:06:41,759 --> 03:06:45,119
你可以看到，既然你已经登录了这个帐户，你应该是

2147
03:06:45,119 --> 03:06:49,279
能够看到诸如概览会员之类的东西

2148
03:06:49,279 --> 03:06:55,360
证书 ID 和配置文件还可以，然后我之前谈到的

2149
03:06:55,360 --> 03:07:00,080
这是你的应用商店连接好的所以嗯

2150
03:07:00,080 --> 03:07:04,479
这里发生的事情基本上是

2151
03:07:04,479 --> 03:07:08,159
会员证上的那个

2152
03:07:08,159 --> 03:07:11,919
ids 和 profiles 是您管理证书和所有

2153
03:07:11,919 --> 03:07:15,680
正如我之前提到的那样

2154
03:07:15,680 --> 03:07:18,718
嗯，你很重要

2155
03:07:18,718 --> 03:07:23,119
基本上为你的证书创建一个良好的基础创建开发

2156
03:07:23,119 --> 03:07:25,840
证明生产调查，然后你

2157
03:07:25,840 --> 03:07:29,119
之后创建您的个人资料，我们将在此实际讨论

2158
03:07:29,119 --> 03:07:33,919
嗯在这一章

2159
03:07:33,919 --> 03:07:37,919
所以这是我们缺少的部分

2160
03:07:37,919 --> 03:07:41,439
为了能够继续

2161
03:07:41,439 --> 03:07:46,479
所以我们需要我之前提到的证书配置文件和应用程序 ID 应用程序 ID

2162
03:07:46,479 --> 03:07:49,599
是我之前没有提到的东西，所以我认为这很重要

2163
03:07:49,599 --> 03:07:55,439
我提到什么是应用程序 ID 应用程序 ID 是

2164
03:07:55,439 --> 03:08:01,599
除了您创建应用程序 ID 的配置文件之外，还有一个标识符

2165
03:08:01,599 --> 03:08:07,119
苹果和你使用是为了知道你是哪个应用程序

2166
03:08:07,119 --> 03:08:11,119
和你自己说话，也

2167
03:08:11,119 --> 03:08:14,797
例如，如果您将来要启用

2168
03:08:14,797 --> 03:08:19,840
如果您不熟悉推送通知等功能

2169
03:08:19,840 --> 03:08:24,718
推送通知它们基本上是远程通知远程信息

2170
03:08:24,718 --> 03:08:28,400
您可以从互联网上某处的云端发送

2171
03:08:28,400 --> 03:08:33,360
到用户的手机，所以当他们拿到手机时，他们会看到哦，这是一条消息

2172
03:08:33,360 --> 03:08:36,957
从此应用程序中，您可以将其视为远程消息

2173
03:08:36,957 --> 03:08:41,520
就好像有人给你发了一条短信或一条信息一样

2174
03:08:41,520 --> 03:08:45,439
或者例如，如果您正在使用whatsapp或电报某人在其中写消息

2175
03:08:45,439 --> 03:08:47,919
聊天，然后您会在手机上收到通知

2176
03:08:47,919 --> 03:08:54,637
称为推送通知，因此应用程序 ID 主要用于

2177
03:08:54,637 --> 03:08:57,360
能够让您作为开发人员成为

2178
03:08:57,360 --> 03:09:01,759
能够指定应用程序的不同功能，例如它

2179
03:09:01,759 --> 03:09:04,319
可以接收推送通知，它可以

2180
03:09:04,319 --> 03:09:09,360
例如在手机等上存储安全信息等

2181
03:09:09,360 --> 03:09:12,159
所以当我之前提到你需要一个证书和个人资料时

2182
03:09:12,159 --> 03:09:16,878
要签署您的应用程序，您还需要一个应用程序 ID 来识别您的

2183
03:09:16,878 --> 03:09:20,637
应用程序及其功能还可以，所以我们将很快讨论

2184
03:09:20,637 --> 03:09:23,599
实际上

2185
03:09:23,599 --> 03:09:26,878
所以现在

2186
03:09:26,878 --> 03:09:30,080
在我们真正开始创建一个

2187
03:09:30,080 --> 03:09:34,000
证书呃是

2188
03:09:34,000 --> 03:09:38,479
如果你有的话，现在谈谈钥匙串

2189
03:09:38,479 --> 03:09:42,240
开发者帐户在这里，您正计划发布您的应用程序我

2190
03:09:42,240 --> 03:09:44,878
基本上可以假设你有

2191
03:09:44,878 --> 03:09:49,200
一个 Macintosh，这样你就注册了一个帐户

2192
03:09:49,200 --> 03:09:53,520
并且您希望能够使用证书签署您的申请，并且

2193
03:09:53,520 --> 03:09:56,400
个人资料，但是您可能在一群人中

2194
03:09:56,400 --> 03:10:00,797
谁没有 macintosh 和 xcode

2195
03:10:00,797 --> 03:10:04,558
等等，但您仍然希望能够将您的应用程序发布到应用程序

2196
03:10:04,558 --> 03:10:09,040
存储因此您可能希望例如创建您的证书配置文件一个应用程序

2197
03:10:09,040 --> 03:10:13,599
id 然后将该信息发送到某种云托管服务

2198
03:10:13,599 --> 03:10:17,520
让他们签署您的申请，然后将其发回给您

2199
03:10:17,520 --> 03:10:23,759
像那样我自己从来没有做过，但你可能在那个小组中，呃

2200
03:10:23,759 --> 03:10:27,680
为了具有包容性，我认为谈论这一点很重要

2201
03:10:27,680 --> 03:10:31,439
嗯，现在让我们谈谈我在这里放了什么

2202
03:10:31,439 --> 03:10:35,200
作为标题，就像钥匙串中的证书

2203
03:10:35,200 --> 03:10:39,279
您会看到每个证书都是由您创建的

2204
03:10:39,279 --> 03:10:43,439
开发者现在向苹果发送请求

2205
03:10:43,439 --> 03:10:47,520
这个要求基本上是你创建一个数字

2206
03:10:47,520 --> 03:10:50,718
在您的计算机上签名

2207
03:10:50,718 --> 03:10:54,718
您的计算机会保留您的请求，然后将其发送到

2208
03:10:54,718 --> 03:11:00,319
apple apple 说哦，你要一个证书 好的，这是证书

2209
03:11:00,319 --> 03:11:03,200
然后你下载该证书，然后当你双击

2210
03:11:03,200 --> 03:11:09,119
证书它已安装并与您的原始请求挂钩，好吧，所以这里是

2211
03:11:09,119 --> 03:11:13,040
证书，这是私钥，所以

2212
03:11:13,040 --> 03:11:17,200
私钥只是您的计算机存储的一条信息

2213
03:11:17,200 --> 03:11:22,400
仅在您的计算机上以数字方式保存，以便以后下载的证书可以

2214
03:11:22,400 --> 03:11:27,840
实际上被它迷住了，创造了一个链条，好吧

2215
03:11:27,840 --> 03:11:31,599
您的应用程序在使用您的证书签名时

2216
03:11:31,599 --> 03:11:35,840
从苹果下载它实际上包含一些信息

2217
03:11:35,840 --> 03:11:40,000
关于证书和私钥，然后您发送应用程序

2218
03:11:40,000 --> 03:11:45,279
使用这两条信息对苹果进行了签名，所以

2219
03:11:45,279 --> 03:11:48,080
我知道很多信息，但我认为这对每部手机都很重要

2220
03:11:48,080 --> 03:11:51,840
想要为 ios appstore 发布一些东西的开发人员

2221
03:11:51,840 --> 03:11:55,200
现在知道这个

2222
03:11:55,200 --> 03:11:59,360
私钥和证书它们都存储在您的程序中

2223
03:11:59,360 --> 03:12:03,040
如果您有 Macintosh，则计算机称为钥匙串

2224
03:12:03,040 --> 03:12:08,000
我可以调出钥匙串现在让我看看我有哪三个

2225
03:12:08,000 --> 03:12:12,000
屏幕在这里，所以我不知道哪个会打开

2226
03:12:12,000 --> 03:12:17,040
所以我会在这里提出钥匙串

2227
03:12:17,040 --> 03:12:21,599
我会告诉你它的样子

2228
03:12:21,599 --> 03:12:26,637
这是一个钥匙串的例子，你可以看到这里有一个分布

2229
03:12:26,637 --> 03:12:30,159
证书和开发证书可以

2230
03:12:30,159 --> 03:12:34,400
这些证书我没有创建它们我下载了它们但是东西

2231
03:12:34,400 --> 03:12:37,840
在他们下面，这是我在谈论的链条，这是我的关键

2232
03:12:37,840 --> 03:12:42,080
创建好，所以当您请求证书时

2233
03:12:42,080 --> 03:12:47,599
苹果你实际上在你的电脑上创建了这个东西然后你上传了这个东西

2234
03:12:47,599 --> 03:12:52,080
苹果让他们创建一个与那种不相关的证书

2235
03:12:52,080 --> 03:12:55,439
您实际上并没有完全上传此内容，而是与此相关的内容

2236
03:12:55,439 --> 03:12:57,279
可以，然后呢

2237
03:12:57,279 --> 03:13:01,200
对我们来说，为了能够继续下去，我认为重要的是我实际上

2238
03:13:01,200 --> 03:13:04,240
从我的计算机中删除这些现有证书

2239
03:13:04,240 --> 03:13:06,797
所以我就这样，我会像这样

2240
03:13:06,797 --> 03:13:11,119
删除两个项目好吧，然后就这样删除它们

2241
03:13:11,119 --> 03:13:14,797
好吧，现在他们走了，我们需要做的是

2242
03:13:14,797 --> 03:13:17,279
嗯

2243
03:13:17,279 --> 03:13:25,680
这里让我把标题放上来让你看看

2244
03:13:25,680 --> 03:13:33,439
那就是证书，现在我们还需要谈谈嗯

2245
03:13:33,439 --> 03:13:37,119
我们还需要谈论实际删除配置文件现在这是一个

2246
03:13:37,119 --> 03:13:40,637
如果您的计算机上已经安装了类似的配置文件，那么有趣的部分

2247
03:13:40,637 --> 03:13:45,520
你可能不想这样做，但我只是向你展示这一步，以便我们

2248
03:13:45,520 --> 03:13:49,360
从一张白纸开始好吧，所以如果你真的不应该这样做

2249
03:13:49,360 --> 03:13:52,637
知道你在用你的证书做什么，但如果这是第一个

2250
03:13:52,637 --> 03:13:55,759
你这样做的时候，可能已经有一些证书适合你

2251
03:13:55,759 --> 03:13:59,919
您的计算机出于某种原因，那么这就是真正摆脱它们的方法

2252
03:13:59,919 --> 03:14:04,080
所以我要打开finder um

2253
03:14:04,080 --> 03:14:08,000
让我在这里打开查找器，然后我会把它带到这里

2254
03:14:08,000 --> 03:14:13,200
我们需要做的是进入一个名为 um 的文件夹

2255
03:14:13,200 --> 03:14:16,159
我相信它被称为图书馆，然后是移动

2256
03:14:16,159 --> 03:14:18,637
设备，然后是所谓的供应

2257
03:14:18,637 --> 03:14:22,637
个人资料好的，你可以在这里看到，嗯，我会展示

2258
03:14:22,637 --> 03:14:28,319
你再次这条路径，所以它是我的用户库移动设备，然后配置

2259
03:14:28,319 --> 03:14:32,637
个人资料好的，所以在我进入该文件夹后，我

2260
03:14:32,637 --> 03:14:35,919
将删除这些在这里的配置文件好吗

2261
03:14:35,919 --> 03:14:38,878
因此，如果您不想这样做，则不必这样做，并且您确切地知道什么

2262
03:14:38,878 --> 03:14:42,558
你在做，但我这样做只是为了向你展示配置文件总是被存储的

2263
03:14:42,558 --> 03:14:46,797
在那个位置对您的用户来说还可以，您还可以做什么，我真的

2264
03:14:46,797 --> 03:14:50,637
就像如果你说在这里添加列然后把它拖到你的

2265
03:14:50,637 --> 03:14:53,840
收藏夹，因此您不必每次都输入该路径，所以让我们把它

2266
03:14:53,840 --> 03:14:57,360
在这里可以，这样每次我想安装配置文件时，我都可以点击

2267
03:14:57,360 --> 03:15:03,279
在这里，把我的个人资料放在那里

2268
03:15:03,279 --> 03:15:06,718
好的 嗯

2269
03:15:06,718 --> 03:15:10,400
既然我们已经完成了这里标题所示的下一步是删除

2270
03:15:10,400 --> 03:15:13,680
我们现有的来自苹果的证书和资料

2271
03:15:13,680 --> 03:15:17,200
开发帐户，所以让我们在此处转到证书 ID 和配置文件

2272
03:15:17,200 --> 03:15:21,840
左边，你会在这里看到我有很多东西存储在右边

2273
03:15:21,840 --> 03:15:26,000
在这里，好吧，您看到发行版开发开发等等

2274
03:15:26,000 --> 03:15:32,479
所以我们可以在这里做的是继续删除这些证书

2275
03:15:32,479 --> 03:15:35,599
左边你看到它是一个证书所以有很多

2276
03:15:35,599 --> 03:15:39,040
他们所以我要做的就是点击

2277
03:15:39,040 --> 03:15:44,000
在这个上，然后说撤销 撤销点击下一个，然后撤销它们

2278
03:15:44,000 --> 03:15:49,200
如果您是 ios 开发新手并且您刚刚获得

2279
03:15:49,200 --> 03:15:53,840
你的开发帐户你甚至没有任何证书所以这个屏幕是

2280
03:15:53,840 --> 03:15:58,797
对你来说是空的，所以 revoke revoke 所以你的屏幕看起来像

2281
03:15:58,797 --> 03:16:02,400
没关系，所以现在我们没有证书

2282
03:16:02,400 --> 03:16:07,360
我还将进入个人资料并删除这些个人资料，所以如果我只是进去

2283
03:16:07,360 --> 03:16:11,759
在这里，有点像说我所有的个人资料，然后删除这是

2284
03:16:11,759 --> 03:16:15,119
会好起来的，这样的问题好吧，所以现在我已经删除了

2285
03:16:15,119 --> 03:16:19,360
我所有的个人资料和证书

2286
03:16:19,360 --> 03:16:23,919
这就是本章这一部分的目标

2287
03:16:23,919 --> 03:16:27,279
9 我相信是的，我现在已经删除了现有的

2288
03:16:27,279 --> 03:16:30,400
开发和生产证书和

2289
03:16:30,400 --> 03:16:35,439
然后配置文件也完成了，它们也消失了

2290
03:16:35,439 --> 03:16:39,119
所以我们现在需要做的是创造一个叫做发展的东西

2291
03:16:39,119 --> 03:16:42,319
证书，只是回顾一下开发证书是

2292
03:16:42,319 --> 03:16:47,200
允许您作为开发人员运行和测试您的证书的证书

2293
03:16:47,200 --> 03:16:50,957
实际开发时的应用程序

2294
03:16:50,957 --> 03:16:56,797
iphone或者ipad都可以，所以不需要发布

2295
03:16:56,797 --> 03:17:00,558
应用程序，但我个人经过多年的开发经验

2296
03:17:00,558 --> 03:17:03,520
移动应用程序我得出的结论是我实际上更喜欢

2297
03:17:03,520 --> 03:17:07,599
运行我的应用程序测试我的应用程序是真实的设备，因为我

2298
03:17:07,599 --> 03:17:12,240
开发，因为你也有模拟器，你也有模拟器

2299
03:17:12,240 --> 03:17:16,637
模拟和模拟 iphone 的功能和

2300
03:17:16,637 --> 03:17:21,200
android 手机或平板电脑，但我得出的结论是它实际上是

2301
03:17:21,200 --> 03:17:26,159
我至少更好地测试我的应用程序真正的手机或平板电脑

2302
03:17:26,159 --> 03:17:29,759
所以为了能够做到这一点，如果你有一个 iphone

2303
03:17:29,759 --> 03:17:33,520
连接到你的电脑，你想测试你的标志

2304
03:17:33,520 --> 03:17:36,558
该 iphone 上的应用程序，那么您需要做的第一件事就是创建

2305
03:17:36,558 --> 03:17:40,797
开发证书，因此您需要将自己标识为开发人员

2306
03:17:40,797 --> 03:17:44,878
苹果所以让我们去证书部分然后说创建一个

2307
03:17:44,878 --> 03:17:50,159
证书然后选择苹果开发其实对不起ios app

2308
03:17:50,159 --> 03:17:55,200
发展这很有趣它说

2309
03:17:55,200 --> 03:17:58,240
是的所以它说苹果很有趣所以你基本上可以使用

2310
03:17:58,240 --> 03:18:00,637
所谓的苹果开发，但我们不打算这样做，我们只是

2311
03:18:00,637 --> 03:18:03,439
现在要说ios应用开发好了

2312
03:18:03,439 --> 03:18:06,080
所以让我们这样做只需选择 ios 应用程序

2313
03:18:06,080 --> 03:18:11,360
开发，然后按继续，这里说创建一个新证书

2314
03:18:11,360 --> 03:18:17,040
并创建一个新证书，它在等你告诉它你是

2315
03:18:17,040 --> 03:18:20,637
要求开发证书，您现在需要选择一个文件

2316
03:18:20,637 --> 03:18:22,957
你现在需要回到的神奇部分

2317
03:18:22,957 --> 03:18:26,797
钥匙串，让我看看我能不能再调出钥匙串

2318
03:18:26,797 --> 03:18:32,080
在这里只需转到钥匙串访问菜单

2319
03:18:32,080 --> 03:18:36,159
然后说证书助理 然后说

2320
03:18:36,159 --> 03:18:40,400
向证书颁发机构请求证书 好的

2321
03:18:40,400 --> 03:18:46,718
所以我要按那个，我要把我公司的电子邮件放在这里

2322
03:18:46,718 --> 03:18:50,797
和通用名，我只是把它作为我的名字，好吧

2323
03:18:50,797 --> 03:18:53,840
然后我只想说保存到磁盘

2324
03:18:53,840 --> 03:18:57,520
好吧，嗯

2325
03:18:57,520 --> 03:19:01,759
这就是我们现在正在做的事情然后我会说继续它说

2326
03:19:01,759 --> 03:19:05,840
好的，我将在您的桌面或任何您想要的地方写一个文件

2327
03:19:05,840 --> 03:19:09,520
请求所以把它保存在你知道它实际保存在哪里的地方，所以我

2328
03:19:09,520 --> 03:19:13,840
会保存它然后说现在你看到了

2329
03:19:13,840 --> 03:19:17,360
该证书请求本身并没有创建证书，它只是一个

2330
03:19:17,360 --> 03:19:22,000
证书请求，但它所做的是它创建了一个私钥

2331
03:19:22,000 --> 03:19:26,477
你实际上可以在这里找到你的钥匙 你会看到有一个

2332
03:19:26,477 --> 03:19:30,400
如果我说好的私钥，那么这些密钥中的一个就是刚才的那个

2333
03:19:30,400 --> 03:19:34,080
现在创建好了，我不知道是哪一个，因为

2334
03:19:34,080 --> 03:19:39,360
它没有日期，但它只是其中之一，所以每个请求创建一个

2335
03:19:39,360 --> 03:19:43,040
它用自己创建的证书 一个私钥

2336
03:19:43,040 --> 03:19:47,040
好的，请记住这一点，让我们回到我的证书

2337
03:19:47,040 --> 03:19:50,878
现在该文件已保存在您的桌面上，只需说选择文件和

2338
03:19:50,878 --> 03:19:56,718
然后转到您的桌面并选择该证书请求

2339
03:19:56,718 --> 03:20:00,477
你在这里看到证书请求搜索签名请求

2340
03:20:00,477 --> 03:20:05,599
然后说继续，然后说好的，它会在一个

2341
03:20:05,599 --> 03:20:08,797
年，您需要牢记这一点，因为开发证书可以

2342
03:20:08,797 --> 03:20:13,119
总是在一年内到期，你需要基本上更新它们好吗

2343
03:20:13,119 --> 03:20:15,599
所以，但现在你不必担心，因为我们不会

2344
03:20:15,599 --> 03:20:20,319
花了一年时间来开发这个应用程序，所以我们只说下载它就可以了

2345
03:20:20,319 --> 03:20:25,759
下载到我的下载文件夹，所以我要调出我的下载文件夹

2346
03:20:25,759 --> 03:20:29,040
呃，实际上只是

2347
03:20:29,040 --> 03:20:33,119
会像这样给你看

2348
03:20:33,119 --> 03:20:35,360
所以这里是

2349
03:20:35,360 --> 03:20:40,240
下载的文件你现在看到它是一个证书文件

2350
03:20:40,240 --> 03:20:44,240
认证本身不包含您的私钥，请记住

2351
03:20:44,240 --> 03:20:46,957
私钥在钥匙串中，所以你需要做的就是你需要

2352
03:20:46,957 --> 03:20:51,439
双击这个没问题所以双击它你会看到它

2353
03:20:51,439 --> 03:20:54,957
然后在我的证书下的钥匙串中创建一个证书并登录

2354
03:20:54,957 --> 03:20:59,200
与您看到的私钥链接的钥匙串，这就是您所看到的

2355
03:20:59,200 --> 03:21:03,439
从苹果下载这是您通过请求在您的计算机上创建的

2356
03:21:03,439 --> 03:21:07,520
证书，当您双击下载的证书时，这两个得到

2357
03:21:07,520 --> 03:21:12,080
勾搭在一起，好吧，这就是你所拥有的

2358
03:21:12,080 --> 03:21:16,319
创建开发证书和与之相关的密钥

2359
03:21:16,319 --> 03:21:20,159
好的，现在让我们去生产吧

2360
03:21:20,159 --> 03:21:24,000
证书，我们需要做同样的事情同样的过程

2361
03:21:24,000 --> 03:21:27,360
为了创建我们的生产证书，让我们回到所有

2362
03:21:27,360 --> 03:21:30,878
证书，我只想说加上证书和

2363
03:21:30,878 --> 03:21:36,637
我会说 ios 分发应用商店和临时好的，所以选择那个选项

2364
03:21:36,637 --> 03:21:40,718
请和对不起，我只是不会也在我的

2365
03:21:40,718 --> 03:21:44,477
注意这里我们谈到了开发证书

2366
03:21:44,477 --> 03:21:48,637
所以让我们继续，在这里按继续，你必须做准确的

2367
03:21:48,637 --> 03:21:52,558
与您为开发证书所做的相同过程并创建一个新的

2368
03:21:52,558 --> 03:21:56,957
证书请求，所以让我们基本上做同样的事情

2369
03:21:56,957 --> 03:22:01,360
一种复制和粘贴相同的过程去钥匙串访问

2370
03:22:01,360 --> 03:22:05,360
证书助理向证书颁发机构请求证书

2371
03:22:05,360 --> 03:22:08,637
并且要小心一点，因为我已经从什么

2372
03:22:08,637 --> 03:22:13,200
我看到的是，这取决于您在这里选择的菜单

2373
03:22:13,200 --> 03:22:16,000
实际上改变了

2374
03:22:16,000 --> 03:22:20,080
可能是您需要确保在您的钥匙串中您是

2375
03:22:20,080 --> 03:22:23,279
不选择任何东西，所以只要确保没有任何东西

2376
03:22:23,279 --> 03:22:27,759
选择然后去 嗯对不起 然后去

2377
03:22:27,759 --> 03:22:30,878
证书助理并为证书颁发机构申请证书

2378
03:22:30,878 --> 03:22:34,159
把你公司或你的开发者账户

2379
03:22:34,159 --> 03:22:36,558
发邮件给我，我会选一个坚实的 b

2380
03:22:36,558 --> 03:22:39,520
然后保存到磁盘然后说继续

2381
03:22:39,520 --> 03:22:42,878
然后将其保存到桌面，因为那里已经有一个文件

2382
03:22:42,878 --> 03:22:45,680
与上一步相同的名称它会说你确定要

2383
03:22:45,680 --> 03:22:50,319
替换它是的替换它并保存它然后我要去

2384
03:22:50,319 --> 03:22:54,000
在这里，然后选择相同的确切文件，但它是

2385
03:22:54,000 --> 03:22:56,957
实际上是一个被重写的新文件

2386
03:22:56,957 --> 03:23:00,400
然后说继续，你会看到现在有一​​个下载

2387
03:23:00,400 --> 03:23:03,759
所以我要下载它，如果我去

2388
03:23:03,759 --> 03:23:09,360
到我的下载文件夹，嗯，我会把它调出来，这样你就可以看到

2389
03:23:09,360 --> 03:23:13,119
嗯嗯

2390
03:23:13,119 --> 03:23:15,759
让我们看看我要把它带到这里你会看到

2391
03:23:15,759 --> 03:23:20,000
有一个名为 ios 发行版的新文件是您的产品

2392
03:23:20,000 --> 03:23:24,159
证书好的，所以双击那个钥匙串它会再次打开，你会看到

2393
03:23:24,159 --> 03:23:27,919
现在你有两个证书在这里 iphone 分发，然后是 iphone

2394
03:23:27,919 --> 03:23:31,919
开发人员，所以这些是您的证书并保留

2395
03:23:31,919 --> 03:23:35,439
抓住它们有点像尝试拯救它们，即使你不拯救它们

2396
03:23:35,439 --> 03:23:39,520
没关系，因为它们现在被放置在这里，所以你可以随时导出它们

2397
03:23:39,520 --> 03:23:43,360
但保持住它们也是一种很好的做法

2398
03:23:43,360 --> 03:23:45,520
现在很好

2399
03:23:45,520 --> 03:23:50,000
抱歉，现在我们已经创建了一个开发者和一个 dis

2400
03:23:50,000 --> 03:23:52,797
以及生产或经销证书

2401
03:23:52,797 --> 03:23:56,400
让我们谈谈下一步，这是我们能够发布所必需的

2402
03:23:56,400 --> 03:24:00,080
或在手机上测试我们的应用程序

2403
03:24:00,080 --> 03:24:05,520
让我们回到这里和标识符，这里是你创建你的

2404
03:24:05,520 --> 03:24:09,840
应用程序标识符，您可以看到它们实际上与特定的

2405
03:24:09,840 --> 03:24:12,797
我们谈到的组织和标识符

2406
03:24:12,797 --> 03:24:16,319
我们在哪一章里谈过，我想实际上是在哪一章里

2407
03:24:16,319 --> 03:24:18,957
八 是 如果你有 如果你不知道什么

2408
03:24:18,957 --> 03:24:23,119
标识符是请回到我讨论的第八章

2409
03:24:23,119 --> 03:24:26,080
所以让我们

2410
03:24:26,080 --> 03:24:30,477
在此处按加号按钮并说您要创建一个新的

2411
03:24:30,477 --> 03:24:37,599
应用 id 好，按继续，然后您将在此处选择应用，而不是应用剪辑

2412
03:24:37,599 --> 03:24:41,520
然后你会在这里看到这个屏幕，所以我要

2413
03:24:41,520 --> 03:24:45,919
向你解释这一切是什么所以在这里描述我们只是

2414
03:24:45,919 --> 03:24:50,477
将在此处打印一些描述我们的应用程序的信息

2415
03:24:50,477 --> 03:24:54,159
老实说，我不记得我们实际上调用了我们的应用程序时

2416
03:24:54,159 --> 03:24:57,360
在之前创建的我可以看到它被称为

2417
03:24:57,360 --> 03:25:01,439
我的笔记，所以我只想说我的笔记

2418
03:25:01,439 --> 03:25:06,000
Flutter 应用程序示例或 Flutter 应用程序都可以

2419
03:25:06,000 --> 03:25:09,759
在这里，捆绑标识符非常重要，您实际指定它

2420
03:25:09,759 --> 03:25:15,439
正如我们在第 8 章中创建的那样正确。所以我要提出

2421
03:25:15,439 --> 03:25:20,558
我的笔记应用程序在这里我将增加字体大小，以便您可以看到

2422
03:25:20,558 --> 03:25:25,279
嗯，如果你记得我们在哪里创建应用程序

2423
03:25:25,279 --> 03:25:30,319
使用此命令，您会看到我们说 se.pixelity，然后是我的注释含义

2424
03:25:30,319 --> 03:25:34,759
从此时起，应用程序标识符将是

2425
03:25:34,759 --> 03:25:39,439
se.pixelity.mynotes 没关系，中间有一个点，所以如果我搜索

2426
03:25:39,439 --> 03:25:43,119
在我们的项目中让我们说 sepixolity.mynotes

2427
03:25:43,119 --> 03:25:46,637
您会看到这里有一些结果，这取决于您创建的方式

2428
03:25:46,637 --> 03:25:50,878
您的浮动应用程序取决于您指定的组织

2429
03:25:50,878 --> 03:25:54,477
标识符对您来说可能不同，但因为在这种情况下我的标识符是 s

2430
03:25:54,477 --> 03:25:58,558
附注我的笔记，我只是要复制它

2431
03:25:58,558 --> 03:26:02,000
我要把它带到这里确保选择了显式并粘贴它

2432
03:26:02,000 --> 03:26:05,520
捆绑ID在那里好吧，是的，它被选中了

2433
03:26:05,520 --> 03:26:08,637
现在，如果您还记得我之前说过的话，应用标识符不仅仅是

2434
03:26:08,637 --> 03:26:12,240
标识捆绑包 id 本身，但它也像一个功能列表

2435
03:26:12,240 --> 03:26:16,240
例如，如果您想要推送通知，您的应用程序现在可以拥有

2436
03:26:16,240 --> 03:26:20,637
您还需要在这里启用它现在推送通知不是

2437
03:26:20,637 --> 03:26:25,040
我们将在本课程中做的事情，所以你不必这样做，但是

2438
03:26:25,040 --> 03:26:30,000
输入您的应用程序 ID 前缀后，您需要在此处执行的所有操作

2439
03:26:30,000 --> 03:26:35,040
应用程序捆绑标识符和描述只需按继续

2440
03:26:35,040 --> 03:26:38,319
你可以看到说好的你确定一切都很好是的

2441
03:26:38,319 --> 03:26:43,919
是的，太好了，然后我说现在注册标识符已全部创建

2442
03:26:43,919 --> 03:26:46,400
没错

2443
03:26:46,400 --> 03:26:48,558
嗯，你真的不需要做任何事情

2444
03:26:48,558 --> 03:26:52,878
现在有了那个标识符，只是你现在已经注册了

2445
03:26:52,878 --> 03:26:57,599
标识符，因此基本上没有其他人可以从您那里获取该应用程序

2446
03:26:57,599 --> 03:26:59,759
所以我要

2447
03:26:59,759 --> 03:27:02,159
实际上

2448
03:27:02,159 --> 03:27:06,558
在我的笔记中勾选这些项目，以便我们知道我们已经讨论过了

2449
03:27:06,558 --> 03:27:11,759
现在下一步是准备你的

2450
03:27:11,759 --> 03:27:15,840
呃您的应用程序，以便它可以实际安装和调试或

2451
03:27:15,840 --> 03:27:21,439
在真机上测试现在你看不到我的整个设置，但我在这里

2452
03:27:21,439 --> 03:27:26,000
有一个 iphone 12 pro，就在这里，有点脏

2453
03:27:26,000 --> 03:27:28,957
屏幕，但没关系，这只是我的测试电话

2454
03:27:28,957 --> 03:27:31,599
和这部手机

2455
03:27:31,599 --> 03:27:37,360
如您所见，已通过电缆连接到我的计算机，并且可用于

2456
03:27:37,360 --> 03:27:40,797
我的电脑要查看，所以我现在就用我的

2457
03:27:40,797 --> 03:27:45,360
密码，如果我再调出我的

2458
03:27:45,360 --> 03:27:48,878
发现者所以在这里

2459
03:27:48,878 --> 03:27:52,797
你可以看到它在这里可用

2460
03:27:52,797 --> 03:27:58,240
所以这是我的电话，它有一个特殊的标识符，如果你

2461
03:27:58,240 --> 03:28:02,000
想要获取您的设备标识符，这是我们需要在这里做的，因为您可以

2462
03:28:02,000 --> 03:28:06,159
看到为了在真实设备上调试，我们需要一个 uid 来注册我们的

2463
03:28:06,159 --> 03:28:08,558
简介

2464
03:28:08,558 --> 03:28:12,477
当你我的意思是，这有点像一件大事，因为它需要

2465
03:28:12,477 --> 03:28:15,520
很多时间，但我要在这里说的是，当你创建它时

2466
03:28:15,520 --> 03:28:21,040
开发专业和开发证书下一步是为您

2467
03:28:21,040 --> 03:28:25,439
基本上用苹果注册你的设备，这样苹果就知道在哪个设备上

2468
03:28:25,439 --> 03:28:29,119
您实际上想要测试您的应用程序的设备

2469
03:28:29,119 --> 03:28:34,718
以及它们存储在此处的设备 um 选项卡下的那些设备

2470
03:28:34,718 --> 03:28:40,080
并且有一些方法可以获取您的设备标识符，例如像我一样去 finder

2471
03:28:40,080 --> 03:28:43,360
刚刚显示在这里，只是点击你的

2472
03:28:43,360 --> 03:28:47,360
设备现在我有点打算在屏幕外做，所以你看不到全部

2473
03:28:47,360 --> 03:28:52,159
这里有什么

2474
03:28:52,159 --> 03:28:56,558
让我看看有没有办法让你真正获得你的设备标识符是的

2475
03:28:56,558 --> 03:29:00,878
我实际上可以在这里看到有一种方法可以得到那个

2476
03:29:00,878 --> 03:29:04,558
所以我要做的是我要把finder带到这里，所以你看

2477
03:29:04,558 --> 03:29:09,680
会发生什么我只需点击我的手机现在你需要注册你的设备

2478
03:29:09,680 --> 03:29:14,637
在您创建个人资料之前，此设备选项卡下的标识符

2479
03:29:14,637 --> 03:29:17,840
我不会那样做，因为我的手机已经注册但你需要

2480
03:29:17,840 --> 03:29:22,159
自己做这件事，方法是连接你的手机或你的

2481
03:29:22,159 --> 03:29:26,240
您想在计算机上测试您的颤振应用程序的平板电脑

2482
03:29:26,240 --> 03:29:30,000
然后进入查找器并点击您的手机并

2483
03:29:30,000 --> 03:29:35,200
然后只需单击此部分现在我不会在这里这样做以及原因

2484
03:29:35,200 --> 03:29:39,279
这背后是每个设备都说标识符确实标识了

2485
03:29:39,279 --> 03:29:42,957
设备，以便您可以在您的帐户下注册我的设备

2486
03:29:42,957 --> 03:29:45,599
所以，这不是一个好主意

2487
03:29:45,599 --> 03:29:49,200
你的设备标识符给别人所以我不是我不能这样做

2488
03:29:49,200 --> 03:29:53,759
不幸的是，在本课程中，但您必须采取的步骤是单击

2489
03:29:53,759 --> 03:29:56,797
在这个标签上，它会告诉你一个

2490
03:29:56,797 --> 03:30:03,520
称为 uuid 的部分复制该 uuid 并进入设备

2491
03:30:03,520 --> 03:30:07,759
苹果开发者的证书标识符和配置文件部分

2492
03:30:07,759 --> 03:30:12,718
帐户并将带有名称的 uuid 添加到您的帐户

2493
03:30:12,718 --> 03:30:16,637
好的，所以我假设你已经做到了，如果你需要一些时间

2494
03:30:16,637 --> 03:30:20,637
继续做吧，请暂停这个视频，然后这样做

2495
03:30:20,637 --> 03:30:24,957
关键是从这里获取标识符好吧还有一种方法也可以得到

2496
03:30:24,957 --> 03:30:29,840
您的标识符来自 xcode um 的设备标识符，并且完全可以使用

2497
03:30:29,840 --> 03:30:35,200
同样你只需要打开xcode然后去我相信进入菜单然后

2498
03:30:35,200 --> 03:30:38,319
选择设备，然后从那里选择您的设备，您会看到它

2499
03:30:38,319 --> 03:30:42,477
标识符就在那里，所以这是很多话题让我们说

2500
03:30:42,477 --> 03:30:46,477
你已经做到了，所以我们现在需要做的就是去

2501
03:30:46,477 --> 03:30:54,000
好的，创建一个开发配置文件，所以我将在这些项目中打勾

2502
03:30:54,000 --> 03:30:56,957
我的笔记也是如此，所以这是令人兴奋的部分，现在我们

2503
03:30:56,957 --> 03:31:01,279
转到配置文件部分并创建一个新的开发配置文件，以便

2504
03:31:01,279 --> 03:31:04,797
单击生成配置文件，我要说 ios 应用程序开发和

2505
03:31:04,797 --> 03:31:08,558
然后说继续然后它说好的选择一个你的应用程序ID

2506
03:31:08,558 --> 03:31:11,599
现在看到您的个人资料将与您的应用程序链接，所以

2507
03:31:11,599 --> 03:31:16,080
在这里做这个下拉，你可以看到我只是要说我的笔记和这个

2508
03:31:16,080 --> 03:31:20,637
是我创建的应用程序，对你来说，这个 id 可能有点

2509
03:31:20,637 --> 03:31:24,159
不同的描述可能有点不同，但只需选择

2510
03:31:24,159 --> 03:31:27,119
嗯，你之前创建的应用 id

2511
03:31:27,119 --> 03:31:31,520
步骤，所以我要选择我只想说继续

2512
03:31:31,520 --> 03:31:35,439
现在它会说好的这个配置文件连接到哪个证书

2513
03:31:35,439 --> 03:31:40,000
你还记得我说过个人资料与证书相关联吗？

2514
03:31:40,000 --> 03:31:43,680
这实际上意味着你已经创建了你的

2515
03:31:43,680 --> 03:31:47,439
正如我在本章中谈到的那样，只需选择您的开发证书

2516
03:31:47,439 --> 03:31:51,599
证书然后说现在继续

2517
03:31:51,599 --> 03:31:57,680
这里它问的是你想要哪些设备这个嗯

2518
03:31:57,680 --> 03:32:01,840
配置文件你想要哪个设备你的应用程序是用哪个设备签名的

2519
03:32:01,840 --> 03:32:06,878
这个配置文件现在肯定可以运行这些所有这些设备来自

2520
03:32:06,878 --> 03:32:10,080
设备部分我已经注册了很多设备，所以

2521
03:32:10,080 --> 03:32:14,319
嗯，甚至我的一些同事的设备

2522
03:32:14,319 --> 03:32:18,319
这使我们基本上也可以在他们的设备上调试应用程序

2523
03:32:18,319 --> 03:32:21,040
承认你已经做到了

2524
03:32:21,040 --> 03:32:26,000
如果你回到这里然后你会看到那些

2525
03:32:26,000 --> 03:32:30,957
正确查看此列表中的那些设备，所以我只想说选择

2526
03:32:30,957 --> 03:32:35,840
只是确保我的应用程序可以在我拥有的所有设备上运行

2527
03:32:35,840 --> 03:32:39,119
注册好然后说继续然后你会给

2528
03:32:39,119 --> 03:32:42,637
它是一个名字，所以我要给它一个我的笔记的名字

2529
03:32:42,637 --> 03:32:46,000
dival 开发人员简介

2530
03:32:46,000 --> 03:32:50,878
或者只是我的笔记开发好的，我只想说生成

2531
03:32:50,878 --> 03:32:54,637
你会得到一些关于它什么时候到期的信息等等也会在一个

2532
03:32:54,637 --> 03:32:58,400
一年，然后你不得不说下载

2533
03:32:58,400 --> 03:33:02,558
我们现在要对分布配置文件做同样的事情

2534
03:33:02,558 --> 03:33:06,797
分发配置文件类似于相同的开发配置文件，但您不能

2535
03:33:06,797 --> 03:33:10,637
用它调试你的应用程序你几乎可以做的就是签署

2536
03:33:10,637 --> 03:33:14,319
您的应用程序与该配置文件并将其发送到苹果，以便您可以部署

2537
03:33:14,319 --> 03:33:19,040
您在应用商店中的应用程序可以，所以按加号配置文件并在此和

2538
03:33:19,040 --> 03:33:23,599
这次去分发，说应用商店你看到分发小节

2539
03:33:23,599 --> 03:33:27,759
和应用商店，所以按继续按钮

2540
03:33:27,759 --> 03:33:32,319
然后去这里然后选择你的应用程序

2541
03:33:32,319 --> 03:33:36,477
所以这是开发配置文件对不起现在我们必须投入生产所以

2542
03:33:36,477 --> 03:33:39,840
我要把窗户抬高一点，这样你就可以看到它

2543
03:33:39,840 --> 03:33:44,240
全部，然后我要选择我的笔记

2544
03:33:44,240 --> 03:33:47,279
好的，然后我就按

2545
03:33:47,279 --> 03:33:50,319
继续按钮在这里

2546
03:33:50,319 --> 03:33:52,637
嗯，我会把它记在我的笔记里，所以我们已经

2547
03:33:52,637 --> 03:33:59,119
谈到了开发人员资料，好吧，既然你已经做到了，嗯

2548
03:33:59,119 --> 03:34:01,919
再次选择你的自信，你看到它说好的，现在你正在创建一个

2549
03:34:01,919 --> 03:34:05,919
证明分发的配置文件然后它应该与某种挂钩

2550
03:34:05,919 --> 03:34:09,360
分发证书，并且由于 ios 分发证书是唯一的

2551
03:34:09,360 --> 03:34:13,119
如果您还记得我删除了所有其他证书，我们创建的一个

2552
03:34:13,119 --> 03:34:16,797
所以这是这里唯一剩下的一个只需选择它并按继续

2553
03:34:16,797 --> 03:34:21,279
现在给它起个名字我要说我的笔记

2554
03:34:21,279 --> 03:34:23,840
产品生产

2555
03:34:23,840 --> 03:34:26,477
然后我只想说生成它说

2556
03:34:26,477 --> 03:34:29,759
好的，你去，你可以下载它

2557
03:34:29,759 --> 03:34:33,040
既然你已经完成了你需要提出你的

2558
03:34:33,040 --> 03:34:37,599
下载您的个人资料的文件夹，嗯

2559
03:34:37,599 --> 03:34:40,878
现在你看到这些是我下载的两个配置文件，除了他们的

2560
03:34:40,878 --> 03:34:45,840
移动供应条款的扩展，您需要以某种方式安装这些

2561
03:34:45,840 --> 03:34:50,240
您的计算机，以便您可以签署您的应用程序或您的 ios 应用程序

2562
03:34:50,240 --> 03:34:54,240
有了这些，所以你现在需要做的就是复制

2563
03:34:54,240 --> 03:34:58,400
这两个文件我将像这样复制它们并命令 c

2564
03:34:58,400 --> 03:35:02,718
然后将它们放入您的配置文件文件夹中，我只是要去

2565
03:35:02,718 --> 03:35:06,797
将它们剪切并粘贴到那里，这样它们就不再在下载文件夹中了

2566
03:35:06,797 --> 03:35:10,319
他们在那里还有其他安装这些的方法

2567
03:35:10,319 --> 03:35:14,718
配置文件有些人宁愿将其拖入 xcode 有些人双击它们

2568
03:35:14,718 --> 03:35:18,400
这些都很好，但是这样做有一点问题

2569
03:35:18,400 --> 03:35:22,000
方法与我在这里向您展示的方法相比，如果您双击

2570
03:35:22,000 --> 03:35:27,119
这些配置文件 mac os 知道如何安装它们，但是

2571
03:35:27,119 --> 03:35:31,439
mac os 只是弄乱了它们的命名，因此它们将安装在它们的非常

2572
03:35:31,439 --> 03:35:35,599
随机名称，因此如果您返回配置文件文件夹，它们可能是

2573
03:35:35,599 --> 03:35:39,360
在某种你不再认识的神秘名称下，所以在这个

2574
03:35:39,360 --> 03:35:43,200
他们基本上保持原来的名字

2575
03:35:43,200 --> 03:35:48,319
非常描述他们实际上是好的

2576
03:35:48,319 --> 03:35:58,558
好的，就是这样，所以现在我们已经创建了一个 um dev 配置文件和一个 prod 配置文件

2577
03:35:58,558 --> 03:36:03,759
令人兴奋的事情，所以我们现在需要做的实际上是工作，我们可以说我们是

2578
03:36:03,759 --> 03:36:07,279
在这里完成这个屏幕所以我要关闭它

2579
03:36:07,279 --> 03:36:12,240
然后我在这里要做的是我们现在需要谈论的是设置

2580
03:36:12,240 --> 03:36:17,200
在 xcode 中启动我们的项目，以便 xcode 理解

2581
03:36:17,200 --> 03:36:20,797
我们的应用程序需要使用正确的配置文件和证书进行签名，所以

2582
03:36:20,797 --> 03:36:26,080
我需要你做的是转到你的颤振项目中的 ios 文件夹，然后

2583
03:36:26,080 --> 03:36:30,159
只需右键单击它并说在查找器中显示即可

2584
03:36:30,159 --> 03:36:35,040
在查找器中显示后，双击工作区以打开

2585
03:36:35,040 --> 03:36:40,319
您在 xcode 中的颤振 xcode 工作区

2586
03:36:40,319 --> 03:36:44,319
而你现在需要做的是基本上

2587
03:36:44,319 --> 03:36:49,840
确保您的 ios 应用程序签名正确完成，因此选择

2588
03:36:49,840 --> 03:36:54,477
这个图标在你的左上角，我认为它是项目资源管理器或其他东西

2589
03:36:54,477 --> 03:36:58,718
项目导航器然后在目标上

2590
03:36:58,718 --> 03:37:04,159
选择您的目标，然后转到签名和功能，然后删除

2591
03:37:04,159 --> 03:37:08,159
自动签名可以用于我们不会使用的这门课程

2592
03:37:08,159 --> 03:37:12,400
自动签名我会接受

2593
03:37:12,400 --> 03:37:21,439
在我的笔记中，我谈到了删除自动签名

2594
03:37:21,439 --> 03:37:25,360
所以下一步是让我们能够

2595
03:37:25,360 --> 03:37:29,360
告诉 xcode 出于调试目的，以便我们能够运行我们的

2596
03:37:29,360 --> 03:37:32,957
在真实手机上的应用程序并对其进行调试

2597
03:37:32,957 --> 03:37:37,119
应用程序需要使用哪个配置文件和哪个证书

2598
03:37:37,119 --> 03:37:42,400
所以我要做的就是在这里进入这个部分，如你所见

2599
03:37:42,400 --> 03:37:48,797
在签名和功能下调试，然后我可以看到它实际上是

2600
03:37:48,797 --> 03:37:53,119
去它已经在使用自动签名

2601
03:37:53,119 --> 03:37:56,319
用于调试，我也要删除它

2602
03:37:56,319 --> 03:37:59,520
所以你需要在这里做的实际上是选择正确的配置文件

2603
03:37:59,520 --> 03:38:02,957
在这里，上面写着我的笔记开发者和我的笔记

2604
03:38:02,957 --> 03:38:07,360
配置文件对不起产品，你可以看到它说不合格

2605
03:38:07,360 --> 03:38:10,319
嗯，那是因为我们没有

2606
03:38:10,319 --> 03:38:14,637
开发团队尚未和亚历克斯，我会尽快解释，但现在只是去

2607
03:38:14,637 --> 03:38:19,040
您的配置文件并说出于调试目的，我们将使用

2608
03:38:19,040 --> 03:38:22,558
mynotes dev 嗯

2609
03:38:22,558 --> 03:38:29,040
然后去你的发布，然后说我要使用我的笔记，好吧

2610
03:38:29,040 --> 03:38:32,797
这里有一个小错误，您会看到它说正在生成个人资料 my notes pro

2611
03:38:32,797 --> 03:38:37,680
不包括签名证书苹果开发等等等等好吧

2612
03:38:37,680 --> 03:38:40,319
没关系，别担心

2613
03:38:40,319 --> 03:38:43,599
所以我们现在需要做的是

2614
03:38:43,599 --> 03:38:47,759
告诉它嗯，所以我真的要选这里

2615
03:38:47,759 --> 03:38:52,477
深度搜索设置发布配置文件插入好的

2616
03:38:52,477 --> 03:38:58,000
所以你需要在这里做的是去你的构建设置并确保

2617
03:38:58,000 --> 03:39:01,439
你的开发团队

2618
03:39:01,439 --> 03:39:06,240
这里实际上是被选中的，你看到像素是给我的，然后是给你的

2619
03:39:06,240 --> 03:39:10,240
可能是别的东西所以嗯现在我要做什么我的意思是

2620
03:39:10,240 --> 03:39:14,558
有时呃，我可以看到这里的签名证书实际上并不是真的

2621
03:39:14,558 --> 03:39:19,279
有时选择它可能是当我们玩时xcode有点发疯

2622
03:39:19,279 --> 03:39:22,797
证书和签名，所以我要关闭 xcode

2623
03:39:22,797 --> 03:39:27,119
我要在这里做同样的事情去

2624
03:39:27,119 --> 03:39:32,000
revealingfinder finder 在这里的另一个窗口中打开，所以

2625
03:39:32,000 --> 03:39:39,439
我要再次打开工作区

2626
03:39:39,439 --> 03:39:43,200
好的，我可以看到我们仍然遇到问题配置文件减去那个

2627
03:39:43,200 --> 03:39:46,718
不包括签名证书苹果开发，让我们打开我们的

2628
03:39:46,718 --> 03:39:49,360
再次钥匙扣，看看这里

2629
03:39:49,360 --> 03:39:54,477
不幸的是，我可以看到您之前可以看到的个人资料

2630
03:39:54,477 --> 03:39:59,360
两个配置文件，这是非常不幸的，因为嗯

2631
03:39:59,360 --> 03:40:03,680
所以在这里你可以看到这个发展

2632
03:40:03,680 --> 03:40:07,840
证书是由我们创建的，您会看到它们彼此非常接近

2633
03:40:07,840 --> 03:40:11,040
这两个是我们创建的，但这是 xcode 创建的

2634
03:40:11,040 --> 03:40:15,680
那是因为 xcode 尝试像您看到的那样进行自动签名

2635
03:40:15,680 --> 03:40:20,637
说自动管理签名，这样它就创建了一个证书

2636
03:40:20,637 --> 03:40:25,520
对我来说，我不想要，所以我们在这里看到的错误是

2637
03:40:25,520 --> 03:40:28,400
那个xcode现在说这个这个

2638
03:40:28,400 --> 03:40:32,477
您在此处拥有的个人资料未与此事物相关联

2639
03:40:32,477 --> 03:40:36,558
哪个 xcode 自己创建的 没有人要求它做 我没有要求 xcode 做

2640
03:40:36,558 --> 03:40:39,759
所以当你和一个女人一起工作时，只知道xco试图做一个

2641
03:40:39,759 --> 03:40:43,919
很多魔法对你来说，如果你真的想

2642
03:40:43,919 --> 03:40:47,840
手动做事可能会妨碍

2643
03:40:47,840 --> 03:40:51,439
所以我要在这里做的是我要删除这个

2644
03:40:51,439 --> 03:40:54,558
开发证书，因为我没有要求它好吧

2645
03:40:54,558 --> 03:40:57,360
所以我要说我相信那是正确的

2646
03:40:57,360 --> 03:41:01,759
是的，所以我要说删除删除，现在您可以看到该错误消失了

2647
03:41:01,759 --> 03:41:04,957
只是因为 xcode 就像 ooh 现在我明白你在说哪一个了

2648
03:41:04,957 --> 03:41:08,080
关于然后是的配置文件

2649
03:41:08,080 --> 03:41:11,439
产品也上瘾了

2650
03:41:11,439 --> 03:41:14,878
正确所以

2651
03:41:14,878 --> 03:41:18,400
现在我要做的是你可以在这里看到

2652
03:41:18,400 --> 03:41:24,159
我在这里打开了项目，然后我在这里选择了我的实际 iphone

2653
03:41:24,159 --> 03:41:28,000
能够确保您的应用程序实际上可以在此运行

2654
03:41:28,000 --> 03:41:33,040
经过所有这些艰苦的工作，现在手机只是在这里按下播放按钮

2655
03:41:33,040 --> 03:41:37,599
所以我想这样做，我想让它做它的事情，如果一切正常

2656
03:41:37,599 --> 03:41:42,159
正确，嗯，它基本上会允许

2657
03:41:42,159 --> 03:41:46,080
我们可以正常运行应用程序，所以现在它说

2658
03:41:46,080 --> 03:41:49,599
现在，这是一个你可能也会得到的对话

2659
03:41:49,599 --> 03:41:52,637
这里发生的事情是它试图签署应用程序和所有

2660
03:41:52,637 --> 03:41:56,558
使用该配置文件的库

2661
03:41:56,558 --> 03:42:00,080
发展概况，因为该发展概况是

2662
03:42:00,080 --> 03:42:04,637
链接到钥匙串中的开发证书，并且该钥匙串是

2663
03:42:04,637 --> 03:42:08,718
密码保护你看到登录钥匙串它说我无法访问

2664
03:42:08,718 --> 03:42:14,718
证书给我登录钥匙串的密码，所以我要输入

2665
03:42:14,718 --> 03:42:20,797
然后我会说总是允许所以让我们去做让它做它的事

2666
03:42:20,797 --> 03:42:25,360
这可能取决于您正在运行这个 uh 进程的机器

2667
03:42:25,360 --> 03:42:33,919
可能需要一些时间我才能看到它现在正在建造所以嗯

2668
03:42:33,919 --> 03:42:40,159
好的，然后我在这里遇到了实际故障，它说找不到云火库

2669
03:42:40,159 --> 03:42:43,919
这很有趣，实际上我的意思是我没有为此计划

2670
03:42:43,919 --> 03:42:48,477
发生了，但它确实发生了，我很高兴它发生了

2671
03:42:48,477 --> 03:42:53,360
这通常发生在你嗯

2672
03:42:53,360 --> 03:42:57,200
当您向项目添加新的依赖项时，例如这些大依赖项

2673
03:42:57,200 --> 03:43:01,279
但它们还没有真正链接到你的项目，所以解决这个问题的方法是

2674
03:43:01,279 --> 03:43:04,878
我要让 xcode 在这里 好吧 我要关门了

2675
03:43:04,878 --> 03:43:08,718
这我要带一个终端呃我是什么

2676
03:43:08,718 --> 03:43:13,759
要说这里是颤抖清洁我清洁

2677
03:43:13,759 --> 03:43:17,840
ios 或 clear ios 我觉得很干净

2678
03:43:17,840 --> 03:43:22,400
所以这基本上是要清理 ios 项目的设置方式和所有

2679
03:43:22,400 --> 03:43:25,599
这些依赖关系现在我也将关闭 xcode

2680
03:43:25,599 --> 03:43:32,159
那么我要说的是flutter pop get

2681
03:43:32,159 --> 03:43:37,439
和flutter pop得到它的作用是它设置了我们所有的依赖项

2682
03:43:37,439 --> 03:43:40,957
开始，只是为了确保我要进入 ios

2683
03:43:40,957 --> 03:43:46,558
文件夹，我要说 pod install

2684
03:43:46,558 --> 03:43:50,750
并且不能兼容版本好的 pod

2685
03:43:50,750 --> 03:43:52,957
[音乐] 安装

2686
03:43:52,957 --> 03:43:58,477
破折号更新回购呃

2687
03:43:58,477 --> 03:44:02,797
热安装，呃，让我们看看我们是否可以做一个更新回购

2688
03:44:02,797 --> 03:44:08,080
我只是会那样做，呃，现在不想解释太多，看看

2689
03:44:08,080 --> 03:44:11,759
如果这能解决我们的问题，我将打开一个新的 safari 窗口并说

2690
03:44:11,759 --> 03:44:15,279
pod install update repo 让我们看看命令是什么，但因为我已经

2691
03:44:15,279 --> 03:44:20,477
忘记了

2692
03:44:20,477 --> 03:44:28,718
我们有什么更新是的，让我们典当安装

2693
03:44:28,718 --> 03:44:32,558
我相信有一个变种

2694
03:44:32,558 --> 03:44:38,319
repo update 它被称为ok pot install repo update 让我们看看这是否解决了我们的问题

2695
03:44:38,319 --> 03:44:42,477
问题，如果 cisco 找不到兼容的

2696
03:44:42,477 --> 03:44:45,919
来自 blah blah 的 podcloud firestore 版本

2697
03:44:45,919 --> 03:44:51,040
找到了满足依赖项的规范，但它们需要更高的最小值

2698
03:44:51,040 --> 03:44:53,680
部署目标，这很有趣

2699
03:44:53,680 --> 03:44:57,040
所以这里发生的是

2700
03:44:57,040 --> 03:45:02,319
您会看到我们的应用程序的部署目标，嗯，它是什么

2701
03:45:02,319 --> 03:45:06,080
意思就是当我们用flutter创建项目的时候

2702
03:45:06,080 --> 03:45:10,319
颤振说它在内部做的是说

2703
03:45:10,319 --> 03:45:14,718
这个颤振应用程序应该在这些 ios 版本和这些 android 上运行

2704
03:45:14,718 --> 03:45:19,279
版本，我们在这里看到的是

2705
03:45:19,279 --> 03:45:22,718
我们在这里看到的是我们正在使用 cloud firestore 和 cloud

2706
03:45:22,718 --> 03:45:26,637
firestore 作为依赖项期望我们的应用程序具有最低要求

2707
03:45:26,637 --> 03:45:30,797
部署版本这意味着云火存储不能在应用程序中使用

2708
03:45:30,797 --> 03:45:35,759
例如，正在尝试在 ios 7 上运行，所以我们需要

2709
03:45:35,759 --> 03:45:40,957
要在您的 um flutter 项目中执行此操作，只需在 Visual Studio 代码中说命令 p

2710
03:45:40,957 --> 03:45:46,637
并打开一个名为 um pod file 的文件

2711
03:45:46,637 --> 03:45:49,680
你进去看看

2712
03:45:49,680 --> 03:45:55,200
在这里，我们设置了一些东西，让我们进入这里，只说平台 ios 和

2713
03:45:55,200 --> 03:45:59,599
我们要做的只是说平台 ios 13

2714
03:45:59,599 --> 03:46:06,080
刚才我的意思是 13 真的很好，因为现在 ios 15 可用

2715
03:46:06,080 --> 03:46:10,637
所以你可以说你支持 15 14 和 13。所以我会这样做

2716
03:46:10,637 --> 03:46:15,040
然后我将再次运行 pod install

2717
03:46:15,040 --> 03:46:19,680
这一次我可以看到事情变得更好并且正在安装

2718
03:46:19,680 --> 03:46:23,439
我们所有的依赖都没有问题，所以

2719
03:46:23,439 --> 03:46:27,680
嗯，你现在需要知道我在这里所做的事情，你可能

2720
03:46:27,680 --> 03:46:31,439
如果您对 ios 开发感到满意，则需要这样做，因此您需要修复

2721
03:46:31,439 --> 03:46:35,599
这些问题是手工解决的，但在我解释我实际上做了什么之前

2722
03:46:35,599 --> 03:46:38,000
你需要知道一个叫做 pod 的东西

2723
03:46:38,000 --> 03:46:42,000
我在前面的章节中解释了我们什么时候开始的

2724
03:46:42,000 --> 03:46:45,759
第 8 章，当我们谈到依赖时

2725
03:46:45,759 --> 03:46:50,080
flutter can in 可以创建ios应用程序 ios

2726
03:46:50,080 --> 03:46:56,400
应用程序依赖项基本上是使用呃可可豆荚

2727
03:46:56,400 --> 03:47:01,680
所以cocoapods是一个ios应用的依赖管理系统

2728
03:47:01,680 --> 03:47:04,637
你只需要知道

2729
03:47:04,637 --> 03:47:08,400
你需要为了能够做我刚刚做的伎俩你需要

2730
03:47:08,400 --> 03:47:12,159
安装 cocoapods 并且有一个很好的网站我的意思是你可以我会

2731
03:47:12,159 --> 03:47:19,279
调出我的，我说安装 cocoapods 然后我去这里你就说

2732
03:47:19,279 --> 03:47:23,520
cocoapods 然后有一个你需要在你的电脑中发出的命令

2733
03:47:23,520 --> 03:47:30,080
为了安装 cocoapods 好吧，在你安装 cocoapods 之后

2734
03:47:30,080 --> 03:47:32,878
然后你可以进入你的 ios 项目并喜欢

2735
03:47:32,878 --> 03:47:37,919
要求它重新安装您的依赖项，所以这里的关键是我要

2736
03:47:37,919 --> 03:47:42,477
在管理我的依赖项的 pod 文件中取消注释此平台行

2737
03:47:42,477 --> 03:47:47,759
所以我现在只想说我至少支持 ios 13

2738
03:47:47,759 --> 03:47:53,919
好的，然后我手动要求 io 重新创建 ios 的项目

2739
03:47:53,919 --> 03:47:58,240
使用 pod install repo update 重新创建项目

2740
03:47:58,240 --> 03:48:00,878
所以在你完成了你的依赖之后

2741
03:48:00,878 --> 03:48:04,558
已生成，然后我将再次右键单击 ios

2742
03:48:04,558 --> 03:48:08,159
我会说哦，我可以说在 xcode 中打开，这很有趣

2743
03:48:08,159 --> 03:48:10,957
工作 我不敢对你诚实 那样做

2744
03:48:10,957 --> 03:48:16,159
揭示发现者，然后我将这样做并打开一个项目，所以

2745
03:48:16,159 --> 03:48:22,319
我现在要去执行命令我执行命令 b 也许不让我们只是

2746
03:48:22,319 --> 03:48:25,599
直接运行它

2747
03:48:25,599 --> 03:48:29,040
所以我要调出xcode并按

2748
03:48:29,040 --> 03:48:32,319
再次运行，让我们看看它是否可以找到

2749
03:48:32,319 --> 03:48:36,400
以前找不到的那些依赖项

2750
03:48:36,400 --> 03:48:39,520
所以我们要

2751
03:48:39,520 --> 03:48:44,558
让它做它的事情，你可以看到它可能需要一些时间

2752
03:48:44,558 --> 03:48:47,840
因为我们拖入了很多依赖项

2753
03:48:47,840 --> 03:48:53,200
我认为有firebase关闭我们有firebase核心我们有云

2754
03:48:53,200 --> 03:48:56,957
firestore 和 firebase 分析，因此这些依赖项

2755
03:48:56,957 --> 03:49:01,040
他们自己可以带来很多其他的依赖，所以

2756
03:49:01,040 --> 03:49:05,599
嗯，重要的是，然后要知道

2757
03:49:05,599 --> 03:49:08,477
正如我在第八章的前一章中提到的，带来依赖

2758
03:49:08,477 --> 03:49:10,558
不仅仅是所有

2759
03:49:10,558 --> 03:49:13,919
天空中的蝴蝶和气球实际上是你需要的一个严肃的过程

2760
03:49:13,919 --> 03:49:17,840
考虑带来依赖的因素对您和您的团队意味着什么

2761
03:49:17,840 --> 03:49:20,878
和你的申请，所以在这种情况下，我们只带来了

2762
03:49:20,878 --> 03:49:25,040
谷歌和谷歌正式完成的依赖是flutter的背后

2763
03:49:25,040 --> 03:49:28,159
所以我认为

2764
03:49:28,159 --> 03:49:32,477
你基本上可以相信任何与firebase有关的东西，至少这样

2765
03:49:32,477 --> 03:49:37,840
如果它是由在 firebase 上工作的谷歌团队发布的

2766
03:49:37,840 --> 03:49:42,477
嗯，所以我们要让它做它的事情我要点击这里，我可以看到

2767
03:49:42,477 --> 03:49:47,119
它正在构建大量文件

2768
03:49:47,119 --> 03:49:50,718
如果一切按我们的计划进行

2769
03:49:50,718 --> 03:49:53,680
那么结果将是

2770
03:49:53,680 --> 03:49:58,319
应用程序在这部手机上运行所以嗯

2771
03:49:58,319 --> 03:50:01,759
看看这是否会真的很令人兴奋

2772
03:50:01,759 --> 03:50:07,439
按照我们的意图和我提到的那样工作，具体取决于

2773
03:50:07,439 --> 03:50:10,240
您正在使用此过程的计算机可能需要

2774
03:50:10,240 --> 03:50:14,400
一开始至少有相当多的时间

2775
03:50:14,400 --> 03:50:17,200
因此，如果您有一台功能强大的计算机，则可能需要更少的时间，如果您有一台

2776
03:50:17,200 --> 03:50:20,240
功能稍弱的计算机可能需要更多时间

2777
03:50:20,240 --> 03:50:23,520
嗯，现在我们正在等待，我也应该

2778
03:50:23,520 --> 03:50:28,878
可能会提到这个等待的过程只是最初

2779
03:50:28,878 --> 03:50:33,279
构建完成后您需要做的事情

2780
03:50:33,279 --> 03:50:36,957
有点像它的工件将被缓存在您的计算机中

2781
03:50:36,957 --> 03:50:41,680
这样您就不必从头开始重建整个项目好吗

2782
03:50:41,680 --> 03:50:44,558
所以嗯

2783
03:50:44,558 --> 03:50:49,360
我会让它做它的事情，呃，当我们在等待时，实际上我们

2784
03:50:49,360 --> 03:50:53,840
可以谈谈我带来的关于 quicktime 的说明

2785
03:50:53,840 --> 03:50:58,400
如果您像我一样喜欢在真实手机上调试您的应用程序

2786
03:50:58,400 --> 03:51:03,919
那么您可能想要查看或显示您的手机屏幕

2787
03:51:03,919 --> 03:51:07,360
并在您的计算机上，例如，如果

2788
03:51:07,360 --> 03:51:11,759
您正在与同事共享您的计算机作为屏幕，而他或她想要

2789
03:51:11,759 --> 03:51:16,000
还可以查看您需要使用的手机上运行的应用程序

2790
03:51:16,000 --> 03:51:19,840
一种叫做 quicktime 的网络 quicktime

2791
03:51:19,840 --> 03:51:22,558
所以我们现在要谈谈这个，但在我们这样做之前，让我先展示一下

2792
03:51:22,558 --> 03:51:27,840
你现在是我们的颤振应用程序

2793
03:51:27,840 --> 03:51:31,520
在这个电话上运行所以

2794
03:51:31,520 --> 03:51:34,477
好了，我们的应用程序现在正在运行

2795
03:51:34,477 --> 03:51:38,240
现在我们已经完成了所有这一切，你不再需要 xcode 所以我

2796
03:51:38,240 --> 03:51:41,919
只是要在这里停下来，我要做什么，我实际上要去做

2797
03:51:41,919 --> 03:51:47,040
从 Visual Studio 代码或 Flutter 应用程序运行我们的应用程序

2798
03:51:47,040 --> 03:51:50,957
iphone 没问题，所以命令 shift b 或控制 shift b 取决于哪个

2799
03:51:50,957 --> 03:51:53,439
您正在使用的平台并说选择设备

2800
03:51:53,439 --> 03:51:57,759
我要选择我的 iphone 12 pro 然后我要去跑步并说跑步

2801
03:51:57,759 --> 03:52:01,840
没有调试你没有任何扩展哦不

2802
03:52:01,840 --> 03:52:05,680
这个文件打开你的主 darp 文件

2803
03:52:05,680 --> 03:52:11,840
然后说运行运行而不调试，你会看到它说启动

2804
03:52:11,840 --> 03:52:16,159
所以这实际上是要咨询 xcode 并说嘿 xcode 这里是

2805
03:52:16,159 --> 03:52:22,477
颤振应用程序在这部手机上运行它

2806
03:52:22,477 --> 03:52:25,200
所以

2807
03:52:25,200 --> 03:52:27,840
老实说，我实际上不喜欢它使用的这个

2808
03:52:27,840 --> 03:52:31,360
自动签名它可能发生的事情是，当

2809
03:52:31,360 --> 03:52:36,400
我们确实拍得很干净，你可能搞砸了我们的

2810
03:52:36,400 --> 03:52:40,637
对你说实话，这不是一个好兆头

2811
03:52:40,637 --> 03:52:45,040
当我确实清理干净时，它实际上弄乱了配置文件

2812
03:52:45,040 --> 03:52:49,840
所以我要再次打开 xcode 并再次打开我们的应用程序，让我们

2813
03:52:49,840 --> 03:52:54,878
看看我们的配置文件，我可以看到调试，没关系，没关系

2814
03:52:54,878 --> 03:52:58,957
不是自动签名，所以你不必担心这个

2815
03:52:58,957 --> 03:53:03,680
呃由颤动打印到屏幕上的消息所以我不认为这是

2816
03:53:03,680 --> 03:53:09,119
我们需要担心的事情，所以既然你已经设置好了，那么你

2817
03:53:09,119 --> 03:53:12,797
实际上可以直接从

2818
03:53:12,797 --> 03:53:16,400
Visual Studio 代码或 android Studio，具体取决于您所在的环境

2819
03:53:16,400 --> 03:53:19,759
运行你的颤振应用程序或调试你的

2820
03:53:19,759 --> 03:53:26,878
好的应用程序现在让我们说这已经完成了

2821
03:53:26,878 --> 03:53:30,558
那么如果你想镜像你的应用程序你需要做什么

2822
03:53:30,558 --> 03:53:34,477
屏幕上你的电脑然后你可以调出一个叫做快速时间的东西

2823
03:53:34,477 --> 03:53:39,599
macintosh 上的播放器，然后转到文件，然后说现在正在录制电影

2824
03:53:39,599 --> 03:53:44,558
这可能会劫持我的不它没有劫持任何东西然后我

2825
03:53:44,558 --> 03:53:49,119
去iphone 12 pro看看能不能镜像

2826
03:53:49,119 --> 03:53:52,319
那部电话给我

2827
03:53:52,319 --> 03:53:55,680
呃

2828
03:53:55,680 --> 03:53:59,520
是不是不能这样做是因为我正在录制我的屏幕或我正在录制的东西

2829
03:53:59,520 --> 03:54:02,637
实际上会[音乐]

2830
03:54:02,637 --> 03:54:08,400
等待此调试过程继续

2831
03:54:08,400 --> 03:54:11,840
让我们先做它的事情我想我可能试图做太多的事情

2832
03:54:11,840 --> 03:54:15,060
在同一时间

2833
03:54:15,060 --> 03:54:18,797
[鼓掌] 我代理我真的不知道我代理什么

2834
03:54:18,797 --> 03:54:22,000
是这样的

2835
03:54:22,000 --> 03:54:25,840
um 连接到 vm 服务占用

2836
03:54:25,840 --> 03:54:28,878
比预期更长，这可能是因为我的 Macintosh 是

2837
03:54:28,878 --> 03:54:33,279
实际上阻​​止了 flopper 需要的东西，所以我要在这里保护隐私

2838
03:54:33,279 --> 03:54:36,878
这是安全和隐私，只​​是让 iproxy 运行

2839
03:54:36,878 --> 03:54:41,360
无论如何都允许这样可能有助于颤振然后得到它

2840
03:54:41,360 --> 03:54:46,797
过程工作

2841
03:54:46,797 --> 03:54:51,680
是的，这可能是因为也许我的 Macintosh 刚刚阻止了那个眼睛代理所以

2842
03:54:51,680 --> 03:54:55,680
我要停止这个过程，我只想说运行运行而不调试

2843
03:54:55,680 --> 03:55:00,957
再次让我们看看它这次是否可以完成它的工作

2844
03:55:00,957 --> 03:55:04,080
启动，这一次，因为它实际上构建了应用程序

2845
03:55:04,080 --> 03:55:09,520
以前它应该不会花很长时间才能运行应用程序

2846
03:55:09,520 --> 03:55:13,680
所以它已经构建了一次应用程序，所以它不应该花这么长时间

2847
03:55:13,680 --> 03:55:16,000
时间

2848
03:55:16,000 --> 03:55:18,637
所以我现在可以看到它说安装和

2849
03:55:18,637 --> 03:55:21,599
发射

2850
03:55:21,599 --> 03:55:26,000
所以让我们看看我们能不能让它发挥作用

2851
03:55:26,000 --> 03:55:29,919
xcode 构建在 8 秒内完成，老实说，这需要

2852
03:55:29,919 --> 03:55:34,400
比我预期的要长，运行应用程序不需要这么长时间，我

2853
03:55:34,400 --> 03:55:37,919
可以看到这次没有被阻止 mac os 无法验证开发者

2854
03:55:37,919 --> 03:55:42,718
iproxy，我只想说 open 我认为有问题

2855
03:55:42,718 --> 03:55:47,599
最新版本的 mac os 以及它如何尝试验证

2856
03:55:47,599 --> 03:55:51,439
Flutter 在内部使用的各种工具，但是

2857
03:55:51,439 --> 03:55:55,680
最后一切都很好，我实际上可以从中启动应用程序

2858
03:55:55,680 --> 03:56:00,000
视觉工作室代码，现在它在我的 iPhone 中运行

2859
03:56:00,000 --> 03:56:04,400
现在我要停止这个所以现在应用程序只要我说停止应用程序就会运行

2860
03:56:04,400 --> 03:56:08,637
停止在那里工作我要做的就是去

2861
03:56:08,637 --> 03:56:12,000
quicktime 看看我们能不能得到 quicktime

2862
03:56:12,000 --> 03:56:16,637
实际上镜像这个 iphone 我要拔掉它

2863
03:56:16,637 --> 03:56:20,319
手机然后再插上看看

2864
03:56:20,319 --> 03:56:25,119
如果它知道它必须镜像手机

2865
03:56:25,119 --> 03:56:30,797
我可以看到我的快速时间也给我带来了一些麻烦

2866
03:56:30,797 --> 03:56:34,159
它崩溃了

2867
03:56:34,159 --> 03:56:38,718
我的意思是这是这次会议的现场录音，所以你可以看到所有的问题

2868
03:56:38,718 --> 03:56:41,680
开发人员将不得不修复，这就是我

2869
03:56:41,680 --> 03:56:48,718
所以让我们去嗯，看看我们能不能得到它

2870
03:56:48,718 --> 03:56:53,439
让我们看看我能不能得到它

2871
03:56:53,439 --> 03:56:56,957
认出这部手机

2872
03:56:56,957 --> 03:56:59,840
老实说，我的意思是我实际上是在单独的屏幕上执行此操作

2873
03:56:59,840 --> 03:57:03,279
所以你不必看我的脸，但我可以看到我的 Macintosh

2874
03:57:03,279 --> 03:57:07,840
原因是无法识别这部手机，所以我基本上无法在此记录

2875
03:57:07,840 --> 03:57:12,000
嗯嗯现在在这个屏幕上

2876
03:57:12,000 --> 03:57:16,000
但如果你在家里做这个，它可能会为你工作，所以呃

2877
03:57:16,000 --> 03:57:19,759
用电缆将手机连接到计算机，然后转到 quicktime player

2878
03:57:19,759 --> 03:57:23,439
然后用quicktime播放器说新电影录制和电影录制

2879
03:57:23,439 --> 03:57:29,119
只需从下拉菜单中选择您的选择您的嗯

2880
03:57:29,119 --> 03:57:33,840
手机，你就可以镜像你的屏幕，所以

2881
03:57:33,840 --> 03:57:38,080
嗯，现在已经完成了，我的意思是我们实际上

2882
03:57:38,080 --> 03:57:43,040
遇到了很多我没有计划的障碍，我们看到了 iproxy 的东西

2883
03:57:43,040 --> 03:57:46,000
发生在这里感谢它发生了

2884
03:57:46,000 --> 03:57:49,840
我们看到了 pod 安装的错误，这是

2885
03:57:49,840 --> 03:57:53,680
我们的项目，因为我们的 Flutter 项目没有设置最低版本

2886
03:57:53,680 --> 03:57:58,477
我们修复了我们看到配置文件没有被拾取的问题

2887
03:57:58,477 --> 03:58:02,718
自动，因为 xcode 已经自动创建了我们修复的证书

2888
03:58:02,718 --> 03:58:04,477
这么

2889
03:58:04,477 --> 03:58:08,797
我的意思是我现在可以去过滤掉这些

2890
03:58:08,797 --> 03:58:13,200
从视频中，有点像当我真正为你输出最后的课程时

2891
03:58:13,200 --> 03:58:16,718
那么一切都会完美地工作

2892
03:58:16,718 --> 03:58:19,840
你不必看到任何打嗝

2893
03:58:19,840 --> 03:58:22,797
但老实说，我不想那样做，因为我认为它是如此

2894
03:58:22,797 --> 03:58:26,400
重要的是你看看什么问题

2895
03:58:26,400 --> 03:58:30,558
当你发展你的想法或应用程序时，你会得到它很重要

2896
03:58:30,558 --> 03:58:34,878
我不想擦亮这个，嗯，我不想擦亮这个呃课程这么多

2897
03:58:34,878 --> 03:58:37,520
你认为一切从一开始就是完美的，如果

2898
03:58:37,520 --> 03:58:40,637
你是，如果你犯了错误，那么方式有问题

2899
03:58:40,637 --> 03:58:44,558
你正在开发东西，但这些事情发生了你需要了解为什么

2900
03:58:44,558 --> 03:58:48,558
它们发生然后你需要学习如何修复它们

2901
03:58:48,558 --> 03:58:50,878
话虽如此，呃

2902
03:58:50,878 --> 03:58:54,797
我想那我们很高兴为 ios 我们已经解释过

2903
03:58:54,797 --> 03:58:58,797
我们需要解释的一切，嗯，一切正常，除了

2904
03:58:58,797 --> 03:59:01,599
快速时间的事情，我认为那是因为

2905
03:59:01,599 --> 03:59:05,919
嗯，我实际上我在这里打开了很多软件我正在玩停止播放

2906
03:59:05,919 --> 03:59:09,759
记录东西的东西，所以可能是因为它有点混乱

2907
03:59:09,759 --> 03:59:12,957
谁知道也许我的电脑需要重新启动

2908
03:59:12,957 --> 03:59:15,520
嗯所以说让我们准备

2909
03:59:15,520 --> 03:59:18,558
我们自己为下一章，那就是

2910
03:59:18,558 --> 03:59:23,520
希望现在用更少的解释为 ios 做同样的事情

2911
03:59:23,520 --> 03:59:27,439
我们已经了解了 android 的基础知识，所以

2912
03:59:27,439 --> 03:59:31,599
呃，随便拿一杯茶杯咖啡，我们下期见

2913
03:59:31,599 --> 03:59:34,797
你好，欢迎来到第 10 章

2914
03:59:34,797 --> 03:59:37,599
本章我们要学习的flutter课程

2915
03:59:37,599 --> 03:59:40,477
设置我们的安卓手机

2916
03:59:40,477 --> 03:59:44,319
或您手头上的任何安卓设备，以便我们能够

2917
03:59:44,319 --> 03:59:49,439
在上面运行我们的颤振代码，现在在第 9 章中，我们研究了如何运行

2918
03:59:49,439 --> 03:59:53,200
应用程序并基本上运行我们的闪存应用程序

2919
03:59:53,200 --> 03:59:58,878
在 ios 设备上，我们设置了我们设置的配置文件

2920
03:59:58,878 --> 04:00:03,119
证书还有什么应用程序ID

2921
04:00:03,119 --> 04:00:07,919
在应用商店可以在嗯苹果的开发者网站上

2922
04:00:07,919 --> 04:00:12,637
我的意思是有很多工作要做，你知道那一章花了大约一个小时

2923
04:00:12,637 --> 04:00:16,400
解释一切，但当涉及到

2924
04:00:16,400 --> 04:00:20,240
android方面的事情要容易得多

2925
04:00:20,240 --> 04:00:22,957
所以我想在这一章我们会

2926
04:00:22,957 --> 04:00:27,520
看看我们如何拥有一部安卓手机，例如在我的

2927
04:00:27,520 --> 04:00:35,840
案例在这里，我有一个用 USB 电缆连接到我的 oneplus pro 7 pro

2928
04:00:35,840 --> 04:00:40,477
电脑，所以没有什么特别之处，它只是一部安卓手机

2929
04:00:40,477 --> 04:00:44,477
嗯，我更喜欢实际上正如我在

2930
04:00:44,477 --> 04:00:48,637
我个人在开发时更喜欢第 9 章中的上一章

2931
04:00:48,637 --> 04:00:53,919
应用程序来开发牙线应用程序来运行我的

2932
04:00:53,919 --> 04:00:59,439
我现在正在测试的真实手机或真实设备上的应用程序

2933
04:00:59,439 --> 04:01:02,957
嗯，如果您来自设计背景或

2934
04:01:02,957 --> 04:01:08,797
以前与移动开发无关的背景，但

2935
04:01:08,797 --> 04:01:12,240
嗯，如果你正在开发应用程序

2936
04:01:12,240 --> 04:01:16,718
只有 ios 然后你有一个叫做 ios 模拟器的东西

2937
04:01:16,718 --> 04:01:22,080
嗯，一个 io 模拟器是一个在你的 macintosh 上运行的程序，它附带

2938
04:01:22,080 --> 04:01:28,159
xcode 和 ios sdk，它允许您模拟 ios 内部的工作方式以及它

2939
04:01:28,159 --> 04:01:33,840
允许您直接从 xcode 或从 Flutter 安装应用程序

2940
04:01:33,840 --> 04:01:39,200
直接进入模拟器并基本上模拟您的应用程序将如何

2941
04:01:39,200 --> 04:01:44,240
如果您正在开发应用程序，您的实际用户会感知到

2942
04:01:44,240 --> 04:01:50,558
android 然后有一个叫做 android 模拟器的东西现在模拟器是

2943
04:01:50,558 --> 04:01:55,520
与模拟器完全不同的是，模拟器正如其名称所表明的那样

2944
04:01:55,520 --> 04:01:59,599
实际上试图模拟有关操作系统和

2945
04:01:59,599 --> 04:02:05,439
设备，例如用于旧设备的 android 模拟器

2946
04:02:05,439 --> 04:02:09,840
你可能会得到一个五六岁的设备

2947
04:02:09,840 --> 04:02:15,680
它实际上会比安卓模拟器慢很多

2948
04:02:15,680 --> 04:02:18,797
现代设备，但你有没有做过同样的事情

2949
04:02:18,797 --> 04:02:23,279
ios模拟器并模拟了一个使用了五年的ios设备

2950
04:02:23,279 --> 04:02:29,279
它仍然会在今天像在你的电脑上一样运行

2951
04:02:29,279 --> 04:02:34,558
速度，因为它正在模拟 ios 它实际上并没有按照它的方式模拟它

2952
04:02:34,558 --> 04:02:38,240
真的可以在手机上使用，所以当谈到 android 你有这个

2953
04:02:38,240 --> 04:02:42,797
可以在更接近的模拟器上运行您的应用程序

2954
04:02:42,797 --> 04:02:47,040
您的用户将使用的实际设备

2955
04:02:47,040 --> 04:02:52,558
所以在大多数情况下它不是完美的副本，所以它不会像

2956
04:02:52,558 --> 04:02:58,718
与真正的实体手机完全​​一样工作，但它更接近实际

2957
04:02:58,718 --> 04:03:04,558
ios模拟器如此的物理设备

2958
04:03:04,558 --> 04:03:10,477
鉴于这种背景，我仍然更喜欢在真实的环境中运行我的颤振应用程序

2959
04:03:10,477 --> 04:03:13,840
电话和本章

2960
04:03:13,840 --> 04:03:17,439
如果你对此感兴趣 如果你有安卓手机并且你

2961
04:03:17,439 --> 04:03:22,477
例如，想在安卓手机上部署你的颤振应用程序并进行测试

2962
04:03:22,477 --> 04:03:27,279
当你在编程的时候，这一章就是为你准备的

2963
04:03:27,279 --> 04:03:32,000
现在我也不得不说嗯

2964
04:03:32,000 --> 04:03:34,240
意思是[音乐]

2965
04:03:34,240 --> 04:03:37,840
你不，你不必这样做，但为了

2966
04:03:37,840 --> 04:03:42,718
整个这门课程我实际上将成为

2967
04:03:42,718 --> 04:03:47,439
当我们正在开发应用程序时，我将亲自去笔记应用程序

2968
04:03:47,439 --> 04:03:50,878
使用我的安卓手机

2969
04:03:50,878 --> 04:03:55,680
所以嗯，所以我们基本上做热重装和

2970
04:03:55,680 --> 04:03:58,477
然后我们写一些代码，我们想测试它我不打算展示任何

2971
04:03:58,477 --> 04:04:01,360
模拟器我不打算展示任何模拟器我实际上要展示我的

2972
04:04:01,360 --> 04:04:05,360
真正的安卓手机现在可以工作了，我不会只用它来展示它

2973
04:04:05,360 --> 04:04:08,159
就像我不会安装应用程序一样

2974
04:04:08,159 --> 04:04:11,360
在这里，只是像这样向您展示，因为这行不通，这不是

2975
04:04:11,360 --> 04:04:16,159
向观看本课程的人展示东西的好方法那又如何

2976
04:04:16,159 --> 04:04:20,159
我们要做的就是第一个

2977
04:04:20,159 --> 04:04:26,477
在这个呃章节中的任务我们将在我们的 um 上安装一个应用程序

2978
04:04:26,477 --> 04:04:30,718
电脑叫 scrcpy 好

2979
04:04:30,718 --> 04:04:36,159
现在 srccp cpy 是一个开源项目

2980
04:04:36,159 --> 04:04:39,680
嗯，在 github 上

2981
04:04:39,680 --> 04:04:45,439
数千颗星星，它不像依赖，它不是什么

2982
04:04:45,439 --> 04:04:48,000
你将要构建到你的颤振应用程序中，但它实际上是

2983
04:04:48,000 --> 04:04:52,000
你要在你的电脑上安装的实用程序

2984
04:04:52,000 --> 04:04:57,680
您的计算机将能够镜像您的 android

2985
04:04:57,680 --> 04:05:02,718
手机或你的安卓平板电脑在你的电脑屏幕上，所以

2986
04:05:02,718 --> 04:05:06,637
这个 scr cpy 绝对漂亮，它是我最喜欢的之一

2987
04:05:06,637 --> 04:05:10,159
进行移动开发时的实用程序

2988
04:05:10,159 --> 04:05:13,520
而这背后的原因是，与

2989
04:05:13,520 --> 04:05:16,400
嗯，我之前展示的解决方案

2990
04:05:16,400 --> 04:05:21,599
章节是 quicktime quicktime 播放器，您可以在其中镜像您的 ios

2991
04:05:21,599 --> 04:05:26,878
电话在您的计算机上，但您无法与该镜像交互

2992
04:05:26,878 --> 04:05:30,159
您仍然需要拿起电话并与

2993
04:05:30,159 --> 04:05:33,840
电话并查看电话本身或您的互动

2994
04:05:33,840 --> 04:05:39,279
screen 与 scrcpy 不同，它允许您实际与手机交互或

2995
04:05:39,279 --> 04:05:42,080
你的平板电脑或你的安卓手机或平板电脑

2996
04:05:42,080 --> 04:05:46,240
从您的计算机屏幕上，这样您就可以实际拿起鼠标，然后转到

2997
04:05:46,240 --> 04:05:50,878
那个屏幕并点击一个按钮，它实际上会点击你的那个按钮

2998
04:05:50,878 --> 04:05:55,200
安卓手机所以很神奇很漂亮它是开放的

2999
04:05:55,200 --> 04:05:59,520
来源和免费所以如果你有一个安卓平板电脑或安卓手机和

3000
04:05:59,520 --> 04:06:03,840
您正在学习本课程，我强烈建议我们安装