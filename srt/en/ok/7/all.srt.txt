1
17:54:36,319 --> 17:54:39,116
and i'm improvising a little bit here because this is like something that i

2
17:54:39,116 --> 17:54:42,955
plan to show you but i haven't actually prepared any notes for it so let's just

3
17:54:42,955 --> 17:54:47,199
go ahead and create a table here called user and as you can see we're gonna be

4
17:54:47,199 --> 17:54:50,720
able to have some um

5
17:54:50,720 --> 17:54:55,360
fields in here what is called a field in here is pretty much just like a column

6
17:54:55,360 --> 17:54:58,160
so by creating a field you're creating a

7
17:54:58,160 --> 17:55:03,040
column okay and the great thing about db browser for sqlite is that you can see

8
17:55:03,040 --> 17:55:06,635
the sql code that will be generated for you

9
17:55:06,635 --> 17:55:10,796
which we're actually going to use later when we integrate sqlite into our

10
17:55:10,796 --> 17:55:14,319
flutter application but for now i just want you to get the idea of how sqlite

11
17:55:14,319 --> 17:55:17,680
works how it creates the tables et cetera okay

12
17:55:17,680 --> 17:55:22,796
so now we have the user uh empty table it doesn't have any fields

13
17:55:22,796 --> 17:55:27,116
or columns i need you to press this add button right here and what we're going

14
17:55:27,116 --> 17:55:31,839
to do is we're going to just create um an id

15
17:55:31,839 --> 17:55:34,796
field now if you're not a developer or

16
17:55:34,796 --> 17:55:37,199
software engineer friend before you may not

17
17:55:37,199 --> 17:55:41,275
know about id field and why it's important or if you're a developer from

18
17:55:41,275 --> 17:55:44,400
before you may know id as primary key from before

19
17:55:44,400 --> 17:55:48,480
so um an id is just usually an integer

20
17:55:48,480 --> 17:55:54,080
identifier an integer is a number so a number identifier for every row that you

21
17:55:54,080 --> 17:55:59,199
later later insert into your table so why is it important because

22
17:55:59,199 --> 17:56:04,080
usually an id is something called a primary key and a primary key by default

23
17:56:04,080 --> 17:56:06,319
is is

24
17:56:06,319 --> 17:56:10,955
unique what that means is that for you to be able to create a user in this

25
17:56:10,955 --> 17:56:15,116
table it has to have its unique identifier now

26
17:56:15,116 --> 17:56:21,116
if you remember how our um how we are basically treating users in

27
17:56:21,116 --> 17:56:24,480
our user interface is that we're treating them by their email so you may

28
17:56:24,480 --> 17:56:28,559
think well the email is a unique thing as well so why don't we go with

29
17:56:28,559 --> 17:56:33,199
uniqueness off the email well we can apply uniqueness constraints on the

30
17:56:33,199 --> 17:56:39,199
email field and or the email column but it is very well established pattern in

31
17:56:39,199 --> 17:56:42,879
database um world where you're working with

32
17:56:42,879 --> 17:56:48,160
databases that you i mean you can make a string column

33
17:56:48,160 --> 17:56:54,000
unique such as then such as an email but a primary key is usually an integer such

34
17:56:54,000 --> 17:57:00,720
as pk or id so it's just a convention and it's also a good practice to not go

35
17:57:00,720 --> 17:57:04,400
with like a uniqueness of a string because it

36
17:57:04,400 --> 17:57:07,595
takes more resources in order to calculate the uniqueness of a string

37
17:57:07,595 --> 17:57:14,080
than it takes for an integer so we're then going to call this field id

38
17:57:14,080 --> 17:57:17,839
going to be integer and there are some fields in here which are not rendered so

39
17:57:17,839 --> 17:57:20,480
well i'm going to increase the size of this and i'm going to do

40
17:57:20,480 --> 17:57:24,160
like this okay

41
17:57:24,160 --> 17:57:28,239
so what we're going to do in here um

42
17:57:28,239 --> 17:57:32,080
we're going to take you see n n in here at the type we're going to leave as

43
17:57:32,080 --> 17:57:38,160
integer that's fine n n means not null meaning that this field should always be

44
17:57:38,160 --> 17:57:42,796
present it should never allow the value and emptiness of the value or the

45
17:57:42,796 --> 17:57:46,796
absence of a value to be present there okay the absence of value to be present

46
17:57:46,796 --> 17:57:50,400
i hope that makes sense basically just means that the value cannot not be

47
17:57:50,400 --> 17:57:55,519
either so we're we're going to leave it like that pk stands for primary key and

48
17:57:55,519 --> 17:57:59,040
that is what i oh actually i can move my mouse over them that's great primary key

49
17:57:59,040 --> 17:58:03,595
so um it means that it is the key using which

50
17:58:03,595 --> 17:58:09,116
is a unique key in this table using which we should be able to

51
17:58:09,116 --> 17:58:14,720
then easily query different users from this table so what

52
17:58:14,720 --> 17:58:18,160
we're going to do is we're going to take this item right here okay

53
17:58:18,160 --> 17:58:22,080
ai is auto increment i believe and auto increment is a great functionality in

54
17:58:22,080 --> 17:58:27,116
sqlite and many other uh databases that allows you as the as the name uh

55
17:58:27,116 --> 17:58:31,436
suggests and as the name indicates that by you

56
17:58:31,436 --> 17:58:36,879
creating for instance a user with a specific email and you insert that user

57
17:58:36,879 --> 17:58:41,275
into the database in this table and you don't even have to assign an id

58
17:58:41,275 --> 17:58:46,559
to that user you just say here is the user email boof put it in the database

59
17:58:46,559 --> 17:58:50,879
then excuse me then sqlite is smart enough to

60
17:58:50,879 --> 17:58:55,040
say oh i but i need an id field as well you haven't provided it and then it

61
17:58:55,040 --> 17:58:59,360
looks at this field and says oh id is auto increment so it's going to create

62
17:58:59,360 --> 17:59:04,080
that id for you and increment the previously generated id and assign the

63
17:59:04,080 --> 17:59:10,239
new id to your object for instance if you have no objects inside this table

64
17:59:10,239 --> 17:59:15,275
and then you add a new user then it automatically gets the id of zero

65
17:59:15,275 --> 17:59:18,635
and then if you generate the next user and put it in there then it will get the

66
17:59:18,635 --> 17:59:23,199
id of one so you get the idea okay and that is exactly what we're gonna do for

67
17:59:23,199 --> 17:59:27,436
this particular field and unique is just yeah as its name

68
17:59:27,436 --> 17:59:31,116
indicates this field needs to be unique but if you indicate something as primary

69
17:59:31,116 --> 17:59:36,480
key implicitly it is a unique field okay and to be honest with you we could

70
17:59:36,480 --> 17:59:39,839
actually check not null as well meaning that yeah it should always be there so

71
17:59:39,839 --> 17:59:44,480
just in case so that's for the user field okay

72
17:59:44,480 --> 17:59:48,955
sorry it's for the id field and now let's go ahead and create a new

73
17:59:48,955 --> 17:59:53,680
field for the user's email like this and for the email you should

74
17:59:53,680 --> 17:59:58,796
say that it is a text okay and what we'll do we'll say it shouldn't

75
17:59:58,796 --> 18:00:06,080
be null and also the emails are unique so have a look at this now it generated

76
18:00:06,080 --> 18:00:11,199
code for it that says create table user id integer not null email text not now

77
18:00:11,199 --> 18:00:17,519
unique and it sets a primary key of id with an auto auto increment so

78
18:00:17,519 --> 18:00:22,879
this is kind of like the code that we're actually going to use in our flutter

79
18:00:22,879 --> 18:00:27,116
application in order to programmatically create this table

80
18:00:27,116 --> 18:00:31,040
later but for now just keep it in mind this is kind of like the syntax of

81
18:00:31,040 --> 18:00:37,360
creating a sqlite table programmatically okay

82
18:00:37,360 --> 18:00:40,080
all right so then you can press ok in here

83
18:00:40,080 --> 18:00:43,436
and now you can see the user table has been created for you and here's the code

84
18:00:43,436 --> 18:00:48,480
for it or the schema as it says right there

85
18:00:48,480 --> 18:00:52,559
all right great stuff now as we did the user table

86
18:00:52,559 --> 18:00:57,040
we need to go and create our notes table because remember from before i said

87
18:00:57,040 --> 18:00:59,680
we're going to allow the user to create notes when they're logged into the

88
18:00:59,680 --> 18:01:02,879
application and by the time they're actually logged into the application we

89
18:01:02,879 --> 18:01:07,436
should have already created a user uh row for them

90
18:01:07,436 --> 18:01:12,400
in the user table and then by creation of every note we're

91
18:01:12,400 --> 18:01:16,480
going to create also a new note in the database in our note table which we're

92
18:01:16,480 --> 18:01:18,796
just going to create as the caption indicates

93
18:01:18,796 --> 18:01:24,000
and then we're going to bind that note to that user in the database so

94
18:01:24,000 --> 18:01:27,839
i need you to go here then and then we need to create a new table by pressing

95
18:01:27,839 --> 18:01:31,839
create table button okay so as the caption in the case here let's

96
18:01:31,839 --> 18:01:36,480
call this new table note and we're then gonna start by creating a

97
18:01:36,480 --> 18:01:40,000
new field called id and we've already gone through this you know exactly what

98
18:01:40,000 --> 18:01:44,796
to do in here an id field as integer and we say it shouldn't be in it shouldn't

99
18:01:44,796 --> 18:01:48,879
be null it should be primary key

100
18:01:48,879 --> 18:01:51,595
and

101
18:01:51,595 --> 18:01:55,275
and i think that's it to be honest with you so not null and

102
18:01:55,275 --> 18:02:00,160
auto increment as well of course so all right so that's for that's for the

103
18:02:00,160 --> 18:02:05,199
id of a note now what other fields do we need in here so

104
18:02:05,199 --> 18:02:10,480
what we could say is for instance that you have a a user id and so you want to

105
18:02:10,480 --> 18:02:16,080
bind a user to a node and what we're gonna do in here we're

106
18:02:16,080 --> 18:02:20,879
gonna bind this we're gonna say literally that this oops where did it go

107
18:02:20,879 --> 18:02:25,116
oh it's a little bit strange interfacing here so that's okay too

108
18:02:25,116 --> 18:02:31,519
um so user id integer and we're going to say it's not null

109
18:02:31,519 --> 18:02:36,160
and also what we're going to do is to what we want to do is for this user id

110
18:02:36,160 --> 18:02:42,879
to be kind of like bound to a user tables id field and that's that's

111
18:02:42,879 --> 18:02:47,199
called a foreign key so you have a primary key

112
18:02:47,199 --> 18:02:51,756
which is the key that your table itself manages as its own field and then you'll

113
18:02:51,756 --> 18:02:56,796
have a foreign key as its name indicates that it is it is a field inside your

114
18:02:56,796 --> 18:03:01,756
table that is bound to another tables something else column so in this case

115
18:03:01,756 --> 18:03:06,160
our user id should be bound to the user tables id column and you can create that

116
18:03:06,160 --> 18:03:10,080
with db browser for sqlite inside constraints

117
18:03:10,080 --> 18:03:14,080
and in here let's see we add a constraint and we say we have a

118
18:03:14,080 --> 18:03:16,879
foreign key and in here

119
18:03:16,879 --> 18:03:20,955
so let's say sqlite foreign key

120
18:03:20,955 --> 18:03:26,239
and we say the user id and we say apply

121
18:03:26,239 --> 18:03:30,239
and you can see now it says foreign keys or id references it's not at the moment

122
18:03:30,239 --> 18:03:32,720
referencing anything so

123
18:03:32,720 --> 18:03:38,319
i wonder if that field is hidden somewhere to the right

124
18:03:38,319 --> 18:03:41,519
hand side

125
18:03:41,519 --> 18:03:47,436
and how we could possibly create that let's see i just remember from before

126
18:03:47,436 --> 18:03:51,519
that this was a little bit strange to get working from the beginning so

127
18:03:51,519 --> 18:03:56,160
name oh maybe it's it's the name right there so

128
18:03:56,160 --> 18:04:01,436
so let's say user id references sqlite foreign key let's see how it's

129
18:04:01,436 --> 18:04:04,720
created foreign key user id references

130
18:04:04,720 --> 18:04:10,000
let's just say name should we say um in here if i say blob

131
18:04:10,000 --> 18:04:13,199
what happens foreign keys ready references

132
18:04:13,199 --> 18:04:17,436
contains blah so that's not that's not really what i

133
18:04:17,436 --> 18:04:20,955
wanted in there so i'm going to remove this plot that i just created and let's

134
18:04:20,955 --> 18:04:26,796
see if we can change the sequel we can't are there no other fields available here

135
18:04:26,796 --> 18:04:30,720
that we can play with perhaps not

136
18:04:30,720 --> 18:04:34,796
and i want to remove this just to see if i've made any mistakes in there so

137
18:04:34,796 --> 18:04:38,319
let's say so here i can see we have a user id and

138
18:04:38,319 --> 18:04:43,275
then there is a foreign key and i can see here this is perhaps the right

139
18:04:43,275 --> 18:04:46,635
actual way of doing i remember there was something really strange about it and

140
18:04:46,635 --> 18:04:53,116
now i remember that it is hidden under this foreign key um column unfortunately

141
18:04:53,116 --> 18:04:57,360
i believe it's a little bit of a strange interface that's okay i'm just still

142
18:04:57,360 --> 18:05:02,480
very very grateful that we have db browser for sqlite as a free software

143
18:05:02,480 --> 18:05:06,720
and perhaps even an open source software i'm not sure about that and i'm very

144
18:05:06,720 --> 18:05:09,519
grateful for every developer who's worked on this so

145
18:05:09,519 --> 18:05:13,360
i just hope that it um that's understood but what we're going

146
18:05:13,360 --> 18:05:17,360
to do here in here we want to bind this user id to the id field of the user

147
18:05:17,360 --> 18:05:21,839
table so just click here under foreign key and double click actually i can see

148
18:05:21,839 --> 18:05:27,360
then this magic thing appears here so let's go ahead and say that we want

149
18:05:27,360 --> 18:05:32,796
to bind this to the user table id field and

150
18:05:32,796 --> 18:05:38,000
i believe that should be it yeah and you can see now the code generated here says

151
18:05:38,000 --> 18:05:44,319
we have a foreign key called user id and it references the user table id field

152
18:05:44,319 --> 18:05:49,436
okay perfect um now we also need to do is to

153
18:05:49,436 --> 18:05:54,160
create another field in here and that's the text of every note

154
18:05:54,160 --> 18:05:58,480
so what we're going to do for notes is going to be very simple our notes are

155
18:05:58,480 --> 18:06:01,915
not going to include any sort of um

156
18:06:01,915 --> 18:06:06,000
they're not going to include any sort of for instance um

157
18:06:06,000 --> 18:06:10,955
images they're not going to include any sort of

158
18:06:10,955 --> 18:06:15,116
ordered list or unordered list they're going to be simple texts okay and they

159
18:06:15,116 --> 18:06:19,040
don't even have titles the title of a note we're going to derive from the text

160
18:06:19,040 --> 18:06:21,839
of the notes so it's very simple

161
18:06:21,839 --> 18:06:26,559
so for the text of the note let's just go say it is of type text

162
18:06:26,559 --> 18:06:31,116
and uh i believe i believe that's all we need

163
18:06:31,116 --> 18:06:36,160
right now so user id text and yeah that's fine and

164
18:06:36,160 --> 18:06:40,796
also to be honest with you if you want to you could also create a other fields

165
18:06:40,796 --> 18:06:45,360
in here you see in this uh in this course what i what i want to do in the

166
18:06:45,360 --> 18:06:50,635
beginning is to allow us to create a local database that you can store all

167
18:06:50,635 --> 18:06:54,400
the users notes in it but i want you to also be able to

168
18:06:54,400 --> 18:06:57,595
later in the future get rid of this local database and replace it with

169
18:06:57,595 --> 18:07:02,720
firebase that's like the goal um however some of you may actually decide to keep

170
18:07:02,720 --> 18:07:07,436
this local database store the user's information in this local database and

171
18:07:07,436 --> 18:07:11,116
not the user's information the user's notes in this database and then you may

172
18:07:11,116 --> 18:07:15,436
want to decide to have some sort of a um utility service that sits in the

173
18:07:15,436 --> 18:07:20,080
background and syncs these notes with firebase at appropriate time so

174
18:07:20,080 --> 18:07:22,955
that's up to you if you want to do that then you may want to actually create a

175
18:07:22,955 --> 18:07:27,595
little fill in here that's called is synced with server or something like

176
18:07:27,595 --> 18:07:32,239
this okay or it's synced with cloud i've

177
18:07:32,239 --> 18:07:35,519
called it in my note so let's go ahead and do that although we're not actually

178
18:07:35,519 --> 18:07:38,796
going to use this field but i just want to demonstrate to you that this field is

179
18:07:38,796 --> 18:07:42,160
possible to achieve with

180
18:07:42,160 --> 18:07:47,519
sqlite then in here let's say it is an integer

181
18:07:47,519 --> 18:07:51,436
also um and we're going to say the default is

182
18:07:51,436 --> 18:07:57,116
0 meaning it's not synced basically true or false in

183
18:07:57,116 --> 18:08:01,680
true could be translated to any value that is not 0 and 0 could be translated

184
18:08:01,680 --> 18:08:03,915
to the value of false so putting the value of

185
18:08:03,915 --> 18:08:08,480
zero in here meaning that it is not synced with any cloud

186
18:08:08,480 --> 18:08:12,559
storage so let's then go ahead and say that uh

187
18:08:12,559 --> 18:08:18,480
this is integer and it's um we should say it's not null and um and it doesn't

188
18:08:18,480 --> 18:08:22,879
have to be unique so now you can see that this is the result of the creation

189
18:08:22,879 --> 18:08:27,595
of our tables this is id integer not null and the id is also primary key in

190
18:08:27,595 --> 18:08:31,595
auto increment then there is a user id which is integer not null but it's also

191
18:08:31,595 --> 18:08:35,040
a foreign key to the user table under the id column

192
18:08:35,040 --> 18:08:40,080
or the id field and then we have another field here says text of type text and

193
18:08:40,080 --> 18:08:44,480
then another field that's called isync with cloud integer not null default zero

194
18:08:44,480 --> 18:08:48,319
okay so that's all we need to do

195
18:08:48,319 --> 18:08:52,000
and i'm going to press okay and i need to do the same thing on your side all

196
18:08:52,000 --> 18:08:56,400
right now we have two um

197
18:08:56,400 --> 18:09:00,955
we have two tables in our database

198
18:09:00,955 --> 18:09:06,319
so let's go ahead and um let's go ahead and move on to the next

199
18:09:06,319 --> 18:09:09,519
point that we're going to talk about you see as the captioning case we need to

200
18:09:09,519 --> 18:09:14,559
create these programmatically otherwise we have to move this

201
18:09:14,559 --> 18:09:17,436
database that we just created called testingdb

202
18:09:17,436 --> 18:09:21,199
manually into the documents folder of an application i'm going to explain what

203
18:09:21,199 --> 18:09:27,040
this actually means you see now we have a file called testingdb it

204
18:09:27,040 --> 18:09:32,080
has the database for our application with some tables okay

205
18:09:32,080 --> 18:09:35,040
however we need to be able to create these

206
18:09:35,040 --> 18:09:40,080
tables programmatically if they don't exist inside our application you see

207
18:09:40,080 --> 18:09:44,239
this testing db for me is sitting on my desktop it has absolutely nothing to do

208
18:09:44,239 --> 18:09:49,040
with our flutter application and you could be smart and like drag this db

209
18:09:49,040 --> 18:09:53,595
into your firebase application flutter application and then kind of copy it to

210
18:09:53,595 --> 18:09:58,400
the right place when the application is is executed in the user's telephone or

211
18:09:58,400 --> 18:10:01,680
on the tablet and then try to read from that database

212
18:10:01,680 --> 18:10:05,839
it is possible but what i'm going to do in here is i'm going to show you

213
18:10:05,839 --> 18:10:10,160
a better way of doing this in that we're going to actually create these tables

214
18:10:10,160 --> 18:10:13,839
programmatically in our flutter applications so that

215
18:10:13,839 --> 18:10:17,756
you also see that process and how that works how can you integrate with

216
18:10:17,756 --> 18:10:22,000
sqlite inside your flutter application okay

217
18:10:22,000 --> 18:10:25,519
all right so in order to do that as a captioning case we need a few

218
18:10:25,519 --> 18:10:32,080
dependencies uh we need sql sqflight path provider and path

219
18:10:32,080 --> 18:10:36,879
and um i'm gonna then explain to you why we need these dependencies you see sql

220
18:10:36,879 --> 18:10:40,720
sqflight is a package it's a third-party package that we need to add to our

221
18:10:40,720 --> 18:10:45,040
application in order for our flutter application to be able to talk with sql

222
18:10:45,040 --> 18:10:48,635
flight so that's that's that and that is for

223
18:10:48,635 --> 18:10:54,955
storage actual storage and talking with the database that package used for okay

224
18:10:54,955 --> 18:10:58,955
now there is a dependency that we have to drag into our application called path

225
18:10:58,955 --> 18:11:05,595
and path is used for us to be able to grab the applications documents folder

226
18:11:05,595 --> 18:11:10,796
so that we can actually create a file inside a documents folder and place our

227
18:11:10,796 --> 18:11:15,839
data inside that file just like i'm placing the data for nodes and user

228
18:11:15,839 --> 18:11:18,955
inside this testing db file on my desktop so

229
18:11:18,955 --> 18:11:23,756
the path uh provider and the path provider uh i

230
18:11:23,756 --> 18:11:27,680
may have actually taught set paths but it's actually called path provider path

231
18:11:27,680 --> 18:11:32,239
provider dependency allows us to grab the the applications

232
18:11:32,239 --> 18:11:35,756
documents folder and if you're not familiar with mobile application

233
18:11:35,756 --> 18:11:40,080
development you may not know this but applications that sit on the uh on an

234
18:11:40,080 --> 18:11:45,915
android phone or tablet and on ios telephone or ipad os tablet

235
18:11:45,915 --> 18:11:50,480
they have their own file structure so every application in itself has a

236
18:11:50,480 --> 18:11:53,199
document directory so

237
18:11:53,199 --> 18:11:57,915
whereas on your computer like if you're sitting on a from a laptop or a desktop

238
18:11:57,915 --> 18:12:03,360
you have a documents folder that other applications that run on your operating

239
18:12:03,360 --> 18:12:08,160
system could get access to so it's one documents folder every application can

240
18:12:08,160 --> 18:12:12,400
request access to and store information in it and read from it but that's not

241
18:12:12,400 --> 18:12:17,755
the same concept in mobile devices and on tablets in that every application

242
18:12:17,755 --> 18:12:23,279
runs inside something called sandbox the sandbox is like a it's like a

243
18:12:23,279 --> 18:12:27,755
cage inside where the application resides and all the application data

244
18:12:27,755 --> 18:12:32,555
resides in that sandbox so every application can request access

245
18:12:32,555 --> 18:12:37,919
from the operating system to read its own documents folder okay and that is

246
18:12:37,919 --> 18:12:40,960
what the path provider

247
18:12:40,960 --> 18:12:45,600
package is gonna allow us to do to find our applications documents

248
18:12:45,600 --> 18:12:50,639
folder in which we're gonna store our database file

249
18:12:50,639 --> 18:12:53,755
now we also need as i mentioned a

250
18:12:53,755 --> 18:12:57,039
a package called path and

251
18:12:57,039 --> 18:13:01,600
we need this path just for a very single up a simple operation and

252
18:13:01,600 --> 18:13:06,720
let's say that we have uh use path provider to get our documents folder now

253
18:13:06,720 --> 18:13:11,039
we want to create a file in this documents folder

254
18:13:11,039 --> 18:13:15,115
and kind of like get the full path of this file documents folder slash

255
18:13:15,115 --> 18:13:18,720
this file and that's what we need the path package because it has a great

256
18:13:18,720 --> 18:13:23,516
function called join that allows us to take the path or of a directory or

257
18:13:23,516 --> 18:13:28,000
folder and join that path with a file name and it

258
18:13:28,000 --> 18:13:32,555
gives us the entire path back so we can access that file okay

259
18:13:32,555 --> 18:13:36,320
so a lot of information i'm gonna take this

260
18:13:36,320 --> 18:13:41,600
um into another screen so you don't see it and i can see

261
18:13:41,600 --> 18:13:44,876
here it's asking for to control this computer's access now i'm going to deny

262
18:13:44,876 --> 18:13:48,320
that for now um all right so what we're going to do

263
18:13:48,320 --> 18:13:51,600
i'm going to bring our code up if i can find it

264
18:13:51,600 --> 18:13:55,755
and here's the code how we left it in the previous chapters

265
18:13:55,755 --> 18:13:59,755
and i can see that it is running excuse me in scrcpy i'm going to bring

266
18:13:59,755 --> 18:14:03,600
it here i'm not actually sure if you need a crcpy in this chapter so it may

267
18:14:03,600 --> 18:14:07,516
be better for me to just to minimize scr cpy

268
18:14:07,516 --> 18:14:11,516
and i'm going to make this code a little bit bigger here as well okay

269
18:14:11,516 --> 18:14:15,436
so so what we need now

270
18:14:15,436 --> 18:14:20,156
is to first before we go ahead and actually create our notes service is to

271
18:14:20,156 --> 18:14:24,080
bring in those dependencies okay let me change this screen layout a

272
18:14:24,080 --> 18:14:27,835
little bit so you see better i'm going to increase the font as well

273
18:14:27,835 --> 18:14:33,835
so i need you to go to your uh editor text editor or id if you're using

274
18:14:33,835 --> 18:14:38,156
and we need to bring in those uh dependencies okay

275
18:14:38,156 --> 18:14:44,320
so let's go and bring up uh your web browser and say pop.dev and in public

276
18:14:44,320 --> 18:14:49,516
dev search for sql flights okay and you can see it's right there and the way to

277
18:14:49,516 --> 18:14:53,195
install it is very simple you should be able to just say

278
18:14:53,195 --> 18:14:59,279
uh flutter pop at sqflight so let's go ahead and do that by hand

279
18:14:59,279 --> 18:15:07,516
and let's give it a flight remember it's not sq sqlite it's sqlite

280
18:15:07,516 --> 18:15:12,399
okay that dependency has been added then i'm going to say flutter pop add provide

281
18:15:12,399 --> 18:15:18,399
a path provider and we can actually search for it in popdev path provider

282
18:15:18,399 --> 18:15:22,796
and it is right there it's developed by the people who have

283
18:15:22,796 --> 18:15:27,436
brought us flutter and so to begin with at google so it's not really a third

284
18:15:27,436 --> 18:15:31,360
party application or third party uh package and we can actually have a look

285
18:15:31,360 --> 18:15:35,679
at sql flight as well and see who's developed that

286
18:15:35,679 --> 18:15:40,156
oh it's another yeah it's another publisher is not flutter themselves so

287
18:15:40,156 --> 18:15:45,279
let's go back to path provider and i'm gonna just say

288
18:15:45,279 --> 18:15:50,960
installing as we can see is flutter pop add path provider let me just copy that

289
18:15:50,960 --> 18:15:55,516
and paste it there add path provider

290
18:15:55,516 --> 18:16:00,399
and then we also need path so let's go back in here and just type path i

291
18:16:00,399 --> 18:16:05,195
believe this is my flutter team yeah dark dev so let's just say flutter pop

292
18:16:05,195 --> 18:16:10,796
add a path

293
18:16:10,796 --> 18:16:16,475
alright that's going to do its work and now if you go to our um

294
18:16:16,475 --> 18:16:21,360
pop special then you should be able to see those uh

295
18:16:21,360 --> 18:16:26,876
dependencies sqflight path provider and path are right there okay

296
18:16:26,876 --> 18:16:31,755
now that we've done that we can go and do what we uh are supposed to do in here

297
18:16:31,755 --> 18:16:35,835
which is create our notes service you can see that in the

298
18:16:35,835 --> 18:16:38,720
uh in the description i've provided here in the caption i said that we're in

299
18:16:38,720 --> 18:16:43,115
creating inside a folder called crud and we already have lib services you can

300
18:16:43,115 --> 18:16:48,960
see in here lib services and lib services auth but we don't have crud so

301
18:16:48,960 --> 18:16:54,960
i'm gonna go in here in lib and just say new file and i'm gonna say services

302
18:16:54,960 --> 18:16:56,960
well slash absolutely it's saying that it already

303
18:16:56,960 --> 18:17:01,195
exists so inside services i'm going to say new file then i'm going to bring it

304
18:17:01,195 --> 18:17:04,796
so you can see it as well oh where did it go

305
18:17:04,796 --> 18:17:08,320
services new file crud

306
18:17:08,320 --> 18:17:13,360
i think i need to change the screen layout so unfortunately so you'll see it

307
18:17:13,360 --> 18:17:21,600
better services again new file in here a new file uh third time or fourth time

308
18:17:21,600 --> 18:17:28,475
lucky crud and then nodes service dot

309
18:17:28,475 --> 18:17:31,279
okay so what we're going to do with this node

310
18:17:31,279 --> 18:17:36,244
service is to uh is to basically grab

311
18:17:36,244 --> 18:17:41,516
a hold of our database it is the primary service that is gonna work with

312
18:17:41,516 --> 18:17:45,115
our sqlite database it's gonna grab users it's gonna

313
18:17:45,115 --> 18:17:51,115
create new users delete users it's gonna find users it's gonna create notes

314
18:17:51,115 --> 18:17:55,195
delete nodes update nodes everything everything that we need from our user

315
18:17:55,195 --> 18:17:59,600
interface this node service is going to

316
18:17:59,600 --> 18:18:04,320
facilitate that for us okay

317
18:18:04,320 --> 18:18:12,080
okay so what we need to do inside uh are

318
18:18:12,080 --> 18:18:16,156
so what we need to do now is to actually i think before we do that we need to

319
18:18:16,156 --> 18:18:20,244
import our dependencies so let's import our dependencies we need uh

320
18:18:20,244 --> 18:18:24,960
three dependencies if you remember path path provider and sqlite so

321
18:18:24,960 --> 18:18:29,755
um i'm gonna bring those in here so we don't have to

322
18:18:29,755 --> 18:18:35,039
type it again so imports are kind of like boring and i

323
18:18:35,039 --> 18:18:38,796
i don't rather not type them so let's go in here and you can have a look at what

324
18:18:38,796 --> 18:18:42,475
i've imported here package sql flight and then we import that

325
18:18:42,475 --> 18:18:46,244
then we also have the path provider okay so that we can get the documents folder

326
18:18:46,244 --> 18:18:50,555
for this application and then we also are importing package path path and then

327
18:18:50,555 --> 18:18:56,555
i'm doing this show syntax in order to bring in this particular function called

328
18:18:56,555 --> 18:18:59,195
join all right so

329
18:18:59,195 --> 18:19:03,600
you could also skip that but the problem is that then you get everything inside

330
18:19:03,600 --> 18:19:07,755
path of dart and that's not what i want so i just want us to get this particular

331
18:19:07,755 --> 18:19:10,876
function inside path.dart and you could also do the same

332
18:19:10,876 --> 18:19:15,279
thing in here to be honest with you you could just say show um and i think the

333
18:19:15,279 --> 18:19:19,600
function is called get application documents directory so let's do that why

334
18:19:19,600 --> 18:19:24,080
not let's just get that particular function from path provider as well okay

335
18:19:24,080 --> 18:19:27,600
we don't need the entire path provider all right

336
18:19:27,600 --> 18:19:32,475
all right that's great so

337
18:19:32,475 --> 18:19:36,320
what we need then is for us to be able to

338
18:19:36,320 --> 18:19:41,679
grab a hold of our current database path as i mentioned are

339
18:19:41,679 --> 18:19:45,516
every application that you develop with flutter for mobile application mobile

340
18:19:45,516 --> 18:19:50,244
devices such as android and ios and ipad os they have their own documents

341
18:19:50,244 --> 18:19:54,475
directory and we're going to create and we're going to get the path of the

342
18:19:54,475 --> 18:19:58,475
documents directory and then we're what we're going to say is we're going to

343
18:19:58,475 --> 18:20:02,399
join that using path dependency

344
18:20:02,399 --> 18:20:07,679
with a name that we are going to specify for our database okay

345
18:20:07,679 --> 18:20:10,156
so um

346
18:20:10,156 --> 18:20:14,244
what we need to do then is to let's go ahead first actually and take care of

347
18:20:14,244 --> 18:20:20,000
some other important matters that uh need to be dealt with before we actually

348
18:20:20,000 --> 18:20:24,475
create the function functionality for for our database uh implementation you

349
18:20:24,475 --> 18:20:28,080
see note service is going to talk with database but before you can do that it

350
18:20:28,080 --> 18:20:32,639
needs to have some sort of dart representation of those two two very

351
18:20:32,639 --> 18:20:38,960
important tables that we created um user and note so if you read that data from

352
18:20:38,960 --> 18:20:43,115
the database how are we going to represent it inside our dart application

353
18:20:43,115 --> 18:20:48,876
and for that we need dart classes so

354
18:20:48,876 --> 18:20:53,755
what we need now is to as a caption in the case we need database users create a

355
18:20:53,755 --> 18:20:59,516
class called database user inside notes service dart

356
18:20:59,516 --> 18:21:03,919
all right that is going to be a bit of code so i hope you're ready for it

357
18:21:03,919 --> 18:21:07,679
and let's just go ahead i'm looking at my notes

358
18:21:07,679 --> 18:21:12,000
let's go ahead and create as the caption indicates we create a class in here

359
18:21:12,000 --> 18:21:15,919
i make the a little bit bigger class and i'm just

360
18:21:15,919 --> 18:21:22,720
going to say database user okay now if you remember from db browser for

361
18:21:22,720 --> 18:21:26,320
sqlite i'm going to bring it here every user had

362
18:21:26,320 --> 18:21:29,679
can we actually oh we can browse it but i want to go

363
18:21:29,679 --> 18:21:33,919
back to the user and modify the table save it and you

364
18:21:33,919 --> 18:21:37,919
remember it had an id and an email id was integer and email was text so that's

365
18:21:37,919 --> 18:21:42,555
what we're going to define in here okay so we're going to say final and id and

366
18:21:42,555 --> 18:21:46,320
final string email

367
18:21:46,320 --> 18:21:49,436
get help from visual studio to completely complete this i'm not going

368
18:21:49,436 --> 18:21:53,115
to explain these again and again because we've explained this quite a lot in

369
18:21:53,115 --> 18:21:58,475
previous chapters so by this point i just assume that you know what these are

370
18:21:58,475 --> 18:22:02,244
let's make this a constant initializer and then let's go ahead and say these

371
18:22:02,244 --> 18:22:05,039
two parameters are required parameters so

372
18:22:05,039 --> 18:22:09,755
they become also named parameters by default okay

373
18:22:09,755 --> 18:22:15,360
and that's that put a comma here so we get dark formatter to do its magic

374
18:22:15,360 --> 18:22:19,436
and what we're going to do is remember when we

375
18:22:19,436 --> 18:22:23,195
actually you shouldn't remember because you don't know this maybe yet but when

376
18:22:23,195 --> 18:22:28,796
we talk with our database we are going to read

377
18:22:28,796 --> 18:22:33,755
like hash tables for every row that we read from our for

378
18:22:33,755 --> 18:22:38,399
from that table so every user inside that database

379
18:22:38,399 --> 18:22:43,436
table called user is going to be represented by this object a map of a

380
18:22:43,436 --> 18:22:50,399
string and an optional object okay so that's a row inside the user table

381
18:22:50,399 --> 18:22:53,600
now imagining that the this

382
18:22:53,600 --> 18:22:56,796
node service that we're going to create soon

383
18:22:56,796 --> 18:22:59,919
reads these users from the database and it should be

384
18:22:59,919 --> 18:23:04,475
able to pass this to our database user class and the database user class should

385
18:23:04,475 --> 18:23:09,600
create an instance of itself depending on the values inside this map

386
18:23:09,600 --> 18:23:15,115
all right so let's go ahead and create a constructor we call it database user

387
18:23:15,115 --> 18:23:20,080
and then we say front row and then we say we get a map of a string

388
18:23:20,080 --> 18:23:25,436
and an optional object in here and then let's just call it map okay

389
18:23:25,436 --> 18:23:29,115
so what we're going to do in here is we're going to create the shorthand for

390
18:23:29,115 --> 18:23:33,919
creating and constructing our object and we'll say the id is equal to inside this

391
18:23:33,919 --> 18:23:38,555
map there needs to be some sort of a column called an id column so instead of

392
18:23:38,555 --> 18:23:42,796
hard coding that in here like this let's go and define a constant here and just

393
18:23:42,796 --> 18:23:47,679
call it id column and let's just say that this is equal to id and in here

394
18:23:47,679 --> 18:23:52,156
we're just going to say id is equal to ib column just like that all right

395
18:23:52,156 --> 18:23:59,115
and then what we're going to say is we also need the email an email is equal to

396
18:23:59,115 --> 18:24:02,720
map and remember we have the email i'm going

397
18:24:02,720 --> 18:24:06,320
to open the user in here

398
18:24:06,320 --> 18:24:11,360
modify table

399
18:24:11,360 --> 18:24:17,039
and let's go and have a look at this email which is text right there okay

400
18:24:17,039 --> 18:24:20,320
so the table that column basically is

401
18:24:20,320 --> 18:24:24,720
called email so let's go and go ahead and create const i'm going to make this

402
18:24:24,720 --> 18:24:28,156
a single single code as well because that's like the preferred way of doing

403
18:24:28,156 --> 18:24:32,720
it and let's call it email column and i'm going to assign this to

404
18:24:32,720 --> 18:24:36,156
full email and in here i'm just going to say email column

405
18:24:36,156 --> 18:24:41,039
as a string and this should be as inked so

406
18:24:41,039 --> 18:24:43,679
this was i mean it looks complicated but it

407
18:24:43,679 --> 18:24:48,555
really isn't so and you can see it's a constant so we could also actually tag

408
18:24:48,555 --> 18:24:54,244
this as immutable and we need to import foundation in order to be able

409
18:24:54,244 --> 18:24:57,115
to do that okay

410
18:24:57,115 --> 18:25:01,516
now that we have our database user we need to also implement a few more

411
18:25:01,516 --> 18:25:05,360
functionalities for this class before we're actually done

412
18:25:05,360 --> 18:25:09,039
with it so the three things that we need to do

413
18:25:09,039 --> 18:25:13,679
for it is first to create like a string descriptor for this class so that if

414
18:25:13,679 --> 18:25:17,360
we're printing out this user to the debug console

415
18:25:17,360 --> 18:25:20,156
otherwise i mean before i say otherwise if we're

416
18:25:20,156 --> 18:25:25,279
printing out an instance of the database user to the debug console so we're

417
18:25:25,279 --> 18:25:29,835
looking at the various users that are inside our database

418
18:25:29,835 --> 18:25:34,244
if we do not implement two string on our class it's literally just gonna say

419
18:25:34,244 --> 18:25:39,039
instance of database user in the console and that's not so useful so it's my it's

420
18:25:39,039 --> 18:25:42,876
my um habit to if i'm planning to print out

421
18:25:42,876 --> 18:25:46,960
these things to the console it's my habit to go and implement two strings so

422
18:25:46,960 --> 18:25:51,835
let's just in here say to string and it gives us the overwrite and what

423
18:25:51,835 --> 18:25:55,919
we're going to do in here is just we're going to say a person

424
18:25:55,919 --> 18:26:00,639
and person id is equal to dollar id

425
18:26:00,639 --> 18:26:05,679
and email is equal to dollar email okay so that's for your to string

426
18:26:05,679 --> 18:26:10,720
then what we need to do is also implement some sort of equality

427
18:26:10,720 --> 18:26:15,115
behavior for our class you see we want to be able to see if two different

428
18:26:15,115 --> 18:26:18,720
peoples that we've retrieved from the database are equal to each other or not

429
18:26:18,720 --> 18:26:24,876
so if if i say if person x is equal to person y then like read the person wise

430
18:26:24,876 --> 18:26:29,835
notes such as something like that so let's go and implement equality for our

431
18:26:29,835 --> 18:26:33,835
class and the way to do that is you overwrite

432
18:26:33,835 --> 18:26:39,516
a boolean operator and it's called bool operator equal equal

433
18:26:39,516 --> 18:26:45,115
and in here you would have a covariant which we haven't talked about yet and i

434
18:26:45,115 --> 18:26:49,115
will talk talk to you right now about it so

435
18:26:49,115 --> 18:26:53,436
what covariance is is a keyword in dart that not many people know about but it

436
18:26:53,436 --> 18:26:58,080
allows you to change the behavior of your input parameters so that they do

437
18:26:58,080 --> 18:27:03,436
not necessarily conform to the signature of that parameter in the

438
18:27:03,436 --> 18:27:07,679
super class so remember we're doing overwrite here meaning that there this

439
18:27:07,679 --> 18:27:12,555
functionality this operator is already defined at the object level so let's go

440
18:27:12,555 --> 18:27:16,960
to object just type object somewhere for instance

441
18:27:16,960 --> 18:27:20,720
void hello and then say object and then command

442
18:27:20,720 --> 18:27:25,516
click on it just so you can go there and search for operator

443
18:27:25,516 --> 18:27:29,516
equal equal and you'll see in here that it says external operator equally and

444
18:27:29,516 --> 18:27:35,436
the parameter should be of type object now we don't want to do that we want our

445
18:27:35,436 --> 18:27:40,555
classes to be compared to other classes of the same type so if you don't

446
18:27:40,555 --> 18:27:43,835
put covariant in here you'll get an error from the

447
18:27:43,835 --> 18:27:47,115
analyzer and you'll soon see that actually we're going to remove that soon

448
18:27:47,115 --> 18:27:49,195
so in here we're saying that we're going to

449
18:27:49,195 --> 18:27:53,360
compare our class with equal equal and instance of our class with equal equal

450
18:27:53,360 --> 18:27:57,835
and we're going to compare with another user of the same class okay and then

451
18:27:57,835 --> 18:28:01,679
here we're just going to say our id should be equal to the other id that's

452
18:28:01,679 --> 18:28:06,320
our equality now let's go ahead then and remove this

453
18:28:06,320 --> 18:28:10,156
covariant as i promised you and now you'll see you'll get an error

454
18:28:10,156 --> 18:28:15,115
saying that oh wait a minute according to object equal equals should compare

455
18:28:15,115 --> 18:28:19,755
the current object with another object but using covariant you're telling dart

456
18:28:19,755 --> 18:28:24,000
that hey i'm not comparable with other objects of any other class i'll only

457
18:28:24,000 --> 18:28:28,475
comparable with database user instances so make that happen all right

458
18:28:28,475 --> 18:28:31,115
so then after you implement equal you have

459
18:28:31,115 --> 18:28:34,320
to also implement hashcode as is suggested by the analyzer so i'm going

460
18:28:34,320 --> 18:28:38,244
to get help from the dart from visual studio code and i'm going to

461
18:28:38,244 --> 18:28:42,960
say create method hashcode and in the overwriting of hashcode i'm

462
18:28:42,960 --> 18:28:49,195
just going to return my id's hashcode okay so this basically the id is

463
18:28:49,195 --> 18:28:53,919
becoming the primary key of this class using which it will hash itself so it

464
18:28:53,919 --> 18:28:59,115
can be placed inside maps or hash nodes if you're

465
18:28:59,115 --> 18:29:04,876
if you're a ros developer or a dictionary if you're a swift developer

466
18:29:04,876 --> 18:29:08,876
so uh that's hashing okay so it feels like

467
18:29:08,876 --> 18:29:16,876
we're actually done now with this um with the with our database user so

468
18:29:16,876 --> 18:29:20,639
and that was quite a bit of code but we managed that

469
18:29:20,639 --> 18:29:23,516
all right now that we've done the database user we need to do something

470
18:29:23,516 --> 18:29:28,960
similar but this time we need to do it for our nodes so we have a database user

471
18:29:28,960 --> 18:29:32,876
now we have to create something called a database node okay note

472
18:29:32,876 --> 18:29:36,555
not node and i'm going to do that under the

473
18:29:36,555 --> 18:29:41,279
database user just so that we can have closer access to these constants all

474
18:29:41,279 --> 18:29:43,835
right so i suggest you do the same thing so

475
18:29:43,835 --> 18:29:47,919
let's just say we create a class and we call it database note

476
18:29:47,919 --> 18:29:52,000
and remember from our database schema that a note so if i go in here and say

477
18:29:52,000 --> 18:29:58,000
right clicks right click and modify table then we had id user id text and a

478
18:29:58,000 --> 18:30:02,080
field call is synced with cloud all right so let's go ahead and do that id

479
18:30:02,080 --> 18:30:07,516
is integer user ids integer text is text or string as ins is synced with cloud

480
18:30:07,516 --> 18:30:09,835
it's just an integer in here but we're gonna

481
18:30:09,835 --> 18:30:14,320
represent it as a boolean all right so keep those four fields in mind so

482
18:30:14,320 --> 18:30:19,436
let's go ahead and say final id and mint id

483
18:30:19,436 --> 18:30:23,919
and we have a final int in our database we call the user underscore id because

484
18:30:23,919 --> 18:30:28,796
that's a convention in sqlite or sql generally that you don't put you

485
18:30:28,796 --> 18:30:32,720
like you don't write your fields with user uh

486
18:30:32,720 --> 18:30:36,639
id usually you don't type like this the way we type with camel case in dart in

487
18:30:36,639 --> 18:30:40,080
other languages we just say user everything's under everything is

488
18:30:40,080 --> 18:30:43,516
lowercase and different words are separated from each other with

489
18:30:43,516 --> 18:30:47,279
underscore but that's not the case in dart and other languages instead we say

490
18:30:47,279 --> 18:30:51,436
user user id like this with panel case all

491
18:30:51,436 --> 18:30:54,876
right and we're also going to create let me

492
18:30:54,876 --> 18:30:59,360
just move this a little bit there and we're also going to create um

493
18:30:59,360 --> 18:31:04,244
the string for our text and

494
18:31:04,244 --> 18:31:09,436
last we're going to say is synced with cloud something like that all right and

495
18:31:09,436 --> 18:31:13,279
again remember we're not going to use this input cloud it's just for you to

496
18:31:13,279 --> 18:31:16,399
understand how we create different fields in the database

497
18:31:16,399 --> 18:31:20,796
and yeah it's just it's just something that you future you guard yourself

498
18:31:20,796 --> 18:31:25,360
against future changes in your database schema so by doing this you're allowing

499
18:31:25,360 --> 18:31:29,679
yourself to play with this field so that you know every note that is locally

500
18:31:29,679 --> 18:31:33,600
created in the local database is not by default sync with the cloud all right

501
18:31:33,600 --> 18:31:36,720
i want to get help from visual studio code to complete the constructor for

502
18:31:36,720 --> 18:31:41,919
this and i'm going to go and do all of these fields as required so i'm

503
18:31:41,919 --> 18:31:46,399
going to say required and i'm going to copy that paste it right there paste it

504
18:31:46,399 --> 18:31:51,039
right there and there and then i'm going to put a comma at the end and command s

505
18:31:51,039 --> 18:31:56,720
on mac or control s in windows and linux to save this and get dart formatter to

506
18:31:56,720 --> 18:32:00,639
format this file for me all right so that's the initializer

507
18:32:00,639 --> 18:32:04,320
and we kind of also need to do the same thing that we did here for our database

508
18:32:04,320 --> 18:32:09,195
user and that we need to instantiate it from a row so let me copy this code the

509
18:32:09,195 --> 18:32:12,000
way it is right there and i'm going to bring it into our

510
18:32:12,000 --> 18:32:16,000
database note i'm going to paste it right there and instead i'm going to say

511
18:32:16,000 --> 18:32:21,919
this from row initializer creates a database note

512
18:32:21,919 --> 18:32:26,639
in our database note we have an id but we don't have email so in here we're

513
18:32:26,639 --> 18:32:31,436
just going to say user id is map then we need a new column which

514
18:32:31,436 --> 18:32:36,475
is called user id column okay so let me just see my notes how i created it

515
18:32:36,475 --> 18:32:40,399
yes i can see it's called just user id call so go ahead and create a new

516
18:32:40,399 --> 18:32:43,919
constant in here and call it

517
18:32:43,919 --> 18:32:48,796
user id column which is if you remember from our schema it was called user

518
18:32:48,796 --> 18:32:52,796
underscore id so user id

519
18:32:52,796 --> 18:32:56,080
okay and here we say user id is equal to map

520
18:32:56,080 --> 18:33:00,244
user id column as a string and it's complaining right

521
18:33:00,244 --> 18:33:03,436
now because we have two more fields to initialize but we haven't really read

522
18:33:03,436 --> 18:33:07,600
their values from the map so text and is synced with cloud so for text we're just

523
18:33:07,600 --> 18:33:11,755
going to say text is equal to map and let's go create a new

524
18:33:11,755 --> 18:33:16,960
consonant in here we say text column and that's equal to text so it's just

525
18:33:16,960 --> 18:33:20,876
the name of the field or the column here you see

526
18:33:20,876 --> 18:33:24,320
so let's go ahead and say that's text and in here we say text

527
18:33:24,320 --> 18:33:27,195
column

528
18:33:27,195 --> 18:33:32,796
and we say add string and i believe that's how we call it yeah

529
18:33:32,796 --> 18:33:36,399
and we'll be calling a string can be initialized oh sorry about this the user

530
18:33:36,399 --> 18:33:40,320
id can't be a string it should be added in so let's just say it's an int and

531
18:33:40,320 --> 18:33:43,835
last but not least is synced with cloud so we're to say

532
18:33:43,835 --> 18:33:50,720
async with cloud actually is read from from our database as an integer remember

533
18:33:50,720 --> 18:33:54,080
is synced with cloud as an integer so we're going to say

534
18:33:54,080 --> 18:33:57,679
we're going to first define a column for it is synced

535
18:33:57,679 --> 18:34:00,876
with cloud column

536
18:34:00,876 --> 18:34:04,796
and we're going to call it async with cloud and

537
18:34:04,796 --> 18:34:08,639
i mean i'm saying uh we're going to call it but actually we've already called it

538
18:34:08,639 --> 18:34:13,115
we called it is synced with cloud so just need to copy and paste that in here

539
18:34:13,115 --> 18:34:17,835
you see okay and then we're going to say is

540
18:34:17,835 --> 18:34:24,156
synced with cloud as equal to now you see we don't have this uh

541
18:34:24,156 --> 18:34:27,195
data we don't have this field as a boolean in the database we have it as an

542
18:34:27,195 --> 18:34:31,279
integer so we have to read it as an integer so we're going to say in the map

543
18:34:31,279 --> 18:34:37,919
there's a column called async with cloud column and it's an integer okay

544
18:34:37,919 --> 18:34:42,244
if that is equal to one then return true

545
18:34:42,244 --> 18:34:47,516
otherwise uh is equal to one true otherwise false so

546
18:34:47,516 --> 18:34:51,039
you see what happened here we read the column as an integer

547
18:34:51,039 --> 18:34:55,919
and oh if it's equal to one then this guy is equal to true otherwise this guy

548
18:34:55,919 --> 18:35:00,796
is equal to false okay now that we've done the initialization

549
18:35:00,796 --> 18:35:05,755
of our database notes from the from the row we

550
18:35:05,755 --> 18:35:10,960
need to go ahead and we need to create the tostring as well

551
18:35:10,960 --> 18:35:18,399
for our database note okay so let's go and overwrite to string

552
18:35:18,399 --> 18:35:21,600
like this and we're just going to say this is a

553
18:35:21,600 --> 18:35:24,555
simple note we're going to say

554
18:35:24,555 --> 18:35:29,919
is equal to note and its id is equal to dollar id is text

555
18:35:29,919 --> 18:35:33,755
is equal to or just its user id is equal to dollar

556
18:35:33,755 --> 18:35:37,679
user id which is a field that we have

557
18:35:37,679 --> 18:35:41,835
and then we are not going to print its entire scene is an entire text instead

558
18:35:41,835 --> 18:35:46,475
we're going to say is synced with cloud is

559
18:35:46,475 --> 18:35:52,555
other is synced with cloud just like that all right

560
18:35:52,555 --> 18:35:57,679
all right so yeah i mean optionally you you may also add text if you want to

561
18:35:57,679 --> 18:36:01,195
it's kind of up to you but the problem is that the text of a note

562
18:36:01,195 --> 18:36:05,039
could be so long that it actually gets in the way of you getting information of

563
18:36:05,039 --> 18:36:10,080
your class instance such as its id user id and a single class so maybe if you

564
18:36:10,080 --> 18:36:14,796
want the text to be there just add it at the end so it basically doesn't disrupt

565
18:36:14,796 --> 18:36:19,755
the rest of the fields that you may actually have interest in reading okay

566
18:36:19,755 --> 18:36:23,039
so we did the implementation for

567
18:36:23,039 --> 18:36:27,279
from uh tostring right now but we haven't done the equality so let's go

568
18:36:27,279 --> 18:36:31,516
and overwrite the equality as well and the hash node hash code sorry

569
18:36:31,516 --> 18:36:36,399
i'm going to copy that code from our database user and bring it into the

570
18:36:36,399 --> 18:36:40,876
database node and i'm going to then paste it right here so you can see it as

571
18:36:40,876 --> 18:36:43,919
well we're in the equality we're saying that

572
18:36:43,919 --> 18:36:49,115
we're comparable with a database note as long as our id is equal to the other id

573
18:36:49,115 --> 18:36:52,244
then we're good to go for the hash code then we're going to

574
18:36:52,244 --> 18:36:58,244
get our id's hash code all right just like we did for the other class

575
18:36:58,244 --> 18:37:03,600
wow that was a lot of work to do okay now we've created the database note

576
18:37:03,600 --> 18:37:08,639
as well as the caption indicates um so what we need to do now is just to

577
18:37:08,639 --> 18:37:14,720
make sure we have all our constants in place before we carry on now remember

578
18:37:14,720 --> 18:37:18,475
right after doing these classes we're going to go ahead and create

579
18:37:18,475 --> 18:37:24,244
our um the actual note service that talks with our database all right so

580
18:37:24,244 --> 18:37:28,876
before we do that let's create all the necessary constants such as

581
18:37:28,876 --> 18:37:33,516
the file under which our database is going to be saved so let's just call it

582
18:37:33,516 --> 18:37:38,720
bb name and we're just going to call it notes.db all right remember this is like

583
18:37:38,720 --> 18:37:43,279
the file name okay now we're going to create and you can see in here in our um

584
18:37:43,279 --> 18:37:48,244
file here in as db browser for sqlite we call this file testing.db and in our

585
18:37:48,244 --> 18:37:52,000
case we're just going to call it nodesdb and we're going to store it in documents

586
18:37:52,000 --> 18:37:57,436
folder inside that application okay and then we have two tables and notes

587
18:37:57,436 --> 18:38:01,835
table and a user table so let's go ahead and create them notes table is

588
18:38:01,835 --> 18:38:04,244
um votes

589
18:38:04,244 --> 18:38:08,876
and const user table means user and these are like

590
18:38:08,876 --> 18:38:13,600
table names as we define them here node and user okay

591
18:38:13,600 --> 18:38:17,835
so those are those and what else do we need um i think i think that's pretty

592
18:38:17,835 --> 18:38:21,436
much it to be honest with you i think these are all the constants that are

593
18:38:21,436 --> 18:38:26,080
needed in order for us to be able to create our notes service

594
18:38:26,080 --> 18:38:31,039
all right let's go ahead now and start with our note server so i'm gonna clear

595
18:38:31,039 --> 18:38:35,360
this go to the top of this file and then i'm gonna make some empty space in here

596
18:38:35,360 --> 18:38:40,240
and actually create our notes service so let's go ahead and create a circuit

597
18:38:40,240 --> 18:38:44,399
class here and call it node service it's very exciting this is the beginning

598
18:38:44,399 --> 18:38:48,551
of us creating a cross service that works with our database which we're soon

599
18:38:48,551 --> 18:38:52,240
going to create actually okay as the cache indicates we need a

600
18:38:52,240 --> 18:38:57,600
function an async function that opens the database you see opening a database

601
18:38:57,600 --> 18:39:02,399
is not a functionality that you can just say open now it it will happen

602
18:39:02,399 --> 18:39:07,191
asynchronously because we may need to for instance grab the current um

603
18:39:07,191 --> 18:39:12,080
current uh folder do documents folder and then append or

604
18:39:12,080 --> 18:39:16,320
join that documents folder with our database name which we define here

605
18:39:16,320 --> 18:39:18,551
as a console so it's a lot of asynchronous stuff that we're going to

606
18:39:18,551 --> 18:39:22,080
happen in there well not a lot but a few at least

607
18:39:22,080 --> 18:39:25,512
and that is the reason this open function is going to be asynchronous

608
18:39:25,512 --> 18:39:28,240
okay so as i caption any case let's go ahead

609
18:39:28,240 --> 18:39:32,399
and create a future void and call it

610
18:39:32,399 --> 18:39:37,119
just open and we call it async like that

611
18:39:37,119 --> 18:39:41,440
now this open function is going to keep hold off

612
18:39:41,440 --> 18:39:45,191
i mean after it has opened the database is actually gonna

613
18:39:45,191 --> 18:39:49,279
store it somewhere in our node service so it's going to say hey i've opened the

614
18:39:49,279 --> 18:39:52,551
database here is the object so that other

615
18:39:52,551 --> 18:39:55,360
functions in the future such as the functions are going to let us

616
18:39:55,360 --> 18:39:58,960
read users from the database or you read

617
18:39:58,960 --> 18:40:02,800
notes from the database those functions then they're going to say ah oh here's

618
18:40:02,800 --> 18:40:07,039
the database instance i know how to grab values out of it okay so

619
18:40:07,039 --> 18:40:11,759
what we're going to do is to say we have a database

620
18:40:11,759 --> 18:40:16,639
as you can see it is brought by our sqflite

621
18:40:16,639 --> 18:40:19,600
library and we're just going to call it db all

622
18:40:19,600 --> 18:40:23,360
right so to begin with is null and we're going to

623
18:40:23,360 --> 18:40:26,639
assign to it

624
18:40:26,639 --> 18:40:30,479
all right um

625
18:40:30,479 --> 18:40:36,800
so what should we do now um let's go ahead then and start by doing a

626
18:40:36,800 --> 18:40:41,191
test and see if this database is already opened you see if we have an instance of

627
18:40:41,191 --> 18:40:44,639
this database then we can kind of like assume that this database file has

628
18:40:44,639 --> 18:40:48,240
already been opened and we don't have to open it anymore so let's just say if

629
18:40:48,240 --> 18:40:51,919
the db is not null

630
18:40:51,919 --> 18:40:54,240
and just throw

631
18:40:54,240 --> 18:40:59,831
uh a new exception and we're gonna just call it a database already open

632
18:40:59,831 --> 18:41:04,240
exception so let's go and define an exception

633
18:41:04,240 --> 18:41:07,039
uh here

634
18:41:07,039 --> 18:41:12,639
let me see if i can copy and paste that from my notes

635
18:41:12,639 --> 18:41:15,512
but you see this is just an exception that's a database already open exception

636
18:41:15,512 --> 18:41:20,080
all right so in here we're just going to say database already open exception all

637
18:41:20,080 --> 18:41:23,440
right simple if you call the open function

638
18:41:23,440 --> 18:41:27,119
multiple times while the database is already open you're going to get an

639
18:41:27,119 --> 18:41:30,160
exception okay so that kind of makes sense

640
18:41:30,160 --> 18:41:34,160
so let's go ahead and now get the document

641
18:41:34,160 --> 18:41:37,360
directory path and we have to do a try in here

642
18:41:37,360 --> 18:41:42,399
because this can actually throw an exception so let's say find final

643
18:41:42,399 --> 18:41:46,000
docs path is equal to

644
18:41:46,000 --> 18:41:50,960
and you need to say get documents get application documents directory if you

645
18:41:50,960 --> 18:41:54,960
have a look at the signature of this method it says i return a future of

646
18:41:54,960 --> 18:41:59,191
directory so let's go ahead and do that so we need to await on it and that's the

647
18:41:59,191 --> 18:42:02,320
reason our function is async and that's the reason we're awaiting because this

648
18:42:02,320 --> 18:42:06,080
returns the path asynchronously now if you look at

649
18:42:06,080 --> 18:42:10,639
the documentation for this you can see that it can actually throw an exception

650
18:42:10,639 --> 18:42:14,240
called missing platform directory exception if the system is unable to

651
18:42:14,240 --> 18:42:18,160
provide the directory all right if for some reason this the

652
18:42:18,160 --> 18:42:21,440
system isn't able to provide a document directory to

653
18:42:21,440 --> 18:42:25,191
um to us is going to throw this exception and that is exactly why we

654
18:42:25,191 --> 18:42:29,600
have our code inside a try statement here so let's say if that exception is

655
18:42:29,600 --> 18:42:34,639
thrown like this then we're going to throw our own exception so let's define

656
18:42:34,639 --> 18:42:40,720
an exception we call it unable to get documents directory

657
18:42:40,720 --> 18:42:44,800
this so it's just a class unable to get documents directory

658
18:42:44,800 --> 18:42:49,039
exception nothing special about that okay

659
18:42:49,039 --> 18:42:53,831
and then we in here we say throw at

660
18:42:53,831 --> 18:42:56,872
uh the name missing platform oh i see you

661
18:42:56,872 --> 18:43:00,872
see it's it's complaining now and i can see that you couldn't see the codes i

662
18:43:00,872 --> 18:43:04,479
apologize for that it's complaining and saying that i can't find this missing

663
18:43:04,479 --> 18:43:10,000
platform directory exception and that is because this is specified in this um

664
18:43:10,000 --> 18:43:14,160
path provider but for our path provider we just say show get

665
18:43:14,160 --> 18:43:18,000
get application documents directory so all other symbols are hidden from us so

666
18:43:18,000 --> 18:43:21,679
we could just remove that and just import the entire path provider and that

667
18:43:21,679 --> 18:43:26,399
error goes away all right

668
18:43:26,399 --> 18:43:31,440
okay now let's do this now let's say

669
18:43:31,440 --> 18:43:35,600
i apologize let's get the the actual path of our

670
18:43:35,600 --> 18:43:41,119
database so to do that you will say and what are we calling it db path is equal

671
18:43:41,119 --> 18:43:45,831
to join remember we have this function joined here that we imported from path

672
18:43:45,831 --> 18:43:51,759
and we say join the docs path the path and our db name

673
18:43:51,759 --> 18:43:55,512
remember the db name is a constant as a string we define it down here we just

674
18:43:55,512 --> 18:43:59,440
call the notes db that is now going to be joined with the

675
18:43:59,440 --> 18:44:04,240
actual path of our documents folder all right

676
18:44:04,240 --> 18:44:07,512
and what we're going to do is we're going to say we now want to

677
18:44:07,512 --> 18:44:11,919
open the database with a function called open database which comes from

678
18:44:11,919 --> 18:44:16,240
skflight and the path is dbpath and remember this

679
18:44:16,240 --> 18:44:22,479
open database i believe is the future of our database you see so we await on it

680
18:44:22,479 --> 18:44:25,039
all right and

681
18:44:25,039 --> 18:44:29,831
then we assign that to our uh local database instance that's it

682
18:44:29,831 --> 18:44:34,320
so that was basically opening the database so we've now opened

683
18:44:34,320 --> 18:44:37,279
it but remember

684
18:44:37,279 --> 18:44:44,320
all we've been working on right now is inside this db browser for sqlite

685
18:44:44,320 --> 18:44:47,679
this thing this program here is managing its

686
18:44:47,679 --> 18:44:52,160
own database file this database file is not going to exist in your flutter

687
18:44:52,160 --> 18:44:56,160
application we've just played around i just showed you how to create a sqlite

688
18:44:56,160 --> 18:45:01,039
database how to create different tables what fields are what primary key is so

689
18:45:01,039 --> 18:45:05,191
you need to kind of like forget about this this application and where it

690
18:45:05,191 --> 18:45:09,039
stores this data you need to now focus on how is your

691
18:45:09,039 --> 18:45:12,399
flutter application going to be able to create those tables how is your flutter

692
18:45:12,399 --> 18:45:16,551
application going to be re reading data from the tables or deleting data from

693
18:45:16,551 --> 18:45:19,679
the table so if you think about it if you've

694
18:45:19,679 --> 18:45:24,800
completely forgotten about the db browser for sqlite then you could

695
18:45:24,800 --> 18:45:28,479
just say at this point in time you see open database also can create the

696
18:45:28,479 --> 18:45:33,279
database for you if it doesn't exist we can look at the documentation for it

697
18:45:33,279 --> 18:45:37,279
here uh oh my god opens the database at a given path by

698
18:45:37,279 --> 18:45:41,360
the system uh on is the first let's see encrypt is

699
18:45:41,360 --> 18:45:45,191
called if the database did not exist prior to calling opendatabase okay so it

700
18:45:45,191 --> 18:45:48,872
can create the database for you which is what it's gonna do but those tables are

701
18:45:48,872 --> 18:45:52,639
not gonna exist and we have to have a way of creating those tables if they

702
18:45:52,639 --> 18:45:57,279
don't exist upon us opening the database okay and that's what we're gonna do here

703
18:45:57,279 --> 18:46:04,960
so let's go ahead and actually grab the code for creating the user table so i'm

704
18:46:04,960 --> 18:46:11,191
just going to say const create user table is equal to and this is now

705
18:46:11,191 --> 18:46:14,240
i'm going to actually use the syntax that we haven't used before and that's

706
18:46:14,240 --> 18:46:18,320
triple quotation marks okay and then triple quotation marks on the

707
18:46:18,320 --> 18:46:23,119
next line and then a semicolon now what this does is that it allows you to place

708
18:46:23,119 --> 18:46:27,119
pretty much anything inside this string without you having to escape that string

709
18:46:27,119 --> 18:46:31,831
because triple quotation marks are very unique so if you paste any program other

710
18:46:31,831 --> 18:46:34,960
programming languages code in here chances are that programming languages

711
18:46:34,960 --> 18:46:40,479
code is not going to include three three quotation marks so the purpose of

712
18:46:40,479 --> 18:46:45,279
this is that now you can go ahead in your sqlite uh db browser for sqlite and

713
18:46:45,279 --> 18:46:51,279
grab those users um if i go here database structure user modify table and

714
18:46:51,279 --> 18:46:55,279
you can literally now grab this code that was created by a db browser for

715
18:46:55,279 --> 18:47:02,872
sqlite and paste it in here you see so there we go now you have a beautiful

716
18:47:02,872 --> 18:47:06,720
database creation code in here sorry table creation code that says create

717
18:47:06,720 --> 18:47:11,919
table user blah blah id integer not null and however we need to take care of

718
18:47:11,919 --> 18:47:17,831
something in here and we just say if not exists i believe

719
18:47:17,831 --> 18:47:22,080
and we have to put it before user as well so that's the only thing we're

720
18:47:22,080 --> 18:47:26,240
adding here we're basically saying create a table call user if it doesn't

721
18:47:26,240 --> 18:47:29,440
exist because you see we don't want to get an error

722
18:47:29,440 --> 18:47:32,800
because if you create a table that already exists in the database then

723
18:47:32,800 --> 18:47:35,512
skflight is going to throw an error saying that this table already exists

724
18:47:35,512 --> 18:47:42,160
okay so that's why we need if not exists and then what we need to do is to tell

725
18:47:42,160 --> 18:47:46,240
our database this database that we created up here to execute that command

726
18:47:46,240 --> 18:47:49,440
so we're just going to say execute and you see it says give me a sequel to

727
18:47:49,440 --> 18:47:52,720
execute and i'm going to give you a future void and we say okay execute

728
18:47:52,720 --> 18:47:59,679
create user table and we have wait on it

729
18:47:59,679 --> 18:48:04,960
some comment in here we just say create user table

730
18:48:04,960 --> 18:48:10,872
and then in here for the um after we've executed the create user

731
18:48:10,872 --> 18:48:17,191
table we also have to then take care of uh the creation of our note table

732
18:48:17,191 --> 18:48:20,639
so i'm just going to do the same thing that we did up here and just say create

733
18:48:20,639 --> 18:48:23,440
note table

734
18:48:23,440 --> 18:48:28,479
equal to as single quotes triple single quote semicolon let's go to db

735
18:48:28,479 --> 18:48:34,240
browser for sqlite and grab this node here and say modify table and grab the

736
18:48:34,240 --> 18:48:38,080
code that was generated for you and just paste it in here do some formatting so

737
18:48:38,080 --> 18:48:42,399
it becomes a little bit more bearable to read and have a look at and we do the

738
18:48:42,399 --> 18:48:47,600
same thing that we did up there we say if not exists like that all right

739
18:48:47,600 --> 18:48:50,479
so i think i think to be honest with you

740
18:48:50,479 --> 18:48:53,600
we're good to go there i don't think we need to do anything special in there we

741
18:48:53,600 --> 18:48:57,679
also have to execute that command so i'm just going to grab the code from there

742
18:48:57,679 --> 18:49:02,399
paste it right here and like that and i'm going to say

743
18:49:02,399 --> 18:49:07,679
create note table so that's going to do the creation of the note table as

744
18:49:07,679 --> 18:49:11,600
well well done that was it that was a big

745
18:49:11,600 --> 18:49:14,479
function i mean by the standards of what we've

746
18:49:14,479 --> 18:49:17,512
done so far that was quite a big function okay but generally this is not

747
18:49:17,512 --> 18:49:21,191
considered such a big function i remember now you have actually constants

748
18:49:21,191 --> 18:49:27,831
in here you could you could i mean if it's me deciding i would bring this

749
18:49:27,831 --> 18:49:32,639
constant somewhere else not inside this function we could literally go ahead i

750
18:49:32,639 --> 18:49:36,080
mean i hadn't planned for this but let's go ahead and grab this constant from

751
18:49:36,080 --> 18:49:39,191
here and bring it to the end of this file okay where we have all the other

752
18:49:39,191 --> 18:49:42,720
constants like this and let's go and grab the other constant

753
18:49:42,720 --> 18:49:44,639
from here boo

754
18:49:44,639 --> 18:49:49,831
and bring it down as well so we put it at the end of our file right there

755
18:49:49,831 --> 18:49:52,080
okay as i said i hadn't planned for this but

756
18:49:52,080 --> 18:49:55,831
i just think it makes sense because now our function is a lot cleaner to have a

757
18:49:55,831 --> 18:49:58,551
look at here we have a comment for create the user table let's create a

758
18:49:58,551 --> 18:50:03,440
comment as well here we say that creates notes table

759
18:50:03,440 --> 18:50:08,800
and remove those empty spaces and just save your file perfect

760
18:50:08,800 --> 18:50:14,551
now we have the open function let's go ahead and have a look at how we

761
18:50:14,551 --> 18:50:19,600
can do closing of our database right let's have a look at

762
18:50:19,600 --> 18:50:24,000
my notes in here okay let's have a look at our

763
18:50:24,000 --> 18:50:28,160
closing code so i'm going to fold the open function in here so we don't see it

764
18:50:28,160 --> 18:50:32,320
anymore and let's go ahead and create as you can see in the caption we have to

765
18:50:32,320 --> 18:50:39,360
say future void close um okay and it's asynchronous so

766
18:50:39,360 --> 18:50:43,759
what we need to do then is we shouldn't allow any person to close the database

767
18:50:43,759 --> 18:50:47,919
if the database is not open so let's go ahead and define an exception for that

768
18:50:47,919 --> 18:50:52,720
and we're going to call the database is not open okay so i'm going to copy that

769
18:50:52,720 --> 18:50:56,479
exception so i don't have to type it manually manually because by this point

770
18:50:56,479 --> 18:51:00,399
you know how to create exceptions so it's nothing extraordinary for you to

771
18:51:00,399 --> 18:51:02,960
learn database is not open that's a new

772
18:51:02,960 --> 18:51:06,160
exception okay so what we're going to do is we're going

773
18:51:06,160 --> 18:51:10,000
to say we have our database final db is equal

774
18:51:10,000 --> 18:51:15,831
to our local db up there and we say if db is null

775
18:51:15,831 --> 18:51:22,960
and then we throw database not open oops database

776
18:51:22,960 --> 18:51:28,720
is not open else we're gonna ask skflight to close

777
18:51:28,720 --> 18:51:33,119
that database for us and the way to do that is just to say db.close and you can

778
18:51:33,119 --> 18:51:37,119
see it's a future of void so that's why we're waiting on it all right

779
18:51:37,119 --> 18:51:40,639
and then at that point we have to also reset this local database which is

780
18:51:40,639 --> 18:51:45,512
called underscore data underscore db so we say db is equal to no

781
18:51:45,512 --> 18:51:52,479
right so easy peasy close went very fast actually

782
18:51:52,479 --> 18:51:55,039
all right

783
18:51:55,039 --> 18:51:58,960
now what we need you see as we're now as we have to open and close now we're

784
18:51:58,960 --> 18:52:02,160
going to start working with data in the database but

785
18:52:02,160 --> 18:52:06,240
in order for you to get like your um

786
18:52:06,240 --> 18:52:11,919
database so that it can for instance actually grab

787
18:52:11,919 --> 18:52:15,279
like every function that tries to read something from the database it has to

788
18:52:15,279 --> 18:52:18,399
have some code in order to make sure that the database is open otherwise it

789
18:52:18,399 --> 18:52:21,919
has to throw an error so we're gonna have like five six of these functions

790
18:52:21,919 --> 18:52:25,360
and each of which is gonna check the database and then do the same thing is

791
18:52:25,360 --> 18:52:28,960
the database open yes if it's not open throw this error we could put that

792
18:52:28,960 --> 18:52:33,360
particular code inside on our function that we are going to call getdatabase or

793
18:52:33,360 --> 18:52:38,240
throw okay so let's go ahead in here and just say this function returns a

794
18:52:38,240 --> 18:52:43,119
database it database or throw

795
18:52:43,119 --> 18:52:45,600
and prefix it without underscore saying that

796
18:52:45,600 --> 18:52:50,479
this is a private function and then we're going to say final db is db

797
18:52:50,479 --> 18:52:54,399
if db is null

798
18:52:54,399 --> 18:52:59,600
and we say throw um database is not open

799
18:52:59,600 --> 18:53:04,080
else we return the db okay so this is a

800
18:53:04,080 --> 18:53:08,720
private function that our reading and writing internal functions in this class

801
18:53:08,720 --> 18:53:12,160
are going to use in order to get the current database so that they avoid

802
18:53:12,160 --> 18:53:16,399
doing the same if statement everywhere okay

803
18:53:16,399 --> 18:53:21,360
all right now we're going to start with actual code so

804
18:53:21,360 --> 18:53:24,240
to read and write from the database in this case we're gonna start with a

805
18:53:24,240 --> 18:53:29,440
function called delete user that allows us to provide as you can see an email

806
18:53:29,440 --> 18:53:32,320
address and using that email address then we're

807
18:53:32,320 --> 18:53:36,160
gonna delete that user from our database so you you will learn how to manipulate

808
18:53:36,160 --> 18:53:40,960
data from our or inside our database okay

809
18:53:40,960 --> 18:53:44,399
so let's go ahead and do that function signature as it's indicated here i'm

810
18:53:44,399 --> 18:53:47,512
just going to say future void delete user

811
18:53:47,512 --> 18:53:54,479
and required uh string email and make this function asynchronous okay

812
18:53:54,479 --> 18:53:57,440
then what we're gonna do is just to get our

813
18:53:57,440 --> 18:54:01,440
database with this absolutely beautiful get database or throw function that we

814
18:54:01,440 --> 18:54:06,160
created here so i'm just going to say final vb is get database or throw so

815
18:54:06,160 --> 18:54:10,160
this in turn is going to throw an exception called database it's not open

816
18:54:10,160 --> 18:54:12,720
if the database is not open so we don't have to

817
18:54:12,720 --> 18:54:17,679
manually do that okay so in order to delete something

818
18:54:17,679 --> 18:54:22,639
from sql flight uh or in this case sqlite that is managed by sqflight we

819
18:54:22,639 --> 18:54:28,872
can say db dot d b dot delete and as you can see it

820
18:54:28,872 --> 18:54:33,039
returns a future of the number of rows that were deleted and then it says okay

821
18:54:33,039 --> 18:54:37,759
which table and then a where clause and a list of objects to pass to your word

822
18:54:37,759 --> 18:54:42,831
clause so we're going to say the delete from the user table

823
18:54:42,831 --> 18:54:46,800
and uh the word clause is gonna be

824
18:54:46,800 --> 18:54:52,160
email is equal to something and the where arts are in this case are

825
18:54:52,160 --> 18:54:56,960
gonna be email to lowercase okay so i'm gonna put this

826
18:54:56,960 --> 18:55:00,720
semicolon there and a call in here and then we're going to wait on it and we're

827
18:55:00,720 --> 18:55:05,600
going to say final and delete the account is a weight

828
18:55:05,600 --> 18:55:09,039
so in this case i mean as you can see here is what we're basically doing is

829
18:55:09,039 --> 18:55:12,720
just we're doing formatting we're going to say we're going to say delete

830
18:55:12,720 --> 18:55:17,119
something from the user table as long as that something's email is equal to

831
18:55:17,119 --> 18:55:21,679
something and that something is again that email so you're basically saying

832
18:55:21,679 --> 18:55:25,191
delete as many objects as possible in the user

833
18:55:25,191 --> 18:55:29,512
table as long as their email is equal to this and remember we made email unique

834
18:55:29,512 --> 18:55:34,399
so if if we've done our homework right then deleted count is it should either

835
18:55:34,399 --> 18:55:40,000
be zero meaning that no personal account or no user with this email

836
18:55:40,000 --> 18:55:45,600
exists in it into table or it should be one meaning that yeah i could delete uh

837
18:55:45,600 --> 18:55:49,039
without a problem so

838
18:55:49,039 --> 18:55:53,360
we're actually gonna assert that we're gonna say if deleted count

839
18:55:53,360 --> 18:55:55,600
is not one

840
18:55:55,600 --> 18:55:59,279
all right then we're gonna throw an error could not delete the user so i'm

841
18:55:59,279 --> 18:56:04,000
gonna grab that um exception i'm gonna place it right here

842
18:56:04,000 --> 18:56:07,831
so we say if we couldn't delete that user we're just gonna say throw could

843
18:56:07,831 --> 18:56:12,960
not delete user all right

844
18:56:12,960 --> 18:56:18,872
so we couldn't delete that user

845
18:56:18,872 --> 18:56:22,399
um all right so let's go ahead

846
18:56:22,399 --> 18:56:26,872
now that we have done the delete user and and remember you may be asking okay

847
18:56:26,872 --> 18:56:30,080
why are we throwing a user maybe that user doesn't exist and it should just

848
18:56:30,080 --> 18:56:33,831
work fine and of course i mean it is going to work fine if you have

849
18:56:33,831 --> 18:56:37,191
your try and catch statements when you call this function

850
18:56:37,191 --> 18:56:40,639
what we're saying is that the interface of the node service is going to throw an

851
18:56:40,639 --> 18:56:45,119
error through an exception if you call the lead user with a non-existing email

852
18:56:45,119 --> 18:56:49,512
and that's completely fine for a service to do but where you're consuming the

853
18:56:49,512 --> 18:56:53,919
service then you can manage and say oh this delete function is going to throw

854
18:56:53,919 --> 18:56:57,039
an exception by like for instance looking at a documentation looking at

855
18:56:57,039 --> 18:57:01,600
the code then i'm going to handle it where i'm calling it as at the call site

856
18:57:01,600 --> 18:57:06,080
which is called okay so this is completely fine

857
18:57:06,080 --> 18:57:10,080
for a service to do then what we're going to do as the next

858
18:57:10,080 --> 18:57:13,512
point is to create a user and you can see

859
18:57:13,512 --> 18:57:16,960
it's going to be a future of database user so this is beautiful it's going to

860
18:57:16,960 --> 18:57:20,160
actually create a user given an email address and then it's going to return

861
18:57:20,160 --> 18:57:23,919
that database user to us so let's go ahead and do that let's just say

862
18:57:23,919 --> 18:57:27,191
future database user

863
18:57:27,191 --> 18:57:33,919
and we're going to say create user and a required string field of email

864
18:57:33,919 --> 18:57:37,119
and we're going to make it asynchronous all right

865
18:57:37,119 --> 18:57:40,000
so in here what we're going to do is just going to get the database we're

866
18:57:40,000 --> 18:57:44,960
going to say final vb is equal to get db database or throw

867
18:57:44,960 --> 18:57:49,191
and then we're going to say um db.query

868
18:57:49,191 --> 18:57:53,600
um like that because we're going to actually issue a query to the database

869
18:57:53,600 --> 18:57:56,160
okay so as you can see this is a helper to

870
18:57:56,160 --> 18:57:59,759
query table and return items found all optional clauses are unfiltered or

871
18:57:59,759 --> 18:58:03,512
formatted as sql queries okay

872
18:58:03,512 --> 18:58:08,800
so um let's go ahead and in here what we're going to first do the

873
18:58:08,800 --> 18:58:13,119
first thing we're going to encrypt user now we're going to actually check if a

874
18:58:13,119 --> 18:58:17,600
user with a given email already exists okay and that's where why we're doing

875
18:58:17,600 --> 18:58:20,720
query and we're not like inserting something into the database to begin

876
18:58:20,720 --> 18:58:26,551
with we're asking the data to say hey does in the user table

877
18:58:26,551 --> 18:58:31,679
we're looking for and we're acquiring the database for a person or a user

878
18:58:31,679 --> 18:58:36,639
whose email is this and that this thing is actually going to return and let's

879
18:58:36,639 --> 18:58:41,759
have a look at it it's going to return a list of rows that were available in

880
18:58:41,759 --> 18:58:47,191
the database okay and that list is going to be empty if no

881
18:58:47,191 --> 18:58:51,919
no entities matched our query okay so let's just call it final results is

882
18:58:51,919 --> 18:58:57,440
we're querying the user table and we're going to say um

883
18:58:57,440 --> 18:59:00,720
we're looking for just one item

884
18:59:00,720 --> 18:59:05,831
and we have a word equal to we're looking for the email and where

885
18:59:05,831 --> 18:59:09,119
arts are going to be

886
18:59:09,119 --> 18:59:15,600
email to lowercase semicolon at the end and bring it like this

887
18:59:15,600 --> 18:59:21,039
equal to bb and we wait okay

888
18:59:21,039 --> 18:59:25,512
so by us first making a query to the database and

889
18:59:25,512 --> 18:59:30,399
checking whether a user with the same email exists we're basically avoiding

890
18:59:30,399 --> 18:59:34,551
getting an error for the uniqueness of that email later

891
18:59:34,551 --> 18:59:38,080
on at the sql layer

892
18:59:38,080 --> 18:59:43,512
so in this case you can see results if i move my mouse over it and it says that

893
18:59:43,512 --> 18:59:48,479
it is a list of rows and if this list is not empty

894
18:59:48,479 --> 18:59:52,960
it literally means that a user with that co without email address already exists

895
18:59:52,960 --> 18:59:56,240
in the database so let's then say if

896
18:59:56,240 --> 19:00:00,720
results is not empty then we're going to say throw

897
19:00:00,720 --> 19:00:04,872
user already exists uh exception and we don't have that

898
19:00:04,872 --> 19:00:10,160
exception yet so let's go ahead and find that exception for me at least and

899
19:00:10,160 --> 19:00:14,479
i can paste it right here so define this exception use already

900
19:00:14,479 --> 19:00:18,000
exists and let's go ahead and throw that

901
19:00:18,000 --> 19:00:22,320
exception user already exists okay so

902
19:00:22,320 --> 19:00:25,512
that's the our if statement so at that point we've

903
19:00:25,512 --> 19:00:30,639
basically made sure that that user does not exist in the database all right

904
19:00:30,639 --> 19:00:35,600
so what we need to do then is to go and insert that user now that

905
19:00:35,600 --> 19:00:38,399
we've checked that he or she doesn't exist in the database so we have to go

906
19:00:38,399 --> 19:00:42,639
and insert that user so the way we do that is by going and telling our

907
19:00:42,639 --> 19:00:47,831
database we say db insert and you can see it says in which table and then give

908
19:00:47,831 --> 19:00:52,639
me a map of keys and values which is the column name

909
19:00:52,639 --> 19:00:56,800
and the value for that column all right so let's just say we insert into the

910
19:00:56,800 --> 19:01:00,160
user table which is a constant we've defined from

911
19:01:00,160 --> 19:01:03,440
before remember and then the map is going to be

912
19:01:03,440 --> 19:01:09,679
for the uh let's go back to our db browser for sql for note sorry for user

913
19:01:09,679 --> 19:01:13,360
uh oops for user

914
19:01:13,360 --> 19:01:18,160
we have id which is primary key not null and auto increment so we don't have to

915
19:01:18,160 --> 19:01:22,720
insert the id but we need to insert the email so let's go ahead and say we have

916
19:01:22,720 --> 19:01:26,960
the email call is equal to b it's going to be equal to

917
19:01:26,960 --> 19:01:32,800
email to lowercase all right so like that and insert if you can have

918
19:01:32,800 --> 19:01:37,119
a look here it returns a feature of pins and if you read the documentation

919
19:01:37,119 --> 19:01:42,479
uh let's see if if it gives us some documentation here

920
19:01:42,479 --> 19:01:46,320
zero could be returned for some specific conflict algorithm algorithm algorithms

921
19:01:46,320 --> 19:01:50,399
if not inserted so this is going to basically give us that

922
19:01:50,399 --> 19:01:53,440
uh so what it's going to do in this case is

923
19:01:53,440 --> 19:01:57,039
actually going to give us a user id back i wish there was some good documentation

924
19:01:57,039 --> 19:02:01,360
about it oh here you can see it says insert

925
19:02:01,360 --> 19:02:06,080
returns the id so this is very very good this is

926
19:02:06,080 --> 19:02:10,551
actually really cool because remember we said we return a database user and a

927
19:02:10,551 --> 19:02:13,360
database user actually has an id in it so

928
19:02:13,360 --> 19:02:18,240
if this function here did not return the id how else would we get the id then

929
19:02:18,240 --> 19:02:21,831
we'd have to insert and then read that same user in order to get the id but we

930
19:02:21,831 --> 19:02:25,440
don't have to do that so in here then we say final

931
19:02:25,440 --> 19:02:30,551
and we say user id is equal to await on this function functionality

932
19:02:30,551 --> 19:02:37,191
and then we just return a database user up so you actually see the code then we

933
19:02:37,191 --> 19:02:41,679
say user id and the email is email the way it was before

934
19:02:41,679 --> 19:02:46,800
they added a column there fantastic now we've taken care of the

935
19:02:46,800 --> 19:02:49,191
create user uh

936
19:02:49,191 --> 19:02:52,551
function in our database so that's create user i'm gonna follow so now we

937
19:02:52,551 --> 19:02:56,320
have create user delete user and open and close and a private function in

938
19:02:56,320 --> 19:03:00,639
order to get the current database okay

939
19:03:00,639 --> 19:03:05,119
as the caption indicates now we have to take care of a function called get user

940
19:03:05,119 --> 19:03:10,240
which it can retrieve a user given its email address alright so

941
19:03:10,240 --> 19:03:14,551
i'm going to go ahead and basically write that function signature

942
19:03:14,551 --> 19:03:18,551
in here by pasting it from my note so i don't have to type it manually but you

943
19:03:18,551 --> 19:03:22,720
have it in the captions in case you need to go go to it we just like we did in

944
19:03:22,720 --> 19:03:25,360
the other functions we're going to get the current database or throw an error

945
19:03:25,360 --> 19:03:31,360
if the database isn't open so we're going to say db is get database or throw

946
19:03:31,360 --> 19:03:35,191
then what we're going to do is we're going to query the database for that

947
19:03:35,191 --> 19:03:38,551
email address and if you remember in the create user we already did that so let's

948
19:03:38,551 --> 19:03:41,039
go and copy that boof

949
19:03:41,039 --> 19:03:44,479
like this and i'm going to fold create user and

950
19:03:44,479 --> 19:03:49,679
let's go in here and paste that code we have the results okay

951
19:03:49,679 --> 19:03:53,512
so in this case we have to do the opposite you see in create user we

952
19:03:53,512 --> 19:03:56,800
checked to make sure that

953
19:03:56,800 --> 19:03:58,800
um the

954
19:03:58,800 --> 19:04:02,080
results are actually empty because we want to make sure before we create a new

955
19:04:02,080 --> 19:04:06,720
user with that email that email doesn't already exist but in this case we

956
19:04:06,720 --> 19:04:09,759
actually have to do the opposite when you want to get a user we want to make

957
19:04:09,759 --> 19:04:15,360
sure that it does exist so we have to say if results is empty meaning that we

958
19:04:15,360 --> 19:04:20,240
couldn't find this user with the given email address then we say a throw

959
19:04:20,240 --> 19:04:24,800
could not find user actually we don't have that yet so we

960
19:04:24,800 --> 19:04:28,639
need to define a new exception called could not find user and i'm gonna bring

961
19:04:28,639 --> 19:04:33,191
it up here just like we have to delete user we also

962
19:04:33,191 --> 19:04:36,800
have could not find user okay and then here we have to throw that could not

963
19:04:36,800 --> 19:04:42,080
find user all right if the results were empty then we throw

964
19:04:42,080 --> 19:04:46,479
it up otherwise we have to then construct a database a user so we say

965
19:04:46,479 --> 19:04:53,039
return database user from row and we say results

966
19:04:53,039 --> 19:04:57,279
dot first which is the first row that was read

967
19:04:57,279 --> 19:04:59,191
from the

968
19:04:59,191 --> 19:05:03,831
user table also remember we set a limit of one so it should be

969
19:05:03,831 --> 19:05:08,000
it should be either zero rows or one row which is the user with

970
19:05:08,000 --> 19:05:11,512
the given email address okay

971
19:05:11,512 --> 19:05:15,119
all right perfect uh let's go ahead to the next function that we have to

972
19:05:15,119 --> 19:05:19,279
implement and that is for us to be able to create new

973
19:05:19,279 --> 19:05:23,440
nodes so if you want to be like me and like clean up the code a little bit here

974
19:05:23,440 --> 19:05:28,000
just fold everything so you only see the function signatures now we can focus on

975
19:05:28,000 --> 19:05:31,919
the next function which is creates nodes i'm just going to find it

976
19:05:31,919 --> 19:05:37,440
in my notes here just to make sure i give you the exact

977
19:05:37,440 --> 19:05:42,320
code necessary in order to create the create note function

978
19:05:42,320 --> 19:05:47,831
uh if i can find it um creates notes right there okay

979
19:05:47,831 --> 19:05:50,639
as the as the caption indicates we have to have

980
19:05:50,639 --> 19:05:55,759
a an asynchronous function called create node it returns a database node and it

981
19:05:55,759 --> 19:06:00,872
also says who is the owner of this node and it's just going to create a new node

982
19:06:00,872 --> 19:06:06,551
with an empty text and it's going to associate that and nodes with the given

983
19:06:06,551 --> 19:06:11,759
database user and for you see the parameter is of type database user and a

984
19:06:11,759 --> 19:06:16,000
way to get a user is either to create one if it doesn't exist and you get the

985
19:06:16,000 --> 19:06:20,000
database user or you get an existing user okay so

986
19:06:20,000 --> 19:06:24,551
excuse me let's go ahead and say future database user

987
19:06:24,551 --> 19:06:28,160
and we call this function as the nodes indicate create node and we say it's a

988
19:06:28,160 --> 19:06:33,512
required field of a database user oops sorry it shouldn't return a

989
19:06:33,512 --> 19:06:37,759
database user it should be database nodes all right and the parameter is the

990
19:06:37,759 --> 19:06:43,440
owner which is the database user and it's an async function

991
19:06:43,440 --> 19:06:48,080
so just like we did in the other places we're going to say final db is get

992
19:06:48,080 --> 19:06:53,512
or throw get the current database or throw

993
19:06:53,512 --> 19:06:57,600
so what we need to do first is just to make sure that the current user that we

994
19:06:57,600 --> 19:07:01,679
are passing here already exists in the database because remember database user

995
19:07:01,679 --> 19:07:06,240
is just a class it can be created by calling its constructor which is right

996
19:07:06,240 --> 19:07:09,919
here um somewhere here

997
19:07:09,919 --> 19:07:12,720
so i could just create a new database user

998
19:07:12,720 --> 19:07:17,119
instance as a database user and a random email and a random id

999
19:07:17,119 --> 19:07:21,600
but in here when we're trying to create a node for that particular database user

1000
19:07:21,600 --> 19:07:24,800
we need to first make sure that that database user's actually inside the

1001
19:07:24,800 --> 19:07:27,679
database okay and to do that we say final

1002
19:07:27,679 --> 19:07:31,119
bb user equal to await

1003
19:07:31,119 --> 19:07:36,479
and we actually call our own get user function in here we say get user with

1004
19:07:36,479 --> 19:07:41,191
the email of the um owner's email on our email

1005
19:07:41,191 --> 19:07:46,872
so in here we're literally reusing the code that we've created

1006
19:07:46,872 --> 19:07:49,600
then what we're going to do is we're going to

1007
19:07:49,600 --> 19:07:54,551
check whether this database user is actually the owner

1008
19:07:54,551 --> 19:07:58,320
see what do i mean by that i mean that let's

1009
19:07:58,320 --> 19:08:02,160
say that i go and hack things up and i say oh i create a new instance of

1010
19:08:02,160 --> 19:08:05,919
database user manually without inserting into the database and here's the id some

1011
19:08:05,919 --> 19:08:10,240
sort of a random id and then here's the email which i know exists in the

1012
19:08:10,240 --> 19:08:12,960
database now what we need to do in our code is

1013
19:08:12,960 --> 19:08:18,160
just to make sure that the id that you provided in your database

1014
19:08:18,160 --> 19:08:22,160
user here is actually an id of an existing user in our database and to do

1015
19:08:22,160 --> 19:08:26,551
that we could literally use this little beautiful function that we wrote earlier

1016
19:08:26,551 --> 19:08:30,240
which is the equality function of our database user which actually checks our

1017
19:08:30,240 --> 19:08:34,639
id against the other database user's id so if we literally

1018
19:08:34,639 --> 19:08:40,399
say here in here we say if the db user is not the owner which goes into our

1019
19:08:40,399 --> 19:08:45,679
equal equal operator and negates it it says oh if it's not equal to that then

1020
19:08:45,679 --> 19:08:51,279
we say throw could not find user okay

1021
19:08:51,279 --> 19:08:53,679
so after this place

1022
19:08:53,679 --> 19:08:58,479
if we if we actually found the db user with that email and the id was exact id

1023
19:08:58,479 --> 19:09:01,759
as the owner then we can actually be sure that that user does exist in the

1024
19:09:01,759 --> 19:09:05,360
database with the correct email and the correct id okay so let's just put

1025
19:09:05,360 --> 19:09:11,831
comments here in here and say make sure owner exists in the database with the

1026
19:09:11,831 --> 19:09:16,399
correct id that's it okay

1027
19:09:16,399 --> 19:09:20,479
all right after we've done that we also have to take care of actually creating

1028
19:09:20,479 --> 19:09:24,831
um the note so let's go ahead and create a

1029
19:09:24,831 --> 19:09:30,479
um text and here we say the text is uh i'm sorry i noticed that you couldn't

1030
19:09:30,479 --> 19:09:35,440
see that code i hope that you saw this code at least

1031
19:09:35,440 --> 19:09:39,279
that i wrote here but if you didn't i apologize for that because just because

1032
19:09:39,279 --> 19:09:43,759
i'm using a software that i don't see the software all the time on my main

1033
19:09:43,759 --> 19:09:47,759
monitor which is the monitor i'm coding i have to look at a secondary monitor

1034
19:09:47,759 --> 19:09:51,831
which is down here so i'm doing my best to look at that secondary monitor just

1035
19:09:51,831 --> 19:09:54,639
to make sure you're seeing all the content but sometimes i could miss that

1036
19:09:54,639 --> 19:09:57,831
i apologize for that so let's see that

1037
19:09:57,831 --> 19:10:01,191
now you can see this code all right i'm going to bring this code a little bit up

1038
19:10:01,191 --> 19:10:05,039
so let's go ahead and actually create the notes so i'm going to put a comment

1039
19:10:05,039 --> 19:10:10,160
in here and say our work now is to create notes create the notes

1040
19:10:10,160 --> 19:10:12,960
and what we're going to say we're going to say

1041
19:10:12,960 --> 19:10:16,800
db insert just like we did an insert previously for create user we're going

1042
19:10:16,800 --> 19:10:19,512
to do a db insert for the notes and it's in

1043
19:10:19,512 --> 19:10:23,440
the notes table and you see the values in here is going

1044
19:10:23,440 --> 19:10:27,679
to be a map and the map is if you look at the

1045
19:10:27,679 --> 19:10:31,440
insert function is literally a map of string and object so

1046
19:10:31,440 --> 19:10:35,360
let's have a look at our note table in here and you can see notes right click

1047
19:10:35,360 --> 19:10:41,512
modify table it needs user id text and is synced with cloud columns so let's go

1048
19:10:41,512 --> 19:10:46,160
ahead and say user id column user id call

1049
19:10:46,160 --> 19:10:50,639
it's the owners id and we had what else do we have we have

1050
19:10:50,639 --> 19:10:54,800
the text column and that is equal to this text that we

1051
19:10:54,800 --> 19:10:57,759
just created out there which is an empty text basically

1052
19:10:57,759 --> 19:11:00,960
you don't have to do this you don't have to do that part you could just literally

1053
19:11:00,960 --> 19:11:03,440
just say this

1054
19:11:03,440 --> 19:11:09,191
to me it's more readable if i define these things beforehand like that okay

1055
19:11:09,191 --> 19:11:13,512
and then here we just say is synced with

1056
19:11:13,512 --> 19:11:19,039
cloud column and its value is one in this case so we're basically saying that

1057
19:11:19,039 --> 19:11:23,919
we start off with that okay and i just noticed that i had missed a

1058
19:11:23,919 --> 19:11:28,240
column in there remember insert it returns the id of the inserted object in

1059
19:11:28,240 --> 19:11:34,160
the database and it's a future so let's then say final note id is equal to a

1060
19:11:34,160 --> 19:11:41,512
waiting on that function to insert the notes into the note table

1061
19:11:41,512 --> 19:11:44,960
all right now that that is done we're going to

1062
19:11:44,960 --> 19:11:49,600
actually return a new note instance and return it a database note so what we're

1063
19:11:49,600 --> 19:11:51,831
going to do in here we're going to say final

1064
19:11:51,831 --> 19:11:56,479
note is equal to database note notes like that

1065
19:11:56,479 --> 19:12:00,160
and for the id we're going to say note id i'm going to bring it up so you see

1066
19:12:00,160 --> 19:12:02,872
it better

1067
19:12:02,872 --> 19:12:07,759
and for the user id we're going to say owner id text is text so this is another

1068
19:12:07,759 --> 19:12:11,440
reason to have it defined like a constant like i did so that we can reuse

1069
19:12:11,440 --> 19:12:14,639
it here and there and is synced with cloud what should we

1070
19:12:14,639 --> 19:12:19,279
do there we should probably just say true okay

1071
19:12:19,279 --> 19:12:23,440
creating a note you have to return it then inside your um asynchronous

1072
19:12:23,440 --> 19:12:26,639
function all right i'm going to put a comma here as well just to make sure

1073
19:12:26,639 --> 19:12:31,360
formatting is in place all right now we inserted notes into the

1074
19:12:31,360 --> 19:12:37,119
database and we also created a database node to return that from our function

1075
19:12:37,119 --> 19:12:40,720
wow a lot of code a lot of code but i hope

1076
19:12:40,720 --> 19:12:44,639
you're sticking with me throughout this chapter so now we have create note

1077
19:12:44,639 --> 19:12:47,759
as the caption indicates now we have to work on a function that allows us to

1078
19:12:47,759 --> 19:12:52,000
delete a node because remember we're going to allow the user to select a node

1079
19:12:52,000 --> 19:12:56,080
in the database later sorry select the node on the user interface which that

1080
19:12:56,080 --> 19:12:59,831
user themselves have created and be able to delete that notes all right so we

1081
19:12:59,831 --> 19:13:04,720
need a function that allows us to delete a node using its id all right

1082
19:13:04,720 --> 19:13:08,479
so let's go i'm just going to bring the

1083
19:13:08,479 --> 19:13:12,160
basics of this function or almost the entirety of this function actually here

1084
19:13:12,160 --> 19:13:16,479
so we don't have to code that manually i'm going to paste it here

1085
19:13:16,479 --> 19:13:19,512
and as you can see here the signature of this function i'm going to explain it

1086
19:13:19,512 --> 19:13:23,279
all the signature up to this function is called delete node as an asynchronous

1087
19:13:23,279 --> 19:13:27,600
function as the caption at the bottom of the screen in case we do the get db

1088
19:13:27,600 --> 19:13:31,512
and then we're literally just calling the delete function which is the exact

1089
19:13:31,512 --> 19:13:35,440
same thing which i believe we did in delete user let's have a look at that

1090
19:13:35,440 --> 19:13:39,512
you see delete count db delete in the table

1091
19:13:39,512 --> 19:13:44,720
and then your work clause and in this case inside the delete note we're saying

1092
19:13:44,720 --> 19:13:50,000
from the note table delete an object which has its column id equal to

1093
19:13:50,000 --> 19:13:54,720
something and then we're passing that something in the where arcs

1094
19:13:54,720 --> 19:14:00,160
now if we couldn't delete anything if that note didn't exist with the given id

1095
19:14:00,160 --> 19:14:03,600
and we're throwing an exception called could not delete node and that's an

1096
19:14:03,600 --> 19:14:07,119
exception that we haven't defined yet and we're gonna have to define that at

1097
19:14:07,119 --> 19:14:10,639
the bottom all the other exceptions that we've defined so far so that's could not

1098
19:14:10,639 --> 19:14:14,320
delete node implements exception all right

1099
19:14:14,320 --> 19:14:18,872
so i thought to i mean i usually don't copy paste code even if it's my own code

1100
19:14:18,872 --> 19:14:23,191
but i thought this is such an easy code we have literally done every part of

1101
19:14:23,191 --> 19:14:28,000
something similar before we've done the get db we've done the deletes before

1102
19:14:28,000 --> 19:14:32,479
we've done this if statement before so it's nothing new and i don't think you

1103
19:14:32,479 --> 19:14:36,240
have to have me here spending time explaining the

1104
19:14:36,240 --> 19:14:38,872
same thing over and over again and that's why i copy pasted this delete

1105
19:14:38,872 --> 19:14:41,831
note here okay

1106
19:14:41,831 --> 19:14:47,191
all right then what we need also is the ability for us to delete all nodes from

1107
19:14:47,191 --> 19:14:51,360
our database how do we do that as you can see we need a function called future

1108
19:14:51,360 --> 19:14:55,759
means which is which indicates a number of nodes that were deleted from the

1109
19:14:55,759 --> 19:14:59,919
database we call it delete all nodes and it's an async function

1110
19:14:59,919 --> 19:15:04,800
here okay and uh what we need to do in here is

1111
19:15:04,800 --> 19:15:10,160
just it's very simple we're going to say final db is equal to get or throw

1112
19:15:10,160 --> 19:15:14,800
and then we say db delete and then we just literally say uh

1113
19:15:14,800 --> 19:15:22,000
note oops note table uh boom boom await on it all right

1114
19:15:22,000 --> 19:15:25,679
and you see this if you issue the delete command on

1115
19:15:25,679 --> 19:15:30,479
on your database with a given table all what it does is that it deletes every

1116
19:15:30,479 --> 19:15:35,831
row inside that uh table for you and it will return the number of rows that were

1117
19:15:35,831 --> 19:15:38,872
affected so you can see it returns the number of rows affected so that's

1118
19:15:38,872 --> 19:15:44,960
exactly what we want to return so just return that value in this function right

1119
19:15:44,960 --> 19:15:48,800
perfect good stuff we've done some big functions and some

1120
19:15:48,800 --> 19:15:52,399
small functions so it's so refreshing to have some small functions as well

1121
19:15:52,399 --> 19:15:57,360
even for me so so what we need to do now is to create

1122
19:15:57,360 --> 19:16:02,240
the functionality for fetching a specific node you see when we actually

1123
19:16:02,240 --> 19:16:05,919
get to the ui where we render all the nodes that are inside the database to

1124
19:16:05,919 --> 19:16:09,679
our user in the main ui of our application we're going to list all the

1125
19:16:09,679 --> 19:16:13,039
nodes and then if the user presses on any specific node then we're going to

1126
19:16:13,039 --> 19:16:17,360
get the id of that node and then read that node's information from the

1127
19:16:17,360 --> 19:16:21,191
database and that's why we need a function that takes an id of a node and

1128
19:16:21,191 --> 19:16:25,512
actually grabs that node for us from the database okay

1129
19:16:25,512 --> 19:16:30,080
so let's go ahead and program that so i'm gonna bring bring the uh

1130
19:16:30,080 --> 19:16:33,759
i'm gonna bring the function signature and we're not gonna

1131
19:16:33,759 --> 19:16:37,831
copy paste it this time let me copy paste the function actually i mean so

1132
19:16:37,831 --> 19:16:43,039
let's go ahead and get the db so this is easy for you now you know how to do that

1133
19:16:43,039 --> 19:16:46,399
and we're going to query the database so we're just going to say final notes

1134
19:16:46,399 --> 19:16:48,872
which is going to be like the

1135
19:16:48,872 --> 19:16:54,160
iterable list of maps that the sqlite database can read

1136
19:16:54,160 --> 19:16:58,639
so we're going to say await on the db query

1137
19:16:58,639 --> 19:17:01,919
and we're going to say in the notes table i'm going to remove all these

1138
19:17:01,919 --> 19:17:06,872
overlays so you see the code better notes table and we're going to just say

1139
19:17:06,872 --> 19:17:12,080
um remit one because we want to get one note all right

1140
19:17:12,080 --> 19:17:17,039
and the word clause is going to be um using its id you see we're gonna say

1141
19:17:17,039 --> 19:17:21,600
id equal to something and the where arts are gonna be just the id itself like

1142
19:17:21,600 --> 19:17:26,960
that boom and a semicolon like that all right

1143
19:17:26,960 --> 19:17:31,919
and now if this notes uh which is

1144
19:17:31,919 --> 19:17:36,080
you can see it's a list if notes is empty we're going to throw an

1145
19:17:36,080 --> 19:17:40,551
exception so we're going to say um could not find notes do we have that

1146
19:17:40,551 --> 19:17:45,360
uh could not find user we have could not find notes we don't have so let's go and

1147
19:17:45,360 --> 19:17:48,800
define it i'm going to bring it from

1148
19:17:48,800 --> 19:17:52,399
my own notes so we don't have to write that manually

1149
19:17:52,399 --> 19:17:56,479
so define an exception called could not find node implements exception all right

1150
19:17:56,479 --> 19:18:01,440
and then here we just throw it could not find nodes so if you gave us an id we

1151
19:18:01,440 --> 19:18:04,639
couldn't find it in database we just throw an exception otherwise

1152
19:18:04,639 --> 19:18:09,440
we need to actually create an instance of our database node so we say return

1153
19:18:09,440 --> 19:18:17,600
database note from row and nodes first okay so that's similar to how we did it

1154
19:18:17,600 --> 19:18:22,320
before for getting a user as well

1155
19:18:22,320 --> 19:18:25,759
all right now we also need

1156
19:18:25,759 --> 19:18:31,191
a functionality that allows us to get all nodes in the system you see we have

1157
19:18:31,191 --> 19:18:35,440
get node to delete all nodes delete node create node but we don't have any

1158
19:18:35,440 --> 19:18:39,119
functionality that can get all the nodes and that is the exact function we're

1159
19:18:39,119 --> 19:18:42,872
going to use the main interface of our application to render all the nodes for

1160
19:18:42,872 --> 19:18:46,872
a given user okay so

1161
19:18:46,872 --> 19:18:50,720
let me just make sure that i have that function in here

1162
19:18:50,720 --> 19:18:59,440
and it is called get all nodes

1163
19:18:59,440 --> 19:19:03,440
let's see we can find a functionality get all

1164
19:19:03,440 --> 19:19:06,479
nodes somewhere

1165
19:19:06,479 --> 19:19:11,919
create note we have get user we have

1166
19:19:11,919 --> 19:19:15,919
and perhaps i don't actually have a functionality right now i can see in my

1167
19:19:15,919 --> 19:19:20,872
notes that i don't actually have get all notes but that is actually not a problem

1168
19:19:20,872 --> 19:19:25,831
at all in the get note here you see we have that we have to define this gets

1169
19:19:25,831 --> 19:19:30,240
all notes so let's go ahead and do that i'm going to copy the signature of this

1170
19:19:30,240 --> 19:19:33,360
function and i'm going to bring it here and we're

1171
19:19:33,360 --> 19:19:35,759
going to say we're going to return a future

1172
19:19:35,759 --> 19:19:39,831
of list of database notes and we're saying get

1173
19:19:39,831 --> 19:19:46,551
all notes like this all right excuse me and it shouldn't require any parameters

1174
19:19:46,551 --> 19:19:50,320
we're just going to ask the database to return all the notes all right

1175
19:19:50,320 --> 19:19:54,160
sorry about that again and i'm going to copy the functionality

1176
19:19:54,160 --> 19:19:58,399
from here for gets notes

1177
19:19:58,399 --> 19:20:02,872
excuse me again and in here we're not now going to limit

1178
19:20:02,872 --> 19:20:07,279
anything and we don't have anywhere clause okay so just like that we're

1179
19:20:07,279 --> 19:20:12,160
going to say db query from the note table and we get all the notes then if

1180
19:20:12,160 --> 19:20:15,440
notes is empty then we say could not find notes

1181
19:20:15,440 --> 19:20:20,479
or perhaps we could just say notes we can see it's a list we can

1182
19:20:20,479 --> 19:20:23,279
literally not have any special logic in here that

1183
19:20:23,279 --> 19:20:27,191
says could not find note or anything and i'm gonna have a look at my notes in

1184
19:20:27,191 --> 19:20:30,479
here

1185
19:20:30,479 --> 19:20:33,600
that's fine um what we need to do now now that we have

1186
19:20:33,600 --> 19:20:38,320
our notes we can map them so we say notes map and you can name this

1187
19:20:38,320 --> 19:20:42,960
parameter and and in your mapping you need to say okay i get a database note

1188
19:20:42,960 --> 19:20:46,479
which which you can see is of type let me see if i can move my mouse over here

1189
19:20:46,479 --> 19:20:51,600
it's a map of string object this matches perfectly into our database notes

1190
19:20:51,600 --> 19:20:56,320
but from row and then you say from this n

1191
19:20:56,320 --> 19:21:00,720
let's actually call it note row or something like that and we put it there

1192
19:21:00,720 --> 19:21:03,679
and if you say final result

1193
19:21:03,679 --> 19:21:06,639
and now i think this is an eye treble to be honest with you so you can see it's

1194
19:21:06,639 --> 19:21:10,639
an iterable of database notes okay so what we could do is actually change our

1195
19:21:10,639 --> 19:21:14,800
future in here instead of saying list we return on iturble okay so

1196
19:21:14,800 --> 19:21:20,080
in order for the sake of uh cleanliness i'm also gonna change our captioning

1197
19:21:20,080 --> 19:21:24,872
here and say iterable so you see the correct information on your screen as

1198
19:21:24,872 --> 19:21:27,600
well all right

1199
19:21:27,600 --> 19:21:32,160
so that's our result so all we need to do in here just to return it that's it

1200
19:21:32,160 --> 19:21:34,639
so so like that

1201
19:21:34,639 --> 19:21:38,479
perfect so um and that's the functionality of get

1202
19:21:38,479 --> 19:21:43,759
all nodes so it's very simple nothing nothing special

1203
19:21:43,759 --> 19:21:47,679
and now uh what we need to do is just to

1204
19:21:47,679 --> 19:21:51,119
wrap it up there's one last function that we have to implement and remember

1205
19:21:51,119 --> 19:21:54,080
when we go to the main ui of the application we're going to allow the

1206
19:21:54,080 --> 19:21:57,759
user to create nodes list all their created nodes and also be able to click

1207
19:21:57,759 --> 19:22:01,759
on any specific node in order to update the contents of that node so we need a

1208
19:22:01,759 --> 19:22:08,800
function called update note so let's go and bring my notes in here update notes

1209
19:22:08,800 --> 19:22:13,600
so let's go ahead and create the signature for that function and future

1210
19:22:13,600 --> 19:22:18,399
database notes and we say update notes

1211
19:22:18,399 --> 19:22:22,479
like that and we're going to have some required parameters which we actually

1212
19:22:22,479 --> 19:22:27,512
grab an existing database note object and then we

1213
19:22:27,512 --> 19:22:31,360
expect the user to also provide a new text so let's just say required

1214
19:22:31,360 --> 19:22:36,720
a database note notes and then we say it's the required

1215
19:22:36,720 --> 19:22:43,679
string of text just like that

1216
19:22:43,679 --> 19:22:46,872
you're already familiar with this we're gonna get the database we say get or

1217
19:22:46,872 --> 19:22:50,160
throw okay

1218
19:22:50,160 --> 19:22:54,240
and we're just gonna issue an update to our

1219
19:22:54,240 --> 19:22:59,440
database we haven't done updates before for our sql like database so that's what

1220
19:22:59,440 --> 19:23:02,320
we're going to do now so let's just say db.update

1221
19:23:02,320 --> 19:23:06,160
and you can see it says give us a table or give me the table and

1222
19:23:06,160 --> 19:23:10,831
your list of updates so let's go in here and say

1223
19:23:10,831 --> 19:23:15,512
update the uh note table

1224
19:23:15,512 --> 19:23:18,240
um and actually before doing that how do we

1225
19:23:18,240 --> 19:23:22,720
make sure that this table that note already exists in the database because

1226
19:23:22,720 --> 19:23:27,831
like we saw earlier anybody can go and add

1227
19:23:27,831 --> 19:23:30,800
or create an instance of a database node it doesn't necessarily have to be in the

1228
19:23:30,800 --> 19:23:33,919
database but we kind of need to make sure that it already is stored in the

1229
19:23:33,919 --> 19:23:38,800
database because before we can updates to update its text so we already have a

1230
19:23:38,800 --> 19:23:42,551
functionality that does that remember gets notes with an id so we could

1231
19:23:42,551 --> 19:23:46,872
literally just say await

1232
19:23:46,872 --> 19:23:50,872
it's note and then we say note id

1233
19:23:50,872 --> 19:23:54,399
and you see this actually throws an error

1234
19:23:54,399 --> 19:23:58,080
if you go to this function it throws an error called could not find note which

1235
19:23:58,080 --> 19:24:02,720
is exactly what we're after but we're not actually after the the result of it

1236
19:24:02,720 --> 19:24:06,399
we don't want the actual note because we're assuming that that is the same

1237
19:24:06,399 --> 19:24:12,080
object as this so we're just ignoring its return value okay

1238
19:24:12,080 --> 19:24:14,479
in the update we're going to say the notes table

1239
19:24:14,479 --> 19:24:17,512
and the values that we're going to provide are two we're going to say the

1240
19:24:17,512 --> 19:24:21,279
text column i need a new text

1241
19:24:21,279 --> 19:24:25,679
and we're upon you updating the text of a node we're also going to assume that

1242
19:24:25,679 --> 19:24:30,479
well all of a sudden this node is not synced with the back end or with the

1243
19:24:30,479 --> 19:24:34,320
data with the uh with the cloud database anymore okay

1244
19:24:34,320 --> 19:24:39,512
so that goes back to our um async with cloud column

1245
19:24:39,512 --> 19:24:43,440
so let's go in here and say is synced with cloud column then it's going to be

1246
19:24:43,440 --> 19:24:47,759
set to zero remember that was an integer field all right update is an

1247
19:24:47,759 --> 19:24:50,399
asynchronous function so you have the weight on it

1248
19:24:50,399 --> 19:24:54,320
and it also returns the number of feel a number of rows that were updated so

1249
19:24:54,320 --> 19:24:59,119
we're going to say updated updates count

1250
19:24:59,119 --> 19:25:01,119
sorry final

1251
19:25:01,119 --> 19:25:06,872
updates count is equal to a weight on db update all right now by you

1252
19:25:06,872 --> 19:25:11,039
at the call side calling the updates note function we're assuming that that

1253
19:25:11,039 --> 19:25:15,191
note should have existed in the database okay so in this case the

1254
19:25:15,191 --> 19:25:22,080
updates count should it should be a value other than zero okay so we say if

1255
19:25:22,080 --> 19:25:27,119
updates count is equal to zero bring the code up so you can see it

1256
19:25:27,119 --> 19:25:30,831
and then we have to throw a new exception called could not update

1257
19:25:30,831 --> 19:25:35,279
note and paste that exception from my notes

1258
19:25:35,279 --> 19:25:38,720
so it should look like this class could not update node implements exception all

1259
19:25:38,720 --> 19:25:41,919
right so i need you to write this code as well

1260
19:25:41,919 --> 19:25:46,320
and if updates notes if updates count is zero then we're

1261
19:25:46,320 --> 19:25:51,119
gonna say throw could not update note

1262
19:25:51,119 --> 19:25:53,831
else now you can see what we promised is to

1263
19:25:53,831 --> 19:25:58,960
return a new database note so let's go and just say

1264
19:25:58,960 --> 19:26:04,080
do we then i mean that's that's the thing we've updated that uh and how do

1265
19:26:04,080 --> 19:26:09,759
we return an update a database note to you well we could just do this

1266
19:26:09,759 --> 19:26:14,399
turn its uh notes with that note id because

1267
19:26:14,399 --> 19:26:19,440
we already have gets notes function implemented all right

1268
19:26:19,440 --> 19:26:23,039
wow very well done if you could stick with

1269
19:26:23,039 --> 19:26:28,399
me throughout this chapter because we did a lot of work so um i'm gonna fold

1270
19:26:28,399 --> 19:26:32,000
this fold this you can see we have a lot of functions here

1271
19:26:32,000 --> 19:26:36,080
quite a lot of work and i think so far this has been the biggest chapter of

1272
19:26:36,080 --> 19:26:40,800
this uh of this course but we've also had a lot to do a lot of information i

1273
19:26:40,800 --> 19:26:44,320
hope you could stick with me let's go ahead now and clean up our

1274
19:26:44,320 --> 19:26:48,080
exceptions as the caption indicates let's put all our crowd exceptions in

1275
19:26:48,080 --> 19:26:54,399
one file inside lib services crowd crud underscore quad exceptions okay

1276
19:26:54,399 --> 19:26:58,479
so let's go in here and

1277
19:26:58,479 --> 19:27:04,399
uh actually it should say crowd slash crowd exceptions so um if i look at my

1278
19:27:04,399 --> 19:27:10,479
notes inside services crud i'm gonna fix this caption and i apologize for

1279
19:27:10,479 --> 19:27:18,000
that i'm just gonna fix it on on the go like this and i'm gonna bring it up

1280
19:27:18,000 --> 19:27:22,160
and actually it should say crowd slash crud underscore exception so i think

1281
19:27:22,160 --> 19:27:25,360
there was more than one error in there and cros

1282
19:27:25,360 --> 19:27:30,320
required exceptions so it should be lip services slash quad

1283
19:27:30,320 --> 19:27:34,080
exceptions all right so let's go and fix that up

1284
19:27:34,080 --> 19:27:37,831
inside services we have crowd already and we have nodes service dart let's

1285
19:27:37,831 --> 19:27:42,720
create a new file in there and we just call it crud exceptions dot art now i

1286
19:27:42,720 --> 19:27:46,800
need you to go into your node service dart file and grab all those exceptions

1287
19:27:46,800 --> 19:27:52,000
that you define here and just cut them with command x on macintosh or control x

1288
19:27:52,000 --> 19:27:57,119
in linux and windows and then bring it into your quad exceptions alright and

1289
19:27:57,119 --> 19:28:00,160
save this file

1290
19:28:00,160 --> 19:28:06,551
and let me also have a look here

1291
19:28:06,551 --> 19:28:09,919
just to make sure my notes are clean as well for you

1292
19:28:09,919 --> 19:28:14,399
uh so because i i noticed that the next caption was also a little bit incorrect

1293
19:28:14,399 --> 19:28:18,000
now we need to go and use that crowd exceptions in our note series because as

1294
19:28:18,000 --> 19:28:21,600
you can see it is marked as red right now because there were so many

1295
19:28:21,600 --> 19:28:26,080
exceptions thrown that um this file doesn't have access to anymore so i'm

1296
19:28:26,080 --> 19:28:29,119
gonna get help from visual studio code here with command dot and say import

1297
19:28:29,119 --> 19:28:34,320
crowd exceptions and all those errors are gonna go away

1298
19:28:34,320 --> 19:28:39,039
all right well done huge chapter a lot of work done and congratulations for

1299
19:28:39,039 --> 19:28:44,080
sticking with me through this chapter now as is the tradition we're gonna now

1300
19:28:44,080 --> 19:28:50,872
go ahead and commit our work and um also tag it so i'm going to make the screen a

1301
19:28:50,872 --> 19:28:54,872
little bit bigger let's go to our terminal here

1302
19:28:54,872 --> 19:29:00,551
and i'm then going to say in here we're going to tag and commit our work as step

1303
19:29:00,551 --> 19:29:05,039
11 so let's first get status and then we say git add all

1304
19:29:05,039 --> 19:29:09,679
hit status again here are the things we've done pop spec was changed because

1305
19:29:09,679 --> 19:29:14,479
we added three dependencies uh provide a path provider path

1306
19:29:14,479 --> 19:29:18,800
and and also i believe actually it was called path and path provider right

1307
19:29:18,800 --> 19:29:22,551
yes path path provider and sqlite so that's

1308
19:29:22,551 --> 19:29:25,919
why these two files have been changed node service is completely new and crowd

1309
19:29:25,919 --> 19:29:30,720
exceptions is also new so git commit

1310
19:29:30,720 --> 19:29:36,000
uh step 11 as the caption indicates um git push

1311
19:29:36,000 --> 19:29:40,399
which they commit first remember and then we tag it as step 11

1312
19:29:40,399 --> 19:29:45,831
and we push our tags as well fantastic

1313
19:29:45,831 --> 19:29:49,512
now congratulations again for going through this chapter with me it was a

1314
19:29:49,512 --> 19:29:52,872
huge chapter i think the biggest so far now we need to get ready for the next

1315
19:29:52,872 --> 19:29:56,800
chapter as a tradition for the other chapters at the end we talk a little bit

1316
19:29:56,800 --> 19:30:00,240
about what we're going to do in the next chapter just to get ready for it

1317
19:30:00,240 --> 19:30:03,679
so we've done a lot of work on the data now

1318
19:30:03,679 --> 19:30:08,639
we need to fuse it together with our uh with our ui and in order to do that we

1319
19:30:08,639 --> 19:30:12,399
need to talk about streams and stream controllers you see

1320
19:30:12,399 --> 19:30:16,160
when you're in the main ui of your application after you've logged in you

1321
19:30:16,160 --> 19:30:20,960
need to see a list of your notes but what happens if you see the list of

1322
19:30:20,960 --> 19:30:24,000
your notes and then you press the plus button to create a new note and this

1323
19:30:24,000 --> 19:30:27,191
plus button is a button that we're going to create soon in the next chapters what

1324
19:30:27,191 --> 19:30:31,512
happens if you press the plus button should you then send manually a signal

1325
19:30:31,512 --> 19:30:37,191
to your ui and say hey a new note was created update the list that is a lot of

1326
19:30:37,191 --> 19:30:42,551
work and for that you can do things a lot cleaner if you use streams and

1327
19:30:42,551 --> 19:30:46,551
stream controllers and that's what we're going to talk about in the next chapter

1328
19:30:46,551 --> 19:30:49,600
so you may want to have a short pause after

1329
19:30:49,600 --> 19:30:53,759
this chapter since it was so big so do that please get your refreshments coffee

1330
19:30:53,759 --> 19:30:57,279
tea whatever you want and i'll see you in the next chapter

1331
19:30:57,279 --> 19:31:01,919
hello everyone and welcome to chapter 28 of the swata course in previous chapters

1332
19:31:01,919 --> 19:31:05,831
we've been talking quite a lot about crud create read update delete and we

1333
19:31:05,831 --> 19:31:10,160
talked about how we can for instance have raw functionality in our node

1334
19:31:10,160 --> 19:31:13,759
service so that we can read from the database delete stuff from the database

1335
19:31:13,759 --> 19:31:19,279
create users etc etc now we haven't really worked in the past two chapters

1336
19:31:19,279 --> 19:31:23,039
so much with our user interface and that's completely okay because sometimes

1337
19:31:23,039 --> 19:31:25,759
as you're developing applications or you're developing software you may have

1338
19:31:25,759 --> 19:31:29,512
to take detours in order to create the functionality that is later gonna be

1339
19:31:29,512 --> 19:31:32,080
needed for your user interface and you'll do

1340
19:31:32,080 --> 19:31:35,831
the same thing if you're doing um back-end development like uh web

1341
19:31:35,831 --> 19:31:39,191
development so i myself do web development with django and sometimes i

1342
19:31:39,191 --> 19:31:43,279
have to go and create a lot of functionality on the backend first

1343
19:31:43,279 --> 19:31:47,679
before i can actually go and mirror that functionality on the ui which is for

1344
19:31:47,679 --> 19:31:51,119
instance the web browser where the user is consuming the content so

1345
19:31:51,119 --> 19:31:53,360
and if even if you're a designer for

1346
19:31:53,360 --> 19:31:58,080
instance you're working with figma you can't always produce user-facing content

1347
19:31:58,080 --> 19:32:01,191
like prototypes you may have to sometimes go and design for sure

1348
19:32:01,191 --> 19:32:04,551
components and then after you've done your components and you'll be ready to

1349
19:32:04,551 --> 19:32:08,479
put those components into screens and display that to your product owner or

1350
19:32:08,479 --> 19:32:11,440
your developers so

1351
19:32:11,440 --> 19:32:15,360
um so far we've been working a lot with

1352
19:32:15,360 --> 19:32:19,600
what the user doesn't see and we have to like stitch

1353
19:32:19,600 --> 19:32:23,440
up those last bits and pieces before we can actually go to the ui and manipulate

1354
19:32:23,440 --> 19:32:29,360
that data which our notes service can right now manipulate we're missing a few

1355
19:32:29,360 --> 19:32:32,320
functionalities which we're going to develop in this chapter in the node

1356
19:32:32,320 --> 19:32:34,399
service and

1357
19:32:34,399 --> 19:32:38,160
what we're going to work with in this chapter especially is with streams and

1358
19:32:38,160 --> 19:32:42,320
stream controllers so let me bring up the caption

1359
19:32:42,320 --> 19:32:45,679
that i'm going to talk about now so what are streams and what are stream

1360
19:32:45,679 --> 19:32:49,440
controllers well if you are a developer already you've

1361
19:32:49,440 --> 19:32:52,720
done software development you may know something uh

1362
19:32:52,720 --> 19:32:58,000
about reactive programming and reactive programming is where you have

1363
19:32:58,000 --> 19:33:02,000
a bunch of data sitting somewhere for instance and then you perform some

1364
19:33:02,000 --> 19:33:06,080
operations on that data and this data gets updated and you will be notified of

1365
19:33:06,080 --> 19:33:10,479
these updates through some sort of a pipe of information so

1366
19:33:10,479 --> 19:33:13,759
and if you haven't done software development before so reactive

1367
19:33:13,759 --> 19:33:16,000
programming and streams and stream controls may be a little bit

1368
19:33:16,000 --> 19:33:20,160
overwhelming but we're going to start very slow so there's nothing to be

1369
19:33:20,160 --> 19:33:24,160
worried about i'm going to explain everything as much as i can to make

1370
19:33:24,160 --> 19:33:27,440
things easier for you but if you don't have development

1371
19:33:27,440 --> 19:33:30,800
background from before software engineering background there's not so

1372
19:33:30,800 --> 19:33:34,320
much that i can explain about streams and stream controllers for you to

1373
19:33:34,320 --> 19:33:39,360
completely understand how they work all i can say is that imagine a stream is

1374
19:33:39,360 --> 19:33:44,479
just a point of time or a stream is basically an entity that controls data

1375
19:33:44,479 --> 19:33:48,800
all right just say something that keeps hold of data and then you perform things

1376
19:33:48,800 --> 19:33:53,512
on it so you say add this data or remove this data add this data with this data

1377
19:33:53,512 --> 19:33:58,080
and give me the results so it keeps hold of its data and it has a

1378
19:33:58,080 --> 19:34:03,119
timeline so it starts at some point manipulates its data and then it either

1379
19:34:03,119 --> 19:34:07,512
errors out at the end saying that oops i can't do this and then it just dies or

1380
19:34:07,512 --> 19:34:11,191
it will just complete at some point and also there is a third category of

1381
19:34:11,191 --> 19:34:14,479
streams where the data just keeps living on so

1382
19:34:14,479 --> 19:34:16,960
it never basically um

1383
19:34:16,960 --> 19:34:20,240
completes or errors out so

1384
19:34:20,240 --> 19:34:25,039
so just think of streams as pipes of data types of information that you can

1385
19:34:25,039 --> 19:34:28,960
manipulate and you can also perform operations on

1386
19:34:28,960 --> 19:34:33,679
so if that's what streams are then what are streams stream controllers in dart a

1387
19:34:33,679 --> 19:34:40,639
stream controller is your interface um to your streams so

1388
19:34:40,639 --> 19:34:45,600
you have the stream which is sitting right here and you can't

1389
19:34:45,600 --> 19:34:49,831
you you don't basically usually go and add stuff to a stream directly or read

1390
19:34:49,831 --> 19:34:54,000
stuff from the stream what you can do is to have a stream controller where you're

1391
19:34:54,000 --> 19:34:58,320
manipulating the stream for instance our node service and this stream controller

1392
19:34:58,320 --> 19:35:02,551
is able to for instance add stuff to the stream or read stuff from the stream so

1393
19:35:02,551 --> 19:35:05,759
just imagine the stream controller is kind of like the manager of that stream

1394
19:35:05,759 --> 19:35:10,160
so if all of this sounds a little bit um high level and abstract i completely

1395
19:35:10,160 --> 19:35:13,679
understand that it usually is when you're working with reactive programming

1396
19:35:13,679 --> 19:35:17,191
some people actually hate reactive programming but

1397
19:35:17,191 --> 19:35:20,639
as one of my colleagues used to say it's always easier to

1398
19:35:20,639 --> 19:35:25,512
hate than to learn and my approach is usually if i hate something is because

1399
19:35:25,512 --> 19:35:29,039
maybe i haven't really fully understood it so there are very few things in my

1400
19:35:29,039 --> 19:35:34,551
life that i've actually learned which i hated after learning so

1401
19:35:34,551 --> 19:35:38,399
if you're a bit overwhelmed by streams and stream controllers or reactive

1402
19:35:38,399 --> 19:35:41,600
programming don't be they're actually really good if you know how to use them

1403
19:35:41,600 --> 19:35:46,160
so they're very easy to use as long as you get a handle of uh

1404
19:35:46,160 --> 19:35:50,720
how basically it's getting a handle of the right way of using them so that's

1405
19:35:50,720 --> 19:35:52,960
what i'm going to show you in this chapter and then

1406
19:35:52,960 --> 19:35:57,831
upcoming chapters as well so let's go excuse me let's go to our

1407
19:35:57,831 --> 19:36:00,960
application i'm going to put the code right here let's have a look at what

1408
19:36:00,960 --> 19:36:04,639
we've written so far i'm going to increase the size of the screen and then

1409
19:36:04,639 --> 19:36:09,512
decrease the font size a little bit so it's not as ginormous

1410
19:36:09,512 --> 19:36:11,831
so um

1411
19:36:11,831 --> 19:36:15,440
let's have a look at what we've done so far you can see we have quite a lot of

1412
19:36:15,440 --> 19:36:19,759
functionality in here we have for instance delete all nodes

1413
19:36:19,759 --> 19:36:23,440
then we have get all nodes

1414
19:36:23,440 --> 19:36:27,759
we have update nodes so quite a lot of functions

1415
19:36:27,759 --> 19:36:31,679
but if you see all of these are directly talking with our database with our

1416
19:36:31,679 --> 19:36:34,639
sqlite database none of these functionalities are

1417
19:36:34,639 --> 19:36:38,240
actually telling or we don't even have to talk about

1418
19:36:38,240 --> 19:36:41,600
functions but if you look at the node service in it itself it doesn't contain

1419
19:36:41,600 --> 19:36:47,512
a list of nodes so it doesn't have the ability to cache these nodes so it's as

1420
19:36:47,512 --> 19:36:50,240
soon as you give it a command the node services i don't know what to do i'm

1421
19:36:50,240 --> 19:36:53,679
just going to go to the database and do what you said i have to do

1422
19:36:53,679 --> 19:36:58,399
however this could i mean in not in our application but in an application that

1423
19:36:58,399 --> 19:37:02,551
has millions and millions of rows of data for instance this could not be such

1424
19:37:02,551 --> 19:37:06,080
a good idea that you always go to the database and

1425
19:37:06,080 --> 19:37:11,512
read the entire thing in order to for instance delete one row or um basically

1426
19:37:11,512 --> 19:37:15,119
these operations should kind of be like cached inside your application before

1427
19:37:15,119 --> 19:37:19,759
you go and hit the database hopefully and what we're going to do as you can

1428
19:37:19,759 --> 19:37:22,960
see in the caption here we're going to actually start caching a list of notes

1429
19:37:22,960 --> 19:37:26,872
that the node service has so the goal is for the note servers to be able to

1430
19:37:26,872 --> 19:37:32,551
expose a list of notes that the ui can then render on this on the user screen

1431
19:37:32,551 --> 19:37:36,639
so if the user goes and presses the plus button then that plus button is then

1432
19:37:36,639 --> 19:37:40,720
gonna send a message here to our note servers we're going to then go to this

1433
19:37:40,720 --> 19:37:44,320
function create node and this create node function internally is then going

1434
19:37:44,320 --> 19:37:49,279
to manipulate that list of nodes inside node service say hey here's a new node

1435
19:37:49,279 --> 19:37:53,191
add that and then our ui is going to listen to a

1436
19:37:53,191 --> 19:37:56,872
list of these notes available in note service and if things change in that

1437
19:37:56,872 --> 19:37:59,279
list then the ui is just going to

1438
19:37:59,279 --> 19:38:02,960
automatically update itself and this interface between the ui and the node

1439
19:38:02,960 --> 19:38:06,160
servers is going to be done through a stream okay

1440
19:38:06,160 --> 19:38:09,279
i know it's a lot of a lot of information but you'll get it you'll get

1441
19:38:09,279 --> 19:38:12,320
it as long as we go through this chapter together

1442
19:38:12,320 --> 19:38:15,919
so what we need to do first is let's go and as then as the caption at the bottom

1443
19:38:15,919 --> 19:38:20,320
of the screen indicates we're going to go and expose a list of notes in our

1444
19:38:20,320 --> 19:38:24,720
note service okay so let's just let's go ahead and say we have a list

1445
19:38:24,720 --> 19:38:29,679
of uh database notes and we're just gonna call it notes and

1446
19:38:29,679 --> 19:38:34,080
we're gonna start with an empty list all right

1447
19:38:34,080 --> 19:38:36,960
so that's really good now we have let's say this is our cache this is where

1448
19:38:36,960 --> 19:38:42,800
we're keeping all the notes that this node service manipulates all right

1449
19:38:42,800 --> 19:38:46,800
so now let's go and talk a little bit about our um

1450
19:38:46,800 --> 19:38:51,679
stream controller so you see what we need to do as the as the

1451
19:38:51,679 --> 19:38:57,039
information here says um what we need is for the node service to

1452
19:38:57,039 --> 19:39:04,000
be able to control a stream of nodes so when the list of this nodes changes we

1453
19:39:04,000 --> 19:39:07,440
need to tell our stream in the note servers that

1454
19:39:07,440 --> 19:39:11,919
hey some element got added hey some element got deleted or some element got

1455
19:39:11,919 --> 19:39:15,512
updated so then the ui can then reactively listen

1456
19:39:15,512 --> 19:39:21,360
for these changes in the in the nodes service and we do that through the um

1457
19:39:21,360 --> 19:39:25,759
our stream controller so let's go as the caption indicates i'm

1458
19:39:25,759 --> 19:39:29,440
going to write it and notes actually maybe i should yeah i'm going to write

1459
19:39:29,440 --> 19:39:34,240
it notes stream controller and the way to create a stream controller is that

1460
19:39:34,240 --> 19:39:38,080
you just say stream controller and then you specify the type of data that your

1461
19:39:38,080 --> 19:39:42,639
stream contains which is a list of database nodes

1462
19:39:42,639 --> 19:39:48,080
and then we're gonna just say dot broadcast

1463
19:39:48,080 --> 19:39:52,000
like that and i believe stream controller isn't yet

1464
19:39:52,000 --> 19:39:56,960
excuse me um isn't imported in our notes service so i'm gonna get help from

1465
19:39:56,960 --> 19:40:01,119
visual studio code and you can see it's it says that well stream controller is

1466
19:40:01,119 --> 19:40:08,399
available in the dart async package so um and yeah async meaning asynchronous

1467
19:40:08,399 --> 19:40:11,440
so in order to be able to use stream controller you have to import that so

1468
19:40:11,440 --> 19:40:14,551
i'm going to get help from visual studio code to do that

1469
19:40:14,551 --> 19:40:17,919
all right so let's see what we did in here

1470
19:40:17,919 --> 19:40:21,919
what is this the syntax looks really really scary but it really isn't all

1471
19:40:21,919 --> 19:40:25,759
you're saying is that i want to be able to control a stream

1472
19:40:25,759 --> 19:40:30,000
um of a list of database notes basically

1473
19:40:30,000 --> 19:40:33,512
you're saying that i have a pipe this pipe

1474
19:40:33,512 --> 19:40:37,831
every event that is inside this pipe is a list of database nodes so let's say

1475
19:40:37,831 --> 19:40:41,512
you start with an empty list so this list is empty inside this pipe then you

1476
19:40:41,512 --> 19:40:44,639
add an item to this pipe

1477
19:40:44,639 --> 19:40:49,360
then what it does it says oh what was i before i was on empty list add that new

1478
19:40:49,360 --> 19:40:54,479
item so now i'm an item now i'm an array or a list with one item and then it puts

1479
19:40:54,479 --> 19:40:58,872
that array inside the stream so the stream's value is now at the beginning

1480
19:40:58,872 --> 19:41:03,360
was empty list then it's a list of one item so this stream controller is

1481
19:41:03,360 --> 19:41:09,119
basically in in control of as its name indicates it's in control of the changes

1482
19:41:09,119 --> 19:41:14,240
to this notes um list it isn't hooked to that yet but

1483
19:41:14,240 --> 19:41:18,551
that's its purpose and that's the reason it has the exact same data type in its

1484
19:41:18,551 --> 19:41:24,800
stream controller now the broadcast part in here and as

1485
19:41:24,800 --> 19:41:28,000
you can see the documentation actually spot on it says the controller where

1486
19:41:28,000 --> 19:41:32,000
stream can be listened to more than once and

1487
19:41:32,000 --> 19:41:35,279
if you've done dark development or flutter development from before you may

1488
19:41:35,279 --> 19:41:40,399
know that if you then um and i'm now assuming as i said that your dart or

1489
19:41:40,399 --> 19:41:43,512
flutter developer from before if you have created a stream controller and

1490
19:41:43,512 --> 19:41:47,119
then you go and listen to the changes to that stream that the stream controller

1491
19:41:47,119 --> 19:41:51,440
is controlling and then you do a hot reload then you get an error from your

1492
19:41:51,440 --> 19:41:54,639
flower application saying that oh this stream's already been listened to so you

1493
19:41:54,639 --> 19:41:58,551
cannot listen to it again and that's the problem that normal stream controllers

1494
19:41:58,551 --> 19:42:02,872
can cause and that you as soon as you've listened to them you should close your

1495
19:42:02,872 --> 19:42:06,872
listening channel to that stream before you can listen to them again so that's

1496
19:42:06,872 --> 19:42:10,551
what broadcast fixes if you're not a developer from before what this

1497
19:42:10,551 --> 19:42:15,440
broadcast basically is saying is that it's okay for you to create new

1498
19:42:15,440 --> 19:42:19,759
listeners that listen to the changes to this stream controller so here's a pipe

1499
19:42:19,759 --> 19:42:23,600
of information at this point you start and listen and then it's completely okay

1500
19:42:23,600 --> 19:42:26,479
that if you want to listen to changes to the stream controller later in the

1501
19:42:26,479 --> 19:42:30,080
future as well so you're not going to get any errors by doing this broadcast

1502
19:42:30,080 --> 19:42:33,039
all right

1503
19:42:33,039 --> 19:42:36,160
all right um

1504
19:42:36,160 --> 19:42:40,960
now what we need also is a handy function

1505
19:42:40,960 --> 19:42:44,639
in our um

1506
19:42:44,639 --> 19:42:50,240
in our application.can

1507
19:42:50,240 --> 19:42:54,551
that can read all the available notes from our database and then cache them

1508
19:42:54,551 --> 19:42:59,919
inside both the notes cache right here and our controller okay

1509
19:42:59,919 --> 19:43:05,119
so you see what our our goal in this chapter is is to

1510
19:43:05,119 --> 19:43:09,600
make sure that this is the source of truth that our notes

1511
19:43:09,600 --> 19:43:15,759
list contains all the nodes for for instance the current user

1512
19:43:15,759 --> 19:43:20,160
then the stream controller is our interface to the outside world

1513
19:43:20,160 --> 19:43:24,872
the ui is going to be listening to changes that occur in this stream

1514
19:43:24,872 --> 19:43:28,479
controller so whenever you see this this is not

1515
19:43:28,479 --> 19:43:30,960
something that's going to be read from the outside

1516
19:43:30,960 --> 19:43:34,800
everything's going to be read from the outside through this all right so keep

1517
19:43:34,800 --> 19:43:37,360
that in mind so let's go ahead as a caption in the case and we're going to

1518
19:43:37,360 --> 19:43:41,119
create a function in here called cache notes and its purpose is just to read

1519
19:43:41,119 --> 19:43:45,759
all the notes from the database and place it both in here internally and in

1520
19:43:45,759 --> 19:43:51,360
our node stream controller which is going to be read externally all right

1521
19:43:51,360 --> 19:43:54,960
so let's go and do that so i'm going to say future void and we're going to call

1522
19:43:54,960 --> 19:44:00,080
it cache and notes is async

1523
19:44:00,080 --> 19:44:04,000
then if you remember we already have an async function called get all notes so

1524
19:44:04,000 --> 19:44:10,399
i'm just going to say um final uh all notes is await

1525
19:44:10,399 --> 19:44:14,872
it's all notes okay so that's gonna get all our notes

1526
19:44:14,872 --> 19:44:20,720
and we're gonna assign that to our uh list of notes in here okay

1527
19:44:20,720 --> 19:44:25,039
so let's go in here and say as you remember get all notes returns on

1528
19:44:25,039 --> 19:44:29,191
iterable of all our notes and now we have a little bit of a problem here

1529
19:44:29,191 --> 19:44:32,551
because we're saying list of all notes and in here we're also saying list of

1530
19:44:32,551 --> 19:44:38,800
notes so we have to convert that terrible to a list of all notes okay

1531
19:44:38,800 --> 19:44:43,440
either we could do that or we could have this just sit there as an eye treble

1532
19:44:43,440 --> 19:44:47,679
it's completely up to you i have no issue with any and we could just go with

1533
19:44:47,679 --> 19:44:50,080
list so let's go in here and then we're gonna

1534
19:44:50,080 --> 19:44:55,831
say uh our notes is the private notes is all notes to

1535
19:44:55,831 --> 19:44:58,960
list and we also are going to update our

1536
19:44:58,960 --> 19:45:04,080
stream controller with that with the value of underscore nodes okay so we're

1537
19:45:04,080 --> 19:45:09,831
going to say notes stream controller if i can spell

1538
19:45:09,831 --> 19:45:14,080
and then we're going to add notes to the stream and remember a

1539
19:45:14,080 --> 19:45:19,119
stream is just the evolution of a value through time

1540
19:45:19,119 --> 19:45:22,399
and the first point of this evolution was an

1541
19:45:22,399 --> 19:45:25,919
empty list and then the next one is going to be

1542
19:45:25,919 --> 19:45:29,039
the notes that are all the notes are in the

1543
19:45:29,039 --> 19:45:33,360
database okay so that's just that we telling anyone listening to the

1544
19:45:33,360 --> 19:45:38,399
stream controller that hey here's a new value all right

1545
19:45:38,399 --> 19:45:42,720
okay so um now that we're doing this you can see

1546
19:45:42,720 --> 19:45:47,600
we're getting an error and dart is very actually this analyzes so clever because

1547
19:45:47,600 --> 19:45:52,399
you see it's telling us that the cache notes function is not being used now

1548
19:45:52,399 --> 19:45:56,000
you may be asking yourself well none of these functions are being used update

1549
19:45:56,000 --> 19:45:59,039
note for instance is not being used so if i

1550
19:45:59,039 --> 19:46:02,831
search for update notes let's see update

1551
19:46:02,831 --> 19:46:07,831
nodes could not update nodes so yeah you can see that update node function in

1552
19:46:07,831 --> 19:46:12,320
itself is not being used at all so why is it that the

1553
19:46:12,320 --> 19:46:15,831
analyzer is complaining about this function particularly and the reason is

1554
19:46:15,831 --> 19:46:20,479
because we have a little prefix behind this function name

1555
19:46:20,479 --> 19:46:24,080
and this prefix is telling the analyzer that this function is

1556
19:46:24,080 --> 19:46:29,039
private and private to this class now dart analyzer is looking at it and it's

1557
19:46:29,039 --> 19:46:32,479
like okay it's a private class but you're not using it so

1558
19:46:32,479 --> 19:46:35,831
the reason that other functions aren't being um

1559
19:46:35,831 --> 19:46:40,080
marked with this warning is that dart understands that they are not prefixed

1560
19:46:40,080 --> 19:46:44,399
with a with a with an underscore meaning that

1561
19:46:44,399 --> 19:46:48,960
they're going to be used publicly somewhere else so it's not going to yet

1562
19:46:48,960 --> 19:46:51,759
give us any warning saying that you haven't used those functions as soon as

1563
19:46:51,759 --> 19:46:55,191
you remove that you see that the warning also goes away but we're going to keep

1564
19:46:55,191 --> 19:46:58,320
down the score okay i just want to explain to you why you're seeing this a

1565
19:46:58,320 --> 19:47:03,279
little warning here okay now that we've done cash notes what

1566
19:47:03,279 --> 19:47:06,800
we're going to do is just to go to our as a caption case we're going to go to

1567
19:47:06,800 --> 19:47:10,080
the open function let's see if we can find it

1568
19:47:10,080 --> 19:47:12,720
here open

1569
19:47:12,720 --> 19:47:18,800
and upon opening our database so uh let me have a look at my notes

1570
19:47:18,800 --> 19:47:24,000
upon opening our database we are going to um

1571
19:47:24,000 --> 19:47:30,000
cache all those uh let's let me just have a look at my

1572
19:47:30,000 --> 19:47:33,279
notes yeah we're gonna basically go to uh

1573
19:47:33,279 --> 19:47:36,872
the open function that we have here future void open

1574
19:47:36,872 --> 19:47:39,440
i'm a bit surprised that i actually haven't

1575
19:47:39,440 --> 19:47:44,399
written any notes about that yeah i can see actually i have so that's good okay

1576
19:47:44,399 --> 19:47:47,512
so right after executing this command for

1577
19:47:47,512 --> 19:47:51,039
creating the notes table after we've created the user table and note table

1578
19:47:51,039 --> 19:47:54,960
and now that we know that we could open the database we also have to cache all

1579
19:47:54,960 --> 19:47:59,831
the notes in our local variable so let's just go and call

1580
19:47:59,831 --> 19:48:02,872
that function so we're just going to say await cache

1581
19:48:02,872 --> 19:48:07,679
notes okay so this means that when you call this

1582
19:48:07,679 --> 19:48:10,551
open function if after we made sure all the tables

1583
19:48:10,551 --> 19:48:13,512
everything is there if they didn't exist then we're gonna

1584
19:48:13,512 --> 19:48:17,360
read all the notes and place them inside this notes variable and also in this

1585
19:48:17,360 --> 19:48:21,440
stream controller okay so that's how we did the cache notes and i hope that you

1586
19:48:21,440 --> 19:48:24,872
could see the see the code and it wasn't hidden by the caption at

1587
19:48:24,872 --> 19:48:30,000
the bottom of the screen all right so that part is done now um

1588
19:48:30,000 --> 19:48:34,240
now what we need to do in here is to go to the next part of the code and as you

1589
19:48:34,240 --> 19:48:38,720
can see it says cache note in create node in create node function add the new

1590
19:48:38,720 --> 19:48:42,800
node to underscore nodes and the node stream controller

1591
19:48:42,800 --> 19:48:46,080
so i'm going to go to my nodes here creates

1592
19:48:46,080 --> 19:48:50,551
nodes and ensure that when we create the nodes

1593
19:48:50,551 --> 19:48:55,600
in our creates node

1594
19:48:55,600 --> 19:48:58,639
right here in this function in the create node you see at the moment what

1595
19:48:58,639 --> 19:49:01,759
we're doing is that we're just creating a node and returning it

1596
19:49:01,759 --> 19:49:07,191
that's good but i mean it's not good enough because as i said we need the ui

1597
19:49:07,191 --> 19:49:12,160
to be able to reactively listen to all the notes that are right now in the

1598
19:49:12,160 --> 19:49:16,479
database for that current user okay so in here after we create the note

1599
19:49:16,479 --> 19:49:21,600
we're actually going to add it to our array of nodes and then we're also going

1600
19:49:21,600 --> 19:49:25,600
to add it to our stream controller so i'm just going

1601
19:49:25,600 --> 19:49:31,831
to go in here and say nodes and add this new node in there and also

1602
19:49:31,831 --> 19:49:35,512
remember the stream controller's responsibilities just reflect the values

1603
19:49:35,512 --> 19:49:38,479
inside the underscore nodes to the outside world so all we have to do is

1604
19:49:38,479 --> 19:49:43,831
just to say notes stream controller add notes just like that because notes is

1605
19:49:43,831 --> 19:49:49,119
the source of truth as i mentioned before all right

1606
19:49:49,119 --> 19:49:52,872
great stuff uh now we need to take care of the other

1607
19:49:52,872 --> 19:49:58,240
function called delete note let's search for that

1608
19:49:58,240 --> 19:50:03,119
um delete notes all right so

1609
19:50:03,119 --> 19:50:06,551
what we need to do is to have a look at this uh functionality here and you can

1610
19:50:06,551 --> 19:50:11,279
see it says if we couldn't delete anything then uh throw this

1611
19:50:11,279 --> 19:50:15,759
exception but now we're gonna add an else statement in here and

1612
19:50:15,759 --> 19:50:20,000
by us being able to delete that note meaning that you can see the note id we

1613
19:50:20,000 --> 19:50:23,600
have which is this id so what we need to do as a caption in the case we need to

1614
19:50:23,600 --> 19:50:27,831
actually remove that note also from our local cache so we're going to say notes

1615
19:50:27,831 --> 19:50:31,360
remove where and this is the note and then i'm going

1616
19:50:31,360 --> 19:50:36,160
to say note that id should be equal to that id

1617
19:50:36,160 --> 19:50:40,720
after doing that we could just say note stream controller add

1618
19:50:40,720 --> 19:50:44,551
notes and you could be try you could try to be clever in here and you for

1619
19:50:44,551 --> 19:50:47,679
instance could say oh you see that

1620
19:50:47,679 --> 19:50:51,600
who says that that note actually exists in our cache we can't 100 be sure about

1621
19:50:51,600 --> 19:50:54,800
that but if you look at the signature of the remove where function

1622
19:50:54,800 --> 19:51:00,399
um removes all objects oh maybe we don't have the ability to actually know

1623
19:51:00,399 --> 19:51:04,800
if that node was deleted but what you could do you could just say count before

1624
19:51:04,800 --> 19:51:09,191
is notes count and then you could in here or length

1625
19:51:09,191 --> 19:51:12,960
and here you could just say if notes links

1626
19:51:12,960 --> 19:51:18,240
is not count before then you can update your stream i don't plan to do that but

1627
19:51:18,240 --> 19:51:22,479
you can you can try to do that if you want to it's just a safeguard for you to

1628
19:51:22,479 --> 19:51:28,320
say i'm gonna update my out outside facing stream only if i actually could

1629
19:51:28,320 --> 19:51:31,759
delete this note from my cache if you think it's worth it i don't think

1630
19:51:31,759 --> 19:51:35,440
it's worth it but that's just an opinion

1631
19:51:35,440 --> 19:51:39,679
so we're going to leave it like this as the caption also indicates

1632
19:51:39,679 --> 19:51:43,440
now you see we also have a functionality to delete all nodes so

1633
19:51:43,440 --> 19:51:47,191
let me find that function all nodes

1634
19:51:47,191 --> 19:51:54,800
all right so let's go in our delete all nodes in here find that function and

1635
19:51:54,800 --> 19:51:58,399
you can see right now what it what it's doing is just returning the number of

1636
19:51:58,399 --> 19:52:01,440
deleted nodes now what we're going to do we're going

1637
19:52:01,440 --> 19:52:05,512
to say final uh what should we call it number of

1638
19:52:05,512 --> 19:52:08,720
deletions is equal to this and we're gonna return

1639
19:52:08,720 --> 19:52:12,399
that number of deletions okay because i mean i'm doing that simply because we

1640
19:52:12,399 --> 19:52:17,831
need to do some work in in the middle here okay

1641
19:52:17,831 --> 19:52:21,679
so then what we're gonna do is gonna say notes

1642
19:52:21,679 --> 19:52:27,119
is an empty list all right so we're resetting the notes and then after doing

1643
19:52:27,119 --> 19:52:30,479
that we're also going to update our stream controller so we're going to say

1644
19:52:30,479 --> 19:52:34,399
add the underscore nodes to stream control and then return the number of

1645
19:52:34,399 --> 19:52:38,960
deletions so let's make sure that our local cache is updated and also that the

1646
19:52:38,960 --> 19:52:42,399
user-facing interface of our class which is the

1647
19:52:42,399 --> 19:52:48,720
stream controller is also updated with the latest information

1648
19:52:48,720 --> 19:52:51,600
okay next thing that we need to do as you can see in the cache that says

1649
19:52:51,600 --> 19:52:56,872
update caching get node remove old node with same id and add the new one on and

1650
19:52:56,872 --> 19:53:04,080
update this stream so let's go to our git node

1651
19:53:04,080 --> 19:53:10,000
okay so um

1652
19:53:10,000 --> 19:53:13,679
let's have a look at our get note in here then

1653
19:53:13,679 --> 19:53:17,279
and at the moment as you can see in here what it's doing is

1654
19:53:17,279 --> 19:53:22,160
oops that's not get note um here is get note

1655
19:53:22,160 --> 19:53:24,160
right there okay

1656
19:53:24,160 --> 19:53:28,080
and as you can see here uh we're basically what we're doing is that we're

1657
19:53:28,080 --> 19:53:32,160
saying um upon you trying to read a note from the

1658
19:53:32,160 --> 19:53:36,551
database we're literally just making a query to the database and then if we

1659
19:53:36,551 --> 19:53:42,080
could find that item we are returning it by creating a database node from

1660
19:53:42,080 --> 19:53:48,320
from a row that you can see right here uh but what we're gonna do is that if

1661
19:53:48,320 --> 19:53:53,440
you try to get a note in there is a possibility that we already had that

1662
19:53:53,440 --> 19:53:58,320
note cached locally in our notes array but that note is

1663
19:53:58,320 --> 19:54:03,679
uh outdated meaning that the copy that we had in our cache is not really

1664
19:54:03,679 --> 19:54:07,360
updated with the latest changes that have been applied to the database so it

1665
19:54:07,360 --> 19:54:13,360
makes good sense right here to now upon creating a new instance of database node

1666
19:54:13,360 --> 19:54:17,279
actually to update our local cache as well okay so i'm just going to say final

1667
19:54:17,279 --> 19:54:21,119
note is equal to that and we're going to return that node

1668
19:54:21,119 --> 19:54:25,440
bill right here so this code is the exact same as it was before except we're

1669
19:54:25,440 --> 19:54:30,872
now assigning the return value of from row to a new local variable here okay

1670
19:54:30,872 --> 19:54:34,320
so let's go to our notes and say remove where

1671
19:54:34,320 --> 19:54:38,160
and i'm going to say in here note and i'm going to say i'm going to say note

1672
19:54:38,160 --> 19:54:42,960
id should be equal to id which is

1673
19:54:42,960 --> 19:54:48,080
this thing here okay so we first remove that node existing node from the notes

1674
19:54:48,080 --> 19:54:52,320
array then we say nodes add

1675
19:54:52,320 --> 19:54:56,160
and we add the new nodes in there and then what we're going to do is right

1676
19:54:56,160 --> 19:55:01,759
after that update the stream controller which is our outside facing um interface

1677
19:55:01,759 --> 19:55:07,279
so note stream controller add notes okay so you can see this pattern so we first

1678
19:55:07,279 --> 19:55:11,759
always update our local cache and then we reflect those changes to the outside

1679
19:55:11,759 --> 19:55:17,512
world all right all right great stuff so um

1680
19:55:17,512 --> 19:55:20,100
that's for note stream controller and notes um

1681
19:55:20,100 --> 19:55:23,512
[Music] now there's another function which is

1682
19:55:23,512 --> 19:55:28,872
called update notes and let's go to update node actually before

1683
19:55:28,872 --> 19:55:33,191
we have a look at anything else and you can see in here when we update that

1684
19:55:33,191 --> 19:55:36,872
first we make sure that that node exists so let's put actually a comment in here

1685
19:55:36,872 --> 19:55:40,551
make sure note exists

1686
19:55:40,551 --> 19:55:44,080
and then we say update db i'm going to expand this code

1687
19:55:44,080 --> 19:55:47,679
so you see better that's the update db part

1688
19:55:47,679 --> 19:55:52,320
and if we couldn't update anything then we throw it could not update note and

1689
19:55:52,320 --> 19:55:57,279
you can see that in here upon doing an update node what we want

1690
19:55:57,279 --> 19:56:00,479
to do is i mean it is quite clever what we've done so far because it means that

1691
19:56:00,479 --> 19:56:04,160
we've updated the database but what we do then in order to return the new

1692
19:56:04,160 --> 19:56:07,831
refresh node is that actually we call getsnow so

1693
19:56:07,831 --> 19:56:11,440
that is that's pretty good so but what we also need to do is just to

1694
19:56:11,440 --> 19:56:15,119
make sure our local and cache is also updated

1695
19:56:15,119 --> 19:56:18,160
so let's go in here and say final

1696
19:56:18,160 --> 19:56:21,919
updated nodes and what we're going to do as the

1697
19:56:21,919 --> 19:56:25,919
caption at the bottom of the screen indicates we're going to remove that

1698
19:56:25,919 --> 19:56:31,119
notes from our local cache and add the updated note in there and then

1699
19:56:31,119 --> 19:56:35,512
send the add message to our stream controller as well so let's just say

1700
19:56:35,512 --> 19:56:38,639
notes and remove

1701
19:56:38,639 --> 19:56:42,000
so we're going to remove the old object from our cache and i'm just going to say

1702
19:56:42,000 --> 19:56:46,160
notes as long as the notes id is equal to the

1703
19:56:46,160 --> 19:56:52,399
updated notes id so that's going to remove the existing existing node

1704
19:56:52,399 --> 19:56:56,399
and i'm going to say notes add and we have the

1705
19:56:56,399 --> 19:57:01,119
updated node in here as soon as you change your

1706
19:57:01,119 --> 19:57:06,320
notes and local cache then you need to also update your stream so the stream

1707
19:57:06,320 --> 19:57:08,800
controller add notes

1708
19:57:08,800 --> 19:57:13,360
all right and then we return the updated notes in

1709
19:57:13,360 --> 19:57:17,440
here so what happening here is just that we updated something in the database we

1710
19:57:17,440 --> 19:57:23,119
got the new object from uh the database we removed that uh node from a local

1711
19:57:23,119 --> 19:57:28,639
cache and then we added it in there okay added it back that's the updated node

1712
19:57:28,639 --> 19:57:32,800
all right all right great stuff that's for update

1713
19:57:32,800 --> 19:57:38,000
notes and then what we need is as the captioning case is get or create user in

1714
19:57:38,000 --> 19:57:41,919
node service so um

1715
19:57:41,919 --> 19:57:45,759
this is a function that we're going to actually use in the next chapter

1716
19:57:45,759 --> 19:57:48,800
um so

1717
19:57:48,800 --> 19:57:52,399
how is this function useful this is the first time we're actually seeing the the

1718
19:57:52,399 --> 19:57:54,960
um signature for this function as the name

1719
19:57:54,960 --> 19:57:59,191
in the case it says get or create user you see

1720
19:57:59,191 --> 19:58:04,320
when you at the moment go into our user interface let's go to the login view for

1721
19:58:04,320 --> 19:58:06,960
instance login view here

1722
19:58:06,960 --> 19:58:12,160
i'm gonna remove the explorer so you see the code in its entirety and right here

1723
19:58:12,160 --> 19:58:16,479
when we do auth service firebase login then we get the current user if the

1724
19:58:16,479 --> 19:58:21,360
email is verified is that we're going to nodes routes now let's then go to our

1725
19:58:21,360 --> 19:58:25,279
notes view you can see right now notes view the only thing it's doing is that

1726
19:58:25,279 --> 19:58:29,279
it's creating an app bar with a um sorry it's creating a scaffold with an app bar

1727
19:58:29,279 --> 19:58:34,000
that we have our logout button in and let's go actually let me bring up

1728
19:58:34,000 --> 19:58:40,720
scr cpy so i'm gonna use my email address in the login screen so um

1729
19:58:40,720 --> 19:58:46,639
i actually may need to go and connect this device to wi-fi so boom

1730
19:58:46,639 --> 19:58:50,639
i'm gonna open up um

1731
19:58:50,639 --> 19:58:56,160
that login with my user so i'm to get rid of all those

1732
19:58:56,160 --> 19:59:00,720
i'm going to login in here use oops uh we've sent you an email verification

1733
19:59:00,720 --> 19:59:03,279
okay maybe i should actually log in with the

1734
19:59:03,279 --> 19:59:08,000
user who has already been verified

1735
19:59:08,000 --> 19:59:12,639
so let's log in with this user you see in the main ui of the application um of

1736
19:59:12,639 --> 19:59:17,039
our application we have this hello world right there because

1737
19:59:17,039 --> 19:59:22,720
um you can see the body of the the body of our notes view right now it

1738
19:59:22,720 --> 19:59:27,119
just says hello world so you could pretty much say that the notes view has

1739
19:59:27,119 --> 19:59:31,039
literally no contact at the moment with the notes service

1740
19:59:31,039 --> 19:59:36,080
but we're gonna fix this soon by first making sure that the note service allows

1741
19:59:36,080 --> 19:59:40,551
the user interface to create a new user upon going to the

1742
19:59:40,551 --> 19:59:44,960
screen so when we come to the screen we need to make sure that there is a user

1743
19:59:44,960 --> 19:59:48,479
associated with the current firebase user

1744
19:59:48,479 --> 19:59:53,512
inside our database okay so that's what we need this little uh

1745
19:59:53,512 --> 19:59:59,119
good function called get or create user which returns a database user in our

1746
19:59:59,119 --> 20:00:04,240
notes service so we're gonna use that in the next chapter so remember that okay

1747
20:00:04,240 --> 20:00:08,000
but we need to create the function at this right now

1748
20:00:08,000 --> 20:00:13,600
all right let's go then and create this function as the name indicates so future

1749
20:00:13,600 --> 20:00:19,600
and database user and we're going to say get or create user and it has a required

1750
20:00:19,600 --> 20:00:23,279
parameter i can see required stream email

1751
20:00:23,279 --> 20:00:27,191
and it's an async function right so um

1752
20:00:27,191 --> 20:00:33,440
we need to basically have a look at this how we can create this user

1753
20:00:33,440 --> 20:00:37,191
so the goal in here is to first we try to

1754
20:00:37,191 --> 20:00:41,039
get this user from the database if that user doesn't exist then we're going to

1755
20:00:41,039 --> 20:00:45,919
create that user and then in both cases we're going to return either the

1756
20:00:45,919 --> 20:00:49,600
fetched or the created user back to the

1757
20:00:49,600 --> 20:00:54,479
caller so let's go in here and just say

1758
20:00:54,479 --> 20:00:58,240
final user is await

1759
20:00:58,240 --> 20:01:02,800
get user okay and you see the email just fits in there perfectly but if you

1760
20:01:02,800 --> 20:01:06,240
remember from the implementation of get user let's go in there and expand this

1761
20:01:06,240 --> 20:01:08,551
if the user couldn't be found then it

1762
20:01:08,551 --> 20:01:13,831
throws an error says could not find user that's rq so that if that function

1763
20:01:13,831 --> 20:01:16,872
throws that error then we're going to create that user so if that user doesn't

1764
20:01:16,872 --> 20:01:20,320
exist in the database it needs to be created so let's put a try statement in

1765
20:01:20,320 --> 20:01:23,831
here and then we're going to say on could not find user

1766
20:01:23,831 --> 20:01:28,000
so here is the user so in this case in the try

1767
20:01:28,000 --> 20:01:32,160
statement it means that we could get the user okay so if we get to this return

1768
20:01:32,160 --> 20:01:35,679
statement it means that get user function didn't throw any exceptions

1769
20:01:35,679 --> 20:01:39,039
such as could not find user in the case that we could not find user we're going

1770
20:01:39,039 --> 20:01:42,960
to actually create a user so let's just say created user

1771
20:01:42,960 --> 20:01:48,551
is a way to create user with that email and then we're gonna say

1772
20:01:48,551 --> 20:01:54,000
return created user and if you look at the create user function as well right

1773
20:01:54,000 --> 20:02:00,800
here it also i believe does it throw yes so if it couldn't create that user it if

1774
20:02:00,800 --> 20:02:04,800
it's the result was empty it just says user oh no that's that's where we get

1775
20:02:04,800 --> 20:02:08,872
the user sorry about that we need to have a look at this insert so

1776
20:02:08,872 --> 20:02:11,919
yeah that's the only thing it's doing so it's not basically throwing any other

1777
20:02:11,919 --> 20:02:14,960
error okay the only thing it does is if you're

1778
20:02:14,960 --> 20:02:18,000
creating a user that already exists i'm going to draw an error

1779
20:02:18,000 --> 20:02:21,119
so here we have where and we've ended up with a

1780
20:02:21,119 --> 20:02:25,119
try and catch block that could also throw an exception which

1781
20:02:25,119 --> 20:02:30,320
we haven't handled all right so what you could do is just to do a whole catch in

1782
20:02:30,320 --> 20:02:34,960
here and then don't do anything with it i like this pattern quite a lot in my

1783
20:02:34,960 --> 20:02:38,551
code at least because if i don't do this then i don't actually have the

1784
20:02:38,551 --> 20:02:42,399
possibility to debug my application later so i can't put like a breakpoint

1785
20:02:42,399 --> 20:02:47,039
in here and see did any other exception arise if you don't do that because then

1786
20:02:47,039 --> 20:02:50,872
the exception will be thrown to the caller and the caller will have to

1787
20:02:50,872 --> 20:02:54,080
handle that but in this case we're not really handling the exception we're just

1788
20:02:54,080 --> 20:02:58,479
catching it and then we're throwing it back to the call side this only allows

1789
20:02:58,479 --> 20:03:01,679
you basically to put a breakpoint in here if you want to debug your

1790
20:03:01,679 --> 20:03:06,639
application later okay so it's just a it's just in quite a cheap way of making

1791
20:03:06,639 --> 20:03:12,240
your code easier to debug all right for those of you who are interested in this

1792
20:03:12,240 --> 20:03:16,000
all right fantastic and we've covered a lot and

1793
20:03:16,000 --> 20:03:21,919
there's still a lot to do but we've come far so congratulations um

1794
20:03:21,919 --> 20:03:24,479
let's have a look here it says let's get ready for the next chapter and upon

1795
20:03:24,479 --> 20:03:28,720
logging in we need to call our get or create user function and have the user

1796
20:03:28,720 --> 20:03:31,039
ready and this is what i mentioned to you

1797
20:03:31,039 --> 20:03:33,512
before inside our notes view at the moment

1798
20:03:33,512 --> 20:03:36,960
we don't have any functionality that creates

1799
20:03:36,960 --> 20:03:40,872
a new user or gets the current user based on their email if they already

1800
20:03:40,872 --> 20:03:45,440
exist in the database and that is going to be like the actual uh

1801
20:03:45,440 --> 20:03:50,320
first bit of logic which we're gonna do in the next chapter which integrates our

1802
20:03:50,320 --> 20:03:53,831
notes view with the note server so the tempo

1803
20:03:53,831 --> 20:03:58,551
of our course right now is gonna shift towards more and more to the notes view

1804
20:03:58,551 --> 20:04:04,080
until we have a list of notes and allow the user to create notes update notes so

1805
20:04:04,080 --> 20:04:07,919
it's exciting times we've come far we've done quite a lot of work up up to this

1806
20:04:07,919 --> 20:04:11,279
point um and there's still a lot left but um

1807
20:04:11,279 --> 20:04:14,960
hopefully you're getting the attack at that like the

1808
20:04:14,960 --> 20:04:19,191
tempo of the uh of the course better and better and you

1809
20:04:19,191 --> 20:04:22,399
can see why we are doing things the way we are

1810
20:04:22,399 --> 20:04:25,679
doing so uh congratulations again

1811
20:04:25,679 --> 20:04:29,039
and uh get some refreshments if you want to

1812
20:04:29,039 --> 20:04:32,872
again coffee tea and i'll see you in the next chapter

1813
20:04:32,872 --> 20:04:36,720
hello everyone and welcome to chapter 29 of this flutter course in the previous

1814
20:04:36,720 --> 20:04:40,872
chapter as you saw we worked with our note servers and we talked about streams

1815
20:04:40,872 --> 20:04:45,679
and stream controllers we have put uh you know a lot of effort

1816
20:04:45,679 --> 20:04:49,360
in our note service in order to talk with the database and kind of read from

1817
20:04:49,360 --> 20:04:52,479
the database and cache the red information

1818
20:04:52,479 --> 20:04:56,240
in our notes uh member variable so if you haven't watched the previous chapter

1819
20:04:56,240 --> 20:04:58,800
i highly suggest that you do that because

1820
20:04:58,800 --> 20:05:01,360
moving forward with this course without having watched his chapters

1821
20:05:01,360 --> 20:05:05,512
chronologically makes it quite difficult for you to proceed so

1822
20:05:05,512 --> 20:05:08,639
i'm gonna build on top of the previous chapter as we've done with the other

1823
20:05:08,639 --> 20:05:12,872
chapters as well and in this chapter we're gonna basically start putting in

1824
20:05:12,872 --> 20:05:17,039
place uh all the structure necessary in in order for

1825
20:05:17,039 --> 20:05:20,399
us to be able to display all the user generated notes

1826
20:05:20,399 --> 20:05:24,800
in the notes view okay so as you can see we have almost

1827
20:05:24,800 --> 20:05:29,440
everything in place um there are a few functions left to do and we also in this

1828
20:05:29,440 --> 20:05:33,119
video in this chapter we're going to talk about future builder and also a

1829
20:05:33,119 --> 20:05:36,399
stream builder and i don't think we've talked about

1830
20:05:36,399 --> 20:05:40,240
stream builder before we talked about future builder so that's going to be an

1831
20:05:40,240 --> 20:05:45,039
exciting um new thing to talk about in this chapter

1832
20:05:45,039 --> 20:05:48,800
all right so i've just i've talked about this in the

1833
20:05:48,800 --> 20:05:52,160
um in the outro to the previous chapter

1834
20:05:52,160 --> 20:05:57,119
that what we need to do in this chapter right now in chapter 29 is to

1835
20:05:57,119 --> 20:06:01,191
allow the user to to go to the notes view and upon going to the note c we're

1836
20:06:01,191 --> 20:06:05,440
all always going to make sure that that user exists in our database now you see

1837
20:06:05,440 --> 20:06:10,240
we have firebase right here and then our user has upon coming to the notes view

1838
20:06:10,240 --> 20:06:14,960
that user must have logged in with a verified email address so that user

1839
20:06:14,960 --> 20:06:19,360
exists we know that that user exists in firebase and has a verified email

1840
20:06:19,360 --> 20:06:24,479
address but that user might not exist in our database remember we're gonna store

1841
20:06:24,479 --> 20:06:29,600
the user generated notes in our database and hook them to the user who created

1842
20:06:29,600 --> 20:06:33,512
those notes okay so um so upon going to the notes view we

1843
20:06:33,512 --> 20:06:38,240
always need to make sure that that user exists in the database

1844
20:06:38,240 --> 20:06:40,960
and the way to do that if you remember let me just bring the code you don't

1845
20:06:40,960 --> 20:06:47,360
have to try to remember that so let's go into our notes service you can see

1846
20:06:47,360 --> 20:06:51,600
we have a function called get all notes and but we don't have any functionality

1847
20:06:51,600 --> 20:06:56,960
at the moment to for instance give us the notes for a a specific user so

1848
20:06:56,960 --> 20:07:01,039
if we want to do that if you want to for instance get grab all the notes for a

1849
20:07:01,039 --> 20:07:05,119
specific user then we're going to go with a user's email address because if

1850
20:07:05,119 --> 20:07:09,360
you look at the way our application is working with um

1851
20:07:09,360 --> 20:07:13,512
the current user you can see we're working always with officer so we're not

1852
20:07:13,512 --> 20:07:18,800
going through um firebase directly and our auth service also has an off user so

1853
20:07:18,800 --> 20:07:23,600
let's have a look at our auth and have a look at auth user and you'll see that

1854
20:07:23,600 --> 20:07:28,080
our auth user only has one flag that just says is email verified

1855
20:07:28,080 --> 20:07:33,191
so how do we go and call this function which is called get or create user on

1856
20:07:33,191 --> 20:07:37,360
our note service where we don't actually have an email address for our current

1857
20:07:37,360 --> 20:07:40,240
user and that's what we need to do we need to

1858
20:07:40,240 --> 20:07:44,872
go ahead and add an email field to our off user

1859
20:07:44,872 --> 20:07:49,119
and so as the caption indicates here we need to add this field to our off user

1860
20:07:49,119 --> 20:07:53,191
okay so i'm going to change the screen layout a little bit so you see better

1861
20:07:53,191 --> 20:07:56,800
and let's go ahead and add a new field in there i'm going to have a look at my

1862
20:07:56,800 --> 20:08:02,639
notes also um or user so and add a new field in here and we

1863
20:08:02,639 --> 20:08:06,479
just call it the final string um email

1864
20:08:06,479 --> 20:08:12,240
just like that and get help from your editor in order to add the email field

1865
20:08:12,240 --> 20:08:17,360
add final field here so this is also going to be a required parameter like

1866
20:08:17,360 --> 20:08:20,240
this and i'm just going to make it required like this and it come at the

1867
20:08:20,240 --> 20:08:25,679
end to get the formatting done and here where we actually creating our

1868
20:08:25,679 --> 20:08:30,240
instance of auth user what we're going to do is to say we return an auth user

1869
20:08:30,240 --> 20:08:34,160
and the email is already actually in the firebase user let's go to the firebase

1870
20:08:34,160 --> 20:08:40,240
user and look for email you see there is a getter called email okay

1871
20:08:40,240 --> 20:08:45,279
and the thing is that this email getter is optional string so what we need to do

1872
20:08:45,279 --> 20:08:50,000
is just to make it optional maybe in our off user as well okay so in here then

1873
20:08:50,000 --> 20:08:53,279
where we create the off user we're just going to say the email field is equal to

1874
20:08:53,279 --> 20:08:57,512
user email and put a comma at the end here and a comma here as well to get the

1875
20:08:57,512 --> 20:09:01,512
format going so all we did in here would say that our

1876
20:09:01,512 --> 20:09:06,551
r auth user has an optional string as its email and that email string is read

1877
20:09:06,551 --> 20:09:10,551
from the firebase user that's all nothing complicated

1878
20:09:10,551 --> 20:09:14,080
all right

1879
20:09:14,080 --> 20:09:18,000
okay what we need to do then is to as the caption indicates go to our notes

1880
20:09:18,000 --> 20:09:23,512
view and grab the let's go notes view here and we need to then read the

1881
20:09:23,512 --> 20:09:28,080
current user's email address okay so what we're gonna do is saying that our

1882
20:09:28,080 --> 20:09:32,320
auth user has an optional email but we we as an application developer are sure

1883
20:09:32,320 --> 20:09:36,872
that because we're using email and password registration we are sure that

1884
20:09:36,872 --> 20:09:41,360
any user who ends up in the notes view has an email address okay so

1885
20:09:41,360 --> 20:09:45,360
that's an assumption we're going to make although our off

1886
20:09:45,360 --> 20:09:48,479
user which was let's see if we can find it

1887
20:09:48,479 --> 20:09:52,800
off user here although the off user says that i optionally have an email but

1888
20:09:52,800 --> 20:09:56,240
we're always going to say no that email should exist because we're only at the

1889
20:09:56,240 --> 20:10:01,039
moment using email password sign in method all right so

1890
20:10:01,039 --> 20:10:05,679
in order for this notes view to be able to make a call to the notes service and

1891
20:10:05,679 --> 20:10:09,191
grab or sorry to create or get the current

1892
20:10:09,191 --> 20:10:13,759
user it needs an email so let's go ahead and expose a functionality in our notes

1893
20:10:13,759 --> 20:10:17,039
view as the caption indicates that grabs the

1894
20:10:17,039 --> 20:10:22,000
user's email so let's go in here and i'm going to go to my notes view as well in

1895
20:10:22,000 --> 20:10:25,279
my notes all right

1896
20:10:25,279 --> 20:10:29,512
and what we're going to do in there is just to expose the user email so let's

1897
20:10:29,512 --> 20:10:34,720
just say string get user email

1898
20:10:34,720 --> 20:10:38,639
let's get rid of this side explorer as well

1899
20:10:38,639 --> 20:10:43,191
and i'm going to say off service firebase

1900
20:10:43,191 --> 20:10:47,119
all right off service i don't think it's imported so let's actually see is it

1901
20:10:47,119 --> 20:10:50,800
imported

1902
20:10:50,800 --> 20:10:54,080
off service yeah it is imported okay that's good

1903
20:10:54,080 --> 20:10:57,831
about firebase

1904
20:10:57,831 --> 20:11:01,440
and this can't be equal so that's why it's going a little bit crazy firebase

1905
20:11:01,440 --> 20:11:05,679
and then we're going to say current user and you see this current user is now

1906
20:11:05,679 --> 20:11:09,119
optional but since we are the application developer and we're sure

1907
20:11:09,119 --> 20:11:12,872
that if you end up in the notes view then you should have a current user

1908
20:11:12,872 --> 20:11:16,000
that's what we've already made sure in the previous steps okay so if you look

1909
20:11:16,000 --> 20:11:19,191
at the login screen for instance in our login

1910
20:11:19,191 --> 20:11:24,479
view so i open the login view here we're saying if the current user exists and is

1911
20:11:24,479 --> 20:11:27,759
email verified is true then go to the notes view so

1912
20:11:27,759 --> 20:11:31,191
then we can be sure that inside the notes view we already have a user okay

1913
20:11:31,191 --> 20:11:34,479
so this current user in firebase currently

1914
20:11:34,479 --> 20:11:39,279
says optional but we're gonna unwrap it force on rapid okay and then we're gonna

1915
20:11:39,279 --> 20:11:44,639
say email and force unwrap that too

1916
20:11:44,639 --> 20:11:48,551
all right so um that's what we've done so now we get the

1917
20:11:48,551 --> 20:11:54,639
user's email now if you remember inside our um

1918
20:11:54,639 --> 20:11:58,320
inside our note service we have two really important functions which at the

1919
20:11:58,320 --> 20:12:04,872
moment are at the bottom of this class which are called open and close

1920
20:12:04,872 --> 20:12:08,872
respectively and what we need to make sure is that

1921
20:12:08,872 --> 20:12:15,512
upon going to notes view that our database is actually open so we

1922
20:12:15,512 --> 20:12:20,800
cannot continue to read stuff from various parts of our database if the

1923
20:12:20,800 --> 20:12:24,551
database handle hasn't actually be created so

1924
20:12:24,551 --> 20:12:28,479
let's then go to our uh notes view and

1925
20:12:28,479 --> 20:12:31,919
in here as you can see this is the reason we made this and notes view a

1926
20:12:31,919 --> 20:12:37,191
stateful widget in that we need to now hook into the two life cycle events of

1927
20:12:37,191 --> 20:12:42,000
our notes you and to open our database upon the creation of this node 2 and

1928
20:12:42,000 --> 20:12:45,512
then close the database upon it being disposed so

1929
20:12:45,512 --> 20:12:49,039
as the caption indicates let's go and overwrite the init state function in

1930
20:12:49,039 --> 20:12:52,720
here okay and what we're going to do in here we're going to say

1931
20:12:52,720 --> 20:12:57,512
uh now we want to basically have a notes service in our

1932
20:12:57,512 --> 20:13:03,360
init state and we also need to make sure that it is open so

1933
20:13:03,360 --> 20:13:07,600
so let's have a look uh let me have a look in my notes as well

1934
20:13:07,600 --> 20:13:10,160
all right so uh

1935
20:13:10,160 --> 20:13:14,000
we need to open the database in there so let's go and

1936
20:13:14,000 --> 20:13:17,600
grab a hold of our notes service so we don't have a note service right now but

1937
20:13:17,600 --> 20:13:23,831
we're going to create that so let's just say late final notes

1938
20:13:23,831 --> 20:13:30,000
so this is our uh notes view uh undefined class notes service

1939
20:13:30,000 --> 20:13:34,080
haven't we imported note service and we haven't so let's just do it on import

1940
20:13:34,080 --> 20:13:38,720
right now so this is our notes view grabbing hold of an instance of node

1941
20:13:38,720 --> 20:13:44,399
server so that it can work with it okay so um

1942
20:13:44,399 --> 20:13:48,000
let's go ahead and do that then so we're going to go and say

1943
20:13:48,000 --> 20:13:52,720
notes service is equal to an instance of nodes

1944
20:13:52,720 --> 20:13:57,759
service like this and then we're going to say nodeservice.open

1945
20:13:57,759 --> 20:14:01,039
and right now this function is a future void

1946
20:14:01,039 --> 20:14:04,720
and you may not really be able to do an

1947
20:14:04,720 --> 20:14:08,800
async in your init stating here but we're just for now we're just saying

1948
20:14:08,800 --> 20:14:14,800
open all right so open the database and that's all we have to do and then we

1949
20:14:14,800 --> 20:14:18,872
have to take care of closing the database so let's go ahead and say

1950
20:14:18,872 --> 20:14:23,039
upon disposing upon this uh notes views disposal we're

1951
20:14:23,039 --> 20:14:27,039
also going to close the database because we're good citizens of the dart lab so

1952
20:14:27,039 --> 20:14:30,639
we're not just going to leave the database open so node service and we're

1953
20:14:30,639 --> 20:14:35,440
going to say close all right and that's that's pretty much it that's all

1954
20:14:35,440 --> 20:14:38,639
we have to do for now

1955
20:14:38,639 --> 20:14:45,440
okay great stuff let's save this and um i'm also going to maybe bring a crcpy

1956
20:14:45,440 --> 20:14:49,191
here and what i'm gonna do then is to do a

1957
20:14:49,191 --> 20:14:52,960
hot restart and

1958
20:14:52,960 --> 20:14:57,679
let's just log out and then i'm gonna log in with that user

1959
20:14:57,679 --> 20:15:03,119
again if i can spell pick solitude

1960
20:15:03,119 --> 20:15:07,119
um foo barb has horrible password i've

1961
20:15:07,119 --> 20:15:11,679
mentioned this before authentication error

1962
20:15:11,679 --> 20:15:16,639
foo barbaz it could be because this uh phone

1963
20:15:16,639 --> 20:15:21,831
doesn't have wi-fi right now so let's go in here turn wi-fi on and then i'm gonna

1964
20:15:21,831 --> 20:15:24,800
go back here android phones usually initial

1965
20:15:24,800 --> 20:15:28,240
initialize their wi-fi site quite fast so now we should be able to say login

1966
20:15:28,240 --> 20:15:31,119
and we end up in the main ui of the application so this open function has

1967
20:15:31,119 --> 20:15:34,240
gone well and i can see that we haven't had any

1968
20:15:34,240 --> 20:15:38,080
exceptions thrown in the debug console so

1969
20:15:38,080 --> 20:15:42,639
that was open and close so

1970
20:15:42,639 --> 20:15:48,000
so let's have a look in here um as you can see in the caption uh right

1971
20:15:48,000 --> 20:15:52,240
now we are what we're doing is that we're like issuing different functional

1972
20:15:52,240 --> 20:15:55,919
functions in our for instance let's have a look at delete user what it does is

1973
20:15:55,919 --> 20:16:00,479
that it says get database or throw um and at the moment this get database or

1974
20:16:00,479 --> 20:16:05,679
throw only thing it does is just make sure that this db is available in there

1975
20:16:05,679 --> 20:16:08,639
but it doesn't make sure that that database is open as such it just makes

1976
20:16:08,639 --> 20:16:13,360
sure that there is a database instance in the the internet in the node

1977
20:16:13,360 --> 20:16:17,191
service so what we need to make sure now is that

1978
20:16:17,191 --> 20:16:20,872
every function that works with our database first ensures that the database

1979
20:16:20,872 --> 20:16:25,360
not only is instance is there but that the database also

1980
20:16:25,360 --> 20:16:28,960
open all right because if you look at the

1981
20:16:28,960 --> 20:16:32,960
excuse me um here we have the open database and that basically

1982
20:16:32,960 --> 20:16:36,240
sets the instance to that database all right

1983
20:16:36,240 --> 20:16:40,639
so what we need to do is to create a little function that says ensure

1984
20:16:40,639 --> 20:16:45,039
database and what is it called ensure db is open so

1985
20:16:45,039 --> 20:16:47,919
uh i'm just going to go ahead and have a

1986
20:16:47,919 --> 20:16:55,679
look at my notes for ensure dbs open and um let's have a look at

1987
20:16:55,679 --> 20:17:00,080
putting that maybe above open in here okay so

1988
20:17:00,080 --> 20:17:04,080
if you're following along with me you just go to top of the open function and

1989
20:17:04,080 --> 20:17:09,279
we're just gonna say future void ensure db is open

1990
20:17:09,279 --> 20:17:13,759
and that's an async function all right

1991
20:17:13,759 --> 20:17:17,119
so what then we're going to do is just to

1992
20:17:17,119 --> 20:17:21,679
say um let's see

1993
20:17:21,679 --> 20:17:26,639
we're going to put a try block in here and let's go we see that our open

1994
20:17:26,639 --> 20:17:30,479
function at the moment throws an exception that says database

1995
20:17:30,479 --> 20:17:33,191
already open exception so what we need to make sure is that we cache that

1996
20:17:33,191 --> 20:17:39,679
exception so when our uh our uh notes view gets hot reloaded then

1997
20:17:39,679 --> 20:17:43,679
it shouldn't try to open the database over and over again and if it does then

1998
20:17:43,679 --> 20:17:46,720
this open function is going to throw an exception

1999
20:17:46,720 --> 20:17:51,119
and um and our ensure dbs open function is

2000
20:17:51,119 --> 20:17:55,039
going to catch that and it's just going to let it go all right so all it does is

2001
20:17:55,039 --> 20:17:58,160
that we just ensure that we're not opening

2002
20:17:58,160 --> 20:18:01,512
the database over and over again because it's just an overhead okay

2003
20:18:01,512 --> 20:18:06,000
so what we're going to do then is we're going to say awaits open in here

2004
20:18:06,000 --> 20:18:09,600
and in here we say we're catching database

2005
20:18:09,600 --> 20:18:14,000
already open exception and we're just going to let it go in this case so

2006
20:18:14,000 --> 20:18:20,320
we just say sorry on all right so now we have this

2007
20:18:20,320 --> 20:18:25,679
intro db function is open uh it's your db is open function

2008
20:18:25,679 --> 20:18:30,720
and we need to start using that um so let me bring up the right caption so

2009
20:18:30,720 --> 20:18:34,551
we need to start using ensure dbs open function in various functionalities in

2010
20:18:34,551 --> 20:18:38,720
our application so let's first go to delete user

2011
20:18:38,720 --> 20:18:42,399
here and uh we're just going to say await

2012
20:18:42,399 --> 20:18:49,360
ensure db is open that's the first place and let's go to create user

2013
20:18:49,360 --> 20:18:53,039
um we have a function called create user

2014
20:18:53,039 --> 20:18:56,240
here and we're gonna wait on ensure db is

2015
20:18:56,240 --> 20:18:59,919
open okay

2016
20:18:59,919 --> 20:19:03,440
that was create user now let's go to getuser

2017
20:19:03,440 --> 20:19:07,119
this function get user right here if i can go to it for some reason i'm

2018
20:19:07,119 --> 20:19:13,360
not able to go to it here and let's say wait db is over

2019
20:19:13,360 --> 20:19:18,320
uh that that that's that part let's go to get all notes

2020
20:19:18,320 --> 20:19:22,160
function get all notes and do the same thing await

2021
20:19:22,160 --> 20:19:27,440
on make sure db is open oh also i can see i didn't actually call

2022
20:19:27,440 --> 20:19:31,119
the function so let's make sure that i've done it in the other places i'm

2023
20:19:31,119 --> 20:19:35,279
just going to copy that code and ensure bb is open let's just make sure that i'm

2024
20:19:35,279 --> 20:19:40,160
actually calling the function and like i'm not like placing it just there

2025
20:19:40,160 --> 20:19:44,320
so it looks fine all right and so you have to do it in get all

2026
20:19:44,320 --> 20:19:48,399
nodes function as well and we're going to go to create node and

2027
20:19:48,399 --> 20:19:52,479
do the same thing so let's just go and await on

2028
20:19:52,479 --> 20:19:56,960
actually paste that code in there wait ensure db is open

2029
20:19:56,960 --> 20:20:01,039
and we're we need to do it in um so we not we've done it in create node

2030
20:20:01,039 --> 20:20:05,119
and let's go ahead to delete node delete node

2031
20:20:05,119 --> 20:20:08,551
and paste the function right there as well sorry paste the

2032
20:20:08,551 --> 20:20:13,039
invocation of the function delete all nodes

2033
20:20:13,039 --> 20:20:18,479
as well delete all nodes right there do the same thing and also we do it in

2034
20:20:18,479 --> 20:20:21,279
gets note here

2035
20:20:21,279 --> 20:20:26,872
the same thing and also we have what else do we have um

2036
20:20:26,872 --> 20:20:30,399
update notes right there

2037
20:20:30,399 --> 20:20:35,039
and we do it as the first call

2038
20:20:35,039 --> 20:20:38,479
but and then uh where else do we have to do it

2039
20:20:38,479 --> 20:20:43,119
let's see we've done it now delete user yeah i think now we place the ensure dbs

2040
20:20:43,119 --> 20:20:46,639
open all those calls all right

2041
20:20:46,639 --> 20:20:53,512
okay that was a lot of information um so what we need to do now is to

2042
20:20:53,512 --> 20:20:58,720
make sure basically that we work on our notes view as we promised in the

2043
20:20:58,720 --> 20:21:02,080
beginning of this chapter now you see

2044
20:21:02,080 --> 20:21:06,960
the reason that we created the ensure db is open is that before any of these

2045
20:21:06,960 --> 20:21:11,831
functions are called that our code is actually going to open the database for

2046
20:21:11,831 --> 20:21:16,399
us that means in our notes view we don't actually have to do this anymore because

2047
20:21:16,399 --> 20:21:21,191
we know that by issuing any database related commands to our nodes service

2048
20:21:21,191 --> 20:21:25,191
that that function in itself is going to open the database for us it's just a

2049
20:21:25,191 --> 20:21:29,119
nice little feature in our node servers to make sure that we don't have to make

2050
20:21:29,119 --> 20:21:35,119
an extra call to open the database um before we

2051
20:21:35,119 --> 20:21:39,191
start using our node service okay so it's just like a convenient a little

2052
20:21:39,191 --> 20:21:42,479
function all right as the captioning case now i'm

2053
20:21:42,479 --> 20:21:47,759
going to talk about future builder and async snapshot well um we've talked

2054
20:21:47,759 --> 20:21:52,399
actually previously a little bit about future builders before

2055
20:21:52,399 --> 20:21:57,360
but uh what a future builder is maybe actually you should write it here future

2056
20:21:57,360 --> 20:22:00,960
builder and then go to the code so you see it a little bit better you can see

2057
20:22:00,960 --> 20:22:07,759
it is a stateful widget so and what it does is that it subscribes to a future

2058
20:22:07,759 --> 20:22:11,039
that will return its value in the future if you're familiar with javascript then

2059
20:22:11,039 --> 20:22:13,679
you'll know it as promises um

2060
20:22:13,679 --> 20:22:18,960
and uh if you're familiar with rx swift or any rx related then you'll know

2061
20:22:18,960 --> 20:22:22,551
probably as like a single or an observable kind of actually not an

2062
20:22:22,551 --> 20:22:25,440
observable because that's a stream builder a future builder is kind of like

2063
20:22:25,440 --> 20:22:30,000
a single builder meaning that a value that starts someplace and then

2064
20:22:30,000 --> 20:22:34,320
calculates something returns its value and then it finishes that's it

2065
20:22:34,320 --> 20:22:37,512
so a future builder allows you to submit a future

2066
20:22:37,512 --> 20:22:41,759
and it will allow you to submit a builder meaning that

2067
20:22:41,759 --> 20:22:45,759
it takes that chunk of code that produces a value as a future it says

2068
20:22:45,759 --> 20:22:50,551
okay now it's mine i will take it subscribe to it as the value of this

2069
20:22:50,551 --> 20:22:54,320
future changes i will give you the ability to return various widgets that

2070
20:22:54,320 --> 20:22:58,320
need to be displayed on the screen so it basically ties

2071
20:22:58,320 --> 20:23:01,512
your future logic with your ui logic so it's

2072
20:23:01,512 --> 20:23:05,919
absolutely beautiful so what we need to do now is to make

2073
20:23:05,919 --> 20:23:11,191
sure that upon going to our build function right there in the body you see

2074
20:23:11,191 --> 20:23:16,872
in the body of our notes view here we need to make sure that

2075
20:23:16,872 --> 20:23:22,000
we are creating a user or getting the current

2076
20:23:22,000 --> 20:23:26,800
user from the database if it already exists and we're creating that user if

2077
20:23:26,800 --> 20:23:30,639
that user doesn't exist and if you remember we have this function

2078
20:23:30,639 --> 20:23:35,919
already it is called gets or creates something something a get or a create

2079
20:23:35,919 --> 20:23:41,279
user and it's a future so we're going to create a future builder in our uh notes

2080
20:23:41,279 --> 20:23:45,831
view that subscribes itself to the value that is returned by this and then it

2081
20:23:45,831 --> 20:23:49,919
will tell us about various updates and these various updates are going to be

2082
20:23:49,919 --> 20:23:54,720
provided to us as something called an async snapshot an async snapshot is

2083
20:23:54,720 --> 20:23:58,639
basically as its name indicates is a wrapper as a snapshot around an

2084
20:23:58,639 --> 20:24:02,639
asynchronous functionality which is in this case our future of

2085
20:24:02,639 --> 20:24:07,440
get or create user so that's what we're going to do in our

2086
20:24:07,440 --> 20:24:11,679
notes view as you can see in the

2087
20:24:11,679 --> 20:24:16,000
caption we're going to now return a future builder in nodesview.

2088
20:24:16,000 --> 20:24:21,279
and actually that should say notes view notes underscore

2089
20:24:21,279 --> 20:24:24,000
view so i'm going to fix the caption as well so

2090
20:24:24,000 --> 20:24:29,512
i don't confuse anybody including myself and notes view

2091
20:24:29,512 --> 20:24:32,240
here so now it's better i apologize for that

2092
20:24:32,240 --> 20:24:35,279
so right now we have this hello world but

2093
20:24:35,279 --> 20:24:39,360
we're gonna change that so it returns a notes view so i'm gonna say sorry a

2094
20:24:39,360 --> 20:24:43,600
future builder so let's say we now return a future builder

2095
20:24:43,600 --> 20:24:46,551
and now it says okay there are two parameters that we have to provide one

2096
20:24:46,551 --> 20:24:50,551
is the future the other one is actually the builder function so the builder

2097
20:24:50,551 --> 20:24:52,872
sorry the future in itself is going to be

2098
20:24:52,872 --> 20:24:56,800
you see the future is our note service

2099
20:24:56,800 --> 20:25:02,000
get or create the user and the email if you remember is the current user's email

2100
20:25:02,000 --> 20:25:06,639
address which we created a getter for called user email so let's go put that

2101
20:25:06,639 --> 20:25:10,639
in there user email and then you can see it's still complaining saying that the

2102
20:25:10,639 --> 20:25:14,320
builder function hasn't been provided

2103
20:25:14,320 --> 20:25:17,279
so let's go and say then that we have a builder function

2104
20:25:17,279 --> 20:25:21,512
and right there and i talked about async snapshot because that's the parameter

2105
20:25:21,512 --> 20:25:27,831
that you get in here is this is async snap snapshot of object right now

2106
20:25:27,831 --> 20:25:34,080
but we're gonna fix that so um let's then in here um

2107
20:25:34,080 --> 20:25:39,831
let's then talk about actually this functionality right here

2108
20:25:39,831 --> 20:25:43,119
so after we get the current user or creates

2109
20:25:43,119 --> 20:25:48,000
a new user if that user hasn't existed in our database we also need to grab all

2110
20:25:48,000 --> 20:25:51,679
the nodes for that user and

2111
20:25:51,679 --> 20:25:56,000
we don't right now have the functionality to

2112
20:25:56,000 --> 20:26:00,000
have like a stream of all the nodes for the current user we're going to add that

2113
20:26:00,000 --> 20:26:03,831
soon but as you can see in the caching is we can achieve this with our stream

2114
20:26:03,831 --> 20:26:08,080
controller which we've already placed like the groundwork for in our node

2115
20:26:08,080 --> 20:26:11,440
service so let's go and create a little

2116
20:26:11,440 --> 20:26:15,831
functionality in here in our notes service dot dart

2117
20:26:15,831 --> 20:26:20,479
and as you can see it allows you to retrieve all the notes so

2118
20:26:20,479 --> 20:26:24,080
we're just going to say stream

2119
20:26:24,080 --> 20:26:29,279
of a list of database notes database notes like that

2120
20:26:29,279 --> 20:26:34,720
and we it's a getter and we call it all notes okay and what it does is is in

2121
20:26:34,720 --> 20:26:39,600
itself is gonna subscribe to this note stream controller and retrieve all the

2122
20:26:39,600 --> 20:26:42,872
notes from that controller because remember this note stream controller in

2123
20:26:42,872 --> 20:26:46,800
it in itself contains this guy all right

2124
20:26:46,800 --> 20:26:50,320
so and that's what we're going to do we're going to say it returns the node

2125
20:26:50,320 --> 20:26:54,240
stream controller stream

2126
20:26:54,240 --> 20:26:58,639
actually another stream get all not so sorry that was wrong

2127
20:26:58,639 --> 20:27:01,600
and stream

2128
20:27:01,600 --> 20:27:04,720
all right

2129
20:27:04,720 --> 20:27:09,679
so that's our getter for getting all the notes um now what we need to do now that

2130
20:27:09,679 --> 20:27:15,600
we've created our uh so back into back in note2.dart now that we have

2131
20:27:15,600 --> 20:27:19,279
created our user

2132
20:27:19,279 --> 20:27:26,160
what we need to make sure of is that if the user could be created then we are

2133
20:27:26,160 --> 20:27:30,320
going to work with something called a stream builder that retrieves all the

2134
20:27:30,320 --> 20:27:34,160
nodes from the node service and then renders them on the screen okay

2135
20:27:34,160 --> 20:27:37,600
but we can't yet render them we don't have any user generated content and we

2136
20:27:37,600 --> 20:27:41,119
also don't know yet how to render them so first let's take care of something in

2137
20:27:41,119 --> 20:27:45,679
here this snapshot in here what we need to do is to say if snapchat

2138
20:27:45,679 --> 20:27:51,600
connection state is connection state dot done

2139
20:27:51,600 --> 20:27:53,919
like this um

2140
20:27:53,919 --> 20:27:57,440
if that's the case then we're gonna do some logic in here so let's just say

2141
20:27:57,440 --> 20:28:03,360
return a text of hello for now okay actually we need to maybe switch this so

2142
20:28:03,360 --> 20:28:07,679
let's just say switch

2143
20:28:07,679 --> 20:28:12,872
snapshot dots connection state and i really like to get uh visual studio code

2144
20:28:12,872 --> 20:28:16,080
to complete the rest for me so i don't like to write all the cases so i'm just

2145
20:28:16,080 --> 20:28:19,831
gonna say command dot or on mac or control dot on linux and windows i say

2146
20:28:19,831 --> 20:28:24,240
add missing case clauses and in the case of done i'm just going to say return

2147
20:28:24,240 --> 20:28:28,720
this text okay if the creation or the retrieval of the

2148
20:28:28,720 --> 20:28:32,960
current user was completed then just return this text hello

2149
20:28:32,960 --> 20:28:38,160
and in any other case for instance in the case of default

2150
20:28:38,160 --> 20:28:43,679
we're just going to return a circular progress indicator just like

2151
20:28:43,679 --> 20:28:48,399
that okay then i'm gonna put the case of done

2152
20:28:48,399 --> 20:28:52,399
above that like that all right

2153
20:28:52,399 --> 20:28:59,039
let's then do a hot restart and i can see my um scrcpy kind of just crashed so

2154
20:28:59,039 --> 20:29:03,279
yeah stuff like that happens sometimes and that's okay let me go ahead and go

2155
20:29:03,279 --> 20:29:08,080
back to this shell and say hcr cpy

2156
20:29:08,080 --> 20:29:11,600
the application is working fine it's just that scr cpy crest so i'm just

2157
20:29:11,600 --> 20:29:15,440
gonna say your notes will appear here now

2158
20:29:15,440 --> 20:29:19,831
command s actually my debug process has crashed as

2159
20:29:19,831 --> 20:29:22,551
well so i'm going to run the application now

2160
20:29:22,551 --> 20:29:25,759
again

2161
20:29:25,759 --> 20:29:29,360
hopefully this gradle task goes fast because we've

2162
20:29:29,360 --> 20:29:32,320
already compiled the application from before

2163
20:29:32,320 --> 20:29:37,191
so what we need to do you see we are now taking care of making sure that the user

2164
20:29:37,191 --> 20:29:40,960
is created in the database if it didn't exist or we're getting the user if that

2165
20:29:40,960 --> 20:29:46,000
user exists in the database but what we also need to do is to start listening to

2166
20:29:46,000 --> 20:29:50,720
changes to this stream which is in our note service called all nodes and

2167
20:29:50,720 --> 20:29:55,759
depending on the state of that stream then we're going to build our user

2168
20:29:55,759 --> 20:30:00,960
interface all right so in this in here we're actually not going to return like

2169
20:30:00,960 --> 20:30:05,360
a text of hey your notes will appear here but we're actually going to use a

2170
20:30:05,360 --> 20:30:10,320
stream builder which is very similar to a future builder but it actually listens

2171
20:30:10,320 --> 20:30:14,399
to changes to a stream okay

2172
20:30:14,399 --> 20:30:18,399
so oops did i just kill the application

2173
20:30:18,399 --> 20:30:21,191
right here so there we go your notes will appear

2174
20:30:21,191 --> 20:30:24,551
here so that seems to be working fine so let's

2175
20:30:24,551 --> 20:30:29,831
go in here and then say that we want to um

2176
20:30:29,831 --> 20:30:32,872
return our stream builder i'm going to put this

2177
20:30:32,872 --> 20:30:37,191
back and before we do that i want to explain this little thing that i've

2178
20:30:37,191 --> 20:30:42,080
shown in the captions what are the waiting and dawn flags in

2179
20:30:42,080 --> 20:30:45,679
the connection state you see both a stream builder and a future

2180
20:30:45,679 --> 20:30:49,440
builder work with something called an async snapshot which is this guy you see

2181
20:30:49,440 --> 20:30:53,919
async snapshot and this async snapshot can have various connection states so if

2182
20:30:53,919 --> 20:30:58,000
you go to connection state in there and you can see we have none waiting active

2183
20:30:58,000 --> 20:31:03,600
done all right so

2184
20:31:03,600 --> 20:31:07,119
when you when you have you see in the case of an active says for example a

2185
20:31:07,119 --> 20:31:10,872
stream that has returned at least one value but is not yet done

2186
20:31:10,872 --> 20:31:17,440
so that's for a that's for a stream uh but if you're waiting for a future or

2187
20:31:17,440 --> 20:31:21,360
a stream then you're gonna get this waiting flag and it done is gonna happen

2188
20:31:21,360 --> 20:31:26,639
for your um a future so a future that has completed its task as i said it does

2189
20:31:26,639 --> 20:31:30,551
something and it completes but a stream usually it just keeps living so you

2190
20:31:30,551 --> 20:31:34,399
can't like hook into or you shouldn't hook into the done event for a stream

2191
20:31:34,399 --> 20:31:39,440
but you should actually hook into your waiting um

2192
20:31:39,440 --> 20:31:42,479
connection state so that's what we're going to do so connections stay done for

2193
20:31:42,479 --> 20:31:46,872
a future and a connection state of um are

2194
20:31:46,872 --> 20:31:51,279
waiting for the stream so in here let's then create a

2195
20:31:51,279 --> 20:31:55,919
stream builder and our stream

2196
20:31:55,919 --> 20:32:03,440
is going to be our note services all notes um

2197
20:32:03,440 --> 20:32:08,080
so that's the stream itself and then we need a builder and let's get visual

2198
20:32:08,080 --> 20:32:13,279
studio to complete that for us um okay and in the builder what we're gonna

2199
20:32:13,279 --> 20:32:19,119
do is we're gonna say switch snapshot connection state

2200
20:32:19,119 --> 20:32:22,320
like this get visual studio code to complete the rest for you

2201
20:32:22,320 --> 20:32:26,479
in the case of waiting

2202
20:32:26,479 --> 20:32:30,639
we're just going to say return

2203
20:32:30,639 --> 20:32:36,160
paused text waiting for all notes

2204
20:32:36,160 --> 20:32:40,551
okay i'm going to remove the break from here

2205
20:32:40,551 --> 20:32:45,191
and in any other case so in the case of default we're just going to say

2206
20:32:45,191 --> 20:32:50,320
return on circular progress indicator just like

2207
20:32:50,320 --> 20:32:54,320
that so now you see if i command s to hot

2208
20:32:54,320 --> 20:32:58,800
reload then it just says waiting for all nodes to appear on the screen so

2209
20:32:58,800 --> 20:33:04,800
this is now like the skeleton of our application's notes view so that it

2210
20:33:04,800 --> 20:33:08,551
takes care of two things it gets the current user using his or her email

2211
20:33:08,551 --> 20:33:11,679
address if that user already exists in the database or creates it so that's the

2212
20:33:11,679 --> 20:33:16,320
future builder and the the widget returned by the future

2213
20:33:16,320 --> 20:33:20,960
builder in itself is a stream builder so the stream builder then calculates

2214
20:33:20,960 --> 20:33:25,512
all the nodes and returns them from the node service and then it has a

2215
20:33:25,512 --> 20:33:28,960
connection state and waiting which in turn right now is saying waiting for all

2216
20:33:28,960 --> 20:33:31,360
nodes and we're going to change this later

2217
20:33:31,360 --> 20:33:34,872
so that so that uh

2218
20:33:34,872 --> 20:33:38,240
it doesn't just return a text it actually returns a list of notes all

2219
20:33:38,240 --> 20:33:42,320
right so now let's talk about something else

2220
20:33:42,320 --> 20:33:46,872
before we wrap up this chapter and you see at the moment what we're doing is

2221
20:33:46,872 --> 20:33:53,039
that we're saying our note service um is a new service right here so every time

2222
20:33:53,039 --> 20:33:57,679
go into init states if i command s in here or if you did a hot reload or hot

2223
20:33:57,679 --> 20:34:01,119
restarting here actually hot restart this

2224
20:34:01,119 --> 20:34:04,399
i can see maybe that is the reason we're crashing the entire application because

2225
20:34:04,399 --> 20:34:07,360
we're creating a new node service so that could be the reason i can see hot

2226
20:34:07,360 --> 20:34:11,919
restart is a little bit flaky right now so um so that is pretty much the reason

2227
20:34:11,919 --> 20:34:15,191
we're going to create a single now if you're not familiar with what a

2228
20:34:15,191 --> 20:34:19,759
singleton is a singleton essentially is a pattern used in software development

2229
20:34:19,759 --> 20:34:24,872
where you create a service for instance or a class instance

2230
20:34:24,872 --> 20:34:30,240
where that class instance is only one inside the entire application right now

2231
20:34:30,240 --> 20:34:33,759
any place in our app we can go and create a new instance of node service

2232
20:34:33,759 --> 20:34:38,000
but if you think about it the node service should only exist as one copy in

2233
20:34:38,000 --> 20:34:41,360
the entire application it shouldn't be like made new copies of this note

2234
20:34:41,360 --> 20:34:44,720
service over and over again so that's what a singleton is and that's what

2235
20:34:44,720 --> 20:34:50,320
we're going to do with our note service so i see i have a little bit of problem

2236
20:34:50,320 --> 20:34:53,440
with my um

2237
20:34:53,440 --> 20:34:56,399
captions and i'm going to bring the next captioner and fix that

2238
20:34:56,399 --> 20:35:00,720
so let's go ahead first and uh before i run the application maybe we

2239
20:35:00,720 --> 20:35:04,080
should fix this problem with our singleton so let's go to our note

2240
20:35:04,080 --> 20:35:08,320
service and we're going to create a single now

2241
20:35:08,320 --> 20:35:12,800
singleton pattern in various languages i mean it differs from language language

2242
20:35:12,800 --> 20:35:16,872
and dart is not as clean to be honest with you in my opinion as it should be

2243
20:35:16,872 --> 20:35:22,240
such as it is in languages such as swift um but it is what it is and we need to

2244
20:35:22,240 --> 20:35:26,551
kind of live with it the way uh it works right now

2245
20:35:26,551 --> 20:35:30,000
so the way that we do it uh that we make our

2246
20:35:30,000 --> 20:35:35,512
class note service a singleton is to go ahead and

2247
20:35:35,512 --> 20:35:40,080
first create a private constructor for our class so we're going

2248
20:35:40,080 --> 20:35:45,039
to say note service underscore and just a

2249
20:35:45,039 --> 20:35:48,639
shared instance and this is just a function name it's

2250
20:35:48,639 --> 20:35:52,551
just a private initializer to this class okay

2251
20:35:52,551 --> 20:35:55,440
and what we're going to do then is we're going to say static

2252
20:35:55,440 --> 20:35:58,831
final notes

2253
20:35:58,831 --> 20:36:03,600
service so we're creating a shared instance and we're going to say notes

2254
20:36:03,600 --> 20:36:06,800
service got shared instance so this creates that

2255
20:36:06,800 --> 20:36:10,800
shared instance for us but no one from the outside world is going to be able to

2256
20:36:10,800 --> 20:36:15,039
then make a call to these two because they are well private so now we're going

2257
20:36:15,039 --> 20:36:18,960
to create a factory constructor we're going to call it note service

2258
20:36:18,960 --> 20:36:22,399
like that and that is going to return a shared instance for us so it's just a

2259
20:36:22,399 --> 20:36:26,240
hack to be honest with you in my opinion at least it's it's a hacky way of

2260
20:36:26,240 --> 20:36:31,759
creating a singleton but that's the way it works in dart at least for now

2261
20:36:31,759 --> 20:36:35,679
all right now we've created our singleton so what we can do then is i

2262
20:36:35,679 --> 20:36:38,720
mean we don't have to make any changes to this guy to the init state because

2263
20:36:38,720 --> 20:36:43,039
right now it's making any it's constructing node service and we

2264
20:36:43,039 --> 20:36:47,600
have changed that so that anyone who calls node service like this is actually

2265
20:36:47,600 --> 20:36:51,831
coming to the factory constructor which then in turns returns this shared

2266
20:36:51,831 --> 20:36:55,831
instance which in turn calls this private factory and it causes private

2267
20:36:55,831 --> 20:36:59,759
initializer or constructor so it's like a three layer

2268
20:36:59,759 --> 20:37:05,360
deep in order to create a singleton all right well done we

2269
20:37:05,360 --> 20:37:10,479
i mean we could also try to run the application while all this is going on

2270
20:37:10,479 --> 20:37:16,160
and i can bring up scr cpy again and if it's doing any better bring it up here

2271
20:37:16,160 --> 20:37:18,000
okay so

2272
20:37:18,000 --> 20:37:22,399
we've done quite a lot of work we've laid the groundwork for the next chapter

2273
20:37:22,399 --> 20:37:27,512
so now we have the ability to hook into all the notes available in our database

2274
20:37:27,512 --> 20:37:31,279
which is being controlled by a stream and a stream controller and we're then

2275
20:37:31,279 --> 20:37:37,440
being able then we're able to display those notes on the screen use using this

2276
20:37:37,440 --> 20:37:41,831
stream builder which i'm trying to find right now which is right here okay so

2277
20:37:41,831 --> 20:37:45,119
we've done quite a lot of work and well done to you for sticking with me

2278
20:37:45,119 --> 20:37:50,551
throughout this chapter as is the tradition we are doing in

2279
20:37:50,551 --> 20:37:54,399
every other chapter by the end of chapter we commit our work and also tag

2280
20:37:54,399 --> 20:37:57,191
them so let's go ahead and do that i'm going to change the

2281
20:37:57,191 --> 20:38:00,720
screen layout a little bit get rid of the cr cpy it has been a little bit

2282
20:38:00,720 --> 20:38:05,831
angry with us today this scr cpy and here's the screen layout and i'm

2283
20:38:05,831 --> 20:38:11,191
going to increase the font size of it and a new shell all right so in the

2284
20:38:11,191 --> 20:38:15,759
previous chapter we uh committed and tagged our work as a

2285
20:38:15,759 --> 20:38:20,551
step 11 i believe so if you say git tag you can see we have up to step 11. let's

2286
20:38:20,551 --> 20:38:25,360
go ahead and say git status first yep some files that have been modified

2287
20:38:25,360 --> 20:38:29,512
and we add all the files and then we say

2288
20:38:29,512 --> 20:38:34,551
step 12 this time and we push our changes

2289
20:38:34,551 --> 20:38:38,800
and then we're going to tag our work as well as step

2290
20:38:38,800 --> 20:38:44,000
12 and then we push our attacks

2291
20:38:44,000 --> 20:38:48,720
fantastic well done now again uh what we do in the end of every

2292
20:38:48,720 --> 20:38:52,160
chapter is we talked a little bit about what we're gonna talk about in the next

2293
20:38:52,160 --> 20:38:55,679
chapter and as the caption indicates we're gonna

2294
20:38:55,679 --> 20:38:58,399
uh we're done with the basics of the notes

2295
20:38:58,399 --> 20:39:02,080
but we have no data and that's what we're gonna fix a remedy in the next

2296
20:39:02,080 --> 20:39:06,639
chapter so we're gonna talk about how we allow the user to press a button for

2297
20:39:06,639 --> 20:39:11,119
instance in order to create a new note and for that note then to appear in our

2298
20:39:11,119 --> 20:39:15,831
stream builder and display to the user so

2299
20:39:15,831 --> 20:39:19,919
maybe you want to take a little break some refreshments do that please and

2300
20:39:19,919 --> 20:39:24,080
i'll see you in the next chapter hello everyone and welcome to chapter 30

2301
20:39:24,080 --> 20:39:27,919
of this flutter course in the previous chapters we've been working quite a lot

2302
20:39:27,919 --> 20:39:31,679
with our database layer and we've also been working with the ui in order to

2303
20:39:31,679 --> 20:39:36,399
kind of make sure that we can have a list of notes um but as you've

2304
20:39:36,399 --> 20:39:39,919
seen in the previous chapters we don't have notes or

2305
20:39:39,919 --> 20:39:43,600
we don't actually have the ability for the user to create these

2306
20:39:43,600 --> 20:39:47,831
notes so starting from this chapter we're going to start working on creating

2307
20:39:47,831 --> 20:39:51,191
some sort of user interface in which the user can enter

2308
20:39:51,191 --> 20:39:55,039
their notes and those notes will be saved then with our quad servers that

2309
20:39:55,039 --> 20:39:59,039
we've created in one of the previous chapters

2310
20:39:59,039 --> 20:40:03,279
before we carry on let's take care of one thing at the moment our notes view

2311
20:40:03,279 --> 20:40:07,360
doesn't really have like the proper title i'm going to bring the code here

2312
20:40:07,360 --> 20:40:12,720
on the screen so you see it as well and i'm going to bring scrcpy you may

2313
20:40:12,720 --> 20:40:18,160
have your simulator or emulator um or an actual device on the screen so that's

2314
20:40:18,160 --> 20:40:22,320
also fine let's do some rearrangement here and i'm

2315
20:40:22,320 --> 20:40:27,360
also going to rearrange the screen here so you see the code better at the moment

2316
20:40:27,360 --> 20:40:32,240
the ui and the title of our main ui is just saying main ui so let's take care

2317
20:40:32,240 --> 20:40:36,320
of that and that's inside notes view dart

2318
20:40:36,320 --> 20:40:41,440
let's find where we're creating the app bar and here we're saying main ui so as

2319
20:40:41,440 --> 20:40:44,800
the caption indicates we're gonna change that to your notes

2320
20:40:44,800 --> 20:40:50,479
like this and command s hot reload and then we can see your notes appear there

2321
20:40:50,479 --> 20:40:55,759
so that part is now done um so

2322
20:40:55,759 --> 20:41:00,240
let's now have a look at how we're gonna enable a user to create new notes in our

2323
20:41:00,240 --> 20:41:03,440
application you see um

2324
20:41:03,440 --> 20:41:06,320
there are different ways of going about doing that there are like some

2325
20:41:06,320 --> 20:41:10,320
applications that will display something called a floating action

2326
20:41:10,320 --> 20:41:14,872
button a floating action button is a button that appears usually to the

2327
20:41:14,872 --> 20:41:19,679
bottom right of the screen if you have languages which are left to right or if

2328
20:41:19,679 --> 20:41:23,600
you have arabic lang like arabic persian language like that that you write from

2329
20:41:23,600 --> 20:41:27,919
right to left then that floating action button should appear on bottom left so

2330
20:41:27,919 --> 20:41:32,000
it's kind of like a button that appears just floating on the screen

2331
20:41:32,000 --> 20:41:37,279
um and usually it's like out of uh out of your um out of the way for your main

2332
20:41:37,279 --> 20:41:40,399
ui uh however it can get sometimes in the

2333
20:41:40,399 --> 20:41:43,512
middle of the way so um

2334
20:41:43,512 --> 20:41:47,440
for instance if you have a list of notes and these notes can like their titles

2335
20:41:47,440 --> 20:41:52,160
can go to a few lines of text and then you have a floating button that sits

2336
20:41:52,160 --> 20:41:55,360
like at the bottom of the screen it could just block some again parts of

2337
20:41:55,360 --> 20:41:58,720
your content so some people don't like floating action

2338
20:41:58,720 --> 20:42:02,240
buttons and floating bar action buttons are

2339
20:42:02,240 --> 20:42:04,800
usually they usually appear in android

2340
20:42:04,800 --> 20:42:08,720
applications is i think it's it's coming from material design from google i could

2341
20:42:08,720 --> 20:42:12,160
be wrong about this but usually you don't see them in ios applications and

2342
20:42:12,160 --> 20:42:16,000
since we're developing our application to be user friendly for both ios and

2343
20:42:16,000 --> 20:42:19,119
android users we're not going to use floating action buttons for now but

2344
20:42:19,119 --> 20:42:22,551
there's just to be clear there's really nothing wrong with floating action

2345
20:42:22,551 --> 20:42:27,360
buttons so so what we could do is either we could

2346
20:42:27,360 --> 20:42:32,399
go in our menu here where we have log out and create a new item in here that

2347
20:42:32,399 --> 20:42:37,039
says for instance a plus or add add a new note or something like that

2348
20:42:37,039 --> 20:42:41,759
i'm sorry i'll just add this also to uh do not disturb so we could either

2349
20:42:41,759 --> 20:42:46,639
add an item in here that says add note something like that or we could go to

2350
20:42:46,639 --> 20:42:49,831
this bar that we have up here our app bar

2351
20:42:49,831 --> 20:42:54,240
and add a new item just like we have this three vertical

2352
20:42:54,240 --> 20:42:58,800
dots we could add a new item in there

2353
20:42:58,800 --> 20:43:02,160
so now then it comes to kind of like preference

2354
20:43:02,160 --> 20:43:06,000
and some sort of reasoning of why we should add

2355
20:43:06,000 --> 20:43:10,551
the plus button the way we're gonna add it and my reasoning behind um

2356
20:43:10,551 --> 20:43:15,360
wanting to put the plus button but like beside this

2357
20:43:15,360 --> 20:43:20,080
these vertical three dots is that adding a new note is pretty much like

2358
20:43:20,080 --> 20:43:24,551
one of the main tasks users would want to do in your application's main user

2359
20:43:24,551 --> 20:43:29,679
interface so they either go in here to and delete their notes update their

2360
20:43:29,679 --> 20:43:33,119
notes or add a new note so there are three things they're going to do

2361
20:43:33,119 --> 20:43:38,551
deleting notes is usually not that common so updating notes and adding new

2362
20:43:38,551 --> 20:43:43,191
notes should be like the main actions that your users perform in your main uh

2363
20:43:43,191 --> 20:43:47,279
application ui so it should be very instantaneous it should just be very

2364
20:43:47,279 --> 20:43:51,600
easy for users to do that so if you put a plus button here

2365
20:43:51,600 --> 20:43:56,872
beside this these three vertical dots then it takes the user just one click to

2366
20:43:56,872 --> 20:44:01,360
go to the new screen in order to create a new node however if you put like add

2367
20:44:01,360 --> 20:44:04,720
to notes menu in here then they have to first do

2368
20:44:04,720 --> 20:44:09,831
one tab to go here and then another tab in order to create to go to the next

2369
20:44:09,831 --> 20:44:13,039
screen and that's just like one tab extra

2370
20:44:13,039 --> 20:44:19,512
and that's where we're gonna add a plus button beside these three vertical dots

2371
20:44:19,512 --> 20:44:23,759
so before we get started with that let's go ahead and

2372
20:44:23,759 --> 20:44:27,759
do some preparation for that so we need a widget and which is going to be our

2373
20:44:27,759 --> 20:44:32,080
new notes view and as you can see we're going to create a new file for it inside

2374
20:44:32,080 --> 20:44:38,872
lib views notes which is a new folder i believe which we haven't had from before

2375
20:44:38,872 --> 20:44:42,800
let's go in here we have views as you can see and we don't have a folder

2376
20:44:42,800 --> 20:44:47,039
called notes so in views what we're going to create now

2377
20:44:47,039 --> 20:44:51,512
is this dart file new node view so i'm just going to right click on it and say

2378
20:44:51,512 --> 20:44:55,119
here i'm going to say a folder called notes which we don't have yet

2379
20:44:55,119 --> 20:45:00,479
and i'm going to say new notes view dot dart okay so that's that file already

2380
20:45:00,479 --> 20:45:04,080
we're not going to do anything in that file yet

2381
20:45:04,080 --> 20:45:09,679
and now that we have our notes folder under views it just makes

2382
20:45:09,679 --> 20:45:13,759
sense to move our notes view here as well which is at the moment sitting

2383
20:45:13,759 --> 20:45:19,440
under views you can see the breadcrumb here says lib views notes view it makes

2384
20:45:19,440 --> 20:45:24,639
sense now to move this notes view which is the list of our notes into this notes

2385
20:45:24,639 --> 20:45:29,512
folder as well so i'm going to need you to just drag that file and place it

2386
20:45:29,512 --> 20:45:34,639
inside the notes folder okay

2387
20:45:34,639 --> 20:45:39,512
all right that's great excuse me so we've done that now

2388
20:45:39,512 --> 20:45:43,191
um now what you may have noticed if i bring

2389
20:45:43,191 --> 20:45:45,679
the list a little bit higher now that we've

2390
20:45:45,679 --> 20:45:48,320
done that also let's just make sure we haven't

2391
20:45:48,320 --> 20:45:51,191
broken any uh imports

2392
20:45:51,191 --> 20:45:55,512
notes view oh i see that's that's really great because by dragging the notes view

2393
20:45:55,512 --> 20:45:58,720
into the notes folder visual studio was

2394
20:45:58,720 --> 20:46:03,679
intelligent enough to refactor also all the imports that we're referring to

2395
20:46:03,679 --> 20:46:07,831
notes view so your editor of choice like if you're using sublime or if you're

2396
20:46:07,831 --> 20:46:12,080
using some vim for instance it may not be able to automatically take care of

2397
20:46:12,080 --> 20:46:16,639
that so by you moving your notes view inside the notes folder depending on how

2398
20:46:16,639 --> 20:46:21,279
you do it you may need to fix your imports as well so

2399
20:46:21,279 --> 20:46:25,759
if you search for nodesview. let's have a look at

2400
20:46:25,759 --> 20:46:30,720
i can see the only place it was imported it was the main.dart file so you will

2401
20:46:30,720 --> 20:46:34,551
you might need to go and fix that import in there okay so if you're getting an

2402
20:46:34,551 --> 20:46:39,440
error for your imports then you know why all right so

2403
20:46:39,440 --> 20:46:43,512
that's that's moving our notes you now if you've noticed if you go back to

2404
20:46:43,512 --> 20:46:47,919
the editor here you'll you probably have noticed that we have some red files in

2405
20:46:47,919 --> 20:46:51,759
here and it's because we have added um

2406
20:46:51,759 --> 20:46:56,551
our email uh an email field to our auth user so if

2407
20:46:56,551 --> 20:47:00,720
you go in here you can see that we added this email field in our auth user in one

2408
20:47:00,720 --> 20:47:04,080
of the previous chapters because we needed

2409
20:47:04,080 --> 20:47:08,639
to be able to retrieve nodes for a specific auth user from our

2410
20:47:08,639 --> 20:47:12,872
node service okay so after adding that now we've broken

2411
20:47:12,872 --> 20:47:17,831
our tests and we haven't really had the time yet to fix the test so

2412
20:47:17,831 --> 20:47:20,800
uh let's have a look at how we can fix our

2413
20:47:20,800 --> 20:47:26,872
test if we if you dr uh scroll down a little bit in our tests file you will

2414
20:47:26,872 --> 20:47:31,831
notice where we've broken the test and this is here we're in two places where

2415
20:47:31,831 --> 20:47:37,119
we're creating an off user okay here and the way we're working with this off

2416
20:47:37,119 --> 20:47:41,831
user in our test is not really something that we're writing tests for later like

2417
20:47:41,831 --> 20:47:45,360
we're not actually creating an off user and then

2418
20:47:45,360 --> 20:47:50,639
doing a test against the off users email so it's at the moment it's pretty much

2419
20:47:50,639 --> 20:47:55,279
just decoration in that we need to just make sure that our tests compile and

2420
20:47:55,279 --> 20:47:59,759
that we don't have a compilation error here so let's go and see if visual

2421
20:47:59,759 --> 20:48:03,119
studio code can help us with that so i'm just going to do command dot on mac or

2422
20:48:03,119 --> 20:48:07,679
control dot on windows and linux and say add required argument eval and for email

2423
20:48:07,679 --> 20:48:12,080
you could just say fooatbar.com so that doesn't matter so much and a comma at

2424
20:48:12,080 --> 20:48:16,551
the end to get dark formatter to format the file correctly for us

2425
20:48:16,551 --> 20:48:20,160
and then excuse me gonna get help from visual studio code again and say add

2426
20:48:20,160 --> 20:48:24,551
record argument email and again we're going to say um

2427
20:48:24,551 --> 20:48:29,360
fooatbar.com and a commanding all right

2428
20:48:29,360 --> 20:48:32,240
so as you can see in the caption also we just need to make sure that we're

2429
20:48:32,240 --> 20:48:35,679
running our tests and making sure that we haven't broken anything so let's go

2430
20:48:35,679 --> 20:48:40,479
to our tests in here and see if i if i can bring this up a little bit

2431
20:48:40,479 --> 20:48:44,399
change the screen layout so you see what i'm doing as well uh

2432
20:48:44,399 --> 20:48:48,800
increase the size of the screen and i'm going to search for flutter test and

2433
20:48:48,800 --> 20:48:52,399
that's the line the command that you also have to type as the caption at the

2434
20:48:52,399 --> 20:48:57,191
bottom of the screen indicates as well and let's just run our tests and see

2435
20:48:57,191 --> 20:49:00,639
what we get for results if we've done everything correctly we shouldn't have

2436
20:49:00,639 --> 20:49:04,320
any problems with our tests at the moment

2437
20:49:04,320 --> 20:49:08,639
but you may have like diverged from the course uh for a good reason and written

2438
20:49:08,639 --> 20:49:13,759
more tests and you may then have to fix those tests as well and i highly

2439
20:49:13,759 --> 20:49:16,960
encourage all my watchers whoever's watching this course

2440
20:49:16,960 --> 20:49:21,831
to actually do as many tests as possible experiment with widget test integration

2441
20:49:21,831 --> 20:49:26,399
tests and unit tests as much as you can to learn how that works

2442
20:49:26,399 --> 20:49:30,000
um all right so that's that now let's go

2443
20:49:30,000 --> 20:49:33,759
ahead and change the screen layout we've taken care of our tests now and you can

2444
20:49:33,759 --> 20:49:38,872
see the tests have passed and also we don't have

2445
20:49:38,872 --> 20:49:45,679
any more red flags inside our auth test.dart file

2446
20:49:45,679 --> 20:49:48,800
all right so what we need to do now you see

2447
20:49:48,800 --> 20:49:54,479
when we then add a plus button to our main ui in order to go to

2448
20:49:54,479 --> 20:49:59,360
our new view which is um i believe we created it here new note

2449
20:49:59,360 --> 20:50:02,551
view we need to define a round for it we've

2450
20:50:02,551 --> 20:50:07,440
already done that for um for

2451
20:50:07,440 --> 20:50:12,240
all our other routes so if we have a look at our um let's see if we can find

2452
20:50:12,240 --> 20:50:15,119
it constants routes

2453
20:50:15,119 --> 20:50:18,800
we have verified email routes we have nodes route register route and all of

2454
20:50:18,800 --> 20:50:21,512
those so i'm just going to have a look at my

2455
20:50:21,512 --> 20:50:25,039
notes and make sure that we define our new route in here

2456
20:50:25,039 --> 20:50:28,000
excuse me so let's go and call this new route and

2457
20:50:28,000 --> 20:50:32,320
we're going to call it new note route and we're just going to say

2458
20:50:32,320 --> 20:50:35,831
slash and notes slash

2459
20:50:35,831 --> 20:50:38,551
new note all right so

2460
20:50:38,551 --> 20:50:43,600
and remember this doesn't really mean anything except for

2461
20:50:43,600 --> 20:50:48,320
excuse me again except for you to handle like your route

2462
20:50:48,320 --> 20:50:53,039
name so if you had like notes with a z it would

2463
20:50:53,039 --> 20:50:56,479
also work as long as you're using the same route name everywhere

2464
20:50:56,479 --> 20:51:00,960
so don't think that this is like bound to any sort of a magical

2465
20:51:00,960 --> 20:51:04,639
file finding a mechanism in flutter it has nothing to do with that it's just

2466
20:51:04,639 --> 20:51:09,039
for you to define your route name so you could literally just say fu in here and

2467
20:51:09,039 --> 20:51:12,399
as long as you use this route name everywhere everything's just gonna work

2468
20:51:12,399 --> 20:51:15,512
as expected so

2469
20:51:15,512 --> 20:51:20,000
that's our new note route created inside the cons

2470
20:51:20,000 --> 20:51:24,160
of routes dart as the notes indicate as the caption on

2471
20:51:24,160 --> 20:51:28,320
the screen indicates we have to go to main dart file in here

2472
20:51:28,320 --> 20:51:32,960
and we need to then go and define that route uh here

2473
20:51:32,960 --> 20:51:37,360
okay so we have login route register route notes route verify email route and

2474
20:51:37,360 --> 20:51:41,759
then we have to define this new route which is called new node route okay

2475
20:51:41,759 --> 20:51:46,960
so let's just let's just say new node route it takes a build context in here

2476
20:51:46,960 --> 20:51:49,759
we could just ignore that with an underscore if you want to i'm not doing

2477
20:51:49,759 --> 20:51:54,000
that and then we're going to create a new instance of new uh

2478
20:51:54,000 --> 20:51:59,440
node routes sorry a new node view um but we don't

2479
20:51:59,440 --> 20:52:05,119
have that yet so let's go and define the new node view

2480
20:52:05,119 --> 20:52:09,679
but for now i'm just going to say const new node view like this and this is not

2481
20:52:09,679 --> 20:52:12,960
going to work because we don't have that view set up

2482
20:52:12,960 --> 20:52:16,399
yet we've just created the file for it okay

2483
20:52:16,399 --> 20:52:21,191
so i'm going to close some files which we don't need and let's go into our new

2484
20:52:21,191 --> 20:52:24,320
note view

2485
20:52:24,320 --> 20:52:28,960
and as the caption indicates we're going to create a stateful widget called new

2486
20:52:28,960 --> 20:52:35,119
note view so i'm going to use a flutter sorry visual studio codes and stateful

2487
20:52:35,119 --> 20:52:40,479
widget template here stf and i'm going to call it new notes view

2488
20:52:40,479 --> 20:52:43,600
right and we're going to get some errors and

2489
20:52:43,600 --> 20:52:47,759
you know already that's because we have an imported material dot dart so i'm

2490
20:52:47,759 --> 20:52:50,160
going to get help from visual studio code command dot

2491
20:52:50,160 --> 20:52:53,440
on mac or control dot on linux and windows and say import material

2492
20:52:53,440 --> 20:52:57,279
and all those errors are going to go away okay

2493
20:52:57,279 --> 20:53:04,160
so now we have our new node view excuse me

2494
20:53:04,160 --> 20:53:09,360
so let's then inside this new note view go creates a simple scaffold so

2495
20:53:09,360 --> 20:53:14,320
i'm going to say we have a scaffold and inside our scaffold we have an app

2496
20:53:14,320 --> 20:53:19,360
bar and we're going to say avbar and an app bar has a title and in here

2497
20:53:19,360 --> 20:53:23,600
we're just going to say cons text new note

2498
20:53:23,600 --> 20:53:29,119
something like this and for the body of this scaffold we're

2499
20:53:29,119 --> 20:53:36,320
just gonna add a const of text that says write your new

2500
20:53:36,320 --> 20:53:42,240
note here something like this okay so this is a very simple stateful widget

2501
20:53:42,240 --> 20:53:45,679
at the moment i mean it's not even stateful it and what it's doing right

2502
20:53:45,679 --> 20:53:49,191
now is it could pretty much be achieved with a stateless widget but in the in

2503
20:53:49,191 --> 20:53:52,960
the next chapters we're going to add more and more logic to this view so it

2504
20:53:52,960 --> 20:53:57,440
needs to be a stateful widget for it to be able to work in the future as well

2505
20:53:57,440 --> 20:54:04,080
and for what we have planned for it okay excuse me so now that we have this ma

2506
20:54:04,080 --> 20:54:09,119
new note view let's go ahead in here back to our main dart and get help from

2507
20:54:09,119 --> 20:54:13,600
visual studio code to import that file for us so i'm just gonna say import and

2508
20:54:13,600 --> 20:54:18,720
you'll see it will be a new import right here on line five for me maybe

2509
20:54:18,720 --> 20:54:22,720
another line for you so let's import a new node view and it

2510
20:54:22,720 --> 20:54:27,759
allows us to basically define a route i'm just to say command s and just to be

2511
20:54:27,759 --> 20:54:30,960
sure since actually not to be sure we are we

2512
20:54:30,960 --> 20:54:36,080
are 100 certain that the changes in our main um function won't be

2513
20:54:36,080 --> 20:54:38,960
won't be taken uh

2514
20:54:38,960 --> 20:54:42,800
into consideration when we do a hot reload we have to do hot restart for

2515
20:54:42,800 --> 20:54:48,960
these changes to take effect so let's do a hot restart here

2516
20:54:48,960 --> 20:54:53,679
okay and for some reason i can actually see my scr cpy has now crashed again

2517
20:54:53,679 --> 20:54:57,600
it's a bit flaky that's okay i i'm not gonna complain

2518
20:54:57,600 --> 20:54:59,919
uh it's just

2519
20:54:59,919 --> 20:55:03,512
an open source project to be honest with you and i can see i actually have lost

2520
20:55:03,512 --> 20:55:07,600
my connection from flutter as well to the program so

2521
20:55:07,600 --> 20:55:13,600
let me run that code now in scrcpy on my actual android phone

2522
20:55:13,600 --> 20:55:16,639
and i'm also going to ensure that my android

2523
20:55:16,639 --> 20:55:22,240
phone actually has wi-fi as well so turn wi-fi on on my phone and

2524
20:55:22,240 --> 20:55:28,160
i'm going to go back here to the main interface so while this is all compiling

2525
20:55:28,160 --> 20:55:31,512
let's go to the next step that we have to take care of which is actually

2526
20:55:31,512 --> 20:55:35,600
displaying oops

2527
20:55:35,600 --> 20:55:43,360
so which is actually displaying um this new note view all right

2528
20:55:43,360 --> 20:55:47,279
as a caption indicates we need to go to the notes view and on press of the icon

2529
20:55:47,279 --> 20:55:52,240
button show the new notes view so i'm going to go to my notes as well go

2530
20:55:52,240 --> 20:55:55,919
to notes here

2531
20:55:55,919 --> 20:56:02,399
and we have to add a little button

2532
20:56:02,399 --> 20:56:07,600
on our uh notes view so let's go ahead and

2533
20:56:07,600 --> 20:56:11,831
go there we'll have a look at how our note2 is structured at the moment as you

2534
20:56:11,831 --> 20:56:16,479
can see right now we have an array of actions which just for now it has a

2535
20:56:16,479 --> 20:56:21,440
pop-up menu button excuse me and we need to add a new icon

2536
20:56:21,440 --> 20:56:24,960
button in there so let's go ahead and say icon button

2537
20:56:24,960 --> 20:56:30,160
an icon button has to have an icon and an on press so let's say unpressed so

2538
20:56:30,160 --> 20:56:34,240
remember this is going to be our plus icon all right

2539
20:56:34,240 --> 20:56:39,440
so that's our on press and for the icon we're just going to say const icon

2540
20:56:39,440 --> 20:56:43,279
and then we're going to say icons add and as you can see i believe that your

2541
20:56:43,279 --> 20:56:47,360
studio code was able to show your icons right in line as well so you can see

2542
20:56:47,360 --> 20:56:51,191
here that's how the button is going to look like which is a plus button all

2543
20:56:51,191 --> 20:56:54,000
right and a comma here to get that working so

2544
20:56:54,000 --> 20:56:58,872
if i do command s in here now we should see a plus button after hot reload all

2545
20:56:58,872 --> 20:57:02,080
right so but that button isn't doing anything because it's unpressed it's

2546
20:57:02,080 --> 20:57:06,240
empty all right so what we need to do is just to say uh

2547
20:57:06,240 --> 20:57:10,639
navigator of our context or build context and

2548
20:57:10,639 --> 20:57:15,831
we're just going to push a route called new node routes that's it

2549
20:57:15,831 --> 20:57:18,240
all right so that's all you have to add a comma

2550
20:57:18,240 --> 20:57:22,160
here just to get the code formatting working all right

2551
20:57:22,160 --> 20:57:25,831
so let's let's actually test this and see if it works so i'm going to press

2552
20:57:25,831 --> 20:57:30,240
the plus button in here and you can see our new node route is being displayed on

2553
20:57:30,240 --> 20:57:33,440
the screen with the little text that we added here

2554
20:57:33,440 --> 20:57:37,440
that says write your new node here right and pressing the back button will then

2555
20:57:37,440 --> 20:57:41,119
send us back to the main ui of the application and you may have noticed

2556
20:57:41,119 --> 20:57:46,240
that in the notes view i didn't say push name and remove until and that's because

2557
20:57:46,240 --> 20:57:50,479
when you press the plus button in order to create a new note you want the user

2558
20:57:50,479 --> 20:57:53,831
to be able to get back to the main ui of the application whenever they need to

2559
20:57:53,831 --> 20:57:57,360
and that's what is facility facilitating this back

2560
20:57:57,360 --> 20:58:02,399
button right here okay all right that was great stuff and that

2561
20:58:02,399 --> 20:58:06,080
is pretty much all we had to do for this chapter

2562
20:58:06,080 --> 20:58:10,399
so a short chapter is kind of refreshing to be honest with you if you ask me so

2563
20:58:10,399 --> 20:58:16,080
that's really good um as is tradition let's commit our work so

2564
20:58:16,080 --> 20:58:20,000
that we can get ready for the next chapter i'm gonna change the screen

2565
20:58:20,000 --> 20:58:25,512
layout here a little bit oops um let's go in here change the

2566
20:58:25,512 --> 20:58:29,919
screen layout and let me bring up the terminal and

2567
20:58:29,919 --> 20:58:34,160
increase the size of the screen so i see it better

2568
20:58:34,160 --> 20:58:38,960
so we're going to have a look at our git status and i can see there's a whole new

2569
20:58:38,960 --> 20:58:43,119
folder in here called lib views notes and we have two

2570
20:58:43,119 --> 20:58:47,919
files under there which is our notes view and new notes view so let's just

2571
20:58:47,919 --> 20:58:51,831
say git at all and have a look at our status here you

2572
20:58:51,831 --> 20:58:55,679
can see now everything's mentioned there i'm going to get rid of

2573
20:58:55,679 --> 20:58:59,039
this make it a little bit bigger so you see better

2574
20:58:59,039 --> 20:59:02,551
so what we need to do is just to commit this first and we're going to say step

2575
20:59:02,551 --> 20:59:06,399
13. i believe so at least so let's have a

2576
20:59:06,399 --> 20:59:11,360
look at our logs yeah step 12 was the last chapter so we're going to say

2577
20:59:11,360 --> 20:59:16,240
um step 13 and i'm gonna push now our commits to

2578
20:59:16,240 --> 20:59:21,191
github and then we're going to say good tag

2579
20:59:21,191 --> 20:59:26,639
step 13 as well and with push tags

2580
20:59:26,639 --> 20:59:30,000
all right so that's for our tagging as well so if

2581
20:59:30,000 --> 20:59:34,080
i say tag now we can see all the tags that we've created so far 13 of them all

2582
20:59:34,080 --> 20:59:38,800
right so that's pretty much what we had to do

2583
20:59:38,800 --> 20:59:42,551
and now as again is a tradition for every

2584
20:59:42,551 --> 20:59:45,360
chapter of this flood of course i usually talk about what we need to do in

2585
20:59:45,360 --> 20:59:49,039
the next chapter so we can get right get ready for that chapter as well in the

2586
20:59:49,039 --> 20:59:52,320
next chapter now that we have our new note view

2587
20:59:52,320 --> 20:59:57,191
we are going to work with adding the logic to new note view so that we can

2588
20:59:57,191 --> 21:00:02,240
actually insert new notes into our database so that we can start

2589
21:00:02,240 --> 21:00:05,679
manipulating those notes so next chapter is going to

2590
21:00:05,679 --> 21:00:10,080
be a bit of a heavy chapter code wise there is a lot of code so

2591
21:00:10,080 --> 21:00:14,240
if you want to grab some refreshments be my guest please go ahead and do that and

2592
21:00:14,240 --> 21:00:18,720
i'll see you in the next chapter hello everyone and welcome to chapter 31 of

2593
21:00:18,720 --> 21:00:22,240
this flutter course in the previous chapter we did some preparation work in

2594
21:00:22,240 --> 21:00:26,800
order to create our new note view and we've tagged everything everything

2595
21:00:26,800 --> 21:00:31,191
is ready it's just that we created our new note view as a stateful widget which

2596
21:00:31,191 --> 21:00:35,919
has pretty much no logic it had a simple scaffold with an app bar and a simple

2597
21:00:35,919 --> 21:00:39,919
text displayed on the screen so in this chapter

2598
21:00:39,919 --> 21:00:43,759
we are going to make sure that the user is not only able

2599
21:00:43,759 --> 21:00:48,320
to go to the new note view or sorry the new note view but also he

2600
21:00:48,320 --> 21:00:53,600
or she is able to create an actual note and modify its text

2601
21:00:53,600 --> 21:00:58,399
and then be able to go back to the main user interface so

2602
21:00:58,399 --> 21:01:01,440
we have quite a lot of work to do these chapters as i mentioned in the previous

2603
21:01:01,440 --> 21:01:04,872
chapter at the end of the previous chapter this chapter is kind of quite

2604
21:01:04,872 --> 21:01:08,960
code heavy so uh but i'm gonna make sure to take you

2605
21:01:08,960 --> 21:01:12,240
through all the code that we're gonna write step by step so you don't miss

2606
21:01:12,240 --> 21:01:16,320
anything okay um before we get started we need to fix

2607
21:01:16,320 --> 21:01:21,679
something in our um notes view and that is to ensure that we're listening to

2608
21:01:21,679 --> 21:01:28,160
both the active state of our all nodes stream plus the waiting and be i mean

2609
21:01:28,160 --> 21:01:32,240
without us having to actually without me having to explain that

2610
21:01:32,240 --> 21:01:36,000
in abstract terms let me bring up the code and have a look at what we've done

2611
21:01:36,000 --> 21:01:40,720
um and how we can make it better so

2612
21:01:40,720 --> 21:01:45,191
let me change the screen layout so you see the code better let's go to

2613
21:01:45,191 --> 21:01:48,551
our notes view in here and you can see at

2614
21:01:48,551 --> 21:01:53,512
in in the actual body of our notes we have the future builder where we get or

2615
21:01:53,512 --> 21:01:57,759
create a user with an email address and which you'll soon actually see why

2616
21:01:57,759 --> 21:02:01,831
we're doing this and also we have this this part which says switch connection

2617
21:02:01,831 --> 21:02:06,720
state waiting and then in here says waiting for all notes the plan for us is

2618
21:02:06,720 --> 21:02:11,360
to in the future soon actually in the near future to display all the notes

2619
21:02:11,360 --> 21:02:15,600
that the user has created in this user interface however right now we're only

2620
21:02:15,600 --> 21:02:18,479
listening for the connection state waiting

2621
21:02:18,479 --> 21:02:21,831
and if you look at the document documentation for waiting it says

2622
21:02:21,831 --> 21:02:25,512
connected to an asynchronous computation i'm waiting interaction however if you

2623
21:02:25,512 --> 21:02:30,160
look at the active it says connected to an active asynchronous computation that

2624
21:02:30,160 --> 21:02:34,240
ha and that stream has returned at least one value so

2625
21:02:34,240 --> 21:02:38,639
now we have if you look at our stream is a stream of all notes so this all notes

2626
21:02:38,639 --> 21:02:42,551
can either be empty in the beginning or it could contain some notes let's go

2627
21:02:42,551 --> 21:02:46,800
with the stream being empty when the stream is empty meaning that

2628
21:02:46,800 --> 21:02:50,080
the user hasn't created any notes yet that have been populated in a note

2629
21:02:50,080 --> 21:02:54,639
service then the connection state of that stream will be waiting because dart

2630
21:02:54,639 --> 21:03:00,399
is now waiting for that stream to return the first value so that's great and

2631
21:03:00,399 --> 21:03:03,600
we're saying okay if that's the case then return this but as soon as the

2632
21:03:03,600 --> 21:03:08,399
stream contains one value or as soon as the stream actually returns one value

2633
21:03:08,399 --> 21:03:12,399
then its connection state is going to be active and what we've done is just we

2634
21:03:12,399 --> 21:03:16,320
waited for waiting state but as soon as it goes to active then we're showing a

2635
21:03:16,320 --> 21:03:21,119
circular progress indicator and that's not the not not the right logic so

2636
21:03:21,119 --> 21:03:26,080
we need to fix that so let's go to our notes view and right after this waiting

2637
21:03:26,080 --> 21:03:28,800
we're also going to say

2638
21:03:28,800 --> 21:03:35,279
case connection states dot active all right so this

2639
21:03:35,279 --> 21:03:40,160
writing two cases right after each other it's an implicit fall through as i like

2640
21:03:40,160 --> 21:03:43,512
to call it some language is called a follow-through for instance swift

2641
21:03:43,512 --> 21:03:49,039
meaning that a case has no logic and is literally falling through to the next

2642
21:03:49,039 --> 21:03:53,360
case so you don't have any break statements here in here okay

2643
21:03:53,360 --> 21:03:57,191
so this is a follow through implicit fall through and

2644
21:03:57,191 --> 21:04:01,039
meaning that in both waiting and active states then we're showing this text and

2645
21:04:01,039 --> 21:04:05,119
if you command s then you're not going to see any difference in the running of

2646
21:04:05,119 --> 21:04:09,191
your application it's just that we fixed a broken logic

2647
21:04:09,191 --> 21:04:11,679
all right

2648
21:04:11,679 --> 21:04:17,191
all right now to the exciting parts and i'm gonna bring new notes view to

2649
21:04:17,191 --> 21:04:20,479
here just gonna reorganize it you don't have to do that but you need to now go

2650
21:04:20,479 --> 21:04:24,800
to your new node view dart file because this is

2651
21:04:24,800 --> 21:04:29,119
where we're gonna work on for pretty much the majority of this chapter now

2652
21:04:29,119 --> 21:04:31,512
okay so what we're going to do in this new

2653
21:04:31,512 --> 21:04:36,872
note view upon coming to the screen we are actually going to create a new note

2654
21:04:36,872 --> 21:04:42,080
for you okay and we're going to keep hold of that new note and creating a new

2655
21:04:42,080 --> 21:04:45,831
node if you remember from our node service if you go our

2656
21:04:45,831 --> 21:04:49,919
utilities we have crowd here and we have node service and then we have a lot of

2657
21:04:49,919 --> 21:04:54,000
functions in here at least let's see if we can find the create node view sorry

2658
21:04:54,000 --> 21:04:59,679
the create node function here you can see it's a future so we cannot

2659
21:04:59,679 --> 21:05:05,440
immediately get get a result from this create new node so the goal for our new

2660
21:05:05,440 --> 21:05:11,831
node view here is to use future builder inside the body of this function

2661
21:05:11,831 --> 21:05:15,831
so inside the body of this function we're going to say as soon as this

2662
21:05:15,831 --> 21:05:20,800
new node view state has been created then it also needs to create a new node

2663
21:05:20,800 --> 21:05:25,919
in the database however remember with flutter we have hot reload meaning that

2664
21:05:25,919 --> 21:05:30,800
as you're on that view and you're editing your text and blah blah you may

2665
21:05:30,800 --> 21:05:33,831
change your code a little bit and then press command s

2666
21:05:33,831 --> 21:05:38,720
pressing command s is just going to call your build function again so if you then

2667
21:05:38,720 --> 21:05:44,399
inside your build functions um scaffold body and you have a future builder which

2668
21:05:44,399 --> 21:05:48,639
in turn creates a new note that function is gonna go gonna get called again

2669
21:05:48,639 --> 21:05:52,639
meaning that every time you do hot reload while you're on that view a new

2670
21:05:52,639 --> 21:05:57,440
note is going to be created and for that we as the caption indicates

2671
21:05:57,440 --> 21:06:02,320
we need to keep hold of a variable called notes so that we don't recreate

2672
21:06:02,320 --> 21:06:07,039
it every time the build function gets called alright so let's go ahead and do

2673
21:06:07,039 --> 21:06:11,119
that so in inside the state of your

2674
21:06:11,119 --> 21:06:16,000
new notes view let's go and define and say database

2675
21:06:16,000 --> 21:06:19,600
notes and we're just going to say notes like

2676
21:06:19,600 --> 21:06:23,831
that okay also we just make it optional because it

2677
21:06:23,831 --> 21:06:27,919
has no value to start with

2678
21:06:27,919 --> 21:06:35,119
okay and what also what we also need is to keep hold of our note service um and

2679
21:06:35,119 --> 21:06:38,479
as you saw in the previous chapters we created node server as a singleton but

2680
21:06:38,479 --> 21:06:43,119
also you'd be really good if you didn't have to call this a factory uh function

2681
21:06:43,119 --> 21:06:46,399
for the singleton over and over again whenever we're working with node servers

2682
21:06:46,399 --> 21:06:50,720
so we're gonna also keep hold of our node service as a late final variable

2683
21:06:50,720 --> 21:06:53,831
here so let's just say late final and we're

2684
21:06:53,831 --> 21:07:00,000
going to say this is endnote service now first like this all right

2685
21:07:00,000 --> 21:07:03,600
and um you haven't seen maybe the ui of the

2686
21:07:03,600 --> 21:07:08,320
application but while we're working on variables to keep hold of we also need

2687
21:07:08,320 --> 21:07:13,191
to keep hold of a text editing controller now the way the ui of this

2688
21:07:13,191 --> 21:07:17,039
view is going to work here is that instead of this text in here we're going

2689
21:07:17,039 --> 21:07:22,551
to create a text field which will vertically increase the size as the user

2690
21:07:22,551 --> 21:07:27,039
keeps typing their information or their notes in that field

2691
21:07:27,039 --> 21:07:30,080
so what we're going to do is to keep track

2692
21:07:30,080 --> 21:07:34,080
of the text that the user enters and when the user is entering new text we

2693
21:07:34,080 --> 21:07:39,279
will automatically sync that information with our database and in the future when

2694
21:07:39,279 --> 21:07:44,160
we go to firebase we're going to sync that information with firebase

2695
21:07:44,160 --> 21:07:50,720
so we need a text editing controller to keep track of the text changes all right

2696
21:07:50,720 --> 21:07:52,872
so um

2697
21:07:52,872 --> 21:07:57,119
let me then bring this caption in here and let's then go ahead

2698
21:07:57,119 --> 21:08:02,320
and do as the caption says let's say late final and text

2699
21:08:02,320 --> 21:08:05,679
i think controller these documentation sometimes

2700
21:08:05,679 --> 21:08:13,919
are just excessive i believe and we call it text controller okay

2701
21:08:13,919 --> 21:08:19,119
all right um that was great so what we need to do now um is to

2702
21:08:19,119 --> 21:08:23,039
facilitate our uh i mean we haven't really initialized any of these but

2703
21:08:23,039 --> 21:08:27,440
we're going to take care of that soon so where we haven't forgotten about that

2704
21:08:27,440 --> 21:08:30,479
but what we need now as i mentioned in the beginning of this chapter when we

2705
21:08:30,479 --> 21:08:34,080
come to this screen we're going to create a new note and we need to have a

2706
21:08:34,080 --> 21:08:37,440
function for it as the caption in the case it's going to be called create new

2707
21:08:37,440 --> 21:08:41,600
note and it's an asynchronous function and we'll see soon why

2708
21:08:41,600 --> 21:08:46,399
so let's go ahead and say future at database node

2709
21:08:46,399 --> 21:08:50,240
because it creates a node with our node service

2710
21:08:50,240 --> 21:08:54,800
and we're going to call it create new node and it's an asynchronous function

2711
21:08:54,800 --> 21:08:57,679
so in this function what we're going to do

2712
21:08:57,679 --> 21:09:02,080
first is just to see have we created this note before inside this node

2713
21:09:02,080 --> 21:09:05,512
variable if we have created this node before then we don't have to create it

2714
21:09:05,512 --> 21:09:09,440
again we just return but if we haven't created it then we go to the node

2715
21:09:09,440 --> 21:09:13,919
service and say create the node and then get that node back to us all

2716
21:09:13,919 --> 21:09:18,000
right so let's go ahead and do that let's just

2717
21:09:18,000 --> 21:09:24,240
say final existing node is equal to this note

2718
21:09:24,240 --> 21:09:29,759
and then we say um then in here we say if existing note

2719
21:09:29,759 --> 21:09:33,600
is not null then we just return it

2720
21:09:33,600 --> 21:09:38,160
this thing notes all right so that's the return statement that

2721
21:09:38,160 --> 21:09:42,639
means we already have a note and if we don't then we're going to create a new

2722
21:09:42,639 --> 21:09:49,119
note but remember when we create a new note our um creates new note function on

2723
21:09:49,119 --> 21:09:55,831
the notes service if you look here create note it requires an owner so now

2724
21:09:55,831 --> 21:09:58,720
all of a sudden we have to have an owner okay

2725
21:09:58,720 --> 21:10:04,800
and again remember the notes view upon going to the main ui of the application

2726
21:10:04,800 --> 21:10:10,000
the notes view creates a new user in the database meaning that you've logged in

2727
21:10:10,000 --> 21:10:13,679
with firebase then you go to the notes view notes you took care of creating

2728
21:10:13,679 --> 21:10:18,399
that user all we have to do here is just to retrieve that user so we can actually

2729
21:10:18,399 --> 21:10:24,399
count with that user already existing inside the database all right

2730
21:10:24,399 --> 21:10:28,240
so let's just then say final current user

2731
21:10:28,240 --> 21:10:33,039
is equal to um our auth service

2732
21:10:33,039 --> 21:10:36,872
firebase and then we're gonna say current user

2733
21:10:36,872 --> 21:10:41,191
and we're just gonna explicitly um unwrap it meaning that

2734
21:10:41,191 --> 21:10:46,720
we're expecting a user to be there if you've ended up somehow in this new note

2735
21:10:46,720 --> 21:10:50,639
view you may be thinking but why that's unsafe well

2736
21:10:50,639 --> 21:10:54,800
it is unsafe it is it is going to crash the application if the current user

2737
21:10:54,800 --> 21:11:00,479
doesn't exist however you should never end up in this

2738
21:11:00,479 --> 21:11:04,872
new node view if you don't have a current user so ending up on this screen

2739
21:11:04,872 --> 21:11:08,639
and not having a current user is worth the crash because you want your

2740
21:11:08,639 --> 21:11:13,919
application to crash if you're if what you expect from your applications user

2741
21:11:13,919 --> 21:11:18,551
interface and logic has not been met by the previous screen so you're now

2742
21:11:18,551 --> 21:11:22,960
creating an expectation and crashing the application at this point is actually a

2743
21:11:22,960 --> 21:11:26,800
good thing in my eyes because if the current user doesn't exist you should

2744
21:11:26,800 --> 21:11:30,160
never end up in this view if you've ended up in this view and you have no

2745
21:11:30,160 --> 21:11:33,919
current user something is seriously wrong so it's completely safe i would

2746
21:11:33,919 --> 21:11:38,720
say to explicitly unwrap the current user in here okay

2747
21:11:38,720 --> 21:11:42,399
and we're gonna extract the email from the current user

2748
21:11:42,399 --> 21:11:46,080
so we're going to say current user.email and we're going to unwrap that as well

2749
21:11:46,080 --> 21:11:50,080
because remember email was an optional field but again since we know that

2750
21:11:50,080 --> 21:11:53,919
our authentication right now is going to take care of the email

2751
21:11:53,919 --> 21:11:58,160
because all our users register with an email addresses and the password then we

2752
21:11:58,160 --> 21:12:02,800
can be sure that the email address exists all right

2753
21:12:02,800 --> 21:12:06,399
so let's go ahead and get that owner from the database so we're going to say

2754
21:12:06,399 --> 21:12:14,000
the owner is equal to our off our notes service

2755
21:12:14,000 --> 21:12:19,360
so we're gonna say await notes service and then we're gonna get the user

2756
21:12:19,360 --> 21:12:24,479
with that email and then we're gonna just return our

2757
21:12:24,479 --> 21:12:29,600
note service create node so we're going to create a new node in here okay

2758
21:12:29,600 --> 21:12:35,600
so let's say note service creates notes with that owner and

2759
21:12:35,600 --> 21:12:39,279
you see this returns um

2760
21:12:39,279 --> 21:12:42,479
a future of database note which is pretty much what we need to return in

2761
21:12:42,479 --> 21:12:48,320
here so let's just return a wait on that all right

2762
21:12:48,320 --> 21:12:53,119
all right fantastic that was for the creation of the new notes and in here

2763
21:12:53,119 --> 21:12:56,320
you can see that we're not setting this um

2764
21:12:56,320 --> 21:13:00,639
new notes that we just created to this note

2765
21:13:00,639 --> 21:13:03,440
variable in there we're going to actually take care of

2766
21:13:03,440 --> 21:13:07,600
that a little bit later so you don't have to worry about

2767
21:13:07,600 --> 21:13:10,479
that

2768
21:13:10,479 --> 21:13:15,759
all right that's for the creation of our notes

2769
21:13:15,759 --> 21:13:22,080
now what we need to do is when this view is disposed of meaning

2770
21:13:22,080 --> 21:13:26,639
that for instance the user presses the back button on this view

2771
21:13:26,639 --> 21:13:33,191
we need to ensure that the current node in the database gets deleted if

2772
21:13:33,191 --> 21:13:37,512
there is no text entered for for that node so

2773
21:13:37,512 --> 21:13:42,720
the reason for that is let's say that the user is on the main interface uh of

2774
21:13:42,720 --> 21:13:46,479
the application right here the user then presses the plus button and then says

2775
21:13:46,479 --> 21:13:50,240
hmm i actually didn't want to do that so they press the back button

2776
21:13:50,240 --> 21:13:55,600
if we allow the user to do that and press press the plus button we create a

2777
21:13:55,600 --> 21:14:00,240
new empty node and go back then the view may just be full of empty nodes so it

2778
21:14:00,240 --> 21:14:04,720
will just be like empty cells that the user is not even able to see because

2779
21:14:04,720 --> 21:14:08,399
later as we'll see in the next chapters we're going to populate this list with

2780
21:14:08,399 --> 21:14:12,551
the actual contents of your notes because our notes don't have titles so

2781
21:14:12,551 --> 21:14:16,872
the actual text we're going to display is the note itself in here inside

2782
21:14:16,872 --> 21:14:21,279
various various cells so what we're going to do is saying that

2783
21:14:21,279 --> 21:14:25,191
if you go and create a new node and you don't enter any text meaning that the

2784
21:14:25,191 --> 21:14:29,119
text is empty work upon you going out of this screen

2785
21:14:29,119 --> 21:14:33,119
out of the new note screen we're going to delete that note if it's empty okay

2786
21:14:33,119 --> 21:14:36,320
so it just makes sense

2787
21:14:36,320 --> 21:14:40,080
so let's go ahead and create and find that function

2788
21:14:40,080 --> 21:14:47,600
so i'm going to bring that

2789
21:14:47,600 --> 21:14:54,551
here and let's just say void delete note if text is empty all right

2790
21:14:54,551 --> 21:14:58,479
and then we go in here now we have to have a look

2791
21:14:58,479 --> 21:15:01,512
at our notes

2792
21:15:01,512 --> 21:15:08,000
and and let's just say we get we get the note so we say in here final note

2793
21:15:08,000 --> 21:15:14,960
note that should be populated inside of our state and then we say if the

2794
21:15:14,960 --> 21:15:19,831
text controller's text is empty

2795
21:15:19,831 --> 21:15:26,720
it's empty and the node is not null then we go to our node service here

2796
21:15:26,720 --> 21:15:32,960
and then we ask it to delete the nodes right there okay and then we say use

2797
21:15:32,960 --> 21:15:36,720
notes id like that

2798
21:15:36,720 --> 21:15:40,639
alright so yeah that should that should be good to

2799
21:15:40,639 --> 21:15:45,679
go so that's the deletion of the note from the database if the text inside our

2800
21:15:45,679 --> 21:15:50,639
text editing controller is empty

2801
21:15:50,639 --> 21:15:55,679
all right so that was for deleting the note if it's empty how about actually

2802
21:15:55,679 --> 21:16:00,551
saving the notes if it's if there actually is text in it

2803
21:16:00,551 --> 21:16:05,512
and what we're gonna do in our as you'll see soon inside this view where the user

2804
21:16:05,512 --> 21:16:09,759
can edit their notes or add new text to the notes we're not going to have any

2805
21:16:09,759 --> 21:16:13,679
type of save button in modern mobile applications if you're not a software

2806
21:16:13,679 --> 21:16:16,639
development from before you may not notice but if you're a designer you

2807
21:16:16,639 --> 21:16:21,119
probably already noticed that in most note-taking applications on mobile

2808
21:16:21,119 --> 21:16:25,919
devices at least there is no save button all your contents will automatically be

2809
21:16:25,919 --> 21:16:29,831
saved so that's actually a good design decision usually in most places you

2810
21:16:29,831 --> 21:16:33,679
don't need a save button usually in mobile applications sorry especially in

2811
21:16:33,679 --> 21:16:37,600
mobile applications so we're not going to have a save button

2812
21:16:37,600 --> 21:16:41,191
so we in order to facilitate not having a save button we have to have a

2813
21:16:41,191 --> 21:16:44,240
functionality that automatically saves the current

2814
21:16:44,240 --> 21:16:48,479
the current node for instance if the user then goes out of this view so it

2815
21:16:48,479 --> 21:16:52,399
will automatically be saved okay so let's go ahead and create a function

2816
21:16:52,399 --> 21:16:57,512
in here as the as the name indicates and it's called save node if text not

2817
21:16:57,512 --> 21:17:01,119
empty and i'm gonna bring the uh function

2818
21:17:01,119 --> 21:17:05,440
signature from my node so i don't have to type it manually so you will need to

2819
21:17:05,440 --> 21:17:08,720
unfortunately type this manually unfortunately unfortunately i don't know

2820
21:17:08,720 --> 21:17:13,191
but you will need to type in manually save notes if text not empty

2821
21:17:13,191 --> 21:17:18,240
and what we're going to do in here is very similar to our the code that we

2822
21:17:18,240 --> 21:17:24,000
wrote for delete node if text empty so first we're going to get the node

2823
21:17:24,000 --> 21:17:30,000
is node and then we get the text in our text controllers text

2824
21:17:30,000 --> 21:17:32,639
and then in here um

2825
21:17:32,639 --> 21:17:37,600
we're gonna say um if the note is not null if note is

2826
21:17:37,600 --> 21:17:40,000
not normal and

2827
21:17:40,000 --> 21:17:44,960
um our text is not empty then we're gonna await

2828
21:17:44,960 --> 21:17:48,720
our note service

2829
21:17:48,720 --> 21:17:52,720
update notes functionality here

2830
21:17:52,720 --> 21:17:56,800
and that's exactly what we're doing here so it's very simple we're just saying

2831
21:17:56,800 --> 21:18:03,360
that if there is text which is is not empty and we have a note then just

2832
21:18:03,360 --> 21:18:08,720
update that note in the database so very very simple

2833
21:18:08,720 --> 21:18:12,800
all right two very important functions now we have to put these functions in

2834
21:18:12,800 --> 21:18:16,399
use as you can see we're getting a warning in here from the analyzer saying

2835
21:18:16,399 --> 21:18:20,000
that these are two private functions which are not referenced and that's for

2836
21:18:20,000 --> 21:18:23,831
a good reason because we're going to reference them inside the disposal of

2837
21:18:23,831 --> 21:18:28,639
our new node view state when this new note view basically is

2838
21:18:28,639 --> 21:18:32,720
being killed by the system for instance when the user presses the back button

2839
21:18:32,720 --> 21:18:36,720
okay so let's go into the dispose function

2840
21:18:36,720 --> 21:18:42,320
and we have to take care of uh three things in here

2841
21:18:42,320 --> 21:18:45,360
so let's go and

2842
21:18:45,360 --> 21:18:50,160
say that we have a dispose function in here and that's

2843
21:18:50,160 --> 21:18:53,039
going to be overwritten by default sorry i'll bring it up here and i'll write it

2844
21:18:53,039 --> 21:18:58,551
from the beginning so you see this pose okay and it does overwriting for us and

2845
21:18:58,551 --> 21:19:02,872
what we're going to do is first going to say delete the notes if text is empty

2846
21:19:02,872 --> 21:19:06,000
then what we're going to do is we're going to say otherwise save the notes if

2847
21:19:06,000 --> 21:19:09,191
text is not empty and then we're going to get rid of the

2848
21:19:09,191 --> 21:19:14,320
text controllers and call the dispose on it so as a good citizen of the dart land

2849
21:19:14,320 --> 21:19:17,512
when you create a new text editing controller which we're soon going to do

2850
21:19:17,512 --> 21:19:23,919
we also need to make sure that we dispose of it upon this pose all right

2851
21:19:23,919 --> 21:19:27,831
so um so that was a lot of code and i'm gonna

2852
21:19:27,831 --> 21:19:31,679
also have a look here i can see i haven't actually provided

2853
21:19:31,679 --> 21:19:36,080
any captions for us taking care of the init

2854
21:19:36,080 --> 21:19:42,800
so um let's take care of

2855
21:19:42,800 --> 21:19:45,919
so i basically what i'm doing right now because i just noticed that i haven't

2856
21:19:45,919 --> 21:19:51,119
provided a caption for the init function well we're gonna do it right now um

2857
21:19:51,119 --> 21:19:56,551
because that's a very very important uh basically function that we need to

2858
21:19:56,551 --> 21:20:01,191
program so uh i apologize for that as well i'm

2859
21:20:01,191 --> 21:20:06,639
gonna bring it here and then show you the caption so you see what i'm doing

2860
21:20:06,639 --> 21:20:11,191
so we have this pose but we don't have init state yet and i'm going to put init

2861
21:20:11,191 --> 21:20:15,440
state in here so uh let's see or do we have any state

2862
21:20:15,440 --> 21:20:18,000
already

2863
21:20:18,000 --> 21:20:22,639
i don't see that so

2864
21:20:22,639 --> 21:20:25,919
and i can see that the visual studio code isn't really helping me with that

2865
21:20:25,919 --> 21:20:29,440
so i'm just going to say overwrite void init state

2866
21:20:29,440 --> 21:20:32,000
like that

2867
21:20:32,000 --> 21:20:36,551
and then we have to call super in its states okay so you may have to type that

2868
21:20:36,551 --> 21:20:40,720
by hand as well individual studio code was being a little bit angry at me

2869
21:20:40,720 --> 21:20:44,000
maybe because i just forgot to write the caption for internet state

2870
21:20:44,000 --> 21:20:47,679
and then in here what we need to do is just to ensure that we're creating both

2871
21:20:47,679 --> 21:20:52,080
an instance of node service and also our text editing controller okay so i'm just

2872
21:20:52,080 --> 21:20:58,240
going to say node service and that is equal to node service and

2873
21:20:58,240 --> 21:21:02,000
that's just a singleton so it's not going to create really a new instance if

2874
21:21:02,000 --> 21:21:06,240
it already existed from before and our text controller is going to be a

2875
21:21:06,240 --> 21:21:12,080
new instance of text editing editing controller just like that

2876
21:21:12,080 --> 21:21:14,800
all right so i'm going to save this and then i'm

2877
21:21:14,800 --> 21:21:20,000
going to do a hot restart um and scrcpy is a little bit angry these days

2878
21:21:20,000 --> 21:21:23,279
with me when i do hot restart and i don't really know why

2879
21:21:23,279 --> 21:21:27,600
but i have learned to live with it so i'm just going to say scr cpy

2880
21:21:27,600 --> 21:21:32,479
and then i'm going to run the application without debugging and

2881
21:21:32,479 --> 21:21:36,160
bringing it bring it right there okay

2882
21:21:36,160 --> 21:21:40,232
while that is doing its job we need to take care of

2883
21:21:40,232 --> 21:21:44,080
some other functionality

2884
21:21:44,080 --> 21:21:48,320
you see um when the user is entering text in the

2885
21:21:48,320 --> 21:21:52,320
main ui of the application so when he or she is entering the text typing on a

2886
21:21:52,320 --> 21:21:57,279
keyboard we need to make sure that we're constantly updating

2887
21:21:57,279 --> 21:22:00,399
our notes in the database so

2888
21:22:00,399 --> 21:22:05,279
we're not gonna leave the updating uh for instance while

2889
21:22:05,279 --> 21:22:08,960
when the user presses the back button so we're constantly gonna do that as the

2890
21:22:08,960 --> 21:22:14,872
user is typing um in the on the screen so

2891
21:22:14,872 --> 21:22:19,512
for that we need some listeners so as the caption indicate as a caption at the

2892
21:22:19,512 --> 21:22:22,720
bottom of the screen in any case we need a text controller

2893
21:22:22,720 --> 21:22:24,551
listener and

2894
21:22:24,551 --> 21:22:28,399
all this text controller listener is going to do is it's going to be a body

2895
21:22:28,399 --> 21:22:32,551
of function it's going to be a function that takes the current node if it exists

2896
21:22:32,551 --> 21:22:37,039
then it's going to take the current text editing controllers text and update that

2897
21:22:37,039 --> 21:22:42,800
notes in the database all right so let's go and create that function so

2898
21:22:42,800 --> 21:22:47,360
void and we're going to say text controller listener

2899
21:22:47,360 --> 21:22:52,320
and remember this function is not yet being called it's it's for us

2900
21:22:52,320 --> 21:22:56,479
then to hook to the text editing controller as a listener so we are soon

2901
21:22:56,479 --> 21:23:00,399
gonna write another function that says hey text editing controller

2902
21:23:00,399 --> 21:23:04,232
whenever your text changes call this function all right so don't worry about

2903
21:23:04,232 --> 21:23:09,360
that it's not being called yet so in here we're basically going to get

2904
21:23:09,360 --> 21:23:14,399
the note um i'm going to get rid of this as well i'm going to say final

2905
21:23:14,399 --> 21:23:17,440
um notes is this note and then we're going

2906
21:23:17,440 --> 21:23:20,960
to say if note is null meaning that we don't have the note then

2907
21:23:20,960 --> 21:23:25,759
we just return we can't work with null nodes

2908
21:23:25,759 --> 21:23:31,512
and then we're going to say get the text which is from our text controller

2909
21:23:31,512 --> 21:23:36,551
like that and then we're just going to await on our note service updates notes

2910
21:23:36,551 --> 21:23:42,000
with that text and then comma at the end to get the formatting working

2911
21:23:42,000 --> 21:23:45,440
so that's easy that's very simple doesn't require so much

2912
21:23:45,440 --> 21:23:48,831
explanation perhaps it's just a simple update note all

2913
21:23:48,831 --> 21:23:52,232
right perfect so

2914
21:23:52,232 --> 21:23:57,039
as i mentioned now that we have this text controller listener we also need to

2915
21:23:57,039 --> 21:24:01,512
have a function that is called setup text controller listener which first

2916
21:24:01,512 --> 21:24:06,160
removes this listener from our text editing controller if it has already

2917
21:24:06,160 --> 21:24:10,960
been added and then it adds it again all right so let's go ahead and i'm just

2918
21:24:10,960 --> 21:24:15,039
going to copy that function name so i don't have to write it again

2919
21:24:15,039 --> 21:24:19,919
um and then in here we go to our text editing controller which we call text

2920
21:24:19,919 --> 21:24:25,279
controller and we say remove listener and that listener at the moment for us

2921
21:24:25,279 --> 21:24:28,479
is called text controller listener okay so

2922
21:24:28,479 --> 21:24:31,512
and then after removing it we're going to add it

2923
21:24:31,512 --> 21:24:36,720
so right here i'm going to add listener and

2924
21:24:36,720 --> 21:24:41,119
just add that listener back in case this function is called multiple times all

2925
21:24:41,119 --> 21:24:43,759
right

2926
21:24:43,759 --> 21:24:49,039
so now we're going gonna get to the juicy part of this chapter which is

2927
21:24:49,039 --> 21:24:53,831
because you see we've already added a lot of coding here but no one's really

2928
21:24:53,831 --> 21:24:58,479
taking advantage of these so or actually we can't say that because the

2929
21:24:58,479 --> 21:25:02,320
idiots sorry the disposes for instance taking advantage of save node if not

2930
21:25:02,320 --> 21:25:05,919
empty and it's taking advantage of delete note if text is empty but we're

2931
21:25:05,919 --> 21:25:09,039
not taking advantage of this create new node and we're not taking advantage of

2932
21:25:09,039 --> 21:25:13,191
the setup text controller listener so that's what we're going to

2933
21:25:13,191 --> 21:25:17,440
do in the body of our um of our

2934
21:25:17,440 --> 21:25:20,960
uh widget at the moment the body it just says

2935
21:25:20,960 --> 21:25:25,759
context write your new node in here but what we're going to do is we're going to

2936
21:25:25,759 --> 21:25:31,279
replace that with our future builder

2937
21:25:31,279 --> 21:25:34,479
what is this future builder actually going to do remember when you press the

2938
21:25:34,479 --> 21:25:38,232
plus button on the main ui of the application no one is creating a new

2939
21:25:38,232 --> 21:25:42,479
note for you you need to do that yourself in this new note view as its

2940
21:25:42,479 --> 21:25:47,440
name indicates so let's go and replace the body of this function of this

2941
21:25:47,440 --> 21:25:52,551
parameter with the future builder remember the future builder has to have

2942
21:25:52,551 --> 21:25:56,080
two variables one is the future itself and

2943
21:25:56,080 --> 21:25:59,919
the other one is going to be its builder function so

2944
21:25:59,919 --> 21:26:06,000
for the future we need to call the create new node which returns a future

2945
21:26:06,000 --> 21:26:11,512
remember it actually returns the database note and we've already

2946
21:26:11,512 --> 21:26:16,399
coded this function okay so that's the future that is going to be

2947
21:26:16,399 --> 21:26:22,232
called by the future builder then we're going to write the builder

2948
21:26:22,232 --> 21:26:25,039
and i'm going to get help from visual studio code to complete this and

2949
21:26:25,039 --> 21:26:28,960
remember in your builder you have to return a widget

2950
21:26:28,960 --> 21:26:31,679
so what we're gonna do is since this is a

2951
21:26:31,679 --> 21:26:36,551
future we need to look for its done state it's not gonna be where we don't

2952
21:26:36,551 --> 21:26:41,119
have to look for active and waiting we just have to look for done

2953
21:26:41,119 --> 21:26:46,160
or else we're going to show a progress indicator okay so let's just say switch

2954
21:26:46,160 --> 21:26:52,399
snapshot state connection state and help from visual studio code to add

2955
21:26:52,399 --> 21:26:56,160
these missing case clauses for me so um

2956
21:26:56,160 --> 21:27:00,800
non-waiting so none of these are important except for done

2957
21:27:00,800 --> 21:27:04,000
right so we're going to leave it like that and

2958
21:27:04,000 --> 21:27:07,919
then in the case of uh default so we're just going to say

2959
21:27:07,919 --> 21:27:13,119
default oops return cons circular progress indicator

2960
21:27:13,119 --> 21:27:17,679
so for now we're saying that when this create new node is finished so

2961
21:27:17,679 --> 21:27:20,960
a new node has been created in the database we come to done but we're not

2962
21:27:20,960 --> 21:27:24,720
returning anything and that's the reason you're seeing this little error here but

2963
21:27:24,720 --> 21:27:28,551
if the connection state is not done for instance if it's waiting for the create

2964
21:27:28,551 --> 21:27:32,160
node to happen then we're going to show a little circular progress indicator to

2965
21:27:32,160 --> 21:27:35,440
the user and remember this is going to happen so fast that you're not even

2966
21:27:35,440 --> 21:27:40,000
going to see this however i'm completely aware that the circular progress

2967
21:27:40,000 --> 21:27:43,600
indicator may not be the previous solution but what we're going to do here

2968
21:27:43,600 --> 21:27:47,919
is we're not going to spend so much time on predefining this code since it's

2969
21:27:47,919 --> 21:27:51,440
gonna probably be displayed to the user on a modern hardware on a modern

2970
21:27:51,440 --> 21:27:56,479
telephone just for a few milliseconds so it's probably not worth predefining this

2971
21:27:56,479 --> 21:28:00,232
code so much right now at least okay as we're going on in this course but if you

2972
21:28:00,232 --> 21:28:04,800
have unlimited amount of time and you and you really are attention and you

2973
21:28:04,800 --> 21:28:09,191
have a lot of attention to details then you may want to fix this up a little bit

2974
21:28:09,191 --> 21:28:14,399
and maybe put it in some sort of center or maybe change the color etc etc

2975
21:28:14,399 --> 21:28:18,479
but we're not gonna do that right now okay

2976
21:28:18,479 --> 21:28:21,919
remember our future builder at the moment is just

2977
21:28:21,919 --> 21:28:26,000
creating a future builder and it's and it's understood that it is a database

2978
21:28:26,000 --> 21:28:30,551
note so if we go upon the don connection state and say

2979
21:28:30,551 --> 21:28:35,759
snapchat snapshot data and though it says object

2980
21:28:35,759 --> 21:28:39,679
well we already know that this snapshot data is of type

2981
21:28:39,679 --> 21:28:44,000
database node as it was the future itself so we're just going to say final

2982
21:28:44,000 --> 21:28:48,399
actually no we're going to assign that to our nodes variable remember we have

2983
21:28:48,399 --> 21:28:52,960
this node variable up here and pretty much all those functions are

2984
21:28:52,960 --> 21:28:56,639
relying on that node variable to be there and that's what we're doing we're

2985
21:28:56,639 --> 21:28:59,831
creating a future builder that creates the node and then we assign it to our

2986
21:28:59,831 --> 21:29:04,000
nodes variable okay so we're gonna then say snapshot

2987
21:29:04,000 --> 21:29:06,720
data adds

2988
21:29:06,720 --> 21:29:10,000
database nodes so that's how we

2989
21:29:10,000 --> 21:29:15,279
get our nodes from our snapshot

2990
21:29:15,279 --> 21:29:18,872
right after doing this we're going to call our setup

2991
21:29:18,872 --> 21:29:24,000
text controller listener because this is it's at this point that we want to start

2992
21:29:24,000 --> 21:29:30,479
listening for user text changes on our main ui

2993
21:29:30,479 --> 21:29:34,160
all right and right at this point we've done what

2994
21:29:34,160 --> 21:29:38,872
we had to do except for actually return and returning a text

2995
21:29:38,872 --> 21:29:42,479
field to the user using which he or he can

2996
21:29:42,479 --> 21:29:46,960
edit the text on the ui so let's let's go ahead and do that so remove the break

2997
21:29:46,960 --> 21:29:49,831
statement in here because we don't need it anymore we're just going to say

2998
21:29:49,831 --> 21:29:54,232
return add text field i believe

2999
21:29:54,232 --> 21:29:58,639
we're going to assign our text our the controller parameter we're going

3000
21:29:58,639 --> 21:30:04,960
to assign a value of our text controller in here so that's how a text field can

