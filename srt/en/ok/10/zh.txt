1
00:48:21,040 --> 00:48:24,479
没有加载好所以

2
00:48:24,479 --> 00:48:28,000
请把它放在你的异常处理中

3
00:48:28,000 --> 00:48:33,511
um auth 事件登录

4
00:48:33,511 --> 00:48:36,799
好吧 很多代码 很多代码

5
00:48:36,799 --> 00:48:39,119
嗯，现在你可以看到标题说

6
00:48:39,119 --> 00:48:44,000
修复已注销的身份验证状态我们必须发出已记录的身份验证状态

7
00:48:44,000 --> 00:48:48,799
并修复异常处理程序

8
00:48:48,799 --> 00:48:52,400
让我们找出我们的身份验证事件已注销，我们在这里有很多错误

9
00:48:52,400 --> 00:48:57,119
现在你可以看到所以实际上会更好

10
00:48:57,119 --> 00:49:01,040
如果我们有点喜欢在这里删除这段代码并编写它

11
00:49:01,040 --> 00:49:03,279
从头开始，所以我只想说试试

12
00:49:03,279 --> 00:49:07,360
然后我们会说异常 catch e

13
00:49:07,360 --> 00:49:10,799
就是这样，然后当出现异常时

14
00:49:10,799 --> 00:49:14,479
在注销期间注销我们要说的我们要说的

15
00:49:14,479 --> 00:49:20,231
好吧，您已注销，但是发生了异常，所以我们就说嗯

16
00:49:20,231 --> 00:49:23,360
我们立即汉斯

17
00:49:23,360 --> 00:49:28,000
没有实际关闭状态已注销

18
00:49:28,000 --> 00:49:32,080
有一个例外，我们没有加载好，所以这就是你需要做的

19
00:49:32,080 --> 00:49:37,912
也放在你的代码里面，这样就可以发射了

20
00:49:37,912 --> 00:49:40,959
现在尝试我们实际上必须做的事情，我们有

21
00:49:40,959 --> 00:49:44,400
告诉我们的提供商注销 哎呀

22
00:49:44,400 --> 00:49:49,040
不登录 退出就好

23
00:49:49,040 --> 00:49:52,720
然后我们还必须发出我们要说的新状态

24
00:49:52,720 --> 00:49:56,231
注销，然后没有例外，所以我要抓住这个

25
00:49:56,231 --> 00:50:00,720
来自那里的代码并将其放在此处并说没有这样的例外

26
00:50:00,720 --> 00:50:03,831
好的，它说得很好，现在这可能是一个缺点

27
00:50:03,831 --> 00:50:09,360
所以我要把它变成一个 const 就像那样

28
00:50:09,360 --> 00:50:12,319
所以接下来我们要做的就是

29
00:50:12,319 --> 00:50:16,319
清理我们的路由，因为你看到我们阻塞的越来越多

30
00:50:16,319 --> 00:50:20,231
我们应用程序内部的整个过程越少我们需要不同的不同

31
00:50:20,231 --> 00:50:25,599
屏幕实际手动进行路由，因为路由将被处理

32
00:50:25,599 --> 00:50:29,912
由我们的块听众和类似的东西好吧

33
00:50:29,912 --> 00:50:35,040
所以让我们继续吧，正如我们的路线飞镖文件中的标题所示，我们是

34
00:50:35,040 --> 00:50:39,912
将删除除创建或更新节点路由之外的所有路由，所以让我们

35
00:50:39,912 --> 00:50:42,720
在我们这样做之前打开路线，我要去

36
00:50:42,720 --> 00:50:46,871
关闭这里的所有文件，以确保所有内容都已保存，然后转到路由

37
00:50:46,871 --> 00:50:51,912
启动并删除除了

38
00:50:51,912 --> 00:50:56,551
最后一条路线

39
00:50:56,551 --> 00:51:00,720
好吧，对不起，我们现在就走吧

40
00:51:00,720 --> 00:51:04,159
完成后，我们必须转到我们的主 dart 文件

41
00:51:04,159 --> 00:51:08,551
再次对不起，我们将清理我们的路由

42
00:51:08,551 --> 00:51:12,080
正如你所看到的，现在我们已经删除了这四条路线，让我们

43
00:51:12,080 --> 00:51:18,799
也将它们从主暗文件中删除并保存您的文件

44
00:51:18,799 --> 00:51:22,479
所以我们还需要作为字幕字幕案例，我们应该展示

45
00:51:22,479 --> 00:51:26,720
如果身份验证状态正在注册，则注册视图

46
00:51:26,720 --> 00:51:31,759
所以在主飞镖显示注册视图中，如果关闭状态正在注册，所以我要

47
00:51:31,759 --> 00:51:36,231
在这里把我的笔记也拿出来，让我们继续看看我们有什么

48
00:51:36,231 --> 00:51:39,912
我们已经注销了身份验证状态，我们在这里也拥有我们必须拥有的东西

49
00:51:39,912 --> 00:51:45,680
我们必须创建另一个 else 语句并说明状态是否关闭

50
00:51:45,680 --> 00:51:52,231
国家注册并打开你的大括号

51
00:51:52,231 --> 00:51:57,680
大括号丢失，在这里我们只是说返回缺点注册视图好

52
00:51:57,680 --> 00:52:01,191
就这样

53
00:52:01,191 --> 00:52:05,599
好吧，我们已经做了很多工作，现在如果你再看看

54
00:52:05,599 --> 00:52:10,319
你的文件在这里你不应该你基本上不应该有任何错误好吧

55
00:52:10,319 --> 00:52:14,720
所以在测试这一切之前，因为我们已经做了很多事情

56
00:52:14,720 --> 00:52:19,279
我们也改变了我们的主要功能，热重启才有意义

57
00:52:19,279 --> 00:52:23,279
好吧，所以我做了一个热重启让我只是

58
00:52:23,279 --> 00:52:28,080
调整我的视觉工作室代码的大小，以便我们看到我们的可信赖

59
00:52:28,080 --> 00:52:31,279
scrcpy在这里

60
00:52:31,279 --> 00:52:37,439
现在这是登录视图，呃，如果你看看我们的登录视图 dart 文件

61
00:52:37,439 --> 00:52:41,831
你看看我们在点击登录按钮时做了什么

62
00:52:41,831 --> 00:52:44,000
告诉我们的

63
00:52:44,000 --> 00:52:49,279
auth block 在这里做这件事 登录没问题，所以我们正在发送一个新的

64
00:52:49,279 --> 00:52:55,680
事件，所以如果发生了什么事情并且事情不正常，那么

65
00:52:55,680 --> 00:52:59,511
它说用户没有发现错误的凭据身份验证错误，那么我们应该

66
00:52:59,511 --> 00:53:02,000
可能实际上会在

67
00:53:02,000 --> 00:53:06,231
屏幕所以让我们测试一下，你可以看到它说身份验证错误，所以

68
00:53:06,231 --> 00:53:11,360
在这里还可以，所以这似乎工作得很好

69
00:53:11,360 --> 00:53:15,439
如果你能真正测试这个，那就太好了

70
00:53:15,439 --> 00:53:20,080
我们的加载对话，看看它是否有效，所以我要写

71
00:53:20,080 --> 00:53:25,439
foob​​ar bads 在这里说登录我们看到加载所以那是我们的

72
00:53:25,439 --> 00:53:30,400
加载对话框就是这个逻辑，所以它真的很酷

73
00:53:30,400 --> 00:53:35,599
它是如何工作的让我们进入这里并说退出并退出然后我们来

74
00:53:35,599 --> 00:53:40,159
到登录屏幕，所以这一切都很好

75
00:53:40,159 --> 00:53:43,360
你可以，如果你想多看看你的加载屏幕

76
00:53:43,360 --> 00:53:47,279
就像你正在调试它一样，你总是可以去你的

77
00:53:47,279 --> 00:53:50,959
嗯办公大楼在这里

78
00:53:50,959 --> 00:53:56,799
当你被要求登录时，你实际上可以等待，这样你就可以

79
00:53:56,799 --> 00:54:01,119
就像这样，未来的体重会延迟，你可以

80
00:54:01,119 --> 00:54:06,639
说持续时间，你可以说秒三这样的东西好吗

81
00:54:06,639 --> 00:54:10,551
所以这会等待，就像它会在它之前等待三秒钟

82
00:54:10,551 --> 00:54:15,191
继续，所以让我保存并在这里输入一些信息说

83
00:54:15,191 --> 00:54:19,279
谷歌好吧，这是我们的 gmail 然后说

84
00:54:19,279 --> 00:54:24,159
登录糟糕，效果不佳

85
00:54:24,159 --> 00:54:27,360
我不知道为什么即使这是异步的，它也不能很好地工作

86
00:54:27,360 --> 00:54:30,720
功能这可能需要热重启吗

87
00:54:30,720 --> 00:54:33,759
也许让我做

88
00:54:33,759 --> 00:54:37,511
在这里登出并输入 foo barba 抱歉

89
00:54:37,511 --> 00:54:44,159
avant np gmail.com foo barbas 然后登录那里我们现在正在等待更多

90
00:54:44,159 --> 00:54:48,479
超过三秒然后它进入应用程序所以我会说

91
00:54:48,479 --> 00:54:53,279
工作得很好，所以我们现在可以在这里移除这个重量了

92
00:54:53,279 --> 00:54:57,831
也许也可以进行热重启

93
00:54:57,831 --> 00:55:02,000
哇，我们做了很多工作，但是

94
00:55:02,000 --> 00:55:05,511
这就是你在软件开发中所做的，有时你会破坏一些东西

95
00:55:05,511 --> 00:55:09,040
为了使它们更好，您有时必须破坏您拥有的代码

96
00:55:09,040 --> 00:55:13,191
为了建立更好的东西，我们并没有真正破坏东西，但我们

97
00:55:13,191 --> 00:55:17,439
我们做了什么我们基本上去除了很多旧的旧的

98
00:55:17,439 --> 00:55:22,799
代码以使其更好地使用块和

99
00:55:22,799 --> 00:55:27,119
我在这门课程中，我的目标是让你成为使用 Flutter 的软件开发人员

100
00:55:27,119 --> 00:55:30,319
我不只是要从一开始就向你展示正确的做法，我们是

101
00:55:30,319 --> 00:55:34,551
逐渐让事情变得更好软件开发人员也不会

102
00:55:34,551 --> 00:55:37,680
取决于他们的经验，他们不会做完全正确的事情

103
00:55:37,680 --> 00:55:42,400
从第一点或零点开始，他们将进行实验

104
00:55:42,400 --> 00:55:45,511
他们会谷歌很多东西看看堆栈溢出找到正确的

105
00:55:45,511 --> 00:55:49,040
做事的方式可能会从另一种产品中获得灵感

106
00:55:49,040 --> 00:55:53,279
做类似的事情，一步一步地发展，让它变得更好

107
00:55:53,279 --> 00:55:57,439
所以这就是我们现在在第 40 章的原因

108
00:55:57,439 --> 00:56:00,400
我们刚刚到了这一点，否则我们会从

109
00:56:00,400 --> 00:56:04,799
第一章的零章所以谢谢你坚持呃

110
00:56:04,799 --> 00:56:08,000
通过我们贯穿这一章并走到这一步

111
00:56:08,000 --> 00:56:11,360
我们现在就是这样，作为这个传统，我们现在要承诺

112
00:56:11,360 --> 00:56:15,912
代码并标记它，让我对屏幕进行一些重新洗牌 转到终端

113
00:56:15,912 --> 00:56:19,599
在这里最小化 scr cpy

114
00:56:19,599 --> 00:56:24,959
让屏幕更大，就像那样，我要洗牌

115
00:56:24,959 --> 00:56:30,080
屏幕也是如此，因此您可以更好地看到事物，所以让我们继续看看我们的

116
00:56:30,080 --> 00:56:34,400
git status 我们做了很多事情，一切都被修改了

117
00:56:34,400 --> 00:56:38,159
添加了一个新文件，所以我们说 git add all

118
00:56:38,159 --> 00:56:42,479
让我们作为第 25 步提交

119
00:56:42,479 --> 00:56:46,319
因为如果您查看我们的日志，上一章是第 24 步，所以现在

120
00:56:46,319 --> 00:56:50,159
我们在第 25 步。所以现在让我们推动我们的更改

121
00:56:50,159 --> 00:56:54,639
我们已经承诺，然后我们会说 git tag

122
00:56:54,639 --> 00:56:58,959
我们也会说第 25 步，然后我们会

123
00:56:58,959 --> 00:57:02,959
如果您现在查看我们的标签，也可以推送我们的标签

124
00:57:02,959 --> 00:57:07,119
24 然后在这里的某个地方我们应该有第 25 步，你可以在这里看到

125
00:57:07,119 --> 00:57:10,400
太好了，恭喜您度过了难关

126
00:57:10,400 --> 00:57:14,159
章节是我在整个课程中要说的最跳跃的章节之一

127
00:57:14,159 --> 00:57:17,759
我们从一个文件到另一个文件移动了这么多，所以如果你通过了

128
00:57:17,759 --> 00:57:21,040
恭喜你

129
00:57:21,040 --> 00:57:25,759
所以下一章我们需要处理的是我们损坏的加载屏幕 i

130
00:57:25,759 --> 00:57:30,319
知道这有点反高潮，因为我们只是在加载

131
00:57:30,319 --> 00:57:34,319
屏幕，所以我们应该感到自豪，但是这有问题

132
00:57:34,319 --> 00:57:36,959
加载屏幕，那是因为我们正在使用

133
00:57:36,959 --> 00:57:43,279
上下文导航器然后我们弹出记得弹出里面

134
00:57:43,279 --> 00:57:48,639
在导航器上执行 pop 调用 pop 函数，实际上我可以

135
00:57:48,639 --> 00:57:52,479
向您展示代码而不涉及太多细节，所以

136
00:57:52,479 --> 00:57:56,479
让我们看看我们的加载对话

137
00:57:56,479 --> 00:58:00,000
在这个加载对话框的底部看到我们正在做 navigator off pop

138
00:58:00,000 --> 00:58:05,912
这不一定会弹出此对话框，它会弹出当前视图

139
00:58:05,912 --> 00:58:10,639
navigator 所以即使我们的对话框没有显示在屏幕上说 navigator

140
00:58:10,639 --> 00:58:16,231
of 会混淆导航堆栈，所以我们要看看

141
00:58:16,231 --> 00:58:20,319
这个并在下一章中修复它，所以喝点茶咖啡

142
00:58:20,319 --> 00:58:23,831
巧克力随便你，下一章见

143
00:58:23,831 --> 00:58:27,119
欢迎来到 Flutter 课程的第 43 章

144
00:58:27,119 --> 00:58:30,959
我们现在非常接近真正能够将我们的应用程序发布到

145
00:58:30,959 --> 00:58:35,360
应用商店只剩下一些东西对不起应用商店和玩

146
00:58:35,360 --> 00:58:42,159
商店，在我们真正做到这一点之前，我们还有一些事情要做

147
00:58:42,159 --> 00:58:45,511
嗯，我们需要注意的最重要的事情之一是加载屏幕

148
00:58:45,511 --> 00:58:49,119
在我们的应用程序中，如果您还记得我们所做的事情

149
00:58:49,119 --> 00:58:53,040
到目前为止，我们一直在使用 block 我们一直在使用我们的身份验证服务和

150
00:58:53,040 --> 00:58:58,639
我们已经创建了一个 auth 块，我们也有一些加载状态

151
00:58:58,639 --> 00:59:02,871
我们的关闭状态实际上我不能称之为加载状态

152
00:59:02,871 --> 00:59:08,400
我们在一些关闭状态上有加载属性，所以当我们的关闭块返回时

153
00:59:08,400 --> 00:59:12,959
一个状态取决于它是哪个状态，然后我们实际上可以看到它是否有

154
00:59:12,959 --> 00:59:17,912
它是否正在加载属性，我们一直在加载

155
00:59:17,912 --> 00:59:21,831
到目前为止的对话，我们正在显示的只是简单的对话

156
00:59:21,831 --> 00:59:26,159
在屏幕上有一列带有圆形进度指示器，我们也

157
00:59:26,159 --> 00:59:30,080
有一个尺寸盒只是为了分开装载

158
00:59:30,080 --> 00:59:34,080
来自我们在屏幕上显示的文本的指示符

159
00:59:34,080 --> 00:59:37,831
到目前为止，这一切正常，但正如我在结尾处提到的那样

160
00:59:37,831 --> 00:59:41,119
上一章我们有一点问题

161
00:59:41,119 --> 00:59:44,479
如果你从代码中记得实际上我可以把它带到屏幕上，这样你就可以

162
00:59:44,479 --> 00:59:47,680
看看这里让我们进入加载对话框

163
00:59:47,680 --> 00:59:52,959
如果您还记得我们返回一个函数，请在此结束时加载对话框

164
00:59:52,959 --> 00:59:59,040
依次调用哪个我们弹出我们的导航导航器

165
00:59:59,040 --> 01:00:02,720
但是，如您所见，这里没有交易，这意味着

166
01:00:02,720 --> 01:00:07,511
导航器不一定知道当前弹出的内容是

167
01:00:07,511 --> 01:00:11,599
事实上我们的加载对话和这个问题实际上是相当大的

168
01:00:11,599 --> 01:00:15,439
例如，您可以在屏幕上显示一个加载对话框，然后

169
01:00:15,439 --> 01:00:18,479
在显示加载对话框时，您可以显示另一个

170
01:00:18,479 --> 01:00:22,871
屏幕并将该屏幕推送到您的导航堆栈中，然后如果您然后

171
01:00:22,871 --> 01:00:26,639
尝试关闭您的加载对话实际上您将关闭的是

172
01:00:26,639 --> 01:00:29,599
您在堆栈中显示的第二个屏幕，所以

173
01:00:29,599 --> 01:00:34,080
这个过程不是基于交易的，因为您实际上是在玩

174
01:00:34,080 --> 01:00:39,599
在颤动的导航堆栈中导航，这不是一件明智的事情

175
01:00:39,599 --> 01:00:43,912
所以我们在本章中要做的是清理我们的加载屏幕

176
01:00:43,912 --> 01:00:49,191
应用程序并确保他们使用的是覆盖而不是

177
01:00:49,191 --> 01:00:54,479
普通对话框，所以现在我将其命名为叠加层，这很好

178
01:00:54,479 --> 01:00:58,871
是时候解释什么是叠加层以及为什么它们特别适合

179
01:00:58,871 --> 01:01:04,159
加载屏幕嗯，你知道你显示的正常屏幕

180
01:01:04,159 --> 01:01:06,720
例如移动电话或

181
01:01:06,720 --> 01:01:10,639
网页或桌面上有颤振它

182
01:01:10,639 --> 01:01:14,479
基本上放在导航堆栈内，所以导航堆栈就在那里

183
01:01:14,479 --> 01:01:18,159
跟踪显示哪个屏幕，然后您可以跟踪哪些屏幕

184
01:01:18,159 --> 01:01:22,959
从该堆栈中删除，因此它们具有层次结构，但是如果

185
01:01:22,959 --> 01:01:27,831
你想在导航堆栈顶部显示一些独立于

186
01:01:27,831 --> 01:01:31,511
导航堆栈和导航可能发生的各种变化

187
01:01:31,511 --> 01:01:36,319
您可以使用的堆栈，并且您实际上可能应该使用叠加层

188
01:01:36,319 --> 01:01:39,912
直接使用或者使用flutter提供的其他材质组件

189
01:01:39,912 --> 01:01:44,479
反过来使用叠加层，所以叠加层正如他们的名字所表明的那样

190
01:01:44,479 --> 01:01:48,231
他们是否有能力将自己置于其他内容之上

191
01:01:48,231 --> 01:01:52,231
当前显示在屏幕上，所以它们是完美的

192
01:01:52,231 --> 01:01:55,511
例如，加载屏幕的候选者，因为加载屏幕是

193
01:01:55,511 --> 01:01:59,599
通常显示在用户正在查看的当前内容之上

194
01:01:59,599 --> 01:02:04,400
在本章中，我们将重点关注使用叠加层来改善

195
01:02:04,400 --> 01:02:08,551
我们在应用程序中的加载屏幕，所以

196
01:02:08,551 --> 01:02:10,871
嗯，在我们真正开始之前

197
01:02:10,871 --> 01:02:15,680
写呃我们的加载屏幕呃我们需要谈论的是

198
01:02:15,680 --> 01:02:20,159
控制器 uh 顾名思义，控制器通常是一个对象

199
01:02:20,159 --> 01:02:23,759
可以从一个

200
01:02:23,759 --> 01:02:27,439
一个功能到另一个并使用这个控制器通常

201
01:02:27,439 --> 01:02:31,279
接收该控制器的对象能够控制内容或

202
01:02:31,279 --> 01:02:36,159
显示在屏幕上的对象的行为

203
01:02:36,159 --> 01:02:39,680
例如，想象一个场景，你有一个

204
01:02:39,680 --> 01:02:43,439
加载屏幕已经出现在移动设备上

205
01:02:43,439 --> 01:02:48,080
你告诉用户等待我让你登录现在想象你

206
01:02:48,080 --> 01:02:52,080
想要在正在进行的过程中启动另一个进程并且您想要显示

207
01:02:52,080 --> 01:02:55,680
当前一个加载屏幕已经出现时，再次向用户显示加载屏幕

208
01:02:55,680 --> 01:02:58,400
显示在屏幕上，所以

209
01:02:58,400 --> 01:03:01,680
一种典型的做法是例如取消第一次加载

210
01:03:01,680 --> 01:03:04,000
屏幕显示新的加载屏幕

211
01:03:04,000 --> 01:03:08,080
内容，当您摆脱第二个加载屏幕时，您可以

212
01:03:08,080 --> 01:03:12,639
在该过程正在进行时再次显示第一个加载屏幕但是这个

213
01:03:12,639 --> 01:03:16,639
是相当多的，这是相当多的比赛，因为你

214
01:03:16,639 --> 01:03:20,551
必须知道之前的上下文 加载屏幕之前显示了什么

215
01:03:20,551 --> 01:03:24,159
您现在正在显示的加载屏幕，如果有

216
01:03:24,159 --> 01:03:27,912
在您必须再次显示之前加载屏幕，因此它的可扩展性不高

217
01:03:27,912 --> 01:03:30,959
因为您将亲自负责跟踪

218
01:03:30,959 --> 01:03:34,319
加载屏幕的状态，所以我们在本章中要做的是

219
01:03:34,319 --> 01:03:38,959
创建一个可以控制的加载屏幕及其文本

220
01:03:38,959 --> 01:03:42,551
内容将使用控制器对象进行控制

221
01:03:42,551 --> 01:03:45,191
所以在创建加载屏幕时，我们

222
01:03:45,191 --> 01:03:49,191
然后会得到一个加载屏幕控制器

223
01:03:49,191 --> 01:03:53,599
这个加载控制器将允许我们解除当前的

224
01:03:53,599 --> 01:03:57,360
加载屏幕，如果有的话，显示在屏幕上，其次是

225
01:03:57,360 --> 01:04:01,511
将允许我们更新加载屏幕的内容

226
01:04:01,511 --> 01:04:06,319
所以事不宜迟，我们实际上可以先看看创建这个

227
01:04:06,319 --> 01:04:10,551
加载控制器和/或加载屏幕控制器，然后我们将使用

228
01:04:10,551 --> 01:04:14,799
这个加载屏幕控制器，我们像往常一样创建加载屏幕

229
01:04:14,799 --> 01:04:18,159
我要在屏幕上做一些改组所以

230
01:04:18,159 --> 01:04:22,799
让我在这里把代码变大，然后字体变小一点

231
01:04:22,799 --> 01:04:28,400
然后让我们实际上在这里我很确定我们不需要 scr cpy

232
01:04:28,400 --> 01:04:32,400
因为嗯，我们不会看看那是怎么回事

233
01:04:32,400 --> 01:04:35,439
加载屏幕看起来就像现在我们要写很多

234
01:04:35,439 --> 01:04:38,400
的代码，然后我们会把它放进你的，所以

235
01:04:38,400 --> 01:04:41,680
我要在这里让 Visual Studio 代码全屏显示

236
01:04:41,680 --> 01:04:46,959
我将在这里摆脱这个底部栏

237
01:04:46,959 --> 01:04:51,119
好的，因为标题表明我们现在要做的是继续前进

238
01:04:51,119 --> 01:04:55,360
在 lib helpers 下创建我们的加载屏幕控制器

239
01:04:55,360 --> 01:05:00,479
加载加载屏幕控制器，让我们进去看看 lib

240
01:05:00,479 --> 01:05:04,159
我们可以看到我们有 lib 实用程序服务访问权限，您知道常量视图

241
01:05:04,159 --> 01:05:07,511
但我们没有帮手，所以我要右键点击直播，然后说新

242
01:05:07,511 --> 01:05:12,400
文件，然后我会说助手，这样你也可以在这里看到

243
01:05:12,400 --> 01:05:16,319
助手和加载然后加载屏幕

244
01:05:16,319 --> 01:05:19,119
控制器，以便创建

245
01:05:19,119 --> 01:05:22,231
也为我们提供中间文件夹，因此您可以看到

246
01:05:22,231 --> 01:05:27,279
现在我们在嘴唇助手下加载加载屏幕控制器好吧

247
01:05:27,279 --> 01:05:31,511
因此，正如我之前提到的，我们在这里需要的是我们能够

248
01:05:31,511 --> 01:05:35,831
控制两件事来关闭加载屏幕并更新其

249
01:05:35,831 --> 01:05:41,191
内容所以让我们继续定义这些类型 def 所以我们只说类型 f

250
01:05:41,191 --> 01:05:46,000
我们将把它称为关闭加载屏幕，这只是一个

251
01:05:46,000 --> 01:05:48,639
布尔函数

252
01:05:48,639 --> 01:05:52,551
指示加载屏幕是否可以实际关闭

253
01:05:52,551 --> 01:05:56,231
好的，所以它只是一个函数定义，现在没有实现

254
01:05:56,231 --> 01:06:03,040
那个函数，所以让我们也去创建一个类型 f

255
01:06:03,040 --> 01:06:07,119
我们会说更新加载屏幕

256
01:06:07,119 --> 01:06:11,360
这是一个 void 函数，实际上是一个 bool 函数，它也将指示

257
01:06:11,360 --> 01:06:15,912
文本是否可以更新，我们只是说文本，所以我们在说什么

258
01:06:15,912 --> 01:06:19,439
在这里，我们将有两个符合此的功能

259
01:06:19,439 --> 01:06:22,551
界面基本上很快你就会看到好的

260
01:06:22,551 --> 01:06:26,639
对不起，让我们继续创建一个类

261
01:06:26,639 --> 01:06:31,279
我们称之为加载屏幕指示器或抱歉控制器

262
01:06:31,279 --> 01:06:36,000
让我们也将其标记为不可变的，为此我们需要材料所以

263
01:06:36,000 --> 01:06:40,400
嗯，实际上基金会也可以，所以让我们进入基金会并进入

264
01:06:40,400 --> 01:06:44,871
在这里，我实际上要说 show immutable 就像那样，所以我们只需要

265
01:06:44,871 --> 01:06:50,080
基础 um 包的不可变部分在这里

266
01:06:50,080 --> 01:06:54,080
好的，这就是我们加载屏幕控制器的定义，所以它是什么

267
01:06:54,080 --> 01:07:00,551
确实是它基本上将一个封闭的加载屏幕作为参数，并且

268
01:07:00,551 --> 01:07:02,959
我们说嗯关闭

269
01:07:02,959 --> 01:07:06,720
我们还说最终更新加载屏幕

270
01:07:06,720 --> 01:07:09,831
像这样的更新，我将从 Visual Studio 代码中获得帮助

271
01:07:09,831 --> 01:07:14,319
将其作为常量构造函数完成，我将制作这些参数

272
01:07:14,319 --> 01:07:19,912
也是必需的，所以这些我们之前已经谈过很多的事情，所以

273
01:07:19,912 --> 01:07:24,159
为什么我会尽可能快地跳过它们热重载不是

274
01:07:24,159 --> 01:07:28,551
现在工作得这么好只是因为 scrcpy 上的应用程序不是

275
01:07:28,551 --> 01:07:32,159
在屏幕上，这就是为什么热重载不能很好地工作所以我要

276
01:07:32,159 --> 01:07:36,639
只需跳转到应用程序，现在热重载就可以了，然后我要放

277
01:07:36,639 --> 01:07:41,119
scr cpy 在另一个屏幕上，所以它不会打扰我们

278
01:07:41,119 --> 01:07:45,831
好的，这就是我们的控制器，所以我们接下来要创建一个

279
01:07:45,831 --> 01:07:49,439
可以显示加载屏幕的功能，该功能本身将

280
01:07:49,439 --> 01:07:53,279
将加载屏幕控制器返回给您，这就是它的美妙之处

281
01:07:53,279 --> 01:07:57,759
使用控制器功能，然后您可以关闭加载屏幕或更新

282
01:07:57,759 --> 01:08:01,912
所以你可以看到这两个基本上是调用端的函数

283
01:08:01,912 --> 01:08:07,040
可以接受并调用以关闭和更新加载屏幕

284
01:08:07,040 --> 01:08:10,871
分别

285
01:08:10,871 --> 01:08:14,959
好吧，这就是加载屏幕控制器，我们现在需要做的是

286
01:08:14,959 --> 01:08:20,639
在加载屏幕本身上工作，所以让我们继续作为标题

287
01:08:20,639 --> 01:08:25,439
表示我们将去这个文件夹中加载 lib 助手

288
01:08:25,439 --> 01:08:29,759
我们将在 loading 中创建一个新文件，然后我们就调用它

289
01:08:29,759 --> 01:08:33,040
那个载入画面

290
01:08:33,040 --> 01:08:37,119
开始和内部加载屏幕我们只是

291
01:08:37,119 --> 01:08:41,119
将创建一个加载屏幕类好吧

292
01:08:41,119 --> 01:08:43,592
我们将制作我们的加载屏幕

293
01:08:43,592 --> 01:08:47,592
一个单例，因为在我准备之前我们已经完成了两次单例

294
01:08:47,592 --> 01:08:51,511
基本上把模式粘贴在这里，所以我们不必写这个

295
01:08:51,511 --> 01:08:56,231
又是无聊的代码，但这是迄今为止我们已经完成了两次的模式

296
01:08:56,231 --> 01:09:01,040
之前提到过，所以你应该基本上知道它是如何工作的，所以我们有一个私人的

297
01:09:01,040 --> 01:09:04,479
构造函数然后我们有一个工厂构造函数，它是公共的，在

298
01:09:04,479 --> 01:09:10,720
turn 使用静态最终变量，该变量又调用私有

299
01:09:10,720 --> 01:09:14,639
初始化器，所以它只是我们实际上可以做的一点点

300
01:09:14,639 --> 01:09:19,279
这样做，这样基本上就可以了，所以当有人打电话给我们的时候

301
01:09:19,279 --> 01:09:22,799
从外部加载屏幕构造函数工厂构造函数依次调用

302
01:09:22,799 --> 01:09:30,000
this 和 this 依次调用 this 所以它是 a 它是一个层基础 它是三层

303
01:09:30,000 --> 01:09:33,439
好的，所以我们在这里要做的，我们也将继续拉起我们的

304
01:09:33,439 --> 01:09:37,680
加载屏幕控制器，让我们继续发送加载屏幕

305
01:09:37,680 --> 01:09:40,319
如您所见，控制器也会为我导入它，所以我要走了

306
01:09:40,319 --> 01:09:43,680
说加载屏幕控制器，让我们说它是可选的

307
01:09:43,680 --> 01:09:49,360
因为我们可能实际上没有它，然后我们要在这里做什么

308
01:09:49,360 --> 01:09:53,191
如我所见，我们将有一个名为 show 的函数

309
01:09:53,191 --> 01:09:56,319
嗯，然后我们会再吃一些

310
01:09:56,319 --> 01:10:01,831
那里的功能可以让我们基本上控制我们的加载屏幕

311
01:10:01,831 --> 01:10:05,040
我想知道哪一个实际上是最好的

312
01:10:05,040 --> 01:10:07,191
嗯最好

313
01:10:07,191 --> 01:10:11,040
首先工作可能是我们应该工作

314
01:10:11,040 --> 01:10:15,119
例如使用显示叠加功能，让我们继续

315
01:10:15,119 --> 01:10:19,439
并这样做，假设我们将在加载时拥有一个函数

316
01:10:19,439 --> 01:10:25,831
screen um 类，我们称它为显示叠加层，所以这个显示叠加层是

317
01:10:25,831 --> 01:10:30,159
然后依次返回加载屏幕控制器的实例，让我们开始吧

318
01:10:30,159 --> 01:10:33,360
提前开始写，所以加载屏幕控制器

319
01:10:33,360 --> 01:10:38,871
我们说显示叠加，这个功能有两个必需的

320
01:10:38,871 --> 01:10:43,191
参数，所以我要把大括号放在这里，大括号放在这里

321
01:10:43,191 --> 01:10:47,680
假设我们需要一个构建上下文来构建联系人和

322
01:10:47,680 --> 01:10:52,400
它将从材料自动导入，因此这是一个很好的构建上下文

323
01:10:52,400 --> 01:10:55,680
并需要参数构建上下文，我只是将其称为上下文和

324
01:10:55,680 --> 01:11:00,871
然后在您想要显示叠加层时，您还必须指定其文本，以便

325
01:11:00,871 --> 01:11:03,191
因为我们在这里要说的是

326
01:11:03,191 --> 01:11:07,360
没有实际文本就无法显示叠加层，请记住

327
01:11:07,360 --> 01:11:11,439
我们使用了overlay这个词，但在这种情况下，我们的加载屏幕将会有

328
01:11:11,439 --> 01:11:16,319
带有一些材质组件（如列和按钮等）的自定义叠加层

329
01:11:16,319 --> 01:11:20,871
等好吧，所以在这种情况下显示覆盖意味着用这个显示加载屏幕

330
01:11:20,871 --> 01:11:25,191
文本好的，所以我们称之为，然后我们走吧

331
01:11:25,191 --> 01:11:30,479
前面，基本上说这是一串文本，就这样好吧

332
01:11:30,479 --> 01:11:34,400
和完美，所以这很好，所以现在我们是什么

333
01:11:34,400 --> 01:11:39,439
现在要创建是我们要创建一个流控制器

334
01:11:39,439 --> 01:11:41,912
那将

335
01:11:41,912 --> 01:11:46,799
这个控制器提供的新字符串记得我们创建了这个

336
01:11:46,799 --> 01:11:50,720
因此，如果有人更新加载屏幕文本，我们将把那些

337
01:11:50,720 --> 01:11:55,191
流控制器中的字符串，所以让我们继续创建一个最终的

338
01:11:55,191 --> 01:12:00,000
如果我能拼写，我们会说这是一个流控制器

339
01:12:00,000 --> 01:12:06,720
字符串的控制控制器好的，我们只是创建它，但它找不到

340
01:12:06,720 --> 01:12:11,279
流控制器所以我只想说 import lib dart async 所以这就是

341
01:12:11,279 --> 01:12:16,799
另一个 import um 就在这里，如果你不这样做，你可能必须手动完成

342
01:12:16,799 --> 01:12:20,551
有 Visual Studio 代码，或者如果您没有使用例如文本编辑器或 ID

343
01:12:20,551 --> 01:12:24,479
也可以为您导入内容的流控制器在 dart 中可用

344
01:12:24,479 --> 01:12:27,831
async 所以我们要做的第一件事

345
01:12:27,831 --> 01:12:32,000
要做的是将当前文本添加到

346
01:12:32,000 --> 01:12:36,159
我们的流控制器，所以提供给我们的这个文本参数是

347
01:12:36,159 --> 01:12:39,360
将其放入流控制器中好吧

348
01:12:39,360 --> 01:12:43,040
所以我们需要做的基本上是

349
01:12:43,040 --> 01:12:47,119
使用一个我们以前没有使用过的新功能，称为覆盖

350
01:12:47,119 --> 01:12:50,551
上下文所以如果我看看你是否看看回报

351
01:12:50,551 --> 01:12:55,360
它会返回一个叫做覆盖状态的东西，它说的是状态

352
01:12:55,360 --> 01:13:00,319
从包含给定上下文的此类的最近实例中，所以我们

353
01:13:00,319 --> 01:13:05,439
需要这个状态才能显示我们的叠加层所以让我们抓住

354
01:13:05,439 --> 01:13:09,511
这种上下文的叠加并将其置于一个状态中

355
01:13:09,511 --> 01:13:13,912
像这样然后我们要做的是

356
01:13:13,912 --> 01:13:17,439
因为覆盖有点显示在其他所有内容之上

357
01:13:17,439 --> 01:13:21,511
screen 他们没有内在的尺寸，所以如果你使用 if

358
01:13:21,511 --> 01:13:24,231
您正在使用例如材料组件，例如

359
01:13:24,231 --> 01:13:27,759
如果您创建不同的 Flutter 应用程序中的各种小部件

360
01:13:27,759 --> 01:13:32,551
容器按钮，它们具有某种内在大小，但是具有

361
01:13:32,551 --> 01:13:35,912
您必须像这样抓住的叠加层

362
01:13:35,912 --> 01:13:39,759
当前屏幕的状态以及显示的组件和

363
01:13:39,759 --> 01:13:43,279
可用高度可用，所以我们需要

364
01:13:43,279 --> 01:13:48,000
某种尺寸，基本上将我们的叠加层建立在上面

365
01:13:48,000 --> 01:13:52,319
所以让我们继续抓住我们的渲染框

366
01:13:52,319 --> 01:13:56,799
我会说使用这个上下文，我们会得到 find render

367
01:13:56,799 --> 01:13:59,592
目的

368
01:13:59,592 --> 01:14:04,959
像这样作为渲染器框可以，所以有很多可用的文档

369
01:14:04,959 --> 01:14:09,191
关于渲染框是什么，但它有点像低级，我不会去

370
01:14:09,191 --> 01:14:13,191
详细介绍了这一点，但让我们实际看一下

371
01:14:13,191 --> 01:14:17,511
在这里，您可以看到它是一个渲染对象，并且它的级别非常低，因为我

372
01:14:17,511 --> 01:14:21,511
在渲染框中提到它会做什么，它会让你

373
01:14:21,511 --> 01:14:26,720
基本上提取我们的叠加层可以使用的可用大小

374
01:14:26,720 --> 01:14:31,191
已经在屏幕上，所以让我们继续在这里创建最终尺寸并说

375
01:14:31,191 --> 01:14:36,799
渲染框大小还可以，就是这样

376
01:14:36,799 --> 01:14:42,159
那么我们需要做的是我们现在实际上需要创建我们的叠加层，所以我们的叠加层

377
01:14:42,159 --> 01:14:46,000
你可能会想哦，这就是叠加层，因为我们在这里把它叫做叠加层很好

378
01:14:46,000 --> 01:14:49,592
这不是真的因为覆盖就像over um

379
01:14:49,592 --> 01:14:55,040
在这种情况下，覆盖的是

380
01:14:55,040 --> 01:15:00,080
父覆盖呃上下文所以呃你要在你的

381
01:15:00,080 --> 01:15:06,080
应用程序实际上被称为覆盖条目所以嗯但是当我们说我们是

382
01:15:06,080 --> 01:15:11,912
将创建一个覆盖我们实际上的意思是一个覆盖条目好的

383
01:15:11,912 --> 01:15:15,680
所以让我们继续在这里创建一个覆盖条目，所以我们要说最终

384
01:15:15,680 --> 01:15:21,040
overlay 就是这样的覆盖条目，然后我们有一个构建器函数

385
01:15:21,040 --> 01:15:24,400
现在我要获得 Visual Studio 代码来完成这个它需要一个上下文

386
01:15:24,400 --> 01:15:29,912
好吧，让我们现在进入这里，他们没有像一个这样的父母

387
01:15:29,912 --> 01:15:33,831
脚手架或任何东西，所以如果你不包裹你的

388
01:15:33,831 --> 01:15:37,191
就像您从构建器返回的这个组件一样，它应该是一个小部件

389
01:15:37,191 --> 01:15:40,720
让我们进入这里你可以看到它是一个小部件，如果你不把它包裹在里面

390
01:15:40,720 --> 01:15:46,080
某种材料组件，例如脚手架或材料本身

391
01:15:46,080 --> 01:15:49,439
叠加层将具有可怕的样式，因为它不会

392
01:15:49,439 --> 01:15:53,680
任何默认系统样式，所以请原谅我们将在这里做什么

393
01:15:53,680 --> 01:15:58,959
将返回一个材料组件，材料将允许您如果

394
01:15:58,959 --> 01:16:02,159
你看这里是它说的材料文档

395
01:16:02,159 --> 01:16:04,720
创建一封信

396
01:16:04,720 --> 01:16:08,720
我的意思是好吧，但它基本上意味着它实际上是让我们看看

397
01:16:08,720 --> 01:16:11,439
在这段代码中，这可能更有意义

398
01:16:11,439 --> 01:16:16,080
uh 是一个有状态的小部件，所以它会为你创建一个有状态的小部件

399
01:16:16,080 --> 01:16:19,680
有一些默认样式，所以你可以把你的组件放在那里，它们会是

400
01:16:19,680 --> 01:16:25,511
根据系统皮肤的风格好吧，所以让我们说我们要给

401
01:16:25,511 --> 01:16:29,279
将覆盖整个屏幕的材质这个材质组件

402
01:16:29,279 --> 01:16:32,400
我们回到这里将覆盖整个屏幕记住所以

403
01:16:32,400 --> 01:16:36,871
让我们首先用你知道的一种深色来绘制整个屏幕

404
01:16:36,871 --> 01:16:41,040
当您在屏幕上向用户显示类似的错误或对话时

405
01:16:41,040 --> 01:16:44,080
通常他们所做的就像他们在整个背景上绘制背景

406
01:16:44,080 --> 01:16:48,231
有点像深色，所以他们可以在中间显示他们的对话

407
01:16:48,231 --> 01:16:50,479
屏幕的，有点给它

408
01:16:50,479 --> 01:16:54,159
像嗯某种

409
01:16:54,159 --> 01:16:58,080
海拔所以它有点从屏幕上弹出所以我们是什么

410
01:16:58,080 --> 01:17:01,439
在这里我们要说颜色我们材料的颜色呃

411
01:17:01,439 --> 01:17:08,959
这里的主要小部件是黑色，alpha 为 150 好的

412
01:17:08,959 --> 01:17:14,080
然后是我们材料的孩子，然后它会是一个中心，好吧，那就是

413
01:17:14,080 --> 01:17:18,551
我们要在这里创造什么，那么让我们进去看看我们是什么

414
01:17:18,551 --> 01:17:22,400
要做的是这个的孩子将成为容器所以我只是去

415
01:17:22,400 --> 01:17:28,159
在这里创建一个容器，然后在那里放一个分号，现在很开心

416
01:17:28,159 --> 01:17:33,511
那么我们的内容容器将对我们的

417
01:17:33,511 --> 01:17:37,680
覆盖所以它会说例如它的最大宽度和高度应该是

418
01:17:37,680 --> 01:17:41,119
一个特定的值，所以我们以前没有使用过它，但我们现在要使用一些东西

419
01:17:41,119 --> 01:17:45,040
在这里称为约束，您可以看到约束的值是类型

420
01:17:45,040 --> 01:17:50,159
盒子约束所以我们说约束然后我们说盒子约束好吧

421
01:17:50,159 --> 01:17:55,912
我们将从最大宽度开始，然后我们将说尺寸宽度

422
01:17:55,912 --> 01:18:01,439
在那个八乘以零，我们基本上在这里说的是

423
01:18:01,439 --> 01:18:03,759
我们要展示的这个对话

424
01:18:03,759 --> 01:18:08,319
用户最多将消耗可用宽度的 80%

425
01:18:08,319 --> 01:18:12,159
在屏幕上，所以这是我们在右侧创建一些边距的方式

426
01:18:12,159 --> 01:18:15,592
留给那些是 Web 开发人员并且喜欢了解的人

427
01:18:15,592 --> 01:18:19,119
保证金嗯，即使你是一个网络，即使你是

428
01:18:19,119 --> 01:18:22,639
一个你可能已经知道保证金的设计师，所以我们要说的是

429
01:18:22,639 --> 01:18:27,759
这个容器需要将自己包裹在其内容周围，但如果内容

430
01:18:27,759 --> 01:18:31,040
增长它最多会增长百分之八十

431
01:18:31,040 --> 01:18:36,231
可用宽度，这个宽度来自我们的渲染框

432
01:18:36,231 --> 01:18:40,231
所以就是这样，我们要用最大高度做同样的事情，所以我们

433
01:18:40,231 --> 01:18:46,231
会说尺寸高度乘以 0.8 然后我们要给它一分钟

434
01:18:46,231 --> 01:18:52,000
尺寸宽度乘以 0.5 所以我们至少要说它应该

435
01:18:52,000 --> 01:18:57,279
应该抓住屏幕宽度的一半好吗

436
01:18:57,279 --> 01:19:00,080
然后让我们给它一些装饰，所以我们会说这是盒子

437
01:19:00,080 --> 01:19:05,040
装饰所以让我们进去吧，所以这只是给它一些嗯

438
01:19:05,040 --> 01:19:09,360
边框所以通常是对话，或者在这种情况下是我们的叠加层

439
01:19:09,360 --> 01:19:13,831
显示使用，或者它们有某种边框，所以它创建了这种

440
01:19:13,831 --> 01:19:18,319
就像一个美丽的海拔所以如果这是我们这里的黑暗背景

441
01:19:18,319 --> 01:19:25,040
用 alpha 150 的黑色创建，然后我们有一个基本上覆盖在这里的弧或

442
01:19:25,040 --> 01:19:29,119
覆盖嗯，我们在这里称它为你可以看到覆盖条目，然后是覆盖条目

443
01:19:29,119 --> 01:19:32,319
将被放置在这里，但它周围会有一些边框

444
01:19:32,319 --> 01:19:35,912
把它从背景中分离出来好吧，所以这只是一种分离我们的技术

445
01:19:35,912 --> 01:19:40,319
从背景叠加，所以我们要说边框是

446
01:19:40,319 --> 01:19:45,191
颜色白色 我们抱歉颜色是白色 然后我们是

447
01:19:45,191 --> 01:19:50,479
要说它有一个边界半径 f 和边界半径

448
01:19:50,479 --> 01:19:54,680
屏幕上的所有这些文件只是让我发疯和边界

449
01:19:54,680 --> 01:20:02,400
radius.circular，让我们在这里给它一个圆形值 10 好吧

450
01:20:02,400 --> 01:20:07,040
有时文档只是在路上

451
01:20:07,040 --> 01:20:10,400
所以让我们站在这里，正如你所看到的，现在我们有一个空容器，我们应该

452
01:20:10,400 --> 01:20:14,639
永远不要那样做，让我们进入这里，为它创建一个孩子，这样孩子

453
01:20:14,639 --> 01:20:19,592
在这里将是一个填充所以嗯或者我们可以说单

454
01:20:19,592 --> 01:20:24,871
现在的子滚动视图，然后我将嵌入单曲

455
01:20:24,871 --> 01:20:28,799
填充内的子滚动视图这是我这样做的首选方式

456
01:20:28,799 --> 01:20:32,551
就这样，让我们​​现在给它填充 16 好吧

457
01:20:32,551 --> 01:20:36,551
所以我们在这里创建的这个填充的孩子是一个单一的

458
01:20:36,551 --> 01:20:41,831
子滚动视图就像你记得我们所说的覆盖条目的最大高度

459
01:20:41,831 --> 01:20:45,680
是屏幕上可用高度的 80

460
01:20:45,680 --> 01:20:49,360
这一切都很好，但如果

461
01:20:49,360 --> 01:20:53,040
您只是您的应用程序显示在一个非常小的屏幕上，并且

462
01:20:53,040 --> 01:20:58,551
如果你不把你的内容放进去，那么你会很好地显示很多文本

463
01:20:58,551 --> 01:21:03,439
单个子滚动视图中的材料小部件的全部内容

464
01:21:03,439 --> 01:21:07,759
那么您的内容将基本上被切碎，因此用户不会

465
01:21:07,759 --> 01:21:12,400
将完整地查看内容以及单个聊天滚动视图的作用是

466
01:21:12,400 --> 01:21:17,360
如果内容有足够的空间，它会尝试不滚动其内容

467
01:21:17,360 --> 01:21:22,479
显示在容器上，但如果内容溢出容器的

468
01:21:22,479 --> 01:21:27,191
例如高度，那么它将允许用户在该高度上滚动

469
01:21:27,191 --> 01:21:31,592
容器所以它工作得很好相信我

470
01:21:31,592 --> 01:21:35,680
所以让我们进入这里然后进入单个图表滚动视图

471
01:21:35,680 --> 01:21:39,511
创建一个孩子，在这里我们将有一个专栏

472
01:21:39,511 --> 01:21:44,720
我们的主轴尺寸将是主轴

473
01:21:44,720 --> 01:21:48,639
最小的主轴尺寸，因为记住如果你不给出主轴

474
01:21:48,639 --> 01:21:52,159
练习一个最小的纯列，您的列将占用尽可能多的空间

475
01:21:52,159 --> 01:21:56,639
它可以，所以它会尽可能多地扩展，如果你说主要

476
01:21:56,639 --> 01:22:00,959
运动是最低限度的，它基本上会尝试

477
01:22:00,959 --> 01:22:05,119
尽可能多地拥抱它的内容

478
01:22:05,119 --> 01:22:10,479
然后我们会说主访问对齐是主访问对齐

479
01:22:10,479 --> 01:22:19,040
居中，所以它也会将其内容垂直放置在中心

480
01:22:19,040 --> 01:22:23,511
那么我们将在儿童栏目中做些什么所以让我们进入这里

481
01:22:23,511 --> 01:22:29,439
说孩子，然后让我们创建一个大小盒子，嗯，给它一个高度为 10 所以

482
01:22:29,439 --> 01:22:35,439
我们正在从列顶部的 um 创建一些上边距，所以这是

483
01:22:35,439 --> 01:22:39,360
说我们有一个专栏我们要在里面放一些东西但是给它10

484
01:22:39,360 --> 01:22:42,400
顶部的空虚点，所以它只会创建一个

485
01:22:42,400 --> 01:22:46,231
一点点余量好吧，看起来我完全理解这是很多

486
01:22:46,231 --> 01:22:50,159
抽象的东西如果你真的能在上面看到这个会好很多

487
01:22:50,159 --> 01:22:52,551
屏幕，但有时在您编程时

488
01:22:52,551 --> 01:22:55,831
特别是在颤振中，因为它是如此声明性，那么你必须使用

489
01:22:55,831 --> 01:22:59,592
你对这个东西实际上会是什么样子的想象

490
01:22:59,592 --> 01:23:01,759
屏幕如此

491
01:23:01,759 --> 01:23:06,799
你可以做很多实验并为你自己测试这个，只是

492
01:23:06,799 --> 01:23:10,000
也许只是这样做，不要做任何比这更多的事情，只是使用一个大小

493
01:23:10,000 --> 01:23:13,279
挡在屏幕上的尺寸框上，然后将其叠加显示并查看效果

494
01:23:13,279 --> 01:23:19,119
看起来这也可以，在这之后让我们去创造

495
01:23:19,119 --> 01:23:23,912
一个循环进度指示器的常量

496
01:23:23,912 --> 01:23:27,511
所以这将是一个小指示器，它坐在那里并显示它

497
01:23:27,511 --> 01:23:31,040
有些东西正在加载，然后我们要给它另一个

498
01:23:31,040 --> 01:23:35,759
大小盒子的高度可能这次实际上是 20，所以这创建了一个

499
01:23:35,759 --> 01:23:39,511
多一点间距，然后我们在这里做什么

500
01:23:39,511 --> 01:23:44,000
想要创建一个文本，但该文本可能会改变，因为

501
01:23:44,000 --> 01:23:47,592
该文本放置在流控制器内，因此我们不会使用

502
01:23:47,592 --> 01:23:51,040
流构建器，让我们说流构建器

503
01:23:51,040 --> 01:23:54,080
像这样和我们的流

504
01:23:54,080 --> 01:23:57,360
本身就是这个文字嗯

505
01:23:57,360 --> 01:24:00,831
没错，我们创造了

506
01:24:00,831 --> 01:24:05,439
所以我们需要做的基本上就是从流中抓取流

507
01:24:05,439 --> 01:24:09,831
控制器并在我们的流生成器​​中使用它，然后我将提供帮助

508
01:24:09,831 --> 01:24:15,831
视觉工作室编码here并说构建器功能应该像

509
01:24:15,831 --> 01:24:20,159
如果你还记得我们可以使用一个非常方便的

510
01:24:20,159 --> 01:24:25,279
我们的快照上的 getter 说有数据所以让我们说返回或对不起你

511
01:24:25,279 --> 01:24:31,592
说如果快照有数据那么我们将在这里返回一个文本好的

512
01:24:31,592 --> 01:24:36,871
并且文本基本上是文本小部件的文本将是

513
01:24:36,871 --> 01:24:41,759
将数据快照为字符串我们知道它是一个字符串

514
01:24:41,759 --> 01:24:45,912
我们还要给它一个文本对齐的文本对齐在中心

515
01:24:45,912 --> 01:24:50,080
好的，这就是那部分，让我们放一个

516
01:24:50,080 --> 01:24:53,592
逗号也在那里，我们也收到了这个错误

517
01:24:53,592 --> 01:24:58,000
现在因为我们没有在里面的所有可用路径中返回一个小部件

518
01:24:58,000 --> 01:25:01,360
这个构建器，我们必须在这里添加一个 else 语句

519
01:25:01,360 --> 01:25:07,279
否则我们只能返回一个容器，正如你在这里看到的那样

520
01:25:07,279 --> 01:25:11,191
因为我们必须返回一些东西，所以我们可以只返回一个空容器

521
01:25:11,191 --> 01:25:14,551
现在我的意思是你也可以解决这个问题

522
01:25:14,551 --> 01:25:19,759
另一种方式例如说好的，如果快照有数据我要返回一个

523
01:25:19,759 --> 01:25:24,231
像这样的文本，否则我将返回一个文本

524
01:25:24,231 --> 01:25:28,551
像这样的空文本，您也可以尝试这样做，但是对

525
01:25:28,551 --> 01:25:34,231
现在我们只是把它当作返回一个容器好了

526
01:25:34,231 --> 01:25:36,959
这就是那部分

527
01:25:36,959 --> 01:25:41,759
现在我们创建了直到这一点，所以如果我

528
01:25:41,759 --> 01:25:45,279
这样做并折叠我们在这里创建的

529
01:25:45,279 --> 01:25:49,119
是我们的覆盖 我们刚刚创建的覆盖并不意味着我们是

530
01:25:49,119 --> 01:25:53,912
显示它，因此显示叠加层的方法是使用其中的叠加层

531
01:25:53,912 --> 01:26:00,871
创建了一个覆盖状态并说插入覆盖好所以这实际上添加了我们的

532
01:26:00,871 --> 01:26:07,680
覆盖到颤振在屏幕上管理的整个覆盖状态，所以

533
01:26:07,680 --> 01:26:12,400
所以现在我们已经做到了，所以我们需要做的是，一旦发生这种情况，我们

534
01:26:12,400 --> 01:26:16,159
需要接受我们的退货声明，这就是为什么

535
01:26:16,159 --> 01:26:20,159
我们在这里看到一个红色的基本加载屏幕飞镖文件

536
01:26:20,159 --> 01:26:24,000
在 Visual Studio 代码中取决于您的编辑器或 id

537
01:26:24,000 --> 01:26:27,511
您正在使用您可能会或可能不会将此屏幕视为有错误，但如果您

538
01:26:27,511 --> 01:26:31,831
在这里向上滚动它基本上告诉你你没有返回你的东西

539
01:26:31,831 --> 01:26:35,511
说你应该回来所以让我们进去创建一个加载实例

540
01:26:35,511 --> 01:26:38,551
屏幕控制器

541
01:26:38,551 --> 01:26:41,680
好的，我们必须照顾好关闭

542
01:26:41,680 --> 01:26:45,592
我们还必须处理更新，但让我们处理关闭

543
01:26:45,592 --> 01:26:50,159
首先，它是一个空函数，它唯一应该做的就是

544
01:26:50,159 --> 01:26:53,680
看看我们的流控制器并关闭它

545
01:26:53,680 --> 01:26:57,439
然后我们进入我们刚刚创建的叠加层，基本上

546
01:26:57,439 --> 01:27:03,279
从屏幕上删除它，我们只是说是的，我们回来了

547
01:27:03,279 --> 01:27:07,191
从这里可以通过，现在我们在这里遇到错误，说更新

548
01:27:07,191 --> 01:27:10,479
它没有提供，所以让我们继续创建更新，如果你

549
01:27:10,479 --> 01:27:15,360
从更新中记住它实际上将字符串作为参数做了什么

550
01:27:15,360 --> 01:27:18,319
本身所以在这里我们唯一要做的就是

551
01:27:18,319 --> 01:27:22,159
将它添加到我们的流控制器中，所以我注意到你看不到

552
01:27:22,159 --> 01:27:26,231
代码对此感到抱歉，所以让我们添加它并返回 true 和

553
01:27:26,231 --> 01:27:30,000
老实说，你可以说好吧，让我们不返回任何值

554
01:27:30,000 --> 01:27:33,592
在这里你也可以这样做，但我创建了这些

555
01:27:33,592 --> 01:27:38,871
um 函数签名，以便您还可以向调用站点指示错误

556
01:27:38,871 --> 01:27:42,159
所以你可以试着摆脱这些

557
01:27:42,159 --> 01:27:45,119
是的，让我们继续，如果你愿意，但我只是要离开它

558
01:27:45,119 --> 01:27:49,759
像这样，以防我们将来想扩展此功能，以便我们

559
01:27:49,759 --> 01:27:54,231
如果出现问题，可以返回 false 好

560
01:27:54,231 --> 01:28:00,400
好吧那是呃让我们说那是我们的显示叠加功能所以那是

561
01:28:00,400 --> 01:28:04,720
完美，所以让我们继续创建一个

562
01:28:04,720 --> 01:28:08,479
在这里我们要调用高度的函数现在我们已经展示了

563
01:28:08,479 --> 01:28:14,551
go create hide 好吧，让我们说 void hide 像这样

564
01:28:14,551 --> 01:28:18,231
我们要在这里做什么 我们要像这样使用我们的控制器

565
01:28:18,231 --> 01:28:22,551
如果它在那里，我们只会说关闭，好吧，记住关闭它的方式

566
01:28:22,551 --> 01:28:25,680
实现它关闭文本的流控制器

567
01:28:25,680 --> 01:28:29,439
它还删除了覆盖并返回true，所以如果有

568
01:28:29,439 --> 01:28:33,279
屏幕上有一个可用的控制器，然后它会返回，好吧，抱歉

569
01:28:33,279 --> 01:28:36,871
它会关闭的

570
01:28:36,871 --> 01:28:40,871
所以嗯，我们也只会说控制器是空的

571
01:28:40,871 --> 01:28:45,279
好吧，我们的重点是展示

572
01:28:45,279 --> 01:28:49,279
要在内部使用此函数，请记住此函数将返回

573
01:28:49,279 --> 01:28:54,799
这个加载屏幕控制器，我们很快就会放在这个里面

574
01:28:54,799 --> 01:28:58,159
此刻的控制器变量控制变量总是基本上

575
01:28:58,159 --> 01:29:01,592
null 好吧

576
01:29:01,592 --> 01:29:05,831
好吧，那是很棒的东西，所以现在我们已经照顾好隐藏了

577
01:29:05,831 --> 01:29:11,191
现在我们有了 hide 让我们去创建节目 所以我们说 show 然后我们

578
01:29:11,191 --> 01:29:15,191
这里需要两个参数 两个必需的参数 所以让我们说

579
01:29:15,191 --> 01:29:19,831
所需的构建上下文构建上下文上下文

580
01:29:19,831 --> 01:29:24,000
然后我们说需要的字符串文本可以，所以任何人都调用这个函数

581
01:29:24,000 --> 01:29:27,592
必须提供这两个参数，它们非常熟悉，因为它们是

582
01:29:27,592 --> 01:29:31,912
show overlay 需要的参数没问题

583
01:29:31,912 --> 01:29:37,040
所以让我们进去，我们说如果我们有一个控制器，嗯，如果我们真的可以

584
01:29:37,040 --> 01:29:41,511
在这里使用这个控制器的更新功能，就像这样

585
01:29:41,511 --> 01:29:47,592
我们在这里传递文本或错误所以现在你可能喜欢开始

586
01:29:47,592 --> 01:29:51,680
看看为什么我从这个函数返回真，那是因为如果你

587
01:29:51,680 --> 01:29:55,511
没有控制器那么你不能更新它好吧

588
01:29:55,511 --> 01:30:00,080
所以这基本上就是它所做的

589
01:30:00,080 --> 01:30:03,360
代码你必须写得更短，否则你必须这样做 if

590
01:30:03,360 --> 01:30:05,912
控制器不为空

591
01:30:05,912 --> 01:30:09,912
那么您将不得不更新，但在这里我们只是说要么更新

592
01:30:09,912 --> 01:30:12,871
控制器的文本或

593
01:30:12,871 --> 01:30:17,592
否则这样可以，所以如果我们可以更新控制器的 x 我们

594
01:30:17,592 --> 01:30:20,959
只是返回，因为这意味着我们已经在屏幕上有一个控制器

595
01:30:20,959 --> 01:30:26,000
一个覆盖控制器，所以我们可以更新它的文本，所以显示应该只是

596
01:30:26,000 --> 01:30:30,871
之后立即返回，它不应该显示新的 um 覆盖，否则我们

597
01:30:30,871 --> 01:30:34,959
创建，我们基本上使用这个显示覆盖创建一个新的覆盖和

598
01:30:34,959 --> 01:30:39,592
将它分配给我们的控制器我们在顶部的属性所以我们说这是

599
01:30:39,592 --> 01:30:45,119
等于以该上下文和文本口头显示

600
01:30:45,119 --> 01:30:50,231
好吧，太棒了，这就是我们要做的几乎所有事情，而且为了我们的

601
01:30:50,231 --> 01:30:54,080
加载 screen.dart 文件，这样我们就可以保存它，我只是要去

602
01:30:54,080 --> 01:30:58,400
保存此文件并关闭它

603
01:30:58,400 --> 01:31:03,119
所以让我们谈谈我们的 um off

604
01:31:03,119 --> 01:31:07,279
状态，如果您还记得我们的关闭状态

605
01:31:07,279 --> 01:31:11,831
例如在这里我们已经注销了关闭状态并且有一个正在加载

606
01:31:11,831 --> 01:31:15,912
嗯财产在这里，但如果你看例如需要验证或

607
01:31:15,912 --> 01:31:21,592
登录等他们没有加载所以

608
01:31:21,592 --> 01:31:28,319
如果我们添加在这里加载到更高级别到我们的关闭状态，那么任何关闭

609
01:31:28,319 --> 01:31:32,720
我们应用程序中的状态可能处于加载状态

610
01:31:32,720 --> 01:31:38,231
好吧，这意味着注册可能正在加载日志记录可能正在加载任何人

611
01:31:38,231 --> 01:31:43,119
想要加载，这正是我们要做的

612
01:31:43,119 --> 01:31:47,191
现在所以我也要去我的笔记，所以离开状态

613
01:31:47,191 --> 01:31:51,759
让我们继续添加我们在底部的这些参数

614
01:31:51,759 --> 01:31:55,759
屏幕到我们的关闭状态好的所以我要说最后嗯

615
01:31:55,759 --> 01:32:01,360
bool 正在加载，也可以说是最终字符串

616
01:32:01,360 --> 01:32:05,592
加载类似这样的文本

617
01:32:05,592 --> 01:32:09,279
然后让我们取消定义类构建对不起我

618
01:32:09,279 --> 01:32:14,080
刚刚编写了这么多不同的语言，嗯，最后他们是如此

619
01:32:14,080 --> 01:32:17,511
每种语言都不同，就像它们有自己的数据类型和

620
01:32:17,511 --> 01:32:21,759
打字稿有自己的小写数据类型大写等

621
01:32:21,759 --> 01:32:25,360
这只是各种不同类型的混搭，我只是希望我们能得到

622
01:32:25,360 --> 01:32:29,279
并且至少对所有数据类型都有一个标准，至少是主要数据

623
01:32:29,279 --> 01:32:33,360
在我们的应用程序中输入，但这只是一厢情愿，也许我

624
01:32:33,360 --> 01:32:38,479
离题让我们继续将这些参数添加到我们的关闭状态

625
01:32:38,479 --> 01:32:42,400
让我们继续做这些必要的参数，所以我们说它是

626
01:32:42,400 --> 01:32:47,759
它应该 uh 这应该提供正在加载，但加载文本没有

627
01:32:47,759 --> 01:32:52,080
需要提供我们将始终有一个默认值我们会说请稍等

628
01:32:52,080 --> 01:32:57,191
像这样呃，我们应该关闭这个，我没有

629
01:32:57,191 --> 01:33:00,479
就这样关闭了，好吧

630
01:33:00,479 --> 01:33:06,479
这就是将这两个参数添加到我们的 um auth 状态并加载文本

631
01:33:06,479 --> 01:33:11,191
总是有一个默认字符串

632
01:33:11,191 --> 01:33:16,159
所以让我们继续到未初始化的身份验证状态，并在此处加载添加

633
01:33:16,159 --> 01:33:20,479
所以让我们说 required bool 正在加载，所以现在我们已经完成了

634
01:33:20,479 --> 01:33:24,720
我们实际上应该你现在看到我们在这里得到的是说

635
01:33:24,720 --> 01:33:28,551
等等你没有打电话给你的超级因为它是超级有这个正在加载

636
01:33:28,551 --> 01:33:31,592
您需要在此处提供的参数，因为它是必需的，但您是

637
01:33:31,592 --> 01:33:35,279
不这样做，让我们继续并将该参数实际添加到我们的单元格

638
01:33:35,279 --> 01:33:38,959
以及说正在加载以及我们在这里做什么

639
01:33:38,959 --> 01:33:46,959
称为超级，我们说正在加载是正在加载，就像提供给我们的那样好

640
01:33:46,959 --> 01:33:51,912
所以这是未初始化的，现在让我们去注册并做

641
01:33:51,912 --> 01:33:56,720
同样的东西在那里所以我们要说注册我们实际上

642
01:33:56,720 --> 01:34:02,479
需要例外，所以让我们将其设为必需并同时做出

643
01:34:02,479 --> 01:34:06,551
需要加载，所以它是这样加载的

644
01:34:06,551 --> 01:34:12,231
好吧，让我们打电话给超级正在加载正在加载是这样的

645
01:34:12,231 --> 01:34:17,511
好的，完美的，也完成了

646
01:34:17,511 --> 01:34:22,231
注册让我们进入当前登录的身份验证状态

647
01:34:22,231 --> 01:34:26,479
我们正在接受用户，你看到我正在制作这些参数

648
01:34:26,479 --> 01:34:29,592
必需的，因为如果您不尽快将它们设为必需

649
01:34:29,592 --> 01:34:33,040
当您转到两个参数时，三个参数用于创建一个缺点

650
01:34:33,040 --> 01:34:36,479
然后使用这个初始化器构造一个对象

651
01:34:36,479 --> 01:34:39,439
事情开始变得混乱，因为它们没有被命名为参数

652
01:34:39,439 --> 01:34:44,400
所以将三个未命名的参数传递给初始化器对我来说只是一个

653
01:34:44,400 --> 01:34:48,720
有点难以理解，所以这就是我们要求它们的原因

654
01:34:48,720 --> 01:34:52,551
好吧，让我们进去做这个

655
01:34:52,551 --> 01:34:56,479
如果我能拼写，必填名称参数必填

656
01:34:56,479 --> 01:35:01,360
和这个用户，然后我会说需要 uh bool

657
01:35:01,360 --> 01:35:07,511
呃 需要吗 公牛正在加载好吗

658
01:35:07,511 --> 01:35:12,319
像那样，然后让我们调用 super is loading with is loading all right

659
01:35:12,319 --> 01:35:19,831
所以这是关闭状态登录现在我们还需要考虑关闭

660
01:35:19,831 --> 01:35:24,231
状态需要验证，我们只是要加载在那里

661
01:35:24,231 --> 01:35:27,912
好吧，让我们继续说需求

662
01:35:27,912 --> 01:35:31,119
验证也有一个必填参数

663
01:35:31,119 --> 01:35:34,871
bool 正在加载，我们将做同样的事情 super 正在加载

664
01:35:34,871 --> 01:35:39,511
加载所以我们所做的就是确保每个州都有并且正在

665
01:35:39,511 --> 01:35:44,551
加载，也就是加载被传递给调用关闭状态的超类 all

666
01:35:44,551 --> 01:35:48,551
对，然后我们也需要照顾

667
01:35:48,551 --> 01:35:52,159
我们的关闭状态因此而退出

668
01:35:52,159 --> 01:35:55,040
你看现在我们这里有一个小问题，它说不要

669
01:35:55,040 --> 01:35:59,592
覆盖字段谢谢飞镖，这意味着它基本上已经加载了

670
01:35:59,592 --> 01:36:03,279
在超类上实现，所以我们可以从这里安全地删除它

671
01:36:03,279 --> 01:36:08,479
好的，然后我们说 bool 正在加载并且实际上需要公牛

672
01:36:08,479 --> 01:36:14,871
实际上就是这样，我们也接受了一串嗯我们的

673
01:36:14,871 --> 01:36:18,799
加载这样的文本

674
01:36:18,799 --> 01:36:22,000
嗯，现在就是这样，我们只是

675
01:36:22,000 --> 01:36:25,680
会打电话给超级并说正在加载等于正在加载然后加载

676
01:36:25,680 --> 01:36:33,759
text 正在加载文本，好吧，然后在末尾添加一个逗号

677
01:36:33,759 --> 01:36:37,759
完美，所以这基本上是说我们可能想要自定义

678
01:36:37,759 --> 01:36:41,831
关闭状态已注销加载文本，因为我们正在接收它，然后

679
01:36:41,831 --> 01:36:46,159
将它传递给超级，而其他人目前不允许我们

680
01:36:46,159 --> 01:36:49,592
自定义他们的加载文本，这就是我们有

681
01:36:49,592 --> 01:36:53,360
字符串加载文本仅用于关闭状态锁定而不用于其他类

682
01:36:53,360 --> 01:36:56,159
好的

683
01:36:56,159 --> 01:36:58,551
嗯好的

684
01:36:58,551 --> 01:37:01,759
所以就是这样，所以我们已经基本上处理了这个标题

685
01:37:01,759 --> 01:37:08,720
好吧，所以我们已将加载文本添加到我们的身份验证状态注销好的

686
01:37:08,720 --> 01:37:14,959
所以现在我们需要保存这个文件，然后回到我们这里的关闭块

687
01:37:14,959 --> 01:37:18,871
你现在可以看到我们这里有一点问题所以让我也去

688
01:37:18,871 --> 01:37:22,720
到我的笔记，这样我就可以把我的笔记拿出来

689
01:37:22,720 --> 01:37:25,279
所以我们有我们的嗯

690
01:37:25,279 --> 01:37:29,191
auth state uninitialized in here 我们需要做的是当

691
01:37:29,191 --> 01:37:33,759
应用程序打开时您的绝对初始状态

692
01:37:33,759 --> 01:37:37,439
应用程序应该处于加载状态，所以我们应该说它正在加载

693
01:37:37,439 --> 01:37:41,360
好的，这就是我们要处理的部分

694
01:37:41,360 --> 01:37:45,279
所以我需要我们现在需要做的是

695
01:37:45,279 --> 01:37:50,551
照顾你说的更新关闭状态在关闭块中注销所以

696
01:37:50,551 --> 01:37:55,040
我们去看看登出

697
01:37:55,040 --> 01:38:00,639
我们可以在这里看看 让我们看看我们是否在任何地方都注销了 是的

698
01:38:00,639 --> 01:38:05,279
它说 add is loading true to off state 在加载时注销

699
01:38:05,279 --> 01:38:10,551
所以嗯，我要看看这里，看看我们是否真的能找到它，那就是

700
01:38:10,551 --> 01:38:14,080
比如嗯这里

701
01:38:14,080 --> 01:38:17,912
没关系，然后我们在这里要做的就是加载

702
01:38:17,912 --> 01:38:22,319
发短信，假设我登录时请稍​​候

703
01:38:22,319 --> 01:38:25,831
你在这样的事情好

704
01:38:25,831 --> 01:38:30,720
这是关闭状态已注销这是我们必须做的第一件事，让我们

705
01:38:30,720 --> 01:38:34,799
看看我们在哪里使用关闭状态注销和抱歉

706
01:38:34,799 --> 01:38:40,319
是的，这很好，很好

707
01:38:40,319 --> 01:38:45,831
所以也许那是我们实际上必须更新日志状态的唯一地方

708
01:38:45,831 --> 01:38:50,000
关闭状态已注销我认为我们没有其他任何地方

709
01:38:50,000 --> 01:38:55,360
关闭状态已注销必须设置为 true，除非我们实际上是

710
01:38:55,360 --> 01:38:59,360
让你登录，我相信我们现在已经做到了

711
01:38:59,360 --> 01:39:04,959
所以关闭状态已注销，那里正在加载，所以就是这样

712
01:39:04,959 --> 01:39:09,439
唯一我们必须做的事接下来我们要做的就是

713
01:39:09,439 --> 01:39:15,360
add 正在加载到块中的其他状态，所以让我们从我们所在的位置开始

714
01:39:15,360 --> 01:39:20,871
得到所有这些错误，所以我们原谅我关闭事件初始化，所以我

715
01:39:20,871 --> 01:39:26,479
会在我的笔记中找到，在这些情况下，当我们发射时

716
01:39:26,479 --> 01:39:30,159
auth state需要验证我们应该说是loading false因为你

717
01:39:30,159 --> 01:39:33,040
看看我们什么时候真正进入这种状态

718
01:39:33,040 --> 01:39:36,319
我们没有加载任何我们已经完成了我们应该做的工作

719
01:39:36,319 --> 01:39:41,360
这样做，基本上在这里就足够了

720
01:39:41,360 --> 01:39:45,511
所以这里我们有用户所以现在这是一个名为参数的必需参数所以

721
01:39:45,511 --> 01:39:48,959
它有它的用户，然后我们会说它正在加载

722
01:39:48,959 --> 01:39:52,871
在这里我们也会说假，所以在这里命令来制作代码

723
01:39:52,871 --> 01:39:57,912
看起来好一点，然后让我们继续在这里

724
01:39:57,912 --> 01:40:02,720
我们的关闭事件登录，我们有

725
01:40:02,720 --> 01:40:07,119
最后这个问题是关闭状态需要验证

726
01:40:07,119 --> 01:40:11,119
当我们发出这个关闭状态需要验证加载也是

727
01:40:11,119 --> 01:40:14,959
假的，所以加载几乎到处都是假的

728
01:40:14,959 --> 01:40:18,639
除非我们实际加载某些东西

729
01:40:18,639 --> 01:40:22,400
例如，让我们看看这里

730
01:40:22,400 --> 01:40:26,231
例如，当我们实际登录时，好吧，所以当我们拥有用户时

731
01:40:26,231 --> 01:40:29,592
在这里我们说用户是一个必需的参数并且正在加载是假的

732
01:40:29,592 --> 01:40:33,912
昏迷也让它工作

733
01:40:33,912 --> 01:40:38,080
只是上下查看这个文件我可以看到我们也有一个问题关闭事件

734
01:40:38,080 --> 01:40:41,759
注册所以让我们去 auth 事件注册

735
01:40:41,759 --> 01:40:47,279
对不起，我们只是说身份验证需要验证加载也是错误的

736
01:40:47,279 --> 01:40:51,592
在这里我们有一个我相信的异常名称参数，他们需要

737
01:40:51,592 --> 01:40:55,360
参数，然后我们说加载也是错误的，所以那里只有一个逗号

738
01:40:55,360 --> 01:41:00,231
让格式化工作，这是它应该的工作，所以我们

739
01:41:00,231 --> 01:41:04,871
此时我们的离线应该没有任何错误好吧

740
01:41:04,871 --> 01:41:08,959
那么我要关闭那个文件

741
01:41:08,959 --> 01:41:12,231
我们需要做什么作为字幕案例我们需要进入我们的登录视图和

742
01:41:12,231 --> 01:41:14,799
删除与此有关的所有内容

743
01:41:14,799 --> 01:41:21,279
加载所以让我们进入登录视图并在此处

744
01:41:21,279 --> 01:41:24,551
呃登录视图

745
01:41:24,551 --> 01:41:28,400
现在你可以看到我们有这个关闭的对话框关闭对话框句柄

746
01:41:28,400 --> 01:41:32,799
所有这些东西，所以我们不应该做任何事情，所以现在你明白了

747
01:41:32,799 --> 01:41:36,720
我们所做的是让我们的应用程序能够处理

748
01:41:36,720 --> 01:41:42,319
加载对话框只在一个地方加载对话框应该在

749
01:41:42,319 --> 01:41:46,720
整个应用程序中的一个地方，这就是我们正在尝试做的事情

750
01:41:46,720 --> 01:41:51,831
不应具有加载状态和加载，例如处理加载和/或任何

751
01:41:51,831 --> 01:41:56,000
对话，这与加载我们内部的各种视图有关

752
01:41:56,000 --> 01:41:59,279
应用程序，这就是我们想要解决的问题，所以让我们先看看这个

753
01:41:59,279 --> 01:42:02,231
关闭对话句柄并删除它，因为我们不需要它

754
01:42:02,231 --> 01:42:06,319
然后让我们进入这里并删除登录名中的所有这些代码

755
01:42:06,319 --> 01:42:10,400
查看与加载有关的 dot dart 文件，所以现在你应该

756
01:42:10,400 --> 01:42:16,551
有异常处理好了哦，现在让我们去嗯

757
01:42:16,551 --> 01:42:23,759
我们的主要飞镖文件，在这里看看我们有什么你可以

758
01:42:23,759 --> 01:42:28,000
看到目前我们在 home 的主要小部件中有一个块生成器

759
01:42:28,000 --> 01:42:32,871
在我们的构建功能页面中，我们有一个块构建器，但我们想要的是

760
01:42:32,871 --> 01:42:36,231
状态时发出一些副作用

761
01:42:36,231 --> 01:42:40,080
更改为有负载的东西可以，所以你在

762
01:42:40,080 --> 01:42:44,871
时刻处于关闭状态，但在里面这个状态可能正在加载设置为

763
01:42:44,871 --> 01:42:49,680
是的，所以我们如何处理不应该拥有的记住块生成器

764
01:42:49,680 --> 01:42:54,479
块监听器工作的任何副作用

765
01:42:54,479 --> 01:42:58,319
但是我们需要块构建器，我们实际上需要返回一些东西

766
01:42:58,319 --> 01:43:01,831
这里我们需要根据当前返回不同的视图

767
01:43:01,831 --> 01:43:06,159
状态，但我们还需要一个块侦听器，所以我们如何做到这一点我们如何解决这个问题

768
01:43:06,159 --> 01:43:10,799
那么解决方案是使用块消费者

769
01:43:10,799 --> 01:43:14,720
所以一个块消费者我在块消费者之前提到过这个

770
01:43:14,720 --> 01:43:18,639
构建在块构建器和块侦听器之上，因此它允许您执行

771
01:43:18,639 --> 01:43:22,231
两件事同时发生，所以如果你最终陷入某种情况或

772
01:43:22,231 --> 01:43:25,759
你想要一个构建器的应用程序一个博客构建器，你想要一个博客

773
01:43:25,759 --> 01:43:31,119
listener 阻塞 listener 同时有你需要博客消费者的地方

774
01:43:31,119 --> 01:43:35,360
好吧，让我们进去，在我们的

775
01:43:35,360 --> 01:43:38,959
主文件我也要去我的笔记

776
01:43:38,959 --> 01:43:42,871
我只想在这里说对不起

777
01:43:42,871 --> 01:43:48,319
我们没有块构建器，而是我们有一个块

778
01:43:48,319 --> 01:43:52,959
消费者，现在我们在这里有了听众

779
01:43:52,959 --> 01:43:57,912
让我们抓住这个，所以我们在这里要做的是说如果

780
01:43:57,912 --> 01:44:01,511
状态正在加载

781
01:44:01,511 --> 01:44:05,040
然后我们要说的是我们要说加载屏幕，它也是

782
01:44:05,040 --> 01:44:09,511
为我导入好的，然后我们会说表演

783
01:44:09,511 --> 01:44:14,551
好的，我们已经有了上下文，然后我们要么接受状态的加载

784
01:44:14,551 --> 01:44:21,360
text 或者我们说请稍等，所以如果状态的加载文本不是

785
01:44:21,360 --> 01:44:24,799
可用的，我们只是在这里使用一个默认的

786
01:44:24,799 --> 01:44:29,191
所以如果状态没有加载，我们就说加载屏幕

787
01:44:29,191 --> 01:44:33,759
点高度 好吧 就是这样 所以现在我们已经完成了 这很漂亮

788
01:44:33,759 --> 01:44:37,592
就像我们必须在这个里面建造的最后一个积木

789
01:44:37,592 --> 01:44:41,439
这个应用程序现在所以我只是要关闭这个主要的飞镖文件和

790
01:44:41,439 --> 01:44:45,680
调整屏幕大小让我们继续并调出 scrcpy

791
01:44:45,680 --> 01:44:50,231
如果我敢，我会完全热重启应用程序，因为我们已经完成了

792
01:44:50,231 --> 01:44:55,680
这么多的新工作，让我们继续前进，呃，只是为了

793
01:44:55,680 --> 01:45:00,720
实验我要去看看它加载了什么好的我只是要去

794
01:45:00,720 --> 01:45:04,080
进入我们的供应商

795
01:45:04,080 --> 01:45:08,479
在此登录内的 firebase 身份验证提供程序中

796
01:45:08,479 --> 01:45:12,400
如果您还记得之前的用户

797
01:45:12,400 --> 01:45:17,511
像这样登录这里我们基本上可以拥有一个

798
01:45:17,511 --> 01:45:22,400
有点延迟，因为否则我们可能看不到

799
01:45:22,400 --> 01:45:26,551
我们的小呃覆盖，所以我先不这样做，然后尝试登录

800
01:45:26,551 --> 01:45:31,759
通常如此 fubar bass 你看到了吗 你看到我们的小覆盖

801
01:45:31,759 --> 01:45:34,799
那里，所以我现在要注销，看看我们能不能看到它

802
01:45:34,799 --> 01:45:38,231
我们没有做的，但是如果我现在尝试放一点

803
01:45:38,231 --> 01:45:41,360
在这里延迟，所以我只想说等待

804
01:45:41,360 --> 01:45:43,592
嗯未来

805
01:45:43,592 --> 01:45:49,191
延迟速率 const 持续时间 秒 3

806
01:45:49,191 --> 01:45:55,119
然后热启动应用程序然后我要说

807
01:45:55,119 --> 01:45:59,831
我的正常凭据 foo bar 并按下登录按钮，这是

808
01:45:59,831 --> 01:46:04,000
我们的覆盖权，它有能力让你

809
01:46:04,000 --> 01:46:08,720
实际上更新它的文本，因为它显示在屏幕上所以

810
01:46:08,720 --> 01:46:12,720
那么是的，一切实际上都在正常工作，所以现在我们有了一个覆盖

811
01:46:12,720 --> 01:46:17,119
我们没有加载对话框了，所以你基本上可以放心地去说

812
01:46:17,119 --> 01:46:21,119
好吧，我想完全摆脱加载对话框，所以我要离开

813
01:46:21,119 --> 01:46:25,279
这取决于你，就像我们现在所做的那样，我们不需要

814
01:46:25,279 --> 01:46:29,119
加载对话，所以我们在本章中取得的成就实际上是巨大的，因为我们

815
01:46:29,119 --> 01:46:34,871
现在有一个独立于整个应用程序的加载 um 屏幕

816
01:46:34,871 --> 01:46:39,680
目标只有一个地方 我们没有很多不同的地方

817
01:46:39,680 --> 01:46:43,680
在我们正在处理加载对话的应用程序中

818
01:46:43,680 --> 01:46:48,479
所以让我们继续前进，确保我们不会丢失我们宝贵的代码

819
01:46:48,479 --> 01:46:52,159
到目前为止我们编写的代码，所以我要摆脱我要摆脱 scr

820
01:46:52,159 --> 01:46:57,680
cpy 增加屏幕的大小，让我们像往常一样去提交

821
01:46:57,680 --> 01:47:02,959
并标记我们的代码，因此如果您查看我们的日志，之前的提交是第 25 步

822
01:47:02,959 --> 01:47:04,959
让我们添加

823
01:47:04,959 --> 01:47:08,871
一切都说 git commit step

824
01:47:08,871 --> 01:47:12,639
26 我要推动这些改变

825
01:47:12,639 --> 01:47:17,831
让我们也说 git tag step 26

826
01:47:17,831 --> 01:47:22,871
如果我能拼写，然后获取推送标签

827
01:47:22,871 --> 01:47:26,871
但是，如果您现在查看我们的日志，那么我们在这里有第 26 步，如果我滚动

828
01:47:26,871 --> 01:47:32,479
一点点步骤 25 在它之前，所有标签也都在这里你可用

829
01:47:32,479 --> 01:47:38,551
可以在那里看到 25 和 26 可用，所以我们已经做到了我们的承诺

830
01:47:38,551 --> 01:47:41,912
在本章开头做的，我们创建了一个很好的覆盖，我们

831
01:47:41,912 --> 01:47:47,831
可以在应用程序中重用，只在一个地方显示和隐藏

832
01:47:47,831 --> 01:47:52,319
所以我们现在需要做的是我们得到的非常令人兴奋的东西

833
01:47:52,319 --> 01:47:56,639
真的接近完成我们的应用程序所以我们有登录注册

834
01:47:56,639 --> 01:48:00,551
验证电子邮件验证我们已加载

835
01:48:00,551 --> 01:48:04,799
我们共享的屏幕删除它只是我们几乎拥有一切

836
01:48:04,799 --> 01:48:08,400
应用程序，但我们仍然有一些小细节和

837
01:48:08,400 --> 01:48:12,551
留下的碎片使应用程序更有用，因为请记住您何时创建

838
01:48:12,551 --> 01:48:16,479
您的应用程序并将其发送给苹果和谷歌审查实际上有

839
01:48:16,479 --> 01:48:20,871
将成为真正的人，他们坐在那里并与您的应用程序进行交互

840
01:48:20,871 --> 01:48:25,759
看看他们是否能理解它，所以我们需要清理 ui 使其成为

841
01:48:25,759 --> 01:48:29,592
对用户更友好一点，这正是我们要处理的

842
01:48:29,592 --> 01:48:33,040
在下一章中，我会在那里见到你，大家好，欢迎来到

843
01:48:33,040 --> 01:48:38,639
前几章的swata课程第44章我们基本上已经

844
01:48:38,639 --> 01:48:42,799
与块一起工作了很多，我们一直在确保我们的应用程序

845
01:48:42,799 --> 01:48:46,551
加载屏幕正在工作，所以我们在整个应用程序中有一个地方

846
01:48:46,551 --> 01:48:51,360
我们正在处理加载屏幕，我们还包装了整个

847
01:48:51,360 --> 01:48:56,400
块内的身份验证过程，我们现在非常接近能够

848
01:48:56,400 --> 01:49:00,080
将我们的应用程序发布到应用商店苹果的应用商店和谷歌的应用商店

849
01:49:00,080 --> 01:49:02,159
所以玩商店

850
01:49:02,159 --> 01:49:05,592
这通常是我们作为软件开发人员所做的

851
01:49:05,592 --> 01:49:10,959
就在发布我们的产品之前，或者我们基本上按照我们所说的去清理它

852
01:49:10,959 --> 01:49:16,080
所以我们对其进行了最后的润色，所以即使你是设计师，你通常也会这样做

853
01:49:16,080 --> 01:49:20,231
这可能就像你正在使用 figma 或者你正在使用草图

854
01:49:20,231 --> 01:49:24,231
你首先就像设计你的产品，然后在你展示它之前

855
01:49:24,231 --> 01:49:28,159
给产品所有者或开发人员，您可能会对其进行最后的润色

856
01:49:28,159 --> 01:49:34,319
这就是我们在本章中要做的事情，我们有一些事情

857
01:49:34,319 --> 01:49:38,319
还剩下要做的事情与最后的润色无关

858
01:49:38,319 --> 01:49:43,119
ui 主要是和产品功能有关的，我们再谈

859
01:49:43,119 --> 01:49:47,040
关于那个，所以如果你想一想我们有什么

860
01:49:47,040 --> 01:49:51,439
现在是用户可以注册的应用程序

861
01:49:51,439 --> 01:49:55,191
他们无法发送电子邮件验证 他们可以登录并且可以进入

862
01:49:55,191 --> 01:49:59,592
他们拥有的笔记列表 他们可以创建笔记 删除笔记并编辑和

863
01:49:59,592 --> 01:50:04,551
分享笔记，但是我们还没有真正为用户公开一个功能

864
01:50:04,551 --> 01:50:09,360
能够重置他们的密码所以想象一个过程想象一个应用程序

865
01:50:09,360 --> 01:50:14,231
您在哪里创建它在应用程序中创建了一个用户，而您忘记了您的

866
01:50:14,231 --> 01:50:18,319
密码，您绝对无法重新进入产品或

867
01:50:18,319 --> 01:50:22,000
软件，因为你只是不知道你的密码，所以你

868
01:50:22,000 --> 01:50:25,439
然后可能必须亲自联系应用程序开发人员并说你能

869
01:50:25,439 --> 01:50:30,799
重置我的密码，所以手动操作是一个非常非常困难的过程，而您

870
01:50:30,799 --> 01:50:34,080
真的不应该那样做所以我们要做什么

871
01:50:34,080 --> 01:50:37,831
我们在本章中要做的不仅是做最终的 ui 触摸，而且

872
01:50:37,831 --> 01:50:44,080
我们将在我们的应用程序中创建密码重置功能

873
01:50:44,080 --> 01:50:48,159
所以让我们开始吧，我将在这里做一些屏幕改组

874
01:50:48,159 --> 01:50:51,592
您可以在缓存中看到我们将删除 firebase 控制台中的所有用户

875
01:50:51,592 --> 01:50:54,871
还有他们所有的数据

876
01:50:54,871 --> 01:50:58,551
我要调出控制台 firebase.com，我要调出它

877
01:50:58,551 --> 01:51:03,360
到这里的主屏幕让我们找到我们的应用程序，我相信

878
01:51:03,360 --> 01:51:06,479
就是这个，然后我要进去

879
01:51:06,479 --> 01:51:12,159
到 firebase 日期 firestore 数据库，让我们开始

880
01:51:12,159 --> 01:51:17,912
进入这里并删除这些文件，所以我们说删除

881
01:51:17,912 --> 01:51:21,279
文件，我们有四个文件，所以没什么

882
01:51:21,279 --> 01:51:24,551
很难一次只做一个，我们删除这些

883
01:51:24,551 --> 01:51:30,231
文件在这里还可以，那些是我们的文件不见了，所以你

884
01:51:30,231 --> 01:51:32,959
可以保留您的收藏，我认为这是最好的，因为我们在

885
01:51:32,959 --> 01:51:36,479
时刻假设有一个可用的节点集合

886
01:51:36,479 --> 01:51:41,831
如果您还记得我们的节点服务，那就是我们删除数据的那部分

887
01:51:41,831 --> 01:51:45,759
但我们并没有真正删除用户，所以让我们开始进行身份验证

888
01:51:45,759 --> 01:51:49,592
Firebase 的一部分

889
01:51:49,592 --> 01:51:52,799
在这里我只想说删除帐户

890
01:51:52,799 --> 01:51:57,511
让我们也删除这个帐户，所以现在我们基本上开始了

891
01:51:57,511 --> 01:52:01,191
新鲜，所以没有用户，也没有数据

892
01:52:01,191 --> 01:52:06,080
和后端没关系所以这就是那部分让我们这样做我是

893
01:52:06,080 --> 01:52:09,360
然后在这里调出我们的源代码

894
01:52:09,360 --> 01:52:12,551
让我们在这里看看

895
01:52:12,551 --> 01:52:17,511
我们有我的笔记应用程序，正如我们所说的那样

896
01:52:17,511 --> 01:52:21,191
所以这就是 Visual Studio 代码，我要稍微调整它的大小，然后我

897
01:52:21,191 --> 01:52:25,831
将调出 scrcpy 以及目前正在运行我们的应用程序和

898
01:52:25,831 --> 01:52:28,639
应用程序在我们登录的那一刻认为

899
01:52:28,639 --> 01:52:32,159
因为它还没有真正与后端通信所以我要

900
01:52:32,159 --> 01:52:37,279
在这里做一个热重启，这就是你会遇到的问题

901
01:52:37,279 --> 01:52:41,592
有时实际上会在您的应用程序中注意到

902
01:52:41,592 --> 01:52:45,360
firebase 不会立即明白该用户不存在

903
01:52:45,360 --> 01:52:49,759
不再在后端，所以如果你从你的firebase后端删除一个用户

904
01:52:49,759 --> 01:52:53,831
并不一定意味着它会立即反映到

905
01:52:53,831 --> 01:52:58,231
应用程序，所以让我们看看如果我用这个用户注销，这里会发生什么

906
01:52:58,231 --> 01:53:03,191
像这样，然后尝试使用曾经存在于

907
01:53:03,191 --> 01:53:06,080
应用程序，但我刚刚删除了它 foo barbado

908
01:53:06,080 --> 01:53:09,592
让我们看看这里发生了什么，现在你可以看到我们说用户不是

909
01:53:09,592 --> 01:53:14,231
发现没关系，我们很快也会在本章中清理该消息

910
01:53:14,231 --> 01:53:18,000
太好了，我们现在有了一张白纸，所以我们没有用户，也没有数据

911
01:53:18,000 --> 01:53:20,720
申请嗯

912
01:53:20,720 --> 01:53:26,639
所以我们现在需要做的是首先定义我们的事件和状态

913
01:53:26,639 --> 01:53:31,119
忘记密码好吧，所以如果用户说嘿，我忘记了密码，我们必须拥有

914
01:53:31,119 --> 01:53:34,720
一个事件，以便我们可以发送该事件

915
01:53:34,720 --> 01:53:38,799
到我们的 um off block

916
01:53:38,799 --> 01:53:42,639
所以你可以在这里看到我们必须去 auth event dark 文件并添加一个 auth

917
01:53:42,639 --> 01:53:47,279
上帝密码的事件好吧，让我们继续这样做，所以我

918
01:53:47,279 --> 01:53:52,159
打算打开事件暗文件，也许

919
01:53:52,159 --> 01:53:56,551
在这里登出我们只是说类我要增加大小

920
01:53:56,551 --> 01:54:01,680
正如我们在笔记中所说的那样，在这里显然更好

921
01:54:01,680 --> 01:54:06,080
这里关闭事件忘记密码延长关闭

922
01:54:06,080 --> 01:54:12,159
事件就好了，在这里我们需要抓住用户的

923
01:54:12,159 --> 01:54:15,912
电子邮件，所以我们说这样的电子邮件，我要创建一个

924
01:54:15,912 --> 01:54:19,119
这个的构造函数也一样

925
01:54:19,119 --> 01:54:26,159
让我们用大括号来做这个或这里

926
01:54:26,159 --> 01:54:29,912
好吧，现在它是一个名称参数，我们刚刚说 auth event forgot

927
01:54:29,912 --> 01:54:32,479
密码

928
01:54:32,479 --> 01:54:37,759
太棒了，这就是那部分，然后我们还需要去定义一个状态

929
01:54:37,759 --> 01:54:42,400
因为当用户按下按钮时，例如说我忘记了密码

930
01:54:42,400 --> 01:54:47,191
然后我们的块将产生那个状态并说嘿应用程序

931
01:54:47,191 --> 01:54:51,360
您现在的状态是忘记密码，然后在主 dart 文件中

932
01:54:51,360 --> 01:54:55,912
很快就会看到我们将去编辑并将该状态添加到我们的状态处理中

933
01:54:55,912 --> 01:55:00,319
可以在您的主 dart 文件中看到我们拥有所有这些状态的那一刻，但是

934
01:55:00,319 --> 01:55:05,279
我们要添加一个新的状态，如果状态是关闭状态忘记了

935
01:55:05,279 --> 01:55:11,360
密码然后显示忘记密码视图，我们也将很快开发

936
01:55:11,360 --> 01:55:14,799
如标题所示，我们走吧

937
01:55:14,799 --> 01:55:20,639
让我们转到关闭状态 dart 文件的文件，我将在我的笔记中这样做

938
01:55:20,639 --> 01:55:24,639
注册之后，你把代码放在哪里都没关系

939
01:55:24,639 --> 01:55:28,080
注册后就放在这里

940
01:55:28,080 --> 01:55:34,479
只是说关闭状态忘记密码

941
01:55:34,479 --> 01:55:39,680
和关闭状态

942
01:55:39,680 --> 01:55:42,479
嗯，然后我们还要照顾

943
01:55:42,479 --> 01:55:44,959
这样

944
01:55:44,959 --> 01:55:48,720
状态实际上应该向应用程序指示什么

945
01:55:48,720 --> 01:55:53,119
假设当您处于忘记密码的视图中时，我们很快就会

946
01:55:53,119 --> 01:55:56,319
发展，嗯，你可能有两件事

947
01:55:56,319 --> 01:56:02,479
想在该屏幕上向用户传达用户刚刚登陆所以那里

948
01:56:02,479 --> 01:56:06,319
实际上是该屏幕可以具有的三种状态

949
01:56:06,319 --> 01:56:10,720
要么用户刚刚登陆该屏幕，这意味着没有错误

950
01:56:10,720 --> 01:56:15,191
什么都没有，我们什么都没做，所以这只是一张白纸，所以这是默认设置

951
01:56:15,191 --> 01:56:18,639
关闭状态忘记密码所以什么都没有

952
01:56:18,639 --> 01:56:23,119
好的，但是如果用户实际上有

953
01:56:23,119 --> 01:56:25,360
按了嗯

954
01:56:25,360 --> 01:56:29,279
发送提醒电子邮件，因为您看到了我们处理密码的方式

955
01:56:29,279 --> 01:56:33,279
我们是否真的要询问 firebase 并说 firebase 这个用户忘记了他们的

956
01:56:33,279 --> 01:56:37,680
此电子邮件的密码向他们发送提醒电子邮件或发送某种类似

957
01:56:37,680 --> 01:56:41,592
给他们的电子邮件，他们实际上无法重置密码

958
01:56:41,592 --> 01:56:47,040
因此，当用户按下该按钮以向他们的电子邮件发送提醒电子邮件时

959
01:56:47,040 --> 01:56:50,720
解决 嗯 可能会发生一些事情

960
01:56:50,720 --> 01:56:55,511
实际上我们要处理的两件事

961
01:56:55,511 --> 01:57:00,000
我们试图发送一封电子邮件，但没有成功，这是一个例外，所以

962
01:57:00,000 --> 01:57:03,040
这是第二个状态 记住没有状态

963
01:57:03,040 --> 01:57:07,191
第二种状态是有例外，第三种状态是没有

964
01:57:07,191 --> 01:57:11,759
例外，但我们实际上已经发送了电子邮件，所以我们必须处理三件事

965
01:57:11,759 --> 01:57:15,592
好的，所以没有值的默认状态是

966
01:57:15,592 --> 01:57:19,912
状态一 什么都没有发生 状态二实际上是

967
01:57:19,912 --> 01:57:25,279
这里有一个可选的接受例外

968
01:57:25,279 --> 01:57:28,720
第三个状态是嗯公牛

969
01:57:28,720 --> 01:57:33,592
已经发送了这样的电子邮件

970
01:57:33,592 --> 01:57:36,551
所以让我继续为这些创建一个构造函数，我不会

971
01:57:36,551 --> 01:57:39,831
再次解释一下，因为我们已经讨论了很多，我要

972
01:57:39,831 --> 01:57:43,279
像这样使这些必需的参数正常

973
01:57:43,279 --> 01:57:49,511
最后加上一个分号，在这里我们就叫他们

974
01:57:49,511 --> 01:57:54,400
我们将调用 super 但请记住，从超级关闭状态这里有一个构造函数

975
01:57:54,400 --> 01:58:00,551
必须提供的加载正常，所以在这种情况下，让我们实际采取

976
01:58:00,551 --> 01:58:05,191
公牛正在加载以及此处的参数

977
01:58:05,191 --> 01:58:10,400
然后我们将通过加载到我们的超级以及就像这样

978
01:58:10,400 --> 01:58:12,871
好的

979
01:58:12,871 --> 01:58:15,191
所以当我们实际使用这个时

980
01:58:15,191 --> 01:58:18,799
我们实际上可以给它的密码的身份验证状态是加载参数

981
01:58:18,799 --> 01:58:23,680
这将被委托回关闭状态，所以我们的主要 dart 文件是

982
01:58:23,680 --> 01:58:27,912
如果加载为真，则将能够显示加载屏幕

983
01:58:27,912 --> 01:58:31,439
记得从主 dart 文件中我们有这个漂亮的

984
01:58:31,439 --> 01:58:35,592
用监听器阻止消费者，该监听器查看任何关闭状态并且只要

985
01:58:35,592 --> 01:58:40,720
因为此身份验证状态正在加载参数为真或身份验证状态正在加载

986
01:58:40,720 --> 01:58:46,000
变量或属性为真，则显示加载屏幕

987
01:58:46,000 --> 01:58:49,439
好吧，完美，所以现在我们已经处理了关闭状态，所以我们没有做任何

988
01:58:49,439 --> 01:58:54,000
主 dart 文件中的更改还可以

989
01:58:54,000 --> 01:58:59,119
好的，我们现在需要做的是转到我们的 um auth provider dart 文件，然后

990
01:58:59,119 --> 01:59:04,959
定义一个发送提醒邮件的接口函数，这样

991
01:59:04,959 --> 01:59:09,279
我现在就去做 auth provider

992
01:59:09,279 --> 01:59:13,191
我也会在这里做

993
01:59:13,191 --> 01:59:16,479
好的，让我们继续定义一个函数

994
01:59:16,479 --> 01:59:20,639
包括我们的 Firebase 身份验证提供程序在内的每个身份验证提供程序都必须符合

995
01:59:20,639 --> 01:59:26,551
好吧，假设这是一个未来点，我们称之为发送密码

996
01:59:26,551 --> 01:59:32,231
像这样重置，我们有一个必需的字符串参数来发送电子邮件

997
01:59:32,231 --> 01:59:35,511
所以这是在定义后定义的，你会明白的

998
01:59:35,511 --> 01:59:39,912
现在很快我们就会遇到一些错误，因为身份验证服务符合身份验证

999
01:59:39,912 --> 01:59:43,119
提供者，firebase 身份验证提供者也是如此，但是

1000
01:59:43,119 --> 01:59:48,799
我们很快就会解决这些问题，因为标题表明我们去吧

1001
01:59:48,799 --> 01:59:53,592
firebase auth provider在这里并实际实现了，所以我要去

1002
01:59:53,592 --> 01:59:57,360
关闭火力基地

1003
01:59:57,360 --> 02:00:02,000
提供者在我的笔记中，我也要去这里

1004
02:00:02,000 --> 02:00:07,360
屏幕并说 um firebase off provider，你会看到一个错误

1005
02:00:07,360 --> 02:00:10,080
在 Visual Studio 代码中，您实际上可以从 Visual Studio 获得帮助

1006
02:00:10,080 --> 02:00:14,000
为我们完成缺失覆盖的代码，您可以看到创建一个缺失的

1007
02:00:14,000 --> 02:00:17,592
覆盖，这基本上是说您符合身份验证提供程序

1008
02:00:17,592 --> 02:00:21,439
但你实际上并没有覆盖老板提供者想要的所有功能

1009
02:00:21,439 --> 02:00:25,279
如果你正在使用 vim 或者你正在工作，你可以重写

1010
02:00:25,279 --> 02:00:30,000
具有例如没有飞镖的崇高

1011
02:00:30,000 --> 02:00:34,720
插件，那么您可能必须自己覆盖该功能，但签名

1012
02:00:34,720 --> 02:00:37,912
该功能非常简单，您只需前往身份验证提供商并获取此功能即可

1013
02:00:37,912 --> 02:00:41,912
函数并在它之前放一个覆盖就可以了

1014
02:00:41,912 --> 02:00:46,319
也完全没问题，但因为我正在合作，这要求我

1015
02:00:46,319 --> 02:00:49,191
保存这个文件，但我在这个文件中几乎没有做任何事情

1016
02:00:49,191 --> 02:00:52,319
好的，因为我有 Visual Studio 代码，所以我可以

1017
02:00:52,319 --> 02:00:55,592
要求它为我创建缺少的覆盖，它可能会创建它

1018
02:00:55,592 --> 02:00:59,191
就在这里的底部 好的 所以没关系

1019
02:00:59,191 --> 02:01:05,439
所以让我们把这整件事放到一个catch块中，所以我只想说catch

1020
02:01:05,439 --> 02:01:09,831
像这样没关系，然后如果发生任何事情

1021
02:01:09,831 --> 02:01:14,479
在向用户发送密码重置电子邮件的过程中，我们

1022
02:01:14,479 --> 02:01:21,279
只是在这里抛出一个通用的身份验证异常好吧

1023
02:01:21,279 --> 02:01:25,680
然后嗯，如果你想知道这个语法，这就像你一样

1024
02:01:25,680 --> 02:01:31,119
在 swift 和 rust 以及其他一些语言中忽略传入的变量

1025
02:01:31,119 --> 02:01:35,592
像 python 你也可以做这样的事情，你忽略传入的

1026
02:01:35,592 --> 02:01:40,720
变量使用下划线，但在飞镖它不是真的你忽略忽略

1027
02:01:40,720 --> 02:01:43,680
变量是你命名的变量

1028
02:01:43,680 --> 02:01:48,959
下划线，但我有时会尝试使用它来表示嘿我不

1029
02:01:48,959 --> 02:01:53,279
关心这个变量没关系，但只知道在内部你没有忽略

1030
02:01:53,279 --> 02:01:59,592
它你只是命名它下划线好的所以让我们进去现在问我们的

1031
02:01:59,592 --> 02:02:04,319
提供者，所以我们只是说等待，因为我们在 Firebase 身份验证提供者中，我们

1032
02:02:04,319 --> 02:02:09,191
实际上可以说 wait firebase off 哦，我们必须将此功能标记为

1033
02:02:09,191 --> 02:02:14,000
async 否则我们不能使用权重然后实例然后有一个

1034
02:02:14,000 --> 02:02:18,400
称为发送密码重置电子邮件的功能，它会显示哪个电子邮件和

1035
02:02:18,400 --> 02:02:22,639
我们会对这封电子邮件说好的

1036
02:02:22,639 --> 02:02:27,119
好吧，这就是我们的收获，但我们还必须有另一个收获

1037
02:02:27,119 --> 02:02:31,511
那就是像我们在许多其他情况下所做的那样，将 firebase 从异常中捕获

1038
02:02:31,511 --> 02:02:36,159
地方，让我们看看，例如，好吧，我们走吧

1039
02:02:36,159 --> 02:02:40,551
在此之前捕获并说出 firebase off 异常

1040
02:02:40,551 --> 02:02:46,159
抓住 e 类似的东西，然后用大括号和大括号

1041
02:02:46,159 --> 02:02:51,511
括号关闭，所以我将把这段代码提出来，以便我们看得更清楚

1042
02:02:51,511 --> 02:02:55,439
所以有两件事我们必须处理两个我们必须处理的代码

1043
02:02:55,439 --> 02:02:58,720
如您所见，我们在这里处理了一些代码，例如 user not

1044
02:02:58,720 --> 02:03:02,400
发现密码错误这些东西基本都是

1045
02:03:02,400 --> 02:03:05,680
我还没有真正找到这些东西的正确文档，比如

1046
02:03:05,680 --> 02:03:10,000
firebase 已记录这些错误将发生在这些地方

1047
02:03:10,000 --> 02:03:14,080
代码主要是我通过经验发现的，就像尝试一样

1048
02:03:14,080 --> 02:03:18,400
不同的事情，看到事情失败了，失败后我抓住了他们

1049
02:03:18,400 --> 02:03:22,159
错误代码，现在我知道我必须实际处理哪些错误代码

1050
02:03:22,159 --> 02:03:24,959
但如果你在谷歌上搜索，我很确定你会找到一些好的

1051
02:03:24,959 --> 02:03:28,720
关于 firebase 的文档和 google 团队非常擅长记录

1052
02:03:28,720 --> 02:03:32,720
所以我们必须处理的一个错误是

1053
02:03:32,720 --> 02:03:36,400
称为firebase auth invalid email，另一个称为firebase

1054
02:03:36,400 --> 02:03:41,831
未找到关闭用户所以让我们先获取 um 错误代码，所以我要走了

1055
02:03:41,831 --> 02:03:45,439
在这里说 switch e 代码，因为记住

1056
02:03:45,439 --> 02:03:49,191
任何来自 firebase 的 firebase auth 异常都有一个字符串类型的代码

1057
02:03:49,191 --> 02:03:53,592
正如你在这里看到的，这就是我们感兴趣的字符串，所以让我们

1058
02:03:53,592 --> 02:03:58,080
暂时处理 firebase auth 无效电子邮件

1059
02:03:58,080 --> 02:04:02,799
然后在这种情况下，我们只会说扔掉无效的电子邮件

1060
02:04:02,799 --> 02:04:07,680
异常糟糕，我们之前已经定义了这个

1061
02:04:07,680 --> 02:04:11,831
好的，在我们关闭的例外情况下，将您的文件隐藏起来

1062
02:04:11,831 --> 02:04:14,400
看到和我们必须的其他情况

1063
02:04:14,400 --> 02:04:18,551
句柄被称为 firebase auth user not found 所以它是

1064
02:04:18,551 --> 02:04:23,831
用户就像任何人要求发送密码提醒电子邮件一样，并且

1065
02:04:23,831 --> 02:04:27,680
该用户只是在数据库中不存在，所以我们必须处理它

1066
02:04:27,680 --> 02:04:31,360
情况也是如此，它被称为用户未找到，好吧，然后我们要

1067
02:04:31,360 --> 02:04:36,080
抛出未找到用户的异常

1068
02:04:36,080 --> 02:04:40,159
在任何其他firebase auhexception的情况下，我们将抛出

1069
02:04:40,159 --> 02:04:43,592
像这样的通用异常

1070
02:04:43,592 --> 02:04:48,159
我们要保存这个文件

1071
02:04:48,159 --> 02:04:52,080
太棒了，所以我们修复了 Firebase 身份验证提供程序，但是如果您查看您的项目

1072
02:04:52,080 --> 02:04:55,912
资源管理器您仍然在身份验证服务中遇到问题，因为如果您记得

1073
02:04:55,912 --> 02:04:59,912
身份验证服务也实现了身份验证提供程序，但它委托其所有

1074
02:04:59,912 --> 02:05:06,479
对其身份验证提供者负责，所以让我们进入我们的身份验证服务和

1075
02:05:06,479 --> 02:05:10,319
实现发送密码重置功能，所以我要进去了

1076
02:05:10,319 --> 02:05:13,759
在这里并获得一个视觉工作室代码来完成

1077
02:05:13,759 --> 02:05:17,592
这个在mac上用命令点或者控制点和linux和windows，然后说

1078
02:05:17,592 --> 02:05:23,040
创建一个缺少的覆盖好的，在这里我把它变成一个箭头函数

1079
02:05:23,040 --> 02:05:27,040
因为我相信我们在这里完成的所有其他函数都是错误函数

1080
02:05:27,040 --> 02:05:29,831
因为所有服务器中的所有这些功能

1081
02:05:29,831 --> 02:05:33,759
正如我之前所说，基本上委托他们的功能

1082
02:05:33,759 --> 02:05:38,000
提供给在其内部提供给它的提供者

1083
02:05:38,000 --> 02:05:40,871
构造函数，所以让我们继续创建一个错误

1084
02:05:40,871 --> 02:05:44,720
函数，在这里只是将它委托给提供者，我们只是说提供者

1085
02:05:44,720 --> 02:05:46,831
发送电子邮件

1086
02:05:46,831 --> 02:05:52,959
验证，在这里我们只是说 um send password resets 实际上称为

1087
02:05:52,959 --> 02:06:00,159
抱歉，提供商将密码重置发送到电子邮件到电子邮件，就像那样

1088
02:06:00,159 --> 02:06:03,040
好吧，让我们保存这个文件然后嗯

1089
02:06:03,040 --> 02:06:04,959
[音乐] 所以

1090
02:06:04,959 --> 02:06:09,592
我们现在需要做的是实际处理我们的 auth 事件

1091
02:06:09,592 --> 02:06:13,680
关闭框中的上帝密码，所以我知道有很多喜欢

1092
02:06:13,680 --> 02:06:17,040
这里到处都是行话，所以你可能会有点困惑

1093
02:06:17,040 --> 02:06:21,360
好吧，我们实际上在做什么，所以我们现在需要做的是你看

1094
02:06:21,360 --> 02:06:24,639
很快我们要做的是在这里创建一个小按钮

1095
02:06:24,639 --> 02:06:28,639
并说忘记密码，所以当用户

1096
02:06:28,639 --> 02:06:32,319
登陆登录屏幕，他们可能会这样，这是我的电子邮件，但我

1097
02:06:32,319 --> 02:06:35,439
实际上忘记了我的密码，所以他们必须有一个忘记密码按钮

1098
02:06:35,439 --> 02:06:38,871
在他们按下那个按钮的地方

1099
02:06:38,871 --> 02:06:43,511
在登录视图中，我们将把这个事件发送到我们的关闭块，所以如果你

1100
02:06:43,511 --> 02:06:47,511
记得我们的关闭活动所以我要回到这里你不必去

1101
02:06:47,511 --> 02:06:52,159
在这里，如果您参加我们的关闭活动，您会看到我们忘记了身份验证活动

1102
02:06:52,159 --> 02:06:56,400
密码，所以目标是为我们的用户和

1103
02:06:56,400 --> 02:07:00,871
让我们的用户界面将此事件发送到 auth 块，然后关闭

1104
02:07:00,871 --> 02:07:06,319
块将根据该值计算其状态

1105
02:07:06,319 --> 02:07:12,639
如您所见，现在让我们在这里进入我们的身份验证块文件

1106
02:07:12,639 --> 02:07:17,279
我也将在我的代码中执行此操作，我们将继续

1107
02:07:17,279 --> 02:07:19,912
并实施嗯

1108
02:07:19,912 --> 02:07:27,191
这个功能在这里忘记了密码，让我们去说关闭

1109
02:07:27,191 --> 02:07:30,551
事件就这样忘记了密码，而你

1110
02:07:30,551 --> 02:07:35,191
现在应该已经习惯了这个语法

1111
02:07:35,191 --> 02:07:39,592
这将是异步函数，只是大括号

1112
02:07:39,592 --> 02:07:43,439
就像那样，所以这就像处理的基本原理

1113
02:07:43,439 --> 02:07:48,080
你块中的一个事件 好的，现在我们正在处理一个关闭事件

1114
02:07:48,080 --> 02:07:52,639
上帝的密码所以我们在这里要做的就是我们要说

1115
02:07:52,639 --> 02:07:57,119
呃默认情况下我们发出一个常量

1116
02:07:57,119 --> 02:08:02,231
上帝密码异常的关闭状态为 null 已发送电子邮件为

1117
02:08:02,231 --> 02:08:06,231
假的，它的加载是假的，所以我们是什么

1118
02:08:06,231 --> 02:08:10,551
基本上在这里说的是用户按下忘记的密码

1119
02:08:10,551 --> 02:08:15,759
按钮我们正在做的是说是的去忘记密码屏幕

1120
02:08:15,759 --> 02:08:20,080
这就是我们要说的所有内容，因为那时我们的主要 dart 文件将

1121
02:08:20,080 --> 02:08:23,279
处理这个它会说如果这个日期忘记密码我会说好的

1122
02:08:23,279 --> 02:08:28,479
转到忘记密码屏幕好吧，那么我们要做的是

1123
02:08:28,479 --> 02:08:33,680
如果其中有电子邮件，将从该事件中提取用户的电子邮件

1124
02:08:33,680 --> 02:08:39,680
表示用户在 fargot 密码屏幕中并实际按下

1125
02:08:39,680 --> 02:08:45,360
按钮向自己发送忘记密码的电子邮件

1126
02:08:45,360 --> 02:08:49,592
如果不是这样，那么我们知道用户所做的只是去那个

1127
02:08:49,592 --> 02:08:55,040
屏幕，所以没有电子邮件要处理，所以让我们说final，如果我能拼写

1128
02:08:55,040 --> 02:08:59,511
哎呀，最终电子邮件是事件电子邮件，我们说如果

1129
02:08:59,511 --> 02:09:03,831
email 为空，然后我们只返回意味着是的用户看起来像

1130
02:09:03,831 --> 02:09:09,511
用户只是想去忘记密码屏幕好吗

1131
02:09:09,511 --> 02:09:13,360
所以就是这样，如果不是这样，那么让我们

1132
02:09:13,360 --> 02:09:18,479
在这里发表评论用户只想去忘记密码

1133
02:09:18,479 --> 02:09:22,479
屏幕，如果我们在第 21 行结束

1134
02:09:22,479 --> 02:09:30,319
我的用户想要实际发送一个忘记密码的电子邮件，好吧，在这种情况下

1135
02:09:30,319 --> 02:09:35,040
让我们发出与之前完全相同的状态，但在这种情况下，我们是

1136
02:09:35,040 --> 02:09:40,159
说加载好记住我们的主要飞镖文件将捕获所有

1137
02:09:40,159 --> 02:09:43,511
已加载并实际显示我们的加载屏幕的状态或

1138
02:09:43,511 --> 02:09:48,231
加载嗯覆盖好的，这就是那部分

1139
02:09:48,231 --> 02:09:51,119
但是我们要做的就是让我们进去

1140
02:09:51,119 --> 02:09:56,159
我们必须在这里说在这里尝试捕捉所以我们说 cat on

1141
02:09:56,159 --> 02:09:59,680
异常捕获

1142
02:09:59,680 --> 02:10:03,912
像那样，因为我们在我们的街区，我们有

1143
02:10:03,912 --> 02:10:08,799
访问我们的提供商，假设我们等待提供商发送密码

1144
02:10:08,799 --> 02:10:15,511
像这样重置电子邮件，然后我们必须启用两个变量

1145
02:10:15,511 --> 02:10:23,040
在这里我们只是说布尔确实发送了密码或设置位和电子邮件

1146
02:10:23,040 --> 02:10:27,680
就像那样，我们也有一个可选的例外

1147
02:10:27,680 --> 02:10:32,959
像这样，所以目标是我们在这里和 try 中有一个 try 和 catch 块

1148
02:10:32,959 --> 02:10:36,000
我们只是说是的，这封电子邮件已成功发送

1149
02:10:36,000 --> 02:10:39,511
因为是的，如果您最终没有进入 catch 块，则意味着存在

1150
02:10:39,511 --> 02:10:42,799
没有错误，然后电子邮件实际上已发送

1151
02:10:42,799 --> 02:10:47,360
成功，我们也会说异常基本上是空的，所以我们不

1152
02:10:47,360 --> 02:10:50,871
必须担心其中的任何一个

1153
02:10:50,871 --> 02:10:55,040
在此之后的功能嗯，但请记住我们是

1154
02:10:55,040 --> 02:11:00,799
基本上将这两个变量保存在这里，以便在尝试和捕获之后

1155
02:11:00,799 --> 02:11:06,400
块，我们实际上可以使用这些变量为密码发出一个 aust 状态，所以

1156
02:11:06,400 --> 02:11:10,479
这个东西会在哦 文档里会放进去

1157
02:11:10,479 --> 02:11:14,479
在这里，这东西会进入这里

1158
02:11:14,479 --> 02:11:18,000
好的，它的加载将是错误的，所以这就是为什么我们基本上

1159
02:11:18,000 --> 02:11:22,551
将它们存储在这里，因此在我们所说的幸福路径中的积极情况下

1160
02:11:22,551 --> 02:11:25,592
我们会说确实发送电子邮件是真的

1161
02:11:25,592 --> 02:11:30,319
我们会说例外是不行的，在这种情况下，这是一封电子邮件

1162
02:11:30,319 --> 02:11:36,000
会是假的，例外会是好的，所以我们存储那些

1163
02:11:36,000 --> 02:11:42,159
然后让我们从上面复制这个状态，然后把它粘贴到这里

1164
02:11:42,159 --> 02:11:46,959
所以在这种情况下，我们说，嘿，例外是例外，如果有的话

1165
02:11:46,959 --> 02:11:50,319
嗯，无效哦，是的，如果

1166
02:11:50,319 --> 02:11:54,319
这是一个变量，所以让我再把它带到这里，这样你就可以看到异常是

1167
02:11:54,319 --> 02:12:00,000
它已发送电子邮件的异常将是它发送

1168
02:12:00,000 --> 02:12:03,040
电子邮件和嗯

1169
02:12:03,040 --> 02:12:08,479
正在加载是错误的，所以现在我们正在将该状态发送到

1170
02:12:08,479 --> 02:12:11,279
应用

1171
02:12:11,279 --> 02:12:15,119
好吧，在这一切之后，你看看是否和现在

1172
02:12:15,119 --> 02:12:18,871
我们已经处理了该事件和卸载中的状态，我们还必须

1173
02:12:18,871 --> 02:12:23,040
向用户显示某种对话，因此如果您正在重置密码

1174
02:12:23,040 --> 02:12:28,400
嗯屏幕，你输入你已经输入了你的电子邮件，你说嘿给我发一个

1175
02:12:28,400 --> 02:12:32,639
完成后重置嗯密码电子邮件，然后我们就走了

1176
02:12:32,639 --> 02:12:36,799
向您显示一个小对话并说嘿好吧我们做了我们已经发送了任何

1177
02:12:36,799 --> 02:12:40,231
错误的电子邮件给你去检查你的电子邮件所以

1178
02:12:40,231 --> 02:12:43,680
我们基本上需要一个对话，如果你记得我们有一个通用对话

1179
02:12:43,680 --> 02:12:47,831
已经，所以我们只是要重用它，好吧，所以让我们继续

1180
02:12:47,831 --> 02:12:51,040
案例中屏幕底部的标题去并在lib下创建一个文件

1181
02:12:51,040 --> 02:12:56,479
实用程序对话框称为密码重置电子邮件发送对话框

1182
02:12:56,479 --> 02:13:02,959
所以嗯，让我们继续做吧，我也要关闭这个文件

1183
02:13:02,959 --> 02:13:06,959
看看我们这里有什么，我们有实用程序

1184
02:13:06,959 --> 02:13:10,799
对不起，我要在这里创建一个新文件

1185
02:13:10,799 --> 02:13:14,400
只是将其称为密码重置

1186
02:13:14,400 --> 02:13:20,720
和电子邮件发送对话点 dart 好的，这就是文件，我们只是

1187
02:13:20,720 --> 02:13:24,080
我会说这是一个未来的 void um show

1188
02:13:24,080 --> 02:13:29,680
密码呃重置发送对话好吧

1189
02:13:29,680 --> 02:13:33,439
一个只需要构建上下文的函数

1190
02:13:33,439 --> 02:13:37,040
我们会在这里得到一个错误只是因为我相信

1191
02:13:37,040 --> 02:13:40,231
哦，Visual Studio 代码自动为我导入了构建上下文

1192
02:13:40,231 --> 02:13:45,592
太棒了，好吧，所以我们只是要返回显示通用

1193
02:13:45,592 --> 02:13:49,759
对话好的，你可以看到这也是自动导入的，我们已经

1194
02:13:49,759 --> 02:13:54,799
之前已经有了这个功能，所以让我在这里放一个逗号和一个

1195
02:13:54,799 --> 02:14:00,000
最后的分号只是为了让 um dart 格式化程序格式化我的代码，我是

1196
02:14:00,000 --> 02:14:04,400
只是在这里说这是一个通用的 void 函数好吧

1197
02:14:04,400 --> 02:14:08,959
对于标题，我们只会说密码重置这样的大写字母

1198
02:14:08,959 --> 02:14:13,360
r 并且内容也是我们可以说我们现在已经发送的字符串

1199
02:14:13,360 --> 02:14:17,040
你一个密码重置

1200
02:14:17,040 --> 02:14:20,720
像这样的链接请检查你的

1201
02:14:20,720 --> 02:14:24,959
发送电子邮件以获取更多信息，这样可以，您可以

1202
02:14:24,959 --> 02:14:28,639
如果需要，请更改字符串，对于选项，这是一个错误

1203
02:14:28,639 --> 02:14:33,592
必须返回地图的函数，它只有一个按钮，其值为

1204
02:14:33,592 --> 02:14:38,319
null 没关系

1205
02:14:38,319 --> 02:14:43,191
好的，这就是我们的显示密码重置发送对话框嗯

1206
02:14:43,191 --> 02:14:47,592
现在我们必须做的是我们还必须开发密码的实际视图

1207
02:14:47,592 --> 02:14:50,799
重置为底部的标题

1208
02:14:50,799 --> 02:14:53,592
屏幕显示我们要去 lib 视图

1209
02:14:53,592 --> 02:14:58,319
我们要到这里你会看到 lib 视图和我们要创建的视图下

1210
02:14:58,319 --> 02:15:01,912
一个名为忘记密码视图的视图，所以让我继续做吧，忘记了

1211
02:15:01,912 --> 02:15:08,319
密码视图 dot dart 好的，我也要进入我的笔记

1212
02:15:08,319 --> 02:15:13,360
忘记密码视图没问题，但我们要创建一个有状态的小部件

1213
02:15:13,360 --> 02:15:16,799
在这里，这实际上是我们必须编写的相当多的代码

1214
02:15:16,799 --> 02:15:20,871
但我们会处理好，所以这不是问题，所以让我们忘记吧

1215
02:15:20,871 --> 02:15:24,639
密码视图，我要做的第一件事是创建一个有状态的

1216
02:15:24,639 --> 02:15:28,639
Visual Studio代码中带有stf的小部件我只是要打电话忘记密码

1217
02:15:28,639 --> 02:15:33,592
像这样查看，因为我们需要一个文本字段

1218
02:15:33,592 --> 02:15:38,159
屏幕，这样用户就可以像我们一样输入他们的电子邮件地址

1219
02:15:38,159 --> 02:15:43,759
在登录视图中做让我们继续创建一个文本编辑控制器，但是

1220
02:15:43,759 --> 02:15:46,479
在所有这些之前，我们还必须进口材料，以便我们摆脱

1221
02:15:46,479 --> 02:15:50,080
现在屏幕上出现的所有这些错误，所以让我们进入这里

1222
02:15:50,080 --> 02:15:53,439
创建一个文本编辑控制器这么晚最后

1223
02:15:53,439 --> 02:15:57,759
文本编辑控制器，我们称之为控制器

1224
02:15:57,759 --> 02:16:00,400
你还记得以前的这种模式，所以我不必解释它

1225
02:16:00,400 --> 02:16:04,159
再次，所以我们在它的状态里面进入初始化状态，我们创建

1226
02:16:04,159 --> 02:16:07,759
控制器所以我们说它是一个文本编辑控制器 哎呀

1227
02:16:07,759 --> 02:16:11,831
文本编辑控制器和

1228
02:16:11,831 --> 02:16:15,680
在处置中，我们基本上只是处置它，以便控制器点显示

1229
02:16:15,680 --> 02:16:18,799
好吧，这只是一个样板，什么都没有

1230
02:16:18,799 --> 02:16:23,191
神奇的发生在这里我们只是在准备那个观点

1231
02:16:23,191 --> 02:16:27,759
所以我们还需要在这里做的是我们将在这个构建中创建

1232
02:16:27,759 --> 02:16:32,720
函数我们将返回一个块监听器，因为

1233
02:16:32,720 --> 02:16:37,191
基于身份验证状态的各种状态忘记密码所以让我们去

1234
02:16:37,191 --> 02:16:41,592
这里基于各种身份验证状态或上帝密码

1235
02:16:41,592 --> 02:16:46,639
例如，我们可能不得不显示或隐藏不同的东西

1236
02:16:46,639 --> 02:16:51,119
如果嗯，如果我们知道已发送电子邮件

1237
02:16:51,119 --> 02:16:56,959
布尔标志为真，那么我们将基本上清除文本字段值

1238
02:16:56,959 --> 02:17:02,231
使用控制器的清除功能，我们还将显示它

1239
02:17:02,231 --> 02:17:06,080
我们刚刚写的对话已发送电子邮件

1240
02:17:06,080 --> 02:17:09,040
哈哈哈对话

1241
02:17:09,040 --> 02:17:14,319
这是一个很长的名字，让我们在对话中看到

1242
02:17:14,319 --> 02:17:19,360
呃它在我们的对话中如果我能找到它应该在实用程序下

1243
02:17:19,360 --> 02:17:22,720
对话然后我们应该被称为密码最近的电子邮件发送

1244
02:17:22,720 --> 02:17:26,080
对话好的，所以我们将显示它

1245
02:17:26,080 --> 02:17:32,231
这就是为什么我们需要一个监听器，所以在这个构建中，我们在这里

1246
02:17:32,231 --> 02:17:36,551
要做的就是说我们返回一个块监听器，这个

1247
02:17:36,551 --> 02:17:41,912
如您所见，需要自动导入，并且此块侦听器实际上在侦听

1248
02:17:41,912 --> 02:17:46,400
对于也需要自动导入的块外，因此有很多导入

1249
02:17:46,400 --> 02:17:50,720
如果你没有像 Visual Studio Code 这样好的文本编辑器

1250
02:17:50,720 --> 02:17:55,119
您必须手动导入所有这些，直接浪费时间

1251
02:17:55,119 --> 02:17:59,759
氧，所以我通常不提供建议，但嗯

1252
02:17:59,759 --> 02:18:05,119
我的建议至少在这里，因为我认为让自己成为一个非常重要的

1253
02:18:05,119 --> 02:18:09,279
好的文本编辑器，因为如果你有它会使开发变得容易得多

1254
02:18:09,279 --> 02:18:13,912
像视觉工作室代码，所以我们有一个块，然后是第二个

1255
02:18:13,912 --> 02:18:17,831
并且通用参数处于关闭状态，也需要自动导入所以

1256
02:18:17,831 --> 02:18:21,511
如果您查看文件的顶部，则有很多 um 导入

1257
02:18:21,511 --> 02:18:25,912
已经我不必手动做，所以我们有一个听众让我们

1258
02:18:25,912 --> 02:18:30,000
从视觉工作室获得帮助来完成听众，我们也有一点

1259
02:18:30,000 --> 02:18:34,799
嗯，让我们看看我们的块监听器中有一个孩子，我们可以返回

1260
02:18:34,799 --> 02:18:39,759
现在让我们假设我们将脚手架作为常量返回，所以

1261
02:18:39,759 --> 02:18:43,759
但我们现在可以先处理我们的监听器

1262
02:18:43,759 --> 02:18:47,191
所以在听众内部，我们是唯一的状态，我们是

1263
02:18:47,191 --> 02:18:50,551
感兴趣，因为这将向我们返回任何关闭状态，因为他们

1264
02:18:50,551 --> 02:18:56,400
改变我们只对嗯，如果我能拼写的状态感兴趣

1265
02:18:56,400 --> 02:19:01,592
处于关闭状态忘记密码所以这是我们唯一感兴趣的状态

1266
02:19:01,592 --> 02:19:05,912
然后我们说如果状态已经发送了电子邮件，那么我们将控制转到

1267
02:19:05,912 --> 02:19:10,720
控制器并说清楚，然后我们将等待

1268
02:19:10,720 --> 02:19:16,159
显示对话如此异步，然后我们会说等待

1269
02:19:16,159 --> 02:19:21,279
我又在这里忘记了我们巨大文件的名称实用程序对话框和

1270
02:19:21,279 --> 02:19:24,871
密码重置电子邮件，所以我将在以下位置获取此功能的名称

1271
02:19:24,871 --> 02:19:27,912
至少好吧，所以我抓住了那个函数的名字

1272
02:19:27,912 --> 02:19:32,479
将其粘贴到此处并获取 Visual Studio 代码以自动为我导入它好吧

1273
02:19:32,479 --> 02:19:36,231
在这里，我们唯一要做的就是将上下文传递给那里

1274
02:19:36,231 --> 02:19:40,000
如果电子邮件已发送，则密码重置已发送，我们会说清楚

1275
02:19:40,000 --> 02:19:44,080
控制器屏幕上的文本，然后显示对话框告诉

1276
02:19:44,080 --> 02:19:49,360
用户嘿，我们向您发送了一封电子邮件，但是如果有

1277
02:19:49,360 --> 02:19:53,119
嗯这样的例外

1278
02:19:53,119 --> 02:19:57,191
那么我们要做的就是向用户显示一个错误，所以我们要

1279
02:19:57,191 --> 02:20:01,592
说等待显示错误对话框

1280
02:20:01,592 --> 02:20:04,871
我认为这也得到了自动进口

1281
02:20:04,871 --> 02:20:07,511
你看到了，那么我们会说错误对话框

1282
02:20:07,511 --> 02:20:13,119
在这种情况下，然后我们会说我们无法处理

1283
02:20:13,119 --> 02:20:17,439
您的要求请确保您是

1284
02:20:17,439 --> 02:20:25,279
注册用户或类似的东西嗯，我们可以说

1285
02:20:25,279 --> 02:20:28,159
请确保您是注册用户

1286
02:20:28,159 --> 02:20:32,551
或者如果不是和用户

1287
02:20:32,551 --> 02:20:37,912
um or or if not register a user now by

1288
02:20:37,912 --> 02:20:42,551
退一步好吧，所以这只是一些文字，我的意思是你

1289
02:20:42,551 --> 02:20:45,191
不必写这段文字，它基本上只是说，如果你在

1290
02:20:45,191 --> 02:20:47,912
忘记密码屏幕，你说，嘿，我

1291
02:20:47,912 --> 02:20:51,279
忘记我的密码 这是我的电子邮件 如果我们找不到该电子邮件 如果有

1292
02:20:51,279 --> 02:20:53,592
例外例如然后

1293
02:20:53,592 --> 02:20:58,080
嗯，我们将显示此消息并说嘿您可能不是注册用户

1294
02:20:58,080 --> 02:21:02,159
你想回去注册自己吗

1295
02:21:02,159 --> 02:21:05,279
所以记住在这里你可能是你

1296
02:21:05,279 --> 02:21:08,720
可以尝试更细粒度，因为记住我们在这里的异常

1297
02:21:08,720 --> 02:21:12,551
身份验证状态忘记密码时的关闭状态异常

1298
02:21:12,551 --> 02:21:17,360
如果你去我们的外地，嗯外地

1299
02:21:17,360 --> 02:21:21,759
在这种情况下，请记住异常来自发送密码重置，所以

1300
02:21:21,759 --> 02:21:24,799
如果您访问我们的网站，此发送密码重置

1301
02:21:24,799 --> 02:21:28,799
firebase auth provider 发送密码重置哦天哪

1302
02:21:28,799 --> 02:21:31,360
我最终没有

1303
02:21:31,360 --> 02:21:36,400
在这种情况下，firebase 身份验证提供程序可能是

1304
02:21:36,400 --> 02:21:41,511
找不到无效的电子邮件或用户，因此您实际上可以尝试保持清洁

1305
02:21:41,511 --> 02:21:45,511
您的身份验证在您忘记密码视图中感到抱歉，并实际检查什么样的

1306
02:21:45,511 --> 02:21:49,511
例外，所以我实际上认为如果你这样做会更好，我不是

1307
02:21:49,511 --> 02:21:53,360
这样做只是为了节省一些时间，但你可能会决定

1308
02:21:53,360 --> 02:21:57,680
去吧，我鼓励你真的原谅我

1309
02:21:57,680 --> 02:22:03,511
如果你想做这样的事情

1310
02:22:03,511 --> 02:22:07,439
所以我们现在需要做什么

1311
02:22:07,439 --> 02:22:11,680
我们是否已经完成了监听器，所以这真的很好，但在孩子身上，我们实际上

1312
02:22:11,680 --> 02:22:16,720
必须创建嗯我们必须创建一个嗯合适的脚手架

1313
02:22:16,720 --> 02:22:20,231
所以让我们继续删除辅音

1314
02:22:20,231 --> 02:22:22,871
在这里，因为最后我们不会得到一个固定的脚手架

1315
02:22:22,871 --> 02:22:26,080
你最终会得到一个固定的脚手架是非常罕见的

1316
02:22:26,080 --> 02:22:29,439
在应用栏中，我只想说我们有一个应用栏

1317
02:22:29,439 --> 02:22:33,592
在这里，它有一个标题，标题只是

1318
02:22:33,592 --> 02:22:39,680
将是恒定文本，我们只会说忘记密码

1319
02:22:39,680 --> 02:22:42,479
好的，里面有一些逗号来获取

1320
02:22:42,479 --> 02:22:46,720
格式正确，在正文中我们要

1321
02:22:46,720 --> 02:22:50,551
创建一个专栏这是我通常喜欢做的

1322
02:22:50,551 --> 02:22:54,479
一个列，然后我将它包裹在像这样的一些填充中，让我们只是

1323
02:22:54,479 --> 02:22:58,959
说 16 的填充也可以

1324
02:22:58,959 --> 02:23:01,592
那么那么

1325
02:23:01,592 --> 02:23:05,680
这基本上是我们在这里的主要关注点，所以我们需要努力

1326
02:23:05,680 --> 02:23:10,551
忘记密码视图中的一小列

1327
02:23:10,551 --> 02:23:14,159
所以现在我们将它作为列的第一个孩子，我们将添加一个

1328
02:23:14,159 --> 02:23:18,639
这里的文本很少 const 并告诉用户他们实际上是什么

1329
02:23:18,639 --> 02:23:20,959
应该在这个屏幕上做所以让我们说

1330
02:23:20,959 --> 02:23:25,831
我要抓取我之前准备好的文本

1331
02:23:25,831 --> 02:23:30,479
把它贴在这里这样我就不必再写这个东西了

1332
02:23:30,479 --> 02:23:37,119
让我们看看为什么它抱怨什么是实际的错误嗯太多了

1333
02:23:37,119 --> 02:23:40,400
位置论点好吧我在这里搞砸了

1334
02:23:40,400 --> 02:23:44,639
当然是因为在我添加的专栏中实际上并没有说孩子

1335
02:23:44,639 --> 02:23:49,831
所以让我先把孩子们里面的孩子们移走，我是

1336
02:23:49,831 --> 02:23:53,831
把这段文字放好，所以如果你有和我一样的问题，那就是

1337
02:23:53,831 --> 02:23:57,759
因为您将文本放在列内，这不好我们有

1338
02:23:57,759 --> 02:24:01,680
把它放在列的 children 属性中好吗

1339
02:24:01,680 --> 02:24:04,871
我们将在此之后创建一个文本字段，用户可以在其中

1340
02:24:04,871 --> 02:24:11,119
实际上输入他们的电子邮件地址，所以我们说 text um text field

1341
02:24:11,119 --> 02:24:15,831
在这里让我们看看是的，但我们在结尾没有逗号

1342
02:24:15,831 --> 02:24:19,191
这要么所以我要在这里放一个逗号好的文本字段所以屏幕

1343
02:24:19,191 --> 02:24:22,799
现在看起来有点吓人只是因为它认为它必须是

1344
02:24:22,799 --> 02:24:27,360
一个常数，但它不是一个常数，所以这些小警告很快就会出现

1345
02:24:27,360 --> 02:24:31,360
消失好吧，让我们说键盘类型，它是

1346
02:24:31,360 --> 02:24:35,511
文本输入类型所以我要说文本输入类型

1347
02:24:35,511 --> 02:24:41,592
电子邮件地址 好的 电子邮件字段上的自动更正总是有

1348
02:24:41,592 --> 02:24:44,799
是假的好吧你不想在电子邮件字段上自动更正它非常

1349
02:24:44,799 --> 02:24:47,912
烦人，我们也会自动对焦，这样当

1350
02:24:47,912 --> 02:24:53,119
用户最终出现在 textville 自动关注的屏幕上

1351
02:24:53,119 --> 02:24:56,799
然后我们放置一个控制器，然后常量的问题是

1352
02:24:56,799 --> 02:25:01,040
会离开，这太棒了，嗯，然后让我们

1353
02:25:01,040 --> 02:25:06,720
去创造一个带有提示的小装饰，所以我们只说 const

1354
02:25:06,720 --> 02:25:11,759
输入装饰，我们会说提示文本是

1355
02:25:11,759 --> 02:25:16,479
你的电子邮件地址是这样的

1356
02:25:16,479 --> 02:25:19,592
这就是现在我们已经创建了文本字段的那部分

1357
02:25:19,592 --> 02:25:24,080
在此之后，我们实际上需要一个文本按钮，我们实际上需要其中两个

1358
02:25:24,080 --> 02:25:27,119
所以我要说文本按钮 [音乐]

1359
02:25:27,119 --> 02:25:30,319
像这样，在第一个文本按钮内

1360
02:25:30,319 --> 02:25:34,551
一个它将成为实际的 cta 号召性用语，这意味着

1361
02:25:34,551 --> 02:25:37,759
当用户输入他们的电子邮件地址时，他们将按下此按钮

1362
02:25:37,759 --> 02:25:40,959
按下此按钮后，我们将发送

1363
02:25:40,959 --> 02:25:46,319
给他们的电子邮件没问题，所以假设我被按下了，这是一个空函数

1364
02:25:46,319 --> 02:25:50,871
就像现在这样，它的孩子只是文本的 const

1365
02:25:50,871 --> 02:25:55,279
我们将向我发送密码重置链接

1366
02:25:55,279 --> 02:25:59,759
像这样，所以这是我要复制的第一个

1367
02:25:59,759 --> 02:26:04,479
文本按钮实际上并在此之后再次粘贴它，在这里我们只是

1368
02:26:04,479 --> 02:26:06,799
会说回

1369
02:26:06,799 --> 02:26:11,511
登录登录页面，在这里我们实际上有这个功能

1370
02:26:11,511 --> 02:26:17,040
之前在我们的身份验证博客中，所以让我们进入这个并说上下文读取或关闭

1371
02:26:17,040 --> 02:26:21,831
从上下文中阻止，然后我们将在这里添加一个事件并说掉

1372
02:26:21,831 --> 02:26:28,639
事件登录所以真的很抱歉注销

1373
02:26:28,639 --> 02:26:32,551
所以这会将用户发送到登录页面好吧，这是第二个

1374
02:26:32,551 --> 02:26:36,959
按钮手柄已经在第一个按钮中让我们抓住

1375
02:26:36,959 --> 02:26:41,279
用户的电子邮件，所以我们只说电子邮件是控制器

1376
02:26:41,279 --> 02:26:43,592
文字和

1377
02:26:43,592 --> 02:26:47,360
在这里，我们将告诉关闭块它必须发送密码

1378
02:26:47,360 --> 02:26:51,592
重置到这封电子邮件，所以我们只会说上下文点从块中读取

1379
02:26:51,592 --> 02:26:55,831
上下文，我们要添加，我们要说

1380
02:26:55,831 --> 02:27:00,551
事件忘记密码

1381
02:27:00,551 --> 02:27:06,959
电子邮件就是这样的电子邮件

1382
02:27:06,959 --> 02:27:10,080
好吧，在这种情况下实际上就是这样

1383
02:27:10,080 --> 02:27:14,080
是的，那里没有逗号更干净，因为如果我放一个逗号，那么它

1384
02:27:14,080 --> 02:27:17,360
格式化这样的代码，但没有像这样对我来说的格式

1385
02:27:17,360 --> 02:27:22,871
我的意见更清晰了，所以我想现在我们已经实现了

1386
02:27:22,871 --> 02:27:27,279
这个屏幕应该准备好了我们忘记密码的视图

1387
02:27:27,279 --> 02:27:31,119
所以现在作为屏幕底部的标题，以防我们需要去

1388
02:27:31,119 --> 02:27:36,551
寻找上帝密码的关闭状态并返回主密码视图

1389
02:27:36,551 --> 02:27:40,240
暗文件，所以我要去主暗文件

1390
02:27:40,240 --> 02:27:44,000
[音乐] 所以让我关闭它并关闭

1391
02:27:44,000 --> 02:27:48,000
这个，让我们转到主 dart 文件，我们已经处理了很多

1392
02:27:48,000 --> 02:27:52,799
状态，然后在这里登录视图，对不起

1393
02:27:52,799 --> 02:27:57,360
让我们再说一下，如果状态是上帝的关闭状态

1394
02:27:57,360 --> 02:28:01,439
密码就像那个大括号

1395
02:28:01,439 --> 02:28:04,400
然后在这里我们要说返回

1396
02:28:04,400 --> 02:28:09,680
const forgot password view 这也将被导入

1397
02:28:09,680 --> 02:28:14,479
就是这样哦

1398
02:28:14,479 --> 02:28:20,000
那就是我们忘记密码的那部分

1399
02:28:20,000 --> 02:28:23,191
我们还需要做的是确保

1400
02:28:23,191 --> 02:28:29,511
在我们的登录视图中，现在让我们进入我们的登录视图

1401
02:28:29,511 --> 02:28:34,000
我们需要在这里有一个小按钮，允许用户转到

1402
02:28:34,000 --> 02:28:38,400
前台密码视图，所以我们要在这里添加它，所以我要

1403
02:28:38,400 --> 02:28:42,000
创建另一个文本按钮，因此复制底部的文本按钮

1404
02:28:42,000 --> 02:28:46,639
把它粘贴到这里好吧，在这个文本中，我们现在就去

1405
02:28:46,639 --> 02:28:51,912
说我像这样忘记了密码，在这里让我们发送事件

1406
02:28:51,912 --> 02:28:55,831
那个密码好

1407
02:28:55,831 --> 02:29:00,400
所以现在如果我按下命令按钮进行热重载，你会看到我忘记了我的

1408
02:29:00,400 --> 02:29:04,799
密码显示在这里，我们按下它，此刻实际上什么都没有

1409
02:29:04,799 --> 02:29:08,799
发生这可能是因为我们更改了主 dart 文件并且我们

1410
02:29:08,799 --> 02:29:13,680
还没有热重载，很抱歉热重启，所以我现在做热重启，我

1411
02:29:13,680 --> 02:29:16,959
说我忘记了密码，你可以看到我们最终出现在这个屏幕上，我们刚刚

1412
02:29:16,959 --> 02:29:21,040
开发，然后您可以发送一个

1413
02:29:21,040 --> 02:29:27,191
嗯提醒电子邮件，如果您说返回登录页面，则会发送注销并且您

1414
02:29:27,191 --> 02:29:31,360
最后在这里还可以，所以现在可以了

1415
02:29:31,360 --> 02:29:34,720
嗯，现在我们还需要在登录时做些什么

1416
02:29:34,720 --> 02:29:38,720
在这里查看飞镖，让我们去登录查看飞镖

1417
02:29:38,720 --> 02:29:43,439
看看我们是如何处理这个目前没有找到的用户的，我们

1418
02:29:43,439 --> 02:29:47,119
刚刚找不到用户，但是如果您考虑一下，将会有

1419
02:29:47,119 --> 02:29:52,319
来自苹果和谷歌的人将在您发送时测试您的应用程序

1420
02:29:52,319 --> 02:29:56,639
它到应用商店和呃谷歌游戏商店所以只是说用户

1421
02:29:56,639 --> 02:30:00,400
没有找到是一点点，我不想说它是错的，但是

1422
02:30:00,400 --> 02:30:06,319
它只是没有完全涵盖可能是什么问题

1423
02:30:06,319 --> 02:30:08,551
实际上可能是这样

1424
02:30:08,551 --> 02:30:12,551
说未找到用户就像我们可以传达给我们的最低限度的内容

1425
02:30:12,551 --> 02:30:16,479
用户所以让我们通过更好一点来让它变得更好

1426
02:30:16,479 --> 02:30:20,959
文字在这里，所以我只是要写下我以前的文字，所以我们

1427
02:30:20,959 --> 02:30:24,639
最好只是说找不到具有输入凭据的用户好吧

1428
02:30:24,639 --> 02:30:30,159
只是一个更好的信息，因为现在我们基本上已经完成了

1429
02:30:30,159 --> 02:30:34,799
我们要进入清理状态的忘记密码，所以我们正在添加

1430
02:30:34,799 --> 02:30:38,959
一些最终的用户界面对我们的应用程序进行了修改，以使其看起来更好，例如标题

1431
02:30:38,959 --> 02:30:42,799
表示让我们进入登录视图并在这里添加一个填充，你看我们只是

1432
02:30:42,799 --> 02:30:47,511
有一个专栏，它看起来有点像边缘它不是那么专业所以

1433
02:30:47,511 --> 02:30:51,831
让我们在这里添加一个填充我只想说用填充换行

1434
02:30:51,831 --> 02:30:55,912
我们只是在这里说 16 的填充好吧，所以看起来有点

1435
02:30:55,912 --> 02:30:59,040
在我看来更好至少看起来更干净，即使你正在做

1436
02:30:59,040 --> 02:31:02,959
网站开发你继承了嗯

1437
02:31:02,959 --> 02:31:07,191
例如他们在屏幕上的元素，就像你的用户代理有一些

1438
02:31:07,191 --> 02:31:11,191
已填充或内置到继承的小部件的边距它是我们继承的

1439
02:31:11,191 --> 02:31:15,040
元素所以嗯，除非你去改变你的CSS所以

1440
02:31:15,040 --> 02:31:20,159
这就是我们在颤振中在我们的元素中添加 um 填充

1441
02:31:20,159 --> 02:31:23,759
应用程序所以接下来我们需要做的事情

1442
02:31:23,759 --> 02:31:26,799
在这里您可以在登录页面中看到它就在顶部说

1443
02:31:26,799 --> 02:31:30,479
登录并输入您的电子邮件等等，但它实际上并没有给用户任何

1444
02:31:30,479 --> 02:31:33,912
您在此处看到的说明我忘记了我们给用户的密码

1445
02:31:33,912 --> 02:31:38,080
关于他或她必须做什么的一些说明，但在登录页面中我们不是这样

1446
02:31:38,080 --> 02:31:42,400
让我们继续解决这个问题，只需在屏幕顶部添加一个文本，我就是

1447
02:31:42,400 --> 02:31:46,479
要将我之前拥有的文本粘贴到这个的孩子中

1448
02:31:46,479 --> 02:31:50,720
专栏，我们只是说请登录您的帐户等等等等

1449
02:31:50,720 --> 02:31:54,799
你现在会看到出现在这里只是让它在我的

1450
02:31:54,799 --> 02:31:58,551
意见和

1451
02:31:58,551 --> 02:32:03,831
我们现在已经修复了这个问题并从登录视图转到我们的

1452
02:32:03,831 --> 02:32:08,400
忘记密码我们已经在此处添加了密码，如您所见，此元素

1453
02:32:08,400 --> 02:32:10,959
在屏幕底部，这个标题已经被处理了，我们不必做

1454
02:32:10,959 --> 02:32:15,191
有什么特别的，现在让我们去

1455
02:32:15,191 --> 02:32:20,000
如您所见，我们的注册视图是否破坏了注册视图

1456
02:32:20,000 --> 02:32:24,159
已注册但我可以看到该按钮目前无法正常工作

1457
02:32:24,159 --> 02:32:29,439
让我们看看我们破坏了什么事件应该注册好

1458
02:32:29,439 --> 02:32:34,231
在我们的块外事件应该注册我可以看到我们

1459
02:32:34,231 --> 02:32:37,759
甚至还没有处理过事件应该注册所以

1460
02:32:37,759 --> 02:32:40,799
那就是我们现在绝对需要这样做

1461
02:32:40,799 --> 02:32:45,191
所以让我们离开街区，嗯

1462
02:32:45,191 --> 02:32:51,119
看看处理我们的，我现在要删除这个标题

1463
02:32:51,119 --> 02:32:55,279
因为这不是我们现在正在做的，所以让我们去我们的外街区

1464
02:32:55,279 --> 02:33:00,319
我可能会实际添加，所以嗯

1465
02:33:00,319 --> 02:33:04,000
作为标题，以便清楚

1466
02:33:04,000 --> 02:33:09,759
我们现在正在做什么，好吧，让我们去我们的身份验证块说吧

1467
02:33:09,759 --> 02:33:14,959
这个事件，让我们说事件并发出

1468
02:33:14,959 --> 02:33:19,680
就像那样，我们在这里做的是说

1469
02:33:19,680 --> 02:33:25,119
我们现在发出恒定的关闭状态注册

1470
02:33:25,119 --> 02:33:29,592
好的，没有例外，没有加载那么假，就像那样

1471
02:33:29,592 --> 02:33:34,000
好的，这里有一个逗号以使格式正常工作，所以现在让我们按

1472
02:33:34,000 --> 02:33:37,592
热重启，因为记住你正在改变你的身份验证块

1473
02:33:37,592 --> 02:33:42,720
在你的主 dart 文件中提供给你的整个应用程序，所以

1474
02:33:42,720 --> 02:33:47,360
主要飞镖在这里所以你可以在这里看到它是

1475
02:33:47,360 --> 02:33:51,831
基本上创建关闭块的块提供程序，所以如果你改变

1476
02:33:51,831 --> 02:33:54,799
在你的块外的任何东西你实际上可能需要做一个热重启好吧

1477
02:33:54,799 --> 02:33:58,799
让这些更改对整个应用程序的应用程序生效，所以不

1478
02:33:58,799 --> 02:34:02,551
注册但按下它进入注册视图好的

1479
02:34:02,551 --> 02:34:06,639
所以我们必须在这里处理的下一点是添加一些填充

1480
02:34:06,639 --> 02:34:10,720
我们的注册视图，您可以在这里看到我们的注册视图

1481
02:34:10,720 --> 02:34:13,279
目前看起来像这样我们有注册按钮并且已经

1482
02:34:13,279 --> 02:34:17,912
注册按钮按钮就在这里，但我们周围没有任何填充

1483
02:34:17,912 --> 02:34:20,799
注册视图，让我们继续处理，所以我要去

1484
02:34:20,799 --> 02:34:23,680
在这里注册视图和

1485
02:34:23,680 --> 02:34:27,912
让我们继续并包装这个专栏

1486
02:34:27,912 --> 02:34:31,191
此刻在这里，只需说用填充将其包装为标题

1487
02:34:31,191 --> 02:34:34,720
屏幕底部说我们要添加 16 的填充。所以

1488
02:34:34,720 --> 02:34:39,040
您现在可以看到我们在其中有一些填充，很快就像在登录中一样

1489
02:34:39,040 --> 02:34:42,319
视图我们将在寄存器视图的顶部添加一些文本，所以我们需要什么

1490
02:34:42,319 --> 02:34:46,720
要做的只是确保删除他们在此列中的文本是

1491
02:34:46,720 --> 02:34:50,959
实际上轻拍它，它基本上粘在柱子的左侧

1492
02:34:50,959 --> 02:34:54,720
因为默认情况下，您放置在列中的所有组件都是

1493
02:34:54,720 --> 02:35:00,551
垂直对齐，对不起，它们在主轴上水平对齐

1494
02:35:00,551 --> 02:35:03,592
你的你的

1495
02:35:03,592 --> 02:35:07,592
专栏所以如果你就是我的意思如果专栏我的意思是

1496
02:35:07,592 --> 02:35:12,959
列正在扩展到整个空间 uh real state 然后所有

1497
02:35:12,959 --> 02:35:16,479
您放置在列中的组件它们是水平对齐的

1498
02:35:16,479 --> 02:35:20,400
在列内，所以这实际上是一种更好的方法

1499
02:35:20,400 --> 02:35:24,319
这么说，我们需要在这里做什么，让我们去里面说呃

1500
02:35:24,319 --> 02:35:27,511
正如您在底部屏幕的标题中看到的那样，我们将要说的列

1501
02:35:27,511 --> 02:35:31,119
交叉轴对齐我们将说交叉轴对齐

1502
02:35:31,119 --> 02:35:35,511
如果我保存它并返回到您在其中看到的寄存器查看器，则开始

1503
02:35:35,511 --> 02:35:40,720
这里基本上就是这样，然后我们要做的是嗯

1504
02:35:40,720 --> 02:35:46,959
是为我们的专栏添加一个标题，所以我之前已经添加了，所以让我

1505
02:35:46,959 --> 02:35:50,871
这么说吧

1506
02:35:50,871 --> 02:35:55,439
我要为注册视图中的第一项添加一个小标题，所以

1507
02:35:55,439 --> 02:35:59,592
看起来像这样，但我们现在也已经完成了，我的意思是我们想要我们的文本

1508
02:35:59,592 --> 02:36:02,479
字段左对齐，这就是我们添加此交叉访问对齐的原因，但是

1509
02:36:02,479 --> 02:36:06,159
我们在这里有点搞砸了按钮的对齐方式，所以我们需要善良

1510
02:36:06,159 --> 02:36:11,912
将它们包裹在中心内，所以我们能做的就是在你看到我们的内部

1511
02:36:11,912 --> 02:36:16,231
这里有两个元素，但我们不想将它们都包装在自己的

1512
02:36:16,231 --> 02:36:20,319
中心，所以我们能做的就是说 wrap um this

1513
02:36:20,319 --> 02:36:24,551
列内的文本按钮，然后我们也放置其他文本按钮

1514
02:36:24,551 --> 02:36:31,279
在此处的列内，然后我们将包装此列

1515
02:36:31,279 --> 02:36:37,040
在一个中心内，所以把这个列包起来，然后在一个中心内，就像这样

1516
02:36:37,040 --> 02:36:40,720
所以如果你现在回到我们的注册视图，我们有一个不错的小布局

1517
02:36:40,720 --> 02:36:45,191
显示在那里，所以我们已经处理了我们已经处理的问题

1518
02:36:45,191 --> 02:36:49,279
照顾我们的应用程序的标题，我们还需要做的是

1519
02:36:49,279 --> 02:36:52,639
确定当我们来到登记处查看

1520
02:36:52,639 --> 02:36:58,000
我们在这里自动关注我们的 uh 文本字段

1521
02:36:58,000 --> 02:37:03,439
因此，如果第一个文本字段和嗯，让我们进入效果内部

1522
02:37:03,439 --> 02:37:07,680
在这里自动更正之后，我们会说嗯

1523
02:37:07,680 --> 02:37:11,592
自动对焦是真的，所以当我在这里按保存时，我

1524
02:37:11,592 --> 02:37:14,799
进入注册界面可以看到键盘自动弹出

1525
02:37:14,799 --> 02:37:20,639
自动关注第一个电子邮件字段

1526
02:37:20,639 --> 02:37:25,592
好的，现在我们这里也有一个小问题，那就是

1527
02:37:25,592 --> 02:37:29,759
我们还没有修复我们的测试，你可以在这里看到

1528
02:37:29,759 --> 02:37:33,439
实现发送密码重置和模拟身份验证提供程序

1529
02:37:33,439 --> 02:37:37,511
并抛出我可以看到我要修复的标题中有拼写错误

1530
02:37:37,511 --> 02:37:40,959
马上 嗯

1531
02:37:40,959 --> 02:37:44,319
像那样我为那个道歉

1532
02:37:44,319 --> 02:37:50,159
就在这里，让我们去修复我们的测试，所以我希望你能来找我们

1533
02:37:50,159 --> 02:37:54,720
在这里测试，你会看到我们在这里有一个错误告诉我们模拟身份验证

1534
02:37:54,720 --> 02:37:58,319
提供者说我们还没有实现我们的最后一个功能

1535
02:37:58,319 --> 02:38:01,759
刚刚添加到我们的关闭提供商中，称为发送密码重置

1536
02:38:01,759 --> 02:38:06,959
所以让我们进去，问它 哎呀，问它

1537
02:38:06,959 --> 02:38:11,912
创建缺少的覆盖以及我们将为此做些什么

1538
02:38:11,912 --> 02:38:15,912
目前的练习只是我们将保留它，因为它正在实施

1539
02:38:15,912 --> 02:38:20,000
错误，我实际上鼓励你去为发送做一个实现

1540
02:38:20,000 --> 02:38:23,040
密码重置你可以做一些

1541
02:38:23,040 --> 02:38:28,799
模拟和密码重置做一些未来呃延迟它的重量和改变

1542
02:38:28,799 --> 02:38:32,319
如果您愿意，您的提供商中的某些州更欢迎您这样做，所以您

1543
02:38:32,319 --> 02:38:36,159
可以把它当作一个练习，但我们就这样离开它

1544
02:38:36,159 --> 02:38:40,159
目前，但我强烈建议您为此实际编写一些测试

1545
02:38:40,159 --> 02:38:43,680
好吧，所以我们现在已经做了很多工作

1546
02:38:43,680 --> 02:38:47,360
我们已经做了很多改组的事情，我们能做的只是

1547
02:38:47,360 --> 02:38:51,360
看看整个应用程序，看看它是什么样子的，所以我要

1548
02:38:51,360 --> 02:38:55,191
做一个热重启，我们最终在这里你可以看到我们的

1549
02:38:55,191 --> 02:39:00,231
登录屏幕工作正常，如果我们尝试使用以下用户登录

1550
02:39:00,231 --> 02:39:05,040
应用程序中不再存在，所以我可以输入任何密码并

1551
02:39:05,040 --> 02:39:09,439
说登录，我们得到更新的屏幕，说找不到用户

1552
02:39:09,439 --> 02:39:13,439
然后我实际上可以去注册那个用户文本字段是我们的自动对焦

1553
02:39:13,439 --> 02:39:17,759
固定所以 foobar 谁 barbaz

1554
02:39:17,759 --> 02:39:21,680
注册这个用户，我们可以看到我们得到了这个验证

1555
02:39:21,680 --> 02:39:26,400
电子邮件我们向您发送了电子邮件验证我们还必须尽快清理此视图

1556
02:39:26,400 --> 02:39:31,759
因为我相信这不是这个特定章节的一部分

1557
02:39:31,759 --> 02:39:36,551
那一刻我们要清理它，但我们会很快清理它

1558
02:39:36,551 --> 02:39:42,319
嗯，所以现在应该已经发送了验证电子邮件，所以如果我去我的邮件

1559
02:39:42,319 --> 02:39:46,720
应用程序我会看看我是否可以以某种方式提出它

1560
02:39:46,720 --> 02:39:50,319
我理解了

1561
02:39:50,319 --> 02:39:56,639
我收到来自 firebase 的任何电子邮件了吗？

1562
02:39:56,639 --> 02:40:01,759
可以把它带到屏幕上，你可以看到上面有一个链接，所以

1563
02:40:01,759 --> 02:40:05,680
我要点击这个链接，然后这将验证我的用户

1564
02:40:05,680 --> 02:40:10,720
如果我们然后去我们的火力基地所以如果我说控制台火力基地如果

1565
02:40:10,720 --> 02:40:14,479
我们现在转到应用程序的控制台，我们应该看到用户生成的

1566
02:40:14,479 --> 02:40:18,871
此处在身份验证中，以便用户就在此处并且是

1567
02:40:18,871 --> 02:40:23,912
经过验证的用户，因此我们只需按下重新启动按钮并使用该用户登录

1568
02:40:23,912 --> 02:40:27,191
所以如果我说 foo bar bas

1569
02:40:27,191 --> 02:40:30,551
登录，我们看到我们的对话框，没有注释，所以我只是要创建

1570
02:40:30,551 --> 02:40:36,231
我在这里的第一个笔记，它坐在那里思考

1571
02:40:36,231 --> 02:40:41,759
然后我要打个招呼

1572
02:40:41,759 --> 02:40:47,592
让我们再次进入控制台，进入我们的应用程序，看看

1573
02:40:47,592 --> 02:40:52,231
我们的 fire firestore 数据库，并确保实际创建了该注释

1574
02:40:52,231 --> 02:40:57,680
我可以看到它实际上是在这里创建的 hello world 使用该用户 id nvic

1575
02:40:57,680 --> 02:41:01,040
如果我进行身份验证，我可以看到 nvic 实际上是

1576
02:41:01,040 --> 02:41:05,912
确实是那个用户，所以它似乎正在工作，我们有相当多的

1577
02:41:05,912 --> 02:41:09,511
一些工作还剩下我们与

1578
02:41:09,511 --> 02:41:13,831
在我们提交之前，我们已经使用了图标应用名称等一些边距

1579
02:41:13,831 --> 02:41:16,551
它和这些是我们将在接下来的章节中处理的事情

1580
02:41:16,551 --> 02:41:19,592
但是我们已经得到了我们已经基本上向前迈进了一点

1581
02:41:19,592 --> 02:41:23,279
所以我们快到了，但不是真的在那里

1582
02:41:23,279 --> 02:41:27,360
但别担心，我们很快就会解决这些问题，让我做一些屏幕

1583
02:41:27,360 --> 02:41:32,080
在这里重新洗牌，让我们看看我们的工作提交

1584
02:41:32,080 --> 02:41:35,360
是我们通常在每章结束时做的事情，所以

1585
02:41:35,360 --> 02:41:39,360
我要最小化 scr cpy 增加 Visual Studio 代码的大小，所以你

1586
02:41:39,360 --> 02:41:45,191
更好地查看我的屏幕让我们进入终端并看看这个

1587
02:41:45,191 --> 02:41:51,592
在这里 shell 并说 git status 是的，我们有

1588
02:41:51,592 --> 02:41:55,191
一些正在进行的文件是新的，这是我们忘记密码的视图

1589
02:41:55,191 --> 02:41:59,040
这是新的，密码重置电子邮件发送的对话框是新的

1590
02:41:59,040 --> 02:42:04,000
这里有很多文件已经更新所以我们就说 git

1591
02:42:04,000 --> 02:42:08,799
add all 和 git commit step 27 好吧

1592
02:42:08,799 --> 02:42:14,231
命中状态，我们也必须推动我们的改变

1593
02:42:14,231 --> 02:42:18,231
因此，在我们完成之后，让我们在每个结束时也标记为传统

1594
02:42:18,231 --> 02:42:23,279
章节我们将标记它并推送我们的标签

1595
02:42:23,279 --> 02:42:27,119
之后我们可以说 git status 你可以看到没有什么可做的

1596
02:42:27,119 --> 02:42:31,592
在这里承诺，没有什么可以在每个结束时再次作为传统推动

1597
02:42:31,592 --> 02:42:35,279
本章我们讨论下一章需要讨论的内容

1598
02:42:35,279 --> 02:42:38,720
所以这是目前我们一直在与

1599
02:42:38,720 --> 02:42:43,119
应用程序代码本身，但我们还没有真正做任何事情来使它准备好

1600
02:42:43,119 --> 02:42:48,231
真的是为了发布应用商店和游戏商店谷歌游戏商店和那里

1601
02:42:48,231 --> 02:42:52,080
是我们必须做的很多事情，例如我们必须准备的屏幕截图

1602
02:42:52,080 --> 02:42:54,551
对于每个相应的商店，我们也有

1603
02:42:54,551 --> 02:42:57,759
准备应用程序图标应用程序名称等

1604
02:42:57,759 --> 02:43:00,799
有很多工作要做，这就是我们要注意的事情

1605
02:43:00,799 --> 02:43:05,511
在下一章，所以我会在那里见到你你好，欢迎来到第 45 章

1606
02:43:05,511 --> 02:43:09,511
在前几章中我们已经谈了很多关于我们的

1607
02:43:09,511 --> 02:43:13,191
authentication 和 authentication block 然后在上一章我们做了

1608
02:43:13,191 --> 02:43:16,400
我们的应用程序更准备好在应用商店中发布，并且

1609
02:43:16,400 --> 02:43:20,720
谷歌游戏商店，但我们还有很多东西，这些就像一些

1610
02:43:20,720 --> 02:43:24,639
我们将在我们的应用程序上进行最后的润色

1611
02:43:24,639 --> 02:43:27,040
在各自的应用商店发布

1612
02:43:27,040 --> 02:43:30,720
嗯，我们将在本章中具体做些什么，你可以在

1613
02:43:30,720 --> 02:43:33,592
屏幕底部的标题我们将处理我们的应用程序图标

1614
02:43:33,592 --> 02:43:37,279
和应用程序名称，我将带您完成非常有效的过程

1615
02:43:37,279 --> 02:43:41,912
很好，一直为我工作，所以我要告诉你如何抓住

1616
02:43:41,912 --> 02:43:46,551
免费图标将它们带入您的应用程序，并且还可以

1617
02:43:46,551 --> 02:43:51,119
就像自动化该过程一样，您不必手动生成图标

1618
02:43:51,119 --> 02:43:55,831
所以首先我们必须谈谈到目前为止我们一直在讨论的应用程序图标

1619
02:43:55,831 --> 02:43:59,759
有点像运行我们的应用程序，看看是什么

1620
02:43:59,759 --> 02:44:03,831
在应用程序本身内部，我们还没有真正拥有我们还没有时间真正

1621
02:44:03,831 --> 02:44:08,400
看看什么是应用程序如何表示应用程序

1622
02:44:08,400 --> 02:44:12,720
用户对操作系统的看法，所以

1623
02:44:12,720 --> 02:44:16,720
如果我在屏幕中间调出 scr cpy

1624
02:44:16,720 --> 02:44:20,080
然后我带来了这个应用程序和嗯

1625
02:44:20,080 --> 02:44:23,680
例如，这个 android 手机中的所有应用程序都是我们的

1626
02:44:23,680 --> 02:44:29,040
应用程序就在这里所以如果我改变屏幕和

1627
02:44:29,040 --> 02:44:32,639
在这里一点点让你看得更清楚，这样你就可以看到我们的

1628
02:44:32,639 --> 02:44:36,639
笔记应用程序就在这里，它有一个默认图标，所以每个应用程序

1629
02:44:36,639 --> 02:44:40,959
在 android 和 ios 上，几乎每个操作系统都有自己的

1630
02:44:40,959 --> 02:44:46,479
图标，因此颤振允许您或颤振为所有

1631
02:44:46,479 --> 02:44:50,080
你用颤振创建的应用程序创建所以你有一个默认值

1632
02:44:50,080 --> 02:44:52,871
为您的应用程序显示的图标，但

1633
02:44:52,871 --> 02:44:56,720
这只是我提到的默认颤振图标，所以我们需要有我们的

1634
02:44:56,720 --> 02:45:00,400
操作系统可以向用户显示的自己的图标

1635
02:45:00,400 --> 02:45:04,639
为了在所有其他应用程序中代表我们的应用程序

1636
02:45:04,639 --> 02:45:08,231
安装在该目标操作系统上

1637
02:45:08,231 --> 02:45:12,479
所以这是图标，然后我们要讨论的是什么飞溅

1638
02:45:12,479 --> 02:45:16,479
屏幕是如此的闪屏是操作系统的这个小屏幕

1639
02:45:16,479 --> 02:45:22,080
显示在屏幕上，一旦您打开应用程序，我就想知道

1640
02:45:22,080 --> 02:45:24,959
如果这里有任何应用程序我可以

1641
02:45:24,959 --> 02:45:28,959
打开以便我们看到启动画面，所以让我们例如去这里

1642
02:45:28,959 --> 02:45:34,231
时钟应用程序，正如我在这里看到的，让我再把它调出来，所以如果我

1643
02:45:34,231 --> 02:45:40,231
去这里杀死时钟应用程序，然后我去时钟

1644
02:45:40,231 --> 02:45:43,511
再次应用你可以看到有一个黑屏只是

1645
02:45:43,511 --> 02:45:47,759
立即显示，然后消失，即启动画面和

1646
02:45:47,759 --> 02:45:50,871
或者在这种情况下，您实际上可以看到它缺少平面屏幕，因为

1647
02:45:50,871 --> 02:45:54,319
时钟应用程序显然没有启动画面，让我们开始吧

1648
02:45:54,319 --> 02:45:57,360
计算器，这个应用程序打开得如此之快

1649
02:45:57,360 --> 02:46:00,720
可能甚至没有启动画面，但本质上是他的闪光灯

1650
02:46:00,720 --> 02:46:04,959
屏幕是一个屏幕，正如其名称所指示的那样，它会显示给用户

1651
02:46:04,959 --> 02:46:11,831
只是非常快，而颤振正在加载其二进制文件以显示到

1652
02:46:11,831 --> 02:46:17,360
嗯，用户，所以颤振有两个阶段实际显示启动画面

1653
02:46:17,360 --> 02:46:21,511
一种是操作系统正在加载应用程序二进制文件时，并且

1654
02:46:21,511 --> 02:46:26,231
然后还有另一个阶段，当颤振引擎被加载时

1655
02:46:26,231 --> 02:46:30,639
基本上开始你的申请流程，但我不会

1656
02:46:30,639 --> 02:46:33,439
对此进行太多详细说明，但只知道防溅轴承是一个屏幕

1657
02:46:33,439 --> 02:46:37,680
操作系统在加载应用程序时显示用户

1658
02:46:37,680 --> 02:46:42,159
因此，例如，如果您的应用程序正在加载或正在显示

1659
02:46:42,159 --> 02:46:47,360
第一次使用硬件很旧的安卓手机版本

1660
02:46:47,360 --> 02:46:50,479
因为那里有成千上万的安卓设备

1661
02:46:50,479 --> 02:46:54,720
那么操作系统实际上可能需要很长时间才能加载您的

1662
02:46:54,720 --> 02:46:59,191
二进制，那个时候它会，在那个时候它会显示一个飞溅

1663
02:46:59,191 --> 02:47:05,119
屏幕，所以我们将尽快修复应用程序图标和启动屏幕

1664
02:47:05,119 --> 02:47:08,551
所以现在让我们谈谈在哪里可以找到一些图标，如果你是

1665
02:47:08,551 --> 02:47:11,759
设计师，如果您对 figma 或草图感到满意，那么您

1666
02:47:11,759 --> 02:47:16,000
可以去设计自己的应用程序图标更欢迎你这样做我可以

1667
02:47:16,000 --> 02:47:21,040
随意使用 figma 我不是草图用户，但我可以设计我喜欢的图标

1668
02:47:21,040 --> 02:47:24,159
figma 但这不是我们在本章中要做的，我们实际上要去做

1669
02:47:24,159 --> 02:47:28,799
去这个网站，因为我在这里向你展示 stockio.com 并获取一些免费的

1670
02:47:28,799 --> 02:47:32,799
图标，所以如果我在这里最小化 scrcpy 并调出

1671
02:47:32,799 --> 02:47:38,479
Safari 窗口让我们说股票 io.com 你看不到正确的

1672
02:47:38,479 --> 02:47:43,831
现在我会像那样把它带到屏幕上，你可以看到你可以听到

1673
02:47:43,831 --> 02:47:47,360
去例如图标，然后有一个搜索功能，你

1674
02:47:47,360 --> 02:47:51,680
可以搜索你感兴趣的图标类型这些图标都没有

1675
02:47:51,680 --> 02:47:56,639
有时真的免费，他们实际上需要付费，但你可以

1676
02:47:56,639 --> 02:48:02,551
还可以找到可以在应用程序中使用的便宜甚至免费的图标，但是

1677
02:48:02,551 --> 02:48:06,799
以作者要求您的方式归因于作者的作品，这一点非常重要

1678
02:48:06,799 --> 02:48:11,759
这样做，我很快就会谈到这一点，所以对于我们的应用程序，我们实际上是

1679
02:48:11,759 --> 02:48:15,759
要抓住这个特殊的图标，所以它被称为股票 io 我们要去

1680
02:48:15,759 --> 02:48:18,479
在这里释放图标

1681
02:48:18,479 --> 02:48:23,040
并说便笺文件图标好的，这就是图标

1682
02:48:23,040 --> 02:48:27,511
我们将用于我们的应用程序，你可以继续做同样的事情

1683
02:48:27,511 --> 02:48:32,159
我的意思不是应用商店会喜欢谷歌游戏商店和应用程序

1684
02:48:32,159 --> 02:48:35,439
不会让我们像他们不会阻止你释放你的

1685
02:48:35,439 --> 02:48:40,871
应用程序只是因为您的图标与其他人的应用程序图标相同

1686
02:48:40,871 --> 02:48:44,231
所以他们基本上不会检查，除非你的

1687
02:48:44,231 --> 02:48:47,759
图标代表一个非常知名的应用程序，例如，如果您

1688
02:48:47,759 --> 02:48:50,551
将 facebook 图标添加到您的应用程序中，然后将这些人添加到您的应用程序中

1689
02:48:50,551 --> 02:48:53,759
审查您的应用程序会立即知道并识别它

1690
02:48:53,759 --> 02:48:57,119
然后他们会标记它，也许会拒绝你的申请，但是这个

1691
02:48:57,119 --> 02:49:01,511
是一个如此通用的图标，我认为基本上没有人会

1692
02:49:01,511 --> 02:49:06,551
如果其他人已经在其中一个中使用过它，有什么要说的

1693
02:49:06,551 --> 02:49:10,159
在那些可用的成百上千的应用程序

1694
02:49:10,159 --> 02:49:16,959
各自的商店，所以我们需要在这里做的，说免费下载为 svg

1695
02:49:16,959 --> 02:49:20,159
所以我就这么做了，让我们进去看看

1696
02:49:20,159 --> 02:49:24,159
看看那个对不起

1697
02:49:24,159 --> 02:49:28,159
所以我要把它带到这里，你可以看到它是一个 svg

1698
02:49:28,159 --> 02:49:32,551
现在下载到我的电脑上，所以我要去

1699
02:49:32,551 --> 02:49:36,551
现在基本上谈谈归因

1700
02:49:36,551 --> 02:49:40,799
因此您可以在此处提供的信息中看到

1701
02:49:40,799 --> 02:49:44,551
屏幕我将增加尺寸，以便您看得更清楚，它说免费

1702
02:49:44,551 --> 02:49:48,871
个人和商业用途，这意味着即使您的应用程序是免费的

1703
02:49:48,871 --> 02:49:52,319
或者在这个颤振课程中为此付费，我们是

1704
02:49:52,319 --> 02:49:54,959
当然，我们会以免费应用程序的形式发布我们的应用程序，但即使

1705
02:49:54,959 --> 02:49:58,959
如果是用于商业用途，您可以使用此图标，但上面写着

1706
02:49:58,959 --> 02:50:04,080
归因于股票io.com，所以如果我们是一个好人，我们应该怎么做

1707
02:50:04,080 --> 02:50:09,279
互联网土地的公民然后当您基本上将您的应用程序上传到

1708
02:50:09,279 --> 02:50:13,592
应用商店和谷歌游戏商店，我稍后会告诉你，我们实际上会

1709
02:50:13,592 --> 02:50:19,511
写一个小句子并归因于 um stock io.com 网站甚至

1710
02:50:19,511 --> 02:50:24,551
也许说图标是由 stockion.com 提供的，甚至可以放置整个

1711
02:50:24,551 --> 02:50:28,479
那个图标的网址嗯

1712
02:50:28,479 --> 02:50:32,479
当我们将其提交到相应的应用商店时，在我们的应用描述中

1713
02:50:32,479 --> 02:50:36,159
所以要非常小心，因为实际上有些艺术家是

1714
02:50:36,159 --> 02:50:40,319
为您创建这些图标，即使您

1715
02:50:40,319 --> 02:50:44,159
看到它是免费的，你可能会试图说是的，我忘了我只是

1716
02:50:44,159 --> 02:50:46,871
会把它放在那里我不会归因于作者，但如果你认为

1717
02:50:46,871 --> 02:50:50,159
关于它，这只是你要写在你的

1718
02:50:50,159 --> 02:50:54,231
应用程序描述它是值得的，因为实际上有人坐在那里

1719
02:50:54,231 --> 02:50:57,119
花了很多时间设计这个图标，所以它只是

1720
02:50:57,119 --> 02:51:00,159
良好的业力，以确保我们遵循这些

1721
02:51:00,159 --> 02:51:03,279
在您下载您的网站的网站中提供的归因应用程序

1722
02:51:03,279 --> 02:51:08,000
图标好，所以现在我们有了这个 svg 图标，所以如果我

1723
02:51:08,000 --> 02:51:13,191
把我的取景器带到这里，这样我们这里只有一个文件，但你很快就会看到什么时候

1724
02:51:13,191 --> 02:51:16,720
我们将我们的应用程序提交到我们拥有的应用商店和游戏商店谷歌游戏商店

1725
02:51:16,720 --> 02:51:20,871
可以提供各种图标大小

1726
02:51:20,871 --> 02:51:24,720
不是你必须向应用商店提供各种图标大小，而是

1727
02:51:24,720 --> 02:51:28,400
当你构建你的应用程序时，你实际上必须提供这些不同的

1728
02:51:28,400 --> 02:51:33,360
操作系统的图标大小，例如，如果用户正在加载您的

1729
02:51:33,360 --> 02:51:38,400
在没有视网膜显示器的非常旧的 iphone 上的应用程序，我非常怀疑

1730
02:51:38,400 --> 02:51:42,479
现在几乎所有的ios设备都有视网膜显示器

1731
02:51:42,479 --> 02:51:47,040
然后那个用户用那个电话那个电话特别不能显示

1732
02:51:47,040 --> 02:51:51,040
高分辨率图像，因此它需要抓取特定的

1733
02:51:51,040 --> 02:51:54,159
应用程序图标分辨率但是，如果您运行

1734
02:51:54,159 --> 02:52:00,231
例如在 iphone 13 pro max 上的应用程序，那么该设备实际上可以

1735
02:52:00,231 --> 02:52:05,592
显示高分辨率图像，因此我们必须使用这个 svg 文件创建

1736
02:52:05,592 --> 02:52:10,000
并将其切片，以便我们有各种图标大小来提供各种

1737
02:52:10,000 --> 02:52:12,831
操作系统和设备配置

1738
02:52:12,831 --> 02:52:16,400
所以这就是我们要做的，但我们不会用手去做，我们是

1739
02:52:16,400 --> 02:52:21,040
将在这里使用一个名为 app icon dot co 的工具，所以让我们进入 app icon dot

1740
02:52:21,040 --> 02:52:24,159
co，这是一个很棒的免费工具，你

1741
02:52:24,159 --> 02:52:31,831
可以使用，你基本上可以把你的svg文件拖到这个

1742
02:52:31,831 --> 02:52:36,871
目标，它会为你生成你的图标，所以让我们继续做吧

1743
02:52:36,871 --> 02:52:40,551
我要像这样把这个svg拖到这里

1744
02:52:40,551 --> 02:52:46,000
好的，你可以看到我可以为目的地生成图标

1745
02:52:46,000 --> 02:52:49,759
我对我们的应用程序感兴趣，目前不支持 watch os

1746
02:52:49,759 --> 02:52:53,439
而且我们不是 mac os 应用程序，所以目前我们只是说 iphone 和

1747
02:52:53,439 --> 02:52:59,759
ipad 和 android 好，所以让我们生成这些图标和

1748
02:52:59,759 --> 02:53:03,912
如果我进入这里，我可以看到这里生成了一个 zip 文件，所以让我们

1749
02:53:03,912 --> 02:53:07,831
只需解压缩此文件并查看它，您就会看到有一个文件夹

1750
02:53:07,831 --> 02:53:13,511
称为应用程序图标，因此它具有 android 应用程序商店资产等

1751
02:53:13,511 --> 02:53:16,479
这里好

1752
02:53:16,479 --> 02:53:19,592
所以现在我们在这里生成了这些图标作为标题表明我们

1753
02:53:19,592 --> 02:53:22,871
必须将它们添加到我们的应用程序中，所以我们该怎么做？

1754
02:53:22,871 --> 02:53:26,231
喜欢手动添加这些没有，但有

1755
02:53:26,231 --> 02:53:30,479
实际上是更好的方法，所以我现在就向你解释

1756
02:53:30,479 --> 02:53:35,040
有一个名为 flutter launcher icons 的包可以处理

1757
02:53:35,040 --> 02:53:39,592
这是给你的，所以你不必手动将这些图标放在你的

1758
02:53:39,592 --> 02:53:42,871
应用程序二进制文件或在您的应用程序源代码中，例如

1759
02:53:42,871 --> 02:53:47,759
visual studio code 或 android studio 它可以为你做到这一点，所以让我们去酒吧吧

1760
02:53:47,759 --> 02:53:50,639
dev 我在这里摆脱了这个对话框

1761
02:53:50,639 --> 02:53:56,159
好吧，让我们搜索颤振启动器图标好吧

1762
02:53:56,159 --> 02:53:59,912
我们在这里找到了它，你可以看到它是由颤振提供的

1763
02:53:59,912 --> 02:54:04,871
社区就在那里，有关于你实际上应该如何做的信息

1764
02:54:04,871 --> 02:54:08,000
配置它，我们很快就会到达那里

1765
02:54:08,000 --> 02:54:12,000
呃，但是我们首先需要做的

1766
02:54:12,000 --> 02:54:15,831
呃是把这个带入

1767
02:54:15,831 --> 02:54:20,799
我们的应用程序所以这个呃插件

1768
02:54:20,799 --> 02:54:23,831
所以让我们在这里安装

1769
02:54:23,831 --> 02:54:28,639
你会在这里看到它说 dart pub 和我们想要做的颤动

1770
02:54:28,639 --> 02:54:33,439
这个基本上是颤振发射器图标上的父亲酒吧好的，所以让我们继续吧

1771
02:54:33,439 --> 02:54:37,511
我们的应用程序，所以我将把我们的应用程序带到这里

1772
02:54:37,511 --> 02:54:40,799
让我们去终端，让我稍微提一下

1773
02:54:40,799 --> 02:54:46,000
让我们把这个命令粘贴到这里 um boof

1774
02:54:46,000 --> 02:54:49,511
好的，这只是将颤振启动器图标添加到我们的

1775
02:54:49,511 --> 02:54:52,551
应用

1776
02:54:52,551 --> 02:54:57,040
这就是它的添加，所以如果你现在去 pop spec yaml 看看

1777
02:54:57,040 --> 02:55:00,231
在我们的 yaml 文件中，您可以看到有这个颤振启动器图标

1778
02:55:00,231 --> 02:55:03,912
就在这里添加好了，那么我们需要做的是创建某种

1779
02:55:03,912 --> 02:55:08,799
这个插件的配置文件，并了解它应该如何生成我们的

1780
02:55:08,799 --> 02:55:11,912
我们的图标你可以看看我们是否回到这里

1781
02:55:11,912 --> 02:55:14,720
如果您阅读

1782
02:55:14,720 --> 02:55:18,159
自述文件它实际上要求您实际生成一个名为

1783
02:55:18,159 --> 02:55:22,080
颤振启动器图标 yaml 这正是我们在这里要做的

1784
02:55:22,080 --> 02:55:26,000
所以让我们转到我们应用程序的根文件夹，如果我

1785
02:55:26,000 --> 02:55:29,360
折叠此处的每个文件夹，因此请确保您

1786
02:55:29,360 --> 02:55:35,119
在您的应用程序的根文件夹中，然后我会说新文件

1787
02:55:35,119 --> 02:55:38,799
让我们添加颤振启动器图标好吧

1788
02:55:38,799 --> 02:55:44,479
在这里他们基本上说添加这个资产图标等等等等

1789
02:55:44,479 --> 02:55:50,159
让我把这个带到这里照原样复制这些信息

1790
02:55:50,159 --> 02:55:55,439
在那里声明并放置在那里，但我们还必须添加一个新的嗯

1791
02:55:55,439 --> 02:56:01,680
基本上这里的键叫做remove alpha ios，我们必须把它设置为

1792
02:56:01,680 --> 02:56:06,231
是的，这是一个关键，我不知道它是否实际记录在案，所以让我们

1793
02:56:06,231 --> 02:56:11,360
看看这里的文档让我们看看版本分数更改日志

1794
02:56:11,360 --> 02:56:16,231
不幸的是，安装它并没有真正记录下来

1795
02:56:16,231 --> 02:56:20,231
但是这个应用程序的 git 存储库中可能有

1796
02:56:20,231 --> 02:56:24,231
可能有一些很好的文档可以诚实地告诉你更改日志

1797
02:56:24,231 --> 02:56:29,439
例子嗯味道里面可能有什么吗

1798
02:56:29,439 --> 02:56:33,279
不幸的是，没有生产，但我会解释一下

1799
02:56:33,279 --> 02:56:37,439
这个键基本上做了什么它做的是一个ios

1800
02:56:37,439 --> 02:56:42,319
作为一个操作系统，它不允许开启 Alpha 通道透明通道

1801
02:56:42,319 --> 02:56:46,799
它的应用程序图标上的图标，所以你需要做的是摆脱

1802
02:56:46,799 --> 02:56:50,400
所以当我们生成我们的图标时，我们会告诉这个插件，嘿，当

1803
02:56:50,400 --> 02:56:55,191
您正在生成 ios 图标删除 alpha 通道并为您的设计师

1804
02:56:55,191 --> 02:56:58,639
在那里你已经知道什么阿尔法通道是好的

1805
02:56:58,639 --> 02:57:02,871
所以它只是一个透明层，所以我们现在需要做的是

1806
02:57:02,871 --> 02:57:09,831
获取我们的图标下载的图标并将其放置在 assets icon icon.png 中

1807
02:57:09,831 --> 02:57:13,511
好的，正如您在此处看到的，让我们看看您是否有资产文件夹，我们

1808
02:57:13,511 --> 02:57:18,720
别这样，让我们​​继续说新文件哎呀一个新文件夹

1809
02:57:18,720 --> 02:57:23,191
我会说资产，然后我们会称它为图标，好吧

1810
02:57:23,191 --> 02:57:27,439
就这样，然后让我们带上那个应用程序

1811
02:57:27,439 --> 02:57:32,159
存储就在此处的 png 文件，然后将其放在我们创建的文件夹中

1812
02:57:32,159 --> 02:57:35,680
刚刚创建，所以它是一个巨大的文件，没关系

1813
02:57:35,680 --> 02:57:39,439
所以现在我们已经做到了，你会想知道为什么它在哪里

1814
02:57:39,439 --> 02:57:44,319
资产图标，那是因为在这个启动器配置中，我们说过

1815
02:57:44,319 --> 02:57:49,831
图标应该在那里 你看到图标 png 所以我们现在需要做的就是重命名

1816
02:57:49,831 --> 02:57:55,279
这个文件到 icon.png 只是为了确保这个

1817
02:57:55,279 --> 02:58:02,080
包可以在 assets icon icon ph png 下找到它，因为它在这里指定好了

1818
02:58:02,080 --> 02:58:06,479
所以为了生成你的图标，你只需要运行它

1819
02:58:06,479 --> 02:58:10,400
这个命令就在这里，所以我要去终端

1820
02:58:10,400 --> 02:58:14,231
让我们看看呃终端实际上​​就在这里它是巨大的

1821
02:58:14,231 --> 02:58:19,592
嗯，让我们去这里终端，然后我要清理终端摆脱

1822
02:58:19,592 --> 02:58:25,831
左侧栏我要说颤振泵运行颤振启动器图标

1823
02:58:25,831 --> 02:58:30,000
和 main 一样

1824
02:58:30,000 --> 02:58:34,159
这将基本上完成它的工作看看嗯配置和

1825
02:58:34,159 --> 02:58:38,720
然后它将为我们生成我们的图标

1826
02:58:38,720 --> 02:58:42,871
所以为了测试这个，我们实际上需要进行一个干净的构建，这是一个

1827
02:58:42,871 --> 02:58:45,912
脖子有点痛，完全没关系，只是因为

1828
02:58:45,912 --> 02:58:49,592
我们在应用程序中改变了一些戏剧性的东西，然后我们需要

1829
02:58:49,592 --> 02:58:52,871
确保我们停止运行我们的应用程序，所以我现在可以看到这个

1830
02:58:52,871 --> 02:58:56,720
目前特定的应用程序没有在 scrcpy 中运行，所以这真的是

1831
02:58:56,720 --> 02:59:00,080
很好，您可以在此处注意这是

1832
02:59:00,080 --> 02:59:03,912
我们的应用程序现在没有我们再次启动它

1833
02:59:03,912 --> 02:59:11,119
所以让我们按照标题指示的那样做，我们要做flutter clean

1834
02:59:11,119 --> 02:59:14,959
清洁完成后，我们只会说颤动

1835
02:59:14,959 --> 02:59:19,439
pop get 以再次获取我们所有的依赖项

1836
02:59:19,439 --> 02:59:23,511
而且我可以看到您实际上看不到我在那里输入的内容，但这就是我

1837
02:59:23,511 --> 02:59:27,040
如您在此处所见，键入的 flutter pup get

1838
02:59:27,040 --> 02:59:30,871
它再次抓住了所有的依赖关系，我要做的只是

1839
02:59:30,871 --> 02:59:34,639
去这里的主要飞镖文件和

1840
02:59:34,639 --> 02:59:38,551
只需运行应用程序，但在此之前我还要

1841
02:59:38,551 --> 02:59:42,551
确保颤振选择设备选择了正确的设备，这是我的

1842
02:59:42,551 --> 02:59:46,639
android 应用程序，这是我的 android 手机，我只想说运行

1843
02:59:46,639 --> 02:59:50,871
如果您删除它，调试它实际上会有所帮助

1844
02:59:50,871 --> 02:59:54,400
你的应用程序也是如此，只是为了确保

1845
02:59:54,400 --> 02:59:59,279
应用程序已从手机中完全删除，因此现在完全消失了

1846
02:59:59,279 --> 03:00:04,159
实际上我们要做的就是现在等待这个 gradle 任务

1847
03:00:04,159 --> 03:00:09,279
完成它的工作，所以我就让它做它的工作，嗯

1848
03:00:09,279 --> 03:00:12,159
我们就等着吧

1849
03:00:12,159 --> 03:00:17,119
现在您可以看到我们的应用程序在 uh scr cpy 上运行，这是一个实际的

1850
03:00:17,119 --> 03:00:22,720
真正的手机在这里，所以如果我现在回到这里并调出所有已安装的应用程序

1851
03:00:22,720 --> 03:00:27,191
在此设备上，您可以看到我们正在运行此应用程序我的笔记

1852
03:00:27,191 --> 03:00:31,040
它在这里有这个小图标，这是我的另一个应用程序

1853
03:00:31,040 --> 03:00:35,040
从以前开始，所以我可以安全地卸载它，我们就去我们的

1854
03:00:35,040 --> 03:00:39,680
应用程序在这里你可以看到它和我们上次留下的一样，但重要的是

1855
03:00:39,680 --> 03:00:44,319
问题是这里基本上提供了一个新图标

1856
03:00:44,319 --> 03:00:47,119
所以这真的很好，现在我们已经测试过了

1857
03:00:47,119 --> 03:00:51,119
在android上所以android的测试实际上已经完成所以你不需要这个

1858
03:00:51,119 --> 03:00:53,511
屏幕底部的标题我应该提出来的

1859
03:00:53,511 --> 03:00:57,831
稍早一点，我们需要做的只是在 ios 上运行我们的应用程序

1860
03:00:57,831 --> 03:01:02,720
同样，我将停止在 android 上执行应用程序

1861
03:01:02,720 --> 03:01:07,511
我只想说颤振选择设备和 iphone 13 pro 这是一个

1862
03:01:07,511 --> 03:01:12,551
模拟器，然后我只想说运行，这也可能需要

1863
03:01:12,551 --> 03:01:17,279
一段时间，因为通常我在 android 手机上运行我的应用程序

1864
03:01:17,279 --> 03:01:22,871
你见过 scrcpy 我通常不使用 ios 模拟器或设备运行

1865
03:01:22,871 --> 03:01:28,080
当我使用颤振进行开发时，但这始终是一个好习惯

1866
03:01:28,080 --> 03:01:34,159
所以现在它正在构建 xcode，让我们等待它完成

1867
03:01:34,159 --> 03:01:38,639
好的，现在我们可以看到我们的应用程序也在 ios 上运行，所以

1868
03:01:38,639 --> 03:01:42,080
我们在这里可以做的只是将应用程序发送到后台，然后你

1869
03:01:42,080 --> 03:01:48,080
可以看到我们在这里有我的笔记应用程序和图标

1870
03:01:48,080 --> 03:01:53,592
我们基本上是为我们的应用程序创建的，所以它似乎也能正常工作

1871
03:01:53,592 --> 03:01:57,279
我们现在需要讨论的是我们的应用名称，正如您在

1872
03:01:57,279 --> 03:01:59,592
屏幕底部的标题，因为我们需要更新应用名称

1873
03:01:59,592 --> 03:02:04,231
它不像现在那么好，现在它只是在说我的笔记

1874
03:02:04,231 --> 03:02:10,080
小写和大写 m 和一个单词，所以它不是应该的

1875
03:02:10,080 --> 03:02:13,511
让我们继续解决这个问题，这样做的方法是你必须这样做

1876
03:02:13,511 --> 03:02:16,871
两个地方，一个用于ios，一个用于android，所以我们要处理

1877
03:02:16,871 --> 03:02:21,119
首先是 ios，所以在 Visual Studio 代码中，我将跳转到一个名为 info 的文件

1878
03:02:21,119 --> 03:02:26,871
密钥列表，这是信息 p 列表基本上就像一个 ios 应用程序和

1879
03:02:26,871 --> 03:02:30,319
一种配置位置，您可以为其配置一些东西

1880
03:02:30,319 --> 03:02:36,319
应用程序，如权限等，如果你去这个 uh 文件 ios runner slash

1881
03:02:36,319 --> 03:02:40,231
info p list 所以让我们进去，然后这里有一个名为 core 的键

1882
03:02:40,231 --> 03:02:45,191
基础包名称所以让我们看看你是否能找到一个包名称

1883
03:02:45,191 --> 03:02:49,279
cf bundle name 此刻它在这里显示了我的笔记，所以我们需要解决这个问题

1884
03:02:49,279 --> 03:02:54,479
基本上就是这样称呼我的笔记

1885
03:02:54,479 --> 03:02:57,040
好的，让我们看看有没有其他地方

1886
03:02:57,040 --> 03:03:01,191
在这里我们还可以看到有一个捆绑显示名称，我们也可以

1887
03:03:01,191 --> 03:03:05,279
必须修复所以让我们称之为我的

1888
03:03:05,279 --> 03:03:08,159
这个，老实说，我们可能不会

1889
03:03:08,159 --> 03:03:12,159
实际上必须更改捆绑名称我会说也许更改捆绑

1890
03:03:12,159 --> 03:03:16,551
名称不太好，所以我们实际上不做捆绑名称

1891
03:03:16,551 --> 03:03:21,040
我要更改标题，然后将其称为更改捆绑显示名称

1892
03:03:21,040 --> 03:03:25,040
因为我会说捆绑名称和捆绑显示名称完全是两个

1893
03:03:25,040 --> 03:03:28,551
不同的东西捆绑名称就像应用程序的二进制名称和

1894
03:03:28,551 --> 03:03:32,400
捆绑的显示名称是用户在屏幕上看到的，所以我们不要这样做

1895
03:03:32,400 --> 03:03:36,400
捆绑包名称，让我们在这里更改捆绑包显示名称

1896
03:03:36,400 --> 03:03:41,279
把它称为我的笔记好吧，所以在这样做之后，我们可以尝试

1897
03:03:41,279 --> 03:03:44,871
在这里停止应用程序，然后再次运行它

1898
03:03:44,871 --> 03:03:49,360
嗯，它可能会生效，这取决于

1899
03:03:49,360 --> 03:03:55,191
颤振将如何通过 xcode 构建触发这些更改以及 xcode 如何

1900
03:03:55,191 --> 03:03:58,720
build 有时会解释我们的更改

1901
03:03:58,720 --> 03:04:02,639
实际上，您可能有必要再做一次清洁

1902
03:04:02,639 --> 03:04:06,871
然后在该目标平台上再次运行应用程序，这只是一个

1903
03:04:06,871 --> 03:04:11,119
当你改变时有点不幸就像你做出改变时巨大的改变

1904
03:04:11,119 --> 03:04:15,511
到应用程序结构，我现在可以看到我的笔记是

1905
03:04:15,511 --> 03:04:19,831
实际上现在就采取了美联储效应，所以我们不必做任何颤振清理

1906
03:04:19,831 --> 03:04:24,231
所以这真的很好，那么我们需要做的也是

1907
03:04:24,231 --> 03:04:29,759
更新 android 上的应用名称，我们通过转到 android app src main 来做到这一点

1908
03:04:29,759 --> 03:04:35,279
我们现在就可以这样做，所以让我们转到 android manifest xml

1909
03:04:35,279 --> 03:04:40,231
你可以看到这里是 android app src main 我要去那里然后

1910
03:04:40,231 --> 03:04:43,191
我要在这里的 android 标签中找到这个键，然后

1911
03:04:43,191 --> 03:04:48,080
把它改成我的笔记好吧，让我们这样做然后我就走了

1912
03:04:48,080 --> 03:04:52,231
去这里只是为了一个颤振选择设备然后在我的安卓手机上运行它

1913
03:04:52,231 --> 03:04:57,831
我只是要停止 ios 执行，然后在不调试的情况下运行

1914
03:04:57,831 --> 03:05:03,511
这样您就可以尝试在此 android 手机上运行该应用程序，如果

1915
03:05:03,511 --> 03:05:08,720
一切都按预期工作，那么我们应该有我们的 mynotes 应用程序

1916
03:05:08,720 --> 03:05:13,360
就在这里，带有正确的 uh 图标，然后我们也应该有

1917
03:05:13,360 --> 03:05:17,680
正确的标签好吧，让我们把它发送到后台

1918
03:05:17,680 --> 03:05:20,871
让我们进去看看我们的应用程序，你现在可以看到它说我的

1919
03:05:20,871 --> 03:05:26,639
注意到正确的图标，嗯，是的，应用程序正在正常运行

1920
03:05:26,639 --> 03:05:30,231
如果你回到我们的 ios 应用程序，我们可以看到名字是

1921
03:05:30,231 --> 03:05:36,000
也是正确和正确的图标，所以我们实际上可以说我们已经

1922
03:05:36,000 --> 03:05:39,439
已经在 ios 上测试过东西，它们似乎正在工作，所以如果我提出

1923
03:05:39,439 --> 03:05:41,912
模拟器应用程序正常工作

1924
03:05:41,912 --> 03:05:44,551
我们没有任何崩溃的图标是

1925
03:05:44,551 --> 03:05:50,080
正确并且标签正确并且在android上如果我们再次调出scrcpy你

1926
03:05:50,080 --> 03:05:54,959
可以看到图标是正确的，还有名字

1927
03:05:54,959 --> 03:05:58,231
申请是正确的所以

1928
03:05:58,231 --> 03:06:01,191
我们已经完成了我们在本章讨论过的内容

1929
03:06:01,191 --> 03:06:06,080
图标，我们还讨论了启动画面的准备工作

1930
03:06:06,080 --> 03:06:10,479
下一章，通常是我们在结尾和结尾处所做的事情

1931
03:06:10,479 --> 03:06:14,000
我们讨论的每一章都会在即将到来的章节中讨论我们需要讨论的内容

1932
03:06:14,000 --> 03:06:18,720
所以我们在即将到来的章节中需要做的是准备好自己

1933
03:06:18,720 --> 03:06:23,680
对于创建启动画面，您现在知道启动画面是什么，但在下一个

1934
03:06:23,680 --> 03:06:26,871
章节我们要去创造它们

1935
03:06:26,871 --> 03:06:31,279
我们会将它们添加到我们的应用程序中，因此如果您愿意，请享用一些茶点

1936
03:06:31,279 --> 03:06:33,040
做和

1937
03:06:33,040 --> 03:06:36,799
我会在下一章见到你你好，欢迎来到第 46 章

1938
03:06:36,799 --> 03:06:40,551
屠宰课程嗯，如果你按照这些章节进行到这一点

1939
03:06:40,551 --> 03:06:44,159
按时间顺序你会知道我们已经做了很多准备

1940
03:06:44,159 --> 03:06:49,119
实际上即将开始准备我们的应用程序以提交到应用程序商店和

1941
03:06:49,119 --> 03:06:53,912
google play store 但在此之前，我们修复了我们的图标和

1942
03:06:53,912 --> 03:06:58,000
我们的 android 和 ios 应用程序名称我们需要修复一个名为

1943
03:06:58,000 --> 03:07:02,159
一个闪屏，所以我们简单地谈到了闪屏

1944
03:07:02,159 --> 03:07:06,479
屏幕以及它们在移动世界中的实际含义，例如在两者中

1945
03:07:06,479 --> 03:07:11,439
android os 和 ios 和 ipad os 就此而言，但对于那些错过的人

1946
03:07:11,439 --> 03:07:15,040
上一章闪屏是一个屏幕

1947
03:07:15,040 --> 03:07:19,511
当用户从寒冷中打开您的应用程序时显示给用户

1948
03:07:19,511 --> 03:07:22,959
boots 基本上意味着您的应用程序尚未运行

1949
03:07:22,959 --> 03:07:26,871
实例在该操作系统的后台，而

1950
03:07:26,871 --> 03:07:30,400
应用程序二进制文件正在加载到屏幕上，体验正在

1951
03:07:30,400 --> 03:07:34,479
加载到屏幕嗯然后主机操作系统在

1952
03:07:34,479 --> 03:07:38,959
这种情况下 android 和 ios 将不得不向用户显示一些东西，而

1953
03:07:38,959 --> 03:07:41,680
他们正在等待加载体验

1954
03:07:41,680 --> 03:07:45,511
所以在本机应用程序中，例如，如果您正在创建本机

1955
03:07:45,511 --> 03:07:50,080
用于 ios 的 um 耦合应用程序对不起 kotlin

1956
03:07:50,080 --> 03:07:55,511
android 和 swift 或 swift ui for ios 然后嗯在那种情况下有

1957
03:07:55,511 --> 03:07:58,799
只有一个阶段的应用程序加载

1958
03:07:58,799 --> 03:08:01,912
您将二进制文件提交给苹果，然后或

1959
03:08:01,912 --> 03:08:06,479
嗯到谷歌游戏商店，然后主机操作系统只是加载你的

1960
03:08:06,479 --> 03:08:10,551
二进制然后你的主用户界面显示给用户，所以

1961
03:08:10,551 --> 03:08:14,479
这只是颤振的一个阶段，但是有两个阶段

1962
03:08:14,479 --> 03:08:19,759
加载您的应用程序的一个是您的应用程序二进制文件本身

1963
03:08:19,759 --> 03:08:24,000
正在加载，第二阶段是实际的颤振体验

1964
03:08:24,000 --> 03:08:28,400
加载到您的应用程序中，因为颤振基本上是它自己的 sdk

1965
03:08:28,400 --> 03:08:31,119
所以我们要做的是创建一个启动画面

1966
03:08:31,119 --> 03:08:34,551
在我们的应用程序二进制文件被呈现给用户时显示给用户

1967
03:08:34,551 --> 03:08:39,759
用户让我们来看看

1968
03:08:39,759 --> 03:08:42,959
启动画面的官方文档

1969
03:08:42,959 --> 03:08:46,479
我要把屏幕拉到这里并增加尺寸

1970
03:08:46,479 --> 03:08:52,871
也许有点像这样所以你看这里

1971
03:08:52,871 --> 03:08:56,551
正如它首先在这里解释的那样，你有你的

1972
03:08:56,551 --> 03:09:00,231
android 例如操作系统在这里，你点击你的应用程序

1973
03:09:00,231 --> 03:09:04,080
图标，然后它会通过一系列步骤以登陆您的

1974
03:09:04,080 --> 03:09:08,479
应用程序的 um 主界面，这里有一个很棒的

1975
03:09:08,479 --> 03:09:13,040
基本上是针对闪屏的文档，我推荐大家

1976
03:09:13,040 --> 03:09:17,279
谁想将他们的应用程序提交到 ios 应用商店和 google play 以便阅读

1977
03:09:17,279 --> 03:09:21,759
这很彻底，因为这里有很多信息，即使你

1978
03:09:21,759 --> 03:09:25,831
只是遵循我在本章中的建议，但它仍然是一个

1979
03:09:25,831 --> 03:09:32,231
继续阅读的好习惯

1980
03:09:32,231 --> 03:09:36,000
所以在我们真正开始之前

1981
03:09:36,000 --> 03:09:41,729
设计我们的启动画面我也不得不提一些

1982
03:09:41,729 --> 03:09:45,360
[鼓掌] 这一章挺有你需要的

1983
03:09:45,360 --> 03:09:48,319
为了让你能够阅读你不幸需要的章节

1984
03:09:48,319 --> 03:09:52,400
有一个 Macintosh 所以因为我们实际上要玩一点

1985
03:09:52,400 --> 03:09:55,191
我们的 um ios 启动画面和你

1986
03:09:55,191 --> 03:09:59,912
需要有 xcode 但我很快就会谈到这一点，你会看到

1987
03:09:59,912 --> 03:10:04,871
那么我们如何去创建一个启动画面呢

1988
03:10:04,871 --> 03:10:08,159
我的意思是有很多不同的方法可以做到这一点并且

1989
03:10:08,159 --> 03:10:12,400
如果您是以前的开发人员，您可能不太舒服

1990
03:10:12,400 --> 03:10:15,831
不像独角兽开发者，你可能不是

1991
03:10:15,831 --> 03:10:19,511
一个所谓的独角兽开发者，作为一个也乐于接受的开发者

1992
03:10:19,511 --> 03:10:22,639
设计或者你可能只是一个

1993
03:10:22,639 --> 03:10:26,799
设计师，你已经开始了这门课程，你已经到了这一点，所以你可以

1994
03:10:26,799 --> 03:10:30,400
实际上对像 figma 这样的工具感到满意

1995
03:10:30,400 --> 03:10:34,871
所以嗯，这取决于你的背景，你可能或

1996
03:10:34,871 --> 03:10:39,831
可能对设计感到不舒服，所以我基本上采取了自由

1997
03:10:39,831 --> 03:10:43,040
使用设计工具 一个名为 figma 的免费设计工具

1998
03:10:43,040 --> 03:10:46,551
对于本章，您可以使用例如 google 自由访问

1999
03:10:46,551 --> 03:10:49,912
帐户或苹果苹果 ID

2000
03:10:49,912 --> 03:10:55,191
或者您可以在 figma.com 上创建一个普通的免费帐户

2001
03:10:55,191 --> 03:10:59,360
但我不假设你对设计和为

2002
03:10:59,360 --> 03:11:04,080
我们要做的是创建一个非常非常非常简单的

2003
03:11:04,080 --> 03:11:07,511
figma 中的启动画面，假设该人正在观看

2004
03:11:07,511 --> 03:11:16,159
本课程没有关于 figma 或设计的信息，之前还可以

2005
03:11:16,159 --> 03:11:20,639
所以让我们看看

2006
03:11:20,639 --> 03:11:24,159
说完figma就来看看吧

2007
03:11:24,159 --> 03:11:30,639
在 ios 上的故事板上，嗯，我们可以在这里做的就是带来

2008
03:11:30,639 --> 03:11:34,639
我们的应用程序到屏幕上，所以我会调出我们的

2009
03:11:34,639 --> 03:11:39,511
此处的应用程序会稍微增加大小，以便您看得更清楚

2010
03:11:39,511 --> 03:11:43,592
我们能做的就是在这里调出终端所以摆脱一点

2011
03:11:43,592 --> 03:11:47,831
这里有点分心，所以让我们看看

2012
03:11:47,831 --> 03:11:53,119
所以如果你说状态好，我们有很多我们已经做过的事情，但我们还没有

2013
03:11:53,119 --> 03:11:57,191
提交它们，这样很好，让它们在那里，我们很快就会提交它们

2014
03:11:57,191 --> 03:12:00,720
好的，所以在你的申请中我需要你

2015
03:12:00,720 --> 03:12:05,680
要做的就是看看

2016
03:12:05,680 --> 03:12:11,680
你的 ios 应用程序，所以 ios 应用程序中有一些东西

2017
03:12:11,680 --> 03:12:15,680
当我们创建我们的

2018
03:12:15,680 --> 03:12:18,551
本课程绝对开头的模板

2019
03:12:18,551 --> 03:12:23,680
并且有一个文件，一个名为launch的特定文件，我相信它被称为

2020
03:12:23,680 --> 03:12:28,000
如果您对 ios 开发不满意，请启动屏幕点故事板

2021
03:12:28,000 --> 03:12:32,799
就像之前的原生 ios 开发一样，我可以向您解释一个故事板

2022
03:12:32,799 --> 03:12:38,159
file 是苹果指定给 um 的文件

2023
03:12:38,159 --> 03:12:41,912
开发人员能够直观地设计他们的应用程序，然后编写

2024
03:12:41,912 --> 03:12:46,400
稍后为它编写代码，苹果决定专门针对启动屏幕

2025
03:12:46,400 --> 03:12:52,231
例如，显示给用户的应该有一个专用的 um

2026
03:12:52,231 --> 03:12:59,360
故事板文件，所以我们将继续并启动 xcode

2027
03:12:59,360 --> 03:13:05,831
在这个 Macintosh 上，为了操作那个故事板文件，但在我们这样做之前

2028
03:13:05,831 --> 03:13:11,360
我将继续打开我们应用程序的根文件夹

2029
03:13:11,360 --> 03:13:15,680
然后我要去，让我也稍微改变一下屏幕布局

2030
03:13:15,680 --> 03:13:18,720
你看得更清楚

2031
03:13:18,720 --> 03:13:22,799
然后在这个 ios 文件夹中，所以在应用程序的根文件夹中转到

2032
03:13:22,799 --> 03:13:27,759
ios 然后你可以在这里看到两个文件 runner xcode proj 和 runner xc

2033
03:13:27,759 --> 03:13:32,319
工作区，取决于您在 Macintosh 上的设置，您可能会也可能不会

2034
03:13:32,319 --> 03:13:34,639
能够看到

2035
03:13:34,639 --> 03:13:39,360
这些文件的扩展我已经在我的 Macintosh 中完成了，我可以

2036
03:13:39,360 --> 03:13:43,040
总是看到文件扩展名，因为它很重要

2037
03:13:43,040 --> 03:13:46,959
对我来说，所以如果你没有看到你只需要信任的扩展

2038
03:13:46,959 --> 03:13:52,639
图标，所以其中一个文件有这个蓝色图标，上面写着项目在这里和

2039
03:13:52,639 --> 03:13:56,720
另一个是工作区，我需要你基本上双击

2040
03:13:56,720 --> 03:14:00,400
在这个工作区上为了打开它没问题

2041
03:14:00,400 --> 03:14:05,912
所以让我们继续在 xcode 中打开这个工作区

2042
03:14:05,912 --> 03:14:12,000
然后让我们看看这个运行器文件夹中的启动屏幕

2043
03:14:12,000 --> 03:14:15,680
所以如果我把你里面的一切都倒塌

2044
03:14:15,680 --> 03:14:19,831
看到你有你的跑步者，这是创建的颤振模板

2045
03:14:19,831 --> 03:14:24,231
里面的工作区我们有另一个跑步者和

2046
03:14:24,231 --> 03:14:28,799
在那个 runner 文件夹中，然后你将拥有这个启动屏幕

2047
03:14:28,799 --> 03:14:31,511
所以我们可以看看这个发射

2048
03:14:31,511 --> 03:14:36,159
屏幕，看看它是如何创建的，你可以从字面上

2049
03:14:36,159 --> 03:14:40,000
单击此处以展开此内容

2050
03:14:40,000 --> 03:14:43,759
视图控制器以查看此启动屏幕的内部结构和

2051
03:14:43,759 --> 03:14:48,231
好技巧是如果你想扩展你可以在这里看到你必须扩展它并且

2052
03:14:48,231 --> 03:14:50,720
那么你必须扩展它并扩展它

2053
03:14:50,720 --> 03:14:54,959
如果您不想一次扩展一个步骤，您可以随时按住

2054
03:14:54,959 --> 03:14:59,191
选项键或 alt 键，然后单击这个小箭头，然后展开

2055
03:14:59,191 --> 03:15:03,360
整个链条为您服务，如果您想折叠整个链条，您可以

2056
03:15:03,360 --> 03:15:08,080
按下 alt 然后单击 然后折叠整个更改

2057
03:15:08,080 --> 03:15:12,959
让我们扩展整个链然后在这里你会看到有一个

2058
03:15:12,959 --> 03:15:17,680
视图，然后是当前指向的启动图像图像视图

2059
03:15:17,680 --> 03:15:22,159
名为启动图像的文件不存在，因为如果您访问我们的资产

2060
03:15:22,159 --> 03:15:25,831
在这里你会看到启动图像现在是空的

2061
03:15:25,831 --> 03:15:30,479
没有启动图像意味着没有启动画面好吗

2062
03:15:30,479 --> 03:15:33,439
所以我们要操作这个文件

2063
03:15:33,439 --> 03:15:36,720
一点点，你很快就会看到，所以让我只是

2064
03:15:36,720 --> 03:15:41,040
保持 xcode 正常运行

2065
03:15:41,040 --> 03:15:46,231
这就是启动屏幕故事板的基础

2066
03:15:46,231 --> 03:15:50,400
正如您在屏幕底部标题上的标题中看到的那样

2067
03:15:50,400 --> 03:15:54,319
是一个不幸的不幸的事情，嗯

2068
03:15:54,319 --> 03:15:58,231
那个苹果在我眼里至少不像

2069
03:15:58,231 --> 03:16:01,680
许多其他公司，如微软和谷歌

2070
03:16:01,680 --> 03:16:06,799
例如，如果您想进行本机 ios 开发并在其中安装 xcode

2071
03:16:06,799 --> 03:16:11,360
例如，为了打开您的项目并运行您的项目，那么您必须

2072
03:16:11,360 --> 03:16:16,231
有一个 macintosh，因为 xcode 在其他平台上不可用，而且

2073
03:16:16,231 --> 03:16:21,439
非常不幸，我的意思是这没什么值得骄傲的

2074
03:16:21,439 --> 03:16:25,680
我会说我是本地 ios 开发人员，实际上我为这个事实感到羞耻

2075
03:16:25,680 --> 03:16:29,439
我每天使用的 xcode 工具只能在

2076
03:16:29,439 --> 03:16:32,639
macintosh，因为我个人可能会举例

2077
03:16:32,639 --> 03:16:37,511
喜欢在ubuntu或fedora上写我的代码ios代码

2078
03:16:37,511 --> 03:16:40,799
或者你们中的一些人可能实际上更喜欢窗户，但我们不要去那里，让我们

2079
03:16:40,799 --> 03:16:43,831
只是说不幸的是你需要 macintosh 才能能够

2080
03:16:43,831 --> 03:16:48,959
将该 um 启动屏幕操作为情节提要文件和

2081
03:16:48,959 --> 03:16:53,119
对于那些没有 Macintosh 的人，您可能需要联系

2082
03:16:53,119 --> 03:16:58,720
您网络中确实可以访问 Macintosh 并要求他们

2083
03:16:58,720 --> 03:17:03,511
为您操作故事板文件并添加您的图标，您很快就会看到

2084
03:17:03,511 --> 03:17:07,680
如何然后将该故事板文件发送回给您

2085
03:17:07,680 --> 03:17:10,831
所以这是一个

2086
03:17:10,831 --> 03:17:14,479
不幸的问题

2087
03:17:14,479 --> 03:17:17,759
嗯，所以我们需要做的是真正得到

2088
03:17:17,759 --> 03:17:22,231
我们需要在这方面工作的根源

2089
03:17:22,231 --> 03:17:26,720
正如我在

2090
03:17:26,720 --> 03:17:31,831
本章开头我将依赖一个名为 figma 的免费工具

2091
03:17:31,831 --> 03:17:35,831
所以让我们继续让我看看我是否可以做一些重新

2092
03:17:35,831 --> 03:17:42,159
在这个屏幕上重新洗牌并关闭一个标签在这里我要带来

2093
03:17:42,159 --> 03:17:48,080
启动我的浏览器会最小化我们的应用程序并带来

2094
03:17:48,080 --> 03:17:52,871
在这里打开我的浏览器，所以我需要你访问一个名为

2095
03:17:52,871 --> 03:17:58,400
figma.com 和 figma.com 然后你将拥有

2096
03:17:58,400 --> 03:18:03,040
能够创建您的设计文件

2097
03:18:03,040 --> 03:18:06,959
所以我不会告诉你如何注册 figma 因为那是

2098
03:18:06,959 --> 03:18:12,400
很容易，所以如果我例如去并提出一个

2099
03:18:12,400 --> 03:18:16,159
在这里全新的标签并说 figma.com 我在哪里

2100
03:18:16,159 --> 03:18:21,119
没有登录，你可以说注册，你很快就会在这里看到你可以

2101
03:18:21,119 --> 03:18:26,639
继续使用 google 或使用您选择的电子邮件地址进行签名

2102
03:18:26,639 --> 03:18:30,479
为 figma 准备，正如我提到的 figma 是

2103
03:18:30,479 --> 03:18:36,400
免费直到某一点，你可以，例如，嗯

2104
03:18:36,400 --> 03:18:40,871
在 figma 中使用您的正常设计文件，无需

2105
03:18:40,871 --> 03:18:45,360
不得不考虑实际支付订阅费用，但如果你

2106
03:18:45,360 --> 03:18:48,871
想做高级工作，例如，如果你想做很多分享你的

2107
03:18:48,871 --> 03:18:53,279
与其他团队成员等合作，那么您将需要

2108
03:18:53,279 --> 03:18:55,680
为 figma 买单

2109
03:18:55,680 --> 03:18:59,680
在您在 figma 注册帐户后，我需要您做的是

2110
03:18:59,680 --> 03:19:04,551
只是去点击新的设计文件好吧，所以我要增加大小

2111
03:19:04,551 --> 03:19:08,959
在这里，只是说新的设计文件

2112
03:19:08,959 --> 03:19:14,231
好的，所以它在这里为我们创建了一个新的设计文件，你会看到

2113
03:19:14,231 --> 03:19:19,191
你会在这里的屏幕底部看到 嗯，我想知道我是否真的有

2114
03:19:19,191 --> 03:19:23,831
把我的脸向右，因为我被它挡住了

2115
03:19:23,831 --> 03:19:29,511
所以我没有注意到，所以你需要做的是创建一个

2116
03:19:29,511 --> 03:19:35,680
figma 上的容器也许这是一个更好的屏幕

2117
03:19:35,680 --> 03:19:40,400
是的，设置也许这更好，所以我们需要在这里做的是创建

2118
03:19:40,400 --> 03:19:44,680
一个 1284 的容器

2119
03:19:44,680 --> 03:19:49,360
2778 我不喜欢编这个号码

2120
03:19:49,360 --> 03:19:56,479
这是 iphone 13 pro max 的屏幕大小，所以

2121
03:19:56,479 --> 03:19:59,360
如果您不是设计师，您可能不会注意到，但是当您设计事物时

2122
03:19:59,360 --> 03:20:03,439
您总是必须像您的设计一样进行创作，以便它可以扩展到各种

2123
03:20:03,439 --> 03:20:08,319
尺寸这在 2007 年或 2008 年我们只有一部 iPhone 时还不是问题

2124
03:20:08,319 --> 03:20:11,680
只有少数安卓设备，但现在你必须有点喜欢

2125
03:20:11,680 --> 03:20:16,551
在例如 figma 中创建一个模板，然后确保它可扩展

2126
03:20:16,551 --> 03:20:20,000
不同的尺寸，但我们现在不打算专注于那个我们要做的一切

2127
03:20:20,000 --> 03:20:26,799
要做的只是创建一个启动屏幕，然后在我们的 ios 中

2128
03:20:26,799 --> 03:20:30,400
app 和 android app 我们只是要确保它可以正常扩展，所以让我们

2129
03:20:30,400 --> 03:20:35,119
目前只针对一台设备，在这里我需要你进去

2130
03:20:35,119 --> 03:20:39,040
实际上在这里对此感到抱歉并创建一个矩形

2131
03:20:39,040 --> 03:20:42,551
创建一个矩形后，我们将进入这里并将宽度设置为

2132
03:20:42,551 --> 03:20:46,639
我在下面指定了 18284

2133
03:20:46,639 --> 03:20:51,279
我可以看到我的键盘，高度将是 2778

2134
03:20:51,279 --> 03:20:57,360
好的，这是一个巨大的矩形，你可以在这里看到

2135
03:20:57,360 --> 03:21:02,720
那是我们的矩形，我们需要做的是给它一个背景

2136
03:21:02,720 --> 03:21:07,279
就像你到目前为止所看到的那样现在着色，如果你按照时间顺序跟随章节

2137
03:21:07,279 --> 03:21:13,759
对于本课程，您会知道我基本上使用了非常非常

2138
03:21:13,759 --> 03:21:18,959
用于呃编码的视觉工作室代码中的软主题，我非常喜欢这个

2139
03:21:18,959 --> 03:21:23,759
这是你的偏好 你可能喜欢轻队 我喜欢东京这样的暗队

2140
03:21:23,759 --> 03:21:29,040
night and tokyo night 是一个开源的视觉工作室代码主题，你

2141
03:21:29,040 --> 03:21:32,319
实际上可以从

2142
03:21:32,319 --> 03:21:36,080
github 所以我在这里要做的只是确保背景

2143
03:21:36,080 --> 03:21:42,479
我们的初始屏幕的颜色实际上是用那种颜色绘制的，所以我们走吧

2144
03:21:42,479 --> 03:21:48,159
并在 github 中搜索 tokyo night ，你最终会在这个

2145
03:21:48,159 --> 03:21:54,159
网站 github.com 和起亚东京之夜 vs 代码主题所以如果你没有这个

2146
03:21:54,159 --> 03:21:58,000
链接，如果你不介意写这个名字，你可以谷歌

2147
03:21:58,000 --> 03:22:03,592
所以我就去谷歌说东京之夜主题好吧，你会的

2148
03:22:03,592 --> 03:22:07,831
最后是github链接，所以你可以点击它，所以我要

2149
03:22:07,831 --> 03:22:14,319
进入这个嗯主题，我要抓住这个漂亮的编辑器

2150
03:22:14,319 --> 03:22:19,439
从这里开始的背景风暴颜色还可以

2151
03:22:19,439 --> 03:22:24,551
嗯实际上我们可以使用暴风雨或夜晚我会选择暴风雨，只是

2152
03:22:24,551 --> 03:22:28,159
看看它的样子，所以请抓住这个代码

2153
03:22:28,159 --> 03:22:34,400
uh tokyo knight 的 rgb 代码，让我们把 figma 放到我们的矩形中，然后

2154
03:22:34,400 --> 03:22:38,959
只需将其粘贴到填充中，以创建一个漂亮的小背景

2155
03:22:38,959 --> 03:22:43,279
为我们着色好，所以我们现在可以忍受这个

2156
03:22:43,279 --> 03:22:48,400
那么我们需要做的是我喜欢基本上创建某种渐变

2157
03:22:48,400 --> 03:22:52,479
在这种背景颜色中，所以它不像现在那么平淡，所以我是什么

2158
03:22:52,479 --> 03:22:57,360
要做的就是在这里发挥作用，然后说我们实际上已经

2159
03:22:57,360 --> 03:23:02,479
不影响它可能是填充让我们去填充按加号按钮

2160
03:23:02,479 --> 03:23:09,191
在这里只需点击这个小空间

2161
03:23:09,191 --> 03:23:13,592
让我们说，嗯，你知道我实际上会做什么

2162
03:23:13,592 --> 03:23:16,959
想稍微改变一下画面布局，让你看到我的figma画面

2163
03:23:16,959 --> 03:23:22,871
更好，所以我要隐藏这个标题，让我们看看

2164
03:23:22,871 --> 03:23:27,592
看看我能不能改变字幕长度

2165
03:23:27,592 --> 03:23:31,759
像这样使它更小

2166
03:23:31,759 --> 03:23:36,231
因此我可以用我的脸来改变屏幕布局

2167
03:23:36,231 --> 03:23:39,511
可见，所以我认为这在填充后会好一点，所以我们

2168
03:23:39,511 --> 03:23:42,720
使用此加号图标在此处添加了填充效果

2169
03:23:42,720 --> 03:23:48,871
然后点击旁边的这个嗯小图标来填充你看到这里点击它

2170
03:23:48,871 --> 03:23:53,360
然后你可以说你想要一个

2171
03:23:53,360 --> 03:23:59,360
线性我们应该创建一个径向或线性渐变让我们看看

2172
03:23:59,360 --> 03:24:04,159
让我们创建一个线性渐变好吧，然后你可以看到这是一个渐变

2173
03:24:04,159 --> 03:24:08,080
目前正在从黑色变为

2174
03:24:08,080 --> 03:24:13,040
在这里透明，百分之零，所以让我们也制作这个黑点

2175
03:24:13,040 --> 03:24:15,759
像这样透明

2176
03:24:15,759 --> 03:24:21,680
零，我们将在这两种情况下将背景颜色设置为起始

2177
03:24:21,680 --> 03:24:25,439
点和终点，所以点击起点改变这个颜色

2178
03:24:25,439 --> 03:24:29,511
我们的 um tokenite 背景颜色，这里是

2179
03:24:29,511 --> 03:24:33,759
好吧，那没关系，然后在中间的某个地方，我们将创建一个

2180
03:24:33,759 --> 03:24:39,680
点并给它百分之一百的透明度，让我们看看它的外观

2181
03:24:39,680 --> 03:24:43,360
像这样在这里我们能不能没有三分

2182
03:24:43,360 --> 03:24:47,191
是的 figma 只是对我们有点弹道但没关系

2183
03:24:47,191 --> 03:24:52,159
所以在这里我们有那个颜色在这里我们有那个颜色

2184
03:24:52,159 --> 03:24:56,871
所以开始和结束必须是透明的

2185
03:24:56,871 --> 03:25:01,040
选择，让我们进入中间，将颜色更改为红色，然后

2186
03:25:01,040 --> 03:25:03,831
你可以看到它在这里创建没有问题

2187
03:25:03,831 --> 03:25:08,400
然后我们要为中间做些什么 我们要去创造

2188
03:25:08,400 --> 03:25:12,799
在这里抓住这个特殊的颜色，你可以看到它有点像灯

2189
03:25:12,799 --> 03:25:17,439
柔和的浅蓝色以 7d 开头，所以它是 7dcff

2190
03:25:17,439 --> 03:25:20,639
我要回到 figma 的设计，在这里

2191
03:25:20,639 --> 03:25:25,439
把中间的颜色改成这样就好了

2192
03:25:25,439 --> 03:25:30,231
在中间的那种为我们创造了一个很好的小效果

2193
03:25:30,231 --> 03:25:32,720
不错的渐变

2194
03:25:32,720 --> 03:25:37,040
所以在这样做之后，让我们去下载并获取我们的图标，所以我要走了

2195
03:25:37,040 --> 03:25:41,191
去这里下载，如果你还记得我们有

2196
03:25:41,191 --> 03:25:45,040
这个便签 svg 文件和 figma 很棒

2197
03:25:45,040 --> 03:25:48,831
有这样的东西，所以让我们直接在

2198
03:25:48,831 --> 03:25:53,360
中间好的，这是我们的便条，好的

2199
03:25:53,360 --> 03:25:57,592
所以让我们看看我们应该使用 svg 还是应该使用

2200
03:25:57,592 --> 03:26:00,959
也许我们的应用程序图标实际上使用起来可能会更好

2201
03:26:00,959 --> 03:26:06,479
应用程序图标所以请还原此更改所以我们不要使用此 svg 让我们转到我们的

2202
03:26:06,479 --> 03:26:10,000
我们在上一章中提取的应用程序图标，让我们抓取一个

2203
03:26:10,000 --> 03:26:15,360
光栅化 png 这是这个应用商店的图标，然后把它带到这里好吧

2204
03:26:15,360 --> 03:26:19,511
实际上是一个不错的尺寸我将在 figma 中使用这些内置的布局指南作为

2205
03:26:19,511 --> 03:26:22,720
你可以看到它告诉我中心在哪里所以我只是要放置我们的图标

2206
03:26:22,720 --> 03:26:25,912
就在那里，你可以看到它实际上与它融合得很好

2207
03:26:25,912 --> 03:26:30,871
我们创建的背景线性渐变，所以它是一个微妙的效果

2208
03:26:30,871 --> 03:26:35,279
所以你可以看到线性渐变有点明显

2209
03:26:35,279 --> 03:26:39,592
如果你用这个图标禁用线性渐变

2210
03:26:39,592 --> 03:26:44,400
它非常平淡，所以如果没有线性渐变，我们的初始屏幕就不会

2211
03:26:44,400 --> 03:26:48,720
看起来很好，所以你也可以玩一点透明度

2212
03:26:48,720 --> 03:26:53,439
整个事情就像100，我觉得嗯，这只是

2213
03:26:53,439 --> 03:26:57,191
疯了，所以也许 20 实际上还不错

2214
03:26:57,191 --> 03:27:01,279
我不知道我去了哪里所以让我们回到这里说 20

2215
03:27:01,279 --> 03:27:05,279
好吧，现在我们有一个非常好的

2216
03:27:05,279 --> 03:27:08,959
嗯，我们启动画面的基础，所以我们

2217
03:27:08,959 --> 03:27:13,360
现在需要做才能下载此启动画面，您需要选择那些

2218
03:27:13,360 --> 03:27:17,759
两层，所以在我的 Macintosh 上，我只需按住 shift 键并

2219
03:27:17,759 --> 03:27:22,000
例如，单击此图标，然后单击下一个以选择

2220
03:27:22,000 --> 03:27:25,592
这两个地方我认为你实际上不能，你不能那样选择，所以你

2221
03:27:25,592 --> 03:27:29,360
基本上需要按住shift键同时选中两个图层

2222
03:27:29,360 --> 03:27:33,680
然后在 Macintosh 上按 command g 或按 ctrl g on

2223
03:27:33,680 --> 03:27:38,319
linux和windows为了将这两个层组合在一起，现在好了

2224
03:27:38,319 --> 03:27:40,959
这是一个小组，我只是要称呼它

2225
03:27:40,959 --> 03:27:44,871
像这样的启动画面，不必像启动画面那样被调用

2226
03:27:44,871 --> 03:27:50,159
屏幕，但我只是说它很好，所以我们需要做的就是抓住这个

2227
03:27:50,159 --> 03:27:55,592
三种口味的闪屏很正常，就像正常的ios开发一样

2228
03:27:55,592 --> 03:28:02,159
您通常必须为您的资产支持三种不同的分辨率

2229
03:28:02,159 --> 03:28:06,551
一些开发人员并不在意

2230
03:28:06,551 --> 03:28:10,959
支持较旧的设备，因此它们仅支持例如

2231
03:28:10,959 --> 03:28:16,000
2x 和 3x 的分辨率，如果这对你没有意义，我

2232
03:28:16,000 --> 03:28:18,400
只会解释这实际上意味着什么

2233
03:28:18,400 --> 03:28:22,551
嗯现代设备

2234
03:28:22,551 --> 03:28:26,639
在 ios 上，至少它们在屏幕上被调用，它们被称为视网膜设备

2235
03:28:26,639 --> 03:28:32,159
这只是苹果很多年前创造的一个术语

2236
03:28:32,159 --> 03:28:35,831
他们说基本上他们的像素数量增加了一倍

2237
03:28:35,831 --> 03:28:40,479
设备可以在屏幕上显示，但它们保持原来的纵横比

2238
03:28:40,479 --> 03:28:46,080
如果在旧设备的一个小方块中，该设备可以显示四个像素

2239
03:28:46,080 --> 03:28:50,080
那么新设备可以显示八个像素，因此它们的数量增加了一倍

2240
03:28:50,080 --> 03:28:54,551
每平方英尺的像素我不知道你想说什么

2241
03:28:54,551 --> 03:28:58,639
他们称它为视网膜，然后他们补充说他们说​​每个

2242
03:28:58,639 --> 03:29:03,279
每个开发人员都需要为旧设备提供图像，我们称之为

2243
03:29:03,279 --> 03:29:05,592
1x 如

2244
03:29:05,592 --> 03:29:10,000
缩放到 1，新设备将有 2 倍

2245
03:29:10,000 --> 03:29:14,959
然后更新的 iphone 设备问世了，它们有更现代的视网膜显示器，甚至

2246
03:29:14,959 --> 03:29:19,912
更多的像素被塞进同一个空间，所以他们说现在这些设备是

2247
03:29:19,912 --> 03:29:24,799
能够显示比原始像素多八倍的像素，因此

2248
03:29:24,799 --> 03:29:29,360
基本上会是一个 x 两个 x 和三个 x

2249
03:29:29,360 --> 03:29:34,400
所以嗯，我认为是八倍，我不知道

2250
03:29:34,400 --> 03:29:38,720
所以我们必须支持 1x2x 和 3x 所以让我们进入这里

2251
03:29:38,720 --> 03:29:41,831
嗯，让我看看我能不能洗牌

2252
03:29:41,831 --> 03:29:47,279
周围让你看得更清楚，嗯，也许是这样，所以让我们在 figma at the

2253
03:29:47,279 --> 03:29:50,959
屏幕底部你会看到这个导出按钮，所以我要按下那个导出

2254
03:29:50,959 --> 03:29:54,479
所以我实际上要按三下那个导出按钮，正如你在

2255
03:29:54,479 --> 03:30:00,000
在这里，我们有第一个是 png 确保它们都是 png 文件，并且

2256
03:30:00,000 --> 03:30:04,400
第一个没有后缀 第二个有两个 x 第三个有三个 x

2257
03:30:04,400 --> 03:30:07,439
这正是我们需要的，好吧

2258
03:30:07,439 --> 03:30:12,720
之后我们要做的就是说出口闪屏就像

2259
03:30:12,720 --> 03:30:15,360
那和那会做它的处理所以它

2260
03:30:15,360 --> 03:30:19,592
实际上也可能需要一些时间，具体取决于我们的互联网连接，然后

2261
03:30:19,592 --> 03:30:25,191
我们下载了这个 zip 文件，所以我们在这个文件中的工作基本上完成了，这个

2262
03:30:25,191 --> 03:30:29,191
是那个 zip 文件的内容，你可以看到启动画面 png 并且它们是

2263
03:30:29,191 --> 03:30:32,319
都一样，但它们的尺寸完全不同，你可以看到第一个是

2264
03:30:32,319 --> 03:30:38,159
604 KB，第二个是 1.4 MB，第三个是 2.5

2265
03:30:38,159 --> 03:30:44,319
兆字节好的，所以在这样做之后让我们现在删除

2266
03:30:44,319 --> 03:30:48,639
从屏幕上的 Safari 或您的网络浏览器

2267
03:30:48,639 --> 03:30:52,720
我们现在基本上需要进入我们的源代码，所以我要继续

2268
03:30:52,720 --> 03:30:56,400
这个窗口在屏幕上做一些改组

2269
03:30:56,400 --> 03:31:01,439
然后我会带上我们的让我们看看我会带上我们的呃

2270
03:31:01,439 --> 03:31:05,912
像这样应用到屏幕上

2271
03:31:05,912 --> 03:31:11,511
好的，实际上我们不需要应用程序抱歉，我们有点

2272
03:31:11,511 --> 03:31:16,080
这里需要xcode，所以让我调出xcode

2273
03:31:16,080 --> 03:31:20,231
但是让我们将 xcode 带到屏幕上，我们现在需要的是转到我们的资产

2274
03:31:20,231 --> 03:31:25,191
在这里运行我们的资产，我们在那里有我们的启动图像，所以我们需要什么

2275
03:31:25,191 --> 03:31:30,479
要做的是一次抓取这些图像并将它们带到这里好吧

2276
03:31:30,479 --> 03:31:34,551
它们可以称为启动屏幕，这不是问题 xcode 将进行映射

2277
03:31:34,551 --> 03:31:38,639
对我们来说，只要这里的这个东西被称为启动图像，那么我们就是

2278
03:31:38,639 --> 03:31:42,319
很好，所以我们现在要去的任何情况下都可以作为标题

2279
03:31:42,319 --> 03:31:46,400
去把这些图片带到这里，这样我们就可以在这里看到三张图片

2280
03:31:46,400 --> 03:31:50,159
我们在这里有三个占位符，我们必须拖放我们的图像

2281
03:31:50,159 --> 03:31:54,799
进入所以让我们从启动画面 png 开始，然后将其设置为 1x

2282
03:31:54,799 --> 03:32:01,439
让我们将启动屏幕 2x 变为 2x 和 3x 变为 3x 好吧

2283
03:32:01,439 --> 03:32:04,551
就这样

2284
03:32:04,551 --> 03:32:08,799
这部分现在已经完成，但我们还没有真正完成这个闪屏的设计

2285
03:32:08,799 --> 03:32:13,439
对于 ios 应用程序，让我们转到启动屏幕故事板

2286
03:32:13,439 --> 03:32:16,720
文件在这里，你会看到它看起来不太好

2287
03:32:16,720 --> 03:32:20,231
所以我们需要找到这个启动图像

2288
03:32:20,231 --> 03:32:25,191
显示在这里，你现在可以看到它的约束就像

2289
03:32:25,191 --> 03:32:29,592
非常非常错误所以它只是认为如果你进入这个标签它认为

2290
03:32:29,592 --> 03:32:33,360
这张图片是一二八四乘二七七八

2291
03:32:33,360 --> 03:32:38,871
但我们不希望这样，好吧，我们希望这张图片和屏幕一样大，但我们

2292
03:32:38,871 --> 03:32:43,040
还希望它修复图像的纵横比，所以

2293
03:32:43,040 --> 03:32:47,119
它总是填满屏幕的全部内容，即使这意味着

2294
03:32:47,119 --> 03:32:50,871
图像稍微超出屏幕边界

2295
03:32:50,871 --> 03:32:56,959
好的，这样启动屏幕在所有 ios 设备上看起来都很棒

2296
03:32:56,959 --> 03:33:01,592
所以你需要在这里做的只是 ios 方面的一点工作，所以你

2297
03:33:01,592 --> 03:33:06,159
需要进入并在此选项卡中选择您的启动图像，这是您的

2298
03:33:06,159 --> 03:33:12,231
尺寸检查器的尺寸，因为它在 xcode 中被调用，然后说 x

2299
03:33:12,231 --> 03:33:17,912
是零，y 也是零，所以有点像确保你的图像开始

2300
03:33:17,912 --> 03:33:22,959
就在那里然后让我们缩小一点并手动拖动它

2301
03:33:22,959 --> 03:33:26,799
一点点让它适合屏幕所以我要拖动这一点让我们

2302
03:33:26,799 --> 03:33:30,831
看看我能不能用我的触控板做到这一点，或者我应该用我的

2303
03:33:30,831 --> 03:33:35,191
鼠标，这就像和我玩一点，只是因为这个

2304
03:33:35,191 --> 03:33:40,319
目前的启动图像有一些限制，所以让我们开始吧

2305
03:33:40,319 --> 03:33:43,592
删除这些约束，所以我要删除这个水平约束

2306
03:33:43,592 --> 03:33:46,479
按下它上面的退格按钮，或者如果你在 Windows 和 Linux 上，你有

2307
03:33:46,479 --> 03:33:49,592
按下键盘上的删除按钮，所以现在我已经删除了那些

2308
03:33:49,592 --> 03:33:54,159
限制，所以我应该能够自由调整大小，希望让我们看看

2309
03:33:54,159 --> 03:33:57,592
它不会让我调整这个尺寸，但这没关系，所以我要做的是

2310
03:33:57,592 --> 03:34:01,040
我要看看这个视图，看看它的大小我可以看到那个视图是

2311
03:34:01,040 --> 03:34:07,191
896 然后我会去我的发射图像并说好吧你的身高也是 896。所以

2312
03:34:07,191 --> 03:34:11,119
这将确保我的启动图像的高度完全相同

2313
03:34:11,119 --> 03:34:15,040
高度作为视图然后我要看看视图是四个

2314
03:34:15,040 --> 03:34:19,040
一四，我要去发射图片说你也是四

2315
03:34:19,040 --> 03:34:23,680
四一四好吧，所以现在图像容器实际上

2316
03:34:23,680 --> 03:34:29,119
看起来不错，但是这个启动图像现在具有硬编码的硬编码值

2317
03:34:29,119 --> 03:34:34,231
宽度和硬编码高度是 x 和 y 和 y 都很好但是

2318
03:34:34,231 --> 03:34:38,231
我们需要做的是为它创建一些约束，约束是

2319
03:34:38,231 --> 03:34:41,040
从字面上看，我的意思是我们不会在这个时候进入原生 ios 开发

2320
03:34:41,040 --> 03:34:44,231
时刻，所以您需要自己对此有所了解，如果您

2321
03:34:44,231 --> 03:34:48,639
我不是要快速告诉你我们是如何创建这些约束的吗

2322
03:34:48,639 --> 03:34:54,159
所以我们需要做的是点击我们的启动图像，然后拖动

2323
03:34:54,159 --> 03:34:58,799
并按住键盘上的控制按钮好吧

2324
03:34:58,799 --> 03:35:00,639
所以点击

2325
03:35:00,639 --> 03:35:05,511
按住控制并从启动图像拖动到视图中

2326
03:35:05,511 --> 03:35:09,360
像这样然后这个菜单出现在屏幕上并且

2327
03:35:09,360 --> 03:35:14,231
然后在你的 macintosh 上按住你电脑上的 shift 键并说你

2328
03:35:14,231 --> 03:35:18,080
想要等宽等高

2329
03:35:18,080 --> 03:35:24,400
你也想看到领先的空间，你想说

2330
03:35:24,400 --> 03:35:28,080
我们还想要什么是的

2331
03:35:28,080 --> 03:35:33,279
现在很好 我想说我的意思是理想情况下我们想要的是这个屏幕

2332
03:35:33,279 --> 03:35:37,040
也在中心，所以也许我们可以说中心水平和

2333
03:35:37,040 --> 03:35:41,759
垂直居中，所以在按住 shift 键时检查这四个项目

2334
03:35:41,759 --> 03:35:46,159
按钮，然后您可以松开 shift 按钮，然后单击此处

2335
03:35:46,159 --> 03:35:48,871
屏幕上的任何地方都可以忽略它

2336
03:35:48,871 --> 03:35:52,551
所以现在你可以看到 xcode 对我们创建的约束也很满意

2337
03:35:52,551 --> 03:35:56,639
那么我们需要做的就是告诉这个图像缩放

2338
03:35:56,639 --> 03:36:00,479
根据它的宽度和高度，让我们进入这个名为

2339
03:36:00,479 --> 03:36:03,360
让我们看看这个标签实际上叫什么

2340
03:36:03,360 --> 03:36:08,799
属性检查器和这个缩放实际上在这里

2341
03:36:08,799 --> 03:36:14,000
它真的不是规模，我相信它应该是这里的内容模式，让我们

2342
03:36:14,000 --> 03:36:20,159
只是说它的纵横比合适，所以它保持纵横比

2343
03:36:20,159 --> 03:36:24,639
原始图像，但它也确保它就像是的，它适合

2344
03:36:24,639 --> 03:36:31,759
屏幕现在还可以，所以让我们这样吧

2345
03:36:31,759 --> 03:36:37,511
好吧，那么让我们继续，看看这看起来是否还好，那又怎样

2346
03:36:37,511 --> 03:36:42,080
我们可以做的是用 xcode 编写让我们说是的

2347
03:36:42,080 --> 03:36:48,400
让我们在 ios 13 pro 上运行，我相信它是模拟器，我已经有了

2348
03:36:48,400 --> 03:36:51,759
在这里和从

2349
03:36:51,759 --> 03:36:56,720
从 xcode 本身我们可以按下运行按钮来看看这是如何

2350
03:36:56,720 --> 03:37:01,191
实际上看起来像，虽然这个构建过程正在进行，你也可以去你的

2351
03:37:01,191 --> 03:37:05,831
模拟器在这里说文件并打开模拟器，我只是要去

2352
03:37:05,831 --> 03:37:12,080
选择另一个模拟器，例如 iphone 8 plus 好的，这只是个好主意

2353
03:37:12,080 --> 03:37:16,319
通常用于测试您的启动画面和您的应用程序的功能

2354
03:37:16,319 --> 03:37:22,799
尽可能多的设备和模拟器我的意思是我实际上更喜欢在真实环境中进行测试

2355
03:37:22,799 --> 03:37:26,639
设备，但现在它相当

2356
03:37:26,639 --> 03:37:29,831
我很难在屏幕上带这么多测试设备，所以我就走了

2357
03:37:29,831 --> 03:37:33,279
使用模拟器测试启动画面好吗

2358
03:37:33,279 --> 03:37:38,400
所以现在我们要做的只是为 iphone 13 编译我们的应用程序

2359
03:37:38,400 --> 03:37:42,831
pro 是我们迄今为止一直在使用的模拟器

2360
03:37:42,831 --> 03:37:46,959
实例嗯测试我们的应用程序所以让我们移动

2361
03:37:46,959 --> 03:37:50,080
这是后台因为这不是我们的应用程序这是我们的

2362
03:37:50,080 --> 03:37:55,439
应用程序，所以让我们把它带到这里，让我们

2363
03:37:55,439 --> 03:38:00,871
只需给 xcode 一些时间来完成构建所需的工作

2364
03:38:00,871 --> 03:38:05,040
我们这个模拟器的应用程序，并安装它并运行它，以便我们

2365
03:38:05,040 --> 03:38:08,720
可以看一下启动画面，所以我要

2366
03:38:08,720 --> 03:38:13,360
等到该过程完成

2367
03:38:13,360 --> 03:38:20,551
好的，现在我们的应用程序正在一个名为 iphone 13 pro 的模拟器上运行，所以

2368
03:38:20,551 --> 03:38:24,639
我们需要做的是真正终止应用程序的运行，因为

2369
03:38:24,639 --> 03:38:28,551
应用程序启动后，我们甚至不会看到启动屏幕

2370
03:38:28,551 --> 03:38:32,551
例如，如果您使用命令 shift h 将应用程序发送到后台

2371
03:38:32,551 --> 03:38:36,551
将应用程序发送到家并重新启动没有启动

2372
03:38:36,551 --> 03:38:40,959
屏幕记住应用程序的启动屏幕仅在

2373
03:38:40,959 --> 03:38:45,592
应用程序完全死了，它是冷启动，所以为了发送

2374
03:38:45,592 --> 03:38:49,119
为了基本上杀死应用程序，你可以做的就是按下

2375
03:38:49,119 --> 03:38:52,959
xcode 上的停止按钮，这基本上会杀死调试

2376
03:38:52,959 --> 03:38:57,439
处理并且现在也杀死应用程序

2377
03:38:57,439 --> 03:39:01,511
您实际上可以单击主屏幕中的应用程序，然后

2378
03:39:01,511 --> 03:39:05,119
把它带到前台，正如你所看到的，那是小闪屏

2379
03:39:05,119 --> 03:39:08,959
我们在屏幕上看到的，所以我要杀掉这个应用程序并重新启动它

2380
03:39:08,959 --> 03:39:13,680
这就是我们的启动画面，所以在 iphone 13 上看起来确实不错

2381
03:39:13,680 --> 03:39:19,759
亲，让我们现在在这里更改目标，并将其更改为我们的 iphone 8 plus

2382
03:39:19,759 --> 03:39:23,040
这是我在这里提出的另一个模拟器

2383
03:39:23,040 --> 03:39:27,831
原因是 iphone 8 plus 仍然是

2384
03:39:27,831 --> 03:39:32,319
市场上很多人都有 iphone 8 plus 屏幕很棒

2385
03:39:32,319 --> 03:39:37,279
人们仍在使用的出色手机以及两者之间的巨大差异

2386
03:39:37,279 --> 03:39:43,191
iphone 8 plus 和 iphone 13 pro 是 iphone 8 plus 没有刘海所以没有

2387
03:39:43,191 --> 03:39:48,639
嗯，你可以在 iphone 13 pro 上看到这个缺口，它有一个

2388
03:39:48,639 --> 03:39:53,439
主页按钮，所以这是我们必须考虑的一点点

2389
03:39:53,439 --> 03:39:56,871
你需要在多个设备上测试你的应用程序，现在我要

2390
03:39:56,871 --> 03:40:00,871
杀死应用程序哎呀，我实际上不知道我做了什么

2391
03:40:00,871 --> 03:40:04,959
让我们进入这里，我将终止 iphone 8 plus 上的调试过程

2392
03:40:04,959 --> 03:40:09,592
好吧，再次运行它，让我从这里删除这个旧应用程序，这样我们就可以了

2393
03:40:09,592 --> 03:40:13,439
我们不会感到困惑，如果您运行该应用程序，您只是

2394
03:40:13,439 --> 03:40:17,191
暂时看到启动画面看起来不那么的应用程序

2395
03:40:17,191 --> 03:40:23,191
很好，它做得不太好，所以如果我再次运行它，你看到间距了吗

2396
03:40:23,191 --> 03:40:27,279
如果您暂停视频，您会看到它的左右

2397
03:40:27,279 --> 03:40:31,119
那是因为我们在这里的纵横比有点问题

2398
03:40:31,119 --> 03:40:35,439
因为你记得在这个发射发射发射图像我们说方面适合我们

2399
03:40:35,439 --> 03:40:40,231
需要做的只是说方面填充和方面填充它试图做什么

2400
03:40:40,231 --> 03:40:44,159
保持它不尝试它保持纵横比但它始终确保

2401
03:40:44,159 --> 03:40:49,360
图像至少与其容器一样大，所以这样做了

2402
03:40:49,360 --> 03:40:52,720
让我们在 iphone 8 plus 上再次运行应用程序

2403
03:40:52,720 --> 03:41:00,000
考虑到这种变化，让我们看看应用程序的外观

2404
03:41:00,000 --> 03:41:04,479
现在看起来好多了，所以左右两边都没有空白了

2405
03:41:04,479 --> 03:41:09,511
会像这样杀死应用程序发送它提出它

2406
03:41:09,511 --> 03:41:13,511
让我们看看哦，这是因为我的调试调试过程我刚刚杀死了我的调试

2407
03:41:13,511 --> 03:41:18,231
过程所以让我们再次像这样杀死它让我们看看

2408
03:41:18,231 --> 03:41:21,592
如果我能做到的话会杀死应用程序

2409
03:41:21,592 --> 03:41:24,720
并打开它，现在我可以看到这个飞溅

2410
03:41:24,720 --> 03:41:29,680
屏幕实际上在 iphone 8 plus 上看起来也不错

2411
03:41:29,680 --> 03:41:35,040
很好，现在事情在 ios 上运行良好，我们需要专注于 android 所以

2412
03:41:35,040 --> 03:41:40,000
让我为我们将要讨论的下一部分提出标题

2413
03:41:40,000 --> 03:41:44,479
我们将在这里讨论android斜线屏幕我也会尝试打开它

2414
03:41:44,479 --> 03:41:47,831
网址所以让我把它带到这里

2415
03:41:47,831 --> 03:41:51,511
所以你会看到有关于创建splash的官方文档

2416
03:41:51,511 --> 03:41:54,479
安卓屏幕以及 developerandroid.com

2417
03:41:54,479 --> 03:41:59,119
引导主题 ui 飞溅斜线 嗯

2418
03:41:59,119 --> 03:42:02,080
启动破折号屏幕和

2419
03:42:02,080 --> 03:42:05,759
嗯，这里有很多信息，你可以看看和喜欢

2420
03:42:05,759 --> 03:42:09,439
甚至动画，你可以在这里看到闪屏对 android 意味着什么

2421
03:42:09,439 --> 03:42:14,400
应用程序，你甚至可以为它们制作动画等等，所以我建议

2422
03:42:14,400 --> 03:42:18,959
您实际上阅读了 android 上启动屏幕的文档以获取

2423
03:42:18,959 --> 03:42:23,191
更好地理解 ios 闪屏和 android 之间的区别

2424
03:42:23,191 --> 03:42:27,511
闪屏总是很高兴知道我喜欢底层实现和

2425
03:42:27,511 --> 03:42:31,912
如果您不是 Flutter 开发人员，它实际上是如何工作的

2426
03:42:31,912 --> 03:42:35,439
必须只关注颤振，但你因为你正在部署

2427
03:42:35,439 --> 03:42:41,360
您的应用程序兼容例如 mac os linux windows 和

2428
03:42:41,360 --> 03:42:44,959
android 在我看来总是很高兴知道

2429
03:42:44,959 --> 03:42:49,439
它是如何在引擎盖下工作的，所以如果你想看看这个

2430
03:42:49,439 --> 03:42:53,912
请继续阅读有关其工作原理的文档，现在

2431
03:42:53,912 --> 03:42:59,040
让我们来看看堆栈溢出的链接的一点美

2432
03:42:59,040 --> 03:43:01,831
这是我最喜欢的网站之一

2433
03:43:01,831 --> 03:43:05,040
嗯，我什至想不到的解决方案

2434
03:43:05,040 --> 03:43:09,592
对不起，我找不到答案的问题，所以我们走吧

2435
03:43:09,592 --> 03:43:13,759
提前看看这里的这个网址，它将向您解释

2436
03:43:13,759 --> 03:43:18,479
我们必须为启动屏幕提供不同的分辨率

2437
03:43:18,479 --> 03:43:23,439
android 设备，你在这里看到了我们的 figma 设计

2438
03:43:23,439 --> 03:43:27,439
现在要加载了，对不起，嗯

2439
03:43:27,439 --> 03:43:31,759
所以在这里你看到了当我们导出我们的

2440
03:43:31,759 --> 03:43:35,119
哦，这个便利贴不应该在那里我不知道为什么它被添加在那里所以我

2441
03:43:35,119 --> 03:43:39,680
只是要删除它，我希望我们实际上并没有创建我们的

2442
03:43:39,680 --> 03:43:43,831
在启动画面中，我们可以通过调出 xcode 来仔细检查

2443
03:43:43,831 --> 03:43:46,720
看看我们的资产

2444
03:43:46,720 --> 03:43:50,479
看看这些显示 finder 的图像

2445
03:43:50,479 --> 03:43:53,759
对不起，我要提出来，我可以看到那个小便笺不是

2446
03:43:53,759 --> 03:43:57,680
在我们的启动画面中，这真的很好，这可能是一个错误

2447
03:43:57,680 --> 03:44:02,319
从我的角度来看，这很棒，所以正如你在 ios 上看到的那样，我们

2448
03:44:02,319 --> 03:44:07,592
在这里导出这些资产 三二一 x

2449
03:44:07,592 --> 03:44:12,720
有这些后缀所以 2 x 4 2 x 3 x 代表 3 x 而没有

2450
03:44:12,720 --> 03:44:17,511
一台 x 设备上的正常 um 闪屏，但在

2451
03:44:17,511 --> 03:44:21,831
android 还有很多我们要导出的，所以我会在这里打开那个 url

2452
03:44:21,831 --> 03:44:27,119
你可以你也会看到，你会看到这些是各种各样的

2453
03:44:27,119 --> 03:44:31,592
我们必须为android上的拼接屏幕导出的分辨率我们不是

2454
03:44:31,592 --> 03:44:36,639
在我们在这里支持ldb ldpi的应用程序中，所以我们将去

2455
03:44:36,639 --> 03:44:44,871
导出 mdpi hdpi xhdpi 等等等等，让我们现在继续你的 f​​igma 设计

2456
03:44:44,871 --> 03:44:48,959
在那里从左侧选择您的启动画面，然后继续

2457
03:44:48,959 --> 03:44:54,551
请删除我们之前创建的所有这些导出

2458
03:44:54,551 --> 03:44:58,959
我们现在需要做的是确保我们符合 mdpi 的这些尺寸

2459
03:44:58,959 --> 03:45:02,319
例如，我们将基本上选择启动画面和

2460
03:45:02,319 --> 03:45:06,799
说出口，让我们在这里看看

2461
03:45:06,799 --> 03:45:12,639
好吧，这些是尺寸，所以 1x 让我们说我们不想要任何后缀

2462
03:45:12,639 --> 03:45:16,159
我之前已经准备过类似的东西，所以让我告诉你怎么做

2463
03:45:16,159 --> 03:45:20,959
它应该看起来像，我要在这里选择这个飞溅

2464
03:45:20,959 --> 03:45:25,279
你可以看到这几乎就是你应该如何创建它所以一个 x 我们说

2465
03:45:25,279 --> 03:45:30,720
mdpi，因为它在这里显示 mdpi 你看到然后我们说一个半 x

2466
03:45:30,720 --> 03:45:36,799
hdpi 和 xhdpi 等是否可以，所以让我们继续在我们的

2467
03:45:36,799 --> 03:45:40,720
启动画面在这里所以一个 x 和你可以看到的一样

2468
03:45:40,720 --> 03:45:46,231
我更喜欢这里一个 x 是 mdpi 所以让我们继续说一个后缀是 mdpi

2469
03:45:46,231 --> 03:45:50,000
像这样我会在这里创建另一个出口

2470
03:45:50,000 --> 03:45:56,080
在这种情况下，我们需要 hdpi，它是一个半 x，所以让我们选择这个

2471
03:45:56,080 --> 03:46:01,040
说一个半x，我们就这样说hdpi

2472
03:46:01,040 --> 03:46:06,479
然后我们去下一个是 xhdpi 所以让我们去按

2473
03:46:06,479 --> 03:46:11,439
加号按钮在这里说 2x 是 x hdpi

2474
03:46:11,439 --> 03:46:15,279
然后我们进入下一个级别，即 xxhdpi

2475
03:46:15,279 --> 03:46:19,119
所以让我们按下加号按钮并说

2476
03:46:19,119 --> 03:46:23,759
呃，这需要是 x x hdpi 好的

2477
03:46:23,759 --> 03:46:29,511
所以我们要说xx hdpi，最后但并非最不重要的是我们有三重

2478
03:46:29,511 --> 03:46:34,159
hdpi 是分辨率的四倍，所以我们说 xxx

2479
03:46:34,159 --> 03:46:40,479
一个加号按钮三重 hdpi 在这里应该是 4x 好所以

2480
03:46:40,479 --> 03:46:43,592
现在哎呀我不想创建这个阴影所以

2481
03:46:43,592 --> 03:46:48,639
这就是你的所有这些呃各种分辨率的样子

2482
03:46:48,639 --> 03:46:51,119
这里好

2483
03:46:51,119 --> 03:46:54,959
所以现在我需要你做的就是继续前进，所以请确保你的

2484
03:46:54,959 --> 03:46:58,319
在左侧选择斜线屏幕，然后直接导出

2485
03:46:58,319 --> 03:47:02,551
所有这些，让我们按下导出按钮

2486
03:47:02,551 --> 03:47:06,080
所以这需要时间来计算基本上所有这些不同的

2487
03:47:06,080 --> 03:47:09,360
分辨率为我们准备了png，它将把它们打包成漂亮的

2488
03:47:09,360 --> 03:47:12,551
zip 文件，然后它将下载该打包文件

2489
03:47:12,551 --> 03:47:16,319
对我们来说，根据您的连接速度，这可能需要一些时间，并且

2490
03:47:16,319 --> 03:47:20,000
我可以看到的结果是一个无标题的 2 zip 文件呃

2491
03:47:20,000 --> 03:47:26,080
大约 10 兆字节，所以我们开始吧，让我来

2492
03:47:26,080 --> 03:47:30,231
双击此文件以解压缩它，我将打开

2493
03:47:30,231 --> 03:47:34,080
此处为您提供文件夹，因此您也可以看到启动画面

2494
03:47:34,080 --> 03:47:37,439
这一切都在那里，所以他们看起来都非常相似，但他们有

2495
03:47:37,439 --> 03:47:41,592
如您所见，大小非常不同，因此 xxx hdpi 的大小为

2496
03:47:41,592 --> 03:47:48,231
几乎 4 兆字节，而 mdpi 只有 600 KB，所以

2497
03:47:48,231 --> 03:47:52,231
现在我们得到了完美的图像，所以我们需要做的是嗯

2498
03:47:52,231 --> 03:47:56,479
我们将基本上称它们为初始屏幕，然后放置

2499
03:47:56,479 --> 03:47:59,511
他们里面各种嗯

2500
03:47:59,511 --> 03:48:04,551
我们的 android 应用程序中的 mipmaps 文件夹，所以让我打开可视化

2501
03:48:04,551 --> 03:48:08,080
在这里的工作室代码让我看看我在哪里放置了我的视觉工作室代码

2502
03:48:08,080 --> 03:48:12,231
好吧，如果你那么前

2503
03:48:12,231 --> 03:48:16,000
在这里稍微探索一下，你可以看到我们有一个 ios 文件夹，所以让

2504
03:48:16,000 --> 03:48:18,080
我只是把尺寸放大一点

2505
03:48:18,080 --> 03:48:21,360
对不起，我们这里有一个 android 文件夹，所以

2506
03:48:21,360 --> 03:48:27,119
如果你去 android 然后 app src main 然后 res 你会看到

2507
03:48:27,119 --> 03:48:32,319
你有这些 mipmap 文件夹 hdpi mdpi 和所有那些一二三四五

2508
03:48:32,319 --> 03:48:37,680
我们需要的五个资产的文件夹在这里可以，所以让我们继续吧

2509
03:48:37,680 --> 03:48:42,720
实际上在这里命名这个文件，让我关闭这个我拥有的小文件夹

2510
03:48:42,720 --> 03:48:47,360
在屏幕底部也很好，所以我们从 mdpi 开始

2511
03:48:47,360 --> 03:48:53,279
我们就叫它splash好吧slash png，我就去这个mdpi

2512
03:48:53,279 --> 03:48:57,279
文件夹在这里，我可以看到我有一个启动器图标一个 ic 启动器所以让我们

2513
03:48:57,279 --> 03:49:03,360
如果可以的话，把它拖到mip map mdpi中

2514
03:49:03,360 --> 03:49:08,231
和中间地图 mdpi 就在那里，所以我想要的 mdp 完成了

2515
03:49:08,231 --> 03:49:10,871
现在我要从这里删除它所以现在

2516
03:49:10,871 --> 03:49:16,000
我们有 hdpi 然后我将再次称它为 splash 记住它是 hdpi 所以我

2517
03:49:16,000 --> 03:49:21,360
将其拖放到 hdpi 文件夹中，因此在那里也将其称为 png

2518
03:49:21,360 --> 03:49:25,511
然后我要从这里删除它然后我们有 xhdpi 所以我要

2519
03:49:25,511 --> 03:49:30,871
再次称它为 splash 并记住 xhdpi 所以让我们去拖动

2520
03:49:30,871 --> 03:49:34,592
它在那里很棒然后从这里删除它然后我们有

2521
03:49:34,592 --> 03:49:40,871
xxhdpi 所以再次调用它并把它带到这里的 xx 文件夹中

2522
03:49:40,871 --> 03:49:43,831
我可以看到它就在那里

2523
03:49:43,831 --> 03:49:48,479
最后但并非最不重要的是，我们有三倍 x hdpi，我们将称之为

2524
03:49:48,479 --> 03:49:52,871
再砍一次，然后我们进去把它带到那里

2525
03:49:52,871 --> 03:49:57,912
太好了，所以现在你应该真的看到一二

2526
03:49:57,912 --> 03:50:00,959
三四

2527
03:50:00,959 --> 03:50:06,639
以及我们已经导出并放置在我们的 android 文件夹中的五张图片，所以

2528
03:50:06,639 --> 03:50:10,871
然后我可以安全地删除最后一个

2529
03:50:10,871 --> 03:50:15,439
所以现在我们已经完成了，我们需要实际告诉我们的 android 应用程序

2530
03:50:15,439 --> 03:50:19,191
使用那些闪屏所以我们需要做的是寻找android窗口

2531
03:50:19,191 --> 03:50:23,279
在我们的应用程序中，我将关闭所有这些打开的选项卡并

2532
03:50:23,279 --> 03:50:28,000
我要像那样搜索android窗口背景

2533
03:50:28,000 --> 03:50:33,360
所以你会发现其中四个，但实际上只有两个对我们来说很有趣

2534
03:50:33,360 --> 03:50:38,000
所以我们需要做的实际上是我也会在这里找到我的风格

2535
03:50:38,000 --> 03:50:41,191
如您所见，这里使用的是可绘制对象，但我们没有使用可绘制对象

2536
03:50:41,191 --> 03:50:44,799
可绘制的东西，例如，如果您寻找启动背景，让我们

2537
03:50:44,799 --> 03:50:49,759
进去看看这些很好的启动背景其实是有的

2538
03:50:49,759 --> 03:50:53,592
一个名为launch的drawable哦，我们现在没有它，好吧，所以我

2539
03:50:53,592 --> 03:50:59,119
会搜索 um android 窗口背景，因为它是我们的

2540
03:50:59,119 --> 03:51:02,080
任务所以让我们进去找到那个窗口

2541
03:51:02,080 --> 03:51:05,759
背景和这里你可以看到它说可绘制的启动背景和这个

2542
03:51:05,759 --> 03:51:11,191
文件是 android app src main res values styles xml 所以这是第一个好的

2543
03:51:11,191 --> 03:51:15,680
这是可绘制的，所以我需要你在这里将其更改为 mipmap

2544
03:51:15,680 --> 03:51:20,080
在这里只说 splash 这是我们创建的文件的名称

2545
03:51:20,080 --> 03:51:24,639
这是这个android窗口背景的第一次出现，然后我们

2546
03:51:24,639 --> 03:51:29,279
也要去这里，这是在 android app src main res values knight

2547
03:51:29,279 --> 03:51:34,551
样式xml并像这样调用这个mipmap

2548
03:51:34,551 --> 03:51:40,159
在这里我们也说完美飞溅所以我们改变了那些

2549
03:51:40,159 --> 03:51:44,479
所以我们现在需要做的是在 android 上实际测试我们的更改

2550
03:51:44,479 --> 03:51:49,040
如您所见，我将关闭所有这些选项卡，让我们转到主 dart 文件

2551
03:51:49,040 --> 03:51:53,040
只是打开一个飞镖文件，然后我要停止运行

2552
03:51:53,040 --> 03:51:55,680
这个应用程序，因为我真的不知道我认为它实际上是

2553
03:51:55,680 --> 03:52:00,080
在 um iphone 模拟器上运行应用程序，然后我要说

2554
03:52:00,080 --> 03:52:03,831
macintosh 上的命令 shift p 或 windows 和 linux 上的 ctrl shift p 如果你是

2555
03:52:03,831 --> 03:52:07,360
在视觉工作室代码上，然后说颤振选择设备，如您所见

2556
03:52:07,360 --> 03:52:12,159
在这里，然后我会选择我的安卓手机好吧，正如你所知道的

2557
03:52:12,159 --> 03:52:15,040
前几章我实际上更喜欢运行我的

2558
03:52:15,040 --> 03:52:19,511
应用真手机然后运行再运行不调试

2559
03:52:19,511 --> 03:52:23,279
这将基本上启动我们的 gradle 构建

2560
03:52:23,279 --> 03:52:30,080
在这里处理，在处理过程中我会去把 um scr cpy 带到

2561
03:52:30,080 --> 03:52:34,959
屏幕就在这里，我可以看到

2562
03:52:34,959 --> 03:52:38,000
我们的构建实际上没有发生任何事情

2563
03:52:38,000 --> 03:52:42,639
我认为我们的构建以某种方式崩溃了，所以让我们重新构建，看看会发生什么

2564
03:52:42,639 --> 03:52:47,279
发生调试控制台和

2565
03:52:47,279 --> 03:52:51,759
好的，我可以看到它说有问题，让我们看看另一个预期的

2566
03:52:51,759 --> 03:52:58,080
调用者参考 bot 得到了原始字符串 mid map splash 好的，让我们来看看

2567
03:52:58,080 --> 03:53:03,592
我们实际上用这个中间地图飞溅做了什么我可以看到我实际上已经写了

2568
03:53:03,592 --> 03:53:07,439
我错误地给我写了地图，这样可以解释它是

2569
03:53:07,439 --> 03:53:10,959
中间地图所以如果你在一个地方犯了和我一样的错误，请

2570
03:53:10,959 --> 03:53:15,279
纠正这个，所以它是mipmap，所以

2571
03:53:15,279 --> 03:53:21,040
好吧好吧好吧，现在让我们再次尝试运行应用程序，看看是否

2572
03:53:21,040 --> 03:53:25,191
这次它可以编译所以它说

2573
03:53:25,191 --> 03:53:30,080
它又得到了一个原始字符串，现在我真的输入正确了吗？

2574
03:53:30,080 --> 03:53:34,639
写 mimi 地图，如果我真的写过，这真是难以置信

2575
03:53:34,639 --> 03:53:39,759
这样做了，所以不，我想我实际上已经写过了

2576
03:53:39,759 --> 03:53:43,592
在两个地方不正确所以映射

2577
03:53:43,592 --> 03:53:47,279
好吧，如果我做一个

2578
03:53:47,279 --> 03:53:51,360
在尝试修复我以前的错误时又犯了错误

2579
03:53:51,360 --> 03:53:55,759
所以现在让我们看看android构建是否会成功，所以我会

2580
03:53:55,759 --> 03:54:01,360
在这里等到该任务完成

2581
03:54:01,360 --> 03:54:08,159
好的，它已经成功构建了，我只是要去喝杯咖啡，所以

2582
03:54:08,159 --> 03:54:12,479
它现在正在连接，所以实际上速度非常快，我会说 gradle

2583
03:54:12,479 --> 03:54:16,319
例如，当使用颤振运行时，这里的构建速度非常快

2584
03:54:16,319 --> 03:54:21,511
与 ios xcode 构建系统相比，所以我将在这里提出 scrcpy

2585
03:54:21,511 --> 03:54:24,871
我可以看到应用程序运行没有问题，但我们实际上并没有

2586
03:54:24,871 --> 03:54:28,479
看看我们的启动画面，所以我要做的是

2587
03:54:28,479 --> 03:54:31,511
在这里停止处理，这会杀死

2588
03:54:31,511 --> 03:54:35,680
应用程序然后我会在这里找到我们的应用程序然后打开它

2589
03:54:35,680 --> 03:54:39,831
然后我可以在屏幕上看到我们漂亮的启动画面

2590
03:54:39,831 --> 03:54:44,231
应用程序启动，因此它也可以按预期工作，完全没有问题

2591
03:54:44,231 --> 03:54:48,231
请记住，我们已经完成了很多工作，现在我们已经完成了

2592
03:54:48,231 --> 03:54:51,831
之前的章节，我们也处理了启动画面，所以

2593
03:54:51,831 --> 03:54:54,959
我们已经做了很多，但我们还没有真正承诺过这些

2594
03:54:54,959 --> 03:54:58,400
因为工作还没有完成

2595
03:54:58,400 --> 03:55:02,799
现在我们在两者上都有图标和启动画面

2596
03:55:02,799 --> 03:55:06,479
ios 和 android 我认为是时候像我们通常在结束时那样做

2597
03:55:06,479 --> 03:55:09,759
每一章都是投入我们的工作并确保我们不会输

2598
03:55:09,759 --> 03:55:12,479
所以我要重新洗牌

2599
03:55:12,479 --> 03:55:16,959
屏幕就在这里，我也要在这里增加尺寸，所以我

2600
03:55:16,959 --> 03:55:23,119
像这样去终端然后让我们看看状态

2601
03:55:23,119 --> 03:55:26,871
你可以看到我们已经做了很多工作所以

2602
03:55:26,871 --> 03:55:30,639
如您在此处修改的那样，有许多文件已更改

2603
03:55:30,639 --> 03:55:34,319
修改了大量的工作，所以

2604
03:55:34,319 --> 03:55:40,000
让我们说得到，然后让我们将所有这些工作作为

2605
03:55:40,000 --> 03:55:45,439
是第 28 步吗 是的 第 28 步 好的 所以如果你看看我们的日志

2606
03:55:45,439 --> 03:55:50,639
第 27 步，然后我们还有第 28 步，所以我将推动所有这些更改

2607
03:55:50,639 --> 03:55:55,592
这个推动实际上是一个很大的推动，因为我们有很多资源

2608
03:55:55,592 --> 03:56:00,159
我们正在推送到 github 所以或者无论你在哪里托管你的 git 存储库

2609
03:56:00,159 --> 03:56:04,551
可能是 bitbucket 或其他地方，但取决于您的连接和

2610
03:56:04,551 --> 03:56:08,720
您的主机接收这些文件的能力，此操作实际上可能需要

2611
03:56:08,720 --> 03:56:14,231
一段时间后，在我们完成之后，让我们在第 28 步标记我们的工作

2612
03:56:14,231 --> 03:56:18,319
像这样并推送我们的标签

2613
03:56:18,319 --> 03:56:22,400
好吧，如果我现在说 git tag 我们应该有 26

2614
03:56:22,400 --> 03:56:29,191
27 和 28 排在那里如此完美，我们现在应该没有地位

2615
03:56:29,191 --> 03:56:32,639
很棒，因为这是我们标记后的传统

2616
03:56:32,639 --> 03:56:35,279
在每一章的末尾提交所有内容，我们将讨论我们的内容

2617
03:56:35,279 --> 03:56:38,551
需要在即将到来的章节中讨论

2618
03:56:38,551 --> 03:56:41,119
嗯，我不敢相信我们真的得到了

2619
03:56:41,119 --> 03:56:46,000
到目前为止，这对我和我来说都是如此重要的时刻

2620
03:56:46,000 --> 03:56:50,799
希望它也适合你，因为我们实际上要提交我们的 ios

2621
03:56:50,799 --> 03:56:55,119
应用到应用商店，所以如果你想，事不宜迟

2622
03:56:55,119 --> 03:56:58,871
请吃点点心，我们下一章见

2623
03:56:58,871 --> 03:57:02,479
你好，欢迎来到 slatter 课程的第 47 章

2624
03:57:02,479 --> 03:57:05,912
呃，我们等这一刻已经很久了，至少我有

2625
03:57:05,912 --> 03:57:09,912
所以我们一直在使用我们一直在做的块开发我们的应用程序

2626
03:57:09,912 --> 03:57:14,319
我们准备了启动屏幕图标等小部件的大量工作

2627
03:57:14,319 --> 03:57:18,159
我们甚至用 figma 弄脏了我们的手可能是你们中的许多人的任务

2628
03:57:18,159 --> 03:57:22,871
以前没做过所以现在剩下的很好我们要发送

2629
03:57:22,871 --> 03:57:28,479
我们的应用程序到 ios 应用商店，这给了我很大的压力

2630
03:57:28,479 --> 03:57:31,592
很高兴宣布我们将这样做

2631
03:57:31,592 --> 03:57:36,080
我们需要做什么才能与应用商店交互

2632
03:57:36,080 --> 03:57:38,319
也是为了能够创建您的

2633
03:57:38,319 --> 03:57:43,191
应用程序当然你需要有一个Macintosh，那就是

2634
03:57:43,191 --> 03:57:46,720
正如我在处理 ios 开发时提到的一个不幸的事实

2635
03:57:46,720 --> 03:57:51,040
但如果您没有 Macintosh，您可以随时联系朋友或者您

2636
03:57:51,040 --> 03:57:55,279
使用互联网上的服务，例如可以获取您的源代码和

2637
03:57:55,279 --> 03:57:58,959
为您构建您的应用程序我不知道这些服务是否存在

2638
03:57:58,959 --> 03:58:02,159
让我们接受这个事实 不幸的事实是你需要

2639
03:58:02,159 --> 03:58:06,000
有一个 Macintosh 以构建您的应用程序并将其发送到 ios 应用程序

2640
03:58:06,000 --> 03:58:08,479
如此存放

2641
03:58:08,479 --> 03:58:13,360
当您为 um 创建应用程序时，我们实际上需要您查看什么

2642
03:58:13,360 --> 03:58:17,759
苹果你需要将它捆绑在一个几乎只是一个 zip 的文件中

2643
03:58:17,759 --> 03:58:23,680
文件，但它的扩展名为 ipa，这个 zip 文件本质上包含

2644
03:58:23,680 --> 03:58:27,680
您的整个应用程序捆绑了所有资源和所有

2645
03:58:27,680 --> 03:58:32,959
从您身边签名的二进制文件，然后您只需将其提交给苹果

2646
03:58:32,959 --> 03:58:36,479
然后这个提交将去

2647
03:58:36,479 --> 03:58:39,831
所谓的应用商店连接和嗯

2648
03:58:39,831 --> 03:58:44,231
我们现在要讨论应用商店连接实际上是什么，所以你

2649
03:58:44,231 --> 03:58:46,959
看看你什么时候开发你的颤振

2650
03:58:46,959 --> 03:58:49,759
例如应用程序，然后您正在与 firebase 交谈

2651
03:58:49,759 --> 03:58:54,000
您正在与 firebase sdk 交谈的代码，但在后端

2652
03:58:54,000 --> 03:58:58,959
firebase 然后有一个完整的控制台，所以在 console.firebase

2653
03:58:58,959 --> 03:59:02,231
google.com 我认为它被称为或者如果你只是谷歌它并说

2654
03:59:02,231 --> 03:59:05,279
firebase 控制台，您将达到这一点，并且

2655
03:59:05,279 --> 03:59:07,680
应用商店连接是

2656
03:59:07,680 --> 03:59:13,511
ios 开发人员的 firebase 控制台，因此您基本上可以在其中管理您的

2657
03:59:13,511 --> 03:59:16,799
应用提交给您的评论

2658
03:59:16,799 --> 03:59:21,592
您可以回复这些评论的应用程序，就像后端一样

2659
03:59:21,592 --> 03:59:25,511
嗯有点像应用程序的前端

2660
03:59:25,511 --> 03:59:28,959
商店的后端，你可以说它是你的门户

2661
03:59:28,959 --> 03:59:32,799
基本上以开发者身份去应用商店

2662
03:59:32,799 --> 03:59:37,279
谷歌也有类似的东西，那就是谷歌开发者控制台

2663
03:59:37,279 --> 03:59:42,231
对不起，我们现在需要做什么

2664
03:59:42,231 --> 03:59:47,439
能够继续我们需要在应用商店上实际创建我们的应用程序

2665
03:59:47,439 --> 03:59:51,439
连接所以我要在这里做的是我要打开应用商店

2666
03:59:51,439 --> 03:59:54,720
连接，我已经使用我的开发者帐户登录

2667
03:59:54,720 --> 03:59:58,479
让我们进入这里，你可以看到这些是我想要的一些应用程序

2668
03:59:58,479 --> 04:00:02,799
之前提交给苹果，如果我可以增加这个的大小，让我们

2669
04:00:02,799 --> 04:00:05,759
看看它是否可以正常工作

2670
04:00:05,759 --> 04:00:10,231
所以我们需要做的是为了能够提交我们的申请，如果我们

2671
04:00:10,231 --> 04:00:13,831
我们之前没有为这个特定的应用程序这样做过

2672
04:00:13,831 --> 04:00:17,360
我们需要在 app store 上创建一个应用程序连接好的，所以请去

2673
04:00:17,360 --> 04:00:21,040
appstoreconnect.apple.com 然后你会看到一个

2674
04:00:21,040 --> 04:00:23,912
屏幕询问您是否可以使用 App Store Connect 和它来做什么

2675
04:00:23,912 --> 04:00:28,231
有点像我的应用程序应用程序分析等

2676
04:00:28,231 --> 04:00:32,639
这实际上是我假设您具有管理员访问权限

2677
04:00:32,639 --> 04:00:35,680
到应用商店连接，因为应用程序像许多其他应用程序一样连接

2678
04:00:35,680 --> 04:00:39,680
前端它有权限它就像基于权限的所以

2679
04:00:39,680 --> 04:00:43,592
例如，如果您正在与一家公司合作并且该公司已邀请您

2680
04:00:43,592 --> 04:00:47,191
到他们自己的应用商店连接帐户，并取决于

2681
04:00:47,191 --> 04:00:53,759
他们为您设置了您可能无法访问一个或所有应用程序，因此

2682
04:00:53,759 --> 04:00:58,400
它也是基于应用程序的权限，所以我可以邀请你加入我的应用程序

2683
04:00:58,400 --> 04:01:02,231
store connect 并且只允许您访问此应用程序和

2684
04:01:02,231 --> 04:01:07,040
只给你一个非常有限的访问权限或管理员访问权限

2685
04:01:07,040 --> 04:01:11,279
因此，如果您因为被邀请而无权访问此应用部分

2686
04:01:11,279 --> 04:01:15,680
嗯作为用户到别人的应用商店连接帐户，他们没有给

2687
04:01:15,680 --> 04:01:20,080
您有权访问他们的应用程序，因此您需要询问他们

2688
04:01:20,080 --> 04:01:24,319
权限基本上是为了增加你的权限级别

2689
04:01:24,319 --> 04:01:27,680
所以让我们继续按下这个加号按钮，这就是我们要去的地方

2690
04:01:27,680 --> 04:01:31,680
说新应用程序，在这里它会问你好吧，它是什么类型的应用程序

2691
04:01:31,680 --> 04:01:36,551
一个 ios 应用程序它不是一个 mac os 就像我们还没有真正在原生 mac os 上工作过

2692
04:01:36,551 --> 04:01:40,231
应用程序虽然用户

2693
04:01:40,231 --> 04:01:44,159
现在在 Macintosh 上使用 m1 处理器

2694
04:01:44,159 --> 04:01:48,639
macintosh 是基于 arm 的，它们实际上可以将 ios 应用程序安装为

2695
04:01:48,639 --> 04:01:52,000
你很快就会看到我们正在开发的这个应用程序，我们没有

2696
04:01:52,000 --> 04:01:56,551
实际上为它创建了一个 macintosh 目标，但即使它是一个 ios

2697
04:01:56,551 --> 04:02:00,551
应用程序，您仍然可以通过试飞或稍后安装它

2698
04:02:00,551 --> 04:02:04,479
实际在ios应用商店发布 你可以用mac应用安装

2699
04:02:04,479 --> 04:02:07,759
存储在你的 Macintosh 上，非常可爱

2700
04:02:07,759 --> 04:02:11,040
好的，所以在这里你需要在名称字段中做一个

2701
04:02:11,040 --> 04:02:16,319
您需要在整个应用商店中找到一个唯一的名称有数百万

2702
04:02:16,319 --> 04:02:19,680
我的应用程序实际上是在编造这个统计数据，我不知道是不是

2703
04:02:19,680 --> 04:02:23,119
像成千上万的应用程序或数百万但让我们只是

2704
04:02:23,119 --> 04:02:26,000
让我们说几百万因为更容易说

2705
04:02:26,000 --> 04:02:29,191
所有这些应用程序都在应用程序商店中，您必须为其找到唯一名称

2706
04:02:29,191 --> 04:02:35,119
您的应用程序并记住您不能使用保留字，所以如果您查看

2707
04:02:35,119 --> 04:02:38,871
在这里如果我取消这个如果你看这里

2708
04:02:38,871 --> 04:02:43,119
这不是一个可接受的应用程序名称，所以我只是在这里准备好了

2709
04:02:43,119 --> 04:02:47,360
只是为了向您展示，如果您使用例如类似的名称

2710
04:02:47,360 --> 04:02:51,592
firebase 之类的东西可能苹果会拒绝你的

2711
04:02:51,592 --> 04:02:56,159
应用程序和绝对谷歌甚至不会让你去

2712
04:02:56,159 --> 04:03:00,959
google play store 的名称包含您的应用程序名称的一部分

2713
04:03:00,959 --> 04:03:04,720
像firebase这样的产品这样的保留字

2714
04:03:04,720 --> 04:03:08,959
您必须找到一个未保留的唯一名称，所以我们只说 ios 和

2715
04:03:08,959 --> 04:03:13,592
我们应该怎么称呼它我的意思是在我们的应用程序中我们现在称之为我的笔记

2716
04:03:13,592 --> 04:03:18,080
我很确定如果你说我的名字已经被占用了

2717
04:03:18,080 --> 04:03:20,231
所以让我们说我的

2718
04:03:20,231 --> 04:03:26,400
很棒的注释像这样的东西，你可以看到它说它是名字

2719
04:03:26,400 --> 04:03:29,912
会出现在应用商店的，好吧，我很棒的笔记

2720
04:03:29,912 --> 04:03:33,511
在此框中，我们将选择英语的主要语言

2721
04:03:33,511 --> 04:03:37,759
我们会选择我们，因为我们并没有真正专注于

2722
04:03:37,759 --> 04:03:40,639
像我们实际上的方式一样分离我们的语言

2723
04:03:40,639 --> 04:03:43,759
在应用程序中使用我们的字符串与用户交互，以确保

2724
04:03:43,759 --> 04:03:47,511
这就像英国英语或美国英语，所以让我们与国际一起去吧

2725
04:03:47,511 --> 04:03:51,040
我们这里是英语，在这个盒子里你会被问到

2726
04:03:51,040 --> 04:03:55,040
实际选择您的捆绑标识符和应用商店连接有

2727
04:03:55,040 --> 04:03:58,720
然后在您使用应用商店连接登录后，它会连接到

2728
04:03:58,720 --> 04:04:02,959
您登录时使用的此用户的开发者帐户，它将拉取

2729
04:04:02,959 --> 04:04:07,439
将所有捆绑标识符都连接到应用商店，因此您无需输入

2730
04:04:07,439 --> 04:04:11,191
它是手动的，所以让我们去找我的笔记应用程序，你可以在这里看到

2731
04:04:11,191 --> 04:04:15,439
作为史诗般的咸味我的笔记，对你来说，这可能是另一回事

2732
04:04:15,439 --> 04:04:20,159
所以我选择了它，然后 sku 是您的应用程序的唯一 ID，在

2733
04:04:20,159 --> 04:04:23,831
应用商店，所以这主要是给你的 sku 有点像

2734
04:04:23,831 --> 04:04:29,191
它有点像 um old school 当你有一个正常的

2735
04:04:29,191 --> 04:04:33,191
实体店和你的产品有点像一个标识符，所以这是一个

2736
04:04:33,191 --> 04:04:38,159
您的标识符它可能会出现在某些地方，例如当您提取一些

2737
04:04:38,159 --> 04:04:42,400
来自苹果的报告，看看我有多少独特的用户，有多少独特的用户

2738
04:04:42,400 --> 04:04:46,720
安装我有等，所以这个 sku 主要是给你的

2739
04:04:46,720 --> 04:04:49,592
标识符，这样你就可以选择对你有意义的东西

2740
04:04:49,592 --> 04:04:53,759
在这里我只想说零一零一零一

2741
04:04:53,759 --> 04:04:57,191
或者这个然后一一一

2742
04:04:57,191 --> 04:05:01,592
只是把事情做好，用户可以在这里访问，你可以说你

2743
04:05:01,592 --> 04:05:05,511
如果您选择完整，您可以限制哪些用户在应用商店连接中看到此应用

2744
04:05:05,511 --> 04:05:10,720
访问您的所有用户都可以访问该应用程序，因此这就像您限制

2745
04:05:10,720 --> 04:05:14,551
谁可以在您的应用商店中连接帐户谁可以访问此

2746
04:05:14,551 --> 04:05:18,639
应用程序，并且由于我的私人公司中没有任何来宾用户

2747
04:05:18,639 --> 04:05:22,479
帐户我将获得完全访问权限，但如果您正在使用类似

2748
04:05:22,479 --> 04:05:25,912
如果您是帐户所有者，然后您还有其他人

2749
04:05:25,912 --> 04:05:29,831
被邀请到不希望访问的应用商店连接

2750
04:05:29,831 --> 04:05:33,912
帐户，您可以进入此处，基本上说限制对此的访问

2751
04:05:33,912 --> 04:05:37,119
应用到这些帐户，但我将获得完全访问权限，好吧

2752
04:05:37,119 --> 04:05:40,720
我要说的是创造，在这里你可能会得到一个

2753
04:05:40,720 --> 04:05:44,400
应用程序名称有问题，所以让我们尝试一下，看看我的

2754
04:05:44,400 --> 04:05:48,400
很棒的笔记是别人取的名字，我们会知道的

2755
04:05:48,400 --> 04:05:52,400
很快，从它的外观看来

2756
04:05:52,400 --> 04:05:57,759
就像那样，我的精彩笔记是一个蹩脚的名字，没有人会这样取

2757
04:05:57,759 --> 04:06:03,831
所以这对我们来说很棒所以现在我们已经创建了应用程序并且嗯

2758
04:06:03,831 --> 04:06:07,831
这部分基本上已经完成，你可以在这里看到第一个

2759
04:06:07,831 --> 04:06:12,639
你必须在这个屏幕上输入的东西让我实际增加尺寸

2760
04:06:12,639 --> 04:06:17,119
让我在这里稍微改变一下屏幕布局好吗

2761
04:06:17,119 --> 04:06:21,360
所以我们在屏幕上看到的第一件事就是呃有一个版本

2762
04:06:21,360 --> 04:06:24,231
信息，还有应用程序预览和屏幕截图，这是

2763
04:06:24,231 --> 04:06:27,592
我们要将屏幕截图上传到应用商店的地方

2764
04:06:27,592 --> 04:06:30,959
正如您在屏幕底部看到的那样，您采取的措施非常重要

2765
04:06:30,959 --> 04:06:35,912
你的截图首先在 iphone 13 pro max 上，因为那是

2766
04:06:35,912 --> 04:06:40,000
带有六英寸半显示屏的 iphone，你可能会想

2767
04:06:40,000 --> 04:06:44,159
尝试在 iphone 13 pro 上截屏，但如果你这样做了

2768
04:06:44,159 --> 04:06:47,191
上传后你会明白你会从应用商店收到错误消息

2769
04:06:47,191 --> 04:06:52,479
连接说分辨率不符合预期所以我们

2770
04:06:52,479 --> 04:06:57,360
这里需要做的是去我们的iphone um模拟器所以我有很多

2771
04:06:57,360 --> 04:07:01,360
他们在这里，所以这是我们的 iphone 13 pro

2772
04:07:01,360 --> 04:07:08,080
这是我们的 iphone 8 plus，还有我们的 iphone 13 pro max

2773
04:07:08,080 --> 04:07:12,720
所以现在我们的责任是在这个模拟器上实际截取屏幕截图

2774
04:07:12,720 --> 04:07:16,479
但是你会注意到我们这里有一个小问题

2775
04:07:16,479 --> 04:07:20,080
很好的问题，但是对于截屏来说，这有点麻烦

2776
04:07:20,080 --> 04:07:23,912
问题在于我们在这里有这种调试方式，我就是那个颤抖

2777
04:07:23,912 --> 04:07:27,360
默认情况下创建，所以如果我在这里放大一点你会看到它

2778
04:07:27,360 --> 04:07:30,479
它只是在这里说调试，我们需要确保我们删除它

2779
04:07:30,479 --> 04:07:34,231
在截取我们的截图之前，我要做的是我要回去

2780
04:07:34,231 --> 04:07:38,080
到我们的源代码，所以让我们进入这里

2781
04:07:38,080 --> 04:07:42,159
你现在可以看到应用程序在 iphone 8 plus 上运行

2782
04:07:42,159 --> 04:07:46,720
这是左侧的模拟器，以便删除该调试

2783
04:07:46,720 --> 04:07:52,000
如您所见，您要做的就是转到您的主要 um dart 文件

2784
04:07:52,000 --> 04:07:55,360
并转到您已正确创建材料应用程序的主要功能

2785
04:07:55,360 --> 04:07:59,680
在标题之后，甚至在你可以说横幅是调试显示之前

2786
04:07:59,680 --> 04:08:03,119
检查模式横幅并将该参数设置为false，然后我将要做一个

2787
04:08:03,119 --> 04:08:07,279
hot reload 实际上是 hot restart 我们必须这样做

2788
04:08:07,279 --> 04:08:12,639
哦，我什至没有运行它，所以让我们颤抖选择设备 8 plus 然后

2789
04:08:12,639 --> 04:08:17,511
我要说的是在没有调试的情况下运行，所以你需要确保你删除

2790
04:08:17,511 --> 04:08:21,831
那个 um 调试显示检查模式横幅，我开始不删除它，你必须

2791
04:08:21,831 --> 04:08:26,479
通过将此参数设置为 false 来删除横幅，现在它将

2792
04:08:26,479 --> 04:08:31,119
基本上在 iphone 8 plus 上运行应用程序，它会向我们展示

2793
04:08:31,119 --> 04:08:33,831
结果，因此此调试横幅将消失

2794
04:08:33,831 --> 04:08:37,119
这样做之后，当我们看到它在 iphone 8 plus 上运行时

2795
04:08:37,119 --> 04:08:40,231
然后我们将做同样的事情做一个颤振选择设备并运行

2796
04:08:40,231 --> 04:08:45,759
iphone 13 pro max 上的应用程序，因此此过程取决于您的机器

2797
04:08:45,759 --> 04:08:50,479
取决于您的设置等，这可能需要一段时间，所以我会在这里等待

2798
04:08:50,479 --> 04:08:54,319
现在执行此操作，运行正常，这是 8 加

2799
04:08:54,319 --> 04:08:57,759
太好了，现在已经完成了，我要关闭它并停止调试

2800
04:08:57,759 --> 04:09:02,231
处理并说颤动选择设备并从max中选择iphone 13

2801
04:09:02,231 --> 04:09:06,720
并做同样的事情运行没有调试好

2802
04:09:06,720 --> 04:09:10,000
然后再次取决于机器

2803
04:09:10,000 --> 04:09:12,799
您在此进程上运行此命令可能需要介于

2804
04:09:12,799 --> 04:09:16,871
几秒钟到一分钟甚至更多

2805
04:09:16,871 --> 04:09:20,319
所以我就在这里等着

2806
04:09:20,319 --> 04:09:25,439
经历的过程，嗯，当这实际上发生时，你会

2807
04:09:25,439 --> 04:09:29,040
还需要知道你需要在 iphone 13 pro max 上截图

2808
04:09:29,040 --> 04:09:33,279
和 iphone 8 plus 为了能够覆盖所有需要的屏幕截图

2809
04:09:33,279 --> 04:09:37,439
应用商店连接所以因为我们不需要 iphone 13 pro 我只是要最小化

2810
04:09:37,439 --> 04:09:41,592
它现在进入任务栏，这是 iphone 13 pro max

2811
04:09:41,592 --> 04:09:44,720
所以让我们继续在这里拍摄一些截图，所以我要最小化

2812
04:09:44,720 --> 04:09:49,680
iphone 8 plus 也是如此，所以我们重点关注这个，所以我要在这里做的是

2813
04:09:49,680 --> 04:09:53,831
我要去这个登录字段，现在你可以看到我可以输入

2814
04:09:53,831 --> 04:09:57,191
在这个领域，因为这是一个模拟器，但我没有看到键盘

2815
04:09:57,191 --> 04:10:00,959
但在现实生活中，当用户实际下载您的应用程序并在其上运行时

2816
04:10:00,959 --> 04:10:04,959
他们的 iphone 他们会看到一个键盘，所以更真实

2817
04:10:04,959 --> 04:10:09,360
如果我们将软件键盘也带到屏幕上，那么在您的

2818
04:10:09,360 --> 04:10:13,360
macintosh 我们只需要为键盘执行命令 k 就可以了

2819
04:10:13,360 --> 04:10:17,119
像这样按键盘，所以我要做什么，因为我不喜欢

2820
04:10:17,119 --> 04:10:20,959
此刻正在闪烁的这个胡萝卜 什么

2821
04:10:20,959 --> 04:10:24,400
我要做的就是等到那个胡萝卜出现然后拿一个

2822
04:10:24,400 --> 04:10:28,319
这个 iphone 13 pro max 模拟器的屏幕截图和采取的方式

2823
04:10:28,319 --> 04:10:33,360
在 iphone 模拟器上的 macintosh 上的屏幕截图是按 command s，如

2824
04:10:33,360 --> 04:10:37,360
截图或保存好，所以我只是等待这个护理

2825
04:10:37,360 --> 04:10:40,720
走开，对不起，我也去

2826
04:10:40,720 --> 04:10:45,191
在桌面上并删除已经创建的所有内容

2827
04:10:45,191 --> 04:10:47,680
所以这里是模拟器，这里是

2828
04:10:47,680 --> 04:10:52,400
桌面然后我会等待护理它消失了我截图了所以

2829
04:10:52,400 --> 04:10:56,551
让我们继续在忘记密码屏幕中做同样的事情

2830
04:10:56,551 --> 04:11:01,119
我只是等待护理离开 截图

2831
04:11:01,119 --> 04:11:04,871
然后让我们回到登录屏幕，然后到注册

2832
04:11:04,871 --> 04:11:08,080
就在这里，当护理消失时，我也要截图

2833
04:11:08,080 --> 04:11:10,959
所以这将是我们的第三个屏幕截图 好的，所以我们有一个屏幕截图

2834
04:11:10,959 --> 04:11:13,439
登录屏幕的注册屏幕和

2835
04:11:13,439 --> 04:11:17,360
验证或已验证

2836
04:11:17,360 --> 04:11:22,639
我忘记了密码抱歉，好吧，所以现在我要用一个

2837
04:11:22,639 --> 04:11:26,080
已经存在于应用程序中，以便我们可以截取

2838
04:11:26,080 --> 04:11:28,720
应用程序的主界面也是如此，所以我要截屏

2839
04:11:28,720 --> 04:11:32,720
在我的 Macintosh 上使用 command s 可能是第五个屏幕截图

2840
04:11:32,720 --> 04:11:37,191
还会从你在屏幕上的位置拿一个并编辑你的笔记

2841
04:11:37,191 --> 04:11:41,360
键盘也可以了

2842
04:11:41,360 --> 04:11:45,191
那里也有一个屏幕截图，所以现在你应该得到五个屏幕截图

2843
04:11:45,191 --> 04:11:47,759
对于您的应用程序，因此如果您查看它们，它们应该看起来

2844
04:11:47,759 --> 04:11:52,720
像这样这样这样这样并确保你也没有那个调试

2845
04:11:52,720 --> 04:11:57,191
方式通过删除调试显示检查模式横幅和这样做之后如果

2846
04:11:57,191 --> 04:12:00,231
例如，您已经在模拟器上运行调试会话

2847
04:12:00,231 --> 04:12:04,479
做一个热重启记住热重载不会采取它不会

2848
04:12:04,479 --> 04:12:08,231
让你的 main 函数中的代码生效，所以现在我们有五个

2849
04:12:08,231 --> 04:12:12,000
截图在这里，所以我要回到应用商店连接，然后让我们

2850
04:12:12,000 --> 04:12:16,400
点击此处或单击此处并在媒体管理器中查看所有尺寸

2851
04:12:16,400 --> 04:12:19,592
让我们在这里选择文件然后选择所有这些截图和

2852
04:12:19,592 --> 04:12:23,831
我只想说上传好，所以现在在这里你有

2853
04:12:23,831 --> 04:12:28,159
基本上有机会重新排序这些屏幕截图，所以我想我会放

2854
04:12:28,159 --> 04:12:33,040
也许首先是登录屏幕然后我要去注册然后忘记了

2855
04:12:33,040 --> 04:12:37,119
密码，然后我将把应用程序的主界面

2856
04:12:37,119 --> 04:12:42,799
这里然后实际的新节点屏幕还可以，所以你现在可以看到

2857
04:12:42,799 --> 04:12:46,799
上传六寸半显示屏截图五五

2858
04:12:46,799 --> 04:12:50,871
而八寸显示屏也在使用六分半

2859
04:12:50,871 --> 04:12:54,231
英寸显示屏幕截图，因此它们是相同的屏幕截图，因此您不必

2860
04:12:54,231 --> 04:12:59,511
再次上传它们然后你就有了这个五英寸半的显示器和

2861
04:12:59,511 --> 04:13:04,871
您还必须上传您的屏幕截图，这就是我们需要的

2862
04:13:04,871 --> 04:13:10,479
iphone 8 plus，所以我们要尽量减少这个，

2863
04:13:10,479 --> 04:13:15,040
然后我要在屏幕上调出 iphone 8 plus

2864
04:13:15,040 --> 04:13:19,511
我们将在这里执行完全相同的过程，因此请调出键盘

2865
04:13:19,511 --> 04:13:23,040
胡萝卜消失 登录截​​图

2866
04:13:23,040 --> 04:13:26,639
对不起，我要去忘记密码屏幕

2867
04:13:26,639 --> 04:13:30,871
胡萝卜走了 截图然后我要去注册屏幕

2868
04:13:30,871 --> 04:13:36,000
胡萝卜消失屏幕截图，在登录屏幕中，我将使用

2869
04:13:36,000 --> 04:13:40,400
如果我可以拼写，系统中已经存在的用户

2870
04:13:40,400 --> 04:13:43,191
现在只是

2871
04:13:43,191 --> 04:13:46,159
沙滩球在我身上所以嗯

2872
04:13:46,159 --> 04:13:49,439
哦，这是我的键盘，顺便说一句我看不见

2873
04:13:49,439 --> 04:13:52,639
键盘，所以我可以看到它已被切换到不幸的是瑞典语所以我

2874
04:13:52,639 --> 04:13:57,831
只是要在这里切换到英语

2875
04:13:57,831 --> 04:14:02,000
这对我没有帮助，所以让我们看看

2876
04:14:02,000 --> 04:14:06,231
如果它可以切换到英文请

2877
04:14:06,231 --> 04:14:09,279
英语由于某种原因它仍然显示

2878
04:14:09,279 --> 04:14:13,511
瑞典的东西在这里，我真的不知道为什么，所以我只想说

2879
04:14:13,511 --> 04:14:18,400
gmail.com 和 foo barbados 好吧，他是我的意思

2880
04:14:18,400 --> 04:14:22,799
iphone模拟器也是软件，所以它可能是错误的，所以我要

2881
04:14:22,799 --> 04:14:25,279
让我们看看我们截取了哪些截图

2882
04:14:25,279 --> 04:14:28,720
到目前为止的三个屏幕截图，让我们转到应用程序的主用户界面

2883
04:14:28,720 --> 04:14:32,159
正如我之前提到的那样，另一个带有 command 的命令，让我们在这里

2884
04:14:32,159 --> 04:14:37,592
进入哦，这个屏幕截图会消失吗

2885
04:14:37,592 --> 04:14:42,551
请尽快离开

2886
04:14:42,551 --> 04:14:47,279
它不会消失，请消失，好吧，我认为是 iphone 8

2887
04:14:47,279 --> 04:14:50,400
另外还有一些问题，所以我要做的就是关闭它

2888
04:14:50,400 --> 04:14:54,639
然后说打开模拟器，让我们去8加，我可以在我关闭后看到

2889
04:14:54,639 --> 04:14:58,400
8 plus 模拟器它实际上保存了屏幕截图，所以我们都很棒

2890
04:14:58,400 --> 04:15:02,799
所要做的就是回到我们的应用程序并在屏幕上

2891
04:15:02,799 --> 04:15:06,000
胡萝卜消失后，键盘显示在屏幕上

2892
04:15:06,000 --> 04:15:09,279
我要截图我不确定我是否真的

2893
04:15:09,279 --> 04:15:12,159
在屏幕上没有胡萝卜的情况下在正确的时间做到了，所以让我们来看看

2894
04:15:12,159 --> 04:15:14,871
看

2895
04:15:14,871 --> 04:15:19,360
请走开，好吧，这是截图，所以现在我们有了

2896
04:15:19,360 --> 04:15:23,511
iphone 8 plus 上还有五张截图，所以我基本上要删除这些

2897
04:15:23,511 --> 04:15:27,912
我们从 iphone 13 pro max 那里截取的屏幕截图，让我们去

2898
04:15:27,912 --> 04:15:31,511
应用商店中的五英寸半显示屏部分连接并说选择

2899
04:15:31,511 --> 04:15:35,831
文件，然后我将选择我们从中获取的所有屏幕截图

2900
04:15:35,831 --> 04:15:41,040
iphone 8 plus 并重新排序所以让我们先登录然后我们注册

2901
04:15:41,040 --> 04:15:45,439
忘记密码，然后是应用程序的主界面，然后是新节点

2902
04:15:45,439 --> 04:15:49,680
这与我们在这里所做的完全一致，所以这很好

2903
04:15:49,680 --> 04:15:53,040
通常的想法是确保您的屏幕截图排列在相同的位置

2904
04:15:53,040 --> 04:15:57,279
可以订购不同的设备，所以现在您可以看到所有这些

2905
04:15:57,279 --> 04:16:02,231
其他三种屏幕类型正在使用 iphone 8

2906
04:16:02,231 --> 04:16:06,080
另外我认为模拟器截图还可以

2907
04:16:06,080 --> 04:16:10,799
是的 iphone 8 plus 所以现在我们已经上传了这些，这样你就可以看到更多的截图

2908
04:16:10,799 --> 04:16:16,479
现在已经在那里了，所以 iphone 8 plus 也被上传了，我们完成了

2909
04:16:16,479 --> 04:16:22,551
所以我们现在需要做的就是把ipad pro 12英寸模拟器也调出来

2910
04:16:22,551 --> 04:16:26,479
所以我要去这个模拟器，说文件打开模拟器

2911
04:16:26,479 --> 04:16:31,279
然后说ipad pro，你可以看到我们必须带ipad pro

2912
04:16:31,279 --> 04:16:35,360
12英寸，所以我会像那样点击它

2913
04:16:35,360 --> 04:16:40,319
让我们去 um visual studio code 并说选择设备然后我要

2914
04:16:40,319 --> 04:16:45,680
选择那个 ipad pro，因为它在那里，然后我将停止调试过程

2915
04:16:45,680 --> 04:16:52,231
在 iphone 13 pro max 上然后说在 ipad pro 上运行

2916
04:16:52,231 --> 04:16:56,400
如果你很幸运，那么这个过程实际上会非常快，因为

2917
04:16:56,400 --> 04:17:00,080
应用程序二进制文件已经编译，它应该是

2918
04:17:00,080 --> 04:17:04,871
在 ipad pro 12 上运行的相同应用程序

2919
04:17:04,871 --> 04:17:08,080
0.9 英寸，这取决于你的机器

2920
04:17:08,080 --> 04:17:12,720
过程甚至可能需要几秒钟到几分钟之间的任何时间

2921
04:17:12,720 --> 04:17:16,400
让我们看看这里，让我们进去看看

2922
04:17:16,400 --> 04:17:20,479
你可以看到 app store connect for ipad 的第一部分是要求你

2923
04:17:20,479 --> 04:17:24,479
为 ipad pro 第三代上传

2924
04:17:24,479 --> 04:17:28,871
必须是第三代任何 12 的 ipad pro 和 9 英寸显示屏

2925
04:17:28,871 --> 04:17:33,360
就足够了，所以这是我们在这个屏幕上的应用程序

2926
04:17:33,360 --> 04:17:38,720
显然是巨大的，所以我要去这里调出键盘

2927
04:17:38,720 --> 04:17:43,511
截图然后去忘记我的密码截图然后去

2928
04:17:43,511 --> 04:17:48,231
返回登录并在注册屏幕中截取所有胡萝卜所在的屏幕截图

2929
04:17:48,231 --> 04:17:52,159
已经消失了，让我们仔细检查一下，我要移除 iphone

2930
04:17:52,159 --> 04:17:56,231
8 plus screenshot 所以现在我们在 ipad pro 上有三个 没有胡萝卜 没有 胡萝卜 没有

2931
04:17:56,231 --> 04:18:00,720
胡萝卜，让我们现在进入登录屏幕，我将使用

2932
04:18:00,720 --> 04:18:06,479
现有用户在这里好吧 foo barbat 登录，现在你可以看到主要的

2933
04:18:06,479 --> 04:18:09,759
应用程序的界面让我们对其进行截图，然后转到

2934
04:18:09,759 --> 04:18:15,119
第一个音符像这样把键盘拉起来，没有胡萝卜拿一个

2935
04:18:15,119 --> 04:18:19,831
屏幕截图我实际上认为我很不幸地抓住了胡萝卜

2936
04:18:19,831 --> 04:18:23,360
在最后一张截图中，我可以看到它的一点点，所以我

2937
04:18:23,360 --> 04:18:28,479
会删除它，我想我真的又做了一次

2938
04:18:28,479 --> 04:18:33,759
与胡萝卜基本同屏的截图

2939
04:18:33,759 --> 04:18:36,959
所以让我们看看ipad是否会很快帮助我们

2940
04:18:36,959 --> 04:18:40,639
截图在哪里，我又能看到胡萝卜了

2941
04:18:40,639 --> 04:18:45,439
所以这是一个艰难的，现在好吧，我想这次我明白了

2942
04:18:45,439 --> 04:18:48,639
所以让我们等待屏幕截图出现在这里

2943
04:18:48,639 --> 04:18:51,360
好的，没有胡萝卜，所以很好

2944
04:18:51,360 --> 04:18:54,639
所以现在我们基本上有了 ipad 的截图

2945
04:18:54,639 --> 04:18:59,191
12 和一个 9 英寸的显示器让我们进去说选择文件，我会

2946
04:18:59,191 --> 04:19:04,551
选择该 ipad 的所有屏幕截图并将它们按顺序排列，这样我就走了

2947
04:19:04,551 --> 04:19:08,871
先说登录屏幕然后注册然后忘记密码主要

2948
04:19:08,871 --> 04:19:13,119
应用程序的界面，然后是便笺屏幕，如您所见

2949
04:19:13,119 --> 04:19:18,080
11 英寸显示屏使用 12 和 9 英寸显示屏，这真的很棒

2950
04:19:18,080 --> 04:19:25,912
但是这里的 ipad pro 第二代到 12.9 英寸显示器 um 是

2951
04:19:25,912 --> 04:19:31,680
我的意思是这些它没有使用这款 ipad 的 12 英寸和 9 英寸显示屏，所以

2952
04:19:31,680 --> 04:19:35,191
我们可以在这里做什么 我们可以在这里说选择文件并上传相同的

2953
04:19:35,191 --> 04:19:39,511
再次截图，似乎我们可以，所以这不是问题，让我们只是

2954
04:19:39,511 --> 04:19:44,319
重复使用相同，因为它的屏幕尺寸相同，所以我有点奇怪

2955
04:19:44,319 --> 04:19:48,551
应用商店连接不会自动使用这个 12 英寸

2956
04:19:48,551 --> 04:19:53,119
12 英寸和 9 英寸显示屏的 ipad 屏幕截图，即使它们是

2957
04:19:53,119 --> 04:19:56,799
一样，所以我要把登录带到左边然后我要带注册

2958
04:19:56,799 --> 04:20:01,119
这里是这样的上帝密码，然后是笔记，然后是新笔记，所以现在

2959
04:20:01,119 --> 04:20:05,191
你可以看到你所有的屏幕现在都设置好了所有这些截图都是

2960
04:20:05,191 --> 04:20:11,831
为 iphone 和 ipad 设置所以在上传我们所有的截图之后

2961
04:20:11,831 --> 04:20:15,759
那么我们就可以去设置基本信息了

2962
04:20:15,759 --> 04:20:21,511
我们的应用程序，所以让我们进入我们的应用程序

2963
04:20:21,511 --> 04:20:23,592
资料还行

2964
04:20:23,592 --> 04:20:28,000
你可以看到这里有一个注释，叫做

2965
04:20:28,000 --> 04:20:32,080
抱歉，应用信息部分中有一个名称，然后我们有

2966
04:20:32,080 --> 04:20:35,119
我们的应用程序的名称好吧，然后你可以看到它的副标题说

2967
04:20:35,119 --> 04:20:37,831
字幕将在应用商店上架之前进行审核

2968
04:20:37,831 --> 04:20:40,959
不幸的是，它并没有告诉你太多信息，而是每个应用程序

2969
04:20:40,959 --> 04:20:45,831
可以有一个长达 30k 的短字幕，最多包括 30 个字符，所以当

2970
04:20:45,831 --> 04:20:49,912
人们例如在应用商店中搜索我的精彩笔记，然后他们可以

2971
04:20:49,912 --> 04:20:53,912
实际上看到应用程序的名称和一个简短的字幕，所以

2972
04:20:53,912 --> 04:20:58,000
比方说存储和存储

2973
04:20:58,000 --> 04:21:02,959
你的笔记安全地在最后加上一个星号

2974
04:21:02,959 --> 04:21:09,191
所以这已经设置好了，我可以看到，嗯，然后我们可以在制作之后

2975
04:21:09,191 --> 04:21:12,000
App Store Connect 期望您进行的这些更改

2976
04:21:12,000 --> 04:21:16,400
按下保存按钮，这也很好，现在我们已经设置好了

2977
04:21:16,400 --> 04:21:21,511
因此，让我们在本节中转到内容权限，然后设置

2978
04:21:21,511 --> 04:21:25,360
内容权利信息点击它，所以它说应用程序继续或访问

2979
04:21:25,360 --> 04:21:29,191
第三方内容必须拥有对该内容的所有必要权利，或者

2980
04:21:29,191 --> 04:21:33,040
根据每个应用商店国家或地区的法律允许使用它

2981
04:21:33,040 --> 04:21:36,551
所以我们没有第三方内容，就像我们实际上没有显示任何内容一样

2982
04:21:36,551 --> 04:21:40,000
来自第三方服务的视频，所以在这里我们可以说不

2983
04:21:40,000 --> 04:21:43,119
不包含展示或访问第三方内容

2984
04:21:43,119 --> 04:21:46,080
按下向下按钮后，我们也可以按下保存按钮

2985
04:21:46,080 --> 04:21:52,720
确保一切都保存了所以我们需要在这里做的也嗯

2986
04:21:52,720 --> 04:21:56,639
让我们在这里看看我们也有的隐私，然后我们有

2987
04:21:56,639 --> 04:22:01,592
在所有平台上设置年龄等级，所以让我们继续这样做并说

2988
04:22:01,592 --> 04:22:04,231
你可以在这里看到它说选择每个内容的频率级别

2989
04:22:04,231 --> 04:22:07,360
最能描述您的应用程序的描述，因此我们没有任何

2990
04:22:07,360 --> 04:22:11,680
暴力所以我们说没有现实的暴力没有

2991
04:22:11,680 --> 04:22:16,479
呃长时间的图形或虐待狂的现实暴力我什至不想我

2992
04:22:16,479 --> 04:22:19,592
甚至不要大声说出这些话对你说实话，但你是什么

2993
04:22:19,592 --> 04:22:23,360
必须做的就是对所有这些说不，因为我们没有任何喜欢

2994
04:22:23,360 --> 04:22:28,479
医疗信息酒精相关的东西所以让我们对所有人说不

2995
04:22:28,479 --> 04:22:31,680
这些和呃

2996
04:22:31,680 --> 04:22:35,119
比赛，我们也没有，所以让我们说下一个你的应用程序

2997
04:22:35,119 --> 04:22:38,799
包含不受限制的网络访问它不你的应用程序包含实例

2998
04:22:38,799 --> 04:22:43,511
赌博不，然后我们说下一个，你可以说我们的

2999
04:22:43,511 --> 04:22:47,119
年龄率评级结果是年龄的人

3000
04:22:47,119 --> 04:22:50,080
四加可以使用应用程序和这里