1
10:39:20,160 --> 10:39:24,160
人们，如果你正在安装 git，那么你将不会拥有这一切

2
10:39:24,160 --> 10:39:27,436
信息已经设置好，比如你是谁

3
10:39:27,436 --> 10:39:32,480
并且有关于你如何配置它以及你如何告诉获取谁的信息

4
10:39:32,480 --> 10:39:36,560
你是谁，你的名字是什么等等，那就是

5
10:39:36,560 --> 10:39:41,200
例如，使用名为 git config 和 global 的命令

6
10:39:41,200 --> 10:39:45,916
但是您实际上可以在网上阅读有关该内容的信息，因此只需说 git config

7
10:39:45,916 --> 10:39:50,240
然后你会得到很多关于如何做到这一点的信息，但是

8
10:39:50,240 --> 10:39:55,120
只知道git是一个很大的世界，如果我想解释一切

9
10:39:55,120 --> 10:39:58,880
关于 git 我们可以上一门课程

10
10:39:58,880 --> 10:40:04,560
30 小时只是谈论 git 所以只知道有限制

11
10:40:04,560 --> 10:40:09,120
由我来解释一下获取您的绝对基础知识，以便我们

12
10:40:09,120 --> 10:40:13,840
能够在本课程中针对这个特定用例使用 git，所以我要

13
10:40:13,840 --> 10:40:19,040
只专注于那些事情，好吧，既然你知道如何承诺我

14
10:40:19,040 --> 10:40:21,756
觉得你很像

15
10:40:21,756 --> 10:40:24,160
你很好

16
10:40:24,160 --> 10:40:28,560
开始学习更多关于 git 和你可能想知道的东西的地方

17
10:40:28,560 --> 10:40:32,800
我们不会在本课程中使用它

18
10:40:32,800 --> 10:40:37,360
是使用 git 的分支以及为什么现在需要它们

19
10:40:37,360 --> 10:40:42,160
git 是一个软件，它允许

20
10:40:42,160 --> 10:40:48,080
一群人现在在同一段代码上工作而不会丢失他们的更改

21
10:40:48,080 --> 10:40:52,000
例如，如果你有设计背景 如果你正在使用 figma

22
10:40:52,000 --> 10:40:57,116
如果我进入你作为观察者与我分享的设计文件，我

23
10:40:57,116 --> 10:41:01,756
不能做任何改变，所以我只能观察你，我可以像出口一样

24
10:41:01,756 --> 10:41:06,720
资产呃，或者即使你正在使用 um a zeppelin

25
10:41:06,720 --> 10:41:10,560
这是同样的事情，你可以让某个设计师坐在草图上

26
10:41:10,560 --> 10:41:13,840
实例，然后他们将工作导出到 zeppelin，然后你作为

27
10:41:13,840 --> 10:41:16,720
观察者，您正在从中导出该信息

28
10:41:16,720 --> 10:41:19,596
zeppelin 但你不能对

29
10:41:19,596 --> 10:41:24,480
但是，当您共享您的 git 信息时，请使用 git

30
10:41:24,480 --> 10:41:28,480
与其他人一起存储库，他们也可以对其进行提交，如您所见

31
10:41:28,480 --> 10:41:32,720
很快我们将为此使用 github

32
10:41:32,720 --> 10:41:35,756
嗯，那么基本上你需要

33
10:41:35,756 --> 10:41:40,240
确保每个人都被正确识别，然后他们有

34
10:41:40,240 --> 10:41:44,880
例如他们已经配置的进入

35
10:41:44,880 --> 10:41:49,116
正确的方式，有时我的意思是我们在谈论分支所以

36
10:41:49,116 --> 10:41:53,680
有时这些人不想影响你正在做的事情

37
10:41:53,680 --> 10:41:58,800
在这个主分支中，所以想象一下，一个分支更像是一个

38
10:41:58,800 --> 10:42:01,596
火车线路就像你的火车要去那里

39
10:42:01,596 --> 10:42:06,320
也许有些地方你的朋友想去城市里的一个小镇

40
10:42:06,320 --> 10:42:11,276
你没有计划所以他们下火车他们去另一条火车线路

41
10:42:11,276 --> 10:42:14,880
最后你会见面，所以那时你可以看到他们分支了

42
10:42:14,880 --> 10:42:18,880
进入他们自己的分支，这就像 git 中的分支概念一样

43
10:42:18,880 --> 10:42:21,840
所以有时当你与其他开发人员一起工作时，他们可能想要分支

44
10:42:21,840 --> 10:42:27,200
在同一个源代码上进入他们自己的分支做一些实验，一次

45
10:42:27,200 --> 10:42:31,040
他们弄清楚他们真正想做的事情也许他们会拯救他们的

46
10:42:31,040 --> 10:42:35,596
自己的工作到那个分支，然后他们会把它带回你的分支

47
10:42:35,596 --> 10:42:38,800
最后你会在火车站见面然后他们带着结果

48
10:42:38,800 --> 10:42:43,276
他们，然后你合并在一起，所以有很多关于

49
10:42:43,276 --> 10:42:47,276
分支他们如何在套件中工作，但只知道

50
10:42:47,276 --> 10:42:50,400
分支有点像火车线，现在你在火车上

51
10:42:50,400 --> 10:42:53,520
从你的城市到目的地的线路

52
10:42:53,520 --> 10:42:56,160
可以，然后呢

53
10:42:56,160 --> 10:43:00,240
嗯，但是这门课还是有时间限制的，我无法解释一切

54
10:43:00,240 --> 10:43:03,360
关于 git，但如果你有兴趣，这里有很多很棒的内容

55
10:43:03,360 --> 10:43:06,800
在 youtube 上你可以观看，我很确定有很多很多

56
10:43:06,800 --> 10:43:13,680
在线教程，你也可以去阅读

57
10:43:13,680 --> 10:43:18,000
哇，那是很多信息，好吧，嗯

58
10:43:18,000 --> 10:43:23,360
现在让我们谈谈github现在是什么

59
10:43:23,360 --> 10:43:30,560
github 简单地说是一个云服务，用于存储你的 git 存储库，所以

60
10:43:30,560 --> 10:43:34,160
嗯，现在这个 git 存储库正在运行

61
10:43:34,160 --> 10:43:39,436
在我的电脑上，所以即使我正在提交我的工作，我也在保存我的工作

62
10:43:39,436 --> 10:43:44,240
从外面仍然没有呃可追溯性

63
10:43:44,240 --> 10:43:47,360
世界所以现在不允许其他人看到这个代码它是正确的

64
10:43:47,360 --> 10:43:51,916
在我的电脑上，如果我想与其他人共享此代码，并且

65
10:43:51,916 --> 10:43:56,880
潜在地允许他们不仅阅读，而且能够提交和

66
10:43:56,880 --> 10:44:01,916
在源代码中与我合作，然后我将能够在

67
10:44:01,916 --> 10:44:06,080
github 等云服务

68
10:44:06,080 --> 10:44:10,240
名称中有 git 这个词，但它与 git 不同，所以 git 是一个

69
10:44:10,240 --> 10:44:14,640
实际管理所有命令等的软件，但 github 是云

70
10:44:14,640 --> 10:44:19,276
为您保留这些存储库的服务

71
10:44:19,276 --> 10:44:21,756
所以如果你没有 github 帐户，我是

72
10:44:21,756 --> 10:44:24,720
现在会帮你做，所以

73
10:44:24,720 --> 10:44:28,960
让我关闭，不，我不会关闭，我会尽量减少这个

74
10:44:28,960 --> 10:44:34,560
并尽量减少，嗯，是的，让我们关闭这个我不认为

75
10:44:34,560 --> 10:44:40,160
我们需要它，所以我要在这里打开一个窗口

76
10:44:40,160 --> 10:44:45,040
我要去这里看看这个

77
10:44:45,040 --> 10:44:48,880
网站 github.com 好吧 所以

78
10:44:48,880 --> 10:44:54,560
我们在这里需要的是让您创建一个 github 帐户并执行此操作

79
10:44:54,560 --> 10:44:59,680
您需要访问我将为您提供的这个网站

80
10:44:59,680 --> 10:45:06,160
就在那里 github.com 注册好，所以如果我提起 um，我会去的

81
10:45:06,160 --> 10:45:11,436
这里有一个浏览窗口并说注册你会看到是的它不会知道

82
10:45:11,436 --> 10:45:15,680
我已经用我的其他帐户登录，它会要求我开始

83
10:45:15,680 --> 10:45:20,080
在这里注册好，所以这就像主窗口

84
10:45:20,080 --> 10:45:23,916
注册 github，他们做得有点滑稽，有点滑稽

85
10:45:23,916 --> 10:45:27,596
就像星球大战的主题，我不知道你想怎么称呼它，但

86
10:45:27,596 --> 10:45:32,240
在这里，您将通过几个步骤来创建一个 github 帐户

87
10:45:32,240 --> 10:45:34,640
所以我不会这样做只是因为

88
10:45:34,640 --> 10:45:37,840
我已经这样做了，但在你的情况下，我们只需要去

89
10:45:37,840 --> 10:45:42,160
通过这个提供您的电子邮件为您的电子邮件选择一个好的安全密码

90
10:45:42,160 --> 10:45:49,116
您的 github 帐户，最后您将拥有一个简单的 github 帐户

91
10:45:49,116 --> 10:45:54,240
好吧，因为我已经有了

92
10:45:54,240 --> 10:45:56,320
所以呃

93
10:45:56,320 --> 10:46:01,916
我们已经讨论过已经在终端中设置了 git，所以我不会

94
10:46:01,916 --> 10:46:06,080
谈论那个我可能会移动这个

95
10:46:06,080 --> 10:46:13,436
嗯，在你在你的电脑上设置了 github 之后，现在稍微好了

96
10:46:13,436 --> 10:46:18,880
呃基本上是在你设置了一个 github 帐户之后

97
10:46:18,880 --> 10:46:23,680
你现在需要设置一个叫做 ssh 密钥的东西

98
10:46:23,680 --> 10:46:28,800
这有点技术性，但是

99
10:46:28,800 --> 10:46:32,560
没有什么是你可以跳过的

100
10:46:32,560 --> 10:46:36,320
您的工作无需在计算机上设置 ssh 密钥，您可以随时访问

101
10:46:36,320 --> 10:46:40,560
github 并像您一样在 github 上实际提交您的工作

102
10:46:40,560 --> 10:46:44,560
写一些文字然后改变它

103
10:46:44,560 --> 10:46:49,040
文本就在 github 界面中，就像 web 界面一样

104
10:46:49,040 --> 10:46:52,800
然后他们会为你做所有这些工作，因为他们会从

105
10:46:52,800 --> 10:46:57,840
我相信有点像他们自己的 ssh 密钥，但如果你在你的

106
10:46:57,840 --> 10:47:02,240
计算机希望能够从您的计算机上提交您的工作

107
10:47:02,240 --> 10:47:06,400
硬盘或您的 ssc 或任何进入 github 您将需要一个名为

108
10:47:06,400 --> 10:47:10,080
ssh 密钥 ssh 密钥是

109
10:47:10,080 --> 10:47:16,480
cr 密码 密码 crypt 我该怎么说

110
10:47:16,480 --> 10:47:20,800
是密码学的，呃，让我们看看 crypt

111
10:47:20,800 --> 10:47:24,240
密码无地穴

112
10:47:24,240 --> 10:47:30,560
是的，密码学我不知道，是的，密码学签名的

113
10:47:30,560 --> 10:47:34,160
这些是经过加密签名的

114
10:47:34,160 --> 10:47:38,080
签名嗯那个

115
10:47:38,080 --> 10:47:41,680
有点像我们的私钥

116
10:47:41,680 --> 10:47:45,360
在前一章中使用钥匙串时使用过

117
10:47:45,360 --> 10:47:50,560
它们允许您将自己标识为个人或提交者

118
10:47:50,560 --> 10:47:54,080
所以我认为这确实有道理

119
10:47:54,080 --> 10:47:57,360
所以我再次为打嗝道歉

120
10:47:57,360 --> 10:48:00,880
密码学这只是因为我不是以英语为母语的人所以你

121
10:48:00,880 --> 10:48:04,800
至少应该时不时地期待这些打嗝

122
10:48:04,800 --> 10:48:09,756
所以 ssh 密钥是一个密钥

123
10:48:09,756 --> 10:48:14,880
您作为开发人员或代码提交者在您的

124
10:48:14,880 --> 10:48:18,480
电脑，每当你做出承诺，你

125
10:48:18,480 --> 10:48:22,240
想发送那个提交然后

126
10:48:22,240 --> 10:48:26,400
github 然后 github 知道你是谁

127
10:48:26,400 --> 10:48:30,000
好的，所以它说好的，你是

128
10:48:30,000 --> 10:48:35,360
人 xyz 并且您正在尝试将您的更改推送到此存储库中

129
10:48:35,360 --> 10:48:37,916
只是要确保您可以访问所有内容

130
10:48:37,916 --> 10:48:44,800
所以你需要设置你的 ssh 密钥

131
10:48:44,800 --> 10:48:52,240
我们需要做的是去 github 我要打开一个网络浏览器

132
10:48:52,240 --> 10:48:58,400
让您了解如何设置 ssh 密钥，让我们说 github 设置 ssh

133
10:48:58,400 --> 10:49:02,880
键，您可以看到将新的 ssh 密钥添加到

134
10:49:02,880 --> 10:49:09,116
您的 github 帐户，因此这里有一个非常全面的指南，说明如何

135
10:49:09,116 --> 10:49:12,480
设置你的 ssh 密钥，这样你就可以看到它说

136
10:49:12,480 --> 10:49:16,080
嗯让我们看看

137
10:49:16,080 --> 10:49:19,916
生成一个新的 ssh 密钥并将其添加到 ssh 代理中，这样您就可以在此处

138
10:49:19,916 --> 10:49:24,480
想去好吧，所以在搜索 github 作为设置之后

139
10:49:24,480 --> 10:49:28,800
ssh 密钥确保你最后去这个链接生成一个新的 ssh 密钥

140
10:49:28,800 --> 10:49:34,320
并将其添加到通过此阅读的 ssh ssh 代理中

141
10:49:34,320 --> 10:49:38,080
综合指南，您只需在

142
10:49:38,080 --> 10:49:42,560
终端，所以完全按照指定的方式进行操作

143
10:49:42,560 --> 10:49:46,960
在这里，好的，所以在你完成之后，然后呢

144
10:49:46,960 --> 10:49:52,320
您需要做的是将我相信的 ssh 密钥添加到您的

145
10:49:52,320 --> 10:49:56,640
您看到的 github 帐户，如链接提供的此处添加一个新的 ssh 密钥

146
10:49:56,640 --> 10:50:01,276
你的 github 帐户，所以你可以在这里看到然后它说没关系

147
10:50:01,276 --> 10:50:06,240
这个命令然后去你的github账户设置然后去搜索

148
10:50:06,240 --> 10:50:11,756
和 gpg 密钥，然后说新的 ssh 密钥，然后在此处添加该信息

149
10:50:11,756 --> 10:50:16,640
好的，然后按保存，就是这样，然后你就有了你的 ssh 密钥

150
10:50:16,640 --> 10:50:21,916
所有的设置和完成，所以这些是你需要做的两件事来创建一个 ssh

151
10:50:21,916 --> 10:50:25,916
密钥，然后将公钥上传到 github

152
10:50:25,916 --> 10:50:30,480
又因为这门课的限制，我无法解释

153
10:50:30,480 --> 10:50:34,080
就像一行一行的，我只是为你提供你需要的信息

154
10:50:34,080 --> 10:50:38,960
知道，我有点希望你自己做这些事情好吗

155
10:50:38,960 --> 10:50:41,840
嗯

156
10:50:41,840 --> 10:50:45,916
这就是现在

157
10:50:45,916 --> 10:50:52,720
我们还需要谈谈 um gpg 密钥

158
10:50:52,720 --> 10:50:56,560
呃，实际上我认为 gpg 是新的

159
10:50:56,560 --> 10:51:02,160
隐私 什么是jpg

160
10:51:02,160 --> 10:51:05,756
隐私卫士也是您的一款软件

161
10:51:05,756 --> 10:51:09,520
下载到您的计算机上，您可以看到是免费的软件替代品

162
10:51:09,520 --> 10:51:13,840
语义 pgp 加密软件套装

163
10:51:13,840 --> 10:51:19,680
嗯，它符合 rfc blah blah 所有你需要知道的关于 gpg 和如何

164
10:51:19,680 --> 10:51:22,320
我们将在本课程中使用它是

165
10:51:22,320 --> 10:51:25,116
嗯，你在哪里

166
10:51:25,116 --> 10:51:29,840
有你的我的意思是我们谈到了 ssh 密钥，你有你的 ssh 密钥和

167
10:51:29,840 --> 10:51:33,840
那么你和我都知道这有点令人讨厌，但这有点像大自然

168
10:51:33,840 --> 10:51:36,800
无论如何，当你

169
10:51:36,800 --> 10:51:41,520
用你的 ssh 密钥和你的私钥签署你的提交，然后你推送你的

170
10:51:41,520 --> 10:51:46,000
对 github 和 github 的更改只是验证没问题，这是一个

171
10:51:46,000 --> 10:51:51,040
此提交来自有权访问此存储库的人

172
10:51:51,040 --> 10:51:55,756
当您创建 gpg 密钥然后签署提交时

173
10:51:55,756 --> 10:52:01,840
使用 gpg 密钥，然后实际验证您是

174
10:52:01,840 --> 10:52:06,720
你说你是谁，所以很多软件开发人员仍在继续使用 ssh

175
10:52:06,720 --> 10:52:09,520
钥匙，老实说，这还不够好

176
10:52:09,520 --> 10:52:10,960
嗯[音乐]

177
10:52:10,960 --> 10:52:14,640
我的意思是，这取决于你的

178
10:52:14,640 --> 10:52:18,400
意见，但在我看来还不够好，因为任何人都掌握了

179
10:52:18,400 --> 10:52:22,720
您的 ssh 密钥实际上可以对您的提交做任何他们想做的事情，并且

180
10:52:22,720 --> 10:52:28,560
改变他们想要的任何东西，但是用 gpg 键你会确保你

181
10:52:28,560 --> 10:52:32,480
是你和其他任何人，即使他们拥有你的 ssh 密钥

182
10:52:32,480 --> 10:52:35,680
他们的提交不会像您那样签名

183
10:52:35,680 --> 10:52:38,320
嗯

184
10:52:38,320 --> 10:52:41,756
所以现在让我们谈一点，我们将在这里拿一些东西，只是

185
10:52:41,756 --> 10:52:46,320
确保我们已经讨论过关于 ssh 密钥的内容

186
10:52:46,320 --> 10:52:50,640
现在我们将讨论 gpgm 你真正需要它的地方，所以有一点

187
10:52:50,640 --> 10:52:54,240
链接在这里 我要在这里打开那个链接，所以我们

188
10:52:54,240 --> 10:52:59,200
都可以看到它，它说 git 是加密的

189
10:52:59,200 --> 10:53:01,756
呃还是我这个词有点

190
10:53:01,756 --> 10:53:04,640
我说加密安全的不同不同，但事实并非如此

191
10:53:04,640 --> 10:53:09,116
万无一失，如果您在互联网上从其他人那里接手并想要

192
10:53:09,116 --> 10:53:12,960
验证提交实际上来自受信任的来源 git 有几种方法可以

193
10:53:12,960 --> 10:53:18,400
使用 gpg 签名和验证工作

194
10:53:18,400 --> 10:53:22,480
嗯所以你需要做的是你需要

195
10:53:22,480 --> 10:53:26,400
基本上在你的电脑上设置 jpg 我和我相信

196
10:53:26,400 --> 10:53:32,560
嗯，如果你只是说 gpg install mac 或 gpg install windows 或者其他什么，那么你

197
10:53:32,560 --> 10:53:37,116
可以来，例如，我在 mac 上使用 jpg 工具

198
10:53:37,116 --> 10:53:42,320
例如，您实际上可以为各种操作系统安装 gpg

199
10:53:42,320 --> 10:53:47,756
windows 或 linux 所以只要 google gpg 然后你的操作系统就是这样

200
10:53:47,756 --> 10:53:52,720
例如 gpg 我可以闻到咒语

201
10:53:52,720 --> 10:53:57,360
如果我能闻到 gpg 并在这里下载中午 pg 和你

202
10:53:57,360 --> 10:54:01,116
看到所以这就像下载工具

203
10:54:01,116 --> 10:54:05,360
windows 我相信让我们看看，你可以在这里看到你可以使用

204
10:54:05,360 --> 10:54:09,276
gpg for win 你的全功能 Windows 版本

205
10:54:09,276 --> 10:54:13,596
知道 pg 所以我想说的只是

206
10:54:13,596 --> 10:54:17,276
为您的操作系统下载名为 gpg 的软件，以便

207
10:54:17,276 --> 10:54:22,160
它是用于 win 的 gpg 或用于 mac os 的 gpg 工具，或者如果它喜欢

208
10:54:22,160 --> 10:54:26,080
debian uh canoe pc 是 debian 的一部分

209
10:54:26,080 --> 10:54:29,116
可能已经内置了，因此您无需为

210
10:54:29,116 --> 10:54:32,640
你的基于 debian 的 linux 操作系统

211
10:54:32,640 --> 10:54:35,840
好的，所以在这样做之后，你将需要

212
10:54:35,840 --> 10:54:40,080
为 github 设置 gpg，我将提供一个

213
10:54:40,080 --> 10:54:44,080
此处为您提供的链接，您可以阅读有关管理提交的内容

214
10:54:44,080 --> 10:54:50,400
签名验证和链接我会在这里打开它

215
10:54:50,400 --> 10:54:54,720
所以你可以看到它的样子，你可以在这里看到

216
10:54:54,720 --> 10:54:59,200
生成一个 gpg 密钥，这样你就可以先去那里，它会帮助你完成

217
10:54:59,200 --> 10:55:03,276
您需要采取的各种步骤来创建您的 gpg 密钥

218
10:55:03,276 --> 10:55:08,480
很简单，你只需几行呃代码或几行文本

219
10:55:08,480 --> 10:55:13,040
必须在您的终端中发布才能创建您的 gpg 密钥

220
10:55:13,040 --> 10:55:17,916
所以在你完成之后，你需要确保进入这个

221
10:55:17,916 --> 10:55:21,276
部分添加我们已经完成的新 gpg 密钥

222
10:55:21,276 --> 10:55:25,916
然后你去你的设置你可以看到 ssh 和 gpg 键然后

223
10:55:25,916 --> 10:55:30,160
与您添加 ssh 密钥的方式相同，您需要将 gpg 密钥添加到您的

224
10:55:30,160 --> 10:55:34,240
github帐户好，在你完成之后

225
10:55:34,240 --> 10:55:38,560
sshk 和 gpg 密钥之间的区别有点像你需要告诉 get

226
10:55:38,560 --> 10:55:42,720
你有一个 gpg 密钥，然后它需要用你的 gpg 签署你的提交

227
10:55:42,720 --> 10:55:45,596
好的，这就是你进入这个告诉的地方

228
10:55:45,596 --> 10:55:49,916
获取您的分配密钥，您只需按照以下步骤告诉 get

229
10:55:49,916 --> 10:55:55,200
使用 git config 全局用户签名密钥

230
10:55:55,200 --> 10:55:59,116
看到这里好吧，老实说，只要按照这些步骤操作

231
10:55:59,116 --> 10:56:02,400
和你在一起，我认为你不需要将电子邮件与 gpg 关联起来真的是对的

232
10:56:02,400 --> 10:56:07,840
现在，但如果你愿意，你可以这样做，所以我有点假设你已经

233
10:56:07,840 --> 10:56:11,520
已经这样做了

234
10:56:11,520 --> 10:56:13,840
嗯，你的电脑，你已经

235
10:56:13,840 --> 10:56:17,916
创建了你对 git 有点了解的 ssh 密钥你有一个 github

236
10:56:17,916 --> 10:56:24,400
account 现在你已经创建了你的 pgp 密钥，然后你告诉了 git

237
10:56:24,400 --> 10:56:30,880
你的 pdp 密钥，所以你的签名评论实际上是签名好的

238
10:56:30,880 --> 10:56:35,916
所以接下来我们需要做的是现在你能看到我们一直在努力吗

239
10:56:35,916 --> 10:56:39,680
我们的嗯笔记应用程序我的笔记我认为它

240
10:56:39,680 --> 10:56:42,960
是嗯

241
10:56:42,960 --> 10:56:47,436
如果你记得的话，这个项目在这里被称为我的笔记

242
10:56:47,436 --> 10:56:50,800
嗯，如果我在这里说 git status 你会看到

243
10:56:50,800 --> 10:56:54,080
它说不是 git 存储库，这有点令人难过，因为

244
10:56:54,080 --> 10:56:58,160
我们已经写了很多代码，但我们还没有真正在 github 上备份它

245
10:56:58,160 --> 10:57:00,000
可以，然后呢

246
10:57:00,000 --> 10:57:03,916
我们现在需要做的是去创建一个 github 存储库记住这一点

247
10:57:03,916 --> 10:57:08,320
桶我们需要为我们的代码创建一个桶

248
10:57:08,320 --> 10:57:12,880
所以我们走吧，我要在这里创建一个 safari 窗口，或者

249
10:57:12,880 --> 10:57:16,480
chrome 或勇敢的 firefox 无论你想用什么，我都是

250
10:57:16,480 --> 10:57:20,800
去 github.com 我要去仓库

251
10:57:20,800 --> 10:57:23,360
正如你所看到的，我要说新的

252
10:57:23,360 --> 10:57:27,436
我要给它起名字我的笔记好吧我要增加

253
10:57:27,436 --> 10:57:30,560
窗口的大小，以便您更好地看到我要进行的描述

254
10:57:30,560 --> 10:57:35,436
说我的笔记颤动应用程序，你可以在这里看到它告诉你

255
10:57:35,436 --> 10:57:39,116
询问您是要创建公共的公共存储库还是私有的

256
10:57:39,116 --> 10:57:42,880
存储库，这里的区别在于，如果您创建一个公共存储库

257
10:57:42,880 --> 10:57:47,520
默认情况下，每个人都可以阅读您正在创建的内容

258
10:57:47,520 --> 10:57:51,520
通常如果你是 如果你不是 100 确定什么

259
10:57:51,520 --> 10:57:54,960
public 意味着创建一个私有存储库，因为

260
10:57:54,960 --> 10:57:58,160
通常有很多信息你可能想像私人一样创建

261
10:57:58,160 --> 10:58:02,720
带有一些 api 密钥的信息，因此您可能希望创建一个私有的

262
10:58:02,720 --> 10:58:05,756
存储库，除非您确切知道自己在做什么，或者如果您想这样做

263
10:58:05,756 --> 10:58:09,276
实例嗯贡献开源项目和

264
10:58:09,276 --> 10:58:12,160
从一开始就创建一个开源项目然后你去

265
10:58:12,160 --> 10:58:18,240
创建一个公共的，但您以后可以随时将您的私有存储库公开

266
10:58:18,240 --> 10:58:22,400
并且您以后可以随时将公共存储库设为私有，但是

267
10:58:22,400 --> 10:58:27,040
不会经常发生，所以创建一个 pr 可能是个好主意

268
10:58:27,040 --> 10:58:31,360
一开始是私有的，然后在这里添加一个自述文件一个自述文件

269
10:58:31,360 --> 10:58:35,596
文件几乎只是一个将显示给任何人的文件

270
10:58:35,596 --> 10:58:41,116
您的 github 存储库并仅查看 github 存储库的索引文件

271
10:58:41,116 --> 10:58:45,040
因此您可以在其中放置一些信息，但这通常是个好主意

272
10:58:45,040 --> 10:58:49,116
你不必这样做，但我建议你真的这样做然后说

273
10:58:49,116 --> 10:58:53,116
对不起，然后说添加 git ignore，我们

274
10:58:53,116 --> 10:58:56,800
之前没有谈论过 git ignore 但得到忽略的是它的名字

275
10:58:56,800 --> 10:59:02,720
指示是指示在您的计算机上获取的文件

276
10:59:02,720 --> 10:59:08,320
或在克隆您的存储库的任何人的计算机上，了解哪些文件应该

277
10:59:08,320 --> 10:59:12,560
不要提交到你的 git 存储库，所以

278
10:59:12,560 --> 10:59:15,596
通常最好有一个获取忽略文件并在此处获取模板

279
10:59:15,596 --> 10:59:19,276
只选择飞镖好吧飞镖

280
10:59:19,276 --> 10:59:22,160
好的，在这里你不必选择

281
10:59:22,160 --> 10:59:24,960
立即获得许可，因为您可能不会共享此代码

282
10:59:24,960 --> 10:59:29,276
与现在的任何人一样，但您以后可以随时添加许可证

283
10:59:29,276 --> 10:59:32,720
所以我创建了一个私人存储库

284
10:59:32,720 --> 10:59:38,000
呃，这是我的笔记

285
10:59:38,000 --> 10:59:41,040
存储库我要更改它只是为了降低以防万一我没有空间

286
10:59:41,040 --> 10:59:44,640
只是我的笔记没问题，然后我要说创建

287
10:59:44,640 --> 10:59:50,320
存储库繁荣，所以你已经这样做了，现在你会看到

288
10:59:50,320 --> 10:59:54,800
你在这里有一个存储库，并且

289
10:59:54,800 --> 11:00:00,480
我的意思是里面什么都没有

290
11:00:00,480 --> 11:00:04,560
我们现在需要做的是让你看到我们有

291
11:00:04,560 --> 11:00:08,080
我们的代码在这里，然后我们有一个存储库我们如何把这个代码放进去

292
11:00:08,080 --> 11:00:11,520
在那里你可能会认为好吧，我要手动上传所有文件，或者像 go

293
11:00:11,520 --> 11:00:14,880
并将文件拖到此处您实际上可以这样做，但是

294
11:00:14,880 --> 11:00:19,116
这不是一个好主意，所以你需要做的就是告诉

295
11:00:19,116 --> 11:00:22,480
git现在突然说嘿这个

296
11:00:22,480 --> 11:00:27,680
这里的文件夹确实是一个 git 存储库 记住我之前所说的所以你

297
11:00:27,680 --> 11:00:32,400
需要说 git init 我要调出标题，所以你

298
11:00:32,400 --> 11:00:36,400
知道我在说什么 git init 然后你说好，一切都好

299
11:00:36,400 --> 11:00:41,360
突然间，这变成了一个存储库，所以如果你确实获得了你看到的状态

300
11:00:41,360 --> 11:00:44,560
让我看看我是否真的可以改变屏幕上的排列，所以你会看到

301
11:00:44,560 --> 11:00:48,000
更多屏幕空间

302
11:00:48,000 --> 11:00:52,240
也许我什至可以做这样的事情

303
11:00:52,240 --> 11:00:55,520
这是一个比这样做更好的主意吗

304
11:00:55,520 --> 11:01:00,320
不，可能不是，所以这更好，嗯，好吧，这有点好所以

305
11:01:00,320 --> 11:01:03,916
你现在看到它说现在你是一个 git 存储库我可以看到你有很多

306
11:01:03,916 --> 11:01:07,436
您还没有真正提交的文件以及我们可以做什么然后我们

307
11:01:07,436 --> 11:01:10,000
可以说 git add all

308
11:01:10,000 --> 11:01:15,276
将所有这些文件和文件夹添加到我的 git 存储库，然后我要说

309
11:01:15,276 --> 11:01:19,756
git commit 以 m 作为我的初始信息

310
11:01:19,756 --> 11:01:24,560
提交好了，现在看看我说 git status 它说

311
11:01:24,560 --> 11:01:28,720
没有什么可提交的我想推动这些变化我

312
11:01:28,720 --> 11:01:32,000
想将这些更改一起发送，但我该怎么做，因为如果我说 git

313
11:01:32,000 --> 11:01:35,596
推看看它说哦我不知道在哪里

314
11:01:35,596 --> 11:01:38,240
把这些事情推到如此

315
11:01:38,240 --> 11:01:42,720
你现在需要做的是去你的 github 仓库然后去代码

316
11:01:42,720 --> 11:01:49,840
然后从这里抓住这个人你看到的代码到 ssh

317
11:01:49,840 --> 11:01:54,880
然后复制这个然后进入这里并按照这里所说的执行 git remote ad

318
11:01:54,880 --> 11:02:01,520
所以我要说 git remote add origin 它是我们遥控器的名称

319
11:02:01,520 --> 11:02:07,276
实例，现在我要补充一点，如果我说 git push

320
11:02:07,276 --> 11:02:11,596
它说好的现在你已经完成了你仍然需要告诉我这个主要

321
11:02:11,596 --> 11:02:15,916
本地计算机上的分支实际上映射到主分支

322
11:02:15,916 --> 11:02:20,800
在 github 上，就在这里，所以你可以看到这里的主分支和

323
11:02:20,800 --> 11:02:24,480
我们也在主分支，所以你不必做这个复杂的

324
11:02:24,480 --> 11:02:28,880
代码你实际上可以说 git push you origin head 这对我来说有点

325
11:02:28,880 --> 11:02:32,720
更清洁，这将为您做同样的事情

326
11:02:32,720 --> 11:02:35,596
更新被拒绝，因为遥控器包含您没有的工作

327
11:02:35,596 --> 11:02:39,520
在本地，这通常是因为我们得到这个实际上很棒

328
11:02:39,520 --> 11:02:44,160
我有一个计划让这件事发生，但这里发生的事情是你看看我是否

329
11:02:44,160 --> 11:02:48,000
进入这个 github 存储库

330
11:02:48,000 --> 11:02:52,240
然后我可以点击这里的初始提交

331
11:02:52,240 --> 11:02:56,560
您会看到，当我创建存储库时，我们选择了所有您

332
11:02:56,560 --> 11:03:02,480
知道自述文件和 git 忽略文件这些是文件

333
11:03:02,480 --> 11:03:08,160
由 github 使用 github 在 github 上创建并放置在里面

334
11:03:08,160 --> 11:03:11,756
这个存储库，所以这是一个提交，你会看到它有自己的

335
11:03:11,756 --> 11:03:16,000
它有自己的提交 ID

336
11:03:16,000 --> 11:03:19,116
现在那个提交就在那里

337
11:03:19,116 --> 11:03:25,436
桶在这里，所以在它自己的桶里有一个提交，好吧，现在我们有自己的

338
11:03:25,436 --> 11:03:30,320
计算机在这里拥有自己的存储桶和自己的提交，但突然之间

339
11:03:30,320 --> 11:03:34,160
我们用我说的那个 git add 命令来告诉这个

340
11:03:34,160 --> 11:03:37,436
我们正在做的是，我们正在这个地方之间建立联系

341
11:03:37,436 --> 11:03:40,800
存储库和服务器存储库，并说发生了任何更改

342
11:03:40,800 --> 11:03:44,560
在这里，我们想把它们推到这里，当我们说 git push

343
11:03:44,560 --> 11:03:49,200
这些更改被拒绝，因为它说 oh you're you have changes here

344
11:03:49,200 --> 11:03:53,040
并提交，你把它们放在这里

345
11:03:53,040 --> 11:03:57,116
但是您在这里的存储库没有更改

346
11:03:57,116 --> 11:04:01,276
包含已经存在的更改，所以它说有一个

347
11:04:01,276 --> 11:04:04,640
冲突我不知道你想做什么你想像替换

348
11:04:04,640 --> 11:04:08,000
你的东西在那边的内容

349
11:04:08,000 --> 11:04:11,680
老实说，实际上可能是这样

350
11:04:11,680 --> 11:04:15,596
因为你看到我们在这里做了什么我们有一个 git

351
11:04:15,596 --> 11:04:20,480
忽略 github 为我们创建的文件，我们也有自述文件

352
11:04:20,480 --> 11:04:23,840
我们可能实际上不需要对您诚实的文件也许我们

353
11:04:23,840 --> 11:04:27,200
不需要，它们也会被忽略，但如果你查看了更改

354
11:04:27,200 --> 11:04:30,800
如果我说，那些承诺在这里提交

355
11:04:30,800 --> 11:04:32,960
乌姆拉

356
11:04:32,960 --> 11:04:37,520
你会看到这里已经有一个文件

357
11:04:37,520 --> 11:04:42,000
它被称为 get ignore here 你看

358
11:04:42,000 --> 11:04:46,400
它是在我们创建项目时由颤振创建的

359
11:04:46,400 --> 11:04:51,680
补充说，让我们说 cat 并忽略以查看其内容和

360
11:04:51,680 --> 11:04:54,880
你会看到 Fluffer 已经为我们创造了很多东西

361
11:04:54,880 --> 11:04:59,596
说这些事情需要被忽略所以我想说的是所有这些

362
11:04:59,596 --> 11:05:02,880
这里存在的东西我们真的不需要它们所以你可以做的是

363
11:05:02,880 --> 11:05:06,560
说 git push

364
11:05:06,560 --> 11:05:09,916
f，我相信力量会推动一点

365
11:05:09,916 --> 11:05:13,596
推你原点

366
11:05:13,596 --> 11:05:17,360
推动一切的力的头f

367
11:05:17,360 --> 11:05:20,480
好的，所以我现在要清除它，我

368
11:05:20,480 --> 11:05:25,040
要去我的笔记库，突然间你看到了

369
11:05:25,040 --> 11:05:29,596
这是你看到的哦，我们已经有一个自述文件

370
11:05:29,596 --> 11:05:33,520
好吧，颤振创建了一个自述文件，这太神奇了，我不知道

371
11:05:33,520 --> 11:05:36,080
所以我学到了一些很酷的东西

372
11:05:36,080 --> 11:05:41,530
好的，我们开始了，所以现在我们的代码基本上被推送了

373
11:05:41,530 --> 11:05:46,560
[音乐] 嗯，这是为了我们的承诺

374
11:05:46,560 --> 11:05:50,400
已经放在那里的

375
11:05:50,400 --> 11:05:55,520
我要在这里拿一些我谈过的东西

376
11:05:55,520 --> 11:05:59,276
嗯，太好了

377
11:05:59,276 --> 11:06:03,756
所以这已经完成了，所以现在你有你的改变了

378
11:06:03,756 --> 11:06:08,480
好的 github 现在我们需要讨论的还有

379
11:06:08,480 --> 11:06:12,720
在本课程中标记我将使用

380
11:06:12,720 --> 11:06:17,756
git中称为标签的功能标签正如其名称所示

381
11:06:17,756 --> 11:06:22,000
有点像一个标签

382
11:06:22,000 --> 11:06:26,720
更擅长软件开发，你会明白有些地方有时

383
11:06:26,720 --> 11:06:30,800
在您作为软件开发人员的旅程中，您编写的代码意味着

384
11:06:30,800 --> 11:06:33,596
对你来说很特别的事，比如你可能会说

385
11:06:33,596 --> 11:06:39,840
经过一整个周末的工作，我终于可以像验证一样交付

386
11:06:39,840 --> 11:06:45,116
屏幕给我的用户，它本身本质上具有特殊的

387
11:06:45,116 --> 11:06:50,160
重要的是它具有特殊的含义，您可能想要标记它并通过

388
11:06:50,160 --> 11:06:54,720
标记它意味着我要给它一个特殊的名字，所以在

389
11:06:54,720 --> 11:06:58,720
未来如果我想回到那个时间点我不去我不必

390
11:06:58,720 --> 11:07:03,916
进入我的日志并查看我所有的提交，看看是哪一个

391
11:07:03,916 --> 11:07:08,960
特别提交，但我也想给它一个特别的名字，好吧

392
11:07:08,960 --> 11:07:16,640
name 是一个带注释的标签或一个应用了消息的标签

393
11:07:16,640 --> 11:07:20,960
所以这就是标签的本质

394
11:07:20,960 --> 11:07:29,360
所以你基本上是在给你的工作起个名字

395
11:07:29,360 --> 11:07:35,116
所以我们现在需要做的是把我们的工作标记为第一步，我们已经做了很多

396
11:07:35,116 --> 11:07:39,116
走到这一步，但没有一个是这样的

397
11:07:39,116 --> 11:07:43,680
就像我们实际上必须承诺的重要一样，但我认为这很重要

398
11:07:43,680 --> 11:07:47,116
足够了，现在我们有一个注册表屏幕和一个登录屏幕，以便我们可以标记它

399
11:07:47,116 --> 11:07:51,916
创建它以创建带注释的标签和 git 的方法，您将逐字

400
11:07:51,916 --> 11:07:56,880
就说 git tag 好吧

401
11:07:56,880 --> 11:08:02,080
让我们在这里说 git tag 并给它命名为第一步

402
11:08:02,080 --> 11:08:06,720
好的，现在你可以看看我是否想把这些标签推到后端对不起

403
11:08:06,720 --> 11:08:10,480
github 因为这些标签现在不存在

404
11:08:10,480 --> 11:08:14,880
我们能做的就是说 git push tags

405
11:08:14,880 --> 11:08:19,436
破折号标签，这会将所有这些标签推送到服务器

406
11:08:19,436 --> 11:08:22,640
在那种情况下是github，老实说，我真的不是

407
11:08:22,640 --> 11:08:26,080
知道这里一个标签我可以在这里突然看到

408
11:08:26,080 --> 11:08:33,520
标签和第一步是在那里创建好的，所以我们可以做的也是在那之后

409
11:08:33,520 --> 11:08:38,960
我们已经设置好了我们的 gpg 密钥我们也可以确认我们的工作是真实的

410
11:08:38,960 --> 11:08:42,160
签名，如果我去我的笔记这里然后

411
11:08:42,160 --> 11:08:45,276
看看这个提交嗯

412
11:08:45,276 --> 11:08:48,400
让我们看看你能不能看到这些信息

413
11:08:48,400 --> 11:08:52,320
在这里的某个地方我们可以看到我们所有的提交

414
11:08:52,320 --> 11:08:57,916
嗯，如果你去这个时间线，不知何故在这里

415
11:08:57,916 --> 11:09:01,200
哦，它现在没有向我显示该信息

416
11:09:01,200 --> 11:09:05,276
是的，但无论如何你可以看看你的提交是否是

417
11:09:05,276 --> 11:09:08,640
由一个我现在看不到的小徽章签名所以也许实际上有

418
11:09:08,640 --> 11:09:12,800
我的 pgp 密钥有问题，所以如果你已经完成了所有 pgp 安装

419
11:09:12,800 --> 11:09:15,916
在我们的计算机上正确，那么您应该会看到所有提交都已签名

420
11:09:15,916 --> 11:09:19,596
并且实际上显示在这里但带有某种徽章但我不能

421
11:09:19,596 --> 11:09:23,680
不幸的是看到，也许 github 已经改变了那个界面，所以我们不能

422
11:09:23,680 --> 11:09:28,720
查看我们的 jpg 密钥的验证和徽章

423
11:09:28,720 --> 11:09:33,520
好吧，我们在本章中讨论了很多关于 git 的内容

424
11:09:33,520 --> 11:09:38,160
嗯，所以我认为这对于本章和 git 我们已经足够了

425
11:09:38,160 --> 11:09:43,276
谈了将近 15 分钟关于坦诚相待，这就足够了

426
11:09:43,276 --> 11:09:47,276
既然我们已经设置好了我们将在即将到来的

427
11:09:47,276 --> 11:09:51,200
章节是每当我们做一些需要拯救的重要事情时，我们

428
11:09:51,200 --> 11:09:56,240
将提交该更改并标记它并发送我们的提交和我们的

429
11:09:56,240 --> 11:09:59,680
标记到 github，以便安全地存储在

430
11:09:59,680 --> 11:10:03,680
某种云存储基本上是这样

431
11:10:03,680 --> 11:10:06,800
这就是我们将在本课程中使用 git 和 github 的方式

432
11:10:06,800 --> 11:10:11,040
我认为让每个软件开发人员知道我

433
11:10:11,040 --> 11:10:14,000
想如果有人在看这门课程的人不是软件工程师

434
11:10:14,000 --> 11:10:16,800
在那之前你肯定需要知道

435
11:10:16,800 --> 11:10:21,680
git 和 github，然后才能继续，所以我们接下来要做什么

436
11:10:21,680 --> 11:10:26,240
接下来的章节是谈论我们已经完成登录注册的电子邮件验证

437
11:10:26,240 --> 11:10:29,916
屏幕非常简单，但我们还没有完成电子邮件验证，并且

438
11:10:29,916 --> 11:10:34,320
这正是我们在下一章中要做的，所以我会在那里见到你

439
11:10:34,320 --> 11:10:37,680
你好，欢迎来到 swata 课程的第 16 章

440
11:10:37,680 --> 11:10:41,756
在前面的章节中，我们已经讨论了登录和注册页面

441
11:10:41,756 --> 11:10:46,000
我们也走了一点弯路来谈谈

442
11:10:46,000 --> 11:10:49,520
git 和 github 所以现在你应该拥有所有这些东西

443
11:10:49,520 --> 11:10:53,116
设置，因此您还应该有某种模拟器模拟器或真实设备

444
11:10:53,116 --> 11:10:57,596
设置，所以我们正在从 Visual Studio 代码或 android 测试我们的应用程序

445
11:10:57,596 --> 11:11:02,160
工作室或升华这些设备上每个人的任何文字

446
11:11:02,160 --> 11:11:05,916
嗯，在本章中，我们将按照标题所说的在这里进行讨论

447
11:11:05,916 --> 11:11:09,680
关于电子邮件验证和嗯

448
11:11:09,680 --> 11:11:12,560
我在里面谈过这个

449
11:11:12,560 --> 11:11:16,160
前几章之一 为什么我们需要电子邮件验证

450
11:11:16,160 --> 11:11:20,000
但主要原因是正如你在标题中看到的那样，人们说

451
11:11:20,000 --> 11:11:24,960
可以使用他们不拥有的电子邮件进行注册，这有点问题

452
11:11:24,960 --> 11:11:27,756
和嗯

453
11:11:27,756 --> 11:11:32,640
这是一个问题的原因是你可能

454
11:11:32,640 --> 11:11:37,840
实际上我可以在这里看到我的 wi-fi 有点跳闸

455
11:11:37,840 --> 11:11:42,160
好的，它现在已连接，对此感到抱歉，

456
11:11:42,160 --> 11:11:46,240
可能发生的情况是，如果用户进入应用程序并启动您的

457
11:11:46,240 --> 11:11:49,916
在他们的手机或平板电脑上颤动应用程序，然后他们注册

458
11:11:49,916 --> 11:11:55,436
他们不拥有的电子邮件，然后我作为该电子邮件地址的合法所有者

459
11:11:55,436 --> 11:11:58,640
来下载相同的应用程序并尝试注册我的电子邮件

460
11:11:58,640 --> 11:12:02,400
并且应用程序以及此电子邮件地址已经存在

461
11:12:02,400 --> 11:12:04,720
所以

462
11:12:04,720 --> 11:12:08,800
嗯，所以我们这里有一个问题，所以我们需要确保的是 p 人

463
11:12:08,800 --> 11:12:14,560
在电子邮件中注册的人还可以验证他们是否拥有该电子邮件地址

464
11:12:14,560 --> 11:12:18,720
所以让我们在本章中处理它

465
11:12:18,720 --> 11:12:22,640
会调出 Visual Studio 代码，或者你也调出

466
11:12:22,640 --> 11:12:26,800
您选择的编辑器，您在哪里

467
11:12:26,800 --> 11:12:30,400
嗯，你觉得舒服的编辑器

468
11:12:30,400 --> 11:12:35,596
我只是要记下我已经谈过的笔记

469
11:12:35,596 --> 11:12:41,040
所以我们要在这里做的第一步是在这里进入我们的主要飞镖文件

470
11:12:41,040 --> 11:12:47,040
我相信在主页之后并创建一个完整的状态小部件

471
11:12:47,040 --> 11:12:49,596
所以我现在就这样做

472
11:12:49,596 --> 11:12:54,000
sd 记住 sdf stateful 然后我们要打电话让我看看

473
11:12:54,000 --> 11:12:56,880
验证电子邮件视图

474
11:12:56,880 --> 11:13:03,200
好的，在这里我们要做什么

475
11:13:03,200 --> 11:13:08,000
只是返回一个简单的脚手架，所以我只想说返回脚手架

476
11:13:08,000 --> 11:13:11,436
现在我们会在这里遇到一个缺点错误，所以我要

477
11:13:11,436 --> 11:13:14,960
把常数放在那里

478
11:13:14,960 --> 11:13:19,200
嗯，这是我们的有状态小部件

479
11:13:19,200 --> 11:13:24,880
那么我们要做的是，我们就像你在这里看到的那样

480
11:13:24,880 --> 11:13:30,880
看到嗯电子邮件在这里没有验证我们只是说你很抱歉

481
11:13:30,880 --> 11:13:34,240
经过验证，我们说您是经过验证的用户，如果您未经过验证，我们只是

482
11:13:34,240 --> 11:13:38,480
说您需要先验证您的电子邮件，但在这两种情况下，我们正在做的是

483
11:13:38,480 --> 11:13:43,200
我们只是返回一个显示完成的文本小部件并显示在此处

484
11:13:43,200 --> 11:13:46,400
所以我们需要在这里做的是

485
11:13:46,400 --> 11:13:53,116
如果用户在这里得到验证，我们会说返回这个

486
11:13:53,116 --> 11:14:00,000
否则我们需要做的是显示这个验证电子邮件视图好吗

487
11:14:00,000 --> 11:14:03,200
但是我们现在需要这样做的方式

488
11:14:03,200 --> 11:14:06,160
随着我们的继续，我们实际上会解决这个问题，但现在我只是

489
11:14:06,160 --> 11:14:11,200
想向您展示如何将视图推送到屏幕中，现在推送是一个概念

490
11:14:11,200 --> 11:14:14,800
我相信进入

491
11:14:14,800 --> 11:14:20,000
就像早期ios和android走红后普遍存在

492
11:14:20,000 --> 11:14:25,436
像 2006 年 2007 年的日子我想实际上是 2007 年

493
11:14:25,436 --> 11:14:31,116
推是你有一个屏幕的地方，你看到那个屏幕，然后

494
11:14:31,116 --> 11:14:34,640
你按下一个按钮或其他东西，另一个屏幕只是一种推动

495
11:14:34,640 --> 11:14:37,680
本身在现有屏幕之上

496
11:14:37,680 --> 11:14:43,276
所以我们现在需要做的是如果我们看到你没有

497
11:14:43,276 --> 11:14:47,360
验证您的电子邮件您要推送此验证电子邮件视图和一种方法

498
11:14:47,360 --> 11:14:52,560
嗯，颤振是用一种叫做导航器的东西和

499
11:14:52,560 --> 11:14:55,520
记住这有点问题 我们要做的事情

500
11:14:55,520 --> 11:14:59,436
现在做实际上会导致错误，我会解释这一切，但是

501
11:14:59,436 --> 11:15:05,520
现在让我们继续执行此操作，以便我们继续进行修复

502
11:15:05,520 --> 11:15:07,200
可以，然后呢

503
11:15:07,200 --> 11:15:10,800
在这里，我们说您需要先验证您的电子邮件，我们可以

504
11:15:10,800 --> 11:15:15,840
实际上在控制台中看到，嗯，在这里，嗯，哦，你看不到它，因为它是

505
11:15:15,840 --> 11:15:19,756
被标题隐藏，但你现在可以看到它说

506
11:15:19,756 --> 11:15:26,080
你需要先验证你的电子邮件，所以让我们继续吧

507
11:15:26,080 --> 11:15:31,436
将验证电子邮件视图推送到屏幕上是什么

508
11:15:31,436 --> 11:15:35,116
我要做我要摆脱这个所以嗯

509
11:15:35,116 --> 11:15:37,276
做呃

510
11:15:37,276 --> 11:15:42,320
如果我回到相同的布局，我应该在这里做什么，这样你就可以看到是的

511
11:15:42,320 --> 11:15:46,480
那可能更好，所以进去说导航器

512
11:15:46,480 --> 11:15:49,276
关闭和

513
11:15:49,276 --> 11:15:54,400
然后你说你的构建上下文，然后你应该说 push

514
11:15:54,400 --> 11:15:57,116
现在 push 是你正在调用的函数

515
11:15:57,116 --> 11:16:01,116
你可以在这里看到它的行为它说好的

516
11:16:01,116 --> 11:16:04,560
给我一条路线

517
11:16:04,560 --> 11:16:09,520
然后你在这里说材料路线嗯材料页面路线

518
11:16:09,520 --> 11:16:12,640
好的，然后这里有一个构建器功能

519
11:16:12,640 --> 11:16:16,640
嗯，我会解释这一切

520
11:16:16,640 --> 11:16:20,800
很快给你，然后在这里说验证电子邮件视图

521
11:16:20,800 --> 11:16:25,436
就这样嗯

522
11:16:25,436 --> 11:16:28,560
我们必须归还这一切

523
11:16:28,560 --> 11:16:32,320
我认为这一切都有问题

524
11:16:32,320 --> 11:16:36,320
让我们看看建造者，然后我们正在这样做，然后我认为一个括号是

525
11:16:36,320 --> 11:16:40,000
缺少它，所以这个就在那里关闭

526
11:16:40,000 --> 11:16:43,756
然后就是这个，它需要被毁掉，什么是

527
11:16:43,756 --> 11:16:46,880
显示的实际错误返回时间未来动态不是

528
11:16:46,880 --> 11:16:51,436
需要的小部件好的，嗯，我们需要做的就是做

529
11:16:51,436 --> 11:16:54,000
这

530
11:16:54,000 --> 11:17:00,000
是的，这很好，所以让我们把这个回报恢复到原来的位置，

531
11:17:00,000 --> 11:17:04,320
然后我们也从这里删除这个打印语句和这个打印语句

532
11:17:04,320 --> 11:17:08,320
从那里开始做这个缺点，我会解释这一切，所以别担心

533
11:17:08,320 --> 11:17:11,520
关于这一切，所以

534
11:17:11,520 --> 11:17:16,240
如您所见，这里发生的事情

535
11:17:16,240 --> 11:17:20,560
抱歉，今天我的喉咙不适合我

536
11:17:20,560 --> 11:17:26,480
所以这里发生的事情是你在我们未来的建设者中看到的

537
11:17:26,480 --> 11:17:31,840
我们应该在我们现在在这里看到的构建器功能中

538
11:17:31,840 --> 11:17:36,400
我们总是希望返回一个小部件，这就是未来的构建者所做的

539
11:17:36,400 --> 11:17:40,800
它本身就是一个执行功能的小部件，一旦

540
11:17:40,800 --> 11:17:44,000
未来已经完成，或者它出错了，或者其他什么

541
11:17:44,000 --> 11:17:48,960
然后它调用这个构建器函数，并且在构建器函数中它是预期的

542
11:17:48,960 --> 11:17:53,116
返回该构建器函数本身应返回一个小部件

543
11:17:53,116 --> 11:17:57,756
可以在屏幕上显示的东西现在你作为开发人员的工作正在使用

544
11:17:57,756 --> 11:18:01,520
未来的构建器实际上是在这个构建器函数中返回一个小部件，并且

545
11:18:01,520 --> 11:18:05,040
这就是为什么我们在这里做我们在这里做的我们说如果

546
11:18:05,040 --> 11:18:09,436
如果未来完成，则连接状态返回完成的文本

547
11:18:09,436 --> 11:18:13,756
否则返回这个文本，所以我们基本上有

548
11:18:13,756 --> 11:18:19,436
在这里履行了合同嗯协议

549
11:18:19,436 --> 11:18:24,320
builder 期望一个小部件，我们返回一个小部件，但是我们试图变得聪明

550
11:18:24,320 --> 11:18:28,880
在这里说好的，我们确实返回完成，但我们正在执行一个动作

551
11:18:28,880 --> 11:18:33,916
这是这个上下文的导航器，这是我们的构建上下文，我们还没有

552
11:18:33,916 --> 11:18:38,000
之前讨论了很多构建上下文，但您实际上可以看到

553
11:18:38,000 --> 11:18:42,720
我的意思是文档不是很清楚，也许它说这个类提供了一个集合

554
11:18:42,720 --> 11:18:46,880
可以从构建方法和从

555
11:18:46,880 --> 11:18:51,680
但无论如何，构建上下文有点像打包的

556
11:18:51,680 --> 11:18:56,400
您可以使用的信息，以便将数据从一个小部件传递到

557
11:18:56,400 --> 11:19:01,756
另一个非常有用，例如，如果您使用块并且我们

558
11:19:01,756 --> 11:19:05,436
还没有讨论过块，但只知道构建上下文有点像

559
11:19:05,436 --> 11:19:09,756
有关小部件所在上下文的一些信息

560
11:19:09,756 --> 11:19:12,640
就在这里，我们所说的我们是

561
11:19:12,640 --> 11:19:17,680
说创建这个上下文的导航器，导航器只是一个类

562
11:19:17,680 --> 11:19:21,116
对你来说还好，然后当你告诉导航器推送一些东西时，它说好的

563
11:19:21,116 --> 11:19:25,596
你想让我在屏幕上按什么然后我们说创建一个材料

564
11:19:25,596 --> 11:19:28,160
要推送的页面路径

565
11:19:28,160 --> 11:19:33,436
您可以看到材料页面路由有一个名为 builder 的参数

566
11:19:33,436 --> 11:19:38,160
本身就需要一个小部件，所以你需要返回一个小部件

567
11:19:38,160 --> 11:19:41,360
在这个构建函数中，但老实说，我们在这里所做的一切都是

568
11:19:41,360 --> 11:19:44,560
只是说在屏幕上推送一个小部件就是这样，就像

569
11:19:44,560 --> 11:19:48,480
您需要了解的格式 上下文推送材料的好导航器

570
11:19:48,480 --> 11:19:52,400
页面路由构建器上下文，然后将小部件放在那里

571
11:19:52,400 --> 11:19:57,040
好吧好吧那是很多信息

572
11:19:57,040 --> 11:20:02,160
我的意思是现在看起来还不错

573
11:20:02,160 --> 11:20:05,436
所以但是它有问题并且

574
11:20:05,436 --> 11:20:09,520
如果你不小心，你可能会错过这个问题，我真的很喜欢

575
11:20:09,520 --> 11:20:14,000
调出我的调试控制台，让我知道所有

576
11:20:14,000 --> 11:20:18,240
可能发生的问题以及您可以在屏幕上看到的问题

577
11:20:18,240 --> 11:20:22,640
它说处理异常包颤动

578
11:20:22,640 --> 11:20:27,436
小部件导航器飞镖在导航器中失败断言行等等

579
11:20:27,436 --> 11:20:31,840
以至于出现错误[音乐]

580
11:20:31,840 --> 11:20:36,720
嗯，实际上有一个 github 问题

581
11:20:36,720 --> 11:20:40,720
我可以看到我实际上也将它链接到了那里，但我们要来

582
11:20:40,720 --> 11:20:45,040
但请注意，我们在这里所做的并不是很好

583
11:20:45,040 --> 11:20:50,160
在未来的建设者内部推动一些东西不是一个好主意，但我们要

584
11:20:50,160 --> 11:20:55,436
无论如何都要这样做，以便我们以后可以修复它，以便您至少知道这一点

585
11:20:55,436 --> 11:20:59,916
问题存在，同时我们实现了我们在这里尝试做的事情

586
11:20:59,916 --> 11:21:05,520
在这种情况下，一旦满足条件，它就会显示一个新的小部件

587
11:21:05,520 --> 11:21:11,520
用户的电子邮件没有经过验证

588
11:21:11,520 --> 11:21:16,560
好吧，我们现在需要做的是解决这个问题

589
11:21:16,560 --> 11:21:20,640
在这里修复我们的小部件

590
11:21:20,640 --> 11:21:24,960
我会在我的笔记中记一些项目

591
11:21:24,960 --> 11:21:28,320
好吧，现在我们的

592
11:21:28,320 --> 11:21:33,680
呃验证电子邮件查看它这是一个完全宽的脚手架

593
11:21:33,680 --> 11:21:37,360
它甚至没有应用栏，里面什么都没有，所以我们能做的是

594
11:21:37,360 --> 11:21:41,436
首先在这里创建一个应用栏，所以我们说应用栏

595
11:21:41,436 --> 11:21:44,960
和应用栏标题我们以前做过，所以你应该

596
11:21:44,960 --> 11:21:48,840
已经知道语法，然后标题只会说验证

597
11:21:48,840 --> 11:21:53,680
电子邮件 验证电子邮件

598
11:21:53,680 --> 11:21:57,200
我可以看到 appbar 标题是文本我什至不知道我做错了什么

599
11:21:57,200 --> 11:22:00,720
老实说，这里的约束不是缺点教练，它只是意味着

600
11:22:00,720 --> 11:22:05,756
好吧，我必须删除它，我必须使这个文本成为 const

601
11:22:05,756 --> 11:22:10,080
嗯，我的意思是我喜欢过去这些事情

602
11:22:10,080 --> 11:22:13,116
但如果你没有这样做，你可能会有点困惑

603
11:22:13,116 --> 11:22:17,040
在你可能对我在这里做什么感到困惑之前让我们也许我应该解释一下

604
11:22:17,040 --> 11:22:20,080
实际上这就是你所看到的

605
11:22:20,080 --> 11:22:24,320
在我们开始使用脚手架中的应用栏之前，一切都很好

606
11:22:24,320 --> 11:22:28,240
飞镖完全没问题，我说好吧，我会接受这个，因为它是什么

607
11:22:28,240 --> 11:22:32,720
我们在这里告诉 dart 我们正在创建一个脚手架，它是一个常量

608
11:22:32,720 --> 11:22:36,880
脚手架这意味着我们实际上并没有做任何特殊的配置

609
11:22:36,880 --> 11:22:42,160
这使得这不是一个恒定的好，但那就是让我们真的去这里我在

610
11:22:42,160 --> 11:22:45,596
在我的 Macintosh 上按住命令 你可以按住 control 你的

611
11:22:45,596 --> 11:22:49,116
linux机器或windows并点击脚手架

612
11:22:49,116 --> 11:22:52,160
对不起，你可以看到初始化程序

613
11:22:52,160 --> 11:22:55,596
我在这里调用或我在这里调用的构造函数被标记为 const

614
11:22:55,596 --> 11:22:59,276
在这里可以，但只要我们把应用栏放在这里

615
11:22:59,276 --> 11:23:04,240
我要再次点击同一件事让我们看看

616
11:23:04,240 --> 11:23:09,200
如果我们能找到那个初始化器

617
11:23:09,200 --> 11:23:14,720
脚手架应用栏这个应用栏我真的找不到那个特别的

618
11:23:14,720 --> 11:23:18,480
初始化程序，但发生了什么

619
11:23:18,480 --> 11:23:22,800
基本上这里是说嗯

620
11:23:22,800 --> 11:23:28,880
你在这里尝试做的是创建一个应用栏，里面有一个文本

621
11:23:28,880 --> 11:23:33,916
这里的文本小部件和应用栏使这个脚手架小部件不是常量

622
11:23:33,916 --> 11:23:37,360
好了，所以你需要做的第一件事就是说

623
11:23:37,360 --> 11:23:40,640
好吧，我明白这不再是一个常数了

624
11:23:40,640 --> 11:23:43,520
脚手架，但你在这里得到一个错误或

625
11:23:43,520 --> 11:23:47,680
一个问题告诉你已经从脚手架上删除了通讯但是

626
11:23:47,680 --> 11:23:51,916
您仍然可以通过使您的文本成为常量来使您的代码更好，因为这

627
11:23:51,916 --> 11:23:56,080
文本场景文本小部件似乎是一个常数，所以我要做

628
11:23:56,080 --> 11:24:01,916
那一个常数现在好了 回到我们的

629
11:24:01,916 --> 11:24:09,596
所以我要在这里按 command s 不是真的，我要热重启

630
11:24:09,596 --> 11:24:13,040
验证电子邮件没问题，我可以看到我们有，是的

631
11:24:13,040 --> 11:24:17,200
再次，我们遇到了热重载问题，因为一旦我们进行热重载，

632
11:24:17,200 --> 11:24:21,040
我们得到这个错误，但这个错误仅仅是因为一些奇怪的东西

633
11:24:21,040 --> 11:24:24,560
我们在这里做，所以如果你得到错误只是做热重启，你应该

634
11:24:24,560 --> 11:24:27,436
很好，直到我们解决了这个问题

635
11:24:27,436 --> 11:24:31,756
好的，你可以在本章的标题中看到我们需要做什么

636
11:24:31,756 --> 11:24:35,916
这里要做的是显示一个列文本和一个发送验证的文本按钮

637
11:24:35,916 --> 11:24:40,560
电子邮件，所以让我们转到脚手架的正文，所以我只想说正文

638
11:24:40,560 --> 11:24:45,680
让我们创建一个列子项和子项内部

639
11:24:45,680 --> 11:24:51,360
让我们去说我们有一条短信并说请验证

640
11:24:51,360 --> 11:24:55,040
您的电子邮件地址

641
11:24:55,040 --> 11:24:59,200
就是这样，然后我们在这里要做的就是放置一个

642
11:24:59,200 --> 11:25:04,400
文本按钮，也许还有什么更好的

643
11:25:04,400 --> 11:25:06,960
如果我向上滚动一点，那么你

644
11:25:06,960 --> 11:25:10,480
可以看到完整的代码然后是文本按钮，如果你记得的话

645
11:25:10,480 --> 11:25:14,800
从前几章来看，它有两个非常重要且必需的参数

646
11:25:14,800 --> 11:25:18,480
根据飞镖的孩子和新闻

647
11:25:18,480 --> 11:25:21,520
分析工具或颤振分析工具

648
11:25:21,520 --> 11:25:27,276
那些小部件的子参数或接受子的那些函数

649
11:25:27,276 --> 11:25:31,680
最好始终是最后一个参数，所以继续创建

650
11:25:31,680 --> 11:25:36,480
先不按，然后继续，在孩子中创造孩子

651
11:25:36,480 --> 11:25:42,160
我们将关闭短信并发送电子邮件验证

652
11:25:42,160 --> 11:25:45,520
好的，让这个文本内容如此黑暗是

653
11:25:45,520 --> 11:25:49,436
对此感到高兴并使其保持不变以及按 command s

654
11:25:49,436 --> 11:25:55,596
并且不要忘记这里的逗号然后热重载，这样我们就可以看到结果

655
11:25:55,596 --> 11:25:59,680
好的，所以现在我们有一些文本，然后我们有一个按钮，上面写着

656
11:25:59,680 --> 11:26:04,320
发送电子邮件验证

657
11:26:04,320 --> 11:26:07,116
好的，我会把它记在我已经谈过的笔记中，所以我们不

658
11:26:07,116 --> 11:26:11,116
想念它，嗯，现在我们需要做的是

659
11:26:11,116 --> 11:26:16,080
按下这个按钮，我们实际上需要发送一封电子邮件

660
11:26:16,080 --> 11:26:22,960
验证当前用户没问题，所以我们需要的是当前用户，这样

661
11:26:22,960 --> 11:26:28,240
来自让我们看看我们是否可以在我们的

662
11:26:28,240 --> 11:26:33,276
登录视图和注册视图我们让您看到登录视图或凭据 firebase

663
11:26:33,276 --> 11:26:37,360
代码嗯让我们看看实际上我们得到了用户

664
11:26:37,360 --> 11:26:41,520
就在这里，firebase 初始化应用程序，然后我们就像火一样，是的，就是这样

665
11:26:41,520 --> 11:26:45,840
你得到你当前的用户 firebase auth instance current user 好，所以我要走了

666
11:26:45,840 --> 11:26:52,160
可以从我们的主页复制该信息并将其带入您的

667
11:26:52,160 --> 11:26:56,400
验证按钮中的电子邮件视图状态按下那里

668
11:26:56,400 --> 11:26:59,756
所以这就是你让你的用户没事的方式

669
11:26:59,756 --> 11:27:04,080
现在我们需要做的是正如标题所说，我们需要等待用户

670
11:27:04,080 --> 11:27:09,756
发送电子邮件验证，所以说等待用户发送

671
11:27:09,756 --> 11:27:14,720
让我们看看用户发送电子邮件验证好了，所以现在

672
11:27:14,720 --> 11:27:19,596
你可以看到这是一个函数，它说它不能是无条件的

673
11:27:19,596 --> 11:27:23,436
被调用，那是因为 user 可以是 nil

674
11:27:23,436 --> 11:27:27,116
或 null 并且它是一个可选用户，因此您已经

675
11:27:27,116 --> 11:27:30,560
从前面的章节中理解你需要有条件地

676
11:27:30,560 --> 11:27:34,160
现在访问这个函数在这里要小心一点，因为这个函数是

677
11:27:34,160 --> 11:27:38,800
未来你会看到它是一个未来的空虚，所以你知道调用一个返回的函数

678
11:27:38,800 --> 11:27:44,160
未来 void 不会调用未来，除非它只告诉函数

679
11:27:44,160 --> 11:27:48,720
返回未来好吧，所以如果你真的想要未来被执行

680
11:27:48,720 --> 11:27:53,520
你需要等待它所以如果你然后在这里说等待

681
11:27:53,520 --> 11:27:58,320
你会看到我们得到一个错误，告诉你不能进行异步调用

682
11:27:58,320 --> 11:28:02,720
在您所在的当前 uh 范围内调用，这很简单

683
11:28:02,720 --> 11:28:07,360
因为未按下的功能没有标记为异步好的所以记住

684
11:28:07,360 --> 11:28:09,520
那很棒

685
11:28:09,520 --> 11:28:12,480
所以嗯，我要按命令在这里我们得到

686
11:28:12,480 --> 11:28:17,680
错误我会做这个热重启然后

687
11:28:17,680 --> 11:28:21,756
呃，如果我没记错的话，我的意思是如果我打开浏览器让我们看看我能不能带上一个

688
11:28:21,756 --> 11:28:26,560
浏览器窗口在这里，我要说 console.firebase google

689
11:28:26,560 --> 11:28:30,720
让我们去我们的 mynotes flatter 项目，让我们去看看

690
11:28:30,720 --> 11:28:34,840
我们的身份验证我可以看到这里有一个用户它说

691
11:28:34,840 --> 11:28:37,756
pixelityab.gmail.com 对你来说可能会说别的

692
11:28:37,756 --> 11:28:40,640
希望它会说点别的，这样你就没有在我的网站上注册了

693
11:28:40,640 --> 11:28:44,400
电子邮件，然后我们需要做的就是简单地

694
11:28:44,400 --> 11:28:48,560
去这里并按发送电子邮件验证按钮

695
11:28:48,560 --> 11:28:50,400
繁荣好吧

696
11:28:50,400 --> 11:28:55,756
所以屏幕上什么也没发生，嗯

697
11:28:55,756 --> 11:28:58,480
我要在这里调出正确的标题，这样你就知道我们在说什么

698
11:28:58,480 --> 11:29:02,320
现在我们想看看这封电子邮件的实际样子

699
11:29:02,320 --> 11:29:08,480
所以让我们看看我是否可以在没有 uh 的情况下调出那封电子邮件

700
11:29:08,480 --> 11:29:12,880
没有呃

701
11:29:12,880 --> 11:29:16,640
我喜欢提起我所有的嗯

702
11:29:16,640 --> 11:29:21,200
其他电子邮件和其他用户，因为这有点像私人信息

703
11:29:21,200 --> 11:29:25,436
所以好吧，让我们继续看看

704
11:29:25,436 --> 11:29:30,240
然后我会在屏幕上显示这封电子邮件，以便您查看它的外观

705
11:29:30,240 --> 11:29:32,800
像这样

706
11:29:32,800 --> 11:29:37,276
您可以在此处看到的那个电子邮件地址 这是我的电子邮件地址，或者这是

707
11:29:37,276 --> 11:29:41,756
登录到我们的应用程序的用户然后收到一封来自

708
11:29:41,756 --> 11:29:46,320
在 mynotesflusterproject.firebaseapp.com 上没有回复的 firebase

709
11:29:46,320 --> 11:29:48,960
好的，它说好的，你需要点击

710
11:29:48,960 --> 11:29:54,800
此链接以验证您的用户

711
11:29:54,800 --> 11:29:57,596
现在我要采取我的行动

712
11:29:57,596 --> 11:30:01,360
我在这里谈过的笔记

713
11:30:01,360 --> 11:30:05,596
然后让我们点击这个链接来验证我们的身份，这里说

714
11:30:05,596 --> 11:30:10,960
您的电子邮件已通过验证 您无法使用新帐户登录 很好 好的

715
11:30:10,960 --> 11:30:15,436
所以我要结束记录我已经讨论过的笔记

716
11:30:15,436 --> 11:30:18,800
嗯，我们可以在这里做的就是

717
11:30:18,800 --> 11:30:24,080
刷新这里，你可以看到这个用户并没有什么不同

718
11:30:24,080 --> 11:30:26,800
所以嗯

719
11:30:26,800 --> 11:30:30,160
我们也在关注那个用户，你现在真的不是我的意思

720
11:30:30,160 --> 11:30:33,436
无法亲自查看此用户是否已通过验证

721
11:30:33,436 --> 11:30:37,200
或者不是这样，也许这就是firebase的东西

722
11:30:37,200 --> 11:30:41,436
将来会提供，就像一个复选框或者说什么或者像一个

723
11:30:41,436 --> 11:30:44,880
是的，就像一个复选图标表示该用户是否已通过验证，但是

724
11:30:44,880 --> 11:30:50,320
您目前在firebase控制台中看不到，至少我看不到

725
11:30:50,320 --> 11:30:56,960
好的很多信息现在让我们去我们的嗯

726
11:30:56,960 --> 11:31:00,400
谈谈我们在屏幕上遇到的这个错误

727
11:31:00,400 --> 11:31:04,480
我在这里提供了一个小链接，我将点击它

728
11:31:04,480 --> 11:31:08,400
单独的屏幕，然后把它带到屏幕上，你可以

729
11:31:08,400 --> 11:31:13,200
现在看看你是否记得我们把这个推到了哪里

730
11:31:13,200 --> 11:31:15,520
验证邮件

731
11:31:15,520 --> 11:31:19,680
使用导航器和材料页面在屏幕上显示小部件

732
11:31:19,680 --> 11:31:23,436
我认为它被称为路线，它在哪里是材料页面

733
11:31:23,436 --> 11:31:26,160
你还记得我们在处理时遇到了这个错误吗

734
11:31:26,160 --> 11:31:31,040
例外好吧，然后这里实际上有一个问题

735
11:31:31,040 --> 11:31:34,960
Flutter 的 github 存储库，如你所知 Flutter

736
11:31:34,960 --> 11:31:39,276
是一个开源项目，是 github 上的一个组织

737
11:31:39,276 --> 11:31:43,360
他们为颤振所做的几乎所有事情都在此之下

738
11:31:43,360 --> 11:31:48,480
github上的组织，所以你可以在这里看到它说如何调用导航器推送

739
11:31:48,480 --> 11:31:52,320
在未来的构建器错误日志中，然后有很多关于

740
11:31:52,320 --> 11:31:55,840
比如应该做什么等等，但是

741
11:31:55,840 --> 11:32:00,320
只知道现在你需要知道的是你不能没有

742
11:32:00,320 --> 11:32:04,880
有这个错误虽然事情可能看起来不错

743
11:32:04,880 --> 11:32:07,840
在屏幕上，但正如你一看到

744
11:32:07,840 --> 11:32:11,596
hot hot reload 然后你就会有这个

745
11:32:11,596 --> 11:32:16,560
错误也因此引发了异常，我们需要

746
11:32:16,560 --> 11:32:20,480
处理好，所以

747
11:32:20,480 --> 11:32:24,720
在你查看了那个 github 问题并且你已经完成了

748
11:32:24,720 --> 11:32:28,160
评论你会明白那不是在颤抖中做事的方式

749
11:32:28,160 --> 11:32:33,116
至少现在不是，嗯，我实际上会把它放在我的

750
11:32:33,116 --> 11:32:36,240
笔记，所以如果你看到我在这里看，我只是确保我在解释

751
11:32:36,240 --> 11:32:39,116
对你来说一切都好，嗯

752
11:32:39,116 --> 11:32:43,360
所以我们现在需要做的是去改变我们的方式

753
11:32:43,360 --> 11:32:50,880
嗯，我们的验证电子邮件视图是这样创建的

754
11:32:50,880 --> 11:32:55,520
所以不是我们回来，你在这里看到我们正在做的是

755
11:32:55,520 --> 11:32:59,436
我们在我们的验证电子邮件视图中我们正在返回什么我们正在返回一个

756
11:32:59,436 --> 11:33:05,116
整个脚手架，这就是为什么我们试图将这个屏幕推送到我们的

757
11:33:05,116 --> 11:33:08,800
当前主页，因为我们说这是主页，并且

758
11:33:08,800 --> 11:33:12,640
然后这是验证电子邮件视图，它有一个像家一样的脚手架

759
11:33:12,640 --> 11:33:18,400
你还记得吗，如果你上到我们的主页主页也有一个

760
11:33:18,400 --> 11:33:22,480
脚手架和一个应用栏，所以我们现在要说的是

761
11:33:22,480 --> 11:33:26,720
这是主页，我们需要在上面移动另一个页面

762
11:33:26,720 --> 11:33:30,720
它几乎具有与应用程序部分等相同的结构

763
11:33:30,720 --> 11:33:33,916
这导致了问题，因为我们在未来推动一些事情

764
11:33:33,916 --> 11:33:37,436
builder，我们不允许这样做

765
11:33:37,436 --> 11:33:41,596
你现在需要做的是为了解决这个问题

766
11:33:41,596 --> 11:33:45,680
现在我们去拆除脚手架并在我们的

767
11:33:45,680 --> 11:33:50,720
构建函数我们要做的就是返回列好吧，继续

768
11:33:50,720 --> 11:33:54,000
你的脚手架在这里和这里

769
11:33:54,000 --> 11:33:58,000
我们要做的是我们只是会说，呃，让我们看看我们是否有一个

770
11:33:58,000 --> 11:34:01,360
在这里删除功能，我们没有，没关系

771
11:34:01,360 --> 11:34:05,520
我只是要抓住这个专栏，我要带一点

772
11:34:05,520 --> 11:34:08,160
up so you can see 我要在这里加一个逗号

773
11:34:08,160 --> 11:34:12,720
hot hot reload 所以我们在屏幕上看不到丑陋的错误

774
11:34:12,720 --> 11:34:17,756
并在这里抓住你的专栏，最后没有逗号

775
11:34:17,756 --> 11:34:21,840
该列并在构建函数中返回那个好，而不是你的

776
11:34:21,840 --> 11:34:27,276
脚手架和最后一个分号好吧

777
11:34:27,276 --> 11:34:31,276
嗯，这就是我们现在要做的

778
11:34:31,276 --> 11:34:35,916
现在我们只是要在那里返回列然后我们需要做什么

779
11:34:35,916 --> 11:34:38,000
嗯，让我看看其实我们就是这样

780
11:34:38,000 --> 11:34:41,520
现在要做还是我们以后要做的事情

781
11:34:41,520 --> 11:34:43,680
是的

782
11:34:43,680 --> 11:34:46,640
所以是的，我们现在更改了验证电子邮件视图和

783
11:34:46,640 --> 11:34:51,596
现在返回一列让我们进入这里当我们看到

784
11:34:51,596 --> 11:34:56,480
用户没有经过验证，那么我们需要做的就是说导航器

785
11:34:56,480 --> 11:35:01,840
我们的导航员将在这里返回我们的验证电子邮件视图，好吧，所以

786
11:35:01,840 --> 11:35:04,800
让我进去，然后说返回

787
11:35:04,800 --> 11:35:11,360
作为一个常数，在这里

788
11:35:11,360 --> 11:35:14,720
否则这样做，所以我要在这里按 command s

789
11:35:14,720 --> 11:35:19,040
和热重载

790
11:35:19,040 --> 11:35:20,880
可以，然后呢

791
11:35:20,880 --> 11:35:24,640
让我们去看看这里发生了什么所以我们要说的是

792
11:35:24,640 --> 11:35:30,000
如果用户实例当前如果用户电子邮件验证然后返回完成否则

793
11:35:30,000 --> 11:35:33,596
返回验证电子邮件视图，以便对您诚实

794
11:35:33,596 --> 11:35:36,240
是以前我们推动的

795
11:35:36,240 --> 11:35:40,880
当前屏幕上的整个屏幕现在我们正在做的是说这里是

796
11:35:40,880 --> 11:35:47,276
一个屏幕已经放了这个验证电子邮件电子邮件视图小部件

797
11:35:47,276 --> 11:35:52,160
返回从当前当前内部的构建函数返回的

798
11:35:52,160 --> 11:35:55,916
屏幕的内容还可以，所以它有点不同，而不是推动

799
11:35:55,916 --> 11:36:00,640
全新的屏幕 我们将新屏幕的内容放入我们的屏幕中

800
11:36:00,640 --> 11:36:03,520
正确的

801
11:36:03,520 --> 11:36:08,916
好的，现在我们有了这个，我现在看到了

802
11:36:08,916 --> 11:36:13,756
我们的应用仍然认为我们没有经过验证，但我们能做的只是

803
11:36:13,756 --> 11:36:19,520
确保你能在这里看到，至少我们没有变得那么丑

804
11:36:19,520 --> 11:36:23,916
错误了所以如果我在这里做一个热重启

805
11:36:23,916 --> 11:36:27,360
我可以看到这个电子邮件验证，说实话有点奇怪

806
11:36:27,360 --> 11:36:31,916
和你在一起，因为我们确实验证了我们的用户，所以我要做的只是

807
11:36:31,916 --> 11:36:35,520
确保这个手机现在有

808
11:36:35,520 --> 11:36:38,160
嗯

809
11:36:38,160 --> 11:36:42,720
互联网连接，它确实让用户应该有

810
11:36:42,720 --> 11:36:47,116
已经过验证，我认为我们确实点击了

811
11:36:47,116 --> 11:36:50,160
验证电子邮件，所以让我回到这里

812
11:36:50,160 --> 11:36:54,640
回到应用程序，我们能做的就是停止

813
11:36:54,640 --> 11:36:58,640
应用程序从运行，然后在没有调试的情况下按运行，只是为了确保

814
11:36:58,640 --> 11:37:04,000
一切都设置正确，所以如果一切正常，那么我们

815
11:37:04,000 --> 11:37:07,756
不应该来验证电子邮件视图，而是我们应该去

816
11:37:07,756 --> 11:37:10,960
到这里

817
11:37:10,960 --> 11:37:14,560
我们应该向用户显示完成的文本

818
11:37:14,560 --> 11:37:17,756
所以让我们确保

819
11:37:17,756 --> 11:37:25,040
在我们继续下一个项目之前按预期工作

820
11:37:25,040 --> 11:37:29,116
我仍然可以看到这个，我们可以简单地放一些

821
11:37:29,116 --> 11:37:33,040
可怜的人在这里调试，只打印用户电子邮件，就像打印一样

822
11:37:33,040 --> 11:37:36,960
整个用户到屏幕命令没问题

823
11:37:36,960 --> 11:37:41,116
让我们进去吧，我可以看到已验证的电子邮件仍然是假的 是匿名的

824
11:37:41,116 --> 11:37:45,276
上次签名时间错误的元数据，所以它仍然认为

825
11:37:45,276 --> 11:37:48,880
我没有经过验证，所以我要做的是发送一封电子邮件

826
11:37:48,880 --> 11:37:54,320
验证，我只是去我的邮件这里

827
11:37:54,320 --> 11:37:59,276
让我去这里，让我们只是我要提出来

828
11:37:59,276 --> 11:38:04,160
那封电子邮件，让我确保

829
11:38:04,160 --> 11:38:07,756
我们可以点击那个链接

830
11:38:07,756 --> 11:38:11,916
它说您的电子邮件已经过验证

831
11:38:11,916 --> 11:38:16,000
然后让我们关闭它，我要进行热重载

832
11:38:16,000 --> 11:38:18,960
在这里，老实说，我仍然可以

833
11:38:18,960 --> 11:38:24,640
现在看到我们没有经过验证，所以让我们进入 safari

834
11:38:24,640 --> 11:38:26,800
然后说嗯

835
11:38:26,800 --> 11:38:34,080
firebase 颤振电子邮件已验证无法正常工作

836
11:38:34,080 --> 11:38:37,276
电子邮件验证让我们看看是否有什么东西

837
11:38:37,276 --> 11:38:42,640
我们缺少 uh firebase auth 当前用户，然后

838
11:38:42,640 --> 11:38:47,520
用户 null 已通过电子邮件验证，我相信这就是我们在这里所做的

839
11:38:47,520 --> 11:38:50,840
这不是希望未来实际上是用户

840
11:38:50,840 --> 11:38:55,276
是的，在这里我们正在初始化

841
11:38:55,276 --> 11:38:58,400
应用程序，这样它也应该可以正常工作

842
11:38:58,400 --> 11:39:03,840
然后我们得到用户，然后验证电子邮件应该也可以工作

843
11:39:03,840 --> 11:39:07,360
嗯，要实施的一件事是电子邮件验证

844
11:39:07,360 --> 11:39:10,880
并启动功能帝国是易于验证的理想方法

845
11:39:10,880 --> 11:39:16,640
使用firebase很好，这不是真正的问题

846
11:39:16,640 --> 11:39:21,040
连接状态等待，这可能只是我们需要

847
11:39:21,040 --> 11:39:25,840
只需尝试使用该用户登录，以便它再次尝试联系 firebase

848
11:39:25,840 --> 11:39:27,520
可以，然后呢

849
11:39:27,520 --> 11:39:34,160
我要做的是按照我们在这里的计划让我们去改变两者

850
11:39:34,160 --> 11:39:39,436
登录视图和注册视图，这样它们就不会返回

851
11:39:39,436 --> 11:39:44,160
一个完整的脚手架，但我们要确保他们只返回

852
11:39:44,160 --> 11:39:48,720
他们的实际内容还可以，正如您在标题中看到的那样

853
11:39:48,720 --> 11:39:52,000
在这里，他们现在不应该返回脚手架

854
11:39:52,000 --> 11:39:54,480
嗯，所以这将在家里完成

855
11:39:54,480 --> 11:39:57,596
页面所以我们走吧，我可以看到我有一点

856
11:39:57,596 --> 11:40:00,560
他们

857
11:40:00,560 --> 11:40:07,040
现在返回一个作为主页工作的脚手架，所以我刚刚修复了我们的

858
11:40:07,040 --> 11:40:11,276
那里还有小标题让我们去登录视图，我要去这里

859
11:40:11,276 --> 11:40:15,200
让我们在这里进入您的登录视图，您可以看到我们有 firebase 初始化应用程序

860
11:40:15,200 --> 11:40:19,200
未来的建设者，我们在登录视图和注册中也拥有所有这些逻辑

861
11:40:19,200 --> 11:40:24,080
我们不应该这样做，所以我要一直抓住这个返回专栏

862
11:40:24,080 --> 11:40:25,756
那里和

863
11:40:25,756 --> 11:40:29,520
一直走到返回栏结束的地方

864
11:40:29,520 --> 11:40:33,680
抓住那个，然后我几乎要核爆整个

865
11:40:33,680 --> 11:40:40,560
构建函数，而不是返回列，这就是我们的登录视图

866
11:40:40,560 --> 11:40:45,116
现在我们有很多未使用的导入，我将删除它们

867
11:40:45,116 --> 11:40:48,880
我也要去我们的

868
11:40:48,880 --> 11:40:53,436
注册视图，现在也做同样的事情

869
11:40:53,436 --> 11:40:56,240
注册视图转到您的构建功能

870
11:40:56,240 --> 11:41:00,080
注册视图和所有内容都需要删除，除了

871
11:41:00,080 --> 11:41:04,720
这是列的实际内容，所以

872
11:41:04,720 --> 11:41:10,240
如您在此处所见，请抓住该列 核对整个构建功能

873
11:41:10,240 --> 11:41:15,916
就回你的电话，所以我要在这里做的是

874
11:41:15,916 --> 11:41:19,116
修复此电子邮件验证问题

875
11:41:19,116 --> 11:41:22,960
也许我们在这里需要做的是

876
11:41:22,960 --> 11:41:27,040
现在让我们进去

877
11:41:27,040 --> 11:41:31,596
把所有的代码都注释掉，所以当firebase的初始化是

878
11:41:31,596 --> 11:41:34,800
完成只是返回您的登录视图，所以让我们说返回

879
11:41:34,800 --> 11:41:38,720
登录视图可以作为一个常量，所以我会

880
11:41:38,720 --> 11:41:43,360
按 command s 然后我们来这里，我要输入 pixelityab

881
11:41:43,360 --> 11:41:48,800
gmail.com football baz 好的，如果您从登录视图中记得如果

882
11:41:48,800 --> 11:41:52,560
你回到登录视图我们有这个漂亮的小东西

883
11:41:52,560 --> 11:41:55,520
将用户凭据打印到屏幕上，以便

884
11:41:55,520 --> 11:41:59,596
已经保存了，我也保存在这里

885
11:41:59,596 --> 11:42:04,480
因此，让我们在 gmail.com 上输入该信息像素选项卡，然后通过

886
11:42:04,480 --> 11:42:08,000
吧 bas 让我调出调试控制台

887
11:42:08,000 --> 11:42:10,960
并且有点改变屏幕布局，所以你会看到它更好一点

888
11:42:10,960 --> 11:42:15,916
好吧，我要清除控制台，然后按登录按钮

889
11:42:15,916 --> 11:42:19,680
所以现在我们有了你的用户凭证

890
11:42:19,680 --> 11:42:25,680
可以看到它已打印到屏幕上，现在电子邮件已验证设置为 true 所以

891
11:42:25,680 --> 11:42:30,320
问题是当发送电子邮件验证时

892
11:42:30,320 --> 11:42:33,040
firebase 作为您的用户，我的意思是

893
11:42:33,040 --> 11:42:36,720
我也需要学习一些东西，所以我真的很感激我正在学习

894
11:42:36,720 --> 11:42:39,436
因为我实际上是这么教的

895
11:42:39,436 --> 11:42:44,400
曾经这里发生的事情是我们验证了一封电子邮件和那封电子邮件

896
11:42:44,400 --> 11:42:48,640
验证我们点击了链接但firebase

897
11:42:48,640 --> 11:42:51,040
没有立即明白你已经

898
11:42:51,040 --> 11:42:55,040
作为用户现在已经验证了您的电子邮件，所以您需要做什么，您需要询问

899
11:42:55,040 --> 11:42:58,800
用户登录，此时似乎firebase实际上是

900
11:42:58,800 --> 11:43:02,960
在本地刷新该数据以及联系 Firebase 后端并获取

901
11:43:02,960 --> 11:43:06,960
来自那里的最新信息，因为您的用户已经验证

902
11:43:06,960 --> 11:43:09,916
他们的信息并不意味着该应用程序将立即

903
11:43:09,916 --> 11:43:15,360
明白了，所以你需要让用户重新登录好吗

904
11:43:15,360 --> 11:43:20,800
所以我现在可以在这里看到我们应该返回日志视图

905
11:43:20,800 --> 11:43:24,320
所以我要在我的笔记中记一些项目

906
11:43:24,320 --> 11:43:27,040
只是为了确保我已经谈论过他们

907
11:43:27,040 --> 11:43:32,160
我们现在正在返回登录视图

908
11:43:32,160 --> 11:43:36,160
来自我们的主页，所以这也是您在我们之前需要做的事情

909
11:43:36,160 --> 11:43:42,320
继续下一章好吧那是很多信息

910
11:43:42,320 --> 11:43:46,560
和嗯

911
11:43:46,560 --> 11:43:48,800
但是对于这一章

912
11:43:48,800 --> 11:43:54,400
我们所做的只是创建 uh verify uh email 视图或

913
11:43:54,400 --> 11:43:58,240
我们称之为验证验证电子邮件视图我们确保它可以

914
11:43:58,240 --> 11:44:01,840
发送一封电子邮件，我们单击电子邮件中的链接并确保用户是

915
11:44:01,840 --> 11:44:05,436
已验证，这就是一切都运行良好

916
11:44:05,436 --> 11:44:09,200
嗯，但我们还有很多工作要做

917
11:44:09,200 --> 11:44:12,640
正如您现在所看到的，我正在进入代码并手动喜欢

918
11:44:12,640 --> 11:44:16,960
返回我个人想看或对你很重要的屏幕

919
11:44:16,960 --> 11:44:21,680
例如查看登录视图，但如果您显示登录视图

920
11:44:21,680 --> 11:44:26,240
如果没有帐户，用户可以从登录视图进行注册

921
11:44:26,240 --> 11:44:30,800
他们可以登录，这就是我们在下一章要做的事情

922
11:44:30,800 --> 11:44:35,756
将在我们的屏幕之间创建链接，以便用户可以从一个屏幕转到

923
11:44:35,756 --> 11:44:38,160
另一个然后返回

924
11:44:38,160 --> 11:44:40,240
所以嗯

925
11:44:40,240 --> 11:44:45,756
所以是的，这一章的工作就是这样，我会在下一章见到你

926
11:44:45,756 --> 11:44:49,200
你好，欢迎来到时隙课程的第 17 章

927
11:44:49,200 --> 11:44:53,436
在前面的章节中，我们一直在与一些

928
11:44:53,436 --> 11:44:58,400
Flutter 的基础知识，例如我们一直在研究的有状态的无状态小部件

929
11:44:58,400 --> 11:45:03,360
我们一直在查看文本按钮和许多其他小部件和种类的列

930
11:45:03,360 --> 11:45:08,560
试图让我们的屏幕呈现给用户，并且

931
11:45:08,560 --> 11:45:11,040
同时我们一直致力于应用程序的功能

932
11:45:11,040 --> 11:45:15,040
例如登录注册验证电子邮件等

933
11:45:15,040 --> 11:45:20,160
我们有很多工作要做，嗯，我们要把它分解

934
11:45:20,160 --> 11:45:24,240
首先开始处理登录和注册视图之间的链接

935
11:45:24,240 --> 11:45:28,400
正如你现在看到的那样，我的意思是我要去

936
11:45:28,400 --> 11:45:32,320
以我们在前面的方式打开代码

937
11:45:32,320 --> 11:45:37,200
章节，你可以在主函数中看到

938
11:45:37,200 --> 11:45:42,000
对不起，在我们的主页小部件中，也让我改变

939
11:45:42,000 --> 11:45:44,720
嗯

940
11:45:44,720 --> 11:45:48,880
让我改变一下屏幕上不同视图的结构

941
11:45:48,880 --> 11:45:54,240
所以你可以看到更好所以如果我在这里做一个热重启你可以看到

942
11:45:54,240 --> 11:45:57,276
嗯，当firebase应用程序处于连接状态时

943
11:45:57,276 --> 11:46:01,276
已初始化，我正在显示，或者我们在此处显示登录视图，没有

944
11:46:01,276 --> 11:46:06,080
基本上可以选择从这里转到任何其他屏幕，所以如果我想

945
11:46:06,080 --> 11:46:09,520
将用户发送到注册视图，然后我必须在此处更改此代码

946
11:46:09,520 --> 11:46:13,520
然后说好吧，现在你必须去注册查看

947
11:46:13,520 --> 11:46:17,680
所以这就是为什么我们需要在这些之间建立联系

948
11:46:17,680 --> 11:46:22,080
两个视图我很抱歉我正在看这个屏幕只是因为我实际上需要

949
11:46:22,080 --> 11:46:26,640
确保我勾选了我已经解释过的项目，所以我们需要做

950
11:46:26,640 --> 11:46:30,080
确保当用户在登录屏幕上时，即使那是第一个屏幕

951
11:46:30,080 --> 11:46:32,880
我们总是向用户显示不是

952
11:46:32,880 --> 11:46:36,560
但即使是我们需要能够让用户从登录

953
11:46:36,560 --> 11:46:41,840
屏幕到注册表，也从注册表视图返回登录屏幕

954
11:46:41,840 --> 11:46:46,240
这就是我们在本章中要做的

955
11:46:46,240 --> 11:46:48,480
所以作为第一个

956
11:46:48,480 --> 11:46:52,880
我们必须解决的项目是转到我们的登录视图并添加一个

957
11:46:52,880 --> 11:46:58,560
将我们发送到注册表的按钮，所以我要打开

958
11:46:58,560 --> 11:47:02,880
我要把它带到这里 让屏幕在这里小一点

959
11:47:02,880 --> 11:47:07,680
所以让我们进入我们的登录视图，我可以看到它实际上是修改过的

960
11:47:07,680 --> 11:47:12,080
实际上没关系，我们需要在这里你可以看到我们

961
11:47:12,080 --> 11:47:17,840
有一个文本按钮，这是我们的登录查看登录按钮

962
11:47:17,840 --> 11:47:20,400
如您所见，缓存已添加文本，但它允许您向我们发送

963
11:47:20,400 --> 11:47:24,480
注册表视图，所以在这个文本按钮之后让我们创建一个新的文本按钮

964
11:47:24,480 --> 11:47:27,520
我要把它提高一点，这样你就可以看到我要说

965
11:47:27,520 --> 11:47:33,680
文本按钮记住 uh child 参数总是必须在 la 处

966
11:47:33,680 --> 11:47:38,800
它应该是最后一个参数，所以我要说 unpressed ask visual studio

967
11:47:38,800 --> 11:47:42,640
为我完成它的代码，然后我要说孩子文本将要

968
11:47:42,640 --> 11:47:47,596
说它应该说什么 如果它说没有注册

969
11:47:47,596 --> 11:47:51,200
然而，我们说在这里注册类似

970
11:47:51,200 --> 11:47:55,200
我让它保持不变，我要保存它，你可以看到

971
11:47:55,200 --> 11:47:59,116
现在我们这里有一个小按钮，上面写着尚未注册

972
11:47:59,116 --> 11:48:03,040
好的，所以这部分已经完成，但是按钮

973
11:48:03,040 --> 11:48:06,480
目前它现在的方式它没有做任何事情

974
11:48:06,480 --> 11:48:11,520
我们需要解决这个问题，但在我们这样做之前，我们需要

975
11:48:11,520 --> 11:48:15,916
谈论命名路线

976
11:48:15,916 --> 11:48:20,160
您在上一个练习或上一章中看到

977
11:48:20,160 --> 11:48:25,596
我们使用导航器和上下文点并推送

978
11:48:25,596 --> 11:48:28,640
然后我们创建了一个材质页面路由

979
11:48:28,640 --> 11:48:32,080
这对你来说可能有点像外星人，而你并不真正知道

980
11:48:32,080 --> 11:48:35,276
发生了什么，没关系，你会越来越了解它，因为我们

981
11:48:35,276 --> 11:48:39,040
浏览本课程中的各个章节，但我们需要做什么

982
11:48:39,040 --> 11:48:44,720
这里先谈谈什么是路由，什么是名称路由，我已经

983
11:48:44,720 --> 11:48:49,436
实际上在这里为您提供了一个文档链接

984
11:48:49,436 --> 11:48:52,720
我们可以走了 我要打开我的网络浏览器 我要创建一个

985
11:48:52,720 --> 11:48:56,960
新窗口，我要说颤振平均路线

986
11:48:56,960 --> 11:49:01,680
这将最终出现在您可以在那里看到的完全相同的链接中

987
11:49:01,680 --> 11:49:05,680
它在导航到新剧本配方的导航中显示

988
11:49:05,680 --> 11:49:08,960
但是，如果您需要导航到同一屏幕，实际上并不是这样

989
11:49:08,960 --> 11:49:12,000
老实说，我有点期待更好的描述

990
11:49:12,000 --> 11:49:15,756
描述，但也许我可以自己做，而不必看

991
11:49:15,756 --> 11:49:18,000
这个，我可以对你说实话

992
11:49:18,000 --> 11:49:21,596
这个网页是食谱的一部分

993
11:49:21,596 --> 11:49:26,480
那种可能都像链接在一起所以为了你

994
11:49:26,480 --> 11:49:30,080
要了解此页面，您实际上必须转到此链接并阅读

995
11:49:30,080 --> 11:49:33,520
然后看看然后这将是继续

996
11:49:33,520 --> 11:49:36,960
所以我只是把链接放在这里，这样你

997
11:49:36,960 --> 11:49:40,800
有它作为参考，但我会在这里自己解释

998
11:49:40,800 --> 11:49:45,756
现在，如果我们回到我们有命名路线的那个地方，让我们看看

999
11:49:45,756 --> 11:49:50,320
呃，当我们推它时，我们在哪里有名称路由它是相当早的

1000
11:49:50,320 --> 11:49:54,720
如果我可以在这里撤消的话

1001
11:49:54,720 --> 11:49:59,436
所以这是一种叫做匿名路线的东西，很抱歉我说的名字

1002
11:49:59,436 --> 11:50:04,800
路线，但这是一条匿名路线，因此路线如其名称所示

1003
11:50:04,800 --> 11:50:09,840
Flutter 是一个有开始和结束的旅程，所以它从一个开始

1004
11:50:09,840 --> 11:50:13,276
视图，它以视图结束，好吧，那是一条路线

1005
11:50:13,276 --> 11:50:15,916
嗯，但是有两种类型的路线

1006
11:50:15,916 --> 11:50:19,840
你可以在颤动中创建你的路线或者你去一个新的

1007
11:50:19,840 --> 11:50:24,240
屏幕从当前屏幕到您的目的地，而不提供任何

1008
11:50:24,240 --> 11:50:27,916
有关此路由对您的应用程序实际意味着什么的信息

1009
11:50:27,916 --> 11:50:32,320
所以这是一条匿名路线，你是在排队做的，你不会告诉颤动

1010
11:50:32,320 --> 11:50:37,916
事先了解这条路线，以便用户按下按钮或

1011
11:50:37,916 --> 11:50:41,840
例如，在这种情况下，用户最终会出现在主页和未来

1012
11:50:41,840 --> 11:50:46,400
构建器根据他们完成的连接初始化firebase，这意味着

1013
11:50:46,400 --> 11:50:50,800
firebase 的初始化完成然后我们正在推动

1014
11:50:50,800 --> 11:50:54,000
屏幕上的验证电子邮件视图，然后我们

1015
11:50:54,000 --> 11:50:58,240
通过执行所有这些代码来修复它，因此这是一条匿名路线

1016
11:50:58,240 --> 11:51:03,360
在完成连接状态发生时执行它然后我们正在推动一个新的

1017
11:51:03,360 --> 11:51:06,800
在我们的导航器中路由 uh

1018
11:51:06,800 --> 11:51:12,480
但是命名路由与我们编写的内容完全相同

1019
11:51:12,480 --> 11:51:17,840
之前，但你之前告诉颤振那条路线，这样当你的

1020
11:51:17,840 --> 11:51:23,040
应用程序被创建并初始化，颤振引擎启动它知道

1021
11:51:23,040 --> 11:51:27,520
例如，有一条名为 xyz 或 fubar bass 的路线，无论你

1022
11:51:27,520 --> 11:51:32,320
想要定义并且它去某个

1023
11:51:32,320 --> 11:51:36,560
屏幕没问题，这就是匿名路由和名称之间的区别

1024
11:51:36,560 --> 11:51:39,680
路线，因为它的名称表示命名路线

1025
11:51:39,680 --> 11:51:44,080
是一个有名字的路由，所以你告诉颤振关联这个特定的

1026
11:51:44,080 --> 11:51:50,800
名称作为此路由的字符串类型

1027
11:51:50,800 --> 11:51:56,400
好的，我将把它放在我们讨论过的笔记中

1028
11:51:56,400 --> 11:52:01,200
所以我们现在需要做的是为我们的

1029
11:52:01,200 --> 11:52:05,200
应用程序一个称为斜线登录斜线，另一个称为斜线

1030
11:52:05,200 --> 11:52:08,160
注册好

1031
11:52:08,160 --> 11:52:13,840
所以让我走吧，确保我正确地走这些路线

1032
11:52:13,840 --> 11:52:18,480
我要在这里做的，你也需要做的是去你的主要

1033
11:52:18,480 --> 11:52:22,480
函数，目前我们有一个标题

1034
11:52:22,480 --> 11:52:27,116
材料应用程序和主题数据，然后是这里的家

1035
11:52:27,116 --> 11:52:32,960
但是你也有一个叫做路由的参数好吧，所以让我们说吧

1036
11:52:32,960 --> 11:52:39,276
我们想创建这些路线，你可以在这里看到它说的路线

1037
11:52:39,276 --> 11:52:44,960
value 是字符串的映射和这些值的构建器函数

1038
11:52:44,960 --> 11:52:49,116
呃字符串键所以有点奇怪它是一个地图，其键是

1039
11:52:49,116 --> 11:52:54,960
字符串和值是接受一个

1040
11:52:54,960 --> 11:52:59,040
构建上下文对此感到抱歉并返回一个小部件，所以它有点

1041
11:52:59,040 --> 11:53:01,840
就像你的范式转变

1042
11:53:01,840 --> 11:53:07,040
头，但这些东西确实存在，我已经创建了自己的课程

1043
11:53:07,040 --> 11:53:09,756
那种期待这种参数

1044
11:53:09,756 --> 11:53:13,596
所以让我们进入路线并说好的现在我们有路线

1045
11:53:13,596 --> 11:53:18,080
如您所知，这就是我们创建地图的方式 map is a is a list of key

1046
11:53:18,080 --> 11:53:21,916
调用时的值对或映射条目

1047
11:53:21,916 --> 11:53:26,240
颤动，然后我们需要在这里做的是我

1048
11:53:26,240 --> 11:53:30,160
抱歉，我只是移动一些代码我这里有三个屏幕所以我

1049
11:53:30,160 --> 11:53:34,640
我在解释事情的同时必须管理这些屏幕

1050
11:53:34,640 --> 11:53:40,080
我们在这里要做的是定义两个路由斜杠登录好吧

1051
11:53:40,080 --> 11:53:45,360
记住这个路由中每个键的值的值需要

1052
11:53:45,360 --> 11:53:50,640
是一个函数，你看到它是一个返回一个小部件的函数，它需要一个

1053
11:53:50,640 --> 11:53:56,800
在里面建立上下文所以在这里我们要做的是说我们有一个

1054
11:53:56,800 --> 11:54:02,080
上下文，我们返回实际上很抱歉的登录斜线

1055
11:54:02,080 --> 11:54:07,596
我们可以返回登录视图，所以我们说有一个名为 slash login 的路由

1056
11:54:07,596 --> 11:54:13,116
斜线，当使用该路由时，它会返回登录视图

1057
11:54:13,116 --> 11:54:16,880
登录视图的一个实例现在我们需要做同样的事情，但是对于

1058
11:54:16,880 --> 11:54:21,116
注册所以我要复制这个，这里只是说注册和

1059
11:54:21,116 --> 11:54:25,756
而是返回我们没有导入到主 dart 中的寄存器视图

1060
11:54:25,756 --> 11:54:30,400
文件，您可以通过按 mac 上的 command dot 或 control dot on 来解决这个问题

1061
11:54:30,400 --> 11:54:34,480
windows和linux，然后说import register

1062
11:54:34,480 --> 11:54:37,596
看法

1063
11:54:37,596 --> 11:54:43,756
好的，就是这样，我要稍微看一下我的笔记

1064
11:54:43,756 --> 11:54:46,960
所以我们现在需要做的 嗯我已经

1065
11:54:46,960 --> 11:54:51,596
解释说在日志区域可以，所以我们现在需要做的是去

1066
11:54:51,596 --> 11:54:56,080
从登录到注册视图，如您所见，我已经解释过了

1067
11:54:56,080 --> 11:55:00,240
在标题中，这实际上会导致错误，但我们会修复

1068
11:55:00,240 --> 11:55:04,640
我们继续前进时出现这个错误，所以

1069
11:55:04,640 --> 11:55:09,040
在这个 uh 注册查看这里 抱歉在这个 um

1070
11:55:09,040 --> 11:55:12,320
在我们的登录视图中，让我们转到登录视图，我们有这个按钮

1071
11:55:12,320 --> 11:55:17,116
在这里，我们需要做的只是确保通过按下我们可以去

1072
11:55:17,116 --> 11:55:21,596
到正确的地方和

1073
11:55:21,596 --> 11:55:25,596
我想我提出了标题，你可以看到我们需要使用

1074
11:55:25,596 --> 11:55:30,480
上下文推送导航器命名并删除直到

1075
11:55:30,480 --> 11:55:35,360
这是一种特殊的调用，因为它本质上所做的是

1076
11:55:35,360 --> 11:55:38,000
你现在可以在我们的屏幕上看到

1077
11:55:38,000 --> 11:55:40,480
登录和

1078
11:55:40,480 --> 11:55:44,240
基本上，我们目前创造事物的方式是我们拥有

1079
11:55:44,240 --> 11:55:49,840
主页视图，它是一个小部件，然后取决于

1080
11:55:49,840 --> 11:55:54,320
实际上不不取决于任何东西，我们实际上只是硬编码登录

1081
11:55:54,320 --> 11:56:00,320
视图要在里面返回，这没关系，所以我们有 home 小部件，然后在里面

1082
11:56:00,320 --> 11:56:04,560
这个主页小部件我们正在插入登录视图的内容，因此登录视图和

1083
11:56:04,560 --> 11:56:08,560
主页有点像显示在彼此之上

1084
11:56:08,560 --> 11:56:11,840
这个主页有脚手架，而

1085
11:56:11,840 --> 11:56:14,720
登录视图没有任何脚手架和

1086
11:56:14,720 --> 11:56:18,720
如果您还记得我们可以返回登录视图，那么目前它只是一个专栏

1087
11:56:18,720 --> 11:56:24,560
你可以看到它只是一个列，所以这就是当前的结构

1088
11:56:24,560 --> 11:56:28,640
执行此命令，我在这里为您提供上下文推送名称的导航器

1089
11:56:28,640 --> 11:56:33,040
并删除，直到将要发生的事情是

1090
11:56:33,040 --> 11:56:38,320
名称表示它将删除所有内容

1091
11:56:38,320 --> 11:56:42,400
在它推动这条新路线之前

1092
11:56:42,400 --> 11:56:46,880
我们在这里基本上要说的是，通过按下尚未注册

1093
11:56:46,880 --> 11:56:50,800
按钮并在此处注册，我们将对该屏幕进行核对，将其完全删除

1094
11:56:50,800 --> 11:56:55,840
从屏幕上用这个新的小部件替换它，我们可以返回，所以

1095
11:56:55,840 --> 11:57:00,560
让我们在此按钮中进入我们的登录视图，进入登录视图，然后

1096
11:57:00,560 --> 11:57:06,800
抱歉，在尚未注册的按钮中，我们说导航器

1097
11:57:06,800 --> 11:57:11,360
上下文并删除，直到这里推送和删除

1098
11:57:11,360 --> 11:57:18,480
直到推送命名和删除直到和在这里现在我们需要显示我们的

1099
11:57:18,480 --> 11:57:24,480
注册路由，我们用它的名字来引用它

1100
11:57:24,480 --> 11:57:30,400
所以我们现在就去解决这个问题，所以我们在这里说

1101
11:57:30,400 --> 11:57:34,320
斜线寄存器和

1102
11:57:34,320 --> 11:57:39,360
把 false 放在那里，你可以看到你可以得到关于这个的文档和

1103
11:57:39,360 --> 11:57:44,080
这里有一个谓词返回返回true或false，它说push

1104
11:57:44,080 --> 11:57:46,880
将给定名称的路线放到导航器上，然后删除所有

1105
11:57:46,880 --> 11:57:50,320
之前的路由，直到谓词返回 true

1106
11:57:50,320 --> 11:57:53,680
目前我们只是说 return false 意思是 return remove

1107
11:57:53,680 --> 11:57:57,436
路线中的所有内容，然后转到注册视图，因此只需将其保留为

1108
11:57:57,436 --> 11:58:02,000
现在是错误的，这实际上会导致

1109
11:58:02,000 --> 11:58:06,880
一个问题，你很快就会看到我要热重启以防万一，我们

1110
11:58:06,880 --> 11:58:11,360
转到我们的登录视图，我要按不

1111
11:58:11,360 --> 11:58:16,480
在这里注册按钮和繁荣，你现在可以看到嗯

1112
11:58:16,480 --> 11:58:19,436
这实际上很棒，我们收到了这个错误，这正是我想要的

1113
11:58:19,436 --> 11:58:23,436
我预料到了，所以这里发生的是我们

1114
11:58:23,436 --> 11:58:26,720
删除屏幕上的所有内容并

1115
11:58:26,720 --> 11:58:31,360
推到没有脚手架的屏幕上，所以这是你的问题

1116
11:58:31,360 --> 11:58:35,520
可以在屏幕上看到是的，我不能只在屏幕上显示一列

1117
11:58:35,520 --> 11:58:40,480
周围没有任何东西，所以我们需要一种脚手架

1118
11:58:40,480 --> 11:58:44,720
这就是屏​​幕左下角的标题所说的

1119
11:58:44,720 --> 11:58:50,880
正如我在这里向你展示的那样，我会检查我的一些项目

1120
11:58:50,880 --> 11:58:54,560
屏幕，然后我们需要做的下一件事

1121
11:58:54,560 --> 11:59:00,240
现在是进入我们的注册视图，这就是我们在这里推送的内容

1122
11:59:00,240 --> 11:59:05,276
确保我们的注册视图现在突然有了一个脚手架，所以

1123
11:59:05,276 --> 11:59:09,436
让我们去这里的 lib 并注册我要的视图

1124
11:59:09,436 --> 11:59:14,320
在我们返回一列我是什么时在此处删除此项目资源管理器

1125
11:59:14,320 --> 11:59:18,880
要做的就是命令点击mac或控制点击linux和windows

1126
11:59:18,880 --> 11:59:23,436
说用小部件包装，然后调用这个小部件

1127
11:59:23,436 --> 11:59:28,960
脚手架，只说脚手架体

1128
11:59:28,960 --> 11:59:35,596
并为应用栏创建一个新的应用栏，并为其标题说文本，这是

1129
11:59:35,596 --> 11:59:40,400
注册视图或者只是说注册常量好的，我们只是要

1130
11:59:40,400 --> 11:59:43,916
就这样吧，我只是要仔细检查我的笔记以确保那是

1131
11:59:43,916 --> 11:59:49,360
我原本打算将寄存器视图实际称为是的，我可以看到

1132
11:59:49,360 --> 11:59:53,436
它在那里也被称为寄存器

1133
11:59:53,436 --> 11:59:56,960
所以我们现在有了，你可以看到

1134
11:59:56,960 --> 12:00:01,756
现在我们在注册视图中并且没有错误我要进行热重启

1135
12:00:01,756 --> 12:00:06,560
我们再次来到这里，现在我要按下尚未注册的按钮

1136
12:00:06,560 --> 12:00:10,640
你可以看到我们要去注册视图

1137
12:00:10,640 --> 12:00:15,756
好的，所以现在我们之间建立了良好的联系

1138
12:00:15,756 --> 12:00:21,680
登录视图到注册视图，但没有向后连接

1139
12:00:21,680 --> 12:00:26,560
从注册视图到登录视图没有连接，那就是

1140
12:00:26,560 --> 12:00:32,480
正是我们现在要做的，就像我们做的那样

1141
12:00:32,480 --> 12:00:36,320
我也要把一些东西记在笔记里

1142
12:00:36,320 --> 12:00:41,360
那么就像我们在嗯所做的那样

1143
12:00:41,360 --> 12:00:46,720
在登录视图中我要热重启所以你记得你可以

1144
12:00:46,720 --> 12:00:51,360
提醒我们做了什么我们有一个登录视图作为我们的登录按钮，我们

1145
12:00:51,360 --> 12:00:55,040
添加了一个从登录到注册的新项目，但我们也想确保

1146
12:00:55,040 --> 12:00:59,436
如果您已经注册并且最终出现在屏幕上，那么您可以

1147
12:00:59,436 --> 12:01:03,596
回到登录视图好吧，让我们在这里做一些类似的事情

1148
12:01:03,596 --> 12:01:06,320
注册视图和

1149
12:01:06,320 --> 12:01:10,640
在此处注册按钮的末尾让我们创建一个新的，我们说文本

1150
12:01:10,640 --> 12:01:14,560
button 和 uh on crest 会得到帮助

1151
12:01:14,560 --> 12:01:18,560
Visual Studio 代码来创建该函数签名，然后我将

1152
12:01:18,560 --> 12:01:23,200
说孩子是一个文字，说

1153
12:01:23,200 --> 12:01:27,916
我们应该说什么已经注册

1154
12:01:27,916 --> 12:01:36,160
像这样登录这里可以作为常数，我在这里用逗号，所以我们得到

1155
12:01:36,160 --> 12:01:40,560
格式化到位，现在您可以看到注册视图也有一个按钮

1156
12:01:40,560 --> 12:01:45,520
说如果你已经注册然后登录这里登录视图有

1157
12:01:45,520 --> 12:01:50,800
尚未注册尚未在此处注册，所以现在我们必须对此进行编程，因为您

1158
12:01:50,800 --> 12:01:55,276
在登录视图中看到我们有这个推送名称的功能导航器

1159
12:01:55,276 --> 12:01:59,436
等等等等，让我们从登录视图中复制该功能并将其带入

1160
12:01:59,436 --> 12:02:03,596
那里已经注册按钮下的注册视图

1161
12:02:03,596 --> 12:02:07,436
而不是去注册的主要路线，我们要去登录

1162
12:02:07,436 --> 12:02:10,080
命名路线好，然后

1163
12:02:10,080 --> 12:02:13,916
hot hot uh hot reload 你不必热重启

1164
12:02:13,916 --> 12:02:17,360
我要按下这个按钮 实际上这真的很棒

1165
12:02:17,360 --> 12:02:22,560
这与我在这里的观点相同

1166
12:02:22,560 --> 12:02:26,800
所以呃链接这个没关系

1167
12:02:26,800 --> 12:02:31,520
所以我已经说过我要带一些物品

1168
12:02:31,520 --> 12:02:35,520
在我的笔记中确保我已经涵盖了我准备的所有理由

1169
12:02:35,520 --> 12:02:38,400
基本上覆盖所以你可以看到这个

1170
12:02:38,400 --> 12:02:42,400
是我们在上一个屏幕中遇到的完全相同的错误

1171
12:02:42,400 --> 12:02:47,040
或者在之前我们的 uh register view 没有脚手架的情况下

1172
12:02:47,040 --> 12:02:50,400
因为我们从登录视图到注册视图然后注册我们

1173
12:02:50,400 --> 12:02:53,200
没有脚手架，所以我们在这里创建了一个脚手架

1174
12:02:53,200 --> 12:02:56,320
如果你记得没问题，但如果你去登录视图，你可以看到登录

1175
12:02:56,320 --> 12:03:00,320
视图仍然返回一列，我的意思是这一直在工作的原因

1176
12:03:00,320 --> 12:03:05,596
到目前为止是因为我们的主页有一个脚手架你还记得这里的主页吗

1177
12:03:05,596 --> 12:03:09,596
有一个脚手架，登录视图的内容有

1178
12:03:09,596 --> 12:03:15,040
到目前为止刚刚被注入到我们主页的正文中，这就是原因

1179
12:03:15,040 --> 12:03:19,596
如果你热重启你的应用程序，你会来到这个漂亮的主屏幕

1180
12:03:19,596 --> 12:03:24,320
说家然后你就在这里有登录视图好吗

1181
12:03:24,320 --> 12:03:27,040
所以我们现在需要的是

1182
12:03:27,040 --> 12:03:30,080
如果你还记得上一章我们移除了脚手架

1183
12:03:30,080 --> 12:03:33,276
他们的登录名和注册，现在我们把他们放回去了，但我有点

1184
12:03:33,276 --> 12:03:37,520
想让你明白为什么我做我不想做的事情背后的原因

1185
12:03:37,520 --> 12:03:40,720
你从一开始就认为一切都是完美的，因为对我来说

1186
12:03:40,720 --> 12:03:44,960
至少当事情在一开始就完美地完成时，我总是质疑

1187
12:03:44,960 --> 12:03:48,880
如果这东西不存在怎么办，我只是想确保我们能补救

1188
12:03:48,880 --> 12:03:52,080
这些东西，所以你经历了整个旅程，你会发现哪里出了问题，

1189
12:03:52,080 --> 12:03:56,640
我们如何解决它，而不仅仅是我以正确的方式向您展示

1190
12:03:56,640 --> 12:04:00,000
从一开始就这样做

1191
12:04:00,000 --> 12:04:03,596
让我们转到我们的登录视图并确保我们做的事情与我们所做的相同

1192
12:04:03,596 --> 12:04:09,040
注册视图并添加脚手架

1193
12:04:09,040 --> 12:04:14,560
所以让我们在这里添加一个脚手架，所以我要写我要点击

1194
12:04:14,560 --> 12:04:18,960
对不起，我要发号施令，我们要按命令和点

1195
12:04:18,960 --> 12:04:24,320
在 mac 上或在 linux 和 windows 上的控制点上，你说用小部件包装和

1196
12:04:24,320 --> 12:04:28,560
只是说你的小部件被称为脚手架脚手架不幸的是没有

1197
12:04:28,560 --> 12:04:33,520
子参数，因此它有一个主体，因此将该参数更改为主体

1198
12:04:33,520 --> 12:04:37,756
让我们为它创建一个应用栏然后我们说应用栏

1199
12:04:37,756 --> 12:04:44,720
它有一个标题，我们说 const text 在这里我们只说 login

1200
12:04:44,720 --> 12:04:49,040
现在好了

1201
12:04:49,040 --> 12:04:53,520
正如你所看到的，我的意思是我们现在已经添加了脚手架，并且作为顶部

1202
12:04:53,520 --> 12:04:56,800
这里的标题告诉你它说登录视图被嵌入到

1203
12:04:56,800 --> 12:05:02,080
主页这不好，所以现在我们需要做的是去

1204
12:05:02,080 --> 12:05:06,880
下一个 uh 部分，我们现在需要删除

1205
12:05:06,880 --> 12:05:12,720
来自我们的主 dart 或主页的脚手架，因为

1206
12:05:12,720 --> 12:05:16,320
现在主页是我们的登录视图

1207
12:05:16,320 --> 12:05:21,276
嵌入到主页中，但这还不够好

1208
12:05:21,276 --> 12:05:24,000
所以我们不能拥有自己的登录视图

1209
12:05:24,000 --> 12:05:29,360
脚手架被嵌入到已经有脚手架的主页中，所以

1210
12:05:29,360 --> 12:05:34,880
呃我们需要做的是从我们的主页上移除脚手架呃让我们看看

1211
12:05:34,880 --> 12:05:38,560
如果我们能做到，但它似乎不起作用，所以我要走了

1212
12:05:38,560 --> 12:05:42,160
说我要抓住未来

1213
12:05:42,160 --> 12:05:44,960
建设者好的，这也是你需要做的

1214
12:05:44,960 --> 12:05:48,720
抓住整个未来的建设者，而不是仅仅归还脚手架

1215
12:05:48,720 --> 12:05:55,520
就像我在这里做的一样，归还你未来的建设者

1216
12:05:55,520 --> 12:05:58,800
好吧嗯[音乐]

1217
12:05:58,800 --> 12:06:04,000
有很多信息，让我们确保我们的嗯

1218
12:06:04,000 --> 12:06:09,116
验证电子邮件视图也有一个脚手架，因为这是我们现在需要的

1219
12:06:09,116 --> 12:06:13,040
我们需要我们所有的观点都有一个脚手架，所以我要

1220
12:06:13,040 --> 12:06:18,160
将我们的验证电子邮件视图列嵌入到脚手架中

1221
12:06:18,160 --> 12:06:21,840
所以用小部件包装，让我们说脚手架

1222
12:06:21,840 --> 12:06:25,916
没有孩子在脚手架上记得有一个身体和

1223
12:06:25,916 --> 12:06:30,480
然后我们说 app bar 是一个 app bar 一个标题效果 const

1224
12:06:30,480 --> 12:06:35,116
文本，我们说验证电子邮件这样的东西好吗

1225
12:06:35,116 --> 12:06:39,436
现在很好，如果我命令 s 为了保存所有这些更改，我们将得到一个

1226
12:06:39,436 --> 12:06:43,436
希望错误

1227
12:06:43,436 --> 12:06:48,000
我们没有，这也没关系，这可能是因为我们实际上修复了

1228
12:06:48,000 --> 12:06:53,436
主页，所以它没有脚手架，这就是我们没有收到错误的原因

1229
12:06:53,436 --> 12:06:57,436
所以这真的很好，我也解释过

1230
12:06:57,436 --> 12:07:00,240
那么让我们确保

1231
12:07:00,240 --> 12:07:03,596
这两个屏幕之间的连接正在工作，所以

1232
12:07:03,596 --> 12:07:07,756
登录视图在那里你可以看到这里不再显示主页

1233
12:07:07,756 --> 12:07:12,320
如果你还记得这次重构之前，那么当我们 sh 当我们

1234
12:07:12,320 --> 12:07:16,160
显示登录视图，然后显示主页应用栏

1235
12:07:16,160 --> 12:07:20,960
屏幕，但现在的主页只是一个返回其他内容的未来构建器

1236
12:07:20,960 --> 12:07:23,680
例如加载文本或登录视图

1237
12:07:23,680 --> 12:07:28,720
而且在这里我注意到，我们可以做的不是记录加载，而是

1238
12:07:28,720 --> 12:07:34,000
显示一个圆形进度指示器，如果您是，这是一个很棒的小部件

1239
12:07:34,000 --> 12:07:38,640
你只是在做某种可能不会立即结束的加载，所以

1240
12:07:38,640 --> 12:07:42,720
什么圆形进度指示器它只是像加载指示器一样显示我们

1241
12:07:42,720 --> 12:07:46,800
实际上可以注释掉所有这些代码并返回通知

1242
12:07:46,800 --> 12:07:51,116
进度指示器并注释掉开关，然后按

1243
12:07:51,116 --> 12:07:54,880
command s 所以你实际上看到它现在看起来是多么的巨大

1244
12:07:54,880 --> 12:07:59,436
因为它周围没有脚手架，但如果你有脚手架，一切都放好了

1245
12:07:59,436 --> 12:08:02,400
到位然后你会看到实际显示的圆形进度指示器

1246
12:08:02,400 --> 12:08:05,756
正确显示在屏幕上，让我们返回

1247
12:08:05,756 --> 12:08:11,200
command s 所以我们看到日志加载对不起登录屏幕或登录视图

1248
12:08:11,200 --> 12:08:14,840
并且这些屏幕之间的连接正在发挥作用

1249
12:08:14,840 --> 12:08:19,680
那么接下来我们需要做的就是在你看到我们登录的那一刻

1250
12:08:19,680 --> 12:08:24,960
view 和 register 视图，因此它们在自己的文件中，但在主守卫中

1251
12:08:24,960 --> 12:08:28,480
文件我们有点忘记了，或者可能没有忘记，我们只是没有

1252
12:08:28,480 --> 12:08:33,596
是时候这样做了，我们的验证电子邮件视图仍然正确，就像它只是

1253
12:08:33,596 --> 12:08:37,596
显示或编码在主 dart 文件中，所以我们需要做的只是

1254
12:08:37,596 --> 12:08:43,276
为它创建一个自己的文件，我们称之为验证电子邮件视图好，所以去视图

1255
12:08:43,276 --> 12:08:46,320
在这里并右键单击它的新文件并说

1256
12:08:46,320 --> 12:08:52,320
验证电子邮件视图 dot dart 好的

1257
12:08:52,320 --> 12:08:56,000
并从此处的验证电子邮件视图中获取代码

1258
12:08:56,000 --> 12:09:00,000
基本上粘贴或剪切它，然后放置它

1259
12:09:00,000 --> 12:09:03,756
在这里并确保所有的进口都在

1260
12:09:03,756 --> 12:09:09,276
我在前面的章节中已经解释过我们需要如何修复导入

1261
12:09:09,276 --> 12:09:13,916
所以我不打算详细介绍进口如何运作以及我们如何

1262
12:09:13,916 --> 12:09:17,436
应该这样做，因为我想如果你已经阅读了这些章节

1263
12:09:17,436 --> 12:09:21,360
按时间顺序，这对你来说很明显如何解决它，所以它很友好

1264
12:09:21,360 --> 12:09:25,116
的感觉就像我试图一遍又一遍地解释所有这些事情

1265
12:09:25,116 --> 12:09:28,240
从一开始就按时间顺序观看本课程的人

1266
12:09:28,240 --> 12:09:31,916
他们会感到无聊，所以为了不让实际的人感到无聊

1267
12:09:31,916 --> 12:09:36,320
谁在看东西我不会过多解释所以我们开始吧

1268
12:09:36,320 --> 12:09:40,720
已修复，并且让我们确保我们也将 firebase 导入关闭，以便

1269
12:09:40,720 --> 12:09:44,160
错误消失了

1270
12:09:44,160 --> 12:09:47,596
确保热我们也做了热重启

1271
12:09:47,596 --> 12:09:52,840
确保一切都按预期工作并且确实如此

1272
12:09:52,840 --> 12:09:58,320
所以我们现在需要做的也是为了

1273
12:09:58,320 --> 12:10:03,596
呃按照计划进行

1274
12:10:03,596 --> 12:10:07,840
成为一名优秀的软件开发人员

1275
12:10:07,840 --> 12:10:12,640
章，但我认为它在第 15 章中，我相信它在第 15 章中

1276
12:10:12,640 --> 12:10:16,240
我们谈到了 git 和 github 现在我们已经做了很多代码的事情是

1277
12:10:16,240 --> 12:10:22,800
工作得很好，让我们提交我们的代码，就像我打开终端一样

1278
12:10:22,800 --> 12:10:26,320
在这里，我要这样做，以便您看得更清楚，我要提出来

1279
12:10:26,320 --> 12:10:30,320
终端，让我们去我们的终端，我可以

1280
12:10:30,320 --> 12:10:34,000
看到 scrcpy 正在这个终端中运行，所以我要创建一个新终端

1281
12:10:34,000 --> 12:10:37,436
在这里，我只想说它是日志和

1282
12:10:37,436 --> 12:10:41,840
你可以看到我们有最初的提交，这是第一步，所以

1283
12:10:41,840 --> 12:10:46,400
因为我们将其标记为您在此处看到的第一步，所以我们要做的就是得到

1284
12:10:46,400 --> 12:10:50,880
git status ，我们看到我们已经做了很多工作，我要添加所有的

1285
12:10:50,880 --> 12:10:54,960
暂存区的文件请记住 git 章节

1286
12:10:54,960 --> 12:10:59,680
然后让我也把它放大一点，这样你就可以看得更清楚了

1287
12:10:59,680 --> 12:11:02,560
嗯，好吧，那我要承诺，我要

1288
12:11:02,560 --> 12:11:08,320
像这样说 git commit 第二步

1289
12:11:08,320 --> 12:11:13,756
好的，嗯，实际上在我们这样做之前我

1290
12:11:13,756 --> 12:11:19,436
相信我们错过了一些事情然后我只是稍微看一下我的

1291
12:11:19,436 --> 12:11:23,756
笔记只是为了确保在我们继续之前我没有遗漏任何东西

1292
12:11:23,756 --> 12:11:28,000
如果我看着嗯

1293
12:11:28,000 --> 12:11:31,520
是的，所以我们需要做的是，我们现在错过了一件事

1294
12:11:31,520 --> 12:11:35,116
我们正在做的是说好的，只需进入登录视图，但有一件事

1295
12:11:35,116 --> 12:11:40,320
我们错过的是确保我们进入正确的正确视图

1296
12:11:40,320 --> 12:11:45,116
我们要做的是我们说我们首先得到当前用户所以

1297
12:11:45,116 --> 12:11:48,320
我们说这里是用户和

1298
12:11:48,320 --> 12:11:52,000
如果用户不为空

1299
12:11:52,000 --> 12:11:54,880
在这里，我们在这里放一个 else 声明

1300
12:11:54,880 --> 12:11:58,560
好吧

1301
12:11:58,560 --> 12:12:03,756
如果用户不为空，那么我们说好的

1302
12:12:03,756 --> 12:12:09,276
嗯，如果用户电子邮件已验证

1303
12:12:09,276 --> 12:12:14,720
所以我们只是说打印电子邮件已经过验证

1304
12:12:14,720 --> 12:12:20,240
或者我们只返回文本

1305
12:12:20,240 --> 12:12:23,436
电子邮件经过验证，类似这样的好的

1306
12:12:23,436 --> 12:12:27,040
让我们回到印刷品，所以在我们真正做这一切之前，也许我

1307
12:12:27,040 --> 12:12:31,916
应该解释为什么我们现在或开始之前这样做

1308
12:12:31,916 --> 12:12:35,040
每当应用程序运行时，这个练习就在这里

1309
12:12:35,040 --> 12:12:38,560
只是直接进入登录屏幕，但我们现在需要做的是

1310
12:12:38,560 --> 12:12:41,520
现在我们有了三个屏幕，我们有登录视图注册视图，还有

1311
12:12:41,520 --> 12:12:45,116
验证电子邮件视图就是我们所说的验证电子邮件

1312
12:12:45,116 --> 12:12:48,560
是的，我们需要确保我们实际上是

1313
12:12:48,560 --> 12:12:52,960
适应这些不同的条件以返回正确的小部件，以便

1314
12:12:52,960 --> 12:12:56,400
这里我们说如果用户的电子邮件经过验证

1315
12:12:56,400 --> 12:13:00,880
然后让我们说只是说电子邮件已验证好

1316
12:13:00,880 --> 12:13:08,240
我们实际上甚至可以返回一个

1317
12:13:08,240 --> 12:13:14,400
我们会返回一些东西，所以是的，让我们这样做，所以我们会返回文本

1318
12:13:14,400 --> 12:13:18,960
做了类似的事情，如果电子邮件得到验证，我们只是说

1319
12:13:18,960 --> 12:13:22,800
您的电子邮件已通过验证，但如果电子邮件未通过，用户将看不到

1320
12:13:22,800 --> 12:13:28,560
验证我们会的，我们基本上会回来的

1321
12:13:28,560 --> 12:13:33,680
验证电子邮件视图没问题，所以我们基本上说是的，你

1322
12:13:33,680 --> 12:13:40,080
如果用户不为空，则需要验证您的电子邮件

1323
12:13:40,080 --> 12:13:44,240
现在如果用户为空，那么我们将您发送到

1324
12:13:44,240 --> 12:13:48,720
登录视图，所以让我们在我们说返回登录的 ill 语句中进入这里

1325
12:13:48,720 --> 12:13:54,560
视作常数

1326
12:13:54,560 --> 12:13:58,880
所以我认为应该对你说实话

1327
12:13:58,880 --> 12:14:03,116
return cons return log 所以我们可以从这里删除所有这些

1328
12:14:03,116 --> 12:14:05,596
繁荣

1329
12:14:05,596 --> 12:14:10,480
所以让我们在firebase初始化完成后回顾一下

1330
12:14:10,480 --> 12:14:15,680
成功我们将检查当前用户是否存在

1331
12:14:15,680 --> 12:14:19,756
用户我们将检查电子邮件是否已验证如果电子邮件现在已验证

1332
12:14:19,756 --> 12:14:23,520
我们只是说打印电子邮件已经过验证，因为我们不会返回

1333
12:14:23,520 --> 12:14:27,596
此处的任何内容代码都将落入此处的第 48 行

1334
12:14:27,596 --> 12:14:32,880
turn 然后只返回一个文本 done OK 所以如果你有一个登录用户对不起

1335
12:14:32,880 --> 12:14:35,596
您有一个正在登录应用程序的用户，并且

1336
12:14:35,596 --> 12:14:39,916
电子邮件已验证所有用户将看到的只是一个完成的文本

1337
12:14:39,916 --> 12:14:43,756
但是如果您在应用程序中有一个用户的电子邮件未经过验证

1338
12:14:43,756 --> 12:14:46,160
该用户将看到验证电子邮件视图

1339
12:14:46,160 --> 12:14:50,960
如果您没有使用 firebase 的用户，因此该用户未登录，那么我们将

1340
12:14:50,960 --> 12:14:54,240
将显示登录视图

1341
12:14:54,240 --> 12:14:58,560
很多信息我知道这可能有点令人沮丧所以

1342
12:14:58,560 --> 12:15:03,276
所以现在我要热重启，你在这里看到的只是一个非常丑陋的

1343
12:15:03,276 --> 12:15:07,360
屏幕上显示的文本完成这意味着当前用户在

1344
12:15:07,360 --> 12:15:12,320
应用程序已登录并且电子邮件已通过验证，并且

1345
12:15:12,320 --> 12:15:15,596
我理解这很丑陋，但您也需要了解原因

1346
12:15:15,596 --> 12:15:20,240
目前这很丑，如果你不告诉颤动，就会发生这种情况

1347
12:15:20,240 --> 12:15:25,840
事情需要如何呈现，因为我们的主页有一个未来的构建器

1348
12:15:25,840 --> 12:15:30,560
周围什么都没有 没有脚手架 什么都没有 它只是一个

1349
12:15:30,560 --> 12:15:35,040
颤动的文本小部件告诉你好吧，我什至不知道如何渲染

1350
12:15:35,040 --> 12:15:38,240
东西了我不知道你用的是什么主题我不知道字体大小

1351
12:15:38,240 --> 12:15:41,520
我不知道默认字体颜色，所以如果你不知道会发生什么

1352
12:15:41,520 --> 12:15:44,720
用脚手架或其他围绕您的小部件

1353
12:15:44,720 --> 12:15:50,080
知道如何渲染事物的材料小部件

1354
12:15:50,080 --> 12:15:55,520
哇，还有很多信息，嗯，但我希望你在这里坚持我

1355
12:15:55,520 --> 12:16:00,720
现在我们已经完成了，我们可以去提交，所以让我们看看我们的日志

1356
12:16:00,720 --> 12:16:05,276
看看我要改变结构或布局的状态

1357
12:16:05,276 --> 12:16:10,160
屏幕让你看得更清楚，现在我们在做了 git 之后看到了

1358
12:16:10,160 --> 12:16:15,840
添加我们还用这些更改更改了主 dart 文件，所以我会得到

1359
12:16:15,840 --> 12:16:22,880
在那以及所有这些更改，我会说 git commit step 2 好的

1360
12:16:22,880 --> 12:16:29,200
所以现在这将被提交，我们也将推动提交

1361
12:16:29,200 --> 12:16:33,040
另外我们需要标记它，因为如果你记得如果你看

1362
12:16:33,040 --> 12:16:36,080
记录我们在这里所做的第一次提交是

1363
12:16:36,080 --> 12:16:38,560
标记为第一步

1364
12:16:38,560 --> 12:16:43,360
现在我们已经提交了第二步，但我们还没有标记它所以让我们去标记它

1365
12:16:43,360 --> 12:16:48,160
我要说 git tag um 第二步

1366
12:16:48,160 --> 12:16:51,276
然后你需要用 bit push 推送你的标签

1367
12:16:51,276 --> 12:16:56,320
破折号标签并创建第二步标签

1368
12:16:56,320 --> 12:17:01,116
对你来说，好吧，我知道那是很多

1369
12:17:01,116 --> 12:17:04,720
信息，但我希望你能坚持我并完成所有这些步骤

1370
12:17:04,720 --> 12:17:10,560
这样我们就基本上为下一章做好了准备

1371
12:17:10,560 --> 12:17:14,640
好吧，在继续下一章之前，请确保

1372
12:17:14,640 --> 12:17:18,400
您已登录，因为在下一章中，我们实际上将继续工作

1373
12:17:18,400 --> 12:17:23,116
注销，所以我也可以看到我已经计划了很多

1374
12:17:23,116 --> 12:17:27,596
那一章的信息给你，所以有很多很多很多的东西

1375
12:17:27,596 --> 12:17:30,480
这样做实际上是一个非常令人兴奋的章节

1376
12:17:30,480 --> 12:17:34,160
下一章，但在您继续之前，请确保您

1377
12:17:34,160 --> 12:17:38,240
转到登录屏幕并确保您使用该用户登录，并且您只需

1378
12:17:38,240 --> 12:17:42,080
在这里看到这个丑陋的完成按钮

1379
12:17:42,080 --> 12:17:46,400
正如我在下一章中提到的，我们将讨论显示一个简单的

1380
12:17:46,400 --> 12:17:52,240
与登录用户的接口，并允许登录用户

1381
12:17:52,240 --> 12:17:56,640
退出，所以如果你想喝点咖啡茶，或者

1382
12:17:56,640 --> 12:18:01,436
无论你想要什么茶点，我们下一章见

1383
12:18:01,436 --> 12:18:04,880
你好，欢迎来到 Flutter 课程的第 18 章

1384
12:18:04,880 --> 12:18:10,080
在前面的章节中，我们讨论了很多关于登录和

1385
12:18:10,080 --> 12:18:13,596
注册视图和我们也谈到了

1386
12:18:13,596 --> 12:18:18,160
与 firebase 集成，我们现在拥有非常类似于我们的登录信息

1387
12:18:18,160 --> 12:18:22,800
并很好地注册视图我不想说我们已经有了它们

1388
12:18:22,800 --> 12:18:26,560
下来，但我们有一个基本的登录和一个基本的

1389
12:18:26,560 --> 12:18:29,116
注册查看嗯

1390
12:18:29,116 --> 12:18:32,480
如果你还记得上一章，我们有点离开了应用程序

1391
12:18:32,480 --> 12:18:36,480
并说明如果应用程序检测到您

1392
12:18:36,480 --> 12:18:40,400
嗯，你是一个登录用户，你

1393
12:18:40,400 --> 12:18:44,840
有一个经过验证的电子邮件地址，然后我们显示有点像

1394
12:18:44,840 --> 12:18:50,800
屏幕上的文字很脏，我可以在我的安卓上打开屏幕

1395
12:18:50,800 --> 12:18:53,840
电话在这里，你看我们把它留在了这里

1396
12:18:53,840 --> 12:18:56,560
状态，我也会提出代码

1397
12:18:56,560 --> 12:19:00,720
你只是被提醒我们在做什么所以我们

1398
12:19:00,720 --> 12:19:05,840
让应用程序处于这种状态，如果用户不为空，则意味着

1399
12:19:05,840 --> 12:19:10,560
用户在场并且他或她的电子邮件地址实际上是

1400
12:19:10,560 --> 12:19:15,116
验证我们只是在那里做了一个打印声明

1401
12:19:15,116 --> 12:19:20,160
我们离开它的意思是因为我们的 builder 函数

1402
12:19:20,160 --> 12:19:22,960
的

1403
12:19:22,960 --> 12:19:26,080
让我实际上也提出正确的标题

1404
12:19:26,080 --> 12:19:30,000
因为未来构建器的构建器功能要求您返回一个

1405
12:19:30,000 --> 12:19:33,916
通过将鼠标移到小部件上，您实际上可以看到它说的是必需的

1406
12:19:33,916 --> 12:19:38,400
您需要从该函数返回一个小部件

1407
12:19:38,400 --> 12:19:44,480
因为它要求我们所做的只是在

1408
12:19:44,480 --> 12:19:48,640
我们所有 if 语句的结尾，所以如果这些都不存在，我们就是

1409
12:19:48,640 --> 12:19:53,840
仍然可以返回一个文本，因为它在那里并且在这个

1410
12:19:53,840 --> 12:19:57,520
用户电子邮件已验证我们没有返回小部件

1411
12:19:57,520 --> 12:20:03,040
然后代码落入这一行，这意味着如果您是登录用户

1412
12:20:03,040 --> 12:20:07,680
并且您已通过验证，然后我们将完成文本返回

1413
12:20:07,680 --> 12:20:12,960
所以我们需要有点，嗯，现在开始，因为在我这么说之前你明白了

1414
12:20:12,960 --> 12:20:15,276
句子现在我们

1415
12:20:15,276 --> 12:20:19,840
已处理电子邮件验证视图，因此如果您已登录

1416
12:20:19,840 --> 12:20:23,200
用户，但您的电子邮件未验证我们显示它验证电子邮件，如果您

1417
12:20:23,200 --> 12:20:25,916
如果你没有注册意味着你没有

1418
12:20:25,916 --> 12:20:30,240
有一个用户然后我们显示登录视图，因为我们已经得到了我们需要的那些

1419
12:20:30,240 --> 12:20:35,116
现在要做的是在我们的应用程序的实际主 ui 上工作，因为你

1420
12:20:35,116 --> 12:20:40,640
可以看到这里说完成这应该是我们应用程序的主要用户界面，所以

1421
12:20:40,640 --> 12:20:44,800
已登录且电子邮件已准备就绪的用户应该会看到

1422
12:20:44,800 --> 12:20:49,520
应用程序的主用户界面，所以在本章中，我们实际上将

1423
12:20:49,520 --> 12:20:55,680
在我们的应用程序的主用户界面上工作，然后允许用户从中注销

1424
12:20:55,680 --> 12:20:59,680
我们的应用程序也是如此，所以我只是在查看我的笔记以确保我

1425
12:20:59,680 --> 12:21:04,400
告诉你我打算告诉你的所有事情

1426
12:21:04,400 --> 12:21:09,116
所以事不宜迟，也许我们实际上可以开始了，所以让我们

1427
12:21:09,116 --> 12:21:14,720
在这里进入我们的主 dart 文件并创建一个新的

1428
12:21:14,720 --> 12:21:17,360
小部件

1429
12:21:17,360 --> 12:21:20,480
所以我要把它带到这里

1430
12:21:20,480 --> 12:21:23,436
我们将创建一个新的有状态小部件

1431
12:21:23,436 --> 12:21:28,000
所谓的笔记视图，这个笔记你只是想象它

1432
12:21:28,000 --> 12:21:30,960
它是应用程序的主要用户界面吗

1433
12:21:30,960 --> 12:21:35,276
正如我之前提到的，登录的人还可以

1434
12:21:35,276 --> 12:21:40,320
stf 创建一个有状态的小部件，然后我们称之为 um

1435
12:21:40,320 --> 12:21:45,200
笔记视图我相信没问题

1436
12:21:45,200 --> 12:21:51,116
现在我们需要做的是让我们看看它甚至没有真正的

1437
12:21:51,116 --> 12:21:55,436
脚手架之类的，也许这就是我们需要做的，我只是

1438
12:21:55,436 --> 12:21:58,160
到这里

1439
12:21:58,160 --> 12:22:03,040
所以让我们为它创建一个脚手架和一个应用栏吧

1440
12:22:03,040 --> 12:22:06,960
所以我们进入这里进入我们要返回的地方

1441
12:22:06,960 --> 12:22:11,520
一个容器目前我们只是说我们想要一个脚手架

1442
12:22:11,520 --> 12:22:17,360
对于我们的脚手架，我们想要一个应用栏，而应用栏应该只是一个应用

1443
12:22:17,360 --> 12:22:21,840
标题为 um const 的栏

1444
12:22:21,840 --> 12:22:24,480
文字，我们只是说

1445
12:22:24,480 --> 12:22:28,640
我们应该怎么称呼它老实说我不认为我有笔记

1446
12:22:28,640 --> 12:22:32,960
和你一起，让我们称之为你的笔记或类似的东西

1447
12:22:32,960 --> 12:22:36,480
我真的要去看看我的笔记看看

1448
12:22:36,480 --> 12:22:40,800
我在那叫什么

1449
12:22:40,800 --> 12:22:44,160
我实际上是在为你准备这门课程的地方，我可以看到我已经

1450
12:22:44,160 --> 12:22:48,480
写了主用户界面，所以我们就这样做吧，让我们在这里说主用户界面好吧，所以

1451
12:22:48,480 --> 12:22:51,916
我们在那里有一个脚手架

1452
12:22:51,916 --> 12:22:56,160
所以它只是说main ui和

1453
12:22:56,160 --> 12:23:00,000
此刻身体是空的，所以没有人，如果你记得以前

1454
12:23:00,000 --> 12:23:04,080
当你返回一个脚手架和一个应用栏时，它所做的只是它

1455
12:23:04,080 --> 12:23:07,840
根据您的主题创建类似但通常使用浅色主题

1456
12:23:07,840 --> 12:23:14,400
它为应用栏创建了一个蓝色的状态栏和一个带有白色文本的应用栏

1457
12:23:14,400 --> 12:23:16,960
标题和其余内容

1458
12:23:16,960 --> 12:23:22,640
屏幕将是白色的，所以它有点像一个空容器

1459
12:23:22,640 --> 12:23:27,200
好的，现在我们已经准备好了

1460
12:23:27,200 --> 12:23:33,276
我们要去我们的呃

1461
12:23:33,276 --> 12:23:38,720
未来的建设者在我们的主页上，而不是这样做

1462
12:23:38,720 --> 12:23:42,640
返回文本完成我们将删除它，现在我们

1463
12:23:42,640 --> 12:23:46,320
会得到一个错误，说这个案例不应该正常完成

1464
12:23:46,320 --> 12:23:51,840
尝试添加中断或返回，这基本上就是在抱怨

1465
12:23:51,840 --> 12:23:56,960
第 41 行对我来说这里的代码行它可能是你的另一行代码

1466
12:23:56,960 --> 12:24:01,360
所以说你喜欢整个街区的情况之一

1467
12:24:01,360 --> 12:24:05,520
您在这里放置的代码并不总是以返回结束，并且

1468
12:24:05,520 --> 12:24:09,680
这是完全正确的，因为在用户通过电子邮件验证的情况下，我们没有

1469
12:24:09,680 --> 12:24:12,400
返回一个小部件以及我们将在这里做什么我们只是要说

1470
12:24:12,400 --> 12:24:18,880
把 const 还给你好吗

1471
12:24:18,880 --> 12:24:25,200
好的，嗯，我要在那里按命令，现在我们做了一个热的呃

1472
12:24:25,200 --> 12:24:30,160
重新加载，您可以看到应用程序的主 ui

1473
12:24:30,160 --> 12:24:33,520
在我的笔记中，我可以看到，我们要去放一点

1474
12:24:33,520 --> 12:24:37,436
我们脚手架中的文本在这里

1475
12:24:37,436 --> 12:24:40,640
并为您的应用栏

1476
12:24:40,640 --> 12:24:45,436
我们很高兴去身体，让我们说 const text

1477
12:24:45,436 --> 12:24:48,960
你好世界好吗

1478
12:24:48,960 --> 12:24:53,596
所以现在我们可以看到那里显示的 hello world

1479
12:24:53,596 --> 12:24:57,276
我可以看到我有很多笔记要对你说实话，所以我

1480
12:24:57,276 --> 12:25:00,960
真的要确保我在给你的时候正在看我的笔记

1481
12:25:00,960 --> 12:25:04,480
内容以确保您获得我为您计划的所有信息

1482
12:25:04,480 --> 12:25:08,560
如果我经常看我的笔记，我很抱歉，这只是为了

1483
12:25:08,560 --> 12:25:12,960
是的，老实说，这只是为您提供最好的内容

1484
12:25:12,960 --> 12:25:17,596
好的，所以我们现在已经完成了那个 hello world

1485
12:25:17,596 --> 12:25:23,840
我们需要谈论的是嗯应用栏类，我提供了一个

1486
12:25:23,840 --> 12:25:27,360
链接在这里给你，我要去

1487
12:25:27,360 --> 12:25:32,960
在我的屏幕上打开，然后带到这个屏幕，这样你也可以看到它

1488
12:25:32,960 --> 12:25:36,960
稍微增加一点尺寸，也许也做这个布局，这样你就可以

1489
12:25:36,960 --> 12:25:41,520
看到它的标题也是如此

1490
12:25:41,520 --> 12:25:46,240
你可以看到 appbar 的文档只是说一个材料设计应用栏

1491
12:25:46,240 --> 12:25:49,840
应用栏由工具栏和可能的其他小部件组成，因此

1492
12:25:49,840 --> 12:25:54,560
您真正需要做的或您需要了解的有关应用栏的所有信息是

1493
12:25:54,560 --> 12:25:57,520
嗯它

1494
12:25:57,520 --> 12:26:01,680
它能够显示

1495
12:26:01,680 --> 12:26:06,160
各种小部件我的意思是颤振中的几乎所有东西都是小部件，所以

1496
12:26:06,160 --> 12:26:12,560
应用栏也不例外，应用栏由各种

1497
12:26:12,560 --> 12:26:15,756
组件 默认应用栏允许您

1498
12:26:15,756 --> 12:26:20,720
显示标题，如您在此处看到的标题默认情况下有自己的样式

1499
12:26:20,720 --> 12:26:24,720
这意味着它有自己的左上角和

1500
12:26:24,720 --> 12:26:28,240
底部边距，所以默认情况下它就像垂直显示在中间

1501
12:26:28,240 --> 12:26:32,000
您可以在我们应用程序的主 UI 中看到您的应用栏

1502
12:26:32,000 --> 12:26:35,200
几乎所有材料成分

1503
12:26:35,200 --> 12:26:38,800
你在屏幕上显示的所有东西都有一个主题

1504
12:26:38,800 --> 12:26:42,240
好的，应用栏有自己的主题，它有

1505
12:26:42,240 --> 12:26:47,276
它自己的能力，所以我们要在哪里做

1506
12:26:47,276 --> 12:26:51,116
我们将在应用程序的主 UI 中使用应用栏

1507
12:26:51,116 --> 12:26:55,680
不仅要显示标题，还要显示

1508
12:26:55,680 --> 12:27:02,240
一个用户可以点击的最右边的小按钮

1509
12:27:02,240 --> 12:27:06,720
在我们的例子中，点击或点击，因为会有

1510
12:27:06,720 --> 12:27:11,200
成为间接用户将在移动设备上运行我们的应用程序，因此他们

1511
12:27:11,200 --> 12:27:16,720
要点击，如果我们允许我们的应用程序在桌面上运行

1512
12:27:16,720 --> 12:27:20,480
那么他们就可以点击甚至点击，如果他们正在竞选

1513
12:27:20,480 --> 12:27:23,680
实例嗯微软的

1514
12:27:23,680 --> 12:27:28,160
什么叫表面书或表面

1515
12:27:28,160 --> 12:27:31,916
平板电脑

1516
12:27:31,916 --> 12:27:36,400
所以这就是应用栏的样子

1517
12:27:36,400 --> 12:27:40,080
它的要点和您可以看到的文档中的信息

1518
12:27:40,080 --> 12:27:43,200
这里它说有一个前导空格，然后有或者你实际上可以放一个

1519
12:27:43,200 --> 12:27:47,436
前导的小部件，然后是标题，然后是其他一些动作和

1520
12:27:47,436 --> 12:27:53,596
这些是我们实际上要在这个 um 中使用的操作

1521
12:27:53,596 --> 12:27:57,916
在这个章节我们的这个章节中呃

1522
12:27:57,916 --> 12:28:01,436
颤振课程，所以你可以在这里看到，例如实际上有

1523
12:28:01,436 --> 12:28:07,436
关于如何使用一些按钮配置应用栏的代码，你可以看到你可以按下

1524
12:28:07,436 --> 12:28:11,520
按钮，然后你会在这里得到一个小吃店

1525
12:28:11,520 --> 12:28:15,756
好的，所以请记住这一点，您可以查看文档，我真的

1526
12:28:15,756 --> 12:28:21,200
实际上建议你这样做，嗯

1527
12:28:21,200 --> 12:28:24,400
你可以花一些时间阅读文档，但我

1528
12:28:24,400 --> 12:28:27,436
不要认为您需要如此专注于文档，而只需

1529
12:28:27,436 --> 12:28:33,680
看看应用栏的各个部分并自己尝试一下好吗

1530
12:28:33,680 --> 12:28:36,560
所以嗯

1531
12:28:36,560 --> 12:28:41,040
我可以看到我已经告诉过你我要拍的纪录片了

1532
12:28:41,040 --> 12:28:45,360
我会过去的

1533
12:28:45,360 --> 12:28:51,840
这样那部分就完成了，嗯，现在我认为我们需要做的是

1534
12:28:51,840 --> 12:28:57,436
嗯是谈谈呃这个印刷声明以及为什么我们得到一个

1535
12:28:57,436 --> 12:29:00,240
错误在这里你看到打印

1536
12:29:00,240 --> 12:29:04,480
如果我如果我在这里打印并且如果我说打印你好世界

1537
12:29:04,480 --> 12:29:08,640
你通常会在这里得到信息，说避免打印

1538
12:29:08,640 --> 12:29:13,116
调用生产代码好的，所以

1539
12:29:13,116 --> 12:29:17,040
在我们跳过这个之前，因为你可能已经在这个中看到了很多

1540
12:29:17,040 --> 12:29:21,680
当然，我已经放置了打印语句，然后我们可以喜欢，例如，如果我

1541
12:29:21,680 --> 12:29:26,560
调出调试控制台，然后在我的 mac 上执行 command 或 control so linux

1542
12:29:26,560 --> 12:29:29,040
和windows为了热重载你会看到

1543
12:29:29,040 --> 12:29:33,756
让我们看看实际上电子邮件验证心脏重新加载我会在这里重新开始

1544
12:29:33,756 --> 12:29:38,080
哎呀，我可以看到它崩溃了，没关系，所以我要去提出来

1545
12:29:38,080 --> 12:29:42,560
再次scr cpy

1546
12:29:42,560 --> 12:29:47,276
这些事情确实发生了，这完全没问题，所以我需要

1547
12:29:47,276 --> 12:29:50,640
再次运行该应用程序，因为我实际上失去了与该应用程序的联系

1548
12:29:50,640 --> 12:29:55,200
设备，但在它发挥作用的同时，我还要告诉你

1549
12:29:55,200 --> 12:29:59,040
打印和对比你看到的日志

1550
12:29:59,040 --> 12:30:01,916
uh print 通常被称为穷人的

1551
12:30:01,916 --> 12:30:05,436
如果您不是软件开发人员，那么您可能不会在那个调试器中使用

1552
12:30:05,436 --> 12:30:08,800
甚至知道调试这意味着什么，但调试是什么

1553
12:30:08,800 --> 12:30:11,756
本质上是您的源代码中存在问题的地方，但您

1554
12:30:11,756 --> 12:30:15,596
真的不知道在哪里，所以您尝试单步执行各种代码行

1555
12:30:15,596 --> 12:30:18,960
您的应用程序并细化问题所在

1556
12:30:18,960 --> 12:30:22,000
所以很多很多时候当人们

1557
12:30:22,000 --> 12:30:25,916
真的不是他们没有时间调试，或者他们相信

1558
12:30:25,916 --> 12:30:29,916
调试器太慢了，他们开始把打印语句放在他们的

1559
12:30:29,916 --> 12:30:32,960
应用程序和嗯通过将打印语句放在他们的

1560
12:30:32,960 --> 12:30:36,560
应用程序，他们可以跟踪应用程序的去向

1561
12:30:36,560 --> 12:30:40,800
通过各种代码行，例如，如果他们放置了一个打印语句

1562
12:30:40,800 --> 12:30:44,160
在他们没想到应用程序最终会出现的代码位置

1563
12:30:44,160 --> 12:30:47,840
然后他们会像哦，好吧，我最终进入了这个代码块，我不应该这样

1564
12:30:47,840 --> 12:30:51,840
让我检查一下为什么我最终会在这里，所以这有点被称为差额

1565
12:30:51,840 --> 12:30:57,360
调试，因为 print 是您实际放入的一段代码

1566
12:30:57,360 --> 12:31:02,320
代码，所以有时打印不是可取的事情

1567
12:31:02,320 --> 12:31:06,160
例如，在银行应用程序中，你应该非常小心你

1568
12:31:06,160 --> 12:31:10,960
打印，因为这些东西会被记录下来，你可能会认为他们得到了

1569
12:31:10,960 --> 12:31:15,200
登录那部手机呃有什么问题

1570
12:31:15,200 --> 12:31:19,596
即使是在电话上记录事情的问题是你必须

1571
12:31:19,596 --> 12:31:23,840
知道android和ios通常最流行的操作系统

1572
12:31:23,840 --> 12:31:28,960
现在他们会跟踪您的批次，因此这些日志实际上存储在

1573
12:31:28,960 --> 12:31:32,720
操作系统上的一个位置，以便您稍后可以实际读取它们

1574
12:31:32,720 --> 12:31:36,720
有一个缓冲区，因此您的应用程序可能会打印到这些信息

1575
12:31:36,720 --> 12:31:41,116
控制台不是完全私有的，只是它存储在手机上

1576
12:31:41,116 --> 12:31:45,596
即使它会被一个新的缓冲区替换，如果你的

1577
12:31:45,596 --> 12:31:49,596
手机最终落入坏人之手，实际上有人可以抓住你的锁，所以

1578
12:31:49,596 --> 12:31:55,040
想象一个银行应用程序记录你喜欢的登录信息用户名

1579
12:31:55,040 --> 12:31:59,596
密码所有详细信息，即使它仅适用于该应用程序，您也可以

1580
12:31:59,596 --> 12:32:04,240
想想，但其他人实际上可能最终落入了错误的手中，所以这就是

1581
12:32:04,240 --> 12:32:07,756
此信息告诉您避免在生产代码中进行打印调用，所以

1582
12:32:07,756 --> 12:32:11,756
还有另一种方法可以做到这一点

1583
12:32:11,756 --> 12:32:16,880
而不是打印，您实际上可以使用 log

1584
12:32:16,880 --> 12:32:20,400
在你的代码中，我们会相信

1585
12:32:20,400 --> 12:32:24,880
我们实际上将在本章中讨论

1586
12:32:24,880 --> 12:32:30,840
我想我们会讨论日志记录，所以让我看看我的

1587
12:32:30,840 --> 12:32:36,800
嗯，是的，我们实际上要讨论的是日志记录而不是打印

1588
12:32:36,800 --> 12:32:39,520
所以请记住，有一个

1589
12:32:39,520 --> 12:32:43,360
如果它们是如果那是你想要做的，那么做打印语句的更好方法

1590
12:32:43,360 --> 12:32:47,680
如果这就是你想在控制台上看到的，那么我们会解决这个问题

1591
12:32:47,680 --> 12:32:51,040
很快，这就是你看到这个打印的 hello world 信息

1592
12:32:51,040 --> 12:32:54,880
打印声明好的，很抱歉这只是一个小弯路，但我我

1593
12:32:54,880 --> 12:32:58,080
认为有必要告诉你，特别是如果你没有做过软件

1594
12:32:58,080 --> 12:33:03,436
开发之前好的，我们已经完成了返回注释视图

1595
12:33:03,436 --> 12:33:06,720
主页我们不应该在主页上有任何打印，你可以看到

1596
12:33:06,720 --> 12:33:10,240
这是我们现在的主页，我们没有任何打印声明让我

1597
12:33:10,240 --> 12:33:14,560
稍微改变一下视图就好了

1598
12:33:14,560 --> 12:33:20,080
所以嗯所以我现在要向你描述的是

1599
12:33:20,080 --> 12:33:26,240
我们需要一个枚举来描述我们的各种 um

1600
12:33:26,240 --> 12:33:30,320
用户可以点击的应用栏项目

1601
12:33:30,320 --> 12:33:35,436
当我们创建我们的应用栏时，这个应用栏本身就能够

1602
12:33:35,436 --> 12:33:38,800
显示一个叫做全部弹出的东西

1603
12:33:38,800 --> 12:33:43,840
对，所以我还没有向你展示这将在本章结束时如何工作

1604
12:33:43,840 --> 12:33:48,320
所以这可能有点难以理解，但想象一下我们有

1605
12:33:48,320 --> 12:33:52,480
我们这里的 ui 和我们在本章中需要实现的是放置一点

1606
12:33:52,480 --> 12:33:56,880
按钮在这里像一个点一样水平或垂直我不

1607
12:33:56,880 --> 12:34:00,000
真的知道图标会是什么，所以这里有一个按钮

1608
12:34:00,000 --> 12:34:05,040
按下哪个用户会得到一点罚款不错

1609
12:34:05,040 --> 12:34:10,160
就像一个下拉菜单，在这个下拉菜单中，您可以放置​​各种项目，例如

1610
12:34:10,160 --> 12:34:13,436
注销设置等等等等，想象一下我们

1611
12:34:13,436 --> 12:34:18,800
通过按下该按钮并在按下注销按钮时进行下拉

1612
12:34:18,800 --> 12:34:21,756
然后我们将向用户显示一种方言，说你确定要

1613
12:34:21,756 --> 12:34:27,596
从应用程序中注销，所以效果很好我的意思是什么时候

1614
12:34:27,596 --> 12:34:31,680
在我说这很好用之前，也许我应该通过按下来解释

1615
12:34:31,680 --> 12:34:35,360
我们将在弹出菜单中显示的每一项

1616
12:34:35,360 --> 12:34:39,916
用户，我们将收到来自系统的回电，说哦，这个项目得到了

1617
12:34:39,916 --> 12:34:43,040
按下，你需要告诉系统什么

1618
12:34:43,040 --> 12:34:47,840
这个项目是你可以像一个整数一样给它

1619
12:34:47,840 --> 12:34:52,960
数值或字符串，甚至更好，你可以给它一个

1620
12:34:52,960 --> 12:34:55,520
枚举值，如果你记得

1621
12:34:55,520 --> 12:34:58,960
我们讨论飞镖基础知识的章节我们讨论了枚举和

1622
12:34:58,960 --> 12:35:04,560
为什么它们很重要，并且它们使事情变得非常容易，因为当您

1623
12:35:04,560 --> 12:35:08,960
指定您的枚举并将案例放入动画中

1624
12:35:08,960 --> 12:35:12,640
然后你让我把它改成

1625
12:35:12,640 --> 12:35:15,596
也不要为此感到抱歉，我只记得

1626
12:35:15,596 --> 12:35:20,800
你给你的弹出菜单项提供这些创新值

1627
12:35:20,800 --> 12:35:24,560
用户按下任何这些项目，您将获得该枚举值

1628
12:35:24,560 --> 12:35:29,756
回来，这样你就可以在你的回调中做一个 switch 语句，然后说哦，哪个项目

1629
12:35:29,756 --> 12:35:33,756
被称为是枚举的这种情况，而不是你这样做

1630
12:35:33,756 --> 12:35:36,640
您可以实际使用的整数比较或字符串比较

1631
12:35:36,640 --> 12:35:41,116
让你的生活更轻松的枚举

1632
12:35:41,116 --> 12:35:44,800
所以我们要谈谈那个

1633
12:35:44,800 --> 12:35:49,116
只要你能看到一个描述我们弹出窗口的枚举，我们将

1634
12:35:49,116 --> 12:35:53,040
很快就开始工作

1635
12:35:53,040 --> 12:35:57,756
好的，我们谈到了那个

1636
12:35:57,756 --> 12:36:02,400
好的，现在让我们来谈谈弹出菜单按钮

1637
12:36:02,400 --> 12:36:06,080
与弹出菜单项相比，您可以看到标题说

1638
12:36:06,080 --> 12:36:11,040
它们通常一起使用，让我们去真正在这里带上 safari，我

1639
12:36:11,040 --> 12:36:15,520
要说弹出菜单项颤动，我要调出文档

1640
12:36:15,520 --> 12:36:20,560
文档放在这里好吧，我们可以一起看看

1641
12:36:20,560 --> 12:36:24,240
如您所见，它在材料设计弹出菜单中显示了一个项目，所以这是

1642
12:36:24,240 --> 12:36:28,400
实际的菜单项本身，所以如果你想象我们正在显示一个下拉菜单

1643
12:36:28,400 --> 12:36:34,400
menu 该弹出菜单项中的每个项目都是抱歉类型

1644
12:36:34,400 --> 12:36:40,800
弹出菜单中的每个项目都是弹出菜单项类型的

1645
12:36:40,800 --> 12:36:45,200
你可以看到一个弹出菜单项本身就有

1646
12:36:45,200 --> 12:36:51,596
我的意思是弹出菜单项是高级的通用的，我们也是飞镖章节

1647
12:36:51,596 --> 12:36:56,000
谈到了泛型以及在这种情况下的泛型项是弹出菜单项

1648
12:36:56,000 --> 12:37:01,116
基本上是它具有这种类型的值

1649
12:37:01,116 --> 12:37:05,040
它说在这种情况下是关闭的一个弹出菜单项

1650
12:37:05,040 --> 12:37:09,200
这就是为什么更远是一个弹出菜单项的原因

1651
12:37:09,200 --> 12:37:12,400
输入 y 现在我们真的不知道为什么

1652
12:37:12,400 --> 12:37:17,040
为什么更远，但它可能只是一个枚举，你可以在这里看到

1653
12:37:17,040 --> 12:37:19,436
现在在你决定

1654
12:37:19,436 --> 12:37:23,840
弹出菜单项带有此类型的值，然后它的

1655
12:37:23,840 --> 12:37:28,240
实际上应该指定值，我可以看到有一个案例叫做

1656
12:37:28,240 --> 12:37:31,276
在你分配的那个动画中更难

1657
12:37:31,276 --> 12:37:35,200
到你的弹出菜单项现在好了

1658
12:37:35,200 --> 12:37:41,360
什么是弹出菜单按钮所以让我们在这里搜索弹出菜单按钮好吗

1659
12:37:41,360 --> 12:37:45,116
让我们在这里进入文档，您可以看到它说显示菜单时

1660
12:37:45,116 --> 12:37:50,000
当菜单被关闭时，按下并取消选择调用，所以

1661
12:37:50,000 --> 12:37:53,040
嗯，你需要知道的是弹出

1662
12:37:53,040 --> 12:37:58,720
菜单按钮是我们将放置的实际按钮

1663
12:37:58,720 --> 12:38:02,956
我们的应用栏在按下时将显示

1664
12:38:02,956 --> 12:38:08,720
一个菜单，你可以在你在这里看到的代码中看到这里

1665
12:38:08,720 --> 12:38:14,080
弹出菜单按钮有一个未选择的回调，它有一个

1666
12:38:14,080 --> 12:38:18,160
弹出菜单项中的项目构建器和项目

1667
12:38:18,160 --> 12:38:21,520
那么抱歉弹出菜单里面的项目

1668
12:38:21,520 --> 12:38:26,000
按钮属于弹出菜单项类型，因此

1669
12:38:26,000 --> 12:38:30,800
想象一下，您有弹出菜单按钮，就像父级一样

1670
12:38:30,800 --> 12:38:34,800
然后您将拥有它的项目构建器以及这些项目中的每一个

1671
12:38:34,800 --> 12:38:40,160
键入弹出菜单项，这正是我们实际要做的

1672
12:38:40,160 --> 12:38:44,720
在这一章中，好吧，我要关闭那个窗口，我不会

1673
12:38:44,720 --> 12:38:50,800
认为我们需要这里的野生动物园窗口，嗯，所以

1674
12:38:50,800 --> 12:38:55,756
现在我想我刚刚解释了这部分标题，关于什么时候

1675
12:38:55,756 --> 12:39:00,160
我们讨论了弹出菜单项，但你可以在这里看到我说过弹出菜单

1676
12:39:00,160 --> 12:39:03,360
item 有值让我们看看弹出菜单项的代码，也许我们可以

1677
12:39:03,360 --> 12:39:08,160
实际上就在我们代码中的弹出菜单项，我要

1678
12:39:08,160 --> 12:39:14,160
命令单击它，您还可以看到弹出菜单项有这个

1679
12:39:14,160 --> 12:39:18,560
属性称为 value 好的，你可以看到一个弹出菜单项 i

1680
12:39:18,560 --> 12:39:23,756
前面提到的是一个泛型类，它带有一个类型为 t 和类型为 d 的值

1681
12:39:23,756 --> 12:39:27,916
基本上，当您在泛型中看到 t 时，它仅表示您指定的内容

1682
12:39:27,916 --> 12:39:34,160
所以在小于和大于大小内指定的任何内容都是

1683
12:39:34,160 --> 12:39:38,560
通用名称，然后在编译时被替换

1684
12:39:38,560 --> 12:39:42,480
使用您作为程序员指定的类型的时间

1685
12:39:42,480 --> 12:39:45,916
嗯，这就是弹出菜单的代码

1686
12:39:45,916 --> 12:39:50,080
项目，非常欢迎您深入研究该代码以

1687
12:39:50,080 --> 12:39:54,320
更好地理解它

1688
12:39:54,320 --> 12:39:59,756
让我们去创建我们现在已经讨论过的枚举

1689
12:39:59,756 --> 12:40:02,560
关于和

1690
12:40:02,560 --> 12:40:08,000
我正要进入笔记视图的正上方

1691
12:40:08,000 --> 12:40:13,200
然后让我们定义一个称为菜单操作的枚举，在那里我们

1692
12:40:13,200 --> 12:40:17,756
会有一个称为注销的案例好吧，所以我们说枚举

1693
12:40:17,756 --> 12:40:22,240
菜单操作我们说我们要调用它然后我们有一个称为注销的案例

1694
12:40:22,240 --> 12:40:26,956
在那里，所以如果我执行命令来悬停重新加载，那么什么也不会发生，飞镖

1695
12:40:26,956 --> 12:40:33,436
格式化程序我实际上可以看到它们非常适合我们的代码

1696
12:40:33,436 --> 12:40:37,116
所以我们需要处理的下一部分

1697
12:40:37,116 --> 12:40:42,160
是实际显示我们可以在笔记应用程序视图中看到的弹出菜单按钮

1698
12:40:42,160 --> 12:40:48,880
state app bar 创建一个菜单动作类型的弹出菜单按钮

1699
12:40:48,880 --> 12:40:52,560
所以在应用程序栏中，为了让我们成为

1700
12:40:52,560 --> 12:40:58,640
能够显示一些我们需要的动作

1701
12:40:58,640 --> 12:41:02,880
实际上去这里的应用栏，你可以看到有一个属性

1702
12:41:02,880 --> 12:41:07,200
称为动作，它说它是一个小部件列表，所以我们要

1703
12:41:07,200 --> 12:41:13,116
说我们需要在那里采取行动好吧我也只是要确保我有

1704
12:41:13,116 --> 12:41:18,320
一切都在这里，所以我也可以看到代码和我的笔记

1705
12:41:18,320 --> 12:41:21,756
我可以记下我们谈过的事情

1706
12:41:21,756 --> 12:41:25,520
像菜单动作

1707
12:41:25,520 --> 12:41:29,116
嗯，好的，现在我们要创建

1708
12:41:29,116 --> 12:41:33,520
嗯 弹出菜单按钮 好吧 so

1709
12:41:33,520 --> 12:41:36,956
您会看到我们在我网站上的源代码中看到的操作

1710
12:41:36,956 --> 12:41:40,800
显示你和我显示给你作为文件里面

1711
12:41:40,800 --> 12:41:44,720
我们的应用栏的操作然后我们将创建弹出菜单类型的项目

1712
12:41:44,720 --> 12:41:49,520
按钮好吧，让我们继续做吧

1713
12:41:49,520 --> 12:41:53,436
弹出菜单按钮，然后你可以看到它有一个

1714
12:41:53,436 --> 12:41:56,880
项目生成器好的和和

1715
12:41:56,880 --> 12:42:01,436
我认为它实际上是一个项目构建器，也未选中所以

1716
12:42:01,436 --> 12:42:04,400
让我们首先实际处理未选中的，所以我要放

1717
12:42:04,400 --> 12:42:08,640
mac 上的 Visual Studio 代码中未选择的命令空间和控制空间

1718
12:42:08,640 --> 12:42:12,320
在 linux 和 windows 中，为了获得这个对话框，可以从视觉中获得一些帮助

1719
12:42:12,320 --> 12:42:17,116
工作室代码为我们完成此代码，您在选择后会看到它将

1720
12:42:17,116 --> 12:42:22,956
将值返回给我们，我们在这里告诉 darth 我们的弹出菜单

1721
12:42:22,956 --> 12:42:29,276
按钮实际上管理类型菜单操作的值，这就是我们

1722
12:42:29,276 --> 12:42:34,080
在这里指定好的，你可以看到我们得到一个错误

1723
12:42:34,080 --> 12:42:37,680
说命名参数项构建器是必需的，我们将

1724
12:42:37,680 --> 12:42:43,360
现在提供，让我们去创建一个

1725
12:42:43,360 --> 12:42:47,040
此处的项目生成器从 Visual Studio 代码中获得帮助

1726
12:42:47,040 --> 12:42:50,956
我之前向您提到的相同命令

1727
12:42:50,956 --> 12:42:56,720
然后在这里我们将创建一个弹出菜单项的常量

1728
12:42:56,720 --> 12:43:00,480
我们要说这个菜单项实际上管理

1729
12:43:00,480 --> 12:43:04,880
类型菜单操作的值也可以，我们将根据

1730
12:43:04,880 --> 12:43:10,480
文档记住每个弹出菜单项都有一个值，所以一个值关联

1731
12:43:10,480 --> 12:43:15,680
然后它又被传递给这个未选择的函数

1732
12:43:15,680 --> 12:43:20,240
当这个弹出菜单项被点击时好吧，那么我们将在这个

1733
12:43:20,240 --> 12:43:26,000
如果您实际注销时它具有菜单操作的价值

1734
12:43:26,000 --> 12:43:30,720
这个孩子只是一个文本

1735
12:43:30,720 --> 12:43:33,436
说注销

1736
12:43:33,436 --> 12:43:38,160
好的，作为一个常量，实际上整个事情都是一个缺点，所以我们没有

1737
12:43:38,160 --> 12:43:42,560
这样做没关系，所以我们只是让我看看项目

1738
12:43:42,560 --> 12:43:46,720
构建器菜单操作常量主体可能会返回

1739
12:43:46,720 --> 12:43:50,720
通常还可以，我看到了，因为项目生成器如果

1740
12:43:50,720 --> 12:43:54,720
我们将鼠标移到它上面

1741
12:43:54,720 --> 12:43:59,360
如果我将鼠标移到蓝色项目上，您实际上可以看到它需要一个列表

1742
12:43:59,360 --> 12:44:03,596
弹出菜单项，如果您可以看到弹出菜单项

1743
12:44:03,596 --> 12:44:08,560
转到此代码实际上是弹出菜单条目类型，所以我们的问题是

1744
12:44:08,560 --> 12:44:12,400
看到这里是它说你没有返回一个列表，但你只是

1745
12:44:12,400 --> 12:44:15,680
返回一个项目，所以我们要说返回一个列表

1746
12:44:15,680 --> 12:44:21,840
在这里我们只是说把那个项目转好

1747
12:44:21,840 --> 12:44:25,116
像那样我们真的可以列出整个清单吗

1748
12:44:25,116 --> 12:44:30,720
const 所以是的，它也很好用，好吧，我会做命令，你会做什么

1749
12:44:30,720 --> 12:44:36,240
现在看到这里是呃我们实际上已经添加了注销

1750
12:44:36,240 --> 12:44:39,916
嗯，你现在会看到这里按

1751
12:44:39,916 --> 12:44:43,916
然后我们会得到一个漂亮的弹出菜单

1752
12:44:43,916 --> 12:44:46,956
这里有一个注销项目

1753
12:44:46,956 --> 12:44:49,360
没错

1754
12:44:49,360 --> 12:44:56,000
那个注销文本是我们弹出菜单项的子项，所以

1755
12:44:56,000 --> 12:45:00,080
别担心，我的意思是不要对孩子和你的价值感到困惑

1756
12:45:00,080 --> 12:45:04,956
需要知道的是，孩子是用户看到的，价值是你的

1757
12:45:04,956 --> 12:45:09,436
正如程序员所看到的，因为当用户然后点击该项目时

1758
12:45:09,436 --> 12:45:13,756
你的 unselected 会被调用，然后我们会得到这个值，所以只是为了

1759
12:45:13,756 --> 12:45:18,000
测试让我们回到我们的打印语句并说出值

1760
12:45:18,000 --> 12:45:22,720
我要在这里调出控制台来清除它，我要

1761
12:45:22,720 --> 12:45:27,756
稍微更改 ui 布局，以便您看得更清楚，我将执行 command 和

1762
12:45:27,756 --> 12:45:31,116
然后我要点击这个注销按钮噗

1763
12:45:31,116 --> 12:45:36,400
你现在会看到我们未选择的被调用和输出值

1764
12:45:36,400 --> 12:45:40,080
这是您与弹出菜单项相关联的内容

1765
12:45:40,080 --> 12:45:45,520
在这里打印并发送给未选中的人

1766
12:45:45,520 --> 12:45:51,276
好的，所以我们已经完成了我们已经用双引号处理它的部分，我们还没有

1767
12:45:51,276 --> 12:45:56,800
真的处理了，但我们现在只是打印它的价值

1768
12:45:56,800 --> 12:45:59,756
所以我只是要经历一些我遇到的事情

1769
12:45:59,756 --> 12:46:06,480
打算和你谈谈嗯

1770
12:46:06,480 --> 12:46:09,360
呃好吧

1771
12:46:09,360 --> 12:46:12,880
好的，所以我们可以看到 print 语句是

1772
12:46:12,880 --> 12:46:17,756
嗯，在本章的前一部分中，我正在做它的工作

1773
12:46:17,756 --> 12:46:21,840
谈到为什么打印通常不是一个好主意

1774
12:46:21,840 --> 12:46:26,240
有一种更好的打印方式，那就是使用日志记录

1775
12:46:26,240 --> 12:46:30,560
dart 本身预装了一个名为

1776
12:46:30,560 --> 12:46:34,560
开发人员，您可以轻松导入开发人员和

1777
12:46:34,560 --> 12:46:38,956
在 dart 的开发者工具中，有一个很好的函数叫做 log 和

1778
12:46:38,956 --> 12:46:44,000
您可以使用更值得信赖且更可配置的日志

1779
12:46:44,000 --> 12:46:47,360
打印版本，我将向您展示如何做到这一点

1780
12:46:47,360 --> 12:46:52,320
所以在你的导入语句中让我稍微增加屏幕的大小

1781
12:46:52,320 --> 12:46:56,956
有点，所以你看到它最好说 import dart from dart import

1782
12:46:56,956 --> 12:47:01,200
开发人员好吧，现在我还没有谈论太多

1783
12:47:01,200 --> 12:47:05,840
之前的 import 语句，但 import 实际上也是可配置的，所以在这里

1784
12:47:05,840 --> 12:47:09,916
例如，如果您查看里面的代码 import this dart developer

1785
12:47:09,916 --> 12:47:14,956
你的应用程序中可能不需要很多东西

1786
12:47:14,956 --> 12:47:19,756
在你的

1787
12:47:19,756 --> 12:47:23,116
程序你几乎要导入那个包的所有东西

1788
12:47:23,116 --> 12:47:27,040
导入所以在这种情况下扩展配置文件或服务时间线

1789
12:47:27,040 --> 12:47:31,276
然后这些东西得到这些东西然后就可以在

1790
12:47:31,276 --> 12:47:36,956
你的工作区只是你按下例如我是我的控制空间

1791
12:47:36,956 --> 12:47:41,756
macintosh 所以所有这些符号都将在这里可用，所以有很多

1792
12:47:41,756 --> 12:47:45,680
和大量现在在您的应用程序中可用的东西，而无需

1793
12:47:45,680 --> 12:47:50,080
你必须做任何事情只是因为你现在进口了很多东西

1794
12:47:50,080 --> 12:47:55,040
通过在这种情况下导入 dart 开发人员包，您也在制作

1795
12:47:55,040 --> 12:48:00,560
所有这些可用的符号至少在这个文件中是全局的，并且

1796
12:48:00,560 --> 12:48:04,080
有些开发者不喜欢有些开发者喜欢限制

1797
12:48:04,080 --> 12:48:08,480
可用的符号数量，并且只有可用的符号

1798
12:48:08,480 --> 12:48:12,240
他们实际上可以正常工作，因此有一个很好的

1799
12:48:12,240 --> 12:48:16,080
导入和飞镖的功能，你可以说显示

1800
12:48:16,080 --> 12:48:20,160
通过做一个节目，你告诉飞镖，嗯

1801
12:48:20,160 --> 12:48:25,360
您只想导入此包的特定部分，因此特定部分

1802
12:48:25,360 --> 12:48:29,040
你感兴趣的是一个叫做 log 的函数

1803
12:48:29,040 --> 12:48:32,240
现在这样做之后你基本上可以去

1804
12:48:32,240 --> 12:48:36,800
你的应用程序然后说现在登录很多开发人员也不喜欢

1805
12:48:36,800 --> 12:48:41,276
这是因为他们认为哦，记录那是从哪里来的

1806
12:48:41,276 --> 12:48:45,916
嗯，如果您想更具体地说明函数的来源，尤其是如果

1807
12:48:45,916 --> 12:48:51,116
它们不是您自己的功能，或者即使您的日志功能很少

1808
12:48:51,116 --> 12:48:57,116
你甚至在这段代码中有一个日志功能，就像你说 void log

1809
12:48:57,116 --> 12:49:01,520
嗯喜欢这样然后你在这里输入日志

1810
12:49:01,520 --> 12:49:04,640
我的意思是现在有这么多可用的日志我什至不知道哪个

1811
12:49:04,640 --> 12:49:08,240
一个是哪个所以什么

1812
12:49:08,240 --> 12:49:14,080
dart 允许你做的是给你的导入一个别名，例如，如果

1813
12:49:14,080 --> 12:49:19,116
您想使用此开发人员包中提供的日志功能

1814
12:49:19,116 --> 12:49:24,240
您实际上可以在此源文件中为整个包指定别名

1815
12:49:24,240 --> 12:49:27,680
这是主要的飞镖文件，所以你可以说

1816
12:49:27,680 --> 12:49:33,040
我会说开发工具没问题，所以这里发生的是日志功能

1817
12:49:33,040 --> 12:49:38,956
now 不像以前那样可用，除非你必须说 devtools log 和

1818
12:49:38,956 --> 12:49:43,040
然后你会看到有一个日志功能，这是唯一的功能

1819
12:49:43,040 --> 12:49:46,480
现在可以在 devtools 中使用，因为它说 show

1820
12:49:46,480 --> 12:49:51,276
如果您还没有在这里完成表演，那么 devtools 将拥有一切

1821
12:49:51,276 --> 12:49:56,800
在这种情况下，开发工具或开发人员包允许您

1822
12:49:56,800 --> 12:50:02,400
或将其导入您的工作区，然后执行代码，然后作为此导入 devtools

1823
12:50:02,400 --> 12:50:05,596
显示日志和我解释所有这些的原因是因为我认为这些

1824
12:50:05,596 --> 12:50:09,276
理解和理解是如此重要

1825
12:50:09,276 --> 12:50:13,436
你需要尽快让他们喜欢，现在我

1826
12:50:13,436 --> 12:50:17,116
如此详细地解释这些事情，我不会在任何地方解释它们

1827
12:50:17,116 --> 12:50:24,000
本章中的其他内容，所以我不想解释一半

1828
12:50:24,000 --> 12:50:26,560
我们实际上需要充分考虑的事情

1829
12:50:26,560 --> 12:50:30,320
不时理解并解释一半，然后再解释一半，因为那时

1830
12:50:30,320 --> 12:50:34,720
您可能无法链接信息以获取整个信息

1831
12:50:34,720 --> 12:50:39,596
这就是为什么我有时会如此详细地解释事情的原因

1832
12:50:39,596 --> 12:50:43,756
好的，现在我们已经完成了 devtools show log 让我们来看看这个打印

1833
12:50:43,756 --> 12:50:49,520
我们在未选择的注释中放在这里的声明，然后

1834
12:50:49,520 --> 12:50:52,956
说开发工具

1835
12:50:52,956 --> 12:50:55,840
登录好，你现在可以看到它

1836
12:50:55,840 --> 12:51:01,116
向我们抱怨，因为它说 devtools 日志它不允许我们

1837
12:51:01,116 --> 12:51:05,756
打印一个值，如果您查看 log fi 和 log 函数签名它

1838
12:51:05,756 --> 12:51:11,116
需要字符串类型的消息，但我们的菜单操作是枚举，但您

1839
12:51:11,116 --> 12:51:15,360
总是可以在枚举值上说字符串以使其成为

1840
12:51:15,360 --> 12:51:21,040
字符串所以嗯所以我们接下来要做的是

1841
12:51:21,040 --> 12:51:24,720
去并单击此注销，现在您会看到一个

1842
12:51:24,720 --> 12:51:29,200
日志项目被打印到屏幕上，它也更加明显

1843
12:51:29,200 --> 12:51:33,596
您现在可以看到我们没有使用 print using log 确保您的日志

1844
12:51:33,596 --> 12:51:38,080
项目在调试控制台中更加突出

1845
12:51:38,080 --> 12:51:45,680
所以这也是一个很好的加分项

1846
12:51:45,680 --> 12:51:51,916
好的，让我们现在进入下一个项目

1847
12:51:51,916 --> 12:51:55,680
所以我们现在要在这里做什么我们已经注销了

1848
12:51:55,680 --> 12:52:00,000
按钮在这里，所以我要点击它，它说注销我们有

1849
12:52:00,000 --> 12:52:03,916
已经出现了我们现在需要做的就是按下

1850
12:52:03,916 --> 12:52:08,560
这个项目我们将向用户显示一个小对话

1851
12:52:08,560 --> 12:52:12,000
现在，如果您是设计师，您可能熟悉对话和

1852
12:52:12,000 --> 12:52:15,360
对话基本上就像屏幕上显示的警报，具体取决于

1853
12:52:15,360 --> 12:52:19,520
你运行的是什么类型的操作系统，但安卓和ios都是

1854
12:52:19,520 --> 12:52:23,916
ipad os mac os windows 一切都有自己的

1855
12:52:23,916 --> 12:52:28,480
处理对话和对话的方式通常就像一个小窗口

1856
12:52:28,480 --> 12:52:32,800
通常显示在该应用程序所在的主屏幕中央

1857
12:52:32,800 --> 12:52:37,200
放置并且对话通常可以配置为标题

1858
12:52:37,200 --> 12:52:42,480
描述文本甚至图像，通常带有一些操作按钮

1859
12:52:42,480 --> 12:52:47,116
被称为 cta 或号召性用语，所以

1860
12:52:47,116 --> 12:52:51,200
这与颤振中的情况完全相同，因此在按下此注销时

1861
12:52:51,200 --> 12:52:54,800
按钮，我们将向用户显示一个对话，说哦，你希望我们看到

1862
12:52:54,800 --> 12:52:57,916
你想注销你确定要注销然后喜欢

1863
12:52:57,916 --> 12:53:04,720
取消或否按钮和一个是按钮，这是号召性用语或 CTA OK

1864
12:53:04,720 --> 12:53:09,680
所以我们现在需要做的就是创造那个

1865
12:53:09,680 --> 12:53:14,400
function 可以显示警告对话框的函数

1866
12:53:14,400 --> 12:53:19,436
给用户，你可以在这里看到我提到的标题中写了一个登录

1867
12:53:19,436 --> 12:53:22,640
显示对话框及其

1868
12:53:22,640 --> 12:53:27,040
签名有点像它返回一个布尔特性，如果你认为我

1869
12:53:27,040 --> 12:53:30,480
意思是如果你真的考虑它，一个要求用户退出的对话

1870
12:53:30,480 --> 12:53:35,520
要么有一个取消或一个空按钮，要么很抱歉它有

1871
12:53:35,520 --> 12:53:39,360
取消或无按钮和

1872
12:53:39,360 --> 12:53:45,116
执行注销的号召性用语，因此它要么注销要么不注销

1873
12:53:45,116 --> 12:53:49,276
或者基本上它要么确认您需要注销，要么说不

1874
12:53:49,276 --> 12:53:52,956
不应该那样，所以它是真的假好的，所以布尔值是布尔值

1875
12:53:52,956 --> 12:53:56,400
非常适合这种情况，我们现在要做的是

1876
12:53:56,400 --> 12:54:00,720
编写一个函数，返回该布尔值的未来，说真你必须

1877
12:54:00,720 --> 12:54:07,756
注销或不注销，我们将其称为显示注销对话框好的

1878
12:54:07,756 --> 12:54:10,640
所以让我们在这个文件的底部

1879
12:54:10,640 --> 12:54:14,800
说未来和公牛

1880
12:54:14,800 --> 12:54:18,080
正如我在缓存中提到的那样，我们将调用 show log out

1881
12:54:18,080 --> 12:54:23,276
对话框，我们说构建上下文，因为我们实际上需要上下文来显示我们的

1882
12:54:23,276 --> 12:54:29,040
注销按钮打开

1883
12:54:29,040 --> 12:54:34,400
好吧，现在有很多信息，嗯，我实际上要回去一点

1884
12:54:34,400 --> 12:54:38,800
上一个标题呃，因为我忘了提一些事情

1885
12:54:38,800 --> 12:54:43,040
嗯，还有重要的事情要在这里提到

1886
12:54:43,040 --> 12:54:48,956
有两个东西叫做显示对话和警告对话现在显示对话

1887
12:54:48,956 --> 12:54:53,596
实际上让我们去警报对话框第一个警报对话框我们可以看到是一个类是一个

1888
12:54:53,596 --> 12:54:59,436
无状态小部件，它定义了向用户显示的对话框

1889
12:54:59,436 --> 12:55:03,436
本身，因此它没有任何显示到屏幕上的概念或

1890
12:55:03,436 --> 12:55:07,436
在那之后创建对话时会发生什么，它不在乎

1891
12:55:07,436 --> 12:55:11,436
关于那个所以它只是执行创建警报的操作

1892
12:55:11,436 --> 12:55:14,880
为你准备的对话，用于警觉对话，但

1893
12:55:14,880 --> 12:55:18,560
您需要一种向用户显示警报对话框的方法以及执行方式

1894
12:55:18,560 --> 12:55:24,000
那是与表演我相信它被称为表演对话

1895
12:55:24,000 --> 12:55:26,800
你可以在这里看到显示对话框是

1896
12:55:26,800 --> 12:55:33,200
返回可选未来或对不起可选值的未来的函数

1897
12:55:33,200 --> 12:55:36,480
可选未来和可选值的未来之间存在差异

1898
12:55:36,480 --> 12:55:40,800
所以在这种情况下，它是一个总是返回的未来，但它是可选的

1899
12:55:40,800 --> 12:55:46,320
包含一个值，你可以看到它说好的给我一个上下文，然后你

1900
12:55:46,320 --> 12:55:50,320
必须向我提供一个构建器，这个构建器应该返回一个小部件，所以

1901
12:55:50,320 --> 12:55:54,720
我们要说的是要说的显示你可以在这里看到的对话

1902
12:55:54,720 --> 12:55:58,080
和和建设者，我们将得到帮助

1903
12:55:58,080 --> 12:56:00,880
visual studio code 完成就好了

1904
12:56:00,880 --> 12:56:04,640
在我们的构建器中，我们要做的是我们实际上

1905
12:56:04,640 --> 12:56:09,360
创建我们的警报对话框好吧

1906
12:56:09,360 --> 12:56:13,680
让我们回到这个标题，这样我们就知道我们在做什么

1907
12:56:13,680 --> 12:56:17,916
目标在这里还可以

1908
12:56:17,916 --> 12:56:22,800
您负责的构建者是创建一个警报对话，所以假设我们

1909
12:56:22,800 --> 12:56:27,040
返回一个警报对话框，它是一个小部件

1910
12:56:27,040 --> 12:56:31,596
以前看过，它有一个标题，你可以看到标题

1911
12:56:31,596 --> 12:56:37,040
实际上是一个小部件，就像这里是一个小部件

1912
12:56:37,040 --> 12:56:40,956
对于标题，我们将创建一个 const 的文本和

1913
12:56:40,956 --> 12:56:47,040
我可以看到的文字我们在这里设置了登录，所以我们基本上是在配置警报

1914
12:56:47,040 --> 12:56:50,640
对话框好的现在标题

1915
12:56:50,640 --> 12:56:55,276
那么对于内容或内容也是一个小部件和

1916
12:56:55,276 --> 12:57:00,320
我们会说这也是一个 const 文本，我们会问用户

1917
12:57:00,320 --> 12:57:05,680
你确定要这样退出吗

1918
12:57:05,680 --> 12:57:11,040
现在我们已经把标题和内容放在那里了，我们需要指定

1919
12:57:11,040 --> 12:57:15,200
参数调用动作，你可以看到这个动作的类型是列表

1920
12:57:15,200 --> 12:57:20,480
小部件没问题，这就像用户将在此看到的按钮

1921
12:57:20,480 --> 12:57:24,000
警报对话框我们要做的就是

1922
12:57:24,000 --> 12:57:28,160
创建两个文本按钮，所以我要说文本按钮好吧

1923
12:57:28,160 --> 12:57:31,520
不要担心我们在这里看到的所有这些错误和事情

1924
12:57:31,520 --> 12:57:34,956
是因为正如我在前几章或第一章中提到的那样

1925
12:57:34,956 --> 12:57:38,640
我认为介绍章节是因为我们在这里有一个扩展

1926
12:57:38,640 --> 12:57:43,520
称为误差透镜和航空透镜的扩展扩展了所有这些误差

1927
12:57:43,520 --> 12:57:47,200
在我们输入时正在发生，它正在它看起来的屏幕上显示

1928
12:57:47,200 --> 12:57:51,520
真的很可怕，看起来我们做错了，但是这些兄弟

1929
12:57:51,520 --> 12:57:55,596
这些错误实际上是有道理的，如果你看它，它说的是文本按钮

1930
12:57:55,596 --> 12:58:00,480
press 上的命名参数是必需的，但没有相应的 blah blah 所以我们

1931
12:58:00,480 --> 12:58:04,480
需要解决这些问题，所以让我们转到文本按钮并说 unpressed get

1932
12:58:04,480 --> 12:58:08,880
视觉工作室的帮助去完成它，然后我按下说

1933
12:58:08,880 --> 12:58:12,320
孩子，所以这第一个按钮实际上是

1934
12:58:12,320 --> 12:58:16,640
做我们的取消按钮好吗

1935
12:58:16,640 --> 12:58:21,596
所以这是第一个文本按钮，现在复制这个文本按钮并将其粘贴到

1936
12:58:21,596 --> 12:58:27,360
在这里，而不是这次取消，说注销所有权利和

1937
12:58:27,360 --> 12:58:32,880
像这样，现在你看到屏幕上显示的信息少了很多，而且

1938
12:58:32,880 --> 12:58:37,276
它看起来好多了，好吧

1939
12:58:37,276 --> 12:58:40,880
现在我们有一个带有两个按钮的警报取消注销但你可以看到

1940
12:58:40,880 --> 12:58:44,880
按下这些按钮，我们在这里什么都没做，我们需要修复

1941
12:58:44,880 --> 12:58:49,360
这实际上所以让我们继续并首先说我们要返回这个节目

1942
12:58:49,360 --> 12:58:55,436
返回布尔值的对话框，现在您看到我们得到了一个通用的

1943
12:58:55,436 --> 12:58:59,436
这里的错误是说等等你说你要回归公牛的未来但是

1944
12:58:59,436 --> 12:59:03,520
公牛的这个节目对话将返回一个可选的所以你怎么办

1945
12:59:03,520 --> 12:59:07,200
意思是，这很黑，有点混乱

1946
12:59:07,200 --> 12:59:11,756
实际上非常正确地说你说你返回一个布尔值但是

1947
12:59:11,756 --> 12:59:14,880
我们知道显示对话会返回一个可选的布尔值，所以你想要什么

1948
12:59:14,880 --> 12:59:18,320
做这件事，老实说，解决这个问题的方法是

1949
12:59:18,320 --> 12:59:22,160
你附加一个叫做 then 函数的东西

1950
12:59:22,160 --> 12:59:26,000
在整个节目对话中说好的

1951
12:59:26,000 --> 12:59:29,276
如果此节目对话无法返回布尔值，那么我将

1952
12:59:29,276 --> 12:59:33,756
返回 false 否则返回显示对话的值所以

1953
12:59:33,756 --> 12:59:36,800
嗯，因为我的意思是你现在可能会问为什么

1954
12:59:36,800 --> 12:59:40,160
显示对话框不会返回一个取消或注销的值吗

1955
12:59:40,160 --> 12:59:44,080
按钮，但请记住，例如在 android 上你有这些物理键

1956
12:59:44,080 --> 12:59:49,520
我要更改布局，如果我显示

1957
12:59:49,520 --> 12:59:53,116
屏幕上的对话 android 用户可以随时按下这个小按钮

1958
12:59:53,116 --> 12:59:57,680
然后会变成一个向下的箭头，他们可以按下它来关闭

1959
12:59:57,680 --> 13:00:03,360
对话，因此他们有能力在没有实际的情况下取消对话

1960
13:00:03,360 --> 13:00:07,200
回答对话问他们的问题，ios用户有时可以

1961
13:00:07,200 --> 13:00:12,956
也可以在对话之外点击以取消该对话，这就是为什么显示

1962
13:00:12,956 --> 13:00:16,080
对话说我可能无法返回

1963
13:00:16,080 --> 13:00:20,480
如果这个或点击我的任何一个，我承诺会返回的价值

1964
13:00:20,480 --> 13:00:25,680
按钮非常正确，所以附加一个 then 语句让我更改屏幕

1965
13:00:25,680 --> 13:00:31,756
在此处布局，因此在此处附加事件语句

1966
13:00:31,756 --> 13:00:38,160
如果这个未来完成，则调用一个函数，所以如果

1967
13:00:38,160 --> 13:00:42,080
用户关闭了这个未来将要完成的对话，但它不会有

1968
13:00:42,080 --> 13:00:46,880
你看到的价值在这种情况下是一个可选的公牛所以在这里我们说要么你

1969
13:00:46,880 --> 13:00:50,800
如果存在则返回一个值，否则返回 false

1970
13:00:50,800 --> 13:00:56,000
没关系，现在你看到 dart 对此很高兴

1971
13:00:56,000 --> 13:01:02,720
现在我们还需要做的是你看到我们要走的路

1972
13:01:02,720 --> 13:01:06,880
我们要显示这个对话的方式是

1973
13:01:06,880 --> 13:01:09,756
告诉扑，嘿

1974
13:01:09,756 --> 13:01:15,756
这就像暂停你正在做的一切，并在

1975
13:01:15,756 --> 13:01:18,480
屏幕，此对话框将获得焦点

1976
13:01:18,480 --> 13:01:22,720
来自屏幕上的所有其他内容，因此用户必须去

1977
13:01:22,720 --> 13:01:26,720
选择一个项目，除非他们想取消该项目，例如

1978
13:01:26,720 --> 13:01:30,320
在安卓手机上按下物理键

1979
13:01:30,320 --> 13:01:33,040
现在当我们显示我们要去的对话框时

1980
13:01:33,040 --> 13:01:36,880
使用构建内容上下文和导航器

1981
13:01:36,880 --> 13:01:42,800
并像我们显示命名路线一样显示屏幕，所以

1982
13:01:42,800 --> 13:01:47,840
按下时我们的文本按钮内的显示对话功能是我们的

1983
13:01:47,840 --> 13:01:52,720
责任作为警觉的对话来解雇自己

1984
13:01:52,720 --> 13:01:57,436
我们有责任为这个节目对话传递价值

1985
13:01:57,436 --> 13:02:02,640
说嘿，这个按钮被按下了，这是它返回的值

1986
13:02:02,640 --> 13:02:06,240
所以你对这些无压力的事情要做的是

1987
13:02:06,240 --> 13:02:08,680
说导航员

1988
13:02:08,680 --> 13:02:13,360
context 然后你会说 pop 然后你

1989
13:02:13,360 --> 13:02:18,400
在这种情况下为您的值提供布尔值，因此在取消时我们会弹出

1990
13:02:18,400 --> 13:02:22,480
值为 false ，我们复制这段代码，然后进入

1991
13:02:22,480 --> 13:02:26,480
按下退出的第二个文本按钮，在这种情况下，我们应该

1992
13:02:26,480 --> 13:02:29,276
说你应该基本上返回true

1993
13:02:29,276 --> 13:02:32,400
好的

1994
13:02:32,400 --> 13:02:35,520
这是很多代码，我知道让我们确保格式是

1995
13:02:35,520 --> 13:02:39,596
正确以及在括号结束之前将逗号放在此处，以便格式化

1996
13:02:39,596 --> 13:02:42,720
在那种情况下会好一点，所以

1997
13:02:42,720 --> 13:02:46,880
那是我们的演出登出对话框

1998
13:02:46,880 --> 13:02:50,956
功能

1999
13:02:50,956 --> 13:02:57,040
现在正如标题所说，我们需要做的是去展示这个

2000
13:02:57,040 --> 13:03:01,520
与用户对话，这样做的方法是

2001
13:03:01,520 --> 13:03:05,276
在用户点击此注销按钮时

2002
13:03:05,276 --> 13:03:09,276
在这里你看到值是一个菜单动作所以我们要做什么

2003
13:03:09,276 --> 13:03:14,560
会做一个 switch 语句，所以我们说 switch

2004
13:03:14,560 --> 13:03:18,956
价值和我真正喜欢的东西

2005
13:03:18,956 --> 13:03:22,000
呃这个

2006
13:03:22,000 --> 13:03:25,276
警告我们到了这里说注销的缺失原因子句

2007
13:03:25,276 --> 13:03:28,560
dart已经明白那个了

2008
13:03:28,560 --> 13:03:33,756
有一个case语句，并且在这个菜单动作枚举中有一个case

2009
13:03:33,756 --> 13:03:37,756
我们没有处理，它要求我们这样做，所以你可以点击这个

2010
13:03:37,756 --> 13:03:40,880
这里的小图标并说添加缺少的案例

2011
13:03:40,880 --> 13:03:45,200
子句，或者您可以在 mac 上说 command dot 或在 linux 和 windows 上说 control dot

2012
13:03:45,200 --> 13:03:49,680
也提出这个菜单，我也从我的谈话中了解到

2013
13:03:49,680 --> 13:03:53,756
linkedin 上的其他人认为此选项在 vim 上也可用

2014
13:03:53,756 --> 13:03:58,720
和其他编辑，因为这实际上是语言前端的一部分

2015
13:03:58,720 --> 13:04:03,520
谢天谢地，这不仅仅是你可以在 Visual Studio 代码中做的事情

2016
13:04:03,520 --> 13:04:07,200
所以去添加缺少的案例条款

2017
13:04:07,200 --> 13:04:12,320
在这种情况下，我们现在需要做的是显示我们的警报，所以我们要去

2018
13:04:12,320 --> 13:04:18,956
说等待应该注销或其他什么，我们说对不起最后

2019
13:04:18,956 --> 13:04:22,880
应该注销等于等待，现在我们将调用这个函数

2020
13:04:22,880 --> 13:04:28,880
我们创建了显示注销对话框

2021
13:04:28,880 --> 13:04:33,040
现在它抱怨说你不能等待，因为这里有这个功能

2022
13:04:33,040 --> 13:04:37,040
未选中不是异步的，所以现在我们要让它异步并且

2023
13:04:37,040 --> 13:04:40,640
然后我们会说 devtools 日志

2024
13:04:40,640 --> 13:04:48,640
应该注销到一个字符串好吧，所以命令 s 让我们现在去我们的 ui

2025
13:04:48,640 --> 13:04:51,756
我要去，因为我们正在做 devtools 日志，我要调出

2026
13:04:51,756 --> 13:04:56,000
调试控制台在这里清除它，以便您看得更清楚，我要按日志

2027
13:04:56,000 --> 13:04:59,520
现在你看到我们的对话框显示给用户说注册是

2028
13:04:59,520 --> 13:05:04,400
您确定要使用我们的按钮进行注册，按下取消按钮

2029
13:05:04,400 --> 13:05:07,756
然后我们将来到这里的未选择项并获取

2030
13:05:07,756 --> 13:05:12,800
你看到的假嘘再次按下相同的按钮说

2031
13:05:12,800 --> 13:05:19,436
注销然后在这里注销，我们将获得 true 的值

2032
13:05:19,436 --> 13:05:23,680
哇，这也是很多信息，所以我只是去我的笔记和

2033
13:05:23,680 --> 13:05:26,720
确保我已经解释了我想解释的一切

2034
13:05:26,720 --> 13:05:31,276
好的，已经完成了

2035
13:05:31,276 --> 13:05:34,560
现在我们已经展示了 amnata 我们可以

2036
13:05:34,560 --> 13:05:38,560
实际向用户显示一个对话框，让我们返回 true 和 false 值

2037
13:05:38,560 --> 13:05:43,040
还需要确保我们实际上也从 firebase 注销，所以

2038
13:05:43,040 --> 13:05:46,480
true 或 false 还不够，我们需要从 firebase 注销以及如何做

2039
13:05:46,480 --> 13:05:50,240
正如您在标题中的代码中看到的那样，它是 firebase auth 实例

2040
13:05:50,240 --> 13:05:55,756
退出好吧，嗯

2041
13:05:55,756 --> 13:05:59,040
那么我们需要做的是调用一个函数

2042
13:05:59,040 --> 13:06:04,320
所以我们在这里说，嗯，让我拿出我的笔记

2043
13:06:04,320 --> 13:06:11,436
所以我们说如果应该注销

2044
13:06:11,436 --> 13:06:15,840
那么我们将这样做，因为你看到如果你看到这应该注销说真

2045
13:06:15,840 --> 13:06:19,200
如果您不必这样做，则必须注销并且是假的，所以我们只是确保

2046
13:06:19,200 --> 13:06:23,360
没关系，所以你可以说它应该注销，或者你可以说它是否

2047
13:06:23,360 --> 13:06:28,880
不应该注销然后返回，然后您在之后执行实际注销

2048
13:06:28,880 --> 13:06:33,040
所以这完全取决于你的风格，如果应该登录，我会去做

2049
13:06:33,040 --> 13:06:36,956
因为如果我应该登录它对我来说更像是语法意义

2050
13:06:36,956 --> 13:06:41,040
退出并执行此操作，然后说如果我不应该退出，请不要执行此操作

2051
13:06:41,040 --> 13:06:44,880
这有点偏好，但您可以自由选择自己的风格

2052
13:06:44,880 --> 13:06:48,956
随着你的继续，让我们说火力基地关闭

2053
13:06:48,956 --> 13:06:53,840
嗯实例，我们可以在这里看到，然后我们说退出

2054
13:06:53,840 --> 13:06:57,756
你可以看到它返回了一个未来的避免

2055
13:06:57,756 --> 13:07:02,840
所以让我们称之为然后我们说等等

2056
13:07:02,840 --> 13:07:09,116
现在我们已经完成了，嗯，在我们注销用户之后

2057
13:07:09,116 --> 13:07:13,680
将用户保留在此用户界面中是没有意义的，因为此用户

2058
13:07:13,680 --> 13:07:17,360
界面仅适用于登录应用程序并签名的人

2059
13:07:17,360 --> 13:07:21,596
从火力基地中退出意味着您不再注销了，或者您正在

2060
13:07:21,596 --> 13:07:26,956
不再登录 抱歉，您不再登录 不再登录

2061
13:07:26,956 --> 13:07:31,436
它们可以互换使用登录或登录并注销并注册

2062
13:07:31,436 --> 13:07:37,436
取决于您喜欢在项目中使用的术语

2063
13:07:37,436 --> 13:07:41,276
我也可以互换使用这些术语，所以如果我说有时退出或登录

2064
13:07:41,276 --> 13:07:45,360
在你注册后你知道我的意思在这种情况下

2065
13:07:45,360 --> 13:07:48,880
我们还想将您发送到登录屏幕，因为这就像我的

2066
13:07:48,880 --> 13:07:52,480
意见至少这是最常见的事情，如果你退出

2067
13:07:52,480 --> 13:07:55,596
应用程序然后返回登录屏幕好吧

2068
13:07:55,596 --> 13:07:58,400
否则，例如，如果您正在开发一个

2069
13:07:58,400 --> 13:08:03,276
网站然后有一个论坛网站之类的东西

2070
13:08:03,276 --> 13:08:08,800
用户离开并注销，您可以将他们发送到登录页面，但

2071
13:08:08,800 --> 13:08:12,560
但是您实际上可以将它们发送给喜欢所有表格的只读副本

2072
13:08:12,560 --> 13:08:16,400
在您的网站上可用，但由于我们没有

2073
13:08:16,400 --> 13:08:20,956
任何要显示给已注销的用户的内容，我们唯一可以显示的内容

2074
13:08:20,956 --> 13:08:24,800
对他们来说是登录屏幕，因为我们没有任何其他内容要显示

2075
13:08:24,800 --> 13:08:29,756
好的，所以在退出后，我们会将您发送到登录屏幕，让我们开始吧

2076
13:08:29,756 --> 13:08:32,800
现在我们要看看导航器

2077
13:08:32,800 --> 13:08:38,480
正如你在我们上下文的 um 的标题中看到的那样

2078
13:08:38,480 --> 13:08:43,436
我们说 push remove push name and remove until 然后我们要

2079
13:08:43,436 --> 13:08:47,680
说这样的登录离开

2080
13:08:47,680 --> 13:08:53,596
我们不需要路线，就像那个命令一样

2081
13:08:53,596 --> 13:09:01,276
好吧，这有意义吗，那么让我们看看这是否有效

2082
13:09:01,276 --> 13:09:04,800
所以让我们看看，呃，让我也看看

2083
13:09:04,800 --> 13:09:07,520
转到我的笔记以确保我正在解释

2084
13:09:07,520 --> 13:09:10,720
一切

2085
13:09:10,720 --> 13:09:14,720
是的，很好，让我们确保那个标志

2086
13:09:14,720 --> 13:09:19,116
out 工作正常，所以退出我们说不只是为了测试它是否有效，并且

2087
13:09:19,116 --> 13:09:23,116
然后注销，然后我们说在这里注销，我可以看到我什至在使用

2088
13:09:23,116 --> 13:09:26,000
像在这里可以互换的语言，这不是一个好主意，你确定你想要吗

2089
13:09:26,000 --> 13:09:30,240
退出然后退出按钮它并不完美，但它可以工作

2090
13:09:30,240 --> 13:09:33,680
如果您愿意，您可以随意更改此设置，然后如果您说退出，那么我们

2091
13:09:33,680 --> 13:09:37,436
应该回到完美的登录屏幕

2092
13:09:37,436 --> 13:09:41,200
这是有效的，但有些事情不太正常，我会告诉你

2093
13:09:41,200 --> 13:09:44,480
很快，但在我们这样做之前，让我们去航站楼，然后

2094
13:09:44,480 --> 13:09:49,520
到这里我有两个终端，一个用于 scr cpy，另一个用于

2095
13:09:49,520 --> 13:09:53,916
提交消息我实际上会提出来，这样你会看得更清楚

2096
13:09:53,916 --> 13:09:56,640
所以我们需要做的就像我们在上一章所做的那样，现在我们有了

2097
13:09:56,640 --> 13:10:00,640
git 和 github 设置让我们提交我们的工作，我们是

2098
13:10:00,640 --> 13:10:05,916
将这一步称为第三步，这就是我们现在要做的

2099
13:10:05,916 --> 13:10:09,596
将提交我们的工作，我们还将对其进行标记

2100
13:10:09,596 --> 13:10:13,360
所以让我们说 git status 只是为了看看我们改变了什么我可以看到

2101
13:10:13,360 --> 13:10:17,680
主暗文件中只有更改，如果是这样，您也可以说 git

2102
13:10:17,680 --> 13:10:21,916
你可以看到你改变了什么 你看到所有绿色的都是新的

2103
13:10:21,916 --> 13:10:25,040
红色的是你基本上已经删除或替换为新的东西

2104
13:10:25,040 --> 13:10:29,040
内容例如这个被删除了这个

2105
13:10:29,040 --> 13:10:32,956
一个被删除了，这个被添加了，所以很多信息

2106
13:10:32,956 --> 13:10:38,400
在这里假设它得到了，所以我们将所有这些添加到暂存环境中

2107
13:10:38,400 --> 13:10:42,560
为了提交它们，然后我会说 git commit 并带有一条消息

2108
13:10:42,560 --> 13:10:46,560
第三步，让我们看看我们的日志，我可以

2109
13:10:46,560 --> 13:10:51,680
查看初始提交，这是第一步，然后是第二步，然后是第三步

2110
13:10:51,680 --> 13:10:57,040
然后您将推送这些更改或将提交推送到 github 好吧

2111
13:10:57,040 --> 13:11:00,240
现在我要在这里清除那个终端，我们还需要标记我们的代码

2112
13:11:00,240 --> 13:11:04,480
记住提交与标签不同，所以我要说 git tag step

2113
13:11:04,480 --> 13:11:10,880
3 并放上你的标签

2114
13:11:10,880 --> 13:11:18,400
所以这也推动了标签很棒哇那是很多工作

2115
13:11:18,400 --> 13:11:22,640
但是，呃，我必须恭喜你

2116
13:11:22,640 --> 13:11:26,640
在本章中跟上我，因为我们经历了所有这些不同的部分

2117
13:11:26,640 --> 13:11:30,880
以及我们必须为注销工作而放置的部件，但就像这样

2118
13:11:30,880 --> 13:11:34,800
我们应用程序的一个组成部分，我认为值得花一些时间

2119
13:11:34,800 --> 13:11:38,480
解释事情是如何运作的，也谈论一些类似的基础知识

2120
13:11:38,480 --> 13:11:42,560
的显示对话框和菜单项弹出窗口

2121
13:11:42,560 --> 13:11:46,240
等等等等，所以一旦我们现在谈论它们，我们就不必再谈论它们了

2122
13:11:46,240 --> 13:11:49,916
后来记得我告诉过你的东西不是

2123
13:11:49,916 --> 13:11:55,116
在这里工作得很好，这就是我们要解决的问题

2124
13:11:55,116 --> 13:11:59,276
下一章修复登录屏幕，我会告诉你什么是

2125
13:11:59,276 --> 13:12:05,360
如果您现在进入此处并输入您的电子邮件地址，则无法正常工作

2126
13:12:05,360 --> 13:12:09,596
并输入您的密码，您可以看到按登录没有任何作用

2127
13:12:09,596 --> 13:12:13,276
它只是登录到应用程序，因为如果您进入登录视图，我们

2128
13:12:13,276 --> 13:12:15,596
看看我们在这里写的代码

2129
13:12:15,596 --> 13:12:19,116
如果你看一下，让我在这里摆脱控制台

2130
13:12:19,116 --> 13:12:22,640
按下它时按下的按钮我们所做的只是我们正在做一个

2131
13:12:22,640 --> 13:12:27,596
打印用户凭证，你可以看到，如果你去这里哦，我可以看到我

2132
13:12:27,596 --> 13:12:32,956
实际上密码错误，所以让我说 foo barbaz

2133
13:12:32,956 --> 13:12:35,916
哦，现在我们在这里获得了用户凭据

2134
13:12:35,916 --> 13:12:38,800
看到但即使你也没有任何效果

2135
13:12:38,800 --> 13:12:41,360
然后提供正确的用户凭据

2136
13:12:41,360 --> 13:12:45,756
它没有按应有的方式工作，我的意思是它没有带你去

2137
13:12:45,756 --> 13:12:49,596
下一步 下一步应该发生什么 好吧

2138
13:12:49,596 --> 13:12:52,560
所以这就是我们接下来要解决的问题

2139
13:12:52,560 --> 13:12:57,276
本章我们将致力于修复登录视图，所以对于本章所有你

2140
13:12:57,276 --> 13:13:02,080
你和我所做的就是呃照顾我们的主用户界面

2141
13:13:02,080 --> 13:13:08,240
我们摆脱了我们正在显示的那个丑陋的 uh done 文本小部件

2142
13:13:08,240 --> 13:13:14,160
在上一章的最后，我们现在有了一个主 UI，其中有一个

2143
13:13:14,160 --> 13:13:17,436
右上角的菜单栏项目并按下

2144
13:13:17,436 --> 13:13:20,160
显示一个弹出菜单

2145
13:13:20,160 --> 13:13:24,956
其中有一个枚举项，按下 which 然后你

2146
13:13:24,956 --> 13:13:29,360
得到一个对话框然后如果你取消嗯

2147
13:13:29,360 --> 13:13:33,116
你回到主用户界面，如果你说注销或退出，你会回到

2148
13:13:33,116 --> 13:13:36,560
从长远来看，我们做了很多工作，祝贺你

2149
13:13:36,560 --> 13:13:39,200
为了跟上

2150
13:13:39,200 --> 13:13:43,276
嗯，那就做好准备，无论你想做什么，都可以得到一些茶点，我们

2151
13:13:43,276 --> 13:13:47,040
将在下一章修复我们的登录屏幕

2152
13:13:47,040 --> 13:13:50,640
你好，欢迎来到 swata 课程的第 19 章

2153
13:13:50,640 --> 13:13:53,756
在上一章中，我们进行了注销

2154
13:13:53,756 --> 13:14:00,000
在我们完成注销后，您看到我们进入了登录屏幕，嗯

2155
13:14:00,000 --> 13:14:03,200
它并没有真正发挥应有的作用

2156
13:14:03,200 --> 13:14:07,916
它所做的是嗯，它正在用firebase登录你，它是

2157
13:14:07,916 --> 13:14:12,800
将用户凭据打印到调试控制台

2158
13:14:12,800 --> 13:14:16,880
或者缺点基本上是控制台，我们看到了日志

2159
13:14:16,880 --> 13:14:22,320
但登录视图实际上并没有进入注释视图

2160
13:14:22,320 --> 13:14:25,680
所以你可以在这里看到它说登录没有正确路由它只是停留

2161
13:14:25,680 --> 13:14:29,040
那里，这在成功登录后没有任何作用，并且

2162
13:14:29,040 --> 13:14:32,240
这正是我们将在本章中讨论的内容

2163
13:14:32,240 --> 13:14:35,756
会很短，因为我们基本上所做的只是在做

2164
13:14:35,756 --> 13:14:40,480
一些清理工作，我们将从登录屏幕转到登录视图

2165
13:14:40,480 --> 13:14:44,080
注意 c 我们要删除一些 um

2166
13:14:44,080 --> 13:14:46,956
法律打印声明嗯，这就像

2167
13:14:46,956 --> 13:14:50,800
当你越来越成为一名软件开发人员时会发生什么

2168
13:14:50,800 --> 13:14:53,840
有时你会像我们之前做的那样做繁重的工作

2169
13:14:53,840 --> 13:15:00,080
章节我们照顾了呃注销，你学到了很多关于新课程的知识

2170
13:15:00,080 --> 13:15:06,560
就像按钮和菜单一样，并且未按下这些菜单项，然后

2171
13:15:06,560 --> 13:15:09,680
完成后，您可能会花一些时间来清理代码并

2172
13:15:09,680 --> 13:15:13,200
这是我们要做的章节之一

2173
13:15:13,200 --> 13:15:16,160
清理

2174
13:15:16,160 --> 13:15:20,400
所以让我们来看看我们需要补救的第一件事，那就是我们的

2175
13:15:20,400 --> 13:15:22,880
打印报表嗯

2176
13:15:22,880 --> 13:15:29,276
让我们看一下我要调出我们的代码的代码

2177
13:15:29,276 --> 13:15:35,840
所以我认为我们称它为我的节点所以我认为这里是正确的窗口

2178
13:15:35,840 --> 13:15:39,840
我要摆脱那里的调试控制台，我要

2179
13:15:39,840 --> 13:15:44,800
调出我在附近某处的 scrcpy

2180
13:15:44,800 --> 13:15:48,720
好的，所以您可以在登录视图中看到我们有很多打印语句

2181
13:15:48,720 --> 13:15:52,240
他们只是说打印用户没有找到错误的密码用户凭据的那一刻

2182
13:15:52,240 --> 13:15:56,080
等等，我们在这里也有一个注册视图

2183
13:15:56,080 --> 13:16:02,000
它有一些打印语句，所以让我们去解决这个问题并使用日志作为

2184
13:16:02,000 --> 13:16:08,480
我们之前谈过，所以假设我要改变这个

2185
13:16:08,480 --> 13:16:11,596
在此处查看布局，以便您更好地查看代码

2186
13:16:11,596 --> 13:16:15,040
让我们去使用 log 如果你不知道 log 和

2187
13:16:15,040 --> 13:16:18,080
打印漂亮的图画我强烈建议你看前面的章节

2188
13:16:18,080 --> 13:16:22,400
我们在哪里讨论过这个以及为什么实际上建议使用 log 而不是

2189
13:16:22,400 --> 13:16:25,436
打印和登录本身并不完美

2190
13:16:25,436 --> 13:16:29,040
这不是问题，而是

2191
13:16:29,040 --> 13:16:33,436
不是问题，可能是缩小尺寸或您需要注意的事情，我

2192
13:16:33,436 --> 13:16:37,040
强烈建议您也阅读 log 文档，但 um in

2193
13:16:37,040 --> 13:16:41,200
如您所见，这种情况下分析仪也建议不要使用

2194
13:16:41,200 --> 13:16:45,436
print 所以我们将在登录视图和注册表中将其更改为

2195
13:16:45,436 --> 13:16:49,596
我们将把它改成使用 log 所以让我们继续说

2196
13:16:49,596 --> 13:16:56,080
导入 dart 开发人员并作为 devtools 显示日志，我现在要复制

2197
13:16:56,080 --> 13:17:01,436
把这个也贴在这里，同时我要清理代码

2198
13:17:01,436 --> 13:17:05,276
寄存器视图中的一点点没问题

2199
13:17:05,276 --> 13:17:10,080
好的，我们已经在登录视图中完成了导入并注册您想要保存这些并

2200
13:17:10,080 --> 13:17:13,756
现在让我们转到登录视图并删除所有这些打印语句和

2201
13:17:13,756 --> 13:17:17,596
而只是说 devtools 日志

2202
13:17:17,596 --> 13:17:21,756
我们只是说用户凭证到字符串好吧记住打印

2203
13:17:21,756 --> 13:17:25,360
可以打印一个对象，如果你看

2204
13:17:25,360 --> 13:17:28,800
在这里打印的信息对不起

2205
13:17:28,800 --> 13:17:32,720
你可以看到函数签名是我可以打印一个可选的

2206
13:17:32,720 --> 13:17:37,840
我的意思是它可以打印一个可选对象的特殊对象

2207
13:17:37,840 --> 13:17:40,160
嗯，这是否意味着我不必

2208
13:17:40,160 --> 13:17:44,240
实际上传递一个参数没有它有一个位置参数但是那个参数

2209
13:17:44,240 --> 13:17:49,040
不能这样我可以说字符串嗯

2210
13:17:49,040 --> 13:17:53,916
value 是 null 像这样像一个可选的，只是在这里传递，所以我动物

2211
13:17:53,916 --> 13:17:59,436
仍然工作这就是它的意思所以让我们玩得开心它可以接受一个可选的

2212
13:17:59,436 --> 13:18:03,276
对象并记住每个对象都有一个功能

2213
13:18:03,276 --> 13:18:07,916
调用字符串所以这两个字符串函数实际上来自对象

2214
13:18:07,916 --> 13:18:12,720
所以我们可以命令点击它，你会看到，嗯，让我们看看哦

2215
13:18:12,720 --> 13:18:21,840
这是用户凭据的两个字符串，但是如果我们看一下

2216
13:18:21,840 --> 13:18:26,000
例如，如果我们创建我如何解释 tostring 以及它的来源

2217
13:18:26,000 --> 13:18:27,756
从嗯

2218
13:18:27,756 --> 13:18:32,080
让我们这样做假设我们有一个对象

2219
13:18:32,080 --> 13:18:37,276
可选对象值，现在我可以说值到你看到的字符串

2220
13:18:37,276 --> 13:18:41,040
那里有一个功能，所以这些是操作这些是

2221
13:18:41,040 --> 13:18:47,840
任何对象和每个类公开的函数和属性

2222
13:18:47,840 --> 13:18:50,080
在飞镖是

2223
13:18:50,080 --> 13:18:55,276
隐含的对象的子类，包括用户凭证的含义

2224
13:18:55,276 --> 13:19:00,560
用户凭证已继承 tostring

2225
13:19:00,560 --> 13:19:05,276
对象类中的函数，但是如果您查看源代码

2226
13:19:05,276 --> 13:19:08,480
这个特殊的两个字符串你可以看到它来自包 firebase off

2227
13:19:08,480 --> 13:19:14,480
firebase off the dart 意味着该类已覆盖用户凭据

2228
13:19:14,480 --> 13:19:18,880
tostring 的功能意味着它将自己的字符串返回到

2229
13:19:18,880 --> 13:19:22,880
可以代表自己，这就是我们看到的这个长字符串

2230
13:19:22,880 --> 13:19:25,596
实际上我们现在看不到但让我看看我是否

2231
13:19:25,596 --> 13:19:30,080
可以在这里登录所以你会看到它噗

2232
13:19:30,080 --> 13:19:33,596
您会看到打印在此处的此用户凭据

2233
13:19:33,596 --> 13:19:38,320
让我稍微改变一下屏幕布局，让这个用户凭证

2234
13:19:38,320 --> 13:19:41,596
所以这是正在打印或正在

2235
13:19:41,596 --> 13:19:45,680
由用户上的 to 字符串函数返回和计算

2236
13:19:45,680 --> 13:19:48,480
凭证，您可以看到它看起来像这个用户凭证，然后是附加的

2237
13:19:48,480 --> 13:19:50,880
信息，然后打印附加信息，那就是

2238
13:19:50,880 --> 13:19:54,480
正是您在这里看到的内容，您会看到其他用户信息，然后是

2239
13:19:54,480 --> 13:19:59,040
我相信的证书

2240
13:19:59,040 --> 13:20:03,436
它应该在附近的某个地方是匿名的在这里是凭证

2241
13:20:03,436 --> 13:20:10,160
钥匙，然后是另一个叫用户的钥匙，那可能在哪里

2242
13:20:10,160 --> 13:20:14,880
它在这里的某个地方我真的看不到它但它应该在某个地方

2243
13:20:14,880 --> 13:20:17,916
在这里用户密码我的意思是说实话，如果你

2244
13:20:17,916 --> 13:20:22,240
复制这个就像我实际上复制了这个并将它带到它自己的文件中一样

2245
13:20:22,240 --> 13:20:28,320
并搜索用户繁荣繁荣让我们看看

2246
13:20:28,320 --> 13:20:31,680
有点奇怪，这一切都在一条线上，但没关系，我也是

2247
13:20:31,680 --> 13:20:36,240
去搜索用户热潮，这就是你可以搜索到的用户信息

2248
13:20:36,240 --> 13:20:42,160
看到用户是用户显示名称等所以这是两个字符串好吧我的原因

2249
13:20:42,160 --> 13:20:45,436
解释所有这些是因为您需要知道 print 可以打印

2250
13:20:45,436 --> 13:20:50,640
对象，但日志不能记录需要一个字符串，所以如果你看一下函数签名

2251
13:20:50,640 --> 13:20:53,436
它说给我一个字符串类型的消息好吗

2252
13:20:53,436 --> 13:20:56,000
所以嗯，这就是我们在这里所做的，我们在

2253
13:20:56,000 --> 13:21:00,240
说 devtools 日志，然后将用户凭据转换为字符串

2254
13:21:00,240 --> 13:21:05,040
我们需要做 tostring 好，所以继续复制这个开发工具日志和

2255
13:21:05,040 --> 13:21:07,840
那么让我们更改所有这些打印语句

2256
13:21:07,840 --> 13:21:12,560
说这就是现在需要打印或记录的内容

2257
13:21:12,560 --> 13:21:16,080
更改登录视图中的所有内容，以便不再有警告

2258
13:21:16,080 --> 13:21:19,116
这里与打印有关

2259
13:21:19,116 --> 13:21:22,640
保存您的登录视图，然后转到注册视图并执行完全相同的操作

2260
13:21:22,640 --> 13:21:25,756
事情所以用户凭据

2261
13:21:25,756 --> 13:21:31,520
需要流式传输和弱密码做同样的事情

2262
13:21:31,520 --> 13:21:36,240
发送电子邮件到同一件事，然后输入无效的电子邮件，我们没有其他打印

2263
13:21:36,240 --> 13:21:39,916
陈述和你能做什么我的意思是我没有

2264
13:21:39,916 --> 13:21:45,756
在我的笔记中有一个计划，我看不到

2265
13:21:45,756 --> 13:21:48,956
我计划的任何地方，但我认为我们可以

2266
13:21:48,956 --> 13:21:51,276
呃，我们可以即兴发挥一点，

2267
13:21:51,276 --> 13:21:54,560
当我在源代码中进行这样的清理时，我真正喜欢做什么

2268
13:21:54,560 --> 13:21:58,400
代码我喜欢去确保没有打印语句语句

2269
13:21:58,400 --> 13:22:03,276
其他任何地方，因为感觉就像你在清理你的

2270
13:22:03,276 --> 13:22:06,000
代码，特别是如果您正在做一些像我们正在做的事情一样简单的事情

2271
13:22:06,000 --> 13:22:10,080
在这里值得多花几秒钟，并确保

2272
13:22:10,080 --> 13:22:14,240
你现在在整个源中应用相同的清理有时你的源

2273
13:22:14,240 --> 13:22:19,840
代码可能如此庞大和复杂，以至于您甚至更改了一些简单的代码

2274
13:22:19,840 --> 13:22:23,596
可能会影响源代码，以至于您可能不知道自己是否正在破坏

2275
13:22:23,596 --> 13:22:26,640
它或任何东西

2276
13:22:26,640 --> 13:22:32,080
为此我们需要测试单元测试小部件测试等，但如果是这样的话

2277
13:22:32,080 --> 13:22:35,040
您不必这样做，但在这种情况下，因为我们的应用程序是如此新

2278
13:22:35,040 --> 13:22:38,720
我们刚刚创建了它，其中没有太多逻辑我认为它值得

2279
13:22:38,720 --> 13:22:43,200
只是在 mac 上的 Visual Studio 中执行命令 shift f 或 ctrl shift f

2280
13:22:43,200 --> 13:22:46,956
它只是在这里继续使用 linux 和 windows 只是为了去这个全球

2281
13:22:46,956 --> 13:22:51,040
搜索并仅搜索打印，我可以在这里看到我们没有

2282
13:22:51,040 --> 13:22:54,800
我们的源代码中留下了任何打印，所以我们不必更改任何其他内容

2283
13:22:54,800 --> 13:22:59,360
打印件似乎在登录视图和注册视图中，所以

2284
13:22:59,360 --> 13:23:04,320
别再担心了好吗

2285
13:23:04,320 --> 13:23:08,840
好吧，那是为了我们的印刷品

2286
13:23:08,840 --> 13:23:14,400
嗯，所以现在我们需要做的是确保

2287
13:23:14,400 --> 13:23:16,956
是的，基本上我们现在需要专注于

2288
13:23:16,956 --> 13:23:21,840
我们在这一章中想做的事情有点像

2289
13:23:21,840 --> 13:23:24,956
旁注以清理我们的打印语句，我们需要在此做些什么

2290
13:23:24,956 --> 13:23:28,956
章节以确保我们可以从登录视图转到

2291
13:23:28,956 --> 13:23:32,560
我相信笔记视图是我们在

2292
13:23:32,560 --> 13:23:40,000
前几章中的一章，也许是在主要飞镖中

2293
13:23:40,000 --> 13:23:43,436
让我们看看笔记视图是的

2294
13:23:43,436 --> 13:23:48,160
所以让我们这样做，你还记得前几章中我们哦，我们

2295
13:23:48,160 --> 13:23:51,680
不需要这里的 devtools 日志好吗

2296
13:23:51,680 --> 13:23:54,800
如果你还记得我们之前讨论过命名的章节之一

2297
13:23:54,800 --> 13:23:59,680
如您所见，路由和命名路由在主函数中定义

2298
13:23:59,680 --> 13:24:05,276
现在记住 main 函数没有被重新编译

2299
13:24:05,276 --> 13:24:10,240
当你进行热重载时请记住这一点，所以我们现在要修改我们的

2300
13:24:10,240 --> 13:24:15,520
路由并允许并创建一条新路由，如您在此处看到的，它被称为节点

2301
13:24:15,520 --> 13:24:21,756
实际上它应该是节点斜线所以我要隐藏这个标题

2302
13:24:21,756 --> 13:24:26,080
并改变它，使它实际上是准确的

2303
13:24:26,080 --> 13:24:30,240
就像那样，嗯，我要提出来

2304
13:24:30,240 --> 13:24:33,916
再次让您看到我们必须创建的正确路线

2305
13:24:33,916 --> 13:24:36,560
好的，让我们进去创建一个新的

2306
13:24:36,560 --> 13:24:41,276
我们的笔记和任何人的路线

2307
13:24:41,276 --> 13:24:45,520
试图在屏幕上推送这条路线的人会得到

2308
13:24:45,520 --> 13:24:48,000
笔记视图出现

2309
13:24:48,000 --> 13:24:53,200
在他们的屏幕上好吧，所以让我们说作为一个字符串和音符斜线作为

2310
13:24:53,200 --> 13:24:58,320
字幕建议，然后您必须提供记住路线是地图

2311
13:24:58,320 --> 13:25:03,200
其中键是字符串，值必须是接受的函数

2312
13:25:03,200 --> 13:25:07,040
构建上下文并返回一个小部件，它有点像字符串语法，但是

2313
13:25:07,040 --> 13:25:10,800
你会习惯所以值应该接受构建上下文，如你所见

2314
13:25:10,800 --> 13:25:15,756
在这里，它应该返回一个小部件，所以在这种情况下，我们可以返回注释视图

2315
13:25:15,756 --> 13:25:19,040
作为常数

2316
13:25:19,040 --> 13:25:24,880
好的，这部分现在已经完成，所以我们现在需要做的是确保

2317
13:25:24,880 --> 13:25:30,000
按下登录按钮时 抱歉 按下登录按钮时

2318
13:25:30,000 --> 13:25:36,480
如果你看这里，我们正在做一个类似于我们在 um 中所做的代码

2319
13:25:36,480 --> 13:25:40,000
我们去注册时的登录视图你还记得这个导航器吗？

2320
13:25:40,000 --> 13:25:45,840
上下文推送名称并删除，直到没问题

2321
13:25:45,840 --> 13:25:50,400
我们需要我们需要这样做，当我们这样做时

2322
13:25:50,400 --> 13:25:54,080
当我们最初这样做时，我们使用推送名称并删除直到我

2323
13:25:54,080 --> 13:25:58,240
不要认为我实际上完全解释了 push 命名和删除的内容

2324
13:25:58,240 --> 13:26:02,956
直到确实如此，所以我现在就这样做

2325
13:26:02,956 --> 13:26:07,436
顾名思义，它会在屏幕上四处移动，所以它说你有一个

2326
13:26:07,436 --> 13:26:10,956
屏幕，你想在它上面放点东西好吧，所以推是什么

2327
13:26:10,956 --> 13:26:14,720
这在移动开发中非常流行，因为

2328
13:26:14,720 --> 13:26:19,680
一个手机屏幕通常我的意思是在 ios 出现之后

2329
13:26:19,680 --> 13:26:23,116
它变得非常流行，你有一个屏幕，你按下按钮，另一个

2330
13:26:23,116 --> 13:26:27,840
屏幕被推到了那个屏幕的顶部，所以这已经可用了，我的意思是

2331
13:26:27,840 --> 13:26:32,000
许多其他地方甚至网络浏览器现在都没有这样做，甚至诺基亚

2332
13:26:32,000 --> 13:26:35,360
在过去的美好时光里，手机也在做同样的事情，但它不像

2333
13:26:35,360 --> 13:26:40,320
当时很流行，它不像是作为推动直到 ios 的术语而创造的

2334
13:26:40,320 --> 13:26:43,756
android 在 2007 年变得越来越流行

2335
13:26:43,756 --> 13:26:46,880
所以推是有一个概念

2336
13:26:46,880 --> 13:26:50,480
屏幕，然后移动和物理推动另一个

2337
13:26:50,480 --> 13:26:56,080
屏幕在它上面没问题，所以这就是 push 在 push 名称中的意思

2338
13:26:56,080 --> 13:27:00,000
好吧，这个函数的命名部分意味着你有一个命名的

2339
13:27:00,000 --> 13:27:05,200
路线，因此您已经在某处定义了路线，例如此处的主屏幕

2340
13:27:05,200 --> 13:27:09,360
并且您正在尝试使用其名称来推动它，因此您不仅仅是在推动

2341
13:27:09,360 --> 13:27:13,680
新的小部件无处不在，这就是名字的意思

2342
13:27:13,680 --> 13:27:18,160
现在说并删除的部分，直到

2343
13:27:18,160 --> 13:27:22,320
它说的是嗯，如果你在这里有一个屏幕

2344
13:27:22,320 --> 13:27:25,840
另一个被推到它上面，现在你想把另一个推到上面

2345
13:27:25,840 --> 13:27:29,200
筛选删除内容，直到它说如果

2346
13:27:29,200 --> 13:27:32,000
你想把这个推到屏幕上我会给你机会得到

2347
13:27:32,000 --> 13:27:37,436
摆脱堆栈上现有的屏幕，所以我先删除这些，然后我会

2348
13:27:37,436 --> 13:27:41,840
推你的，这很有用，例如，如果你让我们说你

2349
13:27:41,840 --> 13:27:46,160
有一个登录视图，然后按下登录按钮，然后

2350
13:27:46,160 --> 13:27:50,800
在我们的情况下，如果我们然后用户凭据是正确的

2351
13:27:50,800 --> 13:27:55,436
嗯，如果我们然后想去笔记视图

2352
13:27:55,436 --> 13:28:00,000
我们不必在屏幕上保留这个日志视图，所以如果这个登录视图是

2353
13:28:00,000 --> 13:28:04,080
在这里，我们可以做的是通过在它上面的一些节点视图来推送笔记

2354
13:28:04,080 --> 13:28:08,800
总是坐在这里，但你作为程序员而不是作为程序员的用户

2355
13:28:08,800 --> 13:28:12,880
您将始终知道登录视图位于此后面，因此

2356
13:28:12,880 --> 13:28:16,080
这不太好，因为一旦你登录

2357
13:28:16,080 --> 13:28:19,276
并且您在便笺视图中您不再需要此视图 您不再需要

2358
13:28:19,276 --> 13:28:24,160
登录视图坐在那里并消耗内存，所以这就是删除

2359
13:28:24,160 --> 13:28:28,640
直到这样做，因为它给了你它经过的机会，你看到了一条路线

2360
13:28:28,640 --> 13:28:33,916
动态的，它说让我知道你什么时候让我停下来

2361
13:28:33,916 --> 13:28:38,720
在我推你和我们回来之前从屏幕上删除东西

2362
13:28:38,720 --> 13:28:42,956
false 基本上说只是删除所有不关心的内容

2363
13:28:42,956 --> 13:28:46,400
目前屏幕上的路线，不关心路线

2364
13:28:46,400 --> 13:28:50,400
你告诉我的只是删除所有内容并转到此注册视图

2365
13:28:50,400 --> 13:28:53,520
好吧好吧那是很多信息

2366
13:28:53,520 --> 13:28:57,756
希望你明白了，所以现在我们需要做的是去我们的登录

2367
13:28:57,756 --> 13:29:04,000
查看我们现在的状态，并在此处获取我们的用户凭据

2368
13:29:04,000 --> 13:29:08,560
我们需要做的就是将用户发送到 um

2369
13:29:08,560 --> 13:29:11,840
主用户界面，所以我要检查一下我的笔记

2370
13:29:11,840 --> 13:29:15,916
在我们继续之前，我已经向你解释了一切

2371
13:29:15,916 --> 13:29:20,956
是的，情况似乎如此，所以嗯，让我们继续做正确的事

2372
13:29:20,956 --> 13:29:23,840
我们要做的就是得到

2373
13:29:23,840 --> 13:29:30,000
摆脱这个开发工具日志在这里好吧让我们进去说

2374
13:29:30,000 --> 13:29:33,680
和导航器并记住我们有一个构建上下文

2375
13:29:33,680 --> 13:29:37,276
我们会说 push name and remove 直到

2376
13:29:37,276 --> 13:29:43,756
嗯，就像这样，我们的新路线名称实际上就是我认为的注释

2377
13:29:43,756 --> 13:29:48,720
我们在这里称它为 是的 斜线 注意 斜线

2378
13:29:48,720 --> 13:29:52,560
所以把它放在那里，在这里你可以说

2379
13:29:52,560 --> 13:29:57,360
返回 false 好的，现在这是一件事，我也没有

2380
13:29:57,360 --> 13:30:02,400
在前面的章节中提到过，但在 dart 中，你很重要

2381
13:30:02,400 --> 13:30:08,240
始终为您的参数参数值添加后缀

2382
13:30:08,240 --> 13:30:13,360
您可以在此处看到的逗号和逗号通常放在参数之间，但是

2383
13:30:13,360 --> 13:30:16,956
最后一个参数也建议使用逗号，因为您可以在此处看到

2384
13:30:16,956 --> 13:30:20,400
现在的飞镖格式化程序并不能真正打破这个

2385
13:30:20,400 --> 13:30:24,640
这两个参数分成两行单独的代码，这就是我们通常的

2386
13:30:24,640 --> 13:30:29,436
do in dart 你可以在这里看到，例如当我们等待 firebase 实例时

2387
13:30:29,436 --> 13:30:34,160
登录最后一个参数我们有一个逗号如果我删除代码将

2388
13:30:34,160 --> 13:30:38,800
实际上在这看起来有点丑陋，但如果你放一个

2389
13:30:38,800 --> 13:30:43,756
最后一个参数dark末尾的逗号可以破坏你的参数

2390
13:30:43,756 --> 13:30:48,400
每个参数及其值都在自己的行中，这就像通常的约定

2391
13:30:48,400 --> 13:30:51,916
在飞镖中，所以如果你看到这样的东西看起来不太正确，请放一个

2392
13:30:51,916 --> 13:30:55,756
最后一个参数末尾的逗号，然后按命令 s 用于暗格式化程序

2393
13:30:55,756 --> 13:31:00,080
能够格式化你的呃代码

2394
13:31:00,080 --> 13:31:04,400
太好了，我们现在已经做到了，目前我们没有使用

2395
13:31:04,400 --> 13:31:09,436
用户凭据，嗯，所以我们可以对您诚实的做法是

2396
13:31:09,436 --> 13:31:13,840
摆脱它，所以我们要做的就是说 firebase 实例使用电子邮件登录

2397
13:31:13,840 --> 13:31:18,000
和密码好的，嗯，就是这样，因为这整个

2398
13:31:18,000 --> 13:31:22,000
事情在一个尝试块中，所以如果这个事情不能正常工作，那么我们会来

2399
13:31:22,000 --> 13:31:24,880
现在好了

2400
13:31:24,880 --> 13:31:28,240
好吧，这实际上很棒，现在我们要离开我们的

2401
13:31:28,240 --> 13:31:33,436
嗯登录视图到笔记视图但你会有点失望看到

2402
13:31:33,436 --> 13:31:37,680
这不会正常工作，所以让我改变

2403
13:31:37,680 --> 13:31:42,480
uh ui在这里一点点然后按下登录按钮

2404
13:31:42,480 --> 13:31:46,720
你会看到我们在这里得到一个错误，不幸的是在未知路线上是

2405
13:31:46,720 --> 13:31:50,240
没有设置他们说的很可爱

2406
13:31:50,240 --> 13:31:55,756
不幸的是，在实际的气闸中，所以

2407
13:31:55,756 --> 13:32:00,000
这就是这个标题也告诉你你看到我谈到它一点点

2408
13:32:00,000 --> 13:32:02,240
在我们开始之前

2409
13:32:02,240 --> 13:32:05,040
我们说过我们将把

2410
13:32:05,040 --> 13:32:10,000
在主函数中作为我们的注释名称路由登录

2411
13:32:10,000 --> 13:32:12,400
但这是我告诉过你的，这不会发生

2412
13:32:12,400 --> 13:32:17,680
真正工作得这么好，原因还是主要功能不会

2413
13:32:17,680 --> 13:32:22,400
当您进行热重载时重建，以便您在主程序中进行更改

2414
13:32:22,400 --> 13:32:26,480
功能生效你需要做一个热重启所以这里发生的是

2415
13:32:26,480 --> 13:32:29,756
你已经正确地定义了一切 一切都做对了 什么都没有

2416
13:32:29,756 --> 13:32:33,596
代码本身有问题，这只是我们执行代码的方式

2417
13:32:33,596 --> 13:32:36,956
错了，现在您必须进行热重启才能使颤振能够选择

2418
13:32:36,956 --> 13:32:40,800
修改 main 函数也可以，所以不会进行热重载

2419
13:32:40,800 --> 13:32:45,520
这样做，所以你需要做一个热重启，所以我要在这里做热重启

2420
13:32:45,520 --> 13:32:48,720
我们来到这里，现在你看到我们在你好世界，因为

2421
13:32:48,720 --> 13:32:52,240
我们实际上是从上一节登录的

2422
13:32:52,240 --> 13:32:56,560
嗯，我要退出，我们现在来这里，我要进入

2423
13:32:56,560 --> 13:32:59,276
我的细节

2424
13:32:59,276 --> 13:33:03,276
foo bar baths，请不要使用足球棒作为您的密码，我是

2425
13:33:03,276 --> 13:33:08,880
只是为了简单起见，现在我们说登录，你会看到

2426
13:33:08,880 --> 13:33:16,880
登录我们来到应用程序的主用户界面，如你所见

2427
13:33:16,880 --> 13:33:22,080
使用材料设计推入 android 与

2428
13:33:22,080 --> 13:33:25,916
推动 ios 让我再给你演示一次，这样你就可以

2429
13:33:25,916 --> 13:33:29,680
在登录视图中好好看看 enter

2430
13:33:29,680 --> 13:33:33,200
你的资料

2431
13:33:33,200 --> 13:33:36,956
呃通过巴巴多斯然后登录并

2432
13:33:36,956 --> 13:33:40,400
在你这样做之前，只需确保你非常专注于

2433
13:33:40,400 --> 13:33:43,596
屏幕我要把它调高一点

2434
13:33:43,596 --> 13:33:49,116
所以你会更好地看到这个应用程序的主 ui 不会

2435
13:33:49,116 --> 13:33:53,756
实际上是被推动的，但它会有点像从底部移动

2436
13:33:53,756 --> 13:33:58,400
屏幕到顶部，而前一个屏幕逐渐消失，所以

2437
13:33:58,400 --> 13:34:02,800
请把注意力放在屏幕上，你看到了吗？

2438
13:34:02,800 --> 13:34:06,480
ios 和 android 会以不同的方式工作，但

2439
13:34:06,480 --> 13:34:11,200
概念是一样的，所以现在主 ui 被推到屏幕上

2440
13:34:11,200 --> 13:34:16,320
android在屏幕上显示登录视图已经消失并被

2441
13:34:16,320 --> 13:34:22,240
从视图堆栈中删除，这很好，这就是我们所要做的

2442
13:34:22,240 --> 13:34:27,756
在本章中，所以我希望您对结果感到满意，并且我们

2443
13:34:27,756 --> 13:34:30,720
现在不必做太多我们需要做的也需要确保

2444
13:34:30,720 --> 13:34:35,200
就像我们在其他章节中所做的那样，让我们​​继续前进

2445
13:34:35,200 --> 13:34:41,520
让我们去提交并标记我们的更改，所以如果你看我们的标签

2446
13:34:41,520 --> 13:34:44,956
嗯，如果你说 git tag 我们现在有第一步

2447
13:34:44,956 --> 13:34:47,436
二三和这个

2448
13:34:47,436 --> 13:34:51,040
本章中的章节我们将提交我们的消息提交我们的更改

2449
13:34:51,040 --> 13:34:57,276
并用第四步的标签名称标记它，所以如果你看一下 git log 我们做了

2450
13:34:57,276 --> 13:35:01,040
上一章的第三步 现在我们要做第四步 所以让我们说

2451
13:35:01,040 --> 13:35:04,800
git add all 你可以看到它只是几个

2452
13:35:04,800 --> 13:35:08,720
我们现在更改的文件让我们嗯我不抱歉我要去

2453
13:35:08,720 --> 13:35:13,200
更改屏幕布局我还要说 git commit

2454
13:35:13,200 --> 13:35:16,080
嗯第四步

2455
13:35:16,080 --> 13:35:19,116
好的，嗯

2456
13:35:19,116 --> 13:35:22,800
现在让我们也标记它

2457
13:35:22,800 --> 13:35:30,720
让我们将我们的更改推送到呃 github，也让我们推送我们的标签

2458
13:35:30,720 --> 13:35:35,116
像这样所以如果你现在说 git tag 现在我们有

2459
13:35:35,116 --> 13:35:41,436
四个标签，如果我们做它的日志，你会看到我们有第二步第三步和

2460
13:35:41,436 --> 13:35:47,116
四和最初的提交，这是第一步，做得好，是

2461
13:35:47,116 --> 13:35:52,240
很棒，为这一章工作 相当短的一章，甜蜜的嗯，现在我们

2462
13:35:52,240 --> 13:35:55,116
需要为下一章做好准备，正如您在此处的标题中看到的那样

2463
13:35:55,116 --> 13:35:58,080
我们需要清理我们的路线，因为它们无处不在

2464
13:35:58,080 --> 13:36:02,320
这意味着你可以在这里看到我们已经定义了我们的路由登录寄存器

2465
13:36:02,320 --> 13:36:06,400
节点，但也在登录视图中，我们就像重新定义我们所说的那样

2466
13:36:06,400 --> 13:36:09,916
实际上并没有重新定义我们试图喜欢去笔记路线，但我们

2467
13:36:09,916 --> 13:36:14,240
再次输入整个路线名称，这通常是在编程中而不是

2468
13:36:14,240 --> 13:36:18,000
好主意，比如如果你的琴弦到处乱飞

2469
13:36:18,000 --> 13:36:22,240
就像一个在主 dart 中定义，另一个在登录视图中调用

2470
13:36:22,240 --> 13:36:26,240
例如，您可以在注册视图中使用类似的东西

2471
13:36:26,240 --> 13:36:30,880
看到这里通常这意味着你需要嗯

2472
13:36:30,880 --> 13:36:36,000
将它们带到一个中心位置并重新使用它们，这正是

2473
13:36:36,000 --> 13:36:38,956
我们将在下一章做什么所以

2474
13:36:38,956 --> 13:36:42,080
嗯，让我们就这样吧，我会看到你

2475
13:36:42,080 --> 13:36:46,560
下一章你好，欢迎来到第 20 章

2476
13:36:46,560 --> 13:36:50,000
本章中的颤振课程，这将是一个

2477
13:36:50,000 --> 13:36:52,956
非常短的一章，我认为这将是所有章节中最短的一章

2478
13:36:52,956 --> 13:36:57,520
到目前为止我们已经完成了我们现在要做一些清理工作

2479
13:36:57,520 --> 13:37:02,956
你可以看到，呃，我的意思是我会告诉你我们把代码放在什么状态

2480
13:37:02,956 --> 13:37:06,080
上一章这是我们所做的，所以我要

2481
13:37:06,080 --> 13:37:10,560
在此处调出项目 uh 文件

2482
13:37:10,560 --> 13:37:15,756
你会看到，嗯，我们离开项目的状态是，如果我们去我们的

2483
13:37:15,756 --> 13:37:19,916
主要飞镖，我们定义了一些路线，我要

2484
13:37:19,916 --> 13:37:23,596
这样做你会更好地看到它我们定义了一些路线

2485
13:37:23,596 --> 13:37:28,160
嗯和一个被称为登录名

2486
13:37:28,160 --> 13:37:32,000
注册视图实际上用于将用户发送到登录视图

2487
13:37:32,000 --> 13:37:36,240
如果用户已经有一个

2488
13:37:36,240 --> 13:37:39,360
如果用户已经注册并且我们实际上不需要

2489
13:37:39,360 --> 13:37:42,400
谈论它而不显示它所以让我们

2490
13:37:42,400 --> 13:37:46,400
去这里让我们在注册视图中去这里所以如果用户最终在

2491
13:37:46,400 --> 13:37:50,880
注册表，他们已经有一个用户名和

2492
13:37:50,880 --> 13:37:55,276
他们的电子邮件和密码设置，然后他们可以单击此按钮或点击此按钮

2493
13:37:55,276 --> 13:38:01,436
说已经在这里注册登录，这发生在我们的

2494
13:38:01,436 --> 13:38:06,956
在此处注册查看推送名称的导航器，然后转到登录路线

2495
13:38:06,956 --> 13:38:11,916
这是在主要艺术中定义的，并且在登录视图中发生了同样的事情

2496
13:38:11,916 --> 13:38:16,160
在这里，如果用户没有他们的

2497
13:38:16,160 --> 13:38:20,640
如果用户还没有注册我们的服务，那么他们实际上可以点击

2498
13:38:20,640 --> 13:38:23,840
还没有注册 在这里注册按钮 好的

2499
13:38:23,840 --> 13:38:28,480
这就是注册路线，我们拥有的第三条路线是笔记

2500
13:38:28,480 --> 13:38:34,320
允许我们将用户从登录屏幕发送到主 ui 的路由

2501
13:38:34,320 --> 13:38:37,200
我们刚才调用的应用程序

2502
13:38:37,200 --> 13:38:43,116
注释视图现在位于主要飞镖内，我将只是

2503
13:38:43,116 --> 13:38:48,480
看看我的代码在这里，只是为了确保那是

2504
13:38:48,480 --> 13:38:51,756
我的意图是的，所以我们还没有

2505
13:38:51,756 --> 13:38:57,116
重构的笔记视图，我们还没有把它放到自己的文件中好吗

2506
13:38:57,116 --> 13:39:01,596
所以现在让我们谈谈硬编码

2507
13:39:01,596 --> 13:39:04,240
如果您不是程序员，例如如果您没有软件开发

2508
13:39:04,240 --> 13:39:08,160
背景你可能不知道硬编码是什么，但是

2509
13:39:08,160 --> 13:39:15,360
我会给你那种我会给你例子也许在不同的

2510
13:39:15,360 --> 13:39:19,436
可能也与程序员相关的世界让我们说

2511
13:39:19,436 --> 13:39:24,720
你在 figma 工作，你正在做一个设计，所以你有一个列表

2512
13:39:24,720 --> 13:39:29,756
要在屏幕上显示的项目，您可以像您一样创建这些列表设计

2513
13:39:29,756 --> 13:39:33,596
有一个应该显示在视图中的小单元格然后你去

2514
13:39:33,596 --> 13:39:38,320
复制粘贴到 10 个不同的地方，然后

2515
13:39:38,320 --> 13:39:41,680
您与团队讨论您创建的设计，然后他们说哦

2516
13:39:41,680 --> 13:39:45,276
如果这个标签比你拥有的大一点，你会很棒

2517
13:39:45,276 --> 13:39:50,640
要做的就是去你复制粘贴的每个地方

2518
13:39:50,640 --> 13:39:54,720
单元格，如果

2519
13:39:54,720 --> 13:39:59,756
你是一个设计师会创建一个组件，然后创建实例

2520
13:39:59,756 --> 13:40:04,880
该设计组件在您的 figma 设计的各个页面中

2521
13:40:04,880 --> 13:40:07,756
所以如果是这样你需要更新一些东西那么你

2522
13:40:07,756 --> 13:40:11,756
只需要在一个地方更新它，所以

2523
13:40:11,756 --> 13:40:14,800
即使你不是来自设计背景并且你正在为

2524
13:40:14,800 --> 13:40:20,080
例如，作为一个项目，您可能是产品所有者或项目经理

2525
13:40:20,080 --> 13:40:24,320
使用诸如 um excel 表格之类的东西，您可能正在创建

2526
13:40:24,320 --> 13:40:29,756
嗯，现在一些图表，如果你从一个

2527
13:40:29,756 --> 13:40:33,200
您可能希望在其中重用该图的数据集

2528
13:40:33,200 --> 13:40:37,040
其他地方，所以如果有人说好的，我可以得到所有可用的图表吗

2529
13:40:37,040 --> 13:40:40,240
项目然后你不会一遍又一遍地创建相同的图表

2530
13:40:40,240 --> 13:40:43,276
有点想参考你的同一张纸

2531
13:40:43,276 --> 13:40:49,360
谷歌表格或您的 excel 表格，所以这个概念与您不想要的相同

2532
13:40:49,360 --> 13:40:52,880
重复你自己，这就是我们目前所犯的错误

2533
13:40:52,880 --> 13:40:57,596
我们的源代码，因为我们在一个地方定义了我们的路线但是

2534
13:40:57,596 --> 13:41:01,680
我们将使用这些路线的每一个词，我们再次写下他们的名字

2535
13:41:01,680 --> 13:41:06,240
这是大多数程序员不喜欢的一件事

2536
13:41:06,240 --> 13:41:11,040
当您变得像高级开发人员一样经验丰富时，您会尽量避免

2537
13:41:11,040 --> 13:41:17,276
这些事情是因为如果我们现在转到我们的主 dart 文件并将此登录名更改为

2538
13:41:17,276 --> 13:41:21,680
只需斜线登录，然后我们必须在项目中的任何地方搜索名称

2539
13:41:21,680 --> 13:41:27,360
路由像以前一样称为斜杠登录斜杠，并将其更改为这种新形式

2540
13:41:27,360 --> 13:41:31,040
这不是一个好主意

2541
13:41:31,040 --> 13:41:35,680
这是硬编码，这就是为什么开发人员不喜欢它，我建议

2542
13:41:35,680 --> 13:41:40,560
你也不喜欢它所以呃我们要做什么

2543
13:41:40,560 --> 13:41:44,560
很快的一章希望我们能尽快完成

2544
13:41:44,560 --> 13:41:50,080
呃很快就完成了我们将在我们的项目中创建一个新文件是

2545
13:41:50,080 --> 13:41:53,680
我们正在创建的第一个此类文件，我们将把我们的

2546
13:41:53,680 --> 13:41:58,080
常量没关系，所以你知道的常量是从我们谈到飞镖的地方

2547
13:41:58,080 --> 13:42:01,276
在编译期间不改变的值

2548
13:42:01,276 --> 13:42:05,520
而且它们在运行时也不会改变，所以这些是我们的路由名称

2549
13:42:05,520 --> 13:42:09,200
因为它们总是不变的，它们没有人进入那里并改变

2550
13:42:09,200 --> 13:42:12,000
他们还好，所以让我们继续做吧

2551
13:42:12,000 --> 13:42:17,276
标题说这里让我们在名为 constants 的文件夹下的 lib 下创建一个 fox

2552
13:42:17,276 --> 13:42:20,800
然后路由，正如我在您不必创建之前向您展示的那样

2553
13:42:20,800 --> 13:42:25,756
在这种情况下，中间目录是创建路由之前的常量

2554
13:42:25,756 --> 13:42:29,276
启动文件你需要做的就是右键单击你想要的lib

2555
13:42:29,276 --> 13:42:34,956
创建常量，然后是 lib 对不起常量文件夹，然后嗯

2556
13:42:34,956 --> 13:42:40,320
路由开始文件只需右键单击此处说新文件然后说常量嗯如果我

2557
13:42:40,320 --> 13:42:44,840
可以拼出来然后说

2558
13:42:44,840 --> 13:42:48,640
路由部分，这将创建常量

2559
13:42:48,640 --> 13:42:53,680
文件夹中间文件夹给你好吧

2560
13:42:53,680 --> 13:42:57,200
我们现在需要的是定义如标题所说的这里我们需要定义

2561
13:42:57,200 --> 13:43:01,840
三种路径 一种用于登录路径 一种用于注册，另一种用于

2562
13:43:01,840 --> 13:43:05,916
注释路由，所以我们只说 const login route

2563
13:43:05,916 --> 13:43:11,360
我们只是说这等于登录斜线我要复制粘贴这个，我是

2564
13:43:11,360 --> 13:43:14,720
只是要在第二个中说这是

2565
13:43:14,720 --> 13:43:19,520
呃，按照标题的建议注册路线，然后注释路线就可以了

2566
13:43:19,520 --> 13:43:23,116
在这里我要说注册，在这里你也应该说笔记

2567
13:43:23,116 --> 13:43:28,880
好的，现在我们已经定义了这三个路线

2568
13:43:28,880 --> 13:43:32,480
但是我们现在需要做的是我们已经定义了它们但这还不够我们需要

2569
13:43:32,480 --> 13:43:37,436
要做的是实际去使用它们，所以让我们回到我们的主 dart 文件并

2570
13:43:37,436 --> 13:43:43,680
在这里，我们需要使用正确的登录路径而不是使用登录，您可以

2571
13:43:43,680 --> 13:43:47,040
现在看看 Visual Studio 代码足够聪明，可以理解这是一个符号

2572
13:43:47,040 --> 13:43:52,160
我们已经在这里定义了一个文件，但是这个符号现在不是

2573
13:43:52,160 --> 13:43:57,840
在当前上下文中可用，因为我们尚未导入该常量

2574
13:43:57,840 --> 13:44:00,880
路线文件

2575
13:44:00,880 --> 13:44:02,880
所以如果我只是

2576
13:44:02,880 --> 13:44:06,800
允许 Visual Studio 代码自动导入，您可以突然看到

2577
13:44:06,800 --> 13:44:11,200
符号在我当前的上下文中成为一个有效的符号，如果我上去

2578
13:44:11,200 --> 13:44:15,596
在这里，我应该能够看到 Visual Studio 代码已经导入了这个

2579
13:44:15,596 --> 13:44:19,680
为我提交文件，但如果您正在使用 veeam 或正在工作

2580
13:44:19,680 --> 13:44:24,400
使用 android studio，你没有机会

2581
13:44:24,400 --> 13:44:28,000
呃要导入你总是可以去这个符号然后说

2582
13:44:28,000 --> 13:44:31,756
uh 命令点或控制点取决于您的操作系统，然后说

2583
13:44:31,756 --> 13:44:35,916
导入该库，即使您的

2584
13:44:35,916 --> 13:44:39,840
编辑器不够聪明，无法以这种方式导入，您可以导入它

2585
13:44:39,840 --> 13:44:44,956
你自己，所以你可以说嗯导入

2586
13:44:44,956 --> 13:44:48,720
包然后是应用程序的名称，这是我的笔记，然后你会说

2587
13:44:48,720 --> 13:44:54,640
常量斜线路线点飞镖所以你有解决的三种方法

2588
13:44:54,640 --> 13:44:59,360
同样的问题我通常会自动导入，所以我不必输入所有这些 um 和

2589
13:44:59,360 --> 13:45:03,756
我不会在下一章中解释更多，所以你有所有的

2590
13:45:03,756 --> 13:45:08,240
为了能够解决这样的问题所必需的工具，所以在这里

2591
13:45:08,240 --> 13:45:10,956
我将使用注册路线，因为

2592
13:45:10,956 --> 13:45:15,520
uh route start 现在在这里导入

2593
13:45:15,520 --> 13:45:19,040
那么我不会有问题，我不必自动导入任何东西

2594
13:45:19,040 --> 13:45:23,756
好的，对于笔记，我要说笔记路线

2595
13:45:23,756 --> 13:45:28,956
哦，太好了，现在我们已经在我们的主函数中定义了它们但是我们仍然

2596
13:45:28,956 --> 13:45:33,436
有一些我们正在做路由的地方，我们正在对它们进行硬编码

2597
13:45:33,436 --> 13:45:39,756
路线，所以让我们首先修复我们的注释视图，它是应用程序的主要 ui

2598
13:45:39,756 --> 13:45:46,640
所以如果我在这里输入像素标签 gmail.com

2599
13:45:46,640 --> 13:45:53,916
像那样然后我说嗯登录

2600
13:45:53,916 --> 13:46:00,320
我们得到了一些哦 foobar baz

2601
13:46:00,320 --> 13:46:04,880
在这里，当我们注销时，我们将用户发送到登录路径

2602
13:46:04,880 --> 13:46:10,160
所以让我们也改变一下，说登录路线没问题，所以这是一个地方

2603
13:46:10,160 --> 13:46:14,956
呃，我会说在这里注销，噗注销

2604
13:46:14,956 --> 13:46:19,116
所以现在已经修复了我们必须修复的另一个地方是在登录视图中

2605
13:46:19,116 --> 13:46:23,040
可以在这里看到我们按下尚未注册的地方

2606
13:46:23,040 --> 13:46:26,240
在此处注册按钮，让我们进入登录视图

2607
13:46:26,240 --> 13:46:30,480
在我们的登录视图中，我将摆脱资源管理器

2608
13:46:30,480 --> 13:46:33,200
那里在

2609
13:46:33,200 --> 13:46:38,320
在这个尚未注册的按钮中，让我们看看它在哪里

2610
13:46:38,320 --> 13:46:41,840
在这里你看到我们将用户发送到

2611
13:46:41,840 --> 13:46:46,000
注册路由，所以我将把它们发送到注册路由器，你可以

2612
13:46:46,000 --> 13:46:49,680
看到你应该再次编写足够聪明的代码来进行自动导入，所以我要采取

2613
13:46:49,680 --> 13:46:52,400
该选项，我们还有另一条路线

2614
13:46:52,400 --> 13:46:57,436
它会将您发送到您已成功登录的笔记，所以让我们

2615
13:46:57,436 --> 13:47:02,080
只是说notes route没问题，这就是我们的登录视图

2616
13:47:02,080 --> 13:47:06,560
现在我们必须修复的另一个地方是注册所以去你的项目

2617
13:47:06,560 --> 13:47:10,240
explorer 然后去注册视图看看我们在做什么

2618
13:47:10,240 --> 13:47:15,200
这个登录按钮在这里

2619
13:47:15,200 --> 13:47:21,680
那么让我们说而不是我们只是要说

2620
13:47:21,680 --> 13:47:26,720
登录路线没问题，所以如果您现在搜索推送名称和

2621
13:47:26,720 --> 13:47:32,400
删除直到然后显示结果，如果你点击它们，你不应该

2622
13:47:32,400 --> 13:47:35,756
有任何硬编码的路线，所以

2623
13:47:35,756 --> 13:47:41,680
节点路由注册路由和登录路由所以

2624
13:47:41,680 --> 13:47:47,040
现在我们解决了这个问题并记住，因为我们现在已经改变了主要

2625
13:47:47,040 --> 13:47:51,436
功能在这里，我们在这里有一些路线你必须做热重启吗

2626
13:47:51,436 --> 13:47:55,596
为了查看您的更改，但如果一切正常

2627
13:47:55,596 --> 13:48:00,640
计划并且我们不喜欢在我们的老鼠名字中做出任何错误的选择

2628
13:48:00,640 --> 13:48:04,560
我们给了他们相同的名字或任何我们没有的名字

2629
13:48:04,560 --> 13:48:07,840
如果一切都像以前一样工作，那么你不应该看到任何

2630
13:48:07,840 --> 13:48:13,840
此处更改，因此如果您像以前一样输入您的信息

2631
13:48:13,840 --> 13:48:17,840
我说 foobar 那时我应该能够登录

2632
13:48:17,840 --> 13:48:21,680
应该可以注销，我应该可以去注册

2633
13:48:21,680 --> 13:48:26,956
视图或登录视图，因此它的工作方式与以前完全相同

2634
13:48:26,956 --> 13:48:31,040
好的，好的东西很快

2635
13:48:31,040 --> 13:48:36,320
章节和其他章节一样，从现在开始我们做了一些改变，我们已经

2636
13:48:36,320 --> 13:48:40,320
实际上使代码更好，我们已经测试以确保一切正常

2637
13:48:40,320 --> 13:48:46,240
好的，是时候提交我们的更改了，你可以看到上一章我们

2638
13:48:46,240 --> 13:48:51,756
将我们的更改作为第 4 步提交，在本章中，我们将提交

2639
13:48:51,756 --> 13:48:55,360
我们的变化是第五步，我们还将

2640
13:48:55,360 --> 13:48:58,800
嗯，我们也将像我们一样标记它

2641
13:48:58,800 --> 13:49:01,436
之前让我改变

2642
13:49:01,436 --> 13:49:06,240
布局也是如此，所以你会更好地看到终端我要

2643
13:49:06,240 --> 13:49:10,720
这样做会让终端更大，甚至让你看得更清楚

2644
13:49:10,720 --> 13:49:16,000
所以让我们继续看看状态是什么我可以看到有很多

2645
13:49:16,000 --> 13:49:19,840
更改如您在此处看到的，它表示您已进行更改，您修改了这些

2646
13:49:19,840 --> 13:49:24,400
现有文件，现在突然之间还有一个新文件夹，所以我

2647
13:49:24,400 --> 13:49:29,360
当有一个新文件夹时，我喜欢在这些情况下做 位添加所有

2648
13:49:29,360 --> 13:49:32,720
因为这会添加所有文件和文件夹

2649
13:49:32,720 --> 13:49:37,200
所以你可以接受它，如果你现在说 git status 你可以看到

2650
13:49:37,200 --> 13:49:42,000
包含其内容的新文件夹现在已添加到暂存环境中，或者

2651
13:49:42,000 --> 13:49:45,200
暂存区

2652
13:49:45,200 --> 13:49:49,520
好的，现在我们已经上演了，所以现在让我们承诺，我们说我们说过我们是

2653
13:49:49,520 --> 13:49:56,400
将提交并标记为第五步所以让我们说第五步嗯然后得到

2654
13:49:56,400 --> 13:50:00,400
标记 um 第五步以及推动你的

2655
13:50:00,400 --> 13:50:04,956
更改，然后也推送标签

2656
13:50:04,956 --> 13:50:08,240
好吧，如果我说你现在标记，我们有五个标记

2657
13:50:08,240 --> 13:50:13,200
如果我说 gitland 我们有步骤五四三二然后是最初的

2658
13:50:13,200 --> 13:50:16,800
提交这几乎是第一步，所以

2659
13:50:16,800 --> 13:50:20,880
很棒的东西，很好地一起完成了这一章

2660
13:50:20,880 --> 13:50:25,680
和我一起，我们现在需要做的是为下一章做好准备

2661
13:50:25,680 --> 13:50:29,916
只是给你一个小小的预览 我们将要做的就是有一个

2662
13:50:29,916 --> 13:50:34,720
看看我们在登录视图中的错误处理，所以如果我让

2663
13:50:34,720 --> 13:50:39,116
这个有点小所以更容易消化你现在可以看到我们的

2664
13:50:39,116 --> 13:50:43,040
错误处理我在它周围加上引号的原因是它

2665
13:50:43,040 --> 13:50:46,880
老实说，没有太多的错误处理，它正在做的只是

2666
13:50:46,880 --> 13:50:52,400
表示如果发生此类错误，则将此消息记录到控制台

2667
13:50:52,400 --> 13:50:56,956
普通用户坐在他们的手机上，他们无权访问他们的日志

2668
13:50:56,956 --> 13:51:01,916
不会看到任何日志，所以日志对他们来说非常非常无用，什么

2669
13:51:01,916 --> 13:51:05,756
我们在下一章要做的实际上是显示有意义的信息

2670
13:51:05,756 --> 13:51:10,080
使用一些警报视图的用户和

2671
13:51:10,080 --> 13:51:14,080
对话，所以如果你想吃点心

2672
13:51:14,080 --> 13:51:19,916
我会在下一章见到你你好，欢迎来到第 21 章

2673
13:51:19,916 --> 13:51:23,276
你还记得上一章的颤动课程

2674
13:51:23,276 --> 13:51:27,916
我们谈到了清理我们主要功能中的路线，我们

2675
13:51:27,916 --> 13:51:33,200
将它们放在自己的 dart 文件中，以便它们与 um 分开，所以我们

2676
13:51:33,200 --> 13:51:36,240
基本上没有硬编码硬编码它们在不同的地方

2677
13:51:36,240 --> 13:51:39,360
应用程序我们谈到了什么是硬编码

2678
13:51:39,360 --> 13:51:43,276
如果您不是来自软件开发背景以及为什么会这样

2679
13:51:43,276 --> 13:51:47,276
通常不要硬编码你的字符串并将它们散布在

2680
13:51:47,276 --> 13:51:52,956
本章我们将重点关注的整个代码库

2681
13:51:52,956 --> 13:51:56,720
在我们的登录视图中清理错误处理以

2682
13:51:56,720 --> 13:52:00,956
如果您现在还记得我们的登录视图，请先开始

2683
13:52:00,956 --> 13:52:04,080
实际上我不必说你是否记得，因为我可以调出代码

2684
13:52:04,080 --> 13:52:10,160
所以我们可以一起看看这里是我们的

2685
13:52:10,160 --> 13:52:14,000
代码我将在这里提出 scrcpy 作为

2686
13:52:14,000 --> 13:52:18,800
好吧，所以你可以看到安卓手机工作正常

2687
13:52:18,800 --> 13:52:23,040
所以我也要改变一点 嗯

2688
13:52:23,040 --> 13:52:29,520
屏幕布局，所以如果你记得，呃，我们可能在这里有我们的登录视图

2689
13:52:29,520 --> 13:52:33,756
必须在这里移动一些东西，这样布局会更好一些

2690
13:52:33,756 --> 13:52:37,916
让我们去登录视图，然后我们有我们的

2691
13:52:37,916 --> 13:52:41,436
嗯，如果有任何事情发生，这里的锁定语句

2692
13:52:41,436 --> 13:52:45,840
错了，所以如果我们可以使用电子邮件和

2693
13:52:45,840 --> 13:52:50,320
密码然后我们将笔记路由推到屏幕上

2694
13:52:50,320 --> 13:52:54,640
但是，如果我们的 firebase 身份验证出现问题并且我们得到了

2695
13:52:54,640 --> 13:52:59,276
firebase auth 异常，我们现在只是在记录

2696
13:52:59,276 --> 13:53:04,400
调试控制台的信息，这还不够好，因为应该

2697
13:53:04,400 --> 13:53:08,800
任何错误都会发生，例如如果找不到当前用户或

2698
13:53:08,800 --> 13:53:14,080
密码不正确，你的最终用户不会收到这些

2699
13:53:14,080 --> 13:53:18,320
日志，因为他们没有在 Visual Studio 代码旁边运行此应用程序或

2700
13:53:18,320 --> 13:53:22,320
除了你的实际用户之外的任何类似的东西

2701
13:53:22,320 --> 13:53:27,840
在普通手机（如 android 或 ios）上运行应用程序

2702
13:53:27,840 --> 13:53:31,116
或 ipad 甚至平板电脑

2703
13:53:31,116 --> 13:53:34,560
所以这就是我们在本章中要做的，我们要清理

2704
13:53:34,560 --> 13:53:40,480
我们的错误处理逻辑，所以在你开始本章之前

2705
13:53:40,480 --> 13:53:45,276
只需确保您在登录视图中，因为我们就在此时此地

2706
13:53:45,276 --> 13:53:50,240
确保您的应用程序或您的用户已注销，因此如果您在

2707
13:53:50,240 --> 13:53:55,040
应用程序的主界面，或者您在我们所说的注释视图中

2708
13:53:55,040 --> 13:53:59,520
它确保您进入菜单，然后您也退出应用程序

2709
13:53:59,520 --> 13:54:03,436
确保您的电话或模拟器模拟器也有互联网

2710
13:54:03,436 --> 13:54:07,320
连接性，因此您实际上可以访问 Firebase 后端

2711
13:54:07,320 --> 13:54:10,840
[音乐] 好的

2712
13:54:10,840 --> 13:54:17,840
所以正如你在我们的登录视图和注册视图中看到的，我们有逻辑尝试

2713
13:54:17,840 --> 13:54:21,116
处理可能出现的不同类型的错误

2714
13:54:21,116 --> 13:54:25,276
例如在注册视图中，我们的密码处理很弱，我们有

2715
13:54:25,276 --> 13:54:30,720
电子邮件已在使用或无效的电子邮件错误处理

2716
13:54:30,720 --> 13:54:37,116
所以这里我们有三个错误处理，在登录视图中我们有两个错误

2717
13:54:37,116 --> 13:54:42,240
处理，除此之外我们还需要处理

2718
13:54:42,240 --> 13:54:47,916
这个 try 块中可能出现的任何其他异常的情况，我们

2719
13:54:47,916 --> 13:54:51,680
目前没有那个你可以看到我们只是在赶上火力基地

2720
13:54:51,680 --> 13:54:57,756
异常，所以我们必须在尝试结束时有一个通用的 catch 块

2721
13:54:57,756 --> 13:55:02,720
登录视图中的语句和另一个 catch 块

2722
13:55:02,720 --> 13:55:09,040
在我们的寄存器视图三的 try 语句末尾的通用 catch 块

2723
13:55:09,040 --> 13:55:12,956
三个 uh auth 异常加上和一个通用

2724
13:55:12,956 --> 13:55:16,800
此处的异常处理在寄存器视图中总共有四个

2725
13:55:16,800 --> 13:55:23,276
加上两个这里六个和一个通用的一个这里七个所以我们要处理七个

2726
13:55:23,276 --> 13:55:28,640
登录和注册过程中可能发生的错误类型以及任何一种错误

2727
13:55:28,640 --> 13:55:32,720
其中我们将向用户显示警报，所以我们将

2728
13:55:32,720 --> 13:55:37,360
提醒用户发生了一些事情，需要小心

2729
13:55:37,360 --> 13:55:42,400
好吧，那么让我们进入嗯

2730
13:55:42,400 --> 13:55:46,800
看看你的主要飞镖文件的结尾，你

2731
13:55:46,800 --> 13:55:51,436
可以看到我们已经有一个未来的碗 show log out dial again 这是一个日志

2732
13:55:51,436 --> 13:55:56,080
这是一个对话框，你可以看到它是一个警告对话框

2733
13:55:56,080 --> 13:56:00,320
目前只返回一个布尔值，我们需要的是一个

2734
13:56:00,320 --> 13:56:05,756
未来无效，因为标题在这里显示了一个显示错误对话框和

2735
13:56:05,756 --> 13:56:10,480
它有一个上下文和一个要显示给用户的字符串，所以我们将使用

2736
13:56:10,480 --> 13:56:15,116
它通常来自应用程序中的任何地方

2737
13:56:15,116 --> 13:56:19,520
所以现在我需要你去你的登录视图

2738
13:56:19,520 --> 13:56:23,040
在登录视图的底部，我们将创建函数

2739
13:56:23,040 --> 13:56:26,880
为此签名，所以我们只说未来无效

2740
13:56:26,880 --> 13:56:30,240
正如我在这里所说的那样显示错误对话框，我们将得到一个构建

2741
13:56:30,240 --> 13:56:34,800
上下文称为上下文，然后我们还要说字符串文本好

2742
13:56:34,800 --> 13:56:38,880
就像这样，记住你总是可以用逗号

2743
13:56:38,880 --> 13:56:44,160
在这里完成 um 以确保 dart 格式化程序

2744
13:56:44,160 --> 13:56:49,116
实际上正确地格式化你的函数

2745
13:56:49,116 --> 13:56:53,276
所以记住显示错误对话呃它需要什么

2746
13:56:53,276 --> 13:56:58,080
它所要做的就是创建一个对话然后显示它这样做

2747
13:56:58,080 --> 13:57:02,080
你我的意思是你可能认为你总是从创建对话开始

2748
13:57:02,080 --> 13:57:05,680
但实际上你需要首先考虑返回的结果

2749
13:57:05,680 --> 13:57:10,240
在无效的情况下进行对话，因此您可以使用 um

2750
13:57:10,240 --> 13:57:15,756
显示对话所以说返回显示对话

2751
13:57:15,756 --> 13:57:21,360
并且上下文可供您用作函数的参数，并且

2752
13:57:21,360 --> 13:57:25,520
让我把这个做得大一点还是尺寸合适我认为这个尺寸合适

2753
13:57:25,520 --> 13:57:28,480
实际上已经足够了

2754
13:57:28,480 --> 13:57:34,320
既然我们有了，那我们就去说我们想要一个建设者

2755
13:57:34,320 --> 13:57:37,596
和您的构建器，我将从 Visual Studio 代码中获得帮助以完成此操作

2756
13:57:37,596 --> 13:57:43,360
你看它把它带入构建上下文的 um 作为参数，它

2757
13:57:43,360 --> 13:57:47,436
期待你回来让我们获取文档

2758
13:57:47,436 --> 13:57:51,596
它并期望您返回一个小部件和我们将不得不返回的小部件

2759
13:57:51,596 --> 13:57:56,880
在我们的显示对话框中显示是一个警告对话框，所以让我们去创建

2760
13:57:56,880 --> 13:58:01,200
那个警报对话框好吧

2761
13:58:01,200 --> 13:58:04,956
嗯，因为我们的警报对话框的标题

2762
13:58:04,956 --> 13:58:09,116
正如您从这里的函数签名中看到的那样，显示

2763
13:58:09,116 --> 13:58:14,240
空中对话这是这个对话将被明确使用并且

2764
13:58:14,240 --> 13:58:19,360
专门用于向用户显示错误，所以有些东西

2765
13:58:19,360 --> 13:58:23,200
发生了，我们需要处理那个错误，所以

2766
13:58:23,200 --> 13:58:27,840
在这种情况下，我们将为我们的

2767
13:58:27,840 --> 13:58:31,756
用户了解发生了不好的事情并且需要的警报对话

2768
13:58:31,756 --> 13:58:35,520
他们的注意力，所以对于我们要说的标题

2769
13:58:35,520 --> 13:58:40,320
如果您只是移动鼠标，则一个常量文本会记住标题属性

2770
13:58:40,320 --> 13:58:44,160
你可以看到它是一个小部件它不是一个字符串你实际上可以配置

2771
13:58:44,160 --> 13:58:47,276
标题是任何你想要的所以这就是美丽

2772
13:58:47,276 --> 13:58:51,916
颤动几乎所有东西都是一个小部件，所以你会期望哦，标题应该是

2773
13:58:51,916 --> 13:58:56,320
一个字符串，但没有，您可以将标题配置为您想要的，所以它

2774
13:58:56,320 --> 13:59:01,680
如果您愿意，可以只是一个图标，所以让我们在文本中说一个

2775
13:59:01,680 --> 13:59:06,320
错误发生

2776
13:59:06,320 --> 13:59:10,080
然后我们要去找内容

2777
13:59:10,080 --> 13:59:13,756
这个对话记住内容进来

2778
13:59:13,756 --> 13:59:19,520
这里作为文本作为字符串，所以让我们将其包装在文本中

2779
13:59:19,520 --> 13:59:24,400
小部件，我们只是说我们在那里显示文本好吗

2780
13:59:24,400 --> 13:59:29,520
对于我们要去这里的行动

2781
13:59:29,520 --> 13:59:34,640
让我们来做动作然后说我们要创建一个文本按钮记住

2782
13:59:34,640 --> 13:59:39,840
文本按钮有两个参数一个是它的 um

2783
13:59:39,840 --> 13:59:43,756
文件另一个未按下文本按钮始终必须同时具有这两个

2784
13:59:43,756 --> 13:59:47,360
参数设置好了所以

2785
13:59:47,360 --> 13:59:52,880
我们想对 unpressed 做什么，我们将创建 um

2786
13:59:52,880 --> 13:59:58,400
它和它的孩子的函数签名我们只是说文本

2787
13:59:58,400 --> 14:00:03,360
让我们说好吧好吧

2788
14:00:03,360 --> 14:00:06,800
嗯，所以现在我们已经设置好了

2789
14:00:06,800 --> 14:00:12,320
呃，让我们在那里做一些格式化，让我们想想我们需要什么

2790
14:00:12,320 --> 14:00:16,320
要在按下时执行，请记住此对话框将显示到

2791
14:00:16,320 --> 14:00:19,756
user 用户将要获取我们将要获取的信息

2792
14:00:19,756 --> 14:00:24,880
显示一个警告，说哦，你的密码太弱或者呃，嘿

2793
14:00:24,880 --> 14:00:28,800
此用户已存在或此电子邮件已存在或密码错误，因此

2794
14:00:28,800 --> 14:00:33,200
它只是文本，然后是确定按钮，所以按下确定按钮唯一的事情是

2795
14:00:33,200 --> 14:00:36,240
要做的就是关闭警报对话，所以您只需要

2796
14:00:36,240 --> 14:00:42,400
在这里做只是说你的上下文导航器然后你就会弹出

2797
14:00:42,400 --> 14:00:47,040
这样可以确保您的对话现在被驳回

2798
14:00:47,040 --> 14:00:50,800
我之前在linkedin和twitter上做过一些关于这个的视频，我已经直播了

2799
14:00:50,800 --> 14:00:54,640
关于这个的视频，我们讨论了一种更好的显示错误的方法

2800
14:00:54,640 --> 14:00:58,160
对话，因为这种显示错误方言的方式是

2801
14:00:58,160 --> 14:01:02,320
有点有限，那么

2802
14:01:02,320 --> 14:01:08,400
按下按钮会关闭对话框，但有时您可能需要

2803
14:01:08,400 --> 14:01:11,756
即使您按下新的，屏幕上也会显示持续的对话

2804
14:01:11,756 --> 14:01:16,400
屏幕在其他屏幕之上，所以有点奇怪

2805
14:01:16,400 --> 14:01:20,800
对话正在做导航，因为它告诉导航器弹出

2806
14:01:20,800 --> 14:01:24,720
一种更好的方法是使用叠加层，但叠加层有点

2807
14:01:24,720 --> 14:01:28,400
这部分课程很复杂，所以我们不打算讨论

2808
14:01:28,400 --> 14:01:33,276
现在的叠加层让我们说现在我们有一个可以显示的通用对话

2809
14:01:33,276 --> 14:01:40,160
出现错误标题的文本正常

2810
14:01:40,160 --> 14:01:46,320
好的，现在已经到位，现在让我们转到下一个项目

2811
14:01:46,320 --> 14:01:52,320
需要在这里处理，即处理未找到的用户

2812
14:01:52,320 --> 14:01:56,000
所以如果我们去我们的嗯

2813
14:01:56,000 --> 14:01:59,276
抱歉，我只需要看看我的笔记以确保我在告诉你

2814
14:01:59,276 --> 14:02:03,436
我应该告诉你的一切

2815
14:02:03,436 --> 14:02:08,560
好的，如果使用了错误，请在您的登录视图中显示或

2816
14:02:08,560 --> 14:02:15,116
未找到我们将使用我们的新功能向用户显示警报

2817
14:02:15,116 --> 14:02:21,436
好的，如果找不到 e 代码用户而不是 devtools 日志，我们将

2818
14:02:21,436 --> 14:02:25,840
说显示错误对话框上下文已经

2819
14:02:25,840 --> 14:02:29,680
可供我们使用，因为您看到它在内部传递

2820
14:02:29,680 --> 14:02:33,276
您的构建功能已经如此，因此您不必从其他任何地方抓取它

2821
14:02:33,276 --> 14:02:40,560
就在那里可用，对于文本，我们只会说找不到用户好吗

2822
14:02:40,560 --> 14:02:45,916
并关闭你现在可以看到的字符串，如果我格式化这个 um 代码这两个

2823
14:02:45,916 --> 14:02:49,360
参数显示在我前面提到的同一行

2824
14:02:49,360 --> 14:02:53,360
本章所有你必须做的飞镖格式化程序能够格式化这段代码

2825
14:02:53,360 --> 14:02:56,560
正确的是在最后一个参数的末尾加上一个逗号，然后按

2826
14:02:56,560 --> 14:03:00,880
command s，它会再次为你格式化，所以每个参数都进入它的

2827
14:03:00,880 --> 14:03:06,400
自己单独的线路好吧，嗯，以防万一，现在我们已经

2828
14:03:06,400 --> 14:03:10,720
处理的用户没有找到好的，所以我们可以从字面上测试让我做一个热的

2829
14:03:10,720 --> 14:03:15,040
重启只是为了确保每段代码都被注入到二进制文件中

2830
14:03:15,040 --> 14:03:19,276
在应用程序中运行，让我们去放置一封电子邮件

2831
14:03:19,276 --> 14:03:24,160
存在，这样我们就找不到用户，让我们输入一些密码，然后

2832
14:03:24,160 --> 14:03:28,880
然后我要按下登录按钮，你现在可以看到我们得到了我们的错误

2833
14:03:28,880 --> 14:03:33,520
屏幕上显示发生错误的用户未找到并且您

2834
14:03:33,520 --> 14:03:37,276
可以按确定按钮摆脱

2835
14:03:37,276 --> 14:03:41,360
嗯对话和摆脱对话正在发生在这里你看

2836
14:03:41,360 --> 14:03:45,680
按下那个按钮说上下文弹出导航器所以

2837
14:03:45,680 --> 14:03:51,276
这就是那里正在发生的事情 好的很棒的东西 我们需要做的

2838
14:03:51,276 --> 14:03:55,200
现在也要处理错误的密码，这将是一件轻而易举的事

2839
14:03:55,200 --> 14:04:00,320
因为我们已经处理了用户未找到所以你可以做的是复制和

2840
14:04:00,320 --> 14:04:04,480
将放置在此处的代码粘贴到用户未找到语句中并带上

2841
14:04:04,480 --> 14:04:09,360
它在这里并用那个替换这个devtools log wrong密码，而不是

2842
14:04:09,360 --> 14:04:14,560
说用户没有找到我们要说的就是说错误的凭据

2843
14:04:14,560 --> 14:04:17,116
好的

2844
14:04:17,116 --> 14:04:21,916
所以现在让我去尝试登录你也可以在

2845
14:04:21,916 --> 14:04:25,756
家中或您正在观看本课程的任何地方都可以输入电子邮件

2846
14:04:25,756 --> 14:04:28,956
已经在您的应用程序中注册的用户的地址，例如

2847
14:04:28,956 --> 14:04:32,720
如果您正在测试，您可以输入该人或您的人的电子邮件地址

2848
14:04:32,720 --> 14:04:35,680
自己的电子邮件地址，如果这是您正在测试的，但输入错误

2849
14:04:35,680 --> 14:04:40,000
凭据，所以我们去了，然后按登录，现在您可以看到

2850
14:04:40,000 --> 14:04:44,956
该消息被打印到屏幕上 错误的凭据 好的

2851
14:04:44,956 --> 14:04:50,956
好的，现在完美，我们还需要做什么

2852
14:04:50,956 --> 14:04:53,756
嗯[音乐]

2853
14:04:53,756 --> 14:04:58,400
是处理其他 firebase 身份验证异常

2854
14:04:58,400 --> 14:05:02,320
你可以在这里看到，在这种情况下，我们说是否有 Firebase 身份验证

2855
14:05:02,320 --> 14:05:07,276
异常以及是否使用或未找到代码或代码是否密码错误

2856
14:05:07,276 --> 14:05:12,400
但是也可能有一个您没有考虑到的例外情况，并且

2857
14:05:12,400 --> 14:05:17,680
尽管这些是您可以获得的最知名的错误代码，但总有一个

2858
14:05:17,680 --> 14:05:22,400
将来可能会出现另一个错误代码，现在可能不会

2859
14:05:22,400 --> 14:05:25,276
您将从 Firebase 收到的您没有考虑到的

2860
14:05:25,276 --> 14:05:27,840
如果代码然后进入这里并说哦

2861
14:05:27,840 --> 14:05:31,916
该代码不是用户未找到不是密码错误，它只会

2862
14:05:31,916 --> 14:05:36,880
失败意味着这整个代码将整个catch块将

2863
14:05:36,880 --> 14:05:42,480
无法捕获实际异常，您的代码将崩溃

2864
14:05:42,480 --> 14:05:45,916
所以它是非常的，否则你实际上会得到一个错误屏幕

2865
14:05:45,916 --> 14:05:48,956
所以你很重要

2866
14:05:48,956 --> 14:05:54,000
尽早考虑您的异常处理，这样您就不会向其发送代码

2867
14:05:54,000 --> 14:05:57,116
没有适当的错误处理的生产可以

2868
14:05:57,116 --> 14:06:01,040
所以嗯，这就是我们要做的

2869
14:06:01,040 --> 14:06:05,520
所以我们需要做两件事，我们必须处理可能发生的其他异常

2870
14:06:05,520 --> 14:06:11,520
以及其他 Firebase 异常，所以让我们做这些事情

2871
14:06:11,520 --> 14:06:15,596
所以实际上我们需要先这样做

2872
14:06:15,596 --> 14:06:21,040
让我们首先处理其他所有 Firebase 身份验证异常，因此放置一个 else

2873
14:06:21,040 --> 14:06:25,840
在这里声明，然后在这种情况下只显示一个对话框

2874
14:06:25,840 --> 14:06:30,400
就像我在这里做的那样，对于错误我们只会说错误然后

2875
14:06:30,400 --> 14:06:33,360
在这里e点代码

2876
14:06:33,360 --> 14:06:37,040
现在你可能不熟悉以前的这种语法，因为也许我

2877
14:06:37,040 --> 14:06:40,400
之前没有解释过，但这就像字符串格式和监护人

2878
14:06:40,400 --> 14:06:44,480
非常优雅它也可以使用我的意思是可以使用相同的东西

2879
14:06:44,480 --> 14:06:47,916
在我使用 swift 的几乎所有语言中，它都可以在 python 中使用

2880
14:06:47,916 --> 14:06:50,560
你正在使用 django 它在 ros 中可用 它在

2881
14:06:50,560 --> 14:06:55,596
javascript javascript 所以你基本上是在转义一个字符串和

2882
14:06:55,596 --> 14:07:00,160
可以在里面注入一些实际变量

2883
14:07:00,160 --> 14:07:05,116
所以在 python 中你会做一个 f 这意味着你正在格式化和

2884
14:07:05,116 --> 14:07:09,200
你会打招呼，我想你会说

2885
14:07:09,200 --> 14:07:12,800
美元价值

2886
14:07:12,800 --> 14:07:16,880
然后你会用百分号把你的价值放在最后

2887
14:07:16,880 --> 14:07:20,240
类似的东西，在javascript中你会做

2888
14:07:20,240 --> 14:07:24,956
像这样的反引号，你很快就会做这样的事情

2889
14:07:24,956 --> 14:07:30,800
像这样的代码在字符串中，所以这基本上是黑暗注入的一种方式

2890
14:07:30,800 --> 14:07:34,320
字符串中的实际代码

2891
14:07:34,320 --> 14:07:38,240
你可以在 firebase auth 异常的情况下看到

2892
14:07:38,240 --> 14:07:43,116
然后 e 成为 firebase auth 异常，并且每个

2893
14:07:43,116 --> 14:07:47,360
此类型的异常具有字符串类型的代码

2894
14:07:47,360 --> 14:07:52,400
这就是我们基本上将那个字符串注入我们自己的字符串中，所以每个

2895
14:07:52,400 --> 14:07:57,040
然后代码将以 error 的值作为前缀，然后是 double double

2896
14:07:57,040 --> 14:08:01,520
列在这里，然后是空格和代码字符串本身

2897
14:08:01,520 --> 14:08:05,520
现在我们已经完成了，我们还需要处理异常的情况

2898
14:08:05,520 --> 14:08:09,276
不是 Firebase 身份验证异常，这是我们需要讨论的下一点

2899
14:08:09,276 --> 14:08:15,360
大约在这结束时

2900
14:08:15,360 --> 14:08:18,880
在firebase auth异常块上，如果你有点不确定事情在哪里

2901
14:08:18,880 --> 14:08:22,000
开始，然后你可以看到，当你去这个

2902
14:08:22,000 --> 14:08:25,756
这个大括号的结尾在这里你可以看到 Visual Studio 代码有

2903
14:08:25,756 --> 14:08:29,360
在那里突出显示这个大括号，说这是开始

2904
14:08:29,360 --> 14:08:32,720
的代码，即使这对您来说还不够，您也可以随时访问

2905
14:08:32,720 --> 14:08:37,520
左侧的视觉工作室代码和排水沟等

2906
14:08:37,520 --> 14:08:42,320
折叠这些代码让你可以看到哦

2907
14:08:42,320 --> 14:08:46,480
在这里你可以很容易地看到他们你也可以我想

2908
14:08:46,480 --> 14:08:50,880
如果不能，我们能不能把整个事情都倒塌？我们不能把整个事情倒塌

2909
14:08:50,880 --> 14:08:54,956
但无论如何，最后我们现在需要做的是

2910
14:08:54,956 --> 14:09:01,276
只是说 catch e 这是一个通用的 catch 块含义

2911
14:09:01,276 --> 14:09:04,800
如果尝试中发生的异常

2912
14:09:04,800 --> 14:09:09,840
声明不是firebase auth异常然后进入这个catch块

2913
14:09:09,840 --> 14:09:15,040
现在在这个缓存块中，你可以看到是一个对象，所以它不像一个

2914
14:09:15,040 --> 14:09:19,116
不再是正常的异常，它只是任何对象，因为如果您还记得我们

2915
14:09:19,116 --> 14:09:24,240
谈到飞镖中的异常，你可以在飞镖中抛出几乎任何东西

2916
14:09:24,240 --> 14:09:27,276
异常你甚至可以抛出一个枚举值，所以

2917
14:09:27,276 --> 14:09:30,720
这就是为什么它告诉我们除了任何其他例外

2918
14:09:30,720 --> 14:09:35,276
这只是一个我不知道的对象我不知道它是什么所以

2919
14:09:35,276 --> 14:09:39,756
如果您还记得之前的

2920
14:09:39,756 --> 14:09:44,560
前一章对象都有一个名为 tostring 的函数

2921
14:09:44,560 --> 14:09:49,040
所以这很完美，那么我们可以去这里让我扩展这些，这样它们就不会

2922
14:09:49,040 --> 14:09:51,916
像他们一样变得有点神秘

2923
14:09:51,916 --> 14:09:57,840
并粘贴该代码以在此处再次显示显示错误对话框，我们也是

2924
14:09:57,840 --> 14:10:00,720
只是想说

2925
14:10:00,720 --> 14:10:06,640
e 像这样串起来

2926
14:10:06,640 --> 14:10:09,116
所以我们正在处理错误的凭据

2927
14:10:09,116 --> 14:10:13,916
处理可能出现的任何其他错误，并对任何其他 Firebase 感到抱歉

2928
14:10:13,916 --> 14:10:18,400
例外情况和任何其他例外情况

2929
14:10:18,400 --> 14:10:25,276
在用户登录期间可能出现的一般情况

2930
14:10:25,276 --> 14:10:28,000
好吧，我有很多信息

2931
14:10:28,000 --> 14:10:32,560
理解，我很快就过去了，因为当我们谈论一件事时

2932
14:10:32,560 --> 14:10:35,360
就像我们已经讨论过显示对话一样，我认为不是

2933
14:10:35,360 --> 14:10:39,040
值得你和我花太多时间解释所有这些

2934
14:10:39,040 --> 14:10:43,116
一遍又一遍，这就是为什么我越过这些

2935
14:10:43,116 --> 14:10:47,840
有时很快我们现在需要做的就是做一些

2936
14:10:47,840 --> 14:10:51,596
清理，因为您现在看到我们在这里有我们的登录视图 m

2937
14:10:51,596 --> 14:10:56,640
抱歉，在此处登录查看 dart 文件，Visual Studio 代码中的 m 表示已修改

2938
14:10:56,640 --> 14:11:01,756
自从我们上次将它提交到 git 并且我们有那个文件但是我们也

2939
14:11:01,756 --> 14:11:06,160
有坐在这里的显示错误对话框也将是

2940
14:11:06,160 --> 14:11:10,640
对注册视图很有用，但它现在只是坐在登录中

2941
14:11:10,640 --> 14:11:15,116
视图所以如果注册视图想要然后使用相同的代码，你将不得不

2942
14:11:15,116 --> 14:11:20,400
导入登录视图然后使用这个功能有点不对这是

2943
14:11:20,400 --> 14:11:24,000
应该像一个通用的显示错误对话框，它应该可用于

2944
14:11:24,000 --> 14:11:28,160
几乎所有需要它的代码，所以我们要做的就是

2945
14:11:28,160 --> 14:11:30,720
标题说这里我们要创建一个新文件

2946
14:11:30,720 --> 14:11:37,596
嗯和文件夹，我可以在 lib 下看到，所以在 lib 下打开你的项目资源管理器

2947
14:11:37,596 --> 14:11:42,720
去创建，你可以看到这里我们需要创建一个名为 show error 的文件

2948
14:11:42,720 --> 14:11:46,000
对话飞镖，它需要在里面

2949
14:11:46,000 --> 14:11:50,720
一个名为实用程序的文件夹，所以我要右键单击 lib 并说新文件和

2950
14:11:50,720 --> 14:11:55,436
我只是要输入实用程序斜线

2951
14:11:55,436 --> 14:12:00,000
显示错误对话 dart 没问题

2952
14:12:00,000 --> 14:12:05,916
并转到您的登录视图并获取该代码

2953
14:12:05,916 --> 14:12:11,520
呃显示错误对话框呃噗我要抓住代码

2954
14:12:11,520 --> 14:12:15,680
并削减它，但是你削减你的操作系统

2955
14:12:15,680 --> 14:12:20,640
在 mac 中是 Visual Studio 代码中的命令 x 并将其带入您的显示错误

2956
14:12:20,640 --> 14:12:24,720
对话框文件好吧，我们会得到很多呃错误，但正如我已经解释的那样

2957
14:12:24,720 --> 14:12:28,160
在前面的章节中我们也可以导入这些东西material dart来获取

2958
14:12:28,160 --> 14:12:32,720
几乎消除了所有这些错误，这太棒了

2959
14:12:32,720 --> 14:12:35,520
现在我们已经完成了，你可以看到 Visual Studio 已经在展示这个

2960
14:12:35,520 --> 14:12:40,080
选项卡登录视图有错误，这是因为登录视图正在使用

2961
14:12:40,080 --> 14:12:44,800
显示错误对话框，但现在我们已经从那里删除了显示错误对话框

2962
14:12:44,800 --> 14:12:49,680
不知道这个显示错误对话框现在在哪里

2963
14:12:49,680 --> 14:12:55,276
所以我们需要做的是在登录视图dart文件中使用我们的新文件

2964
14:12:55,276 --> 14:12:58,880
你可以这样做，你可以要求视觉工作室代码来帮助你

2965
14:12:58,880 --> 14:13:02,320
你可以说导入库和

2966
14:13:02,320 --> 14:13:07,116
就是它为我们进口的

2967
14:13:07,116 --> 14:13:10,956
正如你现在看到的那样，我们已经没有了

2968
14:13:10,956 --> 14:13:15,916
在我们的登录视图中记录 Visual Studio 代码正在帮助和说

2969
14:13:15,916 --> 14:13:20,160
你不再使用你不再使用开发工具或飞镖

2970
14:13:20,160 --> 14:13:23,360
开发者包导入

2971
14:13:23,360 --> 14:13:27,840
你能做的只是安全地删除它并清理你的进口

2972
14:13:27,840 --> 14:13:31,360
当我们没事的时候，嗯

2973
14:13:31,360 --> 14:13:34,720
一切正常，我们可以确认一下，所以我要进入

2974
14:13:34,720 --> 14:13:38,880
此处的现有电子邮件带有错误的凭据，只是为了

2975
14:13:38,880 --> 14:13:42,400
确保我们得到对话错误的凭据

2976
14:13:42,400 --> 14:13:45,116
完美，我们已经完成了我要去的

2977
14:13:45,116 --> 14:13:49,840
稍微改变一下屏幕布局，我们要做的是

2978
14:13:49,840 --> 14:13:53,360
需要结束本章 我们已经清理了我们的错误处理，我们

2979
14:13:53,360 --> 14:13:58,000
只需要做出一个提交就可以记住几乎每一章中的几个

2980
14:13:58,000 --> 14:14:03,040
嗯回到前面的章节，我们将在本章末尾提交我们的代码

2981
14:14:03,040 --> 14:14:06,800
确保您的代码具有可追溯性，这就是您的

2982
14:14:06,800 --> 14:14:10,080
即使您实际上正在工作，也需要这样做，尤其是如果

2983
14:14:10,080 --> 14:14:14,480
你在一个团队中工作，其他人在做 Flutter

2984
14:14:14,480 --> 14:14:18,640
代码或您需要的任何其他代码，以确保您的代码已准备好或

2985
14:14:18,640 --> 14:14:22,240
即使它还没有准备好它已经承诺所以嗯

2986
14:14:22,240 --> 14:14:26,240
即使您的代码尚未准备好，您也可以将其提交到特定的分支，但您

2987
14:14:26,240 --> 14:14:30,800
永远不要在没有完成工作的情况下离开你的工作日记住

2988
14:14:30,800 --> 14:14:35,200
好吧，现在让我们开始我们的工作吧，我是

2989
14:14:35,200 --> 14:14:39,680
将在此处稍微调出终端，您可以看到

2990
14:14:39,680 --> 14:14:44,480
上一章我们做了第五步，在这里我们将提交我们的

2991
14:14:44,480 --> 14:14:48,956
作为第 6 步工作，我们也将标记我们的工作好吧

2992
14:14:48,956 --> 14:14:53,276
所以假设 git status 你可以看到实用程序是一个新文件夹，我只是要去

2993
14:14:53,276 --> 14:14:56,720
说 git add all 我也会增加屏幕的大小，所以你

2994
14:14:56,720 --> 14:14:59,360
看看它更好地让你的工作室代码一点点

2995
14:14:59,360 --> 14:15:02,320
大也干净

2996
14:15:02,320 --> 14:15:07,916
并得到 add dash dash all 然后 git status 现在你可以看到这些是上演的

2997
14:15:07,916 --> 14:15:13,116
提交，我将把它们作为第 6 步提交，我相信

2998
14:15:13,116 --> 14:15:16,800
之后让我们标记它以及第六步

2999
14:15:16,800 --> 14:15:23,360
嗯，然后推送我们的更改，我们也会推送标签

3000
14:15:23,360 --> 14:15:29,116

