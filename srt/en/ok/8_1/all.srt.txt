1
00:00:00,720 --> 00:00:02,719
let's talk about collections here um

2
00:00:02,719 --> 00:00:08,800
and i've prepared a doc and a link there so let me see if i can find that

3
00:00:08,800 --> 00:00:12,871
link here as well so as you can see in here there is a

4
00:00:12,871 --> 00:00:16,000
good documentation that will talk a little bit about collections and

5
00:00:16,000 --> 00:00:20,719
documents and you could go through this um but i'm not gonna do that right now

6
00:00:20,719 --> 00:00:24,079
but just so you know here's the link at the bottom of the screen if you want to

7
00:00:24,079 --> 00:00:28,079
do that i'm going to talk about collections

8
00:00:28,079 --> 00:00:31,600
personally so you will understand it in my words so

9
00:00:31,600 --> 00:00:36,832
at this point what we need is just to go to our firebase database

10
00:00:36,832 --> 00:00:42,079
okay and what you'll see is a screen that kind of looks like this so it has

11
00:00:42,079 --> 00:00:47,119
your project name in here and then there is a button called start collection okay

12
00:00:47,119 --> 00:00:52,079
just imagine collection as its name indicates is a group of related objects

13
00:00:52,079 --> 00:00:56,640
objects could be you could interpret them as tables as you traditionally have

14
00:00:56,640 --> 00:01:01,439
in your relational databases such as sqlite um

15
00:01:01,439 --> 00:01:04,480
so a collection just imagine for instance

16
00:01:04,480 --> 00:01:10,079
if we say what does our application do our application stores nodes for

17
00:01:10,079 --> 00:01:15,512
all its users so user a has nodes user b has nodes but user c may not have nodes

18
00:01:15,512 --> 00:01:18,719
so the only thing our application is storing in

19
00:01:18,719 --> 00:01:25,359
in database right now is notes so that could be its own collection okay so we

20
00:01:25,359 --> 00:01:29,920
just create a collection called notes and in that collection we're gonna store

21
00:01:29,920 --> 00:01:33,831
all our notes okay so every user is going to have their own

22
00:01:33,831 --> 00:01:37,599
notes that's how we are going to do it in this

23
00:01:37,599 --> 00:01:40,480
course however you as a developer may just

24
00:01:40,480 --> 00:01:43,760
think i'm going to do it differently what i'm

25
00:01:43,760 --> 00:01:48,159
going to do is i'm going to create a new collection of notes for every user so

26
00:01:48,159 --> 00:01:51,680
user a is going to have a collection called user a notes

27
00:01:51,680 --> 00:01:56,079
user b is going to have user b notes or you may just

28
00:01:56,079 --> 00:02:01,680
assign create a collection with every user id so you remember we get a user

29
00:02:01,680 --> 00:02:06,231
identifier from firebase you may decide to you create a collection for every

30
00:02:06,231 --> 00:02:10,800
user based on their user id okay that's fine but if you're following along with

31
00:02:10,800 --> 00:02:13,919
this course i strongly suggest actually do it the way i'm doing especially if

32
00:02:13,919 --> 00:02:18,719
you if you if it's the first time you're doing this if it's if you've done this

33
00:02:18,719 --> 00:02:21,680
before you may just be comfortable with creating

34
00:02:21,680 --> 00:02:25,439
another type of collection then be my guest please go ahead but it might then

35
00:02:25,439 --> 00:02:30,719
be difficult for you later on to follow along with the course

36
00:02:30,719 --> 00:02:34,551
okay so those are collections

37
00:02:34,551 --> 00:02:40,639
so let's go ahead and um tap the start collection button in here

38
00:02:40,639 --> 00:02:45,759
um as you can see in here it says okay this collection is being created in the

39
00:02:45,759 --> 00:02:50,000
root path and just give me an id and here's a collection set of documents

40
00:02:50,000 --> 00:02:53,759
that contain data and in here it's storing a collection of

41
00:02:53,759 --> 00:02:56,400
users but remember we don't have to actually

42
00:02:56,400 --> 00:03:00,479
store users in our database firebase is already taking care of this i actually

43
00:03:00,479 --> 00:03:04,319
believe this is a bad example that they provided to ask people to say example

44
00:03:04,319 --> 00:03:08,960
collection of users because this kind of gives id idea to developers oh now i

45
00:03:08,960 --> 00:03:14,080
have to store my users here but those users are already stored at the firebase

46
00:03:14,080 --> 00:03:18,159
level okay so let's go and go ahead in here and

47
00:03:18,159 --> 00:03:23,759
just say we're storing nodes okay and we're just gonna say next

48
00:03:23,759 --> 00:03:27,439
and you can see in here now we're getting something called a document

49
00:03:27,439 --> 00:03:30,551
parent path notes and then it says a document id a

50
00:03:30,551 --> 00:03:33,919
collection must contain at least one document cloud firestore's unit of

51
00:03:33,919 --> 00:03:39,439
storage documents store your data as fields auto generate a document or the

52
00:03:39,439 --> 00:03:44,479
id or customize one if needed okay so

53
00:03:44,479 --> 00:03:47,831
that that brings us to what documents are

54
00:03:47,831 --> 00:03:50,319
um a document

55
00:03:50,319 --> 00:03:55,512
you could look at it as if you're if you know about uh

56
00:03:55,512 --> 00:03:59,831
sql from before if you followed along with what being and what we've been

57
00:03:59,831 --> 00:04:04,479
creating like when we looked at db browser for sql lite

58
00:04:04,479 --> 00:04:08,080
then we had these tables like user and notes

59
00:04:08,080 --> 00:04:13,439
these uh these are like the schemas of a document

60
00:04:13,439 --> 00:04:17,439
so as you can see here and here says every note

61
00:04:17,439 --> 00:04:21,600
is created this way it has an id it has a user id it has a text is synced with

62
00:04:21,600 --> 00:04:25,600
cloud remember all those fields and it has that's the schema

63
00:04:25,600 --> 00:04:31,192
in far in the firestore world those are documents so that entire notes

64
00:04:31,192 --> 00:04:36,079
schema is one document and every field in it then it can have a data type so

65
00:04:36,079 --> 00:04:38,639
those fields you may know them as columns

66
00:04:38,639 --> 00:04:42,480
from before when we created our own tables okay so

67
00:04:42,480 --> 00:04:47,120
if we go back into db browser you may not have this db browser for sql

68
00:04:47,120 --> 00:04:50,552
light open and that's completely fine we're not gonna actually work with it

69
00:04:50,552 --> 00:04:55,360
right now you may have you may even have like is toss that database in the trash

70
00:04:55,360 --> 00:04:58,800
and that's completely fine i just want to show you this um

71
00:04:58,800 --> 00:05:04,232
that when we created this node table or the node documents then we had different

72
00:05:04,232 --> 00:05:09,279
fields remember id user id text and those were the exact same things in here

73
00:05:09,279 --> 00:05:14,552
okay so if i if i go ahead and create a new

74
00:05:14,552 --> 00:05:19,439
console firebase and have a look at for instance my

75
00:05:19,439 --> 00:05:25,360
other uh firebase projects i can see i have a notes app and you can here see

76
00:05:25,360 --> 00:05:30,160
that um the way i had designed this uh in the beginning of this course is i had

77
00:05:30,160 --> 00:05:34,552
a collection and then every collection had documents in it that had text and

78
00:05:34,552 --> 00:05:38,800
then user id okay so that's what we're gonna do in here we're just gonna say a

79
00:05:38,800 --> 00:05:42,800
field of text and it's typed string and it has no

80
00:05:42,800 --> 00:05:46,800
value okay and then we're gonna add a new field in here and just call it use

81
00:05:46,800 --> 00:05:51,120
righty okay and then in here it has no value

82
00:05:51,120 --> 00:05:56,800
either and then a document id that we're just gonna auto generate okay so we just

83
00:05:56,800 --> 00:06:03,120
pretty much just created a new note okay with a random document id and it has a

84
00:06:03,120 --> 00:06:07,279
field of text and another field called user id

85
00:06:07,279 --> 00:06:11,831
great then i need you to press the save button and now you'll see here we have

86
00:06:11,831 --> 00:06:16,079
our notes collection and inside there we have a document that has these two

87
00:06:16,079 --> 00:06:20,959
fields okay so what you could do also is to delete

88
00:06:20,959 --> 00:06:25,600
either a collection or delete a a document so i'm just going to say delete

89
00:06:25,600 --> 00:06:30,552
document and start delete and as you can see now we have an empty collection

90
00:06:30,552 --> 00:06:34,720
called nodes i still find this a little bit peculiar

91
00:06:34,720 --> 00:06:38,079
that when we create a collection firebase

92
00:06:38,079 --> 00:06:42,399
forces us to create a document inside it like if i go and say start collection

93
00:06:42,399 --> 00:06:47,759
and then press the next button in here i can't actually save my empty collection

94
00:06:47,759 --> 00:06:51,759
and it says every let's see here a collection must contain

95
00:06:51,759 --> 00:06:54,552
at least one document so

96
00:06:54,552 --> 00:06:57,600
i'm not sure if that's actually true because you can see now we have a

97
00:06:57,600 --> 00:07:01,920
collection with no document so i'm not sure why that was created why

98
00:07:01,920 --> 00:07:05,040
that uh rule was set when you create a new

99
00:07:05,040 --> 00:07:08,552
collection but just know that it's not completely true so you can have a

100
00:07:08,552 --> 00:07:12,959
collection with no documents all right

101
00:07:12,959 --> 00:07:18,800
so now let's talk a little about streams of data if you remember from our

102
00:07:18,800 --> 00:07:25,279
application in if we go to our i think it's called uh

103
00:07:25,279 --> 00:07:28,552
node service here

104
00:07:28,552 --> 00:07:33,600
you remember that we have this stream of database nodes as a stream of list of

105
00:07:33,600 --> 00:07:39,120
database nodes and we call it all nodes in our application up to this point

106
00:07:39,120 --> 00:07:43,680
we've had to manage these streams manually in that we have to like go

107
00:07:43,680 --> 00:07:48,232
create a stream controller do this whole dance of um

108
00:07:48,232 --> 00:07:52,079
unlisten populate the stream controller with the nodes

109
00:07:52,079 --> 00:07:57,512
you'd be really really happy perhaps to hear that when we go to firebase and

110
00:07:57,512 --> 00:08:02,232
firestore we don't have to do any of this because firestore

111
00:08:02,232 --> 00:08:07,360
already has all of this built in in that when you for instance read all the

112
00:08:07,360 --> 00:08:13,680
documents inside this notes collection that will actually be a stream of those

113
00:08:13,680 --> 00:08:16,959
uh data points for you so

114
00:08:16,959 --> 00:08:20,319
no more stream controller and no more streams

115
00:08:20,319 --> 00:08:24,552
that you have to manage manually okay those will be exposed to your

116
00:08:24,552 --> 00:08:28,552
application using firestore

117
00:08:28,552 --> 00:08:32,320
so so as you saw and when i created this

118
00:08:32,320 --> 00:08:35,919
collection to begin with i created it with

119
00:08:35,919 --> 00:08:41,440
a note document that had a text and it had a user id field so

120
00:08:41,440 --> 00:08:45,279
our goal in this chapter and going forward is to make sure that every node

121
00:08:45,279 --> 00:08:50,871
has a text and it is actually linked to a firebase user using that user's user

122
00:08:50,871 --> 00:08:53,360
id okay so

123
00:08:53,360 --> 00:08:58,000
if we go to our application to our auth service so let's

124
00:08:58,000 --> 00:09:02,960
go to off and then auth service in here and remember we're using firebase auth

125
00:09:02,960 --> 00:09:06,871
provider so let's go in there and you can see that

126
00:09:06,871 --> 00:09:11,279
when we say create user with email and password for instance then this function

127
00:09:11,279 --> 00:09:15,511
returned something called user credential to us and user credential

128
00:09:15,511 --> 00:09:19,039
actually has quite a few properties you can see it has a credential and it has a

129
00:09:19,039 --> 00:09:23,831
user inside it of type user so if you go into that user you can see it has

130
00:09:23,831 --> 00:09:28,231
different properties like display name email email verified metadata phone

131
00:09:28,231 --> 00:09:33,831
number etc but this user also has something called a user's unique id

132
00:09:33,831 --> 00:09:41,192
which we actually need in order to store notes into our collect notes collection

133
00:09:41,192 --> 00:09:44,639
so and this is what i mean every document

134
00:09:44,639 --> 00:09:47,759
that we create is for instance going to be node some

135
00:09:47,759 --> 00:09:51,679
random id or something which we haven't decided yet and one of the fields let me

136
00:09:51,679 --> 00:09:56,000
actually see if i can resize uh this safari window so you see it better so

137
00:09:56,000 --> 00:09:59,120
it's going to have a text and the text is going to be generated by the user but

138
00:09:59,120 --> 00:10:03,440
it's going to also have a field called user id okay so in this user id field we

139
00:10:03,440 --> 00:10:07,039
actually need to store that user's gener

140
00:10:07,039 --> 00:10:10,799
firebase generated id in there okay and

141
00:10:10,799 --> 00:10:14,639
now going back to what we are doing with that user do you

142
00:10:14,639 --> 00:10:20,720
remember we're not actually um exposing the firebase user to our application and

143
00:10:20,720 --> 00:10:24,159
that's a great level of abstraction however we have a little bit of a

144
00:10:24,159 --> 00:10:29,831
problem in that right now our user has email and is email verified it doesn't

145
00:10:29,831 --> 00:10:34,552
actually have a unique id so our application is not going to be able to

146
00:10:34,552 --> 00:10:39,679
associate new notes with an auth user

147
00:10:39,679 --> 00:10:44,799
it's not going to be able to associate a new note with a user id okay

148
00:10:44,799 --> 00:10:48,720
so we need to fix that so i'm just going to go to my notes a little bit in here

149
00:10:48,720 --> 00:10:54,399
and what we need is to update our auth user as you can see in

150
00:10:54,399 --> 00:10:58,480
here so in auth user.dart file as i've opened in

151
00:10:58,480 --> 00:11:01,759
here and what we need is to add a new field

152
00:11:01,759 --> 00:11:06,000
which is a required field and we need to make that

153
00:11:06,000 --> 00:11:10,871
the id of that user okay

154
00:11:10,871 --> 00:11:14,871
so let's go ahead and do that now so i'm just going to go ahead and say final

155
00:11:14,871 --> 00:11:20,000
string and id so this field is not optional

156
00:11:20,000 --> 00:11:25,679
here you see every user that comes into our application should have an id and

157
00:11:25,679 --> 00:11:30,480
that's like the expectation that we have on our off users okay so i need you to

158
00:11:30,480 --> 00:11:34,480
go ahead and add that please here of user class as well

159
00:11:34,480 --> 00:11:40,000
let's then go in here and i'm going to add this um to um

160
00:11:40,000 --> 00:11:43,919
the required fields i can see visual studio code wasn't able to actually meet

161
00:11:43,919 --> 00:11:47,759
this required parameter i'm going to help visual studio code and

162
00:11:47,759 --> 00:11:51,279
do that i'm just going to say required this id and i need you to do the same

163
00:11:51,279 --> 00:11:55,831
thing please so now we have a problem in here in that

164
00:11:55,831 --> 00:12:02,720
our auth user in here doesn't have an id where we created from firebase user

165
00:12:02,720 --> 00:12:08,480
let's go and remedy that let's just say the id in here is the user uid remember

166
00:12:08,480 --> 00:12:13,120
this uh parameter that i uh talked to you about okay

167
00:12:13,120 --> 00:12:18,320
so that is now created and let me actually go to scrcpy i can see that

168
00:12:18,320 --> 00:12:21,360
visual studio code has a little bit of problem hot reloading right now so

169
00:12:21,360 --> 00:12:25,279
that's because probably the application wasn't in the foreground so that's fixed

170
00:12:25,279 --> 00:12:28,480
now talking about scr cpy it's perhaps a

171
00:12:28,480 --> 00:12:32,480
good idea for me to bring in crcpy here just to make sure that we're not

172
00:12:32,480 --> 00:12:37,919
bringing and breaking anything okay so

173
00:12:37,919 --> 00:12:41,192
so that's one change that we have to make to our auto user the other change

174
00:12:41,192 --> 00:12:45,360
that we have to make is to make sure that the email parameter of our user is

175
00:12:45,360 --> 00:12:48,399
not optional you see the way we are creating at the

176
00:12:48,399 --> 00:12:50,720
moment are um

177
00:12:50,720 --> 00:12:56,320
our application is that we've created the login process of a use email and

178
00:12:56,320 --> 00:13:00,080
password authentication so we don't have like facebook authentication or google

179
00:13:00,080 --> 00:13:03,039
authentication we only have username and password

180
00:13:03,039 --> 00:13:08,231
sorry email and password so given that condition we can be sure that

181
00:13:08,231 --> 00:13:11,831
every authenticated user in our application actually has an email

182
00:13:11,831 --> 00:13:14,871
address okay so

183
00:13:14,871 --> 00:13:20,159
let's go ahead and just say that email is not an optional field anymore and in

184
00:13:20,159 --> 00:13:24,799
here we're going to explicitly unwrap that email all right so that's another

185
00:13:24,799 --> 00:13:32,639
change that we made to our application so now that we've done that you can see

186
00:13:32,639 --> 00:13:36,720
flutter is not so happy with those changes saying that well yeah you broke

187
00:13:36,720 --> 00:13:41,120
something and it's our tests that have been broken

188
00:13:41,120 --> 00:13:45,759
so as you can see uh we need to make sure that id is actually included in our

189
00:13:45,759 --> 00:13:50,000
tests as well and since we're not actually creating a

190
00:13:50,000 --> 00:13:55,120
specific test for that user id we can just add a random id in here

191
00:13:55,120 --> 00:14:00,000
let's just say my id okay and i'm going to bring that and

192
00:14:00,000 --> 00:14:05,511
bring it down here as well so we have an id field in both cases of auth user

193
00:14:05,511 --> 00:14:09,360
inside our tests

194
00:14:09,360 --> 00:14:12,480
okay now we have another problem as you can see

195
00:14:12,480 --> 00:14:15,511
in the captions in our create update note view

196
00:14:15,511 --> 00:14:20,960
we are unwrapping the user's email and that's what this little orange views um

197
00:14:20,960 --> 00:14:25,192
folder is it's not red meaning that

198
00:14:25,192 --> 00:14:29,919
well yeah it's not an error but it's a warning so let's go to this create

199
00:14:29,919 --> 00:14:33,600
update note view and have a look at this uh

200
00:14:33,600 --> 00:14:38,159
field in here as you can see we're in inside the get a create or get existing

201
00:14:38,159 --> 00:14:42,399
note and we are unwrapping this email but

202
00:14:42,399 --> 00:14:46,399
right now the warning is saying what is it saying the uh uh

203
00:14:46,399 --> 00:14:50,480
asterisk will have no effect because the receiver can't be not try removing the

204
00:14:50,480 --> 00:14:54,799
asterisk operator and i need you to do that please

205
00:14:54,799 --> 00:14:58,552
we have another problem also we have another warning inside the notes of you

206
00:14:58,552 --> 00:15:01,360
and i believe we're doing something similar in the notes view so let's see

207
00:15:01,360 --> 00:15:05,360
if you can find a warning [Music]

208
00:15:05,360 --> 00:15:08,720
where is the warning

209
00:15:08,720 --> 00:15:12,871
i actually don't oh here we have the user email in here as well so i'm just

210
00:15:12,871 --> 00:15:17,192
going to remove the asterisk after that so i need you to do the same thing

211
00:15:17,192 --> 00:15:20,480
please

212
00:15:20,480 --> 00:15:23,360
okay now we're gonna get to the juicy parts

213
00:15:23,360 --> 00:15:28,480
of the uh cloud storage integration so i'm clean i'm basically removing all the

214
00:15:28,480 --> 00:15:32,871
file all the dart um tabs from here i'm actually not deleting the files i'm

215
00:15:32,871 --> 00:15:36,080
removing like that tab so it's a clean slate

216
00:15:36,080 --> 00:15:40,480
then what we need is to um create

217
00:15:40,480 --> 00:15:44,960
all our cloud storage exceptions you see if you remember from when we worked with

218
00:15:44,960 --> 00:15:51,192
our quad service which is a node service then we also had a file under the croth

219
00:15:51,192 --> 00:15:55,360
folder called crowd exceptions and in here we define all the different things

220
00:15:55,360 --> 00:16:00,080
that could go wrong when the user is working with our node service now that

221
00:16:00,080 --> 00:16:05,679
we're moving away from crud we need to have our new exceptions defined

222
00:16:05,679 --> 00:16:09,192
somewhere and and

223
00:16:09,192 --> 00:16:11,679
as you can see in the cache just like we had the crowd exceptions we're also

224
00:16:11,679 --> 00:16:15,120
going to have some exceptions thrown by our new fire

225
00:16:15,120 --> 00:16:19,440
firestore service which we haven't developed yet but we need to define

226
00:16:19,440 --> 00:16:24,159
those exceptions at least okay so

227
00:16:24,159 --> 00:16:28,159
what we need now is to go and create that file so i need you to please create

228
00:16:28,159 --> 00:16:34,080
a file under lib services cloud and then create that file as cloud

229
00:16:34,080 --> 00:16:38,080
storage exception so i'm going to do that as well so let's

230
00:16:38,080 --> 00:16:41,600
see i'm going to fold all the folders in here

231
00:16:41,600 --> 00:16:46,399
so we have lib services and then cloud you can see we don't have cloud at the

232
00:16:46,399 --> 00:16:51,120
moment so we do have services and we have off in there and crowd so i'm gonna

233
00:16:51,120 --> 00:16:55,600
right click on services and say new file and then in here i'm just gonna say

234
00:16:55,600 --> 00:16:59,600
cloud and then slash cloud storage

235
00:16:59,600 --> 00:17:04,079
exceptions.dart okay

236
00:17:04,079 --> 00:17:08,551
so after the creation of that file

237
00:17:08,551 --> 00:17:13,039
i'm going to remove the project explorer there as well what we need then is to

238
00:17:13,039 --> 00:17:17,920
define a super class for all our cl cloud

239
00:17:17,920 --> 00:17:20,551
exceptions if you remember from the crowd

240
00:17:20,551 --> 00:17:24,551
exceptions that we created in here all those exceptions were actually of

241
00:17:24,551 --> 00:17:28,480
type exception and that's one way of doing that however

242
00:17:28,480 --> 00:17:32,079
if you want to group your exceptions under one

243
00:17:32,079 --> 00:17:34,319
super exception

244
00:17:34,319 --> 00:17:39,039
and you could then handle them quite smoothly or better

245
00:17:39,039 --> 00:17:41,759
actually i would say in

246
00:17:41,759 --> 00:17:46,720
at the call site and so that basically is going to use inheritance and then you

247
00:17:46,720 --> 00:17:50,799
and we are going to create a new exception as you can see

248
00:17:50,799 --> 00:17:55,680
here called cloud storage exception and all our cloud exceptions are going to be

249
00:17:55,680 --> 00:18:00,160
of that type so makes grouping and catching these exceptions in the future

250
00:18:00,160 --> 00:18:05,920
a lot easier okay so let's go ahead and

251
00:18:05,920 --> 00:18:11,192
create our first exception it is called i can see it's called cloud storage

252
00:18:11,192 --> 00:18:14,079
exception so let's go ahead and say clouds and

253
00:18:14,079 --> 00:18:21,039
class cloud storage exception and implements exception

254
00:18:21,039 --> 00:18:24,640
okay and we're also going to create a

255
00:18:24,640 --> 00:18:29,680
constant constructor for it so it makes creating instance of this a lot easier

256
00:18:29,680 --> 00:18:35,192
and you could also basically say that this is um an

257
00:18:35,192 --> 00:18:39,359
immutable class meaning that this class and all its subclasses need to be

258
00:18:39,359 --> 00:18:43,832
immutable you could do that all right that's fine as well but usually

259
00:18:43,832 --> 00:18:47,511
exceptions aren't marked with this it's usually data classes that are marked

260
00:18:47,511 --> 00:18:53,039
with immutable so i'm not gonna do that right now

261
00:18:53,039 --> 00:18:57,511
okay that thing is done um

262
00:18:57,511 --> 00:19:01,511
now so that's the parent exception we should try not to throw that exception

263
00:19:01,511 --> 00:19:06,231
as it is we have to throw subclass subclasses of that exception okay

264
00:19:06,231 --> 00:19:09,279
now the first exception that we're going to

265
00:19:09,279 --> 00:19:13,359
define is could not create node exception i believe it's called yes and

266
00:19:13,359 --> 00:19:20,640
we're going to throw this in our to be written a class soon uh upon you

267
00:19:20,640 --> 00:19:25,279
trying to create a new note if firebase firestore is not able to actually create

268
00:19:25,279 --> 00:19:28,160
that note then we're gonna throw this error okay

269
00:19:28,160 --> 00:19:34,400
so i'm gonna then define that exception and you will need to type this then um i

270
00:19:34,400 --> 00:19:38,799
just brought it from my notes

271
00:19:38,799 --> 00:19:44,160
now also in this screen where we have all the notes displayed for a given user

272
00:19:44,160 --> 00:19:47,920
we may also not be able to retrieve all the notes for that user for instance if

273
00:19:47,920 --> 00:19:51,832
there is a network connection issue or whatever whatever other issues that may

274
00:19:51,832 --> 00:19:54,231
arise so we need to have an exception for that

275
00:19:54,231 --> 00:19:58,400
as well and that exception is called could not get all nodes exception okay

276
00:19:58,400 --> 00:20:03,511
so let's define that as well and it's written just like could not get

277
00:20:03,511 --> 00:20:07,759
all notes exceptions exception

278
00:20:07,759 --> 00:20:12,480
the next exception that we have to define is called a could not update

279
00:20:12,480 --> 00:20:17,359
nodes so we have create node exception get node exception and now we're on the

280
00:20:17,359 --> 00:20:23,119
u part of crot so you see the

281
00:20:23,119 --> 00:20:31,039
create part is a c in crud gets is r and now we're looking at you okay

282
00:20:31,039 --> 00:20:36,640
and that is uh could not update node exception so

283
00:20:36,640 --> 00:20:40,231
so we could say this is um

284
00:20:40,231 --> 00:20:44,640
you in crud and the get

285
00:20:44,640 --> 00:20:51,680
is r in crop and create a c in crud okay and so we

286
00:20:51,680 --> 00:20:55,359
have c r u and then we have to define d

287
00:20:55,359 --> 00:21:00,400
which is for delete infrared and that's exactly what we're going to

288
00:21:00,400 --> 00:21:05,680
do now so let's go define could not delete node exception all right so

289
00:21:05,680 --> 00:21:10,960
let's then say be in crop okay so now we have

290
00:21:10,960 --> 00:21:16,551
um three four uh exceptions defined and all of those exceptions are uh

291
00:21:16,551 --> 00:21:22,872
inheriting from cloud storage exception

292
00:21:22,872 --> 00:21:26,400
okay um now that we've talked about the

293
00:21:26,400 --> 00:21:30,551
exceptions we also have to talk about the actual cloud storage service you see

294
00:21:30,551 --> 00:21:34,640
we have our quad service at the moment which we've been working quite a lot

295
00:21:34,640 --> 00:21:38,960
with and we're very proud of it actually it's a lot of code in my implementation

296
00:21:38,960 --> 00:21:45,599
at least in here we have about 360 lines of code

297
00:21:45,599 --> 00:21:49,759
i mean it's not all code there there's also spaces there's like

298
00:21:49,759 --> 00:21:53,680
i think there are some annotations like immutable etc but there's quite a lot of

299
00:21:53,680 --> 00:21:56,960
code okay and there's a print statement in here which i actually have to remove

300
00:21:56,960 --> 00:21:59,511
okay so

301
00:21:59,511 --> 00:22:03,440
there's quite a lot of code and this is working with sql lite but we also need a

302
00:22:03,440 --> 00:22:07,119
service that works with firebase firestore

303
00:22:07,119 --> 00:22:12,319
so we need to create that service soon so just know that we are going to have

304
00:22:12,319 --> 00:22:15,920
crud in here which is going to talk with sqlite

305
00:22:15,920 --> 00:22:19,511
but we're moving actually away from it so

306
00:22:19,511 --> 00:22:23,359
let's then fix that um

307
00:22:23,359 --> 00:22:27,599
so let's go in here and have a look at our constants

308
00:22:27,599 --> 00:22:31,511
and if you look at our node servicing here

309
00:22:31,511 --> 00:22:36,640
and we have our constants in here we have routes and at

310
00:22:36,640 --> 00:22:42,319
the end of node service we have some constants defined right in this class

311
00:22:42,319 --> 00:22:46,720
or right in this dart file and some people may like this but i

312
00:22:46,720 --> 00:22:51,359
personally prefer to have my constants defined in separate files even though

313
00:22:51,359 --> 00:22:56,319
these constants are very related only to this file but just

314
00:22:56,319 --> 00:23:00,400
making them putting them in separate places just makes it easier to look at

315
00:23:00,400 --> 00:23:04,160
because these constants at the moment like hidden at the bottom very bottom of

316
00:23:04,160 --> 00:23:07,832
this file so let's go ahead and define our

317
00:23:07,832 --> 00:23:11,440
constants so let's have a look at the path it's going to be in services cloud

318
00:23:11,440 --> 00:23:17,192
and then cloud storage constants on the services now we have cloud

319
00:23:17,192 --> 00:23:22,551
and under cloud we have cloud storage exceptions i think exceptions yep now we

320
00:23:22,551 --> 00:23:28,160
have to define cloud storage constants so new file cloud storage

321
00:23:28,160 --> 00:23:32,551
constants dart and

322
00:23:32,551 --> 00:23:35,119
i'm going to go to my notes [Music]

323
00:23:35,119 --> 00:23:39,680
constants all right now if you remember from our note series

324
00:23:39,680 --> 00:23:44,400
we define like the tables and excuse me

325
00:23:44,400 --> 00:23:50,319
and we defined the tables the columns and and even the format of creating new

326
00:23:50,319 --> 00:23:54,872
tables we don't really need these all we need are these two fields as you

327
00:23:54,872 --> 00:24:00,231
remember the text and also we need a field for user

328
00:24:00,231 --> 00:24:03,192
id like this

329
00:24:03,192 --> 00:24:08,480
so let's define these let's just say owner user id so let's go in here and

330
00:24:08,480 --> 00:24:15,279
say const increase the size owner user

331
00:24:15,279 --> 00:24:23,192
id is just user id like this and then we're gonna say const text field name

332
00:24:23,192 --> 00:24:28,079
excuse me so i need you to define these two fields as well for your application

333
00:24:28,079 --> 00:24:32,160
okay so let's go back to the original font

334
00:24:32,160 --> 00:24:36,000
size in there so

335
00:24:36,000 --> 00:24:39,359
now that we've defined that if you remember from our note service we had

336
00:24:39,359 --> 00:24:43,759
these beautiful classes in here a call called a database node and a database

337
00:24:43,759 --> 00:24:47,599
user now given that we're moving away from

338
00:24:47,599 --> 00:24:51,039
storing things and notes inside the sqlite

339
00:24:51,039 --> 00:24:54,960
database and we're moving to towards a firestore um

340
00:24:54,960 --> 00:24:58,640
databases we actually don't need a database user

341
00:24:58,640 --> 00:25:02,000
anymore but we do need some sort of a class that

342
00:25:02,000 --> 00:25:07,279
represents these documents that we're going to create in here okay and

343
00:25:07,279 --> 00:25:11,511
what we are going to call that is called a cloud node

344
00:25:11,511 --> 00:25:15,599
so let's go ahead you see here is called a database node so then you kind of know

345
00:25:15,599 --> 00:25:19,832
that it is a local database maybe you could rename this local database node if

346
00:25:19,832 --> 00:25:23,119
you want to but i'm not going to do that simply because we're moving away from

347
00:25:23,119 --> 00:25:27,039
this so what's the point of refactoring it so

348
00:25:27,039 --> 00:25:31,359
i'm going to close node service so then let's go ahead and create a new file

349
00:25:31,359 --> 00:25:36,799
called cloud note dart under services lib services cloud

350
00:25:36,799 --> 00:25:41,599
and i'm going to call it cloud underscore node.dark

351
00:25:41,599 --> 00:25:47,599
in here now what we need to do is actually implement cloud nodes

352
00:25:47,599 --> 00:25:50,640
excuse me so

353
00:25:50,640 --> 00:25:55,039
what a cloud node actually is going to contain there are three properties that

354
00:25:55,039 --> 00:25:59,920
the cloud node has to contain and they're namely the

355
00:25:59,920 --> 00:26:04,640
actual identifier of that node and i apologize i actually have to put myself

356
00:26:04,640 --> 00:26:10,640
into do not disturb so so

357
00:26:10,640 --> 00:26:14,231
there are three things a cloud node has to contain

358
00:26:14,231 --> 00:26:19,511
one is the actual like primary key of that note in our database every document

359
00:26:19,511 --> 00:26:24,799
that is generated by firebase is going to have a unique id if you're

360
00:26:24,799 --> 00:26:27,832
coming from like backend development then you're already familiar with this

361
00:26:27,832 --> 00:26:32,160
for instance django has this idea of a pk which is primary key you can also

362
00:26:32,160 --> 00:26:35,680
read it as id so everything that's stored in the database has some sort of

363
00:26:35,680 --> 00:26:40,079
a primary key firestore is no different so every

364
00:26:40,079 --> 00:26:43,832
document that is created inside a firestore database is also going to have

365
00:26:43,832 --> 00:26:47,511
a primary key okay so that's the first property that our

366
00:26:47,511 --> 00:26:52,960
cloud node is going to contain the other two are very familiar because

367
00:26:52,960 --> 00:26:57,511
you saw here in the documents we're gonna have a text field and the other

368
00:26:57,511 --> 00:27:01,279
one is like the owner user id so there are three fields that we have to add to

369
00:27:01,279 --> 00:27:05,759
our class so let's go ahead and do that let's just say

370
00:27:05,759 --> 00:27:11,832
um if i can type here so class sorry i have a microphone right

371
00:27:11,832 --> 00:27:16,000
in front of my face like it's blocking my keyboard so that's sometimes that's

372
00:27:16,000 --> 00:27:20,000
why i have to like look like this just to find my keyboard

373
00:27:20,000 --> 00:27:23,039
so let's say cloud node um

374
00:27:23,039 --> 00:27:26,960
and inside our cloud node let's define these three properties so let's just say

375
00:27:26,960 --> 00:27:31,832
final string document id okay

376
00:27:31,832 --> 00:27:36,551
and i'm going to copy the string here as well and say owner user id and then

377
00:27:36,551 --> 00:27:41,511
we're going to say text okay help from visual studio code to

378
00:27:41,511 --> 00:27:45,680
implement the constructor and um in here then i'm going to say

379
00:27:45,680 --> 00:27:50,000
this is a constant constructor okay as i said you could actually go and define

380
00:27:50,000 --> 00:27:53,039
this as immutable which i actually prefer in this case to be honest with

381
00:27:53,039 --> 00:27:56,160
you i hadn't i hadn't planned to make this immutable but i think actually

382
00:27:56,160 --> 00:28:02,160
makes sense if it's a cloud node then let's just say it's immutable okay

383
00:28:02,160 --> 00:28:07,440
so that's that's the first part and i also know that we need to make these

384
00:28:07,440 --> 00:28:11,511
required parameters so let's go ahead and do that let's just say required

385
00:28:11,511 --> 00:28:16,400
before all of these parameters okay so that they're actually required named

386
00:28:16,400 --> 00:28:20,400
parameters that are not optional basically

387
00:28:20,400 --> 00:28:25,440
okay that's that if you look at how our database nodes

388
00:28:25,440 --> 00:28:32,319
let's see if we can find database node inside nodes service

389
00:28:32,319 --> 00:28:36,640
so let's have a look at database node do you remember that we had these fields

390
00:28:36,640 --> 00:28:41,680
but we're pretty much never calling this database nodes a constructor we're

391
00:28:41,680 --> 00:28:44,960
always using this thing database node from row

392
00:28:44,960 --> 00:28:49,192
and this is basically the object you just see this map is the object that

393
00:28:49,192 --> 00:28:53,599
we're reading from our sqlite database and crew and then we're internally

394
00:28:53,599 --> 00:28:59,279
creating instances of our database node from that object okay

395
00:28:59,279 --> 00:29:02,960
so this kind of map is what you will also

396
00:29:02,960 --> 00:29:07,359
receive from firestore

397
00:29:07,359 --> 00:29:11,279
however it's going to be wrapped inside something called a query document

398
00:29:11,279 --> 00:29:17,359
snapshot so it's just a wrapper around your data so

399
00:29:17,359 --> 00:29:22,000
let's go ahead in here and and what we're going to say is if you just type

400
00:29:22,000 --> 00:29:27,440
query document snapshot then visual studio code is going to import

401
00:29:27,440 --> 00:29:33,039
this automatically for you okay so then it should be imported in here so

402
00:29:33,039 --> 00:29:37,599
that's great and also we need our um

403
00:29:37,599 --> 00:29:41,920
cloud storage constants so let's go and import those as well so let's just say

404
00:29:41,920 --> 00:29:47,279
package and my nodes and we have uh what do we have

405
00:29:47,279 --> 00:29:51,832
where is this stored inside services cloud so services cloud

406
00:29:51,832 --> 00:29:56,231
constant or sorry cloud storage constants so

407
00:29:56,231 --> 00:30:01,511
you need cloud firestore dart and then your constants as well

408
00:30:01,511 --> 00:30:05,920
let's go ahead and create kind of like a constructor that we are going to call

409
00:30:05,920 --> 00:30:11,680
from snapshot and this constructor is going to allow firestore to give us a

410
00:30:11,680 --> 00:30:15,920
snapshot of it and cloud nodes and then we're going to create an instance of our

411
00:30:15,920 --> 00:30:21,599
cloud node from that okay so let's just say cloud node from

412
00:30:21,599 --> 00:30:26,400
from snapshot and parameter is going to be query

413
00:30:26,400 --> 00:30:32,000
document snapshot that has that map that we actually need

414
00:30:32,000 --> 00:30:36,480
like this and we're going to call it snapshot like that okay

415
00:30:36,480 --> 00:30:39,279
so now you can see that we're getting some

416
00:30:39,279 --> 00:30:43,440
errors from um from dart saying all final variables

417
00:30:43,440 --> 00:30:46,079
need to be initialized and a function body must be provided okay we're going

418
00:30:46,079 --> 00:30:52,079
to fix it soon so this is this is the um signature of your function then in here

419
00:30:52,079 --> 00:30:56,960
your job now is to make sure that all your fields are initialized so let's

420
00:30:56,960 --> 00:31:01,039
let's just say if i can type again document id

421
00:31:01,039 --> 00:31:06,872
it comes from our snapshot id that's a property that is stored on this

422
00:31:06,872 --> 00:31:10,400
at the snapshot level so you can get that id okay

423
00:31:10,400 --> 00:31:14,480
and what we're going to say is that we have an owner user id that we also have

424
00:31:14,480 --> 00:31:18,551
to fill in so that comes from the snapshot

425
00:31:18,551 --> 00:31:21,599
uh snap shot

426
00:31:21,599 --> 00:31:24,799
data and in there then we have to say the

427
00:31:24,799 --> 00:31:29,832
owner user id field name let's see owner user

428
00:31:29,832 --> 00:31:32,400
id

429
00:31:32,400 --> 00:31:36,551
under user id let's call this field name so sorry about that let's go back to the

430
00:31:36,551 --> 00:31:40,872
cloud storage constants and fix this to say owner user id field name actually

431
00:31:40,872 --> 00:31:43,359
okay

432
00:31:43,359 --> 00:31:47,680
so we missed that but that's okay it's just a naming change so

433
00:31:47,680 --> 00:31:50,720
then we're gonna say owner user id field name

434
00:31:50,720 --> 00:31:55,599
so that's for the owner user id and we're going to get the text which

435
00:31:55,599 --> 00:32:00,079
is equal to snapshot dot data

436
00:32:00,079 --> 00:32:05,119
and text field name as string

437
00:32:05,119 --> 00:32:09,511
okay so what we have is a beautiful cloud node immutable class with a

438
00:32:09,511 --> 00:32:15,359
constant constructor and also we get this snapshot um query document snapshot

439
00:32:15,359 --> 00:32:20,319
from firestore soon and we can create instances of our cloud nodes as you'll

440
00:32:20,319 --> 00:32:23,832
soon see

441
00:32:23,832 --> 00:32:29,920
all right now what we need um is to create our new cloud firestore

442
00:32:29,920 --> 00:32:35,359
service so this is like the beginning of moving

443
00:32:35,359 --> 00:32:41,920
away from cloud storage into firestore so this is actually very exciting and a

444
00:32:41,920 --> 00:32:45,599
little bit um a little bit intimidating maybe at first

445
00:32:45,599 --> 00:32:49,511
because well we kind of have to like redo quite a lot of work

446
00:32:49,511 --> 00:32:54,231
but given that firestore provides you with pretty much all the tools that you

447
00:32:54,231 --> 00:32:57,599
need as you'll soon see the implementations of the functions that

448
00:32:57,599 --> 00:33:02,799
we're gonna that we're gonna do are so minimal because the base is there fire

449
00:33:02,799 --> 00:33:06,640
stores already provided the base we just have to hook into it and grab the data

450
00:33:06,640 --> 00:33:11,119
write the data etc so so let's close all these tabs that we

451
00:33:11,119 --> 00:33:16,231
have at the moment excuse me and let's go to this um

452
00:33:16,231 --> 00:33:20,799
services cloud and create our new firebase cloud storage dart file

453
00:33:20,799 --> 00:33:26,799
firebase cloud storage dart

454
00:33:26,799 --> 00:33:30,960
all right so i'm actually going to do that as well so

455
00:33:30,960 --> 00:33:34,799
firebase cloud storage

456
00:33:34,799 --> 00:33:39,680
in my notes all right so let's go ahead and say we have a new

457
00:33:39,680 --> 00:33:45,192
class called firebase cloud storage like that

458
00:33:45,192 --> 00:33:49,511
at the moment it doesn't do really anything but what we need to do uh is to

459
00:33:49,511 --> 00:33:52,799
make uh make this a shared instance

460
00:33:52,799 --> 00:33:56,400
and i'm gonna bring the caption for that and

461
00:33:56,400 --> 00:34:00,480
if you remember we've already made our node service

462
00:34:00,480 --> 00:34:03,119
a

463
00:34:03,119 --> 00:34:06,480
a singleton so let's go back to our node service

464
00:34:06,480 --> 00:34:10,480
command p on macintosh and visual studio code or control p in

465
00:34:10,480 --> 00:34:15,119
windows and linux to bring up this search files by name field and i'm just

466
00:34:15,119 --> 00:34:19,512
going to say note service if you remember inside note service i

467
00:34:19,512 --> 00:34:23,440
think at the top we had this pattern

468
00:34:23,440 --> 00:34:26,960
for creating a singleton do you remember this

469
00:34:26,960 --> 00:34:32,400
right so we kind of need or sorry this part we

470
00:34:32,400 --> 00:34:36,400
kind of need the same thing not kind of actually pretty much exactly

471
00:34:36,400 --> 00:34:40,552
the same thing except for this part because this talks with a stream

472
00:34:40,552 --> 00:34:45,920
controller so i find this pattern of creating singletons in dart still quite

473
00:34:45,920 --> 00:34:49,920
hacky i think i've mentioned this before when we created the node service

474
00:34:49,920 --> 00:34:53,920
but it's something that we have to do so make sure our firebase cloud storage is

475
00:34:53,920 --> 00:34:58,800
actually a singleton okay so i'm gonna bring that code from my notes because i

476
00:34:58,800 --> 00:35:02,800
don't think it's actually worth writing this and it's not worth your time or my

477
00:35:02,800 --> 00:35:06,480
time but this is what you need to create so

478
00:35:06,480 --> 00:35:10,719
what is happening in here is that we have a private constructor

479
00:35:10,719 --> 00:35:13,760
then we're going to create a factory constructor which is the default

480
00:35:13,760 --> 00:35:18,159
constructor of our of our class firebase cloud storage right here

481
00:35:18,159 --> 00:35:23,360
and that is going to talk with a static final field which in turn calls this

482
00:35:23,360 --> 00:35:26,400
private initializer so

483
00:35:26,400 --> 00:35:33,512
in um in other languages like swift and rust it's it's a lot easier to create a

484
00:35:33,512 --> 00:35:36,552
singleton but this is a pattern you have to do so

485
00:35:36,552 --> 00:35:40,960
first create a private constructor then create a factory constructor that talks

486
00:35:40,960 --> 00:35:48,400
with a static final which in turn talks with the private constructor okay

487
00:35:48,400 --> 00:35:54,079
okay after you've taken care of that what we need to do is to grab all our

488
00:35:54,079 --> 00:35:58,320
notes from our cloud storage okay

489
00:35:58,320 --> 00:36:03,760
so let's just go ahead after this factory constructor we're gonna expose a

490
00:36:03,760 --> 00:36:07,192
field as the note as the caption at the bottom of the screen in the case call

491
00:36:07,192 --> 00:36:11,280
notes so i'm just going to say notes equal to

492
00:36:11,280 --> 00:36:15,679
we're just going to say firebase and firestore and it's going to auto import

493
00:36:15,679 --> 00:36:19,512
it for me so this is not a strange thing anymore to you as well

494
00:36:19,512 --> 00:36:22,719
and then i'm just going to say our own instance and then

495
00:36:22,719 --> 00:36:27,440
excuse me a collection called notes quotes as well

496
00:36:27,440 --> 00:36:33,192
okay so this is how you actually talk with a

497
00:36:33,192 --> 00:36:37,440
firestore so you can see that the signature of this collection is actually

498
00:36:37,440 --> 00:36:40,871
returning use something called a collection reference

499
00:36:40,871 --> 00:36:45,440
and you will soon see how we can extract our actual notes from this collection

500
00:36:45,440 --> 00:36:48,400
all right and also remember

501
00:36:48,400 --> 00:36:51,920
this isn't gonna work if you haven't actually created your notes collection

502
00:36:51,920 --> 00:36:55,679
so if you haven't done that if you forgot to do that please go ahead

503
00:36:55,679 --> 00:37:00,159
excuse me to go ahead and do that right now

504
00:37:00,159 --> 00:37:05,039
so the first thing we need to do is to create a function for creating new nodes

505
00:37:05,039 --> 00:37:08,400
all right excuse me

506
00:37:08,400 --> 00:37:14,960
so let's go ahead um into our project and create a function as the

507
00:37:14,960 --> 00:37:19,760
caption indicates i'm going to say void create new nodes in here

508
00:37:19,760 --> 00:37:25,192
and then we're going to say we need a an owner id

509
00:37:25,192 --> 00:37:30,480
so required string owner user id i believe we call it and then it's an

510
00:37:30,480 --> 00:37:35,760
async function okay and then in here since you have

511
00:37:35,760 --> 00:37:41,831
like a stream or a read write stream uh of all your notes and that's what this

512
00:37:41,831 --> 00:37:45,512
uh collection reference means it's it's not

513
00:37:45,512 --> 00:37:48,719
only a stream that you can read from but also it's a stream you can write to

514
00:37:48,719 --> 00:37:51,920
that's why that's why it's not called a stream okay

515
00:37:51,920 --> 00:37:55,831
because the stream is like you try to read only from it so

516
00:37:55,831 --> 00:37:59,192
and in here what we're gonna do is going to say notes add

517
00:37:59,192 --> 00:38:03,512
and you can see it literally says give me a map or a dictionary or however you

518
00:38:03,512 --> 00:38:07,599
want to call it an object that has keys and values

519
00:38:07,599 --> 00:38:11,192
what do you want me to store in a database and that's what nosql kind of

520
00:38:11,192 --> 00:38:16,639
means in here is document based it's it has no real structure of what you're

521
00:38:16,639 --> 00:38:21,360
adding everything that you add in here is going to be packaged into a document

522
00:38:21,360 --> 00:38:25,192
that is going to be stored in here with the fields and the values that you

523
00:38:25,192 --> 00:38:29,920
specified in here okay so let's go ahead and say we provide you

524
00:38:29,920 --> 00:38:34,000
with a with a document in here and the first

525
00:38:34,000 --> 00:38:38,871
field is owner user id field name and that's gonna auto import it from our

526
00:38:38,871 --> 00:38:42,639
constants from before remember and in here the value of this is going

527
00:38:42,639 --> 00:38:45,512
to be the owner user id and

528
00:38:45,512 --> 00:38:48,320
the text field text

529
00:38:48,320 --> 00:38:52,400
field name is just going to be an empty note

530
00:38:52,400 --> 00:38:57,119
for now okay and remember this is an async asynchronous function which

531
00:38:57,119 --> 00:39:00,639
returns a future of a document reference just like we have our collection

532
00:39:00,639 --> 00:39:04,552
reference in here but we actually don't want its results right now at least so

533
00:39:04,552 --> 00:39:08,079
we're just gonna wait on it so don't forget that weight because without doing

534
00:39:08,079 --> 00:39:13,679
the weight this function is not actually going to be invoked

535
00:39:13,679 --> 00:39:19,512
wow okay um what we need to do now then is to go to

536
00:39:19,512 --> 00:39:24,000
the next item excuse me which is

537
00:39:24,000 --> 00:39:27,440
getting notes by user id so the signature is going to be it's going to

538
00:39:27,440 --> 00:39:30,719
return an i

539
00:39:30,719 --> 00:39:34,871
of cloud note you given a user id so

540
00:39:34,871 --> 00:39:39,280
as we said every every node we store in our database uh

541
00:39:39,280 --> 00:39:42,960
is gonna have these two fields an owner and a text field so now what we want is

542
00:39:42,960 --> 00:39:46,871
to grab all the nodes for a specific user okay

543
00:39:46,871 --> 00:39:50,480
so let's go ahead and do that so it's called

544
00:39:50,480 --> 00:39:56,480
um get notes and it's quite a meaty function actually i can see in here

545
00:39:56,480 --> 00:40:04,400
so let's go ahead and do that right now let's say future of iterable um of cloud

546
00:40:04,400 --> 00:40:07,599
nodes and i think we have to import cloud node as well so pressing this

547
00:40:07,599 --> 00:40:10,231
button imports this for me if you're getting some errors it's probably

548
00:40:10,231 --> 00:40:14,400
because your editor hasn't been able to find cloud nodes so

549
00:40:14,400 --> 00:40:19,039
and then we're going to say get notes and a required parameter in here

550
00:40:19,039 --> 00:40:26,159
under user id okay and it's an asynchronous function so like that

551
00:40:26,159 --> 00:40:31,440
so what we're going to do then is to um a weights

552
00:40:31,440 --> 00:40:35,920
uh on our on our notes in here you see we can

553
00:40:35,920 --> 00:40:41,440
actually retrieve notes from our notes collection in here by saying notes where

554
00:40:41,440 --> 00:40:45,360
so we're gonna do a search inside the notes uh

555
00:40:45,360 --> 00:40:50,480
collection reference and that and you do that using the where clause okay

556
00:40:50,480 --> 00:40:54,719
and these things could actually increa like create an exception i believe the

557
00:40:54,719 --> 00:40:59,512
word clause could actually throw an exception whether it was this one

558
00:40:59,512 --> 00:41:03,039
it's not documenting here but i do believe that it could actually create an

559
00:41:03,039 --> 00:41:06,480
exception so let's go ahead and catch this so

560
00:41:06,480 --> 00:41:11,192
let's just say try we're gonna try and then should anything happen in here

561
00:41:11,192 --> 00:41:14,960
uh we're just gonna throw and could

562
00:41:14,960 --> 00:41:20,159
not get all nodes exception and this is going to auto import that from our

563
00:41:20,159 --> 00:41:24,320
previous code so i i shouldn't explain this over and over again you know

564
00:41:24,320 --> 00:41:29,679
already how that works okay so now that we have that we have a try

565
00:41:29,679 --> 00:41:35,831
and catch statement in there so let's just say we await on the notes

566
00:41:35,831 --> 00:41:40,480
and we say uh where clause and the word clause is

567
00:41:40,480 --> 00:41:45,360
going to say okay what is the field that you want to do

568
00:41:45,360 --> 00:41:50,552
your work search on and we want to search for all notes that are for this

569
00:41:50,552 --> 00:41:56,000
owner user id so let's just say owner user id field name

570
00:41:56,000 --> 00:42:00,552
should be equal to you see that's the parameter is equal to owner user id like

571
00:42:00,552 --> 00:42:03,360
that okay

572
00:42:03,360 --> 00:42:07,679
waiting on it you see sorry after doing a word this gives you a query but then

573
00:42:07,679 --> 00:42:11,512
you need to actually execute this query and you do that using its get function

574
00:42:11,512 --> 00:42:14,639
and you see it returns and

575
00:42:14,639 --> 00:42:19,440
let me see gets if i move my mouse over you see it returns a future of a query

576
00:42:19,440 --> 00:42:22,639
snapshot with all the objects that firestore could retrieve from the

577
00:42:22,639 --> 00:42:27,512
database okay so we have to get um

578
00:42:27,512 --> 00:42:31,039
what we do then is to do then

579
00:42:31,039 --> 00:42:35,679
that's that's how we work with future so event clause of the future allows you to

580
00:42:35,679 --> 00:42:40,871
return it what it does is it returns the value of that future to you and it

581
00:42:40,871 --> 00:42:44,960
allows you to return either a synchronous value inside the then

582
00:42:44,960 --> 00:42:48,320
function or you could actually return another future

583
00:42:48,320 --> 00:42:52,719
those who are familiar with node.js or just javascript in general

584
00:42:52,719 --> 00:42:57,920
or even swift they're familiar with how promises and how futures work so this is

585
00:42:57,920 --> 00:43:02,639
your chance of actually returning a value given this

586
00:43:02,639 --> 00:43:07,760
future that is returned to you okay so we're going to call this basically

587
00:43:07,760 --> 00:43:11,192
value at the moment and if i move my mouse over this you can see it says a

588
00:43:11,192 --> 00:43:15,512
query snapshot of these um potentially written

589
00:43:15,512 --> 00:43:19,679
red documents so in here what we're going to do is say

590
00:43:19,679 --> 00:43:24,400
docs which is all the documents that could be read

591
00:43:24,400 --> 00:43:27,920
and we're going to map all those and you can see in here

592
00:43:27,920 --> 00:43:31,760
if i call this doc if i move my mouse over it so it creates

593
00:43:31,760 --> 00:43:36,079
document snapshot whereas this one was a query snapshot this one is a query

594
00:43:36,079 --> 00:43:41,192
document snapshot of those fields okay so let's go in here and what we're going

595
00:43:41,192 --> 00:43:47,192
to do is to say we return inside this return a cloud node

596
00:43:47,192 --> 00:43:51,760
and we have these three fields okay we have the document id owner user id and

597
00:43:51,760 --> 00:43:55,920
the text so it's our chance basically to create

598
00:43:55,920 --> 00:44:00,960
an instance of our cloud node right now i'm gonna put the

599
00:44:00,960 --> 00:44:04,800
columns here so we get the formatting a little bit better

600
00:44:04,800 --> 00:44:08,400
and what we need to do is to get the document id and the way to do that is

601
00:44:08,400 --> 00:44:12,639
this dock has an id in here you can see it's a string so

602
00:44:12,639 --> 00:44:19,039
and the other one is to dock and then we have the data

603
00:44:19,039 --> 00:44:23,280
and let's just say owner user id field name

604
00:44:23,280 --> 00:44:26,320
and that's a string

605
00:44:26,320 --> 00:44:32,552
and in here we're gonna say then a doc data

606
00:44:32,552 --> 00:44:38,639
and we say text field name as a string now remember this looks very

607
00:44:38,639 --> 00:44:43,280
familiar where have we done this before yeah we've done this in cloud notes from

608
00:44:43,280 --> 00:44:46,871
snapshot and don't worry we're actually gonna use

609
00:44:46,871 --> 00:44:50,000
that function as soon we're gonna remove this return statement the way it's

610
00:44:50,000 --> 00:44:53,440
written but let's just write it like this right now okay so it's easier to

611
00:44:53,440 --> 00:44:56,552
understand

612
00:44:56,552 --> 00:45:03,039
wow all right um i think i think that should be it

613
00:45:03,039 --> 00:45:07,920
and so we have that excuse me

614
00:45:07,920 --> 00:45:11,512
and um

615
00:45:11,512 --> 00:45:15,512
yeah i believe i believe this is going to cover it for us right now so not much

616
00:45:15,512 --> 00:45:19,280
more to explain about this to be honest so

617
00:45:19,280 --> 00:45:23,360
we could also put a comma here to

618
00:45:23,360 --> 00:45:27,440
make the code a little bit more readable and we have the value then

619
00:45:27,440 --> 00:45:30,719
return and what we don't have to be honest with

620
00:45:30,719 --> 00:45:34,400
you here is this return statement in here

621
00:45:34,400 --> 00:45:38,719
or actually we created this like this so yeah it's an arrow function

622
00:45:38,719 --> 00:45:42,800
so we don't have to have a special return statement but if you don't like

623
00:45:42,800 --> 00:45:47,192
this kind of an arrow function you can grab your code that you've written up to

624
00:45:47,192 --> 00:45:50,800
this point like this and create

625
00:45:50,800 --> 00:45:56,320
curly brackets in here and instead use this syntax to say return

626
00:45:56,320 --> 00:46:02,231
instead okay so it kind of depends on what you prefer um

627
00:46:02,231 --> 00:46:05,831
i don't have a preference and i could use an error function the way it is so

628
00:46:05,831 --> 00:46:09,039
i'm just going to leave it like this okay

629
00:46:09,039 --> 00:46:12,871
and remember we're at the moment awaiting on this but we're not returning

630
00:46:12,871 --> 00:46:18,320
it so let's just return so this is all basically just a fancy way of us

631
00:46:18,320 --> 00:46:23,192
excuse me communicating with firebase firestore and reading documents and

632
00:46:23,192 --> 00:46:27,360
there's so much to explain that i can't go through all of these but i really

633
00:46:27,360 --> 00:46:30,159
suggest that you play with these functions yourself read the

634
00:46:30,159 --> 00:46:35,280
documentations and see why is it that i'm using where and then get

635
00:46:35,280 --> 00:46:39,192
so uh for that you need to read all the documentations

636
00:46:39,192 --> 00:46:44,719
that come with these functions so you understand them better

637
00:46:44,719 --> 00:46:51,440
okay um so that's getting notes by user id

638
00:46:51,440 --> 00:46:54,570
now what we need is also um

639
00:46:54,570 --> 00:46:58,159
[Music] what we need is

640
00:46:58,159 --> 00:47:02,800
the ability for us to be able to provide our notes list

641
00:47:02,800 --> 00:47:08,552
in here with a stream of notes for that particular user okay so

642
00:47:08,552 --> 00:47:13,920
um as you as you know now in our note service the way we have it is we are

643
00:47:13,920 --> 00:47:18,320
exposing this stream of list of database node and that's what we kind of also

644
00:47:18,320 --> 00:47:21,599
need to do with our firebase cloud storage like have a function that our

645
00:47:21,599 --> 00:47:25,119
nodes list excuse me can't subscribe to and read

646
00:47:25,119 --> 00:47:28,480
all the available nodes for that given user so let's go ahead and do that let's

647
00:47:28,480 --> 00:47:33,679
just call it a stream iterable and i have that function signature so i

648
00:47:33,679 --> 00:47:38,159
don't think i should actually write it manually but you may need to write it so

649
00:47:38,159 --> 00:47:42,800
so that's a function signature okay and in here what we're going to say is

650
00:47:42,800 --> 00:47:47,039
that we're going to go to our notes collection in here and get all the

651
00:47:47,039 --> 00:47:52,159
available snapshots let's see we have our notes and then we

652
00:47:52,159 --> 00:47:57,280
have our snapshots and we're gonna map that and

653
00:47:57,280 --> 00:48:01,599
let's just say yep gonna get our documents inside that

654
00:48:01,599 --> 00:48:05,440
snapshot and then we're gonna

655
00:48:05,440 --> 00:48:11,039
map that like that and let's just call it doc

656
00:48:11,039 --> 00:48:15,831
and in here we're gonna create a cloud note from snapshots

657
00:48:15,831 --> 00:48:21,440
of that doc like that and then in here

658
00:48:21,440 --> 00:48:24,871
we're going to say where

659
00:48:24,871 --> 00:48:28,480
that's our note and then we're going to say the notes

660
00:48:28,480 --> 00:48:31,920
owner user id i'm gonna actually write this and then i'm gonna tell you what

661
00:48:31,920 --> 00:48:34,800
i'm basically doing because there's quite a lot of code in here and like

662
00:48:34,800 --> 00:48:39,119
pausing to describe every little bit of this code could actually make it look

663
00:48:39,119 --> 00:48:43,512
more complicated than it is so and i'm just gonna then say owner user

664
00:48:43,512 --> 00:48:45,760
id okay

665
00:48:45,760 --> 00:48:50,400
but a semicolon there wait a minute

666
00:48:50,400 --> 00:48:54,960
this ends there and then a semicolon there yeah so let's see what is

667
00:48:54,960 --> 00:48:59,760
happening in here so this looks actually quite intimidating to look at but it's a

668
00:48:59,760 --> 00:49:04,960
very simple piece of code so what we're doing in here is if you want

669
00:49:04,960 --> 00:49:09,760
to grab a stream of data as it is evolving you want to be able to

670
00:49:09,760 --> 00:49:12,871
subscribe to all the changes happening to it then you need to use something

671
00:49:12,871 --> 00:49:17,512
called the snapshots as you can see this is a stream of query snapshot whereas

672
00:49:17,512 --> 00:49:21,280
where is a query itself okay and then get

673
00:49:21,280 --> 00:49:26,800
is a future so it just the get one literally takes a snapshot at that point

674
00:49:26,800 --> 00:49:31,440
in time and returns it to you but if you want to like keep hold of

675
00:49:31,440 --> 00:49:35,760
like if you want to be updated about all the changes live as they're happening to

676
00:49:35,760 --> 00:49:40,552
your data in the notes collection then you need to subscribe to the snapshots

677
00:49:40,552 --> 00:49:44,480
that's what we're doing okay so that's that first part with snapshots so we're

678
00:49:44,480 --> 00:49:47,512
literally saying that we want to see all the changes as they're happening live

679
00:49:47,512 --> 00:49:51,280
okay then it says okay i will give you all

680
00:49:51,280 --> 00:49:54,800
the changes that are happening live and that comes inside the query snapshot

681
00:49:54,800 --> 00:49:59,280
remember query snapshot from here remember query here

682
00:49:59,280 --> 00:50:02,552
oops inside the get so

683
00:50:02,552 --> 00:50:07,192
after this point is it's literally what we did in the get notes it's saying that

684
00:50:07,192 --> 00:50:11,599
okay here is a query snapshot and then we're saying okay there are documents in

685
00:50:11,599 --> 00:50:15,360
there and that's exactly what we're doing in here there's documents in the

686
00:50:15,360 --> 00:50:20,480
query snapshot and then we're mapping every document to a cloud note all right

687
00:50:20,480 --> 00:50:24,000
and then we're putting and where clause at the end

688
00:50:24,000 --> 00:50:29,192
that says we're only interested in notes whose u owner user id is the owner user

689
00:50:29,192 --> 00:50:34,552
id provided in here so without this word clause we're literally exposing all the

690
00:50:34,552 --> 00:50:38,800
notes um to the current user for all users in the

691
00:50:38,800 --> 00:50:43,599
system so that word clause is very important okay

692
00:50:43,599 --> 00:50:47,599
so and this work clause as you can as you can see it is actually inside

693
00:50:47,599 --> 00:50:53,512
flutter bin lip core iterable so that's nothing that is it's not a function that

694
00:50:53,512 --> 00:50:57,920
firestore has provided for us okay

695
00:50:57,920 --> 00:51:03,831
wow that was that was a lot of information

696
00:51:03,831 --> 00:51:08,000
okay let's go ahead and talk about updating you notes sorry updating

697
00:51:08,000 --> 00:51:12,719
existing notes so as we talked about it before if you have a note and you tap on

698
00:51:12,719 --> 00:51:16,079
it the way it works in our application right now is i can tap on this node and

699
00:51:16,079 --> 00:51:22,000
go and change its text like 22 and come back out and now it's changed to 22 okay

700
00:51:22,000 --> 00:51:25,360
so we need to also expose this functionality

701
00:51:25,360 --> 00:51:30,552
excuse me in inside our firebase cloud storage um

702
00:51:30,552 --> 00:51:34,320
as well so the function is going to be update node and it's going to take two

703
00:51:34,320 --> 00:51:38,000
parameters document id and a text so let's just say

704
00:51:38,000 --> 00:51:41,280
it's going to be a future of void and we're going to call it update node

705
00:51:41,280 --> 00:51:44,719
two parameters in here which are required i'm going to say required

706
00:51:44,719 --> 00:51:48,159
string and document id

707
00:51:48,159 --> 00:51:52,719
and then required string text

708
00:51:52,719 --> 00:51:56,871
and let's make this an async function

709
00:51:56,871 --> 00:52:00,231
all right then what we're going to do is we're going to put a try and catch in

710
00:52:00,231 --> 00:52:05,360
here in case we can't update the notes and then here we're just going to

711
00:52:05,360 --> 00:52:10,480
say throw could not update note exception okay and you may actually

712
00:52:10,480 --> 00:52:14,400
ignore this e if you want to as well so you could just do like this

713
00:52:14,400 --> 00:52:18,552
or you could just yeah i think actually we can't do an empty cache catch so you

714
00:52:18,552 --> 00:52:23,192
may do like this if you prefer but i prefer to do it like this

715
00:52:23,192 --> 00:52:26,231
all right and i can see that the formatting is a little bit messed up in

716
00:52:26,231 --> 00:52:29,760
here so i'm going to put a

717
00:52:29,760 --> 00:52:34,079
comma in there and inside the try statement in here now

718
00:52:34,079 --> 00:52:39,039
what we need to do is to go to our collections again in here and

719
00:52:39,039 --> 00:52:44,400
let's just say we get a doc you can see it says okay what is the path of that

720
00:52:44,400 --> 00:52:47,831
doc and we're going to say the document id

721
00:52:47,831 --> 00:52:52,831
is a path and then let's then go ahead and say

722
00:52:52,831 --> 00:52:57,119
um dot update and it says okay what is the actual

723
00:52:57,119 --> 00:53:00,719
update and inside the update what we're gonna do is gonna say

724
00:53:00,719 --> 00:53:05,360
text field name is this text all right

725
00:53:05,360 --> 00:53:09,039
so this may look a little bit crypt now also we have to wait on it may look a

726
00:53:09,039 --> 00:53:12,800
little bit cryptic in the what is doc dock id

727
00:53:12,800 --> 00:53:16,800
remember inside this function in here it says give me the path you see this

728
00:53:16,800 --> 00:53:20,871
parameter path and what we said is that inside the

729
00:53:20,871 --> 00:53:26,960
notes collection every document is going to have an identifier so we actually are

730
00:53:26,960 --> 00:53:30,800
going to go with the document id which we instantiated in here do you remember

731
00:53:30,800 --> 00:53:36,159
doc id is going to go into our cloud node document id so that's the path is

732
00:53:36,159 --> 00:53:42,000
notes slash that document id so that's how far firebase firestore it called and

733
00:53:42,000 --> 00:53:47,192
basically keeps hold of its paths it's the the path is in this case if i create

734
00:53:47,192 --> 00:53:50,000
a collection you see it says oh the collection is being created in the root

735
00:53:50,000 --> 00:53:54,719
folder and it has a collection id which in our case is called notes and we refer

736
00:53:54,719 --> 00:53:58,871
to it here so we've already constructed the notes path and every document inside

737
00:53:58,871 --> 00:54:03,760
it has its own id so it's going to be slash notes slash document id all right

738
00:54:03,760 --> 00:54:08,871
so i hope and i'd explain it for you

739
00:54:08,871 --> 00:54:13,599
let's now talk about deleting notes um so

740
00:54:13,599 --> 00:54:17,440
deleting notes actually very easy as well so we don't have to do so much with

741
00:54:17,440 --> 00:54:21,599
deleting nodes so it's very similar to updating nodes and

742
00:54:21,599 --> 00:54:26,159
we're just going to go ahead and use document id for deleting notes so

743
00:54:26,159 --> 00:54:30,400
as the caption indicates create a new feature of void in here and we're going

744
00:54:30,400 --> 00:54:34,231
to say delete node and we're going to go ahead and use a required string

745
00:54:34,231 --> 00:54:39,280
parameter called document id

746
00:54:39,280 --> 00:54:44,000
it sync and let's just do a try cache in here in case we can't delete the

747
00:54:44,000 --> 00:54:46,480
document and then we're going to say throw

748
00:54:46,480 --> 00:54:49,440
could not

749
00:54:49,440 --> 00:54:53,192
no notes exception i believe it's called

750
00:54:53,192 --> 00:54:56,231
yeah inside the

751
00:54:56,231 --> 00:55:00,400
try statement in here we are going to say notes

752
00:55:00,400 --> 00:55:03,440
doc with that document id

753
00:55:03,440 --> 00:55:06,480
all right and then we're just going to say delete

754
00:55:06,480 --> 00:55:10,960
i remember i believe this is actually future void so let's just wait on it all

755
00:55:10,960 --> 00:55:14,159
right so that's really all you have to do for

756
00:55:14,159 --> 00:55:18,639
delete so there's no magic in that it's very similar to update note except that

757
00:55:18,639 --> 00:55:24,639
it's not taking care of any like fields or anything like that

758
00:55:24,639 --> 00:55:30,400
wow huge huge chapter we've talked a lot about now uh about firestore and

759
00:55:30,400 --> 00:55:35,360
firebase storage so thank you so much for for sticking with

760
00:55:35,360 --> 00:55:38,960
me throughout this chapter and but if you remember i mean if you look at what

761
00:55:38,960 --> 00:55:43,599
we've done is not so much code it's 68 lines of code for me it may be less for

762
00:55:43,599 --> 00:55:47,192
you if you haven't done all these extra commas in here so

763
00:55:47,192 --> 00:55:52,400
maybe like 60 but there's a lot of new concepts so

764
00:55:52,400 --> 00:55:57,192
i thought that i had to i took the liberty of maybe even over

765
00:55:57,192 --> 00:55:59,760
explaining things but i think in the beginning it's very

766
00:55:59,760 --> 00:56:02,159
important just to understand how everything works

767
00:56:02,159 --> 00:56:04,079
um okay

768
00:56:04,079 --> 00:56:08,480
so great job we've done what we promised to do in this chapter we have actually

769
00:56:08,480 --> 00:56:11,831
tested to make sure that this is this is working we're gonna do this in the next

770
00:56:11,831 --> 00:56:15,920
chapter but as it's tradition we're gonna make sure that our work is

771
00:56:15,920 --> 00:56:20,960
committed to our uh github repository or bitbucket wherever

772
00:56:20,960 --> 00:56:25,039
you're using your uh or wherever you're hosting your git project so let's go

773
00:56:25,039 --> 00:56:30,320
ahead and do that i want to change the screen um

774
00:56:30,320 --> 00:56:34,639
layout a little bit i'm going to get rid of scrcpy

775
00:56:34,639 --> 00:56:38,480
oops and i'm going to close the screen

776
00:56:38,480 --> 00:56:43,360
make this bigger in this uh view and then i'm

777
00:56:43,360 --> 00:56:48,079
going to go to terminal okay excuse me let's have a look at our

778
00:56:48,079 --> 00:56:53,360
status there's quite a bit modified in here and also we've added a whole new

779
00:56:53,360 --> 00:56:56,231
folder so i'm just going to say git add all

780
00:56:56,231 --> 00:56:59,920
and let's have a look at our log the previous commit was step 18 and let's

781
00:56:59,920 --> 00:57:04,719
have a look at our tags i can see step 18 here as well

782
00:57:04,719 --> 00:57:09,360
let's commit now let's say let's say step 19

783
00:57:09,360 --> 00:57:13,599
excuse me again and then we have

784
00:57:13,599 --> 00:57:17,039
commits and we've committed and let's push those

785
00:57:17,039 --> 00:57:22,079
changes let's also tag and say step 19 in here

786
00:57:22,079 --> 00:57:28,871
okay and let's push our tags as well

787
00:57:28,871 --> 00:57:32,320
all right that's that as again is tradition at the end of

788
00:57:32,320 --> 00:57:35,679
every chapter we'll talk about what we have to discuss in the next chapter

789
00:57:35,679 --> 00:57:39,360
and as you can see it says uh we need to start using our new service instead of

790
00:57:39,360 --> 00:57:41,760
sqlite database so that's a little bit of a

791
00:57:41,760 --> 00:57:48,400
um like a turning point in our whole uh course in that we're gonna like toss our

792
00:57:48,400 --> 00:57:54,159
local storage and go away from that and start using our firebase cloud storage

793
00:57:54,159 --> 00:57:58,079
and so uh it's it's i think the next chapter is

794
00:57:58,079 --> 00:58:00,960
actually one of the most exciting chapters

795
00:58:00,960 --> 00:58:04,960
excuse me in this whole course so

796
00:58:04,960 --> 00:58:08,639
grab some refreshments if you want to and i'll see you there

797
00:58:08,639 --> 00:58:12,639
hello everyone and welcome to chapter 37 of this flutter course as you've seen in

798
00:58:12,639 --> 00:58:17,280
previous chapters we've started to move away from our local database storage and

799
00:58:17,280 --> 00:58:21,760
that was on sqlite and we started going more and more towards using firestore

800
00:58:21,760 --> 00:58:27,512
databases that are hosted by firebase so that was a very exciting point in our um

801
00:58:27,512 --> 00:58:32,000
in this course basically and for me as well as the as your instructor to go

802
00:58:32,000 --> 00:58:36,320
over to a cloud storage rather than using local

803
00:58:36,320 --> 00:58:40,552
uh storage and you see we used crud and as i mentioned in the previous chapter i

804
00:58:40,552 --> 00:58:43,440
really wanted to introduce you to crowd because it's such

805
00:58:43,440 --> 00:58:46,719
an important part of software development that you will sooner or

806
00:58:46,719 --> 00:58:52,552
later need to use crowd storage locally on your computer on your applications so

807
00:58:52,552 --> 00:58:55,440
um that was basically done

808
00:58:55,440 --> 00:58:59,119
on purpose so we first talked about local storage and then we move away from

809
00:58:59,119 --> 00:59:03,192
it and simply because uh even firebase in

810
00:59:03,192 --> 00:59:08,400
itself is some sort of a crud storage not some sort of it is crud but it is

811
00:59:08,400 --> 00:59:12,400
stored on the cloud and concepts of crop would have been a lot bit more difficult

812
00:59:12,400 --> 00:59:16,960
for me to explain to you had me not first implemented implemented them

813
00:59:16,960 --> 00:59:19,512
locally so um

814
00:59:19,512 --> 00:59:25,599
in the previous chapter we prepared our service which we i will bring the code

815
00:59:25,599 --> 00:59:29,512
here so we can have a look we we actually called it let's see

816
00:59:29,512 --> 00:59:34,159
it's inside our services cloud we call it firebase cloud storage

817
00:59:34,159 --> 00:59:38,480
right here and um we also talked about how we can

818
00:59:38,480 --> 00:59:42,400
basically start integrating in this firebase cloud search in our

819
00:59:42,400 --> 00:59:44,871
application and this is the chapter that we're gonna

820
00:59:44,871 --> 00:59:49,831
um make those plans concrete okay

821
00:59:49,831 --> 00:59:54,079
if you follow the chapters from the beginning chronologically in

822
00:59:54,079 --> 00:59:57,920
this course you'll know that what i like to do when i try to refactor things is

823
00:59:57,920 --> 01:00:01,119
to cut things from the source and by that i mean now we want to get rid of

824
01:00:01,119 --> 01:00:06,320
our local crud storage and what i like to do as a strategy is to go to

825
01:00:06,320 --> 01:00:10,320
uh the application and like either comment out that entire piece of code

826
01:00:10,320 --> 01:00:13,599
which has to do with our note service and the crowd exceptions

827
01:00:13,599 --> 01:00:16,480
or either we cut it out completely or we

828
01:00:16,480 --> 01:00:21,360
commented out okay so let's go ahead and deal with that now

829
01:00:21,360 --> 01:00:26,000
so i'm gonna change the screen layout a little bit here and i'm then gonna go

830
01:00:26,000 --> 01:00:30,960
into our notes service so please go to the note service and select the entire

831
01:00:30,960 --> 01:00:37,440
code in here and comment it out so that's for note service and then

832
01:00:37,440 --> 01:00:40,800
we're also going to go to our i'm going to save this file and then we're going

833
01:00:40,800 --> 01:00:46,079
to go to crowd exceptions select the entire content and comment it out please

834
01:00:46,079 --> 01:00:49,360
so that's that um another thing that we need to take

835
01:00:49,360 --> 01:00:56,719
care of is um inside our new firebase cloud storage inside uh get's notes what

836
01:00:56,719 --> 01:01:00,800
we forgot to do is where i actually didn't forget to do i intentionally left

837
01:01:00,800 --> 01:01:05,920
it like this so that we could get the basic idea is as you can see here we we

838
01:01:05,920 --> 01:01:10,231
are inside this uh get notes function as the caption indicates at the bottom of

839
01:01:10,231 --> 01:01:14,400
the screen we are returning an instance of our cloud node use using its

840
01:01:14,400 --> 01:01:18,719
constructor its default constructor however if you remember from this cloud

841
01:01:18,719 --> 01:01:23,280
node snapshot we have a convenient constructor that can create

842
01:01:23,280 --> 01:01:28,480
an instance of our cloud node using a document snapshot and that's exactly

843
01:01:28,480 --> 01:01:32,320
what we're getting in here you see query document snapshot but we're not using

844
01:01:32,320 --> 01:01:36,480
that convenient constructor and that's exactly what we're going to fix

845
01:01:36,480 --> 01:01:40,079
right now so excuse me

846
01:01:40,079 --> 01:01:46,639
let's go in here where we have the dock and i'm going to change this code to go

847
01:01:46,639 --> 01:01:51,512
from a normal function to an error function and then in here i'm gonna say

848
01:01:51,512 --> 01:01:58,552
we return a cloud node from snapshot of that dock okay just like that

849
01:01:58,552 --> 01:02:03,039
i press s to save this file command sorry and you can also remove that comma

850
01:02:03,039 --> 01:02:06,719
at the end so you either leave it like this with a comma at the end so it

851
01:02:06,719 --> 01:02:10,231
becomes multi-line or you remove the comma like i do in here and it just

852
01:02:10,231 --> 01:02:16,480
becomes one line all right okay

853
01:02:16,480 --> 01:02:19,599
that part is done

854
01:02:19,599 --> 01:02:26,159
now what we need to do um is to be inside this

855
01:02:26,159 --> 01:02:29,280
firebase cloud storage and you can see in here

856
01:02:29,280 --> 01:02:33,119
inside the functionality uh sorry inside the create new node at the moment we're

857
01:02:33,119 --> 01:02:37,831
saying void so we're not returning the node that we're actually creating and we

858
01:02:37,831 --> 01:02:42,079
need to fix this so we need to actually create the new new

859
01:02:42,079 --> 01:02:46,159
node and return it so let's go in here and i'm just going to say final

860
01:02:46,159 --> 01:02:49,440
make the code a little bit bigger final

861
01:02:49,440 --> 01:02:54,159
document is equal to a weight on this

862
01:02:54,159 --> 01:02:59,280
and if you look at your document now you can see it is a document actually

863
01:02:59,280 --> 01:03:02,320
you may not be able to see it now you can see it probably it is a document

864
01:03:02,320 --> 01:03:06,871
reference okay so it's a reference as its name indicates is not the snapshot

865
01:03:06,871 --> 01:03:12,871
in order to get the snapshot we need to just issue the get function on it

866
01:03:12,871 --> 01:03:18,000
so let's just say final fetched note is a wait

867
01:03:18,000 --> 01:03:23,192
on this document get and you'll see now fetch note is the

868
01:03:23,192 --> 01:03:28,159
actual snapshot that will contain the data of that document all right

869
01:03:28,159 --> 01:03:32,079
so in here we will just return a cloud node

870
01:03:32,079 --> 01:03:35,192
like this or

871
01:03:35,192 --> 01:03:39,440
let's see cloud node with these parameters

872
01:03:39,440 --> 01:03:43,039
the document id is going to be the fetched note

873
01:03:43,039 --> 01:03:46,719
id the owner user user id is provided to

874
01:03:46,719 --> 01:03:51,192
our function already and the text is just going to be empty like this and

875
01:03:51,192 --> 01:03:57,192
also make sure that uh in here we don't return void except we return a future of

876
01:03:57,192 --> 01:04:00,159
cloud nodes okay so

877
01:04:00,159 --> 01:04:06,480
save your file after that and this part's also done

878
01:04:06,480 --> 01:04:08,639
okay um

879
01:04:08,639 --> 01:04:11,920
now we need to make sure just i'm just gonna

880
01:04:11,920 --> 01:04:16,800
close uh all these tabs and as the caption indicates we're gonna go to our

881
01:04:16,800 --> 01:04:20,871
create update notes view and fix that up so it can

882
01:04:20,871 --> 01:04:26,000
talk with our new service which is the cloud firebase storage i think we call

883
01:04:26,000 --> 01:04:28,960
it firebase cloud storage sorry about that

884
01:04:28,960 --> 01:04:32,871
so i'm going to press command p in visual studio code on mac or control p

885
01:04:32,871 --> 01:04:38,719
and linux and windows and then just say create what's it called

886
01:04:38,719 --> 01:04:44,320
create update node view okay and here as the caption indicates we

887
01:04:44,320 --> 01:04:49,039
need to import three things our cloud node dart file

888
01:04:49,039 --> 01:04:53,039
the cloud storage exceptions dark file and the firebase cloud storage dart

889
01:04:53,039 --> 01:04:56,719
files so those are at the moment inside the um

890
01:04:56,719 --> 01:05:01,039
let's see they're inside services cloud folder

891
01:05:01,039 --> 01:05:05,039
so i'm going to go in here i'm just going to say import package my nodes and

892
01:05:05,039 --> 01:05:09,440
then services cloud

893
01:05:09,440 --> 01:05:12,800
so we have first cloud node so let's import that

894
01:05:12,800 --> 01:05:17,512
i'm going to copy this path and then use it again to import cloud storage

895
01:05:17,512 --> 01:05:22,159
exceptions like that and then we also need cloud

896
01:05:22,159 --> 01:05:26,800
what's it called firebase cloud storage like that so that's

897
01:05:26,800 --> 01:05:30,552
you will need to also do these three imports if you haven't called your

898
01:05:30,552 --> 01:05:33,760
application my notes then this package is going to be different it's going to

899
01:05:33,760 --> 01:05:41,920
be packaged the name of your application and then services etc etc okay

900
01:05:41,920 --> 01:05:44,552
okay um

901
01:05:44,552 --> 01:05:48,800
the next thing that we have to do as you can see in the captions here

902
01:05:48,800 --> 01:05:53,440
we need to make sure that our create update node views state which is right

903
01:05:53,440 --> 01:05:57,760
here which at the moment contains our node service as its node service it has

904
01:05:57,760 --> 01:06:01,920
to move towards using the firebase cloud storage

905
01:06:01,920 --> 01:06:04,871
so i'm going to go to my notes as well in here just to make sure i'm giving you

906
01:06:04,871 --> 01:06:09,280
all the information that you need so let's change our node service in here

907
01:06:09,280 --> 01:06:15,039
and call it now firebase cloud storage and that's the service okay

908
01:06:15,039 --> 01:06:20,871
and in your init function then you need to also make sure that we get the

909
01:06:20,871 --> 01:06:25,679
singleton instance of our firebase cloud storage in the init state function all

910
01:06:25,679 --> 01:06:29,360
right also remember this note now is not a

911
01:06:29,360 --> 01:06:33,679
database note anymore but it's actually a cloud node so let's call that cloud

912
01:06:33,679 --> 01:06:38,400
node as well all right and and now we can see we have an unused

913
01:06:38,400 --> 01:06:42,320
import in here so i'm just going to remove that since we don't need that

914
01:06:42,320 --> 01:06:46,960
unused import then the next thing we need to do is as

915
01:06:46,960 --> 01:06:50,552
a caption in the case we have to go to create or get existing node and we have

916
01:06:50,552 --> 01:06:55,760
to make sure that it works with the cloud storage so let's go in here

917
01:06:55,760 --> 01:06:58,552
perfect so in here

