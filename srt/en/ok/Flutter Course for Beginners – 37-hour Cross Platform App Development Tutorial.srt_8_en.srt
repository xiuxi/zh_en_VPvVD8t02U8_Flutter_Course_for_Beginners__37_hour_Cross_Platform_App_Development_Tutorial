1
01:06:58,552 --> 01:07:02,640
we're not going to return a database node anymore and we're going to say it

2
01:07:02,640 --> 01:07:07,280
returns a cloud node and here we expect a parameter of type

3
01:07:07,280 --> 01:07:12,960
cloud nodes optionally that can be passed to our routes

4
01:07:12,960 --> 01:07:15,440
and here we're not going to be working with

5
01:07:15,440 --> 01:07:18,960
you see here we were working with database users before because our

6
01:07:18,960 --> 01:07:22,800
application was actually creating new users in the local database and

7
01:07:22,800 --> 01:07:27,920
associating notes with those users thankfully that now that we're going to

8
01:07:27,920 --> 01:07:32,720
now that we're using firestore um database we don't have to play with

9
01:07:32,720 --> 01:07:37,512
users anymore because remember users are already managed by firebase

10
01:07:37,512 --> 01:07:40,480
so what we can do is just remove that owner

11
01:07:40,480 --> 01:07:45,192
completely and now we await on our node service and

12
01:07:45,192 --> 01:07:49,920
we just say create new node and then we need an owner user id and remember this

13
01:07:49,920 --> 01:07:55,512
owner user id is going to be the actual current user's user id so let's just say

14
01:07:55,512 --> 01:08:00,800
final user id is current user dot id okay

15
01:08:00,800 --> 01:08:07,192
and then in here we just say user id okay and we're storing that note in here

16
01:08:07,192 --> 01:08:10,720
as we were doing before so we didn't change that code at all and then we're

17
01:08:10,720 --> 01:08:17,192
seeing new notes also need to be returned

18
01:08:17,192 --> 01:08:21,360
so now we need to fix the creation of our new node and that's something that

19
01:08:21,360 --> 01:08:24,640
we've already done so that there shouldn't be a separate point really in

20
01:08:24,640 --> 01:08:29,192
the caption so we've already done that nothing to take care of right now

21
01:08:29,192 --> 01:08:34,160
we also need to take care of now our deleting a notes you remember when we go

22
01:08:34,160 --> 01:08:38,000
out out of the node creation view if the node's text

23
01:08:38,000 --> 01:08:43,512
was empty we actually delete that node from the database okay right now and now

24
01:08:43,512 --> 01:08:48,320
we need to go towards our node service and also delete it by using the new

25
01:08:48,320 --> 01:08:51,832
function which is called delete node and let's see what it takes as a

26
01:08:51,832 --> 01:09:00,160
parameter it takes a document id and that's our node's document id okay

27
01:09:00,160 --> 01:09:04,872
so that's for delete note and now we have another function very useful

28
01:09:04,872 --> 01:09:09,760
function that saves the notes and when we go out of the screen if the if that

29
01:09:09,760 --> 01:09:13,832
note if the text for that note is not empty

30
01:09:13,832 --> 01:09:17,760
very similar to delete node but it kind of does the opposite make sure that the

31
01:09:17,760 --> 01:09:21,440
node is present and also that the text to the text editing controller is set if

32
01:09:21,440 --> 01:09:25,192
it's not not empty meaning that the text is set

33
01:09:25,192 --> 01:09:30,232
then we update the current node so let's then await on it and in here we just say

34
01:09:30,232 --> 01:09:32,872
update node

35
01:09:32,872 --> 01:09:37,760
those new parameters the document id is going to be our notes

36
01:09:37,760 --> 01:09:42,400
document id and the text in here let's see

37
01:09:42,400 --> 01:09:46,800
oh we have to just put a comma in there and then we're good to go

38
01:09:46,800 --> 01:09:54,800
so that's updating the save node if text not empty function

39
01:09:54,800 --> 01:09:58,552
okay now we need to go to our note list view

40
01:09:58,552 --> 01:10:01,280
and i'm going to do the same thing in my notes

41
01:10:01,280 --> 01:10:04,000
excuse me

42
01:10:04,000 --> 01:10:09,600
and let's go ahead and do that do we have any errors in here yes i can

43
01:10:09,600 --> 01:10:13,360
see i'm getting an error for update note and i don't really know what the problem

44
01:10:13,360 --> 01:10:17,440
actually is let's see document id is required okay and i can

45
01:10:17,440 --> 01:10:21,512
see that this is something also we need to update so let's go to your text

46
01:10:21,512 --> 01:10:25,512
controller listener function as well and update

47
01:10:25,512 --> 01:10:28,960
the note there as well you can see it's doing this so

48
01:10:28,960 --> 01:10:35,512
now we now have to say update note and we have a note document id and then

49
01:10:35,512 --> 01:10:39,600
we've got text so please ensure that you're you've taken care of the text

50
01:10:39,600 --> 01:10:44,320
controller listeners functionality as well

51
01:10:44,320 --> 01:10:46,872
um

52
01:10:46,872 --> 01:10:51,192
and i'm just making sure that that's exactly what we've done in my notes as

53
01:10:51,192 --> 01:10:54,080
well all right

54
01:10:54,080 --> 01:10:57,832
so that that was one step back um now let's go and do what the caption at the

55
01:10:57,832 --> 01:11:02,000
bottom screen says let's go to our notes list view um

56
01:11:02,000 --> 01:11:06,232
notes list view and as you can see at the moment we're working with a list of

57
01:11:06,232 --> 01:11:10,400
database notes and we don't want to do this anymore we actually want to work

58
01:11:10,400 --> 01:11:15,360
with iterables because that's like the default way that firebase actually works

59
01:11:15,360 --> 01:11:18,320
it works with eye troubles it doesn't work with lists so

60
01:11:18,320 --> 01:11:22,320
and iterables are actually better because they're like lazy lists so let's

61
01:11:22,320 --> 01:11:27,512
change this to an iterable of a cloud node like this and also we change our

62
01:11:27,512 --> 01:11:33,600
node callback to be a cloud node if i can spell and also we have to also

63
01:11:33,600 --> 01:11:36,800
import this so i'm just going to import cloud node so that error is going to go

64
01:11:36,800 --> 01:11:40,872
away i'm going to remove this uh import statement from there

65
01:11:40,872 --> 01:11:45,120
now when you're using eye troubles you can't do a subscript like we're doing in

66
01:11:45,120 --> 01:11:51,280
here you have to say object element at and then you have your index and that's

67
01:11:51,280 --> 01:11:54,800
pretty much what we're doing in here so now if you've made this change in your

68
01:11:54,800 --> 01:11:59,680
node callback you made this change from list to iterable and you change this

69
01:11:59,680 --> 01:12:04,000
from database node to cloud node and also change this function from a

70
01:12:04,000 --> 01:12:08,440
subscript to element add then you shouldn't have any errors in your notes

71
01:12:08,440 --> 01:12:13,120
listview.dart file either

72
01:12:13,120 --> 01:12:18,080
now we're going to go to a little bit juicier changes that we have to make to

73
01:12:18,080 --> 01:12:22,080
ensure that our application works as expected with the cloud

74
01:12:22,080 --> 01:12:24,640
storage

75
01:12:24,640 --> 01:12:32,000
let's go to notes view notes view like here and you'll see now

76
01:12:32,000 --> 01:12:36,480
um actually i can see my notes here uh

77
01:12:36,480 --> 01:12:39,832
we have to do a few updates in here because we're not going to work with

78
01:12:39,832 --> 01:12:42,552
node service anymore since it doesn't exist

79
01:12:42,552 --> 01:12:46,232
but one bigger change that we have to make

80
01:12:46,232 --> 01:12:50,160
is as you can see in the cash offset remove the future builder

81
01:12:50,160 --> 01:12:54,640
why is that here is the future builder the way it is today

82
01:12:54,640 --> 01:12:59,440
you can see the future builders actual future is to get or create a user but do

83
01:12:59,440 --> 01:13:04,080
we really need that anymore and the answer is obviously no because

84
01:13:04,080 --> 01:13:07,680
previously we were using this feature builder to create a user in our database

85
01:13:07,680 --> 01:13:11,120
so that we can associate notes with that user

86
01:13:11,120 --> 01:13:16,232
however since now we're going towards firestore and uh

87
01:13:16,232 --> 01:13:21,512
cloud storage the users like users in your application are managed by firebase

88
01:13:21,512 --> 01:13:26,480
itself so you don't have to create them in that sense when a user

89
01:13:26,480 --> 01:13:29,832
has logged in and landed on the main interface of your application that

90
01:13:29,832 --> 01:13:34,552
firebase user already exists so you don't have to do anything so we need to

91
01:13:34,552 --> 01:13:39,440
remove this future builder so i'm just going to press command dot on it and

92
01:13:39,440 --> 01:13:43,040
sometimes visual studio code can actually help with that to remove it but

93
01:13:43,040 --> 01:13:46,800
it's not helping at the moment so what i'm going to do in this case as

94
01:13:46,800 --> 01:13:50,872
you can see i want to just grab this stream builder in here

95
01:13:50,872 --> 01:13:55,360
just grab the stream builder without the return statement okay

96
01:13:55,360 --> 01:13:59,512
and find the end of that stream builder visual studio code is helping me very

97
01:13:59,512 --> 01:14:03,512
nicely with this line in here and saying this is the end of stream builder so i'm

98
01:14:03,512 --> 01:14:08,232
literally just gonna do that and cut it okay so now

99
01:14:08,232 --> 01:14:12,080
what you should be ending up with is your future builder like that looks like

100
01:14:12,080 --> 01:14:17,120
this and then i'm gonna basically kill that future builder like this okay so

101
01:14:17,120 --> 01:14:22,160
then paste your stream builder in the place that your future builder

102
01:14:22,160 --> 01:14:27,280
was before so now your body the body of your um

103
01:14:27,280 --> 01:14:31,512
of your scaffold should just be the stream builder okay so basically we just

104
01:14:31,512 --> 01:14:36,872
got rid of the future builder all right

105
01:14:36,872 --> 01:14:41,600
so that was that what we need to do then is to make sure also in here that we're

106
01:14:41,600 --> 01:14:47,192
not using that that we're not exposing a user email you see from now on when we

107
01:14:47,192 --> 01:14:52,320
create and notes read notes et cetera we're going to use a user id the user's

108
01:14:52,320 --> 01:14:58,400
identifier so we're not going to work with our um with the email so

109
01:14:58,400 --> 01:15:01,680
i'm also going to go to my note sorry about that so um

110
01:15:01,680 --> 01:15:05,680
as the caption at the bottom of the screen indicates let's go and change

111
01:15:05,680 --> 01:15:10,480
this to user id and we're just gonna go off service

112
01:15:10,480 --> 01:15:15,360
firebase current user and then we're gonna get the id okay so that's our user

113
01:15:15,360 --> 01:15:21,040
id and the rest now is kind of history we

114
01:15:21,040 --> 01:15:26,232
need to ensure that this view now works with our

115
01:15:26,232 --> 01:15:30,400
new node service so let's remove this import from here

116
01:15:30,400 --> 01:15:35,600
and now let's say this note service it is a firebase cloud storage so we're

117
01:15:35,600 --> 01:15:40,160
going to say firebase cloud storage and in here we just add that and

118
01:15:40,160 --> 01:15:44,080
initialize that we say firebase cloud storage which is uh

119
01:15:44,080 --> 01:15:48,800
if you remember correctly um it is now a singleton so we're not creating new

120
01:15:48,800 --> 01:15:54,232
instances basically by doing this although it looks like we're doing that

121
01:15:54,232 --> 01:15:58,640
so inside our stream builder now what we're gonna do is not gonna say all

122
01:15:58,640 --> 01:16:01,280
notes anymore like that we're going to say

123
01:16:01,280 --> 01:16:04,552
all notes but we're going to pass the owner user

124
01:16:04,552 --> 01:16:10,800
id and that owner user id remember we're storing it as a getter call user id

125
01:16:10,800 --> 01:16:16,320
and for all our notes in here remember this all notes is going to give us an

126
01:16:16,320 --> 01:16:20,080
eye trouble if i move my mouse over there you can see it's an eye trouble of

127
01:16:20,080 --> 01:16:24,000
cloud node so it's not a list anymore so let's say i trouble

128
01:16:24,000 --> 01:16:29,680
and it's a cloud node in here okay

129
01:16:29,680 --> 01:16:32,720
and i can i can see it's complaining that

130
01:16:32,720 --> 01:16:36,960
cloud node can't be found so i'm going to import cloud node like that

131
01:16:36,960 --> 01:16:41,512
upon deleting in here we also need to make sure that we call the new one that

132
01:16:41,512 --> 01:16:44,512
says delete node and in this case we just say

133
01:16:44,512 --> 01:16:48,552
node.document id all right

134
01:16:48,552 --> 01:16:52,800
so so that is that seems to be working fine

135
01:16:52,800 --> 01:16:57,832
but what we got here is a subtype of type firebase cloud storage node service

136
01:16:57,832 --> 01:17:01,832
and we're getting that in where are we getting that error let's

137
01:17:01,832 --> 01:17:07,192
see if we can find that in here node 2 and that's okay and

138
01:17:07,192 --> 01:17:10,232
that's because we probably don't have to do a hot restart and doing a hot restart

139
01:17:10,232 --> 01:17:14,720
could kill my scr cpy and i can see that it did that but that's fine too i'm

140
01:17:14,720 --> 01:17:19,120
gonna bring up scr cpy like this

141
01:17:19,120 --> 01:17:22,160
and i'm gonna

142
01:17:22,160 --> 01:17:26,320
do this and i'm gonna run the application now from scratch and this is

143
01:17:26,320 --> 01:17:29,680
simply because i mean this is a state management in your application because

144
01:17:29,680 --> 01:17:35,600
we had a node service from before and we do a hot hot reload but hot reload all

145
01:17:35,600 --> 01:17:39,040
of a sudden says oops this node service that used to be node

146
01:17:39,040 --> 01:17:42,480
service is not node service anymore it's a firebase cloud storage so what should

147
01:17:42,480 --> 01:17:45,760
i do with it so it's just it's like

148
01:17:45,760 --> 01:17:49,120
state residue that is kind of like staying in your application and you

149
01:17:49,120 --> 01:17:53,440
can't clean it until you do a hot restart and when i did a hot restart i

150
01:17:53,440 --> 01:17:58,000
have a problem with scr cpy so i can't i can't do anything about

151
01:17:58,000 --> 01:18:01,040
that problem but let's just run the application from scratch and just make

152
01:18:01,040 --> 01:18:06,960
sure everything is working as expected all right now i can see that i've logged

153
01:18:06,960 --> 01:18:11,832
into the application and i have no notes all right

154
01:18:11,832 --> 01:18:15,600
let me bring up the caption for the next uh

155
01:18:15,600 --> 01:18:19,280
topic to talk about so what we need now you can see notes have disappeared and

156
01:18:19,280 --> 01:18:23,512
this is a good sign because that kind of means that we have moved away from our

157
01:18:23,512 --> 01:18:27,832
crotch storage and now we're not reading those notes that were in the crotch

158
01:18:27,832 --> 01:18:32,320
storage anymore so let's go and create some notes so i

159
01:18:32,320 --> 01:18:35,912
want to press the plus button in here and i'm just going to say note

160
01:18:35,912 --> 01:18:39,912
number one so if i press the back button in here i can see that node number one

161
01:18:39,912 --> 01:18:43,600
is appearing here and let's go create another one and let's say note number

162
01:18:43,600 --> 01:18:47,680
two great note number one and number two if

163
01:18:47,680 --> 01:18:52,552
i press this number two and then change it to note number three you can see that

164
01:18:52,552 --> 01:18:56,320
those changes are immediately taking effect okay

165
01:18:56,320 --> 01:19:01,512
so let me log out from this user and let's log in with i don't know really

166
01:19:01,512 --> 01:19:07,280
which user i was logged in with before i'll log in with this user i can see

167
01:19:07,280 --> 01:19:09,832
that user has no notes i'm just going to say

168
01:19:09,832 --> 01:19:16,080
van dot's first note go out and then say run dots

169
01:19:16,080 --> 01:19:20,552
second note and go out so now if i log out from this

170
01:19:20,552 --> 01:19:26,960
one.user in here and if i say i want to log in with another user

171
01:19:26,960 --> 01:19:30,400
so like this i can see my note one and three are

172
01:19:30,400 --> 01:19:33,280
displayed here so i can just say note number one and two

173
01:19:33,280 --> 01:19:38,800
and if i log out from this user and log in again with vanbot i should be

174
01:19:38,800 --> 01:19:42,160
able to see van dot's notes

175
01:19:42,160 --> 01:19:47,512
through barbaz great so that seems to be working now

176
01:19:47,512 --> 01:19:51,600
what we could do i mean if you're just like me and you're curious how this data

177
01:19:51,600 --> 01:19:55,760
is actually stored in firebase we could do that so let me open up a window in

178
01:19:55,760 --> 01:20:02,232
here and say console and let's go ahead into our project on

179
01:20:02,232 --> 01:20:07,912
firebase console and let's go in

180
01:20:07,912 --> 01:20:12,320
our database and let's have a look in here as you can

181
01:20:12,320 --> 01:20:16,800
see there are four documents two documents per person per user and you

182
01:20:16,800 --> 01:20:21,600
can see these two have the same user id and that's the that's the van load user

183
01:20:21,600 --> 01:20:27,280
you can see it it starts with a and c and the other two nodes they have

184
01:20:27,280 --> 01:20:33,120
another user id which is for pixelity av remember this a and c user what we can

185
01:20:33,120 --> 01:20:37,760
do now is actually go in here to the authentication section and have a look

186
01:20:37,760 --> 01:20:41,512
at this vendor user and you can see the user ids a and c

187
01:20:41,512 --> 01:20:46,400
and the other user actually has erd so if we go back to firestore and look at

188
01:20:46,400 --> 01:20:50,640
the two last notes created by pixelity you can see

189
01:20:50,640 --> 01:20:55,512
that their user id is erd you can see here all right

190
01:20:55,512 --> 01:20:59,760
so very well done congratulations in two chapters we've been able to go away from

191
01:20:59,760 --> 01:21:06,720
local uh crud storage to firebase huge feed so well done

192
01:21:06,720 --> 01:21:10,720
what we need to do now is i was we as we usually do in other chapters is we're

193
01:21:10,720 --> 01:21:15,512
gonna commit our work and also tag it so i'm gonna do some reshuffling on the

194
01:21:15,512 --> 01:21:23,760
screen here and grab visual studio code here

195
01:21:23,760 --> 01:21:27,440
make the size a little bit bigger kind of ginormous but that's okay

196
01:21:27,440 --> 01:21:33,600
and let's have a look at our log and we can see the last step was step 19.

197
01:21:33,600 --> 01:21:38,640
let's do a git status and there were a lot of files modified nothing new

198
01:21:38,640 --> 01:21:42,320
so i'm just going to say git add all git commit

199
01:21:42,320 --> 01:21:47,040
step 20 and push this

200
01:21:47,040 --> 01:21:50,960
let's have a look at our logs we have step 19 and step 20 now and if you look

201
01:21:50,960 --> 01:21:56,640
at our tags we have up to step 19 up to and including step 19. so let's

202
01:21:56,640 --> 01:22:02,960
tag this as step 20 and then push our tags

203
01:22:02,960 --> 01:22:06,400
all right that's great as is tradition again at the end of

204
01:22:06,400 --> 01:22:11,120
every chapter i talk about what we have to discuss in the chapter that follows

205
01:22:11,120 --> 01:22:16,232
and um we've talked quite a lot about now uh

206
01:22:16,232 --> 01:22:20,160
allowing the user to store their own notes in the application but

207
01:22:20,160 --> 01:22:24,640
it would be a lot more fun if he allowed the user to also share those notes with

208
01:22:24,640 --> 01:22:28,960
somebody that they know about somebody that they know like a friend or

209
01:22:28,960 --> 01:22:33,600
a family member so that's what we're gonna talk about in the next chapter

210
01:22:33,600 --> 01:22:37,912
sharing notes so i'll see you there hello and welcome to chapter 38 of this

211
01:22:37,912 --> 01:22:42,160
flutter course in previous chapters we've been talking quite a bit about how

212
01:22:42,160 --> 01:22:46,640
we sync our notes with our firestore database and how we can read

213
01:22:46,640 --> 01:22:51,440
those notes back and update them it'd be really fun also to be able to

214
01:22:51,440 --> 01:22:54,400
share our notes and that's exactly what we're going to take care of in this

215
01:22:54,400 --> 01:22:57,760
chapter in order to do that we need to use a

216
01:22:57,760 --> 01:23:03,120
plugin called share plus and share plus is a plugin plugin as i've

217
01:23:03,120 --> 01:23:07,832
mentioned now so it is not a package where a package extends the existing

218
01:23:07,832 --> 01:23:13,832
capabilities of flutter into new heights a plugin takes a completely new route

219
01:23:13,832 --> 01:23:16,400
and basically

220
01:23:16,400 --> 01:23:19,912
uh goes well beyond beyond what flutter

221
01:23:19,912 --> 01:23:25,680
internally can deliver and a packet a plug-in will need to be developed by

222
01:23:25,680 --> 01:23:28,400
excuse me a developer or a set of developers

223
01:23:28,400 --> 01:23:31,360
and it needs to be written specifically for

224
01:23:31,360 --> 01:23:34,960
various platforms that that plugin wants to support for instance ios android so a

225
01:23:34,960 --> 01:23:39,832
developer has to go and write some code for ios for android web etc etc in order

226
01:23:39,832 --> 01:23:42,960
for that plugin to work on those platforms

227
01:23:42,960 --> 01:23:47,192
now here we're going to use the share plus plugin and the share plus plugin is

228
01:23:47,192 --> 01:23:52,480
developed by the flutter community so what we're going to have a look at here

229
01:23:52,480 --> 01:23:56,552
is to go into pubdev

230
01:23:56,552 --> 01:24:00,640
so i'm gonna do that right now

231
01:24:00,640 --> 01:24:07,120
excuse me for my throat and in pub dev we're gonna search for uh share plus

232
01:24:07,120 --> 01:24:09,912
after you've done that you'll see that you'll end up here and it is by a

233
01:24:09,912 --> 01:24:13,512
verified developer called fluttercommunity.dev so you can tap on

234
01:24:13,512 --> 01:24:17,760
that and you can get some more information about the developer here

235
01:24:17,760 --> 01:24:22,400
and you can see that it supports android ios linux mac os web and windows so what

236
01:24:22,400 --> 01:24:27,600
more could you ask for um so it's a free package that you can

237
01:24:27,600 --> 01:24:32,232
use in your application and you can see that all you need to do is just to let's

238
01:24:32,232 --> 01:24:36,552
go to ins installing and you see you have to say flutter pop

239
01:24:36,552 --> 01:24:40,720
add share plus and that's exactly what we're gonna do

240
01:24:40,720 --> 01:24:44,960
now in our application so i'm gonna bring our app here

241
01:24:44,960 --> 01:24:49,040
and let's go ahead excuse me again

242
01:24:49,040 --> 01:24:53,912
in our terminal and i'm gonna rearrange things a little bit here

243
01:24:53,912 --> 01:24:56,720
okay actually perhaps i could do the same

244
01:24:56,720 --> 01:25:01,440
thing that we've done before so let me increase the size of this

245
01:25:01,440 --> 01:25:05,512
terminal so you see it better so let's just do the same thing that was

246
01:25:05,512 --> 01:25:11,360
mentioned in the documentation so flutter pub ad share plus so flutter

247
01:25:11,360 --> 01:25:14,960
op ad share plus

248
01:25:14,960 --> 01:25:18,720
and this share plus since it's it's a whole new

249
01:25:18,720 --> 01:25:21,440
plugin that you're adding to your application it's very important that you

250
01:25:21,440 --> 01:25:25,280
basically rebuild your application because otherwise it won't be available

251
01:25:25,280 --> 01:25:30,800
all right so what you could do is to do a clean and then rebuilds this is

252
01:25:30,800 --> 01:25:36,400
cleaning is especially important for ios because sometimes when you add a

253
01:25:36,400 --> 01:25:42,000
new plug-in um since flutter uses cocoa pods in order to

254
01:25:42,000 --> 01:25:47,192
handle ios dependencies then your build may not

255
01:25:47,192 --> 01:25:50,800
actually be able to pick up on that new dependency so it is important to do a

256
01:25:50,800 --> 01:25:56,160
clean but for android it's usually not a problem so i'm just gonna

257
01:25:56,160 --> 01:26:00,480
excuse me i'm just gonna uh rebuild the application and see if everything is

258
01:26:00,480 --> 01:26:04,640
working as expected so i'm gonna stop the application here

259
01:26:04,640 --> 01:26:09,680
and i'm just gonna make sure that flutter select device is using my

260
01:26:09,680 --> 01:26:15,040
android telephone and then i'm gonna go to main dart and just say

261
01:26:15,040 --> 01:26:19,912
run run without debugging and it's it says we have some errors so

262
01:26:19,912 --> 01:26:24,400
let's see if we can fix those errors in here

263
01:26:24,400 --> 01:26:28,160
okay share plus plugin as you can as i can see we already have the problem now

264
01:26:28,160 --> 01:26:33,192
in our application so maybe that's why you have to do a clean so let's go ahead

265
01:26:33,192 --> 01:26:35,440
i'm going to go to terminal and i'm going to say

266
01:26:35,440 --> 01:26:38,800
flutter clean

267
01:26:38,800 --> 01:26:41,360
okay that's going to clean the xcode

268
01:26:41,360 --> 01:26:44,232
workspace and hopefully it's going to clean the android as well so i'm just

269
01:26:44,232 --> 01:26:49,512
going to say flutter clean android

270
01:26:49,512 --> 01:26:52,000
do you mean any of these did i not write clean

271
01:26:52,000 --> 01:26:58,400
i wrote clear so clean android oh it's doing the same thing okay

272
01:26:58,400 --> 01:27:06,400
so then i'm gonna do flutter and let's just say pop get

273
01:27:06,400 --> 01:27:11,280
so that's gonna rebuild all our dependencies

274
01:27:11,280 --> 01:27:16,720
so there we go now that those errors have disappeared okay so you may have to

275
01:27:16,720 --> 01:27:21,832
have flutter clean and i was trying to get away without using that but i was

276
01:27:21,832 --> 01:27:26,232
forced to eventually so in main dart i'm just going to say

277
01:27:26,232 --> 01:27:29,680
run without debugging and that's just going to take its time and go to

278
01:27:29,680 --> 01:27:33,280
scr cpy and i'm just going to bring scr cpy to

279
01:27:33,280 --> 01:27:37,040
the screen as well soon i'll just make sure that i have wi-fi access on this

280
01:27:37,040 --> 01:27:40,160
phone because i play quite a lot with wi-fi

281
01:27:40,160 --> 01:27:44,080
and hotspots on this android phone so it could be that sometimes i don't actually

282
01:27:44,080 --> 01:27:47,760
have wi-fi

283
01:27:47,760 --> 01:27:54,080
okay so that seems to be running and here is uh that android phone and i can

284
01:27:54,080 --> 01:27:58,400
see that the flutter application is trying to run great able to run this and

285
01:27:58,400 --> 01:28:02,872
on that phone so we've done that we've done the clean

286
01:28:02,872 --> 01:28:06,960
and rebuild so that's great and

287
01:28:06,960 --> 01:28:12,480
the first thing that we're going to take care of is to disallow sharing mt notes

288
01:28:12,480 --> 01:28:17,832
you see if if you're on a note screen and you haven't even for instance

289
01:28:17,832 --> 01:28:20,720
written anything in your note you shouldn't be able to share that note

290
01:28:20,720 --> 01:28:25,120
with anybody because well it's just empty text in there so let's go ahead

291
01:28:25,120 --> 01:28:29,912
and we need to take care of that scenario by having a dialogue

292
01:28:29,912 --> 01:28:34,480
and we're going to create this dialogue inside this folder

293
01:28:34,480 --> 01:28:37,912
excuse me again i've been talking quite a lot today and that's why my throat is

294
01:28:37,912 --> 01:28:42,960
giving me some trouble so let's go to lib utilities under

295
01:28:42,960 --> 01:28:46,960
dialogues we're going to create this cannot share empty node dialog okay

296
01:28:46,960 --> 01:28:52,720
uh let me change the screen layout a little bit here and

297
01:28:52,720 --> 01:28:57,192
views we have there and we have services

298
01:28:57,192 --> 01:29:00,160
so let's see what we have constant synonyms extension services

299
01:29:00,160 --> 01:29:05,192
utilities and views but we don't have so yeah we have utilities and we have

300
01:29:05,192 --> 01:29:09,360
dialogue so we have to create a new one let's just say new file and i'm going to

301
01:29:09,360 --> 01:29:15,192
say cannot share empty node dialog the dart

302
01:29:15,192 --> 01:29:19,512
and you will remember from before that we already have a

303
01:29:19,512 --> 01:29:23,440
generic dialogue so what i'm going to do is i'm going to say future

304
01:29:23,440 --> 01:29:28,000
of void so the function signature is going to

305
01:29:28,000 --> 01:29:31,680
look like this as i'm showing you at the bottom of the screen so let's say show

306
01:29:31,680 --> 01:29:35,600
cannot share empty notes dialogue it's quite a long name

307
01:29:35,600 --> 01:29:40,320
and then it return it requires a build context so build context context like

308
01:29:40,320 --> 01:29:44,080
this okay then what we're going to do in this

309
01:29:44,080 --> 01:29:49,360
function is to return our generic dialog and this is something

310
01:29:49,360 --> 01:29:53,280
that i'm actually quite proud of that we could create and we are using it so many

311
01:29:53,280 --> 01:29:57,040
times now it's unbelievable so we literally have one dialog implementation

312
01:29:57,040 --> 01:30:01,512
in the entire application and we're just reusing it and it's truly generic and

313
01:30:01,512 --> 01:30:05,280
it's really good so let's in here let's say that we

314
01:30:05,280 --> 01:30:10,960
return our generic show generic dialog

315
01:30:10,960 --> 01:30:14,480
and it's going to also import that for me it's inside utilities dialog generic

316
01:30:14,480 --> 01:30:17,440
dialog so you may have to import that yourself if your

317
01:30:17,440 --> 01:30:22,872
editor doesn't allow you to auto import so the context is already there for the

318
01:30:22,872 --> 01:30:27,120
title we're just going to say sharing for the content i'm going to say you

319
01:30:27,120 --> 01:30:31,832
cannot share an empty note okay

320
01:30:31,832 --> 01:30:35,760
and it's options builder remember it's a function that should return

321
01:30:35,760 --> 01:30:39,680
um a map and in the map we're just gonna

322
01:30:39,680 --> 01:30:44,320
say it has one button that has literally no value

323
01:30:44,320 --> 01:30:49,600
so this is going to make it a a dialogue that returns a void or a

324
01:30:49,600 --> 01:30:53,680
future of void when we call it here

325
01:30:53,680 --> 01:30:58,800
okay so that file is now created now what we're going to do is to go and

326
01:30:58,800 --> 01:31:02,400
add that button as you can see it says in create update note view add an icon

327
01:31:02,400 --> 01:31:06,872
button to actions of app bar so i'm going to go to my notes as well and

328
01:31:06,872 --> 01:31:11,280
create update and let's go ahead and just add that

329
01:31:11,280 --> 01:31:14,960
button and there we go

330
01:31:14,960 --> 01:31:18,320
i can see that we're using a share icon so i'm going to decrease the size of

331
01:31:18,320 --> 01:31:22,160
this of the font is is very big at the moment

332
01:31:22,160 --> 01:31:26,960
one more step i i think you can still see the way it is i mean i can see in

333
01:31:26,960 --> 01:31:30,720
the video output video it should be visible still even though i've decreased

334
01:31:30,720 --> 01:31:35,040
the size so let me go here bring scr cpy i'm

335
01:31:35,040 --> 01:31:39,192
gonna close this safari window

336
01:31:39,192 --> 01:31:43,912
let's go to create update note view and we already have this button at the at

337
01:31:43,912 --> 01:31:47,512
the top i believe let's see do we have any buttons at the

338
01:31:47,512 --> 01:31:50,720
top no we actually don't so

339
01:31:50,720 --> 01:31:55,440
in our app bar so let's go and create something called actions in here and you

340
01:31:55,440 --> 01:31:59,760
can see it's a list of widgets and in here we're just going to say icon button

341
01:31:59,760 --> 01:32:03,832
unpressed we're just going to leave it empty and for its icon we're just going

342
01:32:03,832 --> 01:32:12,320
to say const icon and and we're going to use icons share

343
01:32:12,320 --> 01:32:15,912
remove this parenthesis from there and then put

344
01:32:15,912 --> 01:32:21,440
like that okay so now now that we have this icon icon button there if i press

345
01:32:21,440 --> 01:32:25,760
on any of these existing notes then we should be able to see a little share

346
01:32:25,760 --> 01:32:29,832
button up here at the moment it doesn't do anything because it's on press is

347
01:32:29,832 --> 01:32:34,552
empty but we're going to program that program that right now

348
01:32:34,552 --> 01:32:39,040
so let's grab the current text of our current node so let's just say that this

349
01:32:39,040 --> 01:32:44,552
is equal to our text controller's text and we're going to say if note

350
01:32:44,552 --> 01:32:47,600
is not null and

351
01:32:47,600 --> 01:32:52,872
the text um actually let's just check for null

352
01:32:52,872 --> 01:32:57,360
and the text or actually

353
01:32:57,360 --> 01:33:03,192
or this text is empty then we're gonna display our new dialogue that we just

354
01:33:03,192 --> 01:33:07,912
implemented so let's just say we await on show cannot

355
01:33:07,912 --> 01:33:12,872
what's that function called the show cannot uh

356
01:33:12,872 --> 01:33:17,760
we did it inside the cannot share empty notes so i'm just going to copy its name

357
01:33:17,760 --> 01:33:21,040
and go in here and paste it and

358
01:33:21,040 --> 01:33:25,600
now i'm going to use visual studio code to do the auto importing for me

359
01:33:25,600 --> 01:33:29,760
so it needs a build context and in here i'm just going to pass the context and

360
01:33:29,760 --> 01:33:33,192
you can see it's complaining that i'm using a weight inside an unpressed

361
01:33:33,192 --> 01:33:37,192
function that isn't async so i'm just gonna make this function async okay

362
01:33:37,192 --> 01:33:40,552
otherwise what we're gonna do is we're gonna use share

363
01:33:40,552 --> 01:33:45,760
and share it is coming from share plus and it can be auto imported okay so i'm

364
01:33:45,760 --> 01:33:49,912
gonna just also import that and in here i'm just gonna say share that text it's

365
01:33:49,912 --> 01:33:55,040
really just as simple as that so let's go in here and i'm gonna create

366
01:33:55,040 --> 01:33:58,552
a new note you can see it has no text i'm going to

367
01:33:58,552 --> 01:34:03,040
press the share button and now we see now we're seeing our beautiful little

368
01:34:03,040 --> 01:34:07,280
dialogue that says you cannot share an empty note fantastic and if i go out

369
01:34:07,280 --> 01:34:11,440
that note is deleted but then if i go to a note that does

370
01:34:11,440 --> 01:34:14,960
have text for instance van dot's second note or vandal's first note in in here

371
01:34:14,960 --> 01:34:18,872
i'm going to go to van.firstnode and then if i press the share button then

372
01:34:18,872 --> 01:34:24,872
i'm going to be presented with in this case android's default share

373
01:34:24,872 --> 01:34:28,552
sheet or how you want to call it and on ios you're going to be presented with

374
01:34:28,552 --> 01:34:33,512
the default ios sharing activity so this is pretty much it so we didn't have

375
01:34:33,512 --> 01:34:37,600
to do much more than this it's literally the call is share.share so you can see

376
01:34:37,600 --> 01:34:42,160
it's so simple when you drag in a plug-in especially a plug-in that is

377
01:34:42,160 --> 01:34:46,480
from a verified developer especially from flutter community or flutter team

378
01:34:46,480 --> 01:34:51,760
or dark dev team themselves all right perfect so that was for

379
01:34:51,760 --> 01:34:56,232
sharing there's not much more to sharing than that and we don't have to drag on

380
01:34:56,232 --> 01:35:00,000
on this chapter so let's go ahead as this tradition

381
01:35:00,000 --> 01:35:06,400
we're gonna go and uh commit our work so i'm gonna do some shuffling around here

382
01:35:06,400 --> 01:35:11,360
gonna get rid of scrcpy increase the size of the

383
01:35:11,360 --> 01:35:15,040
screen and the font so you see better

384
01:35:15,040 --> 01:35:19,040
then let's go to our terminal

385
01:35:19,040 --> 01:35:24,720
and i'm gonna have a look at our git's log the previous chapter we committed at

386
01:35:24,720 --> 01:35:30,720
step 20 and we also tagged as a step 20. let's just do step 21 in this case

387
01:35:30,720 --> 01:35:36,160
so get status we have quite a lot of new stuff so if i say get status in here you

388
01:35:36,160 --> 01:35:41,600
can see a new file in here as well so let's commit as

389
01:35:41,600 --> 01:35:46,960
step 21 and push our commit

390
01:35:46,960 --> 01:35:51,600
and i'm gonna go and tag it and say step 21 as well

391
01:35:51,600 --> 01:35:56,552
and then we push our tags as well okay perfect so that's it so if you say git

392
01:35:56,552 --> 01:36:00,800
status right now we shouldn't have any uncommitted files

393
01:36:00,800 --> 01:36:05,192
very well done so um what we're going to do in the next

394
01:36:05,192 --> 01:36:10,720
chapter is very very exciting we're going to delve into a block and

395
01:36:10,720 --> 01:36:14,160
if you're a flutter developer from before you'll

396
01:36:14,160 --> 01:36:18,080
know what block is maybe or maybe you've heard of it and you want to learn about

397
01:36:18,080 --> 01:36:21,680
it so that next chapter is perfect for you if you're not a flutter developer

398
01:36:21,680 --> 01:36:27,192
from before you may not know what block is and i'll explain it more however

399
01:36:27,192 --> 01:36:30,552
i'll just at the end of the chapter i'm not going to go into the details of the

400
01:36:30,552 --> 01:36:35,680
next chapter but what we have to talk about is how at the moment our ui which

401
01:36:35,680 --> 01:36:41,120
is our different views are actually working directly with our services so we

402
01:36:41,120 --> 01:36:45,440
have some services that for instance can store stuff in the um

403
01:36:45,440 --> 01:36:49,760
in the firestore database and we also have some services that are like

404
01:36:49,760 --> 01:36:53,600
for our authentication the uis upon pressing the login button we're going to

405
01:36:53,600 --> 01:36:57,600
the off service and the off service is coming back with results directly to our

406
01:36:57,600 --> 01:37:00,720
ui this is working it's fine however

407
01:37:00,720 --> 01:37:03,512
there's better way of doing this and that's through

408
01:37:03,512 --> 01:37:09,600
separating the logic of our ui from our business logic ensuring that

409
01:37:09,600 --> 01:37:15,192
our ui is doing what is best what it knows best and that's drawing things on

410
01:37:15,192 --> 01:37:19,120
the screen but when it comes to handling logic and like

411
01:37:19,120 --> 01:37:23,040
making api calls and etc the ui shouldn't really know much about that

412
01:37:23,040 --> 01:37:27,912
the ui should just convey its purpose to some sort of a layer that we're going to

413
01:37:27,912 --> 01:37:31,360
create in our application with the block library and that that layer will decide

414
01:37:31,360 --> 01:37:35,360
okay upon this button being pressed i actually have to do this business logic

415
01:37:35,360 --> 01:37:38,160
so i'm very excited actually about the next

416
01:37:38,160 --> 01:37:41,912
chapter so grab some refreshments if you want to

417
01:37:41,912 --> 01:37:46,480
and i'll see you there hello and welcome to chapter 39 of this flutter course

418
01:37:46,480 --> 01:37:49,440
uh in the previous chapter at the end of the previous chapter we talked about

419
01:37:49,440 --> 01:37:52,480
that in this chapter we're going to talk about

420
01:37:52,480 --> 01:37:57,680
the block library and this is quite a hot topic for flutter

421
01:37:57,680 --> 01:38:01,440
developers like if you're a flutter developer and you've just been

422
01:38:01,440 --> 01:38:06,080
using vanilla set state in your application you may have already

423
01:38:06,080 --> 01:38:10,960
heard about block library and qubits before if

424
01:38:10,960 --> 01:38:14,160
you're not a flutter developer from before which i actually think the

425
01:38:14,160 --> 01:38:17,120
majority of you taking this course probably have not been fluttered

426
01:38:17,120 --> 01:38:20,720
involvers from before so you may have may have not heard about block

427
01:38:20,720 --> 01:38:25,192
uh before so i'm just going to start this chapter by explaining what

428
01:38:25,192 --> 01:38:29,360
the block library is and why do we need it

429
01:38:29,360 --> 01:38:33,600
you see the way that we've created our application at the moment is that we

430
01:38:33,600 --> 01:38:38,720
have direct calls from our ui code into our different services in order to

431
01:38:38,720 --> 01:38:41,120
interact with data so

432
01:38:41,120 --> 01:38:49,280
the ui is very well aware of the business logic so for instance the

433
01:38:49,280 --> 01:38:52,400
the create or get existing nodes function

434
01:38:52,400 --> 01:38:56,720
that we have when we actually go and create a new node that is already a word

435
01:38:56,720 --> 01:39:01,440
of the fact that well if you end up in here i expect a user to be present

436
01:39:01,440 --> 01:39:05,280
inside the application so a user should be logged in and that's

437
01:39:05,280 --> 01:39:09,360
a sample an example of a ui component being aware

438
01:39:09,360 --> 01:39:13,912
of the logic the business logic of our application so they're very they should

439
01:39:13,912 --> 01:39:16,800
be very separate from each other otherwise

440
01:39:16,800 --> 01:39:23,440
but they're not at the moment so what is block block is a um is a

441
01:39:23,440 --> 01:39:26,872
library that we're going to drag into our application soon as you'll also see

442
01:39:26,872 --> 01:39:32,000
is a third-party library call i believe it is created by a company called

443
01:39:32,000 --> 01:39:35,832
very good ventures vgv

444
01:39:35,832 --> 01:39:39,600
and there are various flutter developers and software engineers that are

445
01:39:39,600 --> 01:39:45,192
constantly working in order to improve the quality of the block library

446
01:39:45,192 --> 01:39:48,872
which is a dependency that will bring into our application and using the block

447
01:39:48,872 --> 01:39:53,280
library i mean internally is using streams and streams stream controllers

448
01:39:53,280 --> 01:39:57,760
and futures the stuff that's already built into flutter but it's like going

449
01:39:57,760 --> 01:40:01,680
to a next level to make things more abstract so that our application isn't

450
01:40:01,680 --> 01:40:07,360
directly dependent on its business logic with the ui inter intermixed

451
01:40:07,360 --> 01:40:09,832
so

452
01:40:09,832 --> 01:40:14,480
the reason we need the block library is just to ensure that our ui is only

453
01:40:14,480 --> 01:40:19,832
taking care of the presentation of the ui and it's leaving the rest of

454
01:40:19,832 --> 01:40:23,440
the stuff to a business business logic layer

455
01:40:23,440 --> 01:40:27,360
excuse me

456
01:40:27,360 --> 01:40:34,080
so that's why we need block and we're gonna use it soon in our application

457
01:40:34,080 --> 01:40:37,912
excuse me so if that is blocked then what is

458
01:40:37,912 --> 01:40:44,232
flutter block you see block in its in its internals is a very simple library

459
01:40:44,232 --> 01:40:48,800
that works with streams and stream controllers so it allows you to for

460
01:40:48,800 --> 01:40:52,160
instance pass data from here to there and have listeners that listen to

461
01:40:52,160 --> 01:40:55,912
changes that are happening in a stream so it's only working with like very low

462
01:40:55,912 --> 01:41:01,360
level stream stuff however when you come to your ui layer

463
01:41:01,360 --> 01:41:04,800
as you remember i mentioned that block allows you then to separate your

464
01:41:04,800 --> 01:41:08,720
business logic from your ui so

465
01:41:08,720 --> 01:41:11,760
it's taking care of the business logic using streams and stream controllers and

466
01:41:11,760 --> 01:41:16,480
futures but when it comes to the ui part in order to glue this business logic

467
01:41:16,480 --> 01:41:21,192
with the ui it needs to be able to work with flutter

468
01:41:21,192 --> 01:41:23,360
so the part that works with streams and

469
01:41:23,360 --> 01:41:28,720
stream controllers using dart okay and dart asynchronous components but the

470
01:41:28,720 --> 01:41:32,720
part that it wants to glue that with your ui needs to come to the flutter

471
01:41:32,720 --> 01:41:36,720
world okay and that is that library in itself is

472
01:41:36,720 --> 01:41:41,280
called flutter block so fl block is divided into two separate libraries one

473
01:41:41,280 --> 01:41:45,912
is block which takes care of the business logic etc and the other one is

474
01:41:45,912 --> 01:41:50,400
called flutter block all right but don't worry about it i'll go through

475
01:41:50,400 --> 01:41:57,040
these with you one step at a time so you'll learn these

476
01:41:57,040 --> 01:42:00,000
excuse me

477
01:42:00,000 --> 01:42:02,720
so what we're going to do in this chapter

478
01:42:02,720 --> 01:42:06,000
is going to have it literally has nothing to do with our

479
01:42:06,000 --> 01:42:10,000
application we've been working with the notes app and in this chapter we're

480
01:42:10,000 --> 01:42:12,960
actually going to break our application a little bit by just like literally

481
01:42:12,960 --> 01:42:16,080
replacing the home page of our application with a

482
01:42:16,080 --> 01:42:20,232
completely new application is nothing scary i i promise you the changes we're

483
01:42:20,232 --> 01:42:26,400
going to make is is probably only going to be limited to the main.dark file

484
01:42:26,400 --> 01:42:30,232
and what we're going to do is to create a

485
01:42:30,232 --> 01:42:34,872
counter application if you if you've worked with flutter before and you've

486
01:42:34,872 --> 01:42:37,512
started thinking about maybe moving over to

487
01:42:37,512 --> 01:42:42,000
block you may have actually gone to the block library's documentation page and

488
01:42:42,000 --> 01:42:44,960
you've seen a counter application in there where you have a plus and a minus

489
01:42:44,960 --> 01:42:48,480
button and you can increase and decrease the value that's shown on the screen so

490
01:42:48,480 --> 01:42:51,832
that's like the basic counter application

491
01:42:51,832 --> 01:42:55,680
but in this example i'm going to show you we're going to take that example to

492
01:42:55,680 --> 01:42:59,512
the next level and use the block library and i'm going to introduce all the

493
01:42:59,512 --> 01:43:04,232
basics of the block library to you in this chapter but we're gonna take it to

494
01:43:04,232 --> 01:43:08,960
the next level and allow the user to enter some value on the screen and that

495
01:43:08,960 --> 01:43:14,640
value will then be able to be added or subtracted from the current

496
01:43:14,640 --> 01:43:18,872
value that the application stores so it's kind of like a counter application

497
01:43:18,872 --> 01:43:22,232
where the user can actually enter the value that needs to be added to the

498
01:43:22,232 --> 01:43:25,680
previous account or it needs to be subtracted from the previous account so

499
01:43:25,680 --> 01:43:29,912
that's the difference between our simple counter application and what

500
01:43:29,912 --> 01:43:34,000
block libraries counter application in its documentation

501
01:43:34,000 --> 01:43:38,480
introduces you to all right so

502
01:43:38,480 --> 01:43:43,360
let me bring up this caption in here and we're going to talk a little bit about

503
01:43:43,360 --> 01:43:50,320
various components of a block and i'm fully aware that pretty much

504
01:43:50,320 --> 01:43:55,512
everything i'm saying in this chapter up to where we get to the example is

505
01:43:55,512 --> 01:43:58,960
all very much abstract in that it is

506
01:43:58,960 --> 01:44:03,192
literally just theory i'm like teaching you theory here

507
01:44:03,192 --> 01:44:08,720
i personally am horrible at theory like i didn't excel at school when it came to

508
01:44:08,720 --> 01:44:15,120
theory so i'm very aware that a lot of you may also have the same um situation

509
01:44:15,120 --> 01:44:18,640
or maybe in the same boat that i am that are not good with theory and that's okay

510
01:44:18,640 --> 01:44:21,440
i'll just explain these fast and then we'll go to the implementation so you

511
01:44:21,440 --> 01:44:25,440
can put that to practice so for those of you who are interested in the theory of

512
01:44:25,440 --> 01:44:29,512
it i'm going to explain different parts of the block library to you now

513
01:44:29,512 --> 01:44:32,160
so here the first

514
01:44:32,160 --> 01:44:36,480
component of the block library is a class called block

515
01:44:36,480 --> 01:44:43,600
now block really it is a container just imagine a class a class that you add

516
01:44:43,600 --> 01:44:50,000
events to it and every event that you add to it can produce a state so the way

517
01:44:50,000 --> 01:44:57,040
block works is that it it is a class that begins with a state so its output

518
01:44:57,040 --> 01:45:02,552
is always a state for instance a state can be logged in a state could be logged

519
01:45:02,552 --> 01:45:04,960
out states could be

520
01:45:04,960 --> 01:45:10,160
error screen so just imagine different states of the application

521
01:45:10,160 --> 01:45:16,480
so that's the input sorry the output the input to it are your events so

522
01:45:16,480 --> 01:45:20,552
in your block that will develop you will have

523
01:45:20,552 --> 01:45:25,120
inputs that you for instance say log in with this username and password

524
01:45:25,120 --> 01:45:29,512
register with this username or this email and password register oh i forgot

525
01:45:29,512 --> 01:45:33,832
my password and here's my email so these are events that you

526
01:45:33,832 --> 01:45:38,872
produce and give to your block and then in turn your block then looks at its own

527
01:45:38,872 --> 01:45:42,960
internals and say oh what was this state before what is the current event then i

528
01:45:42,960 --> 01:45:51,040
will produce a new state okay so that's the internal of the block class

529
01:45:51,040 --> 01:45:55,360
now when you have a block class when we're gonna

530
01:45:55,360 --> 01:45:59,760
subclass from that block class then you will actually need to create an instance

531
01:45:59,760 --> 01:46:04,552
of that block class and you will do that using something called a block provider

532
01:46:04,552 --> 01:46:09,512
so that's as its name indicates it is a class that creates a um

533
01:46:09,512 --> 01:46:15,680
it creates a block instance for you and then it will allow you to do something

534
01:46:15,680 --> 01:46:18,552
with that block so

535
01:46:18,552 --> 01:46:22,400
i'll see if i actually can

536
01:46:22,400 --> 01:46:25,832
show you block provider uh

537
01:46:25,832 --> 01:46:32,832
perhaps we could bring up a window in here and i'm just gonna

538
01:46:32,832 --> 01:46:39,760
say so block like brarry you cannot see my screen right now but i

539
01:46:39,760 --> 01:46:43,600
promise you i will show you soon so here's the uh

540
01:46:43,600 --> 01:46:46,872
main page for the block library so i'll

541
01:46:46,872 --> 01:46:51,120
increase the font size so you can see it as well

542
01:46:51,120 --> 01:46:56,080
so let's go ahead and you can see it's sponsored by very good ventures and

543
01:46:56,080 --> 01:47:00,640
stream and medo i'm not sure i i may have butchered

544
01:47:00,640 --> 01:47:05,512
this name right now i apologize for that but then if you look at

545
01:47:05,512 --> 01:47:09,912
the various parts of block then you'll see let's see

546
01:47:09,912 --> 01:47:14,720
if i can find block provider for you here

547
01:47:14,720 --> 01:47:18,552
it could be inside the documentation so i'm going to go to get started and then

548
01:47:18,552 --> 01:47:23,440
i'm going to have a look at block package block and let's see provider if

549
01:47:23,440 --> 01:47:27,120
you can find the provider in here somehow

550
01:47:27,120 --> 01:47:31,512
block uh architecture naming convention

551
01:47:31,512 --> 01:47:36,480
getting started is there is something uh inside i have a

552
01:47:36,480 --> 01:47:40,000
little bit of a problem right now actually finding block

553
01:47:40,000 --> 01:47:45,360
provider so let's search for it block provider

554
01:47:45,360 --> 01:47:49,120
and then we end up here

555
01:47:49,120 --> 01:47:52,160
and i mean this is not the best

556
01:47:52,160 --> 01:47:54,640
documentation right now to be honest with you we don't want to look for a

557
01:47:54,640 --> 01:47:58,552
blog provider right here but as you can see it says it is a flutter

558
01:47:58,552 --> 01:48:02,720
widget which provides a block to its children so this is how you would work

559
01:48:02,720 --> 01:48:08,000
with a block provider so it creates the block instance for you and then it will

560
01:48:08,000 --> 01:48:13,120
allow you to return a child all right so kind of like a builder but not really

561
01:48:13,120 --> 01:48:15,680
all right

562
01:48:15,680 --> 01:48:20,360
so that's block provider and as i mentioned you can always go to the block

563
01:48:20,360 --> 01:48:24,552
library.dev website in order to get more information

564
01:48:24,552 --> 01:48:29,512
about block and read its documentation

565
01:48:29,512 --> 01:48:33,512
so the next component you need to know about is

566
01:48:33,512 --> 01:48:36,872
block listener so

567
01:48:36,872 --> 01:48:41,760
what is a block listener as its name indicates a block listener simply allows

568
01:48:41,760 --> 01:48:46,000
you to hook into a um i'll actually see if we have a

569
01:48:46,000 --> 01:48:50,080
block listener i can see that we have a blog listener in this application that

570
01:48:50,080 --> 01:48:52,960
we're going to develop so you're going to learn about it soon but a block

571
01:48:52,960 --> 01:48:57,040
listener as its name indicates it listen to changes to the states of a block

572
01:48:57,040 --> 01:49:01,192
that's it so you can do some side effects so displaying a new screen for

573
01:49:01,192 --> 01:49:05,040
instance or displaying an error message those are all side effects okay so you

574
01:49:05,040 --> 01:49:09,120
can do that with block listener

575
01:49:09,120 --> 01:49:14,232
now let's have a look at what a block builder is uses your block state changes

576
01:49:14,232 --> 01:49:21,120
to provide you with a widget so as we have a block provider um sorry

577
01:49:21,120 --> 01:49:26,080
we talked about block provider before it gives you uh the chance basically to

578
01:49:26,080 --> 01:49:28,000
create um

579
01:49:28,000 --> 01:49:34,960
a child now inside this child you can then provide a create a block builder

580
01:49:34,960 --> 01:49:39,280
that listens for changes inside your block then it allows you to build new

581
01:49:39,280 --> 01:49:44,400
widgets based on those changes so it's very much like a future builder or

582
01:49:44,400 --> 01:49:48,080
like a stream builder i would say and we've already used stream builder so you

583
01:49:48,080 --> 01:49:52,720
should know how they work but again this is just theory so um

584
01:49:52,720 --> 01:49:58,080
i'm gonna talk more about these as we actually build our application okay

585
01:49:58,080 --> 01:50:01,760
so after all this we also have a block

586
01:50:01,760 --> 01:50:06,232
consumer and what a block consumer is that it combine as i've actually written

587
01:50:06,232 --> 01:50:10,080
here it combines block listener and block builder so a block consumer

588
01:50:10,080 --> 01:50:15,120
listens to changes that happen inside a block and then it will allow you to do

589
01:50:15,120 --> 01:50:18,720
both a side effect and it will also allow you to create a widget to display

590
01:50:18,720 --> 01:50:21,600
to the user based on those changes all right

591
01:50:21,600 --> 01:50:26,480
and again i don't want to go too much into details in uh for a theory because

592
01:50:26,480 --> 01:50:30,872
depending on how you learn new things theory may not be your strongest point

593
01:50:30,872 --> 01:50:38,000
just like it is not for me so it could be a waste of time for you

594
01:50:38,000 --> 01:50:43,440
so let's go ahead and start adding our dependencies in our project so i'm going

595
01:50:43,440 --> 01:50:49,120
to bring our notes application to the screen

596
01:50:49,120 --> 01:50:54,872
resize it a little bit so we have place for scr cpy as well

597
01:50:54,872 --> 01:50:59,600
and we have scr cpy right here as i can see and this is our application

598
01:50:59,600 --> 01:51:02,960
okay and the application is running currently

599
01:51:02,960 --> 01:51:05,832
so then what we're going to do is going to

600
01:51:05,832 --> 01:51:10,720
go ahead and say flutter pop add block and then flutter pop add flutter block

601
01:51:10,720 --> 01:51:14,080
so let's go ahead and increase the size in

602
01:51:14,080 --> 01:51:21,832
here then i'm going to go to terminal say flutter pop add walk

603
01:51:21,832 --> 01:51:26,000
so that's going to do its work

604
01:51:26,000 --> 01:51:30,080
and it added one dependency i'm just going to say flutter hub at flutter

605
01:51:30,080 --> 01:51:34,232
block

606
01:51:34,232 --> 01:51:38,640
all right and this is a package so it's not really

607
01:51:38,640 --> 01:51:43,440
a plugin and i don't believe it's a plugin i think it's a package so it

608
01:51:43,440 --> 01:51:47,680
could be sufficient for us just to stop our application in here and just say

609
01:51:47,680 --> 01:51:50,552
flutter clean

610
01:51:50,552 --> 01:51:56,320
that cleans the application that we're going to say fire pub get

611
01:51:56,320 --> 01:52:02,000
this could be sufficient so that's gonna do its work

612
01:52:02,000 --> 01:52:07,040
and then we're gonna go then we're gonna go to our main dart

613
01:52:07,040 --> 01:52:11,912
file and just say run run without debugging and that's gonna just do the

614
01:52:11,912 --> 01:52:16,232
greater build if you're running on android or it's gonna use xcode build in

615
01:52:16,232 --> 01:52:22,320
order to build your ios application so

616
01:52:22,320 --> 01:52:25,600
and i'm just gonna let that do its thing now so

617
01:52:25,600 --> 01:52:30,552
let's just wait okay now the build is done and i can see

618
01:52:30,552 --> 01:52:34,640
the application running on the screen without a problem so

619
01:52:34,640 --> 01:52:38,552
what we need to do as the next step is to do something dramatic and that is to

620
01:52:38,552 --> 01:52:42,800
comment out our home page because we're gonna replace our home page with another

621
01:52:42,800 --> 01:52:47,192
home page which is gonna use block so it may sound scary but it's not that scary

622
01:52:47,192 --> 01:52:51,440
i promise you so let's go into your main dart in here

623
01:52:51,440 --> 01:52:55,832
select home page as it stands right there and just comment it out

624
01:52:55,832 --> 01:53:01,120
and we're going to create a new stateful widget again and we call it home page so

625
01:53:01,120 --> 01:53:08,000
stf and home page the reason this is a stateful widget is because we need a

626
01:53:08,000 --> 01:53:12,400
text editing controller as i mentioned how we're going to do this example right

627
01:53:12,400 --> 01:53:16,720
now to learn block is to create an application that gives you a text field

628
01:53:16,720 --> 01:53:21,760
that you can enter a number into we start with the value of zero

629
01:53:21,760 --> 01:53:26,872
in our block so the block holds on to a number and then when you and then we

630
01:53:26,872 --> 01:53:33,192
will create two events one an increment event and a decrement event and

631
01:53:33,192 --> 01:53:36,960
so when we then give the increment event to our block

632
01:53:36,960 --> 01:53:40,640
then we want to grab the current value inside the text field so if we start

633
01:53:40,640 --> 01:53:45,120
with zero and then i type five in this text field and i press increment button

634
01:53:45,120 --> 01:53:51,512
then i want five to be added to the current state which is 0.

635
01:53:51,512 --> 01:53:56,400
so the result will be 5. the next time i will type 10 then press decrement so

636
01:53:56,400 --> 01:54:02,320
decrement will be 10 and then it will be 5 minus 10 so we end up with minus -5

637
01:54:02,320 --> 01:54:04,552
so that's the ui that we're going to create

638
01:54:04,552 --> 01:54:08,640
and for that we need this home page and the reason it's stateful is because we

639
01:54:08,640 --> 01:54:14,480
need to grab that text from our text editing controller okay so

640
01:54:14,480 --> 01:54:17,680
so that's our new home page and if i now

641
01:54:17,680 --> 01:54:21,912
press command s in here our screen is going to be black because well this this

642
01:54:21,912 --> 01:54:25,512
is a home page with no information no scaffold nothing all

643
01:54:25,512 --> 01:54:28,232
right

644
01:54:28,232 --> 01:54:32,872
so and now let's talk about this absolute beauty that we're going to call

645
01:54:32,872 --> 01:54:38,320
counter state you see as i mentioned every block has two very

646
01:54:38,320 --> 01:54:44,960
important properties one is its state and the other one is an event an event

647
01:54:44,960 --> 01:54:49,192
goes in the block and state is something that comes out the block and so the

648
01:54:49,192 --> 01:54:54,080
state as its name indicates describes the state of your block

649
01:54:54,080 --> 01:54:58,080
so if you think about it what we expect

650
01:54:58,080 --> 01:55:02,800
from our block is a simple integer okay so we could either

651
01:55:02,800 --> 01:55:07,680
say our block's output is integer or we could define a state that wraps around

652
01:55:07,680 --> 01:55:12,320
that integer so that's exactly what we're gonna do right now

653
01:55:12,320 --> 01:55:16,160
so let's go ahead and say we have an abstract

654
01:55:16,160 --> 01:55:20,320
class and we call it counter state

655
01:55:20,320 --> 01:55:24,872
and then here we have a final integer called value and then we're gonna create

656
01:55:24,872 --> 01:55:30,960
an initializer here like that and that's our counter

657
01:55:30,960 --> 01:55:35,912
you could also mark this as immutable if you want to all right so let's do that

658
01:55:35,912 --> 01:55:39,280
and let me also change the screen layout a little bit here so you see the code

659
01:55:39,280 --> 01:55:45,192
better so that's like the basic state of our block okay we're not actually gonna

660
01:55:45,192 --> 01:55:50,872
use the state as it is we're gonna create two sub states for this as you

661
01:55:50,872 --> 01:55:55,440
will soon see now

662
01:55:55,440 --> 01:55:59,512
since we're going to create a text field in the middle kind of like this screen

663
01:55:59,512 --> 01:56:03,832
and the user is able then to enter pretty much any text in this text field

664
01:56:03,832 --> 01:56:07,832
let's just assume so just normal text not even integer so the user just say

665
01:56:07,832 --> 01:56:11,512
hello world and then presses the plus button what should we do in that case

666
01:56:11,512 --> 01:56:17,600
plus button plot plus thing like adding hello world to the previous value of

667
01:56:17,600 --> 01:56:22,480
five means nothing so we're gonna divide our state into a valid state and an

668
01:56:22,480 --> 01:56:26,960
invalid state and then present this to the user in two different ways so let's

669
01:56:26,960 --> 01:56:32,160
go ahead and create a class called as i've mentioned there counter stayed

670
01:56:32,160 --> 01:56:36,960
valid so i'm going to actually grab that code

671
01:56:36,960 --> 01:56:40,720
so we don't have to type it ourselves as you'll soon see

672
01:56:40,720 --> 01:56:45,120
here we have a counter state valid extends our counter state which is this

673
01:56:45,120 --> 01:56:50,640
one and we have a constant constructor that says okay give me a value a valid

674
01:56:50,640 --> 01:56:55,120
value and then i'm going to call my super class with that value

675
01:56:55,120 --> 01:57:02,552
all right so that's a valid state now let's then create a an invalid state

676
01:57:02,552 --> 01:57:07,760
so let's say class i'm going to bring the correct caption

677
01:57:07,760 --> 01:57:10,640
as well invalid state

678
01:57:10,640 --> 01:57:17,832
let's say counter state invalid number extends counter state

679
01:57:17,832 --> 01:57:23,440
in this case we want this state to actually include some sort of um

680
01:57:23,440 --> 01:57:27,440
the value that actually made our state invalid so i'm just going to say that

681
01:57:27,440 --> 01:57:31,680
value is a string and we're going to call it invalid value here okay

682
01:57:31,680 --> 01:57:37,680
and i'm going to say const and let's just bring a create an initializer here

683
01:57:37,680 --> 01:57:42,552
a few required parameters in here and we're just uh

684
01:57:42,552 --> 01:57:46,552
like this so in this case we're going to create two required parameters one is

685
01:57:46,552 --> 01:57:50,960
the invalid value that caused the error or cause the state of our block to be

686
01:57:50,960 --> 01:57:56,160
invalid and the other one is going to be a required of the required parameter of

687
01:57:56,160 --> 01:58:00,480
the previous value so because we may actually need the

688
01:58:00,480 --> 01:58:04,552
previous value uh or something or maybe like the ui needs

689
01:58:04,552 --> 01:58:08,480
to display that to the user so if this is the output of our block the state

690
01:58:08,480 --> 01:58:14,400
remember is the output maybe then the ui actually upon me trying to plus hello

691
01:58:14,400 --> 01:58:18,640
world with five he may want to use this previous value to populate that text

692
01:58:18,640 --> 01:58:22,080
field or populate the ui again and say hello

693
01:58:22,080 --> 01:58:25,280
um this value that you entered is invalid

694
01:58:25,280 --> 01:58:28,800
but the previous value was this so i'm just going to show that okay so that's

695
01:58:28,800 --> 01:58:31,440
why we need previous value and here we're getting an error because we're not

696
01:58:31,440 --> 01:58:40,080
calling super let's call super with the previous value

697
01:58:40,080 --> 01:58:44,800
okay that's our counter state invalid number okay so we've created

698
01:58:44,800 --> 01:58:51,680
our two states that uh come from counter states immutable abstract class

699
01:58:51,680 --> 01:58:55,040
okay let's go ahead then and create our

700
01:58:55,040 --> 01:58:58,720
counter event and remember counter event is very

701
01:58:58,720 --> 01:59:03,040
similar to state so first we actually have to define an event

702
01:59:03,040 --> 01:59:06,960
and let's go ahead and define that event like this

703
01:59:06,960 --> 01:59:09,832
and you can see it's an abstract class called counter event and it just

704
01:59:09,832 --> 01:59:13,912
contains a value so it just says the string that comes from the ui can just

705
01:59:13,912 --> 01:59:16,640
go directly into the counter oven that's it

706
01:59:16,640 --> 01:59:22,552
and let's make this actually immutable as well

707
01:59:22,552 --> 01:59:28,000
and what we're gonna do is to create an event for increment

708
01:59:28,000 --> 01:59:32,320
so let's go and say class increment value

709
01:59:32,320 --> 01:59:36,000
um or increment event

710
01:59:36,000 --> 01:59:39,440
extends counter event okay

711
01:59:39,440 --> 01:59:43,680
and in here we're just going to say const create a constant

712
01:59:43,680 --> 01:59:48,720
constructor for it and we just grab a value in here so a string value and it

713
01:59:48,720 --> 01:59:53,832
should just go to the super that's it and what we need to do is just to grab

714
01:59:53,832 --> 01:59:58,480
this event as well and create a decrement event

715
01:59:58,480 --> 02:00:03,832
so let's call this decrement here

716
02:00:03,832 --> 02:00:09,120
like so and again remember the event is something that we need to trigger and

717
02:00:09,120 --> 02:00:14,080
send to the block from the ui all right so we're gonna pack these increment

718
02:00:14,080 --> 02:00:17,760
event and decrement event with with the string that the user has entered in the

719
02:00:17,760 --> 02:00:23,360
ui and then send it to the block as you'll soon see

720
02:00:23,360 --> 02:00:28,232
so let's go ahead now and do the main part of this application which is our

721
02:00:28,232 --> 02:00:33,440
block and the way to do that is to create a class if i can spell class

722
02:00:33,440 --> 02:00:38,320
and say canner block extends block and you'll see it'll now auto

723
02:00:38,320 --> 02:00:42,160
import it for me because we hadn't imported block from before

724
02:00:42,160 --> 02:00:46,320
and now let's see if block is imported somewhere here and that's the package

725
02:00:46,320 --> 02:00:49,600
block block if your editor doesn't allow you to auto import you will have to do

726
02:00:49,600 --> 02:00:53,280
that by hand excuse me

727
02:00:53,280 --> 02:00:58,232
so the way to create a block is first you define the state of that block like

728
02:00:58,232 --> 02:01:03,360
what type of state does it have sorry events first we start with the counter

729
02:01:03,360 --> 02:01:08,232
event and then the counter state okay so if you look at the definition of block

730
02:01:08,232 --> 02:01:12,080
class itself you can see the two parameters are or the two generic types

731
02:01:12,080 --> 02:01:15,912
are the event and the state so that's here we're saying our events

732
02:01:15,912 --> 02:01:21,512
are of type counter event and our states are of type counter state

733
02:01:21,512 --> 02:01:26,080
so that's that then let's go ahead and say we have a counter block

734
02:01:26,080 --> 02:01:30,720
that's the constructor and what it does is it has to call super

735
02:01:30,720 --> 02:01:36,400
you see and our super actually needs the initial states so

736
02:01:36,400 --> 02:01:41,680
every block has to have an initial state and that's when you pass your super okay

737
02:01:41,680 --> 02:01:45,832
so what we're gonna do is we're going to say we start with the value a valid

738
02:01:45,832 --> 02:01:50,320
value of 0. so we say const

739
02:01:50,320 --> 02:01:54,000
counter state valid and we start with 0 just

740
02:01:54,000 --> 02:01:56,832
like that

741
02:01:56,832 --> 02:02:01,040
okay so that's our

742
02:02:01,040 --> 02:02:07,360
let's see what happened there seems fine to me yeah

743
02:02:07,360 --> 02:02:13,512
okay so that's the initializer in there now what we need to do is actually grab

744
02:02:13,512 --> 02:02:17,512
these events as they come remember the ui is gonna

745
02:02:17,512 --> 02:02:21,680
uh basically pass us these events so the ui is gonna say here's an increment

746
02:02:21,680 --> 02:02:25,192
event with this value here's the decrement event with this value so we

747
02:02:25,192 --> 02:02:30,080
need to catch those how do we do that there is a function called on on the

748
02:02:30,080 --> 02:02:35,280
block itself that you can use so we're going to say on increment value

749
02:02:35,280 --> 02:02:39,512
sorry increment event and then it gives you two parameters so

750
02:02:39,512 --> 02:02:44,800
if you look at the function signature of on it actually gives you you see it

751
02:02:44,800 --> 02:02:50,640
gives you the event and an emit so let's in here just write event

752
02:02:50,640 --> 02:02:53,832
emit and in here we create a new function and

753
02:02:53,832 --> 02:03:00,080
put semicolon at the end so that's how we're gonna handle the increment value

754
02:03:00,080 --> 02:03:04,480
same we're gonna do for decrement so let's just copy that and paste it in

755
02:03:04,480 --> 02:03:11,440
here and just say decrement all right so what are we doing here now

756
02:03:11,440 --> 02:03:15,832
remember the event that comes in now is an increment event because we literally

757
02:03:15,832 --> 02:03:19,832
said on increment event so we're we're then going to get that

758
02:03:19,832 --> 02:03:25,760
integer from our events so remember our increment event actually has

759
02:03:25,760 --> 02:03:30,552
is of type counter event and then it has a value of type string so we're gonna

760
02:03:30,552 --> 02:03:37,680
try to parse that as an integer okay so we're going to say final integer is

761
02:03:37,680 --> 02:03:43,120
int tri parse and we're going to say event dot value

762
02:03:43,120 --> 02:03:48,400
like that so and try parse is a function on integer that

763
02:03:48,400 --> 02:03:52,640
will try as its name indicates it's gonna try to parse a given string and

764
02:03:52,640 --> 02:03:58,160
try to make it an integer and if it can't then that integer is gonna be null

765
02:03:58,160 --> 02:04:02,552
so let's say if uh here if integer

766
02:04:02,552 --> 02:04:06,800
is not null like that

767
02:04:06,800 --> 02:04:12,080
and then we put an else in here and in the case of an else actually so

768
02:04:12,080 --> 02:04:16,552
it means that hey you gave us something that we couldn't parse as an integer

769
02:04:16,552 --> 02:04:20,720
what do we do with it all right then we're going to use our emit

770
02:04:20,720 --> 02:04:26,000
emit is a function on its own you see it's an emitter that allows you then to

771
02:04:26,000 --> 02:04:30,640
pass a state out your block so i actually scared myself with my own

772
02:04:30,640 --> 02:04:35,440
finger so you you have you got your you got your um this

773
02:04:35,440 --> 02:04:40,872
event in now you want to create a state and pass it out that's how you do it

774
02:04:40,872 --> 02:04:45,680
with emit all right so we're gonna then say in this case

775
02:04:45,680 --> 02:04:50,232
if we got uh if actually let's do integer null if we

776
02:04:50,232 --> 02:04:53,600
got null we're going to handle the error here

777
02:04:53,600 --> 02:04:57,600
sorry about that so if we got not what we're going to do is we're going to emit

778
02:04:57,600 --> 02:05:02,400
a counter state invalid number

779
02:05:02,400 --> 02:05:07,600
and we have invalid value and a previous value

780
02:05:07,600 --> 02:05:13,680
so the invalid value was this value that was passed to us in here you see event

781
02:05:13,680 --> 02:05:17,512
value so let's just say that's the event.value

782
02:05:17,512 --> 02:05:21,912
and the next parameter is the previous value and the previous value is always

783
02:05:21,912 --> 02:05:26,232
stored inside your state so let me actually do some cleanup in

784
02:05:26,232 --> 02:05:30,320
here so you see the code better a comma here so let's see what happened

785
02:05:30,320 --> 02:05:35,360
in here you see we're emitting so we're sending a state outside our block

786
02:05:35,360 --> 02:05:41,360
so we're saying given an increment event where the integer where the value

787
02:05:41,360 --> 02:05:46,960
couldn't be parsed as an integer we're emitting a new state saying that hey

788
02:05:46,960 --> 02:05:50,960
your value which was in this event is invalid

789
02:05:50,960 --> 02:05:55,192
so that's invalid value and the previous value that we had is

790
02:05:55,192 --> 02:06:02,552
stored inside our state so your block in all your on functions you have access to

791
02:06:02,552 --> 02:06:08,000
your current state before emitting a new one all right so that's the previous

792
02:06:08,000 --> 02:06:13,600
value inside state and if we could actually grab an integer

793
02:06:13,600 --> 02:06:17,912
we're going to emit a new value a new state and we're going to say counter

794
02:06:17,912 --> 02:06:21,280
state valid okay

795
02:06:21,280 --> 02:06:25,912
and we're going to say we take the current value in our state plus it this

796
02:06:25,912 --> 02:06:29,440
integer like this right

797
02:06:29,440 --> 02:06:35,512
like that so that's for increment

798
02:06:35,512 --> 02:06:39,280
and as you'd guess decrement i'm going to remove this comma

799
02:06:39,280 --> 02:06:42,400
by the way it was annoying me a little bit and decrement it's very similar to

800
02:06:42,400 --> 02:06:47,040
increments so i'm just going to copy this code and remove this decrement one

801
02:06:47,040 --> 02:06:50,320
and paste the increment one one more time and then this time i'm just going

802
02:06:50,320 --> 02:06:53,832
to change it to decrements like this all right

803
02:06:53,832 --> 02:06:57,600
and for the big decrement the only thing you have to do is just to change this

804
02:06:57,600 --> 02:07:04,320
plus to a minus and that's it all right

805
02:07:04,320 --> 02:07:11,280
wow a lot of work a lot of work so now let's go ahead to our

806
02:07:11,280 --> 02:07:15,360
home page in here now we've basically gotten the block

807
02:07:15,360 --> 02:07:18,480
down so the block should be working as uh

808
02:07:18,480 --> 02:07:24,080
as we want it to so so let's now go into this homepage that

809
02:07:24,080 --> 02:07:30,320
we created in here and create our text editing controller

810
02:07:30,320 --> 02:07:35,912
so for that i'm just going to say late final

811
02:07:35,912 --> 02:07:40,720
text editing controller and we're calling it controller as i can see here

812
02:07:40,720 --> 02:07:46,872
let's go into init state and override also the dispose function okay

813
02:07:46,872 --> 02:07:50,640
i'm gonna bring the code so you can see it

814
02:07:50,640 --> 02:07:54,480
i'm gonna bring it up so in in its state we're gonna instantiate

815
02:07:54,480 --> 02:07:58,000
our controller so this is nothing new you've already done this before many

816
02:07:58,000 --> 02:08:01,440
times and in here we're gonna dispose of that

817
02:08:01,440 --> 02:08:05,192
control

818
02:08:05,192 --> 02:08:10,720
uh fantastic all right that part is done so what we need to do now inside our

819
02:08:10,720 --> 02:08:16,552
build function we're gonna basically we have to create um

820
02:08:16,552 --> 02:08:20,080
our main ui so i'm gonna bring the caption for that as you can see we have

821
02:08:20,080 --> 02:08:26,552
to use block provider and block consumer so in the build function right now we

822
02:08:26,552 --> 02:08:31,760
only have a container so let's instead of doing a container say okay we want to

823
02:08:31,760 --> 02:08:36,080
create a block and we also want to just like make sure everything after this

824
02:08:36,080 --> 02:08:39,600
return statement has access to that block so we need the block provider so

825
02:08:39,600 --> 02:08:43,760
let's say block provider and block provider is in a

826
02:08:43,760 --> 02:08:47,600
flutter block package as you can see here and we haven't imported that yet so

827
02:08:47,600 --> 02:08:52,400
let's import that right now in the create

828
02:08:52,400 --> 02:08:56,960
parameter we get a context as you'll see i can get visual studio code to complete

829
02:08:56,960 --> 02:09:00,552
this for me it says i will give you context and you'll give me a block back

830
02:09:00,552 --> 02:09:06,232
so i'll say okay i'll take the context and i'll create a counter block here

831
02:09:06,232 --> 02:09:09,440
okay so that's the first parameter then we're

832
02:09:09,440 --> 02:09:12,960
getting an error here just because we haven't provided a child here so if i

833
02:09:12,960 --> 02:09:18,640
say child in here is a text of hello world

834
02:09:18,640 --> 02:09:22,872
and press command s then we see hello world right there okay so in here our

835
02:09:22,872 --> 02:09:27,120
task then is to create a scaffold so let's create our scaffold just we

836
02:09:27,120 --> 02:09:32,080
usually like we usually do and for our app bar

837
02:09:32,080 --> 02:09:35,440
let's create an app bar in here and say app bar

838
02:09:35,440 --> 02:09:39,680
title is it const can't see anything because the

839
02:09:39,680 --> 02:09:47,512
documentation is all over the place cons text and i'm going to say testing

840
02:09:47,512 --> 02:09:52,160
all right so now we have a blog provider that created an instance of our counter

841
02:09:52,160 --> 02:09:55,832
block and then we have a scaffold with a beautiful app bar displayed on the

842
02:09:55,832 --> 02:10:00,800
screen okay so as the caption at the bottom screen

843
02:10:00,800 --> 02:10:04,640
mentions for uh our child the child of our block

844
02:10:04,640 --> 02:10:09,512
provider is a scaffold but inside the scaffold itself we have body

845
02:10:09,512 --> 02:10:15,280
and for the body then we're going to create a block consumer so remember a

846
02:10:15,280 --> 02:10:19,680
block consumer is it is

847
02:10:19,680 --> 02:10:24,160
the combination of a block listener and a block builder

848
02:10:24,160 --> 02:10:29,680
we need a block consumer here is and the reason for that is upon every

849
02:10:29,680 --> 02:10:33,512
pressing of the plus or the minus buttons that we're going to develop soon

850
02:10:33,512 --> 02:10:37,912
we want to clear the text inside of our text field

851
02:10:37,912 --> 02:10:42,640
so that's a side effect so by us saying that okay whenever there's

852
02:10:42,640 --> 02:10:46,160
a new state coming out of our block we want to clear something so this is a

853
02:10:46,160 --> 02:10:50,400
signal when you want to do a side effect that has nothing really to do with like

854
02:10:50,400 --> 02:10:55,360
a business logic or such then that is your listener so

855
02:10:55,360 --> 02:10:59,192
so we're saying that we need a block listener but also we want to for

856
02:10:59,192 --> 02:11:03,192
instance be able to have a builder so we want to build our

857
02:11:03,192 --> 02:11:06,552
ui based on the current state of the block

858
02:11:06,552 --> 02:11:10,720
well that is block builder so if you need a block listener anywhere in your

859
02:11:10,720 --> 02:11:15,680
application and a block builder you need to instead use block consumer if you're

860
02:11:15,680 --> 02:11:19,912
if you need them at the same level okay so block consumer combines block

861
02:11:19,912 --> 02:11:27,832
listener and block builder so that's why we're using block consumer in this

862
02:11:27,832 --> 02:11:31,280
block consumer it's going to say okay what block am i operating on so i'm just

863
02:11:31,280 --> 02:11:35,040
going to say you're operating on counter block and then it says what state am i

864
02:11:35,040 --> 02:11:39,912
operating on and we're going to say counter state

865
02:11:39,912 --> 02:11:44,640
let's see if they're available counter

866
02:11:44,640 --> 02:11:48,960
and you can i mean i'm not making this up this stuff is present in the

867
02:11:48,960 --> 02:11:52,080
documentation if you go to block consumer as well

868
02:11:52,080 --> 02:11:57,040
let's see in here what it says it says uh extend state state streamable so

869
02:11:57,040 --> 02:12:01,912
that's the the b here b for me means the block and

870
02:12:01,912 --> 02:12:05,440
s is the state so it's not so clear because it's working with a lot of

871
02:12:05,440 --> 02:12:08,872
generics but you can read the documentation about that okay

872
02:12:08,872 --> 02:12:14,320
so let's go in here and in here let's have a look

873
02:12:14,320 --> 02:12:18,400
and it's complaining that some named parameters aren't present as you can see

874
02:12:18,400 --> 02:12:22,872
named parameter listener is required so let's go ahead and say listener

875
02:12:22,872 --> 02:12:27,832
and i'm going to get visual studio code to help me clean this up and upon any

876
02:12:27,832 --> 02:12:33,600
new events or sorry upon any new states produced by our blog i want to clear our

877
02:12:33,600 --> 02:12:37,360
text editing controller so let's just say text controller

878
02:12:37,360 --> 02:12:40,320
uh what do we call it do we call it

879
02:12:40,320 --> 02:12:43,600
controller yeah so we're going to say controller

880
02:12:43,600 --> 02:12:47,440
clear so we're going to clear the text that is displayed inside the text field

881
02:12:47,440 --> 02:12:51,192
soon okay then we need the builder function so in

882
02:12:51,192 --> 02:12:54,552
this builder function as you'll see the

883
02:12:54,552 --> 02:12:59,680
it will give you the current state and you need to return a widget back okay

884
02:12:59,680 --> 02:13:04,320
so what we're going to do in this in this is first we're going to grab

885
02:13:04,320 --> 02:13:09,280
like um to see if there's an invalid value so

886
02:13:09,280 --> 02:13:14,800
let's just say final invalid value is and we're going to say if this state

887
02:13:14,800 --> 02:13:19,360
is a counter state invalid number

888
02:13:19,360 --> 02:13:22,960
with a question mark so we're using turner here and we're going to say get

889
02:13:22,960 --> 02:13:28,720
the states uh let me bring the code up uh invalid value

890
02:13:28,720 --> 02:13:33,192
otherwise we're gonna say empty string so

891
02:13:33,192 --> 02:13:38,872
if i then in here say invalid value as you can see it's now a string okay

892
02:13:38,872 --> 02:13:43,360
and the reason behind this to be honest with you is so that we can

893
02:13:43,360 --> 02:13:47,040
basically display

894
02:13:47,040 --> 02:13:52,480
the a little error message to the user should there be an invalid value so if i

895
02:13:52,480 --> 02:13:56,080
have if i have entered some information in the text field instead of a number

896
02:13:56,080 --> 02:14:00,640
i've entered hello world and then our block produces a counter state

897
02:14:00,640 --> 02:14:05,280
invalid number we're going to display an error to user and this error is gonna

898
02:14:05,280 --> 02:14:09,600
disappear the next time actually the user enters a valid number in the text

899
02:14:09,600 --> 02:14:12,872
field okay so we're gonna use a new widget that we haven't used before

900
02:14:12,872 --> 02:14:18,480
called visibility and this visibility is gonna be based on whether there is an

901
02:14:18,480 --> 02:14:23,280
invalid state or not so you'll soon see actually how we're gonna

902
02:14:23,280 --> 02:14:28,000
implement that so let's go and as our builder's main like

903
02:14:28,000 --> 02:14:34,000
return value create a column okay and column has to have children all

904
02:14:34,000 --> 02:14:37,040
right so what we're going to do is to first

905
02:14:37,040 --> 02:14:41,832
display a text field sorry a text in here so let's just say text

906
02:14:41,832 --> 02:14:46,872
and we're going to say current value is equal to this state value

907
02:14:46,872 --> 02:14:51,120
all right so that's going to be the current value of our

908
02:14:51,120 --> 02:14:59,512
state and if i do command s you can see that it says current value is 0.

909
02:14:59,512 --> 02:15:04,480
so that's the current value then what we're going to do is to go ahead and

910
02:15:04,480 --> 02:15:09,760
create a visibility widget which in case the

911
02:15:09,760 --> 02:15:14,320
current state is counter state invalid number is going to display an error

912
02:15:14,320 --> 02:15:18,232
message to the user so let's say we're going to control the visibility of that

913
02:15:18,232 --> 02:15:21,600
error message using the visibility widget

914
02:15:21,600 --> 02:15:26,960
like this and it's childband is going to be

915
02:15:26,960 --> 02:15:31,360
a text that says invalid inputs and then we're going to

916
02:15:31,360 --> 02:15:36,232
add the invalid value in here as you can see as we've constructed that up there

917
02:15:36,232 --> 02:15:40,400
already and the visibility flag you see we have

918
02:15:40,400 --> 02:15:44,872
to return a boolean okay so how do we know that

919
02:15:44,872 --> 02:15:48,552
we have to display

920
02:15:48,552 --> 02:15:53,440
this widget with visibility and that is if you can

921
02:15:53,440 --> 02:15:57,912
grab hold of your state and say okay this state is actually counter state

922
02:15:57,912 --> 02:16:02,400
invalid number so let's just say state

923
02:16:02,400 --> 02:16:07,440
is counter state invalid number just like that okay so that's how we grab

924
02:16:07,440 --> 02:16:11,440
hold of that invisibility and you can see at the moment it's not

925
02:16:11,440 --> 02:16:15,192
displayed all right even if we even if we put some

926
02:16:15,192 --> 02:16:19,280
um actually let me just say is not

927
02:16:19,280 --> 02:16:22,960
and then save it and you'll see now it says invalid input so it's just

928
02:16:22,960 --> 02:16:26,640
displayed right there okay but if you say state is then it's going to

929
02:16:26,640 --> 02:16:32,800
disappear because the current state is not invalid number

930
02:16:32,800 --> 02:16:37,192
okay that was for visibility now let's go and add our text field

931
02:16:37,192 --> 02:16:40,552
so where the user can actually enter some information in the ui so let's just

932
02:16:40,552 --> 02:16:43,192
say text field as the first parameter we're going to

933
02:16:43,192 --> 02:16:46,872
say the controller is our controller

934
02:16:46,872 --> 02:16:49,760
okay and what we're going to do is we're

935
02:16:49,760 --> 02:16:53,832
going to give it a hint text so let's say decoration is a const inputs

936
02:16:53,832 --> 02:16:57,512
decoration like that i'm going to put the code a

937
02:16:57,512 --> 02:17:01,760
little bit higher on the screen so for the hint text i'm just going to

938
02:17:01,760 --> 02:17:04,960
say enter and number here

939
02:17:04,960 --> 02:17:10,000
like this okay and also let's just enforce the keyboard type

940
02:17:10,000 --> 02:17:14,552
uh text input type of a number

941
02:17:14,552 --> 02:17:18,160
all right but also remember if you oops

942
02:17:18,160 --> 02:17:21,512
the controller has not been initialized really i thought we initialized the

943
02:17:21,512 --> 02:17:26,960
controller yeah maybe you have to do a hot restart

944
02:17:26,960 --> 02:17:31,680
there we go so now we have enter a number here okay

945
02:17:31,680 --> 02:17:36,872
great stuff now all right this is what i was going to say even though we have a

946
02:17:36,872 --> 02:17:39,832
text field here and we actually said that the keyboard should be numerical

947
02:17:39,832 --> 02:17:43,512
but i can still paste non-numerical numbers in here so if i like use the

948
02:17:43,512 --> 02:17:48,640
paste functionality in android or is so that's the reason we have that invalid

949
02:17:48,640 --> 02:17:52,872
state in case someone else someone actually enters another value except for

950
02:17:52,872 --> 02:17:56,720
a number and there are also input formatters in flutter that you can use

951
02:17:56,720 --> 02:18:02,160
in order to for instance um avoid users entering non-valid values in

952
02:18:02,160 --> 02:18:05,192
your text fields but that's a whole other subject that we're not going to

953
02:18:05,192 --> 02:18:08,552
discuss in this chapter so

954
02:18:08,552 --> 02:18:11,760
then what we're going to do is we're going to have two text buttons for

955
02:18:11,760 --> 02:18:17,440
increment and decrement so let's after this text field create a row so

956
02:18:17,440 --> 02:18:21,192
a row is like the opposite of a column whereas a column displays those

957
02:18:21,192 --> 02:18:24,552
components vertically one after one after each other a row creates its

958
02:18:24,552 --> 02:18:28,080
components horizontally from left to right and left speaking languages and

959
02:18:28,080 --> 02:18:30,320
right to left right

960
02:18:30,320 --> 02:18:33,360
speaking right side speaking language i believe

961
02:18:33,360 --> 02:18:40,320
i think actually row changes it's uh it should at least change is uh

962
02:18:40,320 --> 02:18:43,832
how it arranges components based on the language but i'm not quite sure about

963
02:18:43,832 --> 02:18:49,440
that so let's say row it has children

964
02:18:49,440 --> 02:18:56,320
and it's two text buttons okay that have unpressed at the moment empty

965
02:18:56,320 --> 02:19:01,680
and um it's a child it just says cons text just

966
02:19:01,680 --> 02:19:06,720
minus like this okay so that's first that's the first button

967
02:19:06,720 --> 02:19:11,832
and then for the next one i'm just gonna copy this text button and i'm gonna

968
02:19:11,832 --> 02:19:17,280
paste it right here and in here i'm just going to say plus

969
02:19:17,280 --> 02:19:22,552
all right so in here when the minus button is tapped i want to convey this

970
02:19:22,552 --> 02:19:29,120
information to our block so i want to say grab the controllers text and make

971
02:19:29,120 --> 02:19:33,912
sure that you send this increment where is it here

972
02:19:33,912 --> 02:19:39,192
increment event to the block so we kind of need to grab hold of our block

973
02:19:39,192 --> 02:19:44,960
how do we do that the way to do that is using a convenient function that

974
02:19:44,960 --> 02:19:48,960
the good people at good very good ventures have created on

975
02:19:48,960 --> 02:19:53,680
context and it's called read and in here you can actually say i want

976
02:19:53,680 --> 02:20:00,400
to read my counter block like this okay so this gives you access to your block

977
02:20:00,400 --> 02:20:04,160
that has been created by the block provider

978
02:20:04,160 --> 02:20:08,720
so let's go ahead and in here let's say after we read that we want to add a new

979
02:20:08,720 --> 02:20:14,480
event to it like this and we want to add an increment event that has the value of

980
02:20:14,480 --> 02:20:16,720
our controller.txt

981
02:20:16,720 --> 02:20:20,640
like this all right so this is how you send events to your

982
02:20:20,640 --> 02:20:24,480
block and the same thing since we're actually sorry about that this should be

983
02:20:24,480 --> 02:20:30,640
decrement so let's just say decrement like that and we copy the same code and

984
02:20:30,640 --> 02:20:35,040
we bring it to our increment function as unpressed button here and instead of

985
02:20:35,040 --> 02:20:39,120
decrement then we're going to say increment

986
02:20:39,120 --> 02:20:44,232
right perfect okay so let's see now let's test

987
02:20:44,232 --> 02:20:48,720
this application so at the moment we have current value zero now if i press

988
02:20:48,720 --> 02:20:51,760
the plus button as you can see it says invalid input

989
02:20:51,760 --> 02:20:56,400
all right but if i say 2 and press the plus button you can see

990
02:20:56,400 --> 02:21:01,040
the value of 2 is entered there if i say hello world here

991
02:21:01,040 --> 02:21:06,000
i press minus and it says oh invalid input hello world is invalid and as you

992
02:21:06,000 --> 02:21:10,232
can see it clears this text and that's because of this listener here

993
02:21:10,232 --> 02:21:14,000
uh this listener because a block consumer is also block listener remember

994
02:21:14,000 --> 02:21:17,040
so it's a combination of a block listener and a block uh

995
02:21:17,040 --> 02:21:21,760
builder so that's the clear working and the part

996
02:21:21,760 --> 02:21:27,360
that is handling this invalid input is this thing so visibility if the current

997
02:21:27,360 --> 02:21:31,680
state is an invalid number then this is becoming visible but if the current

998
02:21:31,680 --> 02:21:35,912
state is not an invalid number so let's say three four plus two

999
02:21:35,912 --> 02:21:39,912
it's going to be three six then the current state is actually not an invalid

1000
02:21:39,912 --> 02:21:44,160
number is uh the current state should be

1001
02:21:44,160 --> 02:21:49,040
valid it should be counter state valid so then the visibility is hiding that

1002
02:21:49,040 --> 02:21:54,400
error message so so that is pretty much it i mean um

1003
02:21:54,400 --> 02:21:57,760
huge congratulations if you could stick with me throughout this chapter it was

1004
02:21:57,760 --> 02:22:02,160
very heavy i understand it was a very heavy and very like technical chapter

1005
02:22:02,160 --> 02:22:07,192
talking a lot about business logic but believe me if you didn't understand like

1006
02:22:07,192 --> 02:22:10,800
most of the things i talked about you just need to practice

1007
02:22:10,800 --> 02:22:15,280
i'm no genius nobody who knows how to work with block or stuff like this is a

1008
02:22:15,280 --> 02:22:19,512
genius everybody has practice put it into practice done their own

1009
02:22:19,512 --> 02:22:23,040
applications done this test just go and create this counter application that i

1010
02:22:23,040 --> 02:22:27,760
just created try not to look at the code that i've written or rewritten

1011
02:22:27,760 --> 02:22:31,912
in this just try to remember the stuff from your memory and

1012
02:22:31,912 --> 02:22:36,400
after exercise and practice and practice and practice and you will get it and you

1013
02:22:36,400 --> 02:22:40,400
will get the idea of what a state is you'll get the idea of what events are

1014
02:22:40,400 --> 02:22:44,872
what block is and read documentations and you'll get this eventually i promise

1015
02:22:44,872 --> 02:22:47,280
you that

1016
02:22:47,280 --> 02:22:52,000
as is tradition we're gonna now uh since we're done with what we prom promised in

1017
02:22:52,000 --> 02:22:55,832
this chapter we're gonna go and commit our code

1018
02:22:55,832 --> 02:23:00,800
so let me change the screen layout a little bit and go to uh

1019
02:23:00,800 --> 02:23:06,232
terminal and increase the size get rid of the crcpy

1020
02:23:06,232 --> 02:23:10,320
and let's have a look at our log last

1021
02:23:10,320 --> 02:23:14,800
chapter we committed step 21 so let's see git status

1022
02:23:14,800 --> 02:23:18,480
and there were just a few things changed so let's add everything and just say git

1023
02:23:18,480 --> 02:23:24,552
commit step 22 and let's push our chase

1024
02:23:24,552 --> 02:23:28,552
and then i'm just going to say git commits sorry it's

1025
02:23:28,552 --> 02:23:32,552
a tag to see our last tag and i can see it was 21.

1026
02:23:32,552 --> 02:23:40,080
so let's tag this as step 22 and say git push tags

1027
02:23:40,080 --> 02:23:47,120
there we go so now step 22 is also tagged and ready

1028
02:23:47,120 --> 02:23:50,720
so what is to come this is also a tradition

1029
02:23:50,720 --> 02:23:52,872
we have at the end of every chapter we'll talk about what we're what we need

1030
02:23:52,872 --> 02:23:55,680
to discuss in the next chapter and what we need to discuss in the next chapter

1031
02:23:55,680 --> 02:24:00,080
is and we will convert our auth process to using block so

1032
02:24:00,080 --> 02:24:04,232
we've now talked we've act we actually got our auth

1033
02:24:04,232 --> 02:24:07,680
logic inside our application and that was our auth service i don't know if you

1034
02:24:07,680 --> 02:24:11,680
remember from before but we need to convert this auth service

1035
02:24:11,680 --> 02:24:15,360
to block and uh so in that way we're actually

1036
02:24:15,360 --> 02:24:20,000
putting our knowledge about block into use and combining it with what we've

1037
02:24:20,000 --> 02:24:24,000
already developed to make our application better and our logic not so

1038
02:24:24,000 --> 02:24:28,872
spread around everywhere in the ui so if you want grab some refreshments tea

1039
02:24:28,872 --> 02:24:32,320
or coffee and i'll see you in the next chapter hello everyone and welcome to

1040
02:24:32,320 --> 02:24:36,320
chapter 40 of this letter course in previous chapters we've been talking

1041
02:24:36,320 --> 02:24:41,832
about um our aus process and also storing um

1042
02:24:41,832 --> 02:24:48,080
users notes into a firestore database and in the previous chapter we also

1043
02:24:48,080 --> 02:24:55,360
talked about block so um i'm very aware that block could be an intimidating um

1044
02:24:55,360 --> 02:25:00,080
topic for some developers and that getting started with block could just

1045
02:25:00,080 --> 02:25:03,680
be conceived as like an extra step that you

1046
02:25:03,680 --> 02:25:07,360
think you don't need however i can assure you when you get

1047
02:25:07,360 --> 02:25:10,080
more into professional software development

1048
02:25:10,080 --> 02:25:14,640
and which is which may not be your goal i completely am aware of that but when

1049
02:25:14,640 --> 02:25:17,912
you get more and more to professional software development you'll understand

1050
02:25:17,912 --> 02:25:23,120
that you need to separate various layers of your product and that

1051
02:25:23,120 --> 02:25:27,120
the um the presentation layer where you're taking care of for instance

1052
02:25:27,120 --> 02:25:31,912
displaying stuff on the on the screen to the user shouldn't really have to talk

1053
02:25:31,912 --> 02:25:37,120
with your authentication directly um or for instance your authentication layer

1054
02:25:37,120 --> 02:25:42,160
doesn't necessarily have to depend at all on other parts of the application so

1055
02:25:42,160 --> 02:25:46,800
block is gonna allow you to in a very clean and concise way to

1056
02:25:46,800 --> 02:25:51,832
separate the various uh layers of your application into their own concern

1057
02:25:51,832 --> 02:25:56,080
layers so and the services are going to be only concerned with services and then

1058
02:25:56,080 --> 02:26:01,192
your ui is going to be only concerned with ui and so on so and so forth so

1059
02:26:01,192 --> 02:26:05,192
um it could be beneficial if you could actually before starting with this

1060
02:26:05,192 --> 02:26:09,912
chapter to go to the previous chapter and maybe watch it again or maybe even

1061
02:26:09,912 --> 02:26:15,600
practice yourself with block um i understand i know for sure that the

1062
02:26:15,600 --> 02:26:20,400
block libraries website as we looked at in the previous chapter they have quite

1063
02:26:20,400 --> 02:26:24,160
a lot of examples and i highly suggest that you go through some of those

1064
02:26:24,160 --> 02:26:28,480
examples at least and develop and implement those examples also yourself

1065
02:26:28,480 --> 02:26:33,280
to get a bet to get a better hang of what a block actually means and how

1066
02:26:33,280 --> 02:26:37,760
you're supposed to use it so if you've taken care of that and you

1067
02:26:37,760 --> 02:26:42,640
understand like the basics of block then we're we're we should be good to go

1068
02:26:42,640 --> 02:26:47,360
for this chapter so let me bring up the caption for what

1069
02:26:47,360 --> 02:26:51,280
we're actually going to do in this chapter you see the way we have our

1070
02:26:51,280 --> 02:26:54,080
application at the moment is that we have our

1071
02:26:54,080 --> 02:26:57,760
authentication service and our authentication service let me just bring

1072
02:26:57,760 --> 02:27:01,192
that to the screen here and let's have a quick look at it so if

1073
02:27:01,192 --> 02:27:04,480
i go to our auth service you'll see that we have

1074
02:27:04,480 --> 02:27:07,280
quite a few function functions in here we have

1075
02:27:07,280 --> 02:27:11,040
create user and we have uh we are exposing the

1076
02:27:11,040 --> 02:27:16,400
current user we have login logouts and email verification and initialize

1077
02:27:16,400 --> 02:27:22,400
now this is all good however we are it's very raw the way it is in that the ui is

1078
02:27:22,400 --> 02:27:26,800
literally making calls to our auth service which in case which in

1079
02:27:26,800 --> 02:27:32,640
turn is making calls to a provider which is our for instance um

1080
02:27:32,640 --> 02:27:36,232
firebase provider author provider so if you go in here you'll see firebase auth

1081
02:27:36,232 --> 02:27:40,000
provider and that is talking directly with firebase so

1082
02:27:40,000 --> 02:27:44,160
in a way you could say that the ui is talking pretty much directly with

1083
02:27:44,160 --> 02:27:47,512
firebase it's just going through some functions to get to firebase but that's

1084
02:27:47,512 --> 02:27:52,080
what pretty much it's doing so what we want to do in this chapter is to

1085
02:27:52,080 --> 02:27:55,600
try to make sure that our authentication is

1086
02:27:55,600 --> 02:28:00,000
behind a layer of block meaning that all the logic that has anything to do with

1087
02:28:00,000 --> 02:28:06,400
authentication is hidden behind a layer which we're going to call off block

1088
02:28:06,400 --> 02:28:09,760
so that's going to be our off block so it's like the and as you remember from

1089
02:28:09,760 --> 02:28:15,440
the previous chapter every block has two parameters one is what is

1090
02:28:15,440 --> 02:28:21,440
what comes inside the block so what's entered and what is the output

1091
02:28:21,440 --> 02:28:27,040
the input to your block are your events so you pass for instance your ui upon

1092
02:28:27,040 --> 02:28:31,600
pressing a button then you you pass an event a packaged event that

1093
02:28:31,600 --> 02:28:36,800
we call our auth event you're gonna pack package that up with any parameters that

1094
02:28:36,800 --> 02:28:42,232
that particular event is required it is required from you you take that event

1095
02:28:42,232 --> 02:28:46,232
and you give it to your auth lock then your off block is then gonna have some

1096
02:28:46,232 --> 02:28:51,360
time to process you remember we have these on function functions on

1097
02:28:51,360 --> 02:28:56,552
your uh off on your blocks when we talked about the counter block we had on

1098
02:28:56,552 --> 02:29:01,832
increment event on the command event etc so these are the events that come in so

1099
02:29:01,832 --> 02:29:06,232
we're going to package those events up from our ui and pass them to our off

1100
02:29:06,232 --> 02:29:10,160
block then our off block is going to have some time for itself to process

1101
02:29:10,160 --> 02:29:14,232
those events and based on those events that it has

1102
02:29:14,232 --> 02:29:19,600
it has received and based on its current state it's gonna either output the same

1103
02:29:19,600 --> 02:29:22,872
state or it's gonna output a new state so

1104
02:29:22,872 --> 02:29:28,640
events come in and states go out and the off block sits in the middle so event

1105
02:29:28,640 --> 02:29:33,600
off block and estate and these are three components that we're going to develop

1106
02:29:33,600 --> 02:29:36,872
in this chapter

1107
02:29:36,872 --> 02:29:39,600
so let's go ahead and

1108
02:29:39,600 --> 02:29:44,160
take care of our state and remember again state as its name indicates is the

1109
02:29:44,160 --> 02:29:49,360
state of authentication either you're logged in or you're logged out okay and

1110
02:29:49,360 --> 02:29:53,680
you could also be logged out with an error remember so you're either logged

1111
02:29:53,680 --> 02:29:57,120
in or logged out with an error so

1112
02:29:57,120 --> 02:30:02,480
we're going to start looking at these off states so what we need to first do

1113
02:30:02,480 --> 02:30:05,192
is to create a file as the caption indicates

1114
02:30:05,192 --> 02:30:10,640
under lip services auth block off state so

1115
02:30:10,640 --> 02:30:13,680
let me do some reshuffling on the screen here

1116
02:30:13,680 --> 02:30:17,192
maybe decrease the font size a little bit because it's just ginormous the way

1117
02:30:17,192 --> 02:30:22,080
it is right now so maybe this font is a little bit better

1118
02:30:22,080 --> 02:30:25,040
i'm going to put visual studio studio code in there

1119
02:30:25,040 --> 02:30:30,160
to the left and then i'm gonna bring scr cpy to the right

1120
02:30:30,160 --> 02:30:34,320
okay so i'm gonna close all these tabs that i have right here how we left the

1121
02:30:34,320 --> 02:30:38,800
application in the previous chapter and let's go ahead inside lib let's let's

1122
02:30:38,800 --> 02:30:42,800
see actually what we have in here we have lib and we have services

1123
02:30:42,800 --> 02:30:47,192
and under services we already have auth but we don't have a folder called block

1124
02:30:47,192 --> 02:30:50,480
at the moment we have auth provider etc etc

1125
02:30:50,480 --> 02:30:54,480
so let's go in off and just create a new file in here and say block

1126
02:30:54,480 --> 02:30:58,552
slash auth state state like this dot dart

1127
02:30:58,552 --> 02:31:03,440
okay so that's our off state

1128
02:31:03,440 --> 02:31:07,192
now if you remember from the previous chapter when we talked about

1129
02:31:07,192 --> 02:31:10,480
the counter block um

1130
02:31:10,480 --> 02:31:16,552
usually states are immutable and that they're also they're like at the generic

1131
02:31:16,552 --> 02:31:21,360
states that every other state in your block

1132
02:31:21,360 --> 02:31:25,512
inherits from is usually an abstract immutable class

1133
02:31:25,512 --> 02:31:30,232
meaning that it is a class pretty much almost with no logic at all it may have

1134
02:31:30,232 --> 02:31:35,280
a constant constructor but in and on itself it does nothing so it

1135
02:31:35,280 --> 02:31:41,440
just is dictating that hey every state that comes out of this off block is of

1136
02:31:41,440 --> 02:31:46,232
this type okay so let's go ahead and create our off state

1137
02:31:46,232 --> 02:31:50,552
so maybe i should actually increase the size of that font

1138
02:31:50,552 --> 02:31:56,000
so we're going to start by writing um our

1139
02:31:56,000 --> 02:32:00,720
states as you can see so we're going to code that in auth state.dart file

1140
02:32:00,720 --> 02:32:06,080
so i'm going to go ahead and just say abstract class auth state okay

1141
02:32:06,080 --> 02:32:10,000
and let's just create a constant constructor for it as well in case one

1142
02:32:10,000 --> 02:32:13,512
of our states needs to also have a constant constructor so this is this is

1143
02:32:13,512 --> 02:32:16,080
a pattern that you may have already been used to

1144
02:32:16,080 --> 02:32:20,400
by creating abstract classes and if you have like sub classes that conform to

1145
02:32:20,400 --> 02:32:23,440
your abstract classes and those subclasses actually want to have

1146
02:32:23,440 --> 02:32:27,120
constant constructors then you need to have a constant constructor in your

1147
02:32:27,120 --> 02:32:31,680
abstract class as well so that those subclasses can actually call that const

1148
02:32:31,680 --> 02:32:36,640
constructor in the abstract class otherwise you won't be able to have

1149
02:32:36,640 --> 02:32:40,232
constant constructors for your subclasses so for instance if i say

1150
02:32:40,232 --> 02:32:43,600
abstract class blah

1151
02:32:43,600 --> 02:32:49,120
extends off state and if i say const blah like this you can see it says a

1152
02:32:49,120 --> 02:32:53,040
constant constructor can't call a non-constant superconstructor and that

1153
02:32:53,040 --> 02:32:56,720
is the reason that i usually create a cons constructor for my

1154
02:32:56,720 --> 02:33:02,640
um classes for states and for um the events

1155
02:33:02,640 --> 02:33:05,440
okay

1156
02:33:05,440 --> 02:33:10,640
okay now we have our abstract class off state now let's go and make it immutable

1157
02:33:10,640 --> 02:33:14,480
and for that we need to import material or actually it is foundation let's

1158
02:33:14,480 --> 02:33:19,192
import from foundation in that case and we could just say show immutable

1159
02:33:19,192 --> 02:33:23,832
can we do it like that yeah that works as well okay

1160
02:33:23,832 --> 02:33:29,040
so that's that we have a generic off state so um actually i don't mean

1161
02:33:29,040 --> 02:33:33,440
generic in terms of like a dart generics which i just mean an abstract class that

1162
02:33:33,440 --> 02:33:37,760
every other off state can conform to

1163
02:33:37,760 --> 02:33:43,360
okay so we have basically a low i mean we have quite a few states so

1164
02:33:43,360 --> 02:33:47,280
i'm just going to start doing and doing and creating those off states one at a

1165
02:33:47,280 --> 02:33:50,320
time so while you're authenticating for instance

1166
02:33:50,320 --> 02:33:54,400
while you're let's say that you are

1167
02:33:54,400 --> 02:33:57,680
you've just opened the application and then we need to basically tell our

1168
02:33:57,680 --> 02:34:02,960
authentication um provider which is firebase to initialize itself while it's

1169
02:34:02,960 --> 02:34:08,232
doing that then our auth state is in the state of loading or initializing

1170
02:34:08,232 --> 02:34:11,512
whatever you want to call it but we kind of need have to have a state that

1171
02:34:11,512 --> 02:34:15,040
indicates to the application that hey something is happening with the auth

1172
02:34:15,040 --> 02:34:19,440
process and it is in the in the process of loading so let's go ahead and define

1173
02:34:19,440 --> 02:34:26,872
that so let's just say off state loading extends off state just like that okay

1174
02:34:26,872 --> 02:34:31,192
and this could also have a const constructor so let's just say like that

1175
02:34:31,192 --> 02:34:35,192
okay so that's the state of loading and we can

1176
02:34:35,192 --> 02:34:39,440
actually use the state of loading and i believe we're actually going to use it

1177
02:34:39,440 --> 02:34:43,192
while the user for instance is has just opened the application and the

1178
02:34:43,192 --> 02:34:48,320
applications is initializing and we can also use it for instance when

1179
02:34:48,320 --> 02:34:52,552
you tap the login button in order to log into the application and we're

1180
02:34:52,552 --> 02:34:58,480
communicating with firebase and that is also a state of loading okay

1181
02:34:58,480 --> 02:35:02,800
so you will see soon now these states are very important how the ui then

1182
02:35:02,800 --> 02:35:07,280
reacts to various events that are or various states that are happening in our

1183
02:35:07,280 --> 02:35:11,040
off block

1184
02:35:11,040 --> 02:35:14,320
so let's say that we have the loading state let's just

1185
02:35:14,320 --> 02:35:19,120
define a a logged in state so when the user has already logged into our

1186
02:35:19,120 --> 02:35:23,440
application then that is its own separate state so let's go ahead and say

1187
02:35:23,440 --> 02:35:28,160
off state logged in and it extends the off state

1188
02:35:28,160 --> 02:35:32,800
and now this is important to see okay when

1189
02:35:32,800 --> 02:35:36,640
you're logged into the application what does the application actually need from

1190
02:35:36,640 --> 02:35:41,120
us well the only thing the application needs from us when you have logged in

1191
02:35:41,120 --> 02:35:46,080
with the user is the current user at the moment we are going to our auth provider

1192
02:35:46,080 --> 02:35:50,640
and or our auth service and grabbing the current user but if we're gonna move

1193
02:35:50,640 --> 02:35:55,440
over to block and like blockifying our entire auth process then it makes more

1194
02:35:55,440 --> 02:36:00,400
sense for us to grab the current user that has logged into the application

1195
02:36:00,400 --> 02:36:05,760
from the current state of our auth block it's it's i mean to me it's really

1196
02:36:05,760 --> 02:36:10,160
beautiful because it makes sure that we can separate

1197
02:36:10,160 --> 02:36:14,480
the auth service and the auth provider from the ui by putting a block in the

1198
02:36:14,480 --> 02:36:16,800
middle so

1199
02:36:16,800 --> 02:36:20,872
i mean the name kind of it may sound like you're blocking the ui

1200
02:36:20,872 --> 02:36:25,680
but that's not how block is written as bloc it's not block so

1201
02:36:25,680 --> 02:36:29,440
but that's that's what we need to do so let's just say we have the final off

1202
02:36:29,440 --> 02:36:33,280
user and it's going to auto import it for me if you're using vim if you're on

1203
02:36:33,280 --> 02:36:37,280
linux and or if you're using subline that it's not able to auto import things

1204
02:36:37,280 --> 02:36:41,912
then you'll need to auto you need to import off user yourself okay

1205
02:36:41,912 --> 02:36:45,832
so let's say that a state of logged in or always carries with itself the

1206
02:36:45,832 --> 02:36:50,080
currently logged in user okay so we're just going to say user and i'm going to

1207
02:36:50,080 --> 02:36:54,080
create a constant constructor then for this class as well which in turn is

1208
02:36:54,080 --> 02:36:58,640
going to cause automatically for us on off state okay

1209
02:36:58,640 --> 02:37:04,000
so that's our state of logged in now let's say that we're going to define

1210
02:37:04,000 --> 02:37:08,872
also a logged out state and but also we want

1211
02:37:08,872 --> 02:37:11,600
to um we

1212
02:37:11,600 --> 02:37:16,480
actually before we go to log out maybe we have to talk about talk about login

1213
02:37:16,480 --> 02:37:21,120
when you're trying to log in a user in our application today if we go to our

1214
02:37:21,120 --> 02:37:26,320
login view you'll see that upon pressing the button to log in then we're doing a

1215
02:37:26,320 --> 02:37:29,832
try a weight of auth service firebase login so we're literally going towards

1216
02:37:29,832 --> 02:37:34,720
firebase directly and then if anything goes wrong then we're doing like a user

1217
02:37:34,720 --> 02:37:39,120
not found off exception wrong password off exception so we're handling our

1218
02:37:39,120 --> 02:37:44,640
exceptions in this way and the way that we need to do this now with uh fire with

1219
02:37:44,640 --> 02:37:50,232
block is that we need to produce a state you see the ui needs to only talk with

1220
02:37:50,232 --> 02:37:55,040
that block so it says hey block here's an event go log in

1221
02:37:55,040 --> 02:37:58,232
and then it says and then a blog is going to do some processing and then

1222
02:37:58,232 --> 02:38:02,480
maybe it says oh incorrect user incorrect email

1223
02:38:02,480 --> 02:38:09,120
or password is wrong or whatever so that needs to be its own state so

1224
02:38:09,120 --> 02:38:13,512
at the point where an exception has occurred during login

1225
02:38:13,512 --> 02:38:18,960
that is a state login failure we're going to call it login failure so the ui

1226
02:38:18,960 --> 02:38:22,800
is then going to react to that particular state in order to display for

1227
02:38:22,800 --> 02:38:26,960
instance an error message to the user like we are doing today so

1228
02:38:26,960 --> 02:38:32,400
let's go ahead and say class off state log in

1229
02:38:32,400 --> 02:38:36,720
failure and we're going to extend our off state

1230
02:38:36,720 --> 02:38:39,512
in here and what we're going to do is that upon

1231
02:38:39,512 --> 02:38:44,720
a login failure we need to carry with that state the actual exception that

1232
02:38:44,720 --> 02:38:49,120
caused the failure so let's just in here say exception exception just like we're

1233
02:38:49,120 --> 02:38:53,600
doing we're carrying the user with us when you log in we carry the exception

1234
02:38:53,600 --> 02:38:58,640
with us as well if you couldn't log in okay so that's how you should think as

1235
02:38:58,640 --> 02:39:03,832
well so your state should carry with them all the information the ui or the

1236
02:39:03,832 --> 02:39:08,872
consumer of that blog requires in order to be able to

1237
02:39:08,872 --> 02:39:11,832
fulfill its requirements

1238
02:39:11,832 --> 02:39:15,440
so in this case upon not being able to log in

1239
02:39:15,440 --> 02:39:19,680
the ui is going to require the actual exception that occurred so that it can

1240
02:39:19,680 --> 02:39:23,680
switch on it or do some if statements and see what kind of exception it was

1241
02:39:23,680 --> 02:39:28,000
and display the correct correct message to the user

1242
02:39:28,000 --> 02:39:32,960
so let's go ahead and then define that and since we've expected an exception in

1243
02:39:32,960 --> 02:39:37,192
here i'm going to create a constant constructor here as well

1244
02:39:37,192 --> 02:39:39,680
like that oh actually we got a warning here it

1245
02:39:39,680 --> 02:39:43,360
says prefer declaring cons constructors on immutable classes that's actually

1246
02:39:43,360 --> 02:39:51,040
beautiful yes sorry constant fantastic okay so that's our login failure

1247
02:39:51,040 --> 02:39:55,120
then what we need is you remember also i mean at the moment since we have our

1248
02:39:55,120 --> 02:39:59,440
counter block uh in here and the counter application that we did in the previous

1249
02:39:59,440 --> 02:40:03,512
chapter i can't show you the ui of the application but if you can recall what

1250
02:40:03,512 --> 02:40:08,720
we also had is if you try to log in with a user and that user's email is not

1251
02:40:08,720 --> 02:40:12,872
verified when they were actually gonna what we are what we were doing is that

1252
02:40:12,872 --> 02:40:16,640
we were sending the the user to the needs verification view or something

1253
02:40:16,640 --> 02:40:22,000
that we call it let's say let's see very verify email view right so we sent the

1254
02:40:22,000 --> 02:40:27,360
user to this view and we need to also we need to also produce that state so

1255
02:40:27,360 --> 02:40:33,280
upon user pressing the login button and if our off block realizes that hey this

1256
02:40:33,280 --> 02:40:38,400
user does exist but here she hasn't verified their email address then we're

1257
02:40:38,400 --> 02:40:43,360
gonna produce a state telling you ui that hey this user needs to verify their

1258
02:40:43,360 --> 02:40:47,360
information so let's go ahead and implement that so

1259
02:40:47,360 --> 02:40:52,720
we're going to say class auth state needs verification

1260
02:40:52,720 --> 02:40:57,832
extends off state okay and then here we're just gonna grab this

1261
02:40:57,832 --> 02:41:02,640
as a cons constructor like this all right

1262
02:41:02,640 --> 02:41:06,640
so that's that and also after doing that so now we have

1263
02:41:06,640 --> 02:41:12,320
login and login failure we have needs verification and we have the loading

1264
02:41:12,320 --> 02:41:15,680
state if we're in the middle of for instance making an api call that could

1265
02:41:15,680 --> 02:41:18,872
take some time the other state that we need is also

1266
02:41:18,872 --> 02:41:22,640
logged out if you're in the log out state then we need to produce that so

1267
02:41:22,640 --> 02:41:28,160
let's just say class off state um why is everything yellow

1268
02:41:28,160 --> 02:41:31,280
class state logged out

1269
02:41:31,280 --> 02:41:34,872
okay and this is going to extend offset as

1270
02:41:34,872 --> 02:41:38,960
well let's then make a constant constructor

1271
02:41:38,960 --> 02:41:44,552
for this like this great all right so log out when you're logged out you're

1272
02:41:44,552 --> 02:41:47,360
logged out there's nothing that the logged out state actually has to carry

1273
02:41:47,360 --> 02:41:51,192
with itself it doesn't have to carry the currently logged in user or anything or

1274
02:41:51,192 --> 02:41:55,512
even the current user in firebase even if even if you have anonymous users the

1275
02:41:55,512 --> 02:41:58,480
logged out state for our application doesn't have to carry with itself

1276
02:41:58,480 --> 02:42:02,800
anything okay and last but not least we also have to

1277
02:42:02,800 --> 02:42:08,480
define our logout errors and so upon logging out you could also

1278
02:42:08,480 --> 02:42:12,720
encounter some errors like if if a firebase for some reason is trying to

1279
02:42:12,720 --> 02:42:16,872
make an api call and that api call doesn't succeed then it is going to give

1280
02:42:16,872 --> 02:42:21,760
us an error so let's just define that as well let's just say class you see we

1281
02:42:21,760 --> 02:42:26,800
have that already for login failure let's go and actually copy that and

1282
02:42:26,800 --> 02:42:30,080
paste it here and here instead of login i'm just going

1283
02:42:30,080 --> 02:42:34,720
to say log out failure and copy that name and put it in the consonant

1284
02:42:34,720 --> 02:42:39,280
constructor as well great so we have one two

1285
02:42:39,280 --> 02:42:42,552
three four five and six

1286
02:42:42,552 --> 02:42:46,720
um off states so that looks actually really

1287
02:42:46,720 --> 02:42:49,680
good so our auth states are now defined okay

1288
02:42:49,680 --> 02:42:54,320
and please save this file as well

1289
02:42:54,320 --> 02:42:58,800
now we need to define the inputs you see the

1290
02:42:58,800 --> 02:43:03,040
states have been the output of our off block which we're going to write soon

1291
02:43:03,040 --> 02:43:07,832
the off block we haven't written it yet but these have been the outputs now what

1292
02:43:07,832 --> 02:43:13,600
are the inputs imagine in our off inputs we have to think about what the ui what

1293
02:43:13,600 --> 02:43:19,600
the ui is actually going to call so the ui is going to send packages of data

1294
02:43:19,600 --> 02:43:23,832
to this off block and these packages of data are the events so we need to make

1295
02:43:23,832 --> 02:43:28,320
sure that the events can contain with them the data that the

1296
02:43:28,320 --> 02:43:33,760
ui can package and send to our off block for instance during logging in what

1297
02:43:33,760 --> 02:43:38,872
event is it okay it's let's just say off event login what should it contain well

1298
02:43:38,872 --> 02:43:43,760
it should be the email and password something like that okay upon log out

1299
02:43:43,760 --> 02:43:47,120
okay that's a log out event what should it contain

1300
02:43:47,120 --> 02:43:50,480
no it's nothing it's just a log out event it shouldn't even provide the

1301
02:43:50,480 --> 02:43:54,320
email and password it should log out the currently logged in user from the

1302
02:43:54,320 --> 02:43:58,720
application so we need to think about events and

1303
02:43:58,720 --> 02:44:03,600
their consumers and also the states and their consumers so you have to pack

1304
02:44:03,600 --> 02:44:08,552
enough information both into your states and into your events

1305
02:44:08,552 --> 02:44:14,480
so that the consumer of your blog can actually both receive enough information

1306
02:44:14,480 --> 02:44:18,800
and be able to pack enough information to send to your auth

1307
02:44:18,800 --> 02:44:24,232
let's start to your block okay now what we need to do is just go

1308
02:44:24,232 --> 02:44:30,720
and define our auth event right here in lib services auth block off state

1309
02:44:30,720 --> 02:44:34,160
we have written our off state so i'm just going to close that file and let's

1310
02:44:34,160 --> 02:44:39,760
go in the same folder called blocking here you see lib services auth block

1311
02:44:39,760 --> 02:44:44,160
we're going to create a new file called auth event so right click new file off

1312
02:44:44,160 --> 02:44:49,360
event and marked

1313
02:44:49,360 --> 02:44:53,760
all right and now we have our off event and we need to do something very similar

1314
02:44:53,760 --> 02:44:57,440
to what we did with off state in that we need to define

1315
02:44:57,440 --> 02:45:03,280
a um a super class an abstract class that

1316
02:45:03,280 --> 02:45:08,232
basically engulfs all other um auth event so every

1317
02:45:08,232 --> 02:45:12,080
auth event in our application is going to be of this type so let's say

1318
02:45:12,080 --> 02:45:17,760
immutable and we don't have access to it yet so let's just um

1319
02:45:17,760 --> 02:45:20,832
let me just write it for now let's just abstract

1320
02:45:20,832 --> 02:45:26,000
class of events and a constant constructor which you now

1321
02:45:26,000 --> 02:45:29,512
know why we're creating

1322
02:45:29,512 --> 02:45:34,720
an immutable comes from foundation we've already done this so import immutable

1323
02:45:34,720 --> 02:45:39,600
okay uh

1324
02:45:39,600 --> 02:45:42,320
oh use show

1325
02:45:42,320 --> 02:45:46,640
sorry i programming quite a lot of languages python and rust and swift and

1326
02:45:46,640 --> 02:45:50,960
you name it javascript so it's sometimes a little bit messy in my head about

1327
02:45:50,960 --> 02:45:53,832
imports so um

1328
02:45:53,832 --> 02:45:56,960
there are quite a lot of different ways of important things in different

1329
02:45:56,960 --> 02:46:02,720
languages so i sometimes mix them up and so now we have our aus event

1330
02:46:02,720 --> 02:46:08,720
which is an immutable abstract class so now what we need from the ui is upon it

1331
02:46:08,720 --> 02:46:13,280
wanting to initialize our auth you see at the moment let's see actually what we

1332
02:46:13,280 --> 02:46:17,912
have in our main dart file this is just us having a

1333
02:46:17,912 --> 02:46:20,800
look and you can see here

1334
02:46:20,800 --> 02:46:25,680
and that's that's the counter block but how we had it before is if you remember

1335
02:46:25,680 --> 02:46:31,512
in our home page we had upon the entire home page being loaded we were saying

1336
02:46:31,512 --> 02:46:36,960
auth service firebase initialize so this is a signal from the ui that needs to

1337
02:46:36,960 --> 02:46:41,192
now go to our auth block and say hey initialize yourself so

1338
02:46:41,192 --> 02:46:48,552
let's define that signal or event let's say auth event initialize

1339
02:46:48,552 --> 02:46:52,400
extends off event [Music]

1340
02:46:52,400 --> 02:46:57,832
and it has no parameters it's as you saw in main darts it's literally just a

1341
02:46:57,832 --> 02:47:01,512
function being called so we're going to represent it with an event that has no

1342
02:47:01,512 --> 02:47:06,232
parameters but it has a constant okay

1343
02:47:06,232 --> 02:47:11,680
that's that's that okay we have now our auth event initialize

1344
02:47:11,680 --> 02:47:16,232
what we also need is an auth event for logging in and as i mentioned it's very

1345
02:47:16,232 --> 02:47:19,912
simple it's just with an email and password so let's just go ahead and say

1346
02:47:19,912 --> 02:47:25,040
off of event login something like this

1347
02:47:25,040 --> 02:47:30,872
or log in with a capital i extends off event

1348
02:47:30,872 --> 02:47:35,192
and we need we need two parameters to be passed in here let's just say final

1349
02:47:35,192 --> 02:47:39,192
string email and we also need a password so let's

1350
02:47:39,192 --> 02:47:43,912
just type that here password and now we have the email and

1351
02:47:43,912 --> 02:47:47,912
password we're just going to create a constructor here and make it constant

1352
02:47:47,912 --> 02:47:54,640
just like that okay so now we have our login event

1353
02:47:54,640 --> 02:47:58,960
and so login event should carry with itself every piece of information that

1354
02:47:58,960 --> 02:48:04,080
the auth block will need in the future in order to log in that user into the

1355
02:48:04,080 --> 02:48:08,160
into our provider which in this case is firebase okay

1356
02:48:08,160 --> 02:48:12,640
so after defining login we also need to define log out now if you have a look at

1357
02:48:12,640 --> 02:48:17,192
our um there are so many files in here so views

1358
02:48:17,192 --> 02:48:22,552
and we have notes and then we have excuse me we have notes view if you have

1359
02:48:22,552 --> 02:48:27,120
a look at notes view if you have a look at this and log out what it's doing as

1360
02:48:27,120 --> 02:48:32,800
you can see it's a weight of service firebase log out so

1361
02:48:32,800 --> 02:48:37,280
so this is a clear event with no parameters it's just telling the off

1362
02:48:37,280 --> 02:48:41,680
block then or in this case the off service that hey you need to log out no

1363
02:48:41,680 --> 02:48:45,832
parameters log out the current user okay so let's go and define that as well in

1364
02:48:45,832 --> 02:48:48,960
here so let's just say class of

1365
02:48:48,960 --> 02:48:55,360
event log out extends off event and it has no parameters as i mentioned

1366
02:48:55,360 --> 02:48:59,040
so let's create a constant constructor for it which in turn is going to call

1367
02:48:59,040 --> 02:49:05,760
the constant constructor of the abstract class called auth event

1368
02:49:05,760 --> 02:49:10,640
all right fantastic those were the only events that we had to define initialize

1369
02:49:10,640 --> 02:49:14,640
login and log out so these are the inputs to the block and then we had our

1370
02:49:14,640 --> 02:49:20,960
auth states which are the output our outputs of our off block which we're

1371
02:49:20,960 --> 02:49:25,600
gonna write uh right now actually

1372
02:49:25,600 --> 02:49:29,760
so we have the events and the states the only thing that's missing is the

1373
02:49:29,760 --> 02:49:35,280
uh auth block itself so let's go ahead inside this block folder create an off

1374
02:49:35,280 --> 02:49:40,640
block file so off block oops block um

1375
02:49:40,640 --> 02:49:44,720
dart so

1376
02:49:44,720 --> 02:49:49,512
now we need to actually write our auth block and this is for me at least this

1377
02:49:49,512 --> 02:49:53,120
is like the most uh this is the most fun

1378
02:49:53,120 --> 02:49:55,832
um so

1379
02:49:55,832 --> 02:50:00,400
because we're going to put together three pieces of uh two pieces of

1380
02:50:00,400 --> 02:50:04,320
information the states and the events and now we're creating the actual login

1381
02:50:04,320 --> 02:50:07,512
the logic of our authentication block so this is

1382
02:50:07,512 --> 02:50:13,192
very exciting so let's say class off block like this extend block now

1383
02:50:13,192 --> 02:50:16,640
it's going to complain saying that well it doesn't exist yet

1384
02:50:16,640 --> 02:50:21,680
so let's go ahead and import that import that as you can see here now remember

1385
02:50:21,680 --> 02:50:26,320
block if you go into source code it has two parameters there's two generic data

1386
02:50:26,320 --> 02:50:31,192
types in here event and state our events are called off event and it's

1387
02:50:31,192 --> 02:50:35,760
going to auto import that and then we have to say auth state

1388
02:50:35,760 --> 02:50:39,912
like this which also is going to be auto imported

1389
02:50:39,912 --> 02:50:43,192
so just like our off service if we go back

1390
02:50:43,192 --> 02:50:47,760
to our off service in here you'll see that our auth service at the moment is

1391
02:50:47,760 --> 02:50:52,480
taking in as a parameter a provider so we're going to do the exact same thing

1392
02:50:52,480 --> 02:50:56,720
in our auth block it's going to say give us a provider to work with is it a

1393
02:50:56,720 --> 02:51:00,232
firebase provider or what is it so

1394
02:51:00,232 --> 02:51:03,760
but we're not gonna directly go and say give us a firebase provider we're gonna

1395
02:51:03,760 --> 02:51:07,192
say give us an auth provider remember that we had an abstract class called

1396
02:51:07,192 --> 02:51:09,512
auth provider here

1397
02:51:09,512 --> 02:51:12,960
which pretty much defines the uh

1398
02:51:12,960 --> 02:51:18,080
the logic or defines the interface for every auth provider whether it's a

1399
02:51:18,080 --> 02:51:21,760
firebase auth provider gmail auto provider facebook whatever

1400
02:51:21,760 --> 02:51:25,680
that's how the interface should look like okay so what we need to do is to

1401
02:51:25,680 --> 02:51:29,512
create a um a constructor and in here what we're

1402
02:51:29,512 --> 02:51:32,640
going to say is to give us an auth provider so

1403
02:51:32,640 --> 02:51:36,640
we expect an auth provider auto import okay so if you're getting errors here

1404
02:51:36,640 --> 02:51:40,480
it's because you have an imported off provider the way visual studio code just

1405
02:51:40,480 --> 02:51:44,552
imported it for me right now and let's say that we get

1406
02:51:44,552 --> 02:51:48,320
that we call the provider in our constructor and if you remember

1407
02:51:48,320 --> 02:51:52,232
correctly from the previous chapter we need to also make sure that auth block

1408
02:51:52,232 --> 02:51:56,640
always has an initial initial state so

1409
02:51:56,640 --> 02:52:01,360
that's what block as a super class requires so let's see you see that's the

1410
02:52:01,360 --> 02:52:06,800
constructor of the block libraries block class that

1411
02:52:06,800 --> 02:52:12,720
says it should have an initial state so our initial initial state is going to be

1412
02:52:12,720 --> 02:52:17,760
in the k in the state of loading so let's say off state loading

1413
02:52:17,760 --> 02:52:22,480
like that and we create a constant

1414
02:52:22,480 --> 02:52:27,120
okay so and i can see right now that i'm not using scr cpy so much so i'm just

1415
02:52:27,120 --> 02:52:32,400
gonna minimize or yeah i'm just moving it to another

1416
02:52:32,400 --> 02:52:35,760
screen so we don't get bothered by it and that

1417
02:52:35,760 --> 02:52:40,552
enables me then to increase the size of visual studio code in width so it's a

1418
02:52:40,552 --> 02:52:45,440
little bit easier to read so i'm gonna go create a constant here

1419
02:52:45,440 --> 02:52:49,600
and then we're gonna create our curly brackets in order to go to the actual

1420
02:52:49,600 --> 02:52:54,640
initializer or the constructor of this auth block okay

1421
02:52:54,640 --> 02:53:00,232
all right now your job in here inside the auth block is to actually handle

1422
02:53:00,232 --> 02:53:06,160
various events and then based on those events produce a state

1423
02:53:06,160 --> 02:53:11,600
what is the first event remember this event initialize so if the user tells us

1424
02:53:11,600 --> 02:53:16,640
to initialize our uh auth block what should we do well we

1425
02:53:16,640 --> 02:53:21,040
should go to that provider and actually tell it to initialize okay

1426
02:53:21,040 --> 02:53:25,600
so let's go ahead and do that so i'm just going to say on off event

1427
02:53:25,600 --> 02:53:31,440
initialize and remember every on function you see

1428
02:53:31,440 --> 02:53:36,160
it takes the the event let's see actually yeah it's

1429
02:53:36,160 --> 02:53:41,832
the event and then an emitter it's not so clear from this i mean

1430
02:53:41,832 --> 02:53:46,960
from looking at this it's quite generic it's i would say it's

1431
02:53:46,960 --> 02:53:51,512
too generic but uh but that's that's the way it is so we

1432
02:53:51,512 --> 02:53:56,720
take the event that came in so in case you need to extract some data from your

1433
02:53:56,720 --> 02:54:00,232
initialize in this case initialize is an empty

1434
02:54:00,232 --> 02:54:05,912
class so it has no data but it when we actually start loading for instance and

1435
02:54:05,912 --> 02:54:11,832
we start handling the login event we do need the events to actually come in so

1436
02:54:11,832 --> 02:54:16,160
that we can extract this email and password okay but in the case of event

1437
02:54:16,160 --> 02:54:20,400
initialize the event is pretty much useless so we could literally ignore it

1438
02:54:20,400 --> 02:54:25,760
by just doing something like this okay but we're gonna take it in anyways

1439
02:54:25,760 --> 02:54:31,120
so now that we have that event we the second parameter in here is called emit

1440
02:54:31,120 --> 02:54:38,320
and emits then allows you to um actually emit and send states from your

1441
02:54:38,320 --> 02:54:44,232
off block out to whoever is watching the stage changes in your off block

1442
02:54:44,232 --> 02:54:49,280
which is going to be our ui okay so emit is your way out is your communication

1443
02:54:49,280 --> 02:54:53,760
channel to the outside world so let's make this function asynchronous

1444
02:54:53,760 --> 02:54:57,912
because we are actually gonna call our provider and call some

1445
02:54:57,912 --> 02:55:03,912
asynchronous functionality on it so let's go ahead and see if we can do that

1446
02:55:03,912 --> 02:55:07,760
so the first thing that we need to do in here is to call our provider and say

1447
02:55:07,760 --> 02:55:11,512
initialize okay and initialize you can see is it returns

1448
02:55:11,512 --> 02:55:16,720
a future of void so i'm just gonna wait on it all right so then what we're gonna

1449
02:55:16,720 --> 02:55:20,640
do is to say okay after doing that we're gonna say

1450
02:55:20,640 --> 02:55:26,800
final user is provider current user and that is an optional off user if you

1451
02:55:26,800 --> 02:55:30,872
remember from its function signal or from its getter signature you see

1452
02:55:30,872 --> 02:55:34,872
now if the auth user is

1453
02:55:34,872 --> 02:55:40,400
null after doing an initialize then we know that the state should be logged out

1454
02:55:40,400 --> 02:55:44,720
it means we initialize the provider but there is no user you are logged out okay

1455
02:55:44,720 --> 02:55:51,440
so let's just say if user is null then we're going to emit a new state and

1456
02:55:51,440 --> 02:55:55,832
we're going to say auth state logged out like this

1457
02:55:55,832 --> 02:56:00,000
as a constant okay

1458
02:56:00,000 --> 02:56:05,680
however if there is a user so so now we have a user we're sure that

1459
02:56:05,680 --> 02:56:10,640
we're not coming into this block here that says auth user is null if there is

1460
02:56:10,640 --> 02:56:14,232
a user but that user is not email verified then we're going to produce

1461
02:56:14,232 --> 02:56:18,320
another state so let's say if

1462
02:56:18,320 --> 02:56:21,600
else if uh user

1463
02:56:21,600 --> 02:56:26,320
is email verified not so it's not email verified then we're gonna emit

1464
02:56:26,320 --> 02:56:31,600
um a const off state uh needs verification

1465
02:56:31,600 --> 02:56:35,912
okay so that makes sense as well otherwise we're going to say where our

1466
02:56:35,912 --> 02:56:42,160
state is bought state logged in and remember the logged in state actually

1467
02:56:42,160 --> 02:56:46,872
needs your user okay so

1468
02:56:46,872 --> 02:56:51,040
um that is actually working quite well right now

1469
02:56:51,040 --> 02:56:55,440
and now it says user

1470
02:56:55,440 --> 02:57:00,640
that shouldn't really happen because the user actually isn't null

1471
02:57:00,640 --> 02:57:04,960
so we have already checked the user so we could put let's see what is it

1472
02:57:04,960 --> 02:57:09,832
actually complaining about user value of type null can't be

1473
02:57:09,832 --> 02:57:15,600
assigned to a parameter of auth user in a cons constructor try using a subtype

1474
02:57:15,600 --> 02:57:20,160
or removing the keyword const and i mean i understand this part to be

1475
02:57:20,160 --> 02:57:22,640
honest with you and that's correct that's a mistake that i've made in here

1476
02:57:22,640 --> 02:57:26,160
and that's because i said a constant constructor is being called with a user

1477
02:57:26,160 --> 02:57:31,192
which is a variable so you should also know that we can't do that all right

1478
02:57:31,192 --> 02:57:36,232
because user in itself is not const hence we can't call a const constructor

1479
02:57:36,232 --> 02:57:40,400
on a on a state that uses a variable user okay

1480
02:57:40,400 --> 02:57:44,872
great now we've handled the initialize events

1481
02:57:44,872 --> 02:57:47,912
all right what we need to do is to handle the

1482
02:57:47,912 --> 02:57:52,000
login event so let's go ahead after this i'm just going to put a comment in here

1483
02:57:52,000 --> 02:57:55,360
and just say initialize just to make things a little

1484
02:57:55,360 --> 02:57:59,192
bit separate from each other and then log in

1485
02:57:59,192 --> 02:58:02,320
i'm going to bring the code up so you see it sorry about that it was a little

1486
02:58:02,320 --> 02:58:06,800
bit hidden when i wrote this comment so now you can see how it looks like

1487
02:58:06,800 --> 02:58:12,000
then we're going to handle login events so remember again an event is something

1488
02:58:12,000 --> 02:58:16,800
that the ui is going to send us and that event if you remember it has a username

1489
02:58:16,800 --> 02:58:20,720
sorry an email and a password then we're going to unpack that email and password

1490
02:58:20,720 --> 02:58:25,360
provided to give it to our provider and provide it to our provider give it to

1491
02:58:25,360 --> 02:58:29,600
the provider and then react to the various results that come back from the

1492
02:58:29,600 --> 02:58:33,040
provider okay so

1493
02:58:33,040 --> 02:58:39,360
so we're gonna say then on off event login oops yeah login and we're going to

1494
02:58:39,360 --> 02:58:43,600
say event and then emit and we're going to say this is an async

1495
02:58:43,600 --> 02:58:48,000
function and it goes in here all right so okay

1496
02:58:48,000 --> 02:58:53,600
now this is the beauty of a blog using emit you can let your consumers know

1497
02:58:53,600 --> 02:58:57,120
what you're up to let's say someone says login what is the

1498
02:58:57,120 --> 02:59:01,280
first thing that we're up to yeah we are loading we are in the state of loading

1499
02:59:01,280 --> 02:59:05,280
because we are going to start loading and make api calls and that's exactly

1500
02:59:05,280 --> 02:59:10,800
why we have these off states in here remember we have the auth state of

1501
02:59:10,800 --> 02:59:14,320
loading so let's change our state as soon as you tell us to log in we're

1502
02:59:14,320 --> 02:59:19,192
going to say oh now we're loading okay because we don't have a state that says

1503
02:59:19,192 --> 02:59:23,120
logging in but we have a general state that says

1504
02:59:23,120 --> 02:59:26,320
loading if you want to you could remove this

1505
02:59:26,320 --> 02:59:29,360
loading state and just say

1506
02:59:29,360 --> 02:59:35,680
i have a class for instance auth state logging in that's also acceptable but

1507
02:59:35,680 --> 02:59:39,512
then you have to have a um

1508
02:59:39,512 --> 02:59:43,360
something something in uh state for everything like even if

1509
02:59:43,360 --> 02:59:48,552
you're logging out you should say off state uh logging out

1510
02:59:48,552 --> 02:59:52,552
uh so then you have to have a loading state for pretty much all the states

1511
02:59:52,552 --> 02:59:55,760
that do something asynchronous and that's why we haven't done that we

1512
02:59:55,760 --> 03:00:00,552
have a generic or a general loading state that indicates to the outside

1513
03:00:00,552 --> 03:00:06,232
world that hey you are doing something okay

1514
03:00:06,232 --> 03:00:09,120
don't worry about all these saved operations that have been in this off

1515
03:00:09,120 --> 03:00:14,000
state file i pretty much i mean i didn't change anything in this file okay so it

1516
03:00:14,000 --> 03:00:17,832
is how we left it when we finished off stage

1517
03:00:17,832 --> 03:00:23,360
all right so let's in here then emit a an auth state loading

1518
03:00:23,360 --> 03:00:27,280
just like that and upon logging in what we need to do

1519
03:00:27,280 --> 03:00:30,960
is just to grab the email so we're just going to say email is equal to the event

1520
03:00:30,960 --> 03:00:35,912
email and password is equal to the event password okay

1521
03:00:35,912 --> 03:00:39,512
and then we're gonna do a try and catch

1522
03:00:39,512 --> 03:00:43,040
like this and tell our provider

1523
03:00:43,040 --> 03:00:48,480
so we're gonna say await provider um i believe we have let's see what the

1524
03:00:48,480 --> 03:00:52,400
problem in here avoid okay that's fine

1525
03:00:52,400 --> 03:00:57,912
let's then create a user so let's say final user is equal to provider dot

1526
03:00:57,912 --> 03:01:02,400
we have a login function on our provider excuse me

1527
03:01:02,400 --> 03:01:07,440
and here we're literally passing email and password to that function okay and

1528
03:01:07,440 --> 03:01:12,480
remember login function at the provider level it could

1529
03:01:12,480 --> 03:01:16,480
throw an exception but that's fine because we have a catch in here so if we

1530
03:01:16,480 --> 03:01:20,552
go to the login function in our auth provider let's see if we can find

1531
03:01:20,552 --> 03:01:24,232
firebase auth provider inside the login function let's see if

1532
03:01:24,232 --> 03:01:28,000
we can find out here we have various exceptions that are going to be thrown

1533
03:01:28,000 --> 03:01:33,192
user not found wrong password generic auth exception so if any of those

1534
03:01:33,192 --> 03:01:38,000
exceptions happen we're going to come into this catch block all right

1535
03:01:38,000 --> 03:01:41,832
so now that we have a user if nothing happens if no exceptions

1536
03:01:41,832 --> 03:01:46,640
happen then we're going to emit and we're going to say const or actually we

1537
03:01:46,640 --> 03:01:51,280
can't do a const because a user is a variable so we're going to say auth

1538
03:01:51,280 --> 03:01:53,832
state logged in

1539
03:01:53,832 --> 03:01:57,832
and it's just going to say give us a user and that's the user

1540
03:01:57,832 --> 03:02:02,400
should any exception happen we're going to emit a login failure and we're going

1541
03:02:02,400 --> 03:02:06,232
to say emit auth state

1542
03:02:06,232 --> 03:02:10,160
oops log

1543
03:02:10,160 --> 03:02:14,232
what's it failure login failure i can see yeah

1544
03:02:14,232 --> 03:02:19,040
and in here we literally pass the exception there

1545
03:02:19,040 --> 03:02:22,960
can't be assigned and then so we probably just have to see i can i mean i

1546
03:02:22,960 --> 03:02:27,600
understand this exception as well it's because exceptions in dart maybe this is

1547
03:02:27,600 --> 03:02:32,480
a little bit of a side talk but exceptions in dart can be

1548
03:02:32,480 --> 03:02:36,160
anything i mean i posted something on linkedin on twitter a while ago saying

1549
03:02:36,160 --> 03:02:42,080
that well you can even throw an enum value as an exception and that's

1550
03:02:42,080 --> 03:02:46,800
why in dart exceptions are of type object and

1551
03:02:46,800 --> 03:02:50,400
in this case i believe they're even object optional object no it's actually

1552
03:02:50,400 --> 03:02:54,872
an object so here the error is that you're saying that off state login

1553
03:02:54,872 --> 03:02:59,912
failure that needs an exception but you're passing it an object so let's say

1554
03:02:59,912 --> 03:03:04,160
on exception if an exception happens then

1555
03:03:04,160 --> 03:03:07,280
uh

1556
03:03:07,280 --> 03:03:11,040
and that's because we know that our login function is not act let's have a

1557
03:03:11,040 --> 03:03:15,192
look at the login function and see if it can throw anything other than an

1558
03:03:15,192 --> 03:03:19,040
exception and we see now that it has a general catch

1559
03:03:19,040 --> 03:03:23,192
block which throws a generic auth exception which in turn is an exception

1560
03:03:23,192 --> 03:03:27,600
so in our application right now as it is we're not throwing anything that is not

1561
03:03:27,600 --> 03:03:33,192
an exception so every exception is coming from the exception class

1562
03:03:33,192 --> 03:03:38,400
all right fantastic now we have our login um

1563
03:03:38,400 --> 03:03:43,192
event in place and we're emitting the correct states logged in or login

1564
03:03:43,192 --> 03:03:48,720
failure now we have to handle log out so let me bring the code up and we're going

1565
03:03:48,720 --> 03:03:52,800
to say log out and this is very similar to login a little bit less code so let's

1566
03:03:52,800 --> 03:03:56,400
just say on again we're going to handle inputs okay

1567
03:03:56,400 --> 03:04:02,320
so off event log out so if someone tells us to

1568
03:04:02,320 --> 03:04:06,320
log out like this then we're gonna say okay we

1569
03:04:06,320 --> 03:04:10,720
take the state oh so much documentation everywhere um

1570
03:04:10,720 --> 03:04:14,640
sorry the event and then the emit and then we make this

1571
03:04:14,640 --> 03:04:18,960
function asynchronous like that and the first thing that we have to do

1572
03:04:18,960 --> 03:04:22,320
again since in log out we're going to call the

1573
03:04:22,320 --> 03:04:26,960
logout on our provider which is an asynchronous function we need to tell

1574
03:04:26,960 --> 03:04:31,832
the ui about that we need to tell the ui that upon you requesting

1575
03:04:31,832 --> 03:04:36,320
log out from the off block you have to do some loading what better way of

1576
03:04:36,320 --> 03:04:41,120
indicating that to the output to the outside world by actually changing our

1577
03:04:41,120 --> 03:04:47,280
state using emit so we're going to say off state loading okay so that's us

1578
03:04:47,280 --> 03:04:52,400
indicating to the outside world that we're doing something

1579
03:04:52,400 --> 03:04:57,680
all right so uh let's then do a try and catch in here

1580
03:04:57,680 --> 03:05:02,232
cat on exception catch e

1581
03:05:02,232 --> 03:05:05,600
like this if an exception occurs then we're going

1582
03:05:05,600 --> 03:05:08,640
to say emit

1583
03:05:08,640 --> 03:05:13,832
off states failure we had a log out failure and that expected an exception

1584
03:05:13,832 --> 03:05:19,040
so i'm just going to put the e in there we could also put this image in try it

1585
03:05:19,040 --> 03:05:22,232
doesn't matter because this doesn't really throw an exception it can never

1586
03:05:22,232 --> 03:05:25,120
throw an exception but we're going to put it in try catch

1587
03:05:25,120 --> 03:05:30,160
because i believe just it's a little bit cleaner it's it's like a transaction

1588
03:05:30,160 --> 03:05:34,000
so what we're gonna do is to say await our provider

1589
03:05:34,000 --> 03:05:38,720
and log out in here all right and should the logout actually go through then

1590
03:05:38,720 --> 03:05:42,160
we're going to go to the next line which is line 40 for me maybe another line

1591
03:05:42,160 --> 03:05:45,912
number for you and then in this case we're just going

1592
03:05:45,912 --> 03:05:51,440
to emit a const of off state log out

1593
03:05:51,440 --> 03:05:54,960
fantastic all right so

1594
03:05:54,960 --> 03:06:01,120
that was it really i mean it was just a lot of talk a lot of creation of like uh

1595
03:06:01,120 --> 03:06:05,760
classes but um we've now gotten there so now we

1596
03:06:05,760 --> 03:06:09,760
have an off block and then we have our auth event and off state so now that we

1597
03:06:09,760 --> 03:06:13,280
have those i'm going to close those tabs after you've saved them so make sure

1598
03:06:13,280 --> 03:06:17,912
that those files are also saved then what we're going to do is just to

1599
03:06:17,912 --> 03:06:21,600
get rid of that ugly counter block that we created in the previous chapter which

1600
03:06:21,600 --> 03:06:25,192
kind of is like dirtying down our main user interface so

1601
03:06:25,192 --> 03:06:29,280
let's go to main dart and let's grab this

1602
03:06:29,280 --> 03:06:36,080
home page the way we have here let's see so let's go in this new home page that

1603
03:06:36,080 --> 03:06:40,160
we created for our counter block and just completely remove that everything

1604
03:06:40,160 --> 03:06:43,040
that is related to that counter block okay

1605
03:06:43,040 --> 03:06:48,832
and then let's go ahead and bring back our normal home page like

1606
03:06:48,832 --> 03:06:53,912
that right fantastic uh we have flutter block and block in there

1607
03:06:53,912 --> 03:06:57,680
and that is causing a little a little bit of a problem but that's okay

1608
03:06:57,680 --> 03:07:02,400
too so what we need to do now is to actually

1609
03:07:02,400 --> 03:07:04,552
go and

1610
03:07:04,552 --> 03:07:09,280
let me bring up the next captioning here as you can see now we

1611
03:07:09,280 --> 03:07:13,280
need to use block provider and block builder and we're going to do that in

1612
03:07:13,280 --> 03:07:17,680
our main dart file so i hope you haven't

1613
03:07:17,680 --> 03:07:21,360
jumped over the previous chapter because i talked a lot about in the previous

1614
03:07:21,360 --> 03:07:24,872
chapter about block providers block builders block listeners block consumers

1615
03:07:24,872 --> 03:07:27,832
and what they are how they're different from each other and there's a lot of

1616
03:07:27,832 --> 03:07:31,040
information and material available online that you can read also

1617
03:07:31,040 --> 03:07:35,440
about all these things online but if you've skimmed over that chapter and

1618
03:07:35,440 --> 03:07:39,360
didn't understand really how things worked what we need in here just think

1619
03:07:39,360 --> 03:07:44,160
of it that our main application needs to offlock the auth block is responsible

1620
03:07:44,160 --> 03:07:49,280
now from this point on to handle everything related to authentication

1621
03:07:49,280 --> 03:07:52,872
it is not the ui part remember the ui part is

1622
03:07:52,872 --> 03:07:58,320
completely separate that's the goal of block in its core to separate business

1623
03:07:58,320 --> 03:08:02,232
logic from presentation logic so your presentation logic everything related to

1624
03:08:02,232 --> 03:08:06,720
the ui for instance displaying dialogues displaying exceptions handling etc etc

1625
03:08:06,720 --> 03:08:12,320
etc that's all in the ui has nothing to do with all of what but the off block is

1626
03:08:12,320 --> 03:08:15,600
going to be responsible for actually initializing the authentication process

1627
03:08:15,600 --> 03:08:19,040
and also with with firebase and also allowing us to log in and log out et

1628
03:08:19,040 --> 03:08:22,640
cetera we need the auth block so how do we get

1629
03:08:22,640 --> 03:08:28,400
off block in our main application since the entire application is dependent on

1630
03:08:28,400 --> 03:08:32,080
the auth block even when you're in the main ui of the application you should

1631
03:08:32,080 --> 03:08:37,040
still be able to for instance log out then we could literally say that oh

1632
03:08:37,040 --> 03:08:42,080
everything inside our application in the main function is gonna be dependent on

1633
03:08:42,080 --> 03:08:47,680
that off block so what we're gonna do is in our home page

1634
03:08:47,680 --> 03:08:52,640
let's see in here here we're right now saying we have a home const homepage you

1635
03:08:52,640 --> 03:08:58,960
see actually let me command s this and bring uh scrcpy bag back here

1636
03:08:58,960 --> 03:09:04,400
so now we see our notes back so home page is fixed now

1637
03:09:04,400 --> 03:09:08,232
so what we are going to do in here we're going to instead of a const homepage

1638
03:09:08,232 --> 03:09:11,680
we're going to replace this with an auth provider okay

1639
03:09:11,680 --> 03:09:15,680
now we could do this as you can see we have

1640
03:09:15,680 --> 03:09:19,280
um do we have sorry with a block provider

1641
03:09:19,280 --> 03:09:24,480
i have the block extension in visual studio code which then gives me the

1642
03:09:24,480 --> 03:09:28,960
ability to wrap things with various block

1643
03:09:28,960 --> 03:09:34,320
components and flutter block components and you can go to extensions and install

1644
03:09:34,320 --> 03:09:40,320
the block libraries extension for visual studio code

1645
03:09:40,320 --> 03:09:44,552
if you're if you're using another uh development environment if you're for

1646
03:09:44,552 --> 03:09:51,120
instance using sublime you may not have that ability so

1647
03:09:51,120 --> 03:09:56,320
what you'll need to do is to write this by hand so i'm gonna take advantage of

1648
03:09:56,320 --> 03:10:00,232
wrapping this homepage with a block provider meaning that

1649
03:10:00,232 --> 03:10:06,552
my home page now let's see here let's say this is a const as well

1650
03:10:06,552 --> 03:10:11,280
is a home page before its creation is

1651
03:10:11,280 --> 03:10:14,232
dependent on the creation of a block okay

1652
03:10:14,232 --> 03:10:20,000
so let's go in here and say the block provider is also using our off block

1653
03:10:20,000 --> 03:10:24,480
which i believe now visual studio code is going to auto import you may need to

1654
03:10:24,480 --> 03:10:29,192
import that by hand if you are not using visual studio code or an or text editor

1655
03:10:29,192 --> 03:10:34,552
or an id that has this feature now in the create

1656
03:10:34,552 --> 03:10:39,192
parameter of our block provider we actually have to create the uh block

1657
03:10:39,192 --> 03:10:44,080
that we promised we're going to create and you can see that being created here

1658
03:10:44,080 --> 03:10:48,160
so and i can now see directly in here it's

1659
03:10:48,160 --> 03:10:53,040
creating a const provider but we can't have that simply because

1660
03:10:53,040 --> 03:10:57,600
our auth block if we go back to our off block in here i believe that our

1661
03:10:57,600 --> 03:11:02,480
constructor is not a constant so if you put const in there

1662
03:11:02,480 --> 03:11:06,552
you can see that it's not allowing us to do that simply because

1663
03:11:06,552 --> 03:11:12,160
block itself as a library as a class here it has no constant constructor so

1664
03:11:12,160 --> 03:11:16,720
we can't have a constant provider so let's remove that const from there okay

1665
03:11:16,720 --> 03:11:20,480
now in here we have to say it should create offlock

1666
03:11:20,480 --> 03:11:25,280
and if you remember offblock requires an auth provider so let's go in

1667
03:11:25,280 --> 03:11:29,680
here and say firebase off

1668
03:11:29,680 --> 03:11:33,600
fire and that's going to be auto imported as well

1669
03:11:33,600 --> 03:11:36,480
perfect now we have our

1670
03:11:36,480 --> 03:11:43,680
block provider that's fantastic so now what we need to do is to have a look

1671
03:11:43,680 --> 03:11:47,120
in here and see what else we have to change in

1672
03:11:47,120 --> 03:11:52,000
our main functionality well

1673
03:11:52,000 --> 03:11:55,040
what we have at the moment i mean we have

1674
03:11:55,040 --> 03:11:58,720
of course we have this functionality here to create the

1675
03:11:58,720 --> 03:12:03,680
auth block for us in the main function but we're not actually really using that

1676
03:12:03,680 --> 03:12:08,160
in inside here we're using future builder okay

1677
03:12:08,160 --> 03:12:13,600
so what we need to do is instead of using future builder let's use our um

1678
03:12:13,600 --> 03:12:18,320
what we're going to do is we're going to use block provider

1679
03:12:18,320 --> 03:12:22,160
i'm sorry block builder and block builder is kind of like future builder

1680
03:12:22,160 --> 03:12:25,040
but it's going to use but it's going to use our

1681
03:12:25,040 --> 03:12:29,760
block which is defined here now this may seem

1682
03:12:29,760 --> 03:12:33,600
all very complicated to begin with and what you need to understand is that

1683
03:12:33,600 --> 03:12:37,832
there is a lot of magic happening behind the scenes in block in that when you

1684
03:12:37,832 --> 03:12:42,480
create a block provider in here and then it gets a context and then it goes here

1685
03:12:42,480 --> 03:12:47,912
to create the block what's happening internally in block is that that context

1686
03:12:47,912 --> 03:12:53,192
itself is gonna get injected with your off block so when you create the auth

1687
03:12:53,192 --> 03:12:58,640
login here this context from this point on inside the entire application is

1688
03:12:58,640 --> 03:13:01,832
going to be it's going to be populated with an auth

1689
03:13:01,832 --> 03:13:07,192
block that you can read from okay and i'll show you now how

1690
03:13:07,192 --> 03:13:11,120
so in the build function of your homepage what you need to do in here

1691
03:13:11,120 --> 03:13:13,912
we're going to say

1692
03:13:13,912 --> 03:13:17,040
see we have this future we have the switch

1693
03:13:17,040 --> 03:13:20,720
of the snapshot and that's all fine

1694
03:13:20,720 --> 03:13:23,600
so let's just then go ahead actually what

1695
03:13:23,600 --> 03:13:26,640
we need to do to be honest with you is to um

1696
03:13:26,640 --> 03:13:30,320
we're not going to use so much of this code so it's perhaps makes more sense

1697
03:13:30,320 --> 03:13:34,320
just to shift it down a little bit to make room for our

1698
03:13:34,320 --> 03:13:40,480
block provider okay so in uh sorry a block builder

1699
03:13:40,480 --> 03:13:44,960
so our block builder has a builder function but we also are going to get

1700
03:13:44,960 --> 03:13:49,120
hold off our um actual block in here in the block

1701
03:13:49,120 --> 03:13:52,872
builder as you'll soon see when you come to your home page what the

1702
03:13:52,872 --> 03:13:56,720
first thing that we need to do is to tell our os block to initialize itself

1703
03:13:56,720 --> 03:14:01,760
do you remember our auth block has this um event handling for initialize so

1704
03:14:01,760 --> 03:14:06,320
somehow in this build function we need to tell our author like hey

1705
03:14:06,320 --> 03:14:09,912
initialize yourself so how do we get hold of that

1706
03:14:09,912 --> 03:14:14,080
i talked about this how do we hold off how do we get hold of the off block in

1707
03:14:14,080 --> 03:14:18,400
here since we don't have access to it here but i just mentioned that

1708
03:14:18,400 --> 03:14:22,552
when you create an auth provider sorry a blog provider that blog provider is

1709
03:14:22,552 --> 03:14:28,400
going to inject your off block into the context so the the auth block is hidden

1710
03:14:28,400 --> 03:14:34,000
somewhere in this context and the way to read that is you just say context dot

1711
03:14:34,000 --> 03:14:37,280
read and then there's a you see there's a

1712
03:14:37,280 --> 03:14:40,960
function in here and if you go into this read function you see it actually comes

1713
03:14:40,960 --> 03:14:44,552
from a provider here so

1714
03:14:44,552 --> 03:14:50,640
flutter provider provider dart okay so in context read let's just say that

1715
03:14:50,640 --> 03:14:56,640
we're looking for auth walk and what we're going to tell it to is to

1716
03:14:56,640 --> 03:15:00,480
tell it to initialize but if you put dot in here you see there is no function

1717
03:15:00,480 --> 03:15:04,480
called initialize or anything and that's because the way you communicate with an

1718
03:15:04,480 --> 03:15:09,040
auth block as we saw in um or the way that you communicate with a block

1719
03:15:09,040 --> 03:15:14,480
generally is that you send it messages using its add function so add is your

1720
03:15:14,480 --> 03:15:20,232
way of communicating with your block or your blocks about various events that

1721
03:15:20,232 --> 03:15:25,040
you're sending okay so in this in here we're going to say add and then we're

1722
03:15:25,040 --> 03:15:29,040
going to say auth event

1723
03:15:29,040 --> 03:15:31,760
okay if you're getting an error about this

1724
03:15:31,760 --> 03:15:35,040
auth event initialize not being in context it's probably because you don't

1725
03:15:35,040 --> 03:15:42,232
have an auto import for this uh file in here which i had so

1726
03:15:42,232 --> 03:15:48,720
we have now we are sending initialize events um to our auth block

1727
03:15:48,720 --> 03:15:53,192
now that that is done we need to do our block builder so in this builder

1728
03:15:53,192 --> 03:15:57,360
function let me go here and get help from visual studio code to complete that

1729
03:15:57,360 --> 03:16:02,640
and you can see now i get a context and a state so

1730
03:16:02,640 --> 03:16:06,800
so let's go ahead and handle various states that could happen during this

1731
03:16:06,800 --> 03:16:10,960
period during the initialization period okay so let's say

1732
03:16:10,960 --> 03:16:17,120
if the state is off state logged in so if we are actually logged in then we're

1733
03:16:17,120 --> 03:16:22,832
gonna return const notes view like that so that is this view all

1734
03:16:22,832 --> 03:16:30,552
right else if state is auth state needs verification

1735
03:16:30,552 --> 03:16:35,832
then let's see what we were doing we were returning this verify email view so

1736
03:16:35,832 --> 03:16:41,760
let's go ahead and do that here as well now if

1737
03:16:41,760 --> 03:16:46,640
excuse me if the state is logged out excuse me again

1738
03:16:46,640 --> 03:16:50,960
it's off it's logged out

1739
03:16:50,960 --> 03:16:57,360
then let's see how we were handling that before

1740
03:16:57,360 --> 03:17:03,680
um if we were logged out we were going to the login view like like here

1741
03:17:03,680 --> 03:17:09,680
so if we were logged out then we should send the user to the login view

1742
03:17:09,680 --> 03:17:13,512
otherwise if it's not those states

1743
03:17:13,512 --> 03:17:16,640
so what can we do let's say that in the

1744
03:17:16,640 --> 03:17:20,400
future you're going to add some more states that this

1745
03:17:20,400 --> 03:17:24,640
block block builder right now is not able to handle

1746
03:17:24,640 --> 03:17:28,320
so um what you want is still an application

1747
03:17:28,320 --> 03:17:32,080
that is in working condition you shouldn't crash or anything so

1748
03:17:32,080 --> 03:17:36,400
let's just in this case return a scaffold

1749
03:17:36,400 --> 03:17:42,552
and make it constant and let's in the body of our scaffold

1750
03:17:42,552 --> 03:17:48,720
create a circular progress indicator just like that all right so it looks

1751
03:17:48,720 --> 03:17:53,912
like that also you could mark your block builder as well to say that it

1752
03:17:53,912 --> 03:17:59,040
has the off block and also it has off states you remember

1753
03:17:59,040 --> 03:18:03,280
block builder has these parameters in you see

1754
03:18:03,280 --> 03:18:07,600
the builder and sorry the block itself and the state that's why i've marked

1755
03:18:07,600 --> 03:18:12,000
them like this okay and now as you can see state is not an uh it's not just a

1756
03:18:12,000 --> 03:18:17,360
normal object anymore it's an off state before writing that state was just an

1757
03:18:17,360 --> 03:18:21,912
object but now i've marked it as off state and you can see it's become an off

1758
03:18:21,912 --> 03:18:26,080
state here as well great stuff now let's get rid of the

1759
03:18:26,080 --> 03:18:31,280
future builder that we have from before so i'm going to remove all that code

1760
03:18:31,280 --> 03:18:36,080
excuse me and now you can see we have our off

1761
03:18:36,080 --> 03:18:40,640
our block builder here and a block provider up there

1762
03:18:40,640 --> 03:18:45,600
so that's all we have to do um now it's great actually we're getting this issue

1763
03:18:45,600 --> 03:18:50,960
um and you can see it's i love these errors i mean a lot of developers are

1764
03:18:50,960 --> 03:18:55,120
scared of stuff like this but it's so important to actually read what's inside

1765
03:18:55,120 --> 03:18:58,232
this what is what it's telling us is this happens because you use the build

1766
03:18:58,232 --> 03:19:01,360
context that does not include the provider of your choice and that's

1767
03:19:01,360 --> 03:19:07,832
because of this you see is this thing context read auth block so

1768
03:19:07,832 --> 03:19:11,832
so what flutter is saying that hey you're expecting me to extract an off

1769
03:19:11,832 --> 03:19:15,912
block from the context but it's not there okay why is it not there it's

1770
03:19:15,912 --> 03:19:20,000
simply because the main function i've mentioned this quite a few times in the

1771
03:19:20,000 --> 03:19:24,232
course but i believe it's so important that i want to mention it again the main

1772
03:19:24,232 --> 03:19:30,800
function does not get called during hot reloads and i just did a hot reload by

1773
03:19:30,800 --> 03:19:36,480
doing command s so there is no block inside the context

1774
03:19:36,480 --> 03:19:40,872
because the block is actually created by the block provider which is inside the

1775
03:19:40,872 --> 03:19:44,640
main function so if i want this auth block to be injected in the build

1776
03:19:44,640 --> 03:19:48,800
context then i have to do a hot restart so

1777
03:19:48,800 --> 03:19:52,720
now the application is working as it should all right

1778
03:19:52,720 --> 03:19:57,832
excuse me so we've now taken care of our main dart

1779
03:19:57,832 --> 03:20:02,320
file removed the stuff that we have for the counter application which we created

1780
03:20:02,320 --> 03:20:06,800
with auth with which we created with block and now we've moved to using our

1781
03:20:06,800 --> 03:20:12,480
first two components from block which is block provider and also block builder we

1782
03:20:12,480 --> 03:20:16,640
have a few unused imports so let's just remove those

1783
03:20:16,640 --> 03:20:21,120
okay just to make sure that this file is quite clean

1784
03:20:21,120 --> 03:20:26,320
the part is that it's done now what we need to do is to use as you can see in

1785
03:20:26,320 --> 03:20:31,040
the caption we need to use our off block in the login view and the only thing we

1786
03:20:31,040 --> 03:20:35,040
really need to do is upon pressing the login button we need to send the off

1787
03:20:35,040 --> 03:20:41,440
event login to our auth block that's very very simple so let's go

1788
03:20:41,440 --> 03:20:46,160
ahead and take care of that this is just easy from

1789
03:20:46,160 --> 03:20:50,552
go to login view as the caption indicates and where we're calling this

1790
03:20:50,552 --> 03:20:55,912
login functionality here as you can see we're saying

1791
03:20:55,912 --> 03:20:59,280
um we're taking the email and

1792
03:20:59,280 --> 03:21:04,640
password and we're just yeah calling a login so

1793
03:21:04,640 --> 03:21:09,832
let's see we also have is email verified so we're not gonna take care of that at

1794
03:21:09,832 --> 03:21:13,192
this point so we're not gonna really

1795
03:21:13,192 --> 03:21:18,800
uh take care of email verified so in this in this try statement here verify

1796
03:21:18,800 --> 03:21:22,000
email route we will fix that soon so let's just

1797
03:21:22,000 --> 03:21:26,552
remove this try everything in the try block

1798
03:21:26,552 --> 03:21:31,600
and what we need to do in here we need to read our block our auth block and

1799
03:21:31,600 --> 03:21:37,600
then convey an event to it okay how do we read the the a block and that is

1800
03:21:37,600 --> 03:21:44,832
using context dot read or what was it called read i believe actually yeah but

1801
03:21:44,832 --> 03:21:50,000
remember autoblock and three function is not available

1802
03:21:50,000 --> 03:21:54,480
until you import your provider and i can see in here says

1803
03:21:54,480 --> 03:22:00,400
package provider src but in the in our main file we didn't actually

1804
03:22:00,400 --> 03:22:05,360
import provider so we've imported our flutter block so let's go ahead and do

1805
03:22:05,360 --> 03:22:10,640
that as well in here so inside login view dart please import your flutter

1806
03:22:10,640 --> 03:22:16,640
block so now all of a sudden we're going to have access to the read function okay

1807
03:22:16,640 --> 03:22:20,872
so in there what we what we're going to do is just to add an event to

1808
03:22:20,872 --> 03:22:23,912
our let's see if we can get access oh for

1809
03:22:23,912 --> 03:22:27,280
that we need probably to import block as well so

1810
03:22:27,280 --> 03:22:31,832
package excuse me block

1811
03:22:31,832 --> 03:22:34,400
and then okay

1812
03:22:34,400 --> 03:22:38,232
let's see if then all of a sudden we're gonna get the add functionality in here

1813
03:22:38,232 --> 03:22:42,400
context read oh sorry about that it's because this is a function i need to

1814
03:22:42,400 --> 03:22:48,080
call the function so add and i may then get away by removing block from here i

1815
03:22:48,080 --> 03:22:51,440
apologize for that we didn't really need to import um

1816
03:22:51,440 --> 03:22:55,600
block library as such

1817
03:22:55,600 --> 03:22:58,872
okay i understand this is a little bit jumpy that's okay though so all we're

1818
03:22:58,872 --> 03:23:03,040
doing is that we removed everything in the try uh block and we're removing

1819
03:23:03,040 --> 03:23:07,512
we're replacing that using context read we're reading our off block from the

1820
03:23:07,512 --> 03:23:10,480
build context and now we want to tell it to

1821
03:23:10,480 --> 03:23:16,480
log in so you remember we had a l off event login

1822
03:23:16,480 --> 03:23:20,160
so let's go ahead and do that and as you can see it's going to auto import it for

1823
03:23:20,160 --> 03:23:22,872
us so i mean here we have the email and

1824
03:23:22,872 --> 03:23:26,080
password fantastic

1825
03:23:26,080 --> 03:23:30,800
so that's that all right so that's gonna send that

1826
03:23:30,800 --> 03:23:35,040
event and then we have the rest of the exemptions now remember

1827
03:23:35,040 --> 03:23:39,040
i understand you may think oh exceptions though how are we handling

1828
03:23:39,040 --> 03:23:41,760
them well

1829
03:23:41,760 --> 03:23:45,040
we are not at the moment our exception handling is

1830
03:23:45,040 --> 03:23:50,080
completely broken by going towards using auth block everything is broken

1831
03:23:50,080 --> 03:23:56,232
as far as exceptions go because um you can see the way our auth block

1832
03:23:56,232 --> 03:24:00,800
actually throws exceptions is by emitting them inside states so you see

1833
03:24:00,800 --> 03:24:04,800
it says a state login failure and then there's an exception in it so we're not

1834
03:24:04,800 --> 03:24:08,640
handling those at the moment so you're right exceptions are completely broken

1835
03:24:08,640 --> 03:24:13,040
for the entirety of this chapter and that's okay because we're gonna fix them

1836
03:24:13,040 --> 03:24:16,960
exactly right after this chapter so now you know what's coming in the

1837
03:24:16,960 --> 03:24:22,720
next chapter as well all right that's that's for uh our

1838
03:24:22,720 --> 03:24:25,912
login so i don't think we need to do more to be

1839
03:24:25,912 --> 03:24:29,832
honest inside our login so let's go into our imports and just clean up the

1840
03:24:29,832 --> 03:24:32,640
imports as well

1841
03:24:32,640 --> 03:24:37,280
great stuff so that's for login um what we also have to do now is the

1842
03:24:37,280 --> 03:24:40,640
caption indicates we have to go to our notes view

1843
03:24:40,640 --> 03:24:44,800
um and make sure that we can log out using our

1844
03:24:44,800 --> 03:24:48,800
auth block as well so let's go to notes view here

1845
03:24:48,800 --> 03:24:52,720
and right now what we're doing is saying we're awaiting on the auth service

1846
03:24:52,720 --> 03:24:56,480
firebase logout so we're not going to do that anymore

1847
03:24:56,480 --> 03:25:01,680
so we're just going to use our off block in order to log out

1848
03:25:01,680 --> 03:25:05,512
so in here let's remove that and just say

1849
03:25:05,512 --> 03:25:10,080
that we're saying to where we want to grab the auth block first okay so let's

1850
03:25:10,080 --> 03:25:15,120
say context and then we're gonna read our um

1851
03:25:15,120 --> 03:25:18,960
autoblock like this and if he asks visual studio

1852
03:25:18,960 --> 03:25:24,720
code it's gonna it wants to import um oh yeah it wants to import auth block so

1853
03:25:24,720 --> 03:25:30,400
let's grab off block to bring it in it also doesn't know where read comes

1854
03:25:30,400 --> 03:25:34,080
from so um

1855
03:25:34,080 --> 03:25:39,440
so what we need to do now is to import uh the block library in here so

1856
03:25:39,440 --> 03:25:42,160
i'm just gonna

1857
03:25:42,160 --> 03:25:47,040
copy that code from my notes so importing flutter block and then

1858
03:25:47,040 --> 03:25:50,800
flatter block guard and here i'm actually drilling down inside flutter

1859
03:25:50,800 --> 03:25:55,280
block and just seeing that i'm interested in read context okay and read

1860
03:25:55,280 --> 03:26:00,000
context is as you can see in the code is that is the function

1861
03:26:00,000 --> 03:26:05,192
reading here oh my god there's so much documentation here you see

1862
03:26:05,192 --> 03:26:09,760
all right so that gives us the read functionality that we can use in here so

1863
03:26:09,760 --> 03:26:13,600
that's the function all right after grabbing our off block now we have to

1864
03:26:13,600 --> 03:26:17,360
convey the message of logging out in here so we're going to add an event to

1865
03:26:17,360 --> 03:26:23,040
it and then we're going to say we add the event of off event log out just like

1866
03:26:23,040 --> 03:26:27,512
that and this is a constant constructor as well so let's just send it send it

1867
03:26:27,512 --> 03:26:29,912
through

1868
03:26:29,912 --> 03:26:34,320
and after doing that we don't really have to do so much more so

1869
03:26:34,320 --> 03:26:37,680
um and we're also not in this case we're

1870
03:26:37,680 --> 03:26:42,320
not actually gonna go to to the login view so

1871
03:26:42,320 --> 03:26:45,192
what is gonna happen in here i'm actually gonna remove that and we're

1872
03:26:45,192 --> 03:26:49,440
gonna start testing a little bit so you'll see how things work okay

1873
03:26:49,440 --> 03:26:53,192
so um i'm gonna do a hot restart in here

1874
03:26:53,192 --> 03:26:57,040
and see if everything's working as it should so yeah what i'm going to do then

1875
03:26:57,040 --> 03:27:01,280
let's test log out okay so in here i'm just going to say this

1876
03:27:01,280 --> 03:27:05,280
log out and it says log out or cancel i'll say cancel so

1877
03:27:05,280 --> 03:27:09,360
that's working as it should and i say log out and then log out and

1878
03:27:09,360 --> 03:27:12,960
all of a sudden we came to the login view but hey wait a minute what happened

1879
03:27:12,960 --> 03:27:16,480
we removed this code this code that was here

1880
03:27:16,480 --> 03:27:21,832
why is why are we going to the login view without that code so this may look

1881
03:27:21,832 --> 03:27:25,832
magical but what is happening is that since the entire application is now

1882
03:27:25,832 --> 03:27:30,232
using off our auth block an auth block upon it

1883
03:27:30,232 --> 03:27:33,760
receiving the log out event let's go to the off block

1884
03:27:33,760 --> 03:27:37,912
so you get reminded of the log out event but what it is saying is that it first

1885
03:27:37,912 --> 03:27:42,232
goes to the loading state and then if it could lock the user out and it actually

1886
03:27:42,232 --> 03:27:48,160
says that i'm logged out now remember in the main function here we are actually

1887
03:27:48,160 --> 03:27:52,480
listening to various events that come from our off blog and when the events

1888
03:27:52,480 --> 03:27:57,600
that comes in is logged out we are showing the login view so it is the main

1889
03:27:57,600 --> 03:28:00,640
uh is the home page that is doing this work

1890
03:28:00,640 --> 03:28:04,000
so it's it is to me it is absolutely beautiful

1891
03:28:04,000 --> 03:28:07,600
because we are like removing

1892
03:28:07,600 --> 03:28:12,480
uh logic from our code and one step at a time

1893
03:28:12,480 --> 03:28:16,872
so inside our login as well uh so what we need to

1894
03:28:16,872 --> 03:28:21,512
let's go to the login view here

1895
03:28:21,512 --> 03:28:28,480
uh let's have a look in here at login you see after login we're not telling

1896
03:28:28,480 --> 03:28:33,832
the application that you have to go to a screen x or screen y

1897
03:28:33,832 --> 03:28:38,480
and so we can actually test this so i'm going to say my email address here and

1898
03:28:38,480 --> 03:28:43,360
foo bar bath and then log in see it comes to the main screen how did

1899
03:28:43,360 --> 03:28:49,680
that do that and that's again because of the main dart you see it first said um

1900
03:28:49,680 --> 03:28:53,280
if it's in the state of loading let's see are we handling

1901
03:28:53,280 --> 03:28:58,080
loading somewhere no we're not using that um but if if it actually becomes uh

1902
03:28:58,080 --> 03:29:03,120
logged in then it says display the notes view so that's how these screens are now

1903
03:29:03,120 --> 03:29:06,480
being shuffled and displayed to the user without us

1904
03:29:06,480 --> 03:29:12,232
having to do push routes or push name routes so

1905
03:29:12,232 --> 03:29:15,600
fantastic very well done we've taken care of everything that we said we're

1906
03:29:15,600 --> 03:29:19,360
going to take care of in this chapter so and what we usually do at the end of

1907
03:29:19,360 --> 03:29:22,552
every chapter is now that you're familiar with everything you've come so

1908
03:29:22,552 --> 03:29:27,600
far almost 40 40 chapters in this course so you should know that we need to tag

1909
03:29:27,600 --> 03:29:31,760
our work so that we don't lose them so

1910
03:29:31,760 --> 03:29:38,552
let's go ahead and have a look at if i can bring terminal up in here and

1911
03:29:38,552 --> 03:29:43,280
we see bit log you can see the last commit was step 22 so let's say git

1912
03:29:43,280 --> 03:29:48,720
commit get status first actually a whole new folder was added so we're

1913
03:29:48,720 --> 03:29:52,400
going to say git at all and let me increase the size of the

1914
03:29:52,400 --> 03:29:57,600
screen as well so we're going to say git commit and um

1915
03:29:57,600 --> 03:30:04,320
step 23 okay and push these changes

1916
03:30:04,320 --> 03:30:09,680
and we have a look at our logs get to step 22 and step 23 and there is nothing

1917
03:30:09,680 --> 03:30:14,480
to commit at this point so let's also tag our work and we say

1918
03:30:14,480 --> 03:30:19,832
step 23 and get push tags okay

1919
03:30:19,832 --> 03:30:22,800
fantastic so if you look at our tags now we have

1920
03:30:22,800 --> 03:30:28,720
20 21 22-23 okay

1921
03:30:28,720 --> 03:30:31,912
fantastic as this tradition at the end of every chapter we talk about what

1922
03:30:31,912 --> 03:30:35,832
we're going to discuss in the chapter that is coming and um

1923
03:30:35,832 --> 03:30:40,720
as i mentioned just briefly as a little note while i was talking

1924
03:30:40,720 --> 03:30:44,800
about exception handling we've now broken our exception handling

1925
03:30:44,800 --> 03:30:49,280
in that you see when we send an ad

1926
03:30:49,280 --> 03:30:56,232
signal to our block our auth block um that in itself is not gonna produce an

1927
03:30:56,232 --> 03:31:00,232
exception but right now we're treating that add

1928
03:31:00,232 --> 03:31:05,040
function and we're putting it inside a try block and then there's on exception

1929
03:31:05,040 --> 03:31:08,720
blah blah after that so none of those exception handling uh

1930
03:31:08,720 --> 03:31:14,000
catches are gonna be caught so uh we're gonna handle that and fix

1931
03:31:14,000 --> 03:31:18,080
that in the next chapter so grab some refreshments and i'll see you there

1932
03:31:18,080 --> 03:31:21,760
hello everyone and welcome to chapter 41 of this philosophy course

1933
03:31:21,760 --> 03:31:26,552
in previous chapters we've been talking quite a bit about uh block and

1934
03:31:26,552 --> 03:31:30,480
um i suggested that everybody who's taking this course to have a look at

1935
03:31:30,480 --> 03:31:34,552
block on their own time as well and to read the documentation because

1936
03:31:34,552 --> 03:31:38,080
um i understand that block could be something intimidating for especially

1937
03:31:38,080 --> 03:31:41,600
for those who haven't done for us this reactive programming before

1938
03:31:41,600 --> 03:31:45,040
however it allows us to create a good separation

1939
03:31:45,040 --> 03:31:50,080
and between our ui and our business logic as that's the point of using block

1940
03:31:50,080 --> 03:31:54,720
in a flutter application for instance so in this chapter we're going to build

1941
03:31:54,720 --> 03:31:57,360
up on top of what we've already done but we're

1942
03:31:57,360 --> 03:32:01,440
from this chapter onwards we're going to spend a little bit of time to clean the

1943
03:32:01,440 --> 03:32:05,832
logic up i mean even though things may be working the way they are right now

1944
03:32:05,832 --> 03:32:09,040
but and there is like a saying in software

1945
03:32:09,040 --> 03:32:12,480
development which i usually strongly disagree with that

1946
03:32:12,480 --> 03:32:17,832
people say if it's not broken don't fix it however we've seen over and over

1947
03:32:17,832 --> 03:32:22,800
again that things that work don't necessarily continue to work or things

1948
03:32:22,800 --> 03:32:26,320
that do work right now aren't necessarily working to the best of their

1949
03:32:26,320 --> 03:32:28,400
abilities so

1950
03:32:28,400 --> 03:32:31,912
in order to make things uh a little bit better in our source code we're going to

1951
03:32:31,912 --> 03:32:37,680
spend a little bit of time to make the logic more thorough and we have to

1952
03:32:37,680 --> 03:32:42,480
think it more through um we've gotten started with block but we are not really

1953
03:32:42,480 --> 03:32:46,480
there yet so in this chapter as you can see in the captions we're gonna handle

1954
03:32:46,480 --> 03:32:50,480
off block exceptions during login so there's gonna be

1955
03:32:50,480 --> 03:32:55,192
um quite a bit of um moving around between different files

1956
03:32:55,192 --> 03:32:59,680
and we're gonna like basically clean things up so we have to jump around

1957
03:32:59,680 --> 03:33:02,640
between files and i'm going to do my best to explain

1958
03:33:02,640 --> 03:33:06,160
when i move between files as well and like what we're adding what we're

1959
03:33:06,160 --> 03:33:09,440
removing and what we're modifying so i hope you can

1960
03:33:09,440 --> 03:33:14,640
um you can also follow along

1961
03:33:14,640 --> 03:33:17,512
all right so the first thing that we're going to do as you can see in the

1962
03:33:17,512 --> 03:33:21,600
caption here is to remove our off state login failure

1963
03:33:21,600 --> 03:33:27,280
so what we're going to do is um first of all i'm going to bring the code to the

1964
03:33:27,280 --> 03:33:31,440
to the main screen here so you see it as well and i'm going to

1965
03:33:31,440 --> 03:33:36,160
perhaps not even bring up scrcpy because i don't really think we need scr cpy

1966
03:33:36,160 --> 03:33:42,160
right now so if we look at our um

1967
03:33:42,160 --> 03:33:44,080
auth state

1968
03:33:44,080 --> 03:33:47,680
the way it is right now i don't even know which file i opened

1969
03:33:47,680 --> 03:33:53,512
um if i say command p off state so let's go to the off state dart file okay

1970
03:33:53,512 --> 03:33:58,640
and as you can see in here if i if i make the size a little bit bigger

1971
03:33:58,640 --> 03:34:01,912
you can see that we have for instance at the moment

1972
03:34:01,912 --> 03:34:05,760
um a off state login failure and then there

1973
03:34:05,760 --> 03:34:10,400
is an exception in there and also we for instance have off state logged in so it

1974
03:34:10,400 --> 03:34:13,360
seems like this is kind of like a pattern that we're following so we have

1975
03:34:13,360 --> 03:34:18,640
off state logged in and then auth state login failure with an exception and then

1976
03:34:18,640 --> 03:34:23,040
we have off state logged out and then a log out failure

1977
03:34:23,040 --> 03:34:28,640
however we're going to clean this up a little bit here and make sure that

1978
03:34:28,640 --> 03:34:32,080
we don't have just like except like

1979
03:34:32,080 --> 03:34:36,320
too many um off states that we have to handle in our

1980
03:34:36,320 --> 03:34:41,832
application okay so what we need to do is to go into our

1981
03:34:41,832 --> 03:34:46,552
logged out in here and add an exception so

1982
03:34:46,552 --> 03:34:50,640
the point of this is that if you for instance um

1983
03:34:50,640 --> 03:34:54,080
are logged out at the moment in the application

1984
03:34:54,080 --> 03:34:58,552
then there may also be an exception and you you you probably are asking like how

1985
03:34:58,552 --> 03:35:02,232
can a state of logout have an exception well

1986
03:35:02,232 --> 03:35:06,872
what we're going to do is that when you try to log into the application let's

1987
03:35:06,872 --> 03:35:10,400
let's say you're a complete new user and you haven't logged into the application

1988
03:35:10,400 --> 03:35:14,552
before okay you download the application what you what is your state your state

1989
03:35:14,552 --> 03:35:18,552
is logged out now let's say that you make up an email

1990
03:35:18,552 --> 03:35:22,400
and a password and then you write that in the login screen and then you press

1991
03:35:22,400 --> 03:35:26,400
the login button there are no users let's say in the system with that with

1992
03:35:26,400 --> 03:35:29,600
those information that you provided then we're going to give you an

1993
03:35:29,600 --> 03:35:33,280
exception we're going to give you an error saying that well you couldn't log

1994
03:35:33,280 --> 03:35:36,552
in what is your state at that point well

1995
03:35:36,552 --> 03:35:41,040
you're still logged out okay but now you're logged out and then the screen

1996
03:35:41,040 --> 03:35:45,760
also has to display some exceptions so that's why we're going to build a build

1997
03:35:45,760 --> 03:35:50,800
exception right into the auth state logged out okay

1998
03:35:50,800 --> 03:35:56,160
so let's go in here and just create an optional exception in here like that and

1999
03:35:56,160 --> 03:35:59,680
just call it exception okay and i'm going to get help from visual studio

2000
03:35:59,680 --> 03:36:03,832
code to add that parameter into the initializer

2001
03:36:03,832 --> 03:36:08,160
and let me do some reshuffling on the screen as well so you see it better and

2002
03:36:08,160 --> 03:36:13,440
perhaps decrease the size of the font as well okay

2003
03:36:13,440 --> 03:36:17,280
so that was the first thing that we had to do and you can see here

2004
03:36:17,280 --> 03:36:22,960
that i've written we don't really need auth state loading in auth events login

2005
03:36:22,960 --> 03:36:26,800
so what we're going to do is to go in

2006
03:36:26,800 --> 03:36:32,720
our off block so let me just save this file and let's go to off block

2007
03:36:32,720 --> 03:36:36,480
and in here we have this logged out with an exception and we're going to assume

2008
03:36:36,480 --> 03:36:41,600
fix that actually let's see in here yep let's just say

2009
03:36:41,600 --> 03:36:47,832
logged out at the moment and let's pass a null exception in here as well

2010
03:36:47,832 --> 03:36:52,080
so i'm going to go to my notes as well to auth block to ensure that i have all

2011
03:36:52,080 --> 03:36:55,760
the necessary information to pass through to you

2012
03:36:55,760 --> 03:36:59,760
so let's go in here and also fix that so now we're in our off block dart file and

2013
03:36:59,760 --> 03:37:04,232
we fixed the error that was caused by us adding an optional parameter

2014
03:37:04,232 --> 03:37:11,360
um to our off state um logged out all right so we fixed that now

2015
03:37:11,360 --> 03:37:14,232
then the next step as the caption indicates is we're going to remove the

2016
03:37:14,232 --> 03:37:20,320
emitting of off state loading from auth event login so

2017
03:37:20,320 --> 03:37:25,280
let's go ahead and do that so we're going to go ahead and remove this image

2018
03:37:25,280 --> 03:37:29,280
from there okay so we're not gonna display any kind of like a login screen

2019
03:37:29,280 --> 03:37:32,232
or anything

2020
03:37:32,232 --> 03:37:34,720
okay so um

2021
03:37:34,720 --> 03:37:39,280
as you can see in here we're now gonna start using block listener

2022
03:37:39,280 --> 03:37:44,232
um i've talked about block listener block provider block builder block

2023
03:37:44,232 --> 03:37:49,360
consumer before but for those of you who are not aware of what a block listener

2024
03:37:49,360 --> 03:37:53,600
is a block listener as its name indicates and it's only going to listen

2025
03:37:53,600 --> 03:37:58,320
to changes in the state of a block for instance our off block and it is going

2026
03:37:58,320 --> 03:38:02,232
to allow you to issue some side effects so

2027
03:38:02,232 --> 03:38:07,360
a side effect is for instance displaying of a new screen or displaying a dialogue

2028
03:38:07,360 --> 03:38:10,160
or removing a dialogue or removing a screen

2029
03:38:10,160 --> 03:38:13,600
from your navigation stack these are side effects okay

2030
03:38:13,600 --> 03:38:18,400
so they don't necessarily create a new widget

2031
03:38:18,400 --> 03:38:24,080
to be for instance uh to replace the current widget that's on the screen

2032
03:38:24,080 --> 03:38:29,192
instead they can create something that is on the side as its name indicates so

2033
03:38:29,192 --> 03:38:32,960
listener is perfect for that so the listener property

2034
03:38:32,960 --> 03:38:37,192
or the listener parameter of a block listener doesn't return a widget except

2035
03:38:37,192 --> 03:38:41,280
it's just a void block so it allows you to do something with the incoming state

2036
03:38:41,280 --> 03:38:44,800
okay so what we're gonna do now is we're

2037
03:38:44,800 --> 03:38:48,640
gonna start using block listener in our login view for

2038
03:38:48,640 --> 03:38:53,360
this chapter in order to basically handle our

2039
03:38:53,360 --> 03:38:56,640
exceptions because if you have a look at our

2040
03:38:56,640 --> 03:39:00,800
login view right now you can see that we have this

2041
03:39:00,800 --> 03:39:07,280
text button which reads login and in there we're sending an

2042
03:39:07,280 --> 03:39:12,232
event of login to our auth block but we're also handling exceptions in

2043
03:39:12,232 --> 03:39:16,080
this way and as we mentioned before these exceptions are never going to

2044
03:39:16,080 --> 03:39:21,680
happen in this flow because adding a new event to your

2045
03:39:21,680 --> 03:39:27,040
block or any block doesn't necessarily have to throw an exception the way it

2046
03:39:27,040 --> 03:39:31,440
works for us if we go back to our auth block and have a

2047
03:39:31,440 --> 03:39:37,680
look at our login you can see that if there is an exception what we're going

2048
03:39:37,680 --> 03:39:41,912
to do and what we're doing at the moment is like we're saying off state login

2049
03:39:41,912 --> 03:39:46,400
failure and what we're what we also need to do

2050
03:39:46,400 --> 03:39:51,280
actually is to clean this up because login failure shouldn't really be there

2051
03:39:51,280 --> 03:39:55,680
so i'm going to go to my notes as well and make sure that that yeah that seems

2052
03:39:55,680 --> 03:40:00,232
to be completely removed so let's go to our off state actually and as part of

2053
03:40:00,232 --> 03:40:04,552
what we did in here logged out that we added the exception

2054
03:40:04,552 --> 03:40:10,400
let's go and remove this login failure completely okay so now i'm in off state

2055
03:40:10,400 --> 03:40:15,512
dark file and i removed off state

2056
03:40:15,512 --> 03:40:20,400
where was it um off state login failure because as i

2057
03:40:20,400 --> 03:40:25,760
mentioned a login failure is now expressed by the auth state logged out

2058
03:40:25,760 --> 03:40:29,600
all right so you're either logged in or logged out

2059
03:40:29,600 --> 03:40:33,912
that's how i'm thinking and if you're logged out there may be an exception

2060
03:40:33,912 --> 03:40:37,040
which was therefore for instance caused during the

2061
03:40:37,040 --> 03:40:42,800
login process so now that we've removed that state auth state login failure in

2062
03:40:42,800 --> 03:40:47,760
here we're going to replace that in our osblog dart file we're going to replace

2063
03:40:47,760 --> 03:40:52,400
that by auth state and

2064
03:40:52,400 --> 03:40:57,040
log out and then an exception in here okay

2065
03:40:57,040 --> 03:41:00,640
so that's that

2066
03:41:00,640 --> 03:41:06,000
so now we're talking about uh auth listeners so let's go ahead and try to

2067
03:41:06,000 --> 03:41:11,040
fix this up so in our login view so i'm just going to go into my notes as

2068
03:41:11,040 --> 03:41:16,000
well so if you have a look at our login view

2069
03:41:16,000 --> 03:41:20,000
right now we have a text button at the bottom of the screen

2070
03:41:20,000 --> 03:41:24,640
which looks like this this is a text button and it has an on press with an

2071
03:41:24,640 --> 03:41:31,192
async okay so that is the actual login button all right and this login button

2072
03:41:31,192 --> 03:41:34,960
is the one then for now that is going to take care of the exception handling

2073
03:41:34,960 --> 03:41:38,480
using our

2074
03:41:38,480 --> 03:41:41,912
block listener so as you can see in the cache it says our login view won't be

2075
03:41:41,912 --> 03:41:46,480
rebuilt since the state is the same but with an exception

2076
03:41:46,480 --> 03:41:50,960
so this is very important to actually understand so let's have a look again at

2077
03:41:50,960 --> 03:41:55,192
our auth state in here and auth state logged out

2078
03:41:55,192 --> 03:42:00,080
so even if we put an a block listener and

2079
03:42:00,080 --> 03:42:04,960
wrap this button this text button here with a block listener

2080
03:42:04,960 --> 03:42:08,000
and you see once the application launches in

2081
03:42:08,000 --> 03:42:13,512
our off block you can see that first we are logged out okay so when the

2082
03:42:13,512 --> 03:42:17,120
application launches there is no user then the state is logged out and then

2083
03:42:17,120 --> 03:42:20,872
when you press the login button with invalid credentials for instance

2084
03:42:20,872 --> 03:42:24,640
then the state is still going to be logged out but with an exception

2085
03:42:24,640 --> 03:42:30,080
however this button won't be able to render or do

2086
03:42:30,080 --> 03:42:35,512
anything with those exceptions because from our off blocks perspective it is

2087
03:42:35,512 --> 03:42:40,480
the same state one within without an exception and the other one

2088
03:42:40,480 --> 03:42:45,360
with an exception right so it is the same state or it is the

2089
03:42:45,360 --> 03:42:48,800
same state class at least so

2090
03:42:48,800 --> 03:42:54,000
we we are actually going to fix that um but for now we're just going to go ahead

2091
03:42:54,000 --> 03:43:00,080
and do some cleanup in here so let's go ahead and as the caption

2092
03:43:00,080 --> 03:43:05,760
indicates we're gonna handle some exceptions in our text button in here

2093
03:43:05,760 --> 03:43:12,480
so let's go and wrap our text button um with a block listener okay so i'm gonna

2094
03:43:12,480 --> 03:43:16,640
do command dots on this and then i'm gonna say wrap with block

2095
03:43:16,640 --> 03:43:22,480
listener and as i've mentioned this previously i have this these wrap with

2096
03:43:22,480 --> 03:43:27,512
block etc because i have an extension in visual studio code call call block that

2097
03:43:27,512 --> 03:43:32,400
is from felix angelov i hope that i'm pronouncing pronouncing his name right

2098
03:43:32,400 --> 03:43:36,872
from um very good ventures who are the people who are basically sponsoring

2099
03:43:36,872 --> 03:43:41,440
block library so

2100
03:43:41,440 --> 03:43:45,680
that is the reason i see all those wrap with block etc in visual studio code if

2101
03:43:45,680 --> 03:43:49,280
you don't have that you may have to do this part by hand like to create a block

2102
03:43:49,280 --> 03:43:52,800
listener in here but i'm just gonna take advantage of having that extension in

2103
03:43:52,800 --> 03:43:57,440
visual studio code and just say wrap with block listener okay

2104
03:43:57,440 --> 03:44:01,512
and here you can see it says okay what type of a block is it and i'm gonna just

2105
03:44:01,512 --> 03:44:06,800
say it is the off block and it says what state does it have then

2106
03:44:06,800 --> 03:44:11,440
i'm gonna say off state all right and then here it says okay do

2107
03:44:11,440 --> 03:44:14,800
whatever you want to do now

2108
03:44:14,800 --> 03:44:16,800
so um

2109
03:44:16,800 --> 03:44:21,832
that was the wrapping of our text button with a block listener so that's that's

2110
03:44:21,832 --> 03:44:26,320
just that just went smoothly now what we have to do is as you can see

2111
03:44:26,320 --> 03:44:30,160
in the caption is to handle three separate exceptions that might happen

2112
03:44:30,160 --> 03:44:34,552
during login let's go back let's take a trip back to our

2113
03:44:34,552 --> 03:44:39,440
firebase auth provider um so firebase author provider dart file

2114
03:44:39,440 --> 03:44:43,760
and have a look at our login code as you can see in here

2115
03:44:43,760 --> 03:44:47,832
and you can see that there could be three exceptions that might happen that

2116
03:44:47,832 --> 03:44:53,832
are called firebase auth exception user not found wrong password etc

2117
03:44:53,832 --> 03:44:58,080
so we need to handle these off exceptions so user not found wrong

2118
03:44:58,080 --> 03:45:03,912
password and generic auth exception okay so let's go in here and just say that

2119
03:45:03,912 --> 03:45:12,160
okay if state is um off state logged out like that

2120
03:45:12,160 --> 03:45:15,760
so remember inside logged out we could have

2121
03:45:15,760 --> 03:45:19,680
an exception an optional exception and that's exactly what we're gonna handle

2122
03:45:19,680 --> 03:45:22,720
right now so let's say if

2123
03:45:22,720 --> 03:45:27,912
that was you see we said now if state is logged out so now in this code block in

2124
03:45:27,912 --> 03:45:33,600
here dart is going to understand that okay anywhere in here state is

2125
03:45:33,600 --> 03:45:38,720
auth state logged out so you have access to exception right here okay

2126
03:45:38,720 --> 03:45:42,800
so then we're going to say if states exception is

2127
03:45:42,800 --> 03:45:47,280
user not found off exception

2128
03:45:47,280 --> 03:45:50,480
and we're gonna display a weight show

2129
03:45:50,480 --> 03:45:53,912
uh error dialog so let's make this a

2130
03:45:53,912 --> 03:45:59,280
listener also async and then we're gonna say show error dialog

2131
03:45:59,280 --> 03:46:03,912
and which we've coded before remember this uses the generic dialog so i'm

2132
03:46:03,912 --> 03:46:08,800
going to go back here to login view dart and for the text we're just going to say

2133
03:46:08,800 --> 03:46:13,280
user not found okay then we have to also handle wrong

2134
03:46:13,280 --> 03:46:19,040
password off exception so else if state exception is wrong password off

2135
03:46:19,040 --> 03:46:22,960
exception then copy the text here and then in here we're just going to say

2136
03:46:22,960 --> 03:46:26,232
wrong credentials

2137
03:46:26,232 --> 03:46:30,320
and remember in anything that has to do with username and password it's quite

2138
03:46:30,320 --> 03:46:36,480
important that you don't tell the user which part of their credentials actually

2139
03:46:36,480 --> 03:46:40,800
incorrect because if i mean if there is a hacker who's trying

2140
03:46:40,800 --> 03:46:45,280
to get into the system and just using the ui then if you tell them wrong

2141
03:46:45,280 --> 03:46:49,040
password they'd be like ah so i got the email right it's just a password that's

2142
03:46:49,040 --> 03:46:53,512
incorrect so try not to tell a user even if it's for

2143
03:46:53,512 --> 03:46:58,232
good reasons like if it even if you even if you think well i have no hackers in

2144
03:46:58,232 --> 03:47:02,000
my application it is still better just to say wrong

2145
03:47:02,000 --> 03:47:06,400
credentials because the user themselves probably already know that their email

2146
03:47:06,400 --> 03:47:10,232
is correct or incorrect so they're first going to check their email so if the

2147
03:47:10,232 --> 03:47:13,280
email is correct then they are going to know that the password is incorrect and

2148
03:47:13,280 --> 03:47:15,912
as you'll see we're going to later allow the user to

2149
03:47:15,912 --> 03:47:20,800
reset their password so so just say wrong credentials in my

2150
03:47:20,800 --> 03:47:25,280
opinion at least so and then else if state

2151
03:47:25,280 --> 03:47:30,872
exception is generic auth exception then we're going to display a dialogue

2152
03:47:30,872 --> 03:47:33,832
and in here we're just going to say authentication

2153
03:47:33,832 --> 03:47:38,160
error okay

2154
03:47:38,160 --> 03:47:44,000
so that's that part done so now we've handled those auth exceptions in our

2155
03:47:44,000 --> 03:47:48,400
login view for our text button that says login

2156
03:47:48,400 --> 03:47:51,280
all right

2157
03:47:51,280 --> 03:47:55,832
so now that we have that what we need to do is to remove the uh exception

2158
03:47:55,832 --> 03:48:02,960
handling from the button itself so at the moment we have a huge try statement

2159
03:48:02,960 --> 03:48:07,512
not a huge actually we have quite a long try catch statements here that we have

2160
03:48:07,512 --> 03:48:12,320
we're catching three exceptions which are now actually being caught here with

2161
03:48:12,320 --> 03:48:16,232
our block listener so let's go and not

2162
03:48:16,232 --> 03:48:19,832
actually do that so i want you to grab this complex read

2163
03:48:19,832 --> 03:48:24,640
and where we actually pass the event of log into our block and remove this

2164
03:48:24,640 --> 03:48:30,720
entire try and catch block and just do the context read at auth event login so

2165
03:48:30,720 --> 03:48:34,552
your unpressed event or sorry on your on press

2166
03:48:34,552 --> 03:48:38,960
parameter of your text button should look very simple just like this email

2167
03:48:38,960 --> 03:48:45,512
password and then you pass that event to your auth block

2168
03:48:45,512 --> 03:48:52,000
all right so now that that has happened let's actually check this out and see if

2169
03:48:52,000 --> 03:48:56,800
everything works and remember this is like the beginning of us moving towards

2170
03:48:56,800 --> 03:49:00,720
a better approach of handling our authentication and

2171
03:49:00,720 --> 03:49:05,440
routing with blocks so things aren't going to be smooth actually we have a

2172
03:49:05,440 --> 03:49:09,512
lot of problems we have to fix but this is just like the beginning so i'm going

2173
03:49:09,512 --> 03:49:15,280
to bring scr cpy in here and let's just test this so

2174
03:49:15,280 --> 03:49:18,720
i'm going to do a hot restart

2175
03:49:18,720 --> 03:49:22,640
and now i'm on the login screen so okay i'm

2176
03:49:22,640 --> 03:49:26,320
then gonna go ahead in here and like put my email address

2177
03:49:26,320 --> 03:49:29,760
and then i'm gonna put some inquiry credentials in here okay and i'm just

2178
03:49:29,760 --> 03:49:34,552
gonna press the login button and now you can see that our block listener is

2179
03:49:34,552 --> 03:49:39,360
taking care of that so it's saying oh you're logged out and then it's wrong

2180
03:49:39,360 --> 03:49:44,800
credentials okay so i'm gonna press ok then i'm gonna just put an email address

2181
03:49:44,800 --> 03:49:48,160
here that doesn't exist and then press the login button and now you can see

2182
03:49:48,160 --> 03:49:52,080
user not found okay and to be honest with you if you wanna if you wanna do

2183
03:49:52,080 --> 03:49:55,192
what i actually said before that it's better to

2184
03:49:55,192 --> 03:50:00,640
not tell the user whether it's their user that is wrong or password you may

2185
03:50:00,640 --> 03:50:05,912
want to actually wrap both the state exception of user not found and wrong

2186
03:50:05,912 --> 03:50:10,080
password and just display the same message so you could do that by saying

2187
03:50:10,080 --> 03:50:14,640
war in here so or that

2188
03:50:14,640 --> 03:50:16,720
right so

2189
03:50:16,720 --> 03:50:20,000
and then you can just display the same message and then you could just remove

2190
03:50:20,000 --> 03:50:23,832
this statement from there so that could also work i'm just gonna leave it like

2191
03:50:23,832 --> 03:50:28,080
this but just so you know it is actually better to do that approach which i just

2192
03:50:28,080 --> 03:50:32,320
showed you momentarily all right so it seems like our block

2193
03:50:32,320 --> 03:50:36,160
listener is working fine in the login view so this was just the beginning and

2194
03:50:36,160 --> 03:50:40,080
we have a lot to fix so we're going to fix those things in the coming chapters

2195
03:50:40,080 --> 03:50:43,360
okay now that the code seems to be working

2196
03:50:43,360 --> 03:50:48,400
for login view let's just go ahead and do what we usually do and commit our

2197
03:50:48,400 --> 03:50:54,480
work so that we don't lose the the code if anything happens so

2198
03:50:54,480 --> 03:50:59,192
i'm gonna minimize scr cpy make visual studio code a little bit

2199
03:50:59,192 --> 03:51:03,832
bigger in here and increase the size quite dramatically

2200
03:51:03,832 --> 03:51:08,872
let's have a look at our status we've modified three files so let's just

2201
03:51:08,872 --> 03:51:14,232
say it's a git commit and in here

2202
03:51:14,232 --> 03:51:19,832
let's actually let's do it at all and then we just do a normal commenting here

2203
03:51:19,832 --> 03:51:23,912
that's step 24 okay now that it's done let's just push our

2204
03:51:23,912 --> 03:51:29,120
changes to the remote and then let's just also gets get status nothing to

2205
03:51:29,120 --> 03:51:32,640
command so everything was committed successfully and then let's just tag as

2206
03:51:32,640 --> 03:51:38,320
step 24 i believe right so that's our tag and then we push our

2207
03:51:38,320 --> 03:51:42,872
tags and let's have a look at our tags to

2208
03:51:42,872 --> 03:51:48,960
this point 23 we have where's 24 and there is 24 so we have everything tagged

2209
03:51:48,960 --> 03:51:54,720
successfully great so um as you can see and as is

2210
03:51:54,720 --> 03:51:57,680
tradition we always talk about at the end of every chapter we talk about what

2211
03:51:57,680 --> 03:52:00,872
we need to discuss in the chapter that's uh to come

2212
03:52:00,872 --> 03:52:04,640
and um so you can see our routing and dialog

2213
03:52:04,640 --> 03:52:08,640
handling isn't isn't block based at the moment we still have quite a lot of

2214
03:52:08,640 --> 03:52:12,160
places in our application that we're seeing for instance navigator of context

2215
03:52:12,160 --> 03:52:16,320
push name and removed until or we're doing push names so

2216
03:52:16,320 --> 03:52:19,912
so we've handled some bits and pieces of our application and we're using block

2217
03:52:19,912 --> 03:52:23,280
but for instance we aren't handling stuff in the register view or the verify

2218
03:52:23,280 --> 03:52:27,440
email view stuff like that so we have a lot of work to do and the next

2219
03:52:27,440 --> 03:52:30,640
chapter is actually going to be a heavy one but it's going to be such a key

2220
03:52:30,640 --> 03:52:34,872
chapter in this entire course that if you could just stick with me

2221
03:52:34,872 --> 03:52:38,872
throughout the next chapter then you're gonna see your applications architecture

2222
03:52:38,872 --> 03:52:43,280
actually become more and more robust so grab some refreshments if you want to

2223
03:52:43,280 --> 03:52:47,512
and i'll see you in the next chapter hello everyone and welcome to chapter 42

2224
03:52:47,512 --> 03:52:50,960
of this letter course in previous chapters we've talked quite

2225
03:52:50,960 --> 03:52:55,912
a bit about cleaning up our application logic and our authentication logic we've

2226
03:52:55,912 --> 03:53:00,160
come a good bit forward with that and we've

2227
03:53:00,160 --> 03:53:05,512
um we clean up quite a bit of stuff in the login view and now we're using block

2228
03:53:05,512 --> 03:53:09,120
listener in the login view if you follow all the chapters chronologically up to

2229
03:53:09,120 --> 03:53:11,440
up to that including the previous chapter

2230
03:53:11,440 --> 03:53:14,960
so you should already know about block block listener block consumer block

2231
03:53:14,960 --> 03:53:19,192
provider um and block builder of course

2232
03:53:19,192 --> 03:53:24,400
but we have quite a bit left and i'm actually proud to say that this chapter

2233
03:53:24,400 --> 03:53:29,192
and maybe the next one or two chapters are gonna be like the

2234
03:53:29,192 --> 03:53:35,192
glues that bring the application to a lot more tighter point where it will be

2235
03:53:35,192 --> 03:53:39,360
ready for releasing to the app store and the play store so if you stick with me

2236
03:53:39,360 --> 03:53:41,912
throughout these few chapters that are left

2237
03:53:41,912 --> 03:53:46,552
we are going to basically create a lot more cleaner product that is not only

2238
03:53:46,552 --> 03:53:53,040
usable by the end user but it's also but it's also architecturally sound so

2239
03:53:53,040 --> 03:53:56,232
you're going to be proud of actually releasing this application or maybe even

2240
03:53:56,232 --> 03:54:00,720
showing this code to your friends and colleagues so

2241
03:54:00,720 --> 03:54:03,760
as a caption in the case in this chapter we're going to talk about moving to

2242
03:54:03,760 --> 03:54:08,960
block for routing and dialogues because right now you know routing what we have

2243
03:54:08,960 --> 03:54:14,400
in our application is kind of like a hybrid in the main dart file and i mean

2244
03:54:14,400 --> 03:54:19,512
we don't have to talk about uh so like abstract concept concepts we can

2245
03:54:19,512 --> 03:54:22,800
actually look at our main dart files so if you look here what we've done in the

2246
03:54:22,800 --> 03:54:26,800
main dart file we're actually creating a block builder and depending on the

2247
03:54:26,800 --> 03:54:31,440
states that are being output by our block we're displaying the correct view

2248
03:54:31,440 --> 03:54:35,600
so this in itself is quite fine so there's nothing wrong with this but

2249
03:54:35,600 --> 03:54:40,480
we're also mixing this up with custom places in our application where we're

2250
03:54:40,480 --> 03:54:47,192
saying for instance context of um let's see actually with navigator off

2251
03:54:47,192 --> 03:54:50,552
and you can see we're doing actually that's fine but you can see in our login

2252
03:54:50,552 --> 03:54:54,552
view when you press the not registered yet register here button in order to do

2253
03:54:54,552 --> 03:54:58,480
the registration of the user then we're doing a navigator of push blah blah blah

2254
03:54:58,480 --> 03:55:03,600
so there's quite a few bits and pieces left still in our application that we're

2255
03:55:03,600 --> 03:55:06,960
either directly talking with our auth service which we shouldn't be doing we

2256
03:55:06,960 --> 03:55:12,480
should be talking to the off block or and we're talking with navigator of

2257
03:55:12,480 --> 03:55:16,720
something to do push name so in this chapter we're going to clean

2258
03:55:16,720 --> 03:55:20,960
these things up and make make basically our auth block and

2259
03:55:20,960 --> 03:55:25,680
the consumption of our off block a lot tighter all right using block and

2260
03:55:25,680 --> 03:55:30,800
listeners block builders and um we're all also going to use block

2261
03:55:30,800 --> 03:55:36,800
consumers i believe so let's go ahead and do that

2262
03:55:36,800 --> 03:55:38,720
so this is i mean

2263
03:55:38,720 --> 03:55:41,280
as the caption indicates i mean i've already talked about this maybe i should

2264
03:55:41,280 --> 03:55:44,480
have displayed this caption a few seconds ago

2265
03:55:44,480 --> 03:55:47,440
but we've already talked about this we should basically tighten up how we're

2266
03:55:47,440 --> 03:55:52,400
working with our um routing and our

2267
03:55:52,400 --> 03:55:56,080
how we work with off service

2268
03:55:56,080 --> 03:56:00,800
and you can see in here we need a few more auth events in order to be able to

2269
03:56:00,800 --> 03:56:05,192
achieve this so let's go ahead and open our um

2270
03:56:05,192 --> 03:56:09,512
i need to probably do some reshuffling on the screen here so you see the code

2271
03:56:09,512 --> 03:56:15,280
better so i'll do what i usually do here and then let's go to our off event

2272
03:56:15,280 --> 03:56:17,912
in here so these are the events that we have at

2273
03:56:17,912 --> 03:56:22,872
the moment we have log out login and then we have an initialize but we also

2274
03:56:22,872 --> 03:56:27,760
have quite a few other ui events that the application is doing in order to for

2275
03:56:27,760 --> 03:56:31,120
instance interact with authentication such as

2276
03:56:31,120 --> 03:56:35,600
um sending a verification email all right so when you're in the verify email

2277
03:56:35,600 --> 03:56:39,512
view and the user presses send the verification email again then that is at

2278
03:56:39,512 --> 03:56:42,720
the moment talking with our auth service directly and we shouldn't be doing that

2279
03:56:42,720 --> 03:56:48,800
we should be asking our off blog to do that or when you for instance um

2280
03:56:48,800 --> 03:56:53,040
ask the in in our verify email view so if you go here you can see that we had

2281
03:56:53,040 --> 03:56:57,832
this um log out button or the restart button

2282
03:56:57,832 --> 03:57:03,440
so let's go ahead and i'm going to bring scrcpy in here and let's

2283
03:57:03,440 --> 03:57:06,960
actually to be able to show to verify email we have to have a user who hasn't

2284
03:57:06,960 --> 03:57:10,480
been verified but if you remember from before if you've created a user just

2285
03:57:10,480 --> 03:57:14,232
recently or just just now for instance and that

2286
03:57:14,232 --> 03:57:18,720
user hasn't verified their credentials then they're gonna always be moved into

2287
03:57:18,720 --> 03:57:23,600
this verify email view in which they have to for instance say that yeah um i

2288
03:57:23,600 --> 03:57:28,400
am i did they had the ability to send a verification email to their email again

2289
03:57:28,400 --> 03:57:32,640
or restart the whole process meaning to log out and just go to the registered

2290
03:57:32,640 --> 03:57:35,912
login viewing and so that is at the moment happening directly

2291
03:57:35,912 --> 03:57:39,680
you can see it's off service directly to the auth service and we should be doing

2292
03:57:39,680 --> 03:57:42,800
that and then there is a navigator of push name then removed until which we

2293
03:57:42,800 --> 03:57:46,160
shouldn't be doing either so in order to tighten these things up

2294
03:57:46,160 --> 03:57:50,872
we need a few more events in our auth event dart file and that's what we're

2295
03:57:50,872 --> 03:57:56,552
going to do right now so let's go to our auth event file and

2296
03:57:56,552 --> 03:58:01,680
i'm gonna do the same thing in my notes so um the first

2297
03:58:01,680 --> 03:58:05,280
new event that we're gonna create in here as you can see it's called auth

2298
03:58:05,280 --> 03:58:10,232
event send email verification all right so let's go ahead and do that i'm going

2299
03:58:10,232 --> 03:58:15,280
to get rid of this bottom view in here and also the project structure

2300
03:58:15,280 --> 03:58:20,000
so i've already written that in my notes so i'm just going to bring it here to

2301
03:58:20,000 --> 03:58:23,512
the to visual studio code so i don't have to write it manually but the event

2302
03:58:23,512 --> 03:58:29,512
name should be called off event send email verification the goal is for our

2303
03:58:29,512 --> 03:58:34,080
verify email view to send this event to our off block in order to request a new

2304
03:58:34,080 --> 03:58:41,120
verification email to be sent to the currently logged in user okay

2305
03:58:41,120 --> 03:58:46,960
we also need a register event so the goal is that inside register view so

2306
03:58:46,960 --> 03:58:50,160
let's go have a look at the register view right now and you can see when the

2307
03:58:50,160 --> 03:58:54,800
user presses the register button at the moment we're saying uh firebase create

2308
03:58:54,800 --> 03:58:58,960
user so we're going directly to firebase auth service

2309
03:58:58,960 --> 03:59:02,000
and we're saying create user and then immediately we're saying send email

2310
03:59:02,000 --> 03:59:05,760
verification so we shouldn't be doing any of these so these three things that

2311
03:59:05,760 --> 03:59:10,232
we're doing here are pretty much wrong from the architecture perspective so we

2312
03:59:10,232 --> 03:59:14,000
shouldn't be talking with these services directly we should clean this up okay

2313
03:59:14,000 --> 03:59:18,160
in order to achieve that we need to go back to our auth event and create a new

2314
03:59:18,160 --> 03:59:23,832
oz event called register so i'm going to bring that at the bottom

2315
03:59:23,832 --> 03:59:29,040
of login here so let me go ahead and create a new

2316
03:59:29,040 --> 03:59:33,192
off event we call it class of event register

2317
03:59:33,192 --> 03:59:36,720
and of course we're going to extend our auth event

2318
03:59:36,720 --> 03:59:40,960
and for register we need two parameters if we go back to the register view you

2319
03:59:40,960 --> 03:59:44,080
see upon registering we're always sending the email and the password so

2320
03:59:44,080 --> 03:59:47,912
let's go ahead and do the same thing in here so we say final string email and

2321
03:59:47,912 --> 03:59:51,120
i'm going to copy this and i'm going to say just password and get help from

2322
03:59:51,120 --> 03:59:56,160
visual studio code to create this constant constructor okay you may want

2323
03:59:56,160 --> 04:00:01,360
to make these required name fields using these but i'm not going to do that so

2324
04:00:01,360 --> 04:00:06,552
i'm just going to leave it like this with email and password okay

2325
04:00:06,552 --> 04:00:12,872
so that's our off event register excuse me

2326
04:00:12,872 --> 04:00:19,360
so the other thing that we need an event called should register so um

2327
04:00:19,360 --> 04:00:25,040
basically that means for instance if you um haven't really registered a user yet

2328
04:00:25,040 --> 04:00:28,872
then we need to send this event i'm actually gonna have

2329
04:00:28,872 --> 04:00:35,760
a look in my login view and that is if you for instance go to a

2330
04:00:35,760 --> 04:00:39,192
login view in here and then you have a look at this button

2331
04:00:39,192 --> 04:00:43,120
that we have in here not registered yet register here that is basically the

2332
04:00:43,120 --> 04:00:46,232
event that we're going to implement right now so we're going to tell the off

2333
04:00:46,232 --> 04:00:51,680
block that hey you should register user okay and then off block is then going to

2334
04:00:51,680 --> 04:00:55,760
change its state to a state that the application is going to understand and

2335
04:00:55,760 --> 04:00:59,360
automatically send the user to the register view okay so

2336
04:00:59,360 --> 04:01:04,960
that's the use case so um let's go ahead i'm gonna just

2337
04:01:04,960 --> 04:01:09,680
check my notes as well let's go ahead and develop this should register and

2338
04:01:09,680 --> 04:01:13,360
i've already done that in my notes so i'm gonna bring it at the bottom of off

2339
04:01:13,360 --> 04:01:17,120
event register but you will need to write this yourself so it looks like

2340
04:01:17,120 --> 04:01:20,872
auth event should register extends off event and it just has a constant

2341
04:01:20,872 --> 04:01:28,800
constructor so it's very simple okay so that was for our auth um event should

2342
04:01:28,800 --> 04:01:31,440
register

2343
04:01:31,440 --> 04:01:34,320
so at the moment if we go now as you can

2344
04:01:34,320 --> 04:01:38,080
see it in caption we need also and now we've done the auth events like this

2345
04:01:38,080 --> 04:01:42,080
stuff that we had to create in order to be able to handle various

2346
04:01:42,080 --> 04:01:46,320
um events that come from the ui but we also need to fix up our states so let's

2347
04:01:46,320 --> 04:01:50,872
go to our off state and have a refresher in here you can see we have the state

2348
04:01:50,872 --> 04:01:55,120
loading logged in needs verification logged out

2349
04:01:55,120 --> 04:01:58,720
and log out failure but we're going to clean this up a little bit and make sure

2350
04:01:58,720 --> 04:02:02,800
that we have every state that our application requires in order to be able

2351
04:02:02,800 --> 04:02:08,400
to for instance display dialogs or do routing okay

2352
04:02:08,400 --> 04:02:13,040
so in at the moment in our off state what

2353
04:02:13,040 --> 04:02:17,832
we need to do is to create you see we have this loading state and what we're

2354
04:02:17,832 --> 04:02:22,160
going to do is to actually remove the loading state and we're going to create

2355
04:02:22,160 --> 04:02:27,192
an auth state called on initialized all right so

2356
04:02:27,192 --> 04:02:30,400
um let's go ahead and actually remove this

2357
04:02:30,400 --> 04:02:35,360
off states loading and create a class in here say auth state

2358
04:02:35,360 --> 04:02:40,400
on initialized because when you land in the application

2359
04:02:40,400 --> 04:02:43,912
for the first time you may actually want to for instance

2360
04:02:43,912 --> 04:02:47,440
display some sort of loading screen or whatever and we're going to indicate

2361
04:02:47,440 --> 04:02:50,960
that the application hasn't really initialized firebase or its

2362
04:02:50,960 --> 04:02:55,280
authentication system using this off state uninitialized it's just this is a

2363
04:02:55,280 --> 04:03:01,680
cleaner way of indicating to the two the call side which is ui that hey we

2364
04:03:01,680 --> 04:03:05,440
haven't yet been initialized so you need to call the initialize function on our

2365
04:03:05,440 --> 04:03:10,080
off block okay or sorry you have to send the auth event of

2366
04:03:10,080 --> 04:03:14,320
uh initialize auth event okay so let's go to off state so

2367
04:03:14,320 --> 04:03:18,800
just to recap i removed off state loading

2368
04:03:18,800 --> 04:03:23,600
and now we're going to put in our off state uninitialized so we're going to

2369
04:03:23,600 --> 04:03:29,680
say uninitialize extends off state and let's just create a constant

2370
04:03:29,680 --> 04:03:36,232
constructor for it as well like that okay

2371
04:03:36,232 --> 04:03:40,232
so the other thing that we have to implement as well is to

2372
04:03:40,232 --> 04:03:45,760
obviously we've talked about login like here login logged out and then log out

2373
04:03:45,760 --> 04:03:51,280
failure etc and and now we actually have to start

2374
04:03:51,280 --> 04:03:55,040
talking about what happens when the user presses the register button when the

2375
04:03:55,040 --> 04:03:58,800
user presses the register button we also have to handle

2376
04:03:58,800 --> 04:04:03,120
the case that yeah we are registering at the moment so it's a process that's

2377
04:04:03,120 --> 04:04:07,512
ongoing but we also have to talk about what happens if the registration

2378
04:04:07,512 --> 04:04:12,232
fails so we're in the process of registering either it goes fine and then

2379
04:04:12,232 --> 04:04:17,120
we say you're registered or we say registry registration failed so let's go

2380
04:04:17,120 --> 04:04:21,280
ahead and create a um a state in here right after

2381
04:04:21,280 --> 04:04:25,512
uninitialized let's just say class of state

2382
04:04:25,512 --> 04:04:31,912
what are we calling it registering extends off state okay and let's just in

2383
04:04:31,912 --> 04:04:34,720
here as we're doing in here for instance in

2384
04:04:34,720 --> 04:04:37,440
the state of logged out let's just copy this

2385
04:04:37,440 --> 04:04:41,040
exception and bring it into off state registering

2386
04:04:41,040 --> 04:04:44,640
and then let's create a constant constructor here for our off state

2387
04:04:44,640 --> 04:04:48,320
registering and i'm just going to say constant here okay so now we have

2388
04:04:48,320 --> 04:04:54,160
registering like that so now we have registering logged in

2389
04:04:54,160 --> 04:04:59,192
and we also actually need to remove off state logged out failure

2390
04:04:59,192 --> 04:05:02,720
because we well excuse me

2391
04:05:02,720 --> 04:05:08,320
we have logged out with an exception

2392
04:05:08,320 --> 04:05:13,040
um so let's go ahead and do that right now let's just remove off state log

2393
04:05:13,040 --> 04:05:16,800
log out failure as well all right so

2394
04:05:16,800 --> 04:05:23,600
excuse me again so that's for off state registering

2395
04:05:23,600 --> 04:05:26,480
so as you can see in the caption it says

2396
04:05:26,480 --> 04:05:31,040
loading of the logged out state we need login screen to have a loading dialog so

2397
04:05:31,040 --> 04:05:36,552
we need is loading in the auth state logged out so let's have a look at

2398
04:05:36,552 --> 04:05:40,872
our logged out here and

2399
04:05:40,872 --> 04:05:46,080
previously we had this loading state as a separate state so it was off state

2400
04:05:46,080 --> 04:05:49,360
loading and we were gonna generically use it everywhere but now what we're

2401
04:05:49,360 --> 04:05:52,720
gonna do is to build this loading state into

2402
04:05:52,720 --> 04:05:58,000
or to build this loading flag into existing states themselves so

2403
04:05:58,000 --> 04:06:02,800
let's then go ahead and say well when you press the login button what

2404
04:06:02,800 --> 04:06:07,360
we're going to do first is just to say um actually wait let's go one step back

2405
04:06:07,360 --> 04:06:10,960
let's say you just landed in the application but you already have a user

2406
04:06:10,960 --> 04:06:15,360
which you haven't logged them before okay so your state is logged out and the

2407
04:06:15,360 --> 04:06:19,512
exception is null and we're going to add a flag in here

2408
04:06:19,512 --> 04:06:25,192
and say final bool is loading and let's add that is loading to this

2409
04:06:25,192 --> 04:06:30,400
parameter in here and make both of these required parameters okay like this

2410
04:06:30,400 --> 04:06:35,040
and put a comma there as well like this boom so

2411
04:06:35,040 --> 04:06:39,120
when you land in the application exception your state is logged out there

2412
04:06:39,120 --> 04:06:42,872
is no exception so exceptions null and is loading is false because we're not

2413
04:06:42,872 --> 04:06:46,640
loading anything then you write your credentials and you press the login

2414
04:06:46,640 --> 04:06:52,232
button then what happens state is still logged out exception is null but loading

2415
04:06:52,232 --> 04:06:55,440
is true then let's just say that you entered the

2416
04:06:55,440 --> 04:06:58,640
incorrect credentials then what we're going to do in our block auth block is

2417
04:06:58,640 --> 04:07:02,960
going to say ooh you're off state logged out there is an exception and is loading

2418
04:07:02,960 --> 04:07:07,360
is false and then you'd be like okay now i

2419
04:07:07,360 --> 04:07:10,640
entered the inquiry credentials then you're gonna correct those and then

2420
04:07:10,640 --> 04:07:14,080
press the login button again now what are we gonna say we're gonna say okay

2421
04:07:14,080 --> 04:07:18,872
all state logged out exception is nothing and then is loading is true

2422
04:07:18,872 --> 04:07:21,912
and if then we can log you in that we're gonna

2423
04:07:21,912 --> 04:07:26,960
produce another state for you so you see this is how we're using states to convey

2424
04:07:26,960 --> 04:07:29,832
the cur like the correct state of the

2425
04:07:29,832 --> 04:07:33,440
application to the consumer which is the ui okay

2426
04:07:33,440 --> 04:07:37,912
so and this is not like you may think oh how does he know that this is the right

2427
04:07:37,912 --> 04:07:43,600
right way of doing things well there is no rights and wrong in here it

2428
04:07:43,600 --> 04:07:47,680
is just how you reason about your application

2429
04:07:47,680 --> 04:07:50,320
and when i say there is no right and wrong

2430
04:07:50,320 --> 04:07:53,760
what i mean is that some things are more right than the others and some things

2431
04:07:53,760 --> 04:07:58,400
are more wrong than the others but what you need to find is like the sweet

2432
04:07:58,400 --> 04:08:02,720
spot in here which is which is exactly

2433
04:08:02,720 --> 04:08:07,600
good for your application and at the same time is not incorrect okay and that

2434
04:08:07,600 --> 04:08:12,320
is the definition of write for your application and in this case this is the

2435
04:08:12,320 --> 04:08:16,552
definition of right for this application so you just need to find a sweet spot

2436
04:08:16,552 --> 04:08:20,232
for your application okay

2437
04:08:20,232 --> 04:08:23,360
so now let's have a look in here a little

2438
04:08:23,360 --> 04:08:27,680
and talk a little about a little bit about equality um

2439
04:08:27,680 --> 04:08:30,960
and what i mean by equality in here is that

2440
04:08:30,960 --> 04:08:35,512
you see what i talked about is three different logged out states logged out

2441
04:08:35,512 --> 04:08:40,552
with exception null is loading false logged out with exceptional is loading

2442
04:08:40,552 --> 04:08:44,320
true and then logged out with an exception and is loading false for

2443
04:08:44,320 --> 04:08:47,512
instance so you're producing three different

2444
04:08:47,512 --> 04:08:52,720
types of states all of the same class so how will

2445
04:08:52,720 --> 04:08:57,912
how will uh your application understand that these are actually different states

2446
04:08:57,912 --> 04:09:00,552
so you kind of need to differentiate

2447
04:09:00,552 --> 04:09:05,192
between various states of your off state logged out so you kind of need to tell

2448
04:09:05,192 --> 04:09:09,192
your application that hey although the previous state was also off

2449
04:09:09,192 --> 04:09:13,360
state logged out and the correct like the one that i'm producing right now is

2450
04:09:13,360 --> 04:09:18,232
also off state logged out but these two states could actually be different from

2451
04:09:18,232 --> 04:09:22,232
each other and in what they contain so you need to kind of create like an

2452
04:09:22,232 --> 04:09:24,640
equality and

2453
04:09:24,640 --> 04:09:28,720
logic into your states to tell the application hey this

2454
04:09:28,720 --> 04:09:33,680
although it's the same is like a new instance of the same state class but

2455
04:09:33,680 --> 04:09:38,320
internally is not the same thing and for that we have to implement equality all

2456
04:09:38,320 --> 04:09:41,832
right now there is a good package that allows

2457
04:09:41,832 --> 04:09:45,832
you to do this in order to implement equality in your applications and in

2458
04:09:45,832 --> 04:09:50,400
your dart code and it is called equitable so let's go ahead and import

2459
04:09:50,400 --> 04:09:54,160
that and don't be intimidated by all these logs in here it's just because we

2460
04:09:54,160 --> 04:09:58,872
have a lot of problems that we're fixing at the moment so let's go ahead and um

2461
04:09:58,872 --> 04:10:02,552
i'm gonna change the screen layout a little bit

2462
04:10:02,552 --> 04:10:07,040
increase the size and let's just go ahead and say flutter

2463
04:10:07,040 --> 04:10:12,232
pop add equitable

2464
04:10:12,232 --> 04:10:15,600
stuff like that and you can read more about that so i'm just going to bring up

2465
04:10:15,600 --> 04:10:20,080
my safari in here and let's just say

2466
04:10:20,080 --> 04:10:23,512
flutter or just pop dev

2467
04:10:23,512 --> 04:10:28,400
and let's just say equatable excuse me

2468
04:10:28,400 --> 04:10:33,832
and you can see it is actually developed by flutter community dev in here okay so

2469
04:10:33,832 --> 04:10:38,160
it's a verified developer in here and you can also actually follow flutter

2470
04:10:38,160 --> 04:10:42,480
community dev on twitter as well to get some updates about their packages okay

2471
04:10:42,480 --> 04:10:47,120
so we're now importing that into our application and we should now be able to

2472
04:10:47,120 --> 04:10:51,120
use that so i'm going to get rid of this bottom bar

2473
04:10:51,120 --> 04:10:56,640
and change the screen layout again decrease the font size

2474
04:10:56,640 --> 04:11:03,040
okay so in here now let's go and import equitable so i'm gonna just import that

2475
04:11:03,040 --> 04:11:05,832
i've already imported that in my notes so i'm just gonna paste that in here you

2476
04:11:05,832 --> 04:11:10,960
import equitable like this package equitable slash equitable dart okay

2477
04:11:10,960 --> 04:11:16,080
so what we need here is we're already extending an existing class so what you

2478
04:11:16,080 --> 04:11:21,120
can do is you can bring in equality in your classes using a mix and so we're

2479
04:11:21,120 --> 04:11:26,832
going to say mixing e quotable mix in just like

2480
04:11:26,832 --> 04:11:32,800
that sorry with okay so now that we're doing with that mixing

2481
04:11:32,800 --> 04:11:35,512
now we have to implement a few functionalities in here as you can see

2482
04:11:35,512 --> 04:11:40,160
visual studio code helps me it says create one missing override okay

2483
04:11:40,160 --> 04:11:46,080
so i do that override in here and it says okay now we have to override

2484
04:11:46,080 --> 04:11:50,480
this property and you can see in here what you need to return is a list of

2485
04:11:50,480 --> 04:11:55,360
properties that have to be taken into account when the equitable package can

2486
04:11:55,360 --> 04:11:59,192
basically calculate equality in your class and in here what

2487
04:11:59,192 --> 04:12:02,960
we're going to say is that we have two properties in here called exception

2488
04:12:02,960 --> 04:12:08,000
and we also have is loading so take these two properties into account when

2489
04:12:08,000 --> 04:12:15,192
computing equality in the instances of auth state logged out

2490
04:12:15,192 --> 04:12:18,872
all right very well done so that's that's what

2491
04:12:18,872 --> 04:12:23,760
we've done in here so we've made our off state logged out class equitable and the

2492
04:12:23,760 --> 04:12:28,160
reason again for that is that we need to produce various

2493
04:12:28,160 --> 04:12:33,120
various um mutations of this off state logged out

2494
04:12:33,120 --> 04:12:38,080
and those different mutations with various exceptions and is

2495
04:12:38,080 --> 04:12:41,600
loading need to be distinguishable from each other okay and that's why we're

2496
04:12:41,600 --> 04:12:45,600
using the equitable package in here

2497
04:12:45,600 --> 04:12:48,960
so um this thing we've already talked about

2498
04:12:48,960 --> 04:12:53,912
and we don't need the off state logout failure so we we've removed that already

2499
04:12:53,912 --> 04:12:57,440
as part of the cleanup that we were doing earlier but if you forgot to do

2500
04:12:57,440 --> 04:13:00,160
that please just look at the caption at the bottom of the screen just to make

2501
04:13:00,160 --> 04:13:04,640
and just make sure go you go to offstate.file and remove your off state

2502
04:13:04,640 --> 04:13:07,600
logout failure and the reason behind that since i explained before is that

2503
04:13:07,600 --> 04:13:12,160
now logout failure is actually built in and baked into off state logged out

2504
04:13:12,160 --> 04:13:17,120
class inside an exception all right

2505
04:13:17,120 --> 04:13:21,120
wow all right let's go to the next section

2506
04:13:21,120 --> 04:13:23,680
now

2507
04:13:23,680 --> 04:13:26,872
well you see at the moment we have no loading

2508
04:13:26,872 --> 04:13:31,912
screens in our application so when something happens when we're doing

2509
04:13:31,912 --> 04:13:37,040
an api call for instance or we're um going to our off provider and say login

2510
04:13:37,040 --> 04:13:42,232
or send an email verification we have no loading screen inside the application

2511
04:13:42,232 --> 04:13:45,512
so there is nothing that indicates to the user that something is actually

2512
04:13:45,512 --> 04:13:49,512
happening and we're gonna go fix that up soon so as you'll see we're going to

2513
04:13:49,512 --> 04:13:54,320
create a new dialog which does some loading for the user and then using that

2514
04:13:54,320 --> 04:13:57,192
dialog users going to understand that okay something is happening i just have

2515
04:13:57,192 --> 04:14:00,480
to wait for it okay but the user experience that we have

2516
04:14:00,480 --> 04:14:04,552
right now is kind of sub-optimal in that the user presses the login screen and

2517
04:14:04,552 --> 04:14:07,832
dependent on their sorry the user presses the login button

2518
04:14:07,832 --> 04:14:11,040
and depending on their internet connectivity and the speed of their

2519
04:14:11,040 --> 04:14:14,872
internet internet connection that operation could take

2520
04:14:14,872 --> 04:14:18,800
anywhere between a few milliseconds to a few seconds so

2521
04:14:18,800 --> 04:14:22,232
if you're making a user wait a few seconds based on their internet

2522
04:14:22,232 --> 04:14:25,832
connection speed then you have to kind of display to them that you're doing

2523
04:14:25,832 --> 04:14:29,760
something well the the usual i mean way that you

2524
04:14:29,760 --> 04:14:33,600
could do that is to display some sort of a small loading indicator for instance

2525
04:14:33,600 --> 04:14:37,912
on ios natively you have a little loading

2526
04:14:37,912 --> 04:14:43,040
indicator that sits on on the status bar that just moves a little bit and it's

2527
04:14:43,040 --> 04:14:46,320
very tiny i would dare to say it's less than

2528
04:14:46,320 --> 04:14:51,192
20 pixels wide and 20 pixels in height kind of it could even be like 17 pixels

2529
04:14:51,192 --> 04:14:55,192
width on height it's very little so it's a subtle indication that something is

2530
04:14:55,192 --> 04:14:58,640
happening but that's usually i mean i find that

2531
04:14:58,640 --> 04:15:02,640
quite annoying because when something is loading you kind of need to

2532
04:15:02,640 --> 04:15:07,512
block the user from trying to press the same button thousands of times so

2533
04:15:07,512 --> 04:15:11,192
if you display that little loading indicator on the top on the status bar

2534
04:15:11,192 --> 04:15:14,080
then what you also have to do you have to add some extra logic to your

2535
04:15:14,080 --> 04:15:18,800
application to block for instance the current register button or the loading

2536
04:15:18,800 --> 04:15:22,872
button and you usually don't want to do that but because that's just extra logic

2537
04:15:22,872 --> 04:15:26,400
what would make more sense is upon a user pressing the login button or the

2538
04:15:26,400 --> 04:15:29,760
register button you want to display like a blocking screen

2539
04:15:29,760 --> 04:15:34,000
that tells them that hey i'm doing something okay so don't do anything else

2540
04:15:34,000 --> 04:15:39,512
while this screen is is visible on your mobile display so let's go ahead and do

2541
04:15:39,512 --> 04:15:41,912
that

2542
04:15:41,912 --> 04:15:45,360
so we're going to code a loading screen as you can see in the caption says we're

2543
04:15:45,360 --> 04:15:49,280
going to do it in lib utilities dialogues loading dialog so let's go

2544
04:15:49,280 --> 04:15:55,360
ahead and do that and bring up my notes as well

2545
04:15:55,360 --> 04:15:59,040
i'm going to close all these files just to make sure we've also saved them

2546
04:15:59,040 --> 04:16:02,720
because if you close a file in visual studio code at least which we haven't

2547
04:16:02,720 --> 04:16:05,512
saved before visual studio is going to display your dialogue saying are you

2548
04:16:05,512 --> 04:16:08,960
sure you want to close this file without saving it so it's usually good practice

2549
04:16:08,960 --> 04:16:13,680
to close your existing files before you move into doing something new

2550
04:16:13,680 --> 04:16:18,160
so that you at least are sure that you've saved those changes okay

2551
04:16:18,160 --> 04:16:22,872
um now let's i mean we have some errors don't worry about that so

2552
04:16:22,872 --> 04:16:25,912
you should now be comfortable with having errors in your application

2553
04:16:25,912 --> 04:16:28,552
because you know at the end of every chapter we're going to tighten things up

2554
04:16:28,552 --> 04:16:33,912
and fix things okay so let's go to lib utilities dialog

2555
04:16:33,912 --> 04:16:37,192
lib utilities dialogues and we're going to create a

2556
04:16:37,192 --> 04:16:42,000
new file in here as the caption indicates called loading dialog dart

2557
04:16:42,000 --> 04:16:46,400
and you see this loading dialog what we also have to have in this loading dialog

2558
04:16:46,400 --> 04:16:48,720
is to allow

2559
04:16:48,720 --> 04:16:53,360
to allow the caller to display this dialog but also to allow the caller to

2560
04:16:53,360 --> 04:16:57,192
dismiss this dialog so it's very important to be able to dismiss a

2561
04:16:57,192 --> 04:17:01,760
dialogue when the application actually needs for that dialog to disappear so

2562
04:17:01,760 --> 04:17:06,800
what we're going to do first is to bring a create a type f in here and we're

2563
04:17:06,800 --> 04:17:11,600
gonna call it closed dialog let me just increase the size of that font as well

2564
04:17:11,600 --> 04:17:16,480
and we're gonna make sure that it's equal to a void function in here okay so

2565
04:17:16,480 --> 04:17:20,720
what we're to do in here we have we're going to create a function that displays

2566
04:17:20,720 --> 04:17:26,720
a loading dialog but it also returns back a function that the caller can call

2567
04:17:26,720 --> 04:17:31,512
to dismiss it so it may be a little bit of a shift in how you think about

2568
04:17:31,512 --> 04:17:34,960
programming if it's the first time you're doing something like this but i

2569
04:17:34,960 --> 04:17:39,120
promise you it will make a lot more sense as we develop it so let's say that

2570
04:17:39,120 --> 04:17:44,160
we have a function that returns a close dialogue um and we call it show loading

2571
04:17:44,160 --> 04:17:47,832
dialog okay and it has two

2572
04:17:47,832 --> 04:17:51,832
required parameters so let's put curly brackets in here

2573
04:17:51,832 --> 04:17:57,512
and then let's just say we have required build context

2574
04:17:57,512 --> 04:18:03,440
and we call it build context or let's just call it context and then

2575
04:18:03,440 --> 04:18:07,680
we have a text to display so required string text okay

2576
04:18:07,680 --> 04:18:11,120
excuse me

2577
04:18:11,120 --> 04:18:14,640
so and now you can see you get this required build context

2578
04:18:14,640 --> 04:18:17,280
try changing its name and i'm going to get help from facial studio code to

2579
04:18:17,280 --> 04:18:21,912
import let's say material okay

2580
04:18:21,912 --> 04:18:25,440
now we have just one error saying that you're not returning anything in here

2581
04:18:25,440 --> 04:18:28,232
so the first thing we're going to do is we're actually going to define our

2582
04:18:28,232 --> 04:18:32,000
dialog how is this loading dialog going to look like so it's the only thing it's

2583
04:18:32,000 --> 04:18:36,872
going to do is just to have a little loading indicator a bit of spacing and

2584
04:18:36,872 --> 04:18:41,360
text that is going to be using the text widget to render this

2585
04:18:41,360 --> 04:18:44,640
string so let's first define our dialogue so i'm just going to say final

2586
04:18:44,640 --> 04:18:48,960
dialog is equal to alert dialogue like this

2587
04:18:48,960 --> 04:18:52,552
and let's just go to the next line semicolon

2588
04:18:52,552 --> 04:18:55,912
all right and then we have to define the content

2589
04:18:55,912 --> 04:18:59,280
for it as you can see content should be a widget so the widget we're developing

2590
04:18:59,280 --> 04:19:02,872
is a column because we want like a vertical list of widgets the loading

2591
04:19:02,872 --> 04:19:06,720
screen a little bit of a size box spacing and a text widget so you can

2592
04:19:06,720 --> 04:19:11,512
render that with column easily and remember column what what column

2593
04:19:11,512 --> 04:19:16,400
wants to usually do is to grab as much space as it needs so it could be like

2594
04:19:16,400 --> 04:19:20,480
the entire screen long we don't want that what we want for the column to take

2595
04:19:20,480 --> 04:19:24,872
as little space as it needs to render its content correctly so we're going to

2596
04:19:24,872 --> 04:19:29,680
say main access size oops exercise it should be of type main

2597
04:19:29,680 --> 04:19:35,440
access size and we're going to say main exercise of minimum all right

2598
04:19:35,440 --> 04:19:41,440
and its children are going to be an array of two constant

2599
04:19:41,440 --> 04:19:45,360
widgets of a circular progress indicator like

2600
04:19:45,360 --> 04:19:48,232
that and then we're going to say a constant

2601
04:19:48,232 --> 04:19:52,720
of size box we haven't used size boxes

2602
04:19:52,720 --> 04:19:59,680
before but size box is really good for um creating spacing so

2603
04:19:59,680 --> 04:20:03,912
as you can see in here it's just an empty space with a height of 10.

2604
04:20:03,912 --> 04:20:07,192
and then what we're going to do in here we're just going to say display also a

2605
04:20:07,192 --> 04:20:11,120
text that renders this particular text parameter

2606
04:20:11,120 --> 04:20:14,960
in here so like that

2607
04:20:14,960 --> 04:20:19,280
now we're we have a little problem here with how this thing is rendered and you

2608
04:20:19,280 --> 04:20:23,360
can see they're in the same line and that's why it kind of looks strange

2609
04:20:23,360 --> 04:20:27,832
let's put a comma in here and then save the file to get the

2610
04:20:27,832 --> 04:20:31,680
formatting correct and let's put a comma in here as well

2611
04:20:31,680 --> 04:20:35,360
like that okay so now it's working as it should or

2612
04:20:35,360 --> 04:20:40,400
at least it's formatting as it should so then what we're going to do in here

2613
04:20:40,400 --> 04:20:43,512
we're going to just say we want to display that dialogue so

2614
04:20:43,512 --> 04:20:46,552
let's say show oops

2615
04:20:46,552 --> 04:20:50,640
show a show dialog okay

2616
04:20:50,640 --> 04:20:54,960
and let's go in here and the context of this dialog and i'm going to bring it

2617
04:20:54,960 --> 04:20:59,120
here so you see it the context is the context that we are providing to this

2618
04:20:59,120 --> 04:21:03,120
function and a barrier or dismissable and i'm

2619
04:21:03,120 --> 04:21:06,400
going to show you the documentation for very dismissible and let's see if we can

2620
04:21:06,400 --> 04:21:09,440
actually find that oh

2621
04:21:09,440 --> 04:21:12,400
it's not helping me with that but that's okay um

2622
04:21:12,400 --> 04:21:17,192
what barrier dismissable allows you to do is to say that if the user taps

2623
04:21:17,192 --> 04:21:22,080
outside this dialogue either allow the dismissal of this dialogue or don't and

2624
04:21:22,080 --> 04:21:27,040
we don't want the user to be able to tap outside this dialog in order to dismiss

2625
04:21:27,040 --> 04:21:29,512
it because a loading screen should be dismissed when we want it to be

2626
04:21:29,512 --> 04:21:33,192
dismissed not when the user wants it to be dismissed and also

2627
04:21:33,192 --> 04:21:36,720
for those who are ux designers who are watching this course he may be actually

2628
04:21:36,720 --> 04:21:42,232
tempted also to for instance um provide a cancel i actually think

2629
04:21:42,232 --> 04:21:46,232
having a cancel button in most loading screens is a good idea

2630
04:21:46,232 --> 04:21:50,080
because sometimes for whatever reason an application may

2631
04:21:50,080 --> 04:21:52,800
not be able to handle for instance different errors and exceptions that

2632
04:21:52,800 --> 04:21:57,120
could occur while making an api call and i personally have been in this situation

2633
04:21:57,120 --> 04:22:00,960
where a dialogue was displayed to the user and it was just never dismissed

2634
04:22:00,960 --> 04:22:04,232
because something went wrong the application wasn't able to handle it so

2635
04:22:04,232 --> 04:22:07,832
i personally as a user had to go and force kill the application and restart

2636
04:22:07,832 --> 04:22:11,760
the entire process in order to get things working so if you want to have a

2637
04:22:11,760 --> 04:22:15,280
cancel button in here it's fine but um i'm not doing that right now it's just

2638
04:22:15,280 --> 04:22:19,440
for the sake of simplicity so that we can move on with this code as um as fast

2639
04:22:19,440 --> 04:22:22,720
as accuracy as fast and accurate as possible

2640
04:22:22,720 --> 04:22:25,680
so now you know what barrier dismissible false does

2641
04:22:25,680 --> 04:22:30,000
and for the builder function that's what this um error is here we have to just

2642
04:22:30,000 --> 04:22:36,232
say okay we get a context and but in here what we do is just do we

2643
04:22:36,232 --> 04:22:40,232
remove we we return the dialogue in here okay so now we're saying show this

2644
04:22:40,232 --> 04:22:45,120
dialogue and and then we're just going to say

2645
04:22:45,120 --> 04:22:48,160
the return value see we still have this problem with the return value that we're

2646
04:22:48,160 --> 04:22:51,280
not returning a closed dialogue and what this close dialogue is just going to be

2647
04:22:51,280 --> 04:22:55,600
is we are going to return a function from our function so when the user then

2648
04:22:55,600 --> 04:23:01,040
calls that function we're going to pop this dialog it's it's beautiful

2649
04:23:01,040 --> 04:23:04,232
so let's just say we return a function an error function

2650
04:23:04,232 --> 04:23:09,832
upon calling which we are going to say navigator of this context and we're just

2651
04:23:09,832 --> 04:23:15,280
going to say pop okay so that's how you return a function that can be acted upon

2652
04:23:15,280 --> 04:23:19,832
and invoked by others so now we save this and you can see we

2653
04:23:19,832 --> 04:23:23,360
don't have any errors i'm going to just

2654
04:23:23,360 --> 04:23:27,680
resize this a little bit make the font a little bit smaller so you see the code

2655
04:23:27,680 --> 04:23:31,440
in its entirety

2656
04:23:31,440 --> 04:23:35,120
so now let's talk about loading and

2657
04:23:35,120 --> 04:23:38,552
exception handling during the login process so

2658
04:23:38,552 --> 04:23:44,160
let's go to our login view and you see here we have already some

2659
04:23:44,160 --> 04:23:47,832
exception handling and we also have this off block but we also have this text

2660
04:23:47,832 --> 04:23:52,400
button that is doing like manual navigation it says push name and remove

2661
04:23:52,400 --> 04:23:58,400
until and we need to clean these things up okay

2662
04:23:58,400 --> 04:24:04,400
so let's go inside our login view and so

2663
04:24:04,400 --> 04:24:08,232
i'm going to also do it in my notes

2664
04:24:08,232 --> 04:24:11,120
and let's have a look at how we've done

2665
04:24:11,120 --> 04:24:14,640
things you can see in here we have a block listener at the moment that is

2666
04:24:14,640 --> 04:24:19,120
wrapping itself around this text button so we're

2667
04:24:19,120 --> 04:24:23,360
not gonna do that we're gonna have the text button exactly the way it is and so

2668
04:24:23,360 --> 04:24:26,872
meaning that we're gonna remove this block listener from here okay

2669
04:24:26,872 --> 04:24:31,360
so what we could do is as the caption indicates we're just gonna go here to

2670
04:24:31,360 --> 04:24:36,000
the scaffold and just say okay we have a new block listener and remember this

2671
04:24:36,000 --> 04:24:40,400
should be the off block itself so i'm gonna say off block and this should be

2672
04:24:40,400 --> 04:24:45,912
the off state like this so then inside the listener what we need to do is to

2673
04:24:45,912 --> 04:24:49,680
bring what we had already

2674
04:24:49,680 --> 04:24:52,320
um inside

2675
04:24:52,320 --> 04:24:56,160
our text button in here so we have the

2676
04:24:56,160 --> 04:25:01,192
exception handling okay excuse me so as the caption indicates

2677
04:25:01,192 --> 04:25:04,552
we're going to do this exception handling now inside our new block

2678
04:25:04,552 --> 04:25:08,872
listener on top so remove all the code from your block listener for your text

2679
04:25:08,872 --> 04:25:12,000
button all the exception handling just cut it

2680
04:25:12,000 --> 04:25:16,800
and bring it please up into this block listener which is at the top level all

2681
04:25:16,800 --> 04:25:21,280
right and make this an async listener so that you can await on your show or

2682
04:25:21,280 --> 04:25:25,440
dialogue okay so that's the first step however we still have this empty block

2683
04:25:25,440 --> 04:25:30,232
listener in here so i'm gonna remove that now so all of a sudden you see now

2684
04:25:30,232 --> 04:25:36,080
we have the text button in here all right that was fantastic

2685
04:25:36,080 --> 04:25:41,760
so then what we need to do is to start handling our

2686
04:25:41,760 --> 04:25:46,232
loading screen basically so that is going to be

2687
04:25:46,232 --> 04:25:52,080
a bit of code so but don't be scared of that we're going to handle that soon

2688
04:25:52,080 --> 04:25:57,040
so in order to be able to display our loading screen we also have

2689
04:25:57,040 --> 04:26:01,280
to kind of like keep hold off this um

2690
04:26:01,280 --> 04:26:06,320
close handle what do i mean by that let's go back to our loading dialog you

2691
04:26:06,320 --> 04:26:09,832
see every time we call this function this is going to give us a function back

2692
04:26:09,832 --> 04:26:14,232
so that we can close the the dialog we have to keep hold of this

2693
04:26:14,232 --> 04:26:18,552
so that when the states change inside our login view we're going to look at

2694
04:26:18,552 --> 04:26:22,400
that previous handle and be like oh we have a loading screen

2695
04:26:22,400 --> 04:26:27,192
displayed to the user we have to first dismiss it okay so let's go where we're

2696
04:26:27,192 --> 04:26:31,832
keeping hold of our email and password in here and keep hold of a

2697
04:26:31,832 --> 04:26:36,872
close dialogue and it's going to auto import that you see so if you don't have

2698
04:26:36,872 --> 04:26:41,832
auto import you may have to import this file yourself

2699
04:26:41,832 --> 04:26:44,720
so let's say it's an optional and we call it close

2700
04:26:44,720 --> 04:26:47,680
dialogue handle okay

2701
04:26:47,680 --> 04:26:51,120
so we keep hold of that we haven't assigned to it yet but we're gonna do

2702
04:26:51,120 --> 04:26:54,080
that soon

2703
04:26:54,080 --> 04:26:59,912
so let's stand in here in the state of logged out and right here just add some

2704
04:26:59,912 --> 04:27:03,040
space and what we're gonna do we're gonna say

2705
04:27:03,040 --> 04:27:07,832
um do we already have a closed dialog handle so let's say close

2706
04:27:07,832 --> 04:27:10,232
and dialog is

2707
04:27:10,232 --> 04:27:13,512
close dialog hana

2708
04:27:13,512 --> 04:27:17,360
and what we're going to do now is we're going to have a look at our states and

2709
04:27:17,360 --> 04:27:22,872
also if we have a closed dialog handle and we're going to display correct

2710
04:27:22,872 --> 04:27:26,320
behavior basically so what we're going to do is we're going

2711
04:27:26,320 --> 04:27:31,600
to say if state is loading if we're not loading at

2712
04:27:31,600 --> 04:27:35,440
the moment meaning that maybe we were loading before

2713
04:27:35,440 --> 04:27:40,080
then our goal in here is that saying that if we are not loading and

2714
04:27:40,080 --> 04:27:45,192
excuse me close dialogue is not null and sorry

2715
04:27:45,192 --> 04:27:47,760
and so

2716
04:27:47,760 --> 04:27:51,912
in this case what this conveys to us saying it says that we're not loading

2717
04:27:51,912 --> 04:27:56,720
now but we were loading before and that the bot part is coming from

2718
04:27:56,720 --> 04:28:00,872
here what we need to do in here then is just to close that dialog so let's just

2719
04:28:00,872 --> 04:28:05,760
say close dialog we call that function you see and then we say

2720
04:28:05,760 --> 04:28:09,832
close dialogue handle is null

2721
04:28:09,832 --> 04:28:15,760
so we're just cleaning that up now okay and then we're seeing now

2722
04:28:15,760 --> 04:28:17,680
if what we have to have so what we've

2723
04:28:17,680 --> 04:28:20,720
handled right now is closing the dial up but we also have the hell of showing it

2724
04:28:20,720 --> 04:28:24,080
all so we're now going to say if the state is loading

2725
04:28:24,080 --> 04:28:29,440
and we don't have a closed dial sorry we don't have a loading dialog yet on the

2726
04:28:29,440 --> 04:28:34,080
screen then we have to show it so excuse me so let's say if state is

2727
04:28:34,080 --> 04:28:36,160
loading and

2728
04:28:36,160 --> 04:28:40,160
close dialog is null

2729
04:28:40,160 --> 04:28:44,872
then we have to show the dialogue so let's just say close dialog handle is

2730
04:28:44,872 --> 04:28:49,360
equal to show loading dialog we pass the context

2731
04:28:49,360 --> 04:28:53,040
let's do some formatting in here and let's just say loading

2732
04:28:53,040 --> 04:28:57,680
just like that okay and we leave the rest of this stuff in

2733
04:28:57,680 --> 04:29:02,080
the code exactly as it is

2734
04:29:02,080 --> 04:29:04,872
the next thing that we need to do now is to

2735
04:29:04,872 --> 04:29:08,480
as you can see in the caption on the screen we have to hook the register

2736
04:29:08,480 --> 04:29:12,800
button to our auth block when register button is tap send the auth event should

2737
04:29:12,800 --> 04:29:18,640
register to the block and what we're going to do then is go to

2738
04:29:18,640 --> 04:29:22,960
and find this button in here at the bottom of the loading via sorry login

2739
04:29:22,960 --> 04:29:26,552
view.dart file and upon pressing it let's just make

2740
04:29:26,552 --> 04:29:30,232
this and yeah i don't think it really has to be

2741
04:29:30,232 --> 04:29:35,360
any asynchronous code at all so let's just in here let's say that we

2742
04:29:35,360 --> 04:29:40,400
grab our off block so let's say context read

2743
04:29:40,400 --> 04:29:44,400
and we are looking for off blog in our context and then we're gonna send it an

2744
04:29:44,400 --> 04:29:48,232
event and we're gonna send const auth event

2745
04:29:48,232 --> 04:29:52,960
should should register just like that okay

2746
04:29:52,960 --> 04:29:57,912
so and i believe add event is not async or anything it's just a void so this

2747
04:29:57,912 --> 04:30:01,760
function doesn't have to be async so if you had it as async you can just safely

2748
04:30:01,760 --> 04:30:07,600
remove that i'm just gonna save this file as well

2749
04:30:07,600 --> 04:30:11,760
all right a lot of work we've we're kind of now

2750
04:30:11,760 --> 04:30:17,280
almost done with uh our login view so what i'm gonna do is i'm gonna close

2751
04:30:17,280 --> 04:30:21,040
all these files that are on the screen right now and we're gonna start moving

2752
04:30:21,040 --> 04:30:26,400
towards also blockifying our register view so

2753
04:30:26,400 --> 04:30:31,600
let's go as the caption says let's go to register view

2754
04:30:31,600 --> 04:30:34,320
and having a look here

2755
04:30:34,320 --> 04:30:38,480
at the moment we don't have and i can see in here in the previous

2756
04:30:38,480 --> 04:30:41,360
chapters we've been working with cleaning up the login view so

2757
04:30:41,360 --> 04:30:44,640
blockifying the login but we didn't do the same thing in register view and

2758
04:30:44,640 --> 04:30:48,640
that's fine we're going to take care of that and i can see that by just looking

2759
04:30:48,640 --> 04:30:52,800
at our try and catch statements in here you see these things shouldn't be

2760
04:30:52,800 --> 04:30:56,480
in the text button so as like but one thing at a time as the

2761
04:30:56,480 --> 04:30:59,512
caption of the yeah as i capture the bottom screen indicates we're going to

2762
04:30:59,512 --> 04:31:03,512
wrap the scaffold inside a block listener so it's going to be very

2763
04:31:03,512 --> 04:31:08,232
similar to how we did it for our login view

2764
04:31:08,232 --> 04:31:12,872
command dot and grab a wrap with block listener here and i'm

2765
04:31:12,872 --> 04:31:16,832
just going to say this is going to be the off

2766
04:31:16,832 --> 04:31:20,480
block and it's going to auto import it for me so very important if you're

2767
04:31:20,480 --> 04:31:23,512
getting errors for the auth block not being found in this context it's

2768
04:31:23,512 --> 04:31:27,120
probably because you haven't imported off block so and in here we're going to

2769
04:31:27,120 --> 04:31:30,552
say off state and that's going to also import it as

2770
04:31:30,552 --> 04:31:34,080
well and block listener is not available in this context either because we don't

2771
04:31:34,080 --> 04:31:37,912
have a flutter block so that's also going to be all too important so that's

2772
04:31:37,912 --> 04:31:42,480
three so that's the three um auto imports and

2773
04:31:42,480 --> 04:31:46,720
they're all available i believe so that's

2774
04:31:46,720 --> 04:31:51,760
auth block auth state and flutter block so

2775
04:31:51,760 --> 04:31:55,360
you could actually bring it next to each other if you want to so you know which

2776
04:31:55,360 --> 04:31:59,680
ones to import it's these three

2777
04:31:59,680 --> 04:32:04,480
wow okay um so what we need to do that that was the first thing that we had to

2778
04:32:04,480 --> 04:32:07,600
handle so

2779
04:32:07,600 --> 04:32:11,120
we also as i said now we have to go and start handling

2780
04:32:11,120 --> 04:32:15,280
exceptions so this is very similar to how we did and

2781
04:32:15,280 --> 04:32:19,912
did it in the login views so we kind of need to get rid of these

2782
04:32:19,912 --> 04:32:24,000
so now what we need to do inside this listener of our block listener we have

2783
04:32:24,000 --> 04:32:28,232
to handle the exceptions that we are at the moment handling here at the bottom

2784
04:32:28,232 --> 04:32:32,080
so this should be very similar process to how we were doing things in the login

2785
04:32:32,080 --> 04:32:36,640
view from if you remember so if we oops if i go to our login view you can see we

2786
04:32:36,640 --> 04:32:40,320
have this uh block listener and then we're doing this

2787
04:32:40,320 --> 04:32:43,912
kind of pattern in there so we're going to do something very similar to that

2788
04:32:43,912 --> 04:32:46,720
except we're going to do it in register view okay so

2789
04:32:46,720 --> 04:32:51,440
inside register view the state is i mean all the exceptions all the

2790
04:32:51,440 --> 04:32:57,360
problems that could arise are going to be inside the um registering state so

2791
04:32:57,360 --> 04:33:01,440
we're just gonna first make sure that we're in that state okay so let's say

2792
04:33:01,440 --> 04:33:06,232
state is off state registering

2793
04:33:06,232 --> 04:33:12,480
and we're gonna say if state exception is weak password auth exception

2794
04:33:12,480 --> 04:33:15,512
then let's make this listener asynchronous so

2795
04:33:15,512 --> 04:33:20,640
we can do an await on our show dialog so we we say await

2796
04:33:20,640 --> 04:33:25,280
and show error dialog and the text is just going to be weak

2797
04:33:25,280 --> 04:33:30,160
password okay and then we're going to do another else

2798
04:33:30,160 --> 04:33:35,512
an else statement with another if and we say if state exception

2799
04:33:35,512 --> 04:33:40,720
it's email already in use auth exception and then here we're gonna display

2800
04:33:40,720 --> 04:33:46,552
another dialog then that says for instance email is already in use okay

2801
04:33:46,552 --> 04:33:50,400
and um so let's then go to another else

2802
04:33:50,400 --> 04:33:54,080
statement so i'm going to just copy this i'm a little bit lazy and i'm just going

2803
04:33:54,080 --> 04:33:58,160
to say generic auth exception and then we're going to say

2804
04:33:58,160 --> 04:34:02,480
failed to register so these are the various exceptions that can occur

2805
04:34:02,480 --> 04:34:10,080
while you're registering for a user okay and you can see in here we have three

2806
04:34:10,080 --> 04:34:13,360
uh exceptions we're handling weak password email already in use and then

2807
04:34:13,360 --> 04:34:17,600
we also have invalid email auth exception so maybe we could actually

2808
04:34:17,600 --> 04:34:21,040
handle that as well so let's just go ahead and add another else statement in

2809
04:34:21,040 --> 04:34:26,000
here and just say invalid uh invalid email auth exception so we

2810
04:34:26,000 --> 04:34:30,000
just say invalid email okay

2811
04:34:30,000 --> 04:34:35,360
so now we've handled those four exceptions all right

2812
04:34:35,360 --> 04:34:40,400
so what we need now is to make sure as you

2813
04:34:40,400 --> 04:34:43,440
can see in the caption that in register view the register button to send the

2814
04:34:43,440 --> 04:34:47,760
auth event called auth event register so let's find that register button that

2815
04:34:47,760 --> 04:34:51,360
we're talking about here and that is this text button you can see

2816
04:34:51,360 --> 04:34:54,872
it says register okay

2817
04:34:54,872 --> 04:34:58,800
so what we need to do is perhaps to clean this code up at the moment there's

2818
04:34:58,800 --> 04:35:03,192
just so much information in here that we don't really have to do so go to your

2819
04:35:03,192 --> 04:35:07,192
register button please in the register view and just pretty much just nuke this

2820
04:35:07,192 --> 04:35:12,160
entire try and all these cad statements the way they are

2821
04:35:12,160 --> 04:35:17,040
so now we have a clean slate so now we have just email and password and let's

2822
04:35:17,040 --> 04:35:21,360
grab the auth block in here and ask the auth block to do the registration okay

2823
04:35:21,360 --> 04:35:25,360
so i'm just going to say context

2824
04:35:25,360 --> 04:35:30,552
and let's just say we grab the off block in here

2825
04:35:30,552 --> 04:35:34,640
okay as a function

2826
04:35:34,640 --> 04:35:40,000
context if i can spell and then i'm just going to say add in

2827
04:35:40,000 --> 04:35:44,232
auth events of register

2828
04:35:44,232 --> 04:35:48,872
here with email and password just like that

2829
04:35:48,872 --> 04:35:51,912
okay so your code should kind of look like

2830
04:35:51,912 --> 04:35:55,832
this and put a comma in here to make it a little bit cleaner so just like that

2831
04:35:55,832 --> 04:35:59,512
all right

2832
04:35:59,512 --> 04:36:05,120
okay that was for register now we have also a

2833
04:36:05,120 --> 04:36:09,600
login button in here which right now inside our register view do you remember

2834
04:36:09,600 --> 04:36:13,280
if you end up in the registry view and incorrectly so you just tap on some

2835
04:36:13,280 --> 04:36:16,080
button and enter them in the registry and be like oh i'm in the wrong place i

2836
04:36:16,080 --> 04:36:20,232
want to log in actually instance so we have this already registered login here

2837
04:36:20,232 --> 04:36:24,232
button and at the moment that's doing custom navigator or push name and remove

2838
04:36:24,232 --> 04:36:28,800
until and it shouldn't be doing that so let's go ahead and fix that up so let's

2839
04:36:28,800 --> 04:36:33,832
go in here and remove that code and just say context read auth block

2840
04:36:33,832 --> 04:36:39,192
and we're going to basically add an event in here of con of type const auth

2841
04:36:39,192 --> 04:36:44,232
event log out just like that okay so that then

2842
04:36:44,232 --> 04:36:50,960
is going to send the user to the login screen all right

2843
04:36:50,960 --> 04:36:54,720
all right let's move now to the next point as you can see it says send

2844
04:36:54,720 --> 04:36:57,680
verification button and verify email view dart

2845
04:36:57,680 --> 04:37:01,600
it should send an auth event and when you press it it should send the auth

2846
04:37:01,600 --> 04:37:06,872
event send the email verification to the blog so i'm going to go into my notes as

2847
04:37:06,872 --> 04:37:11,680
well as well and just find that button and now let's

2848
04:37:11,680 --> 04:37:16,480
go in our code in here let's go to verify email view

2849
04:37:16,480 --> 04:37:20,872
and have a look at that button that we're talking about which is right here

2850
04:37:20,872 --> 04:37:23,760
and at the moment as you can see it's doing all service firebase and email

2851
04:37:23,760 --> 04:37:26,160
verification but we shouldn't be doing that

2852
04:37:26,160 --> 04:37:30,080
um we should ask our block to do that so let's just go ahead

2853
04:37:30,080 --> 04:37:33,120
and first of all remove that code inside the

2854
04:37:33,120 --> 04:37:37,280
buttons unpressed and then this button doesn't have to be async anymore

2855
04:37:37,280 --> 04:37:41,912
and what we're going to say is just going to say context and read

2856
04:37:41,912 --> 04:37:45,280
and but we don't have read remember because we don't have we haven't

2857
04:37:45,280 --> 04:37:49,600
imported auth we haven't imported block or flutter

2858
04:37:49,600 --> 04:37:52,960
block into this file yet but we're going to fix that soon so first of all just

2859
04:37:52,960 --> 04:37:57,680
say read the off block and that's going to also import off block for us so

2860
04:37:57,680 --> 04:38:02,000
that's the first part and now you have this error let's get visual studio code

2861
04:38:02,000 --> 04:38:05,832
to import the same provider but i actually want

2862
04:38:05,832 --> 04:38:10,232
flutter block so let's go ahead and import that ourselves

2863
04:38:10,232 --> 04:38:15,760
so let's say package flutter block and flutter block dart

2864
04:38:15,760 --> 04:38:20,400
now it's fine alright so let's in here and then add an event we say const off

2865
04:38:20,400 --> 04:38:25,680
event send email verification just like that

2866
04:38:25,680 --> 04:38:31,280
all right so it's done now

2867
04:38:31,280 --> 04:38:36,552
so the next thing we have to do is you can see inside this restart button at

2868
04:38:36,552 --> 04:38:40,080
the bottom of the screen at the moment it's doing quite a lot of work

2869
04:38:40,080 --> 04:38:44,552
it is basically first logging out from our auth service and then it's doing

2870
04:38:44,552 --> 04:38:48,320
navigation so this button is like all over the place it's taking care of

2871
04:38:48,320 --> 04:38:53,760
authentication it's taking care of i mean i'm actually very i'm laughing here

2872
04:38:53,760 --> 04:38:56,960
because i'm kind of laughing at the progress that we've made so far and that

2873
04:38:56,960 --> 04:39:00,232
we've gone from very very raw programming to

2874
04:39:00,232 --> 04:39:05,440
now very elegant handling of exceptions alien handling of

2875
04:39:05,440 --> 04:39:10,160
routing etc so it is actually really fun to be here to be honest with you

2876
04:39:10,160 --> 04:39:14,400
so in here let's remove that code and kind of grab this thing that we have up

2877
04:39:14,400 --> 04:39:17,760
here in our send email verification button and bring it down here instead of

2878
04:39:17,760 --> 04:39:21,912
sending the off event send email verification we're gonna send alt event

2879
04:39:21,912 --> 04:39:25,360
log out like this

2880
04:39:25,360 --> 04:39:30,400
excuse me all right so that part is done

2881
04:39:30,400 --> 04:39:34,080
so what we need now let's go in now let's

2882
04:39:34,080 --> 04:39:38,872
close this file and go to our off block so we have quite a bit of work now to do

2883
04:39:38,872 --> 04:39:42,552
in our off block as you can see it's just all over the place so

2884
04:39:42,552 --> 04:39:45,760
i want to do the same thing in my notes as well so off block

2885
04:39:45,760 --> 04:39:49,120
the first thing that we need to do is make sure that we are not using this off

2886
04:39:49,120 --> 04:39:53,360
state loading because we don't have that anymore what we have is off states on in

2887
04:39:53,360 --> 04:39:59,912
each light so please take care of that as a first name

2888
04:39:59,912 --> 04:40:04,720
so we also have now an auth event send

2889
04:40:04,720 --> 04:40:09,760
email verification and we haven't handled that yet so let's go on top of

2890
04:40:09,760 --> 04:40:14,080
this initialize i'm just gonna send say send email verification okay and let's

2891
04:40:14,080 --> 04:40:18,640
create a new on to handle auth events and email verification because we

2892
04:40:18,640 --> 04:40:23,040
haven't handled that so we have event animation here and

2893
04:40:23,040 --> 04:40:27,680
let's just go and say this is an async function and then open it and then a

2894
04:40:27,680 --> 04:40:32,080
semicolon at the end to get the format uh formatting working

2895
04:40:32,080 --> 04:40:35,760
the only thing we have to do in the auth event send email verification to

2896
04:40:35,760 --> 04:40:40,480
actually call and tell the provider that hey um we're gonna basically send an

2897
04:40:40,480 --> 04:40:45,680
email verification all right so let's just let's just say a wait provider

2898
04:40:45,680 --> 04:40:48,640
and email verification and then what we're gonna do we're gonna emit the

2899
04:40:48,640 --> 04:40:55,040
exact same um state so by coming into by sending this event

2900
04:40:55,040 --> 04:40:58,720
we are just going to do some work and emit the exact same state that you're in

2901
04:40:58,720 --> 04:41:02,960
so we're not actually changing the state of the application because remember when

2902
04:41:02,960 --> 04:41:07,680
you're in the verify email view and then you press the button to actually send a

2903
04:41:07,680 --> 04:41:12,232
new verification email what happens on the screen nothing we're not like doing

2904
04:41:12,232 --> 04:41:15,760
anything it's just we're sending the email verification that's all so we're

2905
04:41:15,760 --> 04:41:19,192
not sending you to a new screen or anything like that so that's why we're

2906
04:41:19,192 --> 04:41:24,720
emitting the exact same state as we had before

2907
04:41:24,720 --> 04:41:29,760
all right now we have to actually handle a

2908
04:41:29,760 --> 04:41:35,040
our auth event register so let's go ahead and do that so that is

2909
04:41:35,040 --> 04:41:40,872
completely new so let's just say on off event register

2910
04:41:40,872 --> 04:41:45,440
and we say we have the events and the emails and an asynchronous function just

2911
04:41:45,440 --> 04:41:50,160
like that all right

2912
04:41:50,160 --> 04:41:52,872
so when we have the auth event register if

2913
04:41:52,872 --> 04:41:57,832
you remember from before this authentic include the email and password in itself

2914
04:41:57,832 --> 04:42:01,192
excuse me so we can grab those and that

2915
04:42:01,192 --> 04:42:06,080
information right now just say email is advanced.email and let's just say final

2916
04:42:06,080 --> 04:42:11,600
password is events.password oops

2917
04:42:11,600 --> 04:42:16,320
all right so then we're going to put this into a try and catch block so we're

2918
04:42:16,320 --> 04:42:21,040
going to say try on exception catch e

2919
04:42:21,040 --> 04:42:25,040
when an exception happens we're just going to emit our

2920
04:42:25,040 --> 04:42:31,512
off state registering with that e um

2921
04:42:31,512 --> 04:42:34,552
so we talked about this before but just to

2922
04:42:34,552 --> 04:42:39,192
refresh when you're during the process of register we actually can emit a new

2923
04:42:39,192 --> 04:42:44,080
state in here just called registering and then it can it can contain an

2924
04:42:44,080 --> 04:42:47,512
exception all right so that's what we're emitting in here saying that you're in

2925
04:42:47,512 --> 04:42:50,960
the process of registering but something bad happened which is an exception all

2926
04:42:50,960 --> 04:42:53,360
right

2927
04:42:53,360 --> 04:42:58,080
so in here then let's just say await provider and we're going to create a new

2928
04:42:58,080 --> 04:43:03,280
user with the email and password they just fit right in so that's really great

2929
04:43:03,280 --> 04:43:07,512
and then if you remember from the registration process that we had before

2930
04:43:07,512 --> 04:43:11,600
so um in our register view during registration

2931
04:43:11,600 --> 04:43:14,872
here upon doing a registration we didn't just

2932
04:43:14,872 --> 04:43:18,872
register the user with the provider but we also send an email verification just

2933
04:43:18,872 --> 04:43:22,400
to make sure that the user doesn't have to go and send an email verification and

2934
04:43:22,400 --> 04:43:26,720
manually so we're going to do the same thing in our off block okay

2935
04:43:26,720 --> 04:43:32,080
so let's also wait on the provider and we say send email verification just

2936
04:43:32,080 --> 04:43:37,120
like that all right um and then after doing that since you

2937
04:43:37,120 --> 04:43:41,280
registered a new user well what is the states if you remember from our

2938
04:43:41,280 --> 04:43:43,912
off states off state

2939
04:43:43,912 --> 04:43:48,720
we have this needs verification we know that when we register and use a new user

2940
04:43:48,720 --> 04:43:52,872
that user is always going to need verification right so let's go in here

2941
04:43:52,872 --> 04:43:58,320
and just emits that state so uh auth state needs verification just

2942
04:43:58,320 --> 04:44:01,280
like that and that's an empty state so it doesn't have any parameters and such

2943
04:44:01,280 --> 04:44:05,512
all right

2944
04:44:05,512 --> 04:44:10,080
all right um then we have to handle our auth event

2945
04:44:10,080 --> 04:44:15,360
initialize so let's have a look in here and see how the code look looks like so

2946
04:44:15,360 --> 04:44:20,160
in here what we need to do at the moment we have logged out but you can see we're

2947
04:44:20,160 --> 04:44:24,000
not providing that is a loading parameter and we're not providing

2948
04:44:24,000 --> 04:44:28,080
exceptions so i'm just actually going to click clean this and write it by hand

2949
04:44:28,080 --> 04:44:32,160
manually so in the emit let's just emit a const

2950
04:44:32,160 --> 04:44:35,120
off state

2951
04:44:35,120 --> 04:44:38,232
uh logged out

2952
04:44:38,232 --> 04:44:40,720
all right so

2953
04:44:40,720 --> 04:44:43,912
when you initialize the application from the beginning when the application

2954
04:44:43,912 --> 04:44:48,800
actually runs we're just gonna say by default you're logged out all right

2955
04:44:48,800 --> 04:44:52,640
so let's go ahead and do that if the user is null of course

2956
04:44:52,640 --> 04:44:56,400
so in the exception we don't have any exceptions and we're not loading

2957
04:44:56,400 --> 04:45:00,000
anything as such so that's like the default state so that's it comma in

2958
04:45:00,000 --> 04:45:05,440
there and a comma here just to get the formatting working

2959
04:45:05,440 --> 04:45:09,440
all right so that seems to be fine but

2960
04:45:09,440 --> 04:45:13,600
we also have the initialize in here sounds good logged out

2961
04:45:13,600 --> 04:45:21,512
it's email verified and that so yeah that looks that looks fine to me

2962
04:45:21,512 --> 04:45:26,000
okay now let's have a look at logging in as you can see we have to take care of

2963
04:45:26,000 --> 04:45:30,960
our login and logic a little bit and make sure that we're loading so when you

2964
04:45:30,960 --> 04:45:34,800
say i want to log in we're going to say okay you want to log in that means

2965
04:45:34,800 --> 04:45:39,360
you're logged out but you're logged out and there's a loading screen okay that's

2966
04:45:39,360 --> 04:45:44,160
why we created that loading dialog which we're going to put into you so

2967
04:45:44,160 --> 04:45:49,192
so upon the user asking to log in let's just say okay we're going to emit our

2968
04:45:49,192 --> 04:45:52,400
const off state

2969
04:45:52,400 --> 04:45:55,760
log out and there is no exception and the

2970
04:45:55,760 --> 04:46:01,600
loading flag is actually true so like that and right there and just

2971
04:46:01,600 --> 04:46:04,960
like okay so

2972
04:46:04,960 --> 04:46:09,760
that's the loading part and let's have a look at how we're doing

2973
04:46:09,760 --> 04:46:15,440
things in here so we have our login um

2974
04:46:15,440 --> 04:46:19,120
and we also as you can see in here so that that was that part we've taken care

2975
04:46:19,120 --> 04:46:23,192
of and now what we have to do is to disable disable the loading screen if

2976
04:46:23,192 --> 04:46:28,400
email is not verified so um at the moment we have this user in

2977
04:46:28,400 --> 04:46:32,800
here you can see final user okay and then we're just saying

2978
04:46:32,800 --> 04:46:36,960
state now is all of a sudden logged in but that is not complete

2979
04:46:36,960 --> 04:46:39,912
because we're not checking whether the users

2980
04:46:39,912 --> 04:46:44,000
verified their email address or not so let's go ahead

2981
04:46:44,000 --> 04:46:48,080
and say as the caption indicates if email not verified then disable the

2982
04:46:48,080 --> 04:46:52,800
loading screen by sending a new logged out okay before sending the needs

2983
04:46:52,800 --> 04:46:59,192
verification so let's take care of that so we say if um user is email verified

2984
04:46:59,192 --> 04:47:02,480
not and we emit

2985
04:47:02,480 --> 04:47:08,960
a constant of auth state logged out like that

2986
04:47:08,960 --> 04:47:14,000
and we say well no exception and we're not loading all right

2987
04:47:14,000 --> 04:47:20,720
so that disables essentially the loading screen okay by saying it's loading false

2988
04:47:20,720 --> 04:47:26,320
remember here we sent is loading true now we're sending is loading false

2989
04:47:26,320 --> 04:47:30,000
and then right after when the email is not verified we

2990
04:47:30,000 --> 04:47:34,640
actually say then emit a const of off

2991
04:47:34,640 --> 04:47:39,360
state needs verification just like that all right

2992
04:47:39,360 --> 04:47:43,280
otherwise if the user's email is verified then we're gonna say we're

2993
04:47:43,280 --> 04:47:47,600
gonna first disable let me bring up the correct caption so

2994
04:47:47,600 --> 04:47:51,912
we have to do the exact same thing in here we're gonna disable basically the

2995
04:47:51,912 --> 04:47:55,040
loading screen like that

2996
04:47:55,040 --> 04:47:59,280
and then we're going to send this login

2997
04:47:59,280 --> 04:48:05,360
states right here okay

2998
04:48:05,360 --> 04:48:10,800
all right and also in our exception handling we we don't use this uh um yet

2999
04:48:10,800 --> 04:48:15,120
we're gonna use off state logged out but we're gonna clean this up so inside emit

3000
04:48:15,120 --> 04:48:21,040
we're gonna say auth state logged out and then there is an exception and we


