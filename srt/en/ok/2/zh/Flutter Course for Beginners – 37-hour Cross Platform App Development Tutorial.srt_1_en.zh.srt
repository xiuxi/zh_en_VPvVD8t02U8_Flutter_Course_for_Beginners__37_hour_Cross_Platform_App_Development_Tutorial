1
00:00:00,080 --> 00:00:03,840
这个庞大的颤振课程将带你从一个绝对的初学者到

2
00:00:03,840 --> 00:00:08,480
能够在 google play store 和 app store bandit 上发布应用程序是

3
00:00:08,480 --> 00:00:13,120
非常有经验的软件开发人员和优秀的老师大家好，

4
00:00:13,120 --> 00:00:17,039
欢迎来到这个免费的浮动课程我的名字是破坏者，我是谷歌

5
00:00:17,039 --> 00:00:21,680
颤振和飞镖的开发专家，让我们跳起来跳到谁是

6
00:00:21,680 --> 00:00:26,400
这门课程是我为绝对初学者设计的这门课程，所以无论谁

7
00:00:26,400 --> 00:00:31,039
在我实际设计之前甚至没有写过一行代码

8
00:00:31,039 --> 00:00:34,000
这门课程我为两个特定的角色设计了一个是图形

9
00:00:34,000 --> 00:00:36,880
主要与 figma 合作的设计师

10
00:00:36,880 --> 00:00:40,320
实际上，使用 Photoshop 的图形工具并不重要

11
00:00:40,320 --> 00:00:44,160
或 figma 或任何东西或草图，另一个角色是一个项目

12
00:00:44,160 --> 00:00:49,200
主要与jira合作的经理，所以我假设你

13
00:00:49,200 --> 00:00:52,879
以前几乎对软件开发一无所知

14
00:00:52,879 --> 00:00:56,640
即使您是软件开发人员，您也可能会跳过那些

15
00:00:56,640 --> 00:01:00,879
你可能知道，但如果你之前没有做过颤振开发

16
00:01:00,879 --> 00:01:03,920
强烈建议您实际上按时间顺序阅读这些章节

17
00:01:03,920 --> 00:01:07,360
这就是我设计这门课程的方式

18
00:01:07,360 --> 00:01:11,920
所以嗯，正如我提到的，当我设计这门课程时我想要我想要

19
00:01:11,920 --> 00:01:15,920
每个人都只能一次一个地跟着章节

20
00:01:15,920 --> 00:01:20,479
按时间顺序，我强烈建议你不要跳过章节

21
00:01:20,479 --> 00:01:24,240
因为每一章都提供了很多信息，我会

22
00:01:24,240 --> 00:01:27,680
回顾我在前几章中提供的信息

23
00:01:27,680 --> 00:01:32,479
章，所以我认为如果你能按照我的方式学习，那就太好了

24
00:01:32,479 --> 00:01:36,479
将其设计为按时间顺序消费

25
00:01:36,479 --> 00:01:41,200
您在本课程中学到的不仅是基础知识，而且您还将从

26
00:01:41,200 --> 00:01:45,040
一个完整的初学者能够释放你的

27
00:01:45,040 --> 00:01:49,759
苹果应用商店和谷歌Play商店中的应用程序，我们将

28
00:01:49,759 --> 00:01:53,200
混合使用不同的工具和软件

29
00:01:53,200 --> 00:01:56,159
我们将使用 Visual Studio 代码，我们将使用 Firebase

30
00:01:56,159 --> 00:02:01,040
我将教你所有关于我们甚至使用 figma 作为图形的后端

31
00:02:01,040 --> 00:02:04,880
设计师来创建我们的图标和屏幕截图，甚至

32
00:02:04,880 --> 00:02:09,759
我们的加载屏幕，还有很多事情要做

33
00:02:09,759 --> 00:02:12,879
学习，我会带你完成这些步骤，我不做任何

34
00:02:12,879 --> 00:02:17,120
关于你以前可能知道的假设，所以我会解释一切

35
00:02:17,120 --> 00:02:21,360
这样你就可以从绝​​对的初学者到能够

36
00:02:21,360 --> 00:02:25,280
实际上发布你的两个应用程序，它们在苹果的代码库中是相同的

37
00:02:25,280 --> 00:02:29,520
应用商店和谷歌的游戏商店呃如果你参加这个

38
00:02:29,520 --> 00:02:33,040
当然，请在社交媒体上关注我，我真的很感激

39
00:02:33,040 --> 00:02:38,560
我是 twitter 上的 evan.mp，你也可以在linkedin 上找到我的全名

40
00:02:38,560 --> 00:02:42,879
非常感谢这门课程当然是免费的

41
00:02:42,879 --> 00:02:46,080
但对于那些想要并且有能力的人

42
00:02:46,080 --> 00:02:51,280
支持我，嗯，然后你可以通过给我买杯咖啡来做到这一点

43
00:02:51,280 --> 00:02:57,040
给我买一辆coffee.com面包车，所以事不宜迟，让我们直接跳进去

44
00:02:57,040 --> 00:03:00,640
大家好，欢迎

45
00:03:00,640 --> 00:03:04,560
到我们flutter课程的第一章

46
00:03:04,560 --> 00:03:08,720
嗯，有很多不同的话题

47
00:03:08,720 --> 00:03:12,159
我可以选择他们的第一章

48
00:03:12,159 --> 00:03:18,159
它们都非常重要，但是在阅读完材料之后

49
00:03:18,159 --> 00:03:22,239
我一直在为你准备这门课程 我意识到其中一个

50
00:03:22,239 --> 00:03:28,319
我们必须经历的绝对基本点是开发者帐户

51
00:03:28,319 --> 00:03:32,560
嗯，苹果和谷歌现在如果你不是

52
00:03:32,560 --> 00:03:35,840
熟悉那里的开发者账号术语

53
00:03:35,840 --> 00:03:37,920
基本上都是什么开发者账号

54
00:03:37,920 --> 00:03:43,599
允许您做的是在 um apple 的应用商店上发布您的应用程序和

55
00:03:43,599 --> 00:03:47,280
谷歌的游戏商店

56
00:03:47,280 --> 00:03:52,640
正如我在介绍中提到的，你可以选择跟随这个

57
00:03:52,640 --> 00:03:56,080
当然没有实际释放

58
00:03:56,080 --> 00:04:00,879
应用到应用商店和 Play 商店

59
00:04:00,879 --> 00:04:05,200
但即使你决定不发布

60
00:04:05,200 --> 00:04:08,799
您将在上述商店申请

61
00:04:08,799 --> 00:04:12,400
仍然是为了获得最佳体验

62
00:04:12,400 --> 00:04:19,280
ios 和 android 的开发你肯定需要一个开发者帐户

63
00:04:19,280 --> 00:04:24,400
而这背后的原因是

64
00:04:24,400 --> 00:04:29,840
我的意思是试图解释其背后的实际原因是相当深刻的

65
00:04:29,840 --> 00:04:32,560
但从我的角度来看，这是最

66
00:04:32,560 --> 00:04:35,840
您可能想要拥有开发者帐户的重要原因是创建

67
00:04:35,840 --> 00:04:41,120
所谓的应用程序ID

68
00:04:41,120 --> 00:04:45,520
所以ios上的每个应用程序和android上的每个应用程序都有

69
00:04:45,520 --> 00:04:51,520
一个标识符，通常称为反向域标识符，并且

70
00:04:51,520 --> 00:04:55,759
有点像嗯我还是觉得很奇怪

71
00:04:55,759 --> 00:04:59,199
它是这样的

72
00:04:59,199 --> 00:05:03,440
有些人不知何故决定每个应用程序都需要有一个

73
00:05:03,440 --> 00:05:08,160
标识符，每个标识符有点像与域名相关联

74
00:05:08,160 --> 00:05:11,600
并且域名有点像一个网站，例如，如果你有

75
00:05:11,600 --> 00:05:16,160
一个 yourname.com 呃作为你的网站

76
00:05:16,160 --> 00:05:20,000
然后你会说好吧，我要创造

77
00:05:20,000 --> 00:05:25,600
Flutter 中适用于 ios 和 android 的应用程序，我将其命名为 fubar

78
00:05:25,600 --> 00:05:28,000
然后不知何故决定你的

79
00:05:28,000 --> 00:05:33,039
在这种情况下，应用程序标识符将是

80
00:05:33,039 --> 00:05:36,960
如果您反转它，那么它实际上就是您的域

81
00:05:36,960 --> 00:05:41,199
反过来会变成点

82
00:05:41,199 --> 00:05:46,320
你的名字点你的应用程序的名字

83
00:05:46,320 --> 00:05:50,720
我真的不知道我的意思是如果有人

84
00:05:50,720 --> 00:05:53,840
如果有人知道它背后的原因，我会很高兴听到这个消息，我很高兴

85
00:05:53,840 --> 00:05:57,199
确保有资源可以解释为什么会这样，但它

86
00:05:57,199 --> 00:06:00,240
感觉就像它变成了

87
00:06:00,240 --> 00:06:04,560
规范，我们只需要顺其自然

88
00:06:04,560 --> 00:06:08,000
所以我解释了这个应用程序的原因

89
00:06:08,000 --> 00:06:12,080
标识符是

90
00:06:12,080 --> 00:06:17,919
当您稍后设置后端时 当我们稍后一起设置后端时

91
00:06:17,919 --> 00:06:21,759
因为我们在 Flutter 中编写的客户端将与我们的

92
00:06:21,759 --> 00:06:26,560
后端并存储笔记检索笔记创建用户

93
00:06:26,560 --> 00:06:33,120
呃用用户等登录后端

94
00:06:33,120 --> 00:06:38,720
安装程序还将要求您拥有您的应用标识符

95
00:06:38,720 --> 00:06:41,280
和

96
00:06:41,280 --> 00:06:46,639
即使您不一定需要拥有开发者帐户才能获得

97
00:06:46,639 --> 00:06:50,720
应用标识符，因为应用标识符只是您决定的东西

98
00:06:50,720 --> 00:06:54,800
好的，这是我的应用标识符，我认为我的网站被称为这个

99
00:06:54,800 --> 00:06:57,919
等等等等，即使你实际上并不需要一个网站，这就是事情

100
00:06:57,919 --> 00:07:01,599
但应用标识符通常与网站相关联，所以不用担心

101
00:07:01,599 --> 00:07:04,080
关于它你不必有一个网站

102
00:07:04,080 --> 00:07:08,479
为了遵循我将在此处命名的这些步骤

103
00:07:08,479 --> 00:07:12,720
但是创建您的开发者帐户仍然是一个很好的做法，以便

104
00:07:12,720 --> 00:07:18,080
正式注册您的应用标识符

105
00:07:18,080 --> 00:07:22,319
以及您需要的另一个原因

106
00:07:22,319 --> 00:07:27,199
苹果和谷歌的开发者帐户是您将

107
00:07:27,199 --> 00:07:30,880
为苹果嗯

108
00:07:30,880 --> 00:07:35,599
如果您希望能够部署您的应用程序

109
00:07:35,599 --> 00:07:41,039
在电话上而不是使用模拟器

110
00:07:41,039 --> 00:07:44,960
那么你需要注册一个开发者账号和

111
00:07:44,960 --> 00:07:49,520
使用苹果以证书和密钥形式提供给您的一些资源

112
00:07:49,520 --> 00:07:53,120
和配置文件，以便将您的应用程序部署到

113
00:07:53,120 --> 00:07:58,400
例如电话或 ipad

114
00:07:58,400 --> 00:08:01,840
和 android 世界有点不同，因为你不必做

115
00:08:01,840 --> 00:08:06,560
相同的过程，但为了然后提交您的申请

116
00:08:06,560 --> 00:08:10,160
谷歌审查

117
00:08:10,160 --> 00:08:15,360
稍后，以便所有拥有安卓手机的人都可以使用它

118
00:08:15,360 --> 00:08:19,280
或平板电脑，您仍然需要一个开发者帐户，所以

119
00:08:19,280 --> 00:08:22,560
不言而喻，这是非常重要的一步

120
00:08:22,560 --> 00:08:26,400
嗯，即使你决定

121
00:08:26,400 --> 00:08:29,680
不

122
00:08:29,680 --> 00:08:33,599
稍后将您的应用程序部署到应用商店和 Play 商店

123
00:08:33,599 --> 00:08:38,880
这仍然是一个非常基本的步骤，所以我建议您实际完成

124
00:08:38,880 --> 00:08:42,240
我将在第一章中为您提供的这些步骤

125
00:08:42,240 --> 00:08:47,760
这就是为什么我决定把它作为第一章

126
00:08:47,760 --> 00:08:50,160
嗯，对不起，我只需要编辑我的笔记

127
00:08:50,160 --> 00:08:53,279
如果你还没有看过介绍，就一点点

128
00:08:53,279 --> 00:08:56,640
到这门课程，你只是跳到这里，我建议你去

129
00:08:56,640 --> 00:09:00,720
介绍和观看我知道它大约是 34 分钟，相当长

130
00:09:00,720 --> 00:09:05,600
介绍但是有这么多重要的点我觉得每个人

131
00:09:05,600 --> 00:09:09,920
在开始课程之前需要知道，所以请注意那些如果

132
00:09:09,920 --> 00:09:13,839
你看到我转过头就知道原因了

133
00:09:13,839 --> 00:09:18,160
我解释了很多类似于这个基础的东西

134
00:09:18,160 --> 00:09:21,839
课程和推理

135
00:09:21,839 --> 00:09:25,760
所有那些我认为非常重要的决定，我仍然建议

136
00:09:25,760 --> 00:09:30,959
每个人在真正开始课程之前都看了介绍，所以

137
00:09:30,959 --> 00:09:34,959
所以我们现在谈到了

138
00:09:34,959 --> 00:09:39,680
嗯，如果你去

139
00:09:39,680 --> 00:09:44,160
为什么我们需要一个开发者帐户我相信我已经介绍过了

140
00:09:44,160 --> 00:09:49,440
因为开发者帐户是实用程序是您的帐户

141
00:09:49,440 --> 00:09:54,959
注册苹果和谷歌，为您提供额外资源

142
00:09:54,959 --> 00:09:58,800
开发人员以便能够部署您的应用程序并部署您的

143
00:09:58,800 --> 00:10:04,560
应用到相应的应用商店

144
00:10:04,560 --> 00:10:09,360
现在如果我们谈论

145
00:10:09,360 --> 00:10:13,440
开发者帐户有两种主要类型的开发者

146
00:10:13,440 --> 00:10:20,240
账户一个是个人账户，一个是公司账户

147
00:10:20,240 --> 00:10:23,360
嗯和

148
00:10:23,360 --> 00:10:27,279
对我来说，这两个不同帐户之间的最大区别是

149
00:10:27,279 --> 00:10:31,360
责任嗯，我的意思是责任

150
00:10:31,360 --> 00:10:36,480
如果您注册个人帐户

151
00:10:36,480 --> 00:10:43,519
那么您作为个人对该应用程序和用户下载负责

152
00:10:43,519 --> 00:10:47,040
您的应用程序并与它进行交互，如果他们有任何问题，例如

153
00:10:47,040 --> 00:10:51,680
有任何司法问题

154
00:10:51,680 --> 00:10:55,120
就像如果有人出于某种原因相信

155
00:10:55,120 --> 00:10:59,279
您以错误的方式存储他们的数据，或者您正在存储他们的数据

156
00:10:59,279 --> 00:11:03,120
个人信息，而不会暴露并告诉用户

157
00:11:03,120 --> 00:11:07,920
然后他们可以亲自追究您的责任

158
00:11:07,920 --> 00:11:12,839
例如违反信息或 gdpr

159
00:11:12,839 --> 00:11:18,800
侵权或任何事情，所以只要知道你可以注册自己

160
00:11:18,800 --> 00:11:21,839
作为双方的个人

161
00:11:21,839 --> 00:11:25,600
应用商店 苹果的应用商店和谷歌的Play商店

162
00:11:25,600 --> 00:11:30,079
但是您还需要注意，如果您希望这样做，那么您

163
00:11:30,079 --> 00:11:32,880
个人对任何问题负责

164
00:11:32,880 --> 00:11:34,800
那可能是[音乐]

165
00:11:34,800 --> 00:11:38,399
将来发生，所以这是个人帐户

166
00:11:38,399 --> 00:11:42,720
或个人帐户，然后作为公司帐户

167
00:11:42,720 --> 00:11:44,959
呃，你有点喜欢

168
00:11:44,959 --> 00:11:48,000
根据您创建的公司类型

169
00:11:48,000 --> 00:11:52,720
嗯，你可能会或可能不会承担个人责任

170
00:11:52,720 --> 00:11:55,120
对于嗯

171
00:11:55,120 --> 00:11:59,600
可能对您的用户造成的任何损害，如果他们现在向您提出

172
00:11:59,600 --> 00:12:02,639
我知道这听起来很严重

173
00:12:02,639 --> 00:12:08,480
实际上，我们试图做的并不是什么大不了的事，但我们仍然

174
00:12:08,480 --> 00:12:14,240
试图存储我的意思是本课程的目标是

175
00:12:14,240 --> 00:12:17,680
呃通过

176
00:12:17,680 --> 00:12:22,839
一个应用程序并创建一个可以存储用户笔记的应用程序笔记可以

177
00:12:22,839 --> 00:12:28,240
安静的个人，然后您正在存储这些笔记

178
00:12:28,240 --> 00:12:31,279
在您可以完全访问的反手

179
00:12:31,279 --> 00:12:35,040
所以你有点像存储用户创建的数据

180
00:12:35,040 --> 00:12:38,880
因此，正确处理这些数据非常重要

181
00:12:38,880 --> 00:12:43,040
确保除了那些被授权的人之外没有人

182
00:12:43,040 --> 00:12:47,200
可以访问该数据，所以嗯

183
00:12:47,200 --> 00:12:52,079
从责任的角度来看，它实际上是

184
00:12:52,079 --> 00:12:54,880
有点不同 什么样的

185
00:12:54,880 --> 00:12:58,160
您想创建的公司帐户，如果这是您现在要创建的帐户

186
00:12:58,160 --> 00:13:01,040
因为例如在我住的瑞典

187
00:13:01,040 --> 00:13:06,000
您可以在其中拥有个人公司帐户或

188
00:13:06,000 --> 00:13:09,519
对不起，个人公司，所以你可以注册个人公司，这意味着

189
00:13:09,519 --> 00:13:13,600
您对该公司负有个人责任

190
00:13:13,600 --> 00:13:17,600
嗯，你也可以创建一个公司

191
00:13:17,600 --> 00:13:20,399
呃它就像呃

192
00:13:20,399 --> 00:13:24,399
就像一把伞基本上放在上面然后有人在

193
00:13:24,399 --> 00:13:29,519
公司董事和胡说八道，所以你不承担个人责任

194
00:13:29,519 --> 00:13:32,160
呃，这和你的结构一样

195
00:13:32,160 --> 00:13:36,320
可以在许多其他国家找到我相信你问过德国

196
00:13:36,320 --> 00:13:38,880
瑞典 英格兰

197
00:13:38,880 --> 00:13:42,000
和许多其他国家，你可以设立公司

198
00:13:42,000 --> 00:13:46,160
无论是独资企业还是所谓的

199
00:13:46,160 --> 00:13:49,120
英语不是我的第一语言，但它是这样的，或者你可以

200
00:13:49,120 --> 00:13:52,240
像有限责任公司一样创建，您承担有限责任，而您不是

201
00:13:52,240 --> 00:13:56,800
个人责任，所以这些是不同类型的

202
00:13:56,800 --> 00:14:01,519
您可以设置的开发者帐户

203
00:14:01,519 --> 00:14:06,480
我们可以我的意思是这一点我想我们现在都明白你可以创建一个

204
00:14:06,480 --> 00:14:11,120
个人或公司账户

205
00:14:11,120 --> 00:14:14,480
现在我想我的意思是我个人注册了

206
00:14:14,480 --> 00:14:18,160
已经有账号

207
00:14:18,160 --> 00:14:24,320
作为 ios 开发人员和 android 应用程序开发人员，所以

208
00:14:24,320 --> 00:14:29,839
因为我注册了一个公司帐户，所以我无法设置确切的

209
00:14:29,839 --> 00:14:34,240
又是同一家公司，但至少我可以给你看一些

210
00:14:34,240 --> 00:14:39,040
创建这些所涉及的步骤

211
00:14:39,040 --> 00:14:44,880
所以我们能做的就是嗯

212
00:14:44,880 --> 00:14:50,800
现在您现在看不到屏幕，但我会在此处显示

213
00:14:50,800 --> 00:14:57,279
所以你现在也可以看到我要把我的工作室带到这里

214
00:14:57,279 --> 00:15:01,600
我要把这个屏幕放大一点，这样你就可以看到我的

215
00:15:01,600 --> 00:15:05,040
屏幕更好所以

216
00:15:05,040 --> 00:15:10,639
让我在上面把它弄小一点，这样你就可以看到了

217
00:15:10,639 --> 00:15:17,600
内容稍微好一点，所以你可以在这里看到有两个

218
00:15:17,600 --> 00:15:21,839
您可以选择以个人身份注册或以个人身份注册

219
00:15:21,839 --> 00:15:26,800
一个组织，实际上强烈推荐

220
00:15:26,800 --> 00:15:29,440
嗯

221
00:15:29,440 --> 00:15:35,040
所以你需要确保你打开了双因素身份验证，并且

222
00:15:35,040 --> 00:15:39,199
所以这不是问题所有这基本上意味着作为一个个体

223
00:15:39,199 --> 00:15:42,959
意味着只有您您需要一个帐户，您需要设置一个

224
00:15:42,959 --> 00:15:45,600
帐户

225
00:15:45,600 --> 00:15:49,279
但是，如果您想建立一个组织，例如您有一个有限的

226
00:15:49,279 --> 00:15:53,120
公司，并且您想创建一个与之关联的苹果开发者帐户

227
00:15:53,120 --> 00:15:56,320
组织有点不同，因为

228
00:15:56,320 --> 00:15:59,920
嗯，你需要设置一个叫做

229
00:15:59,920 --> 00:16:04,639
addons 或 duns 或者我不知道你想如何发音 uns

230
00:16:04,639 --> 00:16:10,079
这有点像至少对我来说是新事物，但它

231
00:16:10,079 --> 00:16:15,920
是您公司的标识符，您已经被分配到

232
00:16:15,920 --> 00:16:18,959
嗯

233
00:16:18,959 --> 00:16:24,959
我想有一家公司叫 dmb um

234
00:16:24,959 --> 00:16:31,360
所以如果我们去让我看看我能不能把笔记带来

235
00:16:31,360 --> 00:16:37,519
如果你去这里了解更多，让我们看看了解更多

236
00:16:37,519 --> 00:16:41,120
这里 dmb

237
00:16:41,120 --> 00:16:45,519
由 done 和 bradstreet 调用

238
00:16:45,519 --> 00:16:49,120
所以我们有能力

239
00:16:49,120 --> 00:16:53,279
注册一个 duns 号码 um

240
00:16:53,279 --> 00:16:58,160
对我来说，我是幸运的人之一，已经被分配了一个 duns 号码

241
00:16:58,160 --> 00:17:01,040
为我公司嗯

242
00:17:01,040 --> 00:17:05,679
由 dmb 因为你要么有 um 让我们看看

243
00:17:05,679 --> 00:17:09,600
如果他们在这里写，你会看到它说 dmv 可能已经

244
00:17:09,600 --> 00:17:13,039
为您的组织分配了一个免费的 uh duan 号码

245
00:17:13,039 --> 00:17:16,480
在注册之前查看您的组织以查看您是否有催款

246
00:17:16,480 --> 00:17:21,280
号码，所以你可以点击链接，我们可以去这里

247
00:17:21,280 --> 00:17:24,880
然后你可以为我选择你的地区

248
00:17:24,880 --> 00:17:28,640
那将是瑞典，然后我会写下我的公司名称

249
00:17:28,640 --> 00:17:32,480
一些地址信息联系信息等

250
00:17:32,480 --> 00:17:36,640
然后您可以检查是否分配了一个 duns 编号

251
00:17:36,640 --> 00:17:40,720
到你的公司，所以我建议你去这个

252
00:17:40,720 --> 00:17:46,000
网站还行

253
00:17:46,000 --> 00:17:50,160
所以如果你已经有一个但如果你没有

254
00:17:50,160 --> 00:17:56,880
一个然后您将必须创建并从 dnb 请求一个 duans 号码

255
00:17:56,880 --> 00:18:01,520
我现在会给你看 dmb 的网站和联合国的号码，但是

256
00:18:01,520 --> 00:18:06,080
我的浏览器已设置，因此我的语言环境已提供给浏览器

257
00:18:06,080 --> 00:18:09,200
是瑞典语，然后如果我去 dmv 网站，你会看到里面的一切

258
00:18:09,200 --> 00:18:12,559
瑞典语，这没有任何意义

259
00:18:12,559 --> 00:18:19,919
阅读瑞典文的信息，但我相信你可以去 dmb 的网站 um

260
00:18:19,919 --> 00:18:23,440
所以如果我搜索 dmb

261
00:18:23,440 --> 00:18:28,080
duns or dunes or here 所以这是瑞典语

262
00:18:28,080 --> 00:18:34,000
dmb的本地化网站让我们看看它是否可以更改语言

263
00:18:34,000 --> 00:18:37,520
嗯

264
00:18:37,520 --> 00:18:44,720
实际上我可以在这里看到他们非常他们实际上在瑞典

265
00:18:44,720 --> 00:18:48,240
我想知道我们是否可以在这里改变国家

266
00:18:48,240 --> 00:18:52,880
我们就说

267
00:18:52,880 --> 00:18:56,320
国际的

268
00:18:56,320 --> 00:19:00,080
所以如果我们去这里

269
00:19:00,080 --> 00:19:03,919
让我们看看他能不能嗯

270
00:19:03,919 --> 00:19:08,240
如果有任何方法可以实际请求一个 duns 号码

271
00:19:08,240 --> 00:19:12,480
就像他先生说 b-u-n-s

272
00:19:12,480 --> 00:19:16,320
嗯

273
00:19:16,320 --> 00:19:23,600
老实说，我看不到任何与此相关的东西，所以如果你回去

274
00:19:23,600 --> 00:19:27,280
在这里我可以看到我可以请求 duns 和

275
00:19:27,280 --> 00:19:33,039
这里的语言环境是 svse，这里的语言环境是 engb

276
00:19:33,039 --> 00:19:38,080
所以如果我们回到我们之前的这个网址会发生什么

277
00:19:38,080 --> 00:19:42,880
然后我只需更改语言环境就可以了

278
00:19:42,880 --> 00:19:47,200
不幸的是，但我的意思是这里的联合国号码

279
00:19:47,200 --> 00:19:52,080
嗯，得到一个 duns 号码，好的，这很好

280
00:19:52,080 --> 00:19:56,640
然后你会听到说我是苹果开发者

281
00:19:56,640 --> 00:20:01,360
按继续哦，它会把你送回这里

282
00:20:01,360 --> 00:20:06,240
嗯，那真的很糟糕

283
00:20:06,240 --> 00:20:10,240
所以它说查找您的组织

284
00:20:10,240 --> 00:20:14,320
在苹果的网站上

285
00:20:14,320 --> 00:20:18,320
当你试图获得一个 uns 号码时

286
00:20:18,320 --> 00:20:25,440
它告诉你去苹果的网站嗯

287
00:20:25,440 --> 00:20:30,480
如果我们这么说，那么可以合法的商业名称等等等等

288
00:20:30,480 --> 00:20:35,120
所以你将需要经历这个似乎并不需要的过程

289
00:20:35,120 --> 00:20:39,039
很容易获得您要求的催款号码

290
00:20:39,039 --> 00:20:44,679
联合国号码，所以你可能只想去 dmb.coms

291
00:20:44,679 --> 00:20:49,520
number.html 我无法完整解释

292
00:20:49,520 --> 00:20:53,039
对你诚实的过程，因为首先这将是浪费时间

293
00:20:53,039 --> 00:20:57,039
对我们俩来说，呃，因为这些太多了

294
00:20:57,039 --> 00:21:02,240
零件和我无法控制的第三方公司，所以如果我什至尝试

295
00:21:02,240 --> 00:21:06,080
解释他们的流程，明天可能会改变，所以有

296
00:21:06,080 --> 00:21:11,039
这不是我们时间的一项好的投资，但其他人都明白了

297
00:21:11,039 --> 00:21:14,799
我很确定，如果你直接说请求联合国号码，你就可以

298
00:21:14,799 --> 00:21:17,679
只需按照流程，然后

299
00:21:17,679 --> 00:21:23,120
获取您的联合国号码，但首先要通过

300
00:21:23,120 --> 00:21:26,799
查找您的组织

301
00:21:26,799 --> 00:21:31,600
您可能已经被分配了一个免费的催款号码，所以

302
00:21:31,600 --> 00:21:36,400
请先这样做，但是如果您必须要求提供联合国编号，我相信

303
00:21:36,400 --> 00:21:41,600
有一点点成本，如果我 70 岁，那大约是 70 美元

304
00:21:41,600 --> 00:21:44,720
录制此视频时为 80 美元

305
00:21:44,720 --> 00:21:47,600
所以算上将近一百

306
00:21:47,600 --> 00:21:51,679
美元，希望不会更多

307
00:21:51,679 --> 00:21:56,720
呃希望实际上关于呃周围少了很多

308
00:21:56,720 --> 00:22:01,120
至少70美元这有意义吗我说了这么多

309
00:22:01,120 --> 00:22:05,440
数字至少七十美元，嗯

310
00:22:05,440 --> 00:22:09,280
至少尝试获得您的催款号码，这就是苹果所说的

311
00:22:09,280 --> 00:22:13,360
如果您想注册，现在当然需要

312
00:22:13,360 --> 00:22:18,559
作为一家公司，我不能强调这一点，您将需要一个网站

313
00:22:18,559 --> 00:22:24,080
我记得当我在苹果注册一个开发者帐户时

314
00:22:24,080 --> 00:22:28,640
他们拒绝了我的要求，说得很好

315
00:22:28,640 --> 00:22:33,600
你的网站没有任何内容，他们是对的，因为我只是

316
00:22:33,600 --> 00:22:38,080
创建了一个空网站，例如我注册的域，我知道我实际上并没有创建

317
00:22:38,080 --> 00:22:44,720
空的网站我注册了一个域并且没有网站所以当你

318
00:22:44,720 --> 00:22:50,880
输入了我的网站名称，它不会向您显示任何内容

319
00:22:50,880 --> 00:22:54,159
嗯，他们回来说不，你的申请被拒绝了，因为你

320
00:22:54,159 --> 00:22:57,360
没有网站 你是什么类型的公司

321
00:22:57,360 --> 00:23:02,240
所以我不得不真正成为一个托管服务，我有一些内容

322
00:23:02,240 --> 00:23:07,520
那里有类似的支持，所以如果您注册为

323
00:23:07,520 --> 00:23:12,880
一个网站对不起作为一个公司作为一个组织你需要一个托管

324
00:23:12,880 --> 00:23:16,240
服务，你需要一个域名提供商，呃

325
00:23:16,240 --> 00:23:20,080
你需要确保你有一个网站，因为它们不一样

326
00:23:20,080 --> 00:23:24,159
如果你有一个主机并且你有一个域提供者它仍然

327
00:23:24,159 --> 00:23:30,159
并不意味着您的网页上有内容，但我意识到的是

328
00:23:30,159 --> 00:23:34,480
如果您注册您的域并拥有托管服务

329
00:23:34,480 --> 00:23:38,320
服务确保你有一个网站只是有一些

330
00:23:38,320 --> 00:23:42,240
里面的内容打个招呼我们是这个生意那个生意

331
00:23:42,240 --> 00:23:45,520
嗯，如果你有的话，我们会处理这个和这个

332
00:23:45,520 --> 00:23:48,880
如有任何问题，请联系此电子邮件，这是我们的电话号码，这是他们的

333
00:23:48,880 --> 00:23:52,640
地址等，所以你需要确保如果你有

334
00:23:52,640 --> 00:23:58,080
一个组织 它实际上是一个组织 它不只是像 hi my

335
00:23:58,080 --> 00:24:03,600
名字是 fubar 我坐在家里 如果您有任何问题，请联系我

336
00:24:03,600 --> 00:24:05,840
就这样

337
00:24:05,840 --> 00:24:09,360
当然，在您做出决定后，您就开始注册

338
00:24:09,360 --> 00:24:13,679
现在处理

339
00:24:13,679 --> 00:24:16,880
了解更多 继续在网上注册 你可以做

340
00:24:16,880 --> 00:24:20,400
然后你来这里，你基本上需要提供你的

341
00:24:20,400 --> 00:24:23,520
信息并继续我们现在的过程

342
00:24:23,520 --> 00:24:27,120
不会经历这个，但我必须提到的重要事情

343
00:24:27,120 --> 00:24:29,840
这就是你

344
00:24:29,840 --> 00:24:36,000
不幸的是，以苹果开发者的身份完成注册过程

345
00:24:36,000 --> 00:24:40,400
是费用呃上次大概是几个月

346
00:24:40,400 --> 00:24:44,400
以前当我注册或我必须更新我的注册时，你必须更新你的

347
00:24:44,400 --> 00:24:48,880
注册为

348
00:24:48,880 --> 00:24:52,480
苹果的开发者账号每年都要更新

349
00:24:52,480 --> 00:24:57,360
正如我在这里提到的

350
00:24:57,360 --> 00:25:00,400
不幸的是，过程不是免费的

351
00:25:00,400 --> 00:25:03,360
或上次我注册或更新我的

352
00:25:03,360 --> 00:25:08,080
注册它的成本是 99，我相信它已经 99 很长时间了，所以如果

353
00:25:08,080 --> 00:25:10,960
你在瑞典大约要一千

354
00:25:10,960 --> 00:25:15,200
如果你在英国，皇冠可能要花费大约 80 英镑或其他东西

355
00:25:15,200 --> 00:25:21,520
嗯，在美国，是的，只要算上将近一百美元，所以

356
00:25:21,520 --> 00:25:24,320
我曾经能够提供这个，就像你必须有某种信用一样

357
00:25:24,320 --> 00:25:27,039
卡或借记卡能够支付它所以

358
00:25:27,039 --> 00:25:31,679
嗯，在你把你的账户注册为一个组织之后

359
00:25:31,679 --> 00:25:36,080
您将可以直接访问或立即访问您的开发人员

360
00:25:36,080 --> 00:25:42,400
帐户，您可以开始开发应用程序等等等

361
00:25:42,400 --> 00:25:47,840
如果您正在学习这门课程并且想要部署您的

362
00:25:47,840 --> 00:25:52,000
应用到应用商店和游戏商店请先这样做

363
00:25:52,000 --> 00:25:57,840
将您的开发者帐户作为组织或作为

364
00:25:57,840 --> 00:26:02,000
作为个人，请不要妨碍该过程，因为

365
00:26:02,000 --> 00:26:05,919
开发人员帐户，特别是如果您是我在这里提到的组织

366
00:26:05,919 --> 00:26:12,080
不是一个超级快速的过程，我的意思是当你获得帐户时，它很简单

367
00:26:12,080 --> 00:26:18,320
很快，你马上就到了，但这个过程本身是一个漫长的过程，所以

368
00:26:18,320 --> 00:26:22,320
嗯，我记得我花了大约两周时间，因为我收到了一个拒绝

369
00:26:22,320 --> 00:26:27,520
大约一周的时间让他们更新喜欢重新审查文件的过程

370
00:26:27,520 --> 00:26:31,440
不幸的是，这不是一个快速的过程

371
00:26:31,440 --> 00:26:34,799
很像

372
00:26:34,799 --> 00:26:41,440
是的，这只是漫长而无聊的过程，所以

373
00:26:41,440 --> 00:26:43,919
如果可以的话，把它排除在外

374
00:26:43,919 --> 00:26:46,880
嗯

375
00:26:46,880 --> 00:26:49,840
那是为了

376
00:26:49,840 --> 00:26:55,120
长而不是免费的 ios 部分

377
00:26:55,120 --> 00:26:58,480
并且

378
00:26:58,480 --> 00:27:02,640
我需要提到的另一件事是

379
00:27:02,640 --> 00:27:06,320
如果您正在注册并且想要销售不是

380
00:27:06,320 --> 00:27:10,159
本课程的目的，但如果您想出售应用程序，那么您将拥有

381
00:27:10,159 --> 00:27:13,919
提供一些银行和税务信息

382
00:27:13,919 --> 00:27:17,440
所以他们需要确保你销售的东西是不同的

383
00:27:17,440 --> 00:27:21,520
国家 汇款到您的银行账户

384
00:27:21,520 --> 00:27:24,559
将在您缴纳税款时计入

385
00:27:24,559 --> 00:27:28,559
所以我相信如果你想卖

386
00:27:28,559 --> 00:27:34,720
应用商店上的应用程序，那么您将不得不填写一些美国税表

387
00:27:34,720 --> 00:27:39,840
办公室，嗯，我想我什至不记得 irs

388
00:27:39,840 --> 00:27:44,080
内部收入服务或类似国税局的东西我相信你必须

389
00:27:44,080 --> 00:27:47,760
填写一些表格，例如将表格发送给他们，然后他们会回来一些

390
00:27:47,760 --> 00:27:52,399
对您来说是一种标识符，然后您将需要使用该标识符

391
00:27:52,399 --> 00:27:56,559
在苹果的网站上，基本上是说是的，是的，我知道我在卖

392
00:27:56,559 --> 00:28:01,520
在美国卖东西 我在日本卖东西 我在瑞典卖东西 挪威

393
00:28:01,520 --> 00:28:06,000
但我要在我这里为他们纳税

394
00:28:06,000 --> 00:28:09,039
国家，这就是表格在这里所说的

395
00:28:09,039 --> 00:28:15,279
这是我的名字 这是我的公司 我是组织还是个人

396
00:28:15,279 --> 00:28:18,320
所以我没有陪伴

397
00:28:18,320 --> 00:28:21,440
个人身份证号码 我的国家是这个

398
00:28:21,440 --> 00:28:26,480
嗯是我的地址我的电话号码等然后你把它发给他们

399
00:28:26,480 --> 00:28:31,120
到国税局，然后他们回来说好吧，现在我们知道你是谁，这里是

400
00:28:31,120 --> 00:28:35,360
你的身份证号码就像一个企业

401
00:28:35,360 --> 00:28:38,799
标识符号 bin 或他们称之为的东西我想我不记得确切

402
00:28:38,799 --> 00:28:42,240
但我相信这取决于你是企业还是个人

403
00:28:42,240 --> 00:28:46,799
这个数字有点不同，所以如果你是一家企业，我认为它是垃圾箱

404
00:28:46,799 --> 00:28:49,679
如果你是个人我不知道

405
00:28:49,679 --> 00:28:52,320
所以我不知道那个对话是什么

406
00:28:52,320 --> 00:28:56,159
一些蓝牙设备想连接到我的电脑我不知道它是什么

407
00:28:56,159 --> 00:29:01,760
所以这就是那部分它可能很长而且它是

408
00:29:01,760 --> 00:29:05,919
不是免费的好吧

409
00:29:05,919 --> 00:29:10,960
那是很多关于 ios 的信息

410
00:29:10,960 --> 00:29:16,320
现在呃我们现在能做的就是谈谈android

411
00:29:16,320 --> 00:29:19,679
以及关于android进程的好处

412
00:29:19,679 --> 00:29:24,640
就像为谷歌开发者设置你的帐户一样，它很多

413
00:29:24,640 --> 00:29:30,240
正如你对谷歌所期望的那样更直接，并且考虑到他们是 um

414
00:29:30,240 --> 00:29:33,679
甚至像将更新到 android 应用程序发送到

415
00:29:33,679 --> 00:29:37,440
谷歌开发者控制台比 ios i 更简单

416
00:29:37,440 --> 00:29:42,320
不想吓到你，但这是事实，你会知道的，当我们稍后

417
00:29:42,320 --> 00:29:46,559
实际上到了我们发布应用程序的本课程的结尾

418
00:29:46,559 --> 00:29:51,440
对于 ios 和 android 来说，对于 google 来说更简单一些

419
00:29:51,440 --> 00:29:55,279
应用商店

420
00:29:55,279 --> 00:29:58,880
但是您仍然需要注册一个开发者帐户

421
00:29:58,880 --> 00:30:01,440
所以嗯

422
00:30:01,440 --> 00:30:05,840
我要记下我已经谈过的笔记

423
00:30:05,840 --> 00:30:08,960
所以我们还需要知道的是

424
00:30:08,960 --> 00:30:13,520
是一个我们可以访问的 url 我要复制它并粘贴它

425
00:30:13,520 --> 00:30:16,480
在这里，您可以看到我在说哪一个

426
00:30:16,480 --> 00:30:21,840
在这里你可以看到你可以设置一个

427
00:30:21,840 --> 00:30:25,440
开发人员帐户，一旦您登录，我假设您已登录

428
00:30:25,440 --> 00:30:31,360
然后你去 play.google.com 斜线控制台斜线用户或者你零注册

429
00:30:31,360 --> 00:30:35,279
是 url 它可能会改变的地方，所以让我们

430
00:30:35,279 --> 00:30:40,080
您可以做的只是 google google play 控制台开发者帐户或

431
00:30:40,080 --> 00:30:43,919
谷歌开发者帐户然后你最终会得到一个看起来有点像的网址

432
00:30:43,919 --> 00:30:46,880
所以不要指望我的这个网址

433
00:30:46,880 --> 00:30:51,760
在这里提到，因为它可能会改变这就是我所说的

434
00:30:51,760 --> 00:30:55,360
您可以像 ios 开发一样将其设置为

435
00:30:55,360 --> 00:30:58,320
个人或您现在可以设置为组织

436
00:30:58,320 --> 00:31:01,760
碰巧为我自己建立了一个组织，因为我确实有一个

437
00:31:01,760 --> 00:31:06,080
公司在瑞典，所以我更容易把所有的业务联系起来

438
00:31:06,080 --> 00:31:13,519
与苹果和谷歌的关系合并为一个实体，这是我的开发者帐户

439
00:31:13,519 --> 00:31:17,360
对不起，这是我的公司

440
00:31:17,360 --> 00:31:21,279
对我来说，解释这一点也没有多大意义

441
00:31:21,279 --> 00:31:24,960
详细信息，但如果您想以个人身份自行设置，只需按

442
00:31:24,960 --> 00:31:27,919
在开始时，或者如果您想将其设置为一个组织，只需按 get

443
00:31:27,919 --> 00:31:32,000
从那里开始，如您所见，您可以提供有关您的信息

444
00:31:32,000 --> 00:31:35,360
组织，你可以在这里看到，只要你说我是

445
00:31:35,360 --> 00:31:37,840
组织然后他们说好的网站是什么

446
00:31:37,840 --> 00:31:40,799
所以你可以看看我是否没有网站

447
00:31:40,799 --> 00:31:44,240
我们建议添加一个能够很好地代表您的组织的网站

448
00:31:44,240 --> 00:31:47,840
有点道理我的意思是，如果你是一家公司，你的网站每个

449
00:31:47,840 --> 00:31:51,760
公司应该有一个网站，除非你像一家比萨店或

450
00:31:51,760 --> 00:31:55,360
即使是比萨餐厅也可能需要一个网站，但我们有一个

451
00:31:55,360 --> 00:31:58,559
我们镇上的披萨餐厅没有网站所以

452
00:31:58,559 --> 00:32:02,559
他们在脸书上

453
00:32:02,559 --> 00:32:05,919
而你不知道你可能不想说你公司的网站在

454
00:32:05,919 --> 00:32:09,279
脸书所以嗯

455
00:32:09,279 --> 00:32:12,399
所以是的，我们在哪里

456
00:32:12,399 --> 00:32:15,679
如果你说你是个人 那么你来这里

457
00:32:15,679 --> 00:32:20,720
他们要求一些其他的东西，但仍然很有趣，因为

458
00:32:20,720 --> 00:32:24,559
它说输入您的网站或社交媒体资料的网址

459
00:32:24,559 --> 00:32:29,039
嗯，所以在这里你有点需要你也需要输入

460
00:32:29,039 --> 00:32:33,200
所以也许你可以用一个 facebook url 侥幸逃脱，我对此笑了但是

461
00:32:33,200 --> 00:32:35,440
也许你可以侥幸逃脱我不知道

462
00:32:35,440 --> 00:32:38,880
但我不建议对你说实话，因为你稍后会看到

463
00:32:38,880 --> 00:32:43,919
在我们实际将我们的应用程序提交到应用商店和游戏商店的课程中

464
00:32:43,919 --> 00:32:48,320
您必须提供一些关键数据点

465
00:32:48,320 --> 00:32:54,880
两家商店 一家是隐私政策网址，另一家是隐私政策网址

466
00:32:54,880 --> 00:32:58,320
是支持网址嗯

467
00:32:58,320 --> 00:33:02,960
还有另外两个

468
00:33:02,960 --> 00:33:06,640
你必须提供的电子邮件所以是的四

469
00:33:06,640 --> 00:33:11,120
电子邮件 第一个是支持电子邮件，另一个是

470
00:33:11,120 --> 00:33:15,919
联系电子邮件，如果您正在设置企业帐户

471
00:33:15,919 --> 00:33:19,440
那么我真的建议您实际建立一个网站，因为如果您建立一个

472
00:33:19,440 --> 00:33:24,240
网站并且您有一个域您有一个电子邮件提供商然后您的电子邮件将

473
00:33:24,240 --> 00:33:28,600
有点像呃 foobar 在

474
00:33:28,600 --> 00:33:34,240
mybusiness.com 设置电子邮件更专业

475
00:33:34,240 --> 00:33:40,000
绑定到您的电子邮件到您的域，而不是说

476
00:33:40,000 --> 00:33:43,279
约翰逊先生 gmail.com 嗯

477
00:33:43,279 --> 00:33:47,440
我不会相信拥有 gmail.com 的企业

478
00:33:47,440 --> 00:33:50,960
帐户我有点想知道，是的，这里是

479
00:33:50,960 --> 00:33:56,159
他们拥有自己的网站和等等等等，这是一项严肃的业务

480
00:33:56,159 --> 00:34:00,720
但相反 建立一个网站 建立一些

481
00:34:00,720 --> 00:34:04,000
电子邮件也不一定意味着你是认真的

482
00:34:04,000 --> 00:34:08,879
但如果你明白我的意思，它会更专注

483
00:34:08,879 --> 00:34:12,079
嗯，是的

484
00:34:12,079 --> 00:34:15,839
这就是开户的过程

485
00:34:15,839 --> 00:34:21,599
作为一个安卓开发者，我认为就是这样

486
00:34:21,599 --> 00:34:28,639
呃，这就是我想在我们课程的第一章中提到的所有内容

487
00:34:28,639 --> 00:34:37,520
我强烈建议您获取 Apple 和

488
00:34:37,520 --> 00:34:42,159
谷歌你还需要知道的是

489
00:34:42,159 --> 00:34:47,760
我的意思是我已经谈了很多关于现在的苹果账户和谷歌开发者账户

490
00:34:47,760 --> 00:34:49,919
但

491
00:34:49,919 --> 00:34:56,079
如果你正在开发你的应用程序

492
00:34:56,079 --> 00:34:59,440
例如，在 Windows 机器上，如果你想学习如何

493
00:34:59,440 --> 00:35:02,240
开发 Flutter 应用程序，你不关心发布你的

494
00:35:02,240 --> 00:35:06,240
应用程序你不必做任何这些

495
00:35:06,240 --> 00:35:09,599
像往常一样跟随课程没问题

496
00:35:09,599 --> 00:35:12,880
但如果你想真正释放你的

497
00:35:12,880 --> 00:35:17,440
ios的应用程序，那么你肯定还需要一个mac

498
00:35:17,440 --> 00:35:21,520
因为您无法构建您的应用程序，否则您可以使用一些技巧

499
00:35:21,520 --> 00:35:23,839
你能喜欢建立你的

500
00:35:23,839 --> 00:35:28,320
照片应用程序，然后像朋友的 Macintosh 一样，如果他们有一个或

501
00:35:28,320 --> 00:35:32,560
您可以发送到云中的服务，他们为您构建应用程序

502
00:35:32,560 --> 00:35:36,560
然后他们会将其发回给您，然后您可以提交

503
00:35:36,560 --> 00:35:39,680
或者他们甚至必须提交它，对你说实话有点毛茸茸

504
00:35:39,680 --> 00:35:41,599
但是嗯

505
00:35:41,599 --> 00:35:46,480
这是一个复杂的话题，有点难以解释

506
00:35:46,480 --> 00:35:49,200
嗯，例如，如果你在窗户上

507
00:35:49,200 --> 00:35:53,680
机器你甚至不能有 xcode xcode 是工具

508
00:35:53,680 --> 00:35:59,920
整个就像一连串工具集，安装在一个

509
00:35:59,920 --> 00:36:05,680
macintosh 为 ios 平台构建应用程序

510
00:36:05,680 --> 00:36:08,800
现在我为什么要谈论这个，其背后的原因是，如果

511
00:36:08,800 --> 00:36:13,680
你正在开发一个颤振应用程序然后嗯

512
00:36:13,680 --> 00:36:17,760
可以在windows机器上部署flutter

513
00:36:17,760 --> 00:36:21,280
macintosh 或统称为桌面

514
00:36:21,280 --> 00:36:26,720
web android ios 目前五个平台

515
00:36:26,720 --> 00:36:30,079
如果你想

516
00:36:30,079 --> 00:36:34,800
例如，发布您的应用程序并为 ios 构建它并在

517
00:36:34,800 --> 00:36:41,040
iphone或ipad你不能在windows机器上做到这一点不幸的是不是

518
00:36:41,040 --> 00:36:45,520
Windows机器没有任何问题，只是苹果的错

519
00:36:45,520 --> 00:36:51,040
将他们的构建系统和所有工具锁定到 macintosh，这样他们就没有

520
00:36:51,040 --> 00:36:52,720
制作了[音乐]

521
00:36:52,720 --> 00:36:55,920
有意识的决定或

522
00:36:55,920 --> 00:37:02,240
是的，他们还没有决定将他们的工具系统和工具带到

523
00:37:02,240 --> 00:37:07,839
不幸的是windows或linux swift，这是编写的语言

524
00:37:07,839 --> 00:37:13,920
我相信可以在 linux 上运行 ios 的本机应用程序

525
00:37:13,920 --> 00:37:19,440
windows可能是，但它的主要平台仍然是

526
00:37:19,440 --> 00:37:22,960
苹果

527
00:37:22,960 --> 00:37:28,160
我知道这也是很多要学习的信息，但如果有什么我

528
00:37:28,160 --> 00:37:31,760
想关闭这一章第一章

529
00:37:31,760 --> 00:37:36,480
本课程是您可以学习颤振并跟随

530
00:37:36,480 --> 00:37:40,640
使用我将在本课程中提供的步骤，无需注册

531
00:37:40,640 --> 00:37:44,640
任何帐户，所以这是第一点

532
00:37:44,640 --> 00:37:50,160
第二点是，如果您愿意，您将需要一台 Macintosh

533
00:37:50,160 --> 00:37:54,800
如果您想轻松地构建和发布您的颤振应用程序，请发布

534
00:37:54,800 --> 00:37:58,000
为 iOS

535
00:37:58,000 --> 00:38:01,440
如果你想发布你的应用程序

536
00:38:01,440 --> 00:38:05,440
谷歌游戏商店这是第三点，如果你想这样做，你需要

537
00:38:05,440 --> 00:38:09,920
在 google play 控制台上注册一个开发者帐户

538
00:38:09,920 --> 00:38:13,760
正如我在这里向你展示的那样

539
00:38:13,760 --> 00:38:17,280
我相信这就是你需要知道的一切

540
00:38:17,280 --> 00:38:20,079
你们中的一些人可能已经拥有所有这些帐户并且不必担心

541
00:38:20,079 --> 00:38:22,800
它，但有些可能不会

542
00:38:22,800 --> 00:38:26,560
如果您来自设计和设计背景，就知道这一切

543
00:38:26,560 --> 00:38:30,800
你所做的就是与 figma 等合作，这是一个很重要的人

544
00:38:30,800 --> 00:38:33,440
你需要知道的信息，因为我不想让你得到

545
00:38:33,440 --> 00:38:37,680
喜欢在这个过程中感到沮丧，所以我只希望你有一些

546
00:38:37,680 --> 00:38:43,119
信息，以便您至少可以轻松上手

547
00:38:43,119 --> 00:38:46,400
好吧，这就是我的想法

548
00:38:46,400 --> 00:38:51,119
章节我可以记下我已经解释了我想解释的一切的笔记

549
00:38:51,119 --> 00:38:54,640
确实花了大约35分钟

550
00:38:54,640 --> 00:38:58,480
老实说，这并不意外 这是很多信息

551
00:38:58,480 --> 00:39:01,839
我有点想慢慢来，重要的是你

552
00:39:01,839 --> 00:39:05,119
也让我明白这一切

553
00:39:05,119 --> 00:39:09,920
太好了，我想这个视频就是这样

554
00:39:09,920 --> 00:39:14,800
所以我会在下一章见到你大家好，欢迎来到第二章

555
00:39:14,800 --> 00:39:19,839
如果你还没有看过这门课程的介绍，现在看我们课程的章节

556
00:39:19,839 --> 00:39:23,440
我真的建议你在继续课程之前这样做，因为那里

557
00:39:23,440 --> 00:39:25,680
我已经解释了很多点

558
00:39:25,680 --> 00:39:29,040
我认为之前理解的介绍非常重要

559
00:39:29,040 --> 00:39:34,079
继续课程，所以在本章中我们将要做的事情

560
00:39:34,079 --> 00:39:38,160
我们是否要处理一些所需的设置步骤

561
00:39:38,160 --> 00:39:40,960
几乎其余的

562
00:39:40,960 --> 00:39:44,960
本课程以及这一章之后的所有其他章节

563
00:39:44,960 --> 00:39:49,119
3 4 等等所以我们要谈谈颤振

564
00:39:49,119 --> 00:39:52,640
飞镖暗垫和如何安装颤振是否

565
00:39:52,640 --> 00:39:56,560
你在 windows mac 或 linux 上

566
00:39:56,560 --> 00:40:00,240
我们还将讨论

567
00:40:00,240 --> 00:40:06,480
xcode android studio 和我们要讲几个非常有用的

568
00:40:06,480 --> 00:40:11,359
我们的代码编辑器的扩展，所以如果您来自以下背景

569
00:40:11,359 --> 00:40:14,720
你以前没有使用过任何类型的编程语言

570
00:40:14,720 --> 00:40:17,359
嗯，我要好好学习这一章

571
00:40:17,359 --> 00:40:21,920
容易，所以如果你已经是高级程序员，你可能想跳过这个，

572
00:40:21,920 --> 00:40:27,359
你已经像 Flutter 一样安装了一切你可以跳过本章

573
00:40:27,359 --> 00:40:32,160
没有问题，所以让我们从谈论开始

574
00:40:32,160 --> 00:40:36,400
传统上，什么是 Flutter？

575
00:40:36,400 --> 00:40:39,760
程序员或软件工程师，但你想称呼他们

576
00:40:39,760 --> 00:40:43,200
他们一直在用他们的代码创建和编写代码

577
00:40:43,200 --> 00:40:45,760
手指伸进去

578
00:40:45,760 --> 00:40:49,280
不同的语言，然后他们针对不同的平台，这是非常

579
00:40:49,280 --> 00:40:53,200
了解什么是语言编程语言很重要

580
00:40:53,200 --> 00:40:58,000
与平台相比 想想平台

581
00:40:58,000 --> 00:41:02,880
作为软件的终点站

582
00:41:02,880 --> 00:41:08,640
最终被运行运行所以让我们说windows是一个平台mac

583
00:41:08,640 --> 00:41:15,119
是一个平台 linux 是一个平台，在所有 iphone 上运行的 ios 是一个

584
00:41:15,119 --> 00:41:19,280
平台 android 现在是一个平台等

585
00:41:19,280 --> 00:41:22,480
你会有编程语言

586
00:41:22,480 --> 00:41:26,000
您作为软件开发人员将使用的

587
00:41:26,000 --> 00:41:30,960
以这些平台为目标，为这些平台编写软件，以便您使用

588
00:41:30,960 --> 00:41:36,000
一种编程语言，以便编写一段代码并能够运行它

589
00:41:36,000 --> 00:41:41,680
该目标平台上的代码可以，所以一个编程语言示例是

590
00:41:41,680 --> 00:41:46,839
javascript python 快速生锈

591
00:41:46,839 --> 00:41:52,720
嗯，现在还有什么流行的 java kotlin 所有这些

592
00:41:52,720 --> 00:41:56,079
这些是编程语言，所以

593
00:41:56,079 --> 00:42:01,920
作为一名试图学习颤振的软件开发人员，你会使用 then dart 作为

594
00:42:01,920 --> 00:42:05,599
您的程序编程语言，我将很快解释

595
00:42:05,599 --> 00:42:08,800
所以

596
00:42:08,800 --> 00:42:11,920
这是一个人坐在电脑前的传统

597
00:42:11,920 --> 00:42:15,440
说好的我想为windows写一个程序然后他们去写一些代码

598
00:42:15,440 --> 00:42:19,920
也许与 csharp.net 或

599
00:42:19,920 --> 00:42:23,440
也许他们会使用其他一些我不知道那里有什么的技术

600
00:42:23,440 --> 00:42:28,240
现在对于 Windows，也许他们会使用 vb.map

601
00:42:28,240 --> 00:42:30,720
然后他们会完成，他们会

602
00:42:30,720 --> 00:42:34,880
发布适用于 Windows 的软件，就像我现在完成了一样

603
00:42:34,880 --> 00:42:39,920
然后有人进入项目并说啊我们需要相同的软件

604
00:42:39,920 --> 00:42:42,640
macintosh 或者我们需要相同的软件

605
00:42:42,640 --> 00:42:47,280
其他一些

606
00:42:47,280 --> 00:42:52,720
例如平台，那么你将不得不去写相同的

607
00:42:52,720 --> 00:42:56,960
软件 uh 完全相同的代码

608
00:42:56,960 --> 00:43:00,960
其他平台，因此此过程将非常重复

609
00:43:00,960 --> 00:43:04,640
因为你必须一遍又一遍地编写相同的软件，所以

610
00:43:04,640 --> 00:43:09,359
诸如颤动之类的东西是为了解决这个问题，所以说一个软件

611
00:43:09,359 --> 00:43:12,640
工程师坐在家里或坐在办公室与一群其他人一起工作

612
00:43:12,640 --> 00:43:17,359
人们和一个设计师可能或几个设计师 ux 有一个产品负责人

613
00:43:17,359 --> 00:43:22,400
等等，然后他们会编写相同的代码

614
00:43:22,400 --> 00:43:26,480
然后它将在不同的平台上运行，因此作为软件开发人员，您

615
00:43:26,480 --> 00:43:30,079
不必保持不同的呃

616
00:43:30,079 --> 00:43:33,920
非常相似的代码片段，只能

617
00:43:33,920 --> 00:43:40,960
在一个特定的平台上运行，所以在它的地面上颤动基本上是一个 ui

618
00:43:40,960 --> 00:43:44,319
运行美丽的框架

619
00:43:44,319 --> 00:43:49,280
并编写在多个平台上同时运行的漂亮应用程序

620
00:43:49,280 --> 00:43:52,720
谷歌开发的时间已经在

621
00:43:52,720 --> 00:43:59,680
生产了很长时间它是呃尝试和测试它是开源的

622
00:43:59,680 --> 00:44:02,960
如果你不来自类似的软件

623
00:44:02,960 --> 00:44:07,280
工程背景开源基本上意味着

624
00:44:07,280 --> 00:44:11,839
编写的代码

625
00:44:11,839 --> 00:44:15,200
对于颤振，基本上是组成绘图仪的代码

626
00:44:15,200 --> 00:44:18,000
向公众开放

627
00:44:18,000 --> 00:44:22,160
呃发现错误并为此做出贡献，或者也许只是

628
00:44:22,160 --> 00:44:26,000
从中学习，例如，如果您来自 as

629
00:44:26,000 --> 00:44:31,119
一个设计师，这有点像你的 figma 文件向全世界开放

630
00:44:31,119 --> 00:44:36,560
或您的 adobe xd 源向全世界开放，供他们观看

631
00:44:36,560 --> 00:44:41,280
你正在做你正在设计的事情，也让他们能够修复东西

632
00:44:41,280 --> 00:44:45,920
如果他们认为你的设计不能正常工作

633
00:44:45,920 --> 00:44:48,720
所以这是开源的

634
00:44:48,720 --> 00:44:54,240
所以flutter是google开发的开源ui框架um

635
00:44:54,240 --> 00:44:57,680
如果您不是来自软件工程，我的意思是框架意味着什么

636
00:44:57,680 --> 00:45:00,960
背景框架有点像一组工具

637
00:45:00,960 --> 00:45:04,480
呃作为软件开发人员提供给你，所以你可以使用

638
00:45:04,480 --> 00:45:09,839
这些工具取一点这个取一点那个取一点，以便产生一个

639
00:45:09,839 --> 00:45:14,400
output so flutter 它本身就是一个软件

640
00:45:14,400 --> 00:45:19,839
但它更准确地称为

641
00:45:19,839 --> 00:45:24,960
作为一个框架，因为它是工具的集合，所以如果你听到

642
00:45:24,960 --> 00:45:27,599
框架只知道哦，有很多东西我可以用来

643
00:45:27,599 --> 00:45:34,160
现在产生一些输出，这就是颤振，但是

644
00:45:34,160 --> 00:45:38,160
为 Flutter 提供动力的是一种编程语言

645
00:45:38,160 --> 00:45:42,880
称为飞镖和飞镖一直在制作更多

646
00:45:42,880 --> 00:45:49,280
八年以上是目前由谷歌维护的一种语言

647
00:45:49,280 --> 00:45:53,680
而且是开源的，所以任何人都可以为它做出贡献，任何人都可以从中学习

648
00:45:53,680 --> 00:45:57,920
它并找到漏洞利用或可能存在问题，它将得到修补

649
00:45:57,920 --> 00:46:02,560
由公众或谷歌自己如此飞镖

650
00:46:02,560 --> 00:46:08,319
你可以说的语言 支持颤动的编程语言

651
00:46:08,319 --> 00:46:11,760
所以

652
00:46:11,760 --> 00:46:17,760
现在你知道什么是颤振，现在你知道什么是飞镖

653
00:46:17,760 --> 00:46:21,920
我想下一步我们能做的就是谈论

654
00:46:21,920 --> 00:46:27,359
一个很棒的网络软件，叫做飞镖垫

655
00:46:27,359 --> 00:46:31,920
现在我说的暗垫是一个网络

656
00:46:31,920 --> 00:46:35,760
软件，或者您可以将其称为网站

657
00:46:35,760 --> 00:46:40,880
允许你运行或编写你的飞镖代码

658
00:46:40,880 --> 00:46:45,839
可能是纯飞镖代码或颤振代码

659
00:46:45,839 --> 00:46:50,480
并直接在浏览器中运行，甚至无需安装

660
00:46:50,480 --> 00:46:55,680
随便打开你的浏览器，你很快就会看到我们去暗垫

661
00:46:55,680 --> 00:46:58,560
你会看到它的样子所以让我来

662
00:46:58,560 --> 00:47:03,200
在这里给你看一个小示范，所以我在这里打开了飞镖垫

663
00:47:03,200 --> 00:47:07,440
我实际上可以增加尺寸，这样你就可以看得更清楚一点

664
00:47:07,440 --> 00:47:10,960
我可能需要在屏幕上重新排列一些组件，这样你才能看到

665
00:47:10,960 --> 00:47:16,400
屏幕更好，所以我去了 dartpad.dartlang.org

666
00:47:16,400 --> 00:47:21,920
你可以看到这里有一个写在左边的程序

667
00:47:21,920 --> 00:47:25,680
我实际上可以让这个

668
00:47:25,680 --> 00:47:29,359
什么是深色的深色垫可以让你等等等等文字在那里，这样你就可以拥有

669
00:47:29,359 --> 00:47:33,760
我正在谈论的上下文，您可以看到该程序是

670
00:47:33,760 --> 00:47:38,400
坐在那里，然后您可以按照它的方式更改程序

671
00:47:38,400 --> 00:47:41,040
是或点击此处查看

672
00:47:41,040 --> 00:47:45,520
文档在这里或按下运行按钮，所以我只是

673
00:47:45,520 --> 00:47:48,480
按下运行按钮，你可以看到

674
00:47:48,480 --> 00:47:53,760
文本 hello 被打印到屏幕上五次加上

675
00:47:53,760 --> 00:47:57,200
它实际打印的次数它也打印在屏幕上所以你好

676
00:47:57,200 --> 00:48:02,720
一二三四五 所以你在这边看到的是

677
00:48:02,720 --> 00:48:06,000
如果您还记得来自开源的源代码，那么这个

678
00:48:06,000 --> 00:48:10,400
是用称为 dart 的编程语言编写的源代码

679
00:48:10,400 --> 00:48:14,800
这是该程序的输出，所以

680
00:48:14,800 --> 00:48:19,599
暗垫允许您在此处编写文本并执行它并查看

681
00:48:19,599 --> 00:48:24,240
结果立即如此

682
00:48:24,240 --> 00:48:28,319
这就是飞镖我的意思是抱歉暗垫是我们要谈谈

683
00:48:28,319 --> 00:48:32,079
在课程中更多关于飞镖和暗垫，但是

684
00:48:32,079 --> 00:48:38,800
现在我们应该做的是从安装flutter开始

685
00:48:38,800 --> 00:48:43,520
因为呃我的意思是你可以说好吧但是颤抖

686
00:48:43,520 --> 00:48:46,640
只是呃

687
00:48:46,640 --> 00:48:53,200
ui framework dart 怎么样？flutter 默认打包的方式是这样的

688
00:48:53,200 --> 00:48:57,280
它包括飞镖编程语言及其运行时，所以如果工具

689
00:48:57,280 --> 00:49:03,839
需要运行任何 dart 代码，它将所有这些打包在一个大文件中

690
00:49:03,839 --> 00:49:07,440
为您提供块，因此您不必去安装不同的组件，例如

691
00:49:07,440 --> 00:49:11,760
在颤振中单独安装飞镖，所以让我们即兴创作，我要走了

692
00:49:11,760 --> 00:49:14,800
在这里说

693
00:49:14,800 --> 00:49:20,240
让我们说安装颤振好吧，然后你去这个漂亮的网站

694
00:49:20,240 --> 00:49:24,800
称为flutter.dev 我将在这里增加大小

695
00:49:24,800 --> 00:49:27,599
你看

696
00:49:27,599 --> 00:49:31,119
所以我们现在去那里

697
00:49:31,119 --> 00:49:34,319
你会在这里看到这个漂亮的网站

698
00:49:34,319 --> 00:49:38,800
我们要做的只是按下开始并记住

699
00:49:38,800 --> 00:49:44,000
我们按下开始，但这个网站现在看起来像这样

700
00:49:44,000 --> 00:49:48,000
几个月或几年后它会改变，所以你只需要

701
00:49:48,000 --> 00:49:52,079
找到一种方法来立即进入安装部分

702
00:49:52,079 --> 00:49:56,559
调用开始，我可以看到它位于 docs.flower dev get started

703
00:49:56,559 --> 00:50:00,160
安装然后在这里选择你的平台我在一个

704
00:50:00,160 --> 00:50:03,760
macintosh，但如果你在 Windows 上，只需单击 Windows，然后你就会得到

705
00:50:03,760 --> 00:50:07,920
关于如何安装饲料的说明

706
00:50:07,920 --> 00:50:12,559
然后或者如果你在linux上你也可以做同样的事情只是得到说明

707
00:50:12,559 --> 00:50:15,119
为您的平台

708
00:50:15,119 --> 00:50:20,000
现在我要去mac，我要点击mac，然后

709
00:50:20,000 --> 00:50:23,040
我要去看看这个信息我要去

710
00:50:23,040 --> 00:50:27,760
增加尺寸，这样更容易阅读，它说好的

711
00:50:27,760 --> 00:50:30,960
下载以下安装包以获取最新的稳定版本

712
00:50:30,960 --> 00:50:35,920
flutter sdk sdk的意思是软件开发

713
00:50:35,920 --> 00:50:42,160
开发工具包我相信所以它就像一系列工具供您使用它

714
00:50:42,160 --> 00:50:47,119
只是花哨的词，所以我们要这样做，让我们得到

715
00:50:47,119 --> 00:50:52,079
flutter mac 我要下载

716
00:50:52,079 --> 00:50:55,920
这可能需要一些时间，因为它实际上很厚实

717
00:50:55,920 --> 00:51:01,200
嗯，你可以看到它几乎有 1.2 GB 的软件

718
00:51:01,200 --> 00:51:04,319
所以根据您的互联网连接可能需要

719
00:51:04,319 --> 00:51:09,119
是的，几秒钟到几分钟之间的任何事情

720
00:51:09,119 --> 00:51:13,680
完成后，您将不得不解压缩

721
00:51:13,680 --> 00:51:17,680
在某个文件夹中

722
00:51:17,680 --> 00:51:21,920
那种手段就是我可以看到我的mac已经在解压了

723
00:51:21,920 --> 00:51:25,680
这个 zip 文件给我，所以我不必自己做，它已经

724
00:51:25,680 --> 00:51:29,599
在这个地方解压所以我要点击它

725
00:51:29,599 --> 00:51:33,760
我会向你展示它的内容，所以它看起来像这样

726
00:51:33,760 --> 00:51:38,720
好吧，现在你已经有了你需要的东西

727
00:51:38,720 --> 00:51:45,200
要做的是确保所有这些文件都放在里面

728
00:51:45,200 --> 00:51:49,440
您计算机上的一个位置

729
00:51:49,440 --> 00:51:54,079
保护，这样你就不会不小心删除它，它也像嗯

730
00:51:54,079 --> 00:51:58,240
你知道它在哪里所以我的意思是不要把它放在桌子上

731
00:51:58,240 --> 00:52:01,119
你的桌面，不要把它放在像文件或任何它不是

732
00:52:01,119 --> 00:52:07,119
文档软件 我喜欢做的通常是拥有一个

733
00:52:07,119 --> 00:52:12,000
macintosh 上名为 dev 的文件夹

734
00:52:12,000 --> 00:52:17,280
如果您不熟悉终端，我将在这里打开终端，因为您可以看到终端

735
00:52:17,280 --> 00:52:21,520
是一个应用程序，你可以

736
00:52:21,520 --> 00:52:24,079
用它控制几乎整个系统

737
00:52:24,079 --> 00:52:29,040
如果你在 Mac 上，或者如果你在 linux 或任何基于 unix 的系统上，如果你是

738
00:52:29,040 --> 00:52:32,880
在 Windows 上，你也可以用你的终端做很多事情

739
00:52:32,880 --> 00:52:37,359
所以在windows中那个终端叫做cmd我相信

740
00:52:37,359 --> 00:52:41,599
正如我所相信的那样

741
00:52:41,599 --> 00:52:47,359
linux和mac它被称为终端我在这里使用一个终端叫i

742
00:52:47,359 --> 00:52:52,079
任期呃，但如果你在 vanilla mac os 上然后

743
00:52:52,079 --> 00:52:56,160
你会去像这样打开终端，看起来就像

744
00:52:56,160 --> 00:52:59,280
那

745
00:52:59,280 --> 00:53:04,559
所以我现在要打开 i-term 这是我的终端 你可以打开

746
00:53:04,559 --> 00:53:11,200
你觉得舒服的终端，我要增加这个的大小

747
00:53:11,200 --> 00:53:15,839
我喜欢为这些作品放置我的装置

748
00:53:15,839 --> 00:53:19,440
我的主目录中的软件，由这个有趣的小字符表示

749
00:53:19,440 --> 00:53:23,520
斜线开发和

750
00:53:23,520 --> 00:53:29,040
如果我查看此内容，我可以看到我有一个名为 tooling 的文件夹，如果我

751
00:53:29,040 --> 00:53:32,240
说工具，看看它的内容，我可以看到

752
00:53:32,240 --> 00:53:36,160
颤动就在那里，所以

753
00:53:36,160 --> 00:53:40,160
对我来说颤振安装你知道这个文件夹

754
00:53:40,160 --> 00:53:45,359
在我的下载文件夹中为我下载了我会去复制它的内容

755
00:53:45,359 --> 00:53:51,040
内容并将其放在此文件夹中，所以如果我说 cdflutter

756
00:53:51,040 --> 00:53:57,839
然后你可以看到我在我的用户开发文件夹中工具颤动所以这是

757
00:53:57,839 --> 00:54:02,720
我现在选择把颤振放在哪里你可以选择把这个下载的文件夹

758
00:54:02,720 --> 00:54:06,160
文档告诉您的其他任何地方

759
00:54:06,160 --> 00:54:10,640
例如在所需的位置

760
00:54:10,640 --> 00:54:14,880
去吧，选择一个位置，对我来说这个位置适合你

761
00:54:14,880 --> 00:54:19,440
可能是如果你在 Windows 上可能会像 c

762
00:54:19,440 --> 00:54:24,480
反斜杠我不知道你可以说开发反斜杠工具

763
00:54:24,480 --> 00:54:30,079
反斜杠颤动这可能是您的工具热门照片的好位置

764
00:54:30,079 --> 00:54:33,040
所以我现在想象你已经做到了

765
00:54:33,040 --> 00:54:37,119
你有一个文件夹，对我来说就是这个文件夹

766
00:54:37,119 --> 00:54:41,839
颤振安装现在你可以看到它说

767
00:54:41,839 --> 00:54:45,280
在这第三步中，您将需要公开

768
00:54:45,280 --> 00:54:52,000
颤振的二进制文件到您的系统，这基本上意味着

769
00:54:52,000 --> 00:54:57,200
Flutter 作为 sdk 或工具包或框架

770
00:54:57,200 --> 00:55:02,400
它里面有很多零碎的软件

771
00:55:02,400 --> 00:55:06,400
从这个意义上说，其中一些位更重要，因为它们实际上是

772
00:55:06,400 --> 00:55:10,400
在那个想象中可执行

773
00:55:10,400 --> 00:55:14,720
在您的计算机上，无论是在 macintosh windows 还是 linux

774
00:55:14,720 --> 00:55:17,760
你可以有不同的文件有些文件可以是文本声音文件

775
00:55:17,760 --> 00:55:21,839
可以是图片 一些文件可以是我不知道

776
00:55:21,839 --> 00:55:26,240
它们还可以是什么，或者是一个word文档，例如好的，因为我

777
00:55:26,240 --> 00:55:31,599
想出了另一个例子，或者他们可能是一个程序的程序

778
00:55:31,599 --> 00:55:35,440
您只需双击即可执行某个软件

779
00:55:35,440 --> 00:55:39,760
然后它将打开例如该程序的一个示例是microsoft

780
00:55:39,760 --> 00:55:43,359
word 程序的另一个例子是谷歌

781
00:55:43,359 --> 00:55:48,720
chrome 网络浏览器的另一个程序示例是 safari

782
00:55:48,720 --> 00:55:53,760
所以这些是程序，flutter 也有它自己的内置程序

783
00:55:53,760 --> 00:55:57,119
在您的计算机上做非常具体和重要的事情

784
00:55:57,119 --> 00:56:01,119
当然与颤振有关

785
00:56:01,119 --> 00:56:06,480
对不起，我必须去我的录音室看看，你不必做任何事情

786
00:56:06,480 --> 00:56:10,319
呃，这只是为了我

787
00:56:10,319 --> 00:56:14,240
Flutter 安装中的这些重要程序

788
00:56:14,240 --> 00:56:17,839
下载的需要暴露给你的整个系统

789
00:56:17,839 --> 00:56:22,000
这样您就可以轻松地使用颤振

790
00:56:22,000 --> 00:56:24,880
这意味着，例如，如果您来自设计

791
00:56:24,880 --> 00:56:28,400
背景它将允许您在您的任何地方

792
00:56:28,400 --> 00:56:32,400
终端只需写 figma 和 figma 应用程序就会打开

793
00:56:32,400 --> 00:56:36,880
这与这个文件夹中的颤动是一样的，你会看到我们在

794
00:56:36,880 --> 00:56:40,880
您下载安装的flutter文件夹并将其安装在此

795
00:56:40,880 --> 00:56:45,040
文件夹有一个名为 bin 的文件夹，意思是二进制

796
00:56:45,040 --> 00:56:49,680
这里有很多对整个系统很重要的东西

797
00:56:49,680 --> 00:56:54,319
跑，你看到颤动和飞镖这两个我说了很多但是是的，很漂亮

798
00:56:54,319 --> 00:56:59,920
很多两个所以这两个二进制呃可执行文件需要

799
00:56:59,920 --> 00:57:04,400
暴露在您的系统中，而在 Macintosh 上这样做的方法是

800
00:57:04,400 --> 00:57:08,799
按照此处记录的方式更改您的路径

801
00:57:08,799 --> 00:57:14,880
所以我喜欢这样做的方式是我去改变我的

802
00:57:14,880 --> 00:57:23,280
所以如果我做一个 vim 并查看我的 zsh rc 我可以看到我的路径并且你可以看到它

803
00:57:23,280 --> 00:57:27,040
在这里，你看我实际上已经把那个出口

804
00:57:27,040 --> 00:57:33,280
命令，正如这里所说，我把它放在这里你看

805
00:57:33,280 --> 00:57:37,599
老实说，这可能有点吓人

806
00:57:37,599 --> 00:57:42,160
它所做的就是让你看到我拥有的这个文件

807
00:57:42,160 --> 00:57:45,839
放在这里我不知道我是否真的可以放大它，如果你能看到

808
00:57:45,839 --> 00:57:48,720
我不知道在实际录音中看起来如何

809
00:57:48,720 --> 00:57:50,960
但这是

810
00:57:50,960 --> 00:57:57,440
有点像我在这个 Macintosh 上的终端的一组指令告诉它

811
00:57:57,440 --> 00:58:00,559
不同的点点滴滴

812
00:58:00,559 --> 00:58:03,839
二进制可执行文件放置如flutter

813
00:58:03,839 --> 00:58:08,480
dart python 等，所以当我安装一个软件时

814
00:58:08,480 --> 00:58:12,079
呃这样你看我们刚刚下载了一个包就放了

815
00:58:12,079 --> 00:58:17,359
我们计算机上的某个地方 呃 macintosh 不会知道里面的东西

816
00:58:17,359 --> 00:58:22,480
当然不会，所以你必须告诉它那些东西在哪里

817
00:58:22,480 --> 00:58:26,640
因为否则如果你不做这一步如果你不做第三步那么

818
00:58:26,640 --> 00:58:30,480
每次你想运行颤振时，你必须准确地指定在哪里

819
00:58:30,480 --> 00:58:33,680
颤振命令对我来说是如此，它会在我家

820
00:58:33,680 --> 00:58:37,119
文件夹开发工具颤动正在斜线颤动

821
00:58:37,119 --> 00:58:41,920
但如果你这样做，那么你可以在终端的任何地方写下颤振和

822
00:58:41,920 --> 00:58:46,559
您的 macintosh 或 linux 或 windows 计算机将知道在哪里可以找到

823
00:58:46,559 --> 00:58:49,119
就这样

824
00:58:49,119 --> 00:58:54,400
这样做将这些说明按照此处指定的方式放在您的路径中

825
00:58:54,400 --> 00:58:59,520
之后，您可能需要使用命令重新加载路径

826
00:58:59,520 --> 00:59:02,799
在 windows 和 linux 上称为源

827
00:59:02,799 --> 00:59:07,599
和我的 shrc 取决于你有哪个 shell

828
00:59:07,599 --> 00:59:12,400
可能必须将该指令放在其他地方

829
00:59:12,400 --> 00:59:17,680
在 Windows 上，我相信你将不得不修改你的 um

830
00:59:17,680 --> 00:59:22,799
环境变量我记得很多年前的这个

831
00:59:22,799 --> 00:59:26,559
让我们看看你是否必须这样做

832
00:59:26,559 --> 00:59:30,240
如果您希望在其中运行颤振命令，请更新您看到的路径

833
00:59:30,240 --> 00:59:34,319
常规 Windows 控制台从开始搜索结束采取这些步骤等等等等

834
00:59:34,319 --> 00:59:37,839
选择编辑帐户的环境变量，所以

835
00:59:37,839 --> 00:59:41,200
你真正要做的就是按照这些步骤我的意思是我

836
00:59:41,200 --> 00:59:44,799
通过基本上给你一些基础知识

837
00:59:44,799 --> 00:59:48,799
这些说明，这样您就可以抢占先机，但是这些说明

838
00:59:48,799 --> 00:59:53,359
将来也可以改变所以不要只依赖我告诉你的

839
00:59:53,359 --> 00:59:59,040
只需访问此处的安装网站

840
00:59:59,040 --> 01:00:04,240
开始安装并尝试跟随

841
01:00:04,240 --> 01:00:09,760
完成所有这些后提供的步骤

842
01:00:09,760 --> 01:00:13,359
你应该可以在你电脑上的任何地方

843
01:00:13,359 --> 01:00:18,799
只是说颤振医生现在颤振医生是一个非常重要的

844
01:00:18,799 --> 01:00:22,079
命令，因为它会查看您的颤振安装

845
01:00:22,079 --> 01:00:27,040
它可以确保它身体健康，正如这个词所表示的那样

846
01:00:27,040 --> 01:00:31,920
医生所以因为颤振本身就是一个框架

847
01:00:31,920 --> 01:00:35,359
它取决于许多其他的点点滴滴

848
01:00:35,359 --> 01:00:39,359
为了使颤振实际工作，您的计算机可能需要它

849
01:00:39,359 --> 01:00:42,480
最好嗯

850
01:00:42,480 --> 01:00:46,240
然后，flutter doctor 将通过一系列步骤来确保首先

851
01:00:46,240 --> 01:00:51,119
颤振已更新，例如您拥有 android

852
01:00:51,119 --> 01:00:55,359
您安装了 xcode 的工具链 chrome blah blah

853
01:00:55,359 --> 01:00:58,480
所以

854
01:00:58,480 --> 01:01:02,559
我的意思是目前这个结果在我的电脑上看起来相当不错，但如果你是

855
01:01:02,559 --> 01:01:05,680
第一次在你的电脑上运行颤振医生你可能会得到一些

856
01:01:05,680 --> 01:01:09,839
问题 呃 你可能会遇到的一些问题

857
01:01:09,839 --> 01:01:13,680
说找不到android sdk 找不到xcode

858
01:01:13,680 --> 01:01:17,440
发现是因为如果你在一个

859
01:01:17,440 --> 01:01:22,160
windows机器或linux机器那么你不能有xcode xcode就像

860
01:01:22,160 --> 01:01:25,599
苹果提供的软件

861
01:01:25,599 --> 01:01:31,119
不幸的是，它只能在 mac os 上运行，它用于

862
01:01:31,119 --> 01:01:35,599
编译或创建

863
01:01:35,599 --> 01:01:42,160
mac os ios 和 ipad os 软件所以虽然你可以运行 flutter

864
01:01:42,160 --> 01:01:47,680
在你的 linux 和你的 windows 机器上没有问题你

865
01:01:47,680 --> 01:01:53,680
将无法生成或测试在

866
01:01:53,680 --> 01:02:00,079
不幸的是，除非您可以访问 xcode，否则 iphone

867
01:02:00,079 --> 01:02:03,680
最简单的方法当然是拥有一台 Macintosh

868
01:02:03,680 --> 01:02:07,599
那是不幸的，因为不幸，因为是的

869
01:02:07,599 --> 01:02:12,079
呃，其他平台不可用

870
01:02:12,079 --> 01:02:19,039
所以你已经运行了颤振医生，它是

871
01:02:19,039 --> 01:02:23,039
它基本上会告诉你，好吧，现在我假设你在

872
01:02:23,039 --> 01:02:27,119
macintosh 它会告诉你好吧呃 xcode 例如呃你需要

873
01:02:27,119 --> 01:02:31,440
安装xcode，方法是你需要在你的电脑上打开应用商店

874
01:02:31,440 --> 01:02:37,599
计算机，只需在此处输入 xcode，然后在您的计算机上安装 xcode

875
01:02:37,599 --> 01:02:40,480
电脑嗯

876
01:02:40,480 --> 01:02:44,400
所以取决于我现在不知道哪个版本是最新的，但是

877
01:02:44,400 --> 01:02:48,480
如果您正在尝试开发颤振应用程序，并且还要确保

878
01:02:48,480 --> 01:02:52,079
它们在您的 ios 手机或 ios 模拟器上运行

879
01:02:52,079 --> 01:02:56,240
如果你在 Mac 上，那么你需要安装 xcode 对不起，如果你在 linux 上

880
01:02:56,240 --> 01:02:59,920
电脑或windows你不必做这一步实际上你不能做

881
01:02:59,920 --> 01:03:04,000
不幸的是这件事

882
01:03:04,000 --> 01:03:08,640
所以一旦你完成了，你还需要确保

883
01:03:08,640 --> 01:03:14,000
你已经安装了开发开发者工具

884
01:03:14,000 --> 01:03:20,400
对于 xcode，让我们看看我们如何做到这一点 开发人员工具 xcode

885
01:03:20,400 --> 01:03:24,400
命令行工具对

886
01:03:24,400 --> 01:03:26,960
让我们看看安装

887
01:03:26,960 --> 01:03:30,400
从终端有一个可以执行的命令

888
01:03:30,400 --> 01:03:36,079
为了做到这一点，该命令实际上看起来像这样

889
01:03:36,079 --> 01:03:40,000
在这里，我将放大它，以便您看到

890
01:03:40,000 --> 01:03:42,319
更好的嗯

891
01:03:42,319 --> 01:03:47,440
它说 sudo xcode select install 所以你需要发出该命令

892
01:03:47,440 --> 01:03:51,440
你的终端，所以如果我这样做，它会说密码是什么，我将输入我的

893
01:03:51,440 --> 01:03:55,200
密码，它说他们已经安装了所以

894
01:03:55,200 --> 01:03:59,280
如果您还没有这样做，请继续执行此命令以

895
01:03:59,280 --> 01:04:04,799
为您的 xcode 安装命令行工具

896
01:04:04,799 --> 01:04:10,799
现在您需要的 xcode 之后的下一部分是

897
01:04:10,799 --> 01:04:15,280
让我们看看我是否真的能提出来，所以我们谈到了颤振医生

898
01:04:15,280 --> 01:04:18,880
那是颤振医生，我们还谈到了安装 xcode 所以我现在

899
01:04:18,880 --> 01:04:24,160
提出来有点晚了，但现在下一步是安装

900
01:04:24,160 --> 01:04:27,839
安卓工作室所以

901
01:04:27,839 --> 01:04:32,480
android studio 就像 xcode 的等价物，但用于编写

902
01:04:32,480 --> 01:04:37,440
android特定应用程序现在为了写flutter

903
01:04:37,440 --> 01:04:42,160
您不需要 android studio 本身但您需要的应​​用程序

904
01:04:42,160 --> 01:04:45,200
现在的sdk管理器

905
01:04:45,200 --> 01:04:49,760
ios和android都嗯

906
01:04:49,760 --> 01:04:52,880
对于程序员来说，他们为你提供了一个叫做 sdk 的东西，就像

907
01:04:52,880 --> 01:04:57,760
Flutter 是一个 sdk 或工具包 ios 和 android 也为您提供

908
01:04:57,760 --> 01:05:00,880
sdk 以编写本机应用程序

909
01:05:00,880 --> 01:05:06,480
而且由于颤振利用每个平台的这些本机功能

910
01:05:06,480 --> 01:05:11,520
例如创建一个与 ios 或 android 兼容的应用程序

911
01:05:11,520 --> 01:05:17,039
它将使用原生的 uh 组件或抱歉或原生的

912
01:05:17,039 --> 01:05:20,960
名为xcode的软件

913
01:05:20,960 --> 01:05:25,119
抱歉主要叫ios sdk和android sdk

914
01:05:25,119 --> 01:05:29,520
所以你需要下载 android studio 才能访问 sdk manager 所以

915
01:05:29,520 --> 01:05:34,160
您现在可以在下载时自行安装 android sdk xcode

916
01:05:34,160 --> 01:05:38,720
最新版本的 xcode 它带有最新版本的 ios sdk

917
01:05:38,720 --> 01:05:42,960
但 android studio 不会那样做，等一下，是的，它可能在

918
01:05:42,960 --> 01:05:45,599
最新版本，但我们可以检查一下

919
01:05:45,599 --> 01:05:49,599
所以如果你去你的浏览器，然后说 android studio

920
01:05:49,599 --> 01:05:54,720
然后你打开 developerandroid.com 让我们去那里

921
01:05:54,720 --> 01:05:59,039
然后你可以点击下载android studio然后有

922
01:05:59,039 --> 01:06:03,680
下载选项，你可以看到有适用于 windows mac 和 linux 的

923
01:06:03,680 --> 01:06:08,160
那么请继续下载呃

924
01:06:08,160 --> 01:06:13,119
你的 android 工作室，我可以看到 for macintosh 是一个包，所以你可以

925
01:06:13,119 --> 01:06:16,559
轻松安装，您不必解压缩任何东西，对于 Windows 也是

926
01:06:16,559 --> 01:06:21,920
就像一个可执行文件，所以 tar gz 也适用于 linux 所以

927
01:06:21,920 --> 01:06:26,960
现在假设您已经这样做了，现在在这样做之后，您应该

928
01:06:26,960 --> 01:06:31,440
能够调出android studio

929
01:06:31,440 --> 01:06:34,240
让我们来看看

930
01:06:34,240 --> 01:06:38,400
我现在把它带到这里

931
01:06:38,400 --> 01:06:43,039
当你打开你的 android studio 时，这里几乎是空的

932
01:06:43,039 --> 01:06:46,480
在屏幕上，您将获得一些如何使用 android studio 的提示和技巧，但是

933
01:06:46,480 --> 01:06:52,319
对你来说重要的是能够安装呃

934
01:06:52,319 --> 01:06:56,960
android sdk 所以如果你去工具

935
01:06:56,960 --> 01:07:01,119
我相信这里有一个sdk经理

936
01:07:01,119 --> 01:07:06,880
所以只要确保你为我安装了一个 sdk 我有 android

937
01:07:06,880 --> 01:07:09,680
12 安装在这里，所以确保你有

938
01:07:09,680 --> 01:07:15,359
Flutter 为您准备好使用的这些 sdk 之一

939
01:07:15,359 --> 01:07:21,520
一旦你这样做了，那么当你跑步时，你的嗯

940
01:07:21,520 --> 01:07:25,280
混乱医生命令

941
01:07:25,280 --> 01:07:30,240
而关于 android sdk 的部分将

942
01:07:30,240 --> 01:07:32,480
在这里打勾

943
01:07:32,480 --> 01:07:37,440
呃，对不起，android工作室就是这样，所以我们已经谈过了

944
01:07:37,440 --> 01:07:40,400
android tool chain 这是你可以看到的 android sdk

945
01:07:40,400 --> 01:07:44,000
我们已经讨论过 xcode chrome 只是一个网络浏览器，如果你愿意，你可以拥有

946
01:07:44,000 --> 01:07:48,240
如果你正在为 web 开发应用程序颤振应用程序，它是

947
01:07:48,240 --> 01:07:51,440
必要的嗯

948
01:07:51,440 --> 01:07:55,599
然后这你可能是如果你刚刚开始使用颤振你是

949
01:07:55,599 --> 01:07:59,760
不会勾选这个 vs 代码部分，因为 vs 代码是

950
01:07:59,760 --> 01:08:05,119
a 代码编辑器 由 提供的开源代码编辑器

951
01:08:05,119 --> 01:08:09,760
微软，这是我要去的代码编辑器

952
01:08:09,760 --> 01:08:14,480
用于整个课程

953
01:08:14,480 --> 01:08:17,679
老实说，我已经尝试过 android studio 并且我已经尝试过 vs 代码

954
01:08:17,679 --> 01:08:21,120
Flutter 开发，我强烈推荐你使用 vs code

955
01:08:21,120 --> 01:08:26,000
只是因为它的纯粹性能它是因为它的简单性

956
01:08:26,000 --> 01:08:31,920
扩展和它的能力只是真正专注于一个

957
01:08:31,920 --> 01:08:35,920
简单的编辑器，不会用很多花里胡哨的东西来打扰你，所以

958
01:08:35,920 --> 01:08:39,839
尽管有些人使用 android studio 进行颤振开发，但这是一种偏好

959
01:08:39,839 --> 01:08:43,120
有些人使用 vs 代码，所以我不认为

960
01:08:43,120 --> 01:08:47,440
一个比另一个好，这完全是一种偏好，所以

961
01:08:47,440 --> 01:08:52,880
这适用于 android studio 和 android sdk 所以现在让我们继续吧

962
01:08:52,880 --> 01:08:57,359
安装 Visual Studio 代码，这是我将用于此的工具

963
01:08:57,359 --> 01:09:00,640
当然，让我们打开一个新窗口，我

964
01:09:00,640 --> 01:09:05,520
要说安装Visual Studio代码，我要打开窗口

965
01:09:05,520 --> 01:09:09,359
在这里所以你看让我们去这里

966
01:09:09,359 --> 01:09:14,000
你可以下载你喜欢的电脑我选择的mac

967
01:09:14,000 --> 01:09:18,480
特别是对我来说，我有一台带有苹果硅的麦金塔电脑，所以

968
01:09:18,480 --> 01:09:21,920
然后我选择这个带有苹果硅的mac 然后它会下载

969
01:09:21,920 --> 01:09:26,000
自动为您提供，所以我认为或实际上只有大约 200 兆字节

970
01:09:26,000 --> 01:09:29,359
仅在您完成之后才 100 兆字节

971
01:09:29,359 --> 01:09:34,719
在Macintosh上你会去把它放在呃

972
01:09:34,719 --> 01:09:39,679
在您的应用程序文件夹中，所以我实际上要删除我

973
01:09:39,679 --> 01:09:42,719
刚刚下载，因为我已经有了vs代码

974
01:09:42,719 --> 01:09:46,839
在我的系统上

975
01:09:46,839 --> 01:09:52,960
所以这是视觉工作室代码

976
01:09:52,960 --> 01:09:57,440
所以让我们现在就开始吧，现在我们已经做到了

977
01:09:57,440 --> 01:10:00,560
我要谈一点

978
01:10:00,560 --> 01:10:04,800
谈谈我们将要使用的一些扩展

979
01:10:04,800 --> 01:10:08,880
视觉工作室代码，所以让我打开我的终端

980
01:10:08,880 --> 01:10:12,560
嗯，你知道我们不需要那个，让我们走吧

981
01:10:12,560 --> 01:10:19,199
调出 Visual Studio Code 嗯，然后我实际上已经有这么多视觉

982
01:10:19,199 --> 01:10:24,080
工作室代码窗口打开，呃，但我只能说新窗口，所以你

983
01:10:24,080 --> 01:10:29,360
看看 Visual Studio 代码的样子，然后

984
01:10:29,360 --> 01:10:33,120
让我们看看不要再显示了，所以这几乎是 Visual Studio 代码的方式

985
01:10:33,120 --> 01:10:36,560
看起来这是一个非常简单的应用程序

986
01:10:36,560 --> 01:10:41,199
嗯，现在我们需要为这个例子做的是启用一些扩展

987
01:10:41,199 --> 01:10:45,600
现在我们要启用的第一部分扩展名为箭头

988
01:10:45,600 --> 01:10:50,400
镜头，您需要在左侧找到扩展名并输入

989
01:10:50,400 --> 01:10:56,480
错误，嗯，如果我可以输入空气并像那样说 airlance

990
01:10:56,480 --> 01:11:02,080
点击airlands，然后按启用或安装我相信它是这样称呼的

991
01:11:02,080 --> 01:11:06,320
错误镜头允许您查看错误，而无需单击

992
01:11:06,320 --> 01:11:10,239
具体的错误线基本上是这样

993
01:11:10,239 --> 01:11:15,040
它会在您编码时扩展整个错误，您可能会有一些

994
01:11:15,040 --> 01:11:18,320
代码中的错误，然后该错误将显示在前面

995
01:11:18,320 --> 01:11:22,400
你的脸是完整的，所以你不必按一个小按钮来

996
01:11:22,400 --> 01:11:26,719
能够看到完整的空气，所以这是一个很棒的扩展

997
01:11:26,719 --> 01:11:31,760
老实说，现在你需要的另一件事是

998
01:11:31,760 --> 01:11:35,920
一种叫做括号对着色器的东西和那个括号对

999
01:11:35,920 --> 01:11:41,120
colorizer 是已经安装在 Visual Studio 代码中的东西

1000
01:11:41,120 --> 01:11:46,239
它曾经是一个可以下载的扩展程序，但它非常受欢迎

1001
01:11:46,239 --> 01:11:50,400
微软已在内部将其添加到 Visual Studio 代码中，因此您没有

1002
01:11:50,400 --> 01:11:56,000
通过安装扩展来手动执行此操作，所以

1003
01:11:56,000 --> 01:12:01,280
既然我们已经讨论过下一步是实际安装颤振

1004
01:12:01,280 --> 01:12:05,679
和飞镖扩展，所以在这里只需输入

1005
01:12:05,679 --> 01:12:09,840
颤振这样做，然后就

1006
01:12:09,840 --> 01:12:13,920
单击我已经安装的安装按钮

1007
01:12:13,920 --> 01:12:17,760
颤动这里有一个禁用按钮

1008
01:12:17,760 --> 01:12:22,080
扩展，然后你还需要 dart 扩展，所以只需输入 dart 和

1009
01:12:22,080 --> 01:12:25,920
然后也安装它

1010
01:12:25,920 --> 01:12:31,520
所以在这两个安装之后

1011
01:12:31,520 --> 01:12:39,120
我们还需要安装另一个很棒的扩展名为 block bloc

1012
01:12:39,120 --> 01:12:42,800
我不打算详细介绍什么是块，因为我们将学习

1013
01:12:42,800 --> 01:12:47,840
关于课程稍后会阻塞很多，但这只是一个很棒的

1014
01:12:47,840 --> 01:12:52,239
随着我们继续，您将了解它的扩展，所以

1015
01:12:52,239 --> 01:12:56,640
我现在无法确切解释它是什么，但只需安装它，我

1016
01:12:56,640 --> 01:13:01,600
我保证稍后会告诉你更多关于阻塞的信息

1017
01:13:01,600 --> 01:13:07,760
所以这基本上是安装一个块

1018
01:13:07,760 --> 01:13:10,239
现在当你启动你的视觉工作室时

1019
01:13:10,239 --> 01:13:13,360
代码它可能看起来不像它为我做的那样

1020
01:13:13,360 --> 01:13:17,920
那是因为我在我的 Visual Studio 代码上安装了一个自定义主题

1021
01:13:17,920 --> 01:13:25,199
叫东京之夜，是非常非常醇厚的黑暗

1022
01:13:25,199 --> 01:13:29,760
所谓的主题和视觉工作室代码中的场景可以是

1023
01:13:29,760 --> 01:13:34,719
安装就像你安装一个扩展所以如果你喜欢我的主题你

1024
01:13:34,719 --> 01:13:39,120
非常欢迎进入扩展程序然后搜索 tokyo

1025
01:13:39,120 --> 01:13:42,320
晚上，只需安装它

1026
01:13:42,320 --> 01:13:46,159
所以它也有不同的主题颜色

1027
01:13:46,159 --> 01:13:51,679
这是我用的东京骑士其实我用的是这个东京之夜

1028
01:13:51,679 --> 01:13:55,040
所以如果你想要那个主题，请继续

1029
01:13:55,040 --> 01:13:58,880
安装它

1030
01:13:58,880 --> 01:14:02,080
现在我们已经谈到了我们来

1031
01:14:02,080 --> 01:14:05,840
我想基本上讨论的最后一点

1032
01:14:05,840 --> 01:14:11,520
在我们结束这一章之前，这是我们的第二章，所以

1033
01:14:11,520 --> 01:14:15,360
现在我们讨论了一些设置你的颤振

1034
01:14:15,360 --> 01:14:19,040
安装和设置你的文本编辑器，在这种情况下是可视的

1035
01:14:19,040 --> 01:14:22,800
下一章即第 3 章中的工作室代码

1036
01:14:22,800 --> 01:14:27,280
我们将讨论飞镖编程，所以在我们真正开始之前

1037
01:14:27,280 --> 01:14:30,800
开始编写 Flutter 应用程序，我们将讨论如何编写

1038
01:14:30,800 --> 01:14:33,920
呃飞镖中的代码

1039
01:14:33,920 --> 01:14:36,880
或者至少了解飞镖的基础知识

1040
01:14:36,880 --> 01:14:41,679
所以事不宜迟，让我们结束这一章，我会在

1041
01:14:41,679 --> 01:14:44,800
下一个大家好，欢迎来到第三个

1042
01:14:44,800 --> 01:14:49,199
本章中我们颤振课程的一章我想也许我们可以

1043
01:14:49,199 --> 01:14:54,560
稍微关注一下，实际上不是一点点，而是相当多的飞镖

1044
01:14:54,560 --> 01:14:58,640
正如你从上一章中知道的那样，我们现在知道 dart 是编程

1045
01:14:58,640 --> 01:15:01,280
有力量的语言

1046
01:15:01,280 --> 01:15:04,960
嗯，飘飘然

1047
01:15:04,960 --> 01:15:08,960
至少对我们有一点介绍是个好主意

1048
01:15:08,960 --> 01:15:12,880
飞镖它是如何工作的

1049
01:15:12,880 --> 01:15:16,159
不同的数据类型函数方法类和

1050
01:15:16,159 --> 01:15:19,840
这一章也和整个课程一样，我有点假设

1051
01:15:19,840 --> 01:15:24,800
你以前根本没有做过任何编程，所以我要拿东西

1052
01:15:24,800 --> 01:15:30,640
非常缓慢地，一次一个地把概念介绍给你

1053
01:15:30,640 --> 01:15:33,199
所以我会给你一些参考

1054
01:15:33,199 --> 01:15:38,560
阅读更多关于这些主题的信息，因为我们真的没有

1055
01:15:38,560 --> 01:15:44,080
在本课程中有很多时间详细介绍所有内容，所以

1056
01:15:44,080 --> 01:15:47,440
嗯，本章的目标是

1057
01:15:47,440 --> 01:15:51,760
基本上让你开始编程呃

1058
01:15:51,760 --> 01:15:58,159
飞镖，然后写你的应用程序，然后再为颤振

1059
01:15:58,159 --> 01:16:04,080
为了做到这一点，我们需要有一个项目

1060
01:16:04,080 --> 01:16:06,880
设置和项目我的意思是你需要有

1061
01:16:06,880 --> 01:16:11,440
设置了某种游乐场，以便您可以开始写作

1062
01:16:11,440 --> 01:16:16,560
dart 代码，然后您可以尝试使用它，例如电话或模拟器或

1063
01:16:16,560 --> 01:16:19,199
你现在有什么

1064
01:16:19,199 --> 01:16:23,840
很多人宁愿去暗垫，就像我们在前面看到的那样

1065
01:16:23,840 --> 01:16:28,480
章节并开始在飞镖垫中编写他们的代码

1066
01:16:28,480 --> 01:16:33,280
这是一种方法，但是因为在本课程的本专业人士的这一章中

1067
01:16:33,280 --> 01:16:35,679
我们要写

1068
01:16:35,679 --> 01:16:38,960
一个应用程序在 android 上为 ios 发布它

1069
01:16:38,960 --> 01:16:45,120
嗯，可以肯定地说，我们可以从字面上开始实际创造

1070
01:16:45,120 --> 01:16:50,960
我们此时此地的真正项目，以便我们以后可以在此基础上进行构建

1071
01:16:50,960 --> 01:16:54,560
而不是在飞镖垫中编写我们所有的代码

1072
01:16:54,560 --> 01:16:58,159
因为你可以通过写你的

1073
01:16:58,159 --> 01:17:03,199
在实际的颤振项目中编写代码，您可以习惯我们的工作方式

1074
01:17:03,199 --> 01:17:06,960
整体颤动，所以我认为这有点

1075
01:17:06,960 --> 01:17:11,600
将时间投入到后面的章节中，我们将在其中工作并继续

1076
01:17:11,600 --> 01:17:15,440
在同一个项目上工作，所以我们只需要设置一次

1077
01:17:15,440 --> 01:17:18,719
但同时

1078
01:17:18,719 --> 01:17:24,239
不融入太多我们的东西是有一点价值的

1079
01:17:24,239 --> 01:17:27,679
像我们在本章中所做的那样用我们将要做的事情来测试代码

1080
01:17:27,679 --> 01:17:31,199
如果您知道，请稍后在实际应用中

1081
01:17:31,199 --> 01:17:35,040
我的意思是所以我认为现在对我们来说会更好

1082
01:17:35,040 --> 01:17:38,960
只设置一个测试应用程序，然后

1083
01:17:38,960 --> 01:17:42,080
继续努力，然后当我们开始做实际的时候

1084
01:17:42,080 --> 01:17:46,239
应用程序然后我们为此创建一个单独的项目

1085
01:17:46,239 --> 01:17:50,400
现在让我们

1086
01:17:50,400 --> 01:17:56,080
一起做，所以我要把我的脸放在这里，这样你就可以看到整个

1087
01:17:56,080 --> 01:18:01,600
整个屏幕然后我将创建一个新终端

1088
01:18:01,600 --> 01:18:04,880
窗口并在屏幕上显示它，这样你就可以看到它，我要走了

1089
01:18:04,880 --> 01:18:10,480
增加字体，以便更容易发现我正在输入的内容

1090
01:18:10,480 --> 01:18:15,280
因此，让我们转到您尝试访问的文件夹或您所在的文件夹

1091
01:18:15,280 --> 01:18:20,239
为我保留你的项目我去开发项目

1092
01:18:20,239 --> 01:18:25,920
我在那里有一个名为flutter的文件夹，所以我试着把我所有的

1093
01:18:25,920 --> 01:18:31,679
然后在这里颤振项目以创建新的颤振

1094
01:18:31,679 --> 01:18:34,719
项目你要做的就是发出

1095
01:18:34,719 --> 01:18:37,440
颤振创建命令

1096
01:18:37,440 --> 01:18:41,840
这个创建命令已经在颤振中提供了，所以如果你说

1097
01:18:41,840 --> 01:18:44,880
这会发生什么颤动并找到实际的

1098
01:18:44,880 --> 01:18:48,800
如果您还记得我们安装的前几章中的更扁平的二进制文件

1099
01:18:48,800 --> 01:18:52,320
颤振它会找到颤振二进制文件

1100
01:18:52,320 --> 01:18:55,520
然后调用它的创建命令，所以如果你

1101
01:18:55,520 --> 01:18:59,920
说植绒创造它希望你有点喜欢

1102
01:18:59,920 --> 01:19:04,800
为它提供某种项目的名称，所以让我们说

1103
01:19:04,800 --> 01:19:10,480
学习后卫学习呃意思飞镖

1104
01:19:10,480 --> 01:19:13,360
所以这就是命令的二进制文件

1105
01:19:13,360 --> 01:19:19,120
那是项目的名称，好吧，嗯，这是创建项目的最简单方法

1106
01:19:19,120 --> 01:19:22,960
至少在我看来，新的浮动颤振项目让我们执行它

1107
01:19:22,960 --> 01:19:27,040
命令

1108
01:19:27,040 --> 01:19:31,840
它会做它的事，然后我要做的就是像你一样

1109
01:19:31,840 --> 01:19:36,719
可以看到它创建了一个名为 learning dart 的新文件夹

1110
01:19:36,719 --> 01:19:41,280
所以我们走吧，我要说 cd learning dart

1111
01:19:41,280 --> 01:19:46,159
然后我将发出一个名为 code dot 的命令

1112
01:19:46,159 --> 01:19:51,600
我实际上可以把它向右一点，这样你也可以

1113
01:19:51,600 --> 01:19:55,520
这样做，这样你就可以看到我在输入什么

1114
01:19:55,520 --> 01:20:00,080
如您所见，我已经编写了代码点，而代码的作用就是它

1115
01:20:00,080 --> 01:20:03,120
调出 Visual Studio 代码，所以它就像一个

1116
01:20:03,120 --> 01:20:07,040
您可以发出命令以获取 Visual Studio 代码和

1117
01:20:07,040 --> 01:20:11,600
嗯，如果我只是调出 Visual Studio 代码

1118
01:20:11,600 --> 01:20:14,880
它现在的样子，例如你可以看到它

1119
01:20:14,880 --> 01:20:19,600
现在看不到，但这是因为我这里有一个单独的屏幕，我会

1120
01:20:19,600 --> 01:20:23,840
调出 Visual Studio 代码，您可以在此处手动查看

1121
01:20:23,840 --> 01:20:27,920
有能力的地方就有很好的延伸

1122
01:20:27,920 --> 01:20:32,480
用于 Visual Studio 代码以安装此代码

1123
01:20:32,480 --> 01:20:36,800
在您的路径中的终端中为您提供快捷方式，所以如果您说出哪个代码

1124
01:20:36,800 --> 01:20:42,239
它只是说用户本地 bin 代码，所以它只是一个可执行文件，允许

1125
01:20:42,239 --> 01:20:47,120
然后你用这样的路径打开 Visual Studio 代码，这样你就可以说打开一个

1126
01:20:47,120 --> 01:20:52,880
此文件夹中的 Visual Studio 代码，因此您可以只说代码

1127
01:20:52,880 --> 01:20:56,639
点所以你可以在视觉工作室做到这一点

1128
01:20:56,639 --> 01:21:02,320
您可以通过在 macintosh 上执行 um 命令 shift p 来允许安装代码

1129
01:21:02,320 --> 01:21:05,520
或控制 shift p 我相信 windows

1130
01:21:05,520 --> 01:21:07,760
和linux

1131
01:21:07,760 --> 01:21:11,520
这里有一个小命令，上面写着 shell 命令安装代码

1132
01:21:11,520 --> 01:21:15,360
路径中的命令，所以如果你执行一次，那么它已经为你设置好了

1133
01:21:15,360 --> 01:21:20,000
你不必再这样做了，所以如果你想能够说代码

1134
01:21:20,000 --> 01:21:24,320
在终端中点并打开当前文件夹

1135
01:21:24,320 --> 01:21:27,360
在 Visual Studio 代码中，无需打开 Visual Studio 代码

1136
01:21:27,360 --> 01:21:32,400
手动然后打开文件然后我建议你做命令转移

1137
01:21:32,400 --> 01:21:36,239
p 或 Visual Studio 代码中的控制 shift p 取决于哪个

1138
01:21:36,239 --> 01:21:40,400
您正在使用的操作系统，然后选择 shell 命令安装代码

1139
01:21:40,400 --> 01:21:46,400
路径中的命令，所以我已经这样做了，所以我可以说代码点

1140
01:21:46,400 --> 01:21:51,600
我会在这里提出这个，你可以看到这是基础知识

1141
01:21:51,600 --> 01:21:54,840
一个简单的

1142
01:21:54,840 --> 01:22:00,320
嗯，你用颤振创建的颤振项目现在创建视觉工作室代码

1143
01:22:00,320 --> 01:22:04,880
有一个内置终端，所以我不必打开这个终端窗口

1144
01:22:04,880 --> 01:22:09,440
不再了，所以我要关闭它，我要让这个全屏

1145
01:22:09,440 --> 01:22:13,840
稍微增加一点，这样你就可以看得更清楚，也许我什至可以

1146
01:22:13,840 --> 01:22:18,080
删除右上角的这个颤振标志，这样你就可以看到

1147
01:22:18,080 --> 01:22:22,560
内容也好一点

1148
01:22:22,560 --> 01:22:25,600
所以这就是我们的创造

1149
01:22:25,600 --> 01:22:30,560
简单的颤振项目现在为了这个颤振项目运行

1150
01:22:30,560 --> 01:22:35,280
并且您可以运行此应用程序并喜欢继续测试您的

1151
01:22:35,280 --> 01:22:38,159
项目你必须选择一个目标和

1152
01:22:38,159 --> 01:22:41,600
你用命令 shift p 然后

1153
01:22:41,600 --> 01:22:45,920
选择颤振选择设备，所以你可以说颤振选择设备

1154
01:22:45,920 --> 01:22:49,120
输入命令 shift p 在 macintosh 和 ctrl 上

1155
01:22:49,120 --> 01:22:53,520
shift p 我相信在 linux 和 windows 中，所以命令 shift b 是

1156
01:22:53,520 --> 01:22:56,800
非常重要的命令，您将在本课程中大量使用它，所以

1157
01:22:56,800 --> 01:23:01,040
只是了解一下，嗯，然后我会说选择设备

1158
01:23:01,040 --> 01:23:05,280
我会选择，因为我在 Macintosh 上，正如你所看到的

1159
01:23:05,280 --> 01:23:11,520
前面我们已经安装了 xcode xcode 还附带了整个 ios sdk

1160
01:23:11,520 --> 01:23:18,239
还有模拟器我可以选择在ios模拟器上运行我们的应用程序

1161
01:23:18,239 --> 01:23:22,080
或者我可以选择在实际手机上运行它

1162
01:23:22,080 --> 01:23:24,719
现在为此

1163
01:23:24,719 --> 01:23:27,600
嗯，我相信我不知道你有没有谈过

1164
01:23:27,600 --> 01:23:31,520
已经关于 scrcpy 对你说实话我只是要去

1165
01:23:31,520 --> 01:23:38,320
搜索一下我的笔记，看看你有没有谈过这个

1166
01:23:38,320 --> 01:23:41,679
如果你给我一秒钟我会检查这里我相信我们会

1167
01:23:41,679 --> 01:23:46,960
在第六章中设置它，所以我们还没有设置 srccp cpy 所以为了这个目的

1168
01:23:46,960 --> 01:23:50,639
我只想说选择设备，我只想说启动 ios

1169
01:23:50,639 --> 01:23:55,760
模拟器，这样你就可以看到你的模拟器启动了

1170
01:23:55,760 --> 01:24:00,639
现在是我们测试应用程序的最佳方式，所以

1171
01:24:00,639 --> 01:24:05,760
虽然这是连接，我也可以带你看看

1172
01:24:05,760 --> 01:24:09,199
我们有你可以看到这里已经为我们创建了很多文件我们要去

1173
01:24:09,199 --> 01:24:12,880
浏览其中一些，但是最重要的文件之一

1174
01:24:12,880 --> 01:24:17,760
你需要习惯这个 lib slash main.dart 和这个

1175
01:24:17,760 --> 01:24:22,560
就像大部分代码都是这样写的

1176
01:24:22,560 --> 01:24:28,159
呃，这是他目前的内容，让我们看看它在做什么

1177
01:24:28,159 --> 01:24:32,000
模拟器我只是看看这里

1178
01:24:32,000 --> 01:24:35,600
嗯，它需要的时间比

1179
01:24:35,600 --> 01:24:38,480
预料之中，所以我要做的就是我要

1180
01:24:38,480 --> 01:24:42,159
手动杀死io模拟器这不应该这通常不会发生

1181
01:24:42,159 --> 01:24:44,960
但没关系，如果它确实发生了，那么你就知道如何处理它了

1182
01:24:44,960 --> 01:24:49,280
模拟器嗯，然后我就去

1183
01:24:49,280 --> 01:24:55,199
转到命令 shift p 选择设备，然后重新启动 ios 模拟器，这样就可以了

1184
01:24:55,199 --> 01:25:01,040
现在开始好吧，那是我们的模拟器，我是

1185
01:25:01,040 --> 01:25:04,560
实际上会稍微减小它的大小，因为我意识到

1186
01:25:04,560 --> 01:25:09,040
这是一个非常大的字体，所以

1187
01:25:09,040 --> 01:25:13,120
这是我们的主要 dart 文件 这就像颤动的地方

1188
01:25:13,120 --> 01:25:18,080
命令行 um command has created 它是已创建的文件

1189
01:25:18,080 --> 01:25:20,880
我们，所以我们不必玩太多，就可以在

1190
01:25:20,880 --> 01:25:24,560
就本章而言，我们是

1191
01:25:24,560 --> 01:25:29,280
只是看看嗯基本上有点像利用这个

1192
01:25:29,280 --> 01:25:33,600
呃代码，这样我们就可以将我们的代码注入其中，这样我们就可以学习一点飞镖

1193
01:25:33,600 --> 01:25:36,639
位，因此您不必像现在这样理解所有这些代码

1194
01:25:36,639 --> 01:25:41,840
有很多评论等等，所以就是这样

1195
01:25:41,840 --> 01:25:45,760
那部分，所以现在我们在这里，然后你可以看到我们有一点

1196
01:25:45,760 --> 01:25:50,000
模拟器在这里，为了在这个模拟器上运行这个应用程序，因为

1197
01:25:50,000 --> 01:25:53,120
你已经完成了颤振选择命令

1198
01:25:53,120 --> 01:25:57,840
你只是去运行，你说现在不调试就运行，所以

1199
01:25:57,840 --> 01:26:01,199
由于已经选择了模拟器，因此它可以理解

1200
01:26:01,199 --> 01:26:06,080
它需要为我的模拟器编译这个项目，所以

1201
01:26:06,080 --> 01:26:09,520
嗯，我们只是要给它一些

1202
01:26:09,520 --> 01:26:12,800
时间取决于您的机器，并且喜欢您的规格

1203
01:26:12,800 --> 01:26:16,080
机器这个命令可以在之间的任何地方

1204
01:26:16,080 --> 01:26:21,040
几秒钟到 30 秒甚至更多，我不知道多长时间

1205
01:26:21,040 --> 01:26:24,239
老实说，你需要一个新的颤振项目才能开始

1206
01:26:24,239 --> 01:26:29,920
在模拟器上运行但大约需要 21 秒或 22 秒

1207
01:26:29,920 --> 01:26:32,880
嗯，我会提出

1208
01:26:32,880 --> 01:26:36,159
现在的项目，这就像我不打算进入的基本颤振项目

1209
01:26:36,159 --> 01:26:40,080
有关其工作原理的详细信息，但如果您愿意，可以按加号按钮

1210
01:26:40,080 --> 01:26:43,280
但我要做什么我只是要关闭这个小部件检查器

1211
01:26:43,280 --> 01:26:46,719
自动打开，我只是要去

1212
01:26:46,719 --> 01:26:51,840
把它放低一点，这样我们就可以看到调试控制台了

1213
01:26:51,840 --> 01:26:56,000
所以这是为了设置我们的项目

1214
01:26:56,000 --> 01:27:00,000
这部分现在已经完成了我们需要谈论的第一件事

1215
01:27:00,000 --> 01:27:06,719
当我们开始谈论飞镖是关键字的概念

1216
01:27:06,719 --> 01:27:10,159
现在，因为我假设您没有使用任何编程语言

1217
01:27:10,159 --> 01:27:13,199
嗯之前的其他地方

1218
01:27:13,199 --> 01:27:17,840
您需要了解它们非常重要的关键字是什么

1219
01:27:17,840 --> 01:27:21,120
对基本理解任何编程语言很重要，并且

1220
01:27:21,120 --> 01:27:22,930
关键词是嗯

1221
01:27:22,930 --> 01:27:27,199
[音乐] 简明扼要的解释有

1222
01:27:27,199 --> 01:27:31,120
保留的字

1223
01:27:31,120 --> 01:27:34,320
你的编程语言

1224
01:27:34,320 --> 01:27:39,520
除了编程语言的意图之外，不能用于任何其他用途

1225
01:27:39,520 --> 01:27:43,840
据我所知，要使用的词听起来有点

1226
01:27:43,840 --> 01:27:48,080
很难，但我的意思是没有真正好的类比

1227
01:27:48,080 --> 01:27:51,440
就像你来自 figma 如果你来自设计界

1228
01:27:51,440 --> 01:27:56,800
关键词可能是因为在设计世界里你不是真的在说话

1229
01:27:56,800 --> 01:28:02,159
就您的产品或您的代码而言

1230
01:28:02,159 --> 01:28:06,000
你正在设计你的东西的软件，但是

1231
01:28:06,000 --> 01:28:09,760
当你接触到编程语言时，你知道它是一种语言，所以

1232
01:28:09,760 --> 01:28:15,760
单词在编程语言中表示东西，所以关键字就是它的名字

1233
01:28:15,760 --> 01:28:21,199
指示是在该特定特定词中具有特殊含义的词

1234
01:28:21,199 --> 01:28:24,239
语言，我在这里为你提供一个链接，你

1235
01:28:24,239 --> 01:28:30,000
可以签出，但我要打开它

1236
01:28:30,000 --> 01:28:34,719
把它带到屏幕上 稍微增加一点尺寸以便我们看得更清楚

1237
01:28:34,719 --> 01:28:38,880
呃，看看我的屏幕，是的，你可以看到这是

1238
01:28:38,880 --> 01:28:42,960
黑暗编程语言的文档，解释了什么是关键字

1239
01:28:42,960 --> 01:28:46,080
在 dart 中，您可以看到一些具有特殊含义的单词，例如

1240
01:28:46,080 --> 01:28:50,239
显示导入扩展异步等待中断

1241
01:28:50,239 --> 01:28:54,880
所以你可以说黑暗语言是由这些语言组成的

1242
01:28:54,880 --> 01:28:59,679
关键字几乎就是它就像一系列关键字一样

1243
01:28:59,679 --> 01:29:03,199
你告诉语言的事情，嘿，我想做点什么，然后它

1244
01:29:03,199 --> 01:29:06,000
说好的你想做什么然后你说好的我想做这个或这个

1245
01:29:06,000 --> 01:29:09,679
或者这个对于编程来说如此特殊的词

1246
01:29:09,679 --> 01:29:15,120
语言，以便它基本上理解你的意思

1247
01:29:15,120 --> 01:29:19,679
所以这是关键字，嗯，现在我们不必真正进入

1248
01:29:19,679 --> 01:29:22,639
关于关键字是什么的更多详细信息，但现在只需了解

1249
01:29:22,639 --> 01:29:27,280
关键字是编程语言中的特殊词

1250
01:29:27,280 --> 01:29:30,880
语言的大脑，这样你就可以与它交谈，它是你与

1251
01:29:30,880 --> 01:29:35,120
编程语言，让它理解你想做的事

1252
01:29:35,120 --> 01:29:37,920
请查看我在此处提供的链接以了解更多信息

1253
01:29:37,920 --> 01:29:42,080
关键词

1254
01:29:42,080 --> 01:29:47,199
好的，所以我们已经讨论了关键字，我将在我的笔记中检查它，以便

1255
01:29:47,199 --> 01:29:51,199
我们知道我们已经谈过了

1256
01:29:51,199 --> 01:29:55,679
现在我们需要谈论的下一个概念是

1257
01:29:55,679 --> 01:30:00,560
数据类型嗯

1258
01:30:00,560 --> 01:30:05,280
例如，如果您来自设计背景，那么您有不同的工具

1259
01:30:05,280 --> 01:30:09,520
例如，无论你是什么，你都可以在你的设计系统中使用

1260
01:30:09,520 --> 01:30:13,280
如果您使用的是 adobe 的产品，或者您使用的是 figma 或

1261
01:30:13,280 --> 01:30:16,719
无论您使用什么 visio 或任何工具

1262
01:30:16,719 --> 01:30:20,400
就像一组你可以使用的组件，例如你可以

1263
01:30:20,400 --> 01:30:25,600
拖入文本字段，或者您可以拖入图像字段或对不起图像或您

1264
01:30:25,600 --> 01:30:29,280
例如可以分配

1265
01:30:29,280 --> 01:30:34,480
为文本分配颜色，这样这些都是你可以做的事情

1266
01:30:34,480 --> 01:30:37,360
那个软件

1267
01:30:37,360 --> 01:30:41,760
现在是 dart 等编程语言中的数据类型

1268
01:30:41,760 --> 01:30:47,199
是那种类型的东西，例如你会说

1269
01:30:47,199 --> 01:30:51,440
我脑子里有一些数据 好吧 它是什么名字

1270
01:30:51,440 --> 01:30:57,679
我朋友的好吧，他的名字是 uh jack 或者其他什么

1271
01:30:57,679 --> 01:31:03,760
然后你会说 好吧 杰克是什么类型 是数字吗 不 像嗯

1272
01:31:03,760 --> 01:31:09,120
它是一个清单吗 是的 这是一个呃字符的清单 是的

1273
01:31:09,120 --> 01:31:15,360
嗯，好吧，那就是这种数据类型，或者你可以说

1274
01:31:15,360 --> 01:31:20,880
我在考虑我的年龄我的年龄假设我是 37。

1275
01:31:20,880 --> 01:31:25,600
好吧，什么是 37，它是一个清单，是的，它是一个清单

1276
01:31:25,600 --> 01:31:29,360
numbers 数字列表，但它本身也是一个

1277
01:31:29,360 --> 01:31:34,480
数字所以有这样的约定

1278
01:31:34,480 --> 01:31:38,080
不同编程语言和每种程序语言的约定

1279
01:31:38,080 --> 01:31:41,120
这些天你可以使用的语言几乎都有这个数据概念

1280
01:31:41,120 --> 01:31:44,800
types 数据类型如其名称所示

1281
01:31:44,800 --> 01:31:50,639
分配给的特定名称

1282
01:31:50,639 --> 01:31:55,679
分配给数据的特定名称

1283
01:31:55,679 --> 01:32:02,639
那也一定是特定类型的，例如在飞镖中你有

1284
01:32:02,639 --> 01:32:07,280
称为整数的数据类型，或者你有字符串，或者你有数组和集合

1285
01:32:07,280 --> 01:32:11,199
我们很快就会谈到，但现在只是一种数据类型，虽然它是

1286
01:32:11,199 --> 01:32:17,280
只是在一条数据上盖上印章，表明您属于这种特定类型

1287
01:32:17,280 --> 01:32:20,159
因此您可以将数据数据类型视为

1288
01:32:20,159 --> 01:32:23,920
国籍你可以说就像每个来自瑞典的人都是瑞典人

1289
01:32:23,920 --> 01:32:29,520
繁荣，这是他的数据类型，所以它只是基于他们的数据分类

1290
01:32:29,520 --> 01:32:34,239
外观或基于他们实际持有的东西

1291
01:32:34,239 --> 01:32:40,000
例如，你可以说这是一所充满工程师的大学

1292
01:32:40,000 --> 01:32:42,880
这些是软件工程师 这些是机械工程师 所以软件

1293
01:32:42,880 --> 01:32:48,320
工程师是一种数据类型，或者是一个人类型的类别类型，所以把

1294
01:32:48,320 --> 01:32:52,480
根据分类标记事物是一种什么数据类型

1295
01:32:52,480 --> 01:32:56,000
简而言之，我的意思是

1296
01:32:56,000 --> 01:32:59,360
你只需要知道它只是基于事物的分类

1297
01:32:59,360 --> 01:33:04,239
他们持有什么，有，有一个网站

1298
01:33:04,239 --> 01:33:08,400
你可以阅读 uh dart 数据类型，它就在这里

1299
01:33:08,400 --> 01:33:11,440
我不知道你有没有我有没有在这里提供

1300
01:33:11,440 --> 01:33:15,920
在下面的链接上，您可以看到 dart 核心库 html 所以

1301
01:33:15,920 --> 01:33:21,280
嗯，在这里您可以阅读有关 dart 数据类型的更多信息

1302
01:33:21,280 --> 01:33:24,639
但是我们现在不打算详细介绍所有这些

1303
01:33:24,639 --> 01:33:27,760
知道 dart 中的数据类型是或任何编程

1304
01:33:27,760 --> 01:33:32,320
基本上具有数据类型的语言是

1305
01:33:32,320 --> 01:33:37,360
基于外观或内容的数据

1306
01:33:37,360 --> 01:33:40,239
现在让我们谈谈

1307
01:33:40,239 --> 01:33:45,199
飞镖中称为常量的东西是常量

1308
01:33:45,199 --> 01:33:48,840
通常在编程语言中是

1309
01:33:48,840 --> 01:33:53,920
值无法更改的值

1310
01:33:53,920 --> 01:33:58,880
这有点元，但是呃让我们说例如

1311
01:33:58,880 --> 01:34:01,280
嗯

1312
01:34:01,280 --> 01:34:04,880
值 10 它是一个数字

1313
01:34:04,880 --> 01:34:09,520
它不能改变 10 是 10 并且永远是 10。

1314
01:34:09,520 --> 01:34:13,920
嗯或你的名字是一个常数，虽然

1315
01:34:13,920 --> 01:34:18,719
你可以去改变它，但只要那是你的名字，它就是一个常数，所以

1316
01:34:18,719 --> 01:34:22,719
嗯，我的意思是另一个例子

1317
01:34:22,719 --> 01:34:27,120
有很多值可以是常数，实际上是相当的

1318
01:34:27,120 --> 01:34:31,760
摘要让我现在能够解释，但只知道一个常数

1319
01:34:31,760 --> 01:34:36,960
是一个值，其内部数据在

1320
01:34:36,960 --> 01:34:40,239
在你编写程序期间

1321
01:34:40,239 --> 01:34:44,480
以及在您运行程序时

1322
01:34:44,480 --> 01:34:51,600
嗯，这有点像常数，但也有这个 uh 的概念

1323
01:34:51,600 --> 01:34:56,159
编译时间常数和运行时常数，我的意思是

1324
01:34:56,159 --> 01:34:59,040
你不必知道呃

1325
01:34:59,040 --> 01:35:02,960
现在喜欢那些不同类型的常量只是因为就像在 dart a

1326
01:35:02,960 --> 01:35:06,639
常量是一个常量，无论是运行时还是

1327
01:35:06,639 --> 01:35:11,760
编译时间是常数它只是一个常数，你很快就会看到，但是

1328
01:35:11,760 --> 01:35:15,360
我仍然认为了解两者之间的区别很重要

1329
01:35:15,360 --> 01:35:20,400
当您谈论编程时，编译时间和运行时

1330
01:35:20,400 --> 01:35:23,199
当你成为软件开发人员时，我希望到此结束

1331
01:35:23,199 --> 01:35:26,880
当然，如果您还没有成为一名软件开发人员，那么您实际上会成为一名软件开发人员

1332
01:35:26,880 --> 01:35:34,320
真的很棒，但是编译时间的概念和

1333
01:35:34,320 --> 01:35:36,800
运行时是非常重要的理解和

1334
01:35:36,800 --> 01:35:41,280
开发人员喜欢嗯区分是否

1335
01:35:41,280 --> 01:35:44,480
在编译期间发生了某些事情或在编译期间发生了某些事情

1336
01:35:44,480 --> 01:35:48,159
运行时和编译时间是

1337
01:35:48,159 --> 01:35:52,159
或者在我解释编译时间之前也许我应该解释编译编译在哪里

1338
01:35:52,159 --> 01:35:55,760
你把你正在写的程序放在这里

1339
01:35:55,760 --> 01:36:01,280
你告诉电脑我要你把它打包

1340
01:36:01,280 --> 01:36:06,080
这样我以后可以在 x 和 y 机器上运行它

1341
01:36:06,080 --> 01:36:10,800
所以打包东西的过程简单来说就是

1342
01:36:10,800 --> 01:36:16,239
用非常简单的术语来说，它被称为编译或编译好的，所以

1343
01:36:16,239 --> 01:36:19,119
嗯，从你开始写你的

1344
01:36:19,119 --> 01:36:22,880
用手和手指编程，直到你把它打包到你漂亮的地方

1345
01:36:22,880 --> 01:36:28,000
只是编译它没问题，但是当你像我们一样运行它时

1346
01:36:28,000 --> 01:36:32,400
目前在ios模拟器上

1347
01:36:32,400 --> 01:36:38,560
从您开始将程序输出到此设备的那个会话

1348
01:36:38,560 --> 01:36:42,400
并让它从那一刻开始运行你的程序

1349
01:36:42,400 --> 01:36:46,159
然后区别分为

1350
01:36:46,159 --> 01:36:48,400
运行时所以

1351
01:36:48,400 --> 01:36:52,800
你还没有编译时间和运行时，一个常量是一个值

1352
01:36:52,800 --> 01:36:57,679
在编译时和运行时相同，所以它的值不会改变，所以值

1353
01:36:57,679 --> 01:37:02,880
10 在您编写程序时是 10，并且保持 10 的值

1354
01:37:02,880 --> 01:37:07,440
当程序运行时

1355
01:37:07,440 --> 01:37:12,960
这是对常数的一个非常简单的解释，所以

1356
01:37:12,960 --> 01:37:15,360
现在让我们把

1357
01:37:15,360 --> 01:37:21,119
常量和数据类型 uh in practice now in this

1358
01:37:21,119 --> 01:37:25,840
flutter create 为您创建的项目

1359
01:37:25,840 --> 01:37:31,040
在这行代码中，你可以看到它说 void main we're not going to

1360
01:37:31,040 --> 01:37:35,679
确切地谈论那是什么，但只需在其末尾按 Enter 即可

1361
01:37:35,679 --> 01:37:39,360
写

1362
01:37:39,360 --> 01:37:42,560
决赛，我要告诉你什么是决赛

1363
01:37:42,560 --> 01:37:47,040
很快，只是说 name 等于 foo

1364
01:37:47,040 --> 01:37:50,639
好吧，这是

1365
01:37:50,639 --> 01:37:54,400
这里发生了很多事情，我会告诉你，嗯

1366
01:37:54,400 --> 01:37:58,159
这里实际发生了什么

1367
01:37:58,159 --> 01:38:02,239
但在我们真正了解所有这些细节之前，让我们先

1368
01:38:02,239 --> 01:38:08,320
在这里添加一个叫做常量的东西，所以我只是说 const age 是 27

1369
01:38:08,320 --> 01:38:13,360
或者是的 27. 正如你所看到的，这就是你在 dart 中编写代码的方式，你从一个

1370
01:38:13,360 --> 01:38:17,840
关键字通常或变量名或我们将要讨论的东西

1371
01:38:17,840 --> 01:38:21,760
它但是 const 是一个关键字

1372
01:38:21,760 --> 01:38:26,719
它告诉飞镖这里后面是一个名字

1373
01:38:26,719 --> 01:38:31,520
缺点我要写一些名字，然后我会用那个名字

1374
01:38:31,520 --> 01:38:37,360
基本上说好吧，我将 27 的值添加到这个

1375
01:38:37,360 --> 01:38:41,760
h 我很抱歉我的狗也有点吠叫

1376
01:38:41,760 --> 01:38:44,800
所以这里发生的事情是你

1377
01:38:44,800 --> 01:38:49,360
告诉飞镖我将 27 的值放入一个常数

1378
01:38:49,360 --> 01:38:53,600
打电话给 h，你可以稍后参考这个年龄

1379
01:38:53,600 --> 01:38:56,840
例如你可以说

1380
01:38:56,840 --> 01:39:02,159
const 年龄是年龄的两倍

1381
01:39:02,159 --> 01:39:07,760
你可以说等于年龄乘以二，这也是常数，因为

1382
01:39:07,760 --> 01:39:11,360
在编译时 word dart 基本上是试图理解你写的东西

1383
01:39:11,360 --> 01:39:16,239
它说好的，你说 27 然后你说 27 是一个常数，所以它的值是

1384
01:39:16,239 --> 01:39:18,800
永远不会改变 如果你告诉我 27

1385
01:39:18,800 --> 01:39:22,320
乘以 2 也是一个常数，因为

1386
01:39:22,320 --> 01:39:28,239
这边和这边都是编译时常量

1387
01:39:28,239 --> 01:39:32,800
所以这就是我们所说的常量它是一个指定的值

1388
01:39:32,800 --> 01:39:36,159
在编译期间，它不能改变

1389
01:39:36,159 --> 01:39:42,719
同样重要的是要知道注意你的学习守卫和

1390
01:39:42,719 --> 01:39:45,920
对不起，我只需要拿一些东西进去

1391
01:39:45,920 --> 01:39:50,400
我的笔记，以确保我已经向你解释了所有这些

1392
01:39:50,400 --> 01:39:55,920
你可以在这里看到 dart 中的每一行代码都需要以分号结尾

1393
01:39:55,920 --> 01:40:00,000
这告诉 dart 是的，你当然要开始新的代码行

1394
01:40:00,000 --> 01:40:04,480
你可以像这样放两行代码，但如果你只按保存

1395
01:40:04,480 --> 01:40:07,760
有一个程序在后台自动运行，称为 dart

1396
01:40:07,760 --> 01:40:12,159
fmt 这是 dart 格式化程序，它将格式化您的代码并为其添加前缀

1397
01:40:12,159 --> 01:40:16,000
所以如果我喜欢在这里放很多空格然后按保存

1398
01:40:16,000 --> 01:40:20,159
你可以看到在 mac 上执行 command s 或 control s on

1399
01:40:20,159 --> 01:40:24,560
保存 dart 格式化程序后的 linux 和 windows 将启动并格式化

1400
01:40:24,560 --> 01:40:29,280
给你的代码，所以只是一点提示

1401
01:40:29,280 --> 01:40:31,920
嗯好的

1402
01:40:31,920 --> 01:40:35,119
这些是常数，所以我们已经讨论过了

1403
01:40:35,119 --> 01:40:38,480
现在让我们稍微谈谈变量

1404
01:40:38,480 --> 01:40:42,800
一个变量通常是

1405
01:40:42,800 --> 01:40:48,480
任何包含非常数值的东西

1406
01:40:48,480 --> 01:40:51,840
我的意思是我认为这就像解释什么是最简单的方法

1407
01:40:51,840 --> 01:40:57,119
变量是一个变量，名称表明它可以变化

1408
01:40:57,119 --> 01:41:01,280
这意味着它所持有的数据不需要一直保持

1409
01:41:01,280 --> 01:41:04,960
同样，这意味着您可以从您启动程序的位置

1410
01:41:04,960 --> 01:41:07,920
实际上给这个变量赋值，你

1411
01:41:07,920 --> 01:41:12,400
也可以根据变量的类型更改该变量

1412
01:41:12,400 --> 01:41:14,560
嗯

1413
01:41:14,560 --> 01:41:19,760
还有这个概念

1414
01:41:19,760 --> 01:41:24,320
dart 中的最终变量，我们将很快讨论

1415
01:41:24,320 --> 01:41:29,840
在我们这样做之前，让我们去这里的这个主要功能，你可以说嗯

1416
01:41:29,840 --> 01:41:35,440
var name 是 fu，我所做的是我已经

1417
01:41:35,440 --> 01:41:41,040
创建了一个由 var 关键字指示的变量

1418
01:41:41,040 --> 01:41:47,280
其值为 foo 或者让我们说 alex

1419
01:41:47,280 --> 01:41:51,679
如果我想改变这个值，我可以用分号结束行

1420
01:41:51,679 --> 01:41:56,400
说这里是说名字等于安东尼

1421
01:41:56,400 --> 01:42:02,639
或者现在这基本上是我们分配一个新的

1422
01:42:02,639 --> 01:42:07,280
这个变量的值说 anthony um

1423
01:42:07,280 --> 01:42:12,480
正如我所说，也有一个没有的概念

1424
01:42:12,480 --> 01:42:15,119
飞镖的关键字称为

1425
01:42:15,119 --> 01:42:19,040
final 所以你可以说 final name equal

1426
01:42:19,040 --> 01:42:24,560
对 alex 来说，这有点奇怪，因为 final 也是一个变量

1427
01:42:24,560 --> 01:42:29,760
其值无法更改，因此您可能会喜欢

1428
01:42:29,760 --> 01:42:33,600
变量就像那不是一个常数

1429
01:42:33,600 --> 01:42:38,880
现在有一点限制，因为你可以试着喜欢说 const

1430
01:42:38,880 --> 01:42:42,400
瞄准亚历克斯，但这

1431
01:42:42,400 --> 01:42:48,159
正如您稍后将在课程中看到的那样

1432
01:42:48,159 --> 01:42:54,000
final 使您可以灵活地为变量赋值

1433
01:42:54,000 --> 01:42:58,080
稍后也许在创建它的过程中

1434
01:42:58,080 --> 01:43:03,600
但它仍然表明该变量的值不会

1435
01:43:03,600 --> 01:43:08,000
分配给它后改变一点

1436
01:43:08,000 --> 01:43:11,840
是的，这只是现在有点混乱，所以让我们

1437
01:43:11,840 --> 01:43:16,639
只是说一个变量就像一个常数，但它

1438
01:43:16,639 --> 01:43:20,400
值可以改变让我们把它留在那个好吧

1439
01:43:20,400 --> 01:43:24,960
呃，就是这样

1440
01:43:24,960 --> 01:43:29,679
好吧，现在我们谈了一点关于呃

1441
01:43:29,679 --> 01:43:35,679
变量让我们谈谈函数，所以我没有具体说明这是什么

1442
01:43:35,679 --> 01:43:38,800
只是因为我们还没有真正了解功能

1443
01:43:38,800 --> 01:43:42,239
但函数是一个主体

1444
01:43:42,239 --> 01:43:48,400
of code 是一系列代码行的分组，从 1 到 n 个 n 行

1445
01:43:48,400 --> 01:43:51,199
代码

1446
01:43:51,199 --> 01:43:54,960
逻辑上是分组的

1447
01:43:54,960 --> 01:44:00,719
它可以有一些属性呃一个是它的返回值这里指出

1448
01:44:00,719 --> 01:44:05,840
通过 void 其信息的另一部分是其

1449
01:44:05,840 --> 01:44:10,800
名称后跟一对括号

1450
01:44:10,800 --> 01:44:14,080
开括号和闭括号

1451
01:44:14,080 --> 01:44:19,119
您将在其中编写称为函数参数的内容

1452
01:44:19,119 --> 01:44:22,560
或者参数 um

1453
01:44:22,560 --> 01:44:27,040
这几乎就像你想象的那样

1454
01:44:27,040 --> 01:44:32,000
一个你在其中输入内容的框，它会进行一些处理，然后输出

1455
01:44:32,000 --> 01:44:36,239
那些东西无论它想输出什么

1456
01:44:36,239 --> 01:44:41,840
我们可以在这里为自己创建一个非常简单的函数

1457
01:44:41,840 --> 01:44:45,679
正如你以前所见或我所见

1458
01:44:45,679 --> 01:44:49,760
之前提到过你为函数编写的内容

1459
01:44:49,760 --> 01:44:54,880
开始是这个数据类型我的意思是什么数据来自这个函数

1460
01:44:54,880 --> 01:44:56,960
和嗯

1461
01:44:56,960 --> 01:45:00,159
在这里假设我们要添加

1462
01:45:00,159 --> 01:45:05,920
某人的名字和他们的姓氏之间有一个空格，所以如果我说 foo

1463
01:45:05,920 --> 01:45:11,920
作为名字和bar作为姓氏，那么全名应该是fu bar

1464
01:45:11,920 --> 01:45:15,440
和中间的空间

1465
01:45:15,440 --> 01:45:19,600
正如我所说，那么您需要先指定数据类型，您将返回什么

1466
01:45:19,600 --> 01:45:23,360
如果您查看了我之前提供的文档，则有一个数据

1467
01:45:23,360 --> 01:45:27,199
称为字符串的类型，它是一系列字符

1468
01:45:27,199 --> 01:45:32,480
基本上它可以是你家的名字或姓氏地址或其他任何东西

1469
01:45:32,480 --> 01:45:36,960
这是一个数据类型是字符串，所以我们说我们正在输出字符串，然后

1470
01:45:36,960 --> 01:45:39,679
你说好吧这个函数应该叫什么

1471
01:45:39,679 --> 01:45:42,480
嗯，你的飞镖有个约定

1472
01:45:42,480 --> 01:45:49,119
函数应该遵循骆驼命名约定，基本上是骆驼

1473
01:45:49,119 --> 01:45:53,440
例如，如果你用英语说我的函数应该被调用

1474
01:45:53,440 --> 01:45:57,199
得到全名，这是我的函数名，但你不能

1475
01:45:57,199 --> 01:46:00,880
在 dart 或几乎每个函数中的函数名称中都有空格

1476
01:46:00,880 --> 01:46:04,159
我当时知道的编程语言

1477
01:46:04,159 --> 01:46:08,960
删除所有空格，然后除了第一个单词

1478
01:46:08,960 --> 01:46:13,760
改变一切，因为 uh cons all the other words

1479
01:46:13,760 --> 01:46:19,600
uh 给 uh 的第一个字母大写，所以在你可以之前是这样的

1480
01:46:19,600 --> 01:46:24,960
实际上首先将它们更改为大写，然后删除间距，所以这是

1481
01:46:24,960 --> 01:46:27,600
这就是你应该如何写你的函数名

1482
01:46:27,600 --> 01:46:31,440
这个叫驼案全名ok

1483
01:46:31,440 --> 01:46:35,360
我们说我们还得开括号

1484
01:46:35,360 --> 01:46:41,199
现在让我们说

1485
01:46:41,199 --> 01:46:46,320
我们需要以某种方式指定我们将接受名字和姓氏

1486
01:46:46,320 --> 01:46:48,639
好名字

1487
01:46:48,639 --> 01:46:53,040
名字适合什么样的数据类型

1488
01:46:53,040 --> 01:46:56,560
它有点像一个字符串它是一个名称它是一系列字符所以让我们

1489
01:46:56,560 --> 01:47:00,400
只需在此处键入字符串，然后我们要取名字

1490
01:47:00,400 --> 01:47:04,719
我们现在知道骆驼案了，所以我们只说名字

1491
01:47:04,719 --> 01:47:08,480
是大写并删除间距所以

1492
01:47:08,480 --> 01:47:11,600
名字嘿这是参数

1493
01:47:11,600 --> 01:47:16,480
然后你想转到下一个参数所以只需说逗号

1494
01:47:16,480 --> 01:47:20,800
然后你想说字符串姓氏

1495
01:47:20,800 --> 01:47:23,280
你取名字和姓氏

1496
01:47:23,280 --> 01:47:26,560
现在我们还说，在你接受你的括号之后

1497
01:47:26,560 --> 01:47:30,719
你想去创建的参数就像你的大括号一样我不

1498
01:47:30,719 --> 01:47:36,800
实际上知道我之前是否提到过，但每个功能都是

1499
01:47:36,800 --> 01:47:44,000
它的主体或逻辑它要么紧随其后

1500
01:47:44,000 --> 01:47:47,440
大于我们稍后将要讨论的符号或

1501
01:47:47,440 --> 01:47:50,480
sco uh 是大括号，所以我们只是去

1502
01:47:50,480 --> 01:47:54,719
现在在那里使用大括号

1503
01:47:54,719 --> 01:47:58,639
你想在这里做什么 你想取名字并添加一个空格

1504
01:47:58,639 --> 01:48:01,920
名字，然后是姓氏，所以

1505
01:48:01,920 --> 01:48:05,440
你需要你你需要告诉飞镖这是你想要返回的数据

1506
01:48:05,440 --> 01:48:08,400
幸运的是有一个

1507
01:48:08,400 --> 01:48:11,920
嗯有一个关键字叫做return

1508
01:48:11,920 --> 01:48:15,520
告诉 dart 你想从函数中返回一些值，所以

1509
01:48:15,520 --> 01:48:19,199
然后你要做什么你会说我想返回什么

1510
01:48:19,199 --> 01:48:26,960
名字和我想添加一个空格单引号空格

1511
01:48:26,960 --> 01:48:30,239
我们姓氏

1512
01:48:30,239 --> 01:48:32,800
没错

1513
01:48:32,800 --> 01:48:35,840
我的意思是这是一个非常简单的实现

1514
01:48:35,840 --> 01:48:40,800
得到全名所以嗯但是实际上有一个

1515
01:48:40,800 --> 01:48:44,639
在 dart 中执行此操作的更好方法，我现在会向您解释

1516
01:48:44,639 --> 01:48:48,159
那是通过格式化你的字符串

1517
01:48:48,159 --> 01:48:52,639
假设你想基本上

1518
01:48:52,639 --> 01:48:57,840
告诉 dart 有点像你的结果是什么样的，你想问 dart

1519
01:48:57,840 --> 01:49:02,880
为您将名字和姓氏插入到该结果中

1520
01:49:02,880 --> 01:49:05,520
这就是你说的那样做

1521
01:49:05,520 --> 01:49:09,920
好的，我想在这里返回一个由单引号表示的字符串，并且

1522
01:49:09,920 --> 01:49:13,040
你也可以用双引号在飞镖中做一个字符串，但我要

1523
01:49:13,040 --> 01:49:16,239
稍后解释

1524
01:49:16,239 --> 01:49:19,280
所以假设你想要

1525
01:49:19,280 --> 01:49:24,159
在这里返回名字，但如果你说名字

1526
01:49:24,159 --> 01:49:27,360
这里将会发生的是它实际上会使用这个名字

1527
01:49:27,360 --> 01:49:30,960
就像你在字符串中写的那样，所以当

1528
01:49:30,960 --> 01:49:34,960
你得到这个返回值它实际上会说名字

1529
01:49:34,960 --> 01:49:40,000
不是你传递给这个的值，我知道它可能有点

1530
01:49:40,000 --> 01:49:43,280
当我说你传递给这个的价值时很难理解它是什么

1531
01:49:43,280 --> 01:49:46,960
甚至意味着呃，所以让我们实际测试一下

1532
01:49:46,960 --> 01:49:50,239
首先好的现在进入

1533
01:49:50,239 --> 01:49:53,599
这个构建功能，你可以在这里看到

1534
01:49:53,599 --> 01:49:57,520
第 16 行。现在对你来说可能不在第 16 行，但对我来说现在在

1535
01:49:57,520 --> 01:50:03,040
第 16 行。只需在我的应用程序有状态无状态小部件中找到此类并找到它

1536
01:50:03,040 --> 01:50:08,560
小部件构建在那里写的东西在这里创建一个新行

1537
01:50:08,560 --> 01:50:12,080
好吧，就说

1538
01:50:12,080 --> 01:50:16,320
全名或抱歉说打印

1539
01:50:16,320 --> 01:50:19,840
正如我在这里写的那样打印

1540
01:50:19,840 --> 01:50:23,040
然后就说

1541
01:50:23,040 --> 01:50:26,400
我们如何称呼我们的函数获取全名

1542
01:50:26,400 --> 01:50:29,280
看到这里，它说好的名字是什么

1543
01:50:29,280 --> 01:50:34,320
我会说引号谁和姓是bar

1544
01:50:34,320 --> 01:50:39,280
并以分号结尾，因此忽略此要求

1545
01:50:39,280 --> 01:50:45,520
现在很抱歉这个呃警告避免打印调用和生产代码所以

1546
01:50:45,520 --> 01:50:48,960
好的，所以现在我们调用这个函数

1547
01:50:48,960 --> 01:50:52,239
我的意思是它被称为调用它

1548
01:50:52,239 --> 01:50:56,800
调用它可能有其他名称，但通常

1549
01:50:56,800 --> 01:50:59,760
程序员调用这个调用调用函数

1550
01:50:59,760 --> 01:51:02,320
这些是你的参数

1551
01:51:02,320 --> 01:51:07,360
传递给这个函数好吧，所以呃

1552
01:51:07,360 --> 01:51:10,000
我的意思是有两个词

1553
01:51:10,000 --> 01:51:13,119
用于在编程世界中解释

1554
01:51:13,119 --> 01:51:17,119
这些参数与名称类似，称为参数或

1555
01:51:17,119 --> 01:51:20,719
论点我的意思是它们可以互换使用

1556
01:51:20,719 --> 01:51:24,480
它们的含义有点像让你陷入困境

1557
01:51:24,480 --> 01:51:28,800
没有人知道哪个是哪个，但您可以只使用参数或参数

1558
01:51:28,800 --> 01:51:31,360
每个人都会明白你在说什么，但有一点

1559
01:51:31,360 --> 01:51:34,560
有点区别，我不打算详细介绍，但是如果

1560
01:51:34,560 --> 01:51:38,639
有人只是说用你知道的参数或参数调用这个函数

1561
01:51:38,639 --> 01:51:42,560
至少你在做什么好吧 foo bar

1562
01:51:42,560 --> 01:51:46,880
现在我们正在打印它的值，你需要做的就是执行这段代码

1563
01:51:46,880 --> 01:51:51,360
是按 command s 你会看到结果

1564
01:51:51,360 --> 01:51:55,119
现在在这里输出我们在这里所做的

1565
01:51:55,119 --> 01:51:58,000
嗯

1566
01:51:58,000 --> 01:52:02,480
我们在这里所做的非常非常关键

1567
01:52:02,480 --> 01:52:06,480
颤振中称为热重载的功能

1568
01:52:06,480 --> 01:52:10,800
如您所见，我没有再次执行我的代码，我没有像运行按钮那样按下

1569
01:52:10,800 --> 01:52:15,280
我只是说现在保存在颤振中保存

1570
01:52:15,280 --> 01:52:20,400
触发一个动作叫 hot reload hot reload in flutter is it's a whole

1571
01:52:20,400 --> 01:52:24,719
它自己的话题，我不会深入探讨

1572
01:52:24,719 --> 01:52:28,639
但热重载真正的作用是

1573
01:52:28,639 --> 01:52:33,920
它寻找变化

1574
01:52:33,920 --> 01:52:37,440
在你的代码层次结构中没有太复杂我只是在尝试

1575
01:52:37,440 --> 01:52:40,800
表达我的句子

1576
01:52:40,800 --> 01:52:44,639
对，这样就不会太复杂了

1577
01:52:44,639 --> 01:52:47,840
本章它会查找您对

1578
01:52:47,840 --> 01:52:53,760
代码并仅执行那些更改

1579
01:52:53,760 --> 01:52:57,440
在执行这些更改的过程中，它可能会执行其他所有操作

1580
01:52:57,440 --> 01:53:01,679
那是在它的路上

1581
01:53:01,679 --> 01:53:06,159
通过保存，这个函数被神奇地调用了，我不是

1582
01:53:06,159 --> 01:53:08,719
马上进入

1583
01:53:08,719 --> 01:53:14,560
然后依次调用或调用我们的函数 getfullname 和

1584
01:53:14,560 --> 01:53:19,520
然后它的值将被传递给另一个名为 print 的函数

1585
01:53:19,520 --> 01:53:25,040
好吧，我希望这是有道理的

1586
01:53:25,040 --> 01:53:28,400
呃，正如你所看到的，结果并不是我们所期望的，它只是说

1587
01:53:28,400 --> 01:53:32,560
名字，那是因为我们在这里说返回

1588
01:53:32,560 --> 01:53:37,119
名字，正如你所看到的，如果你把这样的名字放在你的字符串中

1589
01:53:37,119 --> 01:53:40,480
它成为自己的字符串它与此无关

1590
01:53:40,480 --> 01:53:43,599
如果您删除这些引号，则不再

1591
01:53:43,599 --> 01:53:47,199
但是然后它说哦，名字是这个

1592
01:53:47,199 --> 01:53:51,199
您看到的参数实际上突出显示了它

1593
01:53:51,199 --> 01:53:55,599
然后如果我在 mac 上按 command s 或在 linux 和 windows 上按 control s 你会

1594
01:53:55,599 --> 01:53:58,480
看到 foo 被打印到屏幕上

1595
01:53:58,480 --> 01:54:01,840
好的，你也可以在这里说姓氏

1596
01:54:01,840 --> 01:54:05,119
会说吧

1597
01:54:05,119 --> 01:54:08,639
并且知道没有也注意到当我改变这些东西时它不是

1598
01:54:08,639 --> 01:54:12,880
立即自动执行我正在按下命令，所以只需保留它

1599
01:54:12,880 --> 01:54:17,760
请介意

1600
01:54:17,760 --> 01:54:20,639
所以这是一个功能，但在我们之前

1601
01:54:20,639 --> 01:54:27,360
继续解释我还想解释的函数的基础知识

1602
01:54:27,360 --> 01:54:30,800
一点关于

1603
01:54:30,800 --> 01:54:34,000
字符串格式，也就是我们说我们要输入名字和

1604
01:54:34,000 --> 01:54:38,159
姓氏，因为这是我们在开始时所做的名字加空格加

1605
01:54:38,159 --> 01:54:41,040
姓氏，这不是很漂亮，因为它就像在做字符串

1606
01:54:41,040 --> 01:54:45,840
以非常老套的方式以非常老套的方式串联

1607
01:54:45,840 --> 01:54:49,119
是的，我想我第一次说对了

1608
01:54:49,119 --> 01:54:55,920
但是你要在这里做的是 uh 使用 uh garth 的内置格式

1609
01:54:55,920 --> 01:54:59,119
能力，你首先说好的，我想退回一些

1610
01:54:59,119 --> 01:55:03,119
一种字符串，我想有名字

1611
01:55:03,119 --> 01:55:07,040
空格姓氏，但正如你之前看到的，如果

1612
01:55:07,040 --> 01:55:12,719
i command s 或 control s 它只是返回这些字符串完全一样

1613
01:55:12,719 --> 01:55:17,119
我写的不是参数你能做的就是投入一美元

1614
01:55:17,119 --> 01:55:20,000
在他们之前，你现在可以看到他们的颜色

1615
01:55:20,000 --> 01:55:22,880
根据您使用的主题或文本而变化

1616
01:55:22,880 --> 01:55:27,920
如果您使用的是 android studio，您使用的编辑器可能不会为它着色

1617
01:55:27,920 --> 01:55:30,960
同样的方式，或者如果您使用的是具有不同主题的视觉工作室

1618
01:55:30,960 --> 01:55:34,639
不同的平台可能你甚至不会改变颜色，但对我来说

1619
01:55:34,639 --> 01:55:38,639
至少你可以看到颜色的变化表明现在

1620
01:55:38,639 --> 01:55:44,480
我实际上并没有完全按照你写的那样返回字符串

1621
01:55:44,480 --> 01:55:49,199
除了返回这里的参数

1622
01:55:49,199 --> 01:55:53,760
所以命令这个，现在你可以看到结果是

1623
01:55:53,760 --> 01:55:57,679
满吧还行

1624
01:55:57,679 --> 01:56:03,520
这就是 dart 中函数的基础知识

1625
01:56:03,520 --> 01:56:07,280
在我们从功能开始之前，我还想解释一下

1626
01:56:07,280 --> 01:56:10,800
很快，嗯，一个功能不一定有

1627
01:56:10,800 --> 01:56:14,960
退回任何东西，这意味着

1628
01:56:14,960 --> 01:56:19,520
你可能有一个函数只想打印一些数据到

1629
01:56:19,520 --> 01:56:24,080
呃屏幕或到这里到调试控制台，你可以调用它

1630
01:56:24,080 --> 01:56:28,960
打印我的名字和括号和

1631
01:56:28,960 --> 01:56:32,719
大括号，你可以在这里看到

1632
01:56:32,719 --> 01:56:36,320
我可以不写任何函数的名称

1633
01:56:36,320 --> 01:56:40,000
要返回的数据类型，但这是您的约定

1634
01:56:40,000 --> 01:56:43,760
实际上告诉黑暗这是一个 void 函数

1635
01:56:43,760 --> 01:56:48,400
意思是 void 是一个关键词，正如我们在前面提到的那样

1636
01:56:48,400 --> 01:56:52,159
本章

1637
01:56:52,159 --> 01:56:56,239
void 是一个关键词，告诉黑暗这是一个不返回的函数

1638
01:56:56,239 --> 01:56:59,840
任何东西，正如你所看到的，dart 完全没问题

1639
01:56:59,840 --> 01:57:03,599
函数完全是空的，这意味着你说你不是

1640
01:57:03,599 --> 01:57:07,599
退回任何东西，你可能只是在这里做一些事情，所以我不是

1641
01:57:07,599 --> 01:57:11,920
会用一些错误来打扰你，说哦你忘了做某事

1642
01:57:11,920 --> 01:57:16,400
但是一旦您更改了您的返回值或返回数据类型

1643
01:57:16,400 --> 01:57:22,080
函数到例如字符串然后你会得到一个错误

1644
01:57:22,080 --> 01:57:26,080
说哦，是的，身体可能会正常完成，导致 null 成为

1645
01:57:26,080 --> 01:57:29,840
返回等等等等，您不必确切知道这意味着什么，但是

1646
01:57:29,840 --> 01:57:33,679
本质上这意味着你告诉飞镖你要返回一个

1647
01:57:33,679 --> 01:57:37,599
字符串，但你没有返回任何字面意思的东西

1648
01:57:37,599 --> 01:57:42,639
寻找返回关键字说哦你错过了所以你

1649
01:57:42,639 --> 01:57:48,480
可以通过说返回一个空字符串来消除那个错误

1650
01:57:48,480 --> 01:57:51,679
分号

1651
01:57:51,679 --> 01:57:56,080
所以我认为这几乎解释了

1652
01:57:56,080 --> 01:57:59,920
嗯的基础

1653
01:57:59,920 --> 01:58:03,920
老实说，还有很多要了解的功能

1654
01:58:03,920 --> 01:58:07,360
功能，正如我所说的功能也可以像

1655
01:58:07,360 --> 01:58:11,280
使用这种语法编写并且

1656
01:58:11,280 --> 01:58:16,639
当您的函数非常简单时使用此语法

1657
01:58:16,639 --> 01:58:20,960
它不需要分成不同的代码行

1658
01:58:20,960 --> 01:58:27,119
用分号，所以一个逻辑非常简单的函数你可以跳过

1659
01:58:27,119 --> 01:58:30,800
写这些方括号

1660
01:58:30,800 --> 01:58:36,239
没有大括号对不起，你可以说你明白我会的

1661
01:58:36,239 --> 01:58:40,639
去掉这个 put 等号

1662
01:58:40,639 --> 01:58:45,199
大于号删除右大括号

1663
01:58:45,199 --> 01:58:49,599
然后你可以删除return语句，就是这样

1664
01:58:49,599 --> 01:58:53,760
这是一个速记它是飞镖中的一个函数速记

1665
01:58:53,760 --> 01:58:58,560
你可以简单地使用它来简化一些人的代码

1666
01:58:58,560 --> 01:59:02,560
可能会喜欢有些人可能会反对

1667
01:59:02,560 --> 01:59:06,960
只是因为它是嗯它有点分裂你

1668
01:59:06,960 --> 01:59:10,960
将代码分成两种不同的样式，一些函数带有 uh 大括号

1669
01:59:10,960 --> 01:59:15,920
某些功能与此指针有关，并且取决于您的

1670
01:59:15,920 --> 01:59:18,880
老实说，你和你的团队

1671
01:59:18,880 --> 01:59:22,480
嗯，我通常从我的 um 中知道

1672
01:59:22,480 --> 01:59:26,000
根据我的经验，通常我们软件开发人员喜欢遵循

1673
01:59:26,000 --> 01:59:31,040
约定如此在一个项目中

1674
01:59:31,040 --> 01:59:34,000
开发人员可能会决定好吧，我们只是要遵循这个约定

1675
01:59:34,000 --> 01:59:38,560
并且因为使用大括号

1676
01:59:38,560 --> 01:59:45,360
涉及具有复杂和简单的返回语句的能力

1677
01:59:45,360 --> 01:59:51,040
在函数中，它实际上比使用这种语法更受欢迎

1678
01:59:51,040 --> 01:59:54,880
仅仅是因为这种语法不允许您将代码拆分为单独的

1679
01:59:54,880 --> 02:00:02,639
代码行必须全部在一个语句中，所以如果这有任何意义

1680
02:00:02,639 --> 02:00:08,239
所以我想我认为功能就是这样，现在我们已经讨论过了

1681
02:00:08,239 --> 02:00:15,440
函数 参数 返回值 我们讨论过的 变量 常量

1682
02:00:15,440 --> 02:00:20,320
dart 中的数据类型和关键字

1683
02:00:20,320 --> 02:00:25,599
这些是学习如何使用黑暗和

1684
02:00:25,599 --> 02:00:29,040
颤抖，我认为你需要花一些时间来试验它们，所以这样做

1685
02:00:29,040 --> 02:00:32,080
例如，您自己进行一些实验

1686
02:00:32,080 --> 02:00:35,360
不不只取名字和姓氏只取例如

1687
02:00:35,360 --> 02:00:39,280
某人的地址某人的年龄不同的玩一点点

1688
02:00:39,280 --> 02:00:42,639
不同的数据类型，如整数不同的数字，看看

1689
02:00:42,639 --> 02:00:46,480
我之前提供的链接在这里我会提出来

1690
02:00:46,480 --> 02:00:50,719
再次这样你就可以看到看看这个链接看看

1691
02:00:50,719 --> 02:00:55,440
在不同数据类型的不同示例中，因为在此

1692
02:00:55,440 --> 02:00:59,440
在即将到来的章节和其余的

1693
02:00:59,440 --> 02:01:03,119
本课程我们将使用许多不同类型的数据

1694
02:01:03,119 --> 02:01:05,920
类型所以我认为重要的是你有

1695
02:01:05,920 --> 02:01:10,000
也看一下文档

1696
02:01:10,000 --> 02:01:14,080
所以让我们在这一点上离开这一章

1697
02:01:14,080 --> 02:01:20,080
然后在下一章中，我们将更多地讨论更高级的

1698
02:01:20,080 --> 02:01:24,320
dart 编程语言功能，所以感谢您加入我的行列

1699
02:01:24,320 --> 02:01:29,760
下一章见，大家好，欢迎来到第四章

1700
02:01:29,760 --> 02:01:33,760
在上一章第 3 章的这个颤振课程中，我们

1701
02:01:33,760 --> 02:01:38,159
谈到了关键字数据类型常量变量和一些基础知识

1702
02:01:38,159 --> 02:01:42,560
函数，在本章中，我们将

1703
02:01:42,560 --> 02:01:46,480
正如您在此处的标题中看到的那样，我们将专注于控制

1704
02:01:46,480 --> 02:01:50,880
现在的声明和收藏

1705
02:01:50,880 --> 02:01:54,320
嗯，我假设你正在关注这些章节

1706
02:01:54,320 --> 02:01:58,000
嗯，按时间顺序排列，这样你就想去

1707
02:01:58,000 --> 02:02:03,119
一个接一个，所以我假设你已经建立了你的黑暗项目并且

1708
02:02:03,119 --> 02:02:07,599
你有某种模拟器或模拟器正在运行

1709
02:02:07,599 --> 02:02:11,440
所以事不宜迟，让我们来看看

1710
02:02:11,440 --> 02:02:15,920
嗯，我实际上要在这里调出字幕，然后我

1711
02:02:15,920 --> 02:02:22,560
将我的脸放在底部并提出我们创建的项目

1712
02:02:22,560 --> 02:02:26,960
在上一章中，所以这是在

1713
02:02:26,960 --> 02:02:31,520
此刻，如果我在 linux 和 windows 上执行命令或控制

1714
02:02:31,520 --> 02:02:34,719
然后你可以看到这里有一个运行按钮

1715
02:02:34,719 --> 02:02:38,159
然后它会做一个热重载

1716
02:02:38,159 --> 02:02:42,639
turn 调用这个构建函数，我们还不知道它是如何工作的

1717
02:02:42,639 --> 02:02:45,119
因为我还没有真正解释它，但是

1718
02:02:45,119 --> 02:02:49,119
我们做了什么，我们只是在这里然后调用了一个打印函数

1719
02:02:49,119 --> 02:02:52,960
我们的获取全名函数所以

1720
02:02:52,960 --> 02:02:57,199
我在这里要做的是让我们从构建中删除这段代码

1721
02:02:57,199 --> 02:03:00,880
让我们删除我们在这里写的所有东西，所以保留主要的

1722
02:03:00,880 --> 02:03:05,119
如您在此处看到的那样运行，然后保留我们的无状态小部件

1723
02:03:05,119 --> 02:03:09,840
稍后再谈 好吧 所以不如去创建一个新函数

1724
02:03:09,840 --> 02:03:13,599
这就是所谓的无效测试

1725
02:03:13,599 --> 02:03:16,960
好的，然后在构建函数中说

1726
02:03:16,960 --> 02:03:19,440
测试没问题

1727
02:03:19,440 --> 02:03:23,840
就像那样，目的是在这个函数中

1728
02:03:23,840 --> 02:03:27,360
我们将编写本章中的大部分代码，因此我们将

1729
02:03:27,360 --> 02:03:32,239
基本上测试一些代码是这个函数的目的所以

1730
02:03:32,239 --> 02:03:36,639
让我们来谈谈 if 和 else if 和 l's are

1731
02:03:36,639 --> 02:03:41,119
大多数编程语言中的控制语句允许

1732
02:03:41,119 --> 02:03:45,199
您根据条件分支代码

1733
02:03:45,199 --> 02:03:50,239
所以如果我们在这里创建一个final

1734
02:03:50,239 --> 02:03:53,920
如果您还记得前面的内容，则无法更改其值的变量

1735
02:03:53,920 --> 02:03:57,040
分配后无法更改其值的章节

1736
02:03:57,040 --> 02:04:01,599
假设最终名称是 foo 好吧

1737
02:04:01,599 --> 02:04:05,199
现在用相同的分号结束

1738
02:04:05,199 --> 02:04:10,880
if 语句基本上允许您检查值或条件

1739
02:04:10,880 --> 02:04:13,360
具有一定的

1740
02:04:13,360 --> 02:04:17,440
值或为真或假和

1741
02:04:17,440 --> 02:04:22,159
然后它允许你执行一些代码然后你也可以

1742
02:04:22,159 --> 02:04:27,119
将 else 语句附加到它，如果代码或如果

1743
02:04:27,119 --> 02:04:30,800
不满足条件我要告诉你这是怎么写的

1744
02:04:30,800 --> 02:04:34,159
if 语句的语法就是 if

1745
02:04:34,159 --> 02:04:38,400
if is an is 关键字所以你会说 if

1746
02:04:38,400 --> 02:04:42,719
然后你会打开和关闭括号，然后你会放 curly

1747
02:04:42,719 --> 02:04:47,199
像这样的括号是 if 的语法，并且在括号中你会放

1748
02:04:47,199 --> 02:04:52,560
你的情况，所以我会说在这种情况下，如果姓名和

1749
02:04:52,560 --> 02:04:56,880
我想例如检查名称是否为 foo

1750
02:04:56,880 --> 02:05:00,880
现在呃我们还没有来运营商

1751
02:05:00,880 --> 02:05:04,639
我们很快就会讨论运营商

1752
02:05:04,639 --> 02:05:10,880
但这是你可以看到这里我们说的最终名称等于 foo 这是

1753
02:05:10,880 --> 02:05:15,440
有点像 um 分配 uh 操作，那就是

1754
02:05:15,440 --> 02:05:18,800
飞镖中的运算符它被称为运算符

1755
02:05:18,800 --> 02:05:21,199
所以也有

1756
02:05:21,199 --> 02:05:24,000
并且由于这是一个分配，我们不想实际分配任何东西给名称

1757
02:05:24,000 --> 02:05:26,719
你想检查它是否具有一定的价值并且

1758
02:05:26,719 --> 02:05:32,000
也就是这个条件运算符等于等于

1759
02:05:32,000 --> 02:05:38,960
然后你会说好吧，如果它是 foo 那么例如 print

1760
02:05:38,960 --> 02:05:42,400
嗯，是的，这是 foo

1761
02:05:42,400 --> 02:05:46,560
然后用分号结束它，但是如果不满足此条件，您可以

1762
02:05:46,560 --> 02:05:52,159
想要执行另一段代码，然后你可以做其他

1763
02:05:52,159 --> 02:05:55,920
像那样，然后你会说

1764
02:05:55,920 --> 02:06:00,079
不，这不是 foo 好吧，是一个分号，所以我只是

1765
02:06:00,079 --> 02:06:05,520
去执行命令，你可以看到值或字符串是的，这是食物

1766
02:06:05,520 --> 02:06:10,880
打印到屏幕或此处的终端或调试控制台

1767
02:06:10,880 --> 02:06:14,480
你可以在这里有多个语句，所以你可以有更多的打印语句

1768
02:06:14,480 --> 02:06:18,239
在这里你基本上可以做任何你想做的事

1769
02:06:18,239 --> 02:06:24,800
else 现在也有可能写 if

1770
02:06:24,800 --> 02:06:28,480
语句有点没有大括号，但你看不到

1771
02:06:28,480 --> 02:06:33,040
他们经常这样做，我建议您实际上总是尝试将其作为惯例

1772
02:06:33,040 --> 02:06:37,679
如果可以的话，用大括号做但是有可能在a里面

1773
02:06:37,679 --> 02:06:42,239
你将与​​你的同事一起工作的代码库决定它是

1774
02:06:42,239 --> 02:06:48,239
可以使用没有大括号的 if 语句，其中非常简单和

1775
02:06:48,239 --> 02:06:52,320
基本上是单线所以让我告诉你

1776
02:06:52,320 --> 02:06:58,000
一个例子，你可以说如果 name 是 foo

1777
02:06:58,000 --> 02:07:03,760
你只会说 print yes this is foo 这也被完全接受

1778
02:07:03,760 --> 02:07:08,079
所以因为它是单行但如果你说

1779
02:07:08,079 --> 02:07:13,280
好的，我想要另一行打印你好世界

1780
02:07:13,280 --> 02:07:16,400
你可以看到它转到下一行，这意味着

1781
02:07:16,400 --> 02:07:21,360
无论您的

1782
02:07:21,360 --> 02:07:25,440
那里的条件，所以这完全脱离了你的 if 声明在这里

1783
02:07:25,440 --> 02:07:28,320
好的，我刚刚意识到这很

1784
02:07:28,320 --> 02:07:31,199
对我来说能够显示行号很重要

1785
02:07:31,199 --> 02:07:35,520
默认情况下，您的编辑器可能启用了行号，我通常禁用

1786
02:07:35,520 --> 02:07:39,520
基本上我自己工作时的行号

1787
02:07:39,520 --> 02:07:43,520
但是在与其他人谈论代码时，使用 line 非常有用

1788
02:07:43,520 --> 02:07:48,880
数字，因为我可以告诉你哦，看看第九行或者看看我的第十行

1789
02:07:48,880 --> 02:07:52,960
好的，这就是 if 和 else 的基础

1790
02:07:52,960 --> 02:07:58,159
现在你也可以拥有 if 就在 else so

1791
02:07:58,159 --> 02:08:05,280
例如，如果 name 是 fu

1792
02:08:05,280 --> 02:08:12,400
然后你做一些代码好吧你说 print yes it is foo

1793
02:08:12,400 --> 02:08:15,280
在大括号之后不是食物，那么你会

1794
02:08:15,280 --> 02:08:18,639
说 else 然后你可以说另一个 if

1795
02:08:18,639 --> 02:08:21,119
如果没问题，否则

1796
02:08:21,119 --> 02:08:25,360
然后在 if 之后是括号和大括号，如果你

1797
02:08:25,360 --> 02:08:29,599
记住之前的 if 它与它的语法完全相同

1798
02:08:29,599 --> 02:08:32,079
在这里，所以你几乎没有什么不同

1799
02:08:32,079 --> 02:08:35,679
你能看看如果然后如果

1800
02:08:35,679 --> 02:08:39,679
然后你把你的条件放在这里你会说如果名字

1801
02:08:39,679 --> 02:08:44,960
然后你可能只想说不是，那是另一个运算符

1802
02:08:44,960 --> 02:08:50,400
它是呃基本上是一个非运算符，所以它正在检查以确保这个

1803
02:08:50,400 --> 02:08:53,360
name 不是您提供给

1804
02:08:53,360 --> 02:08:56,639
右手边

1805
02:08:56,639 --> 02:09:00,159
然后你可以说 bar 和 print

1806
02:09:00,159 --> 02:09:05,280
这个值不是其他的

1807
02:09:05,280 --> 02:09:10,320
然后你可以把它包起来，你可以说打印我不

1808
02:09:10,320 --> 02:09:13,840
现在知道这是什么我很高兴我实际上

1809
02:09:13,840 --> 02:09:18,639
不小心遇到了这个问题，你现在可以看到编辑器有点

1810
02:09:18,639 --> 02:09:22,400
发疯了，飞镖不明白这句话是什么

1811
02:09:22,400 --> 02:09:26,079
正如我们之前谈到的那样

1812
02:09:26,079 --> 02:09:30,719
dart 中的字符串最好必须类似于用 single 创建的

1813
02:09:30,719 --> 02:09:34,639
引号但是如果您的字符串本身包含

1814
02:09:34,639 --> 02:09:39,040
单个代码例如在这种情况下这个词不要

1815
02:09:39,040 --> 02:09:44,960
包含一个代码然后飞镖有点像字符串一样混淆

1816
02:09:44,960 --> 02:09:49,520
在这里你可以看到它一直到现在它是绿色的所以

1817
02:09:49,520 --> 02:09:52,960
它在想，哦，字符串到此结束，但这一切是什么

1818
02:09:52,960 --> 02:09:57,440
然后如果你有这个问题

1819
02:09:57,440 --> 02:10:01,119
有两种方法可以解决你

1820
02:10:01,119 --> 02:10:05,360
scape你的单一代码，这是一个

1821
02:10:05,360 --> 02:10:10,960
那是一种软件开发术语，如果你听说的话

1822
02:10:10,960 --> 02:10:16,000
几乎只是意味着你是，你是

1823
02:10:16,000 --> 02:10:19,520
以某种方式包装它

1824
02:10:19,520 --> 02:10:23,840
那飞镖明白你不是字面意思你不是那个意思

1825
02:10:23,840 --> 02:10:28,159
我想在这里结束我的字符串，除了这需要转义并放入

1826
02:10:28,159 --> 02:10:32,400
字符串作为它自己的价值基本上有点难以解释，但我认为

1827
02:10:32,400 --> 02:10:36,320
你知道我的意思，嗯，所以这是一种方法，它有点脏

1828
02:10:36,320 --> 02:10:39,280
所以如果你遇到这个问题

1829
02:10:39,280 --> 02:10:44,079
最好将整个字符串用双引号括起来，这样

1830
02:10:44,079 --> 02:10:48,239
然后 dart 明白这里的任何内容都可以像单个代码一样

1831
02:10:48,239 --> 02:10:52,400
完全没问题，除非你真的想拥有

1832
02:10:52,400 --> 02:10:57,280
字符串中的 double co double uh 双引号

1833
02:10:57,280 --> 02:11:00,239
再次用双引号括起来，所以你会看到我是否在这里放了双引号

1834
02:11:00,239 --> 02:11:05,679
然后飞镖发疯了，所以你可以用这样的反斜杠来逃避它

1835
02:11:05,679 --> 02:11:09,920
因此，如果您的字符串中有单代码和双引号，那么您将拥有

1836
02:11:09,920 --> 02:11:13,199
要选择一个约定，要么将整个字符串包含在单个中

1837
02:11:13,199 --> 02:11:16,639
引号和转义你的单引号

1838
02:11:16,639 --> 02:11:21,280
在那个字符串里面，让双引号生效，或者你把你的整个

1839
02:11:21,280 --> 02:11:24,719
双引号中的字符串，然后您将

1840
02:11:24,719 --> 02:11:31,360
在字符串中转义你的双引号我希望我希望这是有道理的

1841
02:11:31,360 --> 02:11:34,480
所以就是

1842
02:11:34,480 --> 02:11:40,320
嗯 if and else in 嗯，简而言之，但在我继续之前，我有点想

1843
02:11:40,320 --> 02:11:44,239
在这里解释一个重要的概念，当 dart 执行这段代码时

1844
02:11:44,239 --> 02:11:48,320
一种逐行进行，所以它从第七行开始执行

1845
02:11:48,320 --> 02:11:51,199
这个测试功能，然后它来到这里

1846
02:11:51,199 --> 02:11:54,480
它说好的名字是 foo 好的，嗯

1847
02:11:54,480 --> 02:11:58,400
它实际上是说我们更喜欢 const 所以让我把它改成 const

1848
02:11:58,400 --> 02:12:01,280
好吧，嗯

1849
02:12:01,280 --> 02:12:04,880
如果 name 是 foo 它说没问题

1850
02:12:04,880 --> 02:12:08,880
好的，然后它就到这里了，但是让我们将其更改为 foo with

1851
02:12:08,880 --> 02:12:13,040
实际上，三重哦

1852
02:12:13,040 --> 02:12:18,320
是的，我们不要这样做，让我们将其保留为 foo 所以它说 if foo is if

1853
02:12:18,320 --> 02:12:20,880
名字是食物然后它说是的那是真的

1854
02:12:20,880 --> 02:12:25,760
然后它就在这里，但是你可以看到第 11 行

1855
02:12:25,760 --> 02:12:28,800
还说如果名字

1856
02:12:28,800 --> 02:12:33,440
不是 bar 那么它也应该执行这个

1857
02:12:33,440 --> 02:12:37,199
而且你可以看到 foo 不是 bar 所以

1858
02:12:37,199 --> 02:12:41,679
这种情况也是如此，但是这永远不会是

1859
02:12:41,679 --> 02:12:46,639
执行，那是因为当飞镖进入这些卷曲

1860
02:12:46,639 --> 02:12:50,639
括号然后它说好的我做了我必须做的我做了我的印刷声明

1861
02:12:50,639 --> 02:12:54,960
休息我忽略所以如果一个 if 语句有点像

1862
02:12:54,960 --> 02:12:58,800
是不是当它跌落时它会停下来

1863
02:12:58,800 --> 02:13:03,840
在其中一个 if 语句中，它有点说好的，我在整个过程中都完成了我的工作

1864
02:13:03,840 --> 02:13:09,040
如果 else 阻塞，那么我将在那之后执行代码，所以如果我清除

1865
02:13:09,040 --> 02:13:12,800
在这里控制台并按 command s 你可以看到它只说是它是 foo 它

1866
02:13:12,800 --> 02:13:17,440
不会来这里，但是如果你改变这个

1867
02:13:17,440 --> 02:13:22,000
um 条件，以便 dart 编译器或

1868
02:13:22,000 --> 02:13:25,840
基本上程序的执行不会落入第 10 行，它会

1869
02:13:25,840 --> 02:13:30,320
最终下降到第 12 行。所以你可以看到它说这个值不是

1870
02:13:30,320 --> 02:13:34,239
吧，所以当你写你的 if 语句和 else 语句时

1871
02:13:34,239 --> 02:13:38,239
小心一点，只要知道它有点像代码跳转

1872
02:13:38,239 --> 02:13:42,320
进入其中一个分支，它不会去其他分支并检查

1873
02:13:42,320 --> 02:13:47,679
他们基本上没事

1874
02:13:47,679 --> 02:13:53,520
好吧，那是为了 if 和 else

1875
02:13:53,520 --> 02:13:57,119
现在让我检查一下我们谈过的笔记

1876
02:13:57,119 --> 02:14:05,280
关于那个我们现在需要做的是谈论

1877
02:14:05,280 --> 02:14:09,760
运营商运营商

1878
02:14:09,760 --> 02:14:12,239
他们有三种不同的类型

1879
02:14:12,239 --> 02:14:19,360
运算符有前缀运算符中缀运算符和后缀运算符

1880
02:14:19,360 --> 02:14:21,840
和

1881
02:14:21,840 --> 02:14:27,360
我会向你解释我的意思是他们是如何工作的

1882
02:14:27,360 --> 02:14:31,679
我认为解释运营商可能最好我们谈论数字所以

1883
02:14:31,679 --> 02:14:35,040
让我们进入这个测试函数并删除我们编写的所有内容

1884
02:14:35,040 --> 02:14:42,000
在这里，让我说最后的 h 是 20。好吧，所以

1885
02:14:42,000 --> 02:14:46,239
嗯，现在我们创建了一个变量，其值

1886
02:14:46,239 --> 02:14:50,079
自旋分配后无法更改，因为我们创建了一个最终变量

1887
02:14:50,079 --> 02:14:55,360
其值为 20。好吧，如果你想计算这个值的一半，如何

1888
02:14:55,360 --> 02:14:59,760
你会那样做吗？那么有一个操作员可以做到这一点，那就是一个部门

1889
02:14:59,760 --> 02:15:04,079
运营商，所以你会说例如 final

1890
02:15:04,079 --> 02:15:08,000
正如我在

1891
02:15:08,000 --> 02:15:12,239
上一章做骆驼案的一个简单方法是说

1892
02:15:12,239 --> 02:15:18,480
一半只是用英文写改变了第一个字母

1893
02:15:18,480 --> 02:15:22,480
of like this 这里改变所有单词的第一个字母，除了 the

1894
02:15:22,480 --> 02:15:25,679
第一个单词大写，然后删除所有驼峰式空格

1895
02:15:25,679 --> 02:15:31,920
基本上，年龄的一半就是年龄，然后飞镖中有一个很棒的操作员

1896
02:15:31,920 --> 02:15:35,840
称为除法运算符，然后您会说

1897
02:15:35,840 --> 02:15:39,360
好的，然后你可以说打印一半

1898
02:15:39,360 --> 02:15:44,960
的 h 所以命令 s 说 10 没问题

1899
02:15:44,960 --> 02:15:49,840
这就是除法运算符，然后您将拥有

1900
02:15:49,840 --> 02:15:54,719
假设最后双倍的h

1901
02:15:54,719 --> 02:15:58,400
然后我们会说 h 乘以 2 有点像

1902
02:15:58,400 --> 02:16:03,520
星号是运算符，你可以看到

1903
02:16:03,520 --> 02:16:09,440
这两个运算符这个除法和乘法呃

1904
02:16:09,440 --> 02:16:12,639
乘法有点难说

1905
02:16:12,639 --> 02:16:18,079
运算符在固定运算符中，中缀运算符是具有

1906
02:16:18,079 --> 02:16:21,520
两个参数一个在它的右边，一个在它的左边我不知道你怎么能

1907
02:16:21,520 --> 02:16:25,199
实际上是的，每边一二一，我没有

1908
02:16:25,199 --> 02:16:29,520
知道我的视频是否像镜像一样，所以如果我的右手实际上是右手

1909
02:16:29,520 --> 02:16:34,639
你这边也是，所以我不知道是的，可能是

1910
02:16:34,639 --> 02:16:37,599
所以

1911
02:16:37,599 --> 02:16:43,599
当它们有两个值时，这些是中缀运算符

1912
02:16:43,599 --> 02:16:48,880
但是也有前缀运算符

1913
02:16:48,880 --> 02:16:51,840
例如，如果我

1914
02:16:51,840 --> 02:16:56,080
说最后 h 减 1

1915
02:16:56,080 --> 02:16:59,599
实际上我们

1916
02:16:59,599 --> 02:17:05,679
将其更改为 var 我将很快解释为什么以及如果我们说减减 h

1917
02:17:05,679 --> 02:17:11,120
现在这是前缀运算符的示例，前缀运算符是

1918
02:17:11,120 --> 02:17:17,679
操作员，它出现在它必须做的任何事情之前

1919
02:17:17,679 --> 02:17:22,319
在这种情况下，这个减号运算符的作用是它采用

1920
02:17:22,319 --> 02:17:25,280
紧随其后

1921
02:17:25,280 --> 02:17:31,519
将该值减一，然后将结果返回给

1922
02:17:31,519 --> 02:17:37,359
左边，所以在这种情况下，口译员来到这里说好的

1923
02:17:37,359 --> 02:17:40,639
你想计算一些好吧它等于

1924
02:17:40,639 --> 02:17:46,160
哦，一个前缀运算符，在这里接受一个变量，它说好的是什么

1925
02:17:46,160 --> 02:17:50,800
年龄是 20 减 1 是 19。把它放在这里

1926
02:17:50,800 --> 02:17:55,599
还把负1 抱歉把19 放在h 所以

1927
02:17:55,599 --> 02:18:00,719
我认为至少是这样，如果我们说印刷时代和印刷时代现在都减一

1928
02:18:00,719 --> 02:18:05,200
应该是 19，你可以看到它说两次你看到 2

1929
02:18:05,200 --> 02:18:11,359
19. so that kind of means it's uh two so flutter 有这么大的本事不

1930
02:18:11,359 --> 02:18:16,399
基本上重复日志语句或打印语句

1931
02:18:16,399 --> 02:18:19,120
所以我们有我的意思是真的有一些

1932
02:18:19,120 --> 02:18:25,439
dart 中的优秀运算符，即加号运算符，然后你就有了

1933
02:18:25,439 --> 02:18:30,559
减除乘法，然后你有类似的逻辑类型

1934
02:18:30,559 --> 02:18:34,719
运算符检查左侧的值是否等于右侧的值

1935
02:18:34,719 --> 02:18:37,439
所以这些有点像

1936
02:18:37,439 --> 02:18:43,359
um dart 中的运算符，因此您现在不必对这些了解太多

1937
02:18:43,359 --> 02:18:45,760
我会说嗯

1938
02:18:45,760 --> 02:18:50,319
你可以用这些走得很远，而且很多这些运算符实际上都不起作用

1939
02:18:50,319 --> 02:18:55,679
仅适用于数字，也适用于字符串，例如，如果您是其中之一

1940
02:18:55,679 --> 02:19:00,000
我非常喜欢飞镖的酷炫功能，我认为它就是这样

1941
02:19:00,000 --> 02:19:03,840
对他们来说是一个好主意来实现这个

1942
02:19:03,840 --> 02:19:07,439
呃我的意思是如果你不是来自软件开发背景

1943
02:19:07,439 --> 02:19:10,639
嗯，你可能不知道，但如果你来自设计

1944
02:19:10,639 --> 02:19:13,519
背景 你也会注意到，有时当你创建设计时

1945
02:19:13,519 --> 02:19:16,000
或任何任何屏幕，你想要那种

1946
02:19:16,000 --> 02:19:20,719
像把这个设计展示给你想要的产品所有者这样的人

1947
02:19:20,719 --> 02:19:25,920
用一些 lorem ipsum 填充设计中的文本

1948
02:19:25,920 --> 02:19:29,840
和较低的 mibsum 基本上有一个巨大的历史，它来自哪里，但它

1949
02:19:29,840 --> 02:19:33,599
通常是某种你想要放置在你的

1950
02:19:33,599 --> 02:19:36,719
设计，以便您可以喜欢显示和

1951
02:19:36,719 --> 02:19:39,040
给某人看，然后

1952
02:19:39,040 --> 02:19:42,399
很多开发人员在想要显示一些语言时喜欢使用多种语言

1953
02:19:42,399 --> 02:19:45,760
发短信，他们不知道该说什么，就像我们只是在测试我只是在测试的东西

1954
02:19:45,760 --> 02:19:49,520
想显示一些文本，他们去抓取 lorem ipsum 然后把它放进去

1955
02:19:49,520 --> 02:19:53,520
他们的代码，但飞镖已经进入下一步，

1956
02:19:53,520 --> 02:19:57,520
说好的，我们不需要，所以你可以做什么你可以说例如名字是

1957
02:19:57,520 --> 02:20:01,359
foo 这是一个字符串名称，但你可以说

1958
02:20:01,359 --> 02:20:07,359
名字乘以 20 就是名字乘以 20。你可以从字面上说

1959
02:20:07,359 --> 02:20:11,200
将一个字符串乘以 20，它的作用是

1960
02:20:11,200 --> 02:20:15,120
foo 说了 20 次，所以如果我说 print

1961
02:20:15,120 --> 02:20:18,640
名字乘以 20 你可以看到

1962
02:20:18,640 --> 02:20:22,800
20 次，所以这是一个很棒的功能，你可以说 foo bar

1963
02:20:22,800 --> 02:20:26,479
通过，然后说乘以 100

1964
02:20:26,479 --> 02:20:31,280
是的，它只是为你复制了 100 次

1965
02:20:31,280 --> 02:20:36,160
例如命名时间 100

1966
02:20:36,160 --> 02:20:41,280
所以这是一个嗯

1967
02:20:41,280 --> 02:20:47,439
简而言之，这是 dart 中操作符的基础知识好吗

1968
02:20:47,439 --> 02:20:52,080
我要删除那个代码 我要

1969
02:20:52,080 --> 02:20:56,840
在我的笔记中标记我们已经讨论过

1970
02:20:56,840 --> 02:21:01,280
现在我很快也要提一下

1971
02:21:01,280 --> 02:21:05,439
那个嗯

1972
02:21:05,439 --> 02:21:10,399
我们还可以创建自定义运营商以诚实对待您和

1973
02:21:10,399 --> 02:21:16,399
我不认为现在谈论定制是完全可以的

1974
02:21:16,399 --> 02:21:20,080
运营商，我认为这有点像稍后要讨论的话题，所以我实际上

1975
02:21:20,080 --> 02:21:23,840
只是把它移到我的笔记中，我们现在不需要谈论它

1976
02:21:23,840 --> 02:21:28,160
因为我们必须知道一点点关于类和

1977
02:21:28,160 --> 02:21:31,840
对象，这样我们就可以在我们创建了自己的类之后，然后我们可以创建

1978
02:21:31,840 --> 02:21:35,680
自定义运算符也是如此，所以我认为它不完全

1979
02:21:35,680 --> 02:21:39,040
现在适合谈论，但只知道将来你可以

1980
02:21:39,040 --> 02:21:43,520
还可以创建自己的运算符，然后喜欢，或者您也可以覆盖喜欢

1981
02:21:43,520 --> 02:21:46,800
不同的运算符以及它们如何处理不同的对象，所以就是这样

1982
02:21:46,800 --> 02:21:50,080
真的很好玩

1983
02:21:50,080 --> 02:21:55,760
但就是这样，让我们​​暂时让操作员去做吧

1984
02:21:55,760 --> 02:22:01,359
现在我想谈的下一个话题是列表

1985
02:22:01,359 --> 02:22:05,600
飞镖中的列表是

1986
02:22:05,600 --> 02:22:09,680
一系列的东西

1987
02:22:09,680 --> 02:22:15,120
彼此相似，它们被放置在里面

1988
02:22:15,120 --> 02:22:18,640
一个清单，例如一张纸，你可以写下你的

1989
02:22:18,640 --> 02:22:22,479
购物清单或像圣诞购物清单或其他

1990
02:22:22,479 --> 02:22:29,040
它是编号的，所以这些在 dart 中被称为列表

1991
02:22:29,040 --> 02:22:33,439
例如，如果你说 foo

1992
02:22:33,439 --> 02:22:38,479
然后是小节，然后是低音，因为你可以看到黑暗

1993
02:22:38,479 --> 02:22:42,080
目前不喜欢这种语法它说好的这些就像什么

1994
02:22:42,080 --> 02:22:44,319
这个呃呃

1995
02:22:44,319 --> 02:22:48,399
在这里用逗号告诉 darth 这是一个

1996
02:22:48,399 --> 02:22:52,319
一二三

1997
02:22:52,319 --> 02:22:59,280
是将它们放在方括号内，然后当然是分号

1998
02:22:59,280 --> 02:23:04,160
现在嗯

1999
02:23:04,160 --> 02:23:08,479
正如我刚才谈到的那样，实际上列表有

2000
02:23:08,479 --> 02:23:14,240
索引，因为它们在列表中都有自己的位置

2001
02:23:14,240 --> 02:23:18,240
所有这些我们称之为对象的对象，它们的位置都在

2002
02:23:18,240 --> 02:23:23,439
list 你可能会认为第一个对象是 foo 然后

2003
02:23:23,439 --> 02:23:28,880
第二个对象是 bar，现在第三个是 bas，我有点正确，但是

2004
02:23:28,880 --> 02:23:33,359
index 在我的意思是所有的编程语言

2005
02:23:33,359 --> 02:23:39,439
我用过 c plus c rust dart swift

2006
02:23:39,439 --> 02:23:44,080
javascript 他们几乎都从索引开始

2007
02:23:44,080 --> 02:23:48,080
零，这是非常重要的理解，因为喜欢

2008
02:23:48,080 --> 02:23:52,640
这个名为 foo 的对象在 this 中的位置

2009
02:23:52,640 --> 02:23:56,880
列表不是一个，实际上它的索引是

2010
02:23:56,880 --> 02:24:00,880
零，这就是为什么列表被称为零

2011
02:24:00,880 --> 02:24:06,240
基于，它们的索引被称为基于零的索引，所以你必须是

2012
02:24:06,240 --> 02:24:10,000
小心点，我们很快就会讨论索引

2013
02:24:10,000 --> 02:24:14,240
所以让我们说最后的名字是现在如果我想

2014
02:24:14,240 --> 02:24:17,680
从这里提取 foo 我只想说

2015
02:24:17,680 --> 02:24:23,040
final foo 是索引为零的名称，我只是

2016
02:24:23,040 --> 02:24:27,680
我要打印它我只想说 printfu 你会看到这里打印的食物

2017
02:24:27,680 --> 02:24:31,280
现在如果我说我想过去然后我会说

2018
02:24:31,280 --> 02:24:34,880
打印三的抱歉索引

2019
02:24:34,880 --> 02:24:38,240
你会看到哦，对不起

2020
02:24:38,240 --> 02:24:43,840
两个索引，因为它是第三个项目，但由于索引是零基数

2021
02:24:43,840 --> 02:24:48,479
它在 excel 中所以我自己犯了错误所以命令 s 你会得到低音

2022
02:24:48,479 --> 02:24:51,840
我真的想回到这三个

2023
02:24:51,840 --> 02:24:55,600
然后 command s 这样你就可以看到这里发生了什么你会看到你会得到

2024
02:24:55,600 --> 02:25:00,240
称为范围错误的东西，这是一个例外

2025
02:25:00,240 --> 02:25:06,160
飞镖和许多其他编程语言的一个例外是当事情发生时

2026
02:25:06,160 --> 02:25:09,040
错了，语言真的不知道

2027
02:25:09,040 --> 02:25:12,399
不再是你的意思，在这种情况下你可以看到这个

2028
02:25:12,399 --> 02:25:17,280
通过语言级别或库级别的异常

2029
02:25:17,280 --> 02:25:21,120
表示此数组中没有四个项目或

2030
02:25:21,120 --> 02:25:26,720
在此列表中，因为索引三表示四项

2031
02:25:26,720 --> 02:25:30,880
列表中第一个项目的索引为零 项目第二个有

2032
02:25:30,880 --> 02:25:34,240
index sub 一项编号为 3 的索引为

2033
02:25:34,240 --> 02:25:38,399
2 和第 4 项的索引为

2034
02:25:38,399 --> 02:25:42,080
三个，这个里面只有三个对象

2035
02:25:42,080 --> 02:25:47,439
数组或在此列表中，因此零索引零一二

2036
02:25:47,439 --> 02:25:50,880
就是这样，第三个索引是

2037
02:25:50,880 --> 02:25:55,680
不存在，这就是为什么我们没有得到这个无效值

2038
02:25:55,680 --> 02:26:00,080
包含范围 0 到 2 所以

2039
02:26:00,080 --> 02:26:03,760
这就是您访问列表中项目的方式

2040
02:26:03,760 --> 02:26:08,240
这就是你实际创建列表的方式，好吧，所以你说的项目列表

2041
02:26:08,240 --> 02:26:12,479
是全吧bas所以还可以有一些方便

2042
02:26:12,479 --> 02:26:16,560
嗯列表上的属性，你可以

2043
02:26:16,560 --> 02:26:19,120
实例说最终

2044
02:26:19,120 --> 02:26:22,399
长度所以如果你想知道有多少项目

2045
02:26:22,399 --> 02:26:27,040
在这个列表中你也可以说出名字

2046
02:26:27,040 --> 02:26:30,160
点然后你会说链接

2047
02:26:30,160 --> 02:26:33,920
我们现在也要谈谈这个，因为我认为是这样的

2048
02:26:33,920 --> 02:26:37,680
了解那是什么很重要

2049
02:26:37,680 --> 02:26:42,000
dart 和许多其他编程语言中的点是一种钻取方式

2050
02:26:42,000 --> 02:26:46,080
in to something 从中提取其他东西

2051
02:26:46,080 --> 02:26:50,800
它，在这种情况下，名称是一个列表，并且

2052
02:26:50,800 --> 02:26:54,000
dart 中的所有列表都有

2053
02:26:54,000 --> 02:26:59,359
称为属性长度的东西是

2054
02:26:59,359 --> 02:27:06,479
dart 中的列表数据类型，这意味着 dart 中的每个列表都有一个

2055
02:27:06,479 --> 02:27:10,479
自动为您计算的称为链接的属性

2056
02:27:10,479 --> 02:27:16,720
当您在此列表中输入值时，无需执行任何操作此长度将

2057
02:27:16,720 --> 02:27:21,280
然后将正确的值返回给您，所以我要谈谈

2058
02:27:21,280 --> 02:27:24,319
多一点所以我只想说打印命名长度

2059
02:27:24,319 --> 02:27:29,439
它会说你会看到这里让我滚动一下它会说

2060
02:27:29,439 --> 02:27:35,040
此数组中的三个三个项目我要将名称列表更改为 var

2061
02:27:35,040 --> 02:27:38,960
这样我们实际上可以嗯

2062
02:27:38,960 --> 02:27:44,479
更改其内容并对其进行变异，就像我只想为此添加一个新名称

2063
02:27:44,479 --> 02:27:48,960
名字，我只会说 add 是一个你可以看到的函数，因为它

2064
02:27:48,960 --> 02:27:52,960
后面有括号所以我会说

2065
02:27:52,960 --> 02:27:56,720
嗯我的名字，然后分号结束

2066
02:27:56,720 --> 02:28:01,920
现在声明如果我在声明之后说打印名称长度

2067
02:28:01,920 --> 02:28:05,920
你猜对了哦我可以看到实际上我的嗯

2068
02:28:05,920 --> 02:28:10,319
你可能看不到所有的打印语句，因为这个文本就在那里，所以

2069
02:28:10,319 --> 02:28:14,240
让我稍微调整一下 Visual Studio 代码的大小，这样你就可以看到

2070
02:28:14,240 --> 02:28:18,479
对此有点抱歉，所以

2071
02:28:18,479 --> 02:28:24,080
现在我们在这里有了名字长度，你可以看到第二次说

2072
02:28:24,080 --> 02:28:26,399
四个好

2073
02:28:26,399 --> 02:28:29,600
所以当你说点之后

2074
02:28:29,600 --> 02:28:35,439
a 变量的名称，这意味着它可以是一个常量，一个变量或

2075
02:28:35,439 --> 02:28:40,560
在您访问的名称后面加上点后的最终变量

2076
02:28:40,560 --> 02:28:45,200
那个东西里面有不同的属性或不同的功能，所以它是

2077
02:28:45,200 --> 02:28:49,680
有点像访问器，它允许您深入到对象内部并抓取

2078
02:28:49,680 --> 02:28:55,439
把它弄出来，或者让那个物体为你做点什么

2079
02:28:55,439 --> 02:28:59,280
所以我认为我认为这已经足够了

2080
02:28:59,280 --> 02:29:03,040
对你说实话我不想过多地讨论细节和恐慌

2081
02:29:03,040 --> 02:29:08,479
人们喜欢你可以用列表做的所有不同的事情，但是

2082
02:29:08,479 --> 02:29:12,960
dart 自己的网站上有很棒的文档，你所要做的就是

2083
02:29:12,960 --> 02:29:17,840
只是谷歌或duckduckgo或任何你想使用必应

2084
02:29:17,840 --> 02:29:20,319
你的方式，只是搜索

2085
02:29:20,319 --> 02:29:24,720
dart 数组文档或只是 dart 数组，然后你会发现很多

2086
02:29:24,720 --> 02:29:28,319
关于它的信息或抱歉的黑名单，因为在飞镖

2087
02:29:28,319 --> 02:29:31,680
它们实际上在其他一些编程语言中被称为列表

2088
02:29:31,680 --> 02:29:35,120
称为数组，但这些名称可以互换使用

2089
02:29:35,120 --> 02:29:38,479
老实说，列表和数组有点像是的，几乎一样

2090
02:29:38,479 --> 02:29:42,319
事情是这样的

2091
02:29:42,319 --> 02:29:47,920
好吧，那是飞镖中的清单，我要接受

2092
02:29:47,920 --> 02:29:50,720
在我的笔记中，以便我们知道我们已经讨论过

2093
02:29:50,720 --> 02:29:54,640
这是我想谈的下一个话题

2094
02:29:54,640 --> 02:29:57,600
关于这个视频

2095
02:29:57,600 --> 02:30:02,000
东西叫集合吗

2096
02:30:02,000 --> 02:30:06,479
好的，正如你在标题中看到的那样

2097
02:30:06,479 --> 02:30:10,240
这里写的是独特事物的列表，而

2098
02:30:10,240 --> 02:30:20,960
列表是同类事物的列表，设置我​​们独特事物的列表，所以

2099
02:30:20,960 --> 02:30:26,160
我认为实际上解释集合的最好方法就是直接跳进去

2100
02:30:26,160 --> 02:30:30,560
集合的语法是大括号和

2101
02:30:30,560 --> 02:30:34,560
实际上我认为我认为是

2102
02:30:34,560 --> 02:30:38,720
是的，我想是的，所以让我们说最终

2103
02:30:38,720 --> 02:30:42,800
呃名字，我只想说花括号 foo

2104
02:30:42,800 --> 02:30:48,319
如果我在这里输入名字，就这样结束吧

2105
02:30:48,319 --> 02:30:51,760
您将看到此处提供的建议或信息

2106
02:30:51,760 --> 02:30:56,880
由视觉工作室代码提供的名称是一组字符串

2107
02:30:56,880 --> 02:30:59,840
我们在上一章讨论过这个

2108
02:30:59,840 --> 02:31:05,040
当我说最终名称或最终名称时，例如

2109
02:31:05,040 --> 02:31:08,640
foo 我有点告诉飞镖创造

2110
02:31:08,640 --> 02:31:11,920
一个变量，其

2111
02:31:11,920 --> 02:31:16,399
引用名称为name，值为fu，dart自动理解

2112
02:31:16,399 --> 02:31:23,040
这个值的数据类型是字符串，因为它的数据是

2113
02:31:23,040 --> 02:31:26,800
字符串，因此您不必说出最终的字符串名称

2114
02:31:26,800 --> 02:31:31,200
尽管您可以这样做，但让我们将其更改为 const 以及

2115
02:31:31,200 --> 02:31:34,640
你不必真的说这是一个

2116
02:31:34,640 --> 02:31:38,399
字符串，因为 dart 会自动理解它，所以你只需删除

2117
02:31:38,399 --> 02:31:42,000
数据类型，如果那是你想做的，那是我真正喜欢做的

2118
02:31:42,000 --> 02:31:46,240
而不是过于冗长，除非你有充分的理由

2119
02:31:46,240 --> 02:31:51,120
无论如何提供数据类型让我们回到集合，所以

2120
02:31:51,120 --> 02:31:54,160
我们在这里

2121
02:31:54,160 --> 02:31:58,240
意思是和我们创建一个字符串然后飞镖一样的方式

2122
02:31:58,240 --> 02:32:02,640
通过把 uh square brac sorry curly 自动理解数据类型

2123
02:32:02,640 --> 02:32:06,720
括号在这里或花括号在这里，并在飞镖内放一些数据

2124
02:32:06,720 --> 02:32:11,439
自动理解好吧，这是这里的一些东西和这些东西

2125
02:32:11,439 --> 02:32:16,720
现在看起来像一个字符串，所以如果我说 foo bar

2126
02:32:16,720 --> 02:32:20,319
嗯

2127
02:32:20,319 --> 02:32:24,880
艺术说好吧，这很好，但如果我进去，我再说一次你会看到

2128
02:32:24,880 --> 02:32:28,960
然后我会自动收到一条错误消息，说 a 中有两个元素

2129
02:32:28,960 --> 02:32:34,000
常量，所以字面上不能相等，因为它知道这个 foo 它

2130
02:32:34,000 --> 02:32:38,720
已经在那里重复了

2131
02:32:38,720 --> 02:32:43,680
好的，让我们从这里删除 foo 并做一个实验

2132
02:32:43,680 --> 02:32:48,080
让我们将此名称更改为 var 以便我们可以实际更改其 con it

2133
02:32:48,080 --> 02:32:51,280
内容然后转到名称并添加到下一行

2134
02:32:51,280 --> 02:32:55,439
如果我可以拼写并说添加，请说出名字

2135
02:32:55,439 --> 02:33:01,200
然后再说一次 foo 然后说 names add bar 然后 set

2136
02:33:01,200 --> 02:33:06,560
添加 bas 或 sorry 表示高级

2137
02:33:06,560 --> 02:33:11,840
然后我们会说打印名称没问题，我会用这个清除日志

2138
02:33:11,840 --> 02:33:16,880
按钮就在这里，然后我要按命令

2139
02:33:16,880 --> 02:33:20,800
你可以看到这个设置仍然是完整的 bar bass 并没有真正改变

2140
02:33:20,800 --> 02:33:24,160
这是最大的特性之一

2141
02:33:24,160 --> 02:33:26,960
列表

2142
02:33:26,960 --> 02:33:31,520
um 套在飞镖和几乎每一个

2143
02:33:31,520 --> 02:33:35,359
其他支持集合的编程语言

2144
02:33:35,359 --> 02:33:42,640
集仅确保始终不重复其数据，并且

2145
02:33:42,640 --> 02:33:45,840
这是我的意思是在我的背景中发生了很多魔法

2146
02:33:45,840 --> 02:33:49,920
还没有真正谈论过我的意思是例如你的问题

2147
02:33:49,920 --> 02:33:55,040
可能会问 dart 如何知道 foo 与 foo 相同

2148
02:33:55,040 --> 02:33:59,439
他们是的，实际上确实有点

2149
02:33:59,439 --> 02:34:04,479
它在内部对这些东西进行比较，但我们从未告诉过

2150
02:34:04,479 --> 02:34:09,120
它应该如何进行比较，那是因为

2151
02:34:09,120 --> 02:34:14,960
如果您还记得我们谈论它时从运营商那里得到的字符串

2152
02:34:14,960 --> 02:34:19,520
现在我们还没有很好地讨论类，我只想说 dart 中的字符串

2153
02:34:19,520 --> 02:34:24,240
已经知道应该如何将它们与其他字符串进行比较

2154
02:34:24,240 --> 02:34:27,280
可以，然后呢

2155
02:34:27,280 --> 02:34:30,800
他们有这种哈希逻辑

2156
02:34:30,800 --> 02:34:35,040
他们完全了解的代码和比较运算符

2157
02:34:35,040 --> 02:34:40,960
给定这个字符串，我是否和给定的一样，对不起，给定我是什么

2158
02:34:40,960 --> 02:34:45,040
你提供给我的这个新东西就像我是 foo 而你说的是 foo am

2159
02:34:45,040 --> 02:34:48,880
i 和 foo 一样，然后它说是或否

2160
02:34:48,880 --> 02:34:54,160
这就是集合内部正在做的事情，但我们实际上并没有看到

2161
02:34:54,160 --> 02:34:58,800
嗯，现在只知道飞镖

2162
02:34:58,800 --> 02:35:04,399
允许您创建唯一的事物列表，然后

2163
02:35:04,399 --> 02:35:09,359
你也可能有点想去说好吧，我有东西

2164
02:35:09,359 --> 02:35:16,560
这里让我们说 const things 等于 foo 然后我们说一个

2165
02:35:16,560 --> 02:35:19,600
这也将起作用，那是因为

2166
02:35:19,600 --> 02:35:23,280
黑暗也有对象的概念，你可以

2167
02:35:23,280 --> 02:35:28,399
看到你会看到东西，它会说哦，现在它是一组对象

2168
02:35:28,399 --> 02:35:34,000
我们还没有谈论对象，如果我看看我的笔记，我可以看到

2169
02:35:34,000 --> 02:35:36,800
我们将在第六章讨论对象

2170
02:35:36,800 --> 02:35:41,840
我们现在在第四章所以我们还没有

2171
02:35:41,840 --> 02:35:44,319
到了那个地步谈论对象

2172
02:35:44,319 --> 02:35:48,399
我不想真的吓到你关于物体和它们实际上是什么

2173
02:35:48,399 --> 02:35:54,560
但只知道存在数据类型的层次结构，所以

2174
02:35:54,560 --> 02:36:00,640
你有对象，然后你有那种派生它们的数据类型

2175
02:36:00,640 --> 02:36:05,200
来自对象的功能，所以这里是对象，然后是它的

2176
02:36:05,200 --> 02:36:09,439
字符串整数双精度等，然后你有集合和

2177
02:36:09,439 --> 02:36:13,040
blah blah blah now when you're here when you are at you at you at the first when you are 当你第一次在这里

2178
02:36:13,040 --> 02:36:18,960
在这里，你说我有 foo barbaros 所有的弦然后飞镖就好了

2179
02:36:18,960 --> 02:36:21,680
这是一组字符串，但随后

2180
02:36:21,680 --> 02:36:26,160
你说哦，我有一个字符串，我有一个整数，它是一个数字

2181
02:36:26,160 --> 02:36:29,439
现在飞镖就像哎呀我有我不能我的意思是

2182
02:36:29,439 --> 02:36:33,200
我真的不能说这是一个字符串和整数列表

2183
02:36:33,200 --> 02:36:37,600
可能在那里，所以它说我将采用共同的分母类型

2184
02:36:37,600 --> 02:36:43,200
坐在他们之上作为他们的父母来指定这些事情是好的

2185
02:36:43,200 --> 02:36:47,920
这有点像我们在现实生活中所做的事情，如果我

2186
02:36:47,920 --> 02:36:54,720
例如，给你两个糖果，比如 twix bar 然后你说

2187
02:36:54,720 --> 02:36:58,640
那么你会说这是一个 twix bar 这是一回事

2188
02:36:58,640 --> 02:37:03,920
如果我给你 10 个 twix 棒，那么你会说很多 twix 棒或 10 个 twix 棒

2189
02:37:03,920 --> 02:37:09,600
如果我只是给你一堆 twix 棒哦那是一堆 twix 棒但是如果我

2190
02:37:09,600 --> 02:37:12,479
去喜欢

2191
02:37:12,479 --> 02:37:19,359
像许多 twix bar 火星棒一样混合所有的糖果到一个袋子里，我

2192
02:37:19,359 --> 02:37:21,920
给你那个包你叫什么你不说

2193
02:37:21,920 --> 02:37:26,560
哦，这是一袋 twix 和 uh 士力架，这是一个

2194
02:37:26,560 --> 02:37:32,080
和火星吧不，你可能只会说糖果，它是一袋糖果和

2195
02:37:32,080 --> 02:37:36,479
这就是飞镖在这里说的哦，你在这里扔了很多东西我我

2196
02:37:36,479 --> 02:37:40,160
无法理解这是一组呃

2197
02:37:40,160 --> 02:37:42,000
对象如此

2198
02:37:42,000 --> 02:37:45,920
我们在现实生活中这样做，这就是 dart 在这里所做的，所以当你

2199
02:37:45,920 --> 02:37:49,760
看到物体就知道哦，黑暗不再真的知道这是什么了

2200
02:37:49,760 --> 02:37:53,359
所以或者它有点知道它是什么

2201
02:37:53,359 --> 02:37:56,080
一堆东​​西

2202
02:37:56,080 --> 02:38:03,439
在这种情况下，这就是对象的含义，所以这很奇怪

2203
02:38:03,439 --> 02:38:07,680
比较可能，但我希望你明白我的意思

2204
02:38:07,680 --> 02:38:10,560
如果你看到我在看这只是因为我在看我的笔记

2205
02:38:10,560 --> 02:38:13,120
确保我已经解释了我已经解释过的事情

2206
02:38:13,120 --> 02:38:16,560
着手解释

2207
02:38:16,560 --> 02:38:20,399
谈了一些关于哈希码和我们不必进入的集合

2208
02:38:20,399 --> 02:38:25,680
关于这方面的细节，所以现在让我们来谈谈吧

2209
02:38:25,680 --> 02:38:28,560
地图嗯

2210
02:38:28,560 --> 02:38:31,200
地图有点像

2211
02:38:31,200 --> 02:38:34,880
我最喜欢的数据数据结构之一

2212
02:38:34,880 --> 02:38:38,000
几乎所有现代的支持它们的任何编程语言

2213
02:38:38,000 --> 02:38:43,600
编程语言支持地图，所以地图是

2214
02:38:43,600 --> 02:38:47,280
如您在此处看到的数据结构，地图用于

2215
02:38:47,280 --> 02:38:51,280
保存信息的键值对，这意味着什么

2216
02:38:51,280 --> 02:38:56,000
嗯，假设你想解释

2217
02:38:56,000 --> 02:39:00,399
一个人使用他们不同的属性

2218
02:39:00,399 --> 02:39:05,520
然后你会说年龄他们的性别

2219
02:39:05,520 --> 02:39:09,120
他们的头发颜色

2220
02:39:09,120 --> 02:39:13,840
高度 呃 不管叫什么名字

2221
02:39:13,840 --> 02:39:18,000
这些有点像你的钥匙

2222
02:39:18,000 --> 02:39:21,520
你会解释那个人的属性

2223
02:39:21,520 --> 02:39:25,040
这些键和所有这些键都有它们的值，所以

2224
02:39:25,040 --> 02:39:30,000
如果你说身高，那么你会说 180 是的

2225
02:39:30,000 --> 02:39:34,319
如果你说重量，那么你选择 70 公斤

2226
02:39:34,319 --> 02:39:39,760
所以这些是关键值，关键是那个人的属性和值

2227
02:39:39,760 --> 02:39:44,560
是这些属性的值，所以创建地图的方式非常

2228
02:39:44,560 --> 02:39:50,640
类似于 非常类似于带有花括号的花括号的集合

2229
02:39:50,640 --> 02:39:54,880
所以你说人然后你说等于

2230
02:39:54,880 --> 02:39:58,319
实际上，这只是一个你不必说人的名字，但是是的，或者你可以

2231
02:39:58,319 --> 02:40:02,800
只是说 const so person 然后你打开大括号然后你会

2232
02:40:02,800 --> 02:40:07,760
在这里做你的钥匙，我会说年龄的钥匙，例如我会说 20

2233
02:40:07,760 --> 02:40:10,399
然后你说专栏

2234
02:40:10,399 --> 02:40:15,279
是不是它是一个专栏，然后你用一个结束整个集合

2235
02:40:15,279 --> 02:40:23,680
分号所以我刚刚创建了一个基本上在这里我创建了一个地图

2236
02:40:23,680 --> 02:40:30,000
键是字符串，值是整数现在让我们看看 dart 是否理解

2237
02:40:30,000 --> 02:40:35,600
你看这是一个字符串映射作为键和手段作为值但是现在

2238
02:40:35,600 --> 02:40:41,040
正如你在糖果类比之前看到的那样，如果我说好吧，我还有另一个钥匙

2239
02:40:41,040 --> 02:40:44,080
它说嗯

2240
02:40:44,080 --> 02:40:50,720
名字，我说哦，名字是 foo dart 会像 oop

2241
02:40:50,720 --> 02:40:55,840
这个人是什么人哦，这是一个字符串作为键和对象作为值的映射

2242
02:40:55,840 --> 02:41:00,880
因为它只查看字符串的公分母 foo

2243
02:41:00,880 --> 02:41:05,520
和 20，它是一个整数，表示哦，我不知道我不能创建一个地图

2244
02:41:05,520 --> 02:41:10,160
键是字符串，它的值既是字符串又是整数，所以我要

2245
02:41:10,160 --> 02:41:14,399
去他们的父母那里，就像哦，字符串和整数的父母都是

2246
02:41:14,399 --> 02:41:18,560
对象所以你的值是对象类型所以

2247
02:41:18,560 --> 02:41:22,640
一堆糖果 基本上还可以 嗯

2248
02:41:22,640 --> 02:41:28,720
这就是你创建一个嗯你在飞镖中创建一个地图的方式所以

2249
02:41:28,720 --> 02:41:32,960
并且地图的另一个属性是例如你会说

2250
02:41:32,960 --> 02:41:36,319
嗯，如果你去创建一个代理

2251
02:41:36,319 --> 02:41:40,479
再次在这里你看到它说两个键和一个常数

2252
02:41:40,479 --> 02:41:44,640
地图文字不能相等，所以它在这里做一些检查以确保

2253
02:41:44,640 --> 02:41:49,040
键实际上是唯一的，因此地图中的键

2254
02:41:49,040 --> 02:41:55,120
需要是唯一的，所以如果你去改变它并说 var

2255
02:41:55,120 --> 02:42:00,399
人所以然后你去说人

2256
02:42:00,399 --> 02:42:06,880
name 等于 foo 就像那样，然后你打印整个人

2257
02:42:06,880 --> 02:42:12,960
所以我只想说之前打印，之后打印

2258
02:42:12,960 --> 02:42:19,040
你可以在这里看到它说第一次 h 键是 20 它的值是 20 并且

2259
02:42:19,040 --> 02:42:23,439
名称 k 的值 foo 大写 f 然后第二次

2260
02:42:23,439 --> 02:42:29,359
第 15 行的 print 语句然后我们打印它所拥有的人

2261
02:42:29,359 --> 02:42:31,200
嗯

2262
02:42:31,200 --> 02:42:35,840
值为 20 的年龄键，因为我们没有修改它，并且名称键为

2263
02:42:35,840 --> 02:42:41,520
以前是 foo 的值，大概是 6，我想呃，大写 o 的

2264
02:42:41,520 --> 02:42:45,279
所以这就是你修改地图的方式

2265
02:42:45,279 --> 02:42:49,040
您将指定密钥，然后您会说等于

2266
02:42:49,040 --> 02:42:52,240
一个操作员，然后你会说新值好吧

2267
02:42:52,240 --> 02:42:58,560
嗯，但是如果你在这里添加了一个新键，例如 um last name

2268
02:42:58,560 --> 02:43:01,680
你说不好，这有点像得到

2269
02:43:01,680 --> 02:43:06,960
附加到 um 到地图所以年龄相同的名字

2270
02:43:06,960 --> 02:43:13,359
同样，现在您有一个新键，其值为 bas 好吧

2271
02:43:13,359 --> 02:43:17,840
这有点像嗯的基础知识

2272
02:43:17,840 --> 02:43:21,840
地图，所以你可以做很多事情

2273
02:43:21,840 --> 02:43:25,359
地图，我真的鼓励你，就像我谈到的其他一切一样

2274
02:43:25,359 --> 02:43:29,439
在本章中，您会阅读一些文档，因为

2275
02:43:29,439 --> 02:43:32,560
如果您正在学习本课程并且您的目标是成为一名

2276
02:43:32,560 --> 02:43:36,080
软件工程师，例如，如果您是项目经理或设计师

2277
02:43:36,080 --> 02:43:39,680
ux 或者你是谁

2278
02:43:39,680 --> 02:43:43,120
我认为您需要了解软件工程师

2279
02:43:43,120 --> 02:43:47,359
不知道您必须阅读的所有答案并阅读您必须阅读的文档

2280
02:43:47,359 --> 02:43:50,560
练习练习练习并投入时间

2281
02:43:50,560 --> 02:43:56,000
你需要投入无数的时间来学习所以

2282
02:43:56,000 --> 02:43:59,200
我的意思是我认为这门课程会

2283
02:43:59,200 --> 02:44:04,560
我的意思是我能看到这么多小时

2284
02:44:04,560 --> 02:44:07,920
呃，我放在这里的所有章节的计划

2285
02:44:07,920 --> 02:44:12,000
有这么多章节，我想这门课的全部内容都要讲完了

2286
02:44:12,000 --> 02:44:17,520
20 小时，所以你可以想象我无法详细介绍每一件事

2287
02:44:17,520 --> 02:44:20,399
否则这只是这门课程可能会像

2288
02:44:20,399 --> 02:44:25,040
200 300 小时 呃 难以置信

2289
02:44:25,040 --> 02:44:29,120
我们不能那样做所以我希望你现在做的就是打开你的浏览器然后

2290
02:44:29,120 --> 02:44:34,000
只需键入类似的 dart maps 文档

2291
02:44:34,000 --> 02:44:36,800
飞镖地图所以

2292
02:44:36,800 --> 02:44:40,160
你还需要知道现在你开始用谷歌搜索你的东西

2293
02:44:40,160 --> 02:44:45,359
需要注意飞镖这个词，飞镖是一个现有的非常流行的

2294
02:44:45,359 --> 02:44:48,800
只是飞镖的名字飞镖好

2295
02:44:48,800 --> 02:44:52,479
所以有时取决于你在谷歌上搜索的内容

2296
02:44:52,479 --> 02:44:57,680
如果与您抛出的经典飞镖相关的主题更多

2297
02:44:57,680 --> 02:45:01,040
比编程编程语言的话题更受欢迎

2298
02:45:01,040 --> 02:45:05,760
听起来一样，它可能首先弹出，所以

2299
02:45:05,760 --> 02:45:11,120
在这种情况下，如果您说飞镖地图，您实际上可能会以某种方式结束

2300
02:45:11,120 --> 02:45:14,479
奇怪的网站，向您解释如何投掷飞镖

2301
02:45:14,479 --> 02:45:17,840
在地图上我不知道我只是在尝试我只是

2302
02:45:17,840 --> 02:45:20,800
试图提出它，因为我实际上最终处于那种情况

2303
02:45:20,800 --> 02:45:24,240
我搜索了与黑暗有关的东西我实际上最终进入了一个奇怪的网站

2304
02:45:24,240 --> 02:45:27,680
把飞镖当作一项运动来谈论

2305
02:45:27,680 --> 02:45:34,399
也请知道，现在我们已经讨论过地图了

2306
02:45:34,399 --> 02:45:39,840
所以我要把它记在我的笔记里

2307
02:45:39,840 --> 02:45:46,160
现在下一章会发生什么

2308
02:45:46,160 --> 02:45:53,359
我们将讨论飞镖和许多其他领域中一个非常重要的概念

2309
02:45:53,359 --> 02:45:57,760
诸如 rust 和 swift 之类的编程语言，即 null 安全性或 dart

2310
02:45:57,760 --> 02:46:02,960
称之为声音 声音 噪音 安全这是非常重要的事情要知道

2311
02:46:02,960 --> 02:46:06,479
在飞镖中，它将极大地帮助您

2312
02:46:06,479 --> 02:46:10,880
未来，当你编写你的颤振应用程序时，在这门课程中，我

2313
02:46:10,880 --> 02:46:14,880
会用很多 um null

2314
02:46:14,880 --> 02:46:18,880
我要讲很多空引用

2315
02:46:18,880 --> 02:46:21,920
在整个课程中空了很多，所以

2316
02:46:21,920 --> 02:46:26,399
尽快完成这一点非常重要，我们正在

2317
02:46:26,399 --> 02:46:32,080
绝对不会把它漏掉，所以这将是第五章所以

2318
02:46:32,080 --> 02:46:37,120
请留意接下来的第五章，希望你喜欢

2319
02:46:37,120 --> 02:46:41,040
本章第四章，我们讨论了暗控制语句

2320
02:46:41,040 --> 02:46:45,359
和收藏，我们下一章见

2321
02:46:45,359 --> 02:46:49,040
大家好，欢迎来到第五章

2322
02:46:49,040 --> 02:46:52,640
我们将在本章中讨论这个 vlogtech 课程

2323
02:46:52,640 --> 02:46:55,680
关于零安全 嗯

2324
02:46:55,680 --> 02:46:59,040
在上一章第四章中我们谈到了

2325
02:46:59,040 --> 02:47:02,880
飞镖控制语句和集合

2326
02:47:02,880 --> 02:47:08,640
在我们继续讨论枚举、对象和类之前

2327
02:47:08,640 --> 02:47:11,600
我觉得谈论null很重要

2328
02:47:11,600 --> 02:47:16,399
安全性，这是一个在大多数现代语言中都可用的概念

2329
02:47:16,399 --> 02:47:21,120
如飞镖对不起如锈和迅捷

2330
02:47:21,120 --> 02:47:26,000
所以重要的是在我们继续之前先解决这个问题

2331
02:47:26,000 --> 02:47:29,520
也许甚至没有把它排除在外，但实际上喜欢

2332
02:47:29,520 --> 02:47:35,439
了解它的含义并尝试利用它，以便我们可以编写更好的代码

2333
02:47:35,439 --> 02:47:39,680
嗯，我想只是提起嗯

2334
02:47:39,680 --> 02:47:44,080
空值的概念及其重要性

2335
02:47:44,080 --> 02:47:48,080
处理得好我的意思是到目前为止你已经看到我们有

2336
02:47:48,080 --> 02:47:52,880
数据类型 数据类型可以是例如字符串可以是整数

2337
02:47:52,880 --> 02:47:57,520
然后您可以将值放入其中

2338
02:47:57,520 --> 02:48:01,680
在编程语言中，您也可以

2339
02:48:01,680 --> 02:48:05,600
有没有值的概念，所以

2340
02:48:05,600 --> 02:48:10,399
一方面你有值，所以你有一个字符串值等于

2341
02:48:10,399 --> 02:48:15,359
foo bar 或你的名字或其他任何东西，然后另一方面你可以拥有

2342
02:48:15,359 --> 02:48:18,160
没有那个值，所以你可以看到

2343
02:48:18,160 --> 02:48:22,640
好的，我有一个容器，我有一个可以包含以下值的变量

2344
02:48:22,640 --> 02:48:28,319
输入字符串，或者我有一个可以包含任何对象的变量

2345
02:48:28,319 --> 02:48:33,040
但是目前我没有那个价值，所以你只会告诉飞镖

2346
02:48:33,040 --> 02:48:39,279
我现在拥有的这个变量可以包含一个有效值

2347
02:48:39,279 --> 02:48:42,840
类型对象或字符串类型或

2348
02:48:42,840 --> 02:48:48,800
整数或它有时也可以在其生命周期内

2349
02:48:48,800 --> 02:48:51,439
什么都不包含

2350
02:48:51,439 --> 02:48:58,240
而这个虚无就是被称为null um的概念

2351
02:48:58,240 --> 02:49:03,760
所以它在 dart 中为 null 是关键字 um

2352
02:49:03,760 --> 02:49:07,520
这意味着这是一个你可以在文本编辑器中写的词

2353
02:49:07,520 --> 02:49:12,479
写你的代码，你说一个变量的值等于 null

2354
02:49:12,479 --> 02:49:16,319
这告诉 dart 很好，这个变量目前不包含

2355
02:49:16,319 --> 02:49:22,319
任何值，所以 null 不是真正的值，但它实际上是

2356
02:49:22,319 --> 02:49:26,640
没有价值，你应该这样想

2357
02:49:26,640 --> 02:49:29,200
所以

2358
02:49:29,200 --> 02:49:33,439
让我们看看这个，嗯，有一点文档

2359
02:49:33,439 --> 02:49:36,479
这里嗯

2360
02:49:36,479 --> 02:49:41,120
嗯，在 dart 的网站上 dart dev null safety 所以我要点击它

2361
02:49:41,120 --> 02:49:44,319
你暂时不会看到我的屏幕

2362
02:49:44,319 --> 02:49:48,000
我只是在浏览器中打开它

2363
02:49:48,000 --> 02:49:51,279
一个浏览器窗口，我要把它带到屏幕上

2364
02:49:51,279 --> 02:49:55,920
并稍微增加尺寸并更改

2365
02:49:55,920 --> 02:50:00,319
也在窗口上调整大小，以便您可以看到

2366
02:50:00,319 --> 02:50:05,600
完整的内容嗯所以

2367
02:50:05,600 --> 02:50:09,279
正如您在 dart 中看到的那样，它被称为 sound null null safety 并且有

2368
02:50:09,279 --> 02:50:12,399
关于这实际上意味着什么的文档

2369
02:50:12,399 --> 02:50:15,120
嗯，我们要看看

2370
02:50:15,120 --> 02:50:18,800
[音乐] 看看什么不是安全实际上意味着什么

2371
02:50:18,800 --> 02:50:21,840
在飞镖中，我会给你很多例子

2372
02:50:21,840 --> 02:50:25,520
实际上意味着并且在 dart 的网站上有文档

2373
02:50:25,520 --> 02:50:30,720
很简单，因为 dart um 在它的旧版本中而不是在它的

2374
02:50:30,720 --> 02:50:35,520
当前版本 它在其旧版本中它不支持呃所有安全性

2375
02:50:35,520 --> 02:50:39,040
所以有很多代码是由程序员手动编写的

2376
02:50:39,040 --> 02:50:42,640
实例检查是否

2377
02:50:42,640 --> 02:50:48,000
变量中不存在一个值，然后您可以在此处看到它

2378
02:50:48,000 --> 02:50:52,479
说迁移现有的包或应用程序，因此有由

2379
02:50:52,479 --> 02:50:56,319
飞镖团队，以帮助开发人员了解他们如何移动

2380
02:50:56,319 --> 02:51:00,560
他们的旧代码到支持空安全的新代码

2381
02:51:00,560 --> 02:51:04,160
嗯，但是如果你跟随这门课程，你就像

2382
02:51:04,160 --> 02:51:08,479
你基本上只是按时间顺序

2383
02:51:08,479 --> 02:51:12,000
从第一章到其他所有章我不知道有多少章

2384
02:51:12,000 --> 02:51:14,640
如果你跟随这门课程，你不必这样做

2385
02:51:14,640 --> 02:51:18,399
考虑迁移，因为我们在整个课程中编写的代码

2386
02:51:18,399 --> 02:51:22,640
将是空安全的，这意味着我们将利用飞镖

2387
02:51:22,640 --> 02:51:27,439
null 安全运算符，意味着我们不会手动检查

2388
02:51:27,439 --> 02:51:31,920
值为 null 然后执行一些代码分支，无论它们是 null 还是

2389
02:51:31,920 --> 02:51:35,520
不是，但我的意思是，如果你阅读

2390
02:51:35,520 --> 02:51:38,960
声音安全的文档，您不必担心迁移部分

2391
02:51:38,960 --> 02:51:42,880
读完剩下的就好了

2392
02:51:42,880 --> 02:51:47,439
所以这样我就可以了

2393
02:51:47,439 --> 02:51:51,200
确保我把它记在我的笔记里，这就是我在看这个的原因

2394
02:51:51,200 --> 02:51:53,760
方向，因为我所有的笔记都在这里

2395
02:51:53,760 --> 02:51:57,600
嗯，让我们关闭这个窗口并调出我们的

2396
02:51:57,600 --> 02:52:02,479
我们之前的visual studio代码窗口我要把它放在这里

2397
02:52:02,479 --> 02:52:08,800
我只是要确保它的高度也是正确的，所以你

2398
02:52:08,800 --> 02:52:13,520
会看到它的整个窗口 好的

2399
02:52:13,520 --> 02:52:16,399
所以现在我们谈到了什么是非值

2400
02:52:16,399 --> 02:52:21,120
是，它们是没有价值的，让我们来看看

2401
02:52:21,120 --> 02:52:26,080
使任何类型都可以为空，并且如果您遵循

2402
02:52:26,080 --> 02:52:28,800
到目前为止，您应该拥有某种模拟器或

2403
02:52:28,800 --> 02:52:32,720
一个模拟器正在运行，然后你应该完成命令 shift p 或 control

2404
02:52:32,720 --> 02:52:35,840
shift p uh 取决于您的操作系统

2405
02:52:35,840 --> 02:52:40,479
mac 中的命令 shift p 和 linux 和 windows 中的 ctrl shift p 以带来

2406
02:52:40,479 --> 02:52:44,720
打开这个菜单然后你就可以输入

2407
02:52:44,720 --> 02:52:47,840
颤动选择设备，然后您只需选择要运行的设备

2408
02:52:47,840 --> 02:52:50,640
代码出来了，所以我有点假设你已经这样做了

2409
02:52:50,640 --> 02:52:54,000
您的代码正在运行，这是我们在

2410
02:52:54,000 --> 02:52:58,479
前面的章节，所以我们不再赘述

2411
02:52:58,479 --> 02:53:02,319
所以我有一个你看不到的 iphone 模拟器

2412
02:53:02,319 --> 02:53:06,000
在屏幕上，但我让它在一个单独的屏幕上运行只是因为我们没有

2413
02:53:06,000 --> 02:53:08,479
有足够的房地产我可以做到这一点

2414
02:53:08,479 --> 02:53:11,760
窗户，但它会占用很多空间，所以我要把它带到

2415
02:53:11,760 --> 02:53:16,000
另一个显示器，所以你看不到它，所以这段代码目前正在运行

2416
02:53:16,000 --> 02:53:19,439
所以如果我按下 command s 那么它就会运行并打印输出

2417
02:53:19,439 --> 02:53:22,800
我们还好

2418
02:53:22,800 --> 02:53:27,920
现在让我们谈谈制作任何类型的嗯

2419
02:53:27,920 --> 02:53:31,439
可以为空并且有一个

2420
02:53:31,439 --> 02:53:34,240
方法让我们看看这里

2421
02:53:34,240 --> 02:53:37,600
我们谈到 null 是一个关键字，这就是为什么你可以看到它

2422
02:53:37,600 --> 02:53:40,880
就像嗯，这里用不同的颜色突出显示

2423
02:53:40,880 --> 02:53:45,200
因此，例如，如果您说最终名称是 foo

2424
02:53:45,200 --> 02:53:48,080
好吧，你可以看到它说好的，我接受

2425
02:53:48,080 --> 02:53:53,760
这是因为他的名字是 foo 但你不能只说名字就像它是空的，因为

2426
02:53:53,760 --> 02:53:57,520
那么它不明白它是一个对象还是一个字符串它是 nil 对吗

2427
02:53:57,520 --> 02:54:01,760
它是一个整数吗？如果您在此处键入名称，那么您会看到它只是动态的

2428
02:54:01,760 --> 02:54:05,600
不明白类型所以

2429
02:54:05,600 --> 02:54:09,600
我们稍后会讨论动态，但是你可以做的是

2430
02:54:09,600 --> 02:54:14,479
实际上指定好的，我想要一个字符串数据类型

2431
02:54:14,479 --> 02:54:18,720
它可以包含我们所说的普通名称或字符串

2432
02:54:18,720 --> 02:54:22,000
像一系列字符或者它有时可能是空的，在这种情况下你

2433
02:54:22,000 --> 02:54:24,960
必须实际将数据类型指定为

2434
02:54:24,960 --> 02:54:29,279
嗯，不仅仅是字符串，不仅仅是这个，因为你会看到你会

2435
02:54:29,279 --> 02:54:32,640
得到一个错误，你实际上会得到一个建议

2436
02:54:32,640 --> 02:54:36,640
说尝试更改变量的类型或转换右手类型

2437
02:54:36,640 --> 02:54:39,760
串起来，但我们不会那样做，不是吗

2438
02:54:39,760 --> 02:54:42,560
这不是一个有用的建议

2439
02:54:42,560 --> 02:54:47,680
因为你在这里想要的是真正让飞镖明白这个

2440
02:54:47,680 --> 02:54:51,920
此处的变量或此处的此常量有时可以包含

2441
02:54:51,920 --> 02:54:55,760
null 的值和做到这一点的方法是你

2442
02:54:55,760 --> 02:55:01,359
在您的数据类型后面加上一个后缀作为问号

2443
02:55:01,359 --> 02:55:05,439
所以这就是在其他一些语言中实际使用的语法

2444
02:55:05,439 --> 02:55:09,680
好吧，它也被迅速使用，所以

2445
02:55:09,680 --> 02:55:14,479
嗯，如果我们让它像你所看到的那样实际可变，这就很好地告诉了飞镖

2446
02:55:14,479 --> 02:55:19,120
或者像这样抱歉，所以你说我有一个变量

2447
02:55:19,120 --> 02:55:25,040
它是一个字符串，但有时可能字符串值可能不存在

2448
02:55:25,040 --> 02:55:30,800
嗯，然后你会说好吧，现在名字是 foo

2449
02:55:30,800 --> 02:55:34,960
你可以说现在 name 是 no 所以这有点像重置

2450
02:55:34,960 --> 02:55:39,359
名字所以如果我只是说好吧打印名字

2451
02:55:39,359 --> 02:55:45,439
然后在 foo 之后我说 print name 好，所以让我们清除控制台，然后

2452
02:55:45,439 --> 02:55:48,800
运行这个应用程序你可以看到它第一次说它是空的

2453
02:55:48,800 --> 02:55:53,120
然后第二次说它是 foo

2454
02:55:53,120 --> 02:55:57,120
所以这就是你告诉黑暗你想要的方式

2455
02:55:57,120 --> 02:56:00,720
具有可为空的数据类型，您可以使用

2456
02:56:00,720 --> 02:56:05,439
几乎所有数据类型，所以你可以说好吧，我有一个整数

2457
02:56:05,439 --> 02:56:10,399
um 的年龄，那是 20。但你可以看到你现在不能分配 null 的值

2458
02:56:10,399 --> 02:56:14,399
为整数，因为它不可为空，但只要将其设为可空，则

2459
02:56:14,399 --> 02:56:19,439
这是被接受的，嗯，当然你可以做

2460
02:56:19,439 --> 02:56:22,880
嗯，你可以使用不同的操作

2461
02:56:22,880 --> 02:56:26,080
例如我们在上一章我相信我们谈到了控制

2462
02:56:26,080 --> 02:56:31,920
陈述 if 和 else 所以你可以说例如 if age

2463
02:56:31,920 --> 02:56:36,000
是 20 然后你可以编码或者你可以说

2464
02:56:36,000 --> 02:56:39,359
如果年龄为空，则执行一些代码

2465
02:56:39,359 --> 02:56:44,640
所以它们可以按您的预期工作，所以真的没有区别

2466
02:56:44,640 --> 02:56:47,920
我的意思是如果你考虑一下

2467
02:56:47,920 --> 02:56:54,319
notability 可空性就像是数据类型的后缀，您也可以说

2468
02:56:54,319 --> 02:56:57,439
好吧，几乎任何数据类型都可以为空，这是正确的

2469
02:56:57,439 --> 02:57:01,600
例如，如果您有一个字符串列表

2470
02:57:01,600 --> 02:57:06,399
的名字，你可以说好吧，我有 foo

2471
02:57:06,399 --> 02:57:12,560
这里是我在第四章讨论过的字符串列表

2472
02:57:12,560 --> 02:57:17,359
现在您可以在这里看到字符串列表，这里有两种数据类型

2473
02:57:17,359 --> 02:57:22,880
列表本身及其包含的内容，所以如果你想

2474
02:57:22,880 --> 02:57:28,240
使列表本身可以为空，然后您将在后面加上问号

2475
02:57:28,240 --> 02:57:33,680
好的，这意味着这个字符串列表本身可能不存在，所以你说名字是

2476
02:57:33,680 --> 02:57:38,560
null 并且可以接受，但是因为您告诉飞镖

2477
02:57:38,560 --> 02:57:43,680
好的，这里的名字呃值可以全部为空

2478
02:57:43,680 --> 02:57:46,399
但它的值不应该为空

2479
02:57:46,399 --> 02:57:50,960
所以如果你然后进入这里并在这里输入 null 然后你会看到你得到了

2480
02:57:50,960 --> 02:57:53,520
一个错误，那是因为飞镖说

2481
02:57:53,520 --> 02:57:58,160
好吧，你刚刚向我保证，列表本身可以不存在，但是

2482
02:57:58,160 --> 02:58:01,520
只要它不缺席意味着只要

2483
02:58:01,520 --> 02:58:06,000
它存在于那里有一些值它的值不能

2484
02:58:06,000 --> 02:58:10,560
否，这意味着这种类型应该是

2485
02:58:10,560 --> 02:58:15,680
你在这里告诉我，如果你想做一个可选的，那就不是这样了

2486
02:58:15,680 --> 02:58:18,640
或可为空的列表

2487
02:58:18,640 --> 02:58:22,960
可选字符串，那么你可以在数据类型后面加上问号

2488
02:58:22,960 --> 02:58:26,080
字符串也是如此，所以这是现在

2489
02:58:26,080 --> 02:58:32,960
我的意思是你应该读这个的方式是我有一个字符串列表，我称之为

2490
02:58:32,960 --> 02:58:38,960
列表名称名称有时可以是 no

2491
02:58:38,960 --> 02:58:44,000
意味着它可以不存在并且

2492
02:58:44,000 --> 02:58:50,399
如果它不存在，它可以包含字符串类型的对象

2493
02:58:50,399 --> 02:58:55,520
有时他们自己可能会缺席，这意味着没关系，例如，如果

2494
02:58:55,520 --> 02:58:59,200
你说 fu bar 不，这是可以接受的，但你可以

2495
02:58:59,200 --> 02:59:02,160
也说名字是没有

2496
02:59:02,160 --> 02:59:07,279
明白我的意思，所以称为名称的容器和值

2497
02:59:07,279 --> 02:59:11,520
它包含的可以是可选的，并且可选这个词非常重要

2498
02:59:11,520 --> 02:59:14,000
让你学习它有点像

2499
02:59:14,000 --> 02:59:18,800
业界接受的谈论空值和可空值的方式，所以

2500
02:59:18,800 --> 02:59:23,520
这是可选的

2501
02:59:23,520 --> 02:59:27,920
好的，现在我们谈到了那个

2502
02:59:27,920 --> 02:59:32,720
可以空值和可选值基本上你可以使用这些词

2503
02:59:32,720 --> 02:59:36,960
可以互换，所以如果您正在与同事交谈

2504
02:59:36,960 --> 02:59:40,720
程序员，你会说，哦，你会怎么描述这个好吧，这是一个

2505
02:59:40,720 --> 02:59:45,680
可选字符串的可选列表，或者您也可以说可为空的可空列表

2506
02:59:45,680 --> 02:59:49,359
字符串，但可选也是通常的单词

2507
02:59:49,359 --> 02:59:55,359
用来谈论可空值的好吧

2508
02:59:55,359 --> 03:00:01,200
好吧，我们谈到了让任何类型都可以为空，所以嗯

2509
03:00:01,200 --> 03:00:04,160
我只是将其标记为

2510
03:00:04,160 --> 03:00:07,920
完成了，我们已经在笔记中讨论过了

2511
03:00:07,920 --> 03:00:16,080
现在让我们谈谈挑选非空值的樱桃，这意味着什么

2512
03:00:16,080 --> 03:00:21,279
用飞镖你可以很容易地问

2513
03:00:21,279 --> 03:00:24,560
语言给你

2514
03:00:24,560 --> 03:00:28,720
根本不为空的值我将解释这实际上是什么

2515
03:00:28,720 --> 03:00:34,000
意味着让我们说你有一个嗯

2516
03:00:34,000 --> 03:00:40,399
你有一个字符串 final um string first name

2517
03:00:40,399 --> 03:00:44,399
并且等于 foo 好吧

2518
03:00:44,399 --> 03:00:47,680
现在让我们说这是一个常数好吧

2519
03:00:47,680 --> 03:00:52,560
这就是你看到的我最后写的建议，因为我没有计划

2520
03:00:52,560 --> 03:00:55,120
将此名字值重新分配给

2521
03:00:55,120 --> 03:00:57,920
别的什么，但后来我得到了一个实际使用这个词的建议

2522
03:00:57,920 --> 03:01:03,040
final here 或关键字 final 对不起关键字 comms，如您在此处看到的

2523
03:01:03,040 --> 03:01:07,359
所以让我们说 const 好吧

2524
03:01:07,359 --> 03:01:09,680
嗯现在

2525
03:01:09,680 --> 03:01:15,520
那么我们在这里要做的就是创建一个姓氏

2526
03:01:15,520 --> 03:01:19,120
或中间名 r

2527
03:01:19,120 --> 03:01:25,040
然后我们说姓氏

2528
03:01:25,040 --> 03:01:28,800
实际上我们要做的是我们要说第一个

2529
03:01:28,800 --> 03:01:34,160
名字是空的，所以名字中间是 bar 和 last

2530
03:01:34,160 --> 03:01:38,240
如果你愿意，现在就给贝斯起名字

2531
03:01:38,240 --> 03:01:41,200
例如，如果您有这些值并且想要

2532
03:01:41,200 --> 03:01:44,479
我的意思是现在你实际上可以看到你放在这里的值但是

2533
03:01:44,479 --> 03:01:48,160
有时这些值会传递给你的函数，所以你不知道什么

2534
03:01:48,160 --> 03:01:52,080
他们现在是你可以看到他们是什么所以如果我告诉你选择

2535
03:01:52,080 --> 03:01:56,640
第一个非空值，然后你会说中间名，因为你可以看到它

2536
03:01:56,640 --> 03:02:00,640
但是，如果您有一个函数例如 test here 接受那些

2537
03:02:00,640 --> 03:02:04,240
实例字符串名字的值

2538
03:02:04,240 --> 03:02:07,920
字符串姓氏，然后是字符串

2539
03:02:07,920 --> 03:02:13,680
或者是的中间名等，那么您将不知道这些值是什么

2540
03:02:13,680 --> 03:02:17,439
或者你不能假设这些值是什么，除非它们

2541
03:02:17,439 --> 03:02:22,319
是可为空的或可选的字符串，所以我希望你能得到我想要的

2542
03:02:22,319 --> 03:02:27,840
现在说如果有人告诉你选择第一个非空值

2543
03:02:27,840 --> 03:02:33,840
这样做的一种方法就像这样做的旧方法是对 um

2544
03:02:33,840 --> 03:02:36,479
如果名字

2545
03:02:36,479 --> 03:02:42,479
是不是雪嗯然后你会说哦我再次好吧我

2546
03:02:42,479 --> 03:02:48,240
知道名字是第一个非

2547
03:02:48,240 --> 03:02:54,000
小值好，然后你说好，如果名字

2548
03:02:54,000 --> 03:02:58,800
不为空，那么我们选择它，否则如果

2549
03:02:58,800 --> 03:03:02,319
中间名不为空好吗

2550
03:03:02,319 --> 03:03:07,520
然后你说好的中间名是第一个标称值

2551
03:03:07,520 --> 03:03:13,120
然后 else if 再次所以姓氏不为空

2552
03:03:13,120 --> 03:03:17,279
然后你会打印同样的东西，所以这是非常重复的

2553
03:03:17,279 --> 03:03:20,240
嗯，基本上是

2554
03:03:20,240 --> 03:03:22,640
嗯

2555
03:03:22,640 --> 03:03:27,439
所以它的方式基本上非常冗长

2556
03:03:27,439 --> 03:03:31,120
创造了一种更好的方法来做到这一点，并且

2557
03:03:31,120 --> 03:03:35,200
那是与呃问号问号运算符

2558
03:03:35,200 --> 03:03:38,160
在飞镖中，在其他一些中可用

2559
03:03:38,160 --> 03:03:40,880
Swift等编程语言

2560
03:03:40,880 --> 03:03:45,120
所以这样做的方法是你要选择第一个非空值所以

2561
03:03:45,120 --> 03:03:47,279
你会说最终

2562
03:03:47,279 --> 03:03:53,040
或 const 第一个非空值，你会说这等于 first

2563
03:03:53,040 --> 03:03:57,120
名字左右这有点像问题

2564
03:03:57,120 --> 03:04:00,640
标记问号中间名

2565
03:04:00,640 --> 03:04:04,000
然后问号问号姓氏

2566
03:04:04,000 --> 03:04:06,800
所以我的意思是我们在这里收到警告

2567
03:04:06,800 --> 03:04:11,840
只是因为黑暗已经明白这个中间名虽然

2568
03:04:11,840 --> 03:04:15,840
所以虽然这是一个可选的，但它基本上是有价值的

2569
03:04:15,840 --> 03:04:21,680
但是如果我们把这个设为空，那么这个警告就会消失，但我的意思是

2570
03:04:21,680 --> 03:04:24,720
如果我们实际上将这些作为参数传递给

2571
03:04:24,720 --> 03:04:28,000
这个函数，所以我们不会收到这些奇怪的警告

2572
03:04:28,000 --> 03:04:32,080
但是问号问号运算符的工作方式是它说

2573
03:04:32,080 --> 03:04:36,319
它是一个中缀运算符，因此您在第四章中就知道了

2574
03:04:36,319 --> 03:04:38,960
中缀运算符是一个有两个

2575
03:04:38,960 --> 03:04:42,080
东西，每边各一个，右边

2576
03:04:42,080 --> 03:04:45,279
在这种情况下，我们在右侧

2577
03:04:45,279 --> 03:04:48,640
有中间名，在左边我们有名字，所以这个运算符是什么

2578
03:04:48,640 --> 03:04:52,960
它是否说我左侧的值是否为空

2579
03:04:52,960 --> 03:04:56,560
我会选择我右边的值好吗

2580
03:04:56,560 --> 03:05:01,040
现在让我们在这种情况下说好的中间名不是现在所以它做了什么

2581
03:05:01,040 --> 03:05:04,960
它说名字或者你是空的，是的，你不是那么我要去

2582
03:05:04,960 --> 03:05:09,120
右边的中间名是你不不，我不是不，然后它会选择那个和

2583
03:05:09,120 --> 03:05:14,160
语句的其余部分不会被执行

2584
03:05:14,160 --> 03:05:18,960
但是，如果在这种情况下也知道中间名，那么会发生什么

2585
03:05:18,960 --> 03:05:22,240
从左边开始是名字或者你知道

2586
03:05:22,240 --> 03:05:26,880
是的中间名或者你知道是的所以这整个

2587
03:05:26,880 --> 03:05:30,080
在这里操作

2588
03:05:30,080 --> 03:05:34,880
它不会产生任何价值，因此整个操作将

2589
03:05:34,880 --> 03:05:39,680
让我知道所以它说好的现在我必须比较我们的

2590
03:05:39,680 --> 03:05:44,319
左手边你知道是的我们知道这整件事是不

2591
03:05:44,319 --> 03:05:46,560
然后它说右手边你是空的

2592
03:05:46,560 --> 03:05:51,279
不，我是贝司，然后它通过了，所以

2593
03:05:51,279 --> 03:05:54,880
这个问号问号运算符是一个空感知运算符，它

2594
03:05:54,880 --> 03:05:57,760
选择左侧或右侧

2595
03:05:57,760 --> 03:06:04,399
以该顺序首先不是空的，所以左边你是空的

2596
03:06:04,399 --> 03:06:07,760
如果你是空的，我会去右边，但如果你不是

2597
03:06:07,760 --> 03:06:12,960
不为空，我会选择你，所以请记住，它非常方便

2598
03:06:12,960 --> 03:06:18,560
运算符，它将大大缩短您的代码

2599
03:06:18,560 --> 03:06:22,720
现在，如果我们然后进入这里并说出第一个非空值，您实际上可以看到它

2600
03:06:22,720 --> 03:06:26,880
说哦这是一个字符串但是如果我们

2601
03:06:26,880 --> 03:06:30,960
如果这些是参数，那么如果我们说名字

2602
03:06:30,960 --> 03:06:36,000
然后字符串姓氏对不起中间名

2603
03:06:36,000 --> 03:06:41,439
他们没有像那样向我们提供姓氏

2604
03:06:41,439 --> 03:06:45,760
转换器没问题，然后我们说最终

2605
03:06:45,760 --> 03:06:49,359
现在如果我们在这个中说第一个非空值

2606
03:06:49,359 --> 03:06:53,359
案例，因为这是正常情况，请原谅

2607
03:06:53,359 --> 03:06:58,560
dart 编译器不使用常量的地方

2608
03:06:58,560 --> 03:07:02,399
然后它无法将其解析为常量

2609
03:07:02,399 --> 03:07:05,520
此刻的价值，所以它说好的，我有三个可选值

2610
03:07:05,520 --> 03:07:07,760
不知道他们是什么

2611
03:07:07,760 --> 03:07:11,840
我会尽力根据我的意思选择第一个标称值

2612
03:07:11,840 --> 03:07:16,960
关于我们在这里提供的内容，但是我可能无法解决这个问题

2613
03:07:16,960 --> 03:07:19,920
所以你会看到这里的最终结果是

2614
03:07:19,920 --> 03:07:24,080
这是一个可选字符串，这意味着我可能无法解决这个问题

2615
03:07:24,080 --> 03:07:30,640
这意味着第 9 行顶部的整个操作可能会导致 null

2616
03:07:30,640 --> 03:07:35,520
好吧，对不起我的声音对不起

2617
03:07:35,520 --> 03:07:38,880
所以这是问号问号

2618
03:07:38,880 --> 03:07:45,359
接线员，所以我会在我的笔记中注明我们讨论过的内容

2619
03:07:45,359 --> 03:07:48,479
可以，然后呢

2620
03:07:48,479 --> 03:07:53,840
那是那个嗯现在

2621
03:07:53,840 --> 03:07:59,439
让我们谈谈下一个话题 uh，它是 null 感知赋值运算符 i

2622
03:07:59,439 --> 03:08:02,640
认为这就是这个实际的官方名称

2623
03:08:02,640 --> 03:08:07,120
嗯，这个操作符和中的问号问号操作符很相似

2624
03:08:07,120 --> 03:08:11,600
它试图解决

2625
03:08:11,600 --> 03:08:15,279
一个变量以确保它不为空

2626
03:08:15,279 --> 03:08:20,479
它会尽力而为，让我们看一个例子让我们说

2627
03:08:20,479 --> 03:08:23,359
嗯吧

2628
03:08:23,359 --> 03:08:27,040
我会说实际上让我们说

2629
03:08:27,040 --> 03:08:31,040
戒指和名字是名字所以我们开始我们

2630
03:08:31,040 --> 03:08:35,760
假设我们有一个可选名称，我们首先将名字分配给

2631
03:08:35,760 --> 03:08:39,840
所以这意味着这个名字现在可能取决于

2632
03:08:39,840 --> 03:08:42,319
在名字的值上，它可能为空

2633
03:08:42,319 --> 03:08:46,479
现在如果那是空的，你可能想要分配

2634
03:08:46,479 --> 03:08:50,479
对它有另一个价值，然后你可以用它来做到这一点

2635
03:08:50,479 --> 03:08:55,600
接线员你会说姓让我们看看这里发生了什么

2636
03:08:55,600 --> 03:09:01,439
两者都试图哦，是的，它等于所以我实际上应该改变

2637
03:09:01,439 --> 03:09:05,840
这种情况等于

2638
03:09:05,840 --> 03:09:09,439
问号是的，我要再次提出来

2639
03:09:09,439 --> 03:09:14,319
所以它实际上是正确的让我们说

2640
03:09:14,319 --> 03:09:19,120
然后名称等于不是这个工作

2641
03:09:19,120 --> 03:09:22,560
最后哦，假人

2642
03:09:22,560 --> 03:09:29,040
这是在哪里尝试改变

2643
03:09:29,040 --> 03:09:33,359
像这样我现在实际上有点不确定所以

2644
03:09:33,359 --> 03:09:35,840
让我们看看这到底是做什么的

2645
03:09:35,840 --> 03:09:39,359
嗯，它是三个位置，然后我们

2646
03:09:39,359 --> 03:09:43,439
说不不不然后吧

2647
03:09:43,439 --> 03:09:48,479
然后在这里 baz 好，所以名字为空

2648
03:09:48,479 --> 03:09:51,359
中间名是 bar，姓氏是 bass 和

2649
03:09:51,359 --> 03:09:54,800
老实说，我的意思是这对我来说也很重要

2650
03:09:54,800 --> 03:09:58,960
类似于编程语言的语法的东西

2651
03:09:58,960 --> 03:10:02,880
一些你需要和你一起生活的东西你不会记住这个

2652
03:10:02,880 --> 03:10:07,279
一切都在你的脑海里，当然就像你的主要部分一样

2653
03:10:07,279 --> 03:10:12,880
你会记得的，但不是所有的，你可以看到

2654
03:10:12,880 --> 03:10:16,720
我也是，我现在就这样，好吧，是哪一个，嗯

2655
03:10:16,720 --> 03:10:21,520
所以我要测试一下所以我要开始我们说名字是名字并且

2656
03:10:21,520 --> 03:10:27,120
如果那是空的，那么实际上分配让我们说中间名

2657
03:10:27,120 --> 03:10:30,560
在此处命名，然后使用中间名，然后最后打印名称

2658
03:10:30,560 --> 03:10:34,239
我可以看到它在这里说 bar 所以它实际上是问号 问号

2659
03:10:34,239 --> 03:10:37,040
等于嗯

2660
03:10:37,040 --> 03:10:42,000
所以我实际上可能需要再编辑一次这个文本，所以我打算

2661
03:10:42,000 --> 03:10:46,640
说问号问号等于提出来因为我认为问题

2662
03:10:46,640 --> 03:10:49,840
标记相等不起作用 相等的问号也不起作用

2663
03:10:49,840 --> 03:10:53,200
它不是一个值 它不是一个有效的语法 问号 问号等于

2664
03:10:53,200 --> 03:10:55,279
很抱歉，所以

2665
03:10:55,279 --> 03:10:58,720
这个接线员此刻正在做什么，它说我要拿

2666
03:10:58,720 --> 03:11:02,960
左侧的值，如果为空，则检查它是否为空

2667
03:11:02,960 --> 03:11:08,640
然后我将右侧的值分配给左侧

2668
03:11:08,640 --> 03:11:12,399
如果它不为空，我将不理会它

2669
03:11:12,399 --> 03:11:14,319
可以，然后呢

2670
03:11:14,319 --> 03:11:17,439
目前你在这里看到的名字是空的

2671
03:11:17,439 --> 03:11:21,120
我们在这里传递的第一个参数，所以它说的是好的，我要去

2672
03:11:21,120 --> 03:11:24,000
然后检查中间名 if

2673
03:11:24,000 --> 03:11:28,399
如果 name 是 null 并且它是 null 然后它说没关系中间名是你

2674
03:11:28,399 --> 03:11:32,560
像演示者一样，我将在这里分配该值，因此它将是

2675
03:11:32,560 --> 03:11:34,800
嗯[音乐]

2676
03:11:34,800 --> 03:11:38,800
基本上它将是 bar ，这是铣削的值

2677
03:11:38,800 --> 03:11:42,880
现在如果我们在这里说

2678
03:11:42,880 --> 03:11:46,640
中间名也为空

2679
03:11:46,640 --> 03:11:52,160
是的，我们可以在这里有另一个接线员说可以，如果在服用后

2680
03:11:52,160 --> 03:11:56,399
中间名我们仍然为空然后取姓氏

2681
03:11:56,399 --> 03:11:58,800
所以

2682
03:11:58,800 --> 03:12:03,359
你可以看到低音被打印到屏幕上，那是因为低音

2683
03:12:03,359 --> 03:12:06,800
是我们在第 10 行检查的最后一个参数

2684
03:12:06,800 --> 03:12:10,160
并且它的值不为null um

2685
03:12:10,160 --> 03:12:15,040
所以你可以看到如果我然后去这里并实际上说名字是

2686
03:12:15,040 --> 03:12:18,560
bar 然后你会看到那将是打印到

2687
03:12:18,560 --> 03:12:21,200
屏幕在这里，因为

2688
03:12:21,200 --> 03:12:25,760
在这里名字或名字是酒吧得到

2689
03:12:25,760 --> 03:12:30,960
分配给 name 所以它是一个可选字符串，但它的值是 bar

2690
03:12:30,960 --> 03:12:35,600
那么当你来到第 9 行时，你会告诉飞镖看，如果

2691
03:12:35,600 --> 03:12:40,319
name 为 null 然后为其分配中间名，dart 说得很好

2692
03:12:40,319 --> 03:12:44,479
name 不是 null 它是 bar 所以我不会给它分配中间名

2693
03:12:44,479 --> 03:12:48,479
然后它转到第 10 行并做同样的事情

2694
03:12:48,479 --> 03:12:53,680
所以这就像 null 感知赋值运算符和呃

2695
03:12:53,680 --> 03:12:57,439
这很有用我个人的意思是说实话

2696
03:12:57,439 --> 03:13:00,000
你我尽你所能猜到

2697
03:13:00,000 --> 03:13:03,600
我不经常使用这个运算符

2698
03:13:03,600 --> 03:13:07,760
我毫不羞耻地说，在我的所有程序中几乎都没有

2699
03:13:07,760 --> 03:13:11,520
我不得不使用它，所以它存在于你

2700
03:13:11,520 --> 03:13:15,120
如果你想使用它就可以使用它

2701
03:13:15,120 --> 03:13:18,960
不要像我一样，但试着记住这个问号问号的语法

2702
03:13:18,960 --> 03:13:22,479
平等的好

2703
03:13:22,479 --> 03:13:26,720
我实际上也会在我的笔记中修正它是问号

2704
03:13:26,720 --> 03:13:31,439
问号等于好

2705
03:13:31,439 --> 03:13:37,200
我将在我们讨论过的笔记中检查它

2706
03:13:37,200 --> 03:13:42,640
现在让我们稍微谈谈条件方法或

2707
03:13:42,640 --> 03:13:47,040
属性访问或条件调用

2708
03:13:47,040 --> 03:13:49,920
现在就像我们之前谈到的

2709
03:13:49,920 --> 03:13:54,640
与许多其他编程语言一样，你可以使用 dart 章节

2710
03:13:54,640 --> 03:14:00,239
使用点语法来访问或向下钻取

2711
03:14:00,239 --> 03:14:04,319
正如我们所见，其他对象中的属性、方法或函数

2712
03:14:04,319 --> 03:14:10,399
例如 dart 中的 or 列表，你可以说

2713
03:14:10,399 --> 03:14:14,960
我有一个列表，然后你想得到它的长度然后你会说

2714
03:14:14,960 --> 03:14:20,000
列表点链接的名称，并在该列表中向下钻取并获取

2715
03:14:20,000 --> 03:14:25,359
链接属性还可以，但是正如您在本文前面看到的那样

2716
03:14:25,359 --> 03:14:31,040
第五章中的一章偶数列表或几乎任何数据类型

2717
03:14:31,040 --> 03:14:36,479
in dart 也可以为空所以你如何访问

2718
03:14:36,479 --> 03:14:42,399
空对象的属性，所以现在让我们看一下

2719
03:14:42,399 --> 03:14:46,479
假设我要删除这些属性

2720
03:14:46,479 --> 03:14:50,399
来到我们函数的参数

2721
03:14:50,399 --> 03:14:56,399
我要说的是，我要下去这里并删除这些参数

2722
03:14:56,399 --> 03:15:02,319
在这里让我们创建一个可选的字符串列表

2723
03:15:02,319 --> 03:15:07,279
不是可选字符串的可选列表，而只是有效的可选列表

2724
03:15:07,279 --> 03:15:12,479
字符串好的，所以我只想说字符串列表作为一个选项，对不起

2725
03:15:12,479 --> 03:15:15,279
一个可选列表，我只想说意味着

2726
03:15:15,279 --> 03:15:19,520
这等于让我们现在说 foo 好吧

2727
03:15:19,520 --> 03:15:24,239
现在在这里，如果你试图说出最终长度

2728
03:15:24,239 --> 03:15:29,680
名称或名称数量是名称链接

2729
03:15:29,680 --> 03:15:34,399
好吧，如果你再看看这里的数据类型我

2730
03:15:34,399 --> 03:15:38,399
意思是我们实际上可以说这是空的

2731
03:15:38,399 --> 03:15:42,720
你可以看到这里实际上允许飞镖

2732
03:15:42,720 --> 03:15:49,200
或者知道这个列表在

2733
03:15:49,200 --> 03:15:52,800
然而，如果你接受它，我认为我们接受它实际上更好

2734
03:15:52,800 --> 03:15:58,239
值作为参数，这样飞镖分析仪就不能太聪明了

2735
03:15:58,239 --> 03:16:03,439
对目前的实际情况做出假设，所以

2736
03:16:03,439 --> 03:16:06,720
你可以看到分析仪告诉你不可能

2737
03:16:06,720 --> 03:16:11,920
无条件访问，因为接收者可以为空，这意味着是的

2738
03:16:11,920 --> 03:16:15,359
正如它所说的那样，名字可能意味着所有我不知道它是否不正确

2739
03:16:15,359 --> 03:16:18,960
现在与否，但它可以

2740
03:16:18,960 --> 03:16:23,279
那么你如何访问这种方式来做到这一点，就像旧的方式是

2741
03:16:23,279 --> 03:16:27,920
说如果名称不为空

2742
03:16:27,920 --> 03:16:32,560
然后长度被命名为长度好

2743
03:16:32,560 --> 03:16:39,439
uh 最终长度是 uh in x 好的，所以这告诉 dart

2744
03:16:39,439 --> 03:16:42,640
看我实际上是在检查空值

2745
03:16:42,640 --> 03:16:48,080
嗯，或者我正在检查该列表在第八行是否为空

2746
03:16:48,080 --> 03:16:52,800
如果它不为空，那么我将访问它的长度属性

2747
03:16:52,800 --> 03:16:56,720
这就是所谓的类型提升

2748
03:16:56,720 --> 03:17:00,960
并输入数据类型，因此在这种情况下，您可以在线查看

2749
03:17:00,960 --> 03:17:04,880
八号或现在，如果我去创建一个新行

2750
03:17:04,880 --> 03:17:08,080
在线数字八，我说名字

2751
03:17:08,080 --> 03:17:13,439
这是一个可以包含字符串的可选列表

2752
03:17:13,439 --> 03:17:17,920
在这里你可以看到它是嗯它被输入为

2753
03:17:17,920 --> 03:17:23,520
相同，但它被提升为不为空，因为您已经检查过

2754
03:17:23,520 --> 03:17:27,520
这是因为如果您删除这些代码行，您现在可以看到

2755
03:17:27,520 --> 03:17:31,439
错误完全相同的行，但如果您首先检查 null 并且您没有得到

2756
03:17:31,439 --> 03:17:35,840
错误是类型提升好吧，所以这有点像旧的方式

2757
03:17:35,840 --> 03:17:38,160
这样做嗯

2758
03:17:38,160 --> 03:17:42,640
所以假设你想要你想要提取长度所以你说

2759
03:17:42,640 --> 03:17:47,120
最终长度或表示长度正确，您创建了变量，但您

2760
03:17:47,120 --> 03:17:51,359
当你说如果名字不为空时，不要给它分配任何东西

2761
03:17:51,359 --> 03:17:56,720
长度等于名称的长度，否则长度为零，可以，所以这是

2762
03:17:56,720 --> 03:18:02,800
这样做的一种方法是这样做的旧方法

2763
03:18:02,800 --> 03:18:05,040
你可能是

2764
03:18:05,040 --> 03:18:09,040
试着变得聪明，说好吧，如果我不需要这个 else 声明

2765
03:18:09,040 --> 03:18:13,200
只是说这是一个变量，默认情况下为零，是的，你

2766
03:18:13,200 --> 03:18:17,040
会是正确的，因为长度默认为零，然后如果名称不为空

2767
03:18:17,040 --> 03:18:20,720
然后你说好的长度等于名称长度

2768
03:18:20,720 --> 03:18:25,200
但是有一种更好的方法可以做到这一点，那就是使用

2769
03:18:25,200 --> 03:18:29,760
任务点问号我相信或实际上是的问号是的

2770
03:18:29,760 --> 03:18:37,200
有条件地执行或调用内部方法或属性的运算符

2771
03:18:37,200 --> 03:18:40,960
如果存在该可选值，则为可选

2772
03:18:40,960 --> 03:18:46,319
如果我们说最终链接，我将向您展示如何做到这一点

2773
03:18:46,319 --> 03:18:50,560
是名字，然后你会放问号点，然后你会说链接

2774
03:18:50,560 --> 03:18:54,080
你会看到这段代码就像被毫无问题地执行

2775
03:18:54,080 --> 03:18:58,640
但是，如果您去这里，您会看到长度是一个可选值，它是

2776
03:18:58,640 --> 03:19:02,000
可选整数，所以您可能会喜欢，我该如何解决

2777
03:19:02,000 --> 03:19:08,399
我怎么说我希望长度为零

2778
03:19:08,399 --> 03:19:13,680
如果这个长度值是

2779
03:19:13,680 --> 03:19:18,080
null 表示如果名称列表为 null 并且我们无法提取它的名称

2780
03:19:18,080 --> 03:19:23,120
长度然后我希望这个值设置为空，那就是使用我们的

2781
03:19:23,120 --> 03:19:27,040
问号 问号运算符，我们谈到了 null 感知

2782
03:19:27,040 --> 03:19:30,960
我们之前讨论过的运算符 中缀运算符

2783
03:19:30,960 --> 03:19:35,040
所以你可以这样做你会说长度是

2784
03:19:35,040 --> 03:19:40,319
如果名称列表存在意味着它的值不为空，那么抓住它的

2785
03:19:40,319 --> 03:19:45,600
长度，否则取值 0 并将其分配给长度，如果你去

2786
03:19:45,600 --> 03:19:49,920
现在第 9 行，我说长度，所以你可以看到它是一个整数

2787
03:19:49,920 --> 03:19:53,279
所以不是嗯

2788
03:19:53,279 --> 03:19:59,040
不再是可选整数，因此您也可以做同样的事情

2789
03:19:59,040 --> 03:20:02,399
就像你可以说出名字一样，你可以做同样的事情

2790
03:20:02,399 --> 03:20:06,720
属性，您也可以为函数执行此操作，因此您可以说名称添加

2791
03:20:06,720 --> 03:20:10,960
没错，所以你看到这是一个函数

2792
03:20:10,960 --> 03:20:15,040
调用 add 然后我们将 bass 的值添​​加到该列表中

2793
03:20:15,040 --> 03:20:19,040
但是你不能无条件地调用这个函数

2794
03:20:19,040 --> 03:20:23,760
一个可选值，因为它可能为 null

2795
03:20:23,760 --> 03:20:26,399
好的

2796
03:20:26,399 --> 03:20:31,200
所以这就像一个非常非常重要的

2797
03:20:31,200 --> 03:20:36,720
一点点学习黑暗 学习关于 dart 中的选项你是如何

2798
03:20:36,720 --> 03:20:40,479
可以使用可空值和

2799
03:20:40,479 --> 03:20:45,760
正如您将看到的，我们将在本课程中更多地讨论它

2800
03:20:45,760 --> 03:20:50,000
在很多情况下你必须

2801
03:20:50,000 --> 03:20:52,640
嗯

2802
03:20:52,640 --> 03:20:58,000
考虑所有价值观，尤其是如果您正在使用

2803
03:20:58,000 --> 03:21:02,080
图书馆不能制作太多的不同图书馆

2804
03:21:02,080 --> 03:21:06,479
假设和您的代码依赖于库和

2805
03:21:06,479 --> 03:21:10,319
你将不得不考虑好的没有价值意味着我

2806
03:21:10,319 --> 03:21:13,600
个人必须喜欢采取一些嗯

2807
03:21:13,600 --> 03:21:17,760
有意识地在我的代码中做出决定，以便执行代码片段

2808
03:21:17,760 --> 03:21:22,640
取决于值的缺失或存在，因此请尝试使用这些可选的

2809
03:21:22,640 --> 03:21:25,760
嗯，我教给你的 null 感知运算符

2810
03:21:25,760 --> 03:21:30,080
这里是 um 的 null 意识 um 基本上就像

2811
03:21:30,080 --> 03:21:33,520
决定选择像中缀运算符，告诉你是否

2812
03:21:33,520 --> 03:21:36,479
左侧或右侧取决于哪个不为空

2813
03:21:36,479 --> 03:21:40,800
首先，它会选择一个好的，该提议非常重要，并且

2814
03:21:40,800 --> 03:21:44,160
嗯，调用运算符是

2815
03:21:44,160 --> 03:21:48,720
在这里，你说一些可能为空的对象，然后对它做一些事情

2816
03:21:48,720 --> 03:21:52,560
或可识别空值的运算符

2817
03:21:52,560 --> 03:21:56,479
赋值运算符，将右边的值赋给变量 on

2818
03:21:56,479 --> 03:22:00,880
左边应该左边的变量为空，所以这些非常非常

2819
03:22:00,880 --> 03:22:05,600
理解很重要

2820
03:22:05,600 --> 03:22:07,600
好的嗯

2821
03:22:07,600 --> 03:22:11,920
既然我们已经谈过了，我会在我的笔记中记下那是

2822
03:22:11,920 --> 03:22:15,760
我们现在谈论的一个话题

2823
03:22:15,760 --> 03:22:21,200
我们也有嗯非常非常好的官方文档

2824
03:22:21,200 --> 03:22:25,840
关于 dart 中的 null 安全性，所以我将在

2825
03:22:25,840 --> 03:22:30,479
分隔符单独的屏幕，然后我会在这里提出来

2826
03:22:30,479 --> 03:22:36,160
你实际上也可以看到好吧

2827
03:22:36,160 --> 03:22:39,359
你可以在这里看到它说理解所有的安全，这很棒很棒

2828
03:22:39,359 --> 03:22:45,120
关于 dart 中的 null 安全性如何工作的文档

2829
03:22:45,120 --> 03:22:51,520
你可以看到很多例子，嗯，我的意思是它谈到了

2830
03:22:51,520 --> 03:22:56,080
绝对的开始 它实际上意味着什么

2831
03:22:56,080 --> 03:23:01,840
呃，你可以在这里看到 null 处于对象级别，所以它本身并不新颖

2832
03:23:01,840 --> 03:23:05,359
不像一个对象，所以你有列表和双打和

2833
03:23:05,359 --> 03:23:10,319
这里的整数，但 null 本身位于顶部，这有点像缺席

2834
03:23:10,319 --> 03:23:14,080
有价值的

2835
03:23:14,080 --> 03:23:17,120
所以这个链接中有很多例子，我

2836
03:23:17,120 --> 03:23:20,800
强烈建议你看看它一些你可能不明白的东西

2837
03:23:20,800 --> 03:23:24,880
例如像这个你会很容易理解的，因为它在那里说

2838
03:23:24,880 --> 03:23:29,520
是一种叫做类的东西，但我们还没有谈到类

2839
03:23:29,520 --> 03:23:32,800
和它的name参数名在这里

2840
03:23:32,800 --> 03:23:37,200
名为 showgizmo 的函数被称为 thing ，你可以看到它是

2841
03:23:37,200 --> 03:23:43,680
有条件地访问那个东西的属性

2842
03:23:43,680 --> 03:23:47,600
如此，然后，如果该属性本身是

2843
03:23:47,600 --> 03:23:53,439
null 它也有条件地访问它，所以如果这个属性可以为空并且

2844
03:23:53,439 --> 03:23:57,520
然后它正在访问该可为空的属性中的另一个属性

2845
03:23:57,520 --> 03:24:01,439
如果它不为空，那么我的意思是这是一个很好的方式，你可以尽可能地链接它们

2846
03:24:01,439 --> 03:24:06,160
看这里所以那么如果这个东西不为空那么

2847
03:24:06,160 --> 03:24:10,479
有条件地访问这个属性，所以它很漂亮，我的意思是

2848
03:24:10,479 --> 03:24:14,800
这个东西也可以在许多其他语言上使用，比如 rust 和 swift

2849
03:24:14,800 --> 03:24:17,840
这不是什么新鲜事，但有点像

2850
03:24:17,840 --> 03:24:21,840
呃，在飞镖中理解一个如此重要的话题，我认为你不应该只是

2851
03:24:21,840 --> 03:24:28,640
略过它，所以你应该真正学习如何使用它

2852
03:24:28,640 --> 03:24:34,479
好的，我们现在已经讨论了空值，所以我将把它放在我们的

2853
03:24:34,479 --> 03:24:40,399
在我的笔记中，现在我想第 5 章 5

2854
03:24:40,399 --> 03:24:44,000
这些信息足以让我们继续

2855
03:24:44,000 --> 03:24:49,200
下一章和下一章的章节编号

2856
03:24:49,200 --> 03:24:53,680
六 我们要谈谈一些非常非常多汁的东西

2857
03:24:53,680 --> 03:24:56,880
这就像第六章会像嗯

2858
03:24:56,880 --> 03:25:01,760
正如我所看到的，我的笔记有很多非常有趣的内容

2859
03:25:01,760 --> 03:25:05,040
枚举类对象等主题

2860
03:25:05,040 --> 03:25:09,439
自定义运算符构造函数工厂构造函数类方法

2861
03:25:09,439 --> 03:25:16,960
我的意思是继承和停止分类应用程序子类化抽象类所以

2862
03:25:16,960 --> 03:25:20,880
根据您的背景，您可能听说过

2863
03:25:20,880 --> 03:25:25,520
你可能像产品负责人或产品设计师，用户体验或任何你

2864
03:25:25,520 --> 03:25:29,040
可能没有软件工程背景，但

2865
03:25:29,040 --> 03:25:32,920
飞镖是嗯，它的核心是

2866
03:25:32,920 --> 03:25:38,720
面向对象的编程语言，这意味着 dart 中的事物是对象

2867
03:25:38,720 --> 03:25:44,319
object 是一个类的实例，我们将在下一章讨论，所以

2868
03:25:44,319 --> 03:25:47,840
嗯，让你了解飞镖和这些

2869
03:25:47,840 --> 03:25:52,399
例如我们已经讨论过列表并实际输入点

2870
03:25:52,399 --> 03:25:55,200
列表名称的前面并获取其长度，但您可能不会

2871
03:25:55,200 --> 03:25:59,439
真的知道它是如何工作的，所以为了理解所有这些东西

2872
03:25:59,439 --> 03:26:03,600
点表示您需要了解对象是什么才能理解

2873
03:26:03,600 --> 03:26:08,000
您需要知道什么是类以及何时理解类的对象

2874
03:26:08,000 --> 03:26:11,439
你将学习继承，然后你会谈论我们会谈论

2875
03:26:11,439 --> 03:26:16,479
抽象类属性静态函数就是这样

2876
03:26:16,479 --> 03:26:19,680
我们将在第六章讨论的是

2877
03:26:19,680 --> 03:26:24,720
重要的是，我相信每个飞镖开发人员都需要了解这一点，并且

2878
03:26:24,720 --> 03:26:30,239
我们正在学习所有这些东西，以便变得擅长做颤动，嗯，所以

2879
03:26:30,239 --> 03:26:34,160
呃，虽然你可以像服务器或者服务器应用程序一样去写

2880
03:26:34,160 --> 03:26:38,080
使用 dart 或者您可以使用 dart 编写命令行应用程序，但是这些

2881
03:26:38,080 --> 03:26:41,439
天镖主要用于写作

2882
03:26:41,439 --> 03:26:44,160
颤振应用程序，我没有任何

2883
03:26:44,160 --> 03:26:48,319
数据证明这一点，但当我在社区时，我可以亲眼看到

2884
03:26:48,319 --> 03:26:52,160
大多数人主要使用 dart 来编写 Flutter 应用程序，所以我们

2885
03:26:52,160 --> 03:26:56,560
做所有这些是为了更多地了解颤振，我强烈建议你

2886
03:26:56,560 --> 03:26:59,680
不要跳过我们谈论艺术的这些章节，特别是如果你

2887
03:26:59,680 --> 03:27:02,640
颤振发展的新手，所以说

2888
03:27:02,640 --> 03:27:07,040
让我们以现在的方式离开这一章第五章我们已经完成了

2889
03:27:07,040 --> 03:27:10,960
有了这个，让我们进入第六章，了解飞镖枚举和

2890
03:27:10,960 --> 03:27:14,960
对象欢迎来到这个扑的第六章

2891
03:27:14,960 --> 03:27:17,279
本章我们将要讨论的课程

2892
03:27:17,279 --> 03:27:23,760
关于 uh dart 枚举和对象，这些是我最喜欢的一些东西

2893
03:27:23,760 --> 03:27:26,960
说真的

2894
03:27:26,960 --> 03:27:31,840
在大多数编程语言中实际上都有相同的设施，所以

2895
03:27:31,840 --> 03:27:35,439
如果你跟随其他章节，那么你应该有一个工作

2896
03:27:35,439 --> 03:27:39,600
dart 项目现在设置，可能在模拟器或模拟器中运行，所以

2897
03:27:39,600 --> 03:27:44,000
您可以在 mac 上按 command s 或在 linux 上按 control s

2898
03:27:44,000 --> 03:27:48,319
和 windows 为了重新运行你的项目，所以你不必漂亮

2899
03:27:48,319 --> 03:27:52,239
做任何事，所以让我们开始吧，我只是要去

2900
03:27:52,239 --> 03:27:55,439
假设你已经准备好了

2901
03:27:55,439 --> 03:27:58,800
有这些要求

2902
03:27:58,800 --> 03:28:02,960
所以让我们从谈论开始

2903
03:28:02,960 --> 03:28:08,080
枚举，我将从上一章提出项目

2904
03:28:08,080 --> 03:28:12,080
让我们确保它在屏幕上，以便您可以轻松看到它

2905
03:28:12,080 --> 03:28:16,399
现在我要去我们创建的这个列表函数删除唯一的

2906
03:28:16,399 --> 03:28:21,279
那里的参数并删除它所以如果我现在按命令 s 什么都没有

2907
03:28:21,279 --> 03:28:24,720
应该发生在屏幕上，因为我们在测试中没有任何功能，所以

2908
03:28:24,720 --> 03:28:28,800
让我们谈谈枚举以及它们实际上是什么，正如您在此处看到的那样

2909
03:28:28,800 --> 03:28:32,560
动画被命名为相关项目的列表

2910
03:28:32,560 --> 03:28:35,200
现在一个枚举是

2911
03:28:35,200 --> 03:28:40,960
有点像以编程方式编写字符串

2912
03:28:40,960 --> 03:28:46,239
这样它就变成了一个实体，我的意思是

2913
03:28:46,239 --> 03:28:50,399
假设你有价值

2914
03:28:50,399 --> 03:28:53,279
name 然后你可以说 foo

2915
03:28:53,279 --> 03:28:59,040
你也会说 khan 的另一个名字也是 foo 他们都是一样的

2916
03:28:59,040 --> 03:29:02,800
字符串，但它们的身份不同

2917
03:29:02,800 --> 03:29:06,319
我的意思是在内部实际上就 const 而言，我不想过多介绍

2918
03:29:06,319 --> 03:29:09,520
comp 编译器实际上是如何工作的，但它们将成为

2919
03:29:09,520 --> 03:29:12,560
相同的字符串，但我的意思是你已经写了两次

2920
03:29:12,560 --> 03:29:16,560
所以这不是你必须写两次的完全相同的东西

2921
03:29:16,560 --> 03:29:20,560
所以一个枚举尝试尝试基本上

2922
03:29:20,560 --> 03:29:24,720
确保一个值的名称可以是

2923
03:29:24,720 --> 03:29:28,399
以编程方式引用所以让我们说

2924
03:29:28,399 --> 03:29:33,520
嗯，对不起枚举，这是飞镖中的一个关键词，这就是你创建一个

2925
03:29:33,520 --> 03:29:37,120
枚举嗯，我要拿这个，我们已经

2926
03:29:37,120 --> 03:29:40,880
在介绍过程中谈到了一些其他的事情对不起我不得不

2927
03:29:40,880 --> 03:29:45,200
不管怎样，看看我的笔记，所以我们这里有枚举，这就是你创建的方式

2928
03:29:45,200 --> 03:29:50,319
警卫中的动画，你会然后给一个名字

2929
03:29:50,319 --> 03:29:55,200
您的创新，与它们不同的变量和常量

2930
03:29:55,200 --> 03:29:59,200
用骆驼案写的你基本上必须在这里使用另一个外壳

2931
03:29:59,200 --> 03:30:04,479
是迭代中每个单词的第一个字母 名称必须是大写的

2932
03:30:04,479 --> 03:30:08,479
并且 the 和其余的字母必须是小写的，所以

2933
03:30:08,479 --> 03:30:13,359
在这种情况下，例如说人员属性可以

2934
03:30:13,359 --> 03:30:17,680
那么在这个枚举中的任何人你都会写

2935
03:30:17,680 --> 03:30:20,080
不同的属性，例如名字

2936
03:30:20,080 --> 03:30:22,800
最后一页

2937
03:30:22,800 --> 03:30:27,200
所以这基本上意味着你现在已经定义了一个相关列表

2938
03:30:27,200 --> 03:30:32,560
诸如名字姓氏年龄之类的东西被归类在特定的

2939
03:30:32,560 --> 03:30:36,479
在这种情况下人员属性可以的名称

2940
03:30:36,479 --> 03:30:40,399
你可以在你的代码中使用点符号来引用这些，这样你就可以说

2941
03:30:40,399 --> 03:30:43,359
人物属性

2942
03:30:43,359 --> 03:30:47,439
名字好，我们可以打印它，所以我只是

2943
03:30:47,439 --> 03:30:51,840
会按 command s，你可以看到它被打印到屏幕上，所以

2944
03:30:51,840 --> 03:30:54,640
嗯，我的意思是沉浸感真的是

2945
03:30:54,640 --> 03:30:59,520
很棒，因为我们继续学习飞镖以及飞镖是如何工作的

2946
03:30:59,520 --> 03:31:04,479
使用颤振我们如何解析从

2947
03:31:04,479 --> 03:31:08,319
例如一个服务器，但现在它足以让你

2948
03:31:08,319 --> 03:31:13,439
了解您可以对相关项目进行分类

2949
03:31:13,439 --> 03:31:16,880
在枚举下，以便您以后可以参考它们好吧

2950
03:31:16,880 --> 03:31:22,640
在室内你也可以得到这些uh的字符串表示

2951
03:31:22,640 --> 03:31:26,080
值使用他们的 name 属性，这是由为您创建的东西

2952
03:31:26,080 --> 03:31:31,279
默认所以如果你只是说名字你现在看到名字被打印到

2953
03:31:31,279 --> 03:31:36,319
屏幕作为字符串，但在此之前，如果您打印创新

2954
03:31:36,319 --> 03:31:40,800
这里的名字的值它会打印出整个事情好吧

2955
03:31:40,800 --> 03:31:45,439
所以我们的枚举很简短

2956
03:31:45,439 --> 03:31:49,359
实际上会经常使用它们

2957
03:31:49,359 --> 03:31:53,680
尤其是稍后我们会转到更高级的主题

2958
03:31:53,680 --> 03:31:58,080
在我们开发真正的应用程序时，但现在只知道这就是您的方式

2959
03:31:58,080 --> 03:32:00,880
使用枚举关键字创建信息，然后使用其余的

2960
03:32:00,880 --> 03:32:03,600
您只需将属性放在大括号中即可

2961
03:32:03,600 --> 03:32:06,319
所以

2962
03:32:06,319 --> 03:32:10,640
这是枚举

2963
03:32:10,640 --> 03:32:13,680
现在我们需要谈谈 switch 语句，实际上让我们把这个

2964
03:32:13,680 --> 03:32:18,479
回来，我要把它改成属性让我们说好吧

2965
03:32:18,479 --> 03:32:24,399
比如说动物类型，比如说 cat um

2966
03:32:24,399 --> 03:32:28,720
狗，然后让我们说兔子

2967
03:32:28,720 --> 03:32:30,880
可能是吧

2968
03:32:30,880 --> 03:32:35,200
假设我们有一个动物类型枚举，嗯

2969
03:32:35,200 --> 03:32:38,720
我们想要然后我们例如进入我们的

2970
03:32:38,720 --> 03:32:42,960
函数我们说动物类型动物类型所以有一个属性

2971
03:32:42,960 --> 03:32:47,359
我们期望通过我们的动物类型函数，然后

2972
03:32:47,359 --> 03:32:52,319
我们在这里用狗窝外壳命名该属性动物类型，所以如果我们这样做

2973
03:32:52,319 --> 03:32:55,439
然后我们转到我们的函数这里我们正在调用你可以看到的函数

2974
03:32:55,439 --> 03:32:59,359
我们得到一个错误，意味着有一个动物类型的参数

2975
03:32:59,359 --> 03:33:04,399
并且没有人在调用端传递它们

2976
03:33:04,399 --> 03:33:09,120
您调用函数的位置，即调用站点的名称

2977
03:33:09,120 --> 03:33:12,720
编程所以如果你来自设计背景或

2978
03:33:12,720 --> 03:33:16,080
嗯任何与软件开发无关的东西，所以你不会

2979
03:33:16,080 --> 03:33:19,279
可能对这种术语了解很多，但是

2980
03:33:19,279 --> 03:33:23,760
调用站点是您调用函数的位置，因此在此调用站点在线

2981
03:33:23,760 --> 03:33:28,960
数字 19 嗯，我们要通过一个动物类型

2982
03:33:28,960 --> 03:33:32,880
在这种情况下，我们就说 uh cat 好吧

2983
03:33:32,880 --> 03:33:38,560
所以在这里我们可以打印出来，我只想说动物类型

2984
03:33:38,560 --> 03:33:42,880
我要按 command s 你可以看到 cat 被打印在这里

2985
03:33:42,880 --> 03:33:47,840
现在，如果您想执行不同类型的代码，具体取决于

2986
03:33:47,840 --> 03:33:52,000
这种动物类型然后你可以你可以

2987
03:33:52,000 --> 03:33:56,000
建议您可以使用 if 语句，所以如果您只是说 if

2988
03:33:56,000 --> 03:34:04,399
动物类型等于动物类型 cat 你说 print all i left oh i love

2989
03:34:04,399 --> 03:34:13,600
如果动物类型是动物，猫还可以

2990
03:34:13,600 --> 03:34:18,800
你会说王子，或者你会说狗是如此蓬松，或者

2991
03:34:18,800 --> 03:34:22,960
某物

2992
03:34:22,960 --> 03:34:29,120
否则如果动物类型是动物类型

2993
03:34:29,120 --> 03:34:31,279
我说

2994
03:34:31,279 --> 03:34:36,479
我希望我有

2995
03:34:36,479 --> 03:34:40,399
所以这是使用正常的 if 语句，你说如果动物类型是 cat 然后等等

2996
03:34:40,399 --> 03:34:43,760
呜呜呜现在

2997
03:34:43,760 --> 03:34:47,279
这是一种方法，但不是推荐的使用方法

2998
03:34:47,279 --> 03:34:50,399
枚举和使用枚举的推荐方法，特别是如果

2999
03:34:50,399 --> 03:34:54,080
你做的就像我们在这里做的那样分支代码是使用一个开关

3000
03:34:54,080 --> 03:34:57,760

