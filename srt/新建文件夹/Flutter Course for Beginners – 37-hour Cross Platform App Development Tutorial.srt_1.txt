1
00:00:00,080 --> 00:00:03,840
this massive flutter course will take you from being an absolute beginner to


2
00:00:03,840 --> 00:00:08,480
being able to release apps on the google play store and the app store bandit is a


3
00:00:08,480 --> 00:00:13,120
very experienced software developer and an excellent teacher hello everyone and


4
00:00:13,120 --> 00:00:17,039
welcome to this free flota course my name is vandal and i'm a google


5
00:00:17,039 --> 00:00:21,680
developer expert for flutter and dart and let's jump and jump right in who's


6
00:00:21,680 --> 00:00:26,400
this course for i designed this course mainly for absolute beginners so whoever


7
00:00:26,400 --> 00:00:31,039
hasn't even done a written a single line of code before i actually when designing


8
00:00:31,039 --> 00:00:34,000
this course i designed it for two specific personas one was a graphic


9
00:00:34,000 --> 00:00:36,880
designer who was working mainly with figma


10
00:00:36,880 --> 00:00:40,320
actually it doesn't really matter what graphical tool you're using photoshop


11
00:00:40,320 --> 00:00:44,160
or figma or whatever or sketch and the other persona was a project


12
00:00:44,160 --> 00:00:49,200
manager who's mainly working with jira so um i've made the assumption that you


13
00:00:49,200 --> 00:00:52,879
pretty much don't know anything about software development from before and


14
00:00:52,879 --> 00:00:56,640
even if you're a software developer you could perhaps jump over the things that


15
00:00:56,640 --> 00:01:00,879
you might know but if you haven't done a flutter development from before i


16
00:01:00,879 --> 00:01:03,920
strongly suggest that you actually follow the chapters chronologically


17
00:01:03,920 --> 00:01:07,360
which is the way i've designed this course basically


18
00:01:07,360 --> 00:01:11,920
so um as i mentioned i want when i design this course i want i wanted


19
00:01:11,920 --> 00:01:15,920
everybody to just follow the chapters one at a time and one after each other


20
00:01:15,920 --> 00:01:20,479
chronologically so um i highly recommend that you don't jump over chapters just


21
00:01:20,479 --> 00:01:24,240
because there's so much information provided in each chapter and i will be


22
00:01:24,240 --> 00:01:27,680
referring back to information that i provided in previous chapters in each


23
00:01:27,680 --> 00:01:32,479
chapter so i think it's very good if you can just follow the course the way i


24
00:01:32,479 --> 00:01:36,479
design it to be consumed which is chronologically


25
00:01:36,479 --> 00:01:41,200
and what you learn in this course is not only the basics but you'll also go from


26
00:01:41,200 --> 00:01:45,040
a complete beginner to being able to release your


27
00:01:45,040 --> 00:01:49,759
applications in apple's app store and google's play store and we're going to


28
00:01:49,759 --> 00:01:53,200
be using a blend of different tools and software


29
00:01:53,200 --> 00:01:56,159
we're going to be using visual studio code we're using firebase for the


30
00:01:56,159 --> 00:02:01,040
backend which i'll teach you all about we're using even figma as a graphic


31
00:02:01,040 --> 00:02:04,880
designer to create our icons and screenshots and even


32
00:02:04,880 --> 00:02:09,759
our loading screens so and there's lots to


33
00:02:09,759 --> 00:02:12,879
be learned and i'll take you through those steps and i don't make any


34
00:02:12,879 --> 00:02:17,120
assumptions about what you may know from before so i'll explain everything along


35
00:02:17,120 --> 00:02:21,360
the way so you'll go from absolute beginner to be able to be able to


36
00:02:21,360 --> 00:02:25,280
actually release your two applications which is the same code base in apple's


37
00:02:25,280 --> 00:02:29,520
app store and google's play store uh if you if you're attending this


38
00:02:29,520 --> 00:02:33,040
course please do follow me on social media and i'll really really appreciate


39
00:02:33,040 --> 00:02:38,560
it i'm evan.mp on twitter and also you can find me by my full name on linkedin


40
00:02:38,560 --> 00:02:42,879
that'd be much appreciated this course of course uh for free


41
00:02:42,879 --> 00:02:46,080
but for those who want to and are able to


42
00:02:46,080 --> 00:02:51,280
support me um then you can do that by buying me a cup of coffee on


43
00:02:51,280 --> 00:02:57,040
buy me a coffee.com van that so without further ado let's just jump right into


44
00:02:57,040 --> 00:03:00,640
it hello everyone and welcome


45
00:03:00,640 --> 00:03:04,560
to the first chapter of our flutter course


46
00:03:04,560 --> 00:03:08,720
um there are so many different topics that


47
00:03:08,720 --> 00:03:12,159
i could choose for the first chapter they're


48
00:03:12,159 --> 00:03:18,159
and they're all very important however after going through the material


49
00:03:18,159 --> 00:03:22,239
that i've been preparing for you for this course i realized that one of the


50
00:03:22,239 --> 00:03:28,319
absolute basic points that we have to go through is the developer accounts


51
00:03:28,319 --> 00:03:32,560
um for apple and google now if you're not


52
00:03:32,560 --> 00:03:35,840
familiar with the term of developer account there


53
00:03:35,840 --> 00:03:37,920
are basically what a developer account


54
00:03:37,920 --> 00:03:43,599
allows you to do is to release your applications on um apple's app store and


55
00:03:43,599 --> 00:03:46,720
google's play store


56
00:03:47,280 --> 00:03:52,640
as i mentioned in the introduction you may choose to follow along this


57
00:03:52,640 --> 00:03:56,080
course without actually releasing the


58
00:03:56,080 --> 00:04:00,879
application to the app store and the play store


59
00:04:00,879 --> 00:04:05,200
but even if you do decide to not release the


60
00:04:05,200 --> 00:04:08,799
applications on the aforementioned stores you will


61
00:04:08,799 --> 00:04:12,400
still for the optimal experience of


62
00:04:12,400 --> 00:04:19,280
development for ios and android you will most definitely need a developer account


63
00:04:19,280 --> 00:04:24,320
and the reason behind that is


64
00:04:24,400 --> 00:04:29,840
i mean it is quite deep to try to explain the actual reason behind it


65
00:04:29,840 --> 00:04:32,560
but from my perspective one of the most


66
00:04:32,560 --> 00:04:35,840
important reasons you may want to have a developer account is to create the


67
00:04:35,840 --> 00:04:41,120
so-called app ids


68
00:04:41,120 --> 00:04:45,520
so every application on ios and every application on android has


69
00:04:45,520 --> 00:04:51,520
an identifier which is usually something called a reverse domain identifier and


70
00:04:51,520 --> 00:04:55,759
it's kind of like um i still find it strange


71
00:04:55,759 --> 00:04:58,720
the way it is but


72
00:04:59,199 --> 00:05:03,440
some were somehow it was decided that every application needs to have an


73
00:05:03,440 --> 00:05:08,160
identifier and every identifier is kind of like associated with a domain name


74
00:05:08,160 --> 00:05:11,600
and a domain name is kind of like a website for instance if you have


75
00:05:11,600 --> 00:05:16,160
a yourname.com uh as your website


76
00:05:16,160 --> 00:05:20,000
then you would say that okay i'm gonna create


77
00:05:20,000 --> 00:05:25,600
an application for ios and android in flutter and i'm gonna call it fubar


78
00:05:25,600 --> 00:05:28,000
then it was somehow decided that your


79
00:05:28,000 --> 00:05:32,320
applications identifier would then in that case be


80
00:05:33,039 --> 00:05:36,960
if you reverse it then it would literally be your domain


81
00:05:36,960 --> 00:05:41,199
in reverse which would become dot


82
00:05:41,199 --> 00:05:46,320
your name dot your application's name


83
00:05:46,320 --> 00:05:50,720
i don't really know i mean if somebody's


84
00:05:50,720 --> 00:05:53,840
if somebody knows the reasoning behind it i would be glad to hear that and i'm


85
00:05:53,840 --> 00:05:57,199
sure that there's resources out there explaining why that is the case but it


86
00:05:57,199 --> 00:06:00,240
kind of feels like it's become the


87
00:06:00,240 --> 00:06:04,560
norm and we just have to roll with it


88
00:06:04,560 --> 00:06:08,000
so the reason i explained the app


89
00:06:08,000 --> 00:06:11,680
identifier is that


90
00:06:12,080 --> 00:06:17,919
when you set up your back end later when we set up the back end later together


91
00:06:17,919 --> 00:06:21,759
in that the client that we write in flutter is going to talk with our


92
00:06:21,759 --> 00:06:26,560
backend and store the notes retrieve the notes create a user


93
00:06:26,560 --> 00:06:33,120
uh sign in with a user etc etc that back-end


94
00:06:33,120 --> 00:06:38,720
setup also will require you to have your app identifier


95
00:06:38,720 --> 00:06:40,960
and


96
00:06:41,280 --> 00:06:46,639
even though you don't necessarily need to have a developer account to get an


97
00:06:46,639 --> 00:06:50,720
app identifier because an app identifier is just something that you decide


98
00:06:50,720 --> 00:06:54,800
okay here's my app identifier i think my website is called this


99
00:06:54,800 --> 00:06:57,919
blah blah and even though you don't actually need a website that's the thing


100
00:06:57,919 --> 00:07:01,599
but an app identifier is usually associated with a website so don't worry


101
00:07:01,599 --> 00:07:04,080
about it you don't have to have a website in


102
00:07:04,080 --> 00:07:08,479
order to follow along with these steps that i'm going to name here


103
00:07:08,479 --> 00:07:12,720
but it is still good practice to create your developer account in order to


104
00:07:12,720 --> 00:07:18,080
officially register your app identifiers


105
00:07:18,080 --> 00:07:22,319
and another reason that you will need


106
00:07:22,319 --> 00:07:27,199
a developer account for apple and google is that you will


107
00:07:27,199 --> 00:07:30,880
for apple um


108
00:07:30,880 --> 00:07:35,599
if you want to be able to deploy your application


109
00:07:35,599 --> 00:07:41,039
onto a telephone and not use a simulator


110
00:07:41,039 --> 00:07:44,960
then you will need to register a developer account and


111
00:07:44,960 --> 00:07:49,520
use some resources that apple provides you in forms of certificates and keys


112
00:07:49,520 --> 00:07:53,120
and profiles in order to deploy your application to a


113
00:07:53,120 --> 00:07:58,039
telephone or an ipad for instance


114
00:07:58,400 --> 00:08:01,840
and android the world is a little bit different in that you don't have to do


115
00:08:01,840 --> 00:08:06,560
the same process but in order to then submit your application


116
00:08:06,560 --> 00:08:10,160
to google for review


117
00:08:10,160 --> 00:08:15,360
later so that it can be available for everybody who has an android telephone


118
00:08:15,360 --> 00:08:19,280
or a tablet you will still need a developer account so


119
00:08:19,280 --> 00:08:22,560
it goes without saying that it is a very important step


120
00:08:22,560 --> 00:08:26,400
um that even if you decide


121
00:08:26,400 --> 00:08:28,960
not to


122
00:08:29,680 --> 00:08:33,599
deploy your application later to app store and play store


123
00:08:33,599 --> 00:08:38,880
it's still a very fundamental step so i suggest that you actually go through


124
00:08:38,880 --> 00:08:42,240
these steps that i'm gonna provide you in the first chapter


125
00:08:42,240 --> 00:08:47,760
and that's why i actually decided to have this as chapter one


126
00:08:47,760 --> 00:08:50,160
um sorry i have to just edit my notes a


127
00:08:50,160 --> 00:08:53,279
little bit if you haven't watched the introduction


128
00:08:53,279 --> 00:08:56,640
to this course and you're just jumping here i suggest that you go to the


129
00:08:56,640 --> 00:09:00,720
introduction and watch it i know it was about 34 minutes it was quite a long


130
00:09:00,720 --> 00:09:05,600
introduction but there are so many important points that i feel everybody


131
00:09:05,600 --> 00:09:09,920
needs to know before you get started with the course so please watch those if


132
00:09:09,920 --> 00:09:13,839
you see me moving my head around then you know the reason


133
00:09:13,839 --> 00:09:18,160
and i explain a lot of things that are like the fundamentals of this


134
00:09:18,160 --> 00:09:21,839
course and the reasoning


135
00:09:21,839 --> 00:09:25,760
all those decisions which i believe are so important that i still suggest


136
00:09:25,760 --> 00:09:30,959
everybody watched an introduction before they actually start with the course so


137
00:09:30,959 --> 00:09:34,959
so we've now talked about


138
00:09:34,959 --> 00:09:39,680
the basics um and if you go to


139
00:09:39,680 --> 00:09:44,160
why we need a developer account i believe i've already covered this


140
00:09:44,160 --> 00:09:49,440
in that a developer account is the utility is an account that you


141
00:09:49,440 --> 00:09:54,959
register for apple and google that gives you extra resources as a


142
00:09:54,959 --> 00:09:58,800
developer in order to be able to deploy your application and deploy your


143
00:09:58,800 --> 00:10:04,360
applications to the respective app stores


144
00:10:04,560 --> 00:10:09,360
now if we talk about


145
00:10:09,360 --> 00:10:13,440
developer accounts there are two main types of developer


146
00:10:13,440 --> 00:10:20,240
accounts one is an individual account and the other one is a company account


147
00:10:20,240 --> 00:10:23,360
um and


148
00:10:23,360 --> 00:10:27,279
for me the biggest difference between these two different accounts is the


149
00:10:27,279 --> 00:10:31,360
liability um and by liability i mean


150
00:10:31,360 --> 00:10:36,480
if you if you register an individual account


151
00:10:36,480 --> 00:10:43,519
then you as an individual are liable for that application and as users download


152
00:10:43,519 --> 00:10:47,040
your application and interact with it if they have any problems any for instance


153
00:10:47,040 --> 00:10:51,680
any there's any judiciary problems


154
00:10:51,680 --> 00:10:55,120
like if if someone for some reason believes that


155
00:10:55,120 --> 00:10:59,279
you're storing their data in the wrong way or that you're storing their


156
00:10:59,279 --> 00:11:03,120
personal information without exposing that and telling the users about that


157
00:11:03,120 --> 00:11:07,920
then they can personally hold you liable for


158
00:11:07,920 --> 00:11:12,839
for for instance breach of information or gdpr


159
00:11:12,839 --> 00:11:18,800
infringements or whatever it is so just know that you can register yourself


160
00:11:18,800 --> 00:11:21,839
as an individual for both


161
00:11:21,839 --> 00:11:25,600
app store apple's app store and google's play store


162
00:11:25,600 --> 00:11:30,079
but you need to also be aware that should you wish to do that then you're


163
00:11:30,079 --> 00:11:32,880
personally liable for any problems that will


164
00:11:32,880 --> 00:11:34,800
that may be [Music]


165
00:11:34,800 --> 00:11:38,399
occurring in the future so that's the personal account


166
00:11:38,399 --> 00:11:42,720
or an individual account and as a company account then


167
00:11:42,720 --> 00:11:44,959
uh you kind of like


168
00:11:44,959 --> 00:11:48,000
based on what type of company you've created


169
00:11:48,000 --> 00:11:52,720
um you may or may not be personally liable


170
00:11:52,720 --> 00:11:55,120
for um


171
00:11:55,120 --> 00:11:59,600
any damages that may be caused to your users and if they bring it up to you now


172
00:11:59,600 --> 00:12:02,639
i know this is all sounding a lot serious


173
00:12:02,639 --> 00:12:08,480
in reality what we are trying to do is not that big a deal but we are still


174
00:12:08,480 --> 00:12:14,240
trying to store i mean the goal of this course is to um at this course is to


175
00:12:14,240 --> 00:12:17,680
uh go through


176
00:12:17,680 --> 00:12:22,839
an application and create an application that can store users notes notes can be


177
00:12:22,839 --> 00:12:28,240
quiet personal and you're storing those notes then um


178
00:12:28,240 --> 00:12:31,279
on a backhand that you have full access to


179
00:12:31,279 --> 00:12:35,040
so you're kind of like storing user created data


180
00:12:35,040 --> 00:12:38,880
so it is very important that you actually treat that data correctly make


181
00:12:38,880 --> 00:12:43,040
sure that nobody except those who are authorized


182
00:12:43,040 --> 00:12:47,200
can access that data so um


183
00:12:47,200 --> 00:12:52,079
from a responsibility point of view it is actually


184
00:12:52,079 --> 00:12:54,880
a little bit different what kind of


185
00:12:54,880 --> 00:12:58,160
company account you want to create if that's what you want to create now


186
00:12:58,160 --> 00:13:01,040
because for instance in sweden where i live


187
00:13:01,040 --> 00:13:06,000
you can have a personal company account in that or


188
00:13:06,000 --> 00:13:09,519
sorry a personal company so you can register a personal company it means


189
00:13:09,519 --> 00:13:13,600
that you are personally liable for that company


190
00:13:13,600 --> 00:13:17,600
um and you can also create a company that


191
00:13:17,600 --> 00:13:20,399
uh it has like uh


192
00:13:20,399 --> 00:13:24,399
it's like an umbrella basically sits on top and then there are people who are


193
00:13:24,399 --> 00:13:29,519
directors of the company and blah blah so you're not personally liable


194
00:13:29,519 --> 00:13:32,160
uh and that is the same structure that you


195
00:13:32,160 --> 00:13:36,320
can find in many other countries i believe you asked germany


196
00:13:36,320 --> 00:13:38,880
sweden england


197
00:13:38,880 --> 00:13:42,000
and many other countries you can set up companies that are


198
00:13:42,000 --> 00:13:46,160
either a sole proprietorship or something called


199
00:13:46,160 --> 00:13:49,120
english is not my first language but it's something like that or you can


200
00:13:49,120 --> 00:13:52,240
create like a limited company that you have limited liability and you're not


201
00:13:52,240 --> 00:13:56,800
personally liable so these are the different types of


202
00:13:56,800 --> 00:14:01,519
developer accounts that you can set up so


203
00:14:01,519 --> 00:14:06,480
we can i mean that point i think we all understand now that you can create an


204
00:14:06,480 --> 00:14:10,160
individual or a company account


205
00:14:11,120 --> 00:14:14,480
now i think i mean i personally registered


206
00:14:14,480 --> 00:14:17,839
already an account


207
00:14:18,160 --> 00:14:24,160
as an ios developer and an android app developer so


208
00:14:24,320 --> 00:14:29,839
and since i registered a company account i can't go through setting up the exact


209
00:14:29,839 --> 00:14:34,240
same company again but at least i can show you some of the


210
00:14:34,240 --> 00:14:39,040
steps involved in creating those


211
00:14:39,040 --> 00:14:44,880
accounts so what we could do is to um


212
00:14:44,880 --> 00:14:50,800
now you can't see the screen right now but i will bring it up here


213
00:14:50,800 --> 00:14:57,279
so that you can also see now i'm gonna bring my studio here


214
00:14:57,279 --> 00:15:01,600
and i'm going to make this screen a little bit bigger so that you can see my


215
00:15:01,600 --> 00:15:05,040
screen better so


216
00:15:05,040 --> 00:15:10,639
let me also make this a little bit smaller on top so that you can see


217
00:15:10,639 --> 00:15:17,600
the content a little bit better so you can see here that there are two


218
00:15:17,600 --> 00:15:21,839
options available to you either you enroll as an individual or you enroll as


219
00:15:21,839 --> 00:15:26,800
an organization and it is strongly recommended actually


220
00:15:26,800 --> 00:15:29,120
um


221
00:15:29,440 --> 00:15:35,040
so you need to make sure that you have two-factor authentication turned on and


222
00:15:35,040 --> 00:15:39,199
so that's that's not a problem all this means basically as an individual it


223
00:15:39,199 --> 00:15:42,959
means that just you you will need an account you will need to set up an


224
00:15:42,959 --> 00:15:45,360
account


225
00:15:45,600 --> 00:15:49,279
however if you want to set up as an organization like if you have a limited


226
00:15:49,279 --> 00:15:53,120
company and you want to create an apple developer account that is linked to that


227
00:15:53,120 --> 00:15:56,320
organization is a little bit different because


228
00:15:56,320 --> 00:15:59,920
um you will need to set up something called


229
00:15:59,920 --> 00:16:04,639
addons or duns or i don't know how you want to pronounce the uns


230
00:16:04,639 --> 00:16:10,079
which is kind of like a it's a new thing for me at least but it


231
00:16:10,079 --> 00:16:15,920
is an identifier for your company that you either have been assigned to already


232
00:16:15,920 --> 00:16:18,959
um by


233
00:16:18,959 --> 00:16:24,800
i think there is a company called dmb um


234
00:16:24,959 --> 00:16:31,040
so if we go to let me see if i can bring the notes for that


235
00:16:31,360 --> 00:16:37,519
uh let's see learn more if you go to learn more here


236
00:16:37,519 --> 00:16:41,120
here dmb


237
00:16:41,120 --> 00:16:45,199
is called by done and bradstreet


238
00:16:45,519 --> 00:16:49,120
so there then we have uh the ability to


239
00:16:49,120 --> 00:16:53,279
register a duns number um


240
00:16:53,279 --> 00:16:58,160
for me i was one of the lucky people to have already been assigned a duns number


241
00:16:58,160 --> 00:17:01,040
for my company um


242
00:17:01,040 --> 00:17:05,679
by dmb because you either have um let's see if


243
00:17:05,679 --> 00:17:09,600
if they write it here you see it says dmv may have already


244
00:17:09,600 --> 00:17:13,039
assigned your organization a free uh duan's number


245
00:17:13,039 --> 00:17:16,480
before enrolling look up your organization to see if you have a duns


246
00:17:16,480 --> 00:17:21,280
number so you can just click on the link and we can go here


247
00:17:21,280 --> 00:17:24,880
and you can then select your region for me


248
00:17:24,880 --> 00:17:28,640
it would be sweden then i would write my company name


249
00:17:28,640 --> 00:17:32,480
some address information contact information etc etc


250
00:17:32,480 --> 00:17:36,640
and then you can check whether there is a duns number assigned


251
00:17:36,640 --> 00:17:40,720
to your company so i suggest that you actually do this by going to this


252
00:17:40,720 --> 00:17:44,760
website okay


253
00:17:46,000 --> 00:17:50,160
so that's for a duns number if you already have one but if you don't have


254
00:17:50,160 --> 00:17:56,880
one then you will have to create and request a duans number from dnb


255
00:17:56,880 --> 00:18:01,520
i would show you the website for dmb and the uns number right now but


256
00:18:01,520 --> 00:18:06,080
my browser is set up so that my locale is already provided to the browser which


257
00:18:06,080 --> 00:18:09,200
is swedish and then if i go to the dmv website you're gonna see everything in


258
00:18:09,200 --> 00:18:12,559
swedish and that doesn't make any sense just to


259
00:18:12,559 --> 00:18:19,919
read the information in swedish but i believe you can go to dmb's website um


260
00:18:19,919 --> 00:18:23,440
so if if i search for a dmb


261
00:18:23,440 --> 00:18:28,080
duns or dunes or here so this is a swedish


262
00:18:28,080 --> 00:18:34,000
localized website for dmb let's see if it can change the language


263
00:18:34,000 --> 00:18:36,400
um


264
00:18:37,520 --> 00:18:43,840
actually i can see here that they're very they're actually in sweden


265
00:18:44,720 --> 00:18:48,240
and i wonder if we can here change country


266
00:18:48,240 --> 00:18:50,960
let's just say


267
00:18:52,880 --> 00:18:55,880
international


268
00:18:56,320 --> 00:19:00,080
so if we go here


269
00:19:00,080 --> 00:19:03,840
let's see if he can um


270
00:19:03,919 --> 00:19:08,240
if there's any way to actually request a duns number


271
00:19:08,240 --> 00:19:12,160
like if he sir say b-u-n-s


272
00:19:12,480 --> 00:19:14,799
um


273
00:19:16,320 --> 00:19:22,160
and i can't see anything related to that to be honest with you so if you go back


274
00:19:23,600 --> 00:19:27,280
here i can see i can request the duns and


275
00:19:27,280 --> 00:19:33,039
here the locale is svse and here the locale was engb


276
00:19:33,039 --> 00:19:38,080
so what happens if we just go back to this url that we were on before


277
00:19:38,080 --> 00:19:42,880
and then i just change the locale does that work


278
00:19:42,880 --> 00:19:47,200
well unfortunately but i mean here the uns number


279
00:19:47,200 --> 00:19:52,080
um get a duns number okay that's good


280
00:19:52,080 --> 00:19:56,640
and then and you can hear say i'm an apple developer


281
00:19:56,640 --> 00:20:01,360
press continue oh it sends you back here


282
00:20:01,360 --> 00:20:06,240
um that was really bad


283
00:20:06,240 --> 00:20:10,240
so it says look up your organization


284
00:20:10,240 --> 00:20:14,320
in apple's website uh


285
00:20:14,320 --> 00:20:18,320
and when you when you try to get a uns number


286
00:20:18,320 --> 00:20:24,240
it tells you to go to apple's website um


287
00:20:25,440 --> 00:20:30,480
if we say that then okay legal business name etc etc okay


288
00:20:30,480 --> 00:20:35,120
so you will you will need to go through this process which doesn't seem to be


289
00:20:35,120 --> 00:20:39,039
completely easy to get a duns number you see requested


290
00:20:39,039 --> 00:20:44,120
the uns number so you probably just want to go to dmb.coms


291
00:20:44,679 --> 00:20:49,520
number.html and i i can't explain this complete


292
00:20:49,520 --> 00:20:53,039
process to be honest with you because first of all it will be a waste of time


293
00:20:53,039 --> 00:20:57,039
for both of us uh because these are so many moving


294
00:20:57,039 --> 00:21:02,240
parts and a third-party company that i have no control over so if i even try to


295
00:21:02,240 --> 00:21:06,080
explain their process it may change tomorrow so there's


296
00:21:06,080 --> 00:21:11,039
it's not a good investment of our time but everybody else has figured it out


297
00:21:11,039 --> 00:21:14,799
and i'm pretty sure that if you just go and say request the uns number you can


298
00:21:14,799 --> 00:21:17,679
just follow the process and then


299
00:21:17,679 --> 00:21:23,120
get your uns number but begin by going through


300
00:21:23,120 --> 00:21:26,799
look up your organization so


301
00:21:26,799 --> 00:21:31,600
you may already have been assigned a free duns number so


302
00:21:31,600 --> 00:21:36,400
do that first please but but if you have to request the uns number i believe


303
00:21:36,400 --> 00:21:41,600
there is a little bit of a cost to it and that is about 70 dollars if i'm 70


304
00:21:41,600 --> 00:21:44,720
to 80 dollars at the time of recording this video


305
00:21:44,720 --> 00:21:47,600
so count with almost about a hundred


306
00:21:47,600 --> 00:21:51,679
dollars and hopefully not more


307
00:21:51,679 --> 00:21:56,720
uh hopefully actually a lot less about around um


308
00:21:56,720 --> 00:22:01,120
70 dollars at least does that make sense i said so many


309
00:22:01,120 --> 00:22:05,440
numbers seventy dollars at least so um


310
00:22:05,440 --> 00:22:09,280
try to get your duns number at least that that's what apple says you will


311
00:22:09,280 --> 00:22:13,360
need now of course if you want to register


312
00:22:13,360 --> 00:22:18,559
as a company i can't stress this enough you will need a website


313
00:22:18,559 --> 00:22:24,080
i remember vividly when i registered a developer account at apple


314
00:22:24,080 --> 00:22:28,640
and they rejected my request saying that well


315
00:22:28,640 --> 00:22:33,600
your website doesn't have any content and they were right because i just


316
00:22:33,600 --> 00:22:38,080
created an empty website like a domain i regis i know i didn't actually create an


317
00:22:38,080 --> 00:22:44,720
empty website i registered a domain and there was no website so when you


318
00:22:44,720 --> 00:22:50,880
typed my website's name it was it would just not show you anything so


319
00:22:50,880 --> 00:22:54,159
um and they came back and said no your application is rejected because you


320
00:22:54,159 --> 00:22:57,360
don't have a website what kind of company are you


321
00:22:57,360 --> 00:23:02,240
so then i had to actually get like a hosting service and i have some content


322
00:23:02,240 --> 00:23:07,520
in there have like a support so if you are registering as


323
00:23:07,520 --> 00:23:12,880
a website sorry as a company as an organization you will need a hosting


324
00:23:12,880 --> 00:23:16,240
service you will need a domain provider uh


325
00:23:16,240 --> 00:23:20,080
you will need to ensure that you have a website because they're not the same


326
00:23:20,080 --> 00:23:24,159
thing if you have a host and you have a domain provider it still


327
00:23:24,159 --> 00:23:30,159
doesn't mean that you have content on your web page but what i realize is


328
00:23:30,159 --> 00:23:34,480
that if you register your domain and have hosting


329
00:23:34,480 --> 00:23:38,320
service make sure that you have a website just have some


330
00:23:38,320 --> 00:23:42,240
content in there say hello we are this business that business


331
00:23:42,240 --> 00:23:45,520
um we work with this and this if you have


332
00:23:45,520 --> 00:23:48,880
any questions contact this email and here's our phone number here's their


333
00:23:48,880 --> 00:23:52,640
address etc so you need to ensure that if you have


334
00:23:52,640 --> 00:23:58,080
an organization it is actually an organization it's not just like hi my


335
00:23:58,080 --> 00:24:03,600
name is fubar i'm sitting at home contact me if you have any questions not


336
00:24:03,600 --> 00:24:05,840
like that so


337
00:24:05,840 --> 00:24:09,360
and of course after you made your decision you start the enrollment


338
00:24:09,360 --> 00:24:13,679
process so now


339
00:24:13,679 --> 00:24:16,880
learn more continue enrollment on the web you can do


340
00:24:16,880 --> 00:24:20,400
and then you come here and you will basically need to provide your


341
00:24:20,400 --> 00:24:23,520
information and continue with the process now we're


342
00:24:23,520 --> 00:24:27,120
not going to go through this but the important thing i have to mention


343
00:24:27,120 --> 00:24:29,840
here is that as you


344
00:24:29,840 --> 00:24:36,000
go through the enrollment process as a an apple developer unfortunately there


345
00:24:36,000 --> 00:24:40,400
is a cost uh last time which is about a few months


346
00:24:40,400 --> 00:24:44,400
ago when i registered or i had to renew my registration you have to renew your


347
00:24:44,400 --> 00:24:48,080
registration for


348
00:24:48,880 --> 00:24:52,480
apple's developer account you have to renew it every year


349
00:24:52,480 --> 00:24:57,120
and as i've mentioned here the


350
00:24:57,360 --> 00:25:00,400
process is not free unfortunately it costs


351
00:25:00,400 --> 00:25:03,360
or last time i registered or renewed my


352
00:25:03,360 --> 00:25:08,080
registration it costs 99 and i believe it's been 99 for a very long time so if


353
00:25:08,080 --> 00:25:10,960
you're in sweden it costs about a thousand


354
00:25:10,960 --> 00:25:15,200
crowns if you're in england it probably costs about 80 pounds or something


355
00:25:15,200 --> 00:25:21,520
um and in the us it's about yeah just count with almost a hundred dollars so


356
00:25:21,520 --> 00:25:24,320
i used to be able to provide this like you have to have some sort of credit


357
00:25:24,320 --> 00:25:27,039
card or debit card to be able to pay for it so


358
00:25:27,039 --> 00:25:31,679
um after you've done that after you register your account as an organization


359
00:25:31,679 --> 00:25:36,080
you will have direct access then or an immediate access to your developer


360
00:25:36,080 --> 00:25:42,400
account and you can start developing applications etc etc etc so


361
00:25:42,400 --> 00:25:47,840
if you're following along with this um course and you want to deploy your


362
00:25:47,840 --> 00:25:52,000
application to the app store and play store please do this first


363
00:25:52,000 --> 00:25:57,840
get your developer account either as an organization or as a


364
00:25:57,840 --> 00:26:02,000
as an individual get that process out of the way because


365
00:26:02,000 --> 00:26:05,919
a developer account especially if you're an organization as i mentioned here is


366
00:26:05,919 --> 00:26:12,080
not a super fast process i mean when you get the account then it's simple it's


367
00:26:12,080 --> 00:26:18,320
fast and you're in there immediately but the process itself is a long process so


368
00:26:18,320 --> 00:26:22,320
um i remember for me it took about two weeks because i got one rejection took


369
00:26:22,320 --> 00:26:27,520
about one week for them to renew like to review the process the documents again


370
00:26:27,520 --> 00:26:31,440
so is not a fast process uh unfortunately


371
00:26:31,440 --> 00:26:34,159
it's like very


372
00:26:34,799 --> 00:26:41,440
it's yeah it's just long long boring process so


373
00:26:41,440 --> 00:26:43,919
get that out of the way if you can please


374
00:26:43,919 --> 00:26:46,880
um so


375
00:26:46,880 --> 00:26:49,840
that's for the


376
00:26:49,840 --> 00:26:55,120
long and not free part for ios


377
00:26:55,120 --> 00:26:58,480
and also


378
00:26:58,480 --> 00:27:02,640
one more thing that i need to mention is that


379
00:27:02,640 --> 00:27:06,320
if you're registering and you want to sell applications which is not the


380
00:27:06,320 --> 00:27:10,159
purpose of this course but if you want to sell applications then you will have


381
00:27:10,159 --> 00:27:13,919
to provide some banking and tax information


382
00:27:13,919 --> 00:27:17,440
so they need to ensure that the stuff that you're selling in different


383
00:27:17,440 --> 00:27:21,520
countries the money that is then being sent to your bank account


384
00:27:21,520 --> 00:27:24,559
will be accounted for when you're paying your taxes


385
00:27:24,559 --> 00:27:28,559
so and i believe that if you're trying to sell


386
00:27:28,559 --> 00:27:34,720
apps on the app store then you will have to fill in some forms with the u.s tax


387
00:27:34,720 --> 00:27:39,840
offices um i don't even remember irs i think


388
00:27:39,840 --> 00:27:44,080
internal revenue services or something like the irs i believe that you have to


389
00:27:44,080 --> 00:27:47,760
fill some forms like send the forms to them then they will come back with some


390
00:27:47,760 --> 00:27:52,399
sort of identifier to you and then you will need to use that identifier


391
00:27:52,399 --> 00:27:56,559
on apple's website in order to basically say that yeah yeah i know i'm selling


392
00:27:56,559 --> 00:28:01,520
stuff in the u.s i'm selling stuff in japan i'm selling stuff in sweden norway


393
00:28:01,520 --> 00:28:06,000
but i'm gonna pay taxes for them here in my


394
00:28:06,000 --> 00:28:09,039
country and that's what the form says here


395
00:28:09,039 --> 00:28:15,279
here is my name here's my company i'm an organization or i'm an individual


396
00:28:15,279 --> 00:28:18,320
so i have no company my


397
00:28:18,320 --> 00:28:21,440
personal identification number my country is this


398
00:28:21,440 --> 00:28:26,480
um is my address my phone number etc and then you send it to them


399
00:28:26,480 --> 00:28:31,120
to irs and then they come back and say okay now we know who you are and here is


400
00:28:31,120 --> 00:28:35,360
your um identifier number like a business


401
00:28:35,360 --> 00:28:38,799
identifier number bin or something they call it i think i don't remember exactly


402
00:28:38,799 --> 00:28:42,240
but i believe depending on whether you're a business or an individual then


403
00:28:42,240 --> 00:28:46,799
the number is a little bit different so if you're a business i think it's bin


404
00:28:46,799 --> 00:28:49,679
and if you're an individual is in i don't know


405
00:28:49,679 --> 00:28:52,320
so um i don't know what that dialogue was


406
00:28:52,320 --> 00:28:56,159
some bluetooth devices wants to connect to my computer i don't know what it is


407
00:28:56,159 --> 00:29:01,760
so that's that part it can be long and it's


408
00:29:01,760 --> 00:29:05,039
not free okay


409
00:29:05,919 --> 00:29:10,960
that was a lot of information um that's for ios


410
00:29:10,960 --> 00:29:16,320
now uh what we can do now is to talk a little bit about android as well


411
00:29:16,320 --> 00:29:19,679
and the good thing about the android process


412
00:29:19,679 --> 00:29:24,640
like setting up your account for as a google developer is that it's a lot


413
00:29:24,640 --> 00:29:30,240
more straightforward as you would expect from google and given that they're um


414
00:29:30,240 --> 00:29:33,679
even like sending updates to an android app to the


415
00:29:33,679 --> 00:29:37,440
google developer console is a lot more straightforward than it is for ios i


416
00:29:37,440 --> 00:29:42,320
don't want to scare you but it is a fact and you will know that later when we


417
00:29:42,320 --> 00:29:46,559
actually get to the end of this course where we release the apps


418
00:29:46,559 --> 00:29:51,440
for ios and android that it is a little bit more straightforward for google


419
00:29:51,440 --> 00:29:54,600
play store


420
00:29:55,279 --> 00:29:58,880
but you still need to sign up for a developer account


421
00:29:58,880 --> 00:30:01,440
so um


422
00:30:01,440 --> 00:30:05,840
i'm gonna take in my notes uh that i've talked about that


423
00:30:05,840 --> 00:30:08,960
so what we also need to know is that there


424
00:30:08,960 --> 00:30:13,520
is a url that we can go to i'm going to copy that and paste it over


425
00:30:13,520 --> 00:30:16,480
here so you see which one i'm talking about


426
00:30:16,480 --> 00:30:21,840
here then you can see that you can set up a


427
00:30:21,840 --> 00:30:25,440
developer account and once you've logged in so i'm assuming that you're logged in


428
00:30:25,440 --> 00:30:31,360
then you go to play.google.com slash console slash user or you zero sign up


429
00:30:31,360 --> 00:30:35,279
is where url it may change so let's just


430
00:30:35,279 --> 00:30:40,080
what you can do is just google google play console developer account or


431
00:30:40,080 --> 00:30:43,919
google developer account then you will end up in a url that looks kind of like


432
00:30:43,919 --> 00:30:46,880
this so so don't count with this url that i


433
00:30:46,880 --> 00:30:51,760
mentioned here because it may change that's what i'm saying and


434
00:30:51,760 --> 00:30:55,360
you can as it is for ios development you can either set it up personally as an


435
00:30:55,360 --> 00:30:58,320
individual or you can set up as an organization now i


436
00:30:58,320 --> 00:31:01,760
happen to have set it up for myself as an organization because i do have a


437
00:31:01,760 --> 00:31:06,080
company here in sweden so it is a lot easier for me to tie all my business


438
00:31:06,080 --> 00:31:13,120
relations with apple and google into one entity which is my developer account for


439
00:31:13,519 --> 00:31:17,360
sorry which is my company so


440
00:31:17,360 --> 00:31:21,279
it wouldn't make so much sense for me to explain this either to go through all


441
00:31:21,279 --> 00:31:24,960
the details but if you want to set it up for yourself as an individual just press


442
00:31:24,960 --> 00:31:27,919
on get started or if you want to set it as an organization just press get


443
00:31:27,919 --> 00:31:32,000
started there as you can see you can provide information about your


444
00:31:32,000 --> 00:31:35,360
organization and you can see here as well as soon as you say i'm an


445
00:31:35,360 --> 00:31:37,840
organization then they say okay what's the website


446
00:31:37,840 --> 00:31:40,799
so uh you can see if i don't have a website


447
00:31:40,799 --> 00:31:44,240
we recommend adding a website that represents your organization well


448
00:31:44,240 --> 00:31:47,840
kind of makes sense i mean if you're a company where's your website every


449
00:31:47,840 --> 00:31:51,760
company should have a website unless you're like a pizza restaurant or


450
00:31:51,760 --> 00:31:55,360
something even a pizza restaurant probably needs a website but we have a


451
00:31:55,360 --> 00:31:58,559
pizza restaurant here in our town that doesn't have website so


452
00:31:58,559 --> 00:32:02,320
they're on facebook um


453
00:32:02,559 --> 00:32:05,919
and you don't you probably don't want to say that your company's website is on


454
00:32:05,919 --> 00:32:09,279
facebook so um


455
00:32:09,279 --> 00:32:12,399
so yeah where are we here


456
00:32:12,399 --> 00:32:15,679
and if you say you're an individual then you come here


457
00:32:15,679 --> 00:32:20,720
and they ask for some other stuff but still interesting because


458
00:32:20,720 --> 00:32:24,559
it says enter the url of your website or social media profile


459
00:32:24,559 --> 00:32:29,039
uh so here you kind of have to need you kind of need to enter that as well


460
00:32:29,039 --> 00:32:33,200
so maybe you can get away with a facebook url i laughed about it but


461
00:32:33,200 --> 00:32:35,440
maybe you can get away with it i don't know


462
00:32:35,440 --> 00:32:38,880
but i don't recommend that to be honest with you because as you will see later


463
00:32:38,880 --> 00:32:43,919
in the course when we actually submit our apps to app store and play store


464
00:32:43,919 --> 00:32:48,320
there are a few key data points that you have to provide to


465
00:32:48,320 --> 00:32:54,880
both stores one is a privacy policy url and the other one


466
00:32:54,880 --> 00:32:58,320
is a support url um


467
00:32:58,320 --> 00:33:02,960
and there are also two other


468
00:33:02,960 --> 00:33:06,640
emails you have to provide so yeah four


469
00:33:06,640 --> 00:33:11,120
the emails the first one is the support email and the other one is a


470
00:33:11,120 --> 00:33:15,919
contact email and if you're if you're setting up a business account


471
00:33:15,919 --> 00:33:19,440
then i really suggest that you actually set up a website because if you set up a


472
00:33:19,440 --> 00:33:24,240
website and you have a domain you have an email provider then your email will


473
00:33:24,240 --> 00:33:28,600
kind of be like uh foobar at


474
00:33:28,600 --> 00:33:34,240
mybusiness.com it's a lot more professional to set up an email that is


475
00:33:34,240 --> 00:33:40,000
bound to that it's connected to your email to your domain than it is to say


476
00:33:40,000 --> 00:33:43,279
mr johnson gmail.com um


477
00:33:43,279 --> 00:33:47,440
i wouldn't trust a business that has a gmail.com


478
00:33:47,440 --> 00:33:50,960
account i kind of want to know that yeah here's


479
00:33:50,960 --> 00:33:55,600
a serious business that they have their own website and blah blah blah


480
00:33:56,159 --> 00:34:00,720
but on the contrary setting up a website setting up some


481
00:34:00,720 --> 00:34:04,000
emails doesn't necessarily mean you're serious either so


482
00:34:04,000 --> 00:34:08,879
but it makes it more dedicated if you know what i mean so


483
00:34:08,879 --> 00:34:12,079
um so yeah


484
00:34:12,079 --> 00:34:15,839
that's um the process for setting up an account


485
00:34:15,839 --> 00:34:21,599
also for as an android developer i think that's that's about it


486
00:34:21,599 --> 00:34:28,639
uh that's all i wanted to mention in this uh first chapter of our course uh


487
00:34:28,639 --> 00:34:36,079
i highly recommend that you get your developer accounts for apple and for


488
00:34:37,520 --> 00:34:42,159
google what you'll also need to know is that


489
00:34:42,159 --> 00:34:47,760
i mean i've talked a lot about now apple account and a google developer account


490
00:34:47,760 --> 00:34:49,839
but


491
00:34:49,919 --> 00:34:55,839
if you're if you're developing uh your application


492
00:34:56,079 --> 00:34:59,440
on a windows machine for instance if you're if you're trying to learn how to


493
00:34:59,440 --> 00:35:02,240
develop flutter applications and you don't care about releasing your


494
00:35:02,240 --> 00:35:06,240
application at all you don't have to do any of this


495
00:35:06,240 --> 00:35:09,599
just follow along with the course as usual no problem


496
00:35:09,599 --> 00:35:12,880
but if you're if you want to actually release your


497
00:35:12,880 --> 00:35:17,440
application for ios then you most definitely need to also have a mac


498
00:35:17,440 --> 00:35:21,520
because you can't build your application otherwise there are some tricks you can


499
00:35:21,520 --> 00:35:23,839
do you can like build your


500
00:35:23,839 --> 00:35:28,320
photo application then later on like a friend's macintosh if they have one or


501
00:35:28,320 --> 00:35:32,560
you can send to a service that's in the cloud and they build the app for you and


502
00:35:32,560 --> 00:35:36,560
then they will send it back to you and then you can submit it so


503
00:35:36,560 --> 00:35:39,680
or maybe they even have to submit it it's a bit hairy to be honest with you


504
00:35:39,680 --> 00:35:41,599
but um


505
00:35:41,599 --> 00:35:46,480
it's it's a complicated topic it is a little bit difficult to explain


506
00:35:46,480 --> 00:35:49,200
um for instance if you're on a windows


507
00:35:49,200 --> 00:35:53,680
machine you can't even have xcode xcode is the tool


508
00:35:53,680 --> 00:35:59,920
and the the entire like a chain of tool sets that gets installed on a


509
00:35:59,920 --> 00:36:05,680
macintosh in order to build an application for ios platform


510
00:36:05,680 --> 00:36:08,800
now why am i talking about this and the reasoning behind that is that if


511
00:36:08,800 --> 00:36:13,680
you're developing a flutter application then um


512
00:36:13,680 --> 00:36:17,760
flutter can be deployed on a windows machine um


513
00:36:17,760 --> 00:36:21,280
macintosh or collectively called as desktop


514
00:36:21,280 --> 00:36:26,720
web android ios five platforms at the moment


515
00:36:26,720 --> 00:36:30,079
and if you're trying to


516
00:36:30,079 --> 00:36:34,800
release your application and build it for ios for instance and test on an


517
00:36:34,800 --> 00:36:41,040
iphone or an ipad you can't do that on a windows machine unfortunately that's not


518
00:36:41,040 --> 00:36:45,520
there's nothing wrong with a windows machine it's just apple's fault for


519
00:36:45,520 --> 00:36:51,040
locking down their build systems and all their tools to macintosh so they haven't


520
00:36:51,040 --> 00:36:52,720
made the [Music]


521
00:36:52,720 --> 00:36:55,920
conscious decision or


522
00:36:55,920 --> 00:37:02,240
yeah they haven't made the decision to bring their tool system and tooling to


523
00:37:02,240 --> 00:37:07,839
windows unfortunately or linux swift which is the language to write


524
00:37:07,839 --> 00:37:13,920
native applications for ios can be run i believe on linux um on


525
00:37:13,920 --> 00:37:19,440
windows might be but its main platform is still


526
00:37:19,440 --> 00:37:22,440
mac


527
00:37:22,960 --> 00:37:28,160
i know that this is a lot of information also to learn but if there is anything i


528
00:37:28,160 --> 00:37:31,760
want to close this chapter the first chapter of


529
00:37:31,760 --> 00:37:36,480
this course with is you can learn flutter and follow along


530
00:37:36,480 --> 00:37:40,640
with the steps i'm going to provide in this course without having to register


531
00:37:40,640 --> 00:37:44,640
any accounts yet so that's point one


532
00:37:44,640 --> 00:37:50,160
point two is that you will need a macintosh if you want to


533
00:37:50,160 --> 00:37:54,800
release if you want to comfortably build and release your flutter app


534
00:37:54,800 --> 00:37:57,520
for ios


535
00:37:58,000 --> 00:38:01,440
if you want to release your application on


536
00:38:01,440 --> 00:38:05,440
google play store which is point three if you want to do that you will need to


537
00:38:05,440 --> 00:38:09,920
register a developer account on google play console


538
00:38:09,920 --> 00:38:13,760
as i've shown you here and


539
00:38:13,760 --> 00:38:17,280
i believe that's all that's all you need to know so


540
00:38:17,280 --> 00:38:20,079
some of you may already have all these accounts and don't have to worry about


541
00:38:20,079 --> 00:38:22,800
it but some may not


542
00:38:22,800 --> 00:38:26,560
know all this like if you're coming from a design and design background if you


543
00:38:26,560 --> 00:38:30,800
all you do is work with figma et cetera and this is somebody for important


544
00:38:30,800 --> 00:38:33,440
information that you'll need to know about because i don't want you to get


545
00:38:33,440 --> 00:38:37,680
like frustrated during the process so i just want you to have some


546
00:38:37,680 --> 00:38:43,119
information so that you can get started at least without without too much hassle


547
00:38:43,119 --> 00:38:46,400
all right that's it i think for this


548
00:38:46,400 --> 00:38:51,119
chapter i can take in my notes that i've explained everything i want to explain


549
00:38:51,119 --> 00:38:54,640
did take about 35 minutes uh


550
00:38:54,640 --> 00:38:58,480
it's not unexpected to be honest it's a lot of information


551
00:38:58,480 --> 00:39:01,839
and i kind of want to take my time with it it's important that you


552
00:39:01,839 --> 00:39:05,119
and for me as well to understand all this


553
00:39:05,119 --> 00:39:09,920
so great i think um that's it for this video


554
00:39:09,920 --> 00:39:14,800
so i'll see you in the next chapter hi everyone and welcome to the second


555
00:39:14,800 --> 00:39:19,839
chapter of our course now if you haven't watched the introduction to this course


556
00:39:19,839 --> 00:39:23,440
i really suggest that you do that before continuing with the course because there


557
00:39:23,440 --> 00:39:25,680
are so many points that i've explained in that


558
00:39:25,680 --> 00:39:29,040
introduction that i believe are so important to understand before


559
00:39:29,040 --> 00:39:34,079
continuing with the course so in this chapter what we're going to do


560
00:39:34,079 --> 00:39:38,160
is we're going to take care of some setup steps that are required for


561
00:39:38,160 --> 00:39:40,960
pretty much the rest of


562
00:39:40,960 --> 00:39:44,960
this course and all the other chapters that follow along after this one chapter


563
00:39:44,960 --> 00:39:49,119
3 4 and etc so um we're going to talk about flutter


564
00:39:49,119 --> 00:39:52,640
dart dark pad and how to install flutter whether


565
00:39:52,640 --> 00:39:56,560
you're on windows mac or linux


566
00:39:56,560 --> 00:40:00,000
and we're also going to talk about


567
00:40:00,240 --> 00:40:06,480
xcode android studio and we're going to talk about a few very useful


568
00:40:06,480 --> 00:40:11,359
extensions to our code editor so if you're coming from a background where


569
00:40:11,359 --> 00:40:14,720
you haven't worked with any kind of programming language before


570
00:40:14,720 --> 00:40:17,359
um i'm going to take this chapter quite


571
00:40:17,359 --> 00:40:21,920
easy so if you're an advanced programmer already you may want to skip this and


572
00:40:21,920 --> 00:40:27,359
you already have like flutter install everything you can skip this chapter


573
00:40:27,359 --> 00:40:32,160
without a problem so let's start by talking about


574
00:40:32,160 --> 00:40:36,400
what flutter is well traditionally developers and


575
00:40:36,400 --> 00:40:39,760
programmers or software engineers however you want to call them


576
00:40:39,760 --> 00:40:43,200
they've been creating and writing code with their


577
00:40:43,200 --> 00:40:45,760
fingers in


578
00:40:45,760 --> 00:40:49,280
different languages and then they're targeting different platforms it's very


579
00:40:49,280 --> 00:40:53,200
important to understand what a language programming language is um


580
00:40:53,200 --> 00:40:58,000
versus a platform think of a platform


581
00:40:58,000 --> 00:41:02,880
as the the end station where a software


582
00:41:02,880 --> 00:41:08,640
ends up being run run on so let's say windows is a platform mac


583
00:41:08,640 --> 00:41:15,119
is a platform linux is a platform and ios that runs on all iphones is a


584
00:41:15,119 --> 00:41:19,280
platform android is a platform etc now


585
00:41:19,280 --> 00:41:22,480
you would have programming languages


586
00:41:22,480 --> 00:41:26,000
that you as a software developer would use in


587
00:41:26,000 --> 00:41:30,960
order to target those platforms to write software for those platforms so you use


588
00:41:30,960 --> 00:41:36,000
a programming language in order to write a piece of code and be able to run that


589
00:41:36,000 --> 00:41:41,680
code on that target platform okay so a programming language example is


590
00:41:41,680 --> 00:41:46,839
javascript python swift rust


591
00:41:46,839 --> 00:41:52,720
um what else is popular right now java kotlin all these


592
00:41:52,720 --> 00:41:56,079
these are programming languages so


593
00:41:56,079 --> 00:42:01,920
you as a software developer who's trying to learn flutter would use then dart as


594
00:42:01,920 --> 00:42:05,599
your program programming language as i will soon explain


595
00:42:05,599 --> 00:42:07,839
so


596
00:42:08,800 --> 00:42:11,920
that has been the tradition that a person sits in front of a computer and


597
00:42:11,920 --> 00:42:15,440
says okay i want to write a program for windows then they go and write some code


598
00:42:15,440 --> 00:42:19,920
maybe with csharp.net or


599
00:42:19,920 --> 00:42:23,440
maybe they will just use some other technology i don't know what's out there


600
00:42:23,440 --> 00:42:28,240
right now for windows maybe they would use vb.map


601
00:42:28,240 --> 00:42:30,720
and then they would be done and they will


602
00:42:30,720 --> 00:42:34,880
release the software for windows and be like okay i'm done now


603
00:42:34,880 --> 00:42:39,920
then someone comes in the project and says ah we need the same software for uh


604
00:42:39,920 --> 00:42:42,640
macintosh or we need the same software for


605
00:42:42,640 --> 00:42:45,839
some other uh


606
00:42:47,280 --> 00:42:52,720
for instance platform then you would have to go and write the same


607
00:42:52,720 --> 00:42:56,960
software uh exact same code pretty much for the


608
00:42:56,960 --> 00:43:00,960
other platform so this process would be very repetitive


609
00:43:00,960 --> 00:43:04,640
in that you would have to write the same software over and over again so


610
00:43:04,640 --> 00:43:09,359
things such as flutter came in in order to remedy that so saying that a software


611
00:43:09,359 --> 00:43:12,640
engineer sits at home or sits in the office works with a group of other


612
00:43:12,640 --> 00:43:17,359
people and a designer maybe or a few designers ux there is a product owner


613
00:43:17,359 --> 00:43:22,400
et cetera and then they would write the same code then


614
00:43:22,400 --> 00:43:26,480
which will then be run on different platforms so as a software developer you


615
00:43:26,480 --> 00:43:30,079
wouldn't have to maintain different uh


616
00:43:30,079 --> 00:43:33,920
very similar pieces of code that only can be


617
00:43:33,920 --> 00:43:40,960
run on one specific platform so flutter in its ground basically is a ui


618
00:43:40,960 --> 00:43:44,319
framework for running beautiful


619
00:43:44,319 --> 00:43:49,280
and writing beautiful applications that run on multiple platforms at the same


620
00:43:49,280 --> 00:43:52,720
time developed by google has been in


621
00:43:52,720 --> 00:43:59,680
production for a very long time it's uh tried and tested it's open source


622
00:43:59,680 --> 00:44:02,960
and if you don't if you don't come from like software


623
00:44:02,960 --> 00:44:07,280
engineering background open source basically means that


624
00:44:07,280 --> 00:44:11,839
the code that is written


625
00:44:11,839 --> 00:44:15,200
for flutter basically the code that makes up plotter


626
00:44:15,200 --> 00:44:18,000
is open to the public for


627
00:44:18,000 --> 00:44:22,160
uh finding bugs and also for contributing to it or maybe just


628
00:44:22,160 --> 00:44:26,000
learning from it so if you're for instance coming from a background of as


629
00:44:26,000 --> 00:44:31,119
a designer it's kind of like you have your figma file open to the entire world


630
00:44:31,119 --> 00:44:36,560
or your adobe xd source open to the entire world for for them to watch what


631
00:44:36,560 --> 00:44:41,280
you're doing as you're designing and also for them to be able to fix stuff in


632
00:44:41,280 --> 00:44:45,920
your design if they see it not working as it should


633
00:44:45,920 --> 00:44:48,720
so that's open source um


634
00:44:48,720 --> 00:44:54,240
so flutter is open source ui framework um developed by google


635
00:44:54,240 --> 00:44:57,680
what a framework means i mean if you're not coming from a software engineering


636
00:44:57,680 --> 00:45:00,960
background a framework is kind of like a set of tools


637
00:45:00,960 --> 00:45:04,480
uh provided to you as a software developer so you can use


638
00:45:04,480 --> 00:45:09,839
these tools take a bit of this one take a bit of that one in order to produce an


639
00:45:09,839 --> 00:45:14,400
output so flutter it in itself is a software


640
00:45:14,400 --> 00:45:19,839
but it's more precisely referred to as a


641
00:45:19,839 --> 00:45:24,960
as a framework because of it's a collection of tools so if you hear a


642
00:45:24,960 --> 00:45:27,599
framework just know oh there's a collection of things i can use to


643
00:45:27,599 --> 00:45:34,160
produce some output now that's what flutter is um but


644
00:45:34,160 --> 00:45:38,160
what powers flutter is a programming language language


645
00:45:38,160 --> 00:45:42,880
called dart and dart has been in the making for more


646
00:45:42,880 --> 00:45:49,280
than eight years is a language that at the moment being maintained by google


647
00:45:49,280 --> 00:45:53,680
and also is open source so anybody can contribute to it anybody can learn from


648
00:45:53,680 --> 00:45:57,920
it and and find exploits or maybe problems with it and it will get patched


649
00:45:57,920 --> 00:46:02,560
by the public or by google themselves so dart is


650
00:46:02,560 --> 00:46:08,319
the language the programming language that powers flutter you could say


651
00:46:08,319 --> 00:46:10,560
so


652
00:46:11,760 --> 00:46:17,599
now you know what flutter is and now you know what dart is


653
00:46:17,760 --> 00:46:21,920
and i think in the next step now what we can do is talk about


654
00:46:21,920 --> 00:46:27,359
a great piece of web software called dart pad


655
00:46:27,359 --> 00:46:31,920
now dark pad as i said is a web


656
00:46:31,920 --> 00:46:35,760
software or you could just call it a website


657
00:46:35,760 --> 00:46:40,880
that allows you to run or write your dart code


658
00:46:40,880 --> 00:46:45,839
maybe pure dart code or code for flutter


659
00:46:45,839 --> 00:46:50,480
and run it directly in your browser without you even having to install


660
00:46:50,480 --> 00:46:55,680
anything so just open your browser and as you will see soon we go to dark pad


661
00:46:55,680 --> 00:46:58,560
and you will see how it looks like so let me just


662
00:46:58,560 --> 00:47:03,200
show you a little demonstration here so here i have dart pad open


663
00:47:03,200 --> 00:47:07,440
and i can actually increase the size so you can see a little bit better


664
00:47:07,440 --> 00:47:10,960
i may have to rearrange some components here on the screen so you can see the


665
00:47:10,960 --> 00:47:16,359
screen better so i went to dartpad.dartlang.org


666
00:47:16,400 --> 00:47:21,839
and you can see here that there is a program written on the left hand side


667
00:47:21,920 --> 00:47:25,680
and i can actually yeah let this


668
00:47:25,680 --> 00:47:29,359
what is dark dark pad allows you blah blah text to be there so you can have


669
00:47:29,359 --> 00:47:33,760
context of what i'm talking about and you can see that the program is


670
00:47:33,760 --> 00:47:38,400
sitting there and you are allowed then to either change the program the way it


671
00:47:38,400 --> 00:47:41,040
is or click anywhere here to see


672
00:47:41,040 --> 00:47:45,520
documentation down here or press the run button so i'm just


673
00:47:45,520 --> 00:47:48,480
going to press the run button and you can see that


674
00:47:48,480 --> 00:47:53,760
the text hello got printed to the screen five times plus the


675
00:47:53,760 --> 00:47:57,200
number of times it was actually printed it's also printed on the screen so hello


676
00:47:57,200 --> 00:48:02,720
one two three four five so what you see on this side is the


677
00:48:02,720 --> 00:48:06,000
source code if you remember from open source so this


678
00:48:06,000 --> 00:48:10,400
is a source code written in the programming language called dart


679
00:48:10,400 --> 00:48:14,800
and this is the output of that program so


680
00:48:14,800 --> 00:48:19,599
dark pad allows you to write text here and just execute it and see the


681
00:48:19,599 --> 00:48:24,240
results immediately so


682
00:48:24,240 --> 00:48:28,319
that's what dart is i mean sorry dark pad is and we're going to talk


683
00:48:28,319 --> 00:48:32,079
about dart and dark pad more in the in the course but


684
00:48:32,079 --> 00:48:38,800
right now what we should do is to start by installing flutter


685
00:48:38,800 --> 00:48:43,520
because uh i mean you could say okay but flutter


686
00:48:43,520 --> 00:48:46,640
is just the uh


687
00:48:46,640 --> 00:48:53,200
ui framework how about dart well the way flutter is packaged by default is that


688
00:48:53,200 --> 00:48:57,280
it includes the dart programming language and its runtime so if the tools


689
00:48:57,280 --> 00:49:03,839
required to run any dart code it packages all of that in just one big


690
00:49:03,839 --> 00:49:07,440
chunk for you so you don't have to go and install different components like


691
00:49:07,440 --> 00:49:11,760
install dart separately in flutter so let's just then improvise and i'm going


692
00:49:11,760 --> 00:49:14,800
to say in here


693
00:49:14,800 --> 00:49:20,240
let's say install flutter okay then you go to this beautiful website


694
00:49:20,240 --> 00:49:24,800
called flutter.dev i'm going to increase the size here so


695
00:49:24,800 --> 00:49:27,200
you see


696
00:49:27,599 --> 00:49:31,119
so um we go there now


697
00:49:31,119 --> 00:49:34,319
and you will see this beautiful website here


698
00:49:34,319 --> 00:49:38,800
and what we're gonna do is just to press on get started and remember


699
00:49:38,800 --> 00:49:44,000
we press on get started but this website looks like this right now maybe


700
00:49:44,000 --> 00:49:48,000
in a few months or maybe in a few years it will change so you'll just have to


701
00:49:48,000 --> 00:49:52,079
find out a way to get to the installation part right now it's


702
00:49:52,079 --> 00:49:56,559
called get started and i can see it's located as docs.flower dev get started


703
00:49:56,559 --> 00:50:00,160
install then pick your platform here i'm on a


704
00:50:00,160 --> 00:50:03,760
macintosh but if you're on windows just click on windows and then you get


705
00:50:03,760 --> 00:50:07,520
instructions on how to install fodder


706
00:50:07,920 --> 00:50:12,559
and then or if you're on linux you can also do the same just get instructions


707
00:50:12,559 --> 00:50:15,119
for your platform


708
00:50:15,119 --> 00:50:20,000
now i'm going to mac and i'm going to click on mac and then


709
00:50:20,000 --> 00:50:23,040
i'm going to look at this information here i'm going


710
00:50:23,040 --> 00:50:27,760
to increase the size so it's a little bit easier to read and it says okay


711
00:50:27,760 --> 00:50:30,960
download the following installation bundle to get the latest stable release


712
00:50:30,960 --> 00:50:35,920
of the flutter sdk sdk means software development


713
00:50:35,920 --> 00:50:42,160
development kit i believe so it's just like series of tools for you to use it's


714
00:50:42,160 --> 00:50:47,119
just fancy words so then we're gonna do that let's just get


715
00:50:47,119 --> 00:50:51,839
flutter mac i'm gonna download it


716
00:50:52,079 --> 00:50:55,920
and it may take some time because it is actually quite a chunky


717
00:50:55,920 --> 00:51:01,200
uh bit of software as you can see it's almost 1.2 gigabytes


718
00:51:01,200 --> 00:51:04,319
so depending on your internet connection it could take


719
00:51:04,319 --> 00:51:08,880
yeah anything between a few seconds to a few minutes


720
00:51:09,119 --> 00:51:13,680
after you've done that then you will have to unzip that


721
00:51:13,680 --> 00:51:17,680
in some folder so


722
00:51:17,680 --> 00:51:21,920
what that kind of means is just i can see that my mac is already decompressing


723
00:51:21,920 --> 00:51:25,680
this zip file for me so i don't have to do that myself and it's already


724
00:51:25,680 --> 00:51:29,599
decompressed in this place so i'm just gonna click on it


725
00:51:29,599 --> 00:51:33,760
and i'm gonna show you its content so it kind of looks like this


726
00:51:33,760 --> 00:51:38,720
okay now that you have this what you need to


727
00:51:38,720 --> 00:51:45,040
do is to ensure that all these files are placed inside


728
00:51:45,200 --> 00:51:49,440
a location on your computer which is


729
00:51:49,440 --> 00:51:54,079
protected so that you don't accidentally delete it and it's also a good like um


730
00:51:54,079 --> 00:51:58,240
you know exactly where it is so by that i mean don't put it on a desk on


731
00:51:58,240 --> 00:52:01,119
your desktop and don't put it in like documents or anything it's not a


732
00:52:01,119 --> 00:52:07,119
document software what i like to do is usually to have a


733
00:52:07,119 --> 00:52:12,000
folder on a macintosh called dev so


734
00:52:12,000 --> 00:52:17,280
i will open terminal here as you can see terminal if you're not familiar with it


735
00:52:17,280 --> 00:52:21,520
is an application that you can


736
00:52:21,520 --> 00:52:24,079
control pretty much the entire system with it


737
00:52:24,079 --> 00:52:29,040
if you're on a mac or if you're on linux or any unix based system and if you're


738
00:52:29,040 --> 00:52:32,880
on windows you can also do a lot with your terminal


739
00:52:32,880 --> 00:52:37,359
so in windows that terminal is called cmd i believe


740
00:52:37,359 --> 00:52:41,599
as in command i believe on


741
00:52:41,599 --> 00:52:47,359
linux and mac it's called terminal i'm using a a terminal here called i


742
00:52:47,359 --> 00:52:52,079
term uh but if you're on vanilla mac os then


743
00:52:52,079 --> 00:52:56,160
you would go and open terminal like this which is just looking like


744
00:52:56,160 --> 00:52:58,400
that


745
00:52:59,280 --> 00:53:04,559
so i'm going to open i-term right now which is my terminal you can open the


746
00:53:04,559 --> 00:53:11,119
terminal that you're comfortable with i'm going to increase the size of this


747
00:53:11,200 --> 00:53:15,839
i like to place my installations for these pieces of


748
00:53:15,839 --> 00:53:19,440
software in my home directory which is denoted by this little funny character


749
00:53:19,440 --> 00:53:23,520
slash dev and


750
00:53:23,520 --> 00:53:29,040
if i look at the contents of this i can see i have a folder called tooling if i


751
00:53:29,040 --> 00:53:32,240
say tooling and look at the contents of it i can see


752
00:53:32,240 --> 00:53:36,160
flutter is right there so


753
00:53:36,160 --> 00:53:40,160
for me flutter installation you know this folder that got in that got


754
00:53:40,160 --> 00:53:45,359
downloaded for me in my downloads folder i would go and copy its contents


755
00:53:45,359 --> 00:53:51,040
contents and place it in this folder so if i say cdflutter


756
00:53:51,040 --> 00:53:57,839
and then you can see that i'm in my user dev folder tooling flutter so this is


757
00:53:57,839 --> 00:54:02,720
where i choose to put flutter now you can choose to put this downloaded folder


758
00:54:02,720 --> 00:54:06,160
anywhere else as the documentation tells you


759
00:54:06,160 --> 00:54:10,640
in the desired location for example so


760
00:54:10,640 --> 00:54:14,880
go ahead and do that pick a location and for me this location works for you it


761
00:54:14,880 --> 00:54:19,440
may be if you're on windows it would probably be like c


762
00:54:19,440 --> 00:54:24,480
backslash i don't know you could say dev backslash tooling


763
00:54:24,480 --> 00:54:30,079
backslash flutter this could be a good location for your tooling hot photo


764
00:54:30,079 --> 00:54:33,040
so i'm imagining now that you've done that


765
00:54:33,040 --> 00:54:37,119
you've gotten a folder and for me it's this one where you've extracted your


766
00:54:37,119 --> 00:54:41,839
flutter installation in now you can see that it says


767
00:54:41,839 --> 00:54:45,280
in this third step you will need to expose


768
00:54:45,280 --> 00:54:52,000
flutter's binary files to your system and what that basically means is that


769
00:54:52,000 --> 00:54:57,200
flutter as an sdk or a toolkit or a framework


770
00:54:57,200 --> 00:55:02,400
it has a lot of bits and pieces of software in it and


771
00:55:02,400 --> 00:55:06,400
some of these bits are more important in that sense that they're actually


772
00:55:06,400 --> 00:55:10,400
executable in that imagine that um


773
00:55:10,400 --> 00:55:14,720
on your computer whether in macintosh windows or linux


774
00:55:14,720 --> 00:55:17,760
you can have different documents some documents can be text sound documents


775
00:55:17,760 --> 00:55:21,839
can be images some documents can be i don't know


776
00:55:21,839 --> 00:55:26,240
what else they can be and or a word document for instance okay because i


777
00:55:26,240 --> 00:55:31,599
came up with another example or they could be programs a program is


778
00:55:31,599 --> 00:55:35,440
something that you can just double click on and a piece of software gets executed


779
00:55:35,440 --> 00:55:39,760
and then it will open for instance an example of the program is a microsoft


780
00:55:39,760 --> 00:55:43,359
word another example of program is a google


781
00:55:43,359 --> 00:55:48,720
chrome web browser another example of program is safari


782
00:55:48,720 --> 00:55:53,760
so these are programs and flutter comes also with its own built-in programs that


783
00:55:53,760 --> 00:55:57,119
do very specific and important things on your computer


784
00:55:57,119 --> 00:56:01,119
related to flutter of course um


785
00:56:01,119 --> 00:56:06,480
sorry i have to see my uh recording studio nothing you had to do


786
00:56:06,480 --> 00:56:10,079
uh it was just for me so


787
00:56:10,319 --> 00:56:14,240
these important programs that are inside the flutter installation which you just


788
00:56:14,240 --> 00:56:17,839
downloaded need to be exposed to your entire system


789
00:56:17,839 --> 00:56:22,000
so that you can work with flutter with with ease


790
00:56:22,000 --> 00:56:24,880
and that means if you're for instance from a design


791
00:56:24,880 --> 00:56:28,400
background it will allow you to anywhere in your


792
00:56:28,400 --> 00:56:32,400
terminal just write figma and figma app would open


793
00:56:32,400 --> 00:56:36,880
and that's the same thing with flutter in this folder you see we're in the


794
00:56:36,880 --> 00:56:40,880
flutter folder where you downloaded your installation and install it in this


795
00:56:40,880 --> 00:56:45,040
folder there's a folder called bin which means binary


796
00:56:45,040 --> 00:56:49,680
in here there are so many things that are important to the entire system to


797
00:56:49,680 --> 00:56:54,319
run you see flutter and dart these two i said so many but yeah there's pretty


798
00:56:54,319 --> 00:56:59,920
much two so these two binary uh executables need


799
00:56:59,920 --> 00:57:04,400
to be exposed to your system and the way to do that on a macintosh is


800
00:57:04,400 --> 00:57:08,799
to change your paths as is documented here


801
00:57:08,799 --> 00:57:14,880
so the way i like to do that is i go and change my


802
00:57:14,880 --> 00:57:23,280
so if i do a vim and look at my zsh rc i can see my paths and you can see it


803
00:57:23,280 --> 00:57:27,040
here so you see i've actually put that export


804
00:57:27,040 --> 00:57:32,480
command as it is stated here i put it here you see


805
00:57:33,280 --> 00:57:37,599
this may be a bit intimidating to be honest with you uh


806
00:57:37,599 --> 00:57:42,160
what all it's doing is that you see this file that i've


807
00:57:42,160 --> 00:57:45,839
placed here i don't know if i can actually zoom into it and if you can see


808
00:57:45,839 --> 00:57:48,720
i don't know how that looked in the actual recording


809
00:57:48,720 --> 00:57:50,960
but this is


810
00:57:50,960 --> 00:57:57,440
a sort of like a set of instructions to my terminal on this macintosh to tell it


811
00:57:57,440 --> 00:58:00,559
where different bits and pieces of


812
00:58:00,559 --> 00:58:03,839
binary executables are placed such as flutter


813
00:58:03,839 --> 00:58:08,480
dart python etc etc so when i install a piece of software


814
00:58:08,480 --> 00:58:12,079
uh in this way you see we just downloaded a package and just put it


815
00:58:12,079 --> 00:58:17,359
somewhere on our computer uh macintosh won't know about the stuff that's in it


816
00:58:17,359 --> 00:58:22,480
of course it won't so you have to tell it where those things are


817
00:58:22,480 --> 00:58:26,640
because otherwise if you don't do this step if you don't do the step three then


818
00:58:26,640 --> 00:58:30,480
every time you want to run flutter then you have to specify exactly where that


819
00:58:30,480 --> 00:58:33,680
flutter command is so for me it would be in my home


820
00:58:33,680 --> 00:58:37,119
folder dev tooling flutter being slash flutter


821
00:58:37,119 --> 00:58:41,920
but if you do this then you can anywhere in your terminal just write flutter and


822
00:58:41,920 --> 00:58:46,559
your macintosh or linux or windows computer will know where to find


823
00:58:46,559 --> 00:58:49,119
it so


824
00:58:49,119 --> 00:58:54,400
do that put put these instructions as specified here in your path


825
00:58:54,400 --> 00:58:59,520
and after doing that you may need to reload your path using a command


826
00:58:59,520 --> 00:59:02,799
on windows and linux called source


827
00:59:02,799 --> 00:59:07,599
and the shrc for me depending on which shell you have you


828
00:59:07,599 --> 00:59:12,400
may have to put that instruction in somewhere else


829
00:59:12,400 --> 00:59:17,680
on windows i believe you will have to modify your um


830
00:59:17,680 --> 00:59:22,799
environment variables i remember this from many many years ago


831
00:59:22,799 --> 00:59:26,240
let's see if you have to do that


832
00:59:26,559 --> 00:59:30,240
update your path you see if you wish to run flutter commands in


833
00:59:30,240 --> 00:59:34,319
regular windows console take these steps blah blah from the start search end and


834
00:59:34,319 --> 00:59:37,839
select edit environment variables for accounts so


835
00:59:37,839 --> 00:59:41,200
what you'll just have to do really is just to follow these steps i mean i'm


836
00:59:41,200 --> 00:59:44,799
going through basically giving you some of the basics


837
00:59:44,799 --> 00:59:48,799
of these instructions so you can get like a head start but these instructions


838
00:59:48,799 --> 00:59:53,359
can also change in the future so don't rely just on what i'm telling you please


839
00:59:53,359 --> 00:59:59,040
just go to the installation website here uh here as you see docs flutter dev get


840
00:59:59,040 --> 01:00:04,240
started install and try to follow along with the


841
01:00:04,240 --> 01:00:09,760
steps provided so after you've done all of this


842
01:00:09,760 --> 01:00:13,359
you should be able to be anywhere on your computer


843
01:00:13,359 --> 01:00:18,799
and just say flutter doctor now fluffer doctor is a very important


844
01:00:18,799 --> 01:00:22,079
command because it looks at your flutter installation


845
01:00:22,079 --> 01:00:27,040
and it kind of makes sure that it's in good health as denoted by the word


846
01:00:27,040 --> 01:00:31,920
doctor so because fluttering itself is a framework


847
01:00:31,920 --> 01:00:35,359
and it depends on many other bits and pieces


848
01:00:35,359 --> 01:00:39,359
which your computer may need to have in order for flutter to actually work


849
01:00:39,359 --> 01:00:42,480
optimally um


850
01:00:42,480 --> 01:00:46,240
flutter doctor will then go through a series of steps to ensure that first


851
01:00:46,240 --> 01:00:51,119
flutter is updated and that you for instance have android


852
01:00:51,119 --> 01:00:55,359
tool chain that you have xcode installed chrome blah blah


853
01:00:55,359 --> 01:00:57,839
so


854
01:00:58,480 --> 01:01:02,559
i mean this result at the moment looks quite fine on my computer but if you're


855
01:01:02,559 --> 01:01:05,680
running flutter doctor for the first time on your computer you may get a few


856
01:01:05,680 --> 01:01:09,839
problems uh some of the problems that you'll experience probably is going to


857
01:01:09,839 --> 01:01:13,680
say android sdk couldn't be found xcode couldn't be


858
01:01:13,680 --> 01:01:17,440
found because if you're running flutter on a


859
01:01:17,440 --> 01:01:22,160
windows machine or linux machine then you can't have xcode xcode is like the


860
01:01:22,160 --> 01:01:25,599
software provided by apple


861
01:01:25,599 --> 01:01:31,119
and only runs unfortunately on mac os and it's used for


862
01:01:31,119 --> 01:01:35,599
compiling or creating


863
01:01:35,599 --> 01:01:42,160
mac os ios and ipad os pieces of software so although you can run flutter


864
01:01:42,160 --> 01:01:47,680
on your linux and on your windows machine without a problem you


865
01:01:47,680 --> 01:01:53,680
won't be able to produce or test your flutter code running on an


866
01:01:53,680 --> 01:02:00,079
iphone unfortunately unless you have access to xcode


867
01:02:00,079 --> 01:02:03,680
and the easiest way to get access to that is of course to have a macintosh


868
01:02:03,680 --> 01:02:07,599
and that's unfortunately because unfortunate because yeah


869
01:02:07,599 --> 01:02:12,079
it's uh it's just not available for other platforms


870
01:02:12,079 --> 01:02:17,280
so you've run flutter doctor and it's


871
01:02:19,039 --> 01:02:23,039
it's basically gonna tell you that okay now i'm gonna assume that you're on a


872
01:02:23,039 --> 01:02:27,119
macintosh it's gonna tell you that okay uh xcode for instance uh you need to


873
01:02:27,119 --> 01:02:31,440
install xcode and the way to do that is you need to open app store on your


874
01:02:31,440 --> 01:02:37,599
computer and just type xcode here and go and install xcode on your


875
01:02:37,599 --> 01:02:40,480
computer um


876
01:02:40,480 --> 01:02:44,400
so depending on i don't know which version is the latest at the moment but


877
01:02:44,400 --> 01:02:48,480
if you're trying to develop flutter applications that and also make sure


878
01:02:48,480 --> 01:02:52,079
that they run on your ios phone or the ios simulator


879
01:02:52,079 --> 01:02:56,240
then you need to install xcode if you're on a mac sorry if you're on a linux


880
01:02:56,240 --> 01:02:59,920
computer or windows you don't have to do this step actually you can't do


881
01:02:59,920 --> 01:03:03,720
unfortunately this thing


882
01:03:04,000 --> 01:03:08,640
so once you've done that you also need to make sure


883
01:03:08,640 --> 01:03:14,000
that you've installed develop developer tools


884
01:03:14,000 --> 01:03:20,400
for xcode so let's see how we can do that developer tools xcode


885
01:03:20,400 --> 01:03:24,079
command line tools right


886
01:03:24,400 --> 01:03:26,960
let's see install


887
01:03:26,960 --> 01:03:30,400
from terminal there's a command that you can execute


888
01:03:30,400 --> 01:03:35,599
in order to do that and that command actually looks like this


889
01:03:36,079 --> 01:03:40,000
here i'll i will zoom into it so you can see


890
01:03:40,000 --> 01:03:42,319
better um


891
01:03:42,319 --> 01:03:47,440
it says sudo xcode select install so you need to issue that command in


892
01:03:47,440 --> 01:03:51,440
your terminal so if i do that and it says what's the password i'll enter my


893
01:03:51,440 --> 01:03:55,200
password and it says they're already installed so


894
01:03:55,200 --> 01:03:59,280
if you haven't done that please go ahead and execute this command in order to


895
01:03:59,280 --> 01:04:04,480
install command line tools for your xcode


896
01:04:04,799 --> 01:04:10,799
now the next piece after xcode that you will need is


897
01:04:10,799 --> 01:04:15,280
let's see if i can actually bring up so we've talked about flutter doctor


898
01:04:15,280 --> 01:04:18,880
that was flutter doctor and we also talked about installing xcode so i'm now


899
01:04:18,880 --> 01:04:24,160
bringing that up a little bit late and but now the next step is to install


900
01:04:24,160 --> 01:04:27,839
android studio so


901
01:04:27,839 --> 01:04:32,480
what android studio is is like the equivalent of xcode but for writing


902
01:04:32,480 --> 01:04:37,440
android specific applications now for in order to write flutter


903
01:04:37,440 --> 01:04:42,160
applications you don't need android studio per se but you kind of need the


904
01:04:42,160 --> 01:04:45,200
sdk manager now


905
01:04:45,200 --> 01:04:49,760
both ios and android um


906
01:04:49,760 --> 01:04:52,880
for programmers they provide you with something called an sdk just like


907
01:04:52,880 --> 01:04:57,760
flutter is an sdk or tool kit ios and android also provide you with


908
01:04:57,760 --> 01:05:00,880
sdk in order to write native applications


909
01:05:00,880 --> 01:05:06,480
and since flutter utilizes these native capabilities of each platform in order


910
01:05:06,480 --> 01:05:11,520
to for instance create an application that's compatible with ios or android


911
01:05:11,520 --> 01:05:17,039
it will utilize the native uh components or sorry or the native pieces of


912
01:05:17,039 --> 01:05:20,960
software namely called xcode


913
01:05:20,960 --> 01:05:25,119
sorry mainly called ios sdk and android sdk


914
01:05:25,119 --> 01:05:29,520
so you need to download android studio so you get access to the sdk manager so


915
01:05:29,520 --> 01:05:34,160
you can install an android sdk now xcode in itself when you download


916
01:05:34,160 --> 01:05:38,720
the latest version of xcode it comes with the latest version of the ios sdk


917
01:05:38,720 --> 01:05:42,960
but android studio doesn't do that wait a minute yeah it probably does in


918
01:05:42,960 --> 01:05:45,599
the latest versions but we can check that out


919
01:05:45,599 --> 01:05:49,599
so if you go to your browser and just say android studio


920
01:05:49,599 --> 01:05:54,720
and then you open up developerandroid.com let's just go there


921
01:05:54,720 --> 01:05:59,039
and then you can just click on download android studio and then there are


922
01:05:59,039 --> 01:06:03,680
download options and you can see there's available for windows mac and linux


923
01:06:03,680 --> 01:06:08,160
so then please go ahead and download uh


924
01:06:08,160 --> 01:06:13,119
your android studio and i can see the for macintosh is a package so you can


925
01:06:13,119 --> 01:06:16,559
install it easily you don't have to unzip anything and for windows is also


926
01:06:16,559 --> 01:06:21,920
like an executable so tar gz as well for linux so


927
01:06:21,920 --> 01:06:26,960
now let's say that you've done that and now after doing that then you should be


928
01:06:26,960 --> 01:06:31,359
able to bring up android studio


929
01:06:31,440 --> 01:06:33,839
let's see


930
01:06:34,240 --> 01:06:38,400
i'll bring it up here now


931
01:06:38,400 --> 01:06:43,039
when you bring up your android studio it will just pretty much be empty here


932
01:06:43,039 --> 01:06:46,480
on the screen and you'll get some tips and tricks how to use android studio but


933
01:06:46,480 --> 01:06:52,319
the important thing for you here is to be able to install uh


934
01:06:52,319 --> 01:06:56,960
the android sdk so if you go then to tools


935
01:06:56,960 --> 01:07:01,119
i believe there is an sdk manager right here


936
01:07:01,119 --> 01:07:06,880
so just ensure that you have an sdk installed for me i have android


937
01:07:06,880 --> 01:07:09,680
12 installed here so ensure that you have


938
01:07:09,680 --> 01:07:15,359
one of these sdks ready for you to use by flutter


939
01:07:15,359 --> 01:07:21,520
and as soon as you've done that then when you run then your um


940
01:07:21,520 --> 01:07:25,280
clutter doctor command


941
01:07:25,280 --> 01:07:30,240
and the part about android sdk is going to


942
01:07:30,240 --> 01:07:32,480
be ticked here


943
01:07:32,480 --> 01:07:37,440
uh sorry the android studio so that's that so we've talked about


944
01:07:37,440 --> 01:07:40,400
android tool chain which is the android sdk you can see


945
01:07:40,400 --> 01:07:44,000
we've talked about xcode chrome is just a web browser if you want you can have


946
01:07:44,000 --> 01:07:48,240
that if you're developing app flutter applications for the web it kind of is


947
01:07:48,240 --> 01:07:51,440
necessary um


948
01:07:51,440 --> 01:07:55,599
and then this you're probably if you're just getting started with flutter you're


949
01:07:55,599 --> 01:07:59,760
not going to have this vs code part ticked because vs code is


950
01:07:59,760 --> 01:08:05,119
a a code editor an open source code editor provided by


951
01:08:05,119 --> 01:08:09,760
microsoft and it is the code editor that i'm going


952
01:08:09,760 --> 01:08:14,480
to use for the entire course for this entire course as we go on and to be


953
01:08:14,480 --> 01:08:17,679
honest with you i've tried android studio and i've tried vs code for


954
01:08:17,679 --> 01:08:21,120
flutter development and i can highly recommend that you use vs code


955
01:08:21,120 --> 01:08:26,000
just for its sheer performance it's for its simplicity


956
01:08:26,000 --> 01:08:31,920
extensions and its ability just to really focus on a


957
01:08:31,920 --> 01:08:35,920
simple editor without bothering you with lots of bells and whistles so


958
01:08:35,920 --> 01:08:39,839
it's a preference though some people use android studio for flutter development


959
01:08:39,839 --> 01:08:43,120
and some people use vs code so i don't think


960
01:08:43,120 --> 01:08:47,440
one is better than the other it's completely a preference so


961
01:08:47,440 --> 01:08:52,880
so that's for android studio and the android sdk so now let's go ahead and


962
01:08:52,880 --> 01:08:57,359
install visual studio code which is the tool that i'm going to use for this


963
01:08:57,359 --> 01:09:00,640
course so let's bring up a new window and i'm


964
01:09:00,640 --> 01:09:05,520
going to say install visual studio code and i'm going to bring the window up


965
01:09:05,520 --> 01:09:09,359
here so you see let's go here and


966
01:09:09,359 --> 01:09:14,000
and you can download the one that you prefer for your computer i've chosen mac


967
01:09:14,000 --> 01:09:18,480
and for me specifically i have a macintosh with an apple silicon so


968
01:09:18,480 --> 01:09:21,920
i then choose this one mac with an apple silicon and then it's gonna download


969
01:09:21,920 --> 01:09:26,000
that for you automatically so it's just about 200 megabytes i think or actually


970
01:09:26,000 --> 01:09:29,359
100 megabyte only after you've done that just


971
01:09:29,359 --> 01:09:34,719
on a macintosh you would go and put that on uh


972
01:09:34,719 --> 01:09:39,679
in your applications folder so i'm actually gonna delete that which i


973
01:09:39,679 --> 01:09:42,719
downloaded just now because i already have vs code


974
01:09:42,719 --> 01:09:45,679
on my system


975
01:09:46,839 --> 01:09:52,719
so that's for visual studio code um


976
01:09:52,960 --> 01:09:57,440
so let's go ahead now and now that we've done that


977
01:09:57,440 --> 01:10:00,560
i'm gonna talk a little about


978
01:10:00,560 --> 01:10:04,800
talk a little bit about um some extensions that we're gonna use in


979
01:10:04,800 --> 01:10:08,880
visual studio code so let me bring up my terminal


980
01:10:08,880 --> 01:10:12,560
and um you know we don't need that let's go and


981
01:10:12,560 --> 01:10:19,199
bring up visual studio code um and then i already actually have so many visual


982
01:10:19,199 --> 01:10:24,080
studio code windows open uh but i can just say new window so you


983
01:10:24,080 --> 01:10:29,360
see how visual studio code looks like and then


984
01:10:29,360 --> 01:10:33,120
let's see don't show again okay so this is pretty much how visual studio code


985
01:10:33,120 --> 01:10:36,560
looks like so it's a very simple application to begin with


986
01:10:36,560 --> 01:10:41,199
um now what we need to do for this example is to enable a few extensions


987
01:10:41,199 --> 01:10:45,600
now the first section extension that we're going to enable is called arrow


988
01:10:45,600 --> 01:10:50,400
lens and you need to go here on the left hand side find extensions and just type


989
01:10:50,400 --> 01:10:56,480
error um if i can type air and just say airlance just like that


990
01:10:56,480 --> 01:11:02,080
click on airlands and just press enable or install i believe it's called so


991
01:11:02,080 --> 01:11:06,320
error lens allows you to see errors in line without you having to click on a


992
01:11:06,320 --> 01:11:10,239
specific line of error basically so


993
01:11:10,239 --> 01:11:15,040
it expands the entire error as you're coding you will probably have some


994
01:11:15,040 --> 01:11:18,320
errors in your code that error will be then displayed right there in front of


995
01:11:18,320 --> 01:11:22,400
your face in its entirety so you don't have to press a little small button to


996
01:11:22,400 --> 01:11:26,719
be able to see the complete air so it's a fantastic extension


997
01:11:26,719 --> 01:11:31,760
to be honest with you now the other thing that you'll need is


998
01:11:31,760 --> 01:11:35,920
something called a bracket pair colorizer and that bracket pair


999
01:11:35,920 --> 01:11:41,120
colorizer is something that is already installed in visual studio code


1000
01:11:41,120 --> 01:11:46,239
it used to be a an extension that you could download but it was so popular


1001
01:11:46,239 --> 01:11:50,400
that microsoft has added that internally to visual studio code so you don't have


1002
01:11:50,400 --> 01:11:55,840
to do that manually sorry by installing an extension so


1003
01:11:56,000 --> 01:12:01,280
now that we've talked about that the next step is to actually install flutter


1004
01:12:01,280 --> 01:12:05,679
and dart extensions so here just type


1005
01:12:05,679 --> 01:12:09,840
flutter do that and then just


1006
01:12:09,840 --> 01:12:13,920
click on the install button i've already installed that so


1007
01:12:13,920 --> 01:12:17,760
there's a disable button for me here the flutter


1008
01:12:17,760 --> 01:12:22,080
extension and then you'll also need the dart extension so just type dart and


1009
01:12:22,080 --> 01:12:25,360
then install that as well


1010
01:12:25,920 --> 01:12:31,520
so after these two installations


1011
01:12:31,520 --> 01:12:39,120
we also need to install another great extension called block bloc


1012
01:12:39,120 --> 01:12:42,800
i'm not going to go into the details of what block is because we will learn


1013
01:12:42,800 --> 01:12:47,840
about block a lot later in the course but it is just a great


1014
01:12:47,840 --> 01:12:52,239
extension to have as we go on you're going to learn about it so


1015
01:12:52,239 --> 01:12:56,640
i can't really explain exactly what it is right now but just install it and i


1016
01:12:56,640 --> 01:13:01,600
will tell you more about block later in the course i promise


1017
01:13:01,600 --> 01:13:07,760
so that was basically installing a block


1018
01:13:07,760 --> 01:13:10,239
now when you start up your visual studio


1019
01:13:10,239 --> 01:13:13,360
code it probably doesn't look like the way it does for me


1020
01:13:13,360 --> 01:13:17,920
and that is because i have a custom theme installed on my visual studio code


1021
01:13:17,920 --> 01:13:25,199
called tokyo night it is a very very mellow dark


1022
01:13:25,199 --> 01:13:29,760
theme as it's called and scenes in visual studio code can be


1023
01:13:29,760 --> 01:13:34,719
installed just like you install an extension so if you like my theme you're


1024
01:13:34,719 --> 01:13:39,120
more than welcome to go in into extensions and then search for tokyo


1025
01:13:39,120 --> 01:13:42,320
night and just install it


1026
01:13:42,320 --> 01:13:46,159
so that's it has different theme colors as well


1027
01:13:46,159 --> 01:13:51,679
this is the one i use tokyo knight actually i use this one tokyo night


1028
01:13:51,679 --> 01:13:55,040
so if you want that theme please go ahead and


1029
01:13:55,040 --> 01:13:57,760
install it


1030
01:13:58,880 --> 01:14:02,080
and now that we've talked about that we come to


1031
01:14:02,080 --> 01:14:05,840
the last point that i wanted to discuss basically


1032
01:14:05,840 --> 01:14:11,520
in uh before we wrap up this chapter which is our chapter two so


1033
01:14:11,520 --> 01:14:15,360
now that we talked about a little bit of setup for setting up your flutter


1034
01:14:15,360 --> 01:14:19,040
installation and setting up your text editor which in this case is visual


1035
01:14:19,040 --> 01:14:22,800
studio code in the next chapter which is chapter 3


1036
01:14:22,800 --> 01:14:27,280
we're going to talk about dart programming so before we actually


1037
01:14:27,280 --> 01:14:30,800
jump into writing flutter applications we're going to talk about how to write


1038
01:14:30,800 --> 01:14:33,920
code in uh dart


1039
01:14:33,920 --> 01:14:36,880
or at least understand like the basics of dart


1040
01:14:36,880 --> 01:14:41,679
so without further ado let's close up this chapter and i'll see you in the


1041
01:14:41,679 --> 01:14:44,800
next one hello everyone and welcome to the third


1042
01:14:44,800 --> 01:14:49,199
chapter of our flutter course in this chapter i thought maybe we could


1043
01:14:49,199 --> 01:14:54,560
focus a little bit on um actually not a little bit but quite a lot on dart


1044
01:14:54,560 --> 01:14:58,640
as you know from the previous chapter we know now that dart is the programming


1045
01:14:58,640 --> 01:15:01,280
language that powers


1046
01:15:01,280 --> 01:15:04,960
uh flutter so


1047
01:15:04,960 --> 01:15:08,960
it would be a good idea for us at least to get a little bit of introduction to


1048
01:15:08,960 --> 01:15:12,880
dart how it works a little bit of its internals


1049
01:15:12,880 --> 01:15:16,159
different data types functions methods classes and


1050
01:15:16,159 --> 01:15:19,840
this chapter as well um just like the entire course i'm kind of assuming that


1051
01:15:19,840 --> 01:15:24,800
you haven't done any programming at all before so i'm going to take things


1052
01:15:24,800 --> 01:15:30,640
very slowly uh take the concepts one at a time introduce them to you


1053
01:15:30,640 --> 01:15:33,199
so and i will give you some references to


1054
01:15:33,199 --> 01:15:38,560
read more about the topics as we won't have really


1055
01:15:38,560 --> 01:15:44,080
that much of a time in this course to go into detail about everything so


1056
01:15:44,080 --> 01:15:47,440
um the goal of this chapter is to


1057
01:15:47,440 --> 01:15:51,760
basically get you started with programming uh


1058
01:15:51,760 --> 01:15:57,840
dart uh and writing your apps then later for flutter


1059
01:15:58,159 --> 01:16:04,080
in order to do that we need to have a project


1060
01:16:04,080 --> 01:16:06,880
set up and by project i mean you need to have


1061
01:16:06,880 --> 01:16:11,440
some kind of a playground set up so that you can start writing


1062
01:16:11,440 --> 01:16:16,560
dart code and then you can try it on for instance a telephone or a simulator or


1063
01:16:16,560 --> 01:16:19,199
what have you now


1064
01:16:19,199 --> 01:16:23,840
um a lot of people would rather go to dark pad as we saw in the previous


1065
01:16:23,840 --> 01:16:28,480
chapter and start writing their code in dart pad


1066
01:16:28,480 --> 01:16:33,280
that's one way of doing it but since in this chap in this pro in this course


1067
01:16:33,280 --> 01:16:35,679
we're gonna write


1068
01:16:35,679 --> 01:16:38,960
an application release it for ios on android


1069
01:16:38,960 --> 01:16:45,120
um it is safe to say that that we can literally start actually creating


1070
01:16:45,120 --> 01:16:50,960
our real project here and now so that we can then later build upon it


1071
01:16:50,960 --> 01:16:54,560
rather than writing all our code in dart pad


1072
01:16:54,560 --> 01:16:58,159
because you can then by doing by writing your


1073
01:16:58,159 --> 01:17:03,199
code in an actual flutter project you can get used to how we work with


1074
01:17:03,199 --> 01:17:06,960
flutter as a whole so i think this is a little bit of a


1075
01:17:06,960 --> 01:17:11,600
time invested into later chapters as well where we're gonna work and continue


1076
01:17:11,600 --> 01:17:15,440
working on the same project so we have to just set it up once


1077
01:17:15,440 --> 01:17:18,480
but at the same time


1078
01:17:18,719 --> 01:17:24,239
there is a little bit of a value in not blending in too much of our


1079
01:17:24,239 --> 01:17:27,679
test code like what we're doing in this chapter with what we're going to do


1080
01:17:27,679 --> 01:17:31,199
later in the actual application if you know


1081
01:17:31,199 --> 01:17:35,040
what i mean so so i think it would be better now for us


1082
01:17:35,040 --> 01:17:38,960
to set up just a test application and then


1083
01:17:38,960 --> 01:17:42,080
keep working on it and then later on when we start doing the actual


1084
01:17:42,080 --> 01:17:46,239
application then we create a separate project for that so


1085
01:17:46,239 --> 01:17:50,400
now let's then


1086
01:17:50,400 --> 01:17:56,080
do that together so i'm gonna bring my face down here so you see the entire


1087
01:17:56,080 --> 01:18:01,600
entire screen i'm then going to create a new terminal


1088
01:18:01,600 --> 01:18:04,880
window and bring it up here on the screen so you can see it and i'm going


1089
01:18:04,880 --> 01:18:10,400
to increase the font so it's a little bit easier to spot what i'm typing


1090
01:18:10,480 --> 01:18:15,280
so let's go to a folder where you try to or where you


1091
01:18:15,280 --> 01:18:20,239
keep your uh projects for me i go to dev projects


1092
01:18:20,239 --> 01:18:25,920
and i have a folder there called flutter so i try to put all my


1093
01:18:25,920 --> 01:18:31,679
flutter projects in here then in order to create a new flutter


1094
01:18:31,679 --> 01:18:34,719
project what you have to do is to issue the


1095
01:18:34,719 --> 01:18:37,440
flutter create command


1096
01:18:37,440 --> 01:18:41,840
and this create command is already shipped inside flutter so if you say


1097
01:18:41,840 --> 01:18:44,880
which flutter this is going to go and find the actual


1098
01:18:44,880 --> 01:18:48,800
flatter binary if you remember from the previous chapters where we installed


1099
01:18:48,800 --> 01:18:52,320
flutter it's going to find the flutter binary


1100
01:18:52,320 --> 01:18:55,520
and then call the create command on it so if you


1101
01:18:55,520 --> 01:18:59,920
say flocker create it expects you to kind of like


1102
01:18:59,920 --> 01:19:04,800
provide it with some sort of a name of a project so let's just say


1103
01:19:04,800 --> 01:19:10,480
learning guard learning er mean dart


1104
01:19:10,480 --> 01:19:13,360
so that's the binary that's the command and


1105
01:19:13,360 --> 01:19:19,120
that is the name of the project okay so uh this is the easiest way to create a


1106
01:19:19,120 --> 01:19:22,960
new floater flutter project in my opinion at least so let's execute that


1107
01:19:22,960 --> 01:19:25,360
command


1108
01:19:27,040 --> 01:19:31,840
it's gonna do its thing and what i'm gonna do then is to as you


1109
01:19:31,840 --> 01:19:36,719
can see it's created a new folder called learning dart


1110
01:19:36,719 --> 01:19:41,280
so let's go and i'm going to say cd learning dart


1111
01:19:41,280 --> 01:19:46,159
and then i'm going to issue a command called code dot and


1112
01:19:46,159 --> 01:19:51,600
i can actually bring this a little bit to the right so you can and also


1113
01:19:51,600 --> 01:19:55,520
do like this so you can see what i'm typing


1114
01:19:55,520 --> 01:20:00,080
as you can see i've written code dot and what code does is that it


1115
01:20:00,080 --> 01:20:03,120
brings up visual studio code so it's just like a


1116
01:20:03,120 --> 01:20:07,040
command that you can issue in order to bring a visual studio code and


1117
01:20:07,040 --> 01:20:11,600
um if if i just bring up visual studio code


1118
01:20:11,600 --> 01:20:14,880
the way it is right now and for instance you can see it you


1119
01:20:14,880 --> 01:20:19,600
can't see it right now but it's because i have a separate uh screen here i'll


1120
01:20:19,600 --> 01:20:23,840
bring up visual studio code as you can see here by hand


1121
01:20:23,840 --> 01:20:27,920
there is a good extension where there is an ability


1122
01:20:27,920 --> 01:20:32,480
for visual studio code to install this code


1123
01:20:32,480 --> 01:20:36,800
shortcut for you in terminal in your path so if you say which code


1124
01:20:36,800 --> 01:20:42,239
it just says user local bin code so it's just an executable that allows


1125
01:20:42,239 --> 01:20:47,120
you then to open up visual studio code with a path like so you can say open a


1126
01:20:47,120 --> 01:20:52,719
visual studio code in this folder so you can just say code


1127
01:20:52,880 --> 01:20:56,639
dot so and you can do that in visual studio


1128
01:20:56,639 --> 01:21:02,320
code you can allow that to be installed by doing um command shift p on macintosh


1129
01:21:02,320 --> 01:21:05,520
or control shift p i i believe in windows


1130
01:21:05,520 --> 01:21:07,760
and linux


1131
01:21:07,760 --> 01:21:11,520
and there is this little command here that says shell command install code


1132
01:21:11,520 --> 01:21:15,360
command in path so if you execute that once then it's already set up for you


1133
01:21:15,360 --> 01:21:20,000
you don't have to do that anymore so if you'd like to be able to say code


1134
01:21:20,000 --> 01:21:24,320
dot in terminal and open the current folder


1135
01:21:24,320 --> 01:21:27,360
within visual studio code without you having to open visual studio code


1136
01:21:27,360 --> 01:21:32,400
manually and then doing file open then i suggest that you do command shift


1137
01:21:32,400 --> 01:21:36,239
p or control shift p in visual studio code depending on which


1138
01:21:36,239 --> 01:21:40,400
operating system you're using and then choosing shell command install code


1139
01:21:40,400 --> 01:21:46,400
command in path so i've already done that so i can just say code dot


1140
01:21:46,400 --> 01:21:51,600
and i'll bring this up here so as you can see this is the basics of


1141
01:21:51,600 --> 01:21:54,480
a simple


1142
01:21:54,840 --> 01:22:00,320
um flutter project that you create with flutter create now visual studio code


1143
01:22:00,320 --> 01:22:04,880
has a built-in terminal so i don't have to have this terminal window open


1144
01:22:04,880 --> 01:22:09,440
anymore so i'm just gonna close it okay and i'm gonna make this full screen


1145
01:22:09,440 --> 01:22:13,840
increase the size a little bit so you can see better and perhaps i could even


1146
01:22:13,840 --> 01:22:18,080
remove this flutter logo on top right so you can see the


1147
01:22:18,080 --> 01:22:21,920
content a little bit better as well


1148
01:22:22,560 --> 01:22:25,600
so that's the creation of our


1149
01:22:25,600 --> 01:22:30,560
simple flutter project now in order for this flutter project to run


1150
01:22:30,560 --> 01:22:35,280
and you be able to run this application and like keep testing your


1151
01:22:35,280 --> 01:22:38,159
project you would have to select a target and


1152
01:22:38,159 --> 01:22:41,600
you do that with command shift p and then


1153
01:22:41,600 --> 01:22:45,920
choosing flutter select device so you can just say flutter select device


1154
01:22:45,920 --> 01:22:49,120
enter command shift p is on macintosh and ctrl


1155
01:22:49,120 --> 01:22:53,520
shift p i believe is in linux and windows so do that command shift b is a


1156
01:22:53,520 --> 01:22:56,800
very important command you're going to use it quite a lot in this course so


1157
01:22:56,800 --> 01:23:01,040
just learn that please um then i'm going to say select device


1158
01:23:01,040 --> 01:23:05,280
and i'm going to choose since i'm on a macintosh and as you saw


1159
01:23:05,280 --> 01:23:11,520
earlier we have xcode already installed xcode comes also with the entire ios sdk


1160
01:23:11,520 --> 01:23:18,239
and also with the simulator i can choose to run our application on ios simulator


1161
01:23:18,239 --> 01:23:22,080
or i can choose to run it on an actual phone


1162
01:23:22,080 --> 01:23:24,719
now for this


1163
01:23:24,719 --> 01:23:27,600
um i believe i don't know if you've talked


1164
01:23:27,600 --> 01:23:31,520
already about scrcpy to be honest with you i'm just gonna


1165
01:23:31,520 --> 01:23:38,080
search in my notes um to see if you've talked about that and


1166
01:23:38,320 --> 01:23:41,679
if you just give me one second i'll just check here i believe we're we're gonna


1167
01:23:41,679 --> 01:23:46,960
set it up in chapter six so we haven't set up scrcp cpy yet so for that purpose


1168
01:23:46,960 --> 01:23:50,639
i'm just going to say select device and i'm just going to say start ios


1169
01:23:50,639 --> 01:23:55,760
simulator so that is going to as you can see start up by your simulator and that


1170
01:23:55,760 --> 01:24:00,639
for now is like the best way for us to test our application so


1171
01:24:00,639 --> 01:24:05,760
while this is connecting um i can show you a little bit around as well


1172
01:24:05,760 --> 01:24:09,199
we have as you can see lots of files here already created for us we're going


1173
01:24:09,199 --> 01:24:12,880
to go through some of these um but one of the most important files that


1174
01:24:12,880 --> 01:24:17,760
you're going to need to get used to used to is this lib slash main.dart and this


1175
01:24:17,760 --> 01:24:22,560
is where like the majority of the code is written so


1176
01:24:22,560 --> 01:24:28,159
uh this is his contents at the moment um let's see what it's doing with the


1177
01:24:28,159 --> 01:24:32,000
simulator i'm just gonna have a look here


1178
01:24:32,000 --> 01:24:35,600
um it's taking a little bit longer than


1179
01:24:35,600 --> 01:24:38,480
expected so what i'm gonna do is i'm just gonna


1180
01:24:38,480 --> 01:24:42,159
kill the io simulator manually this shouldn't this usually doesn't happen


1181
01:24:42,159 --> 01:24:44,960
but that's okay if it does happen then you know how to deal with it just close


1182
01:24:44,960 --> 01:24:49,280
the simulator um and then i'm just gonna


1183
01:24:49,280 --> 01:24:55,199
go to command shift p select device and then start ios simulator fresh so it's


1184
01:24:55,199 --> 01:25:01,040
starting right now okay so that's our simulator and i'm


1185
01:25:01,040 --> 01:25:04,560
actually going to decrease the size of this a little bit since i realize that


1186
01:25:04,560 --> 01:25:09,040
it is a very large font so


1187
01:25:09,040 --> 01:25:13,120
this is our main dart file this is like where the flutter


1188
01:25:13,120 --> 01:25:18,080
command line um command has created it is the file that has been created for


1189
01:25:18,080 --> 01:25:20,880
us so we don't have to play around with it too much to be honest with you at the


1190
01:25:20,880 --> 01:25:24,560
moment um for the purpose of this chapter we're


1191
01:25:24,560 --> 01:25:29,280
just gonna have a look at um basically kind of like exploiting this


1192
01:25:29,280 --> 01:25:33,600
uh code so that we can inject our code into it so we can learn dart a little


1193
01:25:33,600 --> 01:25:36,639
bit so you don't have to understand all of this code the way it is right now


1194
01:25:36,639 --> 01:25:41,840
there's lots of comments and etc so so that's


1195
01:25:41,840 --> 01:25:45,760
that part so now that we're here and then you can see we have a little


1196
01:25:45,760 --> 01:25:50,000
simulator here and in order to run this application on this simulator since


1197
01:25:50,000 --> 01:25:53,120
you've already done the flutter select command


1198
01:25:53,120 --> 01:25:57,840
you just go to run and you say run without debugging for now so


1199
01:25:57,840 --> 01:26:01,199
since the simulator is already selected then it understands


1200
01:26:01,199 --> 01:26:06,080
that it needs to compile this project for my simulator so


1201
01:26:06,080 --> 01:26:09,520
um and we're just going to give it some


1202
01:26:09,520 --> 01:26:12,800
time depending on your machine and like what you have for specifications on your


1203
01:26:12,800 --> 01:26:16,080
machine this this command could take anywhere between


1204
01:26:16,080 --> 01:26:21,040
a couple seconds to maybe 30 seconds or even more and i'm not sure how long


1205
01:26:21,040 --> 01:26:24,239
it's going to take for a fresh flutter project to be honest with you to start


1206
01:26:24,239 --> 01:26:29,920
running on the simulator but it took about 21 seconds so or 22 seconds so


1207
01:26:29,920 --> 01:26:32,880
um i will bring up the


1208
01:26:32,880 --> 01:26:36,159
project now and this is like the basic flutter project i'm not going to go into


1209
01:26:36,159 --> 01:26:40,080
details about how it works but you can press the plus button if you want to so


1210
01:26:40,080 --> 01:26:43,280
but what i'm going to do i'm just going to close this widget inspector that was


1211
01:26:43,280 --> 01:26:46,719
opened automatically and i'm just going to


1212
01:26:46,719 --> 01:26:51,840
bring this a little bit down so that we can see the debug console okay


1213
01:26:51,840 --> 01:26:56,000
so that's for setting up our project so


1214
01:26:56,000 --> 01:27:00,000
that part is done now the first thing that we need to talk about


1215
01:27:00,000 --> 01:27:06,719
when we start talking about dart is the concept of keywords


1216
01:27:06,719 --> 01:27:10,159
now since i'm assuming that you haven't done any programming language in any


1217
01:27:10,159 --> 01:27:13,199
other place before um


1218
01:27:13,199 --> 01:27:17,840
you need to understand what keywords are they're very


1219
01:27:17,840 --> 01:27:21,120
important in understanding any programming language basically and


1220
01:27:21,120 --> 01:27:22,930
keywords are um


1221
01:27:22,930 --> 01:27:27,199
[Music] concisely explained there are


1222
01:27:27,199 --> 01:27:31,120
words that are reserved for


1223
01:27:31,120 --> 01:27:34,320
the programming language that you


1224
01:27:34,320 --> 01:27:39,520
cannot use for anything else than what the programming language intends those


1225
01:27:39,520 --> 01:27:43,840
words to be used as i know that sounds a little bit


1226
01:27:43,840 --> 01:27:48,080
difficult but i mean there's no real good analogy in


1227
01:27:48,080 --> 01:27:51,440
like if you're coming from figma if you're coming from a design world what a


1228
01:27:51,440 --> 01:27:56,800
key word could be because in a design world you're not really talking


1229
01:27:56,800 --> 01:28:02,159
in terms of code with your product or with your


1230
01:28:02,159 --> 01:28:06,000
software where you're designing your stuff but


1231
01:28:06,000 --> 01:28:09,760
when you come to programming language as you know it's a language so


1232
01:28:09,760 --> 01:28:15,760
words mean stuff in in a programming language so a keyword is as its name


1233
01:28:15,760 --> 01:28:21,199
indicates is a word that has a special meaning in that particular particular


1234
01:28:21,199 --> 01:28:24,239
language and i provide a link here for you that you


1235
01:28:24,239 --> 01:28:30,000
can check out but i'm going to open it up and


1236
01:28:30,000 --> 01:28:34,719
bring it to the screen here increase the size a little bit so we can see better


1237
01:28:34,719 --> 01:28:38,880
uh have a look at my screen here yeah and you can see this is a part of the


1238
01:28:38,880 --> 01:28:42,960
documentation for dark programming language that explains what keywords are


1239
01:28:42,960 --> 01:28:46,080
in dart and you can see there are some words that have special meaning like


1240
01:28:46,080 --> 01:28:50,239
show import extends async await break


1241
01:28:50,239 --> 01:28:54,880
so you can say that the language the dark language is made out of these


1242
01:28:54,880 --> 01:28:59,679
keywords that is pretty much it it's just like series of keywords like the


1243
01:28:59,679 --> 01:29:03,199
things that you tell the language that hey i want to do something and then it


1244
01:29:03,199 --> 01:29:06,000
says okay what do you want to do then you say okay i want to do this or this


1245
01:29:06,000 --> 01:29:09,679
or this so special words for the programming


1246
01:29:09,679 --> 01:29:14,639
language so that it understands what you mean basically


1247
01:29:15,120 --> 01:29:19,679
so that's for keywords um for now we don't have to really go into


1248
01:29:19,679 --> 01:29:22,639
so much more details about what a keyword is but for now just understand


1249
01:29:22,639 --> 01:29:27,280
that a keyword is a special word in the programming language


1250
01:29:27,280 --> 01:29:30,880
language's brain kind of so that you can talk to it it's your interface with the


1251
01:29:30,880 --> 01:29:35,120
programming language to make it understand what you want to do okay


1252
01:29:35,120 --> 01:29:37,920
and please check out the link that i provided here to understand more about


1253
01:29:37,920 --> 01:29:40,480
keywords


1254
01:29:42,080 --> 01:29:47,199
okay so we've talked about keywords i'm just gonna check it in my notes so that


1255
01:29:47,199 --> 01:29:50,320
we know we've talked about it


1256
01:29:51,199 --> 01:29:55,679
now the next concept that we need to talk about are


1257
01:29:55,679 --> 01:30:00,400
data types um


1258
01:30:00,560 --> 01:30:05,280
if you for instance come from a design background then you have different tools


1259
01:30:05,280 --> 01:30:09,520
to work with for instance you may have in your design system whatever you're


1260
01:30:09,520 --> 01:30:13,280
using if you're using product from adobe or if you're using for instance figma or


1261
01:30:13,280 --> 01:30:16,719
whatever visio or whatever tool you're using then


1262
01:30:16,719 --> 01:30:20,400
there's like a set of components that you can work with for instance you can


1263
01:30:20,400 --> 01:30:25,600
drag in a text field or you can drag in an image field or sorry an image or you


1264
01:30:25,600 --> 01:30:29,120
can for instance assign


1265
01:30:29,280 --> 01:30:34,480
assign a color to a text so these are all like things that you can do with


1266
01:30:34,480 --> 01:30:37,360
that software


1267
01:30:37,360 --> 01:30:41,760
now a data type in in a programming language like dart


1268
01:30:41,760 --> 01:30:47,199
is that type of a thing for instance you would say


1269
01:30:47,199 --> 01:30:51,440
i have some data in my mind okay what is it it's the first name of a


1270
01:30:51,440 --> 01:30:57,679
of my friend okay his name is uh jack or whatever um


1271
01:30:57,679 --> 01:31:03,760
and then you would say okay what type is jack is it a number no is it like um


1272
01:31:03,760 --> 01:31:09,120
is it a list of things well yeah it's a list of uh characters yeah


1273
01:31:09,120 --> 01:31:15,360
uh okay then it's that is this data type or you could say


1274
01:31:15,360 --> 01:31:20,880
i'm thinking about my age my age is let's say i'm 37.


1275
01:31:20,880 --> 01:31:25,600
okay what is 37 is it a list of things well yeah it kind of is a list of


1276
01:31:25,600 --> 01:31:29,360
numbers list of digits but it's also in itself a


1277
01:31:29,360 --> 01:31:34,480
number so then there has been this convention like


1278
01:31:34,480 --> 01:31:38,080
convention in different programming languages and every program language


1279
01:31:38,080 --> 01:31:41,120
language pretty much that you can use these days has this concept of data


1280
01:31:41,120 --> 01:31:44,800
types data type is as its name indicates a


1281
01:31:44,800 --> 01:31:50,639
a specific specific name assigned to


1282
01:31:50,639 --> 01:31:55,679
to a series a specific name assigned to a data


1283
01:31:55,679 --> 01:32:02,639
that is bound to be of a specific type as well so for instance in dart you have


1284
01:32:02,639 --> 01:32:07,280
data types called integers or you have strings or you have arrays and sets


1285
01:32:07,280 --> 01:32:11,199
which we'll talk about soon but a data type just for now though it's


1286
01:32:11,199 --> 01:32:17,280
just a stamp on a piece of data to say that you're of this specific type


1287
01:32:17,280 --> 01:32:20,159
so you could think of a data data type as a


1288
01:32:20,159 --> 01:32:23,920
nationality you could say like every person coming from sweden is swedish


1289
01:32:23,920 --> 01:32:29,520
boom that's his data type so it's just a categorization of data based on their


1290
01:32:29,520 --> 01:32:34,239
appearance or based on what they actually hold so


1291
01:32:34,239 --> 01:32:40,000
for instance you can say here's a university full of engineers and


1292
01:32:40,000 --> 01:32:42,880
these are software engineers these are mechanical engineers so the software


1293
01:32:42,880 --> 01:32:48,320
engineer is a data type it or is a person type a category type so putting


1294
01:32:48,320 --> 01:32:52,480
stamps on things based on the categorization is kind of what data type


1295
01:32:52,480 --> 01:32:56,000
does and in short i mean


1296
01:32:56,000 --> 01:32:59,360
you just have to know that it's just a categorization of things based on


1297
01:32:59,360 --> 01:33:04,239
what they hold so and there's and there's a website that


1298
01:33:04,239 --> 01:33:08,400
you can read about uh dart data types and it's right here


1299
01:33:08,400 --> 01:33:11,440
i don't know if you've i've if i've provided it here


1300
01:33:11,440 --> 01:33:15,920
on the link below as you can see dart core library html so


1301
01:33:15,920 --> 01:33:21,280
um and here you can read more about dart data types


1302
01:33:21,280 --> 01:33:24,639
but we're not going to go into so much detail about all these right now just


1303
01:33:24,639 --> 01:33:27,760
know that data type in dart is or any programming


1304
01:33:27,760 --> 01:33:32,320
language basically that has data types is a categorization of


1305
01:33:32,320 --> 01:33:37,080
data based on their appearance or contents


1306
01:33:37,360 --> 01:33:40,239
now let's talk a little about


1307
01:33:40,239 --> 01:33:45,199
something called constants in dart a constant


1308
01:33:45,199 --> 01:33:48,840
usually in programming language languages are


1309
01:33:48,840 --> 01:33:53,920
values whose value cannot be changed


1310
01:33:53,920 --> 01:33:58,880
that's a little bit meta but uh let's say for instance the value of


1311
01:33:58,880 --> 01:34:01,120
um


1312
01:34:01,280 --> 01:34:04,880
a value of 10 it's a number


1313
01:34:04,880 --> 01:34:09,520
it cannot be changed 10 is 10 and it will always be 10.


1314
01:34:09,520 --> 01:34:13,920
um or your name that is a constant although


1315
01:34:13,920 --> 01:34:18,719
you can go and change it but as long as that is your name it is a constant so


1316
01:34:18,719 --> 01:34:22,719
um another example of a i mean


1317
01:34:22,719 --> 01:34:27,120
there are so many values that can be constants which will actually be quite


1318
01:34:27,120 --> 01:34:31,760
abstract for me to be able to explain right now but just know that a constant


1319
01:34:31,760 --> 01:34:36,960
is a value whose internal data cannot change during


1320
01:34:36,960 --> 01:34:40,239
the during where you're writing your program


1321
01:34:40,239 --> 01:34:44,480
and also during when you're running your program so


1322
01:34:44,480 --> 01:34:51,600
um that is kind of what a constant is uh but there is also this uh notion of a


1323
01:34:51,600 --> 01:34:56,159
compile time constant and a runtime constant and i i mean


1324
01:34:56,159 --> 01:34:59,040
you don't have to know about uh


1325
01:34:59,040 --> 01:35:02,960
like those different types of constants right now just because like in dart a


1326
01:35:02,960 --> 01:35:06,639
constant is a constant whether it's runtime or


1327
01:35:06,639 --> 01:35:11,760
compile time is constant it's just just a constant as you'll see soon but


1328
01:35:11,760 --> 01:35:15,360
i still believe that it's important to understand the difference between


1329
01:35:15,360 --> 01:35:20,400
compile time and runtime when you're talking about programming


1330
01:35:20,400 --> 01:35:23,199
and when you're becoming software developer and i hope by the end of this


1331
01:35:23,199 --> 01:35:26,880
course you'll actually become a software developer if you're not already um that


1332
01:35:26,880 --> 01:35:34,320
would be really amazing uh but the notion of a compile time and a and


1333
01:35:34,320 --> 01:35:36,800
runtime is very important to understand and


1334
01:35:36,800 --> 01:35:41,280
developers like to um make a distinction between whether


1335
01:35:41,280 --> 01:35:44,480
something has happened during compile time or something has happened during


1336
01:35:44,480 --> 01:35:48,159
runtime and compile time is


1337
01:35:48,159 --> 01:35:52,159
or before i explain compile time maybe i should explain compile compile is where


1338
01:35:52,159 --> 01:35:55,760
you take the program that you're writing here


1339
01:35:55,760 --> 01:36:01,280
and you tell the computer that i want you to package this up


1340
01:36:01,280 --> 01:36:06,080
so that i can run it later on x and y machine


1341
01:36:06,080 --> 01:36:10,800
so that process of packaging things up simply said is


1342
01:36:10,800 --> 01:36:16,239
in very simple terms it's called compiling or a compilation okay so


1343
01:36:16,239 --> 01:36:19,119
um from where you start writing your


1344
01:36:19,119 --> 01:36:22,880
program with the hand with your fingers until where you package it you're pretty


1345
01:36:22,880 --> 01:36:28,000
much just compiling it okay but when you run it like we're running


1346
01:36:28,000 --> 01:36:32,400
it at the moment on ios simulator


1347
01:36:32,400 --> 01:36:38,560
that session from where you start outputting your program into this device


1348
01:36:38,560 --> 01:36:42,400
and for it to run your program from that moment on


1349
01:36:42,400 --> 01:36:46,159
then the distinction separates into


1350
01:36:46,159 --> 01:36:48,400
runtime so


1351
01:36:48,400 --> 01:36:52,800
you haven't compiled time and runtime and a constant is a value that is the


1352
01:36:52,800 --> 01:36:57,679
same during compile time and runtime so its value doesn't change so the value of


1353
01:36:57,679 --> 01:37:02,880
10 is 10 while you're writing your program and also stays the value of 10


1354
01:37:02,880 --> 01:37:07,440
while the program is running so


1355
01:37:07,440 --> 01:37:12,960
that is a very simple explanation of a constant so


1356
01:37:12,960 --> 01:37:15,360
now let's put


1357
01:37:15,360 --> 01:37:21,119
constants and data types uh in practice now in this


1358
01:37:21,119 --> 01:37:25,840
project that was created for you by flutter create


1359
01:37:25,840 --> 01:37:31,040
in this in this line of code as you can see it says void main we're not going to


1360
01:37:31,040 --> 01:37:35,679
talk about exactly what that is but just press enter at the end of it and just


1361
01:37:35,679 --> 01:37:37,920
write


1362
01:37:39,360 --> 01:37:42,560
final and i'm going to tell you what final is


1363
01:37:42,560 --> 01:37:47,040
soon and just saying name is equal to foo


1364
01:37:47,040 --> 01:37:50,639
okay this is


1365
01:37:50,639 --> 01:37:54,400
there's lots going on in here and i'm gonna tell you um


1366
01:37:54,400 --> 01:37:58,159
what is actually happening here um


1367
01:37:58,159 --> 01:38:02,239
but i before before we actually go through all these details let's let's


1368
01:38:02,239 --> 01:38:08,320
add something here called a constant so i'm just kind of saying const age is 27


1369
01:38:08,320 --> 01:38:13,360
or yeah 27. as you can see this is how you write code in dart you start by a


1370
01:38:13,360 --> 01:38:17,840
keyword usually or a variable name or something as we're going to talk about


1371
01:38:17,840 --> 01:38:21,760
it but const is a keyword okay


1372
01:38:21,760 --> 01:38:26,719
and it tells dart that what is following here is a name right after


1373
01:38:26,719 --> 01:38:31,520
cons i'm going to write some name and in that name then i'm going to


1374
01:38:31,520 --> 01:38:37,360
basically say okay i'm adding the value of 27 to this


1375
01:38:37,360 --> 01:38:41,760
h i'm sorry about this my dog also barking a little bit


1376
01:38:41,760 --> 01:38:44,800
so what is happening here is that you're


1377
01:38:44,800 --> 01:38:49,360
telling dart that i'm putting the value of 27 into a constant


1378
01:38:49,360 --> 01:38:53,600
call h and you can refer to this age later for


1379
01:38:53,600 --> 01:38:56,840
instance you can say then


1380
01:38:56,840 --> 01:39:02,159
const age twice the age


1381
01:39:02,159 --> 01:39:07,760
you can say is equal to age multiplied by two and this is also constant because


1382
01:39:07,760 --> 01:39:11,360
at compile time word dart is basically trying to understand what you've written


1383
01:39:11,360 --> 01:39:16,239
it says okay you said 27 and then you're saying 27 is a constant so its value is


1384
01:39:16,239 --> 01:39:18,800
never going to change and if you tell me 27


1385
01:39:18,800 --> 01:39:22,320
multiplied by 2 that also is a constant because


1386
01:39:22,320 --> 01:39:28,239
both this side and this side are compile time constants


1387
01:39:28,239 --> 01:39:32,800
so that's that's what we mean by a constant it's a value that is specified


1388
01:39:32,800 --> 01:39:36,159
during compile time and it and it cannot change so


1389
01:39:36,159 --> 01:39:42,239
also it's important to know that notice that your learning guard and


1390
01:39:42,719 --> 01:39:45,920
here is sorry i have to just take some items in


1391
01:39:45,920 --> 01:39:50,400
my notes to make sure that i've explained all of those to you um


1392
01:39:50,400 --> 01:39:55,920
you can see here that every line of code in dart needs to end with a semicolon


1393
01:39:55,920 --> 01:40:00,000
and that tells dart that yeah you're starting a new line of code of course


1394
01:40:00,000 --> 01:40:04,480
you can put two lines of code like this but if you just press save


1395
01:40:04,480 --> 01:40:07,760
there is a program automatically running in the background which is called dart


1396
01:40:07,760 --> 01:40:12,159
fmt which is the dart formatter which is going to format your code and prefix it


1397
01:40:12,159 --> 01:40:16,000
so if i like put a lot of spaces in here and just press save


1398
01:40:16,000 --> 01:40:20,159
you can see upon doing command s on mac or control s on


1399
01:40:20,159 --> 01:40:24,560
linux and windows upon saving dart formatter is gonna kick in and format


1400
01:40:24,560 --> 01:40:29,280
the code for you so just a little hint


1401
01:40:29,280 --> 01:40:31,920
um okay


1402
01:40:31,920 --> 01:40:35,119
those are constants so we've talked about that


1403
01:40:35,119 --> 01:40:38,480
now let's talk about variables a little bit


1404
01:40:38,480 --> 01:40:42,800
a variable is usually


1405
01:40:42,800 --> 01:40:48,480
anything that contains a value that is not a constant


1406
01:40:48,480 --> 01:40:51,840
i mean i think that's like the simplest way of explaining what a


1407
01:40:51,840 --> 01:40:57,119
variable is um a variable as a name indicates it can vary


1408
01:40:57,119 --> 01:41:01,280
and that means that the data that it holds it doesn't need to be constantly


1409
01:41:01,280 --> 01:41:04,960
the same it means that from where you start the program you may


1410
01:41:04,960 --> 01:41:07,920
actually assign a value to this variable and you


1411
01:41:07,920 --> 01:41:12,400
may also change that variable depending on what type of variable it is


1412
01:41:12,400 --> 01:41:14,560
um so


1413
01:41:14,560 --> 01:41:19,760
there's also this notion of


1414
01:41:19,760 --> 01:41:24,320
a final variable in dart which we'll talk about soon so


1415
01:41:24,320 --> 01:41:29,840
before we do that let's go to this main function here and you could just say um


1416
01:41:29,840 --> 01:41:35,440
var name is fu and here what i've done is that i've


1417
01:41:35,440 --> 01:41:41,040
created a variable indicated by the var keyword


1418
01:41:41,040 --> 01:41:47,280
whose value is foo or let's just say alex


1419
01:41:47,280 --> 01:41:51,679
and semicolon to end the line now if i want to change this value all i could


1420
01:41:51,679 --> 01:41:56,400
say here is to say name is equal to anthony


1421
01:41:56,400 --> 01:42:02,639
or whatever now this is basically us assigning a new


1422
01:42:02,639 --> 01:42:07,280
value to this variable saying anthony um


1423
01:42:07,280 --> 01:42:12,480
as i said there is also a no the notion in


1424
01:42:12,480 --> 01:42:15,119
dart for a keyword called


1425
01:42:15,119 --> 01:42:19,040
final so you could just say final name equal


1426
01:42:19,040 --> 01:42:24,560
to alex and it's it's a little bit strange because final is also a variable


1427
01:42:24,560 --> 01:42:29,760
whose value cannot be changed so you may be like okay what like what kind of a


1428
01:42:29,760 --> 01:42:33,600
variable is that like how is that not a constant


1429
01:42:33,600 --> 01:42:38,880
now there's a little limitation because you you may try to like say const


1430
01:42:38,880 --> 01:42:42,400
aim alex but this


1431
01:42:42,400 --> 01:42:48,159
as you will see later in in the in the course


1432
01:42:48,159 --> 01:42:54,000
final gives you the flexibility to assign a value to your variable


1433
01:42:54,000 --> 01:42:58,080
a little bit later maybe in the process of creating it


1434
01:42:58,080 --> 01:43:03,600
but it still indicates to dart that the value of this variable is not gonna


1435
01:43:03,600 --> 01:43:08,000
change after it has been assigned to it's a little bit


1436
01:43:08,000 --> 01:43:11,840
yeah it's it's it's just a little bit confusing maybe at the moment so let's


1437
01:43:11,840 --> 01:43:16,639
just say a variable is like a constant but its


1438
01:43:16,639 --> 01:43:20,400
value can be changed let's just leave it at that okay so


1439
01:43:20,400 --> 01:43:24,760
uh that's it


1440
01:43:24,960 --> 01:43:29,679
okay now that we talked a little bit about a little bit about uh


1441
01:43:29,679 --> 01:43:35,679
variables let's talk about functions so um i didn't specify exactly what this is


1442
01:43:35,679 --> 01:43:38,800
just because we hadn't really come to functions


1443
01:43:38,800 --> 01:43:42,239
but a function is a body


1444
01:43:42,239 --> 01:43:48,400
of code is a grouping of series of lines of code one to n number of n lines of


1445
01:43:48,400 --> 01:43:51,199
codes that


1446
01:43:51,199 --> 01:43:54,960
is logically uh grouped


1447
01:43:54,960 --> 01:44:00,719
and it can it has a few properties uh one is its return value here indicated


1448
01:44:00,719 --> 01:44:05,840
by void the other part of its information is its


1449
01:44:05,840 --> 01:44:10,800
name followed by a pair of parentheses


1450
01:44:10,800 --> 01:44:14,080
an open parenthesis and a closed parenthesis


1451
01:44:14,080 --> 01:44:19,119
in which you will write something called the function arguments


1452
01:44:19,119 --> 01:44:22,560
or parameters um


1453
01:44:22,560 --> 01:44:27,040
it's pretty much just like uh imagine like


1454
01:44:27,040 --> 01:44:32,000
a box where you input things in it it does some processing and then it outputs


1455
01:44:32,000 --> 01:44:36,239
that stuff whatever it wants to output so


1456
01:44:36,239 --> 01:44:41,840
what we could do here is to create a very simple function for for ourselves


1457
01:44:41,840 --> 01:44:45,679
by as you see as you saw before or as i


1458
01:44:45,679 --> 01:44:49,760
mentioned before what you write for a function in the


1459
01:44:49,760 --> 01:44:54,880
beginning is this data type i mean what data comes out of this function


1460
01:44:54,880 --> 01:44:56,960
and um


1461
01:44:56,960 --> 01:45:00,159
and here let's say we want to add


1462
01:45:00,159 --> 01:45:05,920
someone's first name and their last name with a space between it so if i say foo


1463
01:45:05,920 --> 01:45:11,920
as the first name and bar as the last name then the full name should be fu bar


1464
01:45:11,920 --> 01:45:15,440
and with the space in between so


1465
01:45:15,440 --> 01:45:19,600
as i said then you need to specify the data type first what you're gonna return


1466
01:45:19,600 --> 01:45:23,360
and if you looked at the documentation that i provided earlier there's a data


1467
01:45:23,360 --> 01:45:27,199
type called string which is a series of characters


1468
01:45:27,199 --> 01:45:32,480
basically it could be a name a family name address of your house or whatever


1469
01:45:32,480 --> 01:45:36,960
and that's a data type is string okay so we say we're outputting string and then


1470
01:45:36,960 --> 01:45:39,679
you say okay what should this function be called


1471
01:45:39,679 --> 01:45:42,480
um there's a convention in dart that your


1472
01:45:42,480 --> 01:45:49,119
functions should follow a camel case naming convention basically in camel


1473
01:45:49,119 --> 01:45:53,440
cases if you for instance say in english my function should be called


1474
01:45:53,440 --> 01:45:57,199
get full name that's my function name but you cannot


1475
01:45:57,199 --> 01:46:00,880
have spaces in your function function names in dart or pretty much every


1476
01:46:00,880 --> 01:46:04,159
programming language that i know about then


1477
01:46:04,159 --> 01:46:08,960
remove all the spaces and then except for the first word


1478
01:46:08,960 --> 01:46:13,760
change all because uh cons all the other words


1479
01:46:13,760 --> 01:46:19,600
uh first letter to uh to uppercase so it was like this before you could


1480
01:46:19,600 --> 01:46:24,960
actually change them to uppercase first and then remove the spacing so this is


1481
01:46:24,960 --> 01:46:27,600
this is how you should write your function names


1482
01:46:27,600 --> 01:46:31,440
this is called camel case full name okay


1483
01:46:31,440 --> 01:46:35,360
we said that we also have to open parenthesis


1484
01:46:35,360 --> 01:46:40,679
now let's just say then


1485
01:46:41,199 --> 01:46:46,320
we need to uh specify somehow that we're going to accept a first name and a last


1486
01:46:46,320 --> 01:46:48,639
name well


1487
01:46:48,639 --> 01:46:53,040
what kind of a data type does a first name have well


1488
01:46:53,040 --> 01:46:56,560
it's kind of like a string it's a name it's a series of characters so let's


1489
01:46:56,560 --> 01:47:00,400
just type string here and then we want to take a first name


1490
01:47:00,400 --> 01:47:04,719
and we know about camel case now so let's just say first name


1491
01:47:04,719 --> 01:47:08,480
is uppercase and remove the spacing so


1492
01:47:08,480 --> 01:47:11,600
first name hey that's the parameter


1493
01:47:11,600 --> 01:47:15,920
and then you want to go to the next parameter so just say comma


1494
01:47:16,480 --> 01:47:20,800
and then you want to say string last name


1495
01:47:20,800 --> 01:47:23,280
you take the first name and the last name


1496
01:47:23,280 --> 01:47:26,560
now we also said that after the parenthesis after you have accepted your


1497
01:47:26,560 --> 01:47:30,719
parameters you want to go and create like your curly brackets here i don't


1498
01:47:30,719 --> 01:47:36,800
know actually if i mentioned that before but every function is either


1499
01:47:36,800 --> 01:47:44,000
its body or its logic it's either followed by equal


1500
01:47:44,000 --> 01:47:47,440
greater than sign which we're going to talk about later or


1501
01:47:47,440 --> 01:47:50,480
sco uh is by curly bracket so we're just going


1502
01:47:50,480 --> 01:47:54,719
to use curly brackets now there


1503
01:47:54,719 --> 01:47:58,639
what you want to do here you want to take the first name and add a space to


1504
01:47:58,639 --> 01:48:01,920
the first name and then follow that by the last name so


1505
01:48:01,920 --> 01:48:05,440
you need to you you need to tell dart that that is the data you want to return


1506
01:48:05,440 --> 01:48:08,400
and thankfully there is a


1507
01:48:08,400 --> 01:48:11,920
um there's a keyword called return that


1508
01:48:11,920 --> 01:48:15,520
tells dart that you want to return some value from a function so


1509
01:48:15,520 --> 01:48:19,199
then what you're going to do you're going to say i want to return what the


1510
01:48:19,199 --> 01:48:26,960
first name and i want to add a space single quotes space


1511
01:48:26,960 --> 01:48:30,239
us last name


1512
01:48:30,239 --> 01:48:32,800
right so


1513
01:48:32,800 --> 01:48:35,840
i mean this is a very simple implementation of


1514
01:48:35,840 --> 01:48:40,800
get full name so um however there's there's actually a


1515
01:48:40,800 --> 01:48:44,639
better way of doing this in dart and i'll explain it to you right now and


1516
01:48:44,639 --> 01:48:48,159
that is by formatting your strings so


1517
01:48:48,159 --> 01:48:52,639
let's say that you want to basically


1518
01:48:52,639 --> 01:48:57,840
tell dart kind of like how your result looks like and you want to ask dart to


1519
01:48:57,840 --> 01:49:02,880
insert the first name and last name into that result for you


1520
01:49:02,880 --> 01:49:05,520
and that's how you'll do it like this you say


1521
01:49:05,520 --> 01:49:09,920
okay i want to return a string denoted by the single quotation marks here and


1522
01:49:09,920 --> 01:49:13,040
you can also do a string in dart with double quotation marks but i'm going to


1523
01:49:13,040 --> 01:49:16,080
explain that a little bit later


1524
01:49:16,239 --> 01:49:19,280
so let's say that you want to


1525
01:49:19,280 --> 01:49:24,159
return the first name in here but if you say first name


1526
01:49:24,159 --> 01:49:27,360
what's going to happen here is that it's actually going to take this first name


1527
01:49:27,360 --> 01:49:30,960
as has you written in the string so when


1528
01:49:30,960 --> 01:49:34,960
you get this return value it's actually going to say first name


1529
01:49:34,960 --> 01:49:40,000
not the value that you pass to this i know it may be a little bit


1530
01:49:40,000 --> 01:49:43,280
difficult to understand when i say the value that you pass to this what does it


1531
01:49:43,280 --> 01:49:46,960
even mean uh so let's put this actually to test


1532
01:49:46,960 --> 01:49:50,239
first okay go now into


1533
01:49:50,239 --> 01:49:53,599
this build function as you can see here on


1534
01:49:53,599 --> 01:49:57,520
line 16. now it may not be on line 16 for you but for me is at the moment on


1535
01:49:57,520 --> 01:50:03,040
line 16. just find this class my app stateful stateless widget and find this


1536
01:50:03,040 --> 01:50:08,560
widget build stuff that's written there create a new line here


1537
01:50:08,560 --> 01:50:12,080
okay and just say


1538
01:50:12,080 --> 01:50:16,320
full name or sorry say print


1539
01:50:16,320 --> 01:50:19,840
as i'm writing it here print


1540
01:50:19,840 --> 01:50:22,719
and then just say


1541
01:50:23,040 --> 01:50:26,400
what do we call our function get full name


1542
01:50:26,400 --> 01:50:29,280
see here and it says okay what's the first name


1543
01:50:29,280 --> 01:50:34,320
i'll say quotation marks who and the last name is bar


1544
01:50:34,320 --> 01:50:39,280
and ended with a semicolon so and ignore this call for


1545
01:50:39,280 --> 01:50:45,040
now sorry this uh warning avoid print calls and production codes so


1546
01:50:45,520 --> 01:50:48,960
okay so now we're calling that function this is


1547
01:50:48,960 --> 01:50:52,239
the it's i mean it's called calling it's


1548
01:50:52,239 --> 01:50:56,800
called invoking it may have other names but usually


1549
01:50:56,800 --> 01:50:59,760
programmers call this calling call the function


1550
01:50:59,760 --> 01:51:02,320
and these are the parameters that you're


1551
01:51:02,320 --> 01:51:07,360
passing to this function okay so uh


1552
01:51:07,360 --> 01:51:10,000
the i mean there are two words


1553
01:51:10,000 --> 01:51:13,119
used for in in the programming world to explain


1554
01:51:13,119 --> 01:51:17,119
these parameters like with with name and that is called a parameter or an


1555
01:51:17,119 --> 01:51:20,719
argument i mean they're used interchangeably


1556
01:51:20,719 --> 01:51:24,480
the meaning of them is kind of like getting uh convoluted in to the point


1557
01:51:24,480 --> 01:51:28,800
that no one knows which one is which but you could just use parameter or argument


1558
01:51:28,800 --> 01:51:31,360
and everybody would understand what you're saying so but there's a little


1559
01:51:31,360 --> 01:51:34,560
bit of the difference which i'm not going to go into the detail of but if


1560
01:51:34,560 --> 01:51:38,639
someone just says call this function with parameters or arguments you know at


1561
01:51:38,639 --> 01:51:42,560
least what you're doing okay foo bar


1562
01:51:42,560 --> 01:51:46,880
now we're printing its value all you have to do in order to execute this code


1563
01:51:46,880 --> 01:51:51,360
is press command s and you will see the result


1564
01:51:51,360 --> 01:51:55,119
outputted here now what we did here


1565
01:51:55,119 --> 01:51:57,440
um


1566
01:51:58,000 --> 01:52:02,480
what we did here was very very key


1567
01:52:02,480 --> 01:52:06,480
feature in flutter called hot reload


1568
01:52:06,480 --> 01:52:10,800
as you saw i didn't execute my code again i didn't press like the run button


1569
01:52:10,800 --> 01:52:15,280
again i just said save now saving in flutter


1570
01:52:15,280 --> 01:52:20,400
triggers an action called hot reload hot reload in flutter is it's a whole


1571
01:52:20,400 --> 01:52:24,719
topic of its own which i'm not gonna go so much into


1572
01:52:24,719 --> 01:52:28,639
detail of but what hot reload does really is


1573
01:52:28,639 --> 01:52:33,920
it looks for changes in


1574
01:52:33,920 --> 01:52:37,440
in your code hierarchy without complicating it too much i'm just trying


1575
01:52:37,440 --> 01:52:40,800
to phrase my sentence


1576
01:52:40,800 --> 01:52:44,639
right so that it's um not too complicated for


1577
01:52:44,639 --> 01:52:47,840
this chapter it looks for changes that you made to


1578
01:52:47,840 --> 01:52:53,760
the code and executes only those changes okay


1579
01:52:53,760 --> 01:52:57,440
and in the process of executing those changes it might execute everything else


1580
01:52:57,440 --> 01:53:01,679
that is in its uh in its path and


1581
01:53:01,679 --> 01:53:06,159
by doing a save this function gets called somehow magically which i'm not


1582
01:53:06,159 --> 01:53:08,719
going to go into right now


1583
01:53:08,719 --> 01:53:14,560
which in turn then calls or invokes our function called getfullname and


1584
01:53:14,560 --> 01:53:19,520
its value will then be passed into another function called print


1585
01:53:19,520 --> 01:53:25,040
okay i hope that that made sense


1586
01:53:25,040 --> 01:53:28,400
uh and as you can see the result isn't really what we expected it just says


1587
01:53:28,400 --> 01:53:32,560
first name and that is because here we said return


1588
01:53:32,560 --> 01:53:37,119
first name and as you can see if you put first name like this inside your string


1589
01:53:37,119 --> 01:53:40,480
it becomes its own string it has nothing to do with this


1590
01:53:40,480 --> 01:53:43,599
anymore if you remove these quotation marks


1591
01:53:43,599 --> 01:53:47,199
however then it says oh first name is this


1592
01:53:47,199 --> 01:53:51,199
parameter you see it actually highlights it so


1593
01:53:51,199 --> 01:53:55,599
then if i press command s on mac or control s on linux and windows you will


1594
01:53:55,599 --> 01:53:58,480
see foo being printed to the screen


1595
01:53:58,480 --> 01:54:01,840
okay you can also say last name here and it


1596
01:54:01,840 --> 01:54:05,119
will say bar right


1597
01:54:05,119 --> 01:54:08,639
and know that no also notice that when i'm changing these things it's not


1598
01:54:08,639 --> 01:54:12,880
executing immediately automatically i'm pressing command s so just keep that in


1599
01:54:12,880 --> 01:54:15,599
mind please so


1600
01:54:17,760 --> 01:54:20,639
so that's for a function and but before we


1601
01:54:20,639 --> 01:54:27,360
move on explaining the basics of a function i want to also explain


1602
01:54:27,360 --> 01:54:30,480
a little bit about


1603
01:54:30,800 --> 01:54:34,000
string formatting and that is we said that we're going to put first name and


1604
01:54:34,000 --> 01:54:38,159
last name because this is what we did in the beginning first name plus space plus


1605
01:54:38,159 --> 01:54:41,040
last name and this wasn't so pretty because it's like doing string


1606
01:54:41,040 --> 01:54:45,840
concatenation in a very old-fashioned matter in a very old-fashioned manner


1607
01:54:45,840 --> 01:54:49,119
yeah i think i said it right the first time


1608
01:54:49,119 --> 01:54:55,920
but what you want to do here is to uh use uh garth's built-in formatting


1609
01:54:55,920 --> 01:54:59,119
capabilities and you do that by first saying that okay i want to return some


1610
01:54:59,119 --> 01:55:03,119
sort of a string and i want to have first name


1611
01:55:03,119 --> 01:55:07,040
space last name but as you saw this earlier if


1612
01:55:07,040 --> 01:55:12,719
i command s or control s it just returns those strings exactly as


1613
01:55:12,719 --> 01:55:17,119
i've written them not the parameters what you can do is just to put a dollar


1614
01:55:17,119 --> 01:55:20,000
before them and you can see their coloring now


1615
01:55:20,000 --> 01:55:22,880
changes depending on the theme that you're using or depending on the text


1616
01:55:22,880 --> 01:55:27,920
editor that you're using if you're using android studio it may not color it the


1617
01:55:27,920 --> 01:55:30,960
same way or if you're using visual studio with a different theme on a


1618
01:55:30,960 --> 01:55:34,639
different maybe platform you may not even change the color but for me at


1619
01:55:34,639 --> 01:55:38,639
least you can see that the change the colors change so as to indicate that now


1620
01:55:38,639 --> 01:55:44,480
i'm not actually returning the string exactly as you wrote


1621
01:55:44,480 --> 01:55:49,199
except on returning the parameters that are here


1622
01:55:49,199 --> 01:55:53,760
so command this and now you can see that the result is


1623
01:55:53,760 --> 01:55:57,679
full bar okay


1624
01:55:57,679 --> 01:56:03,520
so that is the basics of functions in in dart


1625
01:56:03,520 --> 01:56:07,280
before we move on from functions i also want to explain


1626
01:56:07,280 --> 01:56:10,800
quickly that um a function doesn't necessarily have


1627
01:56:10,800 --> 01:56:14,960
to return anything and that means that


1628
01:56:14,960 --> 01:56:19,520
you may have a function here that wants to just print some data to


1629
01:56:19,520 --> 01:56:24,080
uh the screen or to here to the debug console and you can just call it


1630
01:56:24,080 --> 01:56:28,960
print my name and parenthesis and


1631
01:56:28,960 --> 01:56:32,719
curly brackets and as you can see here


1632
01:56:32,719 --> 01:56:36,320
i can just write the name of the function without any


1633
01:56:36,320 --> 01:56:40,000
data type to be returned but it's a little bit of a convention that you


1634
01:56:40,000 --> 01:56:43,760
actually tell dark that this is a void function


1635
01:56:43,760 --> 01:56:48,400
meaning void is a key word as we talked about it earlier in the beginning of


1636
01:56:48,400 --> 01:56:52,159
this chapter


1637
01:56:52,159 --> 01:56:56,239
void is a key word telling dark that this is a function that doesn't return


1638
01:56:56,239 --> 01:56:59,840
anything and as you can see dart is completely fine with this


1639
01:56:59,840 --> 01:57:03,599
function being completely empty meaning that well yeah you said you're not


1640
01:57:03,599 --> 01:57:07,599
returning anything you're probably just gonna do some stuff in here so i'm not


1641
01:57:07,599 --> 01:57:11,920
gonna bother you with some errors saying oh you forgot to do something


1642
01:57:11,920 --> 01:57:16,400
but as soon as you change the return value or the return data type of your


1643
01:57:16,400 --> 01:57:22,080
function to for instance string then you'll get an error


1644
01:57:22,080 --> 01:57:26,080
saying that oh yeah the body might complete normally causing null to be


1645
01:57:26,080 --> 01:57:29,840
returned blah blah you don't have to know exactly what that means but


1646
01:57:29,840 --> 01:57:33,679
essentially what that means is you're telling dart that you're returning a


1647
01:57:33,679 --> 01:57:37,599
string but you're not returning anything it's literally


1648
01:57:37,599 --> 01:57:42,639
looking for the return keyword saying that oh you missed it so you


1649
01:57:42,639 --> 01:57:48,480
could silence that uh error by saying return an empty string


1650
01:57:48,480 --> 01:57:51,119
semicolon


1651
01:57:51,679 --> 01:57:56,080
so i think this pretty much explains the


1652
01:57:56,080 --> 01:57:59,520
basics of um


1653
01:57:59,920 --> 01:58:03,920
functions to be honest with you there's lots more to learn about


1654
01:58:03,920 --> 01:58:07,360
functions and as i said functions can also be like


1655
01:58:07,360 --> 01:58:11,280
written using this syntax and


1656
01:58:11,280 --> 01:58:16,639
this syntax is used when your function is very simple or in that


1657
01:58:16,639 --> 01:58:20,960
it doesn't need to break into different lines of code


1658
01:58:20,960 --> 01:58:27,119
by a semi-colon so a function who has a very simple logic you can just skip


1659
01:58:27,119 --> 01:58:30,800
writing these square brackets


1660
01:58:30,800 --> 01:58:36,239
no curly brackets sorry and you can just say you see i will


1661
01:58:36,239 --> 01:58:40,639
remove this put equal sign


1662
01:58:40,639 --> 01:58:45,199
greater than sign remove the closing curly bracket


1663
01:58:45,199 --> 01:58:49,599
and then you can remove the return statement and that's it


1664
01:58:49,599 --> 01:58:53,760
that is a shorthand it's a function shorthand in dart


1665
01:58:53,760 --> 01:58:58,560
and you could use it simply to simplify kind of your code some people


1666
01:58:58,560 --> 01:59:02,560
may like it some people kind of may be against it


1667
01:59:02,560 --> 01:59:06,960
just because it's um it kind of splits your


1668
01:59:06,960 --> 01:59:10,960
code into two different styles some functions are with uh curly brackets


1669
01:59:10,960 --> 01:59:15,920
some functions are with this pointer thingy and uh kind of depends on your


1670
01:59:15,920 --> 01:59:18,880
and you on you and your team to be honest


1671
01:59:18,880 --> 01:59:22,480
um i know usually from my um


1672
01:59:22,480 --> 01:59:26,000
from my experience usually we software developers like to follow


1673
01:59:26,000 --> 01:59:31,040
conventions so in one in one project


1674
01:59:31,040 --> 01:59:34,000
the developers may decide okay we're just going to go with this convention


1675
01:59:34,000 --> 01:59:38,560
and since using curly brackets


1676
01:59:38,560 --> 01:59:45,360
involves the ability to have both complicated and simple return statements


1677
01:59:45,360 --> 01:59:51,040
in a function it's actually preferred as a convention than using this syntax


1678
01:59:51,040 --> 01:59:54,880
simply because this syntax doesn't allow you to split your code into separate


1679
01:59:54,880 --> 02:00:01,679
lines of code it has to all be in one statement so if that makes any sense


1680
02:00:02,639 --> 02:00:08,239
so i think i think that's it for functions and now we've talked about


1681
02:00:08,239 --> 02:00:15,440
functions arguments return values we talked about variables constants


1682
02:00:15,440 --> 02:00:20,320
data types and keywords in dart and


1683
02:00:20,320 --> 02:00:25,599
these are such important parts of learning how to program with dark and


1684
02:00:25,599 --> 02:00:29,040
flutter that i think you need to spend some time and experiment with them so do


1685
02:00:29,040 --> 02:00:32,080
some experimentations on your own for instance take


1686
02:00:32,080 --> 02:00:35,360
not don't take just the first name and last name just take for instance


1687
02:00:35,360 --> 02:00:39,280
someone's address someone's age different play around a little bit with


1688
02:00:39,280 --> 02:00:42,639
different data types like integers different numbers have a look at the


1689
02:00:42,639 --> 02:00:46,480
link that i provided earlier which was here i'll bring it up


1690
02:00:46,480 --> 02:00:50,719
again so you can see that have a look at this link and have a look


1691
02:00:50,719 --> 02:00:55,440
at the different examples of different data types because in this in


1692
02:00:55,440 --> 02:00:59,440
in the upcoming chapters and in the uh rest of


1693
02:00:59,440 --> 02:01:03,119
this course we're going to play around with a lot of different types of data


1694
02:01:03,119 --> 02:01:05,920
types so i think it's important that you have


1695
02:01:05,920 --> 02:01:10,000
a look a little bit at the documentation as well


1696
02:01:10,000 --> 02:01:14,080
so let's leave this chapter at this point


1697
02:01:14,080 --> 02:01:20,080
and then in the next chapter we're going to talk a lot more about more advanced


1698
02:01:20,080 --> 02:01:24,320
dart programming language features so thank you for joining me for this


1699
02:01:24,320 --> 02:01:29,760
chapter and see you in the next one hello everyone and welcome to chapter 4


1700
02:01:29,760 --> 02:01:33,760
of this flutter course in the previous chapter chapter 3 we


1701
02:01:33,760 --> 02:01:38,159
talked about keywords data types constants variables and some basics of


1702
02:01:38,159 --> 02:01:42,560
functions and in this chapter we are going to


1703
02:01:42,560 --> 02:01:46,480
as you can see on the captions here we're going to focus on control


1704
02:01:46,480 --> 02:01:50,880
statements and collections now


1705
02:01:50,880 --> 02:01:54,320
um i'm assuming you're following these chapters


1706
02:01:54,320 --> 02:01:58,000
um chronologically so that you're like going


1707
02:01:58,000 --> 02:02:03,119
one by one so i'm assuming then that you have your uh dark project set up and


1708
02:02:03,119 --> 02:02:07,599
that you've got some sort of a simulator or emulator running


1709
02:02:07,599 --> 02:02:11,440
so without further ado let's have a look at


1710
02:02:11,440 --> 02:02:15,920
um i'm actually gonna bring up the captions here and then i'm


1711
02:02:15,920 --> 02:02:22,560
gonna put my face at the bottom there and bring up our project that we created


1712
02:02:22,560 --> 02:02:26,960
in the previous chapter up here so this this is running at the


1713
02:02:26,960 --> 02:02:31,520
moment so if i do a command s or control s on linux and windows


1714
02:02:31,520 --> 02:02:34,719
then as you can see here there is a run button


1715
02:02:34,719 --> 02:02:38,159
and then it's just gonna do a hot reload which in


1716
02:02:38,159 --> 02:02:42,639
turn calls this build function which we don't yet know really how it works


1717
02:02:42,639 --> 02:02:45,119
because i haven't really explained it but


1718
02:02:45,119 --> 02:02:49,119
what we did we just called a print function here and then


1719
02:02:49,119 --> 02:02:52,800
our get full name function so


1720
02:02:52,960 --> 02:02:57,199
what i'm going to do here is let's remove this code from the build


1721
02:02:57,199 --> 02:03:00,880
and let's remove everything that we wrote here as well so keep the main


1722
02:03:00,880 --> 02:03:05,119
function as you can see here and then keep your stateless widget which we're


1723
02:03:05,119 --> 02:03:09,840
going to talk about later okay so instead go and create a new function


1724
02:03:09,840 --> 02:03:13,599
that is called void test


1725
02:03:13,599 --> 02:03:16,960
all right and then in the build function just say


1726
02:03:16,960 --> 02:03:19,440
test all right


1727
02:03:19,440 --> 02:03:23,840
just like that the purpose is that in this function


1728
02:03:23,840 --> 02:03:27,360
we're going to write most of the code in this chapter so we are going to


1729
02:03:27,360 --> 02:03:32,159
basically test some code that's the purpose of this function so


1730
02:03:32,239 --> 02:03:36,639
let's talk about if and else if and l's are


1731
02:03:36,639 --> 02:03:41,119
control statements in most programming languages that allow


1732
02:03:41,119 --> 02:03:45,199
you to branch your code based on a condition


1733
02:03:45,199 --> 02:03:50,239
so if we for instance in here create a final


1734
02:03:50,239 --> 02:03:53,920
variable whose value cannot be changed if you remember from the previous


1735
02:03:53,920 --> 02:03:57,040
chapter whose value cannot be changed after it's been assigned to


1736
02:03:57,040 --> 02:04:01,599
let's say final name is foo all right


1737
02:04:01,599 --> 02:04:05,199
and end it with the same semicolon now


1738
02:04:05,199 --> 02:04:10,880
an if statement basically allows you to check the value or a condition


1739
02:04:10,880 --> 02:04:13,360
to be of a certain


1740
02:04:13,360 --> 02:04:17,440
value or to be true or false and


1741
02:04:17,440 --> 02:04:22,159
then it allows you to execute some code and then you can also


1742
02:04:22,159 --> 02:04:27,119
append an else statement to it which gets executed if the code or if that


1743
02:04:27,119 --> 02:04:30,800
condition is not met i'm going to show you how that is written


1744
02:04:30,800 --> 02:04:34,159
the syntax for an if statement is just if


1745
02:04:34,159 --> 02:04:38,400
and if is an is a keyword so you would say if


1746
02:04:38,400 --> 02:04:42,719
and then you would open and close parenthesis and then you would put curly


1747
02:04:42,719 --> 02:04:47,199
brackets like this that's the syntax of if and in the parenthesis you would put


1748
02:04:47,199 --> 02:04:52,560
your condition so i would say in this case if name and


1749
02:04:52,560 --> 02:04:56,880
i would like to for instance check if name is foo


1750
02:04:56,880 --> 02:05:00,880
now uh we haven't come to operators yet


1751
02:05:00,880 --> 02:05:04,639
we're going to talk about operators actually soon


1752
02:05:04,639 --> 02:05:10,880
but this is um as you can see here we're saying final name equal to foo this is


1753
02:05:10,880 --> 02:05:15,440
kind of like um an assignment uh operation and that is


1754
02:05:15,440 --> 02:05:18,800
an operator in dart it's called an operator


1755
02:05:18,800 --> 02:05:21,199
so there is also


1756
02:05:21,199 --> 02:05:24,000
and since this is an assignment we don't want to actually assign anything to name


1757
02:05:24,000 --> 02:05:26,719
you want to check if it's of a certain value and


1758
02:05:26,719 --> 02:05:32,000
that is with this conditional operator equal equal


1759
02:05:32,000 --> 02:05:38,960
and then you will just say okay if it's foo then for instance print


1760
02:05:38,960 --> 02:05:42,400
uh yes this is foo


1761
02:05:42,400 --> 02:05:46,560
and then a semi colon to end it however if this condition is not met you may


1762
02:05:46,560 --> 02:05:52,000
want to execute another piece of code and then you can just do else


1763
02:05:52,159 --> 02:05:55,920
like that and then this would you would just say


1764
02:05:55,920 --> 02:06:00,079
no this is not foo all right and a semicolon so i'm just


1765
02:06:00,079 --> 02:06:05,520
going to do command s and you can see the value or the string yes this is food


1766
02:06:05,520 --> 02:06:10,639
printed to the screen or to the terminal here or to the debug console


1767
02:06:10,880 --> 02:06:14,480
you can have multiple statements in here so you can have more print statements in


1768
02:06:14,480 --> 02:06:18,239
here you can just do anything you want basically in here


1769
02:06:18,239 --> 02:06:24,800
and the same goes for else now there is a possibility to write if


1770
02:06:24,800 --> 02:06:28,480
statements kind of without the curly brackets but you don't see


1771
02:06:28,480 --> 02:06:33,040
them that often and i recommend that you actually always try to as a convention


1772
02:06:33,040 --> 02:06:37,679
do with curly brackets if you can however it is possible that inside a


1773
02:06:37,679 --> 02:06:42,239
code base that you will work on with your colleagues it is decided that it's


1774
02:06:42,239 --> 02:06:48,239
okay to have if statements without curly brackets where there are very simple and


1775
02:06:48,239 --> 02:06:52,320
one-liners basically so let me show you


1776
02:06:52,320 --> 02:06:58,000
an example of that you could just say if name is foo


1777
02:06:58,000 --> 02:07:03,760
you would just say print yes this is foo and this is completely accepted as well


1778
02:07:03,760 --> 02:07:08,079
so because it's a one-liner but if you then say


1779
02:07:08,079 --> 02:07:13,280
okay i want to have another line print hello world


1780
02:07:13,280 --> 02:07:16,400
you can see it goes to the next line meaning that


1781
02:07:16,400 --> 02:07:21,360
this line right here will be executed no matter your


1782
02:07:21,360 --> 02:07:25,440
condition up there so this is completely detached from your if statement up here


1783
02:07:25,440 --> 02:07:28,320
okay and i just realized that it is quite


1784
02:07:28,320 --> 02:07:31,199
important for me to be able to show line numbers


1785
02:07:31,199 --> 02:07:35,520
and by default your editor probably has line numbers enabled i usually disable


1786
02:07:35,520 --> 02:07:39,520
line numbers when i'm working myself basically


1787
02:07:39,520 --> 02:07:43,520
but when talking about code with other people it's quite useful to have line


1788
02:07:43,520 --> 02:07:48,880
numbers because i can then tell you oh look at line nine or look at my line ten


1789
02:07:48,880 --> 02:07:52,960
okay so that's the basic of if and else


1790
02:07:52,960 --> 02:07:58,159
now you can also have if right after else so


1791
02:07:58,159 --> 02:08:04,639
an example of that is for instance to say if name is fu


1792
02:08:05,280 --> 02:08:12,400
and then you do some code all right you say print yes it is foo


1793
02:08:12,400 --> 02:08:15,280
not food after the curly bracket then you would


1794
02:08:15,280 --> 02:08:18,639
say else and then you can then say another if


1795
02:08:18,639 --> 02:08:21,119
else if all right


1796
02:08:21,119 --> 02:08:25,360
and then after if comes the parenthesis and a curly bracket if you


1797
02:08:25,360 --> 02:08:29,599
remember from the if before it is the exact same syntax as it as it


1798
02:08:29,599 --> 02:08:32,079
is here so there's pretty much no difference you


1799
02:08:32,079 --> 02:08:35,679
can you see if and then if


1800
02:08:35,679 --> 02:08:39,679
and then you put your condition in here you would just say if name


1801
02:08:39,679 --> 02:08:44,960
and then you may just want to say is not and that's another operator


1802
02:08:44,960 --> 02:08:50,400
it's uh basically is a not operator so it's checking to make sure that this


1803
02:08:50,400 --> 02:08:53,360
name is not of the value that you provide to the


1804
02:08:53,360 --> 02:08:56,079
right hand side


1805
02:08:56,639 --> 02:09:00,159
and then you can say bar and print


1806
02:09:00,159 --> 02:09:05,280
this value is not bar else


1807
02:09:05,280 --> 02:09:10,320
and then you can wrap it up and you can say print i don't


1808
02:09:10,320 --> 02:09:13,840
know what this is now i i'm so glad i actually


1809
02:09:13,840 --> 02:09:18,639
accidentally ran into this issue as you can see now the editor is kind of


1810
02:09:18,639 --> 02:09:22,400
going crazy and darts not understanding what this statement is


1811
02:09:22,400 --> 02:09:26,079
and as we talked about it previously um


1812
02:09:26,079 --> 02:09:30,719
strings in dart are preferred to have to be kind of like created with single


1813
02:09:30,719 --> 02:09:34,639
quotes however if your string in itself contains a


1814
02:09:34,639 --> 02:09:39,040
single code for instance in this case the word don't


1815
02:09:39,040 --> 02:09:44,960
contains a single code then dart kind of gets confused like okay does the string


1816
02:09:44,960 --> 02:09:49,520
in here you can see it's up until this point is it's a green so


1817
02:09:49,520 --> 02:09:52,960
it's thing it's thinking that oh the string ends here but what is all of this


1818
02:09:52,960 --> 02:09:57,440
then that follows if you have that problem


1819
02:09:57,440 --> 02:10:01,119
there are two ways of fixing that either you


1820
02:10:01,119 --> 02:10:05,360
scape your single code and that is a


1821
02:10:05,360 --> 02:10:10,960
that is a software kind of development lingo escape kind of if you hear that it


1822
02:10:10,960 --> 02:10:16,000
pretty much just means that you're um you are


1823
02:10:16,000 --> 02:10:19,520
kind of wrapping it in a way


1824
02:10:19,520 --> 02:10:23,840
that dart understands that you don't mean it literally you don't mean that


1825
02:10:23,840 --> 02:10:28,159
i want to end my string here except that this needs to be escaped and put in the


1826
02:10:28,159 --> 02:10:32,400
string as its own value basically it's kind of difficult to explain but i think


1827
02:10:32,400 --> 02:10:36,320
you know what i mean um so that's one way of doing it it's a little bit dirty


1828
02:10:36,320 --> 02:10:39,280
so in case you run into this issue it's


1829
02:10:39,280 --> 02:10:44,079
best to actually wrap your entire string in double quotes and this way


1830
02:10:44,079 --> 02:10:48,239
then dart understands that whatever comes in here is okay like a single code


1831
02:10:48,239 --> 02:10:52,400
is completely okay unless you actually want to have


1832
02:10:52,400 --> 02:10:57,280
a double co double uh double quotes in your string that is


1833
02:10:57,280 --> 02:11:00,239
enclosed with double quotes again so you'll see if i put a double quote here


1834
02:11:00,239 --> 02:11:05,679
then dart goes crazy so you can escape it with a backslash like that


1835
02:11:05,679 --> 02:11:09,920
so if you have single codes and double quotes in your string then you will have


1836
02:11:09,920 --> 02:11:13,199
to kind of pick a convention either you enclose the entire string in single


1837
02:11:13,199 --> 02:11:16,639
quotes and scape your single quotes


1838
02:11:16,639 --> 02:11:21,280
inside that string and let the double quotes live or you enclose your entire


1839
02:11:21,280 --> 02:11:24,719
string in double quotes and then you will


1840
02:11:24,719 --> 02:11:31,360
escape your double quotes in the string i hope i hope that makes sense


1841
02:11:31,360 --> 02:11:34,480
so that is


1842
02:11:34,480 --> 02:11:40,320
um if and else in um in a nutshell but before i move on i kind of want to


1843
02:11:40,320 --> 02:11:44,239
explain an important concept here in that when dart executes this code it


1844
02:11:44,239 --> 02:11:48,320
kind of goes by line by line so it starts with line seven the execution of


1845
02:11:48,320 --> 02:11:51,199
this test function and then it come comes here and


1846
02:11:51,199 --> 02:11:54,480
it says okay name is foo all right um


1847
02:11:54,480 --> 02:11:58,400
and it's actually saying that we prefer const so let me change that to const


1848
02:11:58,400 --> 02:12:01,280
okay so um


1849
02:12:01,280 --> 02:12:04,880
and it says okay if name is foo


1850
02:12:04,880 --> 02:12:08,880
all right then it comes over here but let's just change that to foo with


1851
02:12:08,880 --> 02:12:13,040
triple o um actually


1852
02:12:13,040 --> 02:12:18,320
yeah let's no let's not do that let's keep it as foo so it says if foo is if


1853
02:12:18,320 --> 02:12:20,880
name is food then it says yeah that's true


1854
02:12:20,880 --> 02:12:25,760
and then it goes here however as you can see the line number 11


1855
02:12:25,760 --> 02:12:28,800
also says if name


1856
02:12:28,800 --> 02:12:33,440
is not bar then it should execute this as well


1857
02:12:33,440 --> 02:12:37,199
and and you can see that foo is not bar so


1858
02:12:37,199 --> 02:12:41,679
this condition is also true however this this this will never be


1859
02:12:41,679 --> 02:12:46,639
executed and that is because when dart goes inside these curly


1860
02:12:46,639 --> 02:12:50,639
brackets then it says okay i did what i had to do i did my print statement the


1861
02:12:50,639 --> 02:12:54,960
rest i ignore so if an if statement is kind of like a


1862
02:12:54,960 --> 02:12:58,800
is a it puts a stop when it when it falls


1863
02:12:58,800 --> 02:13:03,840
into one of these if statements it kind of says okay i did my job in this entire


1864
02:13:03,840 --> 02:13:09,040
if else block then i will execute the code after that so if i clear the


1865
02:13:09,040 --> 02:13:12,800
console here and press command s you can see it only says yes it is foo it


1866
02:13:12,800 --> 02:13:17,440
doesn't come here so however if you change this


1867
02:13:17,440 --> 02:13:22,000
um condition so that the dart compiler or


1868
02:13:22,000 --> 02:13:25,840
basically the execution of the program doesn't fall into line number 10 it will


1869
02:13:25,840 --> 02:13:30,320
eventually fall to line number 12. so you can see it says this value is not


1870
02:13:30,320 --> 02:13:34,239
bar so when you're writing your if statement and else statements just be


1871
02:13:34,239 --> 02:13:38,239
careful with that just know that it's kind of like a as soon as the code jumps


1872
02:13:38,239 --> 02:13:42,320
into one of those branches it doesn't go to the rest of the branches and checks


1873
02:13:42,320 --> 02:13:46,639
them basically all right


1874
02:13:47,679 --> 02:13:52,880
okay that was for if and else


1875
02:13:53,520 --> 02:13:57,119
now let me check that in my notes that we've talked


1876
02:13:57,119 --> 02:14:04,239
about that what we need to do now is to talk about


1877
02:14:05,280 --> 02:14:09,599
operators operators


1878
02:14:09,760 --> 02:14:12,239
they there are three different types of


1879
02:14:12,239 --> 02:14:19,360
operators there are prefix operators infix operators and suffix operators


1880
02:14:19,360 --> 02:14:21,599
and


1881
02:14:21,840 --> 02:14:27,360
and i will explain them to you i mean how they work um


1882
02:14:27,360 --> 02:14:31,679
i think to explain operators probably it's best that we talk about numbers so


1883
02:14:31,679 --> 02:14:35,040
let's go in this test function and delete everything that we we've written


1884
02:14:35,040 --> 02:14:42,000
here and let let me just say final h is 20. all right so


1885
02:14:42,000 --> 02:14:46,239
um now we've created a variable whose value


1886
02:14:46,239 --> 02:14:50,079
cannot be changed after spin assigned to because we created as a final a variable


1887
02:14:50,079 --> 02:14:55,360
whose value is 20. all right now if you want to calculate half of this value how


1888
02:14:55,360 --> 02:14:59,760
would you do that then well there is an operator for that and that is a division


1889
02:14:59,760 --> 02:15:04,079
operator so you would just say for instance final


1890
02:15:04,079 --> 02:15:08,000
half of age as you can see we're using camel case as i explained in the


1891
02:15:08,000 --> 02:15:12,239
previous chapter an easy way to do camel case is to say


1892
02:15:12,239 --> 02:15:18,400
half of it just writing in english change the first letter of


1893
02:15:18,480 --> 02:15:22,480
of like this here change the first letter of all the words except for the


1894
02:15:22,480 --> 02:15:25,679
first word to uppercase and then remove all the spaces that's camelcase


1895
02:15:25,679 --> 02:15:31,920
basically so half of age is age and then there is a great operator in a dart


1896
02:15:31,920 --> 02:15:35,840
called a division operator and then you would say


1897
02:15:35,840 --> 02:15:39,360
all right and then you could just say print half


1898
02:15:39,360 --> 02:15:44,960
of h so command s and that says ten all right


1899
02:15:44,960 --> 02:15:49,840
so that's the division operator and then you will have


1900
02:15:49,840 --> 02:15:54,400
let's say final double the h


1901
02:15:54,719 --> 02:15:58,400
and then we will say h multiplied by two it's kind of like a


1902
02:15:58,400 --> 02:16:03,520
star that is an operator and you can see


1903
02:16:03,520 --> 02:16:09,440
these both operators this one the division and the multiplication uh


1904
02:16:09,440 --> 02:16:12,639
multiplication it's a little bit difficult to say


1905
02:16:12,639 --> 02:16:18,079
operators are in fix operators and an infix operator is an operator that has


1906
02:16:18,079 --> 02:16:21,520
two parameters one to its right and one to its left i don't know how you can


1907
02:16:21,520 --> 02:16:25,199
actually yeah one two one to each side i don't


1908
02:16:25,199 --> 02:16:29,520
know if my video is like mirrored so if my right hand is actually right hand on


1909
02:16:29,520 --> 02:16:34,639
your side as well so i don't know yes it is probably


1910
02:16:34,639 --> 02:16:36,880
so


1911
02:16:37,599 --> 02:16:43,599
these are infix operators when they have two values one to each side


1912
02:16:43,599 --> 02:16:48,880
however there are also prefix operators


1913
02:16:48,880 --> 02:16:51,840
and an example of that is for instance if i


1914
02:16:51,840 --> 02:16:56,080
said final h minus 1


1915
02:16:56,080 --> 02:16:58,960
and actually we


1916
02:16:59,599 --> 02:17:05,679
change this to var i'll explain soon why and if we said minus minus h


1917
02:17:05,679 --> 02:17:11,120
now this is an example of a prefix operator and a prefix operator is an


1918
02:17:11,120 --> 02:17:17,679
operator that it comes before whatever it has to do its work on and in


1919
02:17:17,679 --> 02:17:22,319
this case this minus minus operator what it does is that it takes the value that


1920
02:17:22,319 --> 02:17:25,280
comes after it it


1921
02:17:25,280 --> 02:17:31,519
decreases that value by one and then it returns its result back to


1922
02:17:31,519 --> 02:17:37,359
the left-hand side so in this case the the interpreter comes here and says okay


1923
02:17:37,359 --> 02:17:40,639
you wanna calculate something okay it's equal to


1924
02:17:40,639 --> 02:17:46,160
oh a prefix operator that takes a variable here and it says okay what is


1925
02:17:46,160 --> 02:17:50,800
age is 20 minus 1 is 19. puts it in here and it


1926
02:17:50,800 --> 02:17:55,599
also puts that minus 1 sorry puts that 19 in an h so


1927
02:17:55,599 --> 02:18:00,719
i think so at least so if we say print age and print age minus one now both


1928
02:18:00,719 --> 02:18:05,200
should kind of be 19 and you can see it says twice you see 2


1929
02:18:05,200 --> 02:18:11,359
19. so that kind of means it's uh twice so flutter has this great ability not to


1930
02:18:11,359 --> 02:18:16,399
duplicate basically log statements or print statements


1931
02:18:16,399 --> 02:18:19,120
so we have i mean there are some really


1932
02:18:19,120 --> 02:18:25,439
great operators in dart and that is the plus operator operator and then you have


1933
02:18:25,439 --> 02:18:30,559
the minus division multiplication and then you have the logical kind of like


1934
02:18:30,559 --> 02:18:34,719
operators to check if a value from the left is equal to the value to the right


1935
02:18:34,719 --> 02:18:37,439
so these are kind of like the basics of the


1936
02:18:37,439 --> 02:18:43,359
operators in um dart so you don't have to know so much more about these for now


1937
02:18:43,359 --> 02:18:45,760
i would say um


1938
02:18:45,760 --> 02:18:50,319
you can get really far with these and a lot of these operators actually work not


1939
02:18:50,319 --> 02:18:55,679
only on numbers but also on strings so and for instance if you this is one of


1940
02:18:55,679 --> 02:19:00,000
the cool features of dart which i absolutely love i think it was just such


1941
02:19:00,000 --> 02:19:03,840
a great idea for them to implement this like


1942
02:19:03,840 --> 02:19:07,439
uh one thing i mean if you're not coming from a software development background


1943
02:19:07,439 --> 02:19:10,639
um you may not know this but if you're coming for instance from design


1944
02:19:10,639 --> 02:19:13,519
background also you would notice that sometimes when you're creating designs


1945
02:19:13,519 --> 02:19:16,000
or any any screen and you want to kind of


1946
02:19:16,000 --> 02:19:20,719
like show that design to someone like a product owner you want to actually


1947
02:19:20,719 --> 02:19:25,920
populate the text inside your design with some lorem ipsum


1948
02:19:25,920 --> 02:19:29,840
and lower mibsum is basically has a huge history of where it comes from but it's


1949
02:19:29,840 --> 02:19:33,599
usually some sort of a dummy text kind of that you want to place inside your


1950
02:19:33,599 --> 02:19:36,719
design so that you can just like display and


1951
02:19:36,719 --> 02:19:39,040
show it to someone and


1952
02:19:39,040 --> 02:19:42,399
a lot of developers like in many languages when they want to display some


1953
02:19:42,399 --> 02:19:45,760
text and they don't know what to say like we're just testing stuff i just


1954
02:19:45,760 --> 02:19:49,520
want to display some text they go and grab lorem ipsum and then put it in


1955
02:19:49,520 --> 02:19:53,520
their code but dart has gone to the next step and


1956
02:19:53,520 --> 02:19:57,520
said okay we don't need that so what you can do you can say for instance name is


1957
02:19:57,520 --> 02:20:01,359
foo that's a string name but you can say


1958
02:20:01,359 --> 02:20:07,359
name times 20 is name times 20. you can literally say


1959
02:20:07,359 --> 02:20:11,200
multiply a string by 20 and what that does is that it


1960
02:20:11,200 --> 02:20:15,120
says foo 20 times so if i say print


1961
02:20:15,120 --> 02:20:18,640
name times 20 you can see it's


1962
02:20:18,640 --> 02:20:22,800
20 times so it's a great feature you can say foo bar


1963
02:20:22,800 --> 02:20:26,479
pass and then just say times 100


1964
02:20:26,479 --> 02:20:31,280
and yeah it just that's it copies it for you 100 times in


1965
02:20:31,280 --> 02:20:36,080
names time 100 for instance so


1966
02:20:36,160 --> 02:20:41,280
so that is a um that is


1967
02:20:41,280 --> 02:20:47,439
shortly said that is the basics of operators in dart okay


1968
02:20:47,439 --> 02:20:52,080
i'm gonna delete that code i'm gonna


1969
02:20:52,080 --> 02:20:56,080
mark in my notes that we've talked about that


1970
02:20:56,840 --> 02:21:01,280
now i'm just gonna quickly also mention


1971
02:21:01,280 --> 02:21:05,359
that um


1972
02:21:05,439 --> 02:21:10,399
we can also create custom operators to be honest with you and


1973
02:21:10,399 --> 02:21:16,399
i don't think it is completely all right right now to talk about custom


1974
02:21:16,399 --> 02:21:20,080
operators i think it's kind of like a topic to talk about later so i actually


1975
02:21:20,080 --> 02:21:23,840
just moved it in my notes that we don't need to talk about it right now


1976
02:21:23,840 --> 02:21:28,160
because we have to know about a little bit about a little bit about classes and


1977
02:21:28,160 --> 02:21:31,840
objects so that we can after we've created our own class then we can create


1978
02:21:31,840 --> 02:21:35,680
custom operators as well so i don't think it's completely


1979
02:21:35,680 --> 02:21:39,040
appropriate to talk about right now but just know that in the future you can


1980
02:21:39,040 --> 02:21:43,520
also create your own operators and then like or you can also override like


1981
02:21:43,520 --> 02:21:46,800
different operators and how they work with different objects so it's it's


1982
02:21:46,800 --> 02:21:50,080
really fun um


1983
02:21:50,080 --> 02:21:55,760
but that's that's that let's just let's just leave operators to that for now


1984
02:21:55,760 --> 02:22:01,120
now the next topic that i wanted to talk about is lists


1985
02:22:01,359 --> 02:22:05,600
and a list in dart is


1986
02:22:05,600 --> 02:22:09,680
a series of things that are


1987
02:22:09,680 --> 02:22:15,120
similar to each other and they are placed inside


1988
02:22:15,120 --> 02:22:18,640
a list as you would have for instance a piece of paper and you could write your


1989
02:22:18,640 --> 02:22:22,479
shopping list or like a christmas shopping list or whatever


1990
02:22:22,479 --> 02:22:29,040
and it's numbered so um these are called lists in dart


1991
02:22:29,040 --> 02:22:33,439
so for instance if you say foo


1992
02:22:33,439 --> 02:22:38,479
and then bar and then bass as you can see dark


1993
02:22:38,479 --> 02:22:42,080
doesn't like this syntax at the moment it says okay what are these like what is


1994
02:22:42,080 --> 02:22:44,319
this uh uh


1995
02:22:44,319 --> 02:22:48,399
comma here the way to tell darth that this is a


1996
02:22:48,399 --> 02:22:52,319
list of things that are like in place one two three


1997
02:22:52,319 --> 02:22:59,280
is by placing them inside uh square brackets and then a semicolon of course


1998
02:22:59,280 --> 02:23:03,479
now um


1999
02:23:04,160 --> 02:23:08,479
as i've talked about it before just just now actually lists have


2000
02:23:08,479 --> 02:23:14,240
indexes in that they all have their own place placement inside the list


2001
02:23:14,240 --> 02:23:18,240
and all these objects as we call them they have their placements inside the


2002
02:23:18,240 --> 02:23:23,439
list and you may think that object number one is foo and then


2003
02:23:23,439 --> 02:23:28,880
object number two is bar and now number three is bas and i kind of correct but


2004
02:23:28,880 --> 02:23:33,359
index says in i mean all the programming language that


2005
02:23:33,359 --> 02:23:39,439
i've worked with c plus c rust dart swift


2006
02:23:39,439 --> 02:23:44,080
javascript they pretty much all start at the index


2007
02:23:44,080 --> 02:23:48,080
of zero and that is so important to understand because like


2008
02:23:48,080 --> 02:23:52,640
the placement of this object called foo inside this


2009
02:23:52,640 --> 02:23:56,880
list is not one it's actually it's index is


2010
02:23:56,880 --> 02:24:00,880
zero and that is why lists are called zero


2011
02:24:00,880 --> 02:24:06,240
based and their indexes are called zero based indexes so you've got to be


2012
02:24:06,240 --> 02:24:10,000
careful with that and we're going to talk about indexes soon actually


2013
02:24:10,000 --> 02:24:14,240
so let's just say final names is that now if i want to


2014
02:24:14,240 --> 02:24:17,680
extract foo from here i'm just going to say


2015
02:24:17,680 --> 02:24:23,040
final foo is names at the index of zero right i'm just


2016
02:24:23,040 --> 02:24:27,680
going to print it i'm just going to say printfu and you'll see food printed here


2017
02:24:27,680 --> 02:24:31,280
now if i say i want to get past then i'm going to say


2018
02:24:31,280 --> 02:24:34,880
print sorry index of three


2019
02:24:34,880 --> 02:24:38,240
and you'll see oh sorry


2020
02:24:38,240 --> 02:24:43,840
index of two because it's the third item but since indexes are zero base then


2021
02:24:43,840 --> 02:24:48,479
it's in excel so i made the mistake myself so command s and you'll get bass


2022
02:24:48,479 --> 02:24:51,840
and i actually want to go back to this three


2023
02:24:51,840 --> 02:24:55,600
and then command s so you can see what happened here you'll see you you'll get


2024
02:24:55,600 --> 02:25:00,240
something called a range error which is an exception


2025
02:25:00,240 --> 02:25:06,160
an exception in dart and many other programming languages is when things go


2026
02:25:06,160 --> 02:25:09,040
wrong so that the language doesn't really know


2027
02:25:09,040 --> 02:25:12,399
anymore what you mean and in this case you can see this


2028
02:25:12,399 --> 02:25:17,280
through an exception at the language level or at the library's level where it


2029
02:25:17,280 --> 02:25:21,120
says there are no four items in this array or


2030
02:25:21,120 --> 02:25:26,720
in this list because the index of three indicates four items


2031
02:25:26,720 --> 02:25:30,880
item number one in the list has the index of zero item number two has the


2032
02:25:30,880 --> 02:25:34,240
index sub one item number three has the index of


2033
02:25:34,240 --> 02:25:38,399
two and item number four has the index of


2034
02:25:38,399 --> 02:25:42,080
three and there are only three objects in this


2035
02:25:42,080 --> 02:25:47,439
array or in this list so zero index zero one two


2036
02:25:47,439 --> 02:25:50,880
so that's it and index of number three is


2037
02:25:50,880 --> 02:25:55,680
non-existent and that is why we're getting this invalid value not in


2038
02:25:55,680 --> 02:26:00,080
inclusive range zero to two so


2039
02:26:00,080 --> 02:26:03,760
that's how you access items inside a list


2040
02:26:03,760 --> 02:26:08,240
and this is how you actually create a list okay so you say list of items which


2041
02:26:08,240 --> 02:26:12,479
is full bar bas so you can also there are some convenient


2042
02:26:12,479 --> 02:26:16,560
um properties on lists that you can for


2043
02:26:16,560 --> 02:26:19,120
instance say final


2044
02:26:19,120 --> 02:26:22,399
length so if you want to know how many items are


2045
02:26:22,399 --> 02:26:27,040
in this list you can also say names


2046
02:26:27,040 --> 02:26:30,160
dot and then you would say linked


2047
02:26:30,160 --> 02:26:33,920
we're going to talk a little bit about that now as well because i think it's so


2048
02:26:33,920 --> 02:26:37,520
important to understand what that is


2049
02:26:37,680 --> 02:26:42,000
dots in dart and in many other programming language is a way to drill


2050
02:26:42,000 --> 02:26:46,080
in to something to extract something else from


2051
02:26:46,080 --> 02:26:50,800
it and in this case names is a list and


2052
02:26:50,800 --> 02:26:54,000
all lists in dart have


2053
02:26:54,000 --> 02:26:59,359
something called properties length is the property of


2054
02:26:59,359 --> 02:27:06,479
the list data type in dart and that means every list in dart has a


2055
02:27:06,479 --> 02:27:10,479
property called link that is automatically calculated for you you


2056
02:27:10,479 --> 02:27:16,720
don't have to do anything as you enter values in this list this length is gonna


2057
02:27:16,720 --> 02:27:21,280
then return the right value to you so i'm gonna i'm just gonna talk about that


2058
02:27:21,280 --> 02:27:24,319
a little bit more so i'm just gonna say print named length


2059
02:27:24,319 --> 02:27:29,439
it's gonna say you'll see here let me scroll a little bit it'll say


2060
02:27:29,439 --> 02:27:35,040
three three items in this array i'm gonna change the names list to var


2061
02:27:35,040 --> 02:27:38,960
so that we can actually um


2062
02:27:38,960 --> 02:27:44,479
change its contents and mutate it like i just wanna add a new name to this


2063
02:27:44,479 --> 02:27:48,960
names and i'll just say add is a function as you can see because it


2064
02:27:48,960 --> 02:27:52,960
has parentheses right after it so and i will say


2065
02:27:52,960 --> 02:27:56,720
um my name and then semicolon to end the


2066
02:27:56,720 --> 02:28:01,920
statement now if i say print names length right after the statement


2067
02:28:01,920 --> 02:28:05,920
you guessed it oh i can see actually my um


2068
02:28:05,920 --> 02:28:10,319
you may not see all the print statements because this text is right there so


2069
02:28:10,319 --> 02:28:14,240
let me resize my visual studio code a little bit so you can see things a


2070
02:28:14,240 --> 02:28:18,479
little bit better sorry about that so


2071
02:28:18,479 --> 02:28:24,080
now we have names length here and you can see the second time around it said


2072
02:28:24,080 --> 02:28:26,399
four okay


2073
02:28:26,399 --> 02:28:29,600
so when you say dot after


2074
02:28:29,600 --> 02:28:35,439
the name of a of a variable and that means it can be a constant a variable or


2075
02:28:35,439 --> 02:28:40,560
a final variable after you put dot after its name you're accessing


2076
02:28:40,560 --> 02:28:45,200
different properties or different functions inside that thing okay so it's


2077
02:28:45,200 --> 02:28:49,680
kind of like an accessor it allows you to drill down inside an object and grab


2078
02:28:49,680 --> 02:28:55,439
things out of it or maybe make that object do something for you okay


2079
02:28:55,439 --> 02:28:59,280
so i think i think that's good enough to be


2080
02:28:59,280 --> 02:29:03,040
honest with you about lists i don't want to go too much into details and scare


2081
02:29:03,040 --> 02:29:08,479
people about like all the different things you can do with lists and but


2082
02:29:08,479 --> 02:29:12,960
there there is great documentation on dart's own website all you have to do is


2083
02:29:12,960 --> 02:29:17,840
just to google or duckduckgo or whatever you want to use bing


2084
02:29:17,840 --> 02:29:20,319
your your way through and just search for


2085
02:29:20,319 --> 02:29:24,720
dart arrays documentation or just dart arrays and then you will find lots of


2086
02:29:24,720 --> 02:29:28,319
information about it or sorry dark lists because in dart


2087
02:29:28,319 --> 02:29:31,680
they're actually called lists in some other programming languages they're


2088
02:29:31,680 --> 02:29:35,120
called arrays but those names can be used interchangeably


2089
02:29:35,120 --> 02:29:38,479
to be honest with you lists and arrays are kind of like yeah almost the same


2090
02:29:38,479 --> 02:29:40,960
thing so


2091
02:29:42,319 --> 02:29:47,920
all right um that was lists in dart i'm gonna take it


2092
02:29:47,920 --> 02:29:50,720
in my notes so that we know we've talked about


2093
02:29:50,720 --> 02:29:54,640
it the next topic that i wanted to talk


2094
02:29:54,640 --> 02:29:57,600
about in this video


2095
02:29:57,600 --> 02:30:01,439
are things called sets


2096
02:30:02,000 --> 02:30:06,479
all right and as you can see in the caption i've


2097
02:30:06,479 --> 02:30:10,240
written here is a list of unique things whereas


2098
02:30:10,240 --> 02:30:20,240
lists were lists of homogeneous things sets our list of unique things so


2099
02:30:20,960 --> 02:30:26,160
i think the best way actually to explain sets is just to jump right into it so


2100
02:30:26,160 --> 02:30:30,560
the syntax for a set is with a curly bracket and


2101
02:30:30,560 --> 02:30:34,479
actually i think i think it is


2102
02:30:34,560 --> 02:30:38,720
yeah i think so so let's say final


2103
02:30:38,720 --> 02:30:42,800
uh names and i'm just gonna say curly bracket foo


2104
02:30:42,800 --> 02:30:48,319
and then end that okay just like that now if i type names here


2105
02:30:48,319 --> 02:30:51,760
you will see that the suggestion provided here or the information


2106
02:30:51,760 --> 02:30:56,880
provided by visual studio code says names is a set of string


2107
02:30:56,880 --> 02:30:59,840
we talked about this in the previous chapter that


2108
02:30:59,840 --> 02:31:05,040
when i say final names or final something name for instance is


2109
02:31:05,040 --> 02:31:08,640
foo i'm kind of telling dart to create


2110
02:31:08,640 --> 02:31:11,920
a variable whose


2111
02:31:11,920 --> 02:31:16,399
reference name is name and its value is fu and dart automatically understand


2112
02:31:16,399 --> 02:31:23,040
that the data type of this value is string because its data is


2113
02:31:23,040 --> 02:31:26,800
string so you don't have to say final string name


2114
02:31:26,800 --> 02:31:31,200
although you could do that but let's change this to const as well as


2115
02:31:31,200 --> 02:31:34,640
and you don't have to actually say this is a


2116
02:31:34,640 --> 02:31:38,399
string because dart understands it automatically so you just remove the


2117
02:31:38,399 --> 02:31:42,000
data type if that's what you want to do which is what i actually prefer to do


2118
02:31:42,000 --> 02:31:46,240
instead of being too verbose unless you have a really good reason to


2119
02:31:46,240 --> 02:31:51,120
provide the data type anyways let's go back to sets so


2120
02:31:51,120 --> 02:31:54,160
we were here


2121
02:31:54,160 --> 02:31:58,240
means and that's and in the same way that we created a string and then dart


2122
02:31:58,240 --> 02:32:02,640
automatically understood the data type by putting uh square brac sorry curly


2123
02:32:02,640 --> 02:32:06,720
brackets here or curly braces here and putting some data inside that dart


2124
02:32:06,720 --> 02:32:11,439
automatically understand okay this is a set of some stuff in here and this stuff


2125
02:32:11,439 --> 02:32:16,720
for now just looks like a string so if i say foo bar


2126
02:32:16,720 --> 02:32:20,319
as um


2127
02:32:20,319 --> 02:32:24,880
art says okay this is fine but if i go in here and i say foo again you can see


2128
02:32:24,880 --> 02:32:28,960
i automatically get then an error message say saying two elements in a


2129
02:32:28,960 --> 02:32:34,000
constant so literally cannot be equal because it understands that this foo it


2130
02:32:34,000 --> 02:32:38,040
has already repeated there


2131
02:32:38,720 --> 02:32:43,680
okay so let's remove foo from here and let's do an experiment


2132
02:32:43,680 --> 02:32:48,080
let's change this names to var so that we can actually change its con its


2133
02:32:48,080 --> 02:32:51,280
contents then go to name and add to the next line


2134
02:32:51,280 --> 02:32:55,439
and say names if i can spell and say add


2135
02:32:55,439 --> 02:33:01,200
and then say foo again and then say names add bar and then set


2136
02:33:01,200 --> 02:33:06,439
add bas or sorry means advanced


2137
02:33:06,560 --> 02:33:11,840
and then we'll say print names okay and i'm gonna clear the logs with this


2138
02:33:11,840 --> 02:33:16,880
button right here and then i'm gonna press command s


2139
02:33:16,880 --> 02:33:20,800
and you can see that the set is still full bar bass nothing changed really


2140
02:33:20,800 --> 02:33:24,160
there that is one of the greatest properties


2141
02:33:24,160 --> 02:33:26,960
of lists


2142
02:33:26,960 --> 02:33:31,520
of um sets in dart and in pretty much every


2143
02:33:31,520 --> 02:33:35,359
other programming language that supports sets and that's


2144
02:33:35,359 --> 02:33:42,640
sets only ensure always that their data is not duplicated and


2145
02:33:42,640 --> 02:33:45,840
this is i mean there's lots of magic happening in the background that i


2146
02:33:45,840 --> 02:33:49,920
haven't really talked about in i mean for instance like the question that you


2147
02:33:49,920 --> 02:33:55,040
may ask how does dart know foo is the same as foo does it compare


2148
02:33:55,040 --> 02:33:59,439
them yes it kind of does actually um


2149
02:33:59,439 --> 02:34:04,479
it's internally doing a comparison between these things but we never told


2150
02:34:04,479 --> 02:34:09,120
it how that comparison should work and that is because


2151
02:34:09,120 --> 02:34:14,800
if you remember from operators when we talked about it the string


2152
02:34:14,960 --> 02:34:19,520
now we haven't talked about classes well i'm just going to say strings in dart


2153
02:34:19,520 --> 02:34:24,240
already know how they should be compared with other strings


2154
02:34:24,240 --> 02:34:27,280
okay so


2155
02:34:27,280 --> 02:34:30,800
they they kind of have this logic of hash


2156
02:34:30,800 --> 02:34:35,040
codes and comparison operators that they know exactly like okay


2157
02:34:35,040 --> 02:34:40,960
given this string am i the same as that like given sorry given what i am


2158
02:34:40,960 --> 02:34:45,040
and this new thing that you're providing me like i'm foo and you're saying foo am


2159
02:34:45,040 --> 02:34:48,880
i the same as foo and then it says yes or no so


2160
02:34:48,880 --> 02:34:54,160
that is what sets are doing internally but we don't actually see that so


2161
02:34:54,160 --> 02:34:58,800
um just know for now that sets in dart


2162
02:34:58,800 --> 02:35:04,399
allow you to create unique lists of things okay and then


2163
02:35:04,399 --> 02:35:09,359
you may also be a little bit like tempted to go and say okay i have things


2164
02:35:09,359 --> 02:35:16,560
here let's say const things is equal to foo and then we say one


2165
02:35:16,560 --> 02:35:19,600
and this will also work and that is because


2166
02:35:19,600 --> 02:35:23,280
dark has the concept of object as well you can


2167
02:35:23,280 --> 02:35:28,399
see you'll see things and it'll say oh now it's a set of object


2168
02:35:28,399 --> 02:35:34,000
we haven't talked about objects yet and if i look at my notes i can see that


2169
02:35:34,000 --> 02:35:36,800
we're going to talk about objects in chapter six


2170
02:35:36,800 --> 02:35:41,840
and we're right now in chapter four so we haven't really


2171
02:35:41,840 --> 02:35:44,319
gotten to that point to talk about objects


2172
02:35:44,319 --> 02:35:48,399
and i don't want to really scare you about objects and what they actually are


2173
02:35:48,399 --> 02:35:54,560
but just know that there is a hierarchy of data types so


2174
02:35:54,560 --> 02:36:00,640
you have object and then you have data types that kind of derive their


2175
02:36:00,640 --> 02:36:05,200
functionality from objects so here sits object and then here's its


2176
02:36:05,200 --> 02:36:09,439
string integer double etc and then you have sets and


2177
02:36:09,439 --> 02:36:13,040
blah blah blah now when you're here when you were first


2178
02:36:13,040 --> 02:36:18,960
here and you said i have foo barbaros all strings then dart was like okay


2179
02:36:18,960 --> 02:36:21,680
this is a set of strings but then


2180
02:36:21,680 --> 02:36:26,160
you said oh i have a string and i have an integer which is a number


2181
02:36:26,160 --> 02:36:29,439
now dart was like oops i have i can't i mean


2182
02:36:29,439 --> 02:36:33,200
i don't really i can't say this is a list of strings and integers that's not


2183
02:36:33,200 --> 02:36:37,600
possible in there so it says i'm going to take the common denominator type that


2184
02:36:37,600 --> 02:36:43,200
sits above them as their parent to specify what these things are okay


2185
02:36:43,200 --> 02:36:47,920
and that is kind of like the same thing that we do in real life in that if i


2186
02:36:47,920 --> 02:36:54,720
give you for instance um uh two candies like a twix bar then you say


2187
02:36:54,720 --> 02:36:58,640
then you would say this is a twix bar that's one thing


2188
02:36:58,640 --> 02:37:03,920
if i give you 10 twix bars then you will say a lot of twix bars or 10 twix bars


2189
02:37:03,920 --> 02:37:09,600
if i just give you a bunch of twix bars oh that's a bunch of twix bars but if i


2190
02:37:09,600 --> 02:37:12,479
go and like


2191
02:37:12,479 --> 02:37:19,359
blend like lots of twix bars mars bars whatever all the sweets into a bag and i


2192
02:37:19,359 --> 02:37:21,920
give you that bag what do you call it you don't say


2193
02:37:21,920 --> 02:37:26,560
oh this is a bag of twix and uh snickers and this is a


2194
02:37:26,560 --> 02:37:32,080
and mars bar no you would probably just say candy it's a bag of candies and


2195
02:37:32,080 --> 02:37:36,479
that's what dart is doing here saying oh you threw a lot of stuff in here i i


2196
02:37:36,479 --> 02:37:40,160
can't like comprehend that this is a set of uh


2197
02:37:40,160 --> 02:37:42,000
objects so


2198
02:37:42,000 --> 02:37:45,920
we do that in real real life and that's what dart is doing here so just when you


2199
02:37:45,920 --> 02:37:49,760
see object just know that oh dark doesn't really know what this is anymore


2200
02:37:49,760 --> 02:37:53,359
so or it kind of knows what it is it's just


2201
02:37:53,359 --> 02:37:56,080
a bunch of stuff so


2202
02:37:56,080 --> 02:38:03,439
that's what object in this case means so that was a weird uh


2203
02:38:03,439 --> 02:38:07,680
comparison maybe but i hope you get uh what i mean


2204
02:38:07,680 --> 02:38:10,560
and if you see me looking here it's just because i'm looking at my notes to


2205
02:38:10,560 --> 02:38:13,120
ensure that i've explained the things that i've


2206
02:38:13,120 --> 02:38:16,479
set out to explain so


2207
02:38:16,560 --> 02:38:20,399
talked a little about about hash codes and sets we don't have to go into


2208
02:38:20,399 --> 02:38:25,680
details about that so now let's go and talk a little bit about


2209
02:38:25,680 --> 02:38:28,560
maps um


2210
02:38:28,560 --> 02:38:31,200
and maps are kind of


2211
02:38:31,200 --> 02:38:34,880
one of my favorite data data structures in


2212
02:38:34,880 --> 02:38:38,000
any programming language that supports them pretty much almost all modern


2213
02:38:38,000 --> 02:38:43,600
programming languages support maps so a map is


2214
02:38:43,600 --> 02:38:47,280
a data structure as you can see here maps are used to


2215
02:38:47,280 --> 02:38:51,280
hold key value pairs of information and what that means is


2216
02:38:51,280 --> 02:38:56,000
um let's say that you want to explain


2217
02:38:56,000 --> 02:39:00,399
a person using their different properties


2218
02:39:00,399 --> 02:39:05,520
then you would say age their gender


2219
02:39:05,520 --> 02:39:09,120
their hair color their


2220
02:39:09,120 --> 02:39:13,840
heights uh whatever name all that so


2221
02:39:13,840 --> 02:39:18,000
these are kind of like your keys so


2222
02:39:18,000 --> 02:39:21,520
you would explain the properties of that person using


2223
02:39:21,520 --> 02:39:25,040
those keys and all those keys have their values so


2224
02:39:25,040 --> 02:39:30,000
if you say height then you say like 180 yes


2225
02:39:30,000 --> 02:39:34,319
and if you say weight then you select 70 kilograms


2226
02:39:34,319 --> 02:39:39,760
so these are key values the keys are the properties of that person and the values


2227
02:39:39,760 --> 02:39:44,560
are the values of those properties so and the way to create a map is very


2228
02:39:44,560 --> 02:39:50,640
similar so to very similar to a set with a curly with curly brackets


2229
02:39:50,640 --> 02:39:54,880
so you say person and then you say equal to


2230
02:39:54,880 --> 02:39:58,319
actually this is just a name you don't have to say person but yeah or you can


2231
02:39:58,319 --> 02:40:02,800
just say const so person and then you open curly brackets and then you would


2232
02:40:02,800 --> 02:40:07,760
do your keys here and i would say the key of age for instance i'll say 20


2233
02:40:07,760 --> 02:40:10,399
and then you say column


2234
02:40:10,399 --> 02:40:15,279
is it calling yeah it's a column and then you end the whole set with a


2235
02:40:15,279 --> 02:40:23,680
semicolon so i just created a basically here i created a map whose


2236
02:40:23,680 --> 02:40:30,000
keys are string and values are integers now let's see if dart understands that


2237
02:40:30,000 --> 02:40:35,600
you see this is it's a map of string as keys and means as values but now


2238
02:40:35,600 --> 02:40:41,040
as you saw before the analogy of candies now if i say okay i have another key and


2239
02:40:41,040 --> 02:40:44,080
it says um


2240
02:40:44,080 --> 02:40:50,720
name and i say oh the name is foo dart's going to be like oop


2241
02:40:50,720 --> 02:40:55,840
what is this person oh it's a map of string as keys and object as the value


2242
02:40:55,840 --> 02:41:00,880
because it just looks at the common denominator of the string which is foo


2243
02:41:00,880 --> 02:41:05,520
and 20 which is an integer and says oh i don't know i can't create a map whose


2244
02:41:05,520 --> 02:41:10,160
keys are string and its values are both string and integers so i'm just going to


2245
02:41:10,160 --> 02:41:14,399
go to their parent and be like oh the parent of both string and integer is


2246
02:41:14,399 --> 02:41:18,560
object so your values are of type object so


2247
02:41:18,560 --> 02:41:22,640
a bunch of candies basically okay um


2248
02:41:22,640 --> 02:41:28,720
that's how you create a um you create a map in dart so


2249
02:41:28,720 --> 02:41:32,960
and the other property of a map is for instance you would say


2250
02:41:32,960 --> 02:41:36,319
um if you if you go and create an agent


2251
02:41:36,319 --> 02:41:40,479
again here you see it says two keys and a constant


2252
02:41:40,479 --> 02:41:44,640
map literal cannot be equal so it's doing some checks here making sure that


2253
02:41:44,640 --> 02:41:49,040
the keys are actually unique so keys inside a map


2254
02:41:49,040 --> 02:41:55,120
need to be unique all right so however if you go and change this and say var


2255
02:41:55,120 --> 02:42:00,399
person so and then you later go and say person


2256
02:42:00,399 --> 02:42:06,880
name is equal to foo like just like that and then you print the entire person


2257
02:42:06,880 --> 02:42:12,960
so i'm just gonna say print before and print after okay


2258
02:42:12,960 --> 02:42:19,040
and you can see here it said first time h key is 20 it has a value of 20 and the


2259
02:42:19,040 --> 02:42:23,439
name k has the value of foo with a capital f then the second time around on


2260
02:42:23,439 --> 02:42:29,359
the print statement on line 15 then we when we print the person it has


2261
02:42:29,359 --> 02:42:31,200
the um


2262
02:42:31,200 --> 02:42:35,840
key of age with a value of 20 because we didn't modify that and a key of name as


2263
02:42:35,840 --> 02:42:41,520
it was before with the value of foo with like six i think uh capital o's


2264
02:42:41,520 --> 02:42:45,279
so this is how you would modify a map


2265
02:42:45,279 --> 02:42:49,040
you would specify the key and then you would say equal to which is


2266
02:42:49,040 --> 02:42:52,240
an operator and then you would say the new value all right


2267
02:42:52,240 --> 02:42:58,560
um however if you added a new key here for instance um last name


2268
02:42:58,560 --> 02:43:01,680
and you say bad and that will just kind of like get


2269
02:43:01,680 --> 02:43:06,960
appended to the um to the map so age the same name


2270
02:43:06,960 --> 02:43:12,640
the same now you have a new key whose value is bas all right


2271
02:43:13,359 --> 02:43:17,840
and that is kind of like the basics of um


2272
02:43:17,840 --> 02:43:21,840
maps so there are lots of things you can do with


2273
02:43:21,840 --> 02:43:25,359
maps and i really encourage you just like everything else that i talked about


2274
02:43:25,359 --> 02:43:29,439
in this chapter that you go and read some of the documentations because


2275
02:43:29,439 --> 02:43:32,560
if you're following along with this course and your goal is to become a


2276
02:43:32,560 --> 02:43:36,080
software engineer and if you're for instance a project manager or a designer


2277
02:43:36,080 --> 02:43:39,680
ux or whoever you are um


2278
02:43:39,680 --> 02:43:43,120
i think you need to understand that software engineers


2279
02:43:43,120 --> 02:43:47,359
do not know all the answers you have to go and read documentation you have to


2280
02:43:47,359 --> 02:43:50,560
practice practice practice and put time into it


2281
02:43:50,560 --> 02:43:56,000
countless countless hours you need to put into learning so


2282
02:43:56,000 --> 02:43:59,200
i i mean this course i think is going to


2283
02:43:59,200 --> 02:44:04,560
be so many hours long the the way i can i mean i can see


2284
02:44:04,560 --> 02:44:07,920
uh the planning for all the chapters that i put here


2285
02:44:07,920 --> 02:44:12,000
there's so many chapters i think the entirety of this course is gonna go over


2286
02:44:12,000 --> 02:44:17,520
20 hours so you can imagine i can't go into details about every single thing


2287
02:44:17,520 --> 02:44:20,399
otherwise it is just this course is probably going to be like


2288
02:44:20,399 --> 02:44:25,040
200 300 hours uh it's unbelievable so


2289
02:44:25,040 --> 02:44:29,120
we can't do that so what i expect you to do now is just to open your browser and


2290
02:44:29,120 --> 02:44:34,000
just type dart maps documentation something like that


2291
02:44:34,000 --> 02:44:36,800
dart maps so


2292
02:44:36,800 --> 02:44:40,160
and you also need to know that now that you're starting to google things you


2293
02:44:40,160 --> 02:44:45,359
need to be aware of the word dart and that dart is an existing very popular


2294
02:44:45,359 --> 02:44:48,800
name for just darts darts okay


2295
02:44:48,800 --> 02:44:52,479
so sometimes depending on what you're googling


2296
02:44:52,479 --> 02:44:57,680
if a topic related to the classic darts that you throw is more


2297
02:44:57,680 --> 02:45:01,040
popular than the topic of the programming programming language which


2298
02:45:01,040 --> 02:45:05,760
kind of sounds the same it may pop up first so


2299
02:45:05,760 --> 02:45:11,120
in this case if you say dart map you may actually end up in some sort of


2300
02:45:11,120 --> 02:45:14,479
weird website that explains to you how you can throw darts


2301
02:45:14,479 --> 02:45:17,840
at a map i don't know i'm just trying i'm just


2302
02:45:17,840 --> 02:45:20,800
trying to bring it up because that i actually ended up in that situation that


2303
02:45:20,800 --> 02:45:24,240
i searched for something related to dark i actually ended up in a weird website


2304
02:45:24,240 --> 02:45:27,680
talking about darts as like a sport so


2305
02:45:27,680 --> 02:45:34,399
know that as well please all right now we've uh talked about maps


2306
02:45:34,399 --> 02:45:39,840
so i'm gonna take that in my notes um


2307
02:45:39,840 --> 02:45:45,200
now what's coming in the next chapter


2308
02:45:46,160 --> 02:45:53,359
we are gonna talk about a very um important concept in dart and many other


2309
02:45:53,359 --> 02:45:57,760
programming languages such as rust and swift and that is null safety or dart


2310
02:45:57,760 --> 02:46:02,960
calls it sound the sound noise safety it is a very important thing to know about


2311
02:46:02,960 --> 02:46:06,479
in dart and it will greatly help you in the


2312
02:46:06,479 --> 02:46:10,880
future as you write your flutter applications and in this course i'm


2313
02:46:10,880 --> 02:46:14,880
going to use a lot of um null


2314
02:46:14,880 --> 02:46:18,880
i'm going to make a lot of null references talk about


2315
02:46:18,880 --> 02:46:21,920
null quite a lot throughout the course so


2316
02:46:21,920 --> 02:46:26,399
it is very important that we go through that as soon as possible and we're


2317
02:46:26,399 --> 02:46:32,080
definitely not gonna leave that out so that's gonna be for chapter five so


2318
02:46:32,080 --> 02:46:37,120
keep an eye out for chapter five that is to follow so i hope that you enjoyed


2319
02:46:37,120 --> 02:46:41,040
this chapter chapter number four where we talked about dark control statements


2320
02:46:41,040 --> 02:46:45,359
and collections and i'll see you in the next chapter


2321
02:46:45,359 --> 02:46:49,040
hello everyone and welcome to chapter number five of


2322
02:46:49,040 --> 02:46:52,640
this vlogtech course in this chapter we're going to talk


2323
02:46:52,640 --> 02:46:55,680
about null safety um


2324
02:46:55,680 --> 02:46:59,040
in the previous chapter chapter number four we talked about


2325
02:46:59,040 --> 02:47:02,880
dart control statements and collections


2326
02:47:02,880 --> 02:47:08,640
and before we go on to talk about enumerations and objects and classes


2327
02:47:08,640 --> 02:47:11,600
i feel it is very important to talk about null


2328
02:47:11,600 --> 02:47:16,399
safety which is a concept that is available in most most modern languages


2329
02:47:16,399 --> 02:47:21,120
such as dart sorry such as rust and swift


2330
02:47:21,120 --> 02:47:26,000
so it is important to kind of like get this out the way before we continue


2331
02:47:26,000 --> 02:47:29,520
maybe not even get it out of the way but actually like


2332
02:47:29,520 --> 02:47:35,439
learn what it means and try to utilize it so that we can write better code so


2333
02:47:35,439 --> 02:47:39,680
um i thought to just bring up um


2334
02:47:39,680 --> 02:47:44,080
the concept of null values and why they're important to


2335
02:47:44,080 --> 02:47:48,080
handle well i mean you've seen so far that we have


2336
02:47:48,080 --> 02:47:52,880
data types a data type can be for instance a string can be an integer


2337
02:47:52,880 --> 02:47:57,520
and then you can put values in them um however


2338
02:47:57,520 --> 02:48:01,680
in programming languages you're also allowed to


2339
02:48:01,680 --> 02:48:05,600
have the concept of the absence of a value so


2340
02:48:05,600 --> 02:48:10,399
on one hand you have values so you for instance have a string value equal to


2341
02:48:10,399 --> 02:48:15,359
foo bar or your name or whatever it is and then on the other hand you can have


2342
02:48:15,359 --> 02:48:18,160
the absence of that value so you can see that


2343
02:48:18,160 --> 02:48:22,640
okay i have a container i have a variable that can contain the values of


2344
02:48:22,640 --> 02:48:28,319
type string or i have a variable that can contain any object


2345
02:48:28,319 --> 02:48:33,040
however at the moment i don't have that value so you will just tell dart that


2346
02:48:33,040 --> 02:48:39,279
this variable that i have right now that can either contain a valid value of


2347
02:48:39,279 --> 02:48:42,840
type object or of type string or


2348
02:48:42,840 --> 02:48:48,800
integer or it can sometimes also during its lifetime


2349
02:48:48,800 --> 02:48:51,439
contain nothing


2350
02:48:51,439 --> 02:48:58,240
and this nothingness is the concept that is known as null um


2351
02:48:58,240 --> 02:49:03,760
so it's null in dart is a keyword um


2352
02:49:03,760 --> 02:49:07,520
it means that it's a word that you can just write in your text editor as you're


2353
02:49:07,520 --> 02:49:12,479
writing your code and you say that a variable's value is equal to null


2354
02:49:12,479 --> 02:49:16,319
and this tells dart that well okay this variable at the moment doesn't contain


2355
02:49:16,319 --> 02:49:22,319
any values so null is not really a value but it's actually the


2356
02:49:22,319 --> 02:49:26,640
absence of a value you should think of it that way


2357
02:49:26,640 --> 02:49:28,880
so


2358
02:49:29,200 --> 02:49:33,439
let's have a look at this um there's a little bit of a documentation


2359
02:49:33,439 --> 02:49:36,399
here um


2360
02:49:36,479 --> 02:49:41,120
uh on dart's website dart dev null safety so i'm just going to click on it


2361
02:49:41,120 --> 02:49:44,319
you're not going to see my screen at the moment


2362
02:49:44,319 --> 02:49:48,000
i'm just bringing it up in a browser


2363
02:49:48,000 --> 02:49:51,279
a browser window i'm going to bring it on the screen


2364
02:49:51,279 --> 02:49:55,920
and increase the size a little bit and also change the


2365
02:49:55,920 --> 02:50:00,319
sizing on the window as well so you can see the


2366
02:50:00,319 --> 02:50:05,600
contents in its entirety um so


2367
02:50:05,600 --> 02:50:09,279
as you can see in dart it's called sound null null safety and there's


2368
02:50:09,279 --> 02:50:12,399
documentation about what this actually means


2369
02:50:12,399 --> 02:50:15,120
um we're gonna look at uh


2370
02:50:15,120 --> 02:50:18,800
[Music] look at what's not safety actually means


2371
02:50:18,800 --> 02:50:21,840
in dart and i'm gonna give you a lot of examples of what that actually


2372
02:50:21,840 --> 02:50:25,520
practically means and there's documentation here in dart's website


2373
02:50:25,520 --> 02:50:30,720
simple simply because dart um in its older versions and not in its


2374
02:50:30,720 --> 02:50:35,520
current versions it in its older versions it didn't support uh all safety


2375
02:50:35,520 --> 02:50:39,040
so there was a lot of code written manually by programmers in order to for


2376
02:50:39,040 --> 02:50:42,080
instance check whether


2377
02:50:42,640 --> 02:50:48,000
a value is absent in a variable and then there is as you can see here it


2378
02:50:48,000 --> 02:50:52,479
says migrating an existing package or app so there is documentation written by


2379
02:50:52,479 --> 02:50:56,319
the dart team in order to help developers understand how they can move


2380
02:50:56,319 --> 02:51:00,560
their old code to the new code that supports null safety


2381
02:51:00,560 --> 02:51:04,160
um however if you're following along with this course and you're it's like


2382
02:51:04,160 --> 02:51:08,479
you're basically just following chronologically


2383
02:51:08,479 --> 02:51:12,000
from chapter one to all the other chapters i don't know how many chapters


2384
02:51:12,000 --> 02:51:14,640
were going to happen if you're following along with this course you don't have to


2385
02:51:14,640 --> 02:51:18,399
think about migrating because the code that we're writing in this entire course


2386
02:51:18,399 --> 02:51:22,640
is going to be null safe meaning that we're going to take advantage of darts


2387
02:51:22,640 --> 02:51:27,439
null safety operators and meaning that we are not going to manually check for


2388
02:51:27,439 --> 02:51:31,920
values being null and then doing some branches of code whether they're null or


2389
02:51:31,920 --> 02:51:35,520
not but so what i mean is that if you read the


2390
02:51:35,520 --> 02:51:38,960
documentation for sound safety you don't have to worry about the migration parts


2391
02:51:38,960 --> 02:51:42,240
just read the rest okay


2392
02:51:42,880 --> 02:51:47,439
so with that out the way i'm just gonna


2393
02:51:47,439 --> 02:51:51,200
make sure that i take that in my notes here that's why i'm looking in this


2394
02:51:51,200 --> 02:51:53,760
direction because i have all my notes here


2395
02:51:53,760 --> 02:51:57,600
um let's close this window and bring up our


2396
02:51:57,600 --> 02:52:02,479
visual studio code window that we had from earlier i'm gonna put it here


2397
02:52:02,479 --> 02:52:08,800
and i'm just gonna ensure that it is of the correct height as well so you're


2398
02:52:08,800 --> 02:52:13,520
gonna see it the window in its entirety okay


2399
02:52:13,520 --> 02:52:16,399
so now that we talked about what non-values


2400
02:52:16,399 --> 02:52:21,120
are and that they're the absence of a value let's have a look at


2401
02:52:21,120 --> 02:52:26,080
making any type nullable and if you follow along with the


2402
02:52:26,080 --> 02:52:28,800
with the course up to this point you should have some sort of a simulator or


2403
02:52:28,800 --> 02:52:32,720
an emulator running and then you should have done command shift p or control


2404
02:52:32,720 --> 02:52:35,840
shift p uh depending on your operating system


2405
02:52:35,840 --> 02:52:40,479
command shift p in mac and ctrl shift p in linux and windows in order to bring


2406
02:52:40,479 --> 02:52:44,720
up the um this menu and then you can just type


2407
02:52:44,720 --> 02:52:47,840
flutter select device and then you just select the device that you want to run


2408
02:52:47,840 --> 02:52:50,640
the code out so i'm kind of assuming that you've already done that and that


2409
02:52:50,640 --> 02:52:54,000
your code is running and this is something that we talked about in


2410
02:52:54,000 --> 02:52:58,479
earlier chapters so we're not going to go through that again


2411
02:52:58,479 --> 02:53:02,319
so i have a an iphone simulator which you cannot see


2412
02:53:02,319 --> 02:53:06,000
on the screen but i have it running in a separate uh screen just because we don't


2413
02:53:06,000 --> 02:53:08,479
have enough real estate i can bring it up to this


2414
02:53:08,479 --> 02:53:11,760
window but it will just take a lot of space so i'm gonna bring it up to


2415
02:53:11,760 --> 02:53:16,000
another monitor so you don't see it so this code at the moment is running


2416
02:53:16,000 --> 02:53:19,439
live so if i press command s then it's gonna run and just print the output for


2417
02:53:19,439 --> 02:53:22,800
us okay um


2418
02:53:22,800 --> 02:53:27,920
now let's talk about making any type um


2419
02:53:27,920 --> 02:53:31,439
nullable and there is a


2420
02:53:31,439 --> 02:53:34,240
way to do that let's let's have a look here


2421
02:53:34,240 --> 02:53:37,600
we talked about that null is a keyword and that that's why you can see it is


2422
02:53:37,600 --> 02:53:40,880
like um highlighted here in a different color


2423
02:53:40,880 --> 02:53:45,200
so if you for instance say final name is foo


2424
02:53:45,200 --> 02:53:48,080
all right as you can see it says okay i accept


2425
02:53:48,080 --> 02:53:53,760
this as his name is foo but you can't just say name like it's a null because


2426
02:53:53,760 --> 02:53:57,520
then it doesn't understand is it an object is it's a string is it nil right


2427
02:53:57,520 --> 02:54:01,760
is it an integer and if you type here name then you see it's just dynamic it


2428
02:54:01,760 --> 02:54:05,600
doesn't understand the type so


2429
02:54:05,600 --> 02:54:09,600
and we'll talk about dynamic a little bit later um but what you can do is to


2430
02:54:09,600 --> 02:54:14,479
actually specify that okay i want a string data type that


2431
02:54:14,479 --> 02:54:18,720
it can contain normal names or strings as we call it


2432
02:54:18,720 --> 02:54:22,000
like series of characters or it can sometimes be null and in that case you


2433
02:54:22,000 --> 02:54:24,960
have to actually specify the data type as


2434
02:54:24,960 --> 02:54:29,279
um not just string not just this because you'll see you'll


2435
02:54:29,279 --> 02:54:32,640
get an error and you'll actually get a suggestion it


2436
02:54:32,640 --> 02:54:36,640
says try changing the type of the variable or casting the right hand type


2437
02:54:36,640 --> 02:54:39,760
to string but we're not going to do that wasn't it


2438
02:54:39,760 --> 02:54:42,560
such a it wasn't such a useful suggestion


2439
02:54:42,560 --> 02:54:47,680
because what you want here is to actually make dart understand that this


2440
02:54:47,680 --> 02:54:51,920
variable right here or this constant right here can sometimes contain the


2441
02:54:51,920 --> 02:54:55,760
value of null and the way to do that is you


2442
02:54:55,760 --> 02:55:01,359
put a suffix after your data type as a question mark


2443
02:55:01,359 --> 02:55:05,439
so this is this is the syntax which is actually used in some other languages as


2444
02:55:05,439 --> 02:55:09,680
well it's used in swift as well so


2445
02:55:09,680 --> 02:55:14,479
um this tells dart that well here if we make it actually variable as you can see


2446
02:55:14,479 --> 02:55:19,120
or sorry like this so you say i have a variable


2447
02:55:19,120 --> 02:55:25,040
it's it's a string but sometimes it may the string value may be absent


2448
02:55:25,040 --> 02:55:30,800
um and then you'll just say okay now name is foo


2449
02:55:30,800 --> 02:55:34,960
and you can say now name is no so this is kind of like resetting out


2450
02:55:34,960 --> 02:55:39,359
names so if i just say okay print name


2451
02:55:39,359 --> 02:55:45,439
and then after foo i say print name okay so let's just clear the console and just


2452
02:55:45,439 --> 02:55:48,800
run this application you can see the first time it says it's null


2453
02:55:48,800 --> 02:55:53,120
and then the second time around it says it is foo


2454
02:55:53,120 --> 02:55:57,120
so this is how you tell dark that you want


2455
02:55:57,120 --> 02:56:00,720
to have nullable data type and you can do this with


2456
02:56:00,720 --> 02:56:05,439
pretty much all data types so you can just say okay i have an integer


2457
02:56:05,439 --> 02:56:10,399
um of age and that's 20. but you can see you cannot now assign the value of null


2458
02:56:10,399 --> 02:56:14,399
to integer because it's not nullable but as soon as you make it nullable then


2459
02:56:14,399 --> 02:56:19,439
that is accepted so um and of course you can do


2460
02:56:19,439 --> 02:56:22,880
um you can do different operations using


2461
02:56:22,880 --> 02:56:26,080
for instance we in the previous chapter i believe we talked about control


2462
02:56:26,080 --> 02:56:31,920
statements if and else so you can say for instance if age


2463
02:56:31,920 --> 02:56:36,000
is 20 and then you can encode or you can say


2464
02:56:36,000 --> 02:56:39,359
if age is null execute some code


2465
02:56:39,359 --> 02:56:44,640
so they work as you would expect so there is no difference really


2466
02:56:44,640 --> 02:56:47,920
and i mean if you if you think about that


2467
02:56:47,920 --> 02:56:54,319
notability nullability is just like a suffix to a data type you can also say


2468
02:56:54,319 --> 02:56:57,439
okay pretty much any data type can be nullable and that's that's correct like


2469
02:56:57,439 --> 02:57:01,600
for instance if you have a list of string


2470
02:57:01,600 --> 02:57:06,399
of names and you can say okay i have foo


2471
02:57:06,399 --> 02:57:12,560
and bar here this is a list of strings i've talked about lists in chapter four


2472
02:57:12,560 --> 02:57:17,359
now you can you can see here that list of strings there are two data types here


2473
02:57:17,359 --> 02:57:22,880
the list itself and the contents that it holds so if you want to


2474
02:57:22,880 --> 02:57:28,240
make the list in itself nullable then you would put the question mark after


2475
02:57:28,240 --> 02:57:33,680
okay this means this list of strings in itself can be absent so you say name is


2476
02:57:33,680 --> 02:57:38,560
null and that's accepted all right however since you're telling dart that


2477
02:57:38,560 --> 02:57:43,680
okay the names uh value here can its entirety be null


2478
02:57:43,680 --> 02:57:46,399
but its values are not supposed to be null


2479
02:57:46,399 --> 02:57:50,960
so if you then go in here and just put null in here then you see that you got


2480
02:57:50,960 --> 02:57:53,520
an error and that's because dart is saying that


2481
02:57:53,520 --> 02:57:58,160
okay you just promised me that the list in itself it can be absent but


2482
02:57:58,160 --> 02:58:01,520
as soon as it is not absent meaning that as soon as


2483
02:58:01,520 --> 02:58:06,000
it is present there with some values it's the values cannot


2484
02:58:06,000 --> 02:58:10,560
be no and that means that the this type should be


2485
02:58:10,560 --> 02:58:15,680
you're telling me here that it is not so if you want to make an optional


2486
02:58:15,680 --> 02:58:18,640
or nullable list of


2487
02:58:18,640 --> 02:58:22,960
optional strings then you would put the question mark after the data type of


2488
02:58:22,960 --> 02:58:26,080
string as well so this is now


2489
02:58:26,080 --> 02:58:32,960
i mean the way you should read this is i have a list of strings and i call that


2490
02:58:32,960 --> 02:58:38,960
list names names can sometimes be no


2491
02:58:38,960 --> 02:58:44,000
meaning that it can be absent and


2492
02:58:44,000 --> 02:58:50,399
if it is not absent it can contain objects of type string


2493
02:58:50,399 --> 02:58:55,520
that themselves can sometimes be absent meaning that okay like for instance if


2494
02:58:55,520 --> 02:58:59,200
you say fu bar no that's accepted but you can


2495
02:58:59,200 --> 02:59:02,160
also say names is no


2496
02:59:02,160 --> 02:59:07,279
see what i mean so both the container which is called names and the values


2497
02:59:07,279 --> 02:59:11,520
that it contains can be optional and the word optional is very important


2498
02:59:11,520 --> 02:59:14,000
for you to learn it's it's kind of like an


2499
02:59:14,000 --> 02:59:18,800
industry accepted way of talking about nulls and nullable values so


2500
02:59:18,800 --> 02:59:21,920
this is optional all right


2501
02:59:23,520 --> 02:59:27,920
okay um now we talked about that


2502
02:59:27,920 --> 02:59:32,720
nullable values and optional values all right basically you can use those words


2503
02:59:32,720 --> 02:59:36,960
interchangeably so if you're talking with a colleague


2504
02:59:36,960 --> 02:59:40,720
programmer you would say oh how would you describe this okay this is an


2505
02:59:40,720 --> 02:59:45,680
optional list of optional strings or you could also say nullable list of nullable


2506
02:59:45,680 --> 02:59:49,359
strings but optional is also word that is typically


2507
02:59:49,359 --> 02:59:54,640
used to talk about nullable values all right


2508
02:59:55,359 --> 03:00:01,120
okay we talked about making any type nullable so um


2509
03:00:01,200 --> 03:00:04,160
i'm just gonna mark that as


2510
03:00:04,160 --> 03:00:07,920
done that we've talked about it in notes all right


2511
03:00:07,920 --> 03:00:15,040
now let's talk about cherry picking non-null values and what this means is


2512
03:00:16,080 --> 03:00:21,279
with dart you can easily ask the


2513
03:00:21,279 --> 03:00:24,560
language to give you


2514
03:00:24,560 --> 03:00:28,720
values that are not null at all i'll explain what this actually


2515
03:00:28,720 --> 03:00:34,000
means let's say that you have a um


2516
03:00:34,000 --> 03:00:40,399
you have a string final um string first name


2517
03:00:40,399 --> 03:00:44,399
and is equal to foo okay


2518
03:00:44,399 --> 03:00:47,680
now let's just say this is a constant all right that's


2519
03:00:47,680 --> 03:00:52,560
that's what the suggestion was you see i wrote final because i was not planning


2520
03:00:52,560 --> 03:00:55,120
to reassign this first name value to


2521
03:00:55,120 --> 03:00:57,920
anything else but then i got a suggestion to actually use the word


2522
03:00:57,920 --> 03:01:03,040
final here or the keyword final sorry the keyword comms as you can see here


2523
03:01:03,040 --> 03:01:07,359
so let's say const all right


2524
03:01:07,359 --> 03:01:09,680
um now


2525
03:01:09,680 --> 03:01:15,520
what we want to do here then is to also create a last name


2526
03:01:15,520 --> 03:01:19,120
or middle name r


2527
03:01:19,120 --> 03:01:22,880
and then we say last name


2528
03:01:25,040 --> 03:01:28,800
and actually what we're going to do is we're going to say the first


2529
03:01:28,800 --> 03:01:34,160
the first name is null all right so first name middle made bar and last


2530
03:01:34,160 --> 03:01:38,240
name bass now if you want to


2531
03:01:38,240 --> 03:01:41,200
if you have these values and you want to for instance


2532
03:01:41,200 --> 03:01:44,479
i mean right now you can actually see the values that you put here but


2533
03:01:44,479 --> 03:01:48,160
sometimes these values are passed to your function so you don't know what


2534
03:01:48,160 --> 03:01:52,080
they are right now you can see what they are so it's easy if i told you pick the


2535
03:01:52,080 --> 03:01:56,640
first non-null value then you would say middle name because you can see it


2536
03:01:56,640 --> 03:02:00,640
however if you had a function for instance test here that accepted those


2537
03:02:00,640 --> 03:02:04,240
values for instance string first name


2538
03:02:04,240 --> 03:02:07,920
string last name and then string


2539
03:02:07,920 --> 03:02:13,680
or yeah middle name etc then you wouldn't know what those values are


2540
03:02:13,680 --> 03:02:17,439
or you cannot make an assumption about what those values are except that they


2541
03:02:17,439 --> 03:02:22,319
are nullable or optional strings so i hope that you get what i'm trying to


2542
03:02:22,319 --> 03:02:27,840
say now if someone told you to pick the first non-null value


2543
03:02:27,840 --> 03:02:33,840
one way to do that is like the old way of doing that is to say for um


2544
03:02:33,840 --> 03:02:36,479
if first name


2545
03:02:36,479 --> 03:02:42,479
is not snow um then you would say oh i again okay i


2546
03:02:42,479 --> 03:02:48,240
know first name is the first non


2547
03:02:48,240 --> 03:02:54,000
small value okay and then you say okay if first name


2548
03:02:54,000 --> 03:02:58,800
isn't null then we pick it otherwise else if


2549
03:02:58,800 --> 03:03:02,319
middle name is not null okay


2550
03:03:02,319 --> 03:03:07,520
and then you say okay middle name is the first nominal value


2551
03:03:07,520 --> 03:03:13,120
and then else if again so last name is not null


2552
03:03:13,120 --> 03:03:17,279
then you would print the same thing so this is very repetitive


2553
03:03:17,279 --> 03:03:20,240
um and it's basically


2554
03:03:20,240 --> 03:03:22,560
um


2555
03:03:22,640 --> 03:03:27,439
so it is basically very verbose in the in the way it is


2556
03:03:27,439 --> 03:03:31,120
created there is a better way of doing this and


2557
03:03:31,120 --> 03:03:35,200
that is with the uh question mark question mark operator


2558
03:03:35,200 --> 03:03:38,160
in dart which is available in some other


2559
03:03:38,160 --> 03:03:40,880
programming languages such as swift as well


2560
03:03:40,880 --> 03:03:45,120
so the way to do that then is you would want to pick the first non-null value so


2561
03:03:45,120 --> 03:03:47,279
you would say final


2562
03:03:47,279 --> 03:03:53,040
or const first non-null value and you would say that's equal to first


2563
03:03:53,040 --> 03:03:57,120
name or or so this is kind of like question


2564
03:03:57,120 --> 03:04:00,640
mark question mark middle name


2565
03:04:00,640 --> 03:04:04,000
and then question mark question mark last name


2566
03:04:04,000 --> 03:04:06,800
so and i mean we're getting a warning here


2567
03:04:06,800 --> 03:04:11,840
just because dark understands already that this middle name although a


2568
03:04:11,840 --> 03:04:15,840
so it's this is although an optional basically it has a value


2569
03:04:15,840 --> 03:04:21,680
but if we make this null so and that warning goes away but i mean


2570
03:04:21,680 --> 03:04:24,720
it would probably be cleaner if we actually pass these as parameters into


2571
03:04:24,720 --> 03:04:28,000
this function so we don't get these weird warnings


2572
03:04:28,000 --> 03:04:32,080
but the way the question mark question mark operator is working is that it says


2573
03:04:32,080 --> 03:04:36,319
it is an infix operator just so you know in in from chapter four you know an


2574
03:04:36,319 --> 03:04:38,960
infix operator is an operator that has two


2575
03:04:38,960 --> 03:04:42,080
things and one on each on each side the right


2576
03:04:42,080 --> 03:04:45,279
and left so in this case on the right side we


2577
03:04:45,279 --> 03:04:48,640
have middle name and on the left side we have first name so what this operator


2578
03:04:48,640 --> 03:04:52,960
does it says if the value on my left side is null


2579
03:04:52,960 --> 03:04:56,560
i'm gonna pick the value on my right okay


2580
03:04:56,560 --> 03:05:01,040
and let's now in this case say okay middle name is not now so what it does


2581
03:05:01,040 --> 03:05:04,960
it says first name or you null yeah you're not then i'm gonna go to the


2582
03:05:04,960 --> 03:05:09,120
right side middle name are you no no i'm not no then it's gonna pick that and the


2583
03:05:09,120 --> 03:05:14,160
rest of the statement is not gonna be executed


2584
03:05:14,160 --> 03:05:18,960
however if middle name was also known in this case then what happens is that it


2585
03:05:18,960 --> 03:05:22,240
begins from the left is a first name or you know


2586
03:05:22,240 --> 03:05:26,880
yes middle name or you know yes so this entire


2587
03:05:26,880 --> 03:05:29,760
operation here


2588
03:05:30,080 --> 03:05:34,880
it doesn't yield any value and then so this entire operation will


2589
03:05:34,880 --> 03:05:39,680
let me know so it says okay now i have to compare our


2590
03:05:39,680 --> 03:05:44,319
left left hand side are you know yeah we know that this entire thing was no


2591
03:05:44,319 --> 03:05:46,560
and then it says right hand side are you null


2592
03:05:46,560 --> 03:05:51,279
nope i'm bass then it takes pass so the


2593
03:05:51,279 --> 03:05:54,880
this question mark question mark operator is a null aware operator that


2594
03:05:54,880 --> 03:05:57,760
picks either the left side or the right side


2595
03:05:57,760 --> 03:06:04,399
whichever one is not null first in that order so left side are you null


2596
03:06:04,399 --> 03:06:07,760
if you're null i go to the right side but if you're not not


2597
03:06:07,760 --> 03:06:12,960
not null i'll pick you so keep that in mind it is a very handy


2598
03:06:12,960 --> 03:06:18,560
operator and it will shorten your code quite a lot all right


2599
03:06:18,560 --> 03:06:22,720
now if we then go in here and say first non-null value you can see it actually


2600
03:06:22,720 --> 03:06:26,880
says oh it's a string however if we


2601
03:06:26,880 --> 03:06:30,960
if these were parameters so if we said first name


2602
03:06:30,960 --> 03:06:36,000
and then string last name sorry middle name


2603
03:06:36,000 --> 03:06:41,439
last name they were not provided to us like that


2604
03:06:41,439 --> 03:06:45,520
converter was okay and then we say final


2605
03:06:45,760 --> 03:06:49,359
now if we say first non-null value in this


2606
03:06:49,359 --> 03:06:53,359
case since it is a normal case excuse me


2607
03:06:53,359 --> 03:06:58,319
where the dart compiler isn't working with constants


2608
03:06:58,560 --> 03:07:02,399
and then it cannot resolve this to a constant


2609
03:07:02,399 --> 03:07:05,520
value at the moment so it says okay there are three optional values i have


2610
03:07:05,520 --> 03:07:07,760
no idea what they are so


2611
03:07:07,760 --> 03:07:11,840
i'm gonna do my best to pick the first nominal value depending on i mean based


2612
03:07:11,840 --> 03:07:16,960
on what we provided here however i may not be able to solve this


2613
03:07:16,960 --> 03:07:19,920
so the final result here as you'll see is


2614
03:07:19,920 --> 03:07:24,080
and it's an optional string meaning that well i may not be able to resolve this


2615
03:07:24,080 --> 03:07:30,640
meaning that this entire operation on top on line 9 may result in a null


2616
03:07:30,640 --> 03:07:35,520
all right sorry about that sorry about my voice


2617
03:07:35,520 --> 03:07:38,880
so that is the question mark question mark


2618
03:07:38,880 --> 03:07:45,359
operator so i'm just gonna mark that that we talked about it in my notes


2619
03:07:45,359 --> 03:07:48,479
okay so


2620
03:07:48,479 --> 03:07:53,840
that was that um now


2621
03:07:53,840 --> 03:07:59,439
let's talk about the next topic uh which is the null aware assignment operator i


2622
03:07:59,439 --> 03:08:02,640
think that's that's this actual official name


2623
03:08:02,640 --> 03:08:07,120
um this operator is very similar to the question mark question mark operator in


2624
03:08:07,120 --> 03:08:11,600
that it it tries to resolve


2625
03:08:11,600 --> 03:08:15,279
a variable to make sure it is not null


2626
03:08:15,279 --> 03:08:20,479
it's going to do its best um and let's have a look at an example let's just say


2627
03:08:20,479 --> 03:08:23,359
um bar


2628
03:08:23,359 --> 03:08:27,040
and i'm gonna say actually let's just say


2629
03:08:27,040 --> 03:08:31,040
ring and name is first name so we begin we


2630
03:08:31,040 --> 03:08:35,760
say that we have an optional name and we begin by assigning first name to


2631
03:08:35,760 --> 03:08:39,840
it so it means that this name might at the moment depending


2632
03:08:39,840 --> 03:08:42,319
on the value of first name it may be null


2633
03:08:42,319 --> 03:08:46,479
and now if that is null you may want to assign


2634
03:08:46,479 --> 03:08:50,479
another value to it all right and then you can do that with this


2635
03:08:50,479 --> 03:08:55,600
operator you would say last name let's see what happened here


2636
03:08:55,600 --> 03:09:01,439
both trying to oh is it this yes it is equal to so i actually should change


2637
03:09:01,439 --> 03:09:05,840
this case to equal to


2638
03:09:05,840 --> 03:09:09,439
question mark yes and i'm going to bring it up again


2639
03:09:09,439 --> 03:09:13,680
so that it is actually correct let's say


2640
03:09:14,319 --> 03:09:19,120
and then name equal to isn't this working


2641
03:09:19,120 --> 03:09:22,560
lastly oh dummy


2642
03:09:22,560 --> 03:09:28,160
where was it this one try changing the


2643
03:09:29,040 --> 03:09:33,359
it like this i'm actually a bit unsure right now so


2644
03:09:33,359 --> 03:09:35,840
let's have a look actually what this does


2645
03:09:35,840 --> 03:09:39,359
um and it's three positional and then we


2646
03:09:39,359 --> 03:09:43,439
say no no no and then bar


2647
03:09:43,439 --> 03:09:48,479
and then baz here okay so first name is null


2648
03:09:48,479 --> 03:09:51,359
middle name is bar and last name is bass and


2649
03:09:51,359 --> 03:09:54,800
to be honest with you i mean this is quite a lot for me as well it is


2650
03:09:54,800 --> 03:09:58,960
something that is like the syntax of the programming language it is


2651
03:09:58,960 --> 03:10:02,880
something that you will kind of need to live with you're not gonna memorize this


2652
03:10:02,880 --> 03:10:07,279
all just in in your head all the time of course like the main parts of it you're


2653
03:10:07,279 --> 03:10:12,880
gonna you're gonna remember but uh not all of it so and you can see for


2654
03:10:12,880 --> 03:10:16,720
me as well i'm just like at the moment okay which one is it um


2655
03:10:16,720 --> 03:10:21,520
so i'm gonna test that so i'm to begin with we say name is first name and


2656
03:10:21,520 --> 03:10:27,120
if that is null then assign actually let's just say middle name


2657
03:10:27,120 --> 03:10:30,560
name here then use middle name and then print the name finally


2658
03:10:30,560 --> 03:10:34,239
and i can see it says bar here so it's actually question mark question mark


2659
03:10:34,239 --> 03:10:37,040
equal um


2660
03:10:37,040 --> 03:10:42,000
so i actually maybe need to edit this text one more time so i'm just going to


2661
03:10:42,000 --> 03:10:46,640
say question mark question mark equal bring it up because i think question


2662
03:10:46,640 --> 03:10:49,840
mark equal is not going to work an equal question mark isn't going to work either


2663
03:10:49,840 --> 03:10:53,200
it's not a value it's not a valid syntax a question mark question mark equals


2664
03:10:53,200 --> 03:10:55,279
sorry about that so


2665
03:10:55,279 --> 03:10:58,720
what this operator at the moment is doing it says that i'm gonna take the


2666
03:10:58,720 --> 03:11:02,960
value on the left hand side and check whether it is null or not if it is null


2667
03:11:02,960 --> 03:11:08,640
then i'm gonna assign the value on the right hand side to the left hand side


2668
03:11:08,640 --> 03:11:12,399
if it is not null i'm gonna leave it alone


2669
03:11:12,399 --> 03:11:14,319
okay so


2670
03:11:14,319 --> 03:11:17,439
at the moment first name as you saw here is null


2671
03:11:17,439 --> 03:11:21,120
the first parameter that we passed here so what it says it says okay i'm going


2672
03:11:21,120 --> 03:11:24,000
to check then for middle name if


2673
03:11:24,000 --> 03:11:28,399
if name is null and it is null and then it says okay middle name are you


2674
03:11:28,399 --> 03:11:32,560
like presenter and i will assign that value here so it will be


2675
03:11:32,560 --> 03:11:34,800
um [Music]


2676
03:11:34,800 --> 03:11:38,800
basically it will be bar which is the value of the milling


2677
03:11:38,800 --> 03:11:42,880
now if we in here said


2678
03:11:42,880 --> 03:11:46,239
middle name is also null


2679
03:11:46,640 --> 03:11:52,160
right we could have another operator here that says okay if after taking the


2680
03:11:52,160 --> 03:11:56,399
middle name we are still null then take the last name


2681
03:11:56,399 --> 03:11:58,640
so


2682
03:11:58,800 --> 03:12:03,359
and you can see bass gets printed to the screen and that is because because bass


2683
03:12:03,359 --> 03:12:06,800
is the last parameter that we're checking on line 10


2684
03:12:06,800 --> 03:12:10,160
and its value is not null um


2685
03:12:10,160 --> 03:12:15,040
so you can see how like if i then went here and actually said the first name is


2686
03:12:15,040 --> 03:12:18,560
bar then you will see that that will be the value that gets printed to the


2687
03:12:18,560 --> 03:12:21,200
screen here because


2688
03:12:21,200 --> 03:12:25,760
right here name or first name which is bar got


2689
03:12:25,760 --> 03:12:30,960
assigned to name so it is an optional string but it has a value which is bar


2690
03:12:30,960 --> 03:12:35,600
then when you come to this line number nine then you're telling dart look if


2691
03:12:35,600 --> 03:12:40,319
name is null then assign middle name to it and dart says well


2692
03:12:40,319 --> 03:12:44,479
name isn't null it is bar so i'm not going to assign middle name to it and


2693
03:12:44,479 --> 03:12:48,479
then it goes to line number 10 and does the exact same thing all right


2694
03:12:48,479 --> 03:12:53,680
so that is like the null aware assignment operators and uh


2695
03:12:53,680 --> 03:12:57,439
it is useful i personally i mean to be honest with


2696
03:12:57,439 --> 03:13:00,000
you i as you could as you could kind of guess


2697
03:13:00,000 --> 03:13:03,600
i don't use this operator so often it is there


2698
03:13:03,600 --> 03:13:07,760
and i have no shame in saying that pretty much in none of my programs have


2699
03:13:07,760 --> 03:13:11,520
i had to use this so it is present for you to


2700
03:13:11,520 --> 03:13:15,120
use it is available if you want to use it so just


2701
03:13:15,120 --> 03:13:18,960
don't be like me but try to remember the syntax this question mark question mark


2702
03:13:18,960 --> 03:13:22,399
equal okay


2703
03:13:22,479 --> 03:13:26,720
and i'm gonna actually fix that in my notes as well that it is question mark


2704
03:13:26,720 --> 03:13:31,200
question mark equal okay


2705
03:13:31,439 --> 03:13:35,840
and i'm going to check it in the notes that we've talked about it


2706
03:13:37,200 --> 03:13:42,640
now let's talk a little about a little bit about conditional method or


2707
03:13:42,640 --> 03:13:47,040
property access or conditional invocation


2708
03:13:47,040 --> 03:13:49,920
now as we talked about in the previous


2709
03:13:49,920 --> 03:13:54,640
chapter with dart as like many other programming languages you can


2710
03:13:54,640 --> 03:14:00,239
use the dot syntax in order to access or drill down inside


2711
03:14:00,239 --> 03:14:04,319
properties and methods or functions inside other objects as we saw for


2712
03:14:04,319 --> 03:14:10,399
instance with the case of or lists in dart you can say


2713
03:14:10,399 --> 03:14:14,960
i have a list and then you want to get its length then you would say


2714
03:14:14,960 --> 03:14:20,000
the name of the list dot links and that drills down inside that list and gets


2715
03:14:20,000 --> 03:14:25,359
the links property okay however as you saw also earlier in this


2716
03:14:25,359 --> 03:14:31,040
chapter in chapter number five even lists or pretty much any data type


2717
03:14:31,040 --> 03:14:36,479
in dart can also be nullable so how do you access


2718
03:14:36,479 --> 03:14:42,399
properties of a null object so let's have a look at that now


2719
03:14:42,399 --> 03:14:46,479
let's say i'm gonna i'm gonna actually delete these properties uh the


2720
03:14:46,479 --> 03:14:50,399
parameters that come here to our function


2721
03:14:50,399 --> 03:14:56,399
and i'm to say and i'm going to go down here and remove these parameters as well


2722
03:14:56,399 --> 03:15:02,319
and in here let's just create an optional list of strings


2723
03:15:02,319 --> 03:15:07,279
not optional list of optional strings but at just an optional list of valid


2724
03:15:07,279 --> 03:15:12,479
strings okay so i'm just going to say list of strings as an option i'm sorry


2725
03:15:12,479 --> 03:15:15,279
an optional list and i'm just going to say means


2726
03:15:15,279 --> 03:15:19,520
and that is equal to let's just say at the moment foo all right


2727
03:15:19,520 --> 03:15:24,239
now in here if you try to say final length


2728
03:15:24,239 --> 03:15:29,680
of names or number of names is names links


2729
03:15:29,680 --> 03:15:34,399
okay if you then look at the data type here i


2730
03:15:34,399 --> 03:15:38,399
mean we could actually say this is null okay


2731
03:15:38,399 --> 03:15:42,720
and you can see here dart actually is allowed to


2732
03:15:42,720 --> 03:15:49,200
or is able to give you an error knowing that this list it is null at the


2733
03:15:49,200 --> 03:15:52,800
moment however if you accept it i think it's actually better that we accept this


2734
03:15:52,800 --> 03:15:58,239
value as a parameter so that dart analyzer cannot be too smart about like


2735
03:15:58,239 --> 03:16:03,439
making assumptions about what this actually is at the moment so


2736
03:16:03,439 --> 03:16:06,720
you can see the analyzer is telling you it cannot be


2737
03:16:06,720 --> 03:16:11,920
unconditionally accessed because the receiver can be null and that means yeah


2738
03:16:11,920 --> 03:16:15,359
exactly as it says it says names can mean all i don't know if it's not right


2739
03:16:15,359 --> 03:16:18,960
now or not but it can be


2740
03:16:18,960 --> 03:16:23,279
so how do you access that one way to do that like the old way of doing that is


2741
03:16:23,279 --> 03:16:27,920
to say if names is not null


2742
03:16:27,920 --> 03:16:32,560
then length is named length okay


2743
03:16:32,560 --> 03:16:39,439
uh final length is uh in x okay so that tells dart that


2744
03:16:39,439 --> 03:16:42,640
look i'm actually checking for null values


2745
03:16:42,640 --> 03:16:48,080
um or i'm checking that this list is not null on line eight


2746
03:16:48,080 --> 03:16:52,800
and if it is not null then i would access its length property


2747
03:16:52,800 --> 03:16:56,720
and this is kind of it's called type promotion


2748
03:16:56,720 --> 03:17:00,960
and type as in data type so in this case you can see on line


2749
03:17:00,960 --> 03:17:04,880
number eight or now if i go and create a new line on


2750
03:17:04,880 --> 03:17:08,080
number online number eight and i say names


2751
03:17:08,080 --> 03:17:13,439
this is an optional list that can contain strings


2752
03:17:13,439 --> 03:17:17,920
and in here you can see it is um it is typed as the


2753
03:17:17,920 --> 03:17:23,520
same but it is promoted to not being null because you've already checked for


2754
03:17:23,520 --> 03:17:27,520
it because if you remove these lines of code you can see now that you get an


2755
03:17:27,520 --> 03:17:31,439
error the exact same line but if you check first for null and you don't get


2756
03:17:31,439 --> 03:17:35,840
the error it's a type promotion okay so this is kind of like the old way of


2757
03:17:35,840 --> 03:17:38,160
doing that um


2758
03:17:38,160 --> 03:17:42,640
so let's say that you want to have you want to extract the length so you say


2759
03:17:42,640 --> 03:17:47,120
final length or means length right you create the variable but you


2760
03:17:47,120 --> 03:17:51,359
don't assign anything to it when you say if names is not null then


2761
03:17:51,359 --> 03:17:56,720
the length is equal to name's length otherwise length is zero okay so this is


2762
03:17:56,720 --> 03:18:02,160
one way of doing that is the old way of doing that


2763
03:18:02,800 --> 03:18:05,040
and you may be


2764
03:18:05,040 --> 03:18:09,040
trying to be smart as well and say okay i don't need this else statement if i


2765
03:18:09,040 --> 03:18:13,200
just say this is a variable and by default is zero and yeah you


2766
03:18:13,200 --> 03:18:17,040
would be right because length is zero by default and then if names is not null


2767
03:18:17,040 --> 03:18:20,720
then you say okay length is equal to names length


2768
03:18:20,720 --> 03:18:25,200
however there's a better way of doing that and that is using the


2769
03:18:25,200 --> 03:18:29,760
quest dot question mark i believe or the question mark that actually it is yeah


2770
03:18:29,760 --> 03:18:37,200
operator which conditionally executes or invokes a method or a property inside


2771
03:18:37,200 --> 03:18:40,960
an optional if that optional value is present


2772
03:18:40,960 --> 03:18:45,760
i'm going to show you how to do that so if we say final links


2773
03:18:46,319 --> 03:18:50,560
is names and then you would put question mark dot and then you would say links


2774
03:18:50,560 --> 03:18:54,080
and you would see this this code like being executed without a problem


2775
03:18:54,080 --> 03:18:58,640
however if you go here you would see that length is an optional value it's an


2776
03:18:58,640 --> 03:19:02,000
optional integer so you may be like okay how do i solve that


2777
03:19:02,000 --> 03:19:08,399
how do i say that i want length to be zero


2778
03:19:08,399 --> 03:19:13,680
if this length value is


2779
03:19:13,680 --> 03:19:18,080
null meaning that if it's names if the names list is null and we can't extract


2780
03:19:18,080 --> 03:19:23,120
the length then i want this value to be set to null and that is using our


2781
03:19:23,120 --> 03:19:27,040
question mark question mark operator that we talked about the null aware


2782
03:19:27,040 --> 03:19:30,960
operator that we talked about earlier the infix operator


2783
03:19:30,960 --> 03:19:35,040
so you could just do this you would say length is


2784
03:19:35,040 --> 03:19:40,319
if the names list is present meaning that its value is not null then grab its


2785
03:19:40,319 --> 03:19:45,600
length otherwise take the value of 0 and assign it to length and if you go to


2786
03:19:45,600 --> 03:19:49,920
line number nine now and i say length so you can see it's an integer


2787
03:19:49,920 --> 03:19:53,279
so it's not um


2788
03:19:53,279 --> 03:19:59,040
is not an optional integer anymore so you could do the same thing as well


2789
03:19:59,040 --> 03:20:02,399
like you could say names and you could do the same thing with


2790
03:20:02,399 --> 03:20:06,720
properties and you could also do it for functions so you can say names add


2791
03:20:06,720 --> 03:20:10,960
as right so you see this is a function


2792
03:20:10,960 --> 03:20:15,040
called add and then we're adding the value of bass to that list


2793
03:20:15,040 --> 03:20:19,040
however you can't unconditionally invoke this function on


2794
03:20:19,040 --> 03:20:23,760
an optional value because it might be null


2795
03:20:23,760 --> 03:20:26,160
all right


2796
03:20:26,399 --> 03:20:31,200
so that is like a very very important


2797
03:20:31,200 --> 03:20:36,720
bit of learning about dark learning about optionals in dart how you


2798
03:20:36,720 --> 03:20:40,479
could use nullable values and


2799
03:20:40,479 --> 03:20:45,760
as you will see and we'll talk about it more in this course um


2800
03:20:45,760 --> 03:20:50,000
there is many cases where you have to


2801
03:20:50,000 --> 03:20:52,319
um


2802
03:20:52,640 --> 03:20:58,000
take into consideration all values and especially if you're working with


2803
03:20:58,000 --> 03:21:02,080
different libraries where the library cannot make too many


2804
03:21:02,080 --> 03:21:06,479
assumptions and your code is dependent on the library and


2805
03:21:06,479 --> 03:21:10,319
you will have to take into consideration okay the absence of a value means that i


2806
03:21:10,319 --> 03:21:13,600
personally have to like take some um


2807
03:21:13,600 --> 03:21:17,760
decisions in my code consciously in order to execute bits and pieces of code


2808
03:21:17,760 --> 03:21:22,640
depending on the absence or presence of the value so try to use these optional


2809
03:21:22,640 --> 03:21:25,760
um null aware operators that i taught you


2810
03:21:25,760 --> 03:21:30,080
here which was um the null aware um basically like the


2811
03:21:30,080 --> 03:21:33,520
decision making on to pick like the infix operator that tells you whether


2812
03:21:33,520 --> 03:21:36,479
the left hand side or the right hand side depending on which one is not null


2813
03:21:36,479 --> 03:21:40,800
first it picks that one okay that offer is very important and the


2814
03:21:40,800 --> 03:21:44,160
um all over invocation operator which is


2815
03:21:44,160 --> 03:21:48,720
here so you say some object which may be null then do something on it


2816
03:21:48,720 --> 03:21:52,560
or the operator which is a null aware


2817
03:21:52,560 --> 03:21:56,479
assignment operator that assigns the value on the right to the variable on


2818
03:21:56,479 --> 03:22:00,880
the left should the variable on the left be null all right so these are very very


2819
03:22:00,880 --> 03:22:04,239
important to understand


2820
03:22:05,600 --> 03:22:07,600
okay um


2821
03:22:07,600 --> 03:22:11,920
now that we've talked about that i'm gonna take that in my notes that that is


2822
03:22:11,920 --> 03:22:15,760
a topic we talked about now


2823
03:22:15,760 --> 03:22:21,200
we also have um very very good official documentation


2824
03:22:21,200 --> 03:22:25,840
about null safety in dart so i'm gonna bring up this documentation on a


2825
03:22:25,840 --> 03:22:30,479
separator separate screen and then i'm gonna bring it up here so


2826
03:22:30,479 --> 03:22:36,160
you can actually see as well all right um


2827
03:22:36,160 --> 03:22:39,359
you can see here it says understanding all safety and this is great great


2828
03:22:39,359 --> 03:22:45,120
documentation about how null safety in dart works


2829
03:22:45,120 --> 03:22:51,520
as you can see a lot of examples um i mean it talks about like from the


2830
03:22:51,520 --> 03:22:56,080
absolute beginning what it actually means


2831
03:22:56,080 --> 03:23:01,840
uh and you can see here null is at the level of object so it's not novel itself


2832
03:23:01,840 --> 03:23:05,359
is not like an object so you have lists and doubles and


2833
03:23:05,359 --> 03:23:10,319
integers here but null sits on top for itself it's kind of like the absence


2834
03:23:10,319 --> 03:23:13,279
of a value


2835
03:23:14,080 --> 03:23:17,120
so there's lots of examples in in this link and i


2836
03:23:17,120 --> 03:23:20,800
highly encourage you to have a look at it some things you may not understand


2837
03:23:20,800 --> 03:23:24,880
for instance like this one you will understand easily because it says there


2838
03:23:24,880 --> 03:23:29,520
is something called a thing like a class but we haven't talked about classes yet


2839
03:23:29,520 --> 03:23:32,800
and its name parameter name here in this


2840
03:23:32,800 --> 03:23:37,200
function called showgizmo is called thing and you can see it is


2841
03:23:37,200 --> 03:23:43,600
conditionally accessing a property on that thing


2842
03:23:43,680 --> 03:23:47,600
so and then if that property in itself is


2843
03:23:47,600 --> 03:23:53,439
null it conditionally access that as well so if this property is nullable and


2844
03:23:53,439 --> 03:23:57,520
then it's accessing another property inside that nullable property


2845
03:23:57,520 --> 03:24:01,439
if it's not null so it's i mean it's a great way you can chain them as you can


2846
03:24:01,439 --> 03:24:06,160
see here so then so if this thing is not null then


2847
03:24:06,160 --> 03:24:10,479
conditionally accesses this property on that so it's it's beautiful i mean and


2848
03:24:10,479 --> 03:24:14,800
this thing is available on many other languages like rust and swift as well so


2849
03:24:14,800 --> 03:24:17,840
it's nothing new it but it is kind of like


2850
03:24:17,840 --> 03:24:21,840
uh such an important topic to understand in dart that i think you shouldn't just


2851
03:24:21,840 --> 03:24:27,840
skim over it so you should just really learn how to work with it so


2852
03:24:28,640 --> 03:24:34,479
all right um we've now talked about null value so i'm going to take that in our


2853
03:24:34,479 --> 03:24:40,399
in my notes here now i think for chapter 5 five


2854
03:24:40,399 --> 03:24:44,000
this information is enough so that we can move on to


2855
03:24:44,000 --> 03:24:49,200
the next chapter and in the next chapter chapter number


2856
03:24:49,200 --> 03:24:53,680
six we're going to talk about some really really juicy stuff and


2857
03:24:53,680 --> 03:24:56,880
this is like chapter six is going to be like um


2858
03:24:56,880 --> 03:25:01,760
as i can see my notes are pressing in a lot of really interesting


2859
03:25:01,760 --> 03:25:05,040
topics such as enumerations classes objects


2860
03:25:05,040 --> 03:25:09,439
custom operators constructors factory constructors class methods


2861
03:25:09,439 --> 03:25:16,720
i mean inheritance and stop classing apps subclassing abstract classes so


2862
03:25:16,960 --> 03:25:20,880
as you may have heard depending on what background you have


2863
03:25:20,880 --> 03:25:25,520
you may be like a product owner or product designer a ux or whatever you


2864
03:25:25,520 --> 03:25:29,040
may not have like a software engineering background but


2865
03:25:29,040 --> 03:25:32,920
dart is um in its core it's an


2866
03:25:32,920 --> 03:25:38,720
object-oriented programming language it means that things in dart are objects an


2867
03:25:38,720 --> 03:25:44,319
object is an instance of a class as we'll talk about in the next chapter so


2868
03:25:44,319 --> 03:25:47,840
um for you to understand dart and how these


2869
03:25:47,840 --> 03:25:52,399
things work for instance we've talked about lists and actually typing dots in


2870
03:25:52,399 --> 03:25:55,200
front of the name of the list and getting its lengths but you may not


2871
03:25:55,200 --> 03:25:59,439
really know how that works so in order to understand all those things what that


2872
03:25:59,439 --> 03:26:03,600
dot means you need to understand what objects are in order to understand


2873
03:26:03,600 --> 03:26:08,000
objects you need to know what classes are and when you understand classes then


2874
03:26:08,000 --> 03:26:11,439
you will learn about inheritance and then you will talk we'll talk about


2875
03:26:11,439 --> 03:26:16,479
abstract classes properties static functions all that so


2876
03:26:16,479 --> 03:26:19,680
what we're going to talk about in chapter six is so


2877
03:26:19,680 --> 03:26:24,720
important that i believe that every dart developer needs to know about this and


2878
03:26:24,720 --> 03:26:30,239
we're learning all of these things to be become good at doing flutter um so


2879
03:26:30,239 --> 03:26:34,160
uh although you can go and write like servers or maybe server applications


2880
03:26:34,160 --> 03:26:38,080
with dart or you could write command line applications with dart but these


2881
03:26:38,080 --> 03:26:41,439
days dart is primarily used for writing


2882
03:26:41,439 --> 03:26:44,160
flutter applications and i don't have any


2883
03:26:44,160 --> 03:26:48,319
data to prove that but i can see for myself when i'm in the community that


2884
03:26:48,319 --> 03:26:52,160
most people are using dart primarily to write flutter applications so we're


2885
03:26:52,160 --> 03:26:56,560
doing all of this to learn more about flutter and i highly recommend that you


2886
03:26:56,560 --> 03:26:59,680
don't skip these chapters where we're talking about art especially if you're


2887
03:26:59,680 --> 03:27:02,640
new to flutter development so with that said


2888
03:27:02,640 --> 03:27:07,040
let's leave this chapter the way it is right now chapter number five we're done


2889
03:27:07,040 --> 03:27:10,960
with that let's go to chapter number six and learn about dart enumerations and


2890
03:27:10,960 --> 03:27:14,960
objects welcome to chapter six of this flutter


2891
03:27:14,960 --> 03:27:17,279
course in this chapter we're going to talk


2892
03:27:17,279 --> 03:27:23,760
about uh dart enumerations and objects and these are some of my favorite things


2893
03:27:23,760 --> 03:27:26,960
to actually talk about so um


2894
03:27:26,960 --> 03:27:31,840
in most programming languages actually have the same facilities so


2895
03:27:31,840 --> 03:27:35,439
if you follow along with the other chapters then you should have a working


2896
03:27:35,439 --> 03:27:39,600
dart project set up now and maybe running in an emulator or a simulator so


2897
03:27:39,600 --> 03:27:44,000
that you have the ability to press command s on mac or control s in linux


2898
03:27:44,000 --> 03:27:48,319
and windows in order to rerun your project so without you having to pretty


2899
03:27:48,319 --> 03:27:52,239
much do anything so let's then get started i'm just going to


2900
03:27:52,239 --> 03:27:55,439
make that assumption that you're already set


2901
03:27:55,439 --> 03:27:58,640
with those requirements


2902
03:27:58,800 --> 03:28:02,960
so let's start by talking about


2903
03:28:02,960 --> 03:28:08,080
enumerations and i'm gonna bring up the project from the previous chapter


2904
03:28:08,080 --> 03:28:12,080
let's just make sure that it's on the screen so you can easily see it


2905
03:28:12,080 --> 03:28:16,399
now i'm going to go and to this list function that we created remove the only


2906
03:28:16,399 --> 03:28:21,279
parameter there and remove that as well so if i press command s now nothing


2907
03:28:21,279 --> 03:28:24,720
should happen on the screen because we don't have any functionality in tests so


2908
03:28:24,720 --> 03:28:28,800
let's talk about enumerations and what they actually are as you can see here


2909
03:28:28,800 --> 03:28:32,560
animations are named list of related items


2910
03:28:32,560 --> 03:28:35,200
now an enumeration is


2911
03:28:35,200 --> 03:28:40,960
kind of like equivalent of making a string written programmatically


2912
03:28:40,960 --> 03:28:46,239
so that it becomes an entity and by that i mean that


2913
03:28:46,239 --> 03:28:50,399
let's say you have the value


2914
03:28:50,399 --> 03:28:53,279
name and then you could say foo


2915
03:28:53,279 --> 03:28:59,040
and you would also say khan's other name that's also foo they're both the same


2916
03:28:59,040 --> 03:29:02,800
string but they're not the same identity in that


2917
03:29:02,800 --> 03:29:06,319
i mean internally actually in terms of const i don't want to go too much into


2918
03:29:06,319 --> 03:29:09,520
the comp how the compiler actually works but they're going to be going to be the


2919
03:29:09,520 --> 03:29:12,560
same string but i mean that you've written it twice


2920
03:29:12,560 --> 03:29:16,560
so it's not the exact same thing you have to write it twice


2921
03:29:16,560 --> 03:29:20,560
so an enumeration try to tries to basically


2922
03:29:20,560 --> 03:29:24,720
make sure that a value has a name that can be


2923
03:29:24,720 --> 03:29:28,399
programmatically referred to so let's say


2924
03:29:28,399 --> 03:29:33,520
um cons sorry enum and that's a key word in dart that's how you create an


2925
03:29:33,520 --> 03:29:37,120
enumeration um i'm going to take this that we've


2926
03:29:37,120 --> 03:29:40,880
talked about some some other things during the intro sorry about i have to


2927
03:29:40,880 --> 03:29:45,200
look at my notes anyway anyways so we have the enum here that's how you create


2928
03:29:45,200 --> 03:29:50,319
an animation in guards and you would and then give a name to


2929
03:29:50,319 --> 03:29:55,200
your innovation and unlike variables and constants that they're


2930
03:29:55,200 --> 03:29:59,200
written with camel case you'd have to basically use another casing here which


2931
03:29:59,200 --> 03:30:04,479
is the first letter of every word in your iterations name has to be uppercase


2932
03:30:04,479 --> 03:30:08,479
and the and the rest of the letters have to be lowercase so


2933
03:30:08,479 --> 03:30:13,359
let's in this case for instance say person properties okay the properties of


2934
03:30:13,359 --> 03:30:17,680
any person then in this enum you will write the


2935
03:30:17,680 --> 03:30:20,080
different properties for instance first name


2936
03:30:20,080 --> 03:30:22,800
and lastly page


2937
03:30:22,800 --> 03:30:27,200
so what that basically means is that you've now defined a list of related


2938
03:30:27,200 --> 03:30:32,560
things such as first name last name age which are categorized under a particular


2939
03:30:32,560 --> 03:30:36,479
name which in this case person properties okay


2940
03:30:36,479 --> 03:30:40,399
and you can refer to these in your code using the dot notation so you can say


2941
03:30:40,399 --> 03:30:43,359
person properties


2942
03:30:43,359 --> 03:30:47,439
first name okay and we can print it actually so i'm just


2943
03:30:47,439 --> 03:30:51,840
gonna press command s and you can see it being printed to the screen so


2944
03:30:51,840 --> 03:30:54,640
um i mean immersions are really really


2945
03:30:54,640 --> 03:30:59,520
great as we go on in the in learning about dart and how dart works how we can


2946
03:30:59,520 --> 03:31:04,479
work with flutter how we can parse data that comes back from a


2947
03:31:04,479 --> 03:31:08,319
a server for instance but for now it's enough for you to


2948
03:31:08,319 --> 03:31:13,439
understand that you can categorize related items


2949
03:31:13,439 --> 03:31:16,880
under an enumeration so that you can refer to them later okay


2950
03:31:16,880 --> 03:31:22,640
and indoor you can also get the string representation of these uh


2951
03:31:22,640 --> 03:31:26,080
values using their name property that is something that's created for you by


2952
03:31:26,080 --> 03:31:31,279
default so if you just say name you now see first name being printed to


2953
03:31:31,279 --> 03:31:36,319
the screen as a string but before that if you print the innovations


2954
03:31:36,319 --> 03:31:40,800
value here for first name it would print out the entire thing okay


2955
03:31:40,800 --> 03:31:45,439
so that's short and sweet about enumerations we're


2956
03:31:45,439 --> 03:31:49,359
gonna use them quite a lot actually


2957
03:31:49,359 --> 03:31:53,680
especially later where we go to more advanced topics


2958
03:31:53,680 --> 03:31:58,080
as we develop our real application but for now just know that this is how you


2959
03:31:58,080 --> 03:32:00,880
create an information using an enum keyword and then the rest of the


2960
03:32:00,880 --> 03:32:03,600
properties you just put in curly brackets okay


2961
03:32:03,600 --> 03:32:05,840
so


2962
03:32:06,319 --> 03:32:10,640
that's for enumerations um


2963
03:32:10,640 --> 03:32:13,680
now we need to talk about switch statements and actually let's bring this


2964
03:32:13,680 --> 03:32:18,479
back and i'm gonna change this to properties let's say okay


2965
03:32:18,479 --> 03:32:24,399
and let's just say for instance animal type and let's say cat um


2966
03:32:24,399 --> 03:32:28,160
dog and then let's say rabbit


2967
03:32:28,720 --> 03:32:30,880
maybe so


2968
03:32:30,880 --> 03:32:35,200
let's say we have an animal type enumeration and um


2969
03:32:35,200 --> 03:32:38,720
we want to and then we for instance get in our


2970
03:32:38,720 --> 03:32:42,960
function we say animal type animal type so there's a property that


2971
03:32:42,960 --> 03:32:47,359
we expect to be passed our function called animal type and then


2972
03:32:47,359 --> 03:32:52,319
we name that property animal type with kennel casing here okay so if we do that


2973
03:32:52,319 --> 03:32:55,439
then we go to our function here we're recalling the function you can see that


2974
03:32:55,439 --> 03:32:59,359
we got an error meaning that there is a parameter expected of type animal type


2975
03:32:59,359 --> 03:33:04,399
and no one's passing them so at the call side which is


2976
03:33:04,399 --> 03:33:09,120
the place you are calling your function that's what a call site is known as in


2977
03:33:09,120 --> 03:33:12,720
programming so if you're coming from a background of design or


2978
03:33:12,720 --> 03:33:16,080
um anything that is not software development related so you wouldn't


2979
03:33:16,080 --> 03:33:19,279
probably know so much about the this kind of lingo but


2980
03:33:19,279 --> 03:33:23,760
a call site is where you're calling a function so at this call site online


2981
03:33:23,760 --> 03:33:28,960
number 19 um we're gonna gonna pass an animal type


2982
03:33:28,960 --> 03:33:32,880
and let's just say uh cat in this case okay


2983
03:33:32,880 --> 03:33:38,560
so in here we could just print that and i'm just gonna say animal type


2984
03:33:38,560 --> 03:33:42,880
i'm gonna press command s and you can see cat being printed here okay


2985
03:33:42,880 --> 03:33:47,840
now if you want to execute different types of code depending on


2986
03:33:47,840 --> 03:33:52,000
this animal type then you could you could which is not


2987
03:33:52,000 --> 03:33:56,000
recommended you could use an if statement so if you just said if


2988
03:33:56,000 --> 03:34:04,399
animal type is equal to animal type cat you say print all i left oh i love


2989
03:34:04,399 --> 03:34:12,080
cats okay else if animal type is animal


2990
03:34:13,600 --> 03:34:18,800
and you would say prince or or you would say dogs are so fluffy or


2991
03:34:18,800 --> 03:34:21,200
something


2992
03:34:22,960 --> 03:34:29,120
and else if animal type is animal type


2993
03:34:29,120 --> 03:34:31,279
me and say


2994
03:34:31,279 --> 03:34:34,800
i wish i had


2995
03:34:36,479 --> 03:34:40,399
so this is using normal if statements you say if animal type is cat then blah


2996
03:34:40,399 --> 03:34:43,760
blah blah now


2997
03:34:43,760 --> 03:34:47,279
it is one way of doing it but it's not the recommended way of working with


2998
03:34:47,279 --> 03:34:50,399
enumerations and the recommended way of working with enumeration especially if


2999
03:34:50,399 --> 03:34:54,080
you're doing like branching code as we're doing here is using a switch


3000
03:34:54,080 --> 03:34:57,760
statement so let's convert this code to switch


