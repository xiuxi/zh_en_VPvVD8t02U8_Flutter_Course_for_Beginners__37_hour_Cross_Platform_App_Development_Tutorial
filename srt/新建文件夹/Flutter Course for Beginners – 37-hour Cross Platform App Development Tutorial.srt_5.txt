1
14:15:29,116 --> 14:15:32,880
for this chapter so this was a quick chapter as well and that's completely


2
14:15:32,880 --> 14:15:37,040
okay actually quite refreshing to have these short chapters for me as well


3
14:15:37,040 --> 14:15:41,276
um so now that we've done error handling in


4
14:15:41,276 --> 14:15:44,956
our login view we also need to clean up our register


5
14:15:44,956 --> 14:15:48,480
view you can see our registry has kind of the same problem


6
14:15:48,480 --> 14:15:52,640
as login view had at the beginning of this chapter in that we have a lot of


7
14:15:52,640 --> 14:15:58,080
error like dev tools log stuff in here which aren't so useful so for the next


8
14:15:58,080 --> 14:16:01,916
chapter um what we need to do is to ensure that


9
14:16:01,916 --> 14:16:07,596
we're logged out of the application and that we can go to the register view as


10
14:16:07,596 --> 14:16:13,040
we can do here so that's where you need to be for the next chapter and before we


11
14:16:13,040 --> 14:16:17,276
can continue with that with the course to the next chapter so i


12
14:16:17,276 --> 14:16:21,680
hope you enjoyed this chapter and i'll see you in the next one


13
14:16:21,680 --> 14:16:25,916
hello everyone and welcome to chapter 22 of this flutter course


14
14:16:25,916 --> 14:16:28,640
in the previous chapters we've been talking quite a lot about login and


15
14:16:28,640 --> 14:16:33,116
register and email verification and as you saw in the previous chapter and we


16
14:16:33,116 --> 14:16:37,596
have some problems still in our register view in that when we come to


17
14:16:37,596 --> 14:16:40,400
the error handling we're still doing logs


18
14:16:40,400 --> 14:16:44,000
basically instead of using our new function that was called show error


19
14:16:44,000 --> 14:16:48,400
dialog and also our register view basically


20
14:16:48,400 --> 14:16:52,800
isn't really able to send us to the correct place after a successful


21
14:16:52,800 --> 14:16:56,956
registration you see we have email verification set up in that every user


22
14:16:56,956 --> 14:17:01,520
who registers also needs to verify his or her email before entering


23
14:17:01,520 --> 14:17:07,116
the main ui of the application so if that is the default behavior in that a


24
14:17:07,116 --> 14:17:11,520
newly registered user needs to verify their email perhaps it would be best


25
14:17:11,520 --> 14:17:15,520
that we send the user right after registration


26
14:17:15,520 --> 14:17:19,200
to the email verification view and these are the things that basically we're


27
14:17:19,200 --> 14:17:23,680
going to solve in this chapter fixing our log statements in the register view


28
14:17:23,680 --> 14:17:28,080
and also sending the user to the email verification view


29
14:17:28,080 --> 14:17:31,276
sending the registered user to the email verification view right after


30
14:17:31,276 --> 14:17:35,276
registration okay so these are the goals of this chapter


31
14:17:35,276 --> 14:17:38,560
so you know and i'm gonna bring up my visual studio code to the screen so you


32
14:17:38,560 --> 14:17:43,116
can also see it i'm gonna bring up scr cpy to the right hand side so you see


33
14:17:43,116 --> 14:17:47,360
you see that too position these windows a little bit better


34
14:17:47,360 --> 14:17:50,480
alright so the first task that we we need to do


35
14:17:50,480 --> 14:17:55,596
here is to make sure that we're using show error dialog in our


36
14:17:55,596 --> 14:17:58,720
register view and if you haven't watched the previous


37
14:17:58,720 --> 14:18:02,000
chapter that's what we did in one of the previous chapters that we talked about


38
14:18:02,000 --> 14:18:06,080
this uh file here in utilities show error dialog that increase the size of


39
14:18:06,080 --> 14:18:09,916
the window so you see it better so this show error dialog is a generic


40
14:18:09,916 --> 14:18:13,596
dialogue that has a title that says an error occurred


41
14:18:13,596 --> 14:18:18,800
and also a text of your choosing so let's go to our registry view as the


42
14:18:18,800 --> 14:18:22,640
caption says here i'm going to minimize the terminal here and get rid of the


43
14:18:22,640 --> 14:18:26,400
explorer and let's go to this weak password and


44
14:18:26,400 --> 14:18:30,400
then start typing show error dialog and you can see it's


45
14:18:30,400 --> 14:18:33,520
gonna auto import it excuse me


46
14:18:33,520 --> 14:18:37,680
it's going to auto import it for us so let's say show air dialog with that


47
14:18:37,680 --> 14:18:40,720
context and i'm just going to in this in the


48
14:18:40,720 --> 14:18:43,436
case of a weak password um


49
14:18:43,436 --> 14:18:50,000
we need to just say weak password okay so that part is done and you can also


50
14:18:50,000 --> 14:18:54,320
put a comma at the end of the second parameter just to make sure that it is


51
14:18:54,320 --> 14:18:58,320
clean but remember also that show error dialogue is a


52
14:18:58,320 --> 14:19:02,320
is an asynchronous function so if you move your mouse over it you'll see that


53
14:19:02,320 --> 14:19:05,916
it says future void so by just calling show air dial like you're not showing


54
14:19:05,916 --> 14:19:09,436
the error dialogue you're basically just telling the short i like to return the


55
14:19:09,436 --> 14:19:14,880
future which in turn then uh can display the error dialogue if you await on it so


56
14:19:14,880 --> 14:19:19,840
don't forget a wait after doing that let's remove our dev


57
14:19:19,840 --> 14:19:25,360
devtools log from there from the weak password and if statement


58
14:19:25,360 --> 14:19:29,276
and now what we're going to do is to copy


59
14:19:29,276 --> 14:19:34,240
this code that we wrote here and go to email already in use and display another


60
14:19:34,240 --> 14:19:39,276
error dialog in here using the same exact code and i'm just going to say


61
14:19:39,276 --> 14:19:46,160
email is already in use okay so that's for email rna news and also


62
14:19:46,160 --> 14:19:51,116
for invalid email we're going to say just invalid


63
14:19:51,436 --> 14:19:54,880
let me have a look for invalid email if you should just say


64
14:19:54,880 --> 14:20:01,360
um this is an invalid email address right


65
14:20:01,756 --> 14:20:07,840
and i can see that we haven't really handled other exceptions that might


66
14:20:07,840 --> 14:20:11,840
occur because you remember in the login view


67
14:20:11,840 --> 14:20:17,596
we had a look at handling for instance other uh


68
14:20:17,596 --> 14:20:21,756
other exceptions that might occur like firebase off exceptions that we did in


69
14:20:21,756 --> 14:20:25,840
an else statement there and also we did a generic catch statement that catches


70
14:20:25,840 --> 14:20:29,756
any other exception that is not a firebase auth exception and i can see


71
14:20:29,756 --> 14:20:32,880
now we haven't done that in register view so let's go and take care of that


72
14:20:32,880 --> 14:20:37,116
so let's just say else so in this else statement we're catching


73
14:20:37,116 --> 14:20:41,360
any other firebase off exception that might occur okay so i'm just going to


74
14:20:41,360 --> 14:20:44,320
say here and i'm just going to say


75
14:20:44,320 --> 14:20:48,956
error and dollar e code okay so that's very


76
14:20:48,956 --> 14:20:52,720
similar to what we're doing in our login view


77
14:20:52,720 --> 14:20:55,276
so and i apologize i could just see that


78
14:20:55,276 --> 14:20:59,360
you couldn't see the code because it was hidden behind the caption but now you


79
14:20:59,360 --> 14:21:02,640
can see it so i'm putting an else statement here and then i'm saying


80
14:21:02,640 --> 14:21:06,720
basically a weight shorter dialogue and e code so


81
14:21:06,720 --> 14:21:11,200
that's for if you if you look at have a look at this um


82
14:21:11,200 --> 14:21:16,956
curly bracket right here which you can now see this purple one it it starts


83
14:21:16,956 --> 14:21:20,640
here because it's the beginning of where we start catching firebase off


84
14:21:20,640 --> 14:21:22,880
exceptions and


85
14:21:22,880 --> 14:21:27,520
what we also need to do is put another l another catch statement here which


86
14:21:27,520 --> 14:21:33,840
catches any other exception that is not a firebase auth exception okay


87
14:21:33,840 --> 14:21:37,360
so we've covered this in the previous chapter when we talked about exception


88
14:21:37,360 --> 14:21:43,276
handling in the login view so i don't think i need to explain that again um


89
14:21:43,276 --> 14:21:46,560
okay so what we're going to do in here we're also going to show the error


90
14:21:46,560 --> 14:21:50,560
dialog in this case as well but for the message we're just going to say e2


91
14:21:50,560 --> 14:21:54,480
string okay similar something similar we did in


92
14:21:54,480 --> 14:21:59,040
our login view actually exactly the same thing


93
14:21:59,040 --> 14:22:02,800
okay that was great so now we're using short error dialog instead of log in the


94
14:22:02,800 --> 14:22:06,160
register view and now basically i don't think we're using dev


95
14:22:06,160 --> 14:22:10,320
tools over using devtools login here i don't


96
14:22:10,320 --> 14:22:13,200
think we need to do that anymore so we can get rid of that


97
14:22:13,200 --> 14:22:17,436
and we can also then get rid of devtools um


98
14:22:17,436 --> 14:22:23,040
import over here okay it's gonna have a look at my notes a


99
14:22:23,040 --> 14:22:25,596
little bit just to ensure that i'm telling you all the information that you


100
14:22:25,596 --> 14:22:28,800
need to know that's great okay


101
14:22:28,800 --> 14:22:32,560
um now that we've done all of this we need to also


102
14:22:32,560 --> 14:22:35,276
make sure you can see as the cache that says after


103
14:22:35,276 --> 14:22:40,480
every registration we need to confirm the user's email and that is like the um


104
14:22:40,480 --> 14:22:44,720
the pattern of every newly registered user in application


105
14:22:44,720 --> 14:22:49,916
that a newly registered user cannot have


106
14:22:49,916 --> 14:22:53,596
already confirmed their email because it's just not possible the two don't go


107
14:22:53,596 --> 14:22:57,756
together a newly user a newly registered user hasn't had their email address


108
14:22:57,756 --> 14:23:02,720
registered in our system therefore has not received a verification email during


109
14:23:02,720 --> 14:23:05,680
this session so this is a pattern that we need to


110
14:23:05,680 --> 14:23:09,916
basically help our users with so after every successful registration we're then


111
14:23:09,916 --> 14:23:15,276
going to automatically send the user to the verify email view and if you


112
14:23:15,276 --> 14:23:18,880
remember from the previous chapters we have this verify email view right here


113
14:23:18,880 --> 14:23:22,800
which is its own stateful widget and


114
14:23:22,800 --> 14:23:26,400
i mean it doesn't necessarily have to be a stateful widget i can see it's not


115
14:23:26,400 --> 14:23:30,560
doing anything stateful but we've just left it that state will stay full widget


116
14:23:30,560 --> 14:23:34,880
and it can just be like that for now um but we can also turn it into a


117
14:23:34,880 --> 14:23:39,436
stateless widget if you want to um okay


118
14:23:39,436 --> 14:23:44,320
so that's for the pattern of what our users are doing with the register view


119
14:23:44,320 --> 14:23:48,400
so if we go to register here uh oops no we are actually on the


120
14:23:48,400 --> 14:23:52,640
register sorry about that so um okay so what we need to do now is


121
14:23:52,640 --> 14:23:56,640
since we're gonna send the user from the register view we're gonna send to the


122
14:23:56,640 --> 14:24:00,160
verify email view we need a route for that and if you remember from the


123
14:24:00,160 --> 14:24:03,756
previous chapters we're defining our routes now inside this file lib


124
14:24:03,756 --> 14:24:06,640
constants routes dot dart


125
14:24:06,640 --> 14:24:11,436
and we've right now defined login route register route and nodes route


126
14:24:11,436 --> 14:24:15,596
then we need a new route for the verify email view so let's go ahead as the


127
14:24:15,596 --> 14:24:19,520
caption says in here and just type that and just say cons verify


128
14:24:19,520 --> 14:24:22,956
email out is


129
14:24:22,956 --> 14:24:28,320
slash verify email like that with a slash at the end as well


130
14:24:28,320 --> 14:24:33,276
now that we've defined the route we need to then go excuse me we need to


131
14:24:33,276 --> 14:24:38,000
go into our main dart file so i'm going to close this file close this file and


132
14:24:38,000 --> 14:24:44,160
then command p on mac in visual studio or or control p in linux and windows and


133
14:24:44,160 --> 14:24:47,596
go to main.dart okay


134
14:24:47,596 --> 14:24:52,480
in your main.dart you remember all the routes were registered inside the routes


135
14:24:52,480 --> 14:24:58,080
parameter of your material application so let's go ahead and register the um


136
14:24:58,080 --> 14:25:03,916
email verify email wrap here and we say context and we just say const


137
14:25:03,916 --> 14:25:08,560
verify email view and so that's also then registered


138
14:25:08,560 --> 14:25:12,640
inside the main function okay remember anything that you're doing


139
14:25:12,640 --> 14:25:17,756
inside the main function is not going to be reloading when you do hot uh


140
14:25:17,756 --> 14:25:23,436
hot reload so you need to do a hot restart here in order for for those to


141
14:25:23,436 --> 14:25:26,560
for for those changes in the main function to take effect so i'm just


142
14:25:26,560 --> 14:25:30,560
going to do a hot restart here okay


143
14:25:30,560 --> 14:25:33,520
so let's now that we've registered that


144
14:25:33,520 --> 14:25:37,680
let's go to our register and now that we've registered there are so many


145
14:25:37,680 --> 14:25:40,320
registered words i'm throwing out there so i just want to clarify now that we've


146
14:25:40,320 --> 14:25:45,520
registered to verify email routes in our routes in main dart we need to go to the


147
14:25:45,520 --> 14:25:51,116
register view and use this verify email route in there after a successful


148
14:25:51,116 --> 14:25:54,720
registration okay so um


149
14:25:54,720 --> 14:25:58,800
let's then go to our i'm going to close this and i'm going to


150
14:25:58,800 --> 14:26:02,000
go to register view


151
14:26:02,000 --> 14:26:05,276
right here okay


152
14:26:05,276 --> 14:26:09,520
here i can see that we're getting the user credentials and then


153
14:26:09,520 --> 14:26:12,720
assigning it to this user credential we don't have to do that anymore so let's


154
14:26:12,720 --> 14:26:15,916
just remove that we are not going to actually use the


155
14:26:15,916 --> 14:26:19,596
returning user credentials upon a successful create user with email and


156
14:26:19,596 --> 14:26:24,640
password we're going to go to the next line automatically because we have a try


157
14:26:24,640 --> 14:26:28,800
and catch statement here so


158
14:26:28,800 --> 14:26:33,756
now what we need to do is uh we're gonna show the verify email


159
14:26:33,756 --> 14:26:36,720
route okay uh


160
14:26:36,720 --> 14:26:40,720
so let's go uh to our


161
14:26:40,720 --> 14:26:45,436
uh verify email around in here and what we're going to say is to say navigator


162
14:26:45,436 --> 14:26:48,240
and dot push


163
14:26:48,240 --> 14:26:52,800
navigator of context and then we're going to say push named


164
14:26:52,800 --> 14:26:56,880
and you see in this case we're actually going to say push name instead of using


165
14:26:56,880 --> 14:27:00,080
the other functionality that says push name and


166
14:27:00,080 --> 14:27:03,756
remove until and the reason behind this is that


167
14:27:03,756 --> 14:27:06,756
um


168
14:27:06,800 --> 14:27:11,200
when when a user is inside the registration page here


169
14:27:11,200 --> 14:27:16,000
and when we want to go to the let's say that you enter some email in


170
14:27:16,000 --> 14:27:20,320
here and then you enter some password and you click the register button or you


171
14:27:20,320 --> 14:27:25,520
tap the register button and we send you to the verify email page


172
14:27:25,520 --> 14:27:28,000
where we say oh um


173
14:27:28,000 --> 14:27:32,320
here you can verify your email et cetera now in there if you if you realize that


174
14:27:32,320 --> 14:27:37,200
oh i register with the wrong email you need to be able to go back to the


175
14:27:37,200 --> 14:27:41,360
register page so in order to avoid having all these buttons that go send


176
14:27:41,360 --> 14:27:45,436
one user from one page to the other it would make a lot more sense if he from


177
14:27:45,436 --> 14:27:50,480
the register view could just push the new uh email verification route so we


178
14:27:50,480 --> 14:27:56,160
don't replace the entire routes like the register page with the new route so


179
14:27:56,160 --> 14:27:59,200
basically the desired effect here is that our register page is gonna stay


180
14:27:59,200 --> 14:28:03,116
right here and then we're gonna push the verify email route on top of it if the


181
14:28:03,116 --> 14:28:06,400
user in the verify email route realizes that they've done something wrong with


182
14:28:06,400 --> 14:28:11,520
the email address then they can just press the back button on the top bar and


183
14:28:11,520 --> 14:28:15,360
go back to the register page so that it's just a natural


184
14:28:15,360 --> 14:28:19,520
way of navigating between screens so that's why we're using push named in


185
14:28:19,520 --> 14:28:23,116
this case okay so i'm gonna say push names and push


186
14:28:23,116 --> 14:28:28,000
name and and then in the name we're just gonna say verify


187
14:28:28,000 --> 14:28:33,680
email route oops and verify email route like this


188
14:28:33,680 --> 14:28:38,160
i'm gonna do a command s right there and um


189
14:28:38,160 --> 14:28:43,436
then let's make sure that we can put all of this in action all right so i'm gonna


190
14:28:43,436 --> 14:28:47,200
hot restart just to make sure you remember we did a


191
14:28:47,200 --> 14:28:50,560
change in our main function so if you forgot to do hot restart please do that


192
14:28:50,560 --> 14:28:55,200
now um so that your changes can actually take effect from the login view which is


193
14:28:55,200 --> 14:28:59,520
the first view that the user sees we're gonna go to the register page


194
14:28:59,520 --> 14:29:05,360
and inside this register page i'm going to register with a new user so since


195
14:29:05,360 --> 14:29:11,040
i've already registered my user and i can actually go to firebase console so


196
14:29:11,040 --> 14:29:16,400
let's go to console firebase the user which i usually use is already


197
14:29:16,400 --> 14:29:20,800
registered with this application so my notes flutter project okay


198
14:29:20,800 --> 14:29:25,596
let's go to authentication and i can see pixelityab gmail.com is already


199
14:29:25,596 --> 14:29:29,040
registered so i'm going to register with a new user in here i'm going to say


200
14:29:29,040 --> 14:29:33,436
van.mp and the password is foobarbaz i'm just


201
14:29:33,436 --> 14:29:37,916
going to choose here and please don't use this password in production for any


202
14:29:37,916 --> 14:29:42,640
of your accounts anywhere at all this is just a bad idea i'm using fubar bass for


203
14:29:42,640 --> 14:29:47,360
consensus consistency and and for the sake of simplicity in this project so


204
14:29:47,360 --> 14:29:51,840
because for me it's a lot easier as i'm typing and writing all the passwords


205
14:29:51,840 --> 14:29:54,720
over and over again just to use fullbarbass but this is not a good


206
14:29:54,720 --> 14:29:58,160
password so i think just to make this clear


207
14:29:58,160 --> 14:30:02,800
um now i'm going to register this user and now you can see that


208
14:30:02,800 --> 14:30:06,560
after a successful registration now we're ending up in this verify email


209
14:30:06,560 --> 14:30:11,360
screen and this is really good and but


210
14:30:11,360 --> 14:30:15,200
there is a way we can actually make this better and let's go to firebase here and


211
14:30:15,200 --> 14:30:19,596
i can see now that user is already registered here you see and it has a


212
14:30:19,596 --> 14:30:23,916
user id and here's the last sign-in date okay


213
14:30:23,916 --> 14:30:27,756
so how can we make this better you see


214
14:30:27,756 --> 14:30:32,800
if this is the natural flow of going like when the user is in the register


215
14:30:32,800 --> 14:30:38,640
page or the register view and they always end up in the verify email page


216
14:30:38,640 --> 14:30:42,640
the way that we can make this better is um


217
14:30:42,640 --> 14:30:47,840
that upon successful registration right before we push the


218
14:30:47,840 --> 14:30:51,916
verify email view on the screen


219
14:30:51,916 --> 14:30:56,800
is that we actually send a verification email to that user because otherwise


220
14:30:56,800 --> 14:30:59,916
what you're creating you're creating a logic for the user that they have to


221
14:30:59,916 --> 14:31:04,160
take an extra step in order to verify their account so they come here and now


222
14:31:04,160 --> 14:31:07,596
they have to press another button but it would be really good if you actually did


223
14:31:07,596 --> 14:31:11,916
that button press kind of for them before we went to that screen so


224
14:31:11,916 --> 14:31:15,360
we're not actually going to physically like tap that button for them but we're


225
14:31:15,360 --> 14:31:21,116
going to execute the same code that that button executes for the user okay


226
14:31:21,596 --> 14:31:26,880
so that's what we're gonna do now so um as the caption says in here in your


227
14:31:26,880 --> 14:31:31,916
register view right before you navigate to the verify email route ensure that


228
14:31:31,916 --> 14:31:35,436
you get the current user basically so you say


229
14:31:35,436 --> 14:31:42,956
final user is firebase off instance i believe and current user okay


230
14:31:42,956 --> 14:31:46,720
get your user and then in here


231
14:31:46,720 --> 14:31:51,916
you'll say user um and there is a function called send email


232
14:31:51,916 --> 14:31:55,520
verification and remember your user is an optional user and that's why you're


233
14:31:55,520 --> 14:31:59,840
seeing this elvis operator here which is kind of like a


234
14:31:59,840 --> 14:32:03,116
moustache or something i don't know what you want to call it some some people


235
14:32:03,116 --> 14:32:08,000
call it elvis operator if you're coming from kotlin or in swift you would say


236
14:32:08,000 --> 14:32:11,680
like an optional invocation depending on the language that you're coming from but


237
14:32:11,680 --> 14:32:15,040
if you're not if you don't i have like a software development background then you


238
14:32:15,040 --> 14:32:19,680
may just call that a question mark um remember now


239
14:32:19,680 --> 14:32:23,840
so user is optional and this function returns a fusion voice so you can't just


240
14:32:23,840 --> 14:32:28,720
call it you need to wait on it and so now we're doing that so we're now


241
14:32:28,720 --> 14:32:34,080
awaiting on that all right and also since now we've changed our


242
14:32:34,080 --> 14:32:37,520
logic in that when you press the register button upon successful


243
14:32:37,520 --> 14:32:40,720
registration we're sending you an email verification


244
14:32:40,720 --> 14:32:44,800
is not a good idea to end up on this screen that just says please verify your


245
14:32:44,800 --> 14:32:48,880
email address because let's let's just face it we have already sent an email


246
14:32:48,880 --> 14:32:53,200
verification so we don't want the user to click this button actually we want


247
14:32:53,200 --> 14:32:56,560
the user to click this button or tap this button


248
14:32:56,560 --> 14:33:01,200
if they haven't received the email in a while all right so we don't want like


249
14:33:01,200 --> 14:33:05,840
double emails for users so it's just not a good idea


250
14:33:05,840 --> 14:33:11,360
so uh sorry i'll just have a look at my notes a little bit here


251
14:33:11,360 --> 14:33:16,400
okay so what we need to do now is as the caption now says here we need to go to


252
14:33:16,400 --> 14:33:20,480
our verify email view and add a text on top


253
14:33:20,480 --> 14:33:24,400
to say we have already sent a verification email okay and that's just


254
14:33:24,400 --> 14:33:28,956
common sense okay so let's go to our


255
14:33:28,956 --> 14:33:34,240
verify email route which is basically verify email view in here


256
14:33:34,240 --> 14:33:38,080
and you can see that we have a column in here and the first text at the moment


257
14:33:38,080 --> 14:33:42,240
says please verify your email address so let's create another text in here i'm


258
14:33:42,240 --> 14:33:46,800
going to say cons text and i'm going to say


259
14:33:46,800 --> 14:33:50,720
weave you see because i want to write the word


260
14:33:50,720 --> 14:33:55,756
weave as in we have there is a single code in here so i cannot have my own


261
14:33:55,756 --> 14:34:00,000
string having single codes because then dart doesn't understand where


262
14:34:00,000 --> 14:34:04,240
this what this string is because it thinks here's a string that starts here


263
14:34:04,240 --> 14:34:08,480
and it ends here but what is this one so in in order to have single quotes


264
14:34:08,480 --> 14:34:11,756
inside your dark strings then you would have to


265
14:34:11,756 --> 14:34:16,080
encapsulate or basically put your string inside double


266
14:34:16,080 --> 14:34:20,796
quotes so you avoid that confusion so we can say we've


267
14:34:20,796 --> 14:34:26,320
sent you an email verification please


268
14:34:26,320 --> 14:34:30,956
please open it in order


269
14:34:30,956 --> 14:34:34,880
to verify your yeah so please open it to verify your


270
14:34:34,880 --> 14:34:37,040
uh accounts


271
14:34:37,040 --> 14:34:41,360
something like this okay and also this text then we need to


272
14:34:41,360 --> 14:34:44,400
change that as well because you see we don't want this text to be kind of like


273
14:34:44,400 --> 14:34:48,320
a call to action saying that hello like here we're saying we sent you an


274
14:34:48,320 --> 14:34:51,116
email verification please open the verifier again and then right after that


275
14:34:51,116 --> 14:34:54,956
we're saying hey click this button so that's not a good idea let's just change


276
14:34:54,956 --> 14:34:58,480
this text and say if you haven't


277
14:34:58,480 --> 14:35:03,040
and let's make this double quotes as well just the same story as before


278
14:35:03,040 --> 14:35:06,796
if you haven't received a verification


279
14:35:06,796 --> 14:35:09,200
email yet


280
14:35:09,200 --> 14:35:14,560
press the button below something like this


281
14:35:14,560 --> 14:35:18,796
okay so i'm just gonna press command s and now you can see those texts being


282
14:35:18,796 --> 14:35:21,520
displayed on the screen they're not very pretty to be honest with you at the


283
14:35:21,520 --> 14:35:26,720
moment but that's okay too so um that's not a problem let it be like


284
14:35:26,720 --> 14:35:31,276
that all right so we're displaying that text


285
14:35:31,276 --> 14:35:35,040
uh to the user and what we need to do now uh


286
14:35:35,040 --> 14:35:41,040
is to test this whole uh flow basically again just to make sure


287
14:35:41,040 --> 14:35:45,276
that yeah it's working as expected so in order to do that go to your firebase


288
14:35:45,276 --> 14:35:48,640
console again and i'm gonna bring up the console in


289
14:35:48,640 --> 14:35:52,000
here hopefully you can see it too and i'm gonna go to that project then


290
14:35:52,000 --> 14:35:56,400
authentication and this user i'm gonna delete this user okay delete


291
14:35:56,400 --> 14:35:59,756
boof all right that user is gone i'm gonna


292
14:35:59,756 --> 14:36:04,640
close the screen now and and what we're gonna do then is just


293
14:36:04,640 --> 14:36:09,596
to hot restart the application in order to clean all the states


294
14:36:10,840 --> 14:36:14,640
um to restart


295
14:36:14,720 --> 14:36:21,596
is it not taking effect all right i'm gonna then uh verify email


296
14:36:21,596 --> 14:36:25,520
i can see that there is no back button and it kind of feels like


297
14:36:25,520 --> 14:36:30,320
uh we're ending up in in that screen because in our main dart file


298
14:36:30,320 --> 14:36:34,720
and let's go in main dart i believe that we're actually sending


299
14:36:34,720 --> 14:36:41,116
the user to verify email view in this case user firebase instance card okay


300
14:36:41,116 --> 14:36:44,956
so this is a lot a little bit a bit of a problem because now we're kind of like


301
14:36:44,956 --> 14:36:50,080
stuck in this uh in this


302
14:36:50,480 --> 14:36:54,560
view because firebase as a caption right here says it says firebase doesn't


303
14:36:54,560 --> 14:36:59,200
understand the remote changes we removed that user completely but


304
14:36:59,200 --> 14:37:02,956
firebase still believes that that user exists and that is because you see


305
14:37:02,956 --> 14:37:07,680
firebase can't like the client that is inside the code that is inside the


306
14:37:07,680 --> 14:37:11,520
client application which you are developing can't constantly talk with


307
14:37:11,520 --> 14:37:14,956
firebase and say give me the latest state give me the latest state


308
14:37:14,956 --> 14:37:19,916
this user that is right now on this on this phone


309
14:37:19,916 --> 14:37:24,080
is a local user that once had a connection with the backend but it


310
14:37:24,080 --> 14:37:29,520
doesn't anymore but firebase doesn't like delete this user locally so


311
14:37:29,520 --> 14:37:33,840
so what we need to do the best way to handle this case is to


312
14:37:33,840 --> 14:37:40,560
have kind of like a restart uh button in our verify email so if for


313
14:37:40,560 --> 14:37:46,480
some reason the user like in this case understands that hey um i'm stuck


314
14:37:46,480 --> 14:37:50,640
i need to get out of here from verify email i kind of want to go back to where


315
14:37:50,640 --> 14:37:56,880
i was so what we need to do is to upon the user pressing a restart button


316
14:37:56,880 --> 14:38:00,640
here we want to sign that user out so firebase


317
14:38:00,640 --> 14:38:05,360
understands well this user isn't signed in anymore so that we don't end up in


318
14:38:05,360 --> 14:38:11,680
this case that email is verified etc etc and we also are going to send the user


319
14:38:11,680 --> 14:38:15,680
to the register view okay and as you can see


320
14:38:15,680 --> 14:38:19,756
we can't send the user back to the register view


321
14:38:19,756 --> 14:38:25,040
i mean that we can't expect the register view to exist on the view


322
14:38:25,040 --> 14:38:29,436
on the view stack in this case because if a user has just freshly started the


323
14:38:29,436 --> 14:38:33,436
application application so they will end up in this future builder the future


324
14:38:33,436 --> 14:38:36,480
builder would then check the user and says oh you should go to the verify


325
14:38:36,480 --> 14:38:40,400
email view and in this case there is no register view behind the


326
14:38:40,400 --> 14:38:45,116
um verify email view so in that case you will see that we won't push but we will


327
14:38:45,116 --> 14:38:50,080
actually do push name and remove until but we will get there soon okay


328
14:38:50,080 --> 14:38:54,956
first off let's go to your uh to your verify email view and right after this


329
14:38:54,956 --> 14:38:58,400
text button we're gonna add another text button


330
14:38:58,400 --> 14:39:04,000
up a little bit so you see it better and let's just say a text button


331
14:39:04,000 --> 14:39:07,840
unpressed is just going to be empty for now and then for his child we're going


332
14:39:07,840 --> 14:39:13,756
to add a const text that just says restart okay


333
14:39:13,756 --> 14:39:18,880
so that's that and then here what we then need to do is as i mentioned before


334
14:39:18,880 --> 14:39:24,160
is to uh and as the caption explains here we need to actually log


335
14:39:24,160 --> 14:39:28,400
the user out so let's say firebase auth instance


336
14:39:28,400 --> 14:39:32,796
and and then what we need to do is to say sign out


337
14:39:32,796 --> 14:39:38,880
okay remember cyano i also believe is a future of void so you need to await on


338
14:39:38,880 --> 14:39:43,276
it so oops um see i just jumped screens without


339
14:39:43,276 --> 14:39:46,480
actually really wanting to do that so let's wait on it and it's going to give


340
14:39:46,480 --> 14:39:51,520
you an error because now your unpressed function is not async so make it async


341
14:39:51,520 --> 14:39:55,520
right after doing that using if i do command s


342
14:39:55,520 --> 14:39:58,160
now we're gonna see the restart button here but


343
14:39:58,160 --> 14:40:00,956
doing that just does a sign out it doesn't actually send you to the


344
14:40:00,956 --> 14:40:05,040
register view and we're gonna take care of that soon so as a caption says


345
14:40:05,040 --> 14:40:11,680
navigator of context i push named remove until and in here we're going to send


346
14:40:11,680 --> 14:40:16,720
the user to remember from our routes view sorry a routes file there is a


347
14:40:16,720 --> 14:40:23,116
register route okay so let's go there let's go register


348
14:40:23,116 --> 14:40:27,436
out and in here we just leave the code as it is and i come at the end to clean


349
14:40:27,436 --> 14:40:30,640
it up a little bit and


350
14:40:31,116 --> 14:40:34,320
and that should be good to go


351
14:40:35,360 --> 14:40:40,000
okay now i'm gonna do a hot restart you'll see now we end up in here


352
14:40:40,000 --> 14:40:43,916
and because it's still the user is logged in because we haven't executed


353
14:40:43,916 --> 14:40:48,320
this code yet and i'm just gonna then press the restart button and you'll see


354
14:40:48,320 --> 14:40:52,240
we end up in the register view just to make sure that we're not going to go


355
14:40:52,240 --> 14:40:55,116
into this vicious cycle again that every time we


356
14:40:55,116 --> 14:40:58,956
do a hot restart we're going to end up in the verify email view


357
14:40:58,956 --> 14:41:03,436
and let's just do a hot restart now to see what the state of the application is


358
14:41:03,436 --> 14:41:08,320
going to be and as you can see upon hot restart we end up in the login view


359
14:41:08,320 --> 14:41:13,916
which means that the main dart file in the future builder it went to this code


360
14:41:13,916 --> 14:41:18,320
so the user is null at the moment and that's exactly what we wanted because we


361
14:41:18,320 --> 14:41:22,000
signed the current user out okay


362
14:41:22,720 --> 14:41:27,916
all right so we are then going to use the same credentials to um


363
14:41:27,916 --> 14:41:30,880
as before to register let's just go to the register view then and i'm going to


364
14:41:30,880 --> 14:41:36,160
say round.np np gmail.com and then fubarbas


365
14:41:36,160 --> 14:41:41,116
and i'm going to then register this user and you can see it says it sent you an


366
14:41:41,116 --> 14:41:44,640
email verification please open it to verify and i can see on my third screen


367
14:41:44,640 --> 14:41:50,080
here that i actually got the email um verification


368
14:41:50,080 --> 14:41:52,480
so as you can see in the caption it says


369
14:41:52,480 --> 14:41:57,596
get the confirmation email but don't confirm yet because we kind of need to


370
14:41:57,596 --> 14:42:00,956
have a look at a problem that we have in our application


371
14:42:00,956 --> 14:42:06,480
so um now let's see if we can log in so what


372
14:42:06,480 --> 14:42:10,480
i'm going to do is to go back on the screen from the verify


373
14:42:10,480 --> 14:42:14,560
email go back to the register view and instead of doing a registration again go


374
14:42:14,560 --> 14:42:18,480
to the login view now use your current uh


375
14:42:18,480 --> 14:42:22,720
like the new user that you just created but you haven't confirmed the email use


376
14:42:22,720 --> 14:42:28,956
the credentials of that user and say gmail.com and foobar as


377
14:42:28,956 --> 14:42:33,596
and then press the login button you'll see now we've ended up in the


378
14:42:33,596 --> 14:42:38,720
main ui of the application and that is problematic because


379
14:42:38,720 --> 14:42:43,200
any user just like i did can go to the register view then they will go to the


380
14:42:43,200 --> 14:42:48,796
confirmation view automatically they say okay i got a confirmation email and then


381
14:42:48,796 --> 14:42:52,400
they don't confirm the email they press the back button to go to the registry


382
14:42:52,400 --> 14:42:56,000
view again and from registry google they go to the login view and then they log


383
14:42:56,000 --> 14:42:59,756
in so because you see in our login view


384
14:42:59,756 --> 14:43:03,520
and here in this code right after signing with email and


385
14:43:03,520 --> 14:43:08,796
password we are not verifying that the user has actually verified their email


386
14:43:08,796 --> 14:43:13,276
address we're just saying sign in and firebase says all right sign in great


387
14:43:13,276 --> 14:43:17,680
the email and password match an entry in the authentication database i'm good to


388
14:43:17,680 --> 14:43:21,276
go and then we're just saying push to notes wrap so


389
14:43:21,276 --> 14:43:25,436
that is a problem um that we have that we need to fix in the


390
14:43:25,436 --> 14:43:29,116
next chapter okay but for now we've got a lot of code i


391
14:43:29,116 --> 14:43:34,640
can see all the files are changed so let's commit our code and tag it like


392
14:43:34,640 --> 14:43:37,596
what we're doing in other chapters as well


393
14:43:37,596 --> 14:43:41,200
gonna go to the terminal i'm going to change the screen layout a little bit so


394
14:43:41,200 --> 14:43:44,720
you see it better increase the size of the


395
14:43:44,720 --> 14:43:49,916
views so you see it even better and you can see the previous tag was


396
14:43:49,916 --> 14:43:54,400
step 6. now let's have a look at the status of our code and i can see there's


397
14:43:54,400 --> 14:44:00,080
lots of changes modified you can always issue the command g apa


398
14:44:00,080 --> 14:44:04,560
which i call gopa and that will show you all your changes but i'm just gonna say


399
14:44:04,560 --> 14:44:09,520
git commit sorry good at all i'm going to say git commit and we said


400
14:44:09,520 --> 14:44:12,956
that we're going to commit this as step 7 okay


401
14:44:12,956 --> 14:44:20,080
and push those changes to github and i'm going to also tag it as step 7


402
14:44:20,080 --> 14:44:26,080
so like that step seven and then i'm just gonna say git push tags


403
14:44:26,080 --> 14:44:29,840
all right fantastic now as the caption says here we need to get


404
14:44:29,840 --> 14:44:33,040
ready for the next chapter and as you can see it says user needs to verify


405
14:44:33,040 --> 14:44:37,040
email before going to the main ui because that is as i explained there is


406
14:44:37,040 --> 14:44:40,640
a problem that we have which we haven't addressed yet but it's quite easy to


407
14:44:40,640 --> 14:44:44,240
address as you'll see in the next chapter so


408
14:44:44,240 --> 14:44:48,320
uh i'll see you there hello everyone and welcome to chapter 23


409
14:44:48,320 --> 14:44:51,756
of this vlog course as you saw in the previous chapter we talked about


410
14:44:51,756 --> 14:44:57,436
cleaning up our registration flow so that when we tap on registration or the


411
14:44:57,436 --> 14:45:02,560
register button we actually send an email confirmation to the user and we


412
14:45:02,560 --> 14:45:06,640
saw that we go to the email confirmation view and before we even get there we


413
14:45:06,640 --> 14:45:11,360
then receive our email confirmation in our inbox so that all worked very well


414
14:45:11,360 --> 14:45:15,840
except for the fact that now a user who hasn't registered who hasn't verified


415
14:45:15,840 --> 14:45:20,080
their email account can still end up in the main ui of our application and


416
14:45:20,080 --> 14:45:24,160
that's what we're going to fix in this chapter so


417
14:45:24,160 --> 14:45:28,320
as the title shows here or as the caption shows


418
14:45:28,320 --> 14:45:31,520
here what we need to do is to ensure that


419
14:45:31,520 --> 14:45:34,160
we first before we continue with the chapter we need to make sure that we've


420
14:45:34,160 --> 14:45:38,320
logged out of the application so um now that you're in the main ui of the


421
14:45:38,320 --> 14:45:42,640
application let's just go in here and say log out and we're logging out to end


422
14:45:42,640 --> 14:45:46,560
up on the login screen i'm gonna i'm also gonna bring up visual


423
14:45:46,560 --> 14:45:52,080
studio code as we left it before so


424
14:45:52,080 --> 14:45:54,796
what we need to do now i'm going to close


425
14:45:54,796 --> 14:45:59,116
other tabs except for the login view excuse me


426
14:45:59,116 --> 14:46:02,560
and you can see in here right after we're signing with email and


427
14:46:02,560 --> 14:46:07,200
password right now we're sending the user to the notes route and we need to


428
14:46:07,200 --> 14:46:10,956
clean this up so what we need to do is just to get the


429
14:46:10,956 --> 14:46:14,560
current user from firebase and


430
14:46:14,560 --> 14:46:18,720
i'm gonna bring up the correct correct caption as well and


431
14:46:18,720 --> 14:46:21,916
i'm gonna change the screen layouts a little bit um


432
14:46:21,916 --> 14:46:26,320
so you see the code better so as you can see the caption says you


433
14:46:26,320 --> 14:46:30,480
need to add an if statement before you send the user to the main ui of the


434
14:46:30,480 --> 14:46:33,276
application and to make sure that the user is


435
14:46:33,276 --> 14:46:36,720
verified okay so in order to do that we also need to get


436
14:46:36,720 --> 14:46:39,916
the concurrent user so we can say final user


437
14:46:39,916 --> 14:46:45,276
is equal to firebase off instance firebase off instance


438
14:46:45,276 --> 14:46:50,080
and the current user okay so that's for the current user


439
14:46:50,080 --> 14:46:54,480
and we're going to say if the user optional you see we need to optionally


440
14:46:54,480 --> 14:47:00,000
access that email verified or false when we get a boolean value here either


441
14:47:00,000 --> 14:47:05,520
this returns a true or reuse false so in here we say user's email is


442
14:47:05,520 --> 14:47:12,080
verified otherwise user's email


443
14:47:13,040 --> 14:47:18,000
uh if i can spell it is not verified okay


444
14:47:18,000 --> 14:47:22,320
so now we have the two conditions in there


445
14:47:22,320 --> 14:47:26,320
so what we need to do now is to grab this code that we had from before you


446
14:47:26,320 --> 14:47:31,116
can see it sends the user to the main ui of the application and of course that


447
14:47:31,116 --> 14:47:36,880
needs to happen only if the user has basically


448
14:47:36,880 --> 14:47:43,116
verified their email address so grab that code and place it in user email is


449
14:47:43,116 --> 14:47:47,520
verified okay in here and in the case that the user email is


450
14:47:47,520 --> 14:47:50,720
not verified then we kind of need to do the same code


451
14:47:50,720 --> 14:47:55,276
but instead of going to the nodes route which is the main ui of the application


452
14:47:55,276 --> 14:47:59,436
we actually know we need to go to the verify email route if you remember from


453
14:47:59,436 --> 14:48:03,916
the previous chapters in a route start we've already defined verify email route


454
14:48:03,916 --> 14:48:06,400
okay so


455
14:48:06,400 --> 14:48:11,916
let's go back in our login view and then paste the same code except for going to


456
14:48:11,916 --> 14:48:17,680
notes route we're gonna go to and verify email routes okay


457
14:48:17,680 --> 14:48:20,796
so really all we have to do for this


458
14:48:20,796 --> 14:48:24,880
chapter so it's just cleaning up the logic one step at a time okay and that's


459
14:48:24,880 --> 14:48:28,160
okay some chapters are going to be long some chapters are going to be short it's


460
14:48:28,160 --> 14:48:32,796
actually quite refreshing even for me to have some shorter chapters so


461
14:48:32,796 --> 14:48:38,640
um now what we need to do is let's put this to test


462
14:48:38,640 --> 14:48:41,916
and as you can see what we're going to do is to remove that test user again


463
14:48:41,916 --> 14:48:45,596
from firebase console and test the entire flow again so i'm going to do a


464
14:48:45,596 --> 14:48:49,840
hot restart here and just to make sure that the state is


465
14:48:49,840 --> 14:48:54,240
completely restarted i'm gonna bring up a firebase console let's go to our


466
14:48:54,240 --> 14:48:57,680
application which for me is called mynotes flatware project


467
14:48:57,680 --> 14:49:01,116
i'm gonna go to authentication and remove that test user that i created


468
14:49:01,116 --> 14:49:04,880
here okay delete and do another hot restart just to make


469
14:49:04,880 --> 14:49:08,480
sure the cache is invalidated if there's any cache in there


470
14:49:08,480 --> 14:49:13,680
and what we need to do now is to just oops


471
14:49:13,680 --> 14:49:17,840
what we need to do now is to do kind of like the same registration again so i'm


472
14:49:17,840 --> 14:49:21,756
gonna go to the register page here and then i'm gonna go to your enter your


473
14:49:21,756 --> 14:49:24,480
email here and i'm going to


474
14:49:24,480 --> 14:49:29,040
write the same email address to register the user again through bar bath


475
14:49:29,040 --> 14:49:32,796
press the register button and we end up here then i'm going to do


476
14:49:32,796 --> 14:49:37,276
the same hacked as we did before uh press the back button and then go to the


477
14:49:37,276 --> 14:49:42,796
login screen i'm going to type the same credentials and say fubar baz if


478
14:49:42,796 --> 14:49:47,596
everything is worked according to our plan upon pressing the login button the


479
14:49:47,596 --> 14:49:52,320
code is going to end up in here saying that the user's email is not verified


480
14:49:52,320 --> 14:49:55,200
and it's going to remove the login route from


481
14:49:55,200 --> 14:50:00,240
from the stack and push the verify email route on the screen okay so both


482
14:50:00,240 --> 14:50:03,916
and that is exactly what we're getting here you can see we're going to the


483
14:50:03,916 --> 14:50:09,916
verify email view as we planned okay as i mentioned this chapter was a


484
14:50:09,916 --> 14:50:14,080
short one and that's actually really good so what we need to do now is to


485
14:50:14,080 --> 14:50:17,200
focus on what we're gonna do in the next chapter as you can see it says our


486
14:50:17,200 --> 14:50:21,360
authentication logic is all over the ui and we need to make a service for the


487
14:50:21,360 --> 14:50:24,796
authentication you see up until this point we've been working


488
14:50:24,796 --> 14:50:29,040
with firebase directly in the source code in that we've been like writing


489
14:50:29,040 --> 14:50:35,276
firebase auth code pretty much in our ui now you may think that well that's okay


490
14:50:35,276 --> 14:50:38,000
i mean if you're if you don't come from a


491
14:50:38,000 --> 14:50:41,756
software development background you may think that that is fine and it should as


492
14:50:41,756 --> 14:50:44,880
long as it works but


493
14:50:44,880 --> 14:50:48,160
the software development industry has shown us over and over again that the


494
14:50:48,160 --> 14:50:53,276
saying of oh if it if it's working if it's not broken don't fix it that that


495
14:50:53,276 --> 14:50:58,240
doesn't that doesn't really apply to all cases as we've seen uh in the case of


496
14:50:58,240 --> 14:51:03,116
for instance log 4j uh it was working but then there was a security flying and


497
14:51:03,116 --> 14:51:06,400
everybody had to go out to their code base and fix everything so we're


498
14:51:06,400 --> 14:51:10,560
entirely still of the weekends so the code works


499
14:51:10,560 --> 14:51:15,680
but there's a problem with it in that here you have your user interface so the


500
14:51:15,680 --> 14:51:20,240
code is quite high level it's like literally the user is here and then we


501
14:51:20,240 --> 14:51:25,116
have our user interface here and then we have like the code that we've written


502
14:51:25,116 --> 14:51:29,436
and like a little bit more low level like our if statements and then firebase


503
14:51:29,436 --> 14:51:33,116
is sitting all the way down here and we're like exposing this firebase layer


504
14:51:33,116 --> 14:51:38,400
all the way to our ui layers the ui is talking directly with a layer of the


505
14:51:38,400 --> 14:51:41,436
code that is so level that they shouldn't have direct connection with


506
14:51:41,436 --> 14:51:44,796
each other so if you're not from a software


507
14:51:44,796 --> 14:51:47,520
development background this may be a little bit alien to you but software


508
14:51:47,520 --> 14:51:50,400
developers really like to make sure things are


509
14:51:50,400 --> 14:51:53,520
com liking their own compartments


510
14:51:53,520 --> 14:51:56,480
so what we need to do is in order to get


511
14:51:56,480 --> 14:52:00,240
ready for the next chapter is just get a good cup of coffee or tea because the


512
14:52:00,240 --> 14:52:02,560
next chapter is actually going to be a long one and it's going to be a


513
14:52:02,560 --> 14:52:07,596
complicated one but i'm gonna do my best to explain all the concepts as good as i


514
14:52:07,596 --> 14:52:11,360
can but just know that the next chapter is gonna be a


515
14:52:11,360 --> 14:52:16,560
big one okay so uh grab your refreshments juice tea


516
14:52:16,560 --> 14:52:21,916
water coffee whatever you want and i'll see you in the next chapter


517
14:52:21,916 --> 14:52:26,320
hello and welcome to chapter 24 of this flutter course in the previous chapter


518
14:52:26,320 --> 14:52:30,880
we talked about ensuring that the user's email is verified before he or she can


519
14:52:30,880 --> 14:52:33,680
proceed with the with


520
14:52:33,680 --> 14:52:38,240
by before the user is able to go to the main ui of the application


521
14:52:38,240 --> 14:52:43,680
um and what we are going to do now is take a step back from developing our ui


522
14:52:43,680 --> 14:52:50,240
and logic of the application by creating an auth service


523
14:52:50,240 --> 14:52:53,116
so i'm going to provide you with a caption


524
14:52:53,116 --> 14:52:56,480
here and as you can see it says auth provider auth service meaning an author


525
14:52:56,480 --> 14:53:01,200
provide abstract class on an off service now


526
14:53:01,200 --> 14:53:04,640
if we have a look at the code that we've created so far let me bring up visual


527
14:53:04,640 --> 14:53:08,640
studio code so you can see it on the screen like i do here um i'm going to


528
14:53:08,640 --> 14:53:12,880
increase the size so you see better and i'm going to bring up the


529
14:53:12,880 --> 14:53:17,840
application as well so we can see it side by side


530
14:53:17,840 --> 14:53:22,160
i have three screens here so it's a lot it's a little bit difficult to juggle


531
14:53:22,160 --> 14:53:24,796
um excuse me


532
14:53:24,796 --> 14:53:28,400
so i'm going to change the screen layout so you see the code better


533
14:53:28,400 --> 14:53:31,840
if you look here we have our


534
14:53:31,840 --> 14:53:35,276
um three views login


535
14:53:35,276 --> 14:53:39,040
register and verify email view okay or we actually have four views the other


536
14:53:39,040 --> 14:53:44,796
one is the main ui of the application um which we have right now created in


537
14:53:44,796 --> 14:53:48,400
here notes view excuse me


538
14:53:48,400 --> 14:53:51,520
but if you have a look at the login view you can see one of the things that we're


539
14:53:51,520 --> 14:53:54,240
doing immediately as we go to the login view is


540
14:53:54,240 --> 14:53:56,560
um is not actually immediately by pressing


541
14:53:56,560 --> 14:54:00,956
the login button we're talking with firebase off signing in we are kind of


542
14:54:00,956 --> 14:54:05,200
doing the same thing talking with firebase by uh in the register view you


543
14:54:05,200 --> 14:54:08,160
can see firebase auth instance create user


544
14:54:08,160 --> 14:54:11,916
and we also have firebase in our verify email


545
14:54:11,916 --> 14:54:17,360
so you can see here we are actually importing firebase auth firebase so


546
14:54:17,360 --> 14:54:21,680
if you're not uh like if you don't have a software development background from


547
14:54:21,680 --> 14:54:25,680
from before you may think well this is this is fine very important firebase but


548
14:54:25,680 --> 14:54:30,400
you also need to know that firebase is kind of like a low-level abstraction


549
14:54:30,400 --> 14:54:34,400
layer that um that is talking to the firebase backend


550
14:54:34,400 --> 14:54:38,320
and providing you with a lot of high-level uh


551
14:54:38,320 --> 14:54:42,080
functionality but those high-level functionalities at the firebase level


552
14:54:42,080 --> 14:54:45,360
they're kind of high level but if you think about


553
14:54:45,360 --> 14:54:49,520
that firebase is a dependency that we're bringing into


554
14:54:49,520 --> 14:54:53,436
our application that's talking with firebase back-end in itself is


555
14:54:53,436 --> 14:54:58,400
low-level compared with our ui so if you think that


556
14:54:58,400 --> 14:55:03,116
the ui code is here then what we are doing is that we're like saying here is


557
14:55:03,116 --> 14:55:07,680
firebase and then the ui is talking directly with the firebase libraries and


558
14:55:07,680 --> 14:55:11,756
functionalities and in the in the eyes of a like a software


559
14:55:11,756 --> 14:55:14,880
developer has been doing this for a while this is not a good idea simply


560
14:55:14,880 --> 14:55:20,640
because we're missing a little bit of a layer in between the ui and firebase


561
14:55:20,640 --> 14:55:24,400
which abstracts away the firebase functionality from the ui of the


562
14:55:24,400 --> 14:55:28,640
application and as we talked about it before um it


563
14:55:28,640 --> 14:55:32,640
is possible that in the future you may want to allow for instance apple login


564
14:55:32,640 --> 14:55:38,640
or google login or sign in with facebook etc various options for signing in and


565
14:55:38,640 --> 14:55:44,160
if you look at um the console at firebase you'll see immediately that


566
14:55:44,160 --> 14:55:48,880
you have various ways of authenticating a user at the moment we've enabled sign


567
14:55:48,880 --> 14:55:53,116
in method for email and password but you also have the ability to add a new


568
14:55:53,116 --> 14:55:56,796
provider you can as you can see google facebook and these as you can see


569
14:55:56,796 --> 14:56:01,200
they're called providers a new provider and that is what we're going to do in


570
14:56:01,200 --> 14:56:06,480
this chapter of our flashlight course as well so


571
14:56:06,480 --> 14:56:11,040
we're going to take firebase and think of it as an authentication


572
14:56:11,040 --> 14:56:14,240
provider okay so we're going to create a class


573
14:56:14,240 --> 14:56:19,200
which i believe we're calling at the moment firebase auth provider


574
14:56:19,200 --> 14:56:23,520
but we're gonna say that this firebase auth provider comes from another class


575
14:56:23,520 --> 14:56:29,436
which is called auth provider so what we're gonna do then is gonna say okay


576
14:56:29,436 --> 14:56:35,596
any auth provider that needs to that our application can work with is expected to


577
14:56:35,596 --> 14:56:40,240
have certain functionalities and certain properties okay such as the


578
14:56:40,240 --> 14:56:44,240
current auth provider should be able to return the current user the author


579
14:56:44,240 --> 14:56:47,680
provider should be able to log a user in um


580
14:56:47,680 --> 14:56:51,840
log user out register users send an email verification so these


581
14:56:51,840 --> 14:56:57,116
few basic functionalities so that will be our abstract offs


582
14:56:57,116 --> 14:57:02,320
provider class and then we will create another class which is as we call it it


583
14:57:02,320 --> 14:57:06,480
will be the concrete implementation of that abstract class so think of the


584
14:57:06,480 --> 14:57:12,720
abstract class as kind of like a as it's it is our um contract


585
14:57:12,720 --> 14:57:16,640
so we're saying any authentication provider such as google facebook etc


586
14:57:16,640 --> 14:57:20,240
will need to conform to the functionality that we specified in this


587
14:57:20,240 --> 14:57:23,756
abstract class okay then we will go and develop a concrete


588
14:57:23,756 --> 14:57:27,040
implementation of that abstract class and we will call it firebase auth


589
14:57:27,040 --> 14:57:31,436
provider and we will actually place the real implementation of our


590
14:57:31,436 --> 14:57:35,040
authentication for firebase such as creating a user


591
14:57:35,040 --> 14:57:41,520
logging user in etc etc in that concrete implementation okay


592
14:57:41,520 --> 14:57:45,360
and then what we will do also we will create another class which we will call


593
14:57:45,360 --> 14:57:51,596
it i believe we call it off service and its goal


594
14:57:51,596 --> 14:57:56,080
and in this course it won't do so much what it will do it will just


595
14:57:56,080 --> 14:58:01,200
take a provider such as a firebase auth provider a google auth provider and it


596
14:58:01,200 --> 14:58:05,840
will just expose the functionalities of that provider to the outside world and


597
14:58:05,840 --> 14:58:10,956
and the goal of this is that so we will have our ui talking


598
14:58:10,956 --> 14:58:15,596
with that service and that service will talk to a provider which which is the


599
14:58:15,596 --> 14:58:19,436
firebase auth provider and that firebase auth provider will talk to firebase so


600
14:58:19,436 --> 14:58:23,276
we're right now we have firebase ui


601
14:58:23,276 --> 14:58:27,200
but after after the end of this chapter we will have firebase


602
14:58:27,200 --> 14:58:32,560
um firebase auth provider auth service and then the ui so we will


603
14:58:32,560 --> 14:58:38,480
have two layers sitting in in between and you may actually correctly think


604
14:58:38,480 --> 14:58:41,756
that well this is a lot of work why do we need that but


605
14:58:41,756 --> 14:58:46,560
for me i if i wanted this course to be just another course where i show you how


606
14:58:46,560 --> 14:58:50,080
to include firebase then it wouldn't be to be honest with you worth actually


607
14:58:50,080 --> 14:58:53,680
doing yet another course about firebase and flutter because there are lots of


608
14:58:53,680 --> 14:58:57,916
courses available maybe not maybe not courses that go through so much details


609
14:58:57,916 --> 14:59:02,720
as i am going but i still believe that my job here is not just to make you a


610
14:59:02,720 --> 14:59:07,116
developer but also make you a good developer where you take some extra


611
14:59:07,116 --> 14:59:10,160
steps in order to make your code a little bit better and this is why you


612
14:59:10,160 --> 14:59:14,080
will actually notice as as you get more into software development and working


613
14:59:14,080 --> 14:59:18,240
with others in inside teams which you may not be doing at the moment but when


614
14:59:18,240 --> 14:59:20,956
you get your first job a software developer you'll understand that other


615
14:59:20,956 --> 14:59:24,320
software developers are actually taking some extra steps in order to make their


616
14:59:24,320 --> 14:59:29,200
code a little bit easier and better to maintain so that's what we're gonna do


617
14:59:29,200 --> 14:59:34,240
in our code okay so um


618
14:59:34,240 --> 14:59:37,436
that was uh the intro for this chapter what we


619
14:59:37,436 --> 14:59:41,756
need to do is to um first think about how we're handling


620
14:59:41,756 --> 14:59:46,080
our um exceptions if you look inside the i mean in the


621
14:59:46,080 --> 14:59:49,596
verify view we're not taking care of exceptions as such maybe that's


622
14:59:49,596 --> 14:59:53,360
something we'll need to do as well but if you look at the login screen for


623
14:59:53,360 --> 14:59:58,560
instance we're having here a try block and then when it gets to firebase off


624
14:59:58,560 --> 15:00:03,756
exception we're handling user not found wrong password and then if anything else


625
15:00:03,756 --> 15:00:07,680
happens we just say show error so here there are two


626
15:00:07,680 --> 15:00:12,840
specific errors off errors that we're handling wrong password and the user not


627
15:00:12,840 --> 15:00:18,320
found and if we go to the register view you will also see we


628
15:00:18,320 --> 15:00:25,116
have weak password email already used and invalid email all right


629
15:00:25,116 --> 15:00:30,400
so these are some of the exceptions that we'll need to handle in our um in our


630
15:00:30,400 --> 15:00:34,956
application but right now as you can see our ui is going directly to firebase


631
15:00:34,956 --> 15:00:40,080
auth exception and it's like importing firebase auth exception which is


632
15:00:40,080 --> 15:00:45,200
created inside let's have a look firebase off accession src interface


633
15:00:45,200 --> 15:00:48,560
it's in um


634
15:00:49,276 --> 15:00:54,720
it's in one of the files which i believe is accessible through firebase auth so


635
15:00:54,720 --> 15:00:59,040
if you go to firebase off that probably imports all the exceptions


636
15:00:59,040 --> 15:01:04,400
as well there we go here it is so


637
15:01:04,400 --> 15:01:08,560
so our ui shouldn't really know anything about firebase off by the end of this


638
15:01:08,560 --> 15:01:13,756
chapter so let's take the first step here then and let's go and create our


639
15:01:13,756 --> 15:01:17,276
as you can see a new file under lib


640
15:01:17,276 --> 15:01:20,520
under folder called services auth and then off


641
15:01:20,520 --> 15:01:23,436
exceptions.dart so i'm gonna do that right now


642
15:01:23,436 --> 15:01:27,276
i'm going to collapse these and let's go under lay down you can see that we don't


643
15:01:27,276 --> 15:01:30,796
have con right now we have constants utilities and views so we don't have


644
15:01:30,796 --> 15:01:34,480
anything called services so let me right click on lib and say new file and you


645
15:01:34,480 --> 15:01:38,080
can do the same thing and in here just enter the entire path


646
15:01:38,080 --> 15:01:42,640
so say services off and then we say off


647
15:01:42,640 --> 15:01:45,180
exceptions.dart okay


648
15:01:45,180 --> 15:01:50,160
[Music] oh that is our new file that we created


649
15:01:50,160 --> 15:01:52,956
in there and what we need to do is to go and


650
15:01:52,956 --> 15:01:58,400
define all those exceptions so let's begin by saying that we need a new


651
15:01:58,400 --> 15:02:02,796
exception called user not found off exception and if you remember user not


652
15:02:02,796 --> 15:02:05,436
found is something that we're handling here do you remember


653
15:02:05,436 --> 15:02:09,756
firebase off exception in the login view and if we cannot find that user we're


654
15:02:09,756 --> 15:02:14,956
just showing an error saying show error dialog so let's define an exception for


655
15:02:14,956 --> 15:02:22,560
that and i'm going to say class user not found and off


656
15:02:25,436 --> 15:02:30,400
and i'm going to say implements exception so this is a typical way of


657
15:02:30,400 --> 15:02:34,796
creating exception classes in your in your application that you say


658
15:02:34,796 --> 15:02:38,956
and here is my own class that is that for instance


659
15:02:38,956 --> 15:02:42,796
represents an exception and it's it's good practice just to say that it


660
15:02:42,796 --> 15:02:46,796
implements an existing exception exception you can see here by command


661
15:02:46,796 --> 15:02:51,436
pressing on it you can see it goes to flutter bin cache core exception start


662
15:02:51,436 --> 15:02:55,116
so it is already imported by default you don't have to import any specific file


663
15:02:55,116 --> 15:02:57,916
in order to get access to the exception class


664
15:02:57,916 --> 15:03:04,320
so it's it suffices that you just implement that class okay


665
15:03:04,320 --> 15:03:08,240
so now let's go ahead and implement the next


666
15:03:08,240 --> 15:03:13,916
exception as the title as the caption says here wrong password off exception


667
15:03:13,916 --> 15:03:17,916
and that is also handled inside our login view


668
15:03:17,916 --> 15:03:21,596
wrong password right here so


669
15:03:21,596 --> 15:03:27,520
i'm just gonna go and kind of like copy that code and in here i'm just gonna say


670
15:03:27,520 --> 15:03:32,640
wrong password auth exception


671
15:03:33,360 --> 15:03:37,916
all right what else are we handling here nothing else in the login view at least


672
15:03:37,916 --> 15:03:41,520
so that's that's really good so i'm just going to close the login view


673
15:03:41,520 --> 15:03:46,240
for now and save this file okay


674
15:03:46,320 --> 15:03:50,080
so let's now start taking care of some of the exceptions that we're handling in


675
15:03:50,080 --> 15:03:53,840
our register view and let's go to register view and you'll see here that


676
15:03:53,840 --> 15:03:57,680
the first section exception that we're handling is called weak password


677
15:03:57,680 --> 15:04:00,956
so i'm going to put a comment in here and


678
15:04:00,956 --> 15:04:04,240
a comment in here i'm going to say login exceptions


679
15:04:04,240 --> 15:04:08,400
and and register exceptions okay


680
15:04:08,400 --> 15:04:11,916
so as the caption says let's create a class called weak password auth


681
15:04:11,916 --> 15:04:16,880
exception gonna copy this code from here and i'm gonna say weak


682
15:04:16,880 --> 15:04:22,560
password off exception so that's for the register views weak


683
15:04:22,560 --> 15:04:27,916
password the next one is email already in use so that's what the caption says


684
15:04:27,916 --> 15:04:32,640
here as well so let's go and copy this and i'm gonna say email already in use


685
15:04:32,640 --> 15:04:35,436
auth exception


686
15:04:35,596 --> 15:04:38,880
okay so now we have the password and email


687
15:04:38,880 --> 15:04:44,480
already and use exceptions and let's have a look


688
15:04:44,480 --> 15:04:49,276
and we also have the invalid email auth exception


689
15:04:49,276 --> 15:04:53,360
which i don't think i had planned for but let's go and implement that as well


690
15:04:53,360 --> 15:05:00,320
so let's say invalid email author okay


691
15:05:00,796 --> 15:05:05,840
okay um now what we also need to do is to


692
15:05:05,840 --> 15:05:10,480
define a few other exceptions as you remember from


693
15:05:10,480 --> 15:05:15,116
register view we also have the case of an else where


694
15:05:15,116 --> 15:05:18,720
we basically say something else happened here it's an off exception but something


695
15:05:18,720 --> 15:05:22,880
else may have happened that we haven't handled with this code or we may also


696
15:05:22,880 --> 15:05:26,880
have another cat statement here that catches like generic exceptions and


697
15:05:26,880 --> 15:05:31,680
we're we're doing the same thing as you can see the code here um and let me


698
15:05:31,680 --> 15:05:36,000
change the screen layout so you see it better i'm gonna go to


699
15:05:36,000 --> 15:05:39,436
the login view as well because we're doing the exact same thing in the login


700
15:05:39,436 --> 15:05:43,680
view in that upon getting a firebase auth exception


701
15:05:43,680 --> 15:05:48,240
this code then we also have an else statement even


702
15:05:48,240 --> 15:05:53,116
in there so we're saying if the code is not like handled by us it may be another


703
15:05:53,116 --> 15:05:58,880
code in that case also show the show error dialog or in that case show error


704
15:05:58,880 --> 15:06:02,400
dialogue and we're also doing a catch like a


705
15:06:02,400 --> 15:06:05,756
generic catch as well so we need kind of like an


706
15:06:05,756 --> 15:06:08,796
exception that handles all those cases so


707
15:06:08,796 --> 15:06:14,000
an unknown code during the firebase off exception and an unknown exception so


708
15:06:14,000 --> 15:06:17,680
we're gonna create a generic exception all right


709
15:06:17,680 --> 15:06:21,040
i'm gonna change the screen layout a little bit


710
15:06:21,040 --> 15:06:24,796
um like that i'm gonna go to my notes okay


711
15:06:24,796 --> 15:06:30,080
so let's just in here say generic exceptions


712
15:06:30,160 --> 15:06:35,276
um and i'm gonna bring


713
15:06:35,276 --> 15:06:40,640
this one up as well today i'm gonna bring this one first so


714
15:06:40,640 --> 15:06:44,240
let's go ahead and create a generic auth exception i'm gonna copy this code from


715
15:06:44,240 --> 15:06:47,756
here i'm going to say generic auth exception


716
15:06:47,756 --> 15:06:50,480
okay and what we also need to do is to


717
15:06:50,480 --> 15:06:55,040
provide this thing user not logged in


718
15:06:55,040 --> 15:07:00,400
off exception and you will you will know now that


719
15:07:00,400 --> 15:07:03,276
um i mean you will need to know why we're


720
15:07:03,276 --> 15:07:07,040
actually having a use or not logged in off exception and


721
15:07:07,040 --> 15:07:12,640
this will be an exception that our um that our firebase provider will be able


722
15:07:12,640 --> 15:07:15,200
to throw if


723
15:07:15,200 --> 15:07:21,276
the user is null after registering that user for instance


724
15:07:21,276 --> 15:07:26,000
so let's say that we tell our auth provider we say register a user with


725
15:07:26,000 --> 15:07:30,640
this email and password and no exception happens nothing


726
15:07:30,640 --> 15:07:34,640
so we the application thinks that all right everything went as expected but


727
15:07:34,640 --> 15:07:38,240
what if the user that we access


728
15:07:38,240 --> 15:07:42,796
at firebase auth is null in that case our auth provider


729
15:07:42,796 --> 15:07:46,160
should be able to handle that and send an exception saying that oh i couldn't


730
15:07:46,160 --> 15:07:50,720
find this user or this user isn't logged in so let's create that exception as


731
15:07:50,720 --> 15:07:55,200
well so i'm just going to say user not logged in exception so let's


732
15:07:55,200 --> 15:07:58,080
just say class implement


733
15:07:58,080 --> 15:08:02,000
exception okay so user not logged in off exception


734
15:08:02,000 --> 15:08:05,436
and i'm gonna save that as well


735
15:08:06,720 --> 15:08:10,880
all right that was a lot of work now we have created all those files oh sorry


736
15:08:10,880 --> 15:08:13,756
maybe you didn't actually see the code that i wrote i don't like having


737
15:08:13,756 --> 15:08:17,360
captions up all the time but i also think captions are so important so that


738
15:08:17,360 --> 15:08:20,880
you always know what we're working with but the downside of having these


739
15:08:20,880 --> 15:08:24,320
captions at the bottom left of the screen is that sometimes they hide what


740
15:08:24,320 --> 15:08:27,680
i'm typing so i'm doing my best really to


741
15:08:27,680 --> 15:08:31,756
catch those and catch that issue and if i see that


742
15:08:31,756 --> 15:08:34,720
happening i'll i'm gonna bring the screen up like this so you see it but


743
15:08:34,720 --> 15:08:39,276
sometimes i may be missing that i apologize for that so let's let's say


744
15:08:39,276 --> 15:08:43,276
that and now we've implemented all our exceptions


745
15:08:43,276 --> 15:08:47,200
and as you can see in the captions it says we need an auth user we shouldn't


746
15:08:47,200 --> 15:08:51,360
expose firebase's user to the ui and this to be honest with you is the


747
15:08:51,360 --> 15:08:58,240
same story as we had for our exceptions the ui code should not at all be working


748
15:08:58,240 --> 15:09:03,436
with firebase the ui code should be so high level and so abstracted from the


749
15:09:03,436 --> 15:09:08,400
rest of your application that it shouldn't even at all know how it is


750
15:09:08,400 --> 15:09:11,276
functioning you're just giving it different


751
15:09:11,276 --> 15:09:15,200
providers and services and it should be calling those services and providers not


752
15:09:15,200 --> 15:09:19,840
really knowing how they're tied together and at the moment you can see our login


753
15:09:19,840 --> 15:09:24,160
view it's like where let's go in here


754
15:09:24,160 --> 15:09:29,680
you can see here in login view and for me it's on line 67 for you maybe in a


755
15:09:29,680 --> 15:09:33,916
different line but we're after calling the sign in with email and password


756
15:09:33,916 --> 15:09:36,560
function which we also shouldn't be doing


757
15:09:36,560 --> 15:09:39,840
but what we're doing after that is we're


758
15:09:39,840 --> 15:09:44,400
getting the current user from firebase and this user is of type you can see


759
15:09:44,400 --> 15:09:49,916
let's go in here and see it's of type user so if i go put the type in here and


760
15:09:49,916 --> 15:09:54,956
command click on it you'll see this user is part of firebase auth you see there's


761
15:09:54,956 --> 15:10:01,436
a fun there's a class called user so we are all we were also like exposing a


762
15:10:01,436 --> 15:10:05,840
firebase user to our ui and that is not a good idea


763
15:10:05,840 --> 15:10:10,880
so as a caption says here we shouldn't expose firebase's user to the ui so we


764
15:10:10,880 --> 15:10:16,480
need to have our own user that abstracts away the functionality


765
15:10:16,480 --> 15:10:21,916
or that that the current user at firebase level has okay


766
15:10:21,916 --> 15:10:26,240
so let's go ahead and do that so


767
15:10:26,240 --> 15:10:32,240
we're going to create an off user dart file in lib services auth a file called


768
15:10:32,240 --> 15:10:36,240
off user so i'm going to remove or sorry i'm


769
15:10:36,240 --> 15:10:39,596
going to close all the files that i've created and under


770
15:10:39,596 --> 15:10:44,560
services auth i'm going to then create an off user


771
15:10:44,560 --> 15:10:50,956
so i'm going to say off user.dark and in this off user then we need to


772
15:10:50,956 --> 15:10:55,520
basically start working with firebase in this case so i'm going to go to my notes


773
15:10:55,520 --> 15:10:58,796
just to ensure i'm telling you everything that i'm um that i plan to


774
15:10:58,796 --> 15:11:03,680
tell you all right so let's go in here and import


775
15:11:03,680 --> 15:11:08,880
firebase it's user import package


776
15:11:09,116 --> 15:11:13,200
firebase and is it in


777
15:11:13,200 --> 15:11:18,000
firebase auth i believe and then we're gonna say show user okay and as i've


778
15:11:18,000 --> 15:11:23,040
mentioned before this is a great way of just ensuring that you're not exposing


779
15:11:23,040 --> 15:11:28,720
too much of a packages classes to your current workspace except what you're


780
15:11:28,720 --> 15:11:33,360
saying is that firebase auth is isn't it maybe an entire dart file with its


781
15:11:33,360 --> 15:11:37,116
structures maybe thousands of classes now i'm exaggerating but a lot of


782
15:11:37,116 --> 15:11:41,916
classes but you are only interested in the user class okay


783
15:11:41,916 --> 15:11:45,040
so you could also like say


784
15:11:45,040 --> 15:11:48,320
as firebase


785
15:11:48,320 --> 15:11:52,956
off like that and then you would say show user and that will allow you so if


786
15:11:52,956 --> 15:11:56,000
i say test then you will be able to say


787
15:11:56,000 --> 15:12:00,000
firebaseauth.user you can also do that if you if you


788
15:12:00,000 --> 15:12:04,640
prefer to for instance ha prefix the user in this case that comes from


789
15:12:04,640 --> 15:12:09,520
firebase with the actual place that it comes from you could also use as


790
15:12:09,520 --> 15:12:14,160
some people may like it and i also do but i haven't planned to do that in in


791
15:12:14,160 --> 15:12:18,160
this particular file so do it if you want to the way


792
15:12:18,160 --> 15:12:21,360
that i'm doing it here so you can follow along with the steps that i'm providing


793
15:12:21,360 --> 15:12:25,200
for you in this course without diverging from


794
15:12:25,200 --> 15:12:30,160
from the point okay now that we've done the um


795
15:12:30,160 --> 15:12:33,200
import what we need to do as a caption in the


796
15:12:33,200 --> 15:12:37,596
case we need to create the actual class so let's say class off user


797
15:12:37,596 --> 15:12:45,276
and in here what we need is a field called is email verified now remember


798
15:12:45,276 --> 15:12:49,520
right now all we need from our off user is to know whether that email is


799
15:12:49,520 --> 15:12:53,360
verified or not so if you go for instance to our login view


800
15:12:53,360 --> 15:12:56,796
you can see that we have this code here and


801
15:12:56,796 --> 15:13:00,160
that signs a user in with email and password and right after that gets the


802
15:13:00,160 --> 15:13:04,560
user and all it does with that user says email verified


803
15:13:04,560 --> 15:13:08,240
and we're doing the same thing in register view i believe so let's go to


804
15:13:08,240 --> 15:13:12,080
register view and you can see in here and it says


805
15:13:12,080 --> 15:13:15,916
actually there we're not doing anything with the email verified all we're doing


806
15:13:15,916 --> 15:13:19,916
is just saying a send email verification so sorry about that so it's in login


807
15:13:19,916 --> 15:13:25,680
screen okay so let's go in our off user in here and say it has a property called


808
15:13:25,680 --> 15:13:32,720
is email verified okay so i'm gonna say final and bull is email


809
15:13:32,720 --> 15:13:36,640
and you saw that firebase has implemented this function this uh


810
15:13:36,640 --> 15:13:41,840
property as email verified i personally prefer to call boolean functions boolean


811
15:13:41,840 --> 15:13:47,520
getters in this case like a property of a class with is wherever i see that fit


812
15:13:47,520 --> 15:13:51,756
it's just because it makes a lot more sense for me at least to say user dot is


813
15:13:51,756 --> 15:13:55,680
email verified rather than saying user.email verified


814
15:13:55,680 --> 15:14:00,640
it just makes it more like complete grammatically is blah blah verified or


815
15:14:00,640 --> 15:14:04,320
is that so that's the reason that we're


816
15:14:04,320 --> 15:14:07,916
diverging a little bit okay um


817
15:14:07,916 --> 15:14:12,480
now you see this in here and we're saying it's email verified you can get


818
15:14:12,480 --> 15:14:17,200
help from visual studio code to create a constructor for final fields


819
15:14:17,200 --> 15:14:20,080
and even if you don't want to do that you could always just type it by hand


820
15:14:20,080 --> 15:14:25,840
you can say off user self is email verified sorry this is email verified


821
15:14:25,840 --> 15:14:31,436
and since this class it only has a property that you can set upon


822
15:14:31,436 --> 15:14:34,956
initialization and you're not changing it because it's a final field


823
15:14:34,956 --> 15:14:40,796
excuse me you can make your constructor a const


824
15:14:40,796 --> 15:14:45,276
excuse me again and it would also be good if you could


825
15:14:45,276 --> 15:14:49,596
basically let's say immutable as another try defining


826
15:14:49,596 --> 15:14:53,840
undefined i believe you actually have to import foundation in here


827
15:14:53,840 --> 15:14:59,520
now immutable basically is but immutable here i don't think we've


828
15:14:59,520 --> 15:15:04,160
talked about that before but it's just like an annotation telling that this


829
15:15:04,160 --> 15:15:08,956
class and any subclasses of this class are going to be immutable meaning that


830
15:15:08,956 --> 15:15:13,520
their internals are never going to be changed upon initialization so if you


831
15:15:13,520 --> 15:15:20,880
then go and create for instance class my off user and say extends the auth user


832
15:15:20,880 --> 15:15:26,240
and then you'll have a bull um let's say in here and you create a


833
15:15:26,240 --> 15:15:31,360
constructor for it so let's create a constructor for it so boom okay


834
15:15:31,360 --> 15:15:36,320
prefer declaring what is a const okay then we say const then you say okay well


835
15:15:36,320 --> 15:15:39,840
i want a boolean flag in here bull is blah


836
15:15:39,840 --> 15:15:42,400
and um


837
15:15:42,400 --> 15:15:45,520
yeah bull is blocked


838
15:15:45,520 --> 15:15:49,116
now you see it says null not non-nullable instance flab but it must


839
15:15:49,116 --> 15:15:53,840
be initialized let's just initialize it to false and and it says can't define a


840
15:15:53,840 --> 15:15:57,596
cons constructor okay then we're not going to make it a cons constructor and


841
15:15:57,596 --> 15:16:01,756
now you see that little warning here it says this class or a class that this


842
15:16:01,756 --> 15:16:06,720
class inherits from is marked as immutable but one or more of its


843
15:16:06,720 --> 15:16:11,756
instance feels aren't final so now you see what immutable means it


844
15:16:11,756 --> 15:16:17,116
tells dart that this class and all its subclasses need to be immune immutable


845
15:16:17,116 --> 15:16:22,320
they cannot have any fields that change so by removing this field then you get


846
15:16:22,320 --> 15:16:25,276
rid of that little warning and you can make this


847
15:16:25,276 --> 15:16:30,480
cons and the error completely goes away so now you know what immutable means


848
15:16:30,480 --> 15:16:34,956
okay all right great now we created that is


849
15:16:34,956 --> 15:16:38,796
email verified at a cons constructor for our off user


850
15:16:38,796 --> 15:16:44,240
let's go to the next point the next point as you can see here it


851
15:16:44,240 --> 15:16:50,400
says we need a factory constructor that creates our


852
15:16:50,400 --> 15:16:55,436
auth user from a firebase user and factory constructors are really useful


853
15:16:55,436 --> 15:17:00,720
for this purpose in that you have let's say object x and you want to


854
15:17:00,720 --> 15:17:06,000
create an object y from that instead of you manually gluing things in some sort


855
15:17:06,000 --> 15:17:10,480
of a middle layer saying now i take the object x and add some blah blah and fuse


856
15:17:10,480 --> 15:17:14,640
it together and then put object y you can put that responsibility on object y


857
15:17:14,640 --> 15:17:19,116
and saying that you need to be able to initialize yourself or construct an


858
15:17:19,116 --> 15:17:22,720
instance of yourself from this object and this is like a typical pattern that


859
15:17:22,720 --> 15:17:27,276
you'll see everywhere so um well everywhere everywhere but where


860
15:17:27,276 --> 15:17:31,840
you have the ability to do that so that's what we're gonna do now with a


861
15:17:31,840 --> 15:17:36,880
factory constructor so let's say we have a factory constructor here


862
15:17:36,880 --> 15:17:42,320
we'll say off user and we say from firebase okay as the caption says then


863
15:17:42,320 --> 15:17:47,200
we take a firebase user in here like that and then we say what we will


864
15:17:47,200 --> 15:17:52,240
do in here we will actually create an instance of our own class an off user


865
15:17:52,240 --> 15:17:56,160
given that user okay so let's say that we create


866
15:17:56,160 --> 15:18:00,796
an off user in here and a lot of user and it's email


867
15:18:00,796 --> 15:18:04,000
verified comes from user email verified like that


868
15:18:04,000 --> 15:18:07,116
all right so this shouldn't be they shouldn't be that difficult to


869
15:18:07,116 --> 15:18:10,240
understand so this creates this goes into


870
15:18:10,240 --> 15:18:15,680
this constructor you can see and it takes the email verified value of


871
15:18:15,680 --> 15:18:20,240
the firebase user and places it in this class so all we did is just we kind of


872
15:18:20,240 --> 15:18:24,240
like copied a firebase user and


873
15:18:24,240 --> 15:18:27,840
we made a copy of it into our own off user


874
15:18:27,840 --> 15:18:32,880
okay so we're not exposing firebase's user and all of its


875
15:18:32,880 --> 15:18:37,756
properties to our user interface


876
15:18:39,040 --> 15:18:44,160
all right that was a lot of information now let's talk about an auth provider as


877
15:18:44,160 --> 15:18:46,640
i mentioned in the beginning of this chapter


878
15:18:46,640 --> 15:18:52,080
and as you saw in the firebase console you will have the possibility to add


879
15:18:52,080 --> 15:18:54,880
various auth providers to your application when you're working with


880
15:18:54,880 --> 15:18:59,360
firebase so such as google and apple facebook


881
15:18:59,360 --> 15:19:03,200
and many many more okay an email and password combination like we're doing so


882
15:19:03,200 --> 15:19:07,200
all of those are providers what we need to do now is to create an


883
15:19:07,200 --> 15:19:14,160
alt provider class that encapsulates every provider that we may add in the


884
15:19:14,160 --> 15:19:19,520
future and creates a nice interface for them says every provider that our


885
15:19:19,520 --> 15:19:24,560
application can work with should conform to this particular interface okay


886
15:19:24,560 --> 15:19:29,116
so let's go ahead and take care of that now and i can see here we're going to


887
15:19:29,116 --> 15:19:32,080
create that file on the lib services auth


888
15:19:32,080 --> 15:19:38,080
off provider so we have lib services off but we don't have auth provider files so


889
15:19:38,080 --> 15:19:44,640
let's let's right click on auth and say off provider dart


890
15:19:46,320 --> 15:19:49,436
and go to my notes


891
15:19:49,680 --> 15:19:53,840
so what we're going to do in here then is


892
15:19:53,840 --> 15:19:59,276
since our off uh provider is going to work with our


893
15:19:59,276 --> 15:20:02,240
um it's for instance


894
15:20:02,240 --> 15:20:05,360
the the functions that we're going to provide for our auth provider are for


895
15:20:05,360 --> 15:20:10,560
instance a getter that gets the current user so that's not a function it's just


896
15:20:10,560 --> 15:20:14,640
a getter the way we're actually doing it in here if you see let me go to login


897
15:20:14,640 --> 15:20:18,560
view and you'll see in login view here this


898
15:20:18,560 --> 15:20:22,956
thing at the moment say firebase auth instance current user this is a getter


899
15:20:22,956 --> 15:20:28,880
so this is a property and returns the firebase user what we want is for our


900
15:20:28,880 --> 15:20:34,080
auth provider to also be able to provide us with the current user now remember


901
15:20:34,080 --> 15:20:40,080
we've abstracted away the firebase user with our own auth user which we just


902
15:20:40,080 --> 15:20:46,000
created okay so what we need is this abstract class that can return an


903
15:20:46,000 --> 15:20:51,840
instance of our off user okay so for that we need to import this off


904
15:20:51,840 --> 15:20:56,160
user into this dart file so let's just say import


905
15:20:56,160 --> 15:20:59,276
package this application that i've created as


906
15:20:59,276 --> 15:21:02,080
you can see in the title it's called my notes


907
15:21:02,080 --> 15:21:08,956
so let's go to my notes services auth and then auth user so that's the


908
15:21:08,956 --> 15:21:13,116
import statement as you can see in the caption i've written package xxx and


909
15:21:13,116 --> 15:21:17,200
that's where you need to put the name of your package in this case for me is my


910
15:21:17,200 --> 15:21:19,520
notes


911
15:21:20,796 --> 15:21:26,720
all right that's great now let's go and create an abstract class so i've


912
15:21:26,720 --> 15:21:31,756
mentioned this twice before but our auth provider dart file is not gonna have


913
15:21:31,756 --> 15:21:36,240
really is not gonna have any logic it's an


914
15:21:36,240 --> 15:21:40,956
abstract class though abstract classes in dart can contain logic but in this


915
15:21:40,956 --> 15:21:44,560
case our abstract class is just going to be a protocol or you may know it as


916
15:21:44,560 --> 15:21:50,080
interface or you may also know it as well an abstract class so let's go ahead


917
15:21:50,080 --> 15:21:55,040
and create that let's say abstract class auth provider


918
15:21:55,040 --> 15:22:01,116
and so the abstract class creation is done what we need to do is now give it


919
15:22:01,116 --> 15:22:05,596
like the ability to return the current off user okay so as the caption says


920
15:22:05,596 --> 15:22:10,880
we're going to say off user and get current user okay


921
15:22:10,880 --> 15:22:14,480
so we're saying any author provider whether it works with email password


922
15:22:14,480 --> 15:22:18,560
whether it's a google auth provider whether it's an apple facebook twitter


923
15:22:18,560 --> 15:22:22,956
whatever it needs to be able to optionally return the current currently


924
15:22:22,956 --> 15:22:26,080
authenticated user and that's what this optional site is


925
15:22:26,080 --> 15:22:31,276
here for okay and then what we will also need to do is


926
15:22:31,276 --> 15:22:33,680
to allow it to


927
15:22:33,680 --> 15:22:39,680
be able to log a user in okay so we're going to say we will have a function


928
15:22:39,680 --> 15:22:43,436
that completes in the future


929
15:22:43,436 --> 15:22:48,956
and returns an off user and it says log in


930
15:22:48,956 --> 15:22:53,520
like this okay and now we have to think what does this


931
15:22:53,520 --> 15:22:58,400
login actually require well in our case it requires email and password so let's


932
15:22:58,400 --> 15:23:02,000
just put email and password we're thinking that every author provider that


933
15:23:02,000 --> 15:23:06,240
we're writing is going to have an email and password combination of some sort


934
15:23:06,240 --> 15:23:10,560
you could say id and password but i'm just going to go with email and password


935
15:23:10,560 --> 15:23:14,480
for now okay so let's make these required parameters as well so i'm going


936
15:23:14,480 --> 15:23:18,240
to put curly brackets here and curly bracket here i'm going to say required


937
15:23:18,240 --> 15:23:22,000
stream email and then a required stream password like


938
15:23:22,000 --> 15:23:24,560
this okay


939
15:23:24,560 --> 15:23:28,720
and a semicolon at the end of that command s to save the file so dark


940
15:23:28,720 --> 15:23:35,436
formatter can do its magic and the reason where you see if we go to


941
15:23:35,436 --> 15:23:39,200
author sorry if you go to our login screen again


942
15:23:39,200 --> 15:23:43,840
and in here we say sign in with user and password you can see that it always


943
15:23:43,840 --> 15:23:49,040
returns a user credential now you may you may think how can i always return a


944
15:23:49,040 --> 15:23:53,116
user credential if the current email and password are actually incorrect and they


945
15:23:53,116 --> 15:23:57,276
don't belong to a valid user well the way that firebase is handling is that if


946
15:23:57,276 --> 15:24:01,680
you say sign in with email and password if you can grab the current user if he


947
15:24:01,680 --> 15:24:05,040
can't sign in that user with the information that you provide it returns


948
15:24:05,040 --> 15:24:09,360
it otherwise it fails with an exception meaning that it's saying that as long as


949
15:24:09,360 --> 15:24:13,276
you call me and there's no exception i will give you user credential if there


950
15:24:13,276 --> 15:24:18,160
is an exception well you need to handle that so that is a great way to avoid


951
15:24:18,160 --> 15:24:23,200
having functions let me close the off user as well avoid having functions that


952
15:24:23,200 --> 15:24:27,040
do like this that option on your return user so


953
15:24:27,040 --> 15:24:32,560
do your work in your functions return the user and return the object


954
15:24:32,560 --> 15:24:37,436
that you promised if you can't do that throw an error so you don't have to do


955
15:24:37,436 --> 15:24:42,640
this do this kind of a optional return okay


956
15:24:43,596 --> 15:24:48,480
for a the login function now we need to also have a function that can create a


957
15:24:48,480 --> 15:24:52,480
user so that imagine that it's for the sign up or


958
15:24:52,480 --> 15:24:56,240
um yeah what else do we call it uh register


959
15:24:56,240 --> 15:25:00,560
yeah so let's call it a create user so we say


960
15:25:00,560 --> 15:25:06,240
this also returns a auth user and we call it creates user like this


961
15:25:06,240 --> 15:25:09,680
and this also has all these parameters so i'm just going to copy and paste this


962
15:25:09,680 --> 15:25:14,480
you don't have to do that twice and a semicolon at the end


963
15:25:14,480 --> 15:25:20,080
all right guard formatter do its thing and then let's go and


964
15:25:20,080 --> 15:25:24,880
and create a function that allows us then to log a user out because that's


965
15:25:24,880 --> 15:25:28,720
what we're doing in the main ui of the application okay


966
15:25:28,720 --> 15:25:32,320
the log out it's not going to return any value as you can see in the caption here


967
15:25:32,320 --> 15:25:37,680
just a future void so we say future void log out just like that


968
15:25:37,680 --> 15:25:42,880
all right so that was simple and also we will need a function that


969
15:25:42,880 --> 15:25:47,040
can send an email verification okay so this one's also very easy it's just a


970
15:25:47,040 --> 15:25:52,840
future void and as you can see in captions we're calling it send email


971
15:25:52,840 --> 15:25:57,520
verification all right so


972
15:25:57,520 --> 15:26:00,240
how was that okay


973
15:26:00,240 --> 15:26:03,360
as i mentioned our office provider at the moment is


974
15:26:03,360 --> 15:26:06,840
just an abstract class so it's


975
15:26:06,840 --> 15:26:11,520
dictating an interface for any authentication provider that we're gonna


976
15:26:11,520 --> 15:26:16,400
add to our application we but just so you know we are only


977
15:26:16,400 --> 15:26:20,160
going to add an email author provider okay


978
15:26:20,160 --> 15:26:23,840
or sorry a firebase author provider


979
15:26:23,840 --> 15:26:28,720
but this way by creating an abstract class with an author provider as a name


980
15:26:28,720 --> 15:26:32,080
and then you create a concrete class called firebase auth provider you're


981
15:26:32,080 --> 15:26:36,560
able to in the future to extend this and add more and more auth providers all of


982
15:26:36,560 --> 15:26:40,956
which will follow the same interface okay so that's the goal


983
15:26:40,956 --> 15:26:46,000
but we're only in this in this course are gonna use firebase auth provider


984
15:26:46,000 --> 15:26:50,720
so uh just so you know as the caption says go ahead and create


985
15:26:50,720 --> 15:26:56,080
a a file called firebase auth provider in your services auth folder i'm gonna


986
15:26:56,080 --> 15:27:00,720
right click here and i'm gonna say oops uh and say new file i'm gonna call it


987
15:27:00,720 --> 15:27:04,916
firebase off dot provider.net


988
15:27:05,200 --> 15:27:09,360
now let's go in here and say um i'm gonna go to my notes a little bit


989
15:27:09,360 --> 15:27:13,436
here uh like that okay so this is gonna be like


990
15:27:13,436 --> 15:27:19,916
the juiciest part of um of this chapter we are actually going to


991
15:27:19,916 --> 15:27:25,200
abstract the way firebase authentication into our own provider so expect this


992
15:27:25,200 --> 15:27:29,840
file to grow a little bit in size i can see my notes it's going to go to about


993
15:27:29,840 --> 15:27:36,000
100 lines of code but that's okay too so and um we can just get started with it


994
15:27:36,000 --> 15:27:39,040
and so as you can see in the caption we need to


995
15:27:39,040 --> 15:27:44,640
import a few of files auth user auth provider and off exceptions we need


996
15:27:44,640 --> 15:27:48,560
auth user because this sorry actually let me first


997
15:27:48,560 --> 15:27:52,080
explain why we need to import auth provider because our firebase auth


998
15:27:52,080 --> 15:27:56,080
provider is going to be a concrete implementation of the file auth provider


999
15:27:56,080 --> 15:27:59,360
or the class auth provider that we just created so that's the reason for that


1000
15:27:59,360 --> 15:28:02,240
import the os user import is going to be


1001
15:28:02,240 --> 15:28:05,116
because as you can see in the auth provider


1002
15:28:05,116 --> 15:28:09,840
the login and create user functions they need to return an off user so that's why


1003
15:28:09,840 --> 15:28:13,596
we need to import off users so that our provider can return instances of that


1004
15:28:13,596 --> 15:28:16,480
okay and last but not least we also need to


1005
15:28:16,480 --> 15:28:20,640
import auth exceptions because remember our firebase auth provider is also going


1006
15:28:20,640 --> 15:28:23,680
to abstract away all the authentication


1007
15:28:23,680 --> 15:28:28,080
errors and exceptions that otherwise happen at the firebase level into our


1008
15:28:28,080 --> 15:28:33,360
own exceptions that we've created here off exceptions okay so let me go


1009
15:28:33,360 --> 15:28:38,160
ahead and first import off user so package


1010
15:28:38,160 --> 15:28:44,320
and this application called my notes and we have services auth


1011
15:28:44,320 --> 15:28:49,116
and then we have off user okay so i'm gonna import that


1012
15:28:49,116 --> 15:28:53,436
and i'm gonna copy this file then and this line and the next one is gonna be


1013
15:28:53,436 --> 15:28:57,040
the off provider and as you can see in the captures we


1014
15:28:57,040 --> 15:29:01,360
also have to import auth exceptions


1015
15:29:02,160 --> 15:29:05,840
so those are the three imports


1016
15:29:06,000 --> 15:29:09,680
now since we have our own imports


1017
15:29:09,680 --> 15:29:12,880
and this file is going to talk directly with firebase we also need to import


1018
15:29:12,880 --> 15:29:17,360
firebase of course so and let's go ahead and import


1019
15:29:17,360 --> 15:29:20,880
and i'm going to actually copy that code so i don't have to type all of it


1020
15:29:20,880 --> 15:29:23,520
because it's a little bit boring but you can see


1021
15:29:23,520 --> 15:29:28,240
in the captions at least what you need to import the firebase off and you need


1022
15:29:28,240 --> 15:29:32,480
to also import firebase off exception okay


1023
15:29:32,480 --> 15:29:36,720
great so that's our imports


1024
15:29:36,720 --> 15:29:40,720
um now what we need to do is to create the actual class and


1025
15:29:40,720 --> 15:29:43,916
um as you can see it's going to be called firebase all provider and


1026
15:29:43,916 --> 15:29:48,400
implements auth provider which is our own class so let's say firebase


1027
15:29:48,400 --> 15:29:53,276
auth provider implements a provider just like that okay and now


1028
15:29:53,276 --> 15:29:56,480
you can see you get an error same missing concrete implementation i'm


1029
15:29:56,480 --> 15:30:01,200
going to change the layout of the screen so you see the code in its entirety


1030
15:30:01,200 --> 15:30:05,276
and then what we need to do is to implement you see those function


1031
15:30:05,276 --> 15:30:09,596
functions and getters that auth provider abstract class


1032
15:30:09,596 --> 15:30:14,240
says that every class that implements it needs to implement those things as well


1033
15:30:14,240 --> 15:30:18,640
so you may try to do those things by hand but i absolutely


1034
15:30:18,640 --> 15:30:24,720
i i i'm not at all a fan of doing things by hand sorry about that so i prefer to


1035
15:30:24,720 --> 15:30:27,756
get help from the editor to complete these things so i'm just going to say


1036
15:30:27,756 --> 15:30:31,840
command dot and make class firebase off abstract


1037
15:30:31,840 --> 15:30:36,640
create five missing overrides okay so there we go so visual studio code


1038
15:30:36,640 --> 15:30:39,756
created all those functions in here and you can see in all of them it just says


1039
15:30:39,756 --> 15:30:44,080
throw unimplemented error great stuff


1040
15:30:44,080 --> 15:30:48,560
i'm gonna decrease the size of the font here go back to the


1041
15:30:48,560 --> 15:30:53,680
same layout that we had before so the first thing that we need to do in


1042
15:30:53,680 --> 15:30:59,200
here let's go ahead and implement this current user okay


1043
15:30:59,200 --> 15:31:03,680
so this is going to have a lot of not a lot but it's going to have a bit


1044
15:31:03,680 --> 15:31:07,360
of logic so i'm going to do this instead of being with a pointer


1045
15:31:07,360 --> 15:31:12,560
and let's go ahead in here and try to get that user so let's say


1046
15:31:12,560 --> 15:31:17,680
you see our job is now to get the firebase user and turn it into an off


1047
15:31:17,680 --> 15:31:22,240
user remember our off user had a factory constructor so we need to call that


1048
15:31:22,240 --> 15:31:28,880
factory constructor okay so let's just say final user is equal to firebase off


1049
15:31:28,880 --> 15:31:32,080
our firebase and auth


1050
15:31:32,080 --> 15:31:35,520
instance and then we say current user


1051
15:31:35,520 --> 15:31:40,160
and then we say if user is not null


1052
15:31:40,320 --> 15:31:45,116
and we need to create an instance of it as off users so we just say return


1053
15:31:45,116 --> 15:31:54,320
off user from firebase user okay otherwise we return null like this so


1054
15:31:54,320 --> 15:31:58,320
if firebase says there's a user then we create an off user out of that and we


1055
15:31:58,320 --> 15:32:01,360
just return it


1056
15:32:02,560 --> 15:32:06,400
okay that was for a current user it wasn't so much of code to be honest with


1057
15:32:06,400 --> 15:32:10,400
you now what we need to do is to take care


1058
15:32:10,400 --> 15:32:14,240
of create user which is this function right here


1059
15:32:14,240 --> 15:32:19,276
so create user is going to be a little bit thicker to be honest so


1060
15:32:19,276 --> 15:32:24,560
let's go ahead and first do a little bit of formatting in


1061
15:32:24,560 --> 15:32:29,200
here so i like to always append a comma at the end of the last


1062
15:32:29,200 --> 15:32:33,200
parameter of my function so that when i do dark formatter


1063
15:32:33,200 --> 15:32:37,840
or dart format it's going to break all these parameters into their own


1064
15:32:37,840 --> 15:32:41,520
lines okay because before it looked like this and it's not so clean in my eyes at


1065
15:32:41,520 --> 15:32:44,720
least it's a preference thing okay so


1066
15:32:44,720 --> 15:32:50,160
in here what we need to do is to create basically uh


1067
15:32:50,160 --> 15:32:55,276
a user with uh firebase so i'm going to put this entire thing in


1068
15:32:55,276 --> 15:33:01,360
in a try block and then we're going to catch firebase off exception


1069
15:33:01,360 --> 15:33:08,000
and on firebase off exception catch e okay


1070
15:33:08,000 --> 15:33:11,520
so just like that and then we're going to have a generic


1071
15:33:11,520 --> 15:33:16,080
cache block in here like this


1072
15:33:17,360 --> 15:33:21,840
all right uh now what we need to do in create user in the tri-state main


1073
15:33:21,840 --> 15:33:25,276
statement we need to actually tell firebase that we want to create a new


1074
15:33:25,276 --> 15:33:30,000
user so let's say firebase off


1075
15:33:30,000 --> 15:33:33,840
instant and then we say create user with email and password okay so we have the


1076
15:33:33,840 --> 15:33:38,320
email here and the password and we can see those parameters already there so we


1077
15:33:38,320 --> 15:33:40,560
don't have to do anything so


1078
15:33:40,560 --> 15:33:45,200
um but what we need to do here is you can first actually see yeah this


1079
15:33:45,200 --> 15:33:48,480
function needs to return a value we're gonna fix this so don't worry about that


1080
15:33:48,480 --> 15:33:52,956
but we also need to await on this because remember creating a user or


1081
15:33:52,956 --> 15:33:56,400
email password is not a function that just returns immediately and this is one


1082
15:33:56,400 --> 15:33:59,276
of the things that is absolutely beautiful about dart in that in the


1083
15:33:59,276 --> 15:34:03,040
interface we didn't actually say that this function has to be async but you


1084
15:34:03,040 --> 15:34:07,436
can in this concrete implementation make this function async so it's absolutely


1085
15:34:07,436 --> 15:34:11,436
beautiful so async is not the part of the signature of the function but it has


1086
15:34:11,436 --> 15:34:14,956
more to do with the internals of that function so in order to call this


1087
15:34:14,956 --> 15:34:19,200
function with an await you see if we put a weight here we get an error we need to


1088
15:34:19,200 --> 15:34:24,880
make this function async all right so great stuff


1089
15:34:25,360 --> 15:34:30,956
all right so after doing that what we're going to do is to get the current user


1090
15:34:30,956 --> 15:34:35,840
if the current user is there then we're just gonna return the current user if


1091
15:34:35,840 --> 15:34:40,240
the current user after creating a user or email and password and no exceptions


1092
15:34:40,240 --> 15:34:45,360
is not there then that is a bad sign and we need to return then one of our auth


1093
15:34:45,360 --> 15:34:48,880
exceptions called user not logged in off exception okay


1094
15:34:48,880 --> 15:34:52,720
so i'm going to close this so let's go in here and say final


1095
15:34:52,720 --> 15:34:57,596
user is get or just user is the current user


1096
15:34:57,596 --> 15:35:01,840
remember we already have a getter for a current user right here


1097
15:35:01,840 --> 15:35:04,640
okay and it just gets the current user from


1098
15:35:04,640 --> 15:35:10,956
firebase so we say here's the user if the user is available there


1099
15:35:10,956 --> 15:35:15,360
is not null then just return the user


1100
15:35:15,360 --> 15:35:20,320
otherwise you should throw a user not found or i think that's what we call the


1101
15:35:20,320 --> 15:35:23,436
user not logged in


1102
15:35:23,756 --> 15:35:27,956
auth exception all right


1103
15:35:28,560 --> 15:35:32,560
that's for the creation of the user if everything goes fine except for this


1104
15:35:32,560 --> 15:35:36,160
part now we need to go to our firebase auth


1105
15:35:36,160 --> 15:35:39,680
exception and we need to handle a few things um


1106
15:35:39,680 --> 15:35:44,880
so if you look at where in our register view


1107
15:35:44,880 --> 15:35:51,040
in here we are handling weak password email already in use and invalid email


1108
15:35:51,040 --> 15:35:55,596
so let's just copy these three things okay actually these four things because


1109
15:35:55,596 --> 15:35:59,276
we have an else block in there as well okay


1110
15:35:59,276 --> 15:36:03,916
so i'm gonna copy that code just do the same thing please so go to your registry


1111
15:36:03,916 --> 15:36:08,000
and copy that code go back to your firebase auth provider inside the


1112
15:36:08,000 --> 15:36:11,756
firebase off exception where you're catching that


1113
15:36:11,756 --> 15:36:15,916
paste that code but remove everything that has anything to do with the show


1114
15:36:15,916 --> 15:36:21,840
error dialog okay so at least we have if and else statements okay


1115
15:36:21,840 --> 15:36:26,080
like this so you should end up with a code that looks like this


1116
15:36:26,080 --> 15:36:29,596
now where there is a weak password we are


1117
15:36:29,596 --> 15:36:33,276
actually going to throw our own error so we're going to say throw


1118
15:36:33,276 --> 15:36:38,080
weak password off exception it is an email already in use we're


1119
15:36:38,080 --> 15:36:42,000
going to throw email already and use authexception


1120
15:36:42,000 --> 15:36:47,520
in case on invalid email throw invalid email off exception and if there is any


1121
15:36:47,520 --> 15:36:51,596
other code that we don't know about we're just going to throw a generic auth


1122
15:36:51,596 --> 15:36:54,080
exception


1123
15:36:54,560 --> 15:36:59,840
and also if there is a final catch basically meaning that by calling the


1124
15:36:59,840 --> 15:37:03,916
create user an email with email and password if there is any other exception


1125
15:37:03,916 --> 15:37:08,400
other than firebase auth exception we also need to handle that and throw


1126
15:37:08,400 --> 15:37:13,360
a generic auth exception there as well okay


1127
15:37:13,360 --> 15:37:19,040
a lot of code but hopefully this makes our ui code


1128
15:37:19,040 --> 15:37:23,360
easier to read okay so we're doing this for a good purpose


1129
15:37:23,360 --> 15:37:25,916
great stuff that's for our


1130
15:37:25,916 --> 15:37:30,720
create user i'm gonna fall create user uh if it allows me to fold the entire


1131
15:37:30,720 --> 15:37:35,360
create user poof and i'm gonna fold current user as well so this is a


1132
15:37:35,360 --> 15:37:37,840
technique that you can or not a technique that's just a trick you can do


1133
15:37:37,840 --> 15:37:41,360
in your editor if it supports folding and unfolding just to make sure that it


1134
15:37:41,360 --> 15:37:45,200
looks a little bit cleaner okay because now that you've written create user you


1135
15:37:45,200 --> 15:37:49,200
may not be directly interested in all its details you may just want to know


1136
15:37:49,200 --> 15:37:52,640
that it's there okay


1137
15:37:53,276 --> 15:37:57,916
all right the next thing we need to do is to implement send email verification


1138
15:37:57,916 --> 15:38:01,436
so let's find that function and i can see it's right here send email


1139
15:38:01,436 --> 15:38:04,400
verification i'm gonna scroll a little bit up so you see


1140
15:38:04,400 --> 15:38:09,200
like that i'm gonna go to my notes as well okay


1141
15:38:09,200 --> 15:38:14,560
so what we need to do then is to incent email verification what we need


1142
15:38:14,560 --> 15:38:18,956
is to also mark this as async because it's going to call an asynchronous


1143
15:38:18,956 --> 15:38:23,116
function on firebase as well okay and we need to


1144
15:38:23,116 --> 15:38:26,956
call the send email verification function on the firebase user remember


1145
15:38:26,956 --> 15:38:30,796
our user doesn't have that functionality our user only has is email verified


1146
15:38:30,796 --> 15:38:36,240
property so in here let's get the firebase user so i'm going to say user


1147
15:38:36,240 --> 15:38:39,596
is firebase off


1148
15:38:39,596 --> 15:38:42,840
instance current user and we say


1149
15:38:42,840 --> 15:38:50,320
if user is not null then we call that function so we say await user send email


1150
15:38:50,320 --> 15:38:53,596
verification i remember i think this was the future of void so that's why we're


1151
15:38:53,596 --> 15:38:58,880
doing a weight on it and that is why we have the async tag in here okay now


1152
15:38:58,880 --> 15:39:04,080
if the user is nil then we're gonna just say user is not logged in you cannot


1153
15:39:04,080 --> 15:39:08,080
send an email verification from user who's not logged in okay so then you


1154
15:39:08,080 --> 15:39:12,640
throw user not logged in off exception


1155
15:39:12,640 --> 15:39:17,520
okay so that's our send email verification


1156
15:39:17,520 --> 15:39:21,680
function let's then fold this function as well so


1157
15:39:21,680 --> 15:39:25,520
we don't see its internals as the caption says now we need to go


1158
15:39:25,520 --> 15:39:30,480
and implement a login login is just as important as creating a user i'm going


1159
15:39:30,480 --> 15:39:34,480
to start by putting a comma at the end of password parameter here and command s


1160
15:39:34,480 --> 15:39:38,796
in order to save it and in here in the login function we're


1161
15:39:38,796 --> 15:39:41,756
going to do something very similar to what we're doing in the register


1162
15:39:41,756 --> 15:39:45,756
function i can see in my notes by doing a try


1163
15:39:45,756 --> 15:39:50,320
and then we say on firebase off exception


1164
15:39:50,320 --> 15:39:53,360
and catch e


1165
15:39:53,360 --> 15:39:55,840
and then we'll say catch


1166
15:39:55,840 --> 15:40:02,400
any other exception okay so let's in in here then start by um


1167
15:40:02,400 --> 15:40:06,840
telling firebase that we want to log in with those credentials so let's say


1168
15:40:06,840 --> 15:40:10,720
firebase auth instance and then we say uh


1169
15:40:10,720 --> 15:40:15,756
sign in with email and password so there's a function in there okay


1170
15:40:15,756 --> 15:40:19,840
and i'm gonna put a semicolon at the end so you can see the


1171
15:40:19,840 --> 15:40:22,480
code all right so that's what we're doing but


1172
15:40:22,480 --> 15:40:26,720
remember again these functions are asynchronous so you can't just call that


1173
15:40:26,720 --> 15:40:31,200
function and expect it to work it's a future of user credential okay so make


1174
15:40:31,200 --> 15:40:34,840
your function asynchronous and then await on this


1175
15:40:34,840 --> 15:40:39,040
function so we're going to do something very similar similar to what we're doing


1176
15:40:39,040 --> 15:40:43,596
in register sorry in the create user in in that we're saying final user is


1177
15:40:43,596 --> 15:40:47,756
current user i hope you can see that code yes i can


1178
15:40:47,756 --> 15:40:54,160
see that you can see so in this in this uh code we're gonna take the exact same


1179
15:40:54,160 --> 15:40:58,240
code that we wrote in um create user so i'm gonna expand that you


1180
15:40:58,240 --> 15:41:02,160
can see here i'm gonna copy that code and you could


1181
15:41:02,160 --> 15:41:06,796
do the same what we're doing is just making sure after signing in then there


1182
15:41:06,796 --> 15:41:12,400
is a current user okay copy that code gonna fold this then i'm gonna bring it


1183
15:41:12,400 --> 15:41:16,480
to the login and right after sign in with email and password i'm gonna paste


1184
15:41:16,480 --> 15:41:20,080
that code okay so that's that part now


1185
15:41:20,080 --> 15:41:24,080
you see now we have firebase authexception again to handle just like


1186
15:41:24,080 --> 15:41:29,596
we did with create so let's go to your um login view


1187
15:41:29,596 --> 15:41:34,880
and have a look at which and which exceptions we were handling so


1188
15:41:34,880 --> 15:41:39,596
i can see here we're handling these i'm actually going to copy that entire


1189
15:41:39,596 --> 15:41:44,160
code from login view you see a firebase off exception username wrong password


1190
15:41:44,160 --> 15:41:49,680
etc and including the catch any other exception block right here copy that


1191
15:41:49,680 --> 15:41:54,796
code and bring it to your firebase auth provider


1192
15:41:54,796 --> 15:41:57,756
and replace let me actually see how it looks


1193
15:41:57,756 --> 15:42:02,560
like yeah replace all of this with that okay


1194
15:42:02,560 --> 15:42:07,596
and then remove your weights as we did before to be honest with you this this


1195
15:42:07,596 --> 15:42:10,956
is just a lot of big talk for saying that we


1196
15:42:10,956 --> 15:42:14,640
um need some code from another place to


1197
15:42:14,640 --> 15:42:18,796
bring here so your code now should look like this so it says on firebase off


1198
15:42:18,796 --> 15:42:22,720
exception and we're handling user not found wrong password off exceptions from


1199
15:42:22,720 --> 15:42:30,000
firebase and a generic catch block okay so in the case of a user not found a


1200
15:42:30,000 --> 15:42:35,116
firebase office session we're going to say throw user not found alt exception


1201
15:42:35,116 --> 15:42:38,796
in the case of a wrong password we're going to say throw on password boss


1202
15:42:38,796 --> 15:42:42,000
exception and any other case that might occur here


1203
15:42:42,000 --> 15:42:45,756
we're just going to throw generic off exception


1204
15:42:45,756 --> 15:42:50,560
and in here as well we're going to say throw generic with exception


1205
15:42:50,560 --> 15:42:54,000
and thing i really like to do is you see in


1206
15:42:54,000 --> 15:42:58,320
dart it's not yet possible to say that i want to ignore a variable in this case


1207
15:42:58,320 --> 15:43:01,916
you can see that in this like where we have a catch


1208
15:43:01,916 --> 15:43:05,840
we actually have to pattern match against an exception and then we have to


1209
15:43:05,840 --> 15:43:09,520
assign a name to it and that name is called e inside this function so if i


1210
15:43:09,520 --> 15:43:13,040
type e you can see it's an object however as you can see in the body of


1211
15:43:13,040 --> 15:43:16,160
this function we're not actually interested in e at all we're not using


1212
15:43:16,160 --> 15:43:20,480
it so in in other languages it is possible to ignore like in javascript


1213
15:43:20,480 --> 15:43:25,756
python swift rust it is possible to ignore a variable and saying that hey


1214
15:43:25,756 --> 15:43:28,796
i'm not interested in this value by putting something called like an


1215
15:43:28,796 --> 15:43:33,040
underscore or something you can do the same thing in art the difference is that


1216
15:43:33,040 --> 15:43:36,796
in dart if you say underscore you're not actually ignoring it that variable is


1217
15:43:36,796 --> 15:43:40,956
also there but it's just called underscore in this case so you can see


1218
15:43:40,956 --> 15:43:45,916
you can still call to string on it so you may want to do it or you may just


1219
15:43:45,916 --> 15:43:49,276
want to leave it alone because you can see guard an analyzer it doesn't give


1220
15:43:49,276 --> 15:43:53,276
you an error of any kind saying that yeah your


1221
15:43:53,276 --> 15:43:57,200
pattern matching but you're not using it so it's up to you how you want to do it


1222
15:43:57,200 --> 15:44:00,720
and i like to do it like this


1223
15:44:01,040 --> 15:44:05,200
wow that was a lot of code um or maybe more like a lot of explanations so let's


1224
15:44:05,200 --> 15:44:08,796
go to login and fold that and as you can see in the caption now we have to take


1225
15:44:08,796 --> 15:44:12,160
care of the logout function and the caption also says that this function


1226
15:44:12,160 --> 15:44:16,560
needs to be asynchronous okay and you know why because we're going to


1227
15:44:16,560 --> 15:44:22,796
call a function on firebase in order to take care of the logouts


1228
15:44:22,796 --> 15:44:26,640
so in order for a user to be logged out the user should actually exist so let's


1229
15:44:26,640 --> 15:44:31,116
just say final user needs firebase off


1230
15:44:31,116 --> 15:44:34,560
instance and then we're going to say current user


1231
15:44:34,560 --> 15:44:40,880
and we say if user is not null and it's a user sign uh logout what's it


1232
15:44:40,880 --> 15:44:45,436
called or what's it called oh we have to tell a firebase off so we


1233
15:44:45,436 --> 15:44:50,880
then we say firebase off instance sign out


1234
15:44:50,880 --> 15:44:57,040
the weight on it okay otherwise we say throw user not


1235
15:44:57,040 --> 15:45:00,400
logged in so we're basically saying here that you


1236
15:45:00,400 --> 15:45:04,480
cannot log out a user if that user doesn't exist okay or that user isn't


1237
15:45:04,480 --> 15:45:06,956
logged in


1238
15:45:07,360 --> 15:45:11,040
all right lots of code lots of description but


1239
15:45:11,040 --> 15:45:16,796
that's okay we've now implemented an auth provider firebase auth provider


1240
15:45:16,796 --> 15:45:19,756
okay which is a concrete implementation of


1241
15:45:19,756 --> 15:45:24,480
auth provider now as the caption indicates here we


1242
15:45:24,480 --> 15:45:28,640
need an auth service


1243
15:45:28,840 --> 15:45:33,116
um now what is an auth service i mentioned this a little bit before but


1244
15:45:33,116 --> 15:45:38,240
an auth service is also going to implement auth provider


1245
15:45:38,240 --> 15:45:42,240
and in itself is going to take an instance


1246
15:45:42,240 --> 15:45:47,520
of an auth provider as well but as you'll see in this chapter and in


1247
15:45:47,520 --> 15:45:52,560
the rest of this um course you'll see that our


1248
15:45:52,560 --> 15:45:58,560
our auth service is really just the provider itself which is


1249
15:45:58,560 --> 15:46:02,640
exposing all the functionalities of the provider that we give it


1250
15:46:02,640 --> 15:46:07,596
and it's not and it has absolutely no other logic at the moment okay but the


1251
15:46:07,596 --> 15:46:12,240
reason we're doing that is for me to just to show you that you need to have


1252
15:46:12,240 --> 15:46:15,596
providers and then you need to have services that they talk to each other


1253
15:46:15,596 --> 15:46:20,480
and then this service can then expose more value to your user interface to


1254
15:46:20,480 --> 15:46:26,000
your ui code than the provider does that's usually the case that the service


1255
15:46:26,000 --> 15:46:30,000
fuses together a few other providers talk to few


1256
15:46:30,000 --> 15:46:34,400
providers and at the end it grabs the data fuses together and provides that


1257
15:46:34,400 --> 15:46:40,160
information to the ui now in our case that's not gonna be the case okay our


1258
15:46:40,160 --> 15:46:46,320
firebit our auth service is only going to talk with our the given auth provider


1259
15:46:46,320 --> 15:46:50,796
and expose all its functionalities to the ui but we're doing this exercise so


1260
15:46:50,796 --> 15:46:55,596
that you see how you can abstract away various bits and pieces of functionality


1261
15:46:55,596 --> 15:47:00,480
from the ui code so remember that that's the reason we have our auth service


1262
15:47:00,480 --> 15:47:06,080
which we're gonna soon create okay so as a caption in the case here let's


1263
15:47:06,080 --> 15:47:10,720
go ahead and create our odd service inside the auth folder here so auth and


1264
15:47:10,720 --> 15:47:15,840
i'm going to create a new file here i'm just going to call it all service


1265
15:47:16,640 --> 15:47:22,000
in this dart file then we need to create start creating our


1266
15:47:22,000 --> 15:47:26,400
auth service okay sorry gonna go to my notes in here as


1267
15:47:26,400 --> 15:47:30,560
well so what we need in here is to


1268
15:47:30,560 --> 15:47:34,720
import a few things we need to import our auth provider and an off user so i'm


1269
15:47:34,720 --> 15:47:39,116
not to explain this again so um package my notes


1270
15:47:39,116 --> 15:47:44,000
and we have services off and we have and we need to import auth


1271
15:47:44,000 --> 15:47:47,680
provider and copy this kind of code and then i'm


1272
15:47:47,680 --> 15:47:51,840
going to say off news user i believe


1273
15:47:52,160 --> 15:47:54,956
so um


1274
15:47:54,956 --> 15:47:59,360
so let's have a look in here in the captions


1275
15:48:00,160 --> 15:48:03,680
like that okay so we need to create now as you can


1276
15:48:03,680 --> 15:48:09,360
see we need to create an auth service that also implements auth provider okay


1277
15:48:09,360 --> 15:48:11,276
so um


1278
15:48:11,276 --> 15:48:14,560
if i look at the captions here why is auth service an author provider i've


1279
15:48:14,560 --> 15:48:19,116
already explained this to you but you can see it says but can have more logic


1280
15:48:19,116 --> 15:48:23,200
so that's the reason okay so don't forget that so let's go and create a


1281
15:48:23,200 --> 15:48:28,956
class of all service in here and it implements an off of the auth


1282
15:48:28,956 --> 15:48:33,680
provider um abstract class okay


1283
15:48:33,680 --> 15:48:37,596
now what you'll need to do what you need to know is that the auth service in


1284
15:48:37,596 --> 15:48:42,080
itself isn't going to be hard coded to use the firebase auth provider


1285
15:48:42,080 --> 15:48:46,160
what it's going to do is that it's going to actually take an audit provider from


1286
15:48:46,160 --> 15:48:48,880
you and saying that okay i will then expose


1287
15:48:48,880 --> 15:48:52,160
the functionalities from that auth provider to the outside world with the


1288
15:48:52,160 --> 15:48:55,840
ability to maybe even change that data before it returns it to you but in our


1289
15:48:55,840 --> 15:48:58,880
chapter and then the rest of this course it's not going to do that it's just


1290
15:48:58,880 --> 15:49:02,560
going to expose the same auth providers functionality to the outside world so


1291
15:49:02,560 --> 15:49:08,080
let's go ahead and as the caption says say we take an auth provider and we just


1292
15:49:08,080 --> 15:49:13,276
call it provider okay we need to do then is to create a


1293
15:49:13,276 --> 15:49:17,360
constructor for your auth servicing here so command


1294
15:49:17,360 --> 15:49:21,360
dot on mac or control dot windows and linux and say create constructor for


1295
15:49:21,360 --> 15:49:24,080
final fields and make it constant as well


1296
15:49:24,080 --> 15:49:28,956
okay so now we have this beautiful little off service that takes the


1297
15:49:28,956 --> 15:49:32,480
provider but as you can see it says missing concrete implementations and


1298
15:49:32,480 --> 15:49:37,596
that's because we said our auth service is also an auth provider so we have to


1299
15:49:37,596 --> 15:49:43,680
implement those auth provider classes overrides as well so let's add them in


1300
15:49:43,680 --> 15:49:48,320
here as well but this time it's gonna be a lot easier uh to implement these


1301
15:49:48,320 --> 15:49:52,880
functions because our because our auth service internally has a provider and


1302
15:49:52,880 --> 15:49:56,720
all it has to do is just expose the functionalities of the


1303
15:49:56,720 --> 15:50:01,360
provider in its own implementation all right


1304
15:50:01,360 --> 15:50:03,436
so um


1305
15:50:03,436 --> 15:50:06,880
as the caption also says we need to delegate then to our


1306
15:50:06,880 --> 15:50:10,160
actual provider before we do that i'm going to do a


1307
15:50:10,160 --> 15:50:13,436
little bit of a clean up here and i suggest that you do too and in places


1308
15:50:13,436 --> 15:50:16,480
that we have more than one parameter let's go and put a comma at the end of


1309
15:50:16,480 --> 15:50:20,560
the last parameter right here and there boom


1310
15:50:20,560 --> 15:50:23,756
and that was it i'm going to do command s so


1311
15:50:23,756 --> 15:50:26,880
that dart formatter formats the code a little bit better


1312
15:50:26,880 --> 15:50:31,276
and let's just go and go ahead and expose the functionalities of our


1313
15:50:31,276 --> 15:50:36,320
provider in our concrete implementations of the auth


1314
15:50:36,320 --> 15:50:44,080
provider so in here we say provider dot creates user email and password perfect


1315
15:50:44,080 --> 15:50:50,080
for the current user we return the provider's current user we say provider


1316
15:50:50,480 --> 15:50:56,080
adopt current user for the login we then expose the


1317
15:50:56,080 --> 15:51:01,756
providers login function we say provider login with that information


1318
15:51:01,756 --> 15:51:08,480
and for our logout we do the same thing so i'm going to say provider logout okay


1319
15:51:08,480 --> 15:51:14,320
and for sending you so say provider send email


1320
15:51:14,320 --> 15:51:19,840
provider and notification great stuff that was uh


1321
15:51:19,840 --> 15:51:25,040
that went really fast as you can see okay


1322
15:51:25,040 --> 15:51:27,276
now um


1323
15:51:27,276 --> 15:51:32,560
you see we've done a lot of code now if we go to our if if i change the screen


1324
15:51:32,560 --> 15:51:36,640
layout a little bit better a little bit so you see the code better and let's go


1325
15:51:36,640 --> 15:51:40,480
to our terminal the built-in terminal i absolutely love it in visual studio code


1326
15:51:40,480 --> 15:51:45,756
that there is an integrated terminal and let's have a look at our git status


1327
15:51:45,756 --> 15:51:50,796
you'll see that we have changed login view but also there is an entirely new


1328
15:51:50,796 --> 15:51:56,400
folder here called lib services so if you then add all of that


1329
15:51:56,400 --> 15:52:01,840
and to get status you'll see that we actually have done a lot of work so


1330
15:52:01,840 --> 15:52:05,360
if i increase the size you see we've added all exceptions auth provider all


1331
15:52:05,360 --> 15:52:08,720
service auth user and firebase auth provider


1332
15:52:08,720 --> 15:52:13,200
plus the changes in the login view now


1333
15:52:13,200 --> 15:52:16,480
um actually i don't know what did we change in login view


1334
15:52:16,480 --> 15:52:18,956
so that's interesting to know if you go to


1335
15:52:18,956 --> 15:52:22,400
the login view did we did we change anything in login view


1336
15:52:22,400 --> 15:52:26,640
because at the moment i can't really remember if we change anything special


1337
15:52:26,640 --> 15:52:31,840
in the login view so it would be interesting to actually


1338
15:52:31,840 --> 15:52:35,520
see what we've done so if i go to my terminal here


1339
15:52:35,520 --> 15:52:38,080
and if i issue this command as you can see


1340
15:52:38,080 --> 15:52:43,360
here i'm going to remove that login view from the staging environment


1341
15:52:43,360 --> 15:52:47,520
so like this paste it there


1342
15:52:47,520 --> 15:52:52,080
and i'm gonna say git status and then i'm gonna say bit diff i can say okay


1343
15:52:52,080 --> 15:52:58,080
the difference is that i have added firebase core in here


1344
15:52:58,080 --> 15:53:02,480
which i don't see in the


1345
15:53:02,480 --> 15:53:07,520
login view and also what's changed


1346
15:53:07,840 --> 15:53:11,956
has this navigator been removed


1347
15:53:12,400 --> 15:53:16,080
there's a lot of code in here that may have not been committed from the


1348
15:53:16,080 --> 15:53:20,000
previous chapter that may be it so that may be the reason okay but that's all


1349
15:53:20,000 --> 15:53:25,680
right as well so now let's get at all and let's then go to the next stage as


1350
15:53:25,680 --> 15:53:28,956
you can see we've done a lot of work let's just make sure everything is


1351
15:53:28,956 --> 15:53:32,796
committed this time okay so get status everything is added to the staging


1352
15:53:32,796 --> 15:53:37,200
environment then i'm just gonna say git commit


1353
15:53:37,200 --> 15:53:43,680
message and step eight this time and i'm going to push all those changes


1354
15:53:43,680 --> 15:53:46,720
and get status i can see everything's committed great


1355
15:53:46,720 --> 15:53:51,680
also let's tag our code because i believe the previous


1356
15:53:51,680 --> 15:53:55,680
chapter we didn't tag anything but the one before that we tagged that step


1357
15:53:55,680 --> 15:54:00,160
seven and that was chapter number 22 where we talked about error handling in


1358
15:54:00,160 --> 15:54:03,756
the registry and going to the next screen after registration so we didn't


1359
15:54:03,756 --> 15:54:08,080
tag anything in the previous chapter so now we're going to tag things as step 8


1360
15:54:08,080 --> 15:54:13,756
so let's just say git tag step 8 i can spell here


1361
15:54:13,756 --> 15:54:18,796
and it push tags as well if you can say git log you will see get


1362
15:54:18,796 --> 15:54:23,040
step 8 is there step 7 every step is there an initial commit is there as well


1363
15:54:23,040 --> 15:54:27,680
which is step one and if you say git tag you'll see all your tags available as


1364
15:54:27,680 --> 15:54:32,080
well okay so we've committed and tagged we've done a


1365
15:54:32,080 --> 15:54:35,680
lot of work in this chapter and i don't think we need to actually drag it on for


1366
15:54:35,680 --> 15:54:40,160
longer because yeah it will be unbearable maybe if it's too long


1367
15:54:40,160 --> 15:54:43,276
now as we usually do which is the tradition


1368
15:54:43,276 --> 15:54:47,756
here before going to the next chapter we prepare ourselves for what is coming as


1369
15:54:47,756 --> 15:54:51,276
you can see in the caches that we need to migrate our existing code to using


1370
15:54:51,276 --> 15:54:55,520
our own auth service we have an auth service


1371
15:54:55,520 --> 15:55:00,320
which abstracts away the provider and we have a firebase auth provider but we


1372
15:55:00,320 --> 15:55:04,796
still are not using that code so that's exactly what we're going to do in the


1373
15:55:04,796 --> 15:55:10,160
next chapter and if i look a little bit in my in my notes i can actually see the


1374
15:55:10,160 --> 15:55:15,276
next chapter will also be quite a long one maybe not as long as this chapter so


1375
15:55:15,276 --> 15:55:18,560
maybe you'll need a cup of coffee or tea so


1376
15:55:18,560 --> 15:55:22,640
let's do that and without further ado i'll see you in the next chapter


1377
15:55:22,640 --> 15:55:26,480
hello everyone and welcome to chapter 25 of this flutter course


1378
15:55:26,480 --> 15:55:30,000
in the previous chapter we talked about earth service and that was quite a big


1379
15:55:30,000 --> 15:55:35,276
chapter we talked about cleaning up making sure that our authentication


1380
15:55:35,276 --> 15:55:40,080
related code is in one central place we created the auth


1381
15:55:40,080 --> 15:55:43,756
provider the firebase auth provider then we created


1382
15:55:43,756 --> 15:55:49,200
our auth service and and we also ensure that


1383
15:55:49,200 --> 15:55:54,880
both the service and the provider are conforming to the interface provided by


1384
15:55:54,880 --> 15:56:01,756
our abstract class for authentication so um we call those the off service and


1385
15:56:01,756 --> 15:56:07,596
the firebase auth provider and then our abstract class was called auth provider


1386
15:56:07,596 --> 15:56:11,916
now we've done all that work but we haven't really even started using that


1387
15:56:11,916 --> 15:56:18,000
auth service and that's what we're going to do in this chapter


1388
15:56:18,400 --> 15:56:21,596
um the first thing that we have to do is


1389
15:56:21,596 --> 15:56:24,640
actually making sure that we have easy access to


1390
15:56:24,640 --> 15:56:28,560
our off service um you see the way we created the auth


1391
15:56:28,560 --> 15:56:35,040
service let me bring the code here so we can all see


1392
15:56:35,840 --> 15:56:42,000
change visual studio codes um layouts a little bit


1393
15:56:42,000 --> 15:56:46,640
let's then have a look at our um let me see if i can resize this a little bit as


1394
15:56:46,640 --> 15:56:52,000
well okay let's have a look here at our auth service you see that with the way


1395
15:56:52,000 --> 15:56:56,240
that we created our off service is that it in its initializer or constructor


1396
15:56:56,240 --> 15:57:01,756
however you want to call it um it is taking a provider so for us to be able


1397
15:57:01,756 --> 15:57:06,080
to use our auth service every time you want to use our auth service we actually


1398
15:57:06,080 --> 15:57:09,596
have to provide it with an auth provider which in our case is going to be the


1399
15:57:09,596 --> 15:57:13,680
firebase auth provider which it resides right here


1400
15:57:13,680 --> 15:57:17,116
so this could be cumbersome especially if you're working with firebase quite a


1401
15:57:17,116 --> 15:57:21,680
lot in your user interface every time you want to use it then you need to say


1402
15:57:21,680 --> 15:57:25,680
auth service initialize the auth service and then initialize your firebase auth


1403
15:57:25,680 --> 15:57:30,240
provider and give that to your auth service so


1404
15:57:30,240 --> 15:57:35,436
we don't want to do that every time and that is exactly why we need to


1405
15:57:35,436 --> 15:57:40,240
create a factory uh


1406
15:57:40,240 --> 15:57:44,320
initializer as you can see here in the uh


1407
15:57:44,320 --> 15:57:47,916
in the captions so uh it says add firebase


1408
15:57:47,916 --> 15:57:52,240
factory to officers and that's exactly what we're gonna do here


1409
15:57:52,240 --> 15:57:56,956
so let's go to our auth service and as the code is provided for you just write


1410
15:57:56,956 --> 15:57:59,596
it factory and i'm going to say auth


1411
15:57:59,596 --> 15:58:04,400
service dot in firebase so the responsibility of


1412
15:58:04,400 --> 15:58:09,360
this off service firebase factory here or sorry the the responsibility of the


1413
15:58:09,360 --> 15:58:13,596
firebase uh factory here


1414
15:58:13,596 --> 15:58:17,916
on our off service is to return an instance of our auth service that is


1415
15:58:17,916 --> 15:58:23,116
already configured with a firebase auth provider so


1416
15:58:23,116 --> 15:58:27,596
then we're going to say it returns an instance of auth service


1417
15:58:27,596 --> 15:58:32,160
change the layout of the code here the screen as well so you can see it better


1418
15:58:32,160 --> 15:58:35,596
and we're going to say firebase um


1419
15:58:35,596 --> 15:58:42,880
auth provider okay so that's that um now you see i have a


1420
15:58:42,880 --> 15:58:45,680
column here in visual studio code that tells me where the code is going to


1421
15:58:45,680 --> 15:58:51,116
break some people even for one parameter in their uh dart code or flutter code


1422
15:58:51,116 --> 15:58:55,596
they prefer to have a comma at the end of it so that it is ready to take new


1423
15:58:55,596 --> 15:58:59,040
parameters in the future so if you do that then um


1424
15:58:59,040 --> 15:59:02,796
dart format is going to break that code for you into multiple lines ready for


1425
15:59:02,796 --> 15:59:06,320
you to enter the next parameter if that's your preference go for it but i


1426
15:59:06,320 --> 15:59:09,756
have no preference here i just leave it like that when i have one parameter i


1427
15:59:09,756 --> 15:59:14,240
just leave it in one line okay so


1428
15:59:14,240 --> 15:59:20,560
before we actually go about uh starting to use our auth service we need to take


1429
15:59:20,560 --> 15:59:25,276
a little trip back to the main dart file as the caption indicates here so you


1430
15:59:25,276 --> 15:59:29,436
either go to the explorer but the way i usually like to do it is with command p


1431
15:59:29,436 --> 15:59:34,080
and i say main dart and then i go there remember if you are linux or windows


1432
15:59:34,080 --> 15:59:38,560
then you have to do control p okay so let's have a look at our main dar file


1433
15:59:38,560 --> 15:59:43,840
and let's see if i can close these places firebase off firebase provider


1434
15:59:43,840 --> 15:59:48,080
login the dart what did we change there save that as


1435
15:59:48,080 --> 15:59:51,840
well let's go back to the main now so basically i just closed all the files


1436
15:59:51,840 --> 15:59:55,840
uh because i just want to have them in our files so as the caption is


1437
15:59:55,840 --> 16:00:02,160
is telling you here um our menu action and the notes view are right now spread


1438
16:00:02,160 --> 16:00:07,116
just around in the main dart file and this is usually not a good idea because


1439
16:00:07,116 --> 16:00:10,160
you need to as part of your journey into becoming a software developer you need


1440
16:00:10,160 --> 16:00:15,360
to make sure that your code is clean and it's easy for other people to read now


1441
16:00:15,360 --> 16:00:20,400
i'm not saying i mean i'm not a true true believer that the code has to be so


1442
16:00:20,400 --> 16:00:23,680
easy to understand that even if you grab a random person from the street they


1443
16:00:23,680 --> 16:00:27,680
have to understand the code because sometimes you need to make sure that


1444
16:00:27,680 --> 16:00:32,240
the person looking at your code has a certain level of knowledge from before


1445
16:00:32,240 --> 16:00:35,680
but with all that said you need to make sure that your code is easy to


1446
16:00:35,680 --> 16:00:40,000
understand and read so let's make sure that the menu action and


1447
16:00:40,000 --> 16:00:45,276
notes view are refactored and that they're in the right place and not just


1448
16:00:45,276 --> 16:00:50,480
spread around in main dart file so as a caption indicates we're going to


1449
16:00:50,480 --> 16:00:56,320
move our menu action into a new new folder called enums inside lib


1450
16:00:56,320 --> 16:01:00,720
and the file name is going to be menu action dot dart and


1451
16:01:00,720 --> 16:01:04,640
the caption was a little bit wrong it shouldn't be dark 10 it should be dart


1452
16:01:04,640 --> 16:01:10,720
so i'm going to save the caption and bring it back up so it's with the right


1453
16:01:10,720 --> 16:01:16,240
file extension so let's go and create that file i'm


1454
16:01:16,240 --> 16:01:21,200
gonna go here into lib i'm gonna right click on lib and i'm gonna say new file


1455
16:01:21,200 --> 16:01:24,720
and in the new file i'm just going to type ins


1456
16:01:24,720 --> 16:01:28,480
and bring it up as well so you see it better


1457
16:01:28,480 --> 16:01:33,756
or you see it at all enums and then menu action. okay


1458
16:01:33,756 --> 16:01:37,200
excuse me let's just go and grab that menu action


1459
16:01:37,200 --> 16:01:42,400
from there and paste it inside this menu action and save that file okay don't


1460
16:01:42,400 --> 16:01:45,680
worry main.dart at the moment has a problem because menu action doesn't


1461
16:01:45,680 --> 16:01:48,880
exist here anymore so we're getting some errors and that's okay we're gonna fix


1462
16:01:48,880 --> 16:01:54,320
that so let's go now to our um


1463
16:01:54,320 --> 16:01:59,360
to the main dark file again and we have to clean up this notes view and as the


1464
16:01:59,360 --> 16:02:01,756
caption in the case we're going to move it into


1465
16:02:01,756 --> 16:02:06,640
lib views notes view okay we already have the views folder remember from


1466
16:02:06,640 --> 16:02:11,040
before all we're going to do is just to move this notes view into its own file


1467
16:02:11,040 --> 16:02:14,240
so i'm going to right right click on views and i'm going to say


1468
16:02:14,240 --> 16:02:18,520
notes view dot darts


1469
16:02:18,796 --> 16:02:24,400
okay let's go to main guard grab the notes view and it's state so from there


1470
16:02:24,400 --> 16:02:28,000
notes view stateful widget and i'm gonna grab all of that


1471
16:02:28,000 --> 16:02:31,436
and we're gonna even


1472
16:02:31,436 --> 16:02:37,596
take the show log out dialog with it and bring it


1473
16:02:37,596 --> 16:02:42,640
to note2 and paste that there okay so now we have a lot of problems because uh


1474
16:02:42,640 --> 16:02:48,160
in an empty dart file as i've mentioned before there's no material import so i'm


1475
16:02:48,160 --> 16:02:52,640
going to do the material import now so command dot and say import library


1476
16:02:52,640 --> 16:02:56,240
package flower material and that is going to fix those import


1477
16:02:56,240 --> 16:03:00,796
those errors for you now this file doesn't have it hasn't


1478
16:03:00,796 --> 16:03:04,796
imported uh menu action so let's fix that as well


1479
16:03:04,796 --> 16:03:08,400
with visual studio command dot and get help from visual studio code to


1480
16:03:08,400 --> 16:03:14,560
automatically import our menu action dart file okay


1481
16:03:14,560 --> 16:03:21,520
so that is also fixed and also remember now in notes view also right now is


1482
16:03:21,520 --> 16:03:25,360
using firebase off and we're going to fix somebody into this chapter so that


1483
16:03:25,360 --> 16:03:29,520
note2 isn't or any of our views none of them are going to talk directly with


1484
16:03:29,520 --> 16:03:32,796
firebase so that's going to be fixed by the end of this chapter


1485
16:03:32,796 --> 16:03:36,956
but for now let's go ahead and clean this up and make sure that firebase auth


1486
16:03:36,956 --> 16:03:43,116
is imported and also remember login route was used here when we log out of


1487
16:03:43,116 --> 16:03:48,720
the main interface of the application so when we log out then it sends us back to


1488
16:03:48,720 --> 16:03:53,040
the login route and that is defined in our routes


1489
16:03:53,040 --> 16:03:58,560
dart file here so let's import that too excuse me


1490
16:03:58,640 --> 16:04:02,640
all right so that was a lot of work we've we've done that now so we're done


1491
16:04:02,640 --> 16:04:06,956
so i'm going to save this notes view dot dart


1492
16:04:07,116 --> 16:04:09,916
and now as the the case we need to go back


1493
16:04:09,916 --> 16:04:14,240
to the main dart and remedy this issue which we have and we need to import


1494
16:04:14,240 --> 16:04:18,720
notes view uh get help from visual studio code or your favorite editor or


1495
16:04:18,720 --> 16:04:22,640
if you don't have this functionality in your editor if you're using vim or


1496
16:04:22,640 --> 16:04:25,840
something you may just need to import that by hand and the import is just the


1497
16:04:25,840 --> 16:04:31,436
package name of your application views notes view okay so i'm gonna


1498
16:04:31,436 --> 16:04:34,160
get help from visual studio code to do that


1499
16:04:34,160 --> 16:04:36,480
great


1500
16:04:36,640 --> 16:04:39,680
so um


1501
16:04:39,680 --> 16:04:43,200
now let's have a look at something that we actually forgot in the previous


1502
16:04:43,200 --> 16:04:46,880
chapters um you see we've done everything in our


1503
16:04:46,880 --> 16:04:51,276
off service if you have a look at our auth service it has almost all the


1504
16:04:51,276 --> 16:04:55,360
functionalities that we need it has create view sorry create user it has


1505
16:04:55,360 --> 16:04:59,916
current user it has login log out and send email verification but there's one


1506
16:04:59,916 --> 16:05:04,956
detail that we forgot about let's go to main dart and have a look at it


1507
16:05:04,956 --> 16:05:09,840
you can see in here our entire main dart uh


1508
16:05:09,840 --> 16:05:15,436
like the home page build function is built around a future builder that i i


1509
16:05:15,436 --> 16:05:19,436
know i'm saying build quite a lot maybe i should say it's revol it's revolving


1510
16:05:19,436 --> 16:05:24,480
around a future builder which in turn initializes firebase you see it calls


1511
16:05:24,480 --> 16:05:29,520
firebase initialize app and now that we want to move away from our user


1512
16:05:29,520 --> 16:05:33,276
interface interacting directly with firebase we


1513
16:05:33,276 --> 16:05:37,916
also need to remedy this this user interface it shouldn't go to


1514
16:05:37,916 --> 16:05:42,796
firebase directly it should ideally go to our


1515
16:05:42,796 --> 16:05:47,360
off service and that's what the caption says


1516
16:05:47,436 --> 16:05:55,040
so let's now go to our auth provider abstract class so let's


1517
16:05:55,040 --> 16:05:58,000
close all these files make sure everything is saved


1518
16:05:58,000 --> 16:06:02,560
let's go to our off provider and make sure that we have a function


1519
16:06:02,560 --> 16:06:07,200
there and let me actually bring up my notes


1520
16:06:07,200 --> 16:06:12,720
that says initialize so we're going to say future void


1521
16:06:12,720 --> 16:06:16,160
initialize okay remember now that we've added this


1522
16:06:16,160 --> 16:06:19,756
function to our auth provider we're going to have problems because both the


1523
16:06:19,756 --> 16:06:24,720
firebase auth provider and auth service they're they're conforming currently to


1524
16:06:24,720 --> 16:06:28,880
the author provider abstract class and adding a new function to this abstract


1525
16:06:28,880 --> 16:06:33,436
class means that we're gonna get two errors indicating that this function


1526
16:06:33,436 --> 16:06:37,596
isn't implemented in firebase auth provider and in our auth service so we


1527
16:06:37,596 --> 16:06:44,080
need to fix those problems you can see they're actually highlighted as red here


1528
16:06:44,080 --> 16:06:47,276
okay um


1529
16:06:47,840 --> 16:06:51,840
let's go then to the next caption


1530
16:06:52,160 --> 16:06:57,040
and i'm gonna get rid of that bottom view so it doesn't bother us so let's go


1531
16:06:57,040 --> 16:07:00,956
now as you can see in the firebase auth provider and overwrite initialize and


1532
16:07:00,956 --> 16:07:05,276
make it async and call initialize app on firebase


1533
16:07:05,276 --> 16:07:10,160
so to in order to do the firebase initialize code we need to have a look


1534
16:07:10,160 --> 16:07:13,360
at our main dart and see how that is done at the moment you can see it is


1535
16:07:13,360 --> 16:07:17,596
called firebase initialize app so i'm gonna grab that code and i suggest that


1536
16:07:17,596 --> 16:07:22,160
you do the same thing i'm just gonna copy that code for initialize app


1537
16:07:22,160 --> 16:07:27,116
and let's then go to our firebase auth provider


1538
16:07:27,116 --> 16:07:30,640
and get help from visual studio code or android studio in order to complete that


1539
16:07:30,640 --> 16:07:33,596
one missing override for initialize function


1540
16:07:33,596 --> 16:07:37,840
and i believe it gets added here somewhere


1541
16:07:37,840 --> 16:07:41,360
or it didn't where did it go


1542
16:07:41,360 --> 16:07:46,880
we should have an initialize a missing concrete


1543
16:07:46,956 --> 16:07:54,116
create one missing override initialize i still don't see the missing


1544
16:07:55,916 --> 16:08:01,276
i'm gonna do that here myself future void initialize like this okay


1545
16:08:01,276 --> 16:08:05,520
and uh what we're gonna do as the name indicates it's gonna be an async


1546
16:08:05,520 --> 16:08:11,680
function here and what we need to do is just to save firebase initialize app so


1547
16:08:11,680 --> 16:08:14,796
um and we're gonna await on this so like


1548
16:08:14,796 --> 16:08:18,160
that and remember we have we need to have two


1549
16:08:18,160 --> 16:08:22,796
imports here and one is for the firebase and the other one is default firebase


1550
16:08:22,796 --> 16:08:26,956
options so let's get help from visual studio code to import those firebase


1551
16:08:26,956 --> 16:08:29,680
core and import


1552
16:08:29,680 --> 16:08:34,400
firebase options dark file which if you remember when we set up firebase


1553
16:08:34,400 --> 16:08:39,200
initially was brought into our application from the firebase cli so


1554
16:08:39,200 --> 16:08:42,956
is is not a file that we've created ourselves except it's the firebase cli


1555
16:08:42,956 --> 16:08:46,400
that created this for us okay


1556
16:08:46,560 --> 16:08:50,480
here now it says annotate over members and that's exactly what we need to do so


1557
16:08:50,480 --> 16:08:53,116
let's just say over


1558
16:08:53,116 --> 16:08:58,796
right like this and now we have initialize uh over member of our author


1559
16:08:58,796 --> 16:09:01,916
provider inside firebase author provider so


1560
16:09:01,916 --> 16:09:05,756
basically all we're saying is firebase auth provider implements initialize


1561
16:09:05,756 --> 16:09:10,400
function and it has actual implementation okay


1562
16:09:10,400 --> 16:09:14,796
all right we have one error left and that is inside auth service so let's go


1563
16:09:14,796 --> 16:09:19,040
to auth service and we'll have the exact same problem


1564
16:09:19,040 --> 16:09:23,276
here and says missing concrete implementation so i'm gonna see if i can


1565
16:09:23,276 --> 16:09:27,756
get visual studio code to add that implementation and it added it here


1566
16:09:27,756 --> 16:09:32,796
initialize okay so in here what we have to do is just to


1567
16:09:32,796 --> 16:09:38,720
delegate this function to the actual provider so we're going to say provider


1568
16:09:38,720 --> 16:09:43,436
and we're going to say initialize just like that all right so this was the easy


1569
16:09:43,436 --> 16:09:45,840
one and if you don't remember from the


1570
16:09:45,840 --> 16:09:48,956
previous chapter or maybe you jumped over the previous chapter i don't know


1571
16:09:48,956 --> 16:09:52,240
how you ended up in this chapter if you haven't watched the previous chapter i


1572
16:09:52,240 --> 16:09:56,640
strongly suggest that you do that there is a reason we have our off service that


1573
16:09:56,640 --> 16:10:00,080
implements auth provider and the reason behind that is that


1574
16:10:00,080 --> 16:10:05,756
usually services have more logic in them than what they


1575
16:10:05,756 --> 16:10:09,756
bring into themselves so if a service has two other services connected to


1576
16:10:09,756 --> 16:10:13,840
itself then it may actually take bits and pieces from the service and other


1577
16:10:13,840 --> 16:10:18,400
bits and pieces from another service and fuse them together with some extra logic


1578
16:10:18,400 --> 16:10:23,200
and that is exactly why the author services as an odd provider so the goal


1579
16:10:23,200 --> 16:10:27,916
for us is to allow the officers to do more work than an author provider even


1580
16:10:27,916 --> 16:10:32,160
though right now only thing it does is just delegates all its functionality to


1581
16:10:32,160 --> 16:10:36,880
the auth provider and remember you could also see make sure that i mean if you


1582
16:10:36,880 --> 16:10:41,520
don't like this implementation you can for instance remove this and then


1583
16:10:41,520 --> 16:10:46,480
basically remove all these functions and by doing that you're just saying that an


1584
16:10:46,480 --> 16:10:50,000
auth service includes an off provider and that's all you're doing or you could


1585
16:10:50,000 --> 16:10:55,436
completely kill you your off service so it's up to you but if you're following


1586
16:10:55,436 --> 16:10:59,200
along with this uh with this course i suggest that you keep it the way it is


1587
16:10:59,200 --> 16:11:03,276
because there's a there's a point to it so


1588
16:11:03,756 --> 16:11:07,840
okay now that we've done that uh it's time to


1589
16:11:07,840 --> 16:11:12,480
do some cleanup and this is this is a very exciting part of this uh


1590
16:11:12,480 --> 16:11:17,360
chapter because we now have our auth service and our firebase auth provider


1591
16:11:17,360 --> 16:11:22,560
and in and additionally we have an off service firebase factory which allows us


1592
16:11:22,560 --> 16:11:26,880
to anywhere inside our code we could just say autoservice.firebase


1593
16:11:26,880 --> 16:11:32,956
and in that way we get access to our um firebase auth provider inside the


1594
16:11:32,956 --> 16:11:37,520
auth services so it's it's really magical you're gonna see it soon


1595
16:11:37,520 --> 16:11:41,916
so i'm going to close all files here ensure everything is saved then as the


1596
16:11:41,916 --> 16:11:46,956
caption indicates i'm going to go into main art file


1597
16:11:47,276 --> 16:11:51,680
main dart and as you can see it says remove


1598
16:11:51,680 --> 16:11:56,240
everything related to firebase and replace with auth service by importing


1599
16:11:56,240 --> 16:12:01,520
auth service okay so one way of doing that is just to ensure that you go and


1600
16:12:01,520 --> 16:12:06,000
kill it from the source so you can see here we have two firebase imports and if


1601
16:12:06,000 --> 16:12:08,956
you remove these two firebase imports which is


1602
16:12:08,956 --> 16:12:13,520
my preferred way of usually working with software is that i try to like remove


1603
16:12:13,520 --> 16:12:17,756
something from its source so now that i've removed those then visual studio is


1604
16:12:17,756 --> 16:12:22,000
telling me that hey you're using firebase in two places you need to fix


1605
16:12:22,000 --> 16:12:24,956
this because you don't have the imports then i know okay


1606
16:12:24,956 --> 16:12:28,880
here are the two places that i have to do my refactoring in okay


1607
16:12:28,880 --> 16:12:31,116
so as you can see here it says firebase


1608
16:12:31,116 --> 16:12:34,480
initialize app and we need to make sure that we're not doing that anymore so


1609
16:12:34,480 --> 16:12:40,640
we're just going to say in this case our future remember is um


1610
16:12:40,640 --> 16:12:45,436
it's auth service and since i haven't imported that yet visual studio is


1611
16:12:45,436 --> 16:12:49,040
offering to auto import it so i'm gonna say yes please


1612
16:12:49,040 --> 16:12:52,880
um it's auto imported now but if you don't wanna if you're you're working


1613
16:12:52,880 --> 16:12:57,756
with vim or some other a text editor that doesn't have that capability you


1614
16:12:57,756 --> 16:13:01,360
could import that in


1615
16:13:01,360 --> 16:13:04,956
this way per package the name of your package


1616
16:13:04,956 --> 16:13:09,520
services off auth service dart and i just noticed that this is another


1617
16:13:09,520 --> 16:13:12,796
firebase import which i'm going to remove now


1618
16:13:12,796 --> 16:13:17,596
excuse me so auth service now we want to tell


1619
16:13:17,596 --> 16:13:22,560
because we're using firebase we're going to say auth service dot firebase and in


1620
16:13:22,560 --> 16:13:27,360
here we're just going to say initialize okay so that fits in perfectly


1621
16:13:27,360 --> 16:13:32,956
and in here you can see we're using firebase um


1622
16:13:32,956 --> 16:13:36,720
instance firebase auth instance current user in this case we're just going to


1623
16:13:36,720 --> 16:13:43,436
say uh off service dot our base man current user just like


1624
16:13:43,436 --> 16:13:48,560
that okay and now remember odd i talked about this in previous chapters but


1625
16:13:48,560 --> 16:13:53,040
i prefer to have boolean flags prefix with the word is


1626
16:13:53,040 --> 16:13:56,560
whenever that makes sense and in this case you can see firebase implementation


1627
16:13:56,560 --> 16:14:00,400
had email verified but we have is email verified so i'm going to say is email


1628
16:14:00,400 --> 16:14:03,520
verified like that all right


1629
16:14:03,520 --> 16:14:09,200
and s or control x and linux and windows a command is on on mac to save this file


1630
16:14:09,200 --> 16:14:12,320
and it looks fine right now but we're not


1631
16:14:12,320 --> 16:14:18,480
really done um we also have problems in our login view


1632
16:14:18,480 --> 16:14:23,756
i mean problems not errors or warnings but problems in that we're using


1633
16:14:23,756 --> 16:14:29,596
firebase directly and we're going to the firebase auth directly in our login view


1634
16:14:29,596 --> 16:14:32,480
and we need to fix as you can see the caption system login view remove


1635
16:14:32,480 --> 16:14:37,596
firebase and replace with off service okay


1636
16:14:37,596 --> 16:14:44,640
so let's go to uh to the source and remove firebase completely from


1637
16:14:44,640 --> 16:14:48,320
your login view command s and now you'll see we have a


1638
16:14:48,320 --> 16:14:55,116
lot of problems here and one two three yep that was it so three three places


1639
16:14:55,116 --> 16:15:00,720
that we need to fix so let's go ahead and fix those places


1640
16:15:00,720 --> 16:15:05,360
because yeah um there's a lot to handle here so we start


1641
16:15:05,360 --> 16:15:08,880
by this one at the moment we're saying firebase off instant sign in with email


1642
16:15:08,880 --> 16:15:12,640
and password and what we need to do is just to uh


1643
16:15:12,640 --> 16:15:18,320
call our off service so we're gonna say auth service and


1644
16:15:18,320 --> 16:15:22,720
auto imported and auth service has firebase auth


1645
16:15:22,720 --> 16:15:29,116
provider and we're then gonna say assign in or do we say login yeah email


1646
16:15:29,116 --> 16:15:33,520
password okay so i'm gonna i'm gonna take this code the way it is


1647
16:15:33,520 --> 16:15:38,080
and i'm not paste then them in here


1648
16:15:38,080 --> 16:15:42,796
so now we're saying auth service firebase login okay


1649
16:15:43,520 --> 16:15:47,520
then we're seeing here that we're getting the current user and the right


1650
16:15:47,520 --> 16:15:51,596
way now to get the current user is by saying off service


1651
16:15:51,596 --> 16:15:56,640
dot firebase current user and email verified should be ms email


1652
16:15:56,640 --> 16:16:02,000
verified okay so now we fix those problems in this area by going to all


1653
16:16:02,000 --> 16:16:07,436
the search instead of going directly to firebase


1654
16:16:07,596 --> 16:16:13,116
okay that was that now we need to start looking a little bit at our error


1655
16:16:13,116 --> 16:16:18,000
handling and you can see here we have on firebase off


1656
16:16:18,000 --> 16:16:24,560
exception so we need to fix these with various um


1657
16:16:24,560 --> 16:16:28,160
other exception handlings not firebase auth


1658
16:16:28,160 --> 16:16:32,000
exception but now remember we have our own


1659
16:16:32,000 --> 16:16:37,116
exceptions in auth exception start and


1660
16:16:37,116 --> 16:16:40,880
these are all coming from exception but what we're


1661
16:16:40,880 --> 16:16:43,520
going to do is we're going to have like on


1662
16:16:43,520 --> 16:16:48,720
blah blah for various of those exceptions as you'll see soon so um i'm


1663
16:16:48,720 --> 16:16:54,480
gonna what i'm gonna do is i'm gonna take this code and keep it the way it is


1664
16:16:54,480 --> 16:16:59,360
like that and i'm going to add new on statement so


1665
16:16:59,360 --> 16:17:02,240
um let's take care of user not found so i'm


1666
16:17:02,240 --> 16:17:06,480
going to say on user not found exception and you can see that it says user not


1667
16:17:06,480 --> 16:17:09,596
found exception is an exception that we created manually but it's not imported


1668
16:17:09,596 --> 16:17:13,680
here because it was inside the auth exceptions dart file so i'm going to say


1669
16:17:13,680 --> 16:17:17,756
visual studio code please complete that and also import it for me okay


1670
16:17:17,756 --> 16:17:24,880
so say in this case then we have to do show error dialog so grab that code and


1671
16:17:24,880 --> 16:17:29,596
place it here okay then we're going to say


1672
16:17:29,596 --> 16:17:33,916
on what else do we have wrong password


1673
16:17:33,916 --> 16:17:40,000
because it's this thing i'm going to say on wrong password of exception


1674
16:17:40,000 --> 16:17:45,200
and go in here and grab then your show error dialog from here


1675
16:17:45,200 --> 16:17:48,080
and place it there okay


1676
16:17:48,080 --> 16:17:51,916
that and then we also need to have the on


1677
16:17:51,916 --> 16:17:56,796
generic auth exception so on generic auth exception


1678
16:17:56,796 --> 16:18:02,480
and we do this show error i like the way it is here


1679
16:18:02,480 --> 16:18:06,400
so then we go and bring that here and you can see on generic error off


1680
16:18:06,400 --> 16:18:10,160
exception we don't have any specific like information like any e or anything


1681
16:18:10,160 --> 16:18:13,756
to string so all we're gonna do in here we'll just say we're gonna say


1682
16:18:13,756 --> 16:18:18,480
authentication error okay and then you need to go and remove


1683
16:18:18,480 --> 16:18:22,000
the other catch blocks so your code should


1684
16:18:22,000 --> 16:18:28,720
basically look like this okay so a try block and then three


1685
16:18:28,720 --> 16:18:34,080
special exception handlings one after the other


1686
16:18:34,080 --> 16:18:39,040
great command s on your login view now you shouldn't have any problems in your


1687
16:18:39,040 --> 16:18:44,560
login view and there's no import of firebase in your login view just as it


1688
16:18:44,560 --> 16:18:48,400
was in the main dart file let's just make sure that there's no firebase


1689
16:18:48,400 --> 16:18:53,756
import here either firebase yeah firebase yeah no imports of


1690
16:18:53,756 --> 16:18:57,596
firebase great [Music]


1691
16:18:57,596 --> 16:19:02,240
and as the caption now says we need to go to register view and remove firebase


1692
16:19:02,240 --> 16:19:06,720
and replace with auth service now that we've done the same exercise now for


1693
16:19:06,720 --> 16:19:10,640
login view you should now know basically what we're gonna do in register view


1694
16:19:10,640 --> 16:19:14,080
we're gonna go to pretty much the exact same thing we did in login view except


1695
16:19:14,080 --> 16:19:19,200
in registry removing firebase from the imports get all the errors that we're


1696
16:19:19,200 --> 16:19:23,360
going to get and after we get those errors we're going to fix the problems


1697
16:19:23,360 --> 16:19:27,040
in register so let's go ahead and do that


1698
16:19:27,040 --> 16:19:30,956
let's go to our imports there's firebase imported right there we're going to


1699
16:19:30,956 --> 16:19:35,756
remove that now we have probably quite a lot of errors yeah


1700
16:19:35,756 --> 16:19:39,596
that's good and let's go then and fix that i'm going


1701
16:19:39,596 --> 16:19:44,160
to go to my notes just to ensure that i'm following all the


1702
16:19:44,160 --> 16:19:48,160
notes that i was supposed to tell you about


1703
16:19:48,160 --> 16:19:50,956
then we don't create user with email and


1704
16:19:50,956 --> 16:19:54,560
password in our auth server so let's just say all service


1705
16:19:54,560 --> 16:19:59,276
and it's not imported so let's auto import it dot firebase and we're gonna


1706
16:19:59,276 --> 16:20:05,360
say sign and what do we call it create user email and password


1707
16:20:05,360 --> 16:20:10,956
on the end of the last parameter grab the code and replace your firebase auth


1708
16:20:10,956 --> 16:20:16,796
create user email and password with our auth service create user


1709
16:20:16,796 --> 16:20:19,436
okay and in the place where we're getting the


1710
16:20:19,436 --> 16:20:25,596
user let's then say auth service firebase and we're gonna say current


1711
16:20:25,596 --> 16:20:30,160
user and now we have send email verification


1712
16:20:30,160 --> 16:20:34,160
but i think we called it some something else we said


1713
16:20:34,160 --> 16:20:37,840
and oh we didn't implement the send email


1714
16:20:37,840 --> 16:20:43,680
verification or did we let me go to auth service


1715
16:20:43,756 --> 16:20:46,880
and um send email verification yeah it is


1716
16:20:46,880 --> 16:20:51,360
right there so i'm gonna oh i see because previously


1717
16:20:51,360 --> 16:20:55,200
what was happening is that firebase implements send email


1718
16:20:55,200 --> 16:21:00,240
verification at the user level but we don't have we don't want that anymore


1719
16:21:00,240 --> 16:21:05,116
and our user doesn't have that functionality actually our user has just


1720
16:21:05,116 --> 16:21:08,640
a boolean flag so what we need to do in here we're


1721
16:21:08,640 --> 16:21:13,116
going to ask our service to to send that email verification so we're going to say


1722
16:21:13,116 --> 16:21:18,320
fire and auth service and this send email verification just


1723
16:21:18,320 --> 16:21:21,040
like okay


1724
16:21:21,436 --> 16:21:24,796
all right then we need to fix these exceptions as


1725
16:21:24,796 --> 16:21:27,840
well because as you saw in the login view we don't have firebase auth


1726
16:21:27,840 --> 16:21:32,000
exception in this case like we've removed the ui's


1727
16:21:32,000 --> 16:21:36,640
ability to talk directly with firebase by removing all the imports so now we


1728
16:21:36,640 --> 16:21:39,680
need to make sure that we handle exceptions just like we did in the login


1729
16:21:39,680 --> 16:21:44,400
view okay so let's go ahead and say


1730
16:21:44,400 --> 16:21:47,040
um on


1731
16:21:47,040 --> 16:21:50,640
each password because i think that's the first one that we handle so


1732
16:21:50,640 --> 16:21:54,796
um i mean you see almost the entire screen is now red and that's one of the


1733
16:21:54,796 --> 16:21:59,040
downsides of using the extension that i talked to about during one of the first


1734
16:21:59,040 --> 16:22:02,240
chapters of this course where i'm using an extension


1735
16:22:02,240 --> 16:22:07,596
called air lens and air lens extends and expands all the errors that would


1736
16:22:07,596 --> 16:22:12,320
otherwise just happen with little icons next to the lines it's expanding them


1737
16:22:12,320 --> 16:22:16,720
into their own separate lines and it kind of makes the code look a little bit


1738
16:22:16,720 --> 16:22:21,360
angry at times when you're making drastic changes to your code but don't


1739
16:22:21,360 --> 16:22:25,360
worry about it just have a look at your syntax and kind of see that yeah i'm


1740
16:22:25,360 --> 16:22:28,956
kind of doing the right thing i'm going to fix it soon so don't be intimidated


1741
16:22:28,956 --> 16:22:34,480
by all these red flags in here okay or these red lines


1742
16:22:34,480 --> 16:22:39,680
so let's handle weak password exception now it's going to be a little bit


1743
16:22:39,680 --> 16:22:43,916
quieter here okay then grab your show error dialog


1744
16:22:43,916 --> 16:22:46,796
from there and that's for a week password


1745
16:22:46,796 --> 16:22:51,680
put it here like that and um


1746
16:22:51,680 --> 16:22:54,956
then we need to handle um our


1747
16:22:54,956 --> 16:23:01,360
email already in use on email already in use off exception


1748
16:23:01,360 --> 16:23:05,520
and we're gonna then take the code from email already and use which is just a


1749
16:23:05,520 --> 16:23:10,160
shorter dialog right there put it there okay


1750
16:23:10,240 --> 16:23:15,276
like that um and we need to also handle


1751
16:23:15,276 --> 16:23:22,320
invalid email so i'm gonna go in here and say on invalid email off exception


1752
16:23:22,320 --> 16:23:27,596
let's grab the code from invalid email off exception


1753
16:23:27,596 --> 16:23:29,916
and


1754
16:23:30,240 --> 16:23:35,916
and and that part is done as well also we need to have on generic als


1755
16:23:35,916 --> 16:23:40,480
exception so let's go in here and just say on generic auth exception


1756
16:23:40,480 --> 16:23:45,040
and let's just handle that shoulder dialog


1757
16:23:45,040 --> 16:23:49,436
and actually this is what we did for the generic auth exception so i'm just going


1758
16:23:49,436 --> 16:23:53,520
to grab that code put it there and since on generic off


1759
16:23:53,520 --> 16:23:59,360
exception we're not accepting any e so we're not saying on catch like e like


1760
16:23:59,360 --> 16:24:04,000
that we could have done that but we're just ignoring completely at the e and in


1761
16:24:04,000 --> 16:24:07,840
here and we're just gonna say failed to register


1762
16:24:07,840 --> 16:24:10,956
and then let's clean up the rest of the code remove the other cat statements


1763
16:24:10,956 --> 16:24:14,720
okay so your code basically is going to look clean like this now so you have a


1764
16:24:14,720 --> 16:24:19,756
try block and then you say okay i'm trying this code right here create user


1765
16:24:19,756 --> 16:24:24,160
if weak password auth exception happens do this if email is already in use do


1766
16:24:24,160 --> 16:24:30,240
this if invalid email do this or any other auth exception do this so


1767
16:24:30,240 --> 16:24:34,880
it looks cleaner in my eyes at least the way we've done it now than the way we've


1768
16:24:34,880 --> 16:24:39,276
done it before in that before we were going to firebase and firebase do this


1769
16:24:39,276 --> 16:24:43,116
do that on firebase auth exception do this otherwise


1770
16:24:43,116 --> 16:24:47,520
so now the only thing we're doing is going through our


1771
16:24:47,520 --> 16:24:54,796
auth service and handling auth related exceptions and that's it


1772
16:24:54,840 --> 16:25:00,480
okay all right um now that we've we've done our work in


1773
16:25:00,480 --> 16:25:04,480
the register you can see there's no errors in the register we need to go to


1774
16:25:04,480 --> 16:25:08,720
notes view as the caption indicates so i close


1775
16:25:08,720 --> 16:25:12,560
register view now let's open up our notes view


1776
16:25:12,560 --> 16:25:17,360
and see what we are doing with firebase and notes view so do the same thing like


1777
16:25:17,360 --> 16:25:22,320
we did before remove firebase as one of your imports so you get the you get the


1778
16:25:22,320 --> 16:25:26,640
idea like an overall idea of what is happening in here and how we're using


1779
16:25:26,640 --> 16:25:30,796
firebase and i can see the only place where using firebase in notes view is


1780
16:25:30,796 --> 16:25:34,956
firebase off instance sign out that's good it's just one place but we have to


1781
16:25:34,956 --> 16:25:38,400
fix that too so let's then go um sorry i'm just gonna


1782
16:25:38,400 --> 16:25:43,756
bring up my notes as well um we're in notes view


1783
16:25:43,916 --> 16:25:48,320
okay so let's just then go to um


1784
16:25:48,320 --> 16:25:52,160
here and we're gonna we're just gonna say off


1785
16:25:52,160 --> 16:25:56,400
auth service all right and then we're going to say


1786
16:25:56,400 --> 16:26:00,400
log out i think we call it and we need to wait on it okay


1787
16:26:00,400 --> 16:26:03,436
like that and


1788
16:26:03,436 --> 16:26:08,640
it's bad so what we could do now we've removed firebase from there as


1789
16:26:08,640 --> 16:26:13,116
well and let's then go


1790
16:26:13,276 --> 16:26:16,480
as the caption indicates we need to now go through the entire app and make sure


1791
16:26:16,480 --> 16:26:21,360
that everything is working as expected but before we do that let's have a look


1792
16:26:21,360 --> 16:26:26,640
at our views and make sure none of them is importing firebase so i can see login


1793
16:26:26,640 --> 16:26:29,840
view is not importing anything related to firebase meaning that it's not using


1794
16:26:29,840 --> 16:26:34,880
firebase let's go to notes view no imports related to firebase either


1795
16:26:34,880 --> 16:26:38,640
not using firebase or at least not using firebase directly


1796
16:26:38,640 --> 16:26:43,916
remember it's using firebase but through our auth service okay so no imports from


1797
16:26:43,916 --> 16:26:49,916
firebase here either and we have our verify email view which at the moment i


1798
16:26:49,916 --> 16:26:52,240
can see


1799
16:26:52,400 --> 16:26:57,040
verify email view oh i see that we haven't clean up our verify email view


1800
16:26:57,040 --> 16:27:00,560
and that's something that we also need to do so we forgot about that let's


1801
16:27:00,560 --> 16:27:05,276
let's take care of that okay so let's go in here and


1802
16:27:05,276 --> 16:27:09,680
remove this firebase auth from here as well


1803
16:27:10,160 --> 16:27:15,116
i'm gonna go to my notes here


1804
16:27:15,596 --> 16:27:18,796
okay so let's have a look at that now let's


1805
16:27:18,796 --> 16:27:23,680
say that uh send email verification shouldn't be there so let's just then


1806
16:27:23,680 --> 16:27:28,080
say fire off service um


1807
16:27:28,080 --> 16:27:33,916
firebase oops firebase a current user and i can see you see


1808
16:27:33,916 --> 16:27:37,916
here it was using the current user just to send the email verification but we


1809
16:27:37,916 --> 16:27:41,200
don't do that anymore we just because send email verification is not


1810
16:27:41,200 --> 16:27:44,480
at a user level anymore when we've developed our off service remember so


1811
16:27:44,480 --> 16:27:47,840
we'll just say send email verification like that await


1812
16:27:47,840 --> 16:27:50,720
all right and then remove those two lines of code


1813
16:27:50,720 --> 16:27:53,916
which were just getting the user and sending an email verification remove


1814
16:27:53,916 --> 16:27:57,756
those and and to answer you i hadn't planned


1815
16:27:57,756 --> 16:28:01,436
for this i can actually see in my notes i hadn't uh


1816
16:28:01,436 --> 16:28:04,720
fixed the verify email view and that's why i'm not showing it in the captions


1817
16:28:04,720 --> 16:28:09,436
and that's completely okay i have to improvise as well sometimes so


1818
16:28:09,436 --> 16:28:14,400
let's then go ahead in here in them in the text button that says restart as


1819
16:28:14,400 --> 16:28:18,560
you can see here that needs to just sign the user out so let's just say off


1820
16:28:18,560 --> 16:28:23,840
service base log out and make sure that you wait


1821
16:28:23,840 --> 16:28:28,880
on it okay just like that and remove this line of code as well so verify view


1822
16:28:28,880 --> 16:28:32,880
now doesn't have any imports to uh from firebase either


1823
16:28:32,880 --> 16:28:35,756
and i believe those were are


1824
16:28:35,756 --> 16:28:39,520
all of our views except for also main let's make sure there's no firebase


1825
16:28:39,520 --> 16:28:44,080
imports here either perfect so now we're done with this and


1826
16:28:44,080 --> 16:28:47,916
what we could do as the caption in the case we're going to do a hot a restart


1827
16:28:47,916 --> 16:28:52,560
here and let's see if things are working yeah


1828
16:28:52,560 --> 16:28:56,720
and i'm just going to say restart here and let's see


1829
16:28:56,720 --> 16:29:01,116
the current state of the application i'm going to bring up a firebase console


1830
16:29:01,116 --> 16:29:06,080
go to my notes application here authentication and i can see i have two


1831
16:29:06,080 --> 16:29:11,680
users here okay so i'm gonna i'm just gonna say pixelityab.gmail.com


1832
16:29:11,680 --> 16:29:15,520
foobarbass and let's say register and then it


1833
16:29:15,520 --> 16:29:19,520
should give us an error saying email is already in use so email is already in


1834
16:29:19,520 --> 16:29:25,756
use let's go in here and say pixelityab gmail.combarbaz and i remember from the


1835
16:29:25,756 --> 16:29:30,640
previous chapters this is a user that's already verified his um email address so


1836
16:29:30,640 --> 16:29:34,240
by pressing login we should actually go to the main ui of the application so


1837
16:29:34,240 --> 16:29:38,720
logout should work as it did before and let's go then to


1838
16:29:38,720 --> 16:29:42,080
the uh and try to log in with the user


1839
16:29:42,080 --> 16:29:45,520
and that's i think hasn't uh


1840
16:29:45,520 --> 16:29:50,240
verified his email address so you can see then we're getting sent here


1841
16:29:50,240 --> 16:29:53,840
verify email and then we can press the send email verification which in turn


1842
16:29:53,840 --> 16:29:59,680
then sends the email and to the user so


1843
16:29:59,680 --> 16:30:04,880
that was a lot of information and some improvised edition as well in this


1844
16:30:04,880 --> 16:30:08,400
chapter for the verify email view that i hadn't planned for so it's good for me


1845
16:30:08,400 --> 16:30:11,360
to know as well that sometimes i can miss things as well but now we haven't


1846
16:30:11,360 --> 16:30:14,956
missed it during talking about it in this chapter


1847
16:30:14,956 --> 16:30:17,200
so let's now


1848
16:30:17,200 --> 16:30:21,596
wrap up this chapter we've done quite a lot and the main goal of this chapter is


1849
16:30:21,596 --> 16:30:24,400
now we've achieved that because we wanted to


1850
16:30:24,400 --> 16:30:29,436
go away from using firebase directly in our ui and going away from that using


1851
16:30:29,436 --> 16:30:34,400
our auth service for everything related to firebase and that's achieved so


1852
16:30:34,400 --> 16:30:37,680
very well done now what we need to do is as we're doing


1853
16:30:37,680 --> 16:30:42,000
in other chapters we need to uh commit and tag all the code that we've done


1854
16:30:42,000 --> 16:30:44,636
because it would be horrible if we


1855
16:30:44,636 --> 16:30:50,320
lost all this code for some reason so let me change the um layout of the


1856
16:30:50,320 --> 16:30:54,400
screen here and i'm going to make the


1857
16:30:54,400 --> 16:30:58,560
browse the editor a little bit bigger so you see it better and i'm going to go


1858
16:30:58,560 --> 16:31:01,276
into the terminal which i absolutely love in visual studio called the


1859
16:31:01,276 --> 16:31:06,320
integrated terminal and you can see that in the previous chapter we had committed


1860
16:31:06,320 --> 16:31:11,436
and tagged our code as step that's step eight now we need to commit as step nine


1861
16:31:11,436 --> 16:31:15,040
first let's have a look at status and get add all


1862
16:31:15,040 --> 16:31:22,080
status and we say git commit and we say step nine okay


1863
16:31:22,080 --> 16:31:25,520
and then we say git tag


1864
16:31:26,720 --> 16:31:30,636
nine as well and we first push our commit


1865
16:31:30,636 --> 16:31:34,160
and we say good push tax


1866
16:31:34,636 --> 16:31:39,276
all right that's pushed as well well done great job we are done with


1867
16:31:39,276 --> 16:31:43,680
this chapter and as it is uh for the case for other chapters i've talked


1868
16:31:43,680 --> 16:31:46,480
about we usually talk about what we're gonna do in the next chapter at the end


1869
16:31:46,480 --> 16:31:50,080
of the current chapter so we're done with auth service it's


1870
16:31:50,080 --> 16:31:56,480
working fine but what we don't have are some um tests


1871
16:31:56,480 --> 16:32:00,480
you see there are three different types of tests


1872
16:32:00,480 --> 16:32:06,160
that you can write in flutter unit tests integration tests and widget


1873
16:32:06,160 --> 16:32:11,436
tests now a unit test is where you for instance


1874
16:32:11,436 --> 16:32:17,200
try to take your current off service and then you uh


1875
16:32:17,200 --> 16:32:22,560
want to just say okay auth service log in register do this do that and


1876
16:32:22,560 --> 16:32:27,200
given this condition i expect you to do this now our auth service is working


1877
16:32:27,200 --> 16:32:32,160
quite well but we can't be 100 sure that it is working


1878
16:32:32,160 --> 16:32:36,400
as it should and let's say you're working inside a team and there are


1879
16:32:36,400 --> 16:32:40,480
three other people working on the same code base with you and you work on the


1880
16:32:40,480 --> 16:32:44,880
auth service and then you committed everybody reviews the code or


1881
16:32:44,880 --> 16:32:49,200
the way i like to do my code is to a pair program or mob program so there's


1882
16:32:49,200 --> 16:32:52,636
no code reviewing because everyone's working on the same code at the same


1883
16:32:52,636 --> 16:32:57,596
time so it depending on how you're working inside your team then you send


1884
16:32:57,596 --> 16:33:01,360
your code then two weeks later a new developer comes in changes your auth


1885
16:33:01,360 --> 16:33:05,040
service and to and they change the service that


1886
16:33:05,040 --> 16:33:09,436
it makes sense to them but then they break your code so maybe for instance


1887
16:33:09,436 --> 16:33:12,720
email verification screen stops working because they change


1888
16:33:12,720 --> 16:33:17,276
the code so that it's not executing the logic the way you thought it should


1889
16:33:17,276 --> 16:33:22,400
execute the logic so that's why we need tests to verify that our


1890
16:33:22,400 --> 16:33:27,360
um the way we design software is actually


1891
16:33:27,360 --> 16:33:32,320
uh is the way that it should perform its work so that it's not missing any points


1892
16:33:32,320 --> 16:33:34,400
and that's what we're going to do in the


1893
16:33:34,400 --> 16:33:39,040
next chapter so um grab some refreshments and i'll see


1894
16:33:39,040 --> 16:33:44,240
you in the next chapter hello and welcome to chapter 26 of this


1895
16:33:44,240 --> 16:33:47,520
flutter course in the previous chapter you saw that we


1896
16:33:47,520 --> 16:33:52,956
started using our auth service in our user interface code so we're not


1897
16:33:52,956 --> 16:33:57,436
going against firebase directly so we removed all the


1898
16:33:57,436 --> 16:34:02,560
imports to firebase in our user interface


1899
16:34:02,560 --> 16:34:08,720
files in the login register main dart file and um


1900
16:34:08,720 --> 16:34:13,040
notes view and also verify email view


1901
16:34:13,040 --> 16:34:18,080
and we have a good working auth service however what we're missing are some


1902
16:34:18,080 --> 16:34:23,436
tests and tests are one of my absolute favorite topics when i talk about


1903
16:34:23,436 --> 16:34:27,680
software development because they make your code a lot more robust


1904
16:34:27,680 --> 16:34:30,880
than just writing the code and leaving it in


1905
16:34:30,880 --> 16:34:34,320
there and i understand some software developers may


1906
16:34:34,320 --> 16:34:38,636
look at things as black and white saying that you have to have codes or


1907
16:34:38,636 --> 16:34:43,756
you don't have to have codes but i'm more of a grayish person in


1908
16:34:43,756 --> 16:34:47,040
thinking that well you have to be realistic sometimes you if you're for


1909
16:34:47,040 --> 16:34:51,520
instance writing an application for yourself in a hackathon for instance and


1910
16:34:51,520 --> 16:34:55,596
in in your you're in time pressure and you just want to get something out well


1911
16:34:55,596 --> 16:35:00,160
that's not the right place to write a unit test if you're in a hackathon


1912
16:35:00,160 --> 16:35:04,240
but if you're working with a company and they and you're getting paid to write


1913
16:35:04,240 --> 16:35:08,080
good software and you're getting paid to write your tests as well to make sure


1914
16:35:08,080 --> 16:35:10,400
everything's working out as it should especially if you're a back-end


1915
16:35:10,400 --> 16:35:13,276
developer software like a front-end developer


1916
16:35:13,276 --> 16:35:20,080
then you will need to ensure that your code is tested properly so


1917
16:35:20,080 --> 16:35:23,916
i'm going to bring up the caption here


1918
16:35:23,916 --> 16:35:29,916
about why we actually need tests and especially unit tests


1919
16:35:29,916 --> 16:35:34,400
um and we're going to talk about the different types of tests in a while but


1920
16:35:34,400 --> 16:35:39,200
let's just talk about unit tests um i mentioned in the


1921
16:35:39,200 --> 16:35:43,276
like the outro to the previous chapter about what unit tests are


1922
16:35:43,276 --> 16:35:47,520
and why we need them and for me the main reason having a unit


1923
16:35:47,520 --> 16:35:52,320
test is to ensure that if you if you think here's the auth provider we left


1924
16:35:52,320 --> 16:35:57,680
it in a state that well it's working okay code codes on code working so


1925
16:35:57,680 --> 16:36:02,320
it's working but what if a new developer comes into the project and


1926
16:36:02,320 --> 16:36:06,320
tries to change some code so that it works for her or for him


1927
16:36:06,320 --> 16:36:10,080
but unintentionally changes it changes the code so that it's not working for us


1928
16:36:10,080 --> 16:36:15,200
the way that we intended it so that's why that's one of the reasons we


1929
16:36:15,200 --> 16:36:18,796
have unit tests okay um so that's what we're going to do in


1930
16:36:18,796 --> 16:36:23,276
this chapter and i completely understand that this you if you're watching this of


1931
16:36:23,276 --> 16:36:27,596
course you're probably sitting somewhere in a calm area a calm room and you're


1932
16:36:27,596 --> 16:36:31,116
watching this course yourself it's the chat i think the chances of you watching


1933
16:36:31,116 --> 16:36:35,116
this course with a group of people are quite slim so


1934
16:36:35,116 --> 16:36:38,480
um and chances are you're just following along with the course and you're trying


1935
16:36:38,480 --> 16:36:41,520
to write an application or release it to the app store or play store and play


1936
16:36:41,520 --> 16:36:43,360
store so


1937
16:36:43,360 --> 16:36:47,276
maybe you're not so interested in making sure that your auth service is actually


1938
16:36:47,276 --> 16:36:51,360
tested and i completely understand that but i'm basically designing this course


1939
16:36:51,360 --> 16:36:55,520
for people who are trying to become also good software developers so if you're


1940
16:36:55,520 --> 16:36:58,796
coming as i've mentioned like one of the personas that i developed this course


1941
16:36:58,796 --> 16:37:02,636
for are designers so if you're a designer have no background in flutter


1942
16:37:02,636 --> 16:37:07,200
development you may also be interested in writing tests for your application


1943
16:37:07,200 --> 16:37:11,276
especially if your goal is to go into a bigger organization and actually get a


1944
16:37:11,276 --> 16:37:14,880
job as a flutter developer or as a software developer so


1945
16:37:14,880 --> 16:37:18,956
given that background you should know what tests are what unit tests are


1946
16:37:18,956 --> 16:37:25,200
integration tests are and what for instance widget tests are in flutter


1947
16:37:25,200 --> 16:37:30,320
now i need to also mention that there's something called a tdd or test


1948
16:37:30,320 --> 16:37:34,636
driven development and the right way of actually


1949
16:37:34,636 --> 16:37:38,720
doing test driven development is to first


1950
16:37:38,720 --> 16:37:42,880
write the tests and then you write your software at the moment we're doing it


1951
16:37:42,880 --> 16:37:47,040
the exact opposite because i didn't want to complicate uh things as we're going


1952
16:37:47,040 --> 16:37:49,840
because i have this as i said i designed this course for someone who's probably


1953
16:37:49,840 --> 16:37:53,116
new to flutter development or software development in general so like going


1954
16:37:53,116 --> 16:37:56,880
into test development test driven development directly and then writing


1955
16:37:56,880 --> 16:38:00,636
our off service probably would have complicated things more so in for the


1956
16:38:00,636 --> 16:38:04,400
sake of simplicity we wrote the code and then we're writing the test but just so


1957
16:38:04,400 --> 16:38:09,200
you know if you're if you hear people talking about tdd tested with the test


1958
16:38:09,200 --> 16:38:13,360
driven development what they mean is that you write the tests and in the


1959
16:38:13,360 --> 16:38:17,596
writing of the tests you come towards the conclusion of how the interface of


1960
16:38:17,596 --> 16:38:21,276
the class you're actually writing the tests for should look like if you're


1961
16:38:21,276 --> 16:38:24,880
working with classes so test driven development is there's


1962
16:38:24,880 --> 16:38:29,916
very important and we should be aware of it how to use it and if you're


1963
16:38:29,916 --> 16:38:34,080
working in a software development organization you should do test


1964
16:38:34,080 --> 16:38:38,560
development test driven development if time allows and if


1965
16:38:38,560 --> 16:38:42,956
um all the constraints are in the right place for you to actually do tests and


1966
16:38:42,956 --> 16:38:48,480
as i said i look at things more like in a not in a black and white um


1967
16:38:48,480 --> 16:38:52,880
vision more like a gray vision i say that you should do tests but that


1968
16:38:52,880 --> 16:38:56,796
is again something that is completely up to you and up to the situation that


1969
16:38:56,796 --> 16:39:01,840
you're in so just be aware of what tdd is and that


1970
16:39:01,840 --> 16:39:05,436
the right way of doing test driven development is that you first write your


1971
16:39:05,436 --> 16:39:09,200
tests and then you write the interfaces and


1972
16:39:09,200 --> 16:39:14,320
the code that the tests are actually performing their tests on there's lots


1973
16:39:14,320 --> 16:39:19,200
uh lots and lots of resources online about tdd and what it actually means how


1974
16:39:19,200 --> 16:39:24,400
it should be used tdd flutter as well so i strongly suggest that you have a look


1975
16:39:24,400 --> 16:39:28,880
at those resources as well and maybe perhaps after you've gone through this


1976
16:39:28,880 --> 16:39:33,276
chapter and done like the basics of doing tests


1977
16:39:33,276 --> 16:39:38,240
now um you see we have time limit in this course because this course can't go


1978
16:39:38,240 --> 16:39:43,276
on for hundreds and hundreds of hours um first because i i wouldn't probably be


1979
16:39:43,276 --> 16:39:48,240
able to put so much time i know that this course is already gonna go over 20


1980
16:39:48,240 --> 16:39:53,116
hours of time but it is it is going to take a lot of time


1981
16:39:53,116 --> 16:39:58,240
if you want to go and cover everything and all different types of testing


1982
16:39:58,240 --> 16:40:02,636
in flutter so for the sake of simplicity and making


1983
16:40:02,636 --> 16:40:06,160
sure that you follow along with this course without dropping off and getting


1984
16:40:06,160 --> 16:40:10,080
scared of all testing things that we're gonna do i'm gonna give you like the


1985
16:40:10,080 --> 16:40:13,756
basics and i'm gonna give you the building blocks that you're you need in


1986
16:40:13,756 --> 16:40:17,916
order to be able to carry on later on your own and write more and more tests


1987
16:40:17,916 --> 16:40:20,320
so i just know that the reason we're


1988
16:40:20,320 --> 16:40:23,756
dedicating this chapter to testing is to make sure that everybody understands


1989
16:40:23,756 --> 16:40:28,160
that testing is very important but also we are not going to have many many many


1990
16:40:28,160 --> 16:40:34,796
hours just to focus on testing though it is a very important subject


1991
16:40:34,796 --> 16:40:40,400
now let's talk about different types of tests i mentioned this in the outro to


1992
16:40:40,400 --> 16:40:44,560
the previous chapter and but i'll mention it here in case you've jumped


1993
16:40:44,560 --> 16:40:48,636
over that chapter which i don't recommend and if if you talk about


1994
16:40:48,636 --> 16:40:52,240
different types of tests in the flutter you should know that there are unit


1995
16:40:52,240 --> 16:40:57,840
tests widget tests and integration tests and let's just quickly talk about


1996
16:40:57,840 --> 16:41:02,720
what these different types of tests are well um


1997
16:41:02,720 --> 16:41:05,756
let's go and talk about the concept for instance of a class let's say you've


1998
16:41:05,756 --> 16:41:10,240
created a class called auth service which is the case for us and you want to


1999
16:41:10,240 --> 16:41:15,276
write some tests for this class now this class is very isolated in its own in its


2000
16:41:15,276 --> 16:41:19,436
own like it is it has a set of function functionalities functions and it has a


2001
16:41:19,436 --> 16:41:22,720
getter called current user if you don't remember that let me just


2002
16:41:22,720 --> 16:41:29,436
bring it to the screen so you see better um so let's go to our auth service


2003
16:41:30,400 --> 16:41:34,796
it conforms to and implements the auth provider it has a constructor it has a


2004
16:41:34,796 --> 16:41:38,160
factory constructor here as well and it has all the functionalities that are


2005
16:41:38,160 --> 16:41:43,360
provided by the auth provider because it implements auth provider so i'm gonna


2006
16:41:43,360 --> 16:41:46,320
actually increase the size so you see better


2007
16:41:46,320 --> 16:41:51,756
so um this is a unit of itself so it's a an


2008
16:41:51,756 --> 16:41:58,400
isolated piece of code that talks with an auth provider and then it gives us uh


2009
16:41:58,400 --> 16:42:02,480
basically mirrors the functionalities of that author provider which in in this


2010
16:42:02,480 --> 16:42:06,956
case is that in the firebase case is the firebase auth provider so


2011
16:42:06,956 --> 16:42:10,720
it doesn't have so much functionality but it has functionality good enough in


2012
16:42:10,720 --> 16:42:13,916
order for it to be tested and it's actually important to test it just to


2013
16:42:13,916 --> 16:42:18,080
make sure nobody unintentionally changes this code without without consulting


2014
16:42:18,080 --> 16:42:22,160
with us or without like and making sure that their changes aren't gonna break


2015
16:42:22,160 --> 16:42:25,916
our code so that's unit tests so you have a unit of code you have a piece of


2016
16:42:25,916 --> 16:42:30,796
code isolated and you want to test that piece of code and to ensure the


2017
16:42:30,796 --> 16:42:36,000
different functions inside that code um are working as they should so that's


2018
16:42:36,000 --> 16:42:38,840
just like a general idea of what a unit test


2019
16:42:38,840 --> 16:42:45,520
is now a widget test as its name indicates is a way for you as a software


2020
16:42:45,520 --> 16:42:49,436
developer in order to make it as a way for you as a software developer to make


2021
16:42:49,436 --> 16:42:54,080
sure that your widgets like the ui that you are creating is working as a shift


2022
16:42:54,080 --> 16:42:59,596
for instance if you have a login view in your application


2023
16:42:59,596 --> 16:43:04,720
and this login view allows the user to tap on a button in order to log in and


2024
16:43:04,720 --> 16:43:07,520
you're saying that okay in the ui i'm going to make sure as soon as you press


2025
16:43:07,520 --> 16:43:11,040
the login button until the user is logged in that this


2026
16:43:11,040 --> 16:43:15,360
login button should be disabled okay so that's a piece of logic that you thought


2027
16:43:15,360 --> 16:43:18,636
about good idea you put that code in there


2028
16:43:18,636 --> 16:43:22,080
but how do you test it how do you make sure that the login button stays


2029
16:43:22,080 --> 16:43:27,756
disabled until login is successful that's where widget testing comes into


2030
16:43:27,756 --> 16:43:34,480
play so widget testing is some sort of uh like an end to end test and by that


2031
16:43:34,480 --> 16:43:40,720
we mean that your widgets are probably talking with your services and with your


2032
16:43:40,720 --> 16:43:42,956
providers so


2033
16:43:42,956 --> 16:43:45,596
your widget for instance the login widget


2034
16:43:45,596 --> 16:43:49,596
or the login screen upon pressing the login button is gonna call into your


2035
16:43:49,596 --> 16:43:53,520
service in this case the auth service and it's going to go into this login


2036
16:43:53,520 --> 16:43:57,116
function this login function in turn is going to talk with a provider the


2037
16:43:57,116 --> 16:44:01,596
provider in turn is going to talk with the firebase code which in turn is going


2038
16:44:01,596 --> 16:44:06,160
to talk with the firebase backend so you see the layers are stacking up ui is


2039
16:44:06,160 --> 16:44:11,596
here the button is on the ui ui is talking with auth service


2040
16:44:11,596 --> 16:44:16,400
here auth service is talking with the provider the provider is talking with


2041
16:44:16,400 --> 16:44:19,680
firebase firebase is talking with the firebase backend and maybe the backend


2042
16:44:19,680 --> 16:44:22,240
is also talking with some other services so


2043
16:44:22,240 --> 16:44:27,916
that's end to end it's one end and the other end is right here so


2044
16:44:27,916 --> 16:44:31,680
you are basically by writing widget tests you're doing end-to-end testing in


2045
16:44:31,680 --> 16:44:37,276
a way okay so that's widget tests the other things are integration tests


2046
16:44:37,276 --> 16:44:40,880
you see an integration test is where you for


2047
16:44:40,880 --> 16:44:46,000
instance have a service which we have in this case the auth service and the auth


2048
16:44:46,000 --> 16:44:50,956
service is in this case the auth service constructor or the factory constructor


2049
16:44:50,956 --> 16:44:56,400
is talking with firebase so if you test our off service the exact way it is in


2050
16:44:56,400 --> 16:44:59,360
that you go and say auth service firebase


2051
16:44:59,360 --> 16:45:02,560
and then you issue commands against this auth service


2052
16:45:02,560 --> 16:45:06,560
firebase you create a user you sign in with the user you log out you send an


2053
16:45:06,560 --> 16:45:10,320
email verification if you're doing these tests you are


2054
16:45:10,320 --> 16:45:15,116
actually doing integration tests so you're because you're making sure that


2055
16:45:15,116 --> 16:45:19,916
the code is also working end-to-end but there's no ui involved so


2056
16:45:19,916 --> 16:45:21,916
uh but


2057
16:45:21,916 --> 16:45:25,840
i mentioned i mean you're now thinking okay what if testing auth service the


2058
16:45:25,840 --> 16:45:29,276
way it is is integration tests how come you said in the beginning of this


2059
16:45:29,276 --> 16:45:32,956
chapter that we're going to do unit tests


2060
16:45:32,956 --> 16:45:38,080
and that's what we need to talk about now because you see in this unit test


2061
16:45:38,080 --> 16:45:40,796
exercise that we're going to do in this chapter we're not actually going to call


2062
16:45:40,796 --> 16:45:45,756
firebase we're going to call we're going to do something called mocking


2063
16:45:45,756 --> 16:45:50,240
i don't know if i've actually mentioned some something here


2064
16:45:50,240 --> 16:45:54,320
yes i can see that later i'm actually going to talk about mocking


2065
16:45:54,320 --> 16:45:58,000
and mocking in english it could mean that you're making fun of someone and


2066
16:45:58,000 --> 16:46:02,796
that's not this and what we're talking about here mocking is kind of like you


2067
16:46:02,796 --> 16:46:08,480
imitating um a real service so imagine you have the auth service the off


2068
16:46:08,480 --> 16:46:12,080
service has a firebase factory talks with firebase and it turns talks with


2069
16:46:12,080 --> 16:46:15,436
the firebase code and then talks to the backend we're going to get rid of all of


2070
16:46:15,436 --> 16:46:20,240
that pipeline and say we're going to test off service but we're going to give


2071
16:46:20,240 --> 16:46:23,916
it another provider a provider that we


2072
16:46:23,916 --> 16:46:28,720
control you see the fire the firebase auth provider has a lot of code in it so


2073
16:46:28,720 --> 16:46:31,916
we can go in there let's go in the firebase auth provider


2074
16:46:31,916 --> 16:46:36,480
it talks directly with firebase but what if we could create an


2075
16:46:36,480 --> 16:46:41,520
auth provider that conforms to auth provider and then write a lot of logic


2076
16:46:41,520 --> 16:46:46,720
in that auth provider and provide that author provider to the auth service


2077
16:46:46,720 --> 16:46:50,880
now all of a sudden we have an auth service that delegates all his tasks to


2078
16:46:50,880 --> 16:46:54,000
this mock um


2079
16:46:54,000 --> 16:46:58,560
auth provider that we control the code for so we know exactly what the sign-in


2080
16:46:58,560 --> 16:47:01,360
is going to do we know exactly what the sign out is going to do or log in and


2081
16:47:01,360 --> 16:47:04,400
lock it depending on the terminology that you like to use


2082
16:47:04,400 --> 16:47:06,956
so what we are going to do in this chapter


2083
16:47:06,956 --> 16:47:11,360
is mocking and i'm going to explain that soon so let's just jump over that for


2084
16:47:11,360 --> 16:47:13,596
now


2085
16:47:13,680 --> 16:47:16,320
okay um


2086
16:47:16,320 --> 16:47:20,480
the next thing that we need to talk about are dev dependencies


2087
16:47:20,480 --> 16:47:24,560
if you're coming from like a node background if you've worked with nodejs


2088
16:47:24,560 --> 16:47:30,320
or express you know already about npm which is the node package manager


2089
16:47:30,320 --> 16:47:34,560
and you know what dev dependencies are in there


2090
16:47:34,560 --> 16:47:39,756
if you're coming from an ios background there isn't much of a dev dependency to


2091
16:47:39,756 --> 16:47:42,480
be honest with you except if you're coming from an ios development


2092
16:47:42,480 --> 16:47:45,596
background then you know when you're writing your tests those test frameworks


2093
16:47:45,596 --> 16:47:50,400
etc that you bring into your test target there are inside their own target so


2094
16:47:50,400 --> 16:47:54,480
that they're not shipped with the final product if you're not coming from any of


2095
16:47:54,480 --> 16:47:57,040
those backgrounds and you just want to know what dev dependencies are all


2096
16:47:57,040 --> 16:48:01,916
explaining now you see when we're working with our application if we go to


2097
16:48:01,916 --> 16:48:07,200
our pop spec yaml you'll see that we have a section here


2098
16:48:07,200 --> 16:48:11,840
called dependencies and at the moment we have dependencies on various libraries


2099
16:48:11,840 --> 16:48:16,320
for instance firebase core firebase auth cloud firestore and


2100
16:48:16,320 --> 16:48:20,400
firebase analytics these are the dependencies or libraries that we're


2101
16:48:20,400 --> 16:48:24,080
bringing into our application which if you think this is our


2102
16:48:24,080 --> 16:48:27,916
application these are the various libraries coming in and then we're at


2103
16:48:27,916 --> 16:48:30,880
the end actually at the end of this um


2104
16:48:30,880 --> 16:48:34,480
course we're gonna send our application to app store and google play store


2105
16:48:34,480 --> 16:48:38,956
when we create our application to send to these respective stores we're


2106
16:48:38,956 --> 16:48:44,160
bundling the application and all the dependencies together and sending this


2107
16:48:44,160 --> 16:48:48,636
as a complete binary to the respective um


2108
16:48:48,636 --> 16:48:52,240
app store however you also have a section here in


2109
16:48:52,240 --> 16:48:55,756
your pop spec yaml called def dependencies


2110
16:48:55,756 --> 16:49:01,596
now dev dependencies are dependencies that you use and bring into your


2111
16:49:01,596 --> 16:49:05,040
application only during the development of your


2112
16:49:05,040 --> 16:49:08,720
application meaning that when you ship your application which is a term used


2113
16:49:08,720 --> 16:49:10,560
for saying that when you create the


2114
16:49:10,560 --> 16:49:14,160
application and post it to the respective app store for instance for


2115
16:49:14,160 --> 16:49:18,080
review then those dependencies aren't actually packaged inside your


2116
16:49:18,080 --> 16:49:22,320
application so they're only inside your application while you're developing it


2117
16:49:22,320 --> 16:49:25,520
and as soon as you package it up and send it for release then those


2118
16:49:25,520 --> 16:49:28,880
dependencies are not going to be packed inside the application all right


2119
16:49:28,880 --> 16:49:34,160
so those are dev dependencies


2120
16:49:37,756 --> 16:49:41,200
now let's go to our


2121
16:49:41,276 --> 16:49:45,436
testing here so as you can see here we need to bring


2122
16:49:45,436 --> 16:49:49,200
tests into our


2123
16:49:49,360 --> 16:49:52,636
into our flutter application to make sure that we can actually run our tests


2124
16:49:52,636 --> 16:49:56,480
so you will see here flutter test is already included i'm going to show you


2125
16:49:56,480 --> 16:50:00,000
the command that you'll need to issue in terminal in order to bring it manually


2126
16:50:00,000 --> 16:50:02,880
as well and that is if we go in here and just


2127
16:50:02,880 --> 16:50:08,596
type flutter pop add test dev


2128
16:50:09,680 --> 16:50:12,080
all right


2129
16:50:12,560 --> 16:50:18,480
it's doing a pop get there okay this job is done now now let's have


2130
16:50:18,480 --> 16:50:22,480
a look in here and you can see now we have a dev


2131
16:50:22,480 --> 16:50:26,720
dependency called test and that's how you bring it into your application using


2132
16:50:26,720 --> 16:50:31,596
this command so i'm going to bring it up again just so you see it flutter pop add


2133
16:50:31,596 --> 16:50:37,200
test and and a dash dash dev if as i said if you're a node


2134
16:50:37,200 --> 16:50:40,796
node.js developer you'll know this from npm


2135
16:50:40,796 --> 16:50:46,160
d which adds it as a development requirement or dependency to your


2136
16:50:46,160 --> 16:50:50,320
application so i'm not going to assume that you brought


2137
16:50:50,320 --> 16:50:53,520
in this test package into your application with the command that i


2138
16:50:53,520 --> 16:50:57,840
provided here for you in the terminal so if then you look at your pops back yaml


2139
16:50:57,840 --> 16:51:02,240
file so i'm going to bring this down if you look at your pop spec yaml file


2140
16:51:02,240 --> 16:51:06,480
inside dev dependency then you should have this test package only inside your


2141
16:51:06,480 --> 16:51:10,160
dev dependencies if you see that is brought into the dependency section that


2142
16:51:10,160 --> 16:51:14,320
is incorrect it shouldn't be there and that is because you've missed perhaps


2143
16:51:14,320 --> 16:51:19,916
adding the dash dash dev at the end of your flutter pop add test command so if


2144
16:51:19,916 --> 16:51:23,360
you do it like this then test is going to be added to


2145
16:51:23,360 --> 16:51:29,520
dependencies and that's incorrect so make sure that you fix that error


2146
16:51:30,000 --> 16:51:36,720
okay so let's go to the next section and talk about that now if you bring up your


2147
16:51:36,720 --> 16:51:41,116
explorer you will notice that if you go to your test folder the entire test


2148
16:51:41,116 --> 16:51:45,360
folder at the moment is marked as red and and


2149
16:51:45,360 --> 16:51:50,000
uh actually it's not marked as red like an email it's is is


2150
16:51:50,000 --> 16:51:54,956
rendered in red color that's what i mean so it could be um maybe


2151
16:51:54,956 --> 16:52:00,080
heard in in the wrong tone so if you go in there that folder was read and then


2152
16:52:00,080 --> 16:52:04,160
if you click on on this file which is called a widget test that file is also


2153
16:52:04,160 --> 16:52:07,596
red has a lot of errors here actually no it has one error because it's creating


2154
16:52:07,596 --> 16:52:10,240
something called my app so


2155
16:52:10,240 --> 16:52:13,916
what we need to do in here because we don't need this existing test you see


2156
16:52:13,916 --> 16:52:17,840
this test was created for us when we created our flutter application we need


2157
16:52:17,840 --> 16:52:22,160
to get rid of it okay so let's go in here and right click on it and just say


2158
16:52:22,160 --> 16:52:27,840
delete and that file is gone okay so that's the first thing that we have


2159
16:52:27,840 --> 16:52:31,360
to do and collapse this leap folder here as


2160
16:52:31,360 --> 16:52:35,040
well now what we need to do here as a caption


2161
16:52:35,040 --> 16:52:40,956
indicates we need to create a new file called auth test dot dart okay


2162
16:52:40,956 --> 16:52:47,756
so let's go ahead and do that under the test folder so


2163
16:52:47,756 --> 16:52:52,480
let me go ahead and do that right now under the test folder right click and


2164
16:52:52,480 --> 16:52:56,480
say new file and then call it off test dart


2165
16:52:56,480 --> 16:52:58,796
all right


2166
16:52:59,596 --> 16:53:04,636
okay and what we need to do then in this off test start right now this function


2167
16:53:04,636 --> 16:53:10,636
is completely empty so let's first add a main function in here


2168
16:53:10,636 --> 16:53:14,796
like that and you can see as soon as we add the main function in here dart is


2169
16:53:14,796 --> 16:53:18,400
intelligent enough to give us a run and a debug functionality here and that's


2170
16:53:18,400 --> 16:53:22,160
displayed in visual studio code i think android studio also does the same thing


2171
16:53:22,160 --> 16:53:27,276
i don't think vim is availa is able to do that it may be vim is time and time


2172
16:53:27,276 --> 16:53:31,680
again has surprised me with all this uh amazing capabilities


2173
16:53:31,680 --> 16:53:36,240
uh but depending on the um on the tool or the text editor or the


2174
16:53:36,240 --> 16:53:39,756
id that you're using this could be different but don't worry about it we're


2175
16:53:39,756 --> 16:53:43,520
not actually going to click on these things so if you don't see these things


2176
16:53:43,520 --> 16:53:47,200
in your text editor you don't have to worry about that


2177
16:53:47,200 --> 16:53:49,840
so now that we've done


2178
16:53:49,840 --> 16:53:54,400
adding the test package now that we've imported test packages that depends we


2179
16:53:54,400 --> 16:53:58,400
also need to import it so let's go in here and say import


2180
16:53:58,400 --> 16:54:03,276
and get rid of this editor sorry explorer on the left hand side and i'm


2181
16:54:03,276 --> 16:54:07,116
going to say if we import a package called test


2182
16:54:07,116 --> 16:54:13,840
and there's a file in there called test start so now we're ready basically okay


2183
16:54:14,080 --> 16:54:18,320
all right um now you see


2184
16:54:18,320 --> 16:54:22,720
you may not have noticed it but i have this application already running


2185
16:54:22,720 --> 16:54:26,636
on my actual android phone as we've done in the previous chapter so i never


2186
16:54:26,636 --> 16:54:30,320
killed this application without a reason it's always running on that android


2187
16:54:30,320 --> 16:54:36,240
phone i can always bring it up with scr cpy so i can see right here that is


2188
16:54:36,240 --> 16:54:40,240
running without a problem however


2189
16:54:40,240 --> 16:54:44,320
remember one of the previous chapters one of the first previous chapters when


2190
16:54:44,320 --> 16:54:48,636
we talked about adding firebase to our application i think it was chapter five


2191
16:54:48,636 --> 16:54:53,680
or six it was very early in the course when we brought in firebase we need to


2192
16:54:53,680 --> 16:54:56,560
we needed to kill the application meaning that we needed to terminate the


2193
16:54:56,560 --> 16:54:59,756
application and run it from scratch so


2194
16:54:59,756 --> 16:55:03,360
depending on some dependent actually no i don't think it's depending when you


2195
16:55:03,360 --> 16:55:06,880
bring in a new dependency in your project you need to always ensure that


2196
16:55:06,880 --> 16:55:10,796
you rebuild your project so you cannot do hot reload and hot restart because


2197
16:55:10,796 --> 16:55:14,880
some of these dependencies they actually need your application to be


2198
16:55:14,880 --> 16:55:18,160
compiled from scratch and then


2199
16:55:18,160 --> 16:55:22,796
then be brought into your binary so hot reload and hot restart aren't going to


2200
16:55:22,796 --> 16:55:26,796
actually like be able to bring those dependencies


2201
16:55:26,796 --> 16:55:30,796
yet at least into your flutter application so what i need you to do


2202
16:55:30,796 --> 16:55:36,880
is to stop the execution of your program and then let's go in here save these


2203
16:55:36,880 --> 16:55:42,880
changes then let's go and say main.dart


2204
16:55:42,880 --> 16:55:47,840
and let's run the application without debugging and let's see if this


2205
16:55:47,840 --> 16:55:50,956
is going to launch the application correctly on the right device as well


2206
16:55:50,956 --> 16:55:55,200
and i can see yes it is going to run it on the correct device i change the


2207
16:55:55,200 --> 16:55:59,436
screen layout a little bit here as well so


2208
16:55:59,436 --> 16:56:05,916
let's just then wait for uh this gradle belt to finish doing its work


2209
16:56:06,400 --> 16:56:09,596
it might take some time depending on the changes that you've made to the


2210
16:56:09,596 --> 16:56:13,276
application in this case we brought in a whole new package called testing to our


2211
16:56:13,276 --> 16:56:16,320
application so it is taking its time and that's


2212
16:56:16,320 --> 16:56:19,040
completely fine


2213
16:56:20,560 --> 16:56:26,320
and i can see now it has run our code without a problem great


2214
16:56:26,320 --> 16:56:33,116
stuff for this chapter i don't think we need our um device with scr cpy if


2215
16:56:33,116 --> 16:56:36,560
you're using ios simulator i don't think you need it if you're using an emulator


2216
16:56:36,560 --> 16:56:39,360
i don't think you need it either so we could just get rid of it so we don't


2217
16:56:39,360 --> 16:56:42,240
have to display it on the screen but remember my application is still running


2218
16:56:42,240 --> 16:56:44,320
okay so


2219
16:56:44,320 --> 16:56:48,956
um let me get rid of this here get rid of the widget inspector get rid of the


2220
16:56:48,956 --> 16:56:54,956
main dart and let's go to our auth test dart file in here


2221
16:56:54,956 --> 16:56:59,200
okay now one thing that we also need to fix


2222
16:56:59,200 --> 16:57:04,480
before we start writing our tests is this little functionality here this


2223
16:57:04,480 --> 16:57:11,116
little guy in our auth user if i bring up off user here


2224
16:57:11,116 --> 16:57:16,080
you'll see that it has the way we left it is we added a


2225
16:57:16,080 --> 16:57:21,680
um we added a member variable to this off user immutable class here called is


2226
16:57:21,680 --> 16:57:25,360
email verified and the way we're constructing this auth user if you see


2227
16:57:25,360 --> 16:57:30,160
here we're saying off user just give us this william so if from anywhere inside


2228
16:57:30,160 --> 16:57:33,756
your function and you have


2229
16:57:34,080 --> 16:57:37,200
a if from anywhere inside of your application you want to create an


2230
16:57:37,200 --> 16:57:41,596
instance of off user you'll probably do like this off user and then you have to


2231
16:57:41,596 --> 16:57:47,040
pass that boolean is email verified however you'll see that


2232
16:57:47,040 --> 16:57:50,956
parameter has no name it's just a true or false


2233
16:57:50,956 --> 16:57:56,240
if i as a programmer see auth user true obvious or false i don't understand what


2234
16:57:56,240 --> 16:58:00,400
this true or false is what does that even mean does that mean the auth user


2235
16:58:00,400 --> 16:58:03,680
is turned on is turned off what does it mean


2236
16:58:03,680 --> 16:58:10,880
for that dart has the capability to give you required named parameters and that


2237
16:58:10,880 --> 16:58:14,320
means that instead of passing true in here you will


2238
16:58:14,320 --> 16:58:21,916
be forced to write off user his email verified true or false like that


2239
16:58:21,916 --> 16:58:25,916
so in order to do that as the caption indicates we need to go and make this a


2240
16:58:25,916 --> 16:58:29,200
required parameter and the way to do that is to


2241
16:58:29,200 --> 16:58:33,756
wrap it inside curly brackets like this and then prefix it with the word for the


2242
16:58:33,756 --> 16:58:38,956
keyword required so after you've done that and this


2243
16:58:38,956 --> 16:58:43,436
function is not going to work anymore because this parameter is missing so


2244
16:58:43,436 --> 16:58:47,756
it's email verified and we're gonna pass


2245
16:58:47,756 --> 16:58:51,840
this value right there okay and let's just move that remove


2246
16:58:51,840 --> 16:58:55,436
that function so now we've achieved what we said we're


2247
16:58:55,436 --> 16:58:57,840
gonna do


2248
16:58:58,160 --> 16:59:01,596
now um because you see we're not gonna we're


2249
16:59:01,596 --> 16:59:05,360
not actually you may think that okay we've changed this parameter to required


2250
16:59:05,360 --> 16:59:09,360
so where are all the errors in our code why didn't anything break and that's one


2251
16:59:09,360 --> 16:59:13,116
of the beauties of what we've done so far and that we've abstracted away so


2252
16:59:13,116 --> 16:59:18,720
much code that the code is a lot more robust now so because nowhere inside our


2253
16:59:18,720 --> 16:59:24,320
application we're actually creating us users except from this factory function


2254
16:59:24,320 --> 16:59:28,400
the only place we have to fix this is email verified is inside this factory


2255
16:59:28,400 --> 16:59:31,680
function so to me that's beautiful because


2256
16:59:31,680 --> 16:59:36,720
doing something like drastic by adding a required parameter to a class it didn't


2257
16:59:36,720 --> 16:59:42,520
break anything so we're just good to go okay


2258
16:59:42,796 --> 16:59:47,200
all right um now this is the point that i mentioned


2259
16:59:47,200 --> 16:59:52,880
previously that we need a mock off provider all right


2260
16:59:52,880 --> 16:59:57,596
in order to do a mock author provider i need to go a little bit more into what


2261
16:59:57,596 --> 17:00:02,240
mocks are and why we need them you see in software um


2262
17:00:02,240 --> 17:00:06,720
we have especially in testing as well or even as the app architecture level or


2263
17:00:06,720 --> 17:00:10,720
software architect architecture level we have something called dependency in


2264
17:00:10,720 --> 17:00:14,000
injection dependency injection


2265
17:00:14,000 --> 17:00:18,560
just quickly explaining it is very similar to our auth service let's have a


2266
17:00:18,560 --> 17:00:24,560
look at our off service here you see off service is dependent on an auth provider


2267
17:00:24,560 --> 17:00:30,080
and it's not just making the assumption that it's auth providers always firebase


2268
17:00:30,080 --> 17:00:34,880
it provides a factory for firebase but it's not making an assumption about that


2269
17:00:34,880 --> 17:00:38,560
hey i'm always locked to firebase auth provider


2270
17:00:38,560 --> 17:00:43,680
this is dependency injection so this off service is dependent on a provider using


2271
17:00:43,680 --> 17:00:47,276
a constant constructor initializer we're


2272
17:00:47,276 --> 17:00:50,880
injecting the provider into it this


2273
17:00:50,880 --> 17:00:55,040
in a nutshell is dependency injection in software development


2274
17:00:55,040 --> 17:00:58,560
you could go into a lot more details about it but we don't have time for it


2275
17:00:58,560 --> 17:01:03,436
um so what is a mock the mock goes very


2276
17:01:03,436 --> 17:01:07,040
very well hand in hand with dependency injection


2277
17:01:07,040 --> 17:01:11,360
in that in this case you can see we have an off service that is mirroring the


2278
17:01:11,360 --> 17:01:15,680
functionality of its provider which you could inject into it


2279
17:01:15,680 --> 17:01:17,916
but the provider that we're using at the


2280
17:01:17,916 --> 17:01:22,000
moment is called firebase what if we created a


2281
17:01:22,000 --> 17:01:27,596
completely new provider that we have complete control over we can we can make


2282
17:01:27,596 --> 17:01:32,000
sure that it conforms and implements auth provider and we can make sure that


2283
17:01:32,000 --> 17:01:35,756
it implements all those functionalities that is that auth provider implements


2284
17:01:35,756 --> 17:01:40,956
and overrides all those but we have some special logic in our own


2285
17:01:40,956 --> 17:01:45,916
mock auth provider then we will give this auth provider to


2286
17:01:45,916 --> 17:01:51,436
our auth service and then let the auth service do its magic and and mirror all


2287
17:01:51,436 --> 17:01:58,000
those functionalities of the provider so we're gonna mock an off provider and


2288
17:01:58,000 --> 17:02:03,520
provide that into our auth service so that's what mocking is when


2289
17:02:03,520 --> 17:02:09,680
you when you create a a new function or a class and then you


2290
17:02:09,680 --> 17:02:13,116
can then inject that into another


2291
17:02:13,116 --> 17:02:17,840
place and then test that another place okay


2292
17:02:18,400 --> 17:02:22,880
so let's go in our off test dart file that we have right here i'm going to


2293
17:02:22,880 --> 17:02:31,276
command s on it and let's go and create our little off like mock off provider


2294
17:02:31,276 --> 17:02:35,840
so i'm gonna go in here and i'm just gonna say class mock off provider and


2295
17:02:35,840 --> 17:02:39,916
suggest you do the same thing and this guy is gonna implement


2296
17:02:39,916 --> 17:02:44,956
um the auth provider okay auto imported for


2297
17:02:44,956 --> 17:02:48,560
us okay so like that


2298
17:02:48,720 --> 17:02:51,596
all right now what we need to do is just to get


2299
17:02:51,596 --> 17:02:55,520
mock-off provider to implement all the functionalities


2300
17:02:55,520 --> 17:03:00,160
that the auth provider apps abstract class requires us to implement so i'm


2301
17:03:00,160 --> 17:03:04,956
going to command dot on it and respectfully ask visual studio code to


2302
17:03:04,956 --> 17:03:09,276
create those six missing overrides thank you so much visual studio code for


2303
17:03:09,276 --> 17:03:14,160
making our lives easier okay


2304
17:03:14,160 --> 17:03:19,520
now what we need to do is just to do the heavy lifting of this mock auth provider


2305
17:03:19,520 --> 17:03:25,596
which means to go ahead and create the functionality for the auth provider okay


2306
17:03:25,596 --> 17:03:28,480
i understand that the code is completely ginormous right now so i'm going to


2307
17:03:28,480 --> 17:03:32,080
decrease the size a little bit so you see more of the code


2308
17:03:32,080 --> 17:03:37,680
so let's go ahead and take care of the first function in here which is create


2309
17:03:37,680 --> 17:03:41,040
user okay now you see


2310
17:03:41,040 --> 17:03:45,040
what we're going to do is if you remember


2311
17:03:45,040 --> 17:03:50,000
our auth provider has a function called initialize all


2312
17:03:50,000 --> 17:03:53,680
right now when we're using auth provider in


2313
17:03:53,680 --> 17:03:59,520
the context of firebase firebase internally has the concept of whether it


2314
17:03:59,520 --> 17:04:03,520
is initialized or not but when we're creating a mock auth


2315
17:04:03,520 --> 17:04:09,040
provider where is that functionality we don't keep track yet of whether our mock


2316
17:04:09,040 --> 17:04:12,160
auth provider is actually initialized or not


2317
17:04:12,160 --> 17:04:18,720
and we just have an initialize function but what if someone calls create user on


2318
17:04:18,720 --> 17:04:24,400
our mock auth provider without having initialized the provider yet and that's


2319
17:04:24,400 --> 17:04:29,200
what we need to do now so let's go ahead and keep track of that


2320
17:04:29,200 --> 17:04:34,160
so what we're going to do here is we're just going to say var is initialized


2321
17:04:34,160 --> 17:04:39,520
it is false to begin with okay and the reason i'm saying underscore is


2322
17:04:39,520 --> 17:04:44,480
initialize is because um this is making this property pretty much


2323
17:04:44,480 --> 17:04:49,200
private to our mock-off provider so we're indicating to the outside world


2324
17:04:49,200 --> 17:04:52,560
that hey you shouldn't be reading from this property or writing to this


2325
17:04:52,560 --> 17:04:54,956
property


2326
17:04:55,680 --> 17:05:00,636
okay that is done now let's create a little getter for this property so that


2327
17:05:00,636 --> 17:05:05,680
when we're testing our mock auth provider we can actually say


2328
17:05:05,680 --> 17:05:10,320
hey are you initialized and we can also create a test for a mock


2329
17:05:10,320 --> 17:05:14,560
auth provider which we're actually going to do is to say okay when we create the


2330
17:05:14,560 --> 17:05:19,200
mock auth provider it shouldn't initially be initialized however after


2331
17:05:19,200 --> 17:05:24,000
calling initialize on it then we make a test to make sure that initialize flag


2332
17:05:24,000 --> 17:05:28,320
is set to true so let's in order to do that we need to be able to read this is


2333
17:05:28,320 --> 17:05:32,880
initialize flag let's go ahead and create a boolean getter for it we call


2334
17:05:32,880 --> 17:05:38,080
it is initialized it's initialized and we just return is


2335
17:05:38,080 --> 17:05:41,596
initialized in there


2336
17:05:41,680 --> 17:05:46,080
all right now let's go into our create user i'm


2337
17:05:46,080 --> 17:05:49,200
going to put a comma at the end of that parameter i'm also going to take the


2338
17:05:49,200 --> 17:05:52,956
liberty of going and creating and putting a comma at the end of login


2339
17:05:52,956 --> 17:05:57,840
function and that's the only two places that had


2340
17:05:57,840 --> 17:06:01,436
that required a comma at the end of their parameter list so now dart


2341
17:06:01,436 --> 17:06:06,080
formatter is able to format the code a lot better


2342
17:06:06,320 --> 17:06:11,680
okay let's go to create user now you see in create user i'm pretty much in all


2343
17:06:11,680 --> 17:06:14,796
these functions that we're writing in here for instance login send email


2344
17:06:14,796 --> 17:06:20,080
verification we're we need to make sure that this mock auth provider is already


2345
17:06:20,080 --> 17:06:24,796
initialized so we're actually going to throw an exception if you call these


2346
17:06:24,796 --> 17:06:29,040
functions that require initialization without having initialized the mock auth


2347
17:06:29,040 --> 17:06:36,720
provider first so let's go and define a um an exception in here


2348
17:06:36,720 --> 17:06:40,720
so let me see actually if i have written that down somewhere


2349
17:06:40,720 --> 17:06:45,276
nope so let's go in here and just say class


2350
17:06:45,276 --> 17:06:49,276
not mini initialized exception


2351
17:06:49,276 --> 17:06:53,200
implements exception so you should know this from


2352
17:06:53,200 --> 17:06:56,956
before and it's empty for now


2353
17:06:56,956 --> 17:07:00,956
okay so what we need to do in here we need to


2354
17:07:00,956 --> 17:07:06,880
just say if is initialized if it's not initialized


2355
17:07:06,880 --> 17:07:11,756
then throw not initialized exception


2356
17:07:11,756 --> 17:07:14,000
okay


2357
17:07:14,080 --> 17:07:17,596
so that's an if statement it's a one-liner that's why we don't really


2358
17:07:17,596 --> 17:07:20,796
break it in here otherwise you put curly brackets in here and then do the


2359
17:07:20,796 --> 17:07:24,636
throwing in there but you could also use a one-liner if statement if that's all


2360
17:07:24,636 --> 17:07:28,000
if that's what you're doing just one line of code


2361
17:07:28,000 --> 17:07:31,520
all right and i kind of like these one-liner if statements to be honest


2362
17:07:31,520 --> 17:07:36,720
with you so i hope you got this if the mock auth provider is not initialized


2363
17:07:36,720 --> 17:07:41,756
throw that particular exception and what we're going to do is just we're


2364
17:07:41,756 --> 17:07:46,080
going to fake creating a user okay so we're just going to say


2365
17:07:46,080 --> 17:07:50,080
if you call the create user on firebase for instance it probably needs to go and


2366
17:07:50,080 --> 17:07:54,160
talk with firebase back-end so it's going to take some time so let's build


2367
17:07:54,160 --> 17:07:58,880
in some little uh delay in here and what we're going to do is just to


2368
17:07:58,880 --> 17:08:02,560
say future and delete


2369
17:08:02,560 --> 17:08:06,400
and here you have to pass the duration to it so we say const duration


2370
17:08:06,400 --> 17:08:11,200
seconds and they do


2371
17:08:11,200 --> 17:08:17,276
i believe that's it let's just say one in here and remember


2372
17:08:17,276 --> 17:08:22,560
future delayed if i go and move over it's a function signature it returns a


2373
17:08:22,560 --> 17:08:27,840
future of dynamic so by creating a future you're not actually waiting on it


2374
17:08:27,840 --> 17:08:32,840
so let's mark our function as async and let's just wait on it


2375
17:08:32,840 --> 17:08:40,000
okay now do then is to make sure that


2376
17:08:40,000 --> 17:08:43,360
um this create user actually returns an


2377
17:08:43,360 --> 17:08:48,480
author user but remember also in firebase um or i don't actually know if


2378
17:08:48,480 --> 17:08:52,400
firebase works like this by but by creating a user what we're going to do


2379
17:08:52,400 --> 17:08:58,796
in our mock auth provider is actually logging that user in as well okay


2380
17:08:58,796 --> 17:09:02,080
so let's just say you see login returns


2381
17:09:02,080 --> 17:09:06,636
also a future of auth user so at the end of this create user we're just going to


2382
17:09:06,636 --> 17:09:10,080
make our lives easier and just return the result of logging in so let's just


2383
17:09:10,080 --> 17:09:12,720
say return and log in


2384
17:09:12,720 --> 17:09:17,596
when this email and password okay


2385
17:09:17,596 --> 17:09:23,040
so this is a very dumb and very easy mock implementation of create user in


2386
17:09:23,040 --> 17:09:27,756
itself it does three things checks to make sure that you're initialized and if


2387
17:09:27,756 --> 17:09:30,880
you're not initialized it throws an exception


2388
17:09:30,880 --> 17:09:37,436
it does a mock uh one second wait just to like fake making an api call and the


2389
17:09:37,436 --> 17:09:40,956
third thing that it does is that it calls the login function with the same


2390
17:09:40,956 --> 17:09:45,520
email and password and returns the result of login just so that it can get


2391
17:09:45,520 --> 17:09:48,796
its off user


2392
17:09:49,276 --> 17:09:54,560
okay now we need the mock current user so


2393
17:09:54,560 --> 17:09:59,040
how do we do that how do we get a current user you see


2394
17:09:59,040 --> 17:10:03,200
firebase has the ability to keep track of the current user but how do we do


2395
17:10:03,200 --> 17:10:07,276
that we can't just go and delegate this functionality to firebase right now so


2396
17:10:07,276 --> 17:10:12,796
we also need to create an auth user in here okay so let's go to deter mock auth


2397
17:10:12,796 --> 17:10:17,916
provider right there off is initialized or below it doesn't


2398
17:10:17,916 --> 17:10:22,320
matter somewhere i'm gonna do it above i'm gonna say user


2399
17:10:22,320 --> 17:10:27,040
like this you see in far in a dart if you make a


2400
17:10:27,040 --> 17:10:32,400
member variable optional by default it is null so it has no value so you don't


2401
17:10:32,400 --> 17:10:35,916
have to actually go and say no and you can see it says don't explicitly


2402
17:10:35,916 --> 17:10:40,636
initialize variables to no good good analyzer


2403
17:10:40,636 --> 17:10:44,000
i don't have a user that we're internally going to manage and i'm


2404
17:10:44,000 --> 17:10:48,796
actually going to make it prefix it with an underscore so that it is marked as a


2405
17:10:48,796 --> 17:10:52,080
private function as a private member variable


2406
17:10:52,080 --> 17:10:58,796
then in the current user simply return that user so like this okay


2407
17:10:59,596 --> 17:11:01,596
perfect now


2408
17:11:01,596 --> 17:11:06,160
we need to go and take care of the initialize function let's see if we can


2409
17:11:06,160 --> 17:11:11,040
find it login here is initialize


2410
17:11:11,040 --> 17:11:12,956
so the only thing we're going to do in


2411
17:11:12,956 --> 17:11:18,240
initializers we're going to fake waiting just wait for like a second


2412
17:11:18,240 --> 17:11:25,520
and and then set r is initialize flag to true so let's grab this code of a weight


2413
17:11:25,520 --> 17:11:30,320
from our create user function and then bring it to initialize and then just say


2414
17:11:30,320 --> 17:11:34,000
await and make your function asynchronous and then we're gonna just


2415
17:11:34,000 --> 17:11:37,360
wait and we're just going to say initialized


2416
17:11:37,360 --> 17:11:43,116
is true so that was an easy one all right so


2417
17:11:43,520 --> 17:11:48,636
then the meatiest part of our mock author provider is actually the


2418
17:11:48,636 --> 17:11:54,080
login function because it's not that it's doing login but it's also


2419
17:11:54,080 --> 17:11:58,636
the function that the register function is using or do we say create


2420
17:11:58,636 --> 17:12:02,240
user create user so that function is also


2421
17:12:02,240 --> 17:12:05,756
logging the it's calling the login function so we


2422
17:12:05,756 --> 17:12:10,240
need to really test this function to ensure that it's working properly okay


2423
17:12:10,240 --> 17:12:13,840
as i mentioned before in most of these functions when we need to make sure that


2424
17:12:13,840 --> 17:12:17,436
our mock auth providers initialize before these functions are called on


2425
17:12:17,436 --> 17:12:22,796
them so let's go and grab this code you see it says if is initialized and bring


2426
17:12:22,796 --> 17:12:27,840
that code as well in our login function so that's the first thing that we're


2427
17:12:27,840 --> 17:12:30,880
gonna do now


2428
17:12:30,880 --> 17:12:36,320
we're also going to build in some fake functionality into the login function


2429
17:12:36,320 --> 17:12:40,880
just so we can write tests for them because you see in the real world you


2430
17:12:40,880 --> 17:12:45,116
probably have like lots and lots of real logic that is


2431
17:12:45,116 --> 17:12:49,916
inside your uh auth providers and auth services but we don't have all that real


2432
17:12:49,916 --> 17:12:53,520
logic right now because our application is quite small right now so we're gonna


2433
17:12:53,520 --> 17:12:58,560
build some fake functionality into our mod provider and then sorry in our mock


2434
17:12:58,560 --> 17:13:03,040
auth provider and then we're going to write tests that test those


2435
17:13:03,040 --> 17:13:07,520
scenarios so you learn about mocking and you'll also learn about writing tests


2436
17:13:07,520 --> 17:13:12,000
for those mocks okay so that's the entire purpose of this chapter


2437
17:13:12,000 --> 17:13:14,720
so what we're going to do then is we're


2438
17:13:14,720 --> 17:13:18,320
going to say if and so we're going to make up an email


2439
17:13:18,320 --> 17:13:21,520
that we don't like we're going to say if email is


2440
17:13:21,520 --> 17:13:27,596
um fooatvar.com then throw user not found exception okay


2441
17:13:27,596 --> 17:13:31,276
so if you're trying to log in with this email address we're just gonna say user


2442
17:13:31,276 --> 17:13:36,636
not found okay and if password


2443
17:13:36,636 --> 17:13:40,880
is foobar unlike the foobar password either then


2444
17:13:40,880 --> 17:13:46,796
we're going to say throw wrong password off exception so


2445
17:13:46,796 --> 17:13:51,276
remember login in itself if we go to our


2446
17:13:51,276 --> 17:13:56,400
firebase auth provider so go to this file firebase auth provider dart it has


2447
17:13:56,400 --> 17:14:00,240
those functionalities like if you have a look at login it has a functionality


2448
17:14:00,240 --> 17:14:03,916
like handling user not found wrong password generic auth exception so what


2449
17:14:03,916 --> 17:14:07,116
we're doing is that we're creating some sort of a mock of kind of the same thing


2450
17:14:07,116 --> 17:14:11,840
but we're locking it to specific email and password okay


2451
17:14:12,000 --> 17:14:16,320
okay so that's for password we don't like the email of foo at bar.com and we


2452
17:14:16,320 --> 17:14:21,200
don't like the password of foobar now


2453
17:14:21,200 --> 17:14:24,560
we're also going to remove the unimplemented error here now in this


2454
17:14:24,560 --> 17:14:30,000
case let's just create a user so we're going to say user is and off user


2455
17:14:30,000 --> 17:14:34,720
and it's email verified we just say true or let's just say false actually so we


2456
17:14:34,720 --> 17:14:39,116
say when you're trying to log in we're just saying is email verify false okay


2457
17:14:39,116 --> 17:14:42,880
now that we've created a user let's assign it to our user


2458
17:14:42,880 --> 17:14:46,560
like this because remember we have a private field called


2459
17:14:46,560 --> 17:14:52,240
underscore user and we just keep hold of it like this


2460
17:14:52,240 --> 17:14:56,400
and then we will do because remember we need to return a future of that auth


2461
17:14:56,400 --> 17:15:04,880
user then we say return future of a value equal to our user like this


2462
17:15:05,680 --> 17:15:10,160
so that's our login function


2463
17:15:10,636 --> 17:15:14,480
so that was quite a lot of work but i think


2464
17:15:14,480 --> 17:15:19,116
you hopefully understand what we did right there


2465
17:15:19,276 --> 17:15:23,840
now we have to look at a logout function and the logout function is gonna have


2466
17:15:23,840 --> 17:15:28,796
some code as well so um it's not just gonna be saying okay i


2467
17:15:28,796 --> 17:15:32,240
logged out as i mentioned before we need to make sure that the


2468
17:15:32,240 --> 17:15:35,916
mock provider is initialized so let's bring that code in here


2469
17:15:35,916 --> 17:15:40,636
boom okay and we also need to make sure if you want to log out that you've


2470
17:15:40,636 --> 17:15:44,240
actually logged in before so let's just say if


2471
17:15:44,240 --> 17:15:49,840
um if i can find my keys if user is null


2472
17:15:49,840 --> 17:15:55,916
then throw uh user not found off exception okay


2473
17:15:55,916 --> 17:15:59,200
otherwise what we're gonna do is we're just gonna await


2474
17:15:59,200 --> 17:16:04,080
so let's find an await code from before we're just gonna fake waiting a little


2475
17:16:04,080 --> 17:16:09,840
bit just one second okay and and we're gonna set our user as well


2476
17:16:09,840 --> 17:16:13,840
to null we're just gonna say the current user then is not you can see it's


2477
17:16:13,840 --> 17:16:18,240
complaining that we're using a weight but let me just say in here then


2478
17:16:18,240 --> 17:16:21,596
async just like that then the error goes away


2479
17:16:21,596 --> 17:16:26,480
because if you mark your logout function as async then you can wait on a future


2480
17:16:26,480 --> 17:16:30,560
so easy as well logout says am i initialized


2481
17:16:30,560 --> 17:16:34,480
and in order for me to log out there needs to be a user and then i'm gonna


2482
17:16:34,480 --> 17:16:38,560
fake waiting one second and then i'm gonna set that user to null so easy pc


2483
17:16:38,560 --> 17:16:40,796
okay


2484
17:16:41,040 --> 17:16:45,680
now let's mock our email verification code


2485
17:16:45,680 --> 17:16:49,116
so same thing so you should now be familiar with this let's just make sure


2486
17:16:49,116 --> 17:16:52,956
that we are initialized i'm going to grab a code from there room throw


2487
17:16:52,956 --> 17:16:55,276
unimplemented error actually let's leave it


2488
17:16:55,276 --> 17:16:58,720
let's leave it there okay for now at least


2489
17:16:58,720 --> 17:17:03,360
and um then during the send email verification


2490
17:17:03,360 --> 17:17:08,080
what we're gonna do is you see when we did a login we said that uh let's have a


2491
17:17:08,080 --> 17:17:11,680
look at the login we said by default the email for the user's email verification


2492
17:17:11,680 --> 17:17:16,160
is false but upon send doing a send email verification we're just gonna flip


2493
17:17:16,160 --> 17:17:19,436
that flag where all of a sudden i'm gonna say oh now outside of your email


2494
17:17:19,436 --> 17:17:22,636
verified which which isn't so realistic but


2495
17:17:22,636 --> 17:17:27,116
that's the logic that we're mocking right now okay and remember a an auth


2496
17:17:27,116 --> 17:17:29,520
user uh here


2497
17:17:29,520 --> 17:17:35,276
has a and it's email verified it's read only like you it's a constant you cannot


2498
17:17:35,276 --> 17:17:39,276
change it so just because we have an optional user in


2499
17:17:39,276 --> 17:17:43,116
our mock auth provider it doesn't mean that we can just go and say off user is


2500
17:17:43,116 --> 17:17:48,400
email verified true we can't write to it so we need to rewrite this entire user


2501
17:17:48,400 --> 17:17:50,956
okay so


2502
17:17:50,956 --> 17:17:55,840
after checking that you're initialized what we're doing is saying that


2503
17:17:55,840 --> 17:17:59,680
if let's get the user actually final user


2504
17:17:59,680 --> 17:18:03,436
is this let's get your current user and we


2505
17:18:03,436 --> 17:18:10,480
say if user is null and throw user not found so our


2506
17:18:10,480 --> 17:18:14,400
send email verification code is make sure making sure that you've logged in


2507
17:18:14,400 --> 17:18:17,680
before you can send an email verification or at least you register


2508
17:18:17,680 --> 17:18:21,040
your user okay um


2509
17:18:21,040 --> 17:18:24,956
okay then what we're going to do is to create


2510
17:18:24,956 --> 17:18:29,200
a new user we're saying new user is an off user and his email verified is true


2511
17:18:29,200 --> 17:18:33,840
this time and then we set that as our current user so we say the current user


2512
17:18:33,840 --> 17:18:39,200
is the new user and then we just remove that and we make


2513
17:18:39,200 --> 17:18:44,400
our sure our code async as well okay


2514
17:18:44,400 --> 17:18:47,596
so that's for send email and verification


2515
17:18:47,596 --> 17:18:50,880
so you see it did take a while but we've actually


2516
17:18:50,880 --> 17:18:55,436
written now a mock auth provider that has its own code and it has its own


2517
17:18:55,436 --> 17:19:00,000
initialization etc okay now what we need to do is to


2518
17:19:00,000 --> 17:19:05,840
talk actually about tests so um


2519
17:19:06,000 --> 17:19:12,080
let's see yes um so what are test groups and what are


2520
17:19:12,080 --> 17:19:16,956
tests you see if you think of tests as or at least


2521
17:19:16,956 --> 17:19:22,160
unit tests as pieces of code that test other pieces of code


2522
17:19:22,160 --> 17:19:26,080
you may think okay i'm going to write a test for create user


2523
17:19:26,080 --> 17:19:29,840
here i'm going to then write a test for current user i'm going to write test for


2524
17:19:29,840 --> 17:19:34,000
initialized login blah blah now all of these are common and group they're kind


2525
17:19:34,000 --> 17:19:39,040
of related they're all testing mock auth provider and that's what test groups are


2526
17:19:39,040 --> 17:19:45,360
for in your test functions in flutter sorry in your tests and test suites in


2527
17:19:45,360 --> 17:19:50,240
florida you can actually group your test functionalities into a group that has a


2528
17:19:50,240 --> 17:19:55,436
name and then you can ask flutter to run that entire group of tests for you so


2529
17:19:55,436 --> 17:20:02,160
that's what test groups are for so now what we need to do is to go into


2530
17:20:02,160 --> 17:20:07,276
our main test function right there and basically create a group and then add


2531
17:20:07,276 --> 17:20:12,956
provider inside that so let's just go ahead and then type group


2532
17:20:12,956 --> 17:20:17,596
and in here we're just going to say mock authentication okay


2533
17:20:17,596 --> 17:20:20,956
and let's go in here the second parameters as a function


2534
17:20:20,956 --> 17:20:23,916
and like that so now you should have your code like this so basically you


2535
17:20:23,916 --> 17:20:28,000
created a test group and you can see visual studio code is telling me that oh


2536
17:20:28,000 --> 17:20:32,160
you can run this group so we're gonna put all our mock


2537
17:20:32,160 --> 17:20:36,240
authentication tests inside this group okay


2538
17:20:36,240 --> 17:20:40,560
and as a caption says the first thing we're gonna do is we're gonna create our


2539
17:20:40,560 --> 17:20:46,320
an instance of our mock aus provider so let's go ahead and say a final


2540
17:20:46,320 --> 17:20:51,200
provider is a mock-off provider just like that


2541
17:20:51,200 --> 17:20:53,360
okay so


2542
17:20:53,360 --> 17:20:57,596
now we have that so now we're getting to the juicy parts


2543
17:20:57,596 --> 17:21:00,240
and i'm so happy about this because we've done quite a lot of groundwork


2544
17:21:00,240 --> 17:21:02,880
just to get to this point for this chapter


2545
17:21:02,880 --> 17:21:07,200
so now we're gonna write our first test so as you can see the title says testing


2546
17:21:07,200 --> 17:21:11,116
provider is initialized providers shouldn't be initialized to begin with


2547
17:21:11,116 --> 17:21:14,240
you see we're starting with a


2548
17:21:14,240 --> 17:21:18,720
an assertion we're saying that according to our implementation the way we've


2549
17:21:18,720 --> 17:21:23,680
implemented our mock auth provider it should not be initialized to start with


2550
17:21:23,680 --> 17:21:26,880
so we're just making sure that by creating an instance of mock auth


2551
17:21:26,880 --> 17:21:31,276
provider it's is initialized the boolean getter


2552
17:21:31,276 --> 17:21:36,080
should return false if it if it returns true we're going to fail our tests so


2553
17:21:36,080 --> 17:21:39,360
meaning that if someone then sneakily goes into the code later and says oh


2554
17:21:39,360 --> 17:21:43,116
this is true by default then the tests are gonna fail and all the developers in


2555
17:21:43,116 --> 17:21:46,320
the team are gonna be notified about that okay


2556
17:21:46,320 --> 17:21:50,000
so let's create our first test the way to


2557
17:21:50,000 --> 17:21:54,400
create tests in flutter is that you start typing test okay


2558
17:21:54,400 --> 17:21:58,080
and you give it a name in this case i'm gonna say should not


2559
17:21:58,080 --> 17:22:03,916
be initialized to begin with okay so that's the name then you're gonna


2560
17:22:03,916 --> 17:22:08,160
provide it with a function to execute upon doing its test


2561
17:22:08,160 --> 17:22:13,116
and in here you could say you could use a function called expect


2562
17:22:13,116 --> 17:22:18,240
and you say writers provider is initialized


2563
17:22:18,240 --> 17:22:23,360
it should be false to begin with all right so


2564
17:22:23,360 --> 17:22:28,400
that's the first test that we wrote so test function then you write a name for


2565
17:22:28,400 --> 17:22:33,596
it then a function to be executed and in there you can use various flavors of the


2566
17:22:33,596 --> 17:22:38,636
expect function you'll see expect there are various flavors of that


2567
17:22:38,636 --> 17:22:41,200
so right now we're just expecting the easy


2568
17:22:41,200 --> 17:22:46,160
initialize flag to be false okay


2569
17:22:46,160 --> 17:22:52,880
now the next test that we have to do um so as the captioning case test logging


2570
17:22:52,880 --> 17:22:57,360
out before initialization the provider should throw and not initialize


2571
17:22:57,360 --> 17:22:59,756
exception so


2572
17:22:59,756 --> 17:23:03,756
basically what we're saying is that according to the log out function it


2573
17:23:03,756 --> 17:23:07,756
shouldn't be able to log out if it's not initialized first so we're literally


2574
17:23:07,756 --> 17:23:11,916
testing this line of code okay to make sure that no one just unintentionally


2575
17:23:11,916 --> 17:23:16,000
comments it out or unintentionally removes the same we don't need it all


2576
17:23:16,000 --> 17:23:21,200
right so let's test that uh functionality so let's just say test i'm


2577
17:23:21,200 --> 17:23:24,240
going to look at my notes to see what i've named there


2578
17:23:24,240 --> 17:23:28,320
cannot log out if not initialize okay now you know that


2579
17:23:28,320 --> 17:23:31,596
as a second parameter to your test function you need to provide a function


2580
17:23:31,596 --> 17:23:34,160
so uh parenthesis


2581
17:23:34,160 --> 17:23:38,560
and then curly brackets and in here we're just gonna say


2582
17:23:38,560 --> 17:23:42,560
expect and now we're using a new flavor of this


2583
17:23:42,560 --> 17:23:46,240
expect and in here i'm just going to say provider log out


2584
17:23:46,240 --> 17:23:54,240
and upon calling this logout function we actually want to expect an exception


2585
17:23:54,240 --> 17:23:59,840
so there is a really good uh catch that you can use in here that


2586
17:23:59,840 --> 17:24:04,160
is called throws a and you can see throws a is a matcher


2587
17:24:04,160 --> 17:24:08,636
and it matches the result of the log out function against whatever you provide


2588
17:24:08,636 --> 17:24:12,956
here so you say throws a and then you expect


2589
17:24:12,956 --> 17:24:18,000
an exception in here you see the const type matcher


2590
17:24:18,000 --> 17:24:21,756
height matcher is just going to say not initialized


2591
17:24:21,756 --> 17:24:26,400
exception so i'm going to type this and then i'm going to show you what i'm


2592
17:24:26,400 --> 17:24:30,880
doing basically in here see what i've done through jose const


2593
17:24:30,880 --> 17:24:35,436
blah blah blah huh that looks fine as well


2594
17:24:35,436 --> 17:24:41,520
and let's see why type manager is not extract method cons throws i probably


2595
17:24:41,520 --> 17:24:45,916
messed up something in here yeah


2596
17:24:45,916 --> 17:24:50,560
so let's see what is happening here so what we're telling expect in here is


2597
17:24:50,560 --> 17:24:54,480
saying that execute the logout function and


2598
17:24:54,480 --> 17:24:59,756
we're now testing the result of that function against something called a


2599
17:24:59,756 --> 17:25:05,116
matcher and matcher is because you see in here you can't say that this result


2600
17:25:05,116 --> 17:25:08,880
should be an exception because what are you going to do are you going to create


2601
17:25:08,880 --> 17:25:11,840
a an instance of that exception that's not


2602
17:25:11,840 --> 17:25:15,436
that's not a good way of testing your functionality in here you're saying


2603
17:25:15,436 --> 17:25:19,756
you're matching the result of calling the logout function it gains that


2604
17:25:19,756 --> 17:25:25,840
expected type as you can see type matcher is if you go into it you can see


2605
17:25:25,840 --> 17:25:31,276
is a matcher okay so that's how you would expect a


2606
17:25:31,276 --> 17:25:36,520
function to throw an exception all right


2607
17:25:37,756 --> 17:25:42,000
all right a lot of information um now what we need to do after testing


2608
17:25:42,000 --> 17:25:45,840
that functionality we just need to make sure that we can actually initialize our


2609
17:25:45,840 --> 17:25:49,116
mock provider i'm going to bring the code a little bit


2610
17:25:49,116 --> 17:25:52,480
up here so you can see it better


2611
17:25:52,636 --> 17:25:54,720
so now let's


2612
17:25:54,720 --> 17:25:58,796
go in here and say test and let me see it should be able to be initialized


2613
17:25:58,796 --> 17:26:02,080
should be able to be initialized


2614
17:26:02,080 --> 17:26:06,480
and create an empty function in here then what we're going to do is just to


2615
17:26:06,480 --> 17:26:11,436
say await provider dot initialize like this


2616
17:26:11,436 --> 17:26:14,956
and remember just like everywhere in your dart code you can make your


2617
17:26:14,956 --> 17:26:19,200
functions asynchronous just by putting async right before the curly bracket so


2618
17:26:19,200 --> 17:26:22,400
it's not a part of the signature of the function it's just telling dart that


2619
17:26:22,400 --> 17:26:26,636
inside this function i'm going to execute some code asynchronously okay


2620
17:26:26,636 --> 17:26:30,956
so upon initializing we then after initialize if you look at the code that


2621
17:26:30,956 --> 17:26:35,040
we did for initialize it just does a uh


2622
17:26:35,040 --> 17:26:39,040
and a weight of one second and then it sets the flag of is initialized to true


2623
17:26:39,040 --> 17:26:44,240
and we can read that flag by reading this boolean getter so let's say away


2624
17:26:44,240 --> 17:26:48,000
provider initialize and then we're going to say expect


2625
17:26:48,000 --> 17:26:52,000
the provider is initialized flag to be true after this


2626
17:26:52,000 --> 17:26:56,956
all right so that one was an easy one


2627
17:26:57,916 --> 17:27:02,560
so after we've done all of this you see is initialized and doing initialization


2628
17:27:02,560 --> 17:27:06,160
is not actually going to create a user for us so let's make sure upon


2629
17:27:06,160 --> 17:27:10,956
initializing our provider that the user is no so let's just say test


2630
17:27:10,956 --> 17:27:15,436
user should be null after initialization okay


2631
17:27:15,436 --> 17:27:20,000
empty function and then let's just expect the user the


2632
17:27:20,000 --> 17:27:22,796
current user to be known so let's say expect


2633
17:27:22,796 --> 17:27:27,276
a provider current user that it should be known all right so


2634
17:27:27,276 --> 17:27:32,080
easy to read and it's almost like reading english so


2635
17:27:32,080 --> 17:27:35,200
so that's it


2636
17:27:35,680 --> 17:27:39,436
all right now what we're going to do is doing some asynchronous testing i want


2637
17:27:39,436 --> 17:27:43,040
you to see this as well because it's very important now let's say that you're


2638
17:27:43,040 --> 17:27:47,116
we want to test as the caption is telling you testing the time required to


2639
17:27:47,116 --> 17:27:50,636
initialize we can test timeouts in this case so


2640
17:27:50,636 --> 17:27:57,680
what we're going to do is look at our initialization code here and let's see


2641
17:27:57,680 --> 17:28:02,160
the initialize function here at the moment is waiting one second what


2642
17:28:02,160 --> 17:28:06,320
we're going to do in our test just for the sake of using how you can test


2643
17:28:06,320 --> 17:28:10,796
timeouts and how you you can test for instance api calls in the future we're


2644
17:28:10,796 --> 17:28:15,276
going to do some asynchronous testing in here with a timeout saying that our test


2645
17:28:15,276 --> 17:28:19,360
should fail if initialize on our provider takes more


2646
17:28:19,360 --> 17:28:25,916
than x amount of seconds all right so now let's go in here and say test um


2647
17:28:25,916 --> 17:28:29,840
should be able to initialize


2648
17:28:29,840 --> 17:28:34,320
in less than two seconds okay and an empty function which is


2649
17:28:34,320 --> 17:28:39,756
asynchronous just like that empty body for now


2650
17:28:39,756 --> 17:28:45,200
and what we're going to do in here is to say await


2651
17:28:45,200 --> 17:28:49,596
on the provider's initialization okay


2652
17:28:49,596 --> 17:28:53,596
and after initialization we're also going to expect the is initialize flag


2653
17:28:53,596 --> 17:28:57,840
to be true just like that however we're going to


2654
17:28:57,840 --> 17:29:01,680
use a new parameter of our test called timeout


2655
17:29:01,680 --> 17:29:06,796
now timeout will provide a constant timeout to it


2656
17:29:06,796 --> 17:29:11,200
with a duration so duration and in this case we're just


2657
17:29:11,200 --> 17:29:13,916
going to say two seconds and i think we have one extra parameter in here


2658
17:29:13,916 --> 17:29:18,880
constitution timeout argument zero expected what one found


2659
17:29:18,880 --> 17:29:25,596
cons time and then here seconds and avoid cons here okay so this is very


2660
17:29:25,596 --> 17:29:29,436
simple simply said we're saying that we're created a test that calls the


2661
17:29:29,436 --> 17:29:35,040
initialize function on our provider and just ensures that that function returns


2662
17:29:35,040 --> 17:29:40,480
to the test context before the timeout has passed so internally this test


2663
17:29:40,480 --> 17:29:45,276
function which you provided timeout to is going to create a little timer and


2664
17:29:45,276 --> 17:29:49,200
then it's going to set the timer to start with as soon as it calls the


2665
17:29:49,200 --> 17:29:52,080
function this function in here let me show you


2666
17:29:52,080 --> 17:29:55,916
here this as that is


2667
17:29:55,916 --> 17:30:01,040
progressing and doing its work it's going to terminate its result processing


2668
17:30:01,040 --> 17:30:06,080
as soon as the timeout basically passes so in this case our initialize function


2669
17:30:06,080 --> 17:30:10,880
is going to take one second to process this work if it can't do that during


2670
17:30:10,880 --> 17:30:16,720
these two seconds of timeout that test is going to fail okay so now you know


2671
17:30:16,720 --> 17:30:19,840
how to test that as well


2672
17:30:19,916 --> 17:30:24,956
so let's go in here and now test the medius part of our


2673
17:30:24,956 --> 17:30:30,080
provider which is creating a user as you can see we have to test make sure that


2674
17:30:30,080 --> 17:30:34,560
creating a user actually delegates to our login function and we have to test


2675
17:30:34,560 --> 17:30:37,756
all the edge cases all right


2676
17:30:38,160 --> 17:30:42,840
so let's go ahead and do that let's then say we test


2677
17:30:42,840 --> 17:30:49,276
uh create user should delegate um delegate


2678
17:30:49,276 --> 17:30:53,436
to login function and in here we're gonna create


2679
17:30:53,436 --> 17:30:57,040
a function which is an asynchronous function all


2680
17:30:57,040 --> 17:31:00,240
and what right need to do is to create this


2681
17:31:00,240 --> 17:31:03,436
basically if you remember create user doesn't have internal logic of its own


2682
17:31:03,436 --> 17:31:06,880
it's just going to call login but login has this beautiful logic that first test


2683
17:31:06,880 --> 17:31:09,880
fooadbar.com


2684
17:31:09,916 --> 17:31:14,320
with any password should throw this error user not found off exception so


2685
17:31:14,320 --> 17:31:17,916
let's just test that scenario okay let's go in here


2686
17:31:17,916 --> 17:31:25,360
and say final bad email user is provider create


2687
17:31:25,360 --> 17:31:27,596
uh


2688
17:31:27,680 --> 17:31:31,840
writer oh don't we have our provider


2689
17:31:32,796 --> 17:31:38,160
oh i've added this test i apologize i've added this test i believe at the end of


2690
17:31:38,160 --> 17:31:42,160
this entire test group i should have added it here so if you've made the same


2691
17:31:42,160 --> 17:31:46,000
mistake i apologize for that it's my fault you should fix that and make make


2692
17:31:46,000 --> 17:31:50,796
sure that your test is in the same group where it has access to the provider so


2693
17:31:50,796 --> 17:31:56,000
then i'm going to say provider and so final bad email user is


2694
17:31:56,000 --> 17:32:01,596
uh provider creates user the email is fooatbar.com


2695
17:32:01,596 --> 17:32:04,796
and password could just be any password okay


2696
17:32:04,796 --> 17:32:10,000
comma semicolon make sure dart formatter formats your code properly so then what


2697
17:32:10,000 --> 17:32:14,480
we need to make sure is when the bad user is


2698
17:32:14,480 --> 17:32:19,276
basically returned to us then it should actually contain a user not found off


2699
17:32:19,276 --> 17:32:23,276
exception so let's go ahead and say expect


2700
17:32:23,276 --> 17:32:29,276
a bad email user to actually be of


2701
17:32:29,276 --> 17:32:32,320
to throw a const


2702
17:32:32,320 --> 17:32:36,080
type matcher of


2703
17:32:36,080 --> 17:32:41,756
that user not found off exception like this


2704
17:32:42,400 --> 17:32:45,436
okay let's see and i


2705
17:32:45,436 --> 17:32:50,000
have to close that here as well so we're basically saying calling the


2706
17:32:50,000 --> 17:32:55,360
bad email user the creation of a user with that specific email should throw a


2707
17:32:55,360 --> 17:32:58,956
user not found off exception and remember you may think oh we've tested


2708
17:32:58,956 --> 17:33:02,320
this before yet but that was in the context of


2709
17:33:02,320 --> 17:33:06,636
here let's see actually no we haven't tested that


2710
17:33:06,636 --> 17:33:09,596
before it's it's this thing that we've tested so sorry about that so we've


2711
17:33:09,596 --> 17:33:12,796
tested a lot yeah we haven't tested this particular case so


2712
17:33:12,796 --> 17:33:16,080
all right so now we've tested that now let's test


2713
17:33:16,080 --> 17:33:20,320
this scenario with a bad password a password of fubar you see we have that


2714
17:33:20,320 --> 17:33:24,796
logic in our mock provider here for the login function let's test this scenario


2715
17:33:24,796 --> 17:33:29,840
now let's test this code we should throw the wrong password off exception okay so


2716
17:33:29,840 --> 17:33:34,400
let's go in here and say final


2717
17:33:34,400 --> 17:33:40,560
i can see that you can't see the code so bad password user is provider and create


2718
17:33:40,560 --> 17:33:45,916
user with the email of let's just say someone at bar.com and the password is


2719
17:33:45,916 --> 17:33:50,000
fubar and that's the password we didn't like remember that okay


2720
17:33:50,000 --> 17:33:53,916
now we copy the code from here and then we say


2721
17:33:53,916 --> 17:34:00,560
that that password user should throw an exception called wrong password


2722
17:34:00,560 --> 17:34:06,480
off exception okay so we've tested that scenario as well


2723
17:34:06,480 --> 17:34:12,240
now we actually should test the um the positive scenario so let's go ahead


2724
17:34:12,240 --> 17:34:18,956
and say final user is awaits provider and we say create user


2725
17:34:18,956 --> 17:34:23,040
all right an email is going to be


2726
17:34:23,040 --> 17:34:27,520
foo and the password is going to be bar remember our our mock auth provider is


2727
17:34:27,520 --> 17:34:32,560
not actually testing whether an email is correct email or not


2728
17:34:32,560 --> 17:34:36,956
firebase is doing that but a mock provider isn't doing that so


2729
17:34:36,956 --> 17:34:41,276
we could just provide any email foo and password a bar and it will just


2730
17:34:41,276 --> 17:34:45,276
accept it as long as it's not it the password isn't foobar and as long


2731
17:34:45,276 --> 17:34:52,956
as the email is not footbar.com okay all right now let's let's make sure that


2732
17:34:52,956 --> 17:34:59,040
this user is then being assigned to the current user of our auth provider okay


2733
17:34:59,040 --> 17:35:04,560
so let's expect the auth provider offer sorry the provider's current user


2734
17:35:04,560 --> 17:35:09,596
to actually be equal to this user okay because um


2735
17:35:09,596 --> 17:35:13,520
that's what we did in our create user remember we create user delegates this


2736
17:35:13,520 --> 17:35:17,596
work to the login and then login internally sets the current user to that


2737
17:35:17,596 --> 17:35:21,916
user they just created okay so that's the scenario now we're testing with this


2738
17:35:21,916 --> 17:35:27,520
line of code here all right so that's that


2739
17:35:27,520 --> 17:35:30,636
um so what we need to do then is just to


2740
17:35:30,636 --> 17:35:33,596
make sure by just creating a user which we're


2741
17:35:33,596 --> 17:35:38,560
doing here that the is email verified functionality sorry that is email


2742
17:35:38,560 --> 17:35:45,436
verified um parameter of our auth user is set to false by default remember


2743
17:35:45,436 --> 17:35:49,680
login function here is set is email verified false let's


2744
17:35:49,680 --> 17:35:54,080
test that functionality okay so we just say expect


2745
17:35:54,080 --> 17:35:58,320
users we use email verified to be false


2746
17:35:58,320 --> 17:36:02,160
right wow that was a lot of


2747
17:36:02,160 --> 17:36:06,400
code to be honest with you and i hope that you got everything that i mentioned


2748
17:36:06,400 --> 17:36:10,560
here so now that we've done that let's test


2749
17:36:10,560 --> 17:36:14,956
the email verification functionality uh and let's have a look at what we


2750
17:36:14,956 --> 17:36:19,436
actually did in email verification you see we have this functionality not


2751
17:36:19,436 --> 17:36:22,320
initialized then we take the current user if the


2752
17:36:22,320 --> 17:36:26,720
current user is null then we say user not found exception and then we create a


2753
17:36:26,720 --> 17:36:32,000
new user with is email verified to true and we're then setting that user as the


2754
17:36:32,000 --> 17:36:38,160
current user so that's what the send email verification code is doing okay


2755
17:36:38,160 --> 17:36:40,400
now you see when


2756
17:36:40,400 --> 17:36:43,436
when flutter then runs our code it's going to run them sequentially so it's


2757
17:36:43,436 --> 17:36:47,200
just going to go from top to bottom and then you remember


2758
17:36:47,200 --> 17:36:51,276
before we test the email verification we're actually testing create user which


2759
17:36:51,276 --> 17:36:56,240
in turn calls the login function so since we're keeping a hold of our


2760
17:36:56,240 --> 17:36:59,680
provider this create user calling login function


2761
17:36:59,680 --> 17:37:05,040
ensures that the current user actually sets and is not email verified so we can


2762
17:37:05,040 --> 17:37:08,000
count on that okay so let's say


2763
17:37:08,000 --> 17:37:13,040
that we test and we say login user should be able to


2764
17:37:13,040 --> 17:37:19,200
get verified uh logged in user should be be able


2765
17:37:19,200 --> 17:37:23,200
to get verified okay and then an empty function in here


2766
17:37:23,200 --> 17:37:28,480
um like that so in here we then say provider send


2767
17:37:28,480 --> 17:37:33,200
email verification okay and with the final user is providers


2768
17:37:33,200 --> 17:37:36,080
user uh


2769
17:37:36,560 --> 17:37:39,916
current user like that


2770
17:37:39,916 --> 17:37:45,916
and we now make sure that the current user is not null so we say expect user


2771
17:37:45,916 --> 17:37:52,240
is not uh or yeah expect the user is not null which


2772
17:37:52,240 --> 17:37:55,756
as you can see is a great matcher that you can match something against it so


2773
17:37:55,756 --> 17:38:00,720
you say shouldn't be no okay like that all right


2774
17:38:00,720 --> 17:38:05,596
and then we also we need to make sure that this user's uh verification is set


2775
17:38:05,596 --> 17:38:08,796
so it's email verified should be true then we say expect and we'll get an


2776
17:38:08,796 --> 17:38:14,080
error now you'll see user is email verified it should be true


2777
17:38:14,080 --> 17:38:16,880
okay and you can see you get an error here saying that a user is optional but


2778
17:38:16,880 --> 17:38:19,916
we're gonna and do an asterisk here saying that


2779
17:38:19,916 --> 17:38:24,000
force force on rapid for us okay


2780
17:38:25,520 --> 17:38:30,320
now what we should do as the last test we as the caption says test logging out


2781
17:38:30,320 --> 17:38:33,360
and logging in and this is normal scenario that should just work let's


2782
17:38:33,360 --> 17:38:37,360
create a test for it so let's just say test


2783
17:38:37,360 --> 17:38:41,276
and we're going to call it should be able to log out and log in again should


2784
17:38:41,276 --> 17:38:47,276
be able to log out and log in and again okay


2785
17:38:47,276 --> 17:38:51,596
and an async function so and a semicolon at the end


2786
17:38:51,596 --> 17:38:55,276
so what we're going to do here then is just to say


2787
17:38:55,276 --> 17:38:59,040
log out and log in and then we get the current user and we just make sure that


2788
17:38:59,040 --> 17:39:04,240
you're not null so let's say a wait on the provider


2789
17:39:04,240 --> 17:39:08,636
to log out and we say await on the provider to log


2790
17:39:08,636 --> 17:39:14,240
in with an email of just user and password


2791
17:39:14,240 --> 17:39:19,840
just like that okay so or just email because we're not actually validating


2792
17:39:19,840 --> 17:39:25,436
the email and password in our auth provider in our mock author provider


2793
17:39:25,436 --> 17:39:30,160
and then we're going to get the current user so we say final user is provider


2794
17:39:30,160 --> 17:39:34,160
current user and we just make sure that that user is not known so let's just say


2795
17:39:34,160 --> 17:39:42,000
expect the user is not null which is a method built into


2796
17:39:42,000 --> 17:39:46,880
flutter tests all right that was a lot of work and i'm


2797
17:39:46,880 --> 17:39:51,116
proud of you for sticking with this chapter


2798
17:39:51,116 --> 17:39:55,596
we talked a lot about tests there's so much that you need to go through so much


2799
17:39:55,596 --> 17:39:58,720
material and you need to learn on your own as well about different types of


2800
17:39:58,720 --> 17:40:03,040
matters and different flavors of expect and talking about expect i kind of


2801
17:40:03,040 --> 17:40:06,796
expect you to go and read these things also on your own


2802
17:40:06,796 --> 17:40:10,000
and learn about them in your own time as well


2803
17:40:10,000 --> 17:40:15,756
now the exciting part we need to run our tests so let me change the screen layout


2804
17:40:15,756 --> 17:40:19,520
and let's go in our terminal here


2805
17:40:19,520 --> 17:40:23,200
and let's increase the size and


2806
17:40:23,200 --> 17:40:27,360
let's then uh break this and as you can see you can


2807
17:40:27,360 --> 17:40:32,320
tell flutter to run your test by saying flutter test and providing that path to


2808
17:40:32,320 --> 17:40:37,360
your test so now flutter is going to go ahead and issue and go through those


2809
17:40:37,360 --> 17:40:40,480
tests one by one


2810
17:40:41,040 --> 17:40:44,796
and let's see what we get as the result


2811
17:40:45,360 --> 17:40:50,000
and you can see it's giving like time for all of these tests and it says all


2812
17:40:50,000 --> 17:40:54,956
tests passed now i just want to highlight this before we go on we did a


2813
17:40:54,956 --> 17:41:00,080
lot of tests i've prepared these tests manually so to make sure that they


2814
17:41:00,080 --> 17:41:04,400
actually testing important functionality inside our auth provider however i've


2815
17:41:04,400 --> 17:41:07,680
written the tests very carefully to make sure


2816
17:41:07,680 --> 17:41:12,000
that they work this is not the case when you're doing


2817
17:41:12,000 --> 17:41:16,880
things in real life your tests should fail if you've done things right your


2818
17:41:16,880 --> 17:41:22,240
tests should fail to begin with and you then need to go and write your and fix


2819
17:41:22,240 --> 17:41:26,720
your logic if you're doing things even more right you should write your tests


2820
17:41:26,720 --> 17:41:31,520
first nothing is going to work then you should go and write your logic to fit


2821
17:41:31,520 --> 17:41:35,916
those tests and expectations so just because these tests are passing right


2822
17:41:35,916 --> 17:41:40,160
now i know we have joy inside we say oh everything's passing everything's great


2823
17:41:40,160 --> 17:41:45,436
but in reality that's not going to be the case usually okay


2824
17:41:45,436 --> 17:41:48,400
so a lot of work we did let's do as we


2825
17:41:48,400 --> 17:41:54,956
usually do keep the tradition and let's commit our work and and also tag it so


2826
17:41:54,956 --> 17:41:59,756
let's then say git status to see the status lots of things changed


2827
17:41:59,756 --> 17:42:04,160
hey hit add git status


2828
17:42:04,160 --> 17:42:07,756
all right we're going to commit this as step 10


2829
17:42:07,756 --> 17:42:13,680
and we're going to say in here get push it's going to push our commit to github


2830
17:42:13,680 --> 17:42:18,240
and then we get the tag as well as step 10


2831
17:42:18,240 --> 17:42:23,240
and push tax


2832
17:42:24,000 --> 17:42:28,636
traditions as it is tradition in this uh philosophy course we always talk about


2833
17:42:28,636 --> 17:42:31,680
what we're going to do in the next chapter before we wrap up the current


2834
17:42:31,680 --> 17:42:34,320
chapter so as you can see the cache has said let's get ready for the next


2835
17:42:34,320 --> 17:42:38,480
chapter we need a database to store user notes before you use or if we use


2836
17:42:38,480 --> 17:42:44,080
firebase for storage now you see we at the moment we're not


2837
17:42:44,080 --> 17:42:48,320
actually writing anything anywhere there are no nodes uh


2838
17:42:48,320 --> 17:42:52,400
the user can't even create new nodes so but what if we wanted to give the


2839
17:42:52,400 --> 17:42:55,680
ability for the user to create new nodes and then delete those nodes and update


2840
17:42:55,680 --> 17:43:00,796
those nodes and uh to begin with uh we're going to store


2841
17:43:00,796 --> 17:43:05,040
these nodes in a local database inside the application so you will learn in the


2842
17:43:05,040 --> 17:43:08,636
next chapter about sqlite


2843
17:43:08,636 --> 17:43:12,956
and local databases and how to use them with firebase


2844
17:43:12,956 --> 17:43:18,480
sorry and how to use them in flutter in the latest chapters


2845
17:43:18,480 --> 17:43:22,636
in the later chapters we will change that logic so we'll be won't use sql


2846
17:43:22,636 --> 17:43:26,880
lite uh but i believe for any developer uh


2847
17:43:26,880 --> 17:43:30,480
if you're like a i can't say any developer but if you're


2848
17:43:30,480 --> 17:43:33,436
a front-end developer or a back-end developer you should be comfortable with


2849
17:43:33,436 --> 17:43:36,480
databases and that's exactly what we're going to do


2850
17:43:36,480 --> 17:43:40,480
in the next chapter so grab some refreshments and i'll see you in the


2851
17:43:40,480 --> 17:43:44,796
next chapter hello and welcome to chapter 27 of this


2852
17:43:44,796 --> 17:43:48,000
flasa course in the previous chapters we've been


2853
17:43:48,000 --> 17:43:51,840
talking about our user interface and also we've been


2854
17:43:51,840 --> 17:43:56,240
looking at our um services and


2855
17:43:56,240 --> 17:44:00,480
we've put some time also to create some um


2856
17:44:00,480 --> 17:44:04,956
tests for our services and providers up until this up until this point we've


2857
17:44:04,956 --> 17:44:08,560
been talking quite a lot about like the logic of going from one screen to the


2858
17:44:08,560 --> 17:44:13,680
other uh integrating with firebase etc however we haven't actually talked about


2859
17:44:13,680 --> 17:44:18,400
storing um user created content inside our application or inside some


2860
17:44:18,400 --> 17:44:22,240
sort of cloud service what we're going to do in this chapter


2861
17:44:22,240 --> 17:44:27,756
is we're going to talk about sql lite and storing user generated content in


2862
17:44:27,756 --> 17:44:33,840
this case the user generated nodes inside sqlite now


2863
17:44:33,840 --> 17:44:37,360
i'm gonna get to what sqlite is but first of all let's have a look at the


2864
17:44:37,360 --> 17:44:41,436
title of this chapter which as you can see it says crotlocal storage for


2865
17:44:41,436 --> 17:44:44,320
those of you who are software developers from before and are comfortable with


2866
17:44:44,320 --> 17:44:48,480
crowd you can just jump over this part of the chapter for those who are


2867
17:44:48,480 --> 17:44:53,360
not familiar with crowdcrot stands for create read update and delete these are


2868
17:44:53,360 --> 17:44:58,560
four very fundamental operations that any developer would perform on their


2869
17:44:58,560 --> 17:45:04,320
data and for instance if you're a flask or a django developer node express um


2870
17:45:04,320 --> 17:45:08,880
developer you're you're probably already familiar with these because


2871
17:45:08,880 --> 17:45:13,840
you're probably using some sort of a database mysql or sqlite


2872
17:45:13,840 --> 17:45:17,200
um and you're storing your data in there and you're just working with the data


2873
17:45:17,200 --> 17:45:21,116
and you're familiar with the term crop but if you're not familiar with it then


2874
17:45:21,116 --> 17:45:25,360
think of it as c which is create is you creating


2875
17:45:25,360 --> 17:45:30,560
some sort of a an object inside a database some such as for instance a


2876
17:45:30,560 --> 17:45:35,276
user generated note you read of course want to be able to


2877
17:45:35,276 --> 17:45:38,636
read that data back for instance in our application's main user interface you


2878
17:45:38,636 --> 17:45:41,840
may want to read the entire contents of the database


2879
17:45:41,840 --> 17:45:45,520
not the entire contents but at least in user generated notes for that specific


2880
17:45:45,520 --> 17:45:50,080
user so that's the r in crowd then you have u which is for


2881
17:45:50,080 --> 17:45:54,956
which it stands for update um or it doesn't stand for update it means update


2882
17:45:54,956 --> 17:45:59,436
because u is the first letter of update so on update is for instance if i have


2883
17:45:59,436 --> 17:46:02,796
already generated a node inside this application i want to go and change the


2884
17:46:02,796 --> 17:46:06,160
contents of that node then that's the u in crod


2885
17:46:06,160 --> 17:46:11,840
and um last but not least you have d which is delete um and as its name


2886
17:46:11,840 --> 17:46:15,596
stands basically you you allow the user to be able to delete


2887
17:46:15,596 --> 17:46:20,400
their own generated content from the database so


2888
17:46:20,636 --> 17:46:24,080
what we're going to do in this course is to um


2889
17:46:24,080 --> 17:46:29,596
talk about sqlite that is a database or a c


2890
17:46:29,596 --> 17:46:33,756
library and a library created in c um


2891
17:46:33,756 --> 17:46:37,680
that allows us to see as a programmer language c that


2892
17:46:37,680 --> 17:46:42,560
allows us to store data inside a file now if you're if you're coming from like


2893
17:46:42,560 --> 17:46:46,880
the backend world if you're if you're programmed with inside with python in


2894
17:46:46,880 --> 17:46:50,320
django you're already familiar with this because sqlite is the default database


2895
17:46:50,320 --> 17:46:55,596
that will be provided to you in django and a flask as well i believe is using


2896
17:46:55,596 --> 17:46:59,276
sqlite by default which is very similar to


2897
17:46:59,276 --> 17:47:03,520
django but if you're not familiar with sqlite


2898
17:47:03,520 --> 17:47:07,756
is i've prepared a website here which i mean i haven't prepared the website i've


2899
17:47:07,756 --> 17:47:11,116
just opened the website so um


2900
17:47:11,116 --> 17:47:15,436
so you can see here i'll increase the size of the font here and you can see


2901
17:47:15,436 --> 17:47:19,276
sqlite is a c language library that implements a small fast self-contained


2902
17:47:19,276 --> 17:47:23,360
high reliable full-featured sql database engine sqlite is the most


2903
17:47:23,360 --> 17:47:29,200
used database engine in the world well just think of sqlite as the database


2904
17:47:29,200 --> 17:47:33,520
engine that we're going to use in our application and it's not something that


2905
17:47:33,520 --> 17:47:40,320
is built in inside um flutter we will have to use a so-called plug-in for it


2906
17:47:40,320 --> 17:47:44,080
um but that's also okay and i mean not many


2907
17:47:44,080 --> 17:47:49,200
languages have support for talking with a database and natively so


2908
17:47:49,200 --> 17:47:51,840
um but we'll get there we'll get to that


2909
17:47:51,840 --> 17:47:56,160
point okay now let's talk about how we're actually


2910
17:47:56,160 --> 17:48:00,240
going to integrate with sqlite and to start with so i'm assuming that you


2911
17:48:00,240 --> 17:48:04,480
don't you have never worked with sqlite before or you haven't worked with any


2912
17:48:04,480 --> 17:48:07,596
type of database before and you're trying to learn how to do that okay so


2913
17:48:07,596 --> 17:48:10,720
that's that's been my assumption from the beginning of this course so if


2914
17:48:10,720 --> 17:48:14,400
you're already seasoned developer you know exactly how school sql light works


2915
17:48:14,400 --> 17:48:18,160
you may want to jump over this section of this chapter and get to like more


2916
17:48:18,160 --> 17:48:22,080
juicy parts where we integrate actually with equal light inside the floater


2917
17:48:22,080 --> 17:48:25,756
application so let me close this um or maybe let's


2918
17:48:25,756 --> 17:48:29,360
just keep it open and what i'm going to talk about now is


2919
17:48:29,360 --> 17:48:34,720
um a program a free program called db browser for sql


2920
17:48:34,720 --> 17:48:40,400
lite you see sqlite allows you to i mean if you think of


2921
17:48:40,400 --> 17:48:44,240
sql lite has different components first you have your database which is just a


2922
17:48:44,240 --> 17:48:49,520
file that sits on a disk and then you will have the sqlite


2923
17:48:49,520 --> 17:48:54,880
engine that can read from this this file and write to this file so that's the


2924
17:48:54,880 --> 17:48:59,200
engine and then this engine should run somewhere so it's either going to run


2925
17:48:59,200 --> 17:49:03,360
inside an application such as the one i'm mentioning here a db browser for sql


2926
17:49:03,360 --> 17:49:08,320
light okay so sqlite's like baked into that application or you can also bring


2927
17:49:08,320 --> 17:49:12,080
sql light into your terminal so that you can actually talk with sql lite


2928
17:49:12,080 --> 17:49:15,840
databases from within your terminal or if you for instance have install


2929
17:49:15,840 --> 17:49:20,160
django on your computer then you can use django in order to integrate with sql


2930
17:49:20,160 --> 17:49:25,040
iso sqlite is the engine that talks to the sqlite files


2931
17:49:25,040 --> 17:49:30,400
uh which are your databases but then it this engine should run somewhere it's


2932
17:49:30,400 --> 17:49:35,040
not just an executable that like you say here take this file you now have to have


2933
17:49:35,040 --> 17:49:40,160
like some sort of a container where the sequel light engine basically resides


2934
17:49:40,160 --> 17:49:42,796
when we then talk about our flutter application we're going to bring this


2935
17:49:42,796 --> 17:49:47,596
engine into the flutter application so our app can talk with that database but


2936
17:49:47,596 --> 17:49:52,560
for now we're going to look at a program called db browser for lite db browser


2937
17:49:52,560 --> 17:49:56,720
for sql lite is a free and i believe it's an open source program let's search


2938
17:49:56,720 --> 17:49:59,436
for it i'm going to say


2939
17:49:59,436 --> 17:50:04,840
db browser for sqlite and we end up in this


2940
17:50:04,840 --> 17:50:09,200
website and um and as you can see the official home of the db browser for


2941
17:50:09,200 --> 17:50:12,720
sqlite and this is how the program kind of looks like


2942
17:50:12,720 --> 17:50:18,000
um i'm not sure if yeah i can see now it's actually available for windows mac


2943
17:50:18,000 --> 17:50:21,596
os and it would be amazing if it was available for linux as well


2944
17:50:21,596 --> 17:50:24,000
um yeah so


2945
17:50:24,000 --> 17:50:27,916
it seems to be available uh and you can actually use snap so


2946
17:50:27,916 --> 17:50:31,276
that's great so if you're on ubuntu like i am


2947
17:50:31,276 --> 17:50:33,916
not on this machine right now but if you're on ubuntu you can actually use


2948
17:50:33,916 --> 17:50:38,160
snapstore or even debian any type of operating system linux space operating


2949
17:50:38,160 --> 17:50:44,880
system that has snapstore so that is really good even on arch linux fantastic


2950
17:50:44,880 --> 17:50:49,916
all right on debian you used apt so that's fine but anyway so it's available


2951
17:50:49,916 --> 17:50:56,160
for windows linux and mac os so i need you to basically go to sqlite browser or


2952
17:50:56,160 --> 17:51:02,320
db browser as it's called db browser for sqlite if you go to the home page i need


2953
17:51:02,320 --> 17:51:05,840
to find this website and let me change the screen layout so


2954
17:51:05,840 --> 17:51:09,680
you see it better and i need you to download this program


2955
17:51:09,680 --> 17:51:14,080
okay i've already downloaded it on my computer so i'm going to close that


2956
17:51:14,080 --> 17:51:18,240
safari window and i'm going to bring you the db browser for sqlite as it looks


2957
17:51:18,240 --> 17:51:21,596
like on my computer the only thing i've changed on my


2958
17:51:21,596 --> 17:51:25,840
interface here is i've changed the font from 13 to 20


2959
17:51:25,840 --> 17:51:30,796
not because i don't like the number 13. it has nothing to do with that but it's


2960
17:51:30,796 --> 17:51:37,916
just i thought 20 is a little bit of a nicer font size for this course um


2961
17:51:37,916 --> 17:51:44,160
all right so what are we gonna do now so um let me then talk about


2962
17:51:44,160 --> 17:51:47,840
the structure of our database and how we're going to set it up


2963
17:51:47,840 --> 17:51:52,000
if you think about how we've created our user interface in that here's the user


2964
17:51:52,000 --> 17:51:58,000
interface if we go here you can see that we can register with different users so


2965
17:51:58,000 --> 17:52:02,720
then we have a user entity or a user table as we're going to call it


2966
17:52:02,720 --> 17:52:07,360
and then we also have we are going to allow


2967
17:52:07,360 --> 17:52:11,436
the creation of these users in our database so imagine that we will have


2968
17:52:11,436 --> 17:52:15,360
some sort of a table some sort of entity in our database that is dedicated to


2969
17:52:15,360 --> 17:52:19,436
users and users are probably just going to have


2970
17:52:19,436 --> 17:52:21,916
a what are they going to have they're


2971
17:52:21,916 --> 17:52:27,436
going to have an id and an email so as you remember when you create a


2972
17:52:27,436 --> 17:52:32,880
when you register a user with firebase you always get a user identifier so


2973
17:52:32,880 --> 17:52:38,160
we're gonna store that id plus the user's email in our database


2974
17:52:38,160 --> 17:52:41,840
okay so we're not gonna store the user's password that isn't that is an absolute


2975
17:52:41,840 --> 17:52:46,160
no-no okay so user id which comes from firebase and


2976
17:52:46,160 --> 17:52:50,636
the email address we're gonna store in our database


2977
17:52:50,636 --> 17:52:55,756
and also we are going to have another table and


2978
17:52:55,756 --> 17:53:00,796
another table in our database dedicated to notes so as a user when i log into


2979
17:53:00,796 --> 17:53:04,000
the application i should be able to create my own notes and these notes


2980
17:53:04,000 --> 17:53:09,520
should be kind of like bound to and like they should be glued to my user so if my


2981
17:53:09,520 --> 17:53:14,080
user is in the database i should be able to have notes and if my user is deleted


2982
17:53:14,080 --> 17:53:17,200
all those notes should kind of also be deleted from the database so it's kind


2983
17:53:17,200 --> 17:53:21,916
of like a cascade for those of you who are familiar with back-end development


2984
17:53:21,916 --> 17:53:25,200
so that is like the structure that we're


2985
17:53:25,200 --> 17:53:30,000
going to set up for our database so in our i can see in my notes that for


2986
17:53:30,000 --> 17:53:35,200
our notes table we are actually going to have a user id


2987
17:53:35,200 --> 17:53:39,756
integer in that table that like binds the


2988
17:53:39,756 --> 17:53:43,680
every node object to the user who created it but we'll get there so don't


2989
17:53:43,680 --> 17:53:47,276
worry about it so i'm going to get rid of this


2990
17:53:47,276 --> 17:53:50,880
here and put it there so we don't see it


2991
17:53:50,880 --> 17:53:55,360
now what we need to do is start testing so we want to create a database a simple


2992
17:53:55,360 --> 17:53:59,596
database and start creating some tables in there okay so what i need you to do


2993
17:53:59,596 --> 17:54:03,756
is just to press the new database and i'm going to save it on my desktop and


2994
17:54:03,756 --> 17:54:09,116
let's just call it testing okay and i'm going to press the


2995
17:54:09,116 --> 17:54:14,560
save button right there okay you can see now we created a


2996
17:54:14,560 --> 17:54:19,756
database and we have a table here it doesn't look so nice i mean it's not


2997
17:54:19,756 --> 17:54:23,040
rendered so fine because i've changed the font on my screen


2998
17:54:23,040 --> 17:54:26,796
but you i think you can you get the idea okay


2999
17:54:26,796 --> 17:54:30,720
so what we need to do is to as the caption says we need to create a table


3000
17:54:30,720 --> 17:54:36,320
called user okay so go in here at the table section here


