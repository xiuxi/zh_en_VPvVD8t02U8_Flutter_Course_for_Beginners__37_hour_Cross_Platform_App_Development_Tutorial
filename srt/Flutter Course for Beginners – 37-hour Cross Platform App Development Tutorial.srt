1
00:00:00,080 --> 00:00:03,840
this massive flutter course will take you from being an absolute beginner to


2
00:00:03,840 --> 00:00:08,480
being able to release apps on the google play store and the app store bandit is a


3
00:00:08,480 --> 00:00:13,120
very experienced software developer and an excellent teacher hello everyone and


4
00:00:13,120 --> 00:00:17,039
welcome to this free flota course my name is vandal and i'm a google


5
00:00:17,039 --> 00:00:21,680
developer expert for flutter and dart and let's jump and jump right in who's


6
00:00:21,680 --> 00:00:26,400
this course for i designed this course mainly for absolute beginners so whoever


7
00:00:26,400 --> 00:00:31,039
hasn't even done a written a single line of code before i actually when designing


8
00:00:31,039 --> 00:00:34,000
this course i designed it for two specific personas one was a graphic


9
00:00:34,000 --> 00:00:36,880
designer who was working mainly with figma


10
00:00:36,880 --> 00:00:40,320
actually it doesn't really matter what graphical tool you're using photoshop


11
00:00:40,320 --> 00:00:44,160
or figma or whatever or sketch and the other persona was a project


12
00:00:44,160 --> 00:00:49,200
manager who's mainly working with jira so um i've made the assumption that you


13
00:00:49,200 --> 00:00:52,879
pretty much don't know anything about software development from before and


14
00:00:52,879 --> 00:00:56,640
even if you're a software developer you could perhaps jump over the things that


15
00:00:56,640 --> 00:01:00,879
you might know but if you haven't done a flutter development from before i


16
00:01:00,879 --> 00:01:03,920
strongly suggest that you actually follow the chapters chronologically


17
00:01:03,920 --> 00:01:07,360
which is the way i've designed this course basically


18
00:01:07,360 --> 00:01:11,920
so um as i mentioned i want when i design this course i want i wanted


19
00:01:11,920 --> 00:01:15,920
everybody to just follow the chapters one at a time and one after each other


20
00:01:15,920 --> 00:01:20,479
chronologically so um i highly recommend that you don't jump over chapters just


21
00:01:20,479 --> 00:01:24,240
because there's so much information provided in each chapter and i will be


22
00:01:24,240 --> 00:01:27,680
referring back to information that i provided in previous chapters in each


23
00:01:27,680 --> 00:01:32,479
chapter so i think it's very good if you can just follow the course the way i


24
00:01:32,479 --> 00:01:36,479
design it to be consumed which is chronologically


25
00:01:36,479 --> 00:01:41,200
and what you learn in this course is not only the basics but you'll also go from


26
00:01:41,200 --> 00:01:45,040
a complete beginner to being able to release your


27
00:01:45,040 --> 00:01:49,759
applications in apple's app store and google's play store and we're going to


28
00:01:49,759 --> 00:01:53,200
be using a blend of different tools and software


29
00:01:53,200 --> 00:01:56,159
we're going to be using visual studio code we're using firebase for the


30
00:01:56,159 --> 00:02:01,040
backend which i'll teach you all about we're using even figma as a graphic


31
00:02:01,040 --> 00:02:04,880
designer to create our icons and screenshots and even


32
00:02:04,880 --> 00:02:09,759
our loading screens so and there's lots to


33
00:02:09,759 --> 00:02:12,879
be learned and i'll take you through those steps and i don't make any


34
00:02:12,879 --> 00:02:17,120
assumptions about what you may know from before so i'll explain everything along


35
00:02:17,120 --> 00:02:21,360
the way so you'll go from absolute beginner to be able to be able to


36
00:02:21,360 --> 00:02:25,280
actually release your two applications which is the same code base in apple's


37
00:02:25,280 --> 00:02:29,520
app store and google's play store uh if you if you're attending this


38
00:02:29,520 --> 00:02:33,040
course please do follow me on social media and i'll really really appreciate


39
00:02:33,040 --> 00:02:38,560
it i'm evan.mp on twitter and also you can find me by my full name on linkedin


40
00:02:38,560 --> 00:02:42,879
that'd be much appreciated this course of course uh for free


41
00:02:42,879 --> 00:02:46,080
but for those who want to and are able to


42
00:02:46,080 --> 00:02:51,280
support me um then you can do that by buying me a cup of coffee on


43
00:02:51,280 --> 00:02:57,040
buy me a coffee.com van that so without further ado let's just jump right into


44
00:02:57,040 --> 00:03:00,640
it hello everyone and welcome


45
00:03:00,640 --> 00:03:04,560
to the first chapter of our flutter course


46
00:03:04,560 --> 00:03:08,720
um there are so many different topics that


47
00:03:08,720 --> 00:03:12,159
i could choose for the first chapter they're


48
00:03:12,159 --> 00:03:18,159
and they're all very important however after going through the material


49
00:03:18,159 --> 00:03:22,239
that i've been preparing for you for this course i realized that one of the


50
00:03:22,239 --> 00:03:28,319
absolute basic points that we have to go through is the developer accounts


51
00:03:28,319 --> 00:03:32,560
um for apple and google now if you're not


52
00:03:32,560 --> 00:03:35,840
familiar with the term of developer account there


53
00:03:35,840 --> 00:03:37,920
are basically what a developer account


54
00:03:37,920 --> 00:03:43,599
allows you to do is to release your applications on um apple's app store and


55
00:03:43,599 --> 00:03:46,720
google's play store


56
00:03:47,280 --> 00:03:52,640
as i mentioned in the introduction you may choose to follow along this


57
00:03:52,640 --> 00:03:56,080
course without actually releasing the


58
00:03:56,080 --> 00:04:00,879
application to the app store and the play store


59
00:04:00,879 --> 00:04:05,200
but even if you do decide to not release the


60
00:04:05,200 --> 00:04:08,799
applications on the aforementioned stores you will


61
00:04:08,799 --> 00:04:12,400
still for the optimal experience of


62
00:04:12,400 --> 00:04:19,280
development for ios and android you will most definitely need a developer account


63
00:04:19,280 --> 00:04:24,320
and the reason behind that is


64
00:04:24,400 --> 00:04:29,840
i mean it is quite deep to try to explain the actual reason behind it


65
00:04:29,840 --> 00:04:32,560
but from my perspective one of the most


66
00:04:32,560 --> 00:04:35,840
important reasons you may want to have a developer account is to create the


67
00:04:35,840 --> 00:04:41,120
so-called app ids


68
00:04:41,120 --> 00:04:45,520
so every application on ios and every application on android has


69
00:04:45,520 --> 00:04:51,520
an identifier which is usually something called a reverse domain identifier and


70
00:04:51,520 --> 00:04:55,759
it's kind of like um i still find it strange


71
00:04:55,759 --> 00:04:58,720
the way it is but


72
00:04:59,199 --> 00:05:03,440
some were somehow it was decided that every application needs to have an


73
00:05:03,440 --> 00:05:08,160
identifier and every identifier is kind of like associated with a domain name


74
00:05:08,160 --> 00:05:11,600
and a domain name is kind of like a website for instance if you have


75
00:05:11,600 --> 00:05:16,160
a yourname.com uh as your website


76
00:05:16,160 --> 00:05:20,000
then you would say that okay i'm gonna create


77
00:05:20,000 --> 00:05:25,600
an application for ios and android in flutter and i'm gonna call it fubar


78
00:05:25,600 --> 00:05:28,000
then it was somehow decided that your


79
00:05:28,000 --> 00:05:32,320
applications identifier would then in that case be


80
00:05:33,039 --> 00:05:36,960
if you reverse it then it would literally be your domain


81
00:05:36,960 --> 00:05:41,199
in reverse which would become dot


82
00:05:41,199 --> 00:05:46,320
your name dot your application's name


83
00:05:46,320 --> 00:05:50,720
i don't really know i mean if somebody's


84
00:05:50,720 --> 00:05:53,840
if somebody knows the reasoning behind it i would be glad to hear that and i'm


85
00:05:53,840 --> 00:05:57,199
sure that there's resources out there explaining why that is the case but it


86
00:05:57,199 --> 00:06:00,240
kind of feels like it's become the


87
00:06:00,240 --> 00:06:04,560
norm and we just have to roll with it


88
00:06:04,560 --> 00:06:08,000
so the reason i explained the app


89
00:06:08,000 --> 00:06:11,680
identifier is that


90
00:06:12,080 --> 00:06:17,919
when you set up your back end later when we set up the back end later together


91
00:06:17,919 --> 00:06:21,759
in that the client that we write in flutter is going to talk with our


92
00:06:21,759 --> 00:06:26,560
backend and store the notes retrieve the notes create a user


93
00:06:26,560 --> 00:06:33,120
uh sign in with a user etc etc that back-end


94
00:06:33,120 --> 00:06:38,720
setup also will require you to have your app identifier


95
00:06:38,720 --> 00:06:40,960
and


96
00:06:41,280 --> 00:06:46,639
even though you don't necessarily need to have a developer account to get an


97
00:06:46,639 --> 00:06:50,720
app identifier because an app identifier is just something that you decide


98
00:06:50,720 --> 00:06:54,800
okay here's my app identifier i think my website is called this


99
00:06:54,800 --> 00:06:57,919
blah blah and even though you don't actually need a website that's the thing


100
00:06:57,919 --> 00:07:01,599
but an app identifier is usually associated with a website so don't worry


101
00:07:01,599 --> 00:07:04,080
about it you don't have to have a website in


102
00:07:04,080 --> 00:07:08,479
order to follow along with these steps that i'm going to name here


103
00:07:08,479 --> 00:07:12,720
but it is still good practice to create your developer account in order to


104
00:07:12,720 --> 00:07:18,080
officially register your app identifiers


105
00:07:18,080 --> 00:07:22,319
and another reason that you will need


106
00:07:22,319 --> 00:07:27,199
a developer account for apple and google is that you will


107
00:07:27,199 --> 00:07:30,880
for apple um


108
00:07:30,880 --> 00:07:35,599
if you want to be able to deploy your application


109
00:07:35,599 --> 00:07:41,039
onto a telephone and not use a simulator


110
00:07:41,039 --> 00:07:44,960
then you will need to register a developer account and


111
00:07:44,960 --> 00:07:49,520
use some resources that apple provides you in forms of certificates and keys


112
00:07:49,520 --> 00:07:53,120
and profiles in order to deploy your application to a


113
00:07:53,120 --> 00:07:58,039
telephone or an ipad for instance


114
00:07:58,400 --> 00:08:01,840
and android the world is a little bit different in that you don't have to do


115
00:08:01,840 --> 00:08:06,560
the same process but in order to then submit your application


116
00:08:06,560 --> 00:08:10,160
to google for review


117
00:08:10,160 --> 00:08:15,360
later so that it can be available for everybody who has an android telephone


118
00:08:15,360 --> 00:08:19,280
or a tablet you will still need a developer account so


119
00:08:19,280 --> 00:08:22,560
it goes without saying that it is a very important step


120
00:08:22,560 --> 00:08:26,400
um that even if you decide


121
00:08:26,400 --> 00:08:28,960
not to


122
00:08:29,680 --> 00:08:33,599
deploy your application later to app store and play store


123
00:08:33,599 --> 00:08:38,880
it's still a very fundamental step so i suggest that you actually go through


124
00:08:38,880 --> 00:08:42,240
these steps that i'm gonna provide you in the first chapter


125
00:08:42,240 --> 00:08:47,760
and that's why i actually decided to have this as chapter one


126
00:08:47,760 --> 00:08:50,160
um sorry i have to just edit my notes a


127
00:08:50,160 --> 00:08:53,279
little bit if you haven't watched the introduction


128
00:08:53,279 --> 00:08:56,640
to this course and you're just jumping here i suggest that you go to the


129
00:08:56,640 --> 00:09:00,720
introduction and watch it i know it was about 34 minutes it was quite a long


130
00:09:00,720 --> 00:09:05,600
introduction but there are so many important points that i feel everybody


131
00:09:05,600 --> 00:09:09,920
needs to know before you get started with the course so please watch those if


132
00:09:09,920 --> 00:09:13,839
you see me moving my head around then you know the reason


133
00:09:13,839 --> 00:09:18,160
and i explain a lot of things that are like the fundamentals of this


134
00:09:18,160 --> 00:09:21,839
course and the reasoning


135
00:09:21,839 --> 00:09:25,760
all those decisions which i believe are so important that i still suggest


136
00:09:25,760 --> 00:09:30,959
everybody watched an introduction before they actually start with the course so


137
00:09:30,959 --> 00:09:34,959
so we've now talked about


138
00:09:34,959 --> 00:09:39,680
the basics um and if you go to


139
00:09:39,680 --> 00:09:44,160
why we need a developer account i believe i've already covered this


140
00:09:44,160 --> 00:09:49,440
in that a developer account is the utility is an account that you


141
00:09:49,440 --> 00:09:54,959
register for apple and google that gives you extra resources as a


142
00:09:54,959 --> 00:09:58,800
developer in order to be able to deploy your application and deploy your


143
00:09:58,800 --> 00:10:04,360
applications to the respective app stores


144
00:10:04,560 --> 00:10:09,360
now if we talk about


145
00:10:09,360 --> 00:10:13,440
developer accounts there are two main types of developer


146
00:10:13,440 --> 00:10:20,240
accounts one is an individual account and the other one is a company account


147
00:10:20,240 --> 00:10:23,360
um and


148
00:10:23,360 --> 00:10:27,279
for me the biggest difference between these two different accounts is the


149
00:10:27,279 --> 00:10:31,360
liability um and by liability i mean


150
00:10:31,360 --> 00:10:36,480
if you if you register an individual account


151
00:10:36,480 --> 00:10:43,519
then you as an individual are liable for that application and as users download


152
00:10:43,519 --> 00:10:47,040
your application and interact with it if they have any problems any for instance


153
00:10:47,040 --> 00:10:51,680
any there's any judiciary problems


154
00:10:51,680 --> 00:10:55,120
like if if someone for some reason believes that


155
00:10:55,120 --> 00:10:59,279
you're storing their data in the wrong way or that you're storing their


156
00:10:59,279 --> 00:11:03,120
personal information without exposing that and telling the users about that


157
00:11:03,120 --> 00:11:07,920
then they can personally hold you liable for


158
00:11:07,920 --> 00:11:12,839
for for instance breach of information or gdpr


159
00:11:12,839 --> 00:11:18,800
infringements or whatever it is so just know that you can register yourself


160
00:11:18,800 --> 00:11:21,839
as an individual for both


161
00:11:21,839 --> 00:11:25,600
app store apple's app store and google's play store


162
00:11:25,600 --> 00:11:30,079
but you need to also be aware that should you wish to do that then you're


163
00:11:30,079 --> 00:11:32,880
personally liable for any problems that will


164
00:11:32,880 --> 00:11:34,800
that may be [Music]


165
00:11:34,800 --> 00:11:38,399
occurring in the future so that's the personal account


166
00:11:38,399 --> 00:11:42,720
or an individual account and as a company account then


167
00:11:42,720 --> 00:11:44,959
uh you kind of like


168
00:11:44,959 --> 00:11:48,000
based on what type of company you've created


169
00:11:48,000 --> 00:11:52,720
um you may or may not be personally liable


170
00:11:52,720 --> 00:11:55,120
for um


171
00:11:55,120 --> 00:11:59,600
any damages that may be caused to your users and if they bring it up to you now


172
00:11:59,600 --> 00:12:02,639
i know this is all sounding a lot serious


173
00:12:02,639 --> 00:12:08,480
in reality what we are trying to do is not that big a deal but we are still


174
00:12:08,480 --> 00:12:14,240
trying to store i mean the goal of this course is to um at this course is to


175
00:12:14,240 --> 00:12:17,680
uh go through


176
00:12:17,680 --> 00:12:22,839
an application and create an application that can store users notes notes can be


177
00:12:22,839 --> 00:12:28,240
quiet personal and you're storing those notes then um


178
00:12:28,240 --> 00:12:31,279
on a backhand that you have full access to


179
00:12:31,279 --> 00:12:35,040
so you're kind of like storing user created data


180
00:12:35,040 --> 00:12:38,880
so it is very important that you actually treat that data correctly make


181
00:12:38,880 --> 00:12:43,040
sure that nobody except those who are authorized


182
00:12:43,040 --> 00:12:47,200
can access that data so um


183
00:12:47,200 --> 00:12:52,079
from a responsibility point of view it is actually


184
00:12:52,079 --> 00:12:54,880
a little bit different what kind of


185
00:12:54,880 --> 00:12:58,160
company account you want to create if that's what you want to create now


186
00:12:58,160 --> 00:13:01,040
because for instance in sweden where i live


187
00:13:01,040 --> 00:13:06,000
you can have a personal company account in that or


188
00:13:06,000 --> 00:13:09,519
sorry a personal company so you can register a personal company it means


189
00:13:09,519 --> 00:13:13,600
that you are personally liable for that company


190
00:13:13,600 --> 00:13:17,600
um and you can also create a company that


191
00:13:17,600 --> 00:13:20,399
uh it has like uh


192
00:13:20,399 --> 00:13:24,399
it's like an umbrella basically sits on top and then there are people who are


193
00:13:24,399 --> 00:13:29,519
directors of the company and blah blah so you're not personally liable


194
00:13:29,519 --> 00:13:32,160
uh and that is the same structure that you


195
00:13:32,160 --> 00:13:36,320
can find in many other countries i believe you asked germany


196
00:13:36,320 --> 00:13:38,880
sweden england


197
00:13:38,880 --> 00:13:42,000
and many other countries you can set up companies that are


198
00:13:42,000 --> 00:13:46,160
either a sole proprietorship or something called


199
00:13:46,160 --> 00:13:49,120
english is not my first language but it's something like that or you can


200
00:13:49,120 --> 00:13:52,240
create like a limited company that you have limited liability and you're not


201
00:13:52,240 --> 00:13:56,800
personally liable so these are the different types of


202
00:13:56,800 --> 00:14:01,519
developer accounts that you can set up so


203
00:14:01,519 --> 00:14:06,480
we can i mean that point i think we all understand now that you can create an


204
00:14:06,480 --> 00:14:10,160
individual or a company account


205
00:14:11,120 --> 00:14:14,480
now i think i mean i personally registered


206
00:14:14,480 --> 00:14:17,839
already an account


207
00:14:18,160 --> 00:14:24,160
as an ios developer and an android app developer so


208
00:14:24,320 --> 00:14:29,839
and since i registered a company account i can't go through setting up the exact


209
00:14:29,839 --> 00:14:34,240
same company again but at least i can show you some of the


210
00:14:34,240 --> 00:14:39,040
steps involved in creating those


211
00:14:39,040 --> 00:14:44,880
accounts so what we could do is to um


212
00:14:44,880 --> 00:14:50,800
now you can't see the screen right now but i will bring it up here


213
00:14:50,800 --> 00:14:57,279
so that you can also see now i'm gonna bring my studio here


214
00:14:57,279 --> 00:15:01,600
and i'm going to make this screen a little bit bigger so that you can see my


215
00:15:01,600 --> 00:15:05,040
screen better so


216
00:15:05,040 --> 00:15:10,639
let me also make this a little bit smaller on top so that you can see


217
00:15:10,639 --> 00:15:17,600
the content a little bit better so you can see here that there are two


218
00:15:17,600 --> 00:15:21,839
options available to you either you enroll as an individual or you enroll as


219
00:15:21,839 --> 00:15:26,800
an organization and it is strongly recommended actually


220
00:15:26,800 --> 00:15:29,120
um


221
00:15:29,440 --> 00:15:35,040
so you need to make sure that you have two-factor authentication turned on and


222
00:15:35,040 --> 00:15:39,199
so that's that's not a problem all this means basically as an individual it


223
00:15:39,199 --> 00:15:42,959
means that just you you will need an account you will need to set up an


224
00:15:42,959 --> 00:15:45,360
account


225
00:15:45,600 --> 00:15:49,279
however if you want to set up as an organization like if you have a limited


226
00:15:49,279 --> 00:15:53,120
company and you want to create an apple developer account that is linked to that


227
00:15:53,120 --> 00:15:56,320
organization is a little bit different because


228
00:15:56,320 --> 00:15:59,920
um you will need to set up something called


229
00:15:59,920 --> 00:16:04,639
addons or duns or i don't know how you want to pronounce the uns


230
00:16:04,639 --> 00:16:10,079
which is kind of like a it's a new thing for me at least but it


231
00:16:10,079 --> 00:16:15,920
is an identifier for your company that you either have been assigned to already


232
00:16:15,920 --> 00:16:18,959
um by


233
00:16:18,959 --> 00:16:24,800
i think there is a company called dmb um


234
00:16:24,959 --> 00:16:31,040
so if we go to let me see if i can bring the notes for that


235
00:16:31,360 --> 00:16:37,519
uh let's see learn more if you go to learn more here


236
00:16:37,519 --> 00:16:41,120
here dmb


237
00:16:41,120 --> 00:16:45,199
is called by done and bradstreet


238
00:16:45,519 --> 00:16:49,120
so there then we have uh the ability to


239
00:16:49,120 --> 00:16:53,279
register a duns number um


240
00:16:53,279 --> 00:16:58,160
for me i was one of the lucky people to have already been assigned a duns number


241
00:16:58,160 --> 00:17:01,040
for my company um


242
00:17:01,040 --> 00:17:05,679
by dmb because you either have um let's see if


243
00:17:05,679 --> 00:17:09,600
if they write it here you see it says dmv may have already


244
00:17:09,600 --> 00:17:13,039
assigned your organization a free uh duan's number


245
00:17:13,039 --> 00:17:16,480
before enrolling look up your organization to see if you have a duns


246
00:17:16,480 --> 00:17:21,280
number so you can just click on the link and we can go here


247
00:17:21,280 --> 00:17:24,880
and you can then select your region for me


248
00:17:24,880 --> 00:17:28,640
it would be sweden then i would write my company name


249
00:17:28,640 --> 00:17:32,480
some address information contact information etc etc


250
00:17:32,480 --> 00:17:36,640
and then you can check whether there is a duns number assigned


251
00:17:36,640 --> 00:17:40,720
to your company so i suggest that you actually do this by going to this


252
00:17:40,720 --> 00:17:44,760
website okay


253
00:17:46,000 --> 00:17:50,160
so that's for a duns number if you already have one but if you don't have


254
00:17:50,160 --> 00:17:56,880
one then you will have to create and request a duans number from dnb


255
00:17:56,880 --> 00:18:01,520
i would show you the website for dmb and the uns number right now but


256
00:18:01,520 --> 00:18:06,080
my browser is set up so that my locale is already provided to the browser which


257
00:18:06,080 --> 00:18:09,200
is swedish and then if i go to the dmv website you're gonna see everything in


258
00:18:09,200 --> 00:18:12,559
swedish and that doesn't make any sense just to


259
00:18:12,559 --> 00:18:19,919
read the information in swedish but i believe you can go to dmb's website um


260
00:18:19,919 --> 00:18:23,440
so if if i search for a dmb


261
00:18:23,440 --> 00:18:28,080
duns or dunes or here so this is a swedish


262
00:18:28,080 --> 00:18:34,000
localized website for dmb let's see if it can change the language


263
00:18:34,000 --> 00:18:36,400
um


264
00:18:37,520 --> 00:18:43,840
actually i can see here that they're very they're actually in sweden


265
00:18:44,720 --> 00:18:48,240
and i wonder if we can here change country


266
00:18:48,240 --> 00:18:50,960
let's just say


267
00:18:52,880 --> 00:18:55,880
international


268
00:18:56,320 --> 00:19:00,080
so if we go here


269
00:19:00,080 --> 00:19:03,840
let's see if he can um


270
00:19:03,919 --> 00:19:08,240
if there's any way to actually request a duns number


271
00:19:08,240 --> 00:19:12,160
like if he sir say b-u-n-s


272
00:19:12,480 --> 00:19:14,799
um


273
00:19:16,320 --> 00:19:22,160
and i can't see anything related to that to be honest with you so if you go back


274
00:19:23,600 --> 00:19:27,280
here i can see i can request the duns and


275
00:19:27,280 --> 00:19:33,039
here the locale is svse and here the locale was engb


276
00:19:33,039 --> 00:19:38,080
so what happens if we just go back to this url that we were on before


277
00:19:38,080 --> 00:19:42,880
and then i just change the locale does that work


278
00:19:42,880 --> 00:19:47,200
well unfortunately but i mean here the uns number


279
00:19:47,200 --> 00:19:52,080
um get a duns number okay that's good


280
00:19:52,080 --> 00:19:56,640
and then and you can hear say i'm an apple developer


281
00:19:56,640 --> 00:20:01,360
press continue oh it sends you back here


282
00:20:01,360 --> 00:20:06,240
um that was really bad


283
00:20:06,240 --> 00:20:10,240
so it says look up your organization


284
00:20:10,240 --> 00:20:14,320
in apple's website uh


285
00:20:14,320 --> 00:20:18,320
and when you when you try to get a uns number


286
00:20:18,320 --> 00:20:24,240
it tells you to go to apple's website um


287
00:20:25,440 --> 00:20:30,480
if we say that then okay legal business name etc etc okay


288
00:20:30,480 --> 00:20:35,120
so you will you will need to go through this process which doesn't seem to be


289
00:20:35,120 --> 00:20:39,039
completely easy to get a duns number you see requested


290
00:20:39,039 --> 00:20:44,120
the uns number so you probably just want to go to dmb.coms


291
00:20:44,679 --> 00:20:49,520
number.html and i i can't explain this complete


292
00:20:49,520 --> 00:20:53,039
process to be honest with you because first of all it will be a waste of time


293
00:20:53,039 --> 00:20:57,039
for both of us uh because these are so many moving


294
00:20:57,039 --> 00:21:02,240
parts and a third-party company that i have no control over so if i even try to


295
00:21:02,240 --> 00:21:06,080
explain their process it may change tomorrow so there's


296
00:21:06,080 --> 00:21:11,039
it's not a good investment of our time but everybody else has figured it out


297
00:21:11,039 --> 00:21:14,799
and i'm pretty sure that if you just go and say request the uns number you can


298
00:21:14,799 --> 00:21:17,679
just follow the process and then


299
00:21:17,679 --> 00:21:23,120
get your uns number but begin by going through


300
00:21:23,120 --> 00:21:26,799
look up your organization so


301
00:21:26,799 --> 00:21:31,600
you may already have been assigned a free duns number so


302
00:21:31,600 --> 00:21:36,400
do that first please but but if you have to request the uns number i believe


303
00:21:36,400 --> 00:21:41,600
there is a little bit of a cost to it and that is about 70 dollars if i'm 70


304
00:21:41,600 --> 00:21:44,720
to 80 dollars at the time of recording this video


305
00:21:44,720 --> 00:21:47,600
so count with almost about a hundred


306
00:21:47,600 --> 00:21:51,679
dollars and hopefully not more


307
00:21:51,679 --> 00:21:56,720
uh hopefully actually a lot less about around um


308
00:21:56,720 --> 00:22:01,120
70 dollars at least does that make sense i said so many


309
00:22:01,120 --> 00:22:05,440
numbers seventy dollars at least so um


310
00:22:05,440 --> 00:22:09,280
try to get your duns number at least that that's what apple says you will


311
00:22:09,280 --> 00:22:13,360
need now of course if you want to register


312
00:22:13,360 --> 00:22:18,559
as a company i can't stress this enough you will need a website


313
00:22:18,559 --> 00:22:24,080
i remember vividly when i registered a developer account at apple


314
00:22:24,080 --> 00:22:28,640
and they rejected my request saying that well


315
00:22:28,640 --> 00:22:33,600
your website doesn't have any content and they were right because i just


316
00:22:33,600 --> 00:22:38,080
created an empty website like a domain i regis i know i didn't actually create an


317
00:22:38,080 --> 00:22:44,720
empty website i registered a domain and there was no website so when you


318
00:22:44,720 --> 00:22:50,880
typed my website's name it was it would just not show you anything so


319
00:22:50,880 --> 00:22:54,159
um and they came back and said no your application is rejected because you


320
00:22:54,159 --> 00:22:57,360
don't have a website what kind of company are you


321
00:22:57,360 --> 00:23:02,240
so then i had to actually get like a hosting service and i have some content


322
00:23:02,240 --> 00:23:07,520
in there have like a support so if you are registering as


323
00:23:07,520 --> 00:23:12,880
a website sorry as a company as an organization you will need a hosting


324
00:23:12,880 --> 00:23:16,240
service you will need a domain provider uh


325
00:23:16,240 --> 00:23:20,080
you will need to ensure that you have a website because they're not the same


326
00:23:20,080 --> 00:23:24,159
thing if you have a host and you have a domain provider it still


327
00:23:24,159 --> 00:23:30,159
doesn't mean that you have content on your web page but what i realize is


328
00:23:30,159 --> 00:23:34,480
that if you register your domain and have hosting


329
00:23:34,480 --> 00:23:38,320
service make sure that you have a website just have some


330
00:23:38,320 --> 00:23:42,240
content in there say hello we are this business that business


331
00:23:42,240 --> 00:23:45,520
um we work with this and this if you have


332
00:23:45,520 --> 00:23:48,880
any questions contact this email and here's our phone number here's their


333
00:23:48,880 --> 00:23:52,640
address etc so you need to ensure that if you have


334
00:23:52,640 --> 00:23:58,080
an organization it is actually an organization it's not just like hi my


335
00:23:58,080 --> 00:24:03,600
name is fubar i'm sitting at home contact me if you have any questions not


336
00:24:03,600 --> 00:24:05,840
like that so


337
00:24:05,840 --> 00:24:09,360
and of course after you made your decision you start the enrollment


338
00:24:09,360 --> 00:24:13,679
process so now


339
00:24:13,679 --> 00:24:16,880
learn more continue enrollment on the web you can do


340
00:24:16,880 --> 00:24:20,400
and then you come here and you will basically need to provide your


341
00:24:20,400 --> 00:24:23,520
information and continue with the process now we're


342
00:24:23,520 --> 00:24:27,120
not going to go through this but the important thing i have to mention


343
00:24:27,120 --> 00:24:29,840
here is that as you


344
00:24:29,840 --> 00:24:36,000
go through the enrollment process as a an apple developer unfortunately there


345
00:24:36,000 --> 00:24:40,400
is a cost uh last time which is about a few months


346
00:24:40,400 --> 00:24:44,400
ago when i registered or i had to renew my registration you have to renew your


347
00:24:44,400 --> 00:24:48,080
registration for


348
00:24:48,880 --> 00:24:52,480
apple's developer account you have to renew it every year


349
00:24:52,480 --> 00:24:57,120
and as i've mentioned here the


350
00:24:57,360 --> 00:25:00,400
process is not free unfortunately it costs


351
00:25:00,400 --> 00:25:03,360
or last time i registered or renewed my


352
00:25:03,360 --> 00:25:08,080
registration it costs 99 and i believe it's been 99 for a very long time so if


353
00:25:08,080 --> 00:25:10,960
you're in sweden it costs about a thousand


354
00:25:10,960 --> 00:25:15,200
crowns if you're in england it probably costs about 80 pounds or something


355
00:25:15,200 --> 00:25:21,520
um and in the us it's about yeah just count with almost a hundred dollars so


356
00:25:21,520 --> 00:25:24,320
i used to be able to provide this like you have to have some sort of credit


357
00:25:24,320 --> 00:25:27,039
card or debit card to be able to pay for it so


358
00:25:27,039 --> 00:25:31,679
um after you've done that after you register your account as an organization


359
00:25:31,679 --> 00:25:36,080
you will have direct access then or an immediate access to your developer


360
00:25:36,080 --> 00:25:42,400
account and you can start developing applications etc etc etc so


361
00:25:42,400 --> 00:25:47,840
if you're following along with this um course and you want to deploy your


362
00:25:47,840 --> 00:25:52,000
application to the app store and play store please do this first


363
00:25:52,000 --> 00:25:57,840
get your developer account either as an organization or as a


364
00:25:57,840 --> 00:26:02,000
as an individual get that process out of the way because


365
00:26:02,000 --> 00:26:05,919
a developer account especially if you're an organization as i mentioned here is


366
00:26:05,919 --> 00:26:12,080
not a super fast process i mean when you get the account then it's simple it's


367
00:26:12,080 --> 00:26:18,320
fast and you're in there immediately but the process itself is a long process so


368
00:26:18,320 --> 00:26:22,320
um i remember for me it took about two weeks because i got one rejection took


369
00:26:22,320 --> 00:26:27,520
about one week for them to renew like to review the process the documents again


370
00:26:27,520 --> 00:26:31,440
so is not a fast process uh unfortunately


371
00:26:31,440 --> 00:26:34,159
it's like very


372
00:26:34,799 --> 00:26:41,440
it's yeah it's just long long boring process so


373
00:26:41,440 --> 00:26:43,919
get that out of the way if you can please


374
00:26:43,919 --> 00:26:46,880
um so


375
00:26:46,880 --> 00:26:49,840
that's for the


376
00:26:49,840 --> 00:26:55,120
long and not free part for ios


377
00:26:55,120 --> 00:26:58,480
and also


378
00:26:58,480 --> 00:27:02,640
one more thing that i need to mention is that


379
00:27:02,640 --> 00:27:06,320
if you're registering and you want to sell applications which is not the


380
00:27:06,320 --> 00:27:10,159
purpose of this course but if you want to sell applications then you will have


381
00:27:10,159 --> 00:27:13,919
to provide some banking and tax information


382
00:27:13,919 --> 00:27:17,440
so they need to ensure that the stuff that you're selling in different


383
00:27:17,440 --> 00:27:21,520
countries the money that is then being sent to your bank account


384
00:27:21,520 --> 00:27:24,559
will be accounted for when you're paying your taxes


385
00:27:24,559 --> 00:27:28,559
so and i believe that if you're trying to sell


386
00:27:28,559 --> 00:27:34,720
apps on the app store then you will have to fill in some forms with the u.s tax


387
00:27:34,720 --> 00:27:39,840
offices um i don't even remember irs i think


388
00:27:39,840 --> 00:27:44,080
internal revenue services or something like the irs i believe that you have to


389
00:27:44,080 --> 00:27:47,760
fill some forms like send the forms to them then they will come back with some


390
00:27:47,760 --> 00:27:52,399
sort of identifier to you and then you will need to use that identifier


391
00:27:52,399 --> 00:27:56,559
on apple's website in order to basically say that yeah yeah i know i'm selling


392
00:27:56,559 --> 00:28:01,520
stuff in the u.s i'm selling stuff in japan i'm selling stuff in sweden norway


393
00:28:01,520 --> 00:28:06,000
but i'm gonna pay taxes for them here in my


394
00:28:06,000 --> 00:28:09,039
country and that's what the form says here


395
00:28:09,039 --> 00:28:15,279
here is my name here's my company i'm an organization or i'm an individual


396
00:28:15,279 --> 00:28:18,320
so i have no company my


397
00:28:18,320 --> 00:28:21,440
personal identification number my country is this


398
00:28:21,440 --> 00:28:26,480
um is my address my phone number etc and then you send it to them


399
00:28:26,480 --> 00:28:31,120
to irs and then they come back and say okay now we know who you are and here is


400
00:28:31,120 --> 00:28:35,360
your um identifier number like a business


401
00:28:35,360 --> 00:28:38,799
identifier number bin or something they call it i think i don't remember exactly


402
00:28:38,799 --> 00:28:42,240
but i believe depending on whether you're a business or an individual then


403
00:28:42,240 --> 00:28:46,799
the number is a little bit different so if you're a business i think it's bin


404
00:28:46,799 --> 00:28:49,679
and if you're an individual is in i don't know


405
00:28:49,679 --> 00:28:52,320
so um i don't know what that dialogue was


406
00:28:52,320 --> 00:28:56,159
some bluetooth devices wants to connect to my computer i don't know what it is


407
00:28:56,159 --> 00:29:01,760
so that's that part it can be long and it's


408
00:29:01,760 --> 00:29:05,039
not free okay


409
00:29:05,919 --> 00:29:10,960
that was a lot of information um that's for ios


410
00:29:10,960 --> 00:29:16,320
now uh what we can do now is to talk a little bit about android as well


411
00:29:16,320 --> 00:29:19,679
and the good thing about the android process


412
00:29:19,679 --> 00:29:24,640
like setting up your account for as a google developer is that it's a lot


413
00:29:24,640 --> 00:29:30,240
more straightforward as you would expect from google and given that they're um


414
00:29:30,240 --> 00:29:33,679
even like sending updates to an android app to the


415
00:29:33,679 --> 00:29:37,440
google developer console is a lot more straightforward than it is for ios i


416
00:29:37,440 --> 00:29:42,320
don't want to scare you but it is a fact and you will know that later when we


417
00:29:42,320 --> 00:29:46,559
actually get to the end of this course where we release the apps


418
00:29:46,559 --> 00:29:51,440
for ios and android that it is a little bit more straightforward for google


419
00:29:51,440 --> 00:29:54,600
play store


420
00:29:55,279 --> 00:29:58,880
but you still need to sign up for a developer account


421
00:29:58,880 --> 00:30:01,440
so um


422
00:30:01,440 --> 00:30:05,840
i'm gonna take in my notes uh that i've talked about that


423
00:30:05,840 --> 00:30:08,960
so what we also need to know is that there


424
00:30:08,960 --> 00:30:13,520
is a url that we can go to i'm going to copy that and paste it over


425
00:30:13,520 --> 00:30:16,480
here so you see which one i'm talking about


426
00:30:16,480 --> 00:30:21,840
here then you can see that you can set up a


427
00:30:21,840 --> 00:30:25,440
developer account and once you've logged in so i'm assuming that you're logged in


428
00:30:25,440 --> 00:30:31,360
then you go to play.google.com slash console slash user or you zero sign up


429
00:30:31,360 --> 00:30:35,279
is where url it may change so let's just


430
00:30:35,279 --> 00:30:40,080
what you can do is just google google play console developer account or


431
00:30:40,080 --> 00:30:43,919
google developer account then you will end up in a url that looks kind of like


432
00:30:43,919 --> 00:30:46,880
this so so don't count with this url that i


433
00:30:46,880 --> 00:30:51,760
mentioned here because it may change that's what i'm saying and


434
00:30:51,760 --> 00:30:55,360
you can as it is for ios development you can either set it up personally as an


435
00:30:55,360 --> 00:30:58,320
individual or you can set up as an organization now i


436
00:30:58,320 --> 00:31:01,760
happen to have set it up for myself as an organization because i do have a


437
00:31:01,760 --> 00:31:06,080
company here in sweden so it is a lot easier for me to tie all my business


438
00:31:06,080 --> 00:31:13,120
relations with apple and google into one entity which is my developer account for


439
00:31:13,519 --> 00:31:17,360
sorry which is my company so


440
00:31:17,360 --> 00:31:21,279
it wouldn't make so much sense for me to explain this either to go through all


441
00:31:21,279 --> 00:31:24,960
the details but if you want to set it up for yourself as an individual just press


442
00:31:24,960 --> 00:31:27,919
on get started or if you want to set it as an organization just press get


443
00:31:27,919 --> 00:31:32,000
started there as you can see you can provide information about your


444
00:31:32,000 --> 00:31:35,360
organization and you can see here as well as soon as you say i'm an


445
00:31:35,360 --> 00:31:37,840
organization then they say okay what's the website


446
00:31:37,840 --> 00:31:40,799
so uh you can see if i don't have a website


447
00:31:40,799 --> 00:31:44,240
we recommend adding a website that represents your organization well


448
00:31:44,240 --> 00:31:47,840
kind of makes sense i mean if you're a company where's your website every


449
00:31:47,840 --> 00:31:51,760
company should have a website unless you're like a pizza restaurant or


450
00:31:51,760 --> 00:31:55,360
something even a pizza restaurant probably needs a website but we have a


451
00:31:55,360 --> 00:31:58,559
pizza restaurant here in our town that doesn't have website so


452
00:31:58,559 --> 00:32:02,320
they're on facebook um


453
00:32:02,559 --> 00:32:05,919
and you don't you probably don't want to say that your company's website is on


454
00:32:05,919 --> 00:32:09,279
facebook so um


455
00:32:09,279 --> 00:32:12,399
so yeah where are we here


456
00:32:12,399 --> 00:32:15,679
and if you say you're an individual then you come here


457
00:32:15,679 --> 00:32:20,720
and they ask for some other stuff but still interesting because


458
00:32:20,720 --> 00:32:24,559
it says enter the url of your website or social media profile


459
00:32:24,559 --> 00:32:29,039
uh so here you kind of have to need you kind of need to enter that as well


460
00:32:29,039 --> 00:32:33,200
so maybe you can get away with a facebook url i laughed about it but


461
00:32:33,200 --> 00:32:35,440
maybe you can get away with it i don't know


462
00:32:35,440 --> 00:32:38,880
but i don't recommend that to be honest with you because as you will see later


463
00:32:38,880 --> 00:32:43,919
in the course when we actually submit our apps to app store and play store


464
00:32:43,919 --> 00:32:48,320
there are a few key data points that you have to provide to


465
00:32:48,320 --> 00:32:54,880
both stores one is a privacy policy url and the other one


466
00:32:54,880 --> 00:32:58,320
is a support url um


467
00:32:58,320 --> 00:33:02,960
and there are also two other


468
00:33:02,960 --> 00:33:06,640
emails you have to provide so yeah four


469
00:33:06,640 --> 00:33:11,120
the emails the first one is the support email and the other one is a


470
00:33:11,120 --> 00:33:15,919
contact email and if you're if you're setting up a business account


471
00:33:15,919 --> 00:33:19,440
then i really suggest that you actually set up a website because if you set up a


472
00:33:19,440 --> 00:33:24,240
website and you have a domain you have an email provider then your email will


473
00:33:24,240 --> 00:33:28,600
kind of be like uh foobar at


474
00:33:28,600 --> 00:33:34,240
mybusiness.com it's a lot more professional to set up an email that is


475
00:33:34,240 --> 00:33:40,000
bound to that it's connected to your email to your domain than it is to say


476
00:33:40,000 --> 00:33:43,279
mr johnson gmail.com um


477
00:33:43,279 --> 00:33:47,440
i wouldn't trust a business that has a gmail.com


478
00:33:47,440 --> 00:33:50,960
account i kind of want to know that yeah here's


479
00:33:50,960 --> 00:33:55,600
a serious business that they have their own website and blah blah blah


480
00:33:56,159 --> 00:34:00,720
but on the contrary setting up a website setting up some


481
00:34:00,720 --> 00:34:04,000
emails doesn't necessarily mean you're serious either so


482
00:34:04,000 --> 00:34:08,879
but it makes it more dedicated if you know what i mean so


483
00:34:08,879 --> 00:34:12,079
um so yeah


484
00:34:12,079 --> 00:34:15,839
that's um the process for setting up an account


485
00:34:15,839 --> 00:34:21,599
also for as an android developer i think that's that's about it


486
00:34:21,599 --> 00:34:28,639
uh that's all i wanted to mention in this uh first chapter of our course uh


487
00:34:28,639 --> 00:34:36,079
i highly recommend that you get your developer accounts for apple and for


488
00:34:37,520 --> 00:34:42,159
google what you'll also need to know is that


489
00:34:42,159 --> 00:34:47,760
i mean i've talked a lot about now apple account and a google developer account


490
00:34:47,760 --> 00:34:49,839
but


491
00:34:49,919 --> 00:34:55,839
if you're if you're developing uh your application


492
00:34:56,079 --> 00:34:59,440
on a windows machine for instance if you're if you're trying to learn how to


493
00:34:59,440 --> 00:35:02,240
develop flutter applications and you don't care about releasing your


494
00:35:02,240 --> 00:35:06,240
application at all you don't have to do any of this


495
00:35:06,240 --> 00:35:09,599
just follow along with the course as usual no problem


496
00:35:09,599 --> 00:35:12,880
but if you're if you want to actually release your


497
00:35:12,880 --> 00:35:17,440
application for ios then you most definitely need to also have a mac


498
00:35:17,440 --> 00:35:21,520
because you can't build your application otherwise there are some tricks you can


499
00:35:21,520 --> 00:35:23,839
do you can like build your


500
00:35:23,839 --> 00:35:28,320
photo application then later on like a friend's macintosh if they have one or


501
00:35:28,320 --> 00:35:32,560
you can send to a service that's in the cloud and they build the app for you and


502
00:35:32,560 --> 00:35:36,560
then they will send it back to you and then you can submit it so


503
00:35:36,560 --> 00:35:39,680
or maybe they even have to submit it it's a bit hairy to be honest with you


504
00:35:39,680 --> 00:35:41,599
but um


505
00:35:41,599 --> 00:35:46,480
it's it's a complicated topic it is a little bit difficult to explain


506
00:35:46,480 --> 00:35:49,200
um for instance if you're on a windows


507
00:35:49,200 --> 00:35:53,680
machine you can't even have xcode xcode is the tool


508
00:35:53,680 --> 00:35:59,920
and the the entire like a chain of tool sets that gets installed on a


509
00:35:59,920 --> 00:36:05,680
macintosh in order to build an application for ios platform


510
00:36:05,680 --> 00:36:08,800
now why am i talking about this and the reasoning behind that is that if


511
00:36:08,800 --> 00:36:13,680
you're developing a flutter application then um


512
00:36:13,680 --> 00:36:17,760
flutter can be deployed on a windows machine um


513
00:36:17,760 --> 00:36:21,280
macintosh or collectively called as desktop


514
00:36:21,280 --> 00:36:26,720
web android ios five platforms at the moment


515
00:36:26,720 --> 00:36:30,079
and if you're trying to


516
00:36:30,079 --> 00:36:34,800
release your application and build it for ios for instance and test on an


517
00:36:34,800 --> 00:36:41,040
iphone or an ipad you can't do that on a windows machine unfortunately that's not


518
00:36:41,040 --> 00:36:45,520
there's nothing wrong with a windows machine it's just apple's fault for


519
00:36:45,520 --> 00:36:51,040
locking down their build systems and all their tools to macintosh so they haven't


520
00:36:51,040 --> 00:36:52,720
made the [Music]


521
00:36:52,720 --> 00:36:55,920
conscious decision or


522
00:36:55,920 --> 00:37:02,240
yeah they haven't made the decision to bring their tool system and tooling to


523
00:37:02,240 --> 00:37:07,839
windows unfortunately or linux swift which is the language to write


524
00:37:07,839 --> 00:37:13,920
native applications for ios can be run i believe on linux um on


525
00:37:13,920 --> 00:37:19,440
windows might be but its main platform is still


526
00:37:19,440 --> 00:37:22,440
mac


527
00:37:22,960 --> 00:37:28,160
i know that this is a lot of information also to learn but if there is anything i


528
00:37:28,160 --> 00:37:31,760
want to close this chapter the first chapter of


529
00:37:31,760 --> 00:37:36,480
this course with is you can learn flutter and follow along


530
00:37:36,480 --> 00:37:40,640
with the steps i'm going to provide in this course without having to register


531
00:37:40,640 --> 00:37:44,640
any accounts yet so that's point one


532
00:37:44,640 --> 00:37:50,160
point two is that you will need a macintosh if you want to


533
00:37:50,160 --> 00:37:54,800
release if you want to comfortably build and release your flutter app


534
00:37:54,800 --> 00:37:57,520
for ios


535
00:37:58,000 --> 00:38:01,440
if you want to release your application on


536
00:38:01,440 --> 00:38:05,440
google play store which is point three if you want to do that you will need to


537
00:38:05,440 --> 00:38:09,920
register a developer account on google play console


538
00:38:09,920 --> 00:38:13,760
as i've shown you here and


539
00:38:13,760 --> 00:38:17,280
i believe that's all that's all you need to know so


540
00:38:17,280 --> 00:38:20,079
some of you may already have all these accounts and don't have to worry about


541
00:38:20,079 --> 00:38:22,800
it but some may not


542
00:38:22,800 --> 00:38:26,560
know all this like if you're coming from a design and design background if you


543
00:38:26,560 --> 00:38:30,800
all you do is work with figma et cetera and this is somebody for important


544
00:38:30,800 --> 00:38:33,440
information that you'll need to know about because i don't want you to get


545
00:38:33,440 --> 00:38:37,680
like frustrated during the process so i just want you to have some


546
00:38:37,680 --> 00:38:43,119
information so that you can get started at least without without too much hassle


547
00:38:43,119 --> 00:38:46,400
all right that's it i think for this


548
00:38:46,400 --> 00:38:51,119
chapter i can take in my notes that i've explained everything i want to explain


549
00:38:51,119 --> 00:38:54,640
did take about 35 minutes uh


550
00:38:54,640 --> 00:38:58,480
it's not unexpected to be honest it's a lot of information


551
00:38:58,480 --> 00:39:01,839
and i kind of want to take my time with it it's important that you


552
00:39:01,839 --> 00:39:05,119
and for me as well to understand all this


553
00:39:05,119 --> 00:39:09,920
so great i think um that's it for this video


554
00:39:09,920 --> 00:39:14,800
so i'll see you in the next chapter hi everyone and welcome to the second


555
00:39:14,800 --> 00:39:19,839
chapter of our course now if you haven't watched the introduction to this course


556
00:39:19,839 --> 00:39:23,440
i really suggest that you do that before continuing with the course because there


557
00:39:23,440 --> 00:39:25,680
are so many points that i've explained in that


558
00:39:25,680 --> 00:39:29,040
introduction that i believe are so important to understand before


559
00:39:29,040 --> 00:39:34,079
continuing with the course so in this chapter what we're going to do


560
00:39:34,079 --> 00:39:38,160
is we're going to take care of some setup steps that are required for


561
00:39:38,160 --> 00:39:40,960
pretty much the rest of


562
00:39:40,960 --> 00:39:44,960
this course and all the other chapters that follow along after this one chapter


563
00:39:44,960 --> 00:39:49,119
3 4 and etc so um we're going to talk about flutter


564
00:39:49,119 --> 00:39:52,640
dart dark pad and how to install flutter whether


565
00:39:52,640 --> 00:39:56,560
you're on windows mac or linux


566
00:39:56,560 --> 00:40:00,000
and we're also going to talk about


567
00:40:00,240 --> 00:40:06,480
xcode android studio and we're going to talk about a few very useful


568
00:40:06,480 --> 00:40:11,359
extensions to our code editor so if you're coming from a background where


569
00:40:11,359 --> 00:40:14,720
you haven't worked with any kind of programming language before


570
00:40:14,720 --> 00:40:17,359
um i'm going to take this chapter quite


571
00:40:17,359 --> 00:40:21,920
easy so if you're an advanced programmer already you may want to skip this and


572
00:40:21,920 --> 00:40:27,359
you already have like flutter install everything you can skip this chapter


573
00:40:27,359 --> 00:40:32,160
without a problem so let's start by talking about


574
00:40:32,160 --> 00:40:36,400
what flutter is well traditionally developers and


575
00:40:36,400 --> 00:40:39,760
programmers or software engineers however you want to call them


576
00:40:39,760 --> 00:40:43,200
they've been creating and writing code with their


577
00:40:43,200 --> 00:40:45,760
fingers in


578
00:40:45,760 --> 00:40:49,280
different languages and then they're targeting different platforms it's very


579
00:40:49,280 --> 00:40:53,200
important to understand what a language programming language is um


580
00:40:53,200 --> 00:40:58,000
versus a platform think of a platform


581
00:40:58,000 --> 00:41:02,880
as the the end station where a software


582
00:41:02,880 --> 00:41:08,640
ends up being run run on so let's say windows is a platform mac


583
00:41:08,640 --> 00:41:15,119
is a platform linux is a platform and ios that runs on all iphones is a


584
00:41:15,119 --> 00:41:19,280
platform android is a platform etc now


585
00:41:19,280 --> 00:41:22,480
you would have programming languages


586
00:41:22,480 --> 00:41:26,000
that you as a software developer would use in


587
00:41:26,000 --> 00:41:30,960
order to target those platforms to write software for those platforms so you use


588
00:41:30,960 --> 00:41:36,000
a programming language in order to write a piece of code and be able to run that


589
00:41:36,000 --> 00:41:41,680
code on that target platform okay so a programming language example is


590
00:41:41,680 --> 00:41:46,839
javascript python swift rust


591
00:41:46,839 --> 00:41:52,720
um what else is popular right now java kotlin all these


592
00:41:52,720 --> 00:41:56,079
these are programming languages so


593
00:41:56,079 --> 00:42:01,920
you as a software developer who's trying to learn flutter would use then dart as


594
00:42:01,920 --> 00:42:05,599
your program programming language as i will soon explain


595
00:42:05,599 --> 00:42:07,839
so


596
00:42:08,800 --> 00:42:11,920
that has been the tradition that a person sits in front of a computer and


597
00:42:11,920 --> 00:42:15,440
says okay i want to write a program for windows then they go and write some code


598
00:42:15,440 --> 00:42:19,920
maybe with csharp.net or


599
00:42:19,920 --> 00:42:23,440
maybe they will just use some other technology i don't know what's out there


600
00:42:23,440 --> 00:42:28,240
right now for windows maybe they would use vb.map


601
00:42:28,240 --> 00:42:30,720
and then they would be done and they will


602
00:42:30,720 --> 00:42:34,880
release the software for windows and be like okay i'm done now


603
00:42:34,880 --> 00:42:39,920
then someone comes in the project and says ah we need the same software for uh


604
00:42:39,920 --> 00:42:42,640
macintosh or we need the same software for


605
00:42:42,640 --> 00:42:45,839
some other uh


606
00:42:47,280 --> 00:42:52,720
for instance platform then you would have to go and write the same


607
00:42:52,720 --> 00:42:56,960
software uh exact same code pretty much for the


608
00:42:56,960 --> 00:43:00,960
other platform so this process would be very repetitive


609
00:43:00,960 --> 00:43:04,640
in that you would have to write the same software over and over again so


610
00:43:04,640 --> 00:43:09,359
things such as flutter came in in order to remedy that so saying that a software


611
00:43:09,359 --> 00:43:12,640
engineer sits at home or sits in the office works with a group of other


612
00:43:12,640 --> 00:43:17,359
people and a designer maybe or a few designers ux there is a product owner


613
00:43:17,359 --> 00:43:22,400
et cetera and then they would write the same code then


614
00:43:22,400 --> 00:43:26,480
which will then be run on different platforms so as a software developer you


615
00:43:26,480 --> 00:43:30,079
wouldn't have to maintain different uh


616
00:43:30,079 --> 00:43:33,920
very similar pieces of code that only can be


617
00:43:33,920 --> 00:43:40,960
run on one specific platform so flutter in its ground basically is a ui


618
00:43:40,960 --> 00:43:44,319
framework for running beautiful


619
00:43:44,319 --> 00:43:49,280
and writing beautiful applications that run on multiple platforms at the same


620
00:43:49,280 --> 00:43:52,720
time developed by google has been in


621
00:43:52,720 --> 00:43:59,680
production for a very long time it's uh tried and tested it's open source


622
00:43:59,680 --> 00:44:02,960
and if you don't if you don't come from like software


623
00:44:02,960 --> 00:44:07,280
engineering background open source basically means that


624
00:44:07,280 --> 00:44:11,839
the code that is written


625
00:44:11,839 --> 00:44:15,200
for flutter basically the code that makes up plotter


626
00:44:15,200 --> 00:44:18,000
is open to the public for


627
00:44:18,000 --> 00:44:22,160
uh finding bugs and also for contributing to it or maybe just


628
00:44:22,160 --> 00:44:26,000
learning from it so if you're for instance coming from a background of as


629
00:44:26,000 --> 00:44:31,119
a designer it's kind of like you have your figma file open to the entire world


630
00:44:31,119 --> 00:44:36,560
or your adobe xd source open to the entire world for for them to watch what


631
00:44:36,560 --> 00:44:41,280
you're doing as you're designing and also for them to be able to fix stuff in


632
00:44:41,280 --> 00:44:45,920
your design if they see it not working as it should


633
00:44:45,920 --> 00:44:48,720
so that's open source um


634
00:44:48,720 --> 00:44:54,240
so flutter is open source ui framework um developed by google


635
00:44:54,240 --> 00:44:57,680
what a framework means i mean if you're not coming from a software engineering


636
00:44:57,680 --> 00:45:00,960
background a framework is kind of like a set of tools


637
00:45:00,960 --> 00:45:04,480
uh provided to you as a software developer so you can use


638
00:45:04,480 --> 00:45:09,839
these tools take a bit of this one take a bit of that one in order to produce an


639
00:45:09,839 --> 00:45:14,400
output so flutter it in itself is a software


640
00:45:14,400 --> 00:45:19,839
but it's more precisely referred to as a


641
00:45:19,839 --> 00:45:24,960
as a framework because of it's a collection of tools so if you hear a


642
00:45:24,960 --> 00:45:27,599
framework just know oh there's a collection of things i can use to


643
00:45:27,599 --> 00:45:34,160
produce some output now that's what flutter is um but


644
00:45:34,160 --> 00:45:38,160
what powers flutter is a programming language language


645
00:45:38,160 --> 00:45:42,880
called dart and dart has been in the making for more


646
00:45:42,880 --> 00:45:49,280
than eight years is a language that at the moment being maintained by google


647
00:45:49,280 --> 00:45:53,680
and also is open source so anybody can contribute to it anybody can learn from


648
00:45:53,680 --> 00:45:57,920
it and and find exploits or maybe problems with it and it will get patched


649
00:45:57,920 --> 00:46:02,560
by the public or by google themselves so dart is


650
00:46:02,560 --> 00:46:08,319
the language the programming language that powers flutter you could say


651
00:46:08,319 --> 00:46:10,560
so


652
00:46:11,760 --> 00:46:17,599
now you know what flutter is and now you know what dart is


653
00:46:17,760 --> 00:46:21,920
and i think in the next step now what we can do is talk about


654
00:46:21,920 --> 00:46:27,359
a great piece of web software called dart pad


655
00:46:27,359 --> 00:46:31,920
now dark pad as i said is a web


656
00:46:31,920 --> 00:46:35,760
software or you could just call it a website


657
00:46:35,760 --> 00:46:40,880
that allows you to run or write your dart code


658
00:46:40,880 --> 00:46:45,839
maybe pure dart code or code for flutter


659
00:46:45,839 --> 00:46:50,480
and run it directly in your browser without you even having to install


660
00:46:50,480 --> 00:46:55,680
anything so just open your browser and as you will see soon we go to dark pad


661
00:46:55,680 --> 00:46:58,560
and you will see how it looks like so let me just


662
00:46:58,560 --> 00:47:03,200
show you a little demonstration here so here i have dart pad open


663
00:47:03,200 --> 00:47:07,440
and i can actually increase the size so you can see a little bit better


664
00:47:07,440 --> 00:47:10,960
i may have to rearrange some components here on the screen so you can see the


665
00:47:10,960 --> 00:47:16,359
screen better so i went to dartpad.dartlang.org


666
00:47:16,400 --> 00:47:21,839
and you can see here that there is a program written on the left hand side


667
00:47:21,920 --> 00:47:25,680
and i can actually yeah let this


668
00:47:25,680 --> 00:47:29,359
what is dark dark pad allows you blah blah text to be there so you can have


669
00:47:29,359 --> 00:47:33,760
context of what i'm talking about and you can see that the program is


670
00:47:33,760 --> 00:47:38,400
sitting there and you are allowed then to either change the program the way it


671
00:47:38,400 --> 00:47:41,040
is or click anywhere here to see


672
00:47:41,040 --> 00:47:45,520
documentation down here or press the run button so i'm just


673
00:47:45,520 --> 00:47:48,480
going to press the run button and you can see that


674
00:47:48,480 --> 00:47:53,760
the text hello got printed to the screen five times plus the


675
00:47:53,760 --> 00:47:57,200
number of times it was actually printed it's also printed on the screen so hello


676
00:47:57,200 --> 00:48:02,720
one two three four five so what you see on this side is the


677
00:48:02,720 --> 00:48:06,000
source code if you remember from open source so this


678
00:48:06,000 --> 00:48:10,400
is a source code written in the programming language called dart


679
00:48:10,400 --> 00:48:14,800
and this is the output of that program so


680
00:48:14,800 --> 00:48:19,599
dark pad allows you to write text here and just execute it and see the


681
00:48:19,599 --> 00:48:24,240
results immediately so


682
00:48:24,240 --> 00:48:28,319
that's what dart is i mean sorry dark pad is and we're going to talk


683
00:48:28,319 --> 00:48:32,079
about dart and dark pad more in the in the course but


684
00:48:32,079 --> 00:48:38,800
right now what we should do is to start by installing flutter


685
00:48:38,800 --> 00:48:43,520
because uh i mean you could say okay but flutter


686
00:48:43,520 --> 00:48:46,640
is just the uh


687
00:48:46,640 --> 00:48:53,200
ui framework how about dart well the way flutter is packaged by default is that


688
00:48:53,200 --> 00:48:57,280
it includes the dart programming language and its runtime so if the tools


689
00:48:57,280 --> 00:49:03,839
required to run any dart code it packages all of that in just one big


690
00:49:03,839 --> 00:49:07,440
chunk for you so you don't have to go and install different components like


691
00:49:07,440 --> 00:49:11,760
install dart separately in flutter so let's just then improvise and i'm going


692
00:49:11,760 --> 00:49:14,800
to say in here


693
00:49:14,800 --> 00:49:20,240
let's say install flutter okay then you go to this beautiful website


694
00:49:20,240 --> 00:49:24,800
called flutter.dev i'm going to increase the size here so


695
00:49:24,800 --> 00:49:27,200
you see


696
00:49:27,599 --> 00:49:31,119
so um we go there now


697
00:49:31,119 --> 00:49:34,319
and you will see this beautiful website here


698
00:49:34,319 --> 00:49:38,800
and what we're gonna do is just to press on get started and remember


699
00:49:38,800 --> 00:49:44,000
we press on get started but this website looks like this right now maybe


700
00:49:44,000 --> 00:49:48,000
in a few months or maybe in a few years it will change so you'll just have to


701
00:49:48,000 --> 00:49:52,079
find out a way to get to the installation part right now it's


702
00:49:52,079 --> 00:49:56,559
called get started and i can see it's located as docs.flower dev get started


703
00:49:56,559 --> 00:50:00,160
install then pick your platform here i'm on a


704
00:50:00,160 --> 00:50:03,760
macintosh but if you're on windows just click on windows and then you get


705
00:50:03,760 --> 00:50:07,520
instructions on how to install fodder


706
00:50:07,920 --> 00:50:12,559
and then or if you're on linux you can also do the same just get instructions


707
00:50:12,559 --> 00:50:15,119
for your platform


708
00:50:15,119 --> 00:50:20,000
now i'm going to mac and i'm going to click on mac and then


709
00:50:20,000 --> 00:50:23,040
i'm going to look at this information here i'm going


710
00:50:23,040 --> 00:50:27,760
to increase the size so it's a little bit easier to read and it says okay


711
00:50:27,760 --> 00:50:30,960
download the following installation bundle to get the latest stable release


712
00:50:30,960 --> 00:50:35,920
of the flutter sdk sdk means software development


713
00:50:35,920 --> 00:50:42,160
development kit i believe so it's just like series of tools for you to use it's


714
00:50:42,160 --> 00:50:47,119
just fancy words so then we're gonna do that let's just get


715
00:50:47,119 --> 00:50:51,839
flutter mac i'm gonna download it


716
00:50:52,079 --> 00:50:55,920
and it may take some time because it is actually quite a chunky


717
00:50:55,920 --> 00:51:01,200
uh bit of software as you can see it's almost 1.2 gigabytes


718
00:51:01,200 --> 00:51:04,319
so depending on your internet connection it could take


719
00:51:04,319 --> 00:51:08,880
yeah anything between a few seconds to a few minutes


720
00:51:09,119 --> 00:51:13,680
after you've done that then you will have to unzip that


721
00:51:13,680 --> 00:51:17,680
in some folder so


722
00:51:17,680 --> 00:51:21,920
what that kind of means is just i can see that my mac is already decompressing


723
00:51:21,920 --> 00:51:25,680
this zip file for me so i don't have to do that myself and it's already


724
00:51:25,680 --> 00:51:29,599
decompressed in this place so i'm just gonna click on it


725
00:51:29,599 --> 00:51:33,760
and i'm gonna show you its content so it kind of looks like this


726
00:51:33,760 --> 00:51:38,720
okay now that you have this what you need to


727
00:51:38,720 --> 00:51:45,040
do is to ensure that all these files are placed inside


728
00:51:45,200 --> 00:51:49,440
a location on your computer which is


729
00:51:49,440 --> 00:51:54,079
protected so that you don't accidentally delete it and it's also a good like um


730
00:51:54,079 --> 00:51:58,240
you know exactly where it is so by that i mean don't put it on a desk on


731
00:51:58,240 --> 00:52:01,119
your desktop and don't put it in like documents or anything it's not a


732
00:52:01,119 --> 00:52:07,119
document software what i like to do is usually to have a


733
00:52:07,119 --> 00:52:12,000
folder on a macintosh called dev so


734
00:52:12,000 --> 00:52:17,280
i will open terminal here as you can see terminal if you're not familiar with it


735
00:52:17,280 --> 00:52:21,520
is an application that you can


736
00:52:21,520 --> 00:52:24,079
control pretty much the entire system with it


737
00:52:24,079 --> 00:52:29,040
if you're on a mac or if you're on linux or any unix based system and if you're


738
00:52:29,040 --> 00:52:32,880
on windows you can also do a lot with your terminal


739
00:52:32,880 --> 00:52:37,359
so in windows that terminal is called cmd i believe


740
00:52:37,359 --> 00:52:41,599
as in command i believe on


741
00:52:41,599 --> 00:52:47,359
linux and mac it's called terminal i'm using a a terminal here called i


742
00:52:47,359 --> 00:52:52,079
term uh but if you're on vanilla mac os then


743
00:52:52,079 --> 00:52:56,160
you would go and open terminal like this which is just looking like


744
00:52:56,160 --> 00:52:58,400
that


745
00:52:59,280 --> 00:53:04,559
so i'm going to open i-term right now which is my terminal you can open the


746
00:53:04,559 --> 00:53:11,119
terminal that you're comfortable with i'm going to increase the size of this


747
00:53:11,200 --> 00:53:15,839
i like to place my installations for these pieces of


748
00:53:15,839 --> 00:53:19,440
software in my home directory which is denoted by this little funny character


749
00:53:19,440 --> 00:53:23,520
slash dev and


750
00:53:23,520 --> 00:53:29,040
if i look at the contents of this i can see i have a folder called tooling if i


751
00:53:29,040 --> 00:53:32,240
say tooling and look at the contents of it i can see


752
00:53:32,240 --> 00:53:36,160
flutter is right there so


753
00:53:36,160 --> 00:53:40,160
for me flutter installation you know this folder that got in that got


754
00:53:40,160 --> 00:53:45,359
downloaded for me in my downloads folder i would go and copy its contents


755
00:53:45,359 --> 00:53:51,040
contents and place it in this folder so if i say cdflutter


756
00:53:51,040 --> 00:53:57,839
and then you can see that i'm in my user dev folder tooling flutter so this is


757
00:53:57,839 --> 00:54:02,720
where i choose to put flutter now you can choose to put this downloaded folder


758
00:54:02,720 --> 00:54:06,160
anywhere else as the documentation tells you


759
00:54:06,160 --> 00:54:10,640
in the desired location for example so


760
00:54:10,640 --> 00:54:14,880
go ahead and do that pick a location and for me this location works for you it


761
00:54:14,880 --> 00:54:19,440
may be if you're on windows it would probably be like c


762
00:54:19,440 --> 00:54:24,480
backslash i don't know you could say dev backslash tooling


763
00:54:24,480 --> 00:54:30,079
backslash flutter this could be a good location for your tooling hot photo


764
00:54:30,079 --> 00:54:33,040
so i'm imagining now that you've done that


765
00:54:33,040 --> 00:54:37,119
you've gotten a folder and for me it's this one where you've extracted your


766
00:54:37,119 --> 00:54:41,839
flutter installation in now you can see that it says


767
00:54:41,839 --> 00:54:45,280
in this third step you will need to expose


768
00:54:45,280 --> 00:54:52,000
flutter's binary files to your system and what that basically means is that


769
00:54:52,000 --> 00:54:57,200
flutter as an sdk or a toolkit or a framework


770
00:54:57,200 --> 00:55:02,400
it has a lot of bits and pieces of software in it and


771
00:55:02,400 --> 00:55:06,400
some of these bits are more important in that sense that they're actually


772
00:55:06,400 --> 00:55:10,400
executable in that imagine that um


773
00:55:10,400 --> 00:55:14,720
on your computer whether in macintosh windows or linux


774
00:55:14,720 --> 00:55:17,760
you can have different documents some documents can be text sound documents


775
00:55:17,760 --> 00:55:21,839
can be images some documents can be i don't know


776
00:55:21,839 --> 00:55:26,240
what else they can be and or a word document for instance okay because i


777
00:55:26,240 --> 00:55:31,599
came up with another example or they could be programs a program is


778
00:55:31,599 --> 00:55:35,440
something that you can just double click on and a piece of software gets executed


779
00:55:35,440 --> 00:55:39,760
and then it will open for instance an example of the program is a microsoft


780
00:55:39,760 --> 00:55:43,359
word another example of program is a google


781
00:55:43,359 --> 00:55:48,720
chrome web browser another example of program is safari


782
00:55:48,720 --> 00:55:53,760
so these are programs and flutter comes also with its own built-in programs that


783
00:55:53,760 --> 00:55:57,119
do very specific and important things on your computer


784
00:55:57,119 --> 00:56:01,119
related to flutter of course um


785
00:56:01,119 --> 00:56:06,480
sorry i have to see my uh recording studio nothing you had to do


786
00:56:06,480 --> 00:56:10,079
uh it was just for me so


787
00:56:10,319 --> 00:56:14,240
these important programs that are inside the flutter installation which you just


788
00:56:14,240 --> 00:56:17,839
downloaded need to be exposed to your entire system


789
00:56:17,839 --> 00:56:22,000
so that you can work with flutter with with ease


790
00:56:22,000 --> 00:56:24,880
and that means if you're for instance from a design


791
00:56:24,880 --> 00:56:28,400
background it will allow you to anywhere in your


792
00:56:28,400 --> 00:56:32,400
terminal just write figma and figma app would open


793
00:56:32,400 --> 00:56:36,880
and that's the same thing with flutter in this folder you see we're in the


794
00:56:36,880 --> 00:56:40,880
flutter folder where you downloaded your installation and install it in this


795
00:56:40,880 --> 00:56:45,040
folder there's a folder called bin which means binary


796
00:56:45,040 --> 00:56:49,680
in here there are so many things that are important to the entire system to


797
00:56:49,680 --> 00:56:54,319
run you see flutter and dart these two i said so many but yeah there's pretty


798
00:56:54,319 --> 00:56:59,920
much two so these two binary uh executables need


799
00:56:59,920 --> 00:57:04,400
to be exposed to your system and the way to do that on a macintosh is


800
00:57:04,400 --> 00:57:08,799
to change your paths as is documented here


801
00:57:08,799 --> 00:57:14,880
so the way i like to do that is i go and change my


802
00:57:14,880 --> 00:57:23,280
so if i do a vim and look at my zsh rc i can see my paths and you can see it


803
00:57:23,280 --> 00:57:27,040
here so you see i've actually put that export


804
00:57:27,040 --> 00:57:32,480
command as it is stated here i put it here you see


805
00:57:33,280 --> 00:57:37,599
this may be a bit intimidating to be honest with you uh


806
00:57:37,599 --> 00:57:42,160
what all it's doing is that you see this file that i've


807
00:57:42,160 --> 00:57:45,839
placed here i don't know if i can actually zoom into it and if you can see


808
00:57:45,839 --> 00:57:48,720
i don't know how that looked in the actual recording


809
00:57:48,720 --> 00:57:50,960
but this is


810
00:57:50,960 --> 00:57:57,440
a sort of like a set of instructions to my terminal on this macintosh to tell it


811
00:57:57,440 --> 00:58:00,559
where different bits and pieces of


812
00:58:00,559 --> 00:58:03,839
binary executables are placed such as flutter


813
00:58:03,839 --> 00:58:08,480
dart python etc etc so when i install a piece of software


814
00:58:08,480 --> 00:58:12,079
uh in this way you see we just downloaded a package and just put it


815
00:58:12,079 --> 00:58:17,359
somewhere on our computer uh macintosh won't know about the stuff that's in it


816
00:58:17,359 --> 00:58:22,480
of course it won't so you have to tell it where those things are


817
00:58:22,480 --> 00:58:26,640
because otherwise if you don't do this step if you don't do the step three then


818
00:58:26,640 --> 00:58:30,480
every time you want to run flutter then you have to specify exactly where that


819
00:58:30,480 --> 00:58:33,680
flutter command is so for me it would be in my home


820
00:58:33,680 --> 00:58:37,119
folder dev tooling flutter being slash flutter


821
00:58:37,119 --> 00:58:41,920
but if you do this then you can anywhere in your terminal just write flutter and


822
00:58:41,920 --> 00:58:46,559
your macintosh or linux or windows computer will know where to find


823
00:58:46,559 --> 00:58:49,119
it so


824
00:58:49,119 --> 00:58:54,400
do that put put these instructions as specified here in your path


825
00:58:54,400 --> 00:58:59,520
and after doing that you may need to reload your path using a command


826
00:58:59,520 --> 00:59:02,799
on windows and linux called source


827
00:59:02,799 --> 00:59:07,599
and the shrc for me depending on which shell you have you


828
00:59:07,599 --> 00:59:12,400
may have to put that instruction in somewhere else


829
00:59:12,400 --> 00:59:17,680
on windows i believe you will have to modify your um


830
00:59:17,680 --> 00:59:22,799
environment variables i remember this from many many years ago


831
00:59:22,799 --> 00:59:26,240
let's see if you have to do that


832
00:59:26,559 --> 00:59:30,240
update your path you see if you wish to run flutter commands in


833
00:59:30,240 --> 00:59:34,319
regular windows console take these steps blah blah from the start search end and


834
00:59:34,319 --> 00:59:37,839
select edit environment variables for accounts so


835
00:59:37,839 --> 00:59:41,200
what you'll just have to do really is just to follow these steps i mean i'm


836
00:59:41,200 --> 00:59:44,799
going through basically giving you some of the basics


837
00:59:44,799 --> 00:59:48,799
of these instructions so you can get like a head start but these instructions


838
00:59:48,799 --> 00:59:53,359
can also change in the future so don't rely just on what i'm telling you please


839
00:59:53,359 --> 00:59:59,040
just go to the installation website here uh here as you see docs flutter dev get


840
00:59:59,040 --> 01:00:04,240
started install and try to follow along with the


841
01:00:04,240 --> 01:00:09,760
steps provided so after you've done all of this


842
01:00:09,760 --> 01:00:13,359
you should be able to be anywhere on your computer


843
01:00:13,359 --> 01:00:18,799
and just say flutter doctor now fluffer doctor is a very important


844
01:00:18,799 --> 01:00:22,079
command because it looks at your flutter installation


845
01:00:22,079 --> 01:00:27,040
and it kind of makes sure that it's in good health as denoted by the word


846
01:00:27,040 --> 01:00:31,920
doctor so because fluttering itself is a framework


847
01:00:31,920 --> 01:00:35,359
and it depends on many other bits and pieces


848
01:00:35,359 --> 01:00:39,359
which your computer may need to have in order for flutter to actually work


849
01:00:39,359 --> 01:00:42,480
optimally um


850
01:00:42,480 --> 01:00:46,240
flutter doctor will then go through a series of steps to ensure that first


851
01:00:46,240 --> 01:00:51,119
flutter is updated and that you for instance have android


852
01:00:51,119 --> 01:00:55,359
tool chain that you have xcode installed chrome blah blah


853
01:00:55,359 --> 01:00:57,839
so


854
01:00:58,480 --> 01:01:02,559
i mean this result at the moment looks quite fine on my computer but if you're


855
01:01:02,559 --> 01:01:05,680
running flutter doctor for the first time on your computer you may get a few


856
01:01:05,680 --> 01:01:09,839
problems uh some of the problems that you'll experience probably is going to


857
01:01:09,839 --> 01:01:13,680
say android sdk couldn't be found xcode couldn't be


858
01:01:13,680 --> 01:01:17,440
found because if you're running flutter on a


859
01:01:17,440 --> 01:01:22,160
windows machine or linux machine then you can't have xcode xcode is like the


860
01:01:22,160 --> 01:01:25,599
software provided by apple


861
01:01:25,599 --> 01:01:31,119
and only runs unfortunately on mac os and it's used for


862
01:01:31,119 --> 01:01:35,599
compiling or creating


863
01:01:35,599 --> 01:01:42,160
mac os ios and ipad os pieces of software so although you can run flutter


864
01:01:42,160 --> 01:01:47,680
on your linux and on your windows machine without a problem you


865
01:01:47,680 --> 01:01:53,680
won't be able to produce or test your flutter code running on an


866
01:01:53,680 --> 01:02:00,079
iphone unfortunately unless you have access to xcode


867
01:02:00,079 --> 01:02:03,680
and the easiest way to get access to that is of course to have a macintosh


868
01:02:03,680 --> 01:02:07,599
and that's unfortunately because unfortunate because yeah


869
01:02:07,599 --> 01:02:12,079
it's uh it's just not available for other platforms


870
01:02:12,079 --> 01:02:17,280
so you've run flutter doctor and it's


871
01:02:19,039 --> 01:02:23,039
it's basically gonna tell you that okay now i'm gonna assume that you're on a


872
01:02:23,039 --> 01:02:27,119
macintosh it's gonna tell you that okay uh xcode for instance uh you need to


873
01:02:27,119 --> 01:02:31,440
install xcode and the way to do that is you need to open app store on your


874
01:02:31,440 --> 01:02:37,599
computer and just type xcode here and go and install xcode on your


875
01:02:37,599 --> 01:02:40,480
computer um


876
01:02:40,480 --> 01:02:44,400
so depending on i don't know which version is the latest at the moment but


877
01:02:44,400 --> 01:02:48,480
if you're trying to develop flutter applications that and also make sure


878
01:02:48,480 --> 01:02:52,079
that they run on your ios phone or the ios simulator


879
01:02:52,079 --> 01:02:56,240
then you need to install xcode if you're on a mac sorry if you're on a linux


880
01:02:56,240 --> 01:02:59,920
computer or windows you don't have to do this step actually you can't do


881
01:02:59,920 --> 01:03:03,720
unfortunately this thing


882
01:03:04,000 --> 01:03:08,640
so once you've done that you also need to make sure


883
01:03:08,640 --> 01:03:14,000
that you've installed develop developer tools


884
01:03:14,000 --> 01:03:20,400
for xcode so let's see how we can do that developer tools xcode


885
01:03:20,400 --> 01:03:24,079
command line tools right


886
01:03:24,400 --> 01:03:26,960
let's see install


887
01:03:26,960 --> 01:03:30,400
from terminal there's a command that you can execute


888
01:03:30,400 --> 01:03:35,599
in order to do that and that command actually looks like this


889
01:03:36,079 --> 01:03:40,000
here i'll i will zoom into it so you can see


890
01:03:40,000 --> 01:03:42,319
better um


891
01:03:42,319 --> 01:03:47,440
it says sudo xcode select install so you need to issue that command in


892
01:03:47,440 --> 01:03:51,440
your terminal so if i do that and it says what's the password i'll enter my


893
01:03:51,440 --> 01:03:55,200
password and it says they're already installed so


894
01:03:55,200 --> 01:03:59,280
if you haven't done that please go ahead and execute this command in order to


895
01:03:59,280 --> 01:04:04,480
install command line tools for your xcode


896
01:04:04,799 --> 01:04:10,799
now the next piece after xcode that you will need is


897
01:04:10,799 --> 01:04:15,280
let's see if i can actually bring up so we've talked about flutter doctor


898
01:04:15,280 --> 01:04:18,880
that was flutter doctor and we also talked about installing xcode so i'm now


899
01:04:18,880 --> 01:04:24,160
bringing that up a little bit late and but now the next step is to install


900
01:04:24,160 --> 01:04:27,839
android studio so


901
01:04:27,839 --> 01:04:32,480
what android studio is is like the equivalent of xcode but for writing


902
01:04:32,480 --> 01:04:37,440
android specific applications now for in order to write flutter


903
01:04:37,440 --> 01:04:42,160
applications you don't need android studio per se but you kind of need the


904
01:04:42,160 --> 01:04:45,200
sdk manager now


905
01:04:45,200 --> 01:04:49,760
both ios and android um


906
01:04:49,760 --> 01:04:52,880
for programmers they provide you with something called an sdk just like


907
01:04:52,880 --> 01:04:57,760
flutter is an sdk or tool kit ios and android also provide you with


908
01:04:57,760 --> 01:05:00,880
sdk in order to write native applications


909
01:05:00,880 --> 01:05:06,480
and since flutter utilizes these native capabilities of each platform in order


910
01:05:06,480 --> 01:05:11,520
to for instance create an application that's compatible with ios or android


911
01:05:11,520 --> 01:05:17,039
it will utilize the native uh components or sorry or the native pieces of


912
01:05:17,039 --> 01:05:20,960
software namely called xcode


913
01:05:20,960 --> 01:05:25,119
sorry mainly called ios sdk and android sdk


914
01:05:25,119 --> 01:05:29,520
so you need to download android studio so you get access to the sdk manager so


915
01:05:29,520 --> 01:05:34,160
you can install an android sdk now xcode in itself when you download


916
01:05:34,160 --> 01:05:38,720
the latest version of xcode it comes with the latest version of the ios sdk


917
01:05:38,720 --> 01:05:42,960
but android studio doesn't do that wait a minute yeah it probably does in


918
01:05:42,960 --> 01:05:45,599
the latest versions but we can check that out


919
01:05:45,599 --> 01:05:49,599
so if you go to your browser and just say android studio


920
01:05:49,599 --> 01:05:54,720
and then you open up developerandroid.com let's just go there


921
01:05:54,720 --> 01:05:59,039
and then you can just click on download android studio and then there are


922
01:05:59,039 --> 01:06:03,680
download options and you can see there's available for windows mac and linux


923
01:06:03,680 --> 01:06:08,160
so then please go ahead and download uh


924
01:06:08,160 --> 01:06:13,119
your android studio and i can see the for macintosh is a package so you can


925
01:06:13,119 --> 01:06:16,559
install it easily you don't have to unzip anything and for windows is also


926
01:06:16,559 --> 01:06:21,920
like an executable so tar gz as well for linux so


927
01:06:21,920 --> 01:06:26,960
now let's say that you've done that and now after doing that then you should be


928
01:06:26,960 --> 01:06:31,359
able to bring up android studio


929
01:06:31,440 --> 01:06:33,839
let's see


930
01:06:34,240 --> 01:06:38,400
i'll bring it up here now


931
01:06:38,400 --> 01:06:43,039
when you bring up your android studio it will just pretty much be empty here


932
01:06:43,039 --> 01:06:46,480
on the screen and you'll get some tips and tricks how to use android studio but


933
01:06:46,480 --> 01:06:52,319
the important thing for you here is to be able to install uh


934
01:06:52,319 --> 01:06:56,960
the android sdk so if you go then to tools


935
01:06:56,960 --> 01:07:01,119
i believe there is an sdk manager right here


936
01:07:01,119 --> 01:07:06,880
so just ensure that you have an sdk installed for me i have android


937
01:07:06,880 --> 01:07:09,680
12 installed here so ensure that you have


938
01:07:09,680 --> 01:07:15,359
one of these sdks ready for you to use by flutter


939
01:07:15,359 --> 01:07:21,520
and as soon as you've done that then when you run then your um


940
01:07:21,520 --> 01:07:25,280
clutter doctor command


941
01:07:25,280 --> 01:07:30,240
and the part about android sdk is going to


942
01:07:30,240 --> 01:07:32,480
be ticked here


943
01:07:32,480 --> 01:07:37,440
uh sorry the android studio so that's that so we've talked about


944
01:07:37,440 --> 01:07:40,400
android tool chain which is the android sdk you can see


945
01:07:40,400 --> 01:07:44,000
we've talked about xcode chrome is just a web browser if you want you can have


946
01:07:44,000 --> 01:07:48,240
that if you're developing app flutter applications for the web it kind of is


947
01:07:48,240 --> 01:07:51,440
necessary um


948
01:07:51,440 --> 01:07:55,599
and then this you're probably if you're just getting started with flutter you're


949
01:07:55,599 --> 01:07:59,760
not going to have this vs code part ticked because vs code is


950
01:07:59,760 --> 01:08:05,119
a a code editor an open source code editor provided by


951
01:08:05,119 --> 01:08:09,760
microsoft and it is the code editor that i'm going


952
01:08:09,760 --> 01:08:14,480
to use for the entire course for this entire course as we go on and to be


953
01:08:14,480 --> 01:08:17,679
honest with you i've tried android studio and i've tried vs code for


954
01:08:17,679 --> 01:08:21,120
flutter development and i can highly recommend that you use vs code


955
01:08:21,120 --> 01:08:26,000
just for its sheer performance it's for its simplicity


956
01:08:26,000 --> 01:08:31,920
extensions and its ability just to really focus on a


957
01:08:31,920 --> 01:08:35,920
simple editor without bothering you with lots of bells and whistles so


958
01:08:35,920 --> 01:08:39,839
it's a preference though some people use android studio for flutter development


959
01:08:39,839 --> 01:08:43,120
and some people use vs code so i don't think


960
01:08:43,120 --> 01:08:47,440
one is better than the other it's completely a preference so


961
01:08:47,440 --> 01:08:52,880
so that's for android studio and the android sdk so now let's go ahead and


962
01:08:52,880 --> 01:08:57,359
install visual studio code which is the tool that i'm going to use for this


963
01:08:57,359 --> 01:09:00,640
course so let's bring up a new window and i'm


964
01:09:00,640 --> 01:09:05,520
going to say install visual studio code and i'm going to bring the window up


965
01:09:05,520 --> 01:09:09,359
here so you see let's go here and


966
01:09:09,359 --> 01:09:14,000
and you can download the one that you prefer for your computer i've chosen mac


967
01:09:14,000 --> 01:09:18,480
and for me specifically i have a macintosh with an apple silicon so


968
01:09:18,480 --> 01:09:21,920
i then choose this one mac with an apple silicon and then it's gonna download


969
01:09:21,920 --> 01:09:26,000
that for you automatically so it's just about 200 megabytes i think or actually


970
01:09:26,000 --> 01:09:29,359
100 megabyte only after you've done that just


971
01:09:29,359 --> 01:09:34,719
on a macintosh you would go and put that on uh


972
01:09:34,719 --> 01:09:39,679
in your applications folder so i'm actually gonna delete that which i


973
01:09:39,679 --> 01:09:42,719
downloaded just now because i already have vs code


974
01:09:42,719 --> 01:09:45,679
on my system


975
01:09:46,839 --> 01:09:52,719
so that's for visual studio code um


976
01:09:52,960 --> 01:09:57,440
so let's go ahead now and now that we've done that


977
01:09:57,440 --> 01:10:00,560
i'm gonna talk a little about


978
01:10:00,560 --> 01:10:04,800
talk a little bit about um some extensions that we're gonna use in


979
01:10:04,800 --> 01:10:08,880
visual studio code so let me bring up my terminal


980
01:10:08,880 --> 01:10:12,560
and um you know we don't need that let's go and


981
01:10:12,560 --> 01:10:19,199
bring up visual studio code um and then i already actually have so many visual


982
01:10:19,199 --> 01:10:24,080
studio code windows open uh but i can just say new window so you


983
01:10:24,080 --> 01:10:29,360
see how visual studio code looks like and then


984
01:10:29,360 --> 01:10:33,120
let's see don't show again okay so this is pretty much how visual studio code


985
01:10:33,120 --> 01:10:36,560
looks like so it's a very simple application to begin with


986
01:10:36,560 --> 01:10:41,199
um now what we need to do for this example is to enable a few extensions


987
01:10:41,199 --> 01:10:45,600
now the first section extension that we're going to enable is called arrow


988
01:10:45,600 --> 01:10:50,400
lens and you need to go here on the left hand side find extensions and just type


989
01:10:50,400 --> 01:10:56,480
error um if i can type air and just say airlance just like that


990
01:10:56,480 --> 01:11:02,080
click on airlands and just press enable or install i believe it's called so


991
01:11:02,080 --> 01:11:06,320
error lens allows you to see errors in line without you having to click on a


992
01:11:06,320 --> 01:11:10,239
specific line of error basically so


993
01:11:10,239 --> 01:11:15,040
it expands the entire error as you're coding you will probably have some


994
01:11:15,040 --> 01:11:18,320
errors in your code that error will be then displayed right there in front of


995
01:11:18,320 --> 01:11:22,400
your face in its entirety so you don't have to press a little small button to


996
01:11:22,400 --> 01:11:26,719
be able to see the complete air so it's a fantastic extension


997
01:11:26,719 --> 01:11:31,760
to be honest with you now the other thing that you'll need is


998
01:11:31,760 --> 01:11:35,920
something called a bracket pair colorizer and that bracket pair


999
01:11:35,920 --> 01:11:41,120
colorizer is something that is already installed in visual studio code


1000
01:11:41,120 --> 01:11:46,239
it used to be a an extension that you could download but it was so popular


1001
01:11:46,239 --> 01:11:50,400
that microsoft has added that internally to visual studio code so you don't have


1002
01:11:50,400 --> 01:11:55,840
to do that manually sorry by installing an extension so


1003
01:11:56,000 --> 01:12:01,280
now that we've talked about that the next step is to actually install flutter


1004
01:12:01,280 --> 01:12:05,679
and dart extensions so here just type


1005
01:12:05,679 --> 01:12:09,840
flutter do that and then just


1006
01:12:09,840 --> 01:12:13,920
click on the install button i've already installed that so


1007
01:12:13,920 --> 01:12:17,760
there's a disable button for me here the flutter


1008
01:12:17,760 --> 01:12:22,080
extension and then you'll also need the dart extension so just type dart and


1009
01:12:22,080 --> 01:12:25,360
then install that as well


1010
01:12:25,920 --> 01:12:31,520
so after these two installations


1011
01:12:31,520 --> 01:12:39,120
we also need to install another great extension called block bloc


1012
01:12:39,120 --> 01:12:42,800
i'm not going to go into the details of what block is because we will learn


1013
01:12:42,800 --> 01:12:47,840
about block a lot later in the course but it is just a great


1014
01:12:47,840 --> 01:12:52,239
extension to have as we go on you're going to learn about it so


1015
01:12:52,239 --> 01:12:56,640
i can't really explain exactly what it is right now but just install it and i


1016
01:12:56,640 --> 01:13:01,600
will tell you more about block later in the course i promise


1017
01:13:01,600 --> 01:13:07,760
so that was basically installing a block


1018
01:13:07,760 --> 01:13:10,239
now when you start up your visual studio


1019
01:13:10,239 --> 01:13:13,360
code it probably doesn't look like the way it does for me


1020
01:13:13,360 --> 01:13:17,920
and that is because i have a custom theme installed on my visual studio code


1021
01:13:17,920 --> 01:13:25,199
called tokyo night it is a very very mellow dark


1022
01:13:25,199 --> 01:13:29,760
theme as it's called and scenes in visual studio code can be


1023
01:13:29,760 --> 01:13:34,719
installed just like you install an extension so if you like my theme you're


1024
01:13:34,719 --> 01:13:39,120
more than welcome to go in into extensions and then search for tokyo


1025
01:13:39,120 --> 01:13:42,320
night and just install it


1026
01:13:42,320 --> 01:13:46,159
so that's it has different theme colors as well


1027
01:13:46,159 --> 01:13:51,679
this is the one i use tokyo knight actually i use this one tokyo night


1028
01:13:51,679 --> 01:13:55,040
so if you want that theme please go ahead and


1029
01:13:55,040 --> 01:13:57,760
install it


1030
01:13:58,880 --> 01:14:02,080
and now that we've talked about that we come to


1031
01:14:02,080 --> 01:14:05,840
the last point that i wanted to discuss basically


1032
01:14:05,840 --> 01:14:11,520
in uh before we wrap up this chapter which is our chapter two so


1033
01:14:11,520 --> 01:14:15,360
now that we talked about a little bit of setup for setting up your flutter


1034
01:14:15,360 --> 01:14:19,040
installation and setting up your text editor which in this case is visual


1035
01:14:19,040 --> 01:14:22,800
studio code in the next chapter which is chapter 3


1036
01:14:22,800 --> 01:14:27,280
we're going to talk about dart programming so before we actually


1037
01:14:27,280 --> 01:14:30,800
jump into writing flutter applications we're going to talk about how to write


1038
01:14:30,800 --> 01:14:33,920
code in uh dart


1039
01:14:33,920 --> 01:14:36,880
or at least understand like the basics of dart


1040
01:14:36,880 --> 01:14:41,679
so without further ado let's close up this chapter and i'll see you in the


1041
01:14:41,679 --> 01:14:44,800
next one hello everyone and welcome to the third


1042
01:14:44,800 --> 01:14:49,199
chapter of our flutter course in this chapter i thought maybe we could


1043
01:14:49,199 --> 01:14:54,560
focus a little bit on um actually not a little bit but quite a lot on dart


1044
01:14:54,560 --> 01:14:58,640
as you know from the previous chapter we know now that dart is the programming


1045
01:14:58,640 --> 01:15:01,280
language that powers


1046
01:15:01,280 --> 01:15:04,960
uh flutter so


1047
01:15:04,960 --> 01:15:08,960
it would be a good idea for us at least to get a little bit of introduction to


1048
01:15:08,960 --> 01:15:12,880
dart how it works a little bit of its internals


1049
01:15:12,880 --> 01:15:16,159
different data types functions methods classes and


1050
01:15:16,159 --> 01:15:19,840
this chapter as well um just like the entire course i'm kind of assuming that


1051
01:15:19,840 --> 01:15:24,800
you haven't done any programming at all before so i'm going to take things


1052
01:15:24,800 --> 01:15:30,640
very slowly uh take the concepts one at a time introduce them to you


1053
01:15:30,640 --> 01:15:33,199
so and i will give you some references to


1054
01:15:33,199 --> 01:15:38,560
read more about the topics as we won't have really


1055
01:15:38,560 --> 01:15:44,080
that much of a time in this course to go into detail about everything so


1056
01:15:44,080 --> 01:15:47,440
um the goal of this chapter is to


1057
01:15:47,440 --> 01:15:51,760
basically get you started with programming uh


1058
01:15:51,760 --> 01:15:57,840
dart uh and writing your apps then later for flutter


1059
01:15:58,159 --> 01:16:04,080
in order to do that we need to have a project


1060
01:16:04,080 --> 01:16:06,880
set up and by project i mean you need to have


1061
01:16:06,880 --> 01:16:11,440
some kind of a playground set up so that you can start writing


1062
01:16:11,440 --> 01:16:16,560
dart code and then you can try it on for instance a telephone or a simulator or


1063
01:16:16,560 --> 01:16:19,199
what have you now


1064
01:16:19,199 --> 01:16:23,840
um a lot of people would rather go to dark pad as we saw in the previous


1065
01:16:23,840 --> 01:16:28,480
chapter and start writing their code in dart pad


1066
01:16:28,480 --> 01:16:33,280
that's one way of doing it but since in this chap in this pro in this course


1067
01:16:33,280 --> 01:16:35,679
we're gonna write


1068
01:16:35,679 --> 01:16:38,960
an application release it for ios on android


1069
01:16:38,960 --> 01:16:45,120
um it is safe to say that that we can literally start actually creating


1070
01:16:45,120 --> 01:16:50,960
our real project here and now so that we can then later build upon it


1071
01:16:50,960 --> 01:16:54,560
rather than writing all our code in dart pad


1072
01:16:54,560 --> 01:16:58,159
because you can then by doing by writing your


1073
01:16:58,159 --> 01:17:03,199
code in an actual flutter project you can get used to how we work with


1074
01:17:03,199 --> 01:17:06,960
flutter as a whole so i think this is a little bit of a


1075
01:17:06,960 --> 01:17:11,600
time invested into later chapters as well where we're gonna work and continue


1076
01:17:11,600 --> 01:17:15,440
working on the same project so we have to just set it up once


1077
01:17:15,440 --> 01:17:18,480
but at the same time


1078
01:17:18,719 --> 01:17:24,239
there is a little bit of a value in not blending in too much of our


1079
01:17:24,239 --> 01:17:27,679
test code like what we're doing in this chapter with what we're going to do


1080
01:17:27,679 --> 01:17:31,199
later in the actual application if you know


1081
01:17:31,199 --> 01:17:35,040
what i mean so so i think it would be better now for us


1082
01:17:35,040 --> 01:17:38,960
to set up just a test application and then


1083
01:17:38,960 --> 01:17:42,080
keep working on it and then later on when we start doing the actual


1084
01:17:42,080 --> 01:17:46,239
application then we create a separate project for that so


1085
01:17:46,239 --> 01:17:50,400
now let's then


1086
01:17:50,400 --> 01:17:56,080
do that together so i'm gonna bring my face down here so you see the entire


1087
01:17:56,080 --> 01:18:01,600
entire screen i'm then going to create a new terminal


1088
01:18:01,600 --> 01:18:04,880
window and bring it up here on the screen so you can see it and i'm going


1089
01:18:04,880 --> 01:18:10,400
to increase the font so it's a little bit easier to spot what i'm typing


1090
01:18:10,480 --> 01:18:15,280
so let's go to a folder where you try to or where you


1091
01:18:15,280 --> 01:18:20,239
keep your uh projects for me i go to dev projects


1092
01:18:20,239 --> 01:18:25,920
and i have a folder there called flutter so i try to put all my


1093
01:18:25,920 --> 01:18:31,679
flutter projects in here then in order to create a new flutter


1094
01:18:31,679 --> 01:18:34,719
project what you have to do is to issue the


1095
01:18:34,719 --> 01:18:37,440
flutter create command


1096
01:18:37,440 --> 01:18:41,840
and this create command is already shipped inside flutter so if you say


1097
01:18:41,840 --> 01:18:44,880
which flutter this is going to go and find the actual


1098
01:18:44,880 --> 01:18:48,800
flatter binary if you remember from the previous chapters where we installed


1099
01:18:48,800 --> 01:18:52,320
flutter it's going to find the flutter binary


1100
01:18:52,320 --> 01:18:55,520
and then call the create command on it so if you


1101
01:18:55,520 --> 01:18:59,920
say flocker create it expects you to kind of like


1102
01:18:59,920 --> 01:19:04,800
provide it with some sort of a name of a project so let's just say


1103
01:19:04,800 --> 01:19:10,480
learning guard learning er mean dart


1104
01:19:10,480 --> 01:19:13,360
so that's the binary that's the command and


1105
01:19:13,360 --> 01:19:19,120
that is the name of the project okay so uh this is the easiest way to create a


1106
01:19:19,120 --> 01:19:22,960
new floater flutter project in my opinion at least so let's execute that


1107
01:19:22,960 --> 01:19:25,360
command


1108
01:19:27,040 --> 01:19:31,840
it's gonna do its thing and what i'm gonna do then is to as you


1109
01:19:31,840 --> 01:19:36,719
can see it's created a new folder called learning dart


1110
01:19:36,719 --> 01:19:41,280
so let's go and i'm going to say cd learning dart


1111
01:19:41,280 --> 01:19:46,159
and then i'm going to issue a command called code dot and


1112
01:19:46,159 --> 01:19:51,600
i can actually bring this a little bit to the right so you can and also


1113
01:19:51,600 --> 01:19:55,520
do like this so you can see what i'm typing


1114
01:19:55,520 --> 01:20:00,080
as you can see i've written code dot and what code does is that it


1115
01:20:00,080 --> 01:20:03,120
brings up visual studio code so it's just like a


1116
01:20:03,120 --> 01:20:07,040
command that you can issue in order to bring a visual studio code and


1117
01:20:07,040 --> 01:20:11,600
um if if i just bring up visual studio code


1118
01:20:11,600 --> 01:20:14,880
the way it is right now and for instance you can see it you


1119
01:20:14,880 --> 01:20:19,600
can't see it right now but it's because i have a separate uh screen here i'll


1120
01:20:19,600 --> 01:20:23,840
bring up visual studio code as you can see here by hand


1121
01:20:23,840 --> 01:20:27,920
there is a good extension where there is an ability


1122
01:20:27,920 --> 01:20:32,480
for visual studio code to install this code


1123
01:20:32,480 --> 01:20:36,800
shortcut for you in terminal in your path so if you say which code


1124
01:20:36,800 --> 01:20:42,239
it just says user local bin code so it's just an executable that allows


1125
01:20:42,239 --> 01:20:47,120
you then to open up visual studio code with a path like so you can say open a


1126
01:20:47,120 --> 01:20:52,719
visual studio code in this folder so you can just say code


1127
01:20:52,880 --> 01:20:56,639
dot so and you can do that in visual studio


1128
01:20:56,639 --> 01:21:02,320
code you can allow that to be installed by doing um command shift p on macintosh


1129
01:21:02,320 --> 01:21:05,520
or control shift p i i believe in windows


1130
01:21:05,520 --> 01:21:07,760
and linux


1131
01:21:07,760 --> 01:21:11,520
and there is this little command here that says shell command install code


1132
01:21:11,520 --> 01:21:15,360
command in path so if you execute that once then it's already set up for you


1133
01:21:15,360 --> 01:21:20,000
you don't have to do that anymore so if you'd like to be able to say code


1134
01:21:20,000 --> 01:21:24,320
dot in terminal and open the current folder


1135
01:21:24,320 --> 01:21:27,360
within visual studio code without you having to open visual studio code


1136
01:21:27,360 --> 01:21:32,400
manually and then doing file open then i suggest that you do command shift


1137
01:21:32,400 --> 01:21:36,239
p or control shift p in visual studio code depending on which


1138
01:21:36,239 --> 01:21:40,400
operating system you're using and then choosing shell command install code


1139
01:21:40,400 --> 01:21:46,400
command in path so i've already done that so i can just say code dot


1140
01:21:46,400 --> 01:21:51,600
and i'll bring this up here so as you can see this is the basics of


1141
01:21:51,600 --> 01:21:54,480
a simple


1142
01:21:54,840 --> 01:22:00,320
um flutter project that you create with flutter create now visual studio code


1143
01:22:00,320 --> 01:22:04,880
has a built-in terminal so i don't have to have this terminal window open


1144
01:22:04,880 --> 01:22:09,440
anymore so i'm just gonna close it okay and i'm gonna make this full screen


1145
01:22:09,440 --> 01:22:13,840
increase the size a little bit so you can see better and perhaps i could even


1146
01:22:13,840 --> 01:22:18,080
remove this flutter logo on top right so you can see the


1147
01:22:18,080 --> 01:22:21,920
content a little bit better as well


1148
01:22:22,560 --> 01:22:25,600
so that's the creation of our


1149
01:22:25,600 --> 01:22:30,560
simple flutter project now in order for this flutter project to run


1150
01:22:30,560 --> 01:22:35,280
and you be able to run this application and like keep testing your


1151
01:22:35,280 --> 01:22:38,159
project you would have to select a target and


1152
01:22:38,159 --> 01:22:41,600
you do that with command shift p and then


1153
01:22:41,600 --> 01:22:45,920
choosing flutter select device so you can just say flutter select device


1154
01:22:45,920 --> 01:22:49,120
enter command shift p is on macintosh and ctrl


1155
01:22:49,120 --> 01:22:53,520
shift p i believe is in linux and windows so do that command shift b is a


1156
01:22:53,520 --> 01:22:56,800
very important command you're going to use it quite a lot in this course so


1157
01:22:56,800 --> 01:23:01,040
just learn that please um then i'm going to say select device


1158
01:23:01,040 --> 01:23:05,280
and i'm going to choose since i'm on a macintosh and as you saw


1159
01:23:05,280 --> 01:23:11,520
earlier we have xcode already installed xcode comes also with the entire ios sdk


1160
01:23:11,520 --> 01:23:18,239
and also with the simulator i can choose to run our application on ios simulator


1161
01:23:18,239 --> 01:23:22,080
or i can choose to run it on an actual phone


1162
01:23:22,080 --> 01:23:24,719
now for this


1163
01:23:24,719 --> 01:23:27,600
um i believe i don't know if you've talked


1164
01:23:27,600 --> 01:23:31,520
already about scrcpy to be honest with you i'm just gonna


1165
01:23:31,520 --> 01:23:38,080
search in my notes um to see if you've talked about that and


1166
01:23:38,320 --> 01:23:41,679
if you just give me one second i'll just check here i believe we're we're gonna


1167
01:23:41,679 --> 01:23:46,960
set it up in chapter six so we haven't set up scrcp cpy yet so for that purpose


1168
01:23:46,960 --> 01:23:50,639
i'm just going to say select device and i'm just going to say start ios


1169
01:23:50,639 --> 01:23:55,760
simulator so that is going to as you can see start up by your simulator and that


1170
01:23:55,760 --> 01:24:00,639
for now is like the best way for us to test our application so


1171
01:24:00,639 --> 01:24:05,760
while this is connecting um i can show you a little bit around as well


1172
01:24:05,760 --> 01:24:09,199
we have as you can see lots of files here already created for us we're going


1173
01:24:09,199 --> 01:24:12,880
to go through some of these um but one of the most important files that


1174
01:24:12,880 --> 01:24:17,760
you're going to need to get used to used to is this lib slash main.dart and this


1175
01:24:17,760 --> 01:24:22,560
is where like the majority of the code is written so


1176
01:24:22,560 --> 01:24:28,159
uh this is his contents at the moment um let's see what it's doing with the


1177
01:24:28,159 --> 01:24:32,000
simulator i'm just gonna have a look here


1178
01:24:32,000 --> 01:24:35,600
um it's taking a little bit longer than


1179
01:24:35,600 --> 01:24:38,480
expected so what i'm gonna do is i'm just gonna


1180
01:24:38,480 --> 01:24:42,159
kill the io simulator manually this shouldn't this usually doesn't happen


1181
01:24:42,159 --> 01:24:44,960
but that's okay if it does happen then you know how to deal with it just close


1182
01:24:44,960 --> 01:24:49,280
the simulator um and then i'm just gonna


1183
01:24:49,280 --> 01:24:55,199
go to command shift p select device and then start ios simulator fresh so it's


1184
01:24:55,199 --> 01:25:01,040
starting right now okay so that's our simulator and i'm


1185
01:25:01,040 --> 01:25:04,560
actually going to decrease the size of this a little bit since i realize that


1186
01:25:04,560 --> 01:25:09,040
it is a very large font so


1187
01:25:09,040 --> 01:25:13,120
this is our main dart file this is like where the flutter


1188
01:25:13,120 --> 01:25:18,080
command line um command has created it is the file that has been created for


1189
01:25:18,080 --> 01:25:20,880
us so we don't have to play around with it too much to be honest with you at the


1190
01:25:20,880 --> 01:25:24,560
moment um for the purpose of this chapter we're


1191
01:25:24,560 --> 01:25:29,280
just gonna have a look at um basically kind of like exploiting this


1192
01:25:29,280 --> 01:25:33,600
uh code so that we can inject our code into it so we can learn dart a little


1193
01:25:33,600 --> 01:25:36,639
bit so you don't have to understand all of this code the way it is right now


1194
01:25:36,639 --> 01:25:41,840
there's lots of comments and etc so so that's


1195
01:25:41,840 --> 01:25:45,760
that part so now that we're here and then you can see we have a little


1196
01:25:45,760 --> 01:25:50,000
simulator here and in order to run this application on this simulator since


1197
01:25:50,000 --> 01:25:53,120
you've already done the flutter select command


1198
01:25:53,120 --> 01:25:57,840
you just go to run and you say run without debugging for now so


1199
01:25:57,840 --> 01:26:01,199
since the simulator is already selected then it understands


1200
01:26:01,199 --> 01:26:06,080
that it needs to compile this project for my simulator so


1201
01:26:06,080 --> 01:26:09,520
um and we're just going to give it some


1202
01:26:09,520 --> 01:26:12,800
time depending on your machine and like what you have for specifications on your


1203
01:26:12,800 --> 01:26:16,080
machine this this command could take anywhere between


1204
01:26:16,080 --> 01:26:21,040
a couple seconds to maybe 30 seconds or even more and i'm not sure how long


1205
01:26:21,040 --> 01:26:24,239
it's going to take for a fresh flutter project to be honest with you to start


1206
01:26:24,239 --> 01:26:29,920
running on the simulator but it took about 21 seconds so or 22 seconds so


1207
01:26:29,920 --> 01:26:32,880
um i will bring up the


1208
01:26:32,880 --> 01:26:36,159
project now and this is like the basic flutter project i'm not going to go into


1209
01:26:36,159 --> 01:26:40,080
details about how it works but you can press the plus button if you want to so


1210
01:26:40,080 --> 01:26:43,280
but what i'm going to do i'm just going to close this widget inspector that was


1211
01:26:43,280 --> 01:26:46,719
opened automatically and i'm just going to


1212
01:26:46,719 --> 01:26:51,840
bring this a little bit down so that we can see the debug console okay


1213
01:26:51,840 --> 01:26:56,000
so that's for setting up our project so


1214
01:26:56,000 --> 01:27:00,000
that part is done now the first thing that we need to talk about


1215
01:27:00,000 --> 01:27:06,719
when we start talking about dart is the concept of keywords


1216
01:27:06,719 --> 01:27:10,159
now since i'm assuming that you haven't done any programming language in any


1217
01:27:10,159 --> 01:27:13,199
other place before um


1218
01:27:13,199 --> 01:27:17,840
you need to understand what keywords are they're very


1219
01:27:17,840 --> 01:27:21,120
important in understanding any programming language basically and


1220
01:27:21,120 --> 01:27:22,930
keywords are um


1221
01:27:22,930 --> 01:27:27,199
[Music] concisely explained there are


1222
01:27:27,199 --> 01:27:31,120
words that are reserved for


1223
01:27:31,120 --> 01:27:34,320
the programming language that you


1224
01:27:34,320 --> 01:27:39,520
cannot use for anything else than what the programming language intends those


1225
01:27:39,520 --> 01:27:43,840
words to be used as i know that sounds a little bit


1226
01:27:43,840 --> 01:27:48,080
difficult but i mean there's no real good analogy in


1227
01:27:48,080 --> 01:27:51,440
like if you're coming from figma if you're coming from a design world what a


1228
01:27:51,440 --> 01:27:56,800
key word could be because in a design world you're not really talking


1229
01:27:56,800 --> 01:28:02,159
in terms of code with your product or with your


1230
01:28:02,159 --> 01:28:06,000
software where you're designing your stuff but


1231
01:28:06,000 --> 01:28:09,760
when you come to programming language as you know it's a language so


1232
01:28:09,760 --> 01:28:15,760
words mean stuff in in a programming language so a keyword is as its name


1233
01:28:15,760 --> 01:28:21,199
indicates is a word that has a special meaning in that particular particular


1234
01:28:21,199 --> 01:28:24,239
language and i provide a link here for you that you


1235
01:28:24,239 --> 01:28:30,000
can check out but i'm going to open it up and


1236
01:28:30,000 --> 01:28:34,719
bring it to the screen here increase the size a little bit so we can see better


1237
01:28:34,719 --> 01:28:38,880
uh have a look at my screen here yeah and you can see this is a part of the


1238
01:28:38,880 --> 01:28:42,960
documentation for dark programming language that explains what keywords are


1239
01:28:42,960 --> 01:28:46,080
in dart and you can see there are some words that have special meaning like


1240
01:28:46,080 --> 01:28:50,239
show import extends async await break


1241
01:28:50,239 --> 01:28:54,880
so you can say that the language the dark language is made out of these


1242
01:28:54,880 --> 01:28:59,679
keywords that is pretty much it it's just like series of keywords like the


1243
01:28:59,679 --> 01:29:03,199
things that you tell the language that hey i want to do something and then it


1244
01:29:03,199 --> 01:29:06,000
says okay what do you want to do then you say okay i want to do this or this


1245
01:29:06,000 --> 01:29:09,679
or this so special words for the programming


1246
01:29:09,679 --> 01:29:14,639
language so that it understands what you mean basically


1247
01:29:15,120 --> 01:29:19,679
so that's for keywords um for now we don't have to really go into


1248
01:29:19,679 --> 01:29:22,639
so much more details about what a keyword is but for now just understand


1249
01:29:22,639 --> 01:29:27,280
that a keyword is a special word in the programming language


1250
01:29:27,280 --> 01:29:30,880
language's brain kind of so that you can talk to it it's your interface with the


1251
01:29:30,880 --> 01:29:35,120
programming language to make it understand what you want to do okay


1252
01:29:35,120 --> 01:29:37,920
and please check out the link that i provided here to understand more about


1253
01:29:37,920 --> 01:29:40,480
keywords


1254
01:29:42,080 --> 01:29:47,199
okay so we've talked about keywords i'm just gonna check it in my notes so that


1255
01:29:47,199 --> 01:29:50,320
we know we've talked about it


1256
01:29:51,199 --> 01:29:55,679
now the next concept that we need to talk about are


1257
01:29:55,679 --> 01:30:00,400
data types um


1258
01:30:00,560 --> 01:30:05,280
if you for instance come from a design background then you have different tools


1259
01:30:05,280 --> 01:30:09,520
to work with for instance you may have in your design system whatever you're


1260
01:30:09,520 --> 01:30:13,280
using if you're using product from adobe or if you're using for instance figma or


1261
01:30:13,280 --> 01:30:16,719
whatever visio or whatever tool you're using then


1262
01:30:16,719 --> 01:30:20,400
there's like a set of components that you can work with for instance you can


1263
01:30:20,400 --> 01:30:25,600
drag in a text field or you can drag in an image field or sorry an image or you


1264
01:30:25,600 --> 01:30:29,120
can for instance assign


1265
01:30:29,280 --> 01:30:34,480
assign a color to a text so these are all like things that you can do with


1266
01:30:34,480 --> 01:30:37,360
that software


1267
01:30:37,360 --> 01:30:41,760
now a data type in in a programming language like dart


1268
01:30:41,760 --> 01:30:47,199
is that type of a thing for instance you would say


1269
01:30:47,199 --> 01:30:51,440
i have some data in my mind okay what is it it's the first name of a


1270
01:30:51,440 --> 01:30:57,679
of my friend okay his name is uh jack or whatever um


1271
01:30:57,679 --> 01:31:03,760
and then you would say okay what type is jack is it a number no is it like um


1272
01:31:03,760 --> 01:31:09,120
is it a list of things well yeah it's a list of uh characters yeah


1273
01:31:09,120 --> 01:31:15,360
uh okay then it's that is this data type or you could say


1274
01:31:15,360 --> 01:31:20,880
i'm thinking about my age my age is let's say i'm 37.


1275
01:31:20,880 --> 01:31:25,600
okay what is 37 is it a list of things well yeah it kind of is a list of


1276
01:31:25,600 --> 01:31:29,360
numbers list of digits but it's also in itself a


1277
01:31:29,360 --> 01:31:34,480
number so then there has been this convention like


1278
01:31:34,480 --> 01:31:38,080
convention in different programming languages and every program language


1279
01:31:38,080 --> 01:31:41,120
language pretty much that you can use these days has this concept of data


1280
01:31:41,120 --> 01:31:44,800
types data type is as its name indicates a


1281
01:31:44,800 --> 01:31:50,639
a specific specific name assigned to


1282
01:31:50,639 --> 01:31:55,679
to a series a specific name assigned to a data


1283
01:31:55,679 --> 01:32:02,639
that is bound to be of a specific type as well so for instance in dart you have


1284
01:32:02,639 --> 01:32:07,280
data types called integers or you have strings or you have arrays and sets


1285
01:32:07,280 --> 01:32:11,199
which we'll talk about soon but a data type just for now though it's


1286
01:32:11,199 --> 01:32:17,280
just a stamp on a piece of data to say that you're of this specific type


1287
01:32:17,280 --> 01:32:20,159
so you could think of a data data type as a


1288
01:32:20,159 --> 01:32:23,920
nationality you could say like every person coming from sweden is swedish


1289
01:32:23,920 --> 01:32:29,520
boom that's his data type so it's just a categorization of data based on their


1290
01:32:29,520 --> 01:32:34,239
appearance or based on what they actually hold so


1291
01:32:34,239 --> 01:32:40,000
for instance you can say here's a university full of engineers and


1292
01:32:40,000 --> 01:32:42,880
these are software engineers these are mechanical engineers so the software


1293
01:32:42,880 --> 01:32:48,320
engineer is a data type it or is a person type a category type so putting


1294
01:32:48,320 --> 01:32:52,480
stamps on things based on the categorization is kind of what data type


1295
01:32:52,480 --> 01:32:56,000
does and in short i mean


1296
01:32:56,000 --> 01:32:59,360
you just have to know that it's just a categorization of things based on


1297
01:32:59,360 --> 01:33:04,239
what they hold so and there's and there's a website that


1298
01:33:04,239 --> 01:33:08,400
you can read about uh dart data types and it's right here


1299
01:33:08,400 --> 01:33:11,440
i don't know if you've i've if i've provided it here


1300
01:33:11,440 --> 01:33:15,920
on the link below as you can see dart core library html so


1301
01:33:15,920 --> 01:33:21,280
um and here you can read more about dart data types


1302
01:33:21,280 --> 01:33:24,639
but we're not going to go into so much detail about all these right now just


1303
01:33:24,639 --> 01:33:27,760
know that data type in dart is or any programming


1304
01:33:27,760 --> 01:33:32,320
language basically that has data types is a categorization of


1305
01:33:32,320 --> 01:33:37,080
data based on their appearance or contents


1306
01:33:37,360 --> 01:33:40,239
now let's talk a little about


1307
01:33:40,239 --> 01:33:45,199
something called constants in dart a constant


1308
01:33:45,199 --> 01:33:48,840
usually in programming language languages are


1309
01:33:48,840 --> 01:33:53,920
values whose value cannot be changed


1310
01:33:53,920 --> 01:33:58,880
that's a little bit meta but uh let's say for instance the value of


1311
01:33:58,880 --> 01:34:01,120
um


1312
01:34:01,280 --> 01:34:04,880
a value of 10 it's a number


1313
01:34:04,880 --> 01:34:09,520
it cannot be changed 10 is 10 and it will always be 10.


1314
01:34:09,520 --> 01:34:13,920
um or your name that is a constant although


1315
01:34:13,920 --> 01:34:18,719
you can go and change it but as long as that is your name it is a constant so


1316
01:34:18,719 --> 01:34:22,719
um another example of a i mean


1317
01:34:22,719 --> 01:34:27,120
there are so many values that can be constants which will actually be quite


1318
01:34:27,120 --> 01:34:31,760
abstract for me to be able to explain right now but just know that a constant


1319
01:34:31,760 --> 01:34:36,960
is a value whose internal data cannot change during


1320
01:34:36,960 --> 01:34:40,239
the during where you're writing your program


1321
01:34:40,239 --> 01:34:44,480
and also during when you're running your program so


1322
01:34:44,480 --> 01:34:51,600
um that is kind of what a constant is uh but there is also this uh notion of a


1323
01:34:51,600 --> 01:34:56,159
compile time constant and a runtime constant and i i mean


1324
01:34:56,159 --> 01:34:59,040
you don't have to know about uh


1325
01:34:59,040 --> 01:35:02,960
like those different types of constants right now just because like in dart a


1326
01:35:02,960 --> 01:35:06,639
constant is a constant whether it's runtime or


1327
01:35:06,639 --> 01:35:11,760
compile time is constant it's just just a constant as you'll see soon but


1328
01:35:11,760 --> 01:35:15,360
i still believe that it's important to understand the difference between


1329
01:35:15,360 --> 01:35:20,400
compile time and runtime when you're talking about programming


1330
01:35:20,400 --> 01:35:23,199
and when you're becoming software developer and i hope by the end of this


1331
01:35:23,199 --> 01:35:26,880
course you'll actually become a software developer if you're not already um that


1332
01:35:26,880 --> 01:35:34,320
would be really amazing uh but the notion of a compile time and a and


1333
01:35:34,320 --> 01:35:36,800
runtime is very important to understand and


1334
01:35:36,800 --> 01:35:41,280
developers like to um make a distinction between whether


1335
01:35:41,280 --> 01:35:44,480
something has happened during compile time or something has happened during


1336
01:35:44,480 --> 01:35:48,159
runtime and compile time is


1337
01:35:48,159 --> 01:35:52,159
or before i explain compile time maybe i should explain compile compile is where


1338
01:35:52,159 --> 01:35:55,760
you take the program that you're writing here


1339
01:35:55,760 --> 01:36:01,280
and you tell the computer that i want you to package this up


1340
01:36:01,280 --> 01:36:06,080
so that i can run it later on x and y machine


1341
01:36:06,080 --> 01:36:10,800
so that process of packaging things up simply said is


1342
01:36:10,800 --> 01:36:16,239
in very simple terms it's called compiling or a compilation okay so


1343
01:36:16,239 --> 01:36:19,119
um from where you start writing your


1344
01:36:19,119 --> 01:36:22,880
program with the hand with your fingers until where you package it you're pretty


1345
01:36:22,880 --> 01:36:28,000
much just compiling it okay but when you run it like we're running


1346
01:36:28,000 --> 01:36:32,400
it at the moment on ios simulator


1347
01:36:32,400 --> 01:36:38,560
that session from where you start outputting your program into this device


1348
01:36:38,560 --> 01:36:42,400
and for it to run your program from that moment on


1349
01:36:42,400 --> 01:36:46,159
then the distinction separates into


1350
01:36:46,159 --> 01:36:48,400
runtime so


1351
01:36:48,400 --> 01:36:52,800
you haven't compiled time and runtime and a constant is a value that is the


1352
01:36:52,800 --> 01:36:57,679
same during compile time and runtime so its value doesn't change so the value of


1353
01:36:57,679 --> 01:37:02,880
10 is 10 while you're writing your program and also stays the value of 10


1354
01:37:02,880 --> 01:37:07,440
while the program is running so


1355
01:37:07,440 --> 01:37:12,960
that is a very simple explanation of a constant so


1356
01:37:12,960 --> 01:37:15,360
now let's put


1357
01:37:15,360 --> 01:37:21,119
constants and data types uh in practice now in this


1358
01:37:21,119 --> 01:37:25,840
project that was created for you by flutter create


1359
01:37:25,840 --> 01:37:31,040
in this in this line of code as you can see it says void main we're not going to


1360
01:37:31,040 --> 01:37:35,679
talk about exactly what that is but just press enter at the end of it and just


1361
01:37:35,679 --> 01:37:37,920
write


1362
01:37:39,360 --> 01:37:42,560
final and i'm going to tell you what final is


1363
01:37:42,560 --> 01:37:47,040
soon and just saying name is equal to foo


1364
01:37:47,040 --> 01:37:50,639
okay this is


1365
01:37:50,639 --> 01:37:54,400
there's lots going on in here and i'm gonna tell you um


1366
01:37:54,400 --> 01:37:58,159
what is actually happening here um


1367
01:37:58,159 --> 01:38:02,239
but i before before we actually go through all these details let's let's


1368
01:38:02,239 --> 01:38:08,320
add something here called a constant so i'm just kind of saying const age is 27


1369
01:38:08,320 --> 01:38:13,360
or yeah 27. as you can see this is how you write code in dart you start by a


1370
01:38:13,360 --> 01:38:17,840
keyword usually or a variable name or something as we're going to talk about


1371
01:38:17,840 --> 01:38:21,760
it but const is a keyword okay


1372
01:38:21,760 --> 01:38:26,719
and it tells dart that what is following here is a name right after


1373
01:38:26,719 --> 01:38:31,520
cons i'm going to write some name and in that name then i'm going to


1374
01:38:31,520 --> 01:38:37,360
basically say okay i'm adding the value of 27 to this


1375
01:38:37,360 --> 01:38:41,760
h i'm sorry about this my dog also barking a little bit


1376
01:38:41,760 --> 01:38:44,800
so what is happening here is that you're


1377
01:38:44,800 --> 01:38:49,360
telling dart that i'm putting the value of 27 into a constant


1378
01:38:49,360 --> 01:38:53,600
call h and you can refer to this age later for


1379
01:38:53,600 --> 01:38:56,840
instance you can say then


1380
01:38:56,840 --> 01:39:02,159
const age twice the age


1381
01:39:02,159 --> 01:39:07,760
you can say is equal to age multiplied by two and this is also constant because


1382
01:39:07,760 --> 01:39:11,360
at compile time word dart is basically trying to understand what you've written


1383
01:39:11,360 --> 01:39:16,239
it says okay you said 27 and then you're saying 27 is a constant so its value is


1384
01:39:16,239 --> 01:39:18,800
never going to change and if you tell me 27


1385
01:39:18,800 --> 01:39:22,320
multiplied by 2 that also is a constant because


1386
01:39:22,320 --> 01:39:28,239
both this side and this side are compile time constants


1387
01:39:28,239 --> 01:39:32,800
so that's that's what we mean by a constant it's a value that is specified


1388
01:39:32,800 --> 01:39:36,159
during compile time and it and it cannot change so


1389
01:39:36,159 --> 01:39:42,239
also it's important to know that notice that your learning guard and


1390
01:39:42,719 --> 01:39:45,920
here is sorry i have to just take some items in


1391
01:39:45,920 --> 01:39:50,400
my notes to make sure that i've explained all of those to you um


1392
01:39:50,400 --> 01:39:55,920
you can see here that every line of code in dart needs to end with a semicolon


1393
01:39:55,920 --> 01:40:00,000
and that tells dart that yeah you're starting a new line of code of course


1394
01:40:00,000 --> 01:40:04,480
you can put two lines of code like this but if you just press save


1395
01:40:04,480 --> 01:40:07,760
there is a program automatically running in the background which is called dart


1396
01:40:07,760 --> 01:40:12,159
fmt which is the dart formatter which is going to format your code and prefix it


1397
01:40:12,159 --> 01:40:16,000
so if i like put a lot of spaces in here and just press save


1398
01:40:16,000 --> 01:40:20,159
you can see upon doing command s on mac or control s on


1399
01:40:20,159 --> 01:40:24,560
linux and windows upon saving dart formatter is gonna kick in and format


1400
01:40:24,560 --> 01:40:29,280
the code for you so just a little hint


1401
01:40:29,280 --> 01:40:31,920
um okay


1402
01:40:31,920 --> 01:40:35,119
those are constants so we've talked about that


1403
01:40:35,119 --> 01:40:38,480
now let's talk about variables a little bit


1404
01:40:38,480 --> 01:40:42,800
a variable is usually


1405
01:40:42,800 --> 01:40:48,480
anything that contains a value that is not a constant


1406
01:40:48,480 --> 01:40:51,840
i mean i think that's like the simplest way of explaining what a


1407
01:40:51,840 --> 01:40:57,119
variable is um a variable as a name indicates it can vary


1408
01:40:57,119 --> 01:41:01,280
and that means that the data that it holds it doesn't need to be constantly


1409
01:41:01,280 --> 01:41:04,960
the same it means that from where you start the program you may


1410
01:41:04,960 --> 01:41:07,920
actually assign a value to this variable and you


1411
01:41:07,920 --> 01:41:12,400
may also change that variable depending on what type of variable it is


1412
01:41:12,400 --> 01:41:14,560
um so


1413
01:41:14,560 --> 01:41:19,760
there's also this notion of


1414
01:41:19,760 --> 01:41:24,320
a final variable in dart which we'll talk about soon so


1415
01:41:24,320 --> 01:41:29,840
before we do that let's go to this main function here and you could just say um


1416
01:41:29,840 --> 01:41:35,440
var name is fu and here what i've done is that i've


1417
01:41:35,440 --> 01:41:41,040
created a variable indicated by the var keyword


1418
01:41:41,040 --> 01:41:47,280
whose value is foo or let's just say alex


1419
01:41:47,280 --> 01:41:51,679
and semicolon to end the line now if i want to change this value all i could


1420
01:41:51,679 --> 01:41:56,400
say here is to say name is equal to anthony


1421
01:41:56,400 --> 01:42:02,639
or whatever now this is basically us assigning a new


1422
01:42:02,639 --> 01:42:07,280
value to this variable saying anthony um


1423
01:42:07,280 --> 01:42:12,480
as i said there is also a no the notion in


1424
01:42:12,480 --> 01:42:15,119
dart for a keyword called


1425
01:42:15,119 --> 01:42:19,040
final so you could just say final name equal


1426
01:42:19,040 --> 01:42:24,560
to alex and it's it's a little bit strange because final is also a variable


1427
01:42:24,560 --> 01:42:29,760
whose value cannot be changed so you may be like okay what like what kind of a


1428
01:42:29,760 --> 01:42:33,600
variable is that like how is that not a constant


1429
01:42:33,600 --> 01:42:38,880
now there's a little limitation because you you may try to like say const


1430
01:42:38,880 --> 01:42:42,400
aim alex but this


1431
01:42:42,400 --> 01:42:48,159
as you will see later in in the in the course


1432
01:42:48,159 --> 01:42:54,000
final gives you the flexibility to assign a value to your variable


1433
01:42:54,000 --> 01:42:58,080
a little bit later maybe in the process of creating it


1434
01:42:58,080 --> 01:43:03,600
but it still indicates to dart that the value of this variable is not gonna


1435
01:43:03,600 --> 01:43:08,000
change after it has been assigned to it's a little bit


1436
01:43:08,000 --> 01:43:11,840
yeah it's it's it's just a little bit confusing maybe at the moment so let's


1437
01:43:11,840 --> 01:43:16,639
just say a variable is like a constant but its


1438
01:43:16,639 --> 01:43:20,400
value can be changed let's just leave it at that okay so


1439
01:43:20,400 --> 01:43:24,760
uh that's it


1440
01:43:24,960 --> 01:43:29,679
okay now that we talked a little bit about a little bit about uh


1441
01:43:29,679 --> 01:43:35,679
variables let's talk about functions so um i didn't specify exactly what this is


1442
01:43:35,679 --> 01:43:38,800
just because we hadn't really come to functions


1443
01:43:38,800 --> 01:43:42,239
but a function is a body


1444
01:43:42,239 --> 01:43:48,400
of code is a grouping of series of lines of code one to n number of n lines of


1445
01:43:48,400 --> 01:43:51,199
codes that


1446
01:43:51,199 --> 01:43:54,960
is logically uh grouped


1447
01:43:54,960 --> 01:44:00,719
and it can it has a few properties uh one is its return value here indicated


1448
01:44:00,719 --> 01:44:05,840
by void the other part of its information is its


1449
01:44:05,840 --> 01:44:10,800
name followed by a pair of parentheses


1450
01:44:10,800 --> 01:44:14,080
an open parenthesis and a closed parenthesis


1451
01:44:14,080 --> 01:44:19,119
in which you will write something called the function arguments


1452
01:44:19,119 --> 01:44:22,560
or parameters um


1453
01:44:22,560 --> 01:44:27,040
it's pretty much just like uh imagine like


1454
01:44:27,040 --> 01:44:32,000
a box where you input things in it it does some processing and then it outputs


1455
01:44:32,000 --> 01:44:36,239
that stuff whatever it wants to output so


1456
01:44:36,239 --> 01:44:41,840
what we could do here is to create a very simple function for for ourselves


1457
01:44:41,840 --> 01:44:45,679
by as you see as you saw before or as i


1458
01:44:45,679 --> 01:44:49,760
mentioned before what you write for a function in the


1459
01:44:49,760 --> 01:44:54,880
beginning is this data type i mean what data comes out of this function


1460
01:44:54,880 --> 01:44:56,960
and um


1461
01:44:56,960 --> 01:45:00,159
and here let's say we want to add


1462
01:45:00,159 --> 01:45:05,920
someone's first name and their last name with a space between it so if i say foo


1463
01:45:05,920 --> 01:45:11,920
as the first name and bar as the last name then the full name should be fu bar


1464
01:45:11,920 --> 01:45:15,440
and with the space in between so


1465
01:45:15,440 --> 01:45:19,600
as i said then you need to specify the data type first what you're gonna return


1466
01:45:19,600 --> 01:45:23,360
and if you looked at the documentation that i provided earlier there's a data


1467
01:45:23,360 --> 01:45:27,199
type called string which is a series of characters


1468
01:45:27,199 --> 01:45:32,480
basically it could be a name a family name address of your house or whatever


1469
01:45:32,480 --> 01:45:36,960
and that's a data type is string okay so we say we're outputting string and then


1470
01:45:36,960 --> 01:45:39,679
you say okay what should this function be called


1471
01:45:39,679 --> 01:45:42,480
um there's a convention in dart that your


1472
01:45:42,480 --> 01:45:49,119
functions should follow a camel case naming convention basically in camel


1473
01:45:49,119 --> 01:45:53,440
cases if you for instance say in english my function should be called


1474
01:45:53,440 --> 01:45:57,199
get full name that's my function name but you cannot


1475
01:45:57,199 --> 01:46:00,880
have spaces in your function function names in dart or pretty much every


1476
01:46:00,880 --> 01:46:04,159
programming language that i know about then


1477
01:46:04,159 --> 01:46:08,960
remove all the spaces and then except for the first word


1478
01:46:08,960 --> 01:46:13,760
change all because uh cons all the other words


1479
01:46:13,760 --> 01:46:19,600
uh first letter to uh to uppercase so it was like this before you could


1480
01:46:19,600 --> 01:46:24,960
actually change them to uppercase first and then remove the spacing so this is


1481
01:46:24,960 --> 01:46:27,600
this is how you should write your function names


1482
01:46:27,600 --> 01:46:31,440
this is called camel case full name okay


1483
01:46:31,440 --> 01:46:35,360
we said that we also have to open parenthesis


1484
01:46:35,360 --> 01:46:40,679
now let's just say then


1485
01:46:41,199 --> 01:46:46,320
we need to uh specify somehow that we're going to accept a first name and a last


1486
01:46:46,320 --> 01:46:48,639
name well


1487
01:46:48,639 --> 01:46:53,040
what kind of a data type does a first name have well


1488
01:46:53,040 --> 01:46:56,560
it's kind of like a string it's a name it's a series of characters so let's


1489
01:46:56,560 --> 01:47:00,400
just type string here and then we want to take a first name


1490
01:47:00,400 --> 01:47:04,719
and we know about camel case now so let's just say first name


1491
01:47:04,719 --> 01:47:08,480
is uppercase and remove the spacing so


1492
01:47:08,480 --> 01:47:11,600
first name hey that's the parameter


1493
01:47:11,600 --> 01:47:15,920
and then you want to go to the next parameter so just say comma


1494
01:47:16,480 --> 01:47:20,800
and then you want to say string last name


1495
01:47:20,800 --> 01:47:23,280
you take the first name and the last name


1496
01:47:23,280 --> 01:47:26,560
now we also said that after the parenthesis after you have accepted your


1497
01:47:26,560 --> 01:47:30,719
parameters you want to go and create like your curly brackets here i don't


1498
01:47:30,719 --> 01:47:36,800
know actually if i mentioned that before but every function is either


1499
01:47:36,800 --> 01:47:44,000
its body or its logic it's either followed by equal


1500
01:47:44,000 --> 01:47:47,440
greater than sign which we're going to talk about later or


1501
01:47:47,440 --> 01:47:50,480
sco uh is by curly bracket so we're just going


1502
01:47:50,480 --> 01:47:54,719
to use curly brackets now there


1503
01:47:54,719 --> 01:47:58,639
what you want to do here you want to take the first name and add a space to


1504
01:47:58,639 --> 01:48:01,920
the first name and then follow that by the last name so


1505
01:48:01,920 --> 01:48:05,440
you need to you you need to tell dart that that is the data you want to return


1506
01:48:05,440 --> 01:48:08,400
and thankfully there is a


1507
01:48:08,400 --> 01:48:11,920
um there's a keyword called return that


1508
01:48:11,920 --> 01:48:15,520
tells dart that you want to return some value from a function so


1509
01:48:15,520 --> 01:48:19,199
then what you're going to do you're going to say i want to return what the


1510
01:48:19,199 --> 01:48:26,960
first name and i want to add a space single quotes space


1511
01:48:26,960 --> 01:48:30,239
us last name


1512
01:48:30,239 --> 01:48:32,800
right so


1513
01:48:32,800 --> 01:48:35,840
i mean this is a very simple implementation of


1514
01:48:35,840 --> 01:48:40,800
get full name so um however there's there's actually a


1515
01:48:40,800 --> 01:48:44,639
better way of doing this in dart and i'll explain it to you right now and


1516
01:48:44,639 --> 01:48:48,159
that is by formatting your strings so


1517
01:48:48,159 --> 01:48:52,639
let's say that you want to basically


1518
01:48:52,639 --> 01:48:57,840
tell dart kind of like how your result looks like and you want to ask dart to


1519
01:48:57,840 --> 01:49:02,880
insert the first name and last name into that result for you


1520
01:49:02,880 --> 01:49:05,520
and that's how you'll do it like this you say


1521
01:49:05,520 --> 01:49:09,920
okay i want to return a string denoted by the single quotation marks here and


1522
01:49:09,920 --> 01:49:13,040
you can also do a string in dart with double quotation marks but i'm going to


1523
01:49:13,040 --> 01:49:16,080
explain that a little bit later


1524
01:49:16,239 --> 01:49:19,280
so let's say that you want to


1525
01:49:19,280 --> 01:49:24,159
return the first name in here but if you say first name


1526
01:49:24,159 --> 01:49:27,360
what's going to happen here is that it's actually going to take this first name


1527
01:49:27,360 --> 01:49:30,960
as has you written in the string so when


1528
01:49:30,960 --> 01:49:34,960
you get this return value it's actually going to say first name


1529
01:49:34,960 --> 01:49:40,000
not the value that you pass to this i know it may be a little bit


1530
01:49:40,000 --> 01:49:43,280
difficult to understand when i say the value that you pass to this what does it


1531
01:49:43,280 --> 01:49:46,960
even mean uh so let's put this actually to test


1532
01:49:46,960 --> 01:49:50,239
first okay go now into


1533
01:49:50,239 --> 01:49:53,599
this build function as you can see here on


1534
01:49:53,599 --> 01:49:57,520
line 16. now it may not be on line 16 for you but for me is at the moment on


1535
01:49:57,520 --> 01:50:03,040
line 16. just find this class my app stateful stateless widget and find this


1536
01:50:03,040 --> 01:50:08,560
widget build stuff that's written there create a new line here


1537
01:50:08,560 --> 01:50:12,080
okay and just say


1538
01:50:12,080 --> 01:50:16,320
full name or sorry say print


1539
01:50:16,320 --> 01:50:19,840
as i'm writing it here print


1540
01:50:19,840 --> 01:50:22,719
and then just say


1541
01:50:23,040 --> 01:50:26,400
what do we call our function get full name


1542
01:50:26,400 --> 01:50:29,280
see here and it says okay what's the first name


1543
01:50:29,280 --> 01:50:34,320
i'll say quotation marks who and the last name is bar


1544
01:50:34,320 --> 01:50:39,280
and ended with a semicolon so and ignore this call for


1545
01:50:39,280 --> 01:50:45,040
now sorry this uh warning avoid print calls and production codes so


1546
01:50:45,520 --> 01:50:48,960
okay so now we're calling that function this is


1547
01:50:48,960 --> 01:50:52,239
the it's i mean it's called calling it's


1548
01:50:52,239 --> 01:50:56,800
called invoking it may have other names but usually


1549
01:50:56,800 --> 01:50:59,760
programmers call this calling call the function


1550
01:50:59,760 --> 01:51:02,320
and these are the parameters that you're


1551
01:51:02,320 --> 01:51:07,360
passing to this function okay so uh


1552
01:51:07,360 --> 01:51:10,000
the i mean there are two words


1553
01:51:10,000 --> 01:51:13,119
used for in in the programming world to explain


1554
01:51:13,119 --> 01:51:17,119
these parameters like with with name and that is called a parameter or an


1555
01:51:17,119 --> 01:51:20,719
argument i mean they're used interchangeably


1556
01:51:20,719 --> 01:51:24,480
the meaning of them is kind of like getting uh convoluted in to the point


1557
01:51:24,480 --> 01:51:28,800
that no one knows which one is which but you could just use parameter or argument


1558
01:51:28,800 --> 01:51:31,360
and everybody would understand what you're saying so but there's a little


1559
01:51:31,360 --> 01:51:34,560
bit of the difference which i'm not going to go into the detail of but if


1560
01:51:34,560 --> 01:51:38,639
someone just says call this function with parameters or arguments you know at


1561
01:51:38,639 --> 01:51:42,560
least what you're doing okay foo bar


1562
01:51:42,560 --> 01:51:46,880
now we're printing its value all you have to do in order to execute this code


1563
01:51:46,880 --> 01:51:51,360
is press command s and you will see the result


1564
01:51:51,360 --> 01:51:55,119
outputted here now what we did here


1565
01:51:55,119 --> 01:51:57,440
um


1566
01:51:58,000 --> 01:52:02,480
what we did here was very very key


1567
01:52:02,480 --> 01:52:06,480
feature in flutter called hot reload


1568
01:52:06,480 --> 01:52:10,800
as you saw i didn't execute my code again i didn't press like the run button


1569
01:52:10,800 --> 01:52:15,280
again i just said save now saving in flutter


1570
01:52:15,280 --> 01:52:20,400
triggers an action called hot reload hot reload in flutter is it's a whole


1571
01:52:20,400 --> 01:52:24,719
topic of its own which i'm not gonna go so much into


1572
01:52:24,719 --> 01:52:28,639
detail of but what hot reload does really is


1573
01:52:28,639 --> 01:52:33,920
it looks for changes in


1574
01:52:33,920 --> 01:52:37,440
in your code hierarchy without complicating it too much i'm just trying


1575
01:52:37,440 --> 01:52:40,800
to phrase my sentence


1576
01:52:40,800 --> 01:52:44,639
right so that it's um not too complicated for


1577
01:52:44,639 --> 01:52:47,840
this chapter it looks for changes that you made to


1578
01:52:47,840 --> 01:52:53,760
the code and executes only those changes okay


1579
01:52:53,760 --> 01:52:57,440
and in the process of executing those changes it might execute everything else


1580
01:52:57,440 --> 01:53:01,679
that is in its uh in its path and


1581
01:53:01,679 --> 01:53:06,159
by doing a save this function gets called somehow magically which i'm not


1582
01:53:06,159 --> 01:53:08,719
going to go into right now


1583
01:53:08,719 --> 01:53:14,560
which in turn then calls or invokes our function called getfullname and


1584
01:53:14,560 --> 01:53:19,520
its value will then be passed into another function called print


1585
01:53:19,520 --> 01:53:25,040
okay i hope that that made sense


1586
01:53:25,040 --> 01:53:28,400
uh and as you can see the result isn't really what we expected it just says


1587
01:53:28,400 --> 01:53:32,560
first name and that is because here we said return


1588
01:53:32,560 --> 01:53:37,119
first name and as you can see if you put first name like this inside your string


1589
01:53:37,119 --> 01:53:40,480
it becomes its own string it has nothing to do with this


1590
01:53:40,480 --> 01:53:43,599
anymore if you remove these quotation marks


1591
01:53:43,599 --> 01:53:47,199
however then it says oh first name is this


1592
01:53:47,199 --> 01:53:51,199
parameter you see it actually highlights it so


1593
01:53:51,199 --> 01:53:55,599
then if i press command s on mac or control s on linux and windows you will


1594
01:53:55,599 --> 01:53:58,480
see foo being printed to the screen


1595
01:53:58,480 --> 01:54:01,840
okay you can also say last name here and it


1596
01:54:01,840 --> 01:54:05,119
will say bar right


1597
01:54:05,119 --> 01:54:08,639
and know that no also notice that when i'm changing these things it's not


1598
01:54:08,639 --> 01:54:12,880
executing immediately automatically i'm pressing command s so just keep that in


1599
01:54:12,880 --> 01:54:15,599
mind please so


1600
01:54:17,760 --> 01:54:20,639
so that's for a function and but before we


1601
01:54:20,639 --> 01:54:27,360
move on explaining the basics of a function i want to also explain


1602
01:54:27,360 --> 01:54:30,480
a little bit about


1603
01:54:30,800 --> 01:54:34,000
string formatting and that is we said that we're going to put first name and


1604
01:54:34,000 --> 01:54:38,159
last name because this is what we did in the beginning first name plus space plus


1605
01:54:38,159 --> 01:54:41,040
last name and this wasn't so pretty because it's like doing string


1606
01:54:41,040 --> 01:54:45,840
concatenation in a very old-fashioned matter in a very old-fashioned manner


1607
01:54:45,840 --> 01:54:49,119
yeah i think i said it right the first time


1608
01:54:49,119 --> 01:54:55,920
but what you want to do here is to uh use uh garth's built-in formatting


1609
01:54:55,920 --> 01:54:59,119
capabilities and you do that by first saying that okay i want to return some


1610
01:54:59,119 --> 01:55:03,119
sort of a string and i want to have first name


1611
01:55:03,119 --> 01:55:07,040
space last name but as you saw this earlier if


1612
01:55:07,040 --> 01:55:12,719
i command s or control s it just returns those strings exactly as


1613
01:55:12,719 --> 01:55:17,119
i've written them not the parameters what you can do is just to put a dollar


1614
01:55:17,119 --> 01:55:20,000
before them and you can see their coloring now


1615
01:55:20,000 --> 01:55:22,880
changes depending on the theme that you're using or depending on the text


1616
01:55:22,880 --> 01:55:27,920
editor that you're using if you're using android studio it may not color it the


1617
01:55:27,920 --> 01:55:30,960
same way or if you're using visual studio with a different theme on a


1618
01:55:30,960 --> 01:55:34,639
different maybe platform you may not even change the color but for me at


1619
01:55:34,639 --> 01:55:38,639
least you can see that the change the colors change so as to indicate that now


1620
01:55:38,639 --> 01:55:44,480
i'm not actually returning the string exactly as you wrote


1621
01:55:44,480 --> 01:55:49,199
except on returning the parameters that are here


1622
01:55:49,199 --> 01:55:53,760
so command this and now you can see that the result is


1623
01:55:53,760 --> 01:55:57,679
full bar okay


1624
01:55:57,679 --> 01:56:03,520
so that is the basics of functions in in dart


1625
01:56:03,520 --> 01:56:07,280
before we move on from functions i also want to explain


1626
01:56:07,280 --> 01:56:10,800
quickly that um a function doesn't necessarily have


1627
01:56:10,800 --> 01:56:14,960
to return anything and that means that


1628
01:56:14,960 --> 01:56:19,520
you may have a function here that wants to just print some data to


1629
01:56:19,520 --> 01:56:24,080
uh the screen or to here to the debug console and you can just call it


1630
01:56:24,080 --> 01:56:28,960
print my name and parenthesis and


1631
01:56:28,960 --> 01:56:32,719
curly brackets and as you can see here


1632
01:56:32,719 --> 01:56:36,320
i can just write the name of the function without any


1633
01:56:36,320 --> 01:56:40,000
data type to be returned but it's a little bit of a convention that you


1634
01:56:40,000 --> 01:56:43,760
actually tell dark that this is a void function


1635
01:56:43,760 --> 01:56:48,400
meaning void is a key word as we talked about it earlier in the beginning of


1636
01:56:48,400 --> 01:56:52,159
this chapter


1637
01:56:52,159 --> 01:56:56,239
void is a key word telling dark that this is a function that doesn't return


1638
01:56:56,239 --> 01:56:59,840
anything and as you can see dart is completely fine with this


1639
01:56:59,840 --> 01:57:03,599
function being completely empty meaning that well yeah you said you're not


1640
01:57:03,599 --> 01:57:07,599
returning anything you're probably just gonna do some stuff in here so i'm not


1641
01:57:07,599 --> 01:57:11,920
gonna bother you with some errors saying oh you forgot to do something


1642
01:57:11,920 --> 01:57:16,400
but as soon as you change the return value or the return data type of your


1643
01:57:16,400 --> 01:57:22,080
function to for instance string then you'll get an error


1644
01:57:22,080 --> 01:57:26,080
saying that oh yeah the body might complete normally causing null to be


1645
01:57:26,080 --> 01:57:29,840
returned blah blah you don't have to know exactly what that means but


1646
01:57:29,840 --> 01:57:33,679
essentially what that means is you're telling dart that you're returning a


1647
01:57:33,679 --> 01:57:37,599
string but you're not returning anything it's literally


1648
01:57:37,599 --> 01:57:42,639
looking for the return keyword saying that oh you missed it so you


1649
01:57:42,639 --> 01:57:48,480
could silence that uh error by saying return an empty string


1650
01:57:48,480 --> 01:57:51,119
semicolon


1651
01:57:51,679 --> 01:57:56,080
so i think this pretty much explains the


1652
01:57:56,080 --> 01:57:59,520
basics of um


1653
01:57:59,920 --> 01:58:03,920
functions to be honest with you there's lots more to learn about


1654
01:58:03,920 --> 01:58:07,360
functions and as i said functions can also be like


1655
01:58:07,360 --> 01:58:11,280
written using this syntax and


1656
01:58:11,280 --> 01:58:16,639
this syntax is used when your function is very simple or in that


1657
01:58:16,639 --> 01:58:20,960
it doesn't need to break into different lines of code


1658
01:58:20,960 --> 01:58:27,119
by a semi-colon so a function who has a very simple logic you can just skip


1659
01:58:27,119 --> 01:58:30,800
writing these square brackets


1660
01:58:30,800 --> 01:58:36,239
no curly brackets sorry and you can just say you see i will


1661
01:58:36,239 --> 01:58:40,639
remove this put equal sign


1662
01:58:40,639 --> 01:58:45,199
greater than sign remove the closing curly bracket


1663
01:58:45,199 --> 01:58:49,599
and then you can remove the return statement and that's it


1664
01:58:49,599 --> 01:58:53,760
that is a shorthand it's a function shorthand in dart


1665
01:58:53,760 --> 01:58:58,560
and you could use it simply to simplify kind of your code some people


1666
01:58:58,560 --> 01:59:02,560
may like it some people kind of may be against it


1667
01:59:02,560 --> 01:59:06,960
just because it's um it kind of splits your


1668
01:59:06,960 --> 01:59:10,960
code into two different styles some functions are with uh curly brackets


1669
01:59:10,960 --> 01:59:15,920
some functions are with this pointer thingy and uh kind of depends on your


1670
01:59:15,920 --> 01:59:18,880
and you on you and your team to be honest


1671
01:59:18,880 --> 01:59:22,480
um i know usually from my um


1672
01:59:22,480 --> 01:59:26,000
from my experience usually we software developers like to follow


1673
01:59:26,000 --> 01:59:31,040
conventions so in one in one project


1674
01:59:31,040 --> 01:59:34,000
the developers may decide okay we're just going to go with this convention


1675
01:59:34,000 --> 01:59:38,560
and since using curly brackets


1676
01:59:38,560 --> 01:59:45,360
involves the ability to have both complicated and simple return statements


1677
01:59:45,360 --> 01:59:51,040
in a function it's actually preferred as a convention than using this syntax


1678
01:59:51,040 --> 01:59:54,880
simply because this syntax doesn't allow you to split your code into separate


1679
01:59:54,880 --> 02:00:01,679
lines of code it has to all be in one statement so if that makes any sense


1680
02:00:02,639 --> 02:00:08,239
so i think i think that's it for functions and now we've talked about


1681
02:00:08,239 --> 02:00:15,440
functions arguments return values we talked about variables constants


1682
02:00:15,440 --> 02:00:20,320
data types and keywords in dart and


1683
02:00:20,320 --> 02:00:25,599
these are such important parts of learning how to program with dark and


1684
02:00:25,599 --> 02:00:29,040
flutter that i think you need to spend some time and experiment with them so do


1685
02:00:29,040 --> 02:00:32,080
some experimentations on your own for instance take


1686
02:00:32,080 --> 02:00:35,360
not don't take just the first name and last name just take for instance


1687
02:00:35,360 --> 02:00:39,280
someone's address someone's age different play around a little bit with


1688
02:00:39,280 --> 02:00:42,639
different data types like integers different numbers have a look at the


1689
02:00:42,639 --> 02:00:46,480
link that i provided earlier which was here i'll bring it up


1690
02:00:46,480 --> 02:00:50,719
again so you can see that have a look at this link and have a look


1691
02:00:50,719 --> 02:00:55,440
at the different examples of different data types because in this in


1692
02:00:55,440 --> 02:00:59,440
in the upcoming chapters and in the uh rest of


1693
02:00:59,440 --> 02:01:03,119
this course we're going to play around with a lot of different types of data


1694
02:01:03,119 --> 02:01:05,920
types so i think it's important that you have


1695
02:01:05,920 --> 02:01:10,000
a look a little bit at the documentation as well


1696
02:01:10,000 --> 02:01:14,080
so let's leave this chapter at this point


1697
02:01:14,080 --> 02:01:20,080
and then in the next chapter we're going to talk a lot more about more advanced


1698
02:01:20,080 --> 02:01:24,320
dart programming language features so thank you for joining me for this


1699
02:01:24,320 --> 02:01:29,760
chapter and see you in the next one hello everyone and welcome to chapter 4


1700
02:01:29,760 --> 02:01:33,760
of this flutter course in the previous chapter chapter 3 we


1701
02:01:33,760 --> 02:01:38,159
talked about keywords data types constants variables and some basics of


1702
02:01:38,159 --> 02:01:42,560
functions and in this chapter we are going to


1703
02:01:42,560 --> 02:01:46,480
as you can see on the captions here we're going to focus on control


1704
02:01:46,480 --> 02:01:50,880
statements and collections now


1705
02:01:50,880 --> 02:01:54,320
um i'm assuming you're following these chapters


1706
02:01:54,320 --> 02:01:58,000
um chronologically so that you're like going


1707
02:01:58,000 --> 02:02:03,119
one by one so i'm assuming then that you have your uh dark project set up and


1708
02:02:03,119 --> 02:02:07,599
that you've got some sort of a simulator or emulator running


1709
02:02:07,599 --> 02:02:11,440
so without further ado let's have a look at


1710
02:02:11,440 --> 02:02:15,920
um i'm actually gonna bring up the captions here and then i'm


1711
02:02:15,920 --> 02:02:22,560
gonna put my face at the bottom there and bring up our project that we created


1712
02:02:22,560 --> 02:02:26,960
in the previous chapter up here so this this is running at the


1713
02:02:26,960 --> 02:02:31,520
moment so if i do a command s or control s on linux and windows


1714
02:02:31,520 --> 02:02:34,719
then as you can see here there is a run button


1715
02:02:34,719 --> 02:02:38,159
and then it's just gonna do a hot reload which in


1716
02:02:38,159 --> 02:02:42,639
turn calls this build function which we don't yet know really how it works


1717
02:02:42,639 --> 02:02:45,119
because i haven't really explained it but


1718
02:02:45,119 --> 02:02:49,119
what we did we just called a print function here and then


1719
02:02:49,119 --> 02:02:52,800
our get full name function so


1720
02:02:52,960 --> 02:02:57,199
what i'm going to do here is let's remove this code from the build


1721
02:02:57,199 --> 02:03:00,880
and let's remove everything that we wrote here as well so keep the main


1722
02:03:00,880 --> 02:03:05,119
function as you can see here and then keep your stateless widget which we're


1723
02:03:05,119 --> 02:03:09,840
going to talk about later okay so instead go and create a new function


1724
02:03:09,840 --> 02:03:13,599
that is called void test


1725
02:03:13,599 --> 02:03:16,960
all right and then in the build function just say


1726
02:03:16,960 --> 02:03:19,440
test all right


1727
02:03:19,440 --> 02:03:23,840
just like that the purpose is that in this function


1728
02:03:23,840 --> 02:03:27,360
we're going to write most of the code in this chapter so we are going to


1729
02:03:27,360 --> 02:03:32,159
basically test some code that's the purpose of this function so


1730
02:03:32,239 --> 02:03:36,639
let's talk about if and else if and l's are


1731
02:03:36,639 --> 02:03:41,119
control statements in most programming languages that allow


1732
02:03:41,119 --> 02:03:45,199
you to branch your code based on a condition


1733
02:03:45,199 --> 02:03:50,239
so if we for instance in here create a final


1734
02:03:50,239 --> 02:03:53,920
variable whose value cannot be changed if you remember from the previous


1735
02:03:53,920 --> 02:03:57,040
chapter whose value cannot be changed after it's been assigned to


1736
02:03:57,040 --> 02:04:01,599
let's say final name is foo all right


1737
02:04:01,599 --> 02:04:05,199
and end it with the same semicolon now


1738
02:04:05,199 --> 02:04:10,880
an if statement basically allows you to check the value or a condition


1739
02:04:10,880 --> 02:04:13,360
to be of a certain


1740
02:04:13,360 --> 02:04:17,440
value or to be true or false and


1741
02:04:17,440 --> 02:04:22,159
then it allows you to execute some code and then you can also


1742
02:04:22,159 --> 02:04:27,119
append an else statement to it which gets executed if the code or if that


1743
02:04:27,119 --> 02:04:30,800
condition is not met i'm going to show you how that is written


1744
02:04:30,800 --> 02:04:34,159
the syntax for an if statement is just if


1745
02:04:34,159 --> 02:04:38,400
and if is an is a keyword so you would say if


1746
02:04:38,400 --> 02:04:42,719
and then you would open and close parenthesis and then you would put curly


1747
02:04:42,719 --> 02:04:47,199
brackets like this that's the syntax of if and in the parenthesis you would put


1748
02:04:47,199 --> 02:04:52,560
your condition so i would say in this case if name and


1749
02:04:52,560 --> 02:04:56,880
i would like to for instance check if name is foo


1750
02:04:56,880 --> 02:05:00,880
now uh we haven't come to operators yet


1751
02:05:00,880 --> 02:05:04,639
we're going to talk about operators actually soon


1752
02:05:04,639 --> 02:05:10,880
but this is um as you can see here we're saying final name equal to foo this is


1753
02:05:10,880 --> 02:05:15,440
kind of like um an assignment uh operation and that is


1754
02:05:15,440 --> 02:05:18,800
an operator in dart it's called an operator


1755
02:05:18,800 --> 02:05:21,199
so there is also


1756
02:05:21,199 --> 02:05:24,000
and since this is an assignment we don't want to actually assign anything to name


1757
02:05:24,000 --> 02:05:26,719
you want to check if it's of a certain value and


1758
02:05:26,719 --> 02:05:32,000
that is with this conditional operator equal equal


1759
02:05:32,000 --> 02:05:38,960
and then you will just say okay if it's foo then for instance print


1760
02:05:38,960 --> 02:05:42,400
uh yes this is foo


1761
02:05:42,400 --> 02:05:46,560
and then a semi colon to end it however if this condition is not met you may


1762
02:05:46,560 --> 02:05:52,000
want to execute another piece of code and then you can just do else


1763
02:05:52,159 --> 02:05:55,920
like that and then this would you would just say


1764
02:05:55,920 --> 02:06:00,079
no this is not foo all right and a semicolon so i'm just


1765
02:06:00,079 --> 02:06:05,520
going to do command s and you can see the value or the string yes this is food


1766
02:06:05,520 --> 02:06:10,639
printed to the screen or to the terminal here or to the debug console


1767
02:06:10,880 --> 02:06:14,480
you can have multiple statements in here so you can have more print statements in


1768
02:06:14,480 --> 02:06:18,239
here you can just do anything you want basically in here


1769
02:06:18,239 --> 02:06:24,800
and the same goes for else now there is a possibility to write if


1770
02:06:24,800 --> 02:06:28,480
statements kind of without the curly brackets but you don't see


1771
02:06:28,480 --> 02:06:33,040
them that often and i recommend that you actually always try to as a convention


1772
02:06:33,040 --> 02:06:37,679
do with curly brackets if you can however it is possible that inside a


1773
02:06:37,679 --> 02:06:42,239
code base that you will work on with your colleagues it is decided that it's


1774
02:06:42,239 --> 02:06:48,239
okay to have if statements without curly brackets where there are very simple and


1775
02:06:48,239 --> 02:06:52,320
one-liners basically so let me show you


1776
02:06:52,320 --> 02:06:58,000
an example of that you could just say if name is foo


1777
02:06:58,000 --> 02:07:03,760
you would just say print yes this is foo and this is completely accepted as well


1778
02:07:03,760 --> 02:07:08,079
so because it's a one-liner but if you then say


1779
02:07:08,079 --> 02:07:13,280
okay i want to have another line print hello world


1780
02:07:13,280 --> 02:07:16,400
you can see it goes to the next line meaning that


1781
02:07:16,400 --> 02:07:21,360
this line right here will be executed no matter your


1782
02:07:21,360 --> 02:07:25,440
condition up there so this is completely detached from your if statement up here


1783
02:07:25,440 --> 02:07:28,320
okay and i just realized that it is quite


1784
02:07:28,320 --> 02:07:31,199
important for me to be able to show line numbers


1785
02:07:31,199 --> 02:07:35,520
and by default your editor probably has line numbers enabled i usually disable


1786
02:07:35,520 --> 02:07:39,520
line numbers when i'm working myself basically


1787
02:07:39,520 --> 02:07:43,520
but when talking about code with other people it's quite useful to have line


1788
02:07:43,520 --> 02:07:48,880
numbers because i can then tell you oh look at line nine or look at my line ten


1789
02:07:48,880 --> 02:07:52,960
okay so that's the basic of if and else


1790
02:07:52,960 --> 02:07:58,159
now you can also have if right after else so


1791
02:07:58,159 --> 02:08:04,639
an example of that is for instance to say if name is fu


1792
02:08:05,280 --> 02:08:12,400
and then you do some code all right you say print yes it is foo


1793
02:08:12,400 --> 02:08:15,280
not food after the curly bracket then you would


1794
02:08:15,280 --> 02:08:18,639
say else and then you can then say another if


1795
02:08:18,639 --> 02:08:21,119
else if all right


1796
02:08:21,119 --> 02:08:25,360
and then after if comes the parenthesis and a curly bracket if you


1797
02:08:25,360 --> 02:08:29,599
remember from the if before it is the exact same syntax as it as it


1798
02:08:29,599 --> 02:08:32,079
is here so there's pretty much no difference you


1799
02:08:32,079 --> 02:08:35,679
can you see if and then if


1800
02:08:35,679 --> 02:08:39,679
and then you put your condition in here you would just say if name


1801
02:08:39,679 --> 02:08:44,960
and then you may just want to say is not and that's another operator


1802
02:08:44,960 --> 02:08:50,400
it's uh basically is a not operator so it's checking to make sure that this


1803
02:08:50,400 --> 02:08:53,360
name is not of the value that you provide to the


1804
02:08:53,360 --> 02:08:56,079
right hand side


1805
02:08:56,639 --> 02:09:00,159
and then you can say bar and print


1806
02:09:00,159 --> 02:09:05,280
this value is not bar else


1807
02:09:05,280 --> 02:09:10,320
and then you can wrap it up and you can say print i don't


1808
02:09:10,320 --> 02:09:13,840
know what this is now i i'm so glad i actually


1809
02:09:13,840 --> 02:09:18,639
accidentally ran into this issue as you can see now the editor is kind of


1810
02:09:18,639 --> 02:09:22,400
going crazy and darts not understanding what this statement is


1811
02:09:22,400 --> 02:09:26,079
and as we talked about it previously um


1812
02:09:26,079 --> 02:09:30,719
strings in dart are preferred to have to be kind of like created with single


1813
02:09:30,719 --> 02:09:34,639
quotes however if your string in itself contains a


1814
02:09:34,639 --> 02:09:39,040
single code for instance in this case the word don't


1815
02:09:39,040 --> 02:09:44,960
contains a single code then dart kind of gets confused like okay does the string


1816
02:09:44,960 --> 02:09:49,520
in here you can see it's up until this point is it's a green so


1817
02:09:49,520 --> 02:09:52,960
it's thing it's thinking that oh the string ends here but what is all of this


1818
02:09:52,960 --> 02:09:57,440
then that follows if you have that problem


1819
02:09:57,440 --> 02:10:01,119
there are two ways of fixing that either you


1820
02:10:01,119 --> 02:10:05,360
scape your single code and that is a


1821
02:10:05,360 --> 02:10:10,960
that is a software kind of development lingo escape kind of if you hear that it


1822
02:10:10,960 --> 02:10:16,000
pretty much just means that you're um you are


1823
02:10:16,000 --> 02:10:19,520
kind of wrapping it in a way


1824
02:10:19,520 --> 02:10:23,840
that dart understands that you don't mean it literally you don't mean that


1825
02:10:23,840 --> 02:10:28,159
i want to end my string here except that this needs to be escaped and put in the


1826
02:10:28,159 --> 02:10:32,400
string as its own value basically it's kind of difficult to explain but i think


1827
02:10:32,400 --> 02:10:36,320
you know what i mean um so that's one way of doing it it's a little bit dirty


1828
02:10:36,320 --> 02:10:39,280
so in case you run into this issue it's


1829
02:10:39,280 --> 02:10:44,079
best to actually wrap your entire string in double quotes and this way


1830
02:10:44,079 --> 02:10:48,239
then dart understands that whatever comes in here is okay like a single code


1831
02:10:48,239 --> 02:10:52,400
is completely okay unless you actually want to have


1832
02:10:52,400 --> 02:10:57,280
a double co double uh double quotes in your string that is


1833
02:10:57,280 --> 02:11:00,239
enclosed with double quotes again so you'll see if i put a double quote here


1834
02:11:00,239 --> 02:11:05,679
then dart goes crazy so you can escape it with a backslash like that


1835
02:11:05,679 --> 02:11:09,920
so if you have single codes and double quotes in your string then you will have


1836
02:11:09,920 --> 02:11:13,199
to kind of pick a convention either you enclose the entire string in single


1837
02:11:13,199 --> 02:11:16,639
quotes and scape your single quotes


1838
02:11:16,639 --> 02:11:21,280
inside that string and let the double quotes live or you enclose your entire


1839
02:11:21,280 --> 02:11:24,719
string in double quotes and then you will


1840
02:11:24,719 --> 02:11:31,360
escape your double quotes in the string i hope i hope that makes sense


1841
02:11:31,360 --> 02:11:34,480
so that is


1842
02:11:34,480 --> 02:11:40,320
um if and else in um in a nutshell but before i move on i kind of want to


1843
02:11:40,320 --> 02:11:44,239
explain an important concept here in that when dart executes this code it


1844
02:11:44,239 --> 02:11:48,320
kind of goes by line by line so it starts with line seven the execution of


1845
02:11:48,320 --> 02:11:51,199
this test function and then it come comes here and


1846
02:11:51,199 --> 02:11:54,480
it says okay name is foo all right um


1847
02:11:54,480 --> 02:11:58,400
and it's actually saying that we prefer const so let me change that to const


1848
02:11:58,400 --> 02:12:01,280
okay so um


1849
02:12:01,280 --> 02:12:04,880
and it says okay if name is foo


1850
02:12:04,880 --> 02:12:08,880
all right then it comes over here but let's just change that to foo with


1851
02:12:08,880 --> 02:12:13,040
triple o um actually


1852
02:12:13,040 --> 02:12:18,320
yeah let's no let's not do that let's keep it as foo so it says if foo is if


1853
02:12:18,320 --> 02:12:20,880
name is food then it says yeah that's true


1854
02:12:20,880 --> 02:12:25,760
and then it goes here however as you can see the line number 11


1855
02:12:25,760 --> 02:12:28,800
also says if name


1856
02:12:28,800 --> 02:12:33,440
is not bar then it should execute this as well


1857
02:12:33,440 --> 02:12:37,199
and and you can see that foo is not bar so


1858
02:12:37,199 --> 02:12:41,679
this condition is also true however this this this will never be


1859
02:12:41,679 --> 02:12:46,639
executed and that is because when dart goes inside these curly


1860
02:12:46,639 --> 02:12:50,639
brackets then it says okay i did what i had to do i did my print statement the


1861
02:12:50,639 --> 02:12:54,960
rest i ignore so if an if statement is kind of like a


1862
02:12:54,960 --> 02:12:58,800
is a it puts a stop when it when it falls


1863
02:12:58,800 --> 02:13:03,840
into one of these if statements it kind of says okay i did my job in this entire


1864
02:13:03,840 --> 02:13:09,040
if else block then i will execute the code after that so if i clear the


1865
02:13:09,040 --> 02:13:12,800
console here and press command s you can see it only says yes it is foo it


1866
02:13:12,800 --> 02:13:17,440
doesn't come here so however if you change this


1867
02:13:17,440 --> 02:13:22,000
um condition so that the dart compiler or


1868
02:13:22,000 --> 02:13:25,840
basically the execution of the program doesn't fall into line number 10 it will


1869
02:13:25,840 --> 02:13:30,320
eventually fall to line number 12. so you can see it says this value is not


1870
02:13:30,320 --> 02:13:34,239
bar so when you're writing your if statement and else statements just be


1871
02:13:34,239 --> 02:13:38,239
careful with that just know that it's kind of like a as soon as the code jumps


1872
02:13:38,239 --> 02:13:42,320
into one of those branches it doesn't go to the rest of the branches and checks


1873
02:13:42,320 --> 02:13:46,639
them basically all right


1874
02:13:47,679 --> 02:13:52,880
okay that was for if and else


1875
02:13:53,520 --> 02:13:57,119
now let me check that in my notes that we've talked


1876
02:13:57,119 --> 02:14:04,239
about that what we need to do now is to talk about


1877
02:14:05,280 --> 02:14:09,599
operators operators


1878
02:14:09,760 --> 02:14:12,239
they there are three different types of


1879
02:14:12,239 --> 02:14:19,360
operators there are prefix operators infix operators and suffix operators


1880
02:14:19,360 --> 02:14:21,599
and


1881
02:14:21,840 --> 02:14:27,360
and i will explain them to you i mean how they work um


1882
02:14:27,360 --> 02:14:31,679
i think to explain operators probably it's best that we talk about numbers so


1883
02:14:31,679 --> 02:14:35,040
let's go in this test function and delete everything that we we've written


1884
02:14:35,040 --> 02:14:42,000
here and let let me just say final h is 20. all right so


1885
02:14:42,000 --> 02:14:46,239
um now we've created a variable whose value


1886
02:14:46,239 --> 02:14:50,079
cannot be changed after spin assigned to because we created as a final a variable


1887
02:14:50,079 --> 02:14:55,360
whose value is 20. all right now if you want to calculate half of this value how


1888
02:14:55,360 --> 02:14:59,760
would you do that then well there is an operator for that and that is a division


1889
02:14:59,760 --> 02:15:04,079
operator so you would just say for instance final


1890
02:15:04,079 --> 02:15:08,000
half of age as you can see we're using camel case as i explained in the


1891
02:15:08,000 --> 02:15:12,239
previous chapter an easy way to do camel case is to say


1892
02:15:12,239 --> 02:15:18,400
half of it just writing in english change the first letter of


1893
02:15:18,480 --> 02:15:22,480
of like this here change the first letter of all the words except for the


1894
02:15:22,480 --> 02:15:25,679
first word to uppercase and then remove all the spaces that's camelcase


1895
02:15:25,679 --> 02:15:31,920
basically so half of age is age and then there is a great operator in a dart


1896
02:15:31,920 --> 02:15:35,840
called a division operator and then you would say


1897
02:15:35,840 --> 02:15:39,360
all right and then you could just say print half


1898
02:15:39,360 --> 02:15:44,960
of h so command s and that says ten all right


1899
02:15:44,960 --> 02:15:49,840
so that's the division operator and then you will have


1900
02:15:49,840 --> 02:15:54,400
let's say final double the h


1901
02:15:54,719 --> 02:15:58,400
and then we will say h multiplied by two it's kind of like a


1902
02:15:58,400 --> 02:16:03,520
star that is an operator and you can see


1903
02:16:03,520 --> 02:16:09,440
these both operators this one the division and the multiplication uh


1904
02:16:09,440 --> 02:16:12,639
multiplication it's a little bit difficult to say


1905
02:16:12,639 --> 02:16:18,079
operators are in fix operators and an infix operator is an operator that has


1906
02:16:18,079 --> 02:16:21,520
two parameters one to its right and one to its left i don't know how you can


1907
02:16:21,520 --> 02:16:25,199
actually yeah one two one to each side i don't


1908
02:16:25,199 --> 02:16:29,520
know if my video is like mirrored so if my right hand is actually right hand on


1909
02:16:29,520 --> 02:16:34,639
your side as well so i don't know yes it is probably


1910
02:16:34,639 --> 02:16:36,880
so


1911
02:16:37,599 --> 02:16:43,599
these are infix operators when they have two values one to each side


1912
02:16:43,599 --> 02:16:48,880
however there are also prefix operators


1913
02:16:48,880 --> 02:16:51,840
and an example of that is for instance if i


1914
02:16:51,840 --> 02:16:56,080
said final h minus 1


1915
02:16:56,080 --> 02:16:58,960
and actually we


1916
02:16:59,599 --> 02:17:05,679
change this to var i'll explain soon why and if we said minus minus h


1917
02:17:05,679 --> 02:17:11,120
now this is an example of a prefix operator and a prefix operator is an


1918
02:17:11,120 --> 02:17:17,679
operator that it comes before whatever it has to do its work on and in


1919
02:17:17,679 --> 02:17:22,319
this case this minus minus operator what it does is that it takes the value that


1920
02:17:22,319 --> 02:17:25,280
comes after it it


1921
02:17:25,280 --> 02:17:31,519
decreases that value by one and then it returns its result back to


1922
02:17:31,519 --> 02:17:37,359
the left-hand side so in this case the the interpreter comes here and says okay


1923
02:17:37,359 --> 02:17:40,639
you wanna calculate something okay it's equal to


1924
02:17:40,639 --> 02:17:46,160
oh a prefix operator that takes a variable here and it says okay what is


1925
02:17:46,160 --> 02:17:50,800
age is 20 minus 1 is 19. puts it in here and it


1926
02:17:50,800 --> 02:17:55,599
also puts that minus 1 sorry puts that 19 in an h so


1927
02:17:55,599 --> 02:18:00,719
i think so at least so if we say print age and print age minus one now both


1928
02:18:00,719 --> 02:18:05,200
should kind of be 19 and you can see it says twice you see 2


1929
02:18:05,200 --> 02:18:11,359
19. so that kind of means it's uh twice so flutter has this great ability not to


1930
02:18:11,359 --> 02:18:16,399
duplicate basically log statements or print statements


1931
02:18:16,399 --> 02:18:19,120
so we have i mean there are some really


1932
02:18:19,120 --> 02:18:25,439
great operators in dart and that is the plus operator operator and then you have


1933
02:18:25,439 --> 02:18:30,559
the minus division multiplication and then you have the logical kind of like


1934
02:18:30,559 --> 02:18:34,719
operators to check if a value from the left is equal to the value to the right


1935
02:18:34,719 --> 02:18:37,439
so these are kind of like the basics of the


1936
02:18:37,439 --> 02:18:43,359
operators in um dart so you don't have to know so much more about these for now


1937
02:18:43,359 --> 02:18:45,760
i would say um


1938
02:18:45,760 --> 02:18:50,319
you can get really far with these and a lot of these operators actually work not


1939
02:18:50,319 --> 02:18:55,679
only on numbers but also on strings so and for instance if you this is one of


1940
02:18:55,679 --> 02:19:00,000
the cool features of dart which i absolutely love i think it was just such


1941
02:19:00,000 --> 02:19:03,840
a great idea for them to implement this like


1942
02:19:03,840 --> 02:19:07,439
uh one thing i mean if you're not coming from a software development background


1943
02:19:07,439 --> 02:19:10,639
um you may not know this but if you're coming for instance from design


1944
02:19:10,639 --> 02:19:13,519
background also you would notice that sometimes when you're creating designs


1945
02:19:13,519 --> 02:19:16,000
or any any screen and you want to kind of


1946
02:19:16,000 --> 02:19:20,719
like show that design to someone like a product owner you want to actually


1947
02:19:20,719 --> 02:19:25,920
populate the text inside your design with some lorem ipsum


1948
02:19:25,920 --> 02:19:29,840
and lower mibsum is basically has a huge history of where it comes from but it's


1949
02:19:29,840 --> 02:19:33,599
usually some sort of a dummy text kind of that you want to place inside your


1950
02:19:33,599 --> 02:19:36,719
design so that you can just like display and


1951
02:19:36,719 --> 02:19:39,040
show it to someone and


1952
02:19:39,040 --> 02:19:42,399
a lot of developers like in many languages when they want to display some


1953
02:19:42,399 --> 02:19:45,760
text and they don't know what to say like we're just testing stuff i just


1954
02:19:45,760 --> 02:19:49,520
want to display some text they go and grab lorem ipsum and then put it in


1955
02:19:49,520 --> 02:19:53,520
their code but dart has gone to the next step and


1956
02:19:53,520 --> 02:19:57,520
said okay we don't need that so what you can do you can say for instance name is


1957
02:19:57,520 --> 02:20:01,359
foo that's a string name but you can say


1958
02:20:01,359 --> 02:20:07,359
name times 20 is name times 20. you can literally say


1959
02:20:07,359 --> 02:20:11,200
multiply a string by 20 and what that does is that it


1960
02:20:11,200 --> 02:20:15,120
says foo 20 times so if i say print


1961
02:20:15,120 --> 02:20:18,640
name times 20 you can see it's


1962
02:20:18,640 --> 02:20:22,800
20 times so it's a great feature you can say foo bar


1963
02:20:22,800 --> 02:20:26,479
pass and then just say times 100


1964
02:20:26,479 --> 02:20:31,280
and yeah it just that's it copies it for you 100 times in


1965
02:20:31,280 --> 02:20:36,080
names time 100 for instance so


1966
02:20:36,160 --> 02:20:41,280
so that is a um that is


1967
02:20:41,280 --> 02:20:47,439
shortly said that is the basics of operators in dart okay


1968
02:20:47,439 --> 02:20:52,080
i'm gonna delete that code i'm gonna


1969
02:20:52,080 --> 02:20:56,080
mark in my notes that we've talked about that


1970
02:20:56,840 --> 02:21:01,280
now i'm just gonna quickly also mention


1971
02:21:01,280 --> 02:21:05,359
that um


1972
02:21:05,439 --> 02:21:10,399
we can also create custom operators to be honest with you and


1973
02:21:10,399 --> 02:21:16,399
i don't think it is completely all right right now to talk about custom


1974
02:21:16,399 --> 02:21:20,080
operators i think it's kind of like a topic to talk about later so i actually


1975
02:21:20,080 --> 02:21:23,840
just moved it in my notes that we don't need to talk about it right now


1976
02:21:23,840 --> 02:21:28,160
because we have to know about a little bit about a little bit about classes and


1977
02:21:28,160 --> 02:21:31,840
objects so that we can after we've created our own class then we can create


1978
02:21:31,840 --> 02:21:35,680
custom operators as well so i don't think it's completely


1979
02:21:35,680 --> 02:21:39,040
appropriate to talk about right now but just know that in the future you can


1980
02:21:39,040 --> 02:21:43,520
also create your own operators and then like or you can also override like


1981
02:21:43,520 --> 02:21:46,800
different operators and how they work with different objects so it's it's


1982
02:21:46,800 --> 02:21:50,080
really fun um


1983
02:21:50,080 --> 02:21:55,760
but that's that's that let's just let's just leave operators to that for now


1984
02:21:55,760 --> 02:22:01,120
now the next topic that i wanted to talk about is lists


1985
02:22:01,359 --> 02:22:05,600
and a list in dart is


1986
02:22:05,600 --> 02:22:09,680
a series of things that are


1987
02:22:09,680 --> 02:22:15,120
similar to each other and they are placed inside


1988
02:22:15,120 --> 02:22:18,640
a list as you would have for instance a piece of paper and you could write your


1989
02:22:18,640 --> 02:22:22,479
shopping list or like a christmas shopping list or whatever


1990
02:22:22,479 --> 02:22:29,040
and it's numbered so um these are called lists in dart


1991
02:22:29,040 --> 02:22:33,439
so for instance if you say foo


1992
02:22:33,439 --> 02:22:38,479
and then bar and then bass as you can see dark


1993
02:22:38,479 --> 02:22:42,080
doesn't like this syntax at the moment it says okay what are these like what is


1994
02:22:42,080 --> 02:22:44,319
this uh uh


1995
02:22:44,319 --> 02:22:48,399
comma here the way to tell darth that this is a


1996
02:22:48,399 --> 02:22:52,319
list of things that are like in place one two three


1997
02:22:52,319 --> 02:22:59,280
is by placing them inside uh square brackets and then a semicolon of course


1998
02:22:59,280 --> 02:23:03,479
now um


1999
02:23:04,160 --> 02:23:08,479
as i've talked about it before just just now actually lists have


2000
02:23:08,479 --> 02:23:14,240
indexes in that they all have their own place placement inside the list


2001
02:23:14,240 --> 02:23:18,240
and all these objects as we call them they have their placements inside the


2002
02:23:18,240 --> 02:23:23,439
list and you may think that object number one is foo and then


2003
02:23:23,439 --> 02:23:28,880
object number two is bar and now number three is bas and i kind of correct but


2004
02:23:28,880 --> 02:23:33,359
index says in i mean all the programming language that


2005
02:23:33,359 --> 02:23:39,439
i've worked with c plus c rust dart swift


2006
02:23:39,439 --> 02:23:44,080
javascript they pretty much all start at the index


2007
02:23:44,080 --> 02:23:48,080
of zero and that is so important to understand because like


2008
02:23:48,080 --> 02:23:52,640
the placement of this object called foo inside this


2009
02:23:52,640 --> 02:23:56,880
list is not one it's actually it's index is


2010
02:23:56,880 --> 02:24:00,880
zero and that is why lists are called zero


2011
02:24:00,880 --> 02:24:06,240
based and their indexes are called zero based indexes so you've got to be


2012
02:24:06,240 --> 02:24:10,000
careful with that and we're going to talk about indexes soon actually


2013
02:24:10,000 --> 02:24:14,240
so let's just say final names is that now if i want to


2014
02:24:14,240 --> 02:24:17,680
extract foo from here i'm just going to say


2015
02:24:17,680 --> 02:24:23,040
final foo is names at the index of zero right i'm just


2016
02:24:23,040 --> 02:24:27,680
going to print it i'm just going to say printfu and you'll see food printed here


2017
02:24:27,680 --> 02:24:31,280
now if i say i want to get past then i'm going to say


2018
02:24:31,280 --> 02:24:34,880
print sorry index of three


2019
02:24:34,880 --> 02:24:38,240
and you'll see oh sorry


2020
02:24:38,240 --> 02:24:43,840
index of two because it's the third item but since indexes are zero base then


2021
02:24:43,840 --> 02:24:48,479
it's in excel so i made the mistake myself so command s and you'll get bass


2022
02:24:48,479 --> 02:24:51,840
and i actually want to go back to this three


2023
02:24:51,840 --> 02:24:55,600
and then command s so you can see what happened here you'll see you you'll get


2024
02:24:55,600 --> 02:25:00,240
something called a range error which is an exception


2025
02:25:00,240 --> 02:25:06,160
an exception in dart and many other programming languages is when things go


2026
02:25:06,160 --> 02:25:09,040
wrong so that the language doesn't really know


2027
02:25:09,040 --> 02:25:12,399
anymore what you mean and in this case you can see this


2028
02:25:12,399 --> 02:25:17,280
through an exception at the language level or at the library's level where it


2029
02:25:17,280 --> 02:25:21,120
says there are no four items in this array or


2030
02:25:21,120 --> 02:25:26,720
in this list because the index of three indicates four items


2031
02:25:26,720 --> 02:25:30,880
item number one in the list has the index of zero item number two has the


2032
02:25:30,880 --> 02:25:34,240
index sub one item number three has the index of


2033
02:25:34,240 --> 02:25:38,399
two and item number four has the index of


2034
02:25:38,399 --> 02:25:42,080
three and there are only three objects in this


2035
02:25:42,080 --> 02:25:47,439
array or in this list so zero index zero one two


2036
02:25:47,439 --> 02:25:50,880
so that's it and index of number three is


2037
02:25:50,880 --> 02:25:55,680
non-existent and that is why we're getting this invalid value not in


2038
02:25:55,680 --> 02:26:00,080
inclusive range zero to two so


2039
02:26:00,080 --> 02:26:03,760
that's how you access items inside a list


2040
02:26:03,760 --> 02:26:08,240
and this is how you actually create a list okay so you say list of items which


2041
02:26:08,240 --> 02:26:12,479
is full bar bas so you can also there are some convenient


2042
02:26:12,479 --> 02:26:16,560
um properties on lists that you can for


2043
02:26:16,560 --> 02:26:19,120
instance say final


2044
02:26:19,120 --> 02:26:22,399
length so if you want to know how many items are


2045
02:26:22,399 --> 02:26:27,040
in this list you can also say names


2046
02:26:27,040 --> 02:26:30,160
dot and then you would say linked


2047
02:26:30,160 --> 02:26:33,920
we're going to talk a little bit about that now as well because i think it's so


2048
02:26:33,920 --> 02:26:37,520
important to understand what that is


2049
02:26:37,680 --> 02:26:42,000
dots in dart and in many other programming language is a way to drill


2050
02:26:42,000 --> 02:26:46,080
in to something to extract something else from


2051
02:26:46,080 --> 02:26:50,800
it and in this case names is a list and


2052
02:26:50,800 --> 02:26:54,000
all lists in dart have


2053
02:26:54,000 --> 02:26:59,359
something called properties length is the property of


2054
02:26:59,359 --> 02:27:06,479
the list data type in dart and that means every list in dart has a


2055
02:27:06,479 --> 02:27:10,479
property called link that is automatically calculated for you you


2056
02:27:10,479 --> 02:27:16,720
don't have to do anything as you enter values in this list this length is gonna


2057
02:27:16,720 --> 02:27:21,280
then return the right value to you so i'm gonna i'm just gonna talk about that


2058
02:27:21,280 --> 02:27:24,319
a little bit more so i'm just gonna say print named length


2059
02:27:24,319 --> 02:27:29,439
it's gonna say you'll see here let me scroll a little bit it'll say


2060
02:27:29,439 --> 02:27:35,040
three three items in this array i'm gonna change the names list to var


2061
02:27:35,040 --> 02:27:38,960
so that we can actually um


2062
02:27:38,960 --> 02:27:44,479
change its contents and mutate it like i just wanna add a new name to this


2063
02:27:44,479 --> 02:27:48,960
names and i'll just say add is a function as you can see because it


2064
02:27:48,960 --> 02:27:52,960
has parentheses right after it so and i will say


2065
02:27:52,960 --> 02:27:56,720
um my name and then semicolon to end the


2066
02:27:56,720 --> 02:28:01,920
statement now if i say print names length right after the statement


2067
02:28:01,920 --> 02:28:05,920
you guessed it oh i can see actually my um


2068
02:28:05,920 --> 02:28:10,319
you may not see all the print statements because this text is right there so


2069
02:28:10,319 --> 02:28:14,240
let me resize my visual studio code a little bit so you can see things a


2070
02:28:14,240 --> 02:28:18,479
little bit better sorry about that so


2071
02:28:18,479 --> 02:28:24,080
now we have names length here and you can see the second time around it said


2072
02:28:24,080 --> 02:28:26,399
four okay


2073
02:28:26,399 --> 02:28:29,600
so when you say dot after


2074
02:28:29,600 --> 02:28:35,439
the name of a of a variable and that means it can be a constant a variable or


2075
02:28:35,439 --> 02:28:40,560
a final variable after you put dot after its name you're accessing


2076
02:28:40,560 --> 02:28:45,200
different properties or different functions inside that thing okay so it's


2077
02:28:45,200 --> 02:28:49,680
kind of like an accessor it allows you to drill down inside an object and grab


2078
02:28:49,680 --> 02:28:55,439
things out of it or maybe make that object do something for you okay


2079
02:28:55,439 --> 02:28:59,280
so i think i think that's good enough to be


2080
02:28:59,280 --> 02:29:03,040
honest with you about lists i don't want to go too much into details and scare


2081
02:29:03,040 --> 02:29:08,479
people about like all the different things you can do with lists and but


2082
02:29:08,479 --> 02:29:12,960
there there is great documentation on dart's own website all you have to do is


2083
02:29:12,960 --> 02:29:17,840
just to google or duckduckgo or whatever you want to use bing


2084
02:29:17,840 --> 02:29:20,319
your your way through and just search for


2085
02:29:20,319 --> 02:29:24,720
dart arrays documentation or just dart arrays and then you will find lots of


2086
02:29:24,720 --> 02:29:28,319
information about it or sorry dark lists because in dart


2087
02:29:28,319 --> 02:29:31,680
they're actually called lists in some other programming languages they're


2088
02:29:31,680 --> 02:29:35,120
called arrays but those names can be used interchangeably


2089
02:29:35,120 --> 02:29:38,479
to be honest with you lists and arrays are kind of like yeah almost the same


2090
02:29:38,479 --> 02:29:40,960
thing so


2091
02:29:42,319 --> 02:29:47,920
all right um that was lists in dart i'm gonna take it


2092
02:29:47,920 --> 02:29:50,720
in my notes so that we know we've talked about


2093
02:29:50,720 --> 02:29:54,640
it the next topic that i wanted to talk


2094
02:29:54,640 --> 02:29:57,600
about in this video


2095
02:29:57,600 --> 02:30:01,439
are things called sets


2096
02:30:02,000 --> 02:30:06,479
all right and as you can see in the caption i've


2097
02:30:06,479 --> 02:30:10,240
written here is a list of unique things whereas


2098
02:30:10,240 --> 02:30:20,240
lists were lists of homogeneous things sets our list of unique things so


2099
02:30:20,960 --> 02:30:26,160
i think the best way actually to explain sets is just to jump right into it so


2100
02:30:26,160 --> 02:30:30,560
the syntax for a set is with a curly bracket and


2101
02:30:30,560 --> 02:30:34,479
actually i think i think it is


2102
02:30:34,560 --> 02:30:38,720
yeah i think so so let's say final


2103
02:30:38,720 --> 02:30:42,800
uh names and i'm just gonna say curly bracket foo


2104
02:30:42,800 --> 02:30:48,319
and then end that okay just like that now if i type names here


2105
02:30:48,319 --> 02:30:51,760
you will see that the suggestion provided here or the information


2106
02:30:51,760 --> 02:30:56,880
provided by visual studio code says names is a set of string


2107
02:30:56,880 --> 02:30:59,840
we talked about this in the previous chapter that


2108
02:30:59,840 --> 02:31:05,040
when i say final names or final something name for instance is


2109
02:31:05,040 --> 02:31:08,640
foo i'm kind of telling dart to create


2110
02:31:08,640 --> 02:31:11,920
a variable whose


2111
02:31:11,920 --> 02:31:16,399
reference name is name and its value is fu and dart automatically understand


2112
02:31:16,399 --> 02:31:23,040
that the data type of this value is string because its data is


2113
02:31:23,040 --> 02:31:26,800
string so you don't have to say final string name


2114
02:31:26,800 --> 02:31:31,200
although you could do that but let's change this to const as well as


2115
02:31:31,200 --> 02:31:34,640
and you don't have to actually say this is a


2116
02:31:34,640 --> 02:31:38,399
string because dart understands it automatically so you just remove the


2117
02:31:38,399 --> 02:31:42,000
data type if that's what you want to do which is what i actually prefer to do


2118
02:31:42,000 --> 02:31:46,240
instead of being too verbose unless you have a really good reason to


2119
02:31:46,240 --> 02:31:51,120
provide the data type anyways let's go back to sets so


2120
02:31:51,120 --> 02:31:54,160
we were here


2121
02:31:54,160 --> 02:31:58,240
means and that's and in the same way that we created a string and then dart


2122
02:31:58,240 --> 02:32:02,640
automatically understood the data type by putting uh square brac sorry curly


2123
02:32:02,640 --> 02:32:06,720
brackets here or curly braces here and putting some data inside that dart


2124
02:32:06,720 --> 02:32:11,439
automatically understand okay this is a set of some stuff in here and this stuff


2125
02:32:11,439 --> 02:32:16,720
for now just looks like a string so if i say foo bar


2126
02:32:16,720 --> 02:32:20,319
as um


2127
02:32:20,319 --> 02:32:24,880
art says okay this is fine but if i go in here and i say foo again you can see


2128
02:32:24,880 --> 02:32:28,960
i automatically get then an error message say saying two elements in a


2129
02:32:28,960 --> 02:32:34,000
constant so literally cannot be equal because it understands that this foo it


2130
02:32:34,000 --> 02:32:38,040
has already repeated there


2131
02:32:38,720 --> 02:32:43,680
okay so let's remove foo from here and let's do an experiment


2132
02:32:43,680 --> 02:32:48,080
let's change this names to var so that we can actually change its con its


2133
02:32:48,080 --> 02:32:51,280
contents then go to name and add to the next line


2134
02:32:51,280 --> 02:32:55,439
and say names if i can spell and say add


2135
02:32:55,439 --> 02:33:01,200
and then say foo again and then say names add bar and then set


2136
02:33:01,200 --> 02:33:06,439
add bas or sorry means advanced


2137
02:33:06,560 --> 02:33:11,840
and then we'll say print names okay and i'm gonna clear the logs with this


2138
02:33:11,840 --> 02:33:16,880
button right here and then i'm gonna press command s


2139
02:33:16,880 --> 02:33:20,800
and you can see that the set is still full bar bass nothing changed really


2140
02:33:20,800 --> 02:33:24,160
there that is one of the greatest properties


2141
02:33:24,160 --> 02:33:26,960
of lists


2142
02:33:26,960 --> 02:33:31,520
of um sets in dart and in pretty much every


2143
02:33:31,520 --> 02:33:35,359
other programming language that supports sets and that's


2144
02:33:35,359 --> 02:33:42,640
sets only ensure always that their data is not duplicated and


2145
02:33:42,640 --> 02:33:45,840
this is i mean there's lots of magic happening in the background that i


2146
02:33:45,840 --> 02:33:49,920
haven't really talked about in i mean for instance like the question that you


2147
02:33:49,920 --> 02:33:55,040
may ask how does dart know foo is the same as foo does it compare


2148
02:33:55,040 --> 02:33:59,439
them yes it kind of does actually um


2149
02:33:59,439 --> 02:34:04,479
it's internally doing a comparison between these things but we never told


2150
02:34:04,479 --> 02:34:09,120
it how that comparison should work and that is because


2151
02:34:09,120 --> 02:34:14,800
if you remember from operators when we talked about it the string


2152
02:34:14,960 --> 02:34:19,520
now we haven't talked about classes well i'm just going to say strings in dart


2153
02:34:19,520 --> 02:34:24,240
already know how they should be compared with other strings


2154
02:34:24,240 --> 02:34:27,280
okay so


2155
02:34:27,280 --> 02:34:30,800
they they kind of have this logic of hash


2156
02:34:30,800 --> 02:34:35,040
codes and comparison operators that they know exactly like okay


2157
02:34:35,040 --> 02:34:40,960
given this string am i the same as that like given sorry given what i am


2158
02:34:40,960 --> 02:34:45,040
and this new thing that you're providing me like i'm foo and you're saying foo am


2159
02:34:45,040 --> 02:34:48,880
i the same as foo and then it says yes or no so


2160
02:34:48,880 --> 02:34:54,160
that is what sets are doing internally but we don't actually see that so


2161
02:34:54,160 --> 02:34:58,800
um just know for now that sets in dart


2162
02:34:58,800 --> 02:35:04,399
allow you to create unique lists of things okay and then


2163
02:35:04,399 --> 02:35:09,359
you may also be a little bit like tempted to go and say okay i have things


2164
02:35:09,359 --> 02:35:16,560
here let's say const things is equal to foo and then we say one


2165
02:35:16,560 --> 02:35:19,600
and this will also work and that is because


2166
02:35:19,600 --> 02:35:23,280
dark has the concept of object as well you can


2167
02:35:23,280 --> 02:35:28,399
see you'll see things and it'll say oh now it's a set of object


2168
02:35:28,399 --> 02:35:34,000
we haven't talked about objects yet and if i look at my notes i can see that


2169
02:35:34,000 --> 02:35:36,800
we're going to talk about objects in chapter six


2170
02:35:36,800 --> 02:35:41,840
and we're right now in chapter four so we haven't really


2171
02:35:41,840 --> 02:35:44,319
gotten to that point to talk about objects


2172
02:35:44,319 --> 02:35:48,399
and i don't want to really scare you about objects and what they actually are


2173
02:35:48,399 --> 02:35:54,560
but just know that there is a hierarchy of data types so


2174
02:35:54,560 --> 02:36:00,640
you have object and then you have data types that kind of derive their


2175
02:36:00,640 --> 02:36:05,200
functionality from objects so here sits object and then here's its


2176
02:36:05,200 --> 02:36:09,439
string integer double etc and then you have sets and


2177
02:36:09,439 --> 02:36:13,040
blah blah blah now when you're here when you were first


2178
02:36:13,040 --> 02:36:18,960
here and you said i have foo barbaros all strings then dart was like okay


2179
02:36:18,960 --> 02:36:21,680
this is a set of strings but then


2180
02:36:21,680 --> 02:36:26,160
you said oh i have a string and i have an integer which is a number


2181
02:36:26,160 --> 02:36:29,439
now dart was like oops i have i can't i mean


2182
02:36:29,439 --> 02:36:33,200
i don't really i can't say this is a list of strings and integers that's not


2183
02:36:33,200 --> 02:36:37,600
possible in there so it says i'm going to take the common denominator type that


2184
02:36:37,600 --> 02:36:43,200
sits above them as their parent to specify what these things are okay


2185
02:36:43,200 --> 02:36:47,920
and that is kind of like the same thing that we do in real life in that if i


2186
02:36:47,920 --> 02:36:54,720
give you for instance um uh two candies like a twix bar then you say


2187
02:36:54,720 --> 02:36:58,640
then you would say this is a twix bar that's one thing


2188
02:36:58,640 --> 02:37:03,920
if i give you 10 twix bars then you will say a lot of twix bars or 10 twix bars


2189
02:37:03,920 --> 02:37:09,600
if i just give you a bunch of twix bars oh that's a bunch of twix bars but if i


2190
02:37:09,600 --> 02:37:12,479
go and like


2191
02:37:12,479 --> 02:37:19,359
blend like lots of twix bars mars bars whatever all the sweets into a bag and i


2192
02:37:19,359 --> 02:37:21,920
give you that bag what do you call it you don't say


2193
02:37:21,920 --> 02:37:26,560
oh this is a bag of twix and uh snickers and this is a


2194
02:37:26,560 --> 02:37:32,080
and mars bar no you would probably just say candy it's a bag of candies and


2195
02:37:32,080 --> 02:37:36,479
that's what dart is doing here saying oh you threw a lot of stuff in here i i


2196
02:37:36,479 --> 02:37:40,160
can't like comprehend that this is a set of uh


2197
02:37:40,160 --> 02:37:42,000
objects so


2198
02:37:42,000 --> 02:37:45,920
we do that in real real life and that's what dart is doing here so just when you


2199
02:37:45,920 --> 02:37:49,760
see object just know that oh dark doesn't really know what this is anymore


2200
02:37:49,760 --> 02:37:53,359
so or it kind of knows what it is it's just


2201
02:37:53,359 --> 02:37:56,080
a bunch of stuff so


2202
02:37:56,080 --> 02:38:03,439
that's what object in this case means so that was a weird uh


2203
02:38:03,439 --> 02:38:07,680
comparison maybe but i hope you get uh what i mean


2204
02:38:07,680 --> 02:38:10,560
and if you see me looking here it's just because i'm looking at my notes to


2205
02:38:10,560 --> 02:38:13,120
ensure that i've explained the things that i've


2206
02:38:13,120 --> 02:38:16,479
set out to explain so


2207
02:38:16,560 --> 02:38:20,399
talked a little about about hash codes and sets we don't have to go into


2208
02:38:20,399 --> 02:38:25,680
details about that so now let's go and talk a little bit about


2209
02:38:25,680 --> 02:38:28,560
maps um


2210
02:38:28,560 --> 02:38:31,200
and maps are kind of


2211
02:38:31,200 --> 02:38:34,880
one of my favorite data data structures in


2212
02:38:34,880 --> 02:38:38,000
any programming language that supports them pretty much almost all modern


2213
02:38:38,000 --> 02:38:43,600
programming languages support maps so a map is


2214
02:38:43,600 --> 02:38:47,280
a data structure as you can see here maps are used to


2215
02:38:47,280 --> 02:38:51,280
hold key value pairs of information and what that means is


2216
02:38:51,280 --> 02:38:56,000
um let's say that you want to explain


2217
02:38:56,000 --> 02:39:00,399
a person using their different properties


2218
02:39:00,399 --> 02:39:05,520
then you would say age their gender


2219
02:39:05,520 --> 02:39:09,120
their hair color their


2220
02:39:09,120 --> 02:39:13,840
heights uh whatever name all that so


2221
02:39:13,840 --> 02:39:18,000
these are kind of like your keys so


2222
02:39:18,000 --> 02:39:21,520
you would explain the properties of that person using


2223
02:39:21,520 --> 02:39:25,040
those keys and all those keys have their values so


2224
02:39:25,040 --> 02:39:30,000
if you say height then you say like 180 yes


2225
02:39:30,000 --> 02:39:34,319
and if you say weight then you select 70 kilograms


2226
02:39:34,319 --> 02:39:39,760
so these are key values the keys are the properties of that person and the values


2227
02:39:39,760 --> 02:39:44,560
are the values of those properties so and the way to create a map is very


2228
02:39:44,560 --> 02:39:50,640
similar so to very similar to a set with a curly with curly brackets


2229
02:39:50,640 --> 02:39:54,880
so you say person and then you say equal to


2230
02:39:54,880 --> 02:39:58,319
actually this is just a name you don't have to say person but yeah or you can


2231
02:39:58,319 --> 02:40:02,800
just say const so person and then you open curly brackets and then you would


2232
02:40:02,800 --> 02:40:07,760
do your keys here and i would say the key of age for instance i'll say 20


2233
02:40:07,760 --> 02:40:10,399
and then you say column


2234
02:40:10,399 --> 02:40:15,279
is it calling yeah it's a column and then you end the whole set with a


2235
02:40:15,279 --> 02:40:23,680
semicolon so i just created a basically here i created a map whose


2236
02:40:23,680 --> 02:40:30,000
keys are string and values are integers now let's see if dart understands that


2237
02:40:30,000 --> 02:40:35,600
you see this is it's a map of string as keys and means as values but now


2238
02:40:35,600 --> 02:40:41,040
as you saw before the analogy of candies now if i say okay i have another key and


2239
02:40:41,040 --> 02:40:44,080
it says um


2240
02:40:44,080 --> 02:40:50,720
name and i say oh the name is foo dart's going to be like oop


2241
02:40:50,720 --> 02:40:55,840
what is this person oh it's a map of string as keys and object as the value


2242
02:40:55,840 --> 02:41:00,880
because it just looks at the common denominator of the string which is foo


2243
02:41:00,880 --> 02:41:05,520
and 20 which is an integer and says oh i don't know i can't create a map whose


2244
02:41:05,520 --> 02:41:10,160
keys are string and its values are both string and integers so i'm just going to


2245
02:41:10,160 --> 02:41:14,399
go to their parent and be like oh the parent of both string and integer is


2246
02:41:14,399 --> 02:41:18,560
object so your values are of type object so


2247
02:41:18,560 --> 02:41:22,640
a bunch of candies basically okay um


2248
02:41:22,640 --> 02:41:28,720
that's how you create a um you create a map in dart so


2249
02:41:28,720 --> 02:41:32,960
and the other property of a map is for instance you would say


2250
02:41:32,960 --> 02:41:36,319
um if you if you go and create an agent


2251
02:41:36,319 --> 02:41:40,479
again here you see it says two keys and a constant


2252
02:41:40,479 --> 02:41:44,640
map literal cannot be equal so it's doing some checks here making sure that


2253
02:41:44,640 --> 02:41:49,040
the keys are actually unique so keys inside a map


2254
02:41:49,040 --> 02:41:55,120
need to be unique all right so however if you go and change this and say var


2255
02:41:55,120 --> 02:42:00,399
person so and then you later go and say person


2256
02:42:00,399 --> 02:42:06,880
name is equal to foo like just like that and then you print the entire person


2257
02:42:06,880 --> 02:42:12,960
so i'm just gonna say print before and print after okay


2258
02:42:12,960 --> 02:42:19,040
and you can see here it said first time h key is 20 it has a value of 20 and the


2259
02:42:19,040 --> 02:42:23,439
name k has the value of foo with a capital f then the second time around on


2260
02:42:23,439 --> 02:42:29,359
the print statement on line 15 then we when we print the person it has


2261
02:42:29,359 --> 02:42:31,200
the um


2262
02:42:31,200 --> 02:42:35,840
key of age with a value of 20 because we didn't modify that and a key of name as


2263
02:42:35,840 --> 02:42:41,520
it was before with the value of foo with like six i think uh capital o's


2264
02:42:41,520 --> 02:42:45,279
so this is how you would modify a map


2265
02:42:45,279 --> 02:42:49,040
you would specify the key and then you would say equal to which is


2266
02:42:49,040 --> 02:42:52,240
an operator and then you would say the new value all right


2267
02:42:52,240 --> 02:42:58,560
um however if you added a new key here for instance um last name


2268
02:42:58,560 --> 02:43:01,680
and you say bad and that will just kind of like get


2269
02:43:01,680 --> 02:43:06,960
appended to the um to the map so age the same name


2270
02:43:06,960 --> 02:43:12,640
the same now you have a new key whose value is bas all right


2271
02:43:13,359 --> 02:43:17,840
and that is kind of like the basics of um


2272
02:43:17,840 --> 02:43:21,840
maps so there are lots of things you can do with


2273
02:43:21,840 --> 02:43:25,359
maps and i really encourage you just like everything else that i talked about


2274
02:43:25,359 --> 02:43:29,439
in this chapter that you go and read some of the documentations because


2275
02:43:29,439 --> 02:43:32,560
if you're following along with this course and your goal is to become a


2276
02:43:32,560 --> 02:43:36,080
software engineer and if you're for instance a project manager or a designer


2277
02:43:36,080 --> 02:43:39,680
ux or whoever you are um


2278
02:43:39,680 --> 02:43:43,120
i think you need to understand that software engineers


2279
02:43:43,120 --> 02:43:47,359
do not know all the answers you have to go and read documentation you have to


2280
02:43:47,359 --> 02:43:50,560
practice practice practice and put time into it


2281
02:43:50,560 --> 02:43:56,000
countless countless hours you need to put into learning so


2282
02:43:56,000 --> 02:43:59,200
i i mean this course i think is going to


2283
02:43:59,200 --> 02:44:04,560
be so many hours long the the way i can i mean i can see


2284
02:44:04,560 --> 02:44:07,920
uh the planning for all the chapters that i put here


2285
02:44:07,920 --> 02:44:12,000
there's so many chapters i think the entirety of this course is gonna go over


2286
02:44:12,000 --> 02:44:17,520
20 hours so you can imagine i can't go into details about every single thing


2287
02:44:17,520 --> 02:44:20,399
otherwise it is just this course is probably going to be like


2288
02:44:20,399 --> 02:44:25,040
200 300 hours uh it's unbelievable so


2289
02:44:25,040 --> 02:44:29,120
we can't do that so what i expect you to do now is just to open your browser and


2290
02:44:29,120 --> 02:44:34,000
just type dart maps documentation something like that


2291
02:44:34,000 --> 02:44:36,800
dart maps so


2292
02:44:36,800 --> 02:44:40,160
and you also need to know that now that you're starting to google things you


2293
02:44:40,160 --> 02:44:45,359
need to be aware of the word dart and that dart is an existing very popular


2294
02:44:45,359 --> 02:44:48,800
name for just darts darts okay


2295
02:44:48,800 --> 02:44:52,479
so sometimes depending on what you're googling


2296
02:44:52,479 --> 02:44:57,680
if a topic related to the classic darts that you throw is more


2297
02:44:57,680 --> 02:45:01,040
popular than the topic of the programming programming language which


2298
02:45:01,040 --> 02:45:05,760
kind of sounds the same it may pop up first so


2299
02:45:05,760 --> 02:45:11,120
in this case if you say dart map you may actually end up in some sort of


2300
02:45:11,120 --> 02:45:14,479
weird website that explains to you how you can throw darts


2301
02:45:14,479 --> 02:45:17,840
at a map i don't know i'm just trying i'm just


2302
02:45:17,840 --> 02:45:20,800
trying to bring it up because that i actually ended up in that situation that


2303
02:45:20,800 --> 02:45:24,240
i searched for something related to dark i actually ended up in a weird website


2304
02:45:24,240 --> 02:45:27,680
talking about darts as like a sport so


2305
02:45:27,680 --> 02:45:34,399
know that as well please all right now we've uh talked about maps


2306
02:45:34,399 --> 02:45:39,840
so i'm gonna take that in my notes um


2307
02:45:39,840 --> 02:45:45,200
now what's coming in the next chapter


2308
02:45:46,160 --> 02:45:53,359
we are gonna talk about a very um important concept in dart and many other


2309
02:45:53,359 --> 02:45:57,760
programming languages such as rust and swift and that is null safety or dart


2310
02:45:57,760 --> 02:46:02,960
calls it sound the sound noise safety it is a very important thing to know about


2311
02:46:02,960 --> 02:46:06,479
in dart and it will greatly help you in the


2312
02:46:06,479 --> 02:46:10,880
future as you write your flutter applications and in this course i'm


2313
02:46:10,880 --> 02:46:14,880
going to use a lot of um null


2314
02:46:14,880 --> 02:46:18,880
i'm going to make a lot of null references talk about


2315
02:46:18,880 --> 02:46:21,920
null quite a lot throughout the course so


2316
02:46:21,920 --> 02:46:26,399
it is very important that we go through that as soon as possible and we're


2317
02:46:26,399 --> 02:46:32,080
definitely not gonna leave that out so that's gonna be for chapter five so


2318
02:46:32,080 --> 02:46:37,120
keep an eye out for chapter five that is to follow so i hope that you enjoyed


2319
02:46:37,120 --> 02:46:41,040
this chapter chapter number four where we talked about dark control statements


2320
02:46:41,040 --> 02:46:45,359
and collections and i'll see you in the next chapter


2321
02:46:45,359 --> 02:46:49,040
hello everyone and welcome to chapter number five of


2322
02:46:49,040 --> 02:46:52,640
this vlogtech course in this chapter we're going to talk


2323
02:46:52,640 --> 02:46:55,680
about null safety um


2324
02:46:55,680 --> 02:46:59,040
in the previous chapter chapter number four we talked about


2325
02:46:59,040 --> 02:47:02,880
dart control statements and collections


2326
02:47:02,880 --> 02:47:08,640
and before we go on to talk about enumerations and objects and classes


2327
02:47:08,640 --> 02:47:11,600
i feel it is very important to talk about null


2328
02:47:11,600 --> 02:47:16,399
safety which is a concept that is available in most most modern languages


2329
02:47:16,399 --> 02:47:21,120
such as dart sorry such as rust and swift


2330
02:47:21,120 --> 02:47:26,000
so it is important to kind of like get this out the way before we continue


2331
02:47:26,000 --> 02:47:29,520
maybe not even get it out of the way but actually like


2332
02:47:29,520 --> 02:47:35,439
learn what it means and try to utilize it so that we can write better code so


2333
02:47:35,439 --> 02:47:39,680
um i thought to just bring up um


2334
02:47:39,680 --> 02:47:44,080
the concept of null values and why they're important to


2335
02:47:44,080 --> 02:47:48,080
handle well i mean you've seen so far that we have


2336
02:47:48,080 --> 02:47:52,880
data types a data type can be for instance a string can be an integer


2337
02:47:52,880 --> 02:47:57,520
and then you can put values in them um however


2338
02:47:57,520 --> 02:48:01,680
in programming languages you're also allowed to


2339
02:48:01,680 --> 02:48:05,600
have the concept of the absence of a value so


2340
02:48:05,600 --> 02:48:10,399
on one hand you have values so you for instance have a string value equal to


2341
02:48:10,399 --> 02:48:15,359
foo bar or your name or whatever it is and then on the other hand you can have


2342
02:48:15,359 --> 02:48:18,160
the absence of that value so you can see that


2343
02:48:18,160 --> 02:48:22,640
okay i have a container i have a variable that can contain the values of


2344
02:48:22,640 --> 02:48:28,319
type string or i have a variable that can contain any object


2345
02:48:28,319 --> 02:48:33,040
however at the moment i don't have that value so you will just tell dart that


2346
02:48:33,040 --> 02:48:39,279
this variable that i have right now that can either contain a valid value of


2347
02:48:39,279 --> 02:48:42,840
type object or of type string or


2348
02:48:42,840 --> 02:48:48,800
integer or it can sometimes also during its lifetime


2349
02:48:48,800 --> 02:48:51,439
contain nothing


2350
02:48:51,439 --> 02:48:58,240
and this nothingness is the concept that is known as null um


2351
02:48:58,240 --> 02:49:03,760
so it's null in dart is a keyword um


2352
02:49:03,760 --> 02:49:07,520
it means that it's a word that you can just write in your text editor as you're


2353
02:49:07,520 --> 02:49:12,479
writing your code and you say that a variable's value is equal to null


2354
02:49:12,479 --> 02:49:16,319
and this tells dart that well okay this variable at the moment doesn't contain


2355
02:49:16,319 --> 02:49:22,319
any values so null is not really a value but it's actually the


2356
02:49:22,319 --> 02:49:26,640
absence of a value you should think of it that way


2357
02:49:26,640 --> 02:49:28,880
so


2358
02:49:29,200 --> 02:49:33,439
let's have a look at this um there's a little bit of a documentation


2359
02:49:33,439 --> 02:49:36,399
here um


2360
02:49:36,479 --> 02:49:41,120
uh on dart's website dart dev null safety so i'm just going to click on it


2361
02:49:41,120 --> 02:49:44,319
you're not going to see my screen at the moment


2362
02:49:44,319 --> 02:49:48,000
i'm just bringing it up in a browser


2363
02:49:48,000 --> 02:49:51,279
a browser window i'm going to bring it on the screen


2364
02:49:51,279 --> 02:49:55,920
and increase the size a little bit and also change the


2365
02:49:55,920 --> 02:50:00,319
sizing on the window as well so you can see the


2366
02:50:00,319 --> 02:50:05,600
contents in its entirety um so


2367
02:50:05,600 --> 02:50:09,279
as you can see in dart it's called sound null null safety and there's


2368
02:50:09,279 --> 02:50:12,399
documentation about what this actually means


2369
02:50:12,399 --> 02:50:15,120
um we're gonna look at uh


2370
02:50:15,120 --> 02:50:18,800
[Music] look at what's not safety actually means


2371
02:50:18,800 --> 02:50:21,840
in dart and i'm gonna give you a lot of examples of what that actually


2372
02:50:21,840 --> 02:50:25,520
practically means and there's documentation here in dart's website


2373
02:50:25,520 --> 02:50:30,720
simple simply because dart um in its older versions and not in its


2374
02:50:30,720 --> 02:50:35,520
current versions it in its older versions it didn't support uh all safety


2375
02:50:35,520 --> 02:50:39,040
so there was a lot of code written manually by programmers in order to for


2376
02:50:39,040 --> 02:50:42,080
instance check whether


2377
02:50:42,640 --> 02:50:48,000
a value is absent in a variable and then there is as you can see here it


2378
02:50:48,000 --> 02:50:52,479
says migrating an existing package or app so there is documentation written by


2379
02:50:52,479 --> 02:50:56,319
the dart team in order to help developers understand how they can move


2380
02:50:56,319 --> 02:51:00,560
their old code to the new code that supports null safety


2381
02:51:00,560 --> 02:51:04,160
um however if you're following along with this course and you're it's like


2382
02:51:04,160 --> 02:51:08,479
you're basically just following chronologically


2383
02:51:08,479 --> 02:51:12,000
from chapter one to all the other chapters i don't know how many chapters


2384
02:51:12,000 --> 02:51:14,640
were going to happen if you're following along with this course you don't have to


2385
02:51:14,640 --> 02:51:18,399
think about migrating because the code that we're writing in this entire course


2386
02:51:18,399 --> 02:51:22,640
is going to be null safe meaning that we're going to take advantage of darts


2387
02:51:22,640 --> 02:51:27,439
null safety operators and meaning that we are not going to manually check for


2388
02:51:27,439 --> 02:51:31,920
values being null and then doing some branches of code whether they're null or


2389
02:51:31,920 --> 02:51:35,520
not but so what i mean is that if you read the


2390
02:51:35,520 --> 02:51:38,960
documentation for sound safety you don't have to worry about the migration parts


2391
02:51:38,960 --> 02:51:42,240
just read the rest okay


2392
02:51:42,880 --> 02:51:47,439
so with that out the way i'm just gonna


2393
02:51:47,439 --> 02:51:51,200
make sure that i take that in my notes here that's why i'm looking in this


2394
02:51:51,200 --> 02:51:53,760
direction because i have all my notes here


2395
02:51:53,760 --> 02:51:57,600
um let's close this window and bring up our


2396
02:51:57,600 --> 02:52:02,479
visual studio code window that we had from earlier i'm gonna put it here


2397
02:52:02,479 --> 02:52:08,800
and i'm just gonna ensure that it is of the correct height as well so you're


2398
02:52:08,800 --> 02:52:13,520
gonna see it the window in its entirety okay


2399
02:52:13,520 --> 02:52:16,399
so now that we talked about what non-values


2400
02:52:16,399 --> 02:52:21,120
are and that they're the absence of a value let's have a look at


2401
02:52:21,120 --> 02:52:26,080
making any type nullable and if you follow along with the


2402
02:52:26,080 --> 02:52:28,800
with the course up to this point you should have some sort of a simulator or


2403
02:52:28,800 --> 02:52:32,720
an emulator running and then you should have done command shift p or control


2404
02:52:32,720 --> 02:52:35,840
shift p uh depending on your operating system


2405
02:52:35,840 --> 02:52:40,479
command shift p in mac and ctrl shift p in linux and windows in order to bring


2406
02:52:40,479 --> 02:52:44,720
up the um this menu and then you can just type


2407
02:52:44,720 --> 02:52:47,840
flutter select device and then you just select the device that you want to run


2408
02:52:47,840 --> 02:52:50,640
the code out so i'm kind of assuming that you've already done that and that


2409
02:52:50,640 --> 02:52:54,000
your code is running and this is something that we talked about in


2410
02:52:54,000 --> 02:52:58,479
earlier chapters so we're not going to go through that again


2411
02:52:58,479 --> 02:53:02,319
so i have a an iphone simulator which you cannot see


2412
02:53:02,319 --> 02:53:06,000
on the screen but i have it running in a separate uh screen just because we don't


2413
02:53:06,000 --> 02:53:08,479
have enough real estate i can bring it up to this


2414
02:53:08,479 --> 02:53:11,760
window but it will just take a lot of space so i'm gonna bring it up to


2415
02:53:11,760 --> 02:53:16,000
another monitor so you don't see it so this code at the moment is running


2416
02:53:16,000 --> 02:53:19,439
live so if i press command s then it's gonna run and just print the output for


2417
02:53:19,439 --> 02:53:22,800
us okay um


2418
02:53:22,800 --> 02:53:27,920
now let's talk about making any type um


2419
02:53:27,920 --> 02:53:31,439
nullable and there is a


2420
02:53:31,439 --> 02:53:34,240
way to do that let's let's have a look here


2421
02:53:34,240 --> 02:53:37,600
we talked about that null is a keyword and that that's why you can see it is


2422
02:53:37,600 --> 02:53:40,880
like um highlighted here in a different color


2423
02:53:40,880 --> 02:53:45,200
so if you for instance say final name is foo


2424
02:53:45,200 --> 02:53:48,080
all right as you can see it says okay i accept


2425
02:53:48,080 --> 02:53:53,760
this as his name is foo but you can't just say name like it's a null because


2426
02:53:53,760 --> 02:53:57,520
then it doesn't understand is it an object is it's a string is it nil right


2427
02:53:57,520 --> 02:54:01,760
is it an integer and if you type here name then you see it's just dynamic it


2428
02:54:01,760 --> 02:54:05,600
doesn't understand the type so


2429
02:54:05,600 --> 02:54:09,600
and we'll talk about dynamic a little bit later um but what you can do is to


2430
02:54:09,600 --> 02:54:14,479
actually specify that okay i want a string data type that


2431
02:54:14,479 --> 02:54:18,720
it can contain normal names or strings as we call it


2432
02:54:18,720 --> 02:54:22,000
like series of characters or it can sometimes be null and in that case you


2433
02:54:22,000 --> 02:54:24,960
have to actually specify the data type as


2434
02:54:24,960 --> 02:54:29,279
um not just string not just this because you'll see you'll


2435
02:54:29,279 --> 02:54:32,640
get an error and you'll actually get a suggestion it


2436
02:54:32,640 --> 02:54:36,640
says try changing the type of the variable or casting the right hand type


2437
02:54:36,640 --> 02:54:39,760
to string but we're not going to do that wasn't it


2438
02:54:39,760 --> 02:54:42,560
such a it wasn't such a useful suggestion


2439
02:54:42,560 --> 02:54:47,680
because what you want here is to actually make dart understand that this


2440
02:54:47,680 --> 02:54:51,920
variable right here or this constant right here can sometimes contain the


2441
02:54:51,920 --> 02:54:55,760
value of null and the way to do that is you


2442
02:54:55,760 --> 02:55:01,359
put a suffix after your data type as a question mark


2443
02:55:01,359 --> 02:55:05,439
so this is this is the syntax which is actually used in some other languages as


2444
02:55:05,439 --> 02:55:09,680
well it's used in swift as well so


2445
02:55:09,680 --> 02:55:14,479
um this tells dart that well here if we make it actually variable as you can see


2446
02:55:14,479 --> 02:55:19,120
or sorry like this so you say i have a variable


2447
02:55:19,120 --> 02:55:25,040
it's it's a string but sometimes it may the string value may be absent


2448
02:55:25,040 --> 02:55:30,800
um and then you'll just say okay now name is foo


2449
02:55:30,800 --> 02:55:34,960
and you can say now name is no so this is kind of like resetting out


2450
02:55:34,960 --> 02:55:39,359
names so if i just say okay print name


2451
02:55:39,359 --> 02:55:45,439
and then after foo i say print name okay so let's just clear the console and just


2452
02:55:45,439 --> 02:55:48,800
run this application you can see the first time it says it's null


2453
02:55:48,800 --> 02:55:53,120
and then the second time around it says it is foo


2454
02:55:53,120 --> 02:55:57,120
so this is how you tell dark that you want


2455
02:55:57,120 --> 02:56:00,720
to have nullable data type and you can do this with


2456
02:56:00,720 --> 02:56:05,439
pretty much all data types so you can just say okay i have an integer


2457
02:56:05,439 --> 02:56:10,399
um of age and that's 20. but you can see you cannot now assign the value of null


2458
02:56:10,399 --> 02:56:14,399
to integer because it's not nullable but as soon as you make it nullable then


2459
02:56:14,399 --> 02:56:19,439
that is accepted so um and of course you can do


2460
02:56:19,439 --> 02:56:22,880
um you can do different operations using


2461
02:56:22,880 --> 02:56:26,080
for instance we in the previous chapter i believe we talked about control


2462
02:56:26,080 --> 02:56:31,920
statements if and else so you can say for instance if age


2463
02:56:31,920 --> 02:56:36,000
is 20 and then you can encode or you can say


2464
02:56:36,000 --> 02:56:39,359
if age is null execute some code


2465
02:56:39,359 --> 02:56:44,640
so they work as you would expect so there is no difference really


2466
02:56:44,640 --> 02:56:47,920
and i mean if you if you think about that


2467
02:56:47,920 --> 02:56:54,319
notability nullability is just like a suffix to a data type you can also say


2468
02:56:54,319 --> 02:56:57,439
okay pretty much any data type can be nullable and that's that's correct like


2469
02:56:57,439 --> 02:57:01,600
for instance if you have a list of string


2470
02:57:01,600 --> 02:57:06,399
of names and you can say okay i have foo


2471
02:57:06,399 --> 02:57:12,560
and bar here this is a list of strings i've talked about lists in chapter four


2472
02:57:12,560 --> 02:57:17,359
now you can you can see here that list of strings there are two data types here


2473
02:57:17,359 --> 02:57:22,880
the list itself and the contents that it holds so if you want to


2474
02:57:22,880 --> 02:57:28,240
make the list in itself nullable then you would put the question mark after


2475
02:57:28,240 --> 02:57:33,680
okay this means this list of strings in itself can be absent so you say name is


2476
02:57:33,680 --> 02:57:38,560
null and that's accepted all right however since you're telling dart that


2477
02:57:38,560 --> 02:57:43,680
okay the names uh value here can its entirety be null


2478
02:57:43,680 --> 02:57:46,399
but its values are not supposed to be null


2479
02:57:46,399 --> 02:57:50,960
so if you then go in here and just put null in here then you see that you got


2480
02:57:50,960 --> 02:57:53,520
an error and that's because dart is saying that


2481
02:57:53,520 --> 02:57:58,160
okay you just promised me that the list in itself it can be absent but


2482
02:57:58,160 --> 02:58:01,520
as soon as it is not absent meaning that as soon as


2483
02:58:01,520 --> 02:58:06,000
it is present there with some values it's the values cannot


2484
02:58:06,000 --> 02:58:10,560
be no and that means that the this type should be


2485
02:58:10,560 --> 02:58:15,680
you're telling me here that it is not so if you want to make an optional


2486
02:58:15,680 --> 02:58:18,640
or nullable list of


2487
02:58:18,640 --> 02:58:22,960
optional strings then you would put the question mark after the data type of


2488
02:58:22,960 --> 02:58:26,080
string as well so this is now


2489
02:58:26,080 --> 02:58:32,960
i mean the way you should read this is i have a list of strings and i call that


2490
02:58:32,960 --> 02:58:38,960
list names names can sometimes be no


2491
02:58:38,960 --> 02:58:44,000
meaning that it can be absent and


2492
02:58:44,000 --> 02:58:50,399
if it is not absent it can contain objects of type string


2493
02:58:50,399 --> 02:58:55,520
that themselves can sometimes be absent meaning that okay like for instance if


2494
02:58:55,520 --> 02:58:59,200
you say fu bar no that's accepted but you can


2495
02:58:59,200 --> 02:59:02,160
also say names is no


2496
02:59:02,160 --> 02:59:07,279
see what i mean so both the container which is called names and the values


2497
02:59:07,279 --> 02:59:11,520
that it contains can be optional and the word optional is very important


2498
02:59:11,520 --> 02:59:14,000
for you to learn it's it's kind of like an


2499
02:59:14,000 --> 02:59:18,800
industry accepted way of talking about nulls and nullable values so


2500
02:59:18,800 --> 02:59:21,920
this is optional all right


2501
02:59:23,520 --> 02:59:27,920
okay um now we talked about that


2502
02:59:27,920 --> 02:59:32,720
nullable values and optional values all right basically you can use those words


2503
02:59:32,720 --> 02:59:36,960
interchangeably so if you're talking with a colleague


2504
02:59:36,960 --> 02:59:40,720
programmer you would say oh how would you describe this okay this is an


2505
02:59:40,720 --> 02:59:45,680
optional list of optional strings or you could also say nullable list of nullable


2506
02:59:45,680 --> 02:59:49,359
strings but optional is also word that is typically


2507
02:59:49,359 --> 02:59:54,640
used to talk about nullable values all right


2508
02:59:55,359 --> 03:00:01,120
okay we talked about making any type nullable so um


2509
03:00:01,200 --> 03:00:04,160
i'm just gonna mark that as


2510
03:00:04,160 --> 03:00:07,920
done that we've talked about it in notes all right


2511
03:00:07,920 --> 03:00:15,040
now let's talk about cherry picking non-null values and what this means is


2512
03:00:16,080 --> 03:00:21,279
with dart you can easily ask the


2513
03:00:21,279 --> 03:00:24,560
language to give you


2514
03:00:24,560 --> 03:00:28,720
values that are not null at all i'll explain what this actually


2515
03:00:28,720 --> 03:00:34,000
means let's say that you have a um


2516
03:00:34,000 --> 03:00:40,399
you have a string final um string first name


2517
03:00:40,399 --> 03:00:44,399
and is equal to foo okay


2518
03:00:44,399 --> 03:00:47,680
now let's just say this is a constant all right that's


2519
03:00:47,680 --> 03:00:52,560
that's what the suggestion was you see i wrote final because i was not planning


2520
03:00:52,560 --> 03:00:55,120
to reassign this first name value to


2521
03:00:55,120 --> 03:00:57,920
anything else but then i got a suggestion to actually use the word


2522
03:00:57,920 --> 03:01:03,040
final here or the keyword final sorry the keyword comms as you can see here


2523
03:01:03,040 --> 03:01:07,359
so let's say const all right


2524
03:01:07,359 --> 03:01:09,680
um now


2525
03:01:09,680 --> 03:01:15,520
what we want to do here then is to also create a last name


2526
03:01:15,520 --> 03:01:19,120
or middle name r


2527
03:01:19,120 --> 03:01:22,880
and then we say last name


2528
03:01:25,040 --> 03:01:28,800
and actually what we're going to do is we're going to say the first


2529
03:01:28,800 --> 03:01:34,160
the first name is null all right so first name middle made bar and last


2530
03:01:34,160 --> 03:01:38,240
name bass now if you want to


2531
03:01:38,240 --> 03:01:41,200
if you have these values and you want to for instance


2532
03:01:41,200 --> 03:01:44,479
i mean right now you can actually see the values that you put here but


2533
03:01:44,479 --> 03:01:48,160
sometimes these values are passed to your function so you don't know what


2534
03:01:48,160 --> 03:01:52,080
they are right now you can see what they are so it's easy if i told you pick the


2535
03:01:52,080 --> 03:01:56,640
first non-null value then you would say middle name because you can see it


2536
03:01:56,640 --> 03:02:00,640
however if you had a function for instance test here that accepted those


2537
03:02:00,640 --> 03:02:04,240
values for instance string first name


2538
03:02:04,240 --> 03:02:07,920
string last name and then string


2539
03:02:07,920 --> 03:02:13,680
or yeah middle name etc then you wouldn't know what those values are


2540
03:02:13,680 --> 03:02:17,439
or you cannot make an assumption about what those values are except that they


2541
03:02:17,439 --> 03:02:22,319
are nullable or optional strings so i hope that you get what i'm trying to


2542
03:02:22,319 --> 03:02:27,840
say now if someone told you to pick the first non-null value


2543
03:02:27,840 --> 03:02:33,840
one way to do that is like the old way of doing that is to say for um


2544
03:02:33,840 --> 03:02:36,479
if first name


2545
03:02:36,479 --> 03:02:42,479
is not snow um then you would say oh i again okay i


2546
03:02:42,479 --> 03:02:48,240
know first name is the first non


2547
03:02:48,240 --> 03:02:54,000
small value okay and then you say okay if first name


2548
03:02:54,000 --> 03:02:58,800
isn't null then we pick it otherwise else if


2549
03:02:58,800 --> 03:03:02,319
middle name is not null okay


2550
03:03:02,319 --> 03:03:07,520
and then you say okay middle name is the first nominal value


2551
03:03:07,520 --> 03:03:13,120
and then else if again so last name is not null


2552
03:03:13,120 --> 03:03:17,279
then you would print the same thing so this is very repetitive


2553
03:03:17,279 --> 03:03:20,240
um and it's basically


2554
03:03:20,240 --> 03:03:22,560
um


2555
03:03:22,640 --> 03:03:27,439
so it is basically very verbose in the in the way it is


2556
03:03:27,439 --> 03:03:31,120
created there is a better way of doing this and


2557
03:03:31,120 --> 03:03:35,200
that is with the uh question mark question mark operator


2558
03:03:35,200 --> 03:03:38,160
in dart which is available in some other


2559
03:03:38,160 --> 03:03:40,880
programming languages such as swift as well


2560
03:03:40,880 --> 03:03:45,120
so the way to do that then is you would want to pick the first non-null value so


2561
03:03:45,120 --> 03:03:47,279
you would say final


2562
03:03:47,279 --> 03:03:53,040
or const first non-null value and you would say that's equal to first


2563
03:03:53,040 --> 03:03:57,120
name or or so this is kind of like question


2564
03:03:57,120 --> 03:04:00,640
mark question mark middle name


2565
03:04:00,640 --> 03:04:04,000
and then question mark question mark last name


2566
03:04:04,000 --> 03:04:06,800
so and i mean we're getting a warning here


2567
03:04:06,800 --> 03:04:11,840
just because dark understands already that this middle name although a


2568
03:04:11,840 --> 03:04:15,840
so it's this is although an optional basically it has a value


2569
03:04:15,840 --> 03:04:21,680
but if we make this null so and that warning goes away but i mean


2570
03:04:21,680 --> 03:04:24,720
it would probably be cleaner if we actually pass these as parameters into


2571
03:04:24,720 --> 03:04:28,000
this function so we don't get these weird warnings


2572
03:04:28,000 --> 03:04:32,080
but the way the question mark question mark operator is working is that it says


2573
03:04:32,080 --> 03:04:36,319
it is an infix operator just so you know in in from chapter four you know an


2574
03:04:36,319 --> 03:04:38,960
infix operator is an operator that has two


2575
03:04:38,960 --> 03:04:42,080
things and one on each on each side the right


2576
03:04:42,080 --> 03:04:45,279
and left so in this case on the right side we


2577
03:04:45,279 --> 03:04:48,640
have middle name and on the left side we have first name so what this operator


2578
03:04:48,640 --> 03:04:52,960
does it says if the value on my left side is null


2579
03:04:52,960 --> 03:04:56,560
i'm gonna pick the value on my right okay


2580
03:04:56,560 --> 03:05:01,040
and let's now in this case say okay middle name is not now so what it does


2581
03:05:01,040 --> 03:05:04,960
it says first name or you null yeah you're not then i'm gonna go to the


2582
03:05:04,960 --> 03:05:09,120
right side middle name are you no no i'm not no then it's gonna pick that and the


2583
03:05:09,120 --> 03:05:14,160
rest of the statement is not gonna be executed


2584
03:05:14,160 --> 03:05:18,960
however if middle name was also known in this case then what happens is that it


2585
03:05:18,960 --> 03:05:22,240
begins from the left is a first name or you know


2586
03:05:22,240 --> 03:05:26,880
yes middle name or you know yes so this entire


2587
03:05:26,880 --> 03:05:29,760
operation here


2588
03:05:30,080 --> 03:05:34,880
it doesn't yield any value and then so this entire operation will


2589
03:05:34,880 --> 03:05:39,680
let me know so it says okay now i have to compare our


2590
03:05:39,680 --> 03:05:44,319
left left hand side are you know yeah we know that this entire thing was no


2591
03:05:44,319 --> 03:05:46,560
and then it says right hand side are you null


2592
03:05:46,560 --> 03:05:51,279
nope i'm bass then it takes pass so the


2593
03:05:51,279 --> 03:05:54,880
this question mark question mark operator is a null aware operator that


2594
03:05:54,880 --> 03:05:57,760
picks either the left side or the right side


2595
03:05:57,760 --> 03:06:04,399
whichever one is not null first in that order so left side are you null


2596
03:06:04,399 --> 03:06:07,760
if you're null i go to the right side but if you're not not


2597
03:06:07,760 --> 03:06:12,960
not null i'll pick you so keep that in mind it is a very handy


2598
03:06:12,960 --> 03:06:18,560
operator and it will shorten your code quite a lot all right


2599
03:06:18,560 --> 03:06:22,720
now if we then go in here and say first non-null value you can see it actually


2600
03:06:22,720 --> 03:06:26,880
says oh it's a string however if we


2601
03:06:26,880 --> 03:06:30,960
if these were parameters so if we said first name


2602
03:06:30,960 --> 03:06:36,000
and then string last name sorry middle name


2603
03:06:36,000 --> 03:06:41,439
last name they were not provided to us like that


2604
03:06:41,439 --> 03:06:45,520
converter was okay and then we say final


2605
03:06:45,760 --> 03:06:49,359
now if we say first non-null value in this


2606
03:06:49,359 --> 03:06:53,359
case since it is a normal case excuse me


2607
03:06:53,359 --> 03:06:58,319
where the dart compiler isn't working with constants


2608
03:06:58,560 --> 03:07:02,399
and then it cannot resolve this to a constant


2609
03:07:02,399 --> 03:07:05,520
value at the moment so it says okay there are three optional values i have


2610
03:07:05,520 --> 03:07:07,760
no idea what they are so


2611
03:07:07,760 --> 03:07:11,840
i'm gonna do my best to pick the first nominal value depending on i mean based


2612
03:07:11,840 --> 03:07:16,960
on what we provided here however i may not be able to solve this


2613
03:07:16,960 --> 03:07:19,920
so the final result here as you'll see is


2614
03:07:19,920 --> 03:07:24,080
and it's an optional string meaning that well i may not be able to resolve this


2615
03:07:24,080 --> 03:07:30,640
meaning that this entire operation on top on line 9 may result in a null


2616
03:07:30,640 --> 03:07:35,520
all right sorry about that sorry about my voice


2617
03:07:35,520 --> 03:07:38,880
so that is the question mark question mark


2618
03:07:38,880 --> 03:07:45,359
operator so i'm just gonna mark that that we talked about it in my notes


2619
03:07:45,359 --> 03:07:48,479
okay so


2620
03:07:48,479 --> 03:07:53,840
that was that um now


2621
03:07:53,840 --> 03:07:59,439
let's talk about the next topic uh which is the null aware assignment operator i


2622
03:07:59,439 --> 03:08:02,640
think that's that's this actual official name


2623
03:08:02,640 --> 03:08:07,120
um this operator is very similar to the question mark question mark operator in


2624
03:08:07,120 --> 03:08:11,600
that it it tries to resolve


2625
03:08:11,600 --> 03:08:15,279
a variable to make sure it is not null


2626
03:08:15,279 --> 03:08:20,479
it's going to do its best um and let's have a look at an example let's just say


2627
03:08:20,479 --> 03:08:23,359
um bar


2628
03:08:23,359 --> 03:08:27,040
and i'm gonna say actually let's just say


2629
03:08:27,040 --> 03:08:31,040
ring and name is first name so we begin we


2630
03:08:31,040 --> 03:08:35,760
say that we have an optional name and we begin by assigning first name to


2631
03:08:35,760 --> 03:08:39,840
it so it means that this name might at the moment depending


2632
03:08:39,840 --> 03:08:42,319
on the value of first name it may be null


2633
03:08:42,319 --> 03:08:46,479
and now if that is null you may want to assign


2634
03:08:46,479 --> 03:08:50,479
another value to it all right and then you can do that with this


2635
03:08:50,479 --> 03:08:55,600
operator you would say last name let's see what happened here


2636
03:08:55,600 --> 03:09:01,439
both trying to oh is it this yes it is equal to so i actually should change


2637
03:09:01,439 --> 03:09:05,840
this case to equal to


2638
03:09:05,840 --> 03:09:09,439
question mark yes and i'm going to bring it up again


2639
03:09:09,439 --> 03:09:13,680
so that it is actually correct let's say


2640
03:09:14,319 --> 03:09:19,120
and then name equal to isn't this working


2641
03:09:19,120 --> 03:09:22,560
lastly oh dummy


2642
03:09:22,560 --> 03:09:28,160
where was it this one try changing the


2643
03:09:29,040 --> 03:09:33,359
it like this i'm actually a bit unsure right now so


2644
03:09:33,359 --> 03:09:35,840
let's have a look actually what this does


2645
03:09:35,840 --> 03:09:39,359
um and it's three positional and then we


2646
03:09:39,359 --> 03:09:43,439
say no no no and then bar


2647
03:09:43,439 --> 03:09:48,479
and then baz here okay so first name is null


2648
03:09:48,479 --> 03:09:51,359
middle name is bar and last name is bass and


2649
03:09:51,359 --> 03:09:54,800
to be honest with you i mean this is quite a lot for me as well it is


2650
03:09:54,800 --> 03:09:58,960
something that is like the syntax of the programming language it is


2651
03:09:58,960 --> 03:10:02,880
something that you will kind of need to live with you're not gonna memorize this


2652
03:10:02,880 --> 03:10:07,279
all just in in your head all the time of course like the main parts of it you're


2653
03:10:07,279 --> 03:10:12,880
gonna you're gonna remember but uh not all of it so and you can see for


2654
03:10:12,880 --> 03:10:16,720
me as well i'm just like at the moment okay which one is it um


2655
03:10:16,720 --> 03:10:21,520
so i'm gonna test that so i'm to begin with we say name is first name and


2656
03:10:21,520 --> 03:10:27,120
if that is null then assign actually let's just say middle name


2657
03:10:27,120 --> 03:10:30,560
name here then use middle name and then print the name finally


2658
03:10:30,560 --> 03:10:34,239
and i can see it says bar here so it's actually question mark question mark


2659
03:10:34,239 --> 03:10:37,040
equal um


2660
03:10:37,040 --> 03:10:42,000
so i actually maybe need to edit this text one more time so i'm just going to


2661
03:10:42,000 --> 03:10:46,640
say question mark question mark equal bring it up because i think question


2662
03:10:46,640 --> 03:10:49,840
mark equal is not going to work an equal question mark isn't going to work either


2663
03:10:49,840 --> 03:10:53,200
it's not a value it's not a valid syntax a question mark question mark equals


2664
03:10:53,200 --> 03:10:55,279
sorry about that so


2665
03:10:55,279 --> 03:10:58,720
what this operator at the moment is doing it says that i'm gonna take the


2666
03:10:58,720 --> 03:11:02,960
value on the left hand side and check whether it is null or not if it is null


2667
03:11:02,960 --> 03:11:08,640
then i'm gonna assign the value on the right hand side to the left hand side


2668
03:11:08,640 --> 03:11:12,399
if it is not null i'm gonna leave it alone


2669
03:11:12,399 --> 03:11:14,319
okay so


2670
03:11:14,319 --> 03:11:17,439
at the moment first name as you saw here is null


2671
03:11:17,439 --> 03:11:21,120
the first parameter that we passed here so what it says it says okay i'm going


2672
03:11:21,120 --> 03:11:24,000
to check then for middle name if


2673
03:11:24,000 --> 03:11:28,399
if name is null and it is null and then it says okay middle name are you


2674
03:11:28,399 --> 03:11:32,560
like presenter and i will assign that value here so it will be


2675
03:11:32,560 --> 03:11:34,800
um [Music]


2676
03:11:34,800 --> 03:11:38,800
basically it will be bar which is the value of the milling


2677
03:11:38,800 --> 03:11:42,880
now if we in here said


2678
03:11:42,880 --> 03:11:46,239
middle name is also null


2679
03:11:46,640 --> 03:11:52,160
right we could have another operator here that says okay if after taking the


2680
03:11:52,160 --> 03:11:56,399
middle name we are still null then take the last name


2681
03:11:56,399 --> 03:11:58,640
so


2682
03:11:58,800 --> 03:12:03,359
and you can see bass gets printed to the screen and that is because because bass


2683
03:12:03,359 --> 03:12:06,800
is the last parameter that we're checking on line 10


2684
03:12:06,800 --> 03:12:10,160
and its value is not null um


2685
03:12:10,160 --> 03:12:15,040
so you can see how like if i then went here and actually said the first name is


2686
03:12:15,040 --> 03:12:18,560
bar then you will see that that will be the value that gets printed to the


2687
03:12:18,560 --> 03:12:21,200
screen here because


2688
03:12:21,200 --> 03:12:25,760
right here name or first name which is bar got


2689
03:12:25,760 --> 03:12:30,960
assigned to name so it is an optional string but it has a value which is bar


2690
03:12:30,960 --> 03:12:35,600
then when you come to this line number nine then you're telling dart look if


2691
03:12:35,600 --> 03:12:40,319
name is null then assign middle name to it and dart says well


2692
03:12:40,319 --> 03:12:44,479
name isn't null it is bar so i'm not going to assign middle name to it and


2693
03:12:44,479 --> 03:12:48,479
then it goes to line number 10 and does the exact same thing all right


2694
03:12:48,479 --> 03:12:53,680
so that is like the null aware assignment operators and uh


2695
03:12:53,680 --> 03:12:57,439
it is useful i personally i mean to be honest with


2696
03:12:57,439 --> 03:13:00,000
you i as you could as you could kind of guess


2697
03:13:00,000 --> 03:13:03,600
i don't use this operator so often it is there


2698
03:13:03,600 --> 03:13:07,760
and i have no shame in saying that pretty much in none of my programs have


2699
03:13:07,760 --> 03:13:11,520
i had to use this so it is present for you to


2700
03:13:11,520 --> 03:13:15,120
use it is available if you want to use it so just


2701
03:13:15,120 --> 03:13:18,960
don't be like me but try to remember the syntax this question mark question mark


2702
03:13:18,960 --> 03:13:22,399
equal okay


2703
03:13:22,479 --> 03:13:26,720
and i'm gonna actually fix that in my notes as well that it is question mark


2704
03:13:26,720 --> 03:13:31,200
question mark equal okay


2705
03:13:31,439 --> 03:13:35,840
and i'm going to check it in the notes that we've talked about it


2706
03:13:37,200 --> 03:13:42,640
now let's talk a little about a little bit about conditional method or


2707
03:13:42,640 --> 03:13:47,040
property access or conditional invocation


2708
03:13:47,040 --> 03:13:49,920
now as we talked about in the previous


2709
03:13:49,920 --> 03:13:54,640
chapter with dart as like many other programming languages you can


2710
03:13:54,640 --> 03:14:00,239
use the dot syntax in order to access or drill down inside


2711
03:14:00,239 --> 03:14:04,319
properties and methods or functions inside other objects as we saw for


2712
03:14:04,319 --> 03:14:10,399
instance with the case of or lists in dart you can say


2713
03:14:10,399 --> 03:14:14,960
i have a list and then you want to get its length then you would say


2714
03:14:14,960 --> 03:14:20,000
the name of the list dot links and that drills down inside that list and gets


2715
03:14:20,000 --> 03:14:25,359
the links property okay however as you saw also earlier in this


2716
03:14:25,359 --> 03:14:31,040
chapter in chapter number five even lists or pretty much any data type


2717
03:14:31,040 --> 03:14:36,479
in dart can also be nullable so how do you access


2718
03:14:36,479 --> 03:14:42,399
properties of a null object so let's have a look at that now


2719
03:14:42,399 --> 03:14:46,479
let's say i'm gonna i'm gonna actually delete these properties uh the


2720
03:14:46,479 --> 03:14:50,399
parameters that come here to our function


2721
03:14:50,399 --> 03:14:56,399
and i'm to say and i'm going to go down here and remove these parameters as well


2722
03:14:56,399 --> 03:15:02,319
and in here let's just create an optional list of strings


2723
03:15:02,319 --> 03:15:07,279
not optional list of optional strings but at just an optional list of valid


2724
03:15:07,279 --> 03:15:12,479
strings okay so i'm just going to say list of strings as an option i'm sorry


2725
03:15:12,479 --> 03:15:15,279
an optional list and i'm just going to say means


2726
03:15:15,279 --> 03:15:19,520
and that is equal to let's just say at the moment foo all right


2727
03:15:19,520 --> 03:15:24,239
now in here if you try to say final length


2728
03:15:24,239 --> 03:15:29,680
of names or number of names is names links


2729
03:15:29,680 --> 03:15:34,399
okay if you then look at the data type here i


2730
03:15:34,399 --> 03:15:38,399
mean we could actually say this is null okay


2731
03:15:38,399 --> 03:15:42,720
and you can see here dart actually is allowed to


2732
03:15:42,720 --> 03:15:49,200
or is able to give you an error knowing that this list it is null at the


2733
03:15:49,200 --> 03:15:52,800
moment however if you accept it i think it's actually better that we accept this


2734
03:15:52,800 --> 03:15:58,239
value as a parameter so that dart analyzer cannot be too smart about like


2735
03:15:58,239 --> 03:16:03,439
making assumptions about what this actually is at the moment so


2736
03:16:03,439 --> 03:16:06,720
you can see the analyzer is telling you it cannot be


2737
03:16:06,720 --> 03:16:11,920
unconditionally accessed because the receiver can be null and that means yeah


2738
03:16:11,920 --> 03:16:15,359
exactly as it says it says names can mean all i don't know if it's not right


2739
03:16:15,359 --> 03:16:18,960
now or not but it can be


2740
03:16:18,960 --> 03:16:23,279
so how do you access that one way to do that like the old way of doing that is


2741
03:16:23,279 --> 03:16:27,920
to say if names is not null


2742
03:16:27,920 --> 03:16:32,560
then length is named length okay


2743
03:16:32,560 --> 03:16:39,439
uh final length is uh in x okay so that tells dart that


2744
03:16:39,439 --> 03:16:42,640
look i'm actually checking for null values


2745
03:16:42,640 --> 03:16:48,080
um or i'm checking that this list is not null on line eight


2746
03:16:48,080 --> 03:16:52,800
and if it is not null then i would access its length property


2747
03:16:52,800 --> 03:16:56,720
and this is kind of it's called type promotion


2748
03:16:56,720 --> 03:17:00,960
and type as in data type so in this case you can see on line


2749
03:17:00,960 --> 03:17:04,880
number eight or now if i go and create a new line on


2750
03:17:04,880 --> 03:17:08,080
number online number eight and i say names


2751
03:17:08,080 --> 03:17:13,439
this is an optional list that can contain strings


2752
03:17:13,439 --> 03:17:17,920
and in here you can see it is um it is typed as the


2753
03:17:17,920 --> 03:17:23,520
same but it is promoted to not being null because you've already checked for


2754
03:17:23,520 --> 03:17:27,520
it because if you remove these lines of code you can see now that you get an


2755
03:17:27,520 --> 03:17:31,439
error the exact same line but if you check first for null and you don't get


2756
03:17:31,439 --> 03:17:35,840
the error it's a type promotion okay so this is kind of like the old way of


2757
03:17:35,840 --> 03:17:38,160
doing that um


2758
03:17:38,160 --> 03:17:42,640
so let's say that you want to have you want to extract the length so you say


2759
03:17:42,640 --> 03:17:47,120
final length or means length right you create the variable but you


2760
03:17:47,120 --> 03:17:51,359
don't assign anything to it when you say if names is not null then


2761
03:17:51,359 --> 03:17:56,720
the length is equal to name's length otherwise length is zero okay so this is


2762
03:17:56,720 --> 03:18:02,160
one way of doing that is the old way of doing that


2763
03:18:02,800 --> 03:18:05,040
and you may be


2764
03:18:05,040 --> 03:18:09,040
trying to be smart as well and say okay i don't need this else statement if i


2765
03:18:09,040 --> 03:18:13,200
just say this is a variable and by default is zero and yeah you


2766
03:18:13,200 --> 03:18:17,040
would be right because length is zero by default and then if names is not null


2767
03:18:17,040 --> 03:18:20,720
then you say okay length is equal to names length


2768
03:18:20,720 --> 03:18:25,200
however there's a better way of doing that and that is using the


2769
03:18:25,200 --> 03:18:29,760
quest dot question mark i believe or the question mark that actually it is yeah


2770
03:18:29,760 --> 03:18:37,200
operator which conditionally executes or invokes a method or a property inside


2771
03:18:37,200 --> 03:18:40,960
an optional if that optional value is present


2772
03:18:40,960 --> 03:18:45,760
i'm going to show you how to do that so if we say final links


2773
03:18:46,319 --> 03:18:50,560
is names and then you would put question mark dot and then you would say links


2774
03:18:50,560 --> 03:18:54,080
and you would see this this code like being executed without a problem


2775
03:18:54,080 --> 03:18:58,640
however if you go here you would see that length is an optional value it's an


2776
03:18:58,640 --> 03:19:02,000
optional integer so you may be like okay how do i solve that


2777
03:19:02,000 --> 03:19:08,399
how do i say that i want length to be zero


2778
03:19:08,399 --> 03:19:13,680
if this length value is


2779
03:19:13,680 --> 03:19:18,080
null meaning that if it's names if the names list is null and we can't extract


2780
03:19:18,080 --> 03:19:23,120
the length then i want this value to be set to null and that is using our


2781
03:19:23,120 --> 03:19:27,040
question mark question mark operator that we talked about the null aware


2782
03:19:27,040 --> 03:19:30,960
operator that we talked about earlier the infix operator


2783
03:19:30,960 --> 03:19:35,040
so you could just do this you would say length is


2784
03:19:35,040 --> 03:19:40,319
if the names list is present meaning that its value is not null then grab its


2785
03:19:40,319 --> 03:19:45,600
length otherwise take the value of 0 and assign it to length and if you go to


2786
03:19:45,600 --> 03:19:49,920
line number nine now and i say length so you can see it's an integer


2787
03:19:49,920 --> 03:19:53,279
so it's not um


2788
03:19:53,279 --> 03:19:59,040
is not an optional integer anymore so you could do the same thing as well


2789
03:19:59,040 --> 03:20:02,399
like you could say names and you could do the same thing with


2790
03:20:02,399 --> 03:20:06,720
properties and you could also do it for functions so you can say names add


2791
03:20:06,720 --> 03:20:10,960
as right so you see this is a function


2792
03:20:10,960 --> 03:20:15,040
called add and then we're adding the value of bass to that list


2793
03:20:15,040 --> 03:20:19,040
however you can't unconditionally invoke this function on


2794
03:20:19,040 --> 03:20:23,760
an optional value because it might be null


2795
03:20:23,760 --> 03:20:26,160
all right


2796
03:20:26,399 --> 03:20:31,200
so that is like a very very important


2797
03:20:31,200 --> 03:20:36,720
bit of learning about dark learning about optionals in dart how you


2798
03:20:36,720 --> 03:20:40,479
could use nullable values and


2799
03:20:40,479 --> 03:20:45,760
as you will see and we'll talk about it more in this course um


2800
03:20:45,760 --> 03:20:50,000
there is many cases where you have to


2801
03:20:50,000 --> 03:20:52,319
um


2802
03:20:52,640 --> 03:20:58,000
take into consideration all values and especially if you're working with


2803
03:20:58,000 --> 03:21:02,080
different libraries where the library cannot make too many


2804
03:21:02,080 --> 03:21:06,479
assumptions and your code is dependent on the library and


2805
03:21:06,479 --> 03:21:10,319
you will have to take into consideration okay the absence of a value means that i


2806
03:21:10,319 --> 03:21:13,600
personally have to like take some um


2807
03:21:13,600 --> 03:21:17,760
decisions in my code consciously in order to execute bits and pieces of code


2808
03:21:17,760 --> 03:21:22,640
depending on the absence or presence of the value so try to use these optional


2809
03:21:22,640 --> 03:21:25,760
um null aware operators that i taught you


2810
03:21:25,760 --> 03:21:30,080
here which was um the null aware um basically like the


2811
03:21:30,080 --> 03:21:33,520
decision making on to pick like the infix operator that tells you whether


2812
03:21:33,520 --> 03:21:36,479
the left hand side or the right hand side depending on which one is not null


2813
03:21:36,479 --> 03:21:40,800
first it picks that one okay that offer is very important and the


2814
03:21:40,800 --> 03:21:44,160
um all over invocation operator which is


2815
03:21:44,160 --> 03:21:48,720
here so you say some object which may be null then do something on it


2816
03:21:48,720 --> 03:21:52,560
or the operator which is a null aware


2817
03:21:52,560 --> 03:21:56,479
assignment operator that assigns the value on the right to the variable on


2818
03:21:56,479 --> 03:22:00,880
the left should the variable on the left be null all right so these are very very


2819
03:22:00,880 --> 03:22:04,239
important to understand


2820
03:22:05,600 --> 03:22:07,600
okay um


2821
03:22:07,600 --> 03:22:11,920
now that we've talked about that i'm gonna take that in my notes that that is


2822
03:22:11,920 --> 03:22:15,760
a topic we talked about now


2823
03:22:15,760 --> 03:22:21,200
we also have um very very good official documentation


2824
03:22:21,200 --> 03:22:25,840
about null safety in dart so i'm gonna bring up this documentation on a


2825
03:22:25,840 --> 03:22:30,479
separator separate screen and then i'm gonna bring it up here so


2826
03:22:30,479 --> 03:22:36,160
you can actually see as well all right um


2827
03:22:36,160 --> 03:22:39,359
you can see here it says understanding all safety and this is great great


2828
03:22:39,359 --> 03:22:45,120
documentation about how null safety in dart works


2829
03:22:45,120 --> 03:22:51,520
as you can see a lot of examples um i mean it talks about like from the


2830
03:22:51,520 --> 03:22:56,080
absolute beginning what it actually means


2831
03:22:56,080 --> 03:23:01,840
uh and you can see here null is at the level of object so it's not novel itself


2832
03:23:01,840 --> 03:23:05,359
is not like an object so you have lists and doubles and


2833
03:23:05,359 --> 03:23:10,319
integers here but null sits on top for itself it's kind of like the absence


2834
03:23:10,319 --> 03:23:13,279
of a value


2835
03:23:14,080 --> 03:23:17,120
so there's lots of examples in in this link and i


2836
03:23:17,120 --> 03:23:20,800
highly encourage you to have a look at it some things you may not understand


2837
03:23:20,800 --> 03:23:24,880
for instance like this one you will understand easily because it says there


2838
03:23:24,880 --> 03:23:29,520
is something called a thing like a class but we haven't talked about classes yet


2839
03:23:29,520 --> 03:23:32,800
and its name parameter name here in this


2840
03:23:32,800 --> 03:23:37,200
function called showgizmo is called thing and you can see it is


2841
03:23:37,200 --> 03:23:43,600
conditionally accessing a property on that thing


2842
03:23:43,680 --> 03:23:47,600
so and then if that property in itself is


2843
03:23:47,600 --> 03:23:53,439
null it conditionally access that as well so if this property is nullable and


2844
03:23:53,439 --> 03:23:57,520
then it's accessing another property inside that nullable property


2845
03:23:57,520 --> 03:24:01,439
if it's not null so it's i mean it's a great way you can chain them as you can


2846
03:24:01,439 --> 03:24:06,160
see here so then so if this thing is not null then


2847
03:24:06,160 --> 03:24:10,479
conditionally accesses this property on that so it's it's beautiful i mean and


2848
03:24:10,479 --> 03:24:14,800
this thing is available on many other languages like rust and swift as well so


2849
03:24:14,800 --> 03:24:17,840
it's nothing new it but it is kind of like


2850
03:24:17,840 --> 03:24:21,840
uh such an important topic to understand in dart that i think you shouldn't just


2851
03:24:21,840 --> 03:24:27,840
skim over it so you should just really learn how to work with it so


2852
03:24:28,640 --> 03:24:34,479
all right um we've now talked about null value so i'm going to take that in our


2853
03:24:34,479 --> 03:24:40,399
in my notes here now i think for chapter 5 five


2854
03:24:40,399 --> 03:24:44,000
this information is enough so that we can move on to


2855
03:24:44,000 --> 03:24:49,200
the next chapter and in the next chapter chapter number


2856
03:24:49,200 --> 03:24:53,680
six we're going to talk about some really really juicy stuff and


2857
03:24:53,680 --> 03:24:56,880
this is like chapter six is going to be like um


2858
03:24:56,880 --> 03:25:01,760
as i can see my notes are pressing in a lot of really interesting


2859
03:25:01,760 --> 03:25:05,040
topics such as enumerations classes objects


2860
03:25:05,040 --> 03:25:09,439
custom operators constructors factory constructors class methods


2861
03:25:09,439 --> 03:25:16,720
i mean inheritance and stop classing apps subclassing abstract classes so


2862
03:25:16,960 --> 03:25:20,880
as you may have heard depending on what background you have


2863
03:25:20,880 --> 03:25:25,520
you may be like a product owner or product designer a ux or whatever you


2864
03:25:25,520 --> 03:25:29,040
may not have like a software engineering background but


2865
03:25:29,040 --> 03:25:32,920
dart is um in its core it's an


2866
03:25:32,920 --> 03:25:38,720
object-oriented programming language it means that things in dart are objects an


2867
03:25:38,720 --> 03:25:44,319
object is an instance of a class as we'll talk about in the next chapter so


2868
03:25:44,319 --> 03:25:47,840
um for you to understand dart and how these


2869
03:25:47,840 --> 03:25:52,399
things work for instance we've talked about lists and actually typing dots in


2870
03:25:52,399 --> 03:25:55,200
front of the name of the list and getting its lengths but you may not


2871
03:25:55,200 --> 03:25:59,439
really know how that works so in order to understand all those things what that


2872
03:25:59,439 --> 03:26:03,600
dot means you need to understand what objects are in order to understand


2873
03:26:03,600 --> 03:26:08,000
objects you need to know what classes are and when you understand classes then


2874
03:26:08,000 --> 03:26:11,439
you will learn about inheritance and then you will talk we'll talk about


2875
03:26:11,439 --> 03:26:16,479
abstract classes properties static functions all that so


2876
03:26:16,479 --> 03:26:19,680
what we're going to talk about in chapter six is so


2877
03:26:19,680 --> 03:26:24,720
important that i believe that every dart developer needs to know about this and


2878
03:26:24,720 --> 03:26:30,239
we're learning all of these things to be become good at doing flutter um so


2879
03:26:30,239 --> 03:26:34,160
uh although you can go and write like servers or maybe server applications


2880
03:26:34,160 --> 03:26:38,080
with dart or you could write command line applications with dart but these


2881
03:26:38,080 --> 03:26:41,439
days dart is primarily used for writing


2882
03:26:41,439 --> 03:26:44,160
flutter applications and i don't have any


2883
03:26:44,160 --> 03:26:48,319
data to prove that but i can see for myself when i'm in the community that


2884
03:26:48,319 --> 03:26:52,160
most people are using dart primarily to write flutter applications so we're


2885
03:26:52,160 --> 03:26:56,560
doing all of this to learn more about flutter and i highly recommend that you


2886
03:26:56,560 --> 03:26:59,680
don't skip these chapters where we're talking about art especially if you're


2887
03:26:59,680 --> 03:27:02,640
new to flutter development so with that said


2888
03:27:02,640 --> 03:27:07,040
let's leave this chapter the way it is right now chapter number five we're done


2889
03:27:07,040 --> 03:27:10,960
with that let's go to chapter number six and learn about dart enumerations and


2890
03:27:10,960 --> 03:27:14,960
objects welcome to chapter six of this flutter


2891
03:27:14,960 --> 03:27:17,279
course in this chapter we're going to talk


2892
03:27:17,279 --> 03:27:23,760
about uh dart enumerations and objects and these are some of my favorite things


2893
03:27:23,760 --> 03:27:26,960
to actually talk about so um


2894
03:27:26,960 --> 03:27:31,840
in most programming languages actually have the same facilities so


2895
03:27:31,840 --> 03:27:35,439
if you follow along with the other chapters then you should have a working


2896
03:27:35,439 --> 03:27:39,600
dart project set up now and maybe running in an emulator or a simulator so


2897
03:27:39,600 --> 03:27:44,000
that you have the ability to press command s on mac or control s in linux


2898
03:27:44,000 --> 03:27:48,319
and windows in order to rerun your project so without you having to pretty


2899
03:27:48,319 --> 03:27:52,239
much do anything so let's then get started i'm just going to


2900
03:27:52,239 --> 03:27:55,439
make that assumption that you're already set


2901
03:27:55,439 --> 03:27:58,640
with those requirements


2902
03:27:58,800 --> 03:28:02,960
so let's start by talking about


2903
03:28:02,960 --> 03:28:08,080
enumerations and i'm gonna bring up the project from the previous chapter


2904
03:28:08,080 --> 03:28:12,080
let's just make sure that it's on the screen so you can easily see it


2905
03:28:12,080 --> 03:28:16,399
now i'm going to go and to this list function that we created remove the only


2906
03:28:16,399 --> 03:28:21,279
parameter there and remove that as well so if i press command s now nothing


2907
03:28:21,279 --> 03:28:24,720
should happen on the screen because we don't have any functionality in tests so


2908
03:28:24,720 --> 03:28:28,800
let's talk about enumerations and what they actually are as you can see here


2909
03:28:28,800 --> 03:28:32,560
animations are named list of related items


2910
03:28:32,560 --> 03:28:35,200
now an enumeration is


2911
03:28:35,200 --> 03:28:40,960
kind of like equivalent of making a string written programmatically


2912
03:28:40,960 --> 03:28:46,239
so that it becomes an entity and by that i mean that


2913
03:28:46,239 --> 03:28:50,399
let's say you have the value


2914
03:28:50,399 --> 03:28:53,279
name and then you could say foo


2915
03:28:53,279 --> 03:28:59,040
and you would also say khan's other name that's also foo they're both the same


2916
03:28:59,040 --> 03:29:02,800
string but they're not the same identity in that


2917
03:29:02,800 --> 03:29:06,319
i mean internally actually in terms of const i don't want to go too much into


2918
03:29:06,319 --> 03:29:09,520
the comp how the compiler actually works but they're going to be going to be the


2919
03:29:09,520 --> 03:29:12,560
same string but i mean that you've written it twice


2920
03:29:12,560 --> 03:29:16,560
so it's not the exact same thing you have to write it twice


2921
03:29:16,560 --> 03:29:20,560
so an enumeration try to tries to basically


2922
03:29:20,560 --> 03:29:24,720
make sure that a value has a name that can be


2923
03:29:24,720 --> 03:29:28,399
programmatically referred to so let's say


2924
03:29:28,399 --> 03:29:33,520
um cons sorry enum and that's a key word in dart that's how you create an


2925
03:29:33,520 --> 03:29:37,120
enumeration um i'm going to take this that we've


2926
03:29:37,120 --> 03:29:40,880
talked about some some other things during the intro sorry about i have to


2927
03:29:40,880 --> 03:29:45,200
look at my notes anyway anyways so we have the enum here that's how you create


2928
03:29:45,200 --> 03:29:50,319
an animation in guards and you would and then give a name to


2929
03:29:50,319 --> 03:29:55,200
your innovation and unlike variables and constants that they're


2930
03:29:55,200 --> 03:29:59,200
written with camel case you'd have to basically use another casing here which


2931
03:29:59,200 --> 03:30:04,479
is the first letter of every word in your iterations name has to be uppercase


2932
03:30:04,479 --> 03:30:08,479
and the and the rest of the letters have to be lowercase so


2933
03:30:08,479 --> 03:30:13,359
let's in this case for instance say person properties okay the properties of


2934
03:30:13,359 --> 03:30:17,680
any person then in this enum you will write the


2935
03:30:17,680 --> 03:30:20,080
different properties for instance first name


2936
03:30:20,080 --> 03:30:22,800
and lastly page


2937
03:30:22,800 --> 03:30:27,200
so what that basically means is that you've now defined a list of related


2938
03:30:27,200 --> 03:30:32,560
things such as first name last name age which are categorized under a particular


2939
03:30:32,560 --> 03:30:36,479
name which in this case person properties okay


2940
03:30:36,479 --> 03:30:40,399
and you can refer to these in your code using the dot notation so you can say


2941
03:30:40,399 --> 03:30:43,359
person properties


2942
03:30:43,359 --> 03:30:47,439
first name okay and we can print it actually so i'm just


2943
03:30:47,439 --> 03:30:51,840
gonna press command s and you can see it being printed to the screen so


2944
03:30:51,840 --> 03:30:54,640
um i mean immersions are really really


2945
03:30:54,640 --> 03:30:59,520
great as we go on in the in learning about dart and how dart works how we can


2946
03:30:59,520 --> 03:31:04,479
work with flutter how we can parse data that comes back from a


2947
03:31:04,479 --> 03:31:08,319
a server for instance but for now it's enough for you to


2948
03:31:08,319 --> 03:31:13,439
understand that you can categorize related items


2949
03:31:13,439 --> 03:31:16,880
under an enumeration so that you can refer to them later okay


2950
03:31:16,880 --> 03:31:22,640
and indoor you can also get the string representation of these uh


2951
03:31:22,640 --> 03:31:26,080
values using their name property that is something that's created for you by


2952
03:31:26,080 --> 03:31:31,279
default so if you just say name you now see first name being printed to


2953
03:31:31,279 --> 03:31:36,319
the screen as a string but before that if you print the innovations


2954
03:31:36,319 --> 03:31:40,800
value here for first name it would print out the entire thing okay


2955
03:31:40,800 --> 03:31:45,439
so that's short and sweet about enumerations we're


2956
03:31:45,439 --> 03:31:49,359
gonna use them quite a lot actually


2957
03:31:49,359 --> 03:31:53,680
especially later where we go to more advanced topics


2958
03:31:53,680 --> 03:31:58,080
as we develop our real application but for now just know that this is how you


2959
03:31:58,080 --> 03:32:00,880
create an information using an enum keyword and then the rest of the


2960
03:32:00,880 --> 03:32:03,600
properties you just put in curly brackets okay


2961
03:32:03,600 --> 03:32:05,840
so


2962
03:32:06,319 --> 03:32:10,640
that's for enumerations um


2963
03:32:10,640 --> 03:32:13,680
now we need to talk about switch statements and actually let's bring this


2964
03:32:13,680 --> 03:32:18,479
back and i'm gonna change this to properties let's say okay


2965
03:32:18,479 --> 03:32:24,399
and let's just say for instance animal type and let's say cat um


2966
03:32:24,399 --> 03:32:28,160
dog and then let's say rabbit


2967
03:32:28,720 --> 03:32:30,880
maybe so


2968
03:32:30,880 --> 03:32:35,200
let's say we have an animal type enumeration and um


2969
03:32:35,200 --> 03:32:38,720
we want to and then we for instance get in our


2970
03:32:38,720 --> 03:32:42,960
function we say animal type animal type so there's a property that


2971
03:32:42,960 --> 03:32:47,359
we expect to be passed our function called animal type and then


2972
03:32:47,359 --> 03:32:52,319
we name that property animal type with kennel casing here okay so if we do that


2973
03:32:52,319 --> 03:32:55,439
then we go to our function here we're recalling the function you can see that


2974
03:32:55,439 --> 03:32:59,359
we got an error meaning that there is a parameter expected of type animal type


2975
03:32:59,359 --> 03:33:04,399
and no one's passing them so at the call side which is


2976
03:33:04,399 --> 03:33:09,120
the place you are calling your function that's what a call site is known as in


2977
03:33:09,120 --> 03:33:12,720
programming so if you're coming from a background of design or


2978
03:33:12,720 --> 03:33:16,080
um anything that is not software development related so you wouldn't


2979
03:33:16,080 --> 03:33:19,279
probably know so much about the this kind of lingo but


2980
03:33:19,279 --> 03:33:23,760
a call site is where you're calling a function so at this call site online


2981
03:33:23,760 --> 03:33:28,960
number 19 um we're gonna gonna pass an animal type


2982
03:33:28,960 --> 03:33:32,880
and let's just say uh cat in this case okay


2983
03:33:32,880 --> 03:33:38,560
so in here we could just print that and i'm just gonna say animal type


2984
03:33:38,560 --> 03:33:42,880
i'm gonna press command s and you can see cat being printed here okay


2985
03:33:42,880 --> 03:33:47,840
now if you want to execute different types of code depending on


2986
03:33:47,840 --> 03:33:52,000
this animal type then you could you could which is not


2987
03:33:52,000 --> 03:33:56,000
recommended you could use an if statement so if you just said if


2988
03:33:56,000 --> 03:34:04,399
animal type is equal to animal type cat you say print all i left oh i love


2989
03:34:04,399 --> 03:34:12,080
cats okay else if animal type is animal


2990
03:34:13,600 --> 03:34:18,800
and you would say prince or or you would say dogs are so fluffy or


2991
03:34:18,800 --> 03:34:21,200
something


2992
03:34:22,960 --> 03:34:29,120
and else if animal type is animal type


2993
03:34:29,120 --> 03:34:31,279
me and say


2994
03:34:31,279 --> 03:34:34,800
i wish i had


2995
03:34:36,479 --> 03:34:40,399
so this is using normal if statements you say if animal type is cat then blah


2996
03:34:40,399 --> 03:34:43,760
blah blah now


2997
03:34:43,760 --> 03:34:47,279
it is one way of doing it but it's not the recommended way of working with


2998
03:34:47,279 --> 03:34:50,399
enumerations and the recommended way of working with enumeration especially if


2999
03:34:50,399 --> 03:34:54,080
you're doing like branching code as we're doing here is using a switch


3000
03:34:54,080 --> 03:34:57,760
statement so let's convert this code to switch


3001
03:34:57,760 --> 03:35:00,800
um so let's say switch


3002
03:35:00,800 --> 03:35:05,600
you put parenthesis open close and then open close curly brackets and in here


3003
03:35:05,600 --> 03:35:09,040
you would put your narration so you say animal type okay


3004
03:35:09,040 --> 03:35:13,120
and the way to handle these different branches then is with the case uh


3005
03:35:13,120 --> 03:35:17,120
keyword you'd say in the case of animal type


3006
03:35:17,120 --> 03:35:19,760
money print


3007
03:35:19,760 --> 03:35:23,359
uh money sound like this okay


3008
03:35:23,359 --> 03:35:26,560
case animal type a cat


3009
03:35:26,560 --> 03:35:29,279
print cat


3010
03:35:29,920 --> 03:35:33,359
and case animal type


3011
03:35:33,520 --> 03:35:37,479
og print dog


3012
03:35:39,680 --> 03:35:42,160
just like that okay now


3013
03:35:42,160 --> 03:35:46,560
this is i'm great i'm actually grateful that we're getting this uh error so you


3014
03:35:46,560 --> 03:35:50,640
can clearly see what it says is the case should not complete normally try adding


3015
03:35:50,640 --> 03:35:54,960
break or return now what this is saying that you see in


3016
03:35:54,960 --> 03:35:59,200
many programming languages just like dark when the program comes here to the


3017
03:35:59,200 --> 03:36:03,680
case statement it kind of like falls through to the next line and dart tries


3018
03:36:03,680 --> 03:36:07,920
to avoid that so it says okay if i handle bunny then i'm doing some stuff


3019
03:36:07,920 --> 03:36:11,279
but it kind of feels like i'm like falling down to the next line after this


3020
03:36:11,279 --> 03:36:15,600
because you didn't tell me what to do after the print statement so you either


3021
03:36:15,600 --> 03:36:18,640
tell me to like completely go out of this


3022
03:36:18,640 --> 03:36:23,120
function go out of the test function by putting the return keyword here we


3023
03:36:23,120 --> 03:36:27,040
haven't talked about return really yet but you could do that you could just say


3024
03:36:27,040 --> 03:36:31,439
okay return right after all of these so i'm just going to press command s


3025
03:36:31,439 --> 03:36:35,279
and you will see cat being printed to screen which is here okay


3026
03:36:35,279 --> 03:36:38,000
but if you didn't have this return statement statement here you would get


3027
03:36:38,000 --> 03:36:40,479
an error okay so


3028
03:36:40,479 --> 03:36:45,520
you either say return or you would use the break keyword now


3029
03:36:45,520 --> 03:36:48,560
there's a difference between these let's put a print statement here and i'm going


3030
03:36:48,560 --> 03:36:53,520
to say function is finished okay so i'm kind of expecting that


3031
03:36:53,520 --> 03:36:56,640
by executing our


3032
03:36:56,640 --> 03:37:02,640
our code here our test function here passing the value of cat at the moment


3033
03:37:02,640 --> 03:37:07,359
that we fall into the switch we check that this is cat and then print


3034
03:37:07,359 --> 03:37:11,279
the cat and then we return okay this is kind of


3035
03:37:11,279 --> 03:37:15,439
what it is doing it means that it kind of skips over this print statement and


3036
03:37:15,439 --> 03:37:19,520
you'll see soon if i say command s it will just say cat and then we'll return


3037
03:37:19,520 --> 03:37:22,720
from that so this is not really what i wanted i


3038
03:37:22,720 --> 03:37:26,640
wanted this switch statement to be executed print cat and then continue


3039
03:37:26,640 --> 03:37:31,439
after switch okay and that's where you use the break statement so


3040
03:37:31,439 --> 03:37:35,920
or the key word here so if you say break it breaks out of the switch statement


3041
03:37:35,920 --> 03:37:39,840
and then continues with the rest of the function as it as you would expect so if


3042
03:37:39,840 --> 03:37:44,640
i press command s here you say cat and then function is finished all right


3043
03:37:44,640 --> 03:37:48,479
so switch is the preferred way of working


3044
03:37:48,479 --> 03:37:51,840
with um enumerations especially if you're doing


3045
03:37:51,840 --> 03:37:56,000
branches so you could also like um


3046
03:37:56,000 --> 03:38:01,040
for instance if in this case he said uh pray make sure


3047
03:38:01,040 --> 03:38:04,080
this is is a cat


3048
03:38:04,080 --> 03:38:08,880
you could also in this case say if animal type


3049
03:38:08,880 --> 03:38:12,800
is not animal type chats


3050
03:38:12,800 --> 03:38:17,680
and you would return okay you could do this as well so this is kind of like


3051
03:38:17,680 --> 03:38:20,479
a conditional statement that you're putting in the beginning of your


3052
03:38:20,479 --> 03:38:25,760
function making making sure that any code executed after line 10


3053
03:38:25,760 --> 03:38:29,199
is completely sure that the animal type is


3054
03:38:29,199 --> 03:38:33,680
a cat okay so in that case you may just use a typical if statement so you don't


3055
03:38:33,680 --> 03:38:39,920
have to do switches okay but if you're trying to execute spec special pieces of


3056
03:38:39,920 --> 03:38:44,319
code depending on which value this enumeration contains at


3057
03:38:44,319 --> 03:38:47,199
the moment then i highly suggest that you use


3058
03:38:47,199 --> 03:38:51,920
switch statement instead of if statement all right so kind of depends on your on


3059
03:38:51,920 --> 03:38:57,120
your use case all right okay i'm just going to mark this item as


3060
03:38:57,120 --> 03:39:02,720
done in my notes now let's talk about classes all right


3061
03:39:02,720 --> 03:39:07,439
which is one of my favorite topics to talk about actually


3062
03:39:07,439 --> 03:39:10,160
um well classes in


3063
03:39:10,160 --> 03:39:14,720
uh dart and in many other languages let's actually bring this back to how it


3064
03:39:14,720 --> 03:39:18,399
was before make it a test function all right


3065
03:39:18,399 --> 03:39:23,520
and remove the animal type from here and remove them i can actually continue and


3066
03:39:23,520 --> 03:39:27,439
we can actually as well okay


3067
03:39:27,439 --> 03:39:35,680
so classes in dart are are grouping of various functionalities


3068
03:39:35,680 --> 03:39:42,160
into one packageable piece of data and and by that i mean for instance


3069
03:39:42,160 --> 03:39:45,680
let's say that you have a function called run


3070
03:39:45,680 --> 03:39:50,479
another function called breathe and then you have a person's first name


3071
03:39:50,479 --> 03:39:54,080
a person's last name of course you could go and define these


3072
03:39:54,080 --> 03:39:57,520
things like this you could say khan's first name


3073
03:39:57,520 --> 03:40:01,199
yeah something and khan's last name is something


3074
03:40:01,199 --> 03:40:05,120
like this okay


3075
03:40:05,120 --> 03:40:10,239
um just like that and then you could have a function and sorry you would say


3076
03:40:10,239 --> 03:40:12,960
run um and then you'd have another function


3077
03:40:12,960 --> 03:40:15,520
called breathe


3078
03:40:16,319 --> 03:40:20,640
you can do that but these are functions that are kind of like for us in this


3079
03:40:20,640 --> 03:40:24,479
particular case or at least in my head at the moment i'm imagining these


3080
03:40:24,479 --> 03:40:27,680
functions to be related to a person


3081
03:40:27,680 --> 03:40:30,800
and that person can run that person can breathe that person has a first name and


3082
03:40:30,800 --> 03:40:35,520
last name so the grouping of these related things


3083
03:40:35,520 --> 03:40:38,160
is done with a class


3084
03:40:38,160 --> 03:40:42,160
in dart at least so the way to do that is you would say for


3085
03:40:42,160 --> 03:40:46,399
instance class which is a keyword in dart


3086
03:40:46,399 --> 03:40:49,600
let's say the name of the class now for the


3087
03:40:49,600 --> 03:40:52,960
naming of classes and enumerations and any other


3088
03:40:52,960 --> 03:40:56,160
entity except for variables and constants


3089
03:40:56,160 --> 03:41:00,080
you should use um just normal casing you would i don't actually know if it's


3090
03:41:00,080 --> 03:41:04,160
called pascal casing or i think so um


3091
03:41:04,160 --> 03:41:08,560
but you would just use your upper case the first letter of every word okay so


3092
03:41:08,560 --> 03:41:14,160
let's just say person okay this is how you would say a person


3093
03:41:14,160 --> 03:41:18,319
class all right so i don't think actually we can put const


3094
03:41:18,319 --> 03:41:22,880
in there i'm just gonna grab these two functions and just place them


3095
03:41:22,880 --> 03:41:27,920
inside this person class all right and let's in this say print


3096
03:41:27,920 --> 03:41:31,680
running run function and with reading we're


3097
03:41:31,680 --> 03:41:34,800
going to say breathing all right


3098
03:41:34,800 --> 03:41:38,800
and in the test function you would want to


3099
03:41:38,800 --> 03:41:42,080
create something called an instance of this


3100
03:41:42,080 --> 03:41:47,520
class now instances are objects and objects are


3101
03:41:47,520 --> 03:41:52,560
created from classes so you need to understand how


3102
03:41:52,560 --> 03:41:56,640
instantiation works in software development and this


3103
03:41:56,640 --> 03:41:59,920
is for any programming language such as dart


3104
03:41:59,920 --> 03:42:05,040
rust swift python javascript where


3105
03:42:05,040 --> 03:42:08,319
they allow you to create classes


3106
03:42:08,319 --> 03:42:13,920
and now that you know what a class is in order to use a class you need to


3107
03:42:13,920 --> 03:42:18,000
usually create something called an instance of that class that means that


3108
03:42:18,000 --> 03:42:21,040
you tell the programming language that okay here


3109
03:42:21,040 --> 03:42:24,880
is the class i know about that but give me a copy of it


3110
03:42:24,880 --> 03:42:27,760
so every class


3111
03:42:27,760 --> 03:42:32,479
can be instantiated meaning that the dart compiler will create a copy of that


3112
03:42:32,479 --> 03:42:37,120
exact class with its data its functions its properties and give that copy to you


3113
03:42:37,120 --> 03:42:41,840
all right so that is called instantiation and it


3114
03:42:41,840 --> 03:42:47,600
works by using the equal sign and creating putting a parenthesis


3115
03:42:47,600 --> 03:42:50,960
at the end of the name of the class as i'll show you here so let's just say


3116
03:42:50,960 --> 03:42:54,399
final and we say person


3117
03:42:54,399 --> 03:42:58,239
which is the name of our variable in this case is equal to as i said equal


3118
03:42:58,239 --> 03:43:01,760
sign then we would write the name of the class and parenthesis just like that


3119
03:43:01,760 --> 03:43:04,960
okay so now you said a person variable in


3120
03:43:04,960 --> 03:43:08,239
this case is an instance of that person class


3121
03:43:08,239 --> 03:43:13,600
now you'll understand using dots and notation you could say person.run you


3122
03:43:13,600 --> 03:43:16,319
see that function is now available on your


3123
03:43:16,319 --> 03:43:19,600
instance of the person class and you would say person


3124
03:43:19,600 --> 03:43:22,319
dot breathe okay


3125
03:43:22,319 --> 03:43:28,160
so these are functions that are available at instance


3126
03:43:28,160 --> 03:43:32,160
level of the person class i know there's a lot of words that i'm just talking


3127
03:43:32,160 --> 03:43:35,840
about but i think you understand the point here so


3128
03:43:35,840 --> 03:43:40,720
this is how you instantiate the person class and this is how you invoke various


3129
03:43:40,720 --> 03:43:44,720
functions on that class so if i press command s you can see it says running


3130
03:43:44,720 --> 03:43:49,439
and if you said in this case person


3131
03:43:49,439 --> 03:43:53,120
and then without instantiating using their


3132
03:43:53,120 --> 03:43:57,359
parenthesis if you said breathe you will get an error here instance


3133
03:43:57,359 --> 03:44:00,840
member breathe can't be accessed using static axis


3134
03:44:00,840 --> 03:44:04,800
okay and that's i mean that is kind of like


3135
03:44:04,800 --> 03:44:09,680
instance member is an important term also to remember an instance member


3136
03:44:09,680 --> 03:44:16,239
means some functionality that is only available at the instance level meaning


3137
03:44:16,239 --> 03:44:20,080
that it's not available at the person class level but you have to make a copy


3138
03:44:20,080 --> 03:44:24,080
of person in order to be able to access that all right


3139
03:44:24,080 --> 03:44:26,720
so that's


3140
03:44:26,720 --> 03:44:31,359
the basic of classes you can do a lot with classes as we will


3141
03:44:31,359 --> 03:44:35,920
talk about soon so i'm just going to leave that person class right there


3142
03:44:35,920 --> 03:44:40,800
and then just going to mark that as talked about


3143
03:44:40,800 --> 03:44:45,520
in my notes as well and let's now talk a little bit a little


3144
03:44:45,520 --> 03:44:49,439
bit about objects well


3145
03:44:49,439 --> 03:44:53,680
objects are actually quite easy to explain an object is an instance of a


3146
03:44:53,680 --> 03:44:58,880
class so you wouldn't like


3147
03:44:58,880 --> 03:45:02,479
when someone says oh here's an object of type string it means literally that


3148
03:45:02,479 --> 03:45:07,840
there is a class called string i've created an instance of it and


3149
03:45:07,840 --> 03:45:13,600
and that is an object so the word instance the words instance and object


3150
03:45:13,600 --> 03:45:19,359
are usually used interchangeably uh but if you hear someone say instantiate a


3151
03:45:19,359 --> 03:45:24,800
class then you would say okay what's the class name oh it's person all right


3152
03:45:25,279 --> 03:45:28,000
and person is now i created an instance okay and in


3153
03:45:28,000 --> 03:45:30,640
this case you can see i'm just creating an instance of person without actually


3154
03:45:30,640 --> 03:45:34,479
doing anything with it so that's got kind of like a useless object all right


3155
03:45:34,479 --> 03:45:40,479
but if i put i say foo as a person then this


3156
03:45:40,479 --> 03:45:45,279
foo now is an object of type of person and actually you can write its name here


3157
03:45:45,279 --> 03:45:49,600
and you'll see that it tells you that this is a person okay


3158
03:45:49,920 --> 03:45:54,399
so that in short is what um


3159
03:45:54,399 --> 03:45:57,359
objects are


3160
03:45:57,920 --> 03:46:02,479
and i can see my notes that objects need are kind of like in the wrong place i'm


3161
03:46:02,479 --> 03:46:05,439
gonna bring it to the right place sorry about that um


3162
03:46:05,439 --> 03:46:09,439
okay now


3163
03:46:09,439 --> 03:46:14,399
let's talk a little bit about um constructors


3164
03:46:14,399 --> 03:46:17,520
and i can see constructors also at the wrong place in my notes so i'm going to


3165
03:46:17,520 --> 03:46:22,560
bring those also to the right place okay sorry about that


3166
03:46:22,560 --> 03:46:26,720
um now what a constructor is at its name as


3167
03:46:26,720 --> 03:46:30,080
its name indicates is a special


3168
03:46:30,080 --> 03:46:37,199
logic in a class that constructs or initializes or builds that class's


3169
03:46:37,199 --> 03:46:41,680
instance all right so you may say that okay let's go to our


3170
03:46:41,680 --> 03:46:44,399
function here as to our class here person


3171
03:46:44,399 --> 03:46:49,760
and let's say every person has a first name or name okay so let's just


3172
03:46:49,760 --> 03:46:54,239
define that we say final string name all right as you can see now dart is saying


3173
03:46:54,239 --> 03:46:57,840
okay you said that every person has a name but


3174
03:46:57,840 --> 03:47:02,720
and it's a final meaning that after the person has been instantiated or after


3175
03:47:02,720 --> 03:47:07,680
that person has been initialized or created an instance from you cannot


3176
03:47:07,680 --> 03:47:10,720
change that name because you said final all right


3177
03:47:10,720 --> 03:47:15,359
if you said like string name is foo that would be different because it means


3178
03:47:15,359 --> 03:47:19,199
every person instance that gets created has the default value


3179
03:47:19,199 --> 03:47:22,720
foo for its name that's a completely different way of saying


3180
03:47:22,720 --> 03:47:26,800
uh what the name of in this case as you can see we're saying


3181
03:47:26,800 --> 03:47:30,239
that there every person instance every person


3182
03:47:30,239 --> 03:47:34,960
copy that we create has a name now dart to say okay where is the name then you


3183
03:47:34,960 --> 03:47:39,199
didn't tell me how to create it and that's where you would want to use


3184
03:47:39,199 --> 03:47:44,640
something called constructor okay constructors are sometimes you uh called


3185
03:47:44,640 --> 03:47:48,960
as initializers depending on the background of the programmer they may


3186
03:47:48,960 --> 03:47:53,199
call it constructor initializer uh or maybe some other names that i don't know


3187
03:47:53,199 --> 03:47:57,840
about but if you if you hear that a constructor then you will now know what


3188
03:47:57,840 --> 03:48:01,040
i'm talking about soon actually


3189
03:48:01,040 --> 03:48:04,399
so now what you can do at least in visual


3190
03:48:04,399 --> 03:48:08,800
studio code when you get this error is to just hover hover over it and then


3191
03:48:08,800 --> 03:48:14,560
press command on mac or control on windows on linux and press dot


3192
03:48:14,560 --> 03:48:17,760
now you will see you will get some suggestions here


3193
03:48:17,760 --> 03:48:20,880
and it will the second suggestion at least for me here says create


3194
03:48:20,880 --> 03:48:24,720
constructor for final fields okay and i can just press that


3195
03:48:24,720 --> 03:48:29,199
and what happens here now you see it's that it creates something that looks


3196
03:48:29,199 --> 03:48:33,279
kind of like a function but it doesn't have a name


3197
03:48:33,279 --> 03:48:37,520
its name is implicitly set to the name of the class okay


3198
03:48:37,520 --> 03:48:42,560
so basically it says i'm a special function with the same name as the class


3199
03:48:42,560 --> 03:48:49,040
and i expect a value to be given to me which i will then in turn assign to the


3200
03:48:49,040 --> 03:48:53,439
name property of myself it's kind of like a strange way of doing


3201
03:48:53,439 --> 03:48:57,840
things but it is quiet clean as well okay


3202
03:48:57,840 --> 03:49:01,199
after you do that so this is how you create a constructor after you do that


3203
03:49:01,199 --> 03:49:05,760
then at the call site where you're calling this person class to create an


3204
03:49:05,760 --> 03:49:10,399
instance of it it will complain saying that oh i'm expecting an argument


3205
03:49:10,399 --> 03:49:14,319
but i didn't find any and that's where you have to pass the


3206
03:49:14,319 --> 03:49:18,880
name so let's say in this case is foo bar okay


3207
03:49:18,880 --> 03:49:22,880
and then on the next line you can just say print foo name


3208
03:49:22,880 --> 03:49:27,279
all right and press command s and then you can see foo bar being printed to the


3209
03:49:27,279 --> 03:49:31,359
screen so that is like the basic of a constructor


3210
03:49:31,359 --> 03:49:35,600
that's how you construct instances of your class all right


3211
03:49:35,600 --> 03:49:39,520
now you may be saying that all right i don't want


3212
03:49:39,520 --> 03:49:45,920
i mean you can do many fancy things with constructors you could say okay


3213
03:49:45,920 --> 03:49:50,239
this name for instance by default must have a special value you could do that


3214
03:49:50,239 --> 03:49:52,800
there's lots of things you can do with constructors which i'm not going to go


3215
03:49:52,800 --> 03:49:56,160
into the details of but right now just know that a


3216
03:49:56,160 --> 03:49:59,840
constructor is this special kind of function that has the same name as the


3217
03:49:59,840 --> 03:50:03,199
name of the class and then parenthesis and then you put


3218
03:50:03,199 --> 03:50:07,479
your values in here all right


3219
03:50:08,399 --> 03:50:11,040
okay that was


3220
03:50:11,040 --> 03:50:14,880
constructors um


3221
03:50:14,880 --> 03:50:21,120
now let's talk a little bit about um


3222
03:50:21,120 --> 03:50:25,359
methods all right and


3223
03:50:25,359 --> 03:50:29,680
what methods are i'm actually going to go here and say


3224
03:50:29,680 --> 03:50:34,160
we're going to talk about methods and those at the wrong place in my notes


3225
03:50:34,160 --> 03:50:38,080
as well sorry about that a method of a class we've talked about


3226
03:50:38,080 --> 03:50:41,520
already to be honest with you and a method of a class is


3227
03:50:41,520 --> 03:50:45,359
um a function on the class


3228
03:50:45,359 --> 03:50:48,720
which is usually referred to as an instance


3229
03:50:48,720 --> 03:50:52,800
method meaning that the function is available after you've instantiated that


3230
03:50:52,800 --> 03:50:56,800
class all right as we're doing in line number 14.


3231
03:50:56,800 --> 03:51:03,040
name is an instance variable so is a variable that is available at an


3232
03:51:03,040 --> 03:51:08,080
instance level is not an instance method an instance method should be a function


3233
03:51:08,080 --> 03:51:12,000
all right so let's go and create a function here that doesn't return any


3234
03:51:12,000 --> 03:51:17,120
value denoted by the void return type and we say print name all right


3235
03:51:17,120 --> 03:51:20,319
the functionality of this function is only


3236
03:51:20,319 --> 03:51:24,479
just to print class all right that's all it all it


3237
03:51:24,479 --> 03:51:28,160
does and in dart you're also now that we're


3238
03:51:28,160 --> 03:51:31,920
talking about this i'll just mention also in dart it's usually


3239
03:51:31,920 --> 03:51:38,880
better not to prefix your instance variables or instance functions


3240
03:51:38,880 --> 03:51:42,840
inside the class itself using this


3241
03:51:42,840 --> 03:51:48,399
keyword this keyword in dart


3242
03:51:48,399 --> 03:51:54,080
that this this or that this keyword


3243
03:51:54,080 --> 03:51:59,120
basically refers to the current instance of this class all right


3244
03:51:59,120 --> 03:52:04,479
so you could either tell print name to print this dot name or it's actually


3245
03:52:04,479 --> 03:52:08,960
better to remove this and refer to it as name that's the recommended way of doing


3246
03:52:08,960 --> 03:52:13,199
it okay so avoid the keyword this as much as you can


3247
03:52:13,199 --> 03:52:17,600
unless you have to and we'll come to those points hopefully


3248
03:52:17,600 --> 03:52:21,439
later in this in this course why you may have to do


3249
03:52:21,439 --> 03:52:27,600
that while you may have to use this all right now we have the print name


3250
03:52:27,600 --> 03:52:32,479
instance method all right so let's just use it instead of this


3251
03:52:32,479 --> 03:52:36,399
print function that we're doing here let's just say foo


3252
03:52:36,399 --> 03:52:40,800
dot prints name all right command s or control s


3253
03:52:40,800 --> 03:52:45,760
on linux and windows and command sun on the macintosh and then you get the


3254
03:52:45,760 --> 03:52:49,040
flutter foo bar printed here or you could just


3255
03:52:49,040 --> 03:52:50,960
say print


3256
03:52:50,960 --> 03:52:56,560
i'm going to i will now print the name of this person


3257
03:52:56,560 --> 03:53:00,080
in single quotes we don't need double quotes okay command s and you will see


3258
03:53:00,080 --> 03:53:04,239
that message being printed here followed by the actual name of that


3259
03:53:04,239 --> 03:53:07,920
instance so if someone says method or instance


3260
03:53:07,920 --> 03:53:11,840
method you will then know what we're talking about is a function created at


3261
03:53:11,840 --> 03:53:18,720
the class level that does some stuff all right so that's short and sweet


3262
03:53:18,800 --> 03:53:21,199
um okay


3263
03:53:21,199 --> 03:53:25,399
now that we've talked about that let's talk a little bit about


3264
03:53:25,399 --> 03:53:30,720
inheritance and subclassing i'm gonna bring a caption here so you know what


3265
03:53:30,720 --> 03:53:34,479
we're talking about now


3266
03:53:34,479 --> 03:53:39,120
inheritance and subclassing are so so important in dart


3267
03:53:39,120 --> 03:53:42,800
and in any other object-oriented programming language that i don't think


3268
03:53:42,800 --> 03:53:47,279
anybody should like jump over it or um like for instance i know


3269
03:53:47,279 --> 03:53:50,479
developers working in various programming languages that are object


3270
03:53:50,479 --> 03:53:55,040
oriented but they kind of steer clear of the object oriented aspects of that


3271
03:53:55,040 --> 03:54:00,239
language and maybe they don't need it and maybe they just feel like it's


3272
03:54:00,239 --> 03:54:04,399
unnecessary or they feel like oh it's just too complicated but in dart if you


3273
03:54:04,399 --> 03:54:08,479
want to become a good flutter developer or a good dart developer you need to


3274
03:54:08,479 --> 03:54:12,800
know about um classes and um


3275
03:54:12,800 --> 03:54:17,120
inheritance so so let's


3276
03:54:17,120 --> 03:54:22,000
talk about inheritance what inheritance in dart is is that


3277
03:54:22,000 --> 03:54:26,080
it allows you to define a class


3278
03:54:26,080 --> 03:54:30,960
and then to add more functionality to that class


3279
03:54:30,960 --> 03:54:33,680
into a new class so


3280
03:54:33,680 --> 03:54:40,239
let's for instance say we go into our test function here and


3281
03:54:40,239 --> 03:54:44,399
remove that okay that code and also remove the person


3282
03:54:44,399 --> 03:54:48,319
class now let's create a


3283
03:54:48,319 --> 03:54:53,199
class livingthing all right and then we say funk


3284
03:54:53,199 --> 03:54:56,560
sorry void breathe


3285
03:54:56,560 --> 03:55:01,680
and then we say print living thing is breathing okay


3286
03:55:01,680 --> 03:55:06,800
so we created a class living thing and we're saying that anything that lives


3287
03:55:06,800 --> 03:55:10,080
needs to breathe now this may be an assumption but anyways


3288
03:55:10,080 --> 03:55:15,840
anything that lives and is above the and it's above the ground and it's


3289
03:55:15,840 --> 03:55:21,120
basically alive is breathing okay so that's our function on the living


3290
03:55:21,120 --> 03:55:25,120
thing now you may say okay


3291
03:55:25,120 --> 03:55:29,279
any living thing may also have the ability to move okay then we have a


3292
03:55:29,279 --> 03:55:35,040
function called move i'm going to say print i am moving all right


3293
03:55:35,040 --> 03:55:41,040
so now you may say okay now i kind of want a class called uh cats all right


3294
03:55:41,040 --> 03:55:45,439
cat is also a living thing one way to do that to go about creating


3295
03:55:45,439 --> 03:55:49,840
a class uh the cat class is to say class cat


3296
03:55:49,840 --> 03:55:54,319
and then you say um i kind of need these functions and you'll go and copy it and


3297
03:55:54,319 --> 03:55:59,279
then you paste them here all right and then you say okay i'm good to go now


3298
03:55:59,279 --> 03:56:04,319
but one of the absolute paramount paramount


3299
03:56:04,319 --> 03:56:07,920
qualities of a developer is the


3300
03:56:07,920 --> 03:56:11,439
developers do not like to repeat themselves


3301
03:56:11,439 --> 03:56:14,720
and it is such an important concept in


3302
03:56:14,720 --> 03:56:18,160
programming that you need to avoid repeating yourself that you need to just


3303
03:56:18,160 --> 03:56:22,399
coin that down now get it straight so that you don't


3304
03:56:22,399 --> 03:56:27,359
make this mistake as we're doing in this code right now so


3305
03:56:27,359 --> 03:56:31,439
the first thing you want to do as a developer say how can i grab this code


3306
03:56:31,439 --> 03:56:34,319
and and it's obvious that the cat is also a


3307
03:56:34,319 --> 03:56:39,840
living thing so that's where you want to use the extends


3308
03:56:39,840 --> 03:56:45,359
um keyword that allows you to inherit the functionality inside the living


3309
03:56:45,359 --> 03:56:50,640
thing class into your cat class so in this case i'm saying cat class


3310
03:56:50,640 --> 03:56:53,680
extends or read it in english as inherits


3311
03:56:53,680 --> 03:56:57,120
living thing all right so


3312
03:56:57,120 --> 03:57:00,800
you can see that the cat class in itself is empty right now but if you go to the


3313
03:57:00,800 --> 03:57:05,439
test function and i say final


3314
03:57:05,439 --> 03:57:09,520
fluffers is a cat


3315
03:57:09,520 --> 03:57:14,399
and then i can say fluffers uh you can see that now that the cat


3316
03:57:14,399 --> 03:57:21,040
class has breathe and move uh functionalities or functions actually


3317
03:57:21,040 --> 03:57:25,439
so although cat itself didn't define these functions but they're available


3318
03:57:25,439 --> 03:57:30,960
for the instance in this case called fluffers of type cat to use so you could


3319
03:57:30,960 --> 03:57:35,680
just say move and then you can say fluffers


3320
03:57:35,680 --> 03:57:38,960
okay so if i run this code if i delete


3321
03:57:38,960 --> 03:57:42,319
everything in the debug console and run this code you can see that the cat


3322
03:57:42,319 --> 03:57:46,720
instance called fluffer is the same move or i am moving and it will also say


3323
03:57:46,720 --> 03:57:52,479
living thing is breathing okay now


3324
03:57:53,040 --> 03:57:57,600
you could also i mean we could also talk about now that we're talking about


3325
03:57:57,600 --> 03:58:01,199
inheritance and subclassing um


3326
03:58:01,199 --> 03:58:04,720
actually maybe i shouldn't call a subclassing but i also think it's


3327
03:58:04,720 --> 03:58:07,920
important for you to understand what subclassing is subclassing is literally


3328
03:58:07,920 --> 03:58:11,040
the same thing as inheritance subclassing is saying that you have a


3329
03:58:11,040 --> 03:58:14,000
class and you're creating a sub component like a sub


3330
03:58:14,000 --> 03:58:18,160
thing of it which may actually have


3331
03:58:18,160 --> 03:58:21,840
it's a little bit of a strange naming sub because sub means kind of like a


3332
03:58:21,840 --> 03:58:26,239
subset of things available in that class but it actually is like a superset


3333
03:58:26,239 --> 03:58:28,479
because it will


3334
03:58:28,479 --> 03:58:32,160
grab everything like the cat at the moment has every functionality in living


3335
03:58:32,160 --> 03:58:36,720
thing right but it may not necessarily do that


3336
03:58:36,720 --> 03:58:41,920
it's kind of complicated to explain but if you hear subclassing or inheritance


3337
03:58:41,920 --> 03:58:45,199
know that that is what we mean


3338
03:58:45,199 --> 03:58:50,880
you use the extends keyword usually okay


3339
03:58:52,479 --> 03:58:58,479
all right now we've talked about inheritance and subclassing


3340
03:58:58,479 --> 03:59:00,880
so i'm gonna


3341
03:59:00,880 --> 03:59:05,279
move a little bit uh my notes around sorry about that that i'm looking away


3342
03:59:05,279 --> 03:59:10,560
from the screen and uh now we're gonna talk about abstract


3343
03:59:10,560 --> 03:59:14,960
classes all right there's good documentation about


3344
03:59:14,960 --> 03:59:18,160
abstract classes and


3345
03:59:18,640 --> 03:59:24,239
what we're going to do here is to just change this class living


3346
03:59:24,239 --> 03:59:27,840
thing at the moment to abstract


3347
03:59:28,000 --> 03:59:32,560
and you see that everything works as expected


3348
03:59:32,560 --> 03:59:36,800
well an abstract class


3349
03:59:36,800 --> 03:59:42,080
is very similar to a normal class and there's good


3350
03:59:42,080 --> 03:59:45,279
documentation about what an abstract class actually is from a dart


3351
03:59:45,279 --> 03:59:48,640
perspective and you can see it says use the abs abstract modifier to define an


3352
03:59:48,640 --> 03:59:52,840
abstract class class that cannot be instantiated all right


3353
03:59:52,840 --> 03:59:59,279
so an abstract class is just like a normal class that can't have instances


3354
03:59:59,279 --> 04:00:02,800
so in this in this case once we made living


3355
04:00:02,800 --> 04:00:07,359
thing an abstract class if you then go and hear say


3356
04:00:07,359 --> 04:00:11,760
thing is a living thing


3357
04:00:11,760 --> 04:00:14,319
right and


3358
04:00:14,319 --> 04:00:18,319
it says oh abstract classes can't be instantiated


3359
04:00:18,319 --> 04:00:24,880
so an abstract class is a class that groups logic into itself


3360
04:00:24,880 --> 04:00:31,120
with the sole purpose of other classes using its functionality okay


3361
04:00:31,120 --> 04:00:36,880
so if you mark something as an abstract class in dart you what you need to just


3362
04:00:36,880 --> 04:00:40,880
know in your head is that this is a class that has some utilities that has


3363
04:00:40,880 --> 04:00:46,960
some code that is supposed to be used in other normal classes all right


3364
04:00:46,960 --> 04:00:51,600
and no one is supposed to just go and create an instance of living thing in


3365
04:00:51,600 --> 04:00:54,239
this case instead


3366
04:00:54,239 --> 04:00:59,920
at the call side you need to instantiate classes of that type so


3367
04:00:59,920 --> 04:01:04,880
now we can say cat as we did before and we can say thing breathe move or


3368
04:01:04,880 --> 04:01:07,439
fluffers


3369
04:01:08,239 --> 04:01:12,960
so that's what an abstract class is


3370
04:01:12,960 --> 04:01:16,080
it is just a class that cannot be instantiated


3371
04:01:16,080 --> 04:01:19,600
it's usually like a utility class that other classes are supposed to inherit


3372
04:01:19,600 --> 04:01:22,160
from all right


3373
04:01:23,760 --> 04:01:28,160
okay um i can see now in my notes and i'm gonna


3374
04:01:28,160 --> 04:01:32,640
take that we've talked quickly about abstract classes


3375
04:01:32,640 --> 04:01:36,640
and i'm going to bring the next topic up which we're going to


3376
04:01:36,640 --> 04:01:41,840
talk about which are factory constructors


3377
04:01:41,840 --> 04:01:45,840
so i absolutely personally love factory


3378
04:01:45,840 --> 04:01:49,279
constructors to be honest with you


3379
04:01:49,359 --> 04:01:54,960
let's remove our abstract class i'll explain to you what a factory


3380
04:01:55,040 --> 04:01:59,279
is let's see now we have a glass cat all right


3381
04:01:59,279 --> 04:02:05,199
um and then in here let's give the cat a name


3382
04:02:05,199 --> 04:02:10,319
of type string command dot or control dot


3383
04:02:10,319 --> 04:02:14,800
for linux windows on the name in visual studio code at least to create a


3384
04:02:14,800 --> 04:02:18,319
constructor you can do that and say create constructor or you could manually


3385
04:02:18,319 --> 04:02:24,080
create a constructor so you say cat this name okay that's a constructor


3386
04:02:24,080 --> 04:02:29,040
and also know that um you could make this a const because it is actually


3387
04:02:29,040 --> 04:02:32,720
using a final field but we're going to talk about that later


3388
04:02:32,720 --> 04:02:39,520
now we have a cat class here that has a constructor called just cat meaning


3389
04:02:39,520 --> 04:02:44,399
that in here you can say final


3390
04:02:44,399 --> 04:02:48,319
fluffball is cat


3391
04:02:48,319 --> 04:02:52,239
and then you say fluffball all right so now you're creating an


3392
04:02:52,239 --> 04:02:57,600
instance of the cat class and the name of the variable is called fluffball


3393
04:02:57,600 --> 04:03:04,399
and the name of the cat is fluffball right


3394
04:03:04,399 --> 04:03:08,880
so then you can say print


3395
04:03:08,880 --> 04:03:10,479
off ball


3396
04:03:10,479 --> 04:03:13,920
dots name all right so


3397
04:03:13,920 --> 04:03:16,160
that is just normal constructor it has


3398
04:03:16,160 --> 04:03:19,680
nothing to do with a factory constructor but what a factory constructor actually


3399
04:03:19,680 --> 04:03:24,160
is is a way for you to construct instances


3400
04:03:24,160 --> 04:03:31,040
of your classes and using convenience functions


3401
04:03:31,040 --> 04:03:35,600
so what that means is that if you in your code see that


3402
04:03:35,600 --> 04:03:41,199
you are creating instances of this class like 20 times 30 times different places


3403
04:03:41,199 --> 04:03:46,319
in your application using this exact same name fluffball


3404
04:03:46,319 --> 04:03:49,439
then you need to then create a factory


3405
04:03:49,439 --> 04:03:55,040
constructor that is a clear sign that your usual use case for create an


3406
04:03:55,040 --> 04:03:57,920
instance of class is through


3407
04:03:57,920 --> 04:04:01,600
the same name of fluffball so


3408
04:04:01,600 --> 04:04:05,439
that's where factory constructors are useful for and as their name indicates


3409
04:04:05,439 --> 04:04:07,760
is a way to create


3410
04:04:07,760 --> 04:04:13,040
a product like a factory does uh super fast for you okay so it's the speed at


3411
04:04:13,040 --> 04:04:16,399
which you can create an instance of a class that the factory constructor


3412
04:04:16,399 --> 04:04:20,319
shines at all right so let's now look at a factory


3413
04:04:20,319 --> 04:04:25,359
constructor that gives us an instance of cap whose name is always fluffball all


3414
04:04:25,359 --> 04:04:28,560
right the way to do that is you would say


3415
04:04:28,560 --> 04:04:33,680
factory and you would say cat dot fluffball


3416
04:04:33,680 --> 04:04:39,120
so you say any class called cat which is this class has a function called


3417
04:04:39,120 --> 04:04:43,359
fluffball which is this factory constructor and then you would put your


3418
04:04:43,359 --> 04:04:48,319
parentheses in here and then what you need to do is to kind


3419
04:04:48,319 --> 04:04:51,600
of set up your class instance in this case


3420
04:04:51,600 --> 04:04:54,560
like if you say curly brackets and say this name


3421
04:04:54,560 --> 04:04:59,520
is fluff like that that's how you're basically


3422
04:04:59,520 --> 04:05:04,000
creating an instance of your class but the usual way of doing that is you say


3423
04:05:04,000 --> 04:05:06,239
this name


3424
04:05:06,239 --> 04:05:11,199
dude let's see uh factory cat fluff ball


3425
04:05:11,199 --> 04:05:16,720
and then you would say name is fluff


3426
04:05:16,720 --> 04:05:20,239
see that i've kind of like forgotten the um


3427
04:05:20,239 --> 04:05:24,319
uh syntax for factory uh so let's go i'm


3428
04:05:24,319 --> 04:05:30,880
gonna bring up safari here and let's go and say guard factory constructor


3429
04:05:30,880 --> 04:05:35,600
i'll bring bring up here factory constructor so let's say factory


3430
04:05:35,600 --> 04:05:40,080
and let's go and see an example and you can see here it says factory logger like


3431
04:05:40,080 --> 04:05:44,560
that okay and there's a factory logger blah blah like that so


3432
04:05:44,560 --> 04:05:48,880
are basically so what what it's basically saying in here is saying that


3433
04:05:48,880 --> 04:05:53,520
this in this function you need to return something okay so let's close that


3434
04:05:53,520 --> 04:05:57,760
safari window and what we're going to do in here we're going to say return cat


3435
04:05:57,760 --> 04:06:01,359
and as the name we're gonna say fluffball all right so that's how you


3436
04:06:01,359 --> 04:06:06,720
would create like a factory constructor so what you're doing here is saying that


3437
04:06:06,720 --> 04:06:11,520
i have a constructor called fluffball whose return value is a cat


3438
04:06:11,520 --> 04:06:15,920
but inside i have some special logic that kind of packages it up just like


3439
04:06:15,920 --> 04:06:19,760
you do in a factory so let's go in here instead of doing cat


3440
04:06:19,760 --> 04:06:24,880
fluff ball like that then you can just say cat dot fluffball okay so it kind of


3441
04:06:24,880 --> 04:06:28,640
like became a um


3442
04:06:28,640 --> 04:06:33,600
it became like a convenient function in that you can just say cat fluff ball and


3443
04:06:33,600 --> 04:06:37,600
then you say print fluffball


3444
04:06:37,600 --> 04:06:42,479
dot name and you can see by default it is


3445
04:06:42,479 --> 04:06:46,880
or whatever you put here fluffball 2 print and it gets printed to


3446
04:06:46,880 --> 04:06:51,359
the screen ok so that's how you would create a factory


3447
04:06:51,359 --> 04:06:54,880
constructor and a factory constructor is really really important when you're


3448
04:06:54,880 --> 04:06:58,479
talking about class clusters we haven't talked about class clusters


3449
04:06:58,479 --> 04:07:03,600
and to be honest with you i don't think that we're gonna talk about that in this


3450
04:07:03,600 --> 04:07:06,000
course i don't think anywhere in this course


3451
04:07:06,000 --> 04:07:10,239
i've actually talked about class clusters


3452
04:07:10,239 --> 04:07:15,279
but know that in the context of dart and abstract


3453
04:07:15,279 --> 04:07:20,160
classes a factory constructor does not necessarily


3454
04:07:20,160 --> 04:07:26,399
have to return an instance of the same class all right so it can actually


3455
04:07:26,399 --> 04:07:29,600
return an instance of another class


3456
04:07:29,600 --> 04:07:35,279
but i highly suggest that you actually go and read about factory constructors


3457
04:07:35,279 --> 04:07:39,199
as i just did just google factory constructor


3458
04:07:39,199 --> 04:07:42,479
dart and you will see some examples of it


3459
04:07:42,479 --> 04:07:44,960
um they are really useful if you're working


3460
04:07:44,960 --> 04:07:48,880
with a lot of data and you're doing like data parsing


3461
04:07:48,880 --> 04:07:52,560
json parsing etc but


3462
04:07:52,560 --> 04:07:56,800
i don't think it's so useful right now for you to know


3463
04:07:56,800 --> 04:08:01,439
but know that it is there available for you to use but


3464
04:08:01,439 --> 04:08:06,960
i leave it up to you to go and read more about it yourself


3465
04:08:07,279 --> 04:08:09,680
okay and we've now talked about factory


3466
04:08:09,680 --> 04:08:14,880
constructors and um now let's talk a little bit about


3467
04:08:14,880 --> 04:08:20,720
custom operators so i'm going to bring custom operators here okay


3468
04:08:20,960 --> 04:08:26,880
now a custom operator in dart is


3469
04:08:27,520 --> 04:08:33,439
an operator such as an equal sign or equal equal sign for for instance


3470
04:08:33,439 --> 04:08:39,040
um checking equality um of an instance of an object with another instance of


3471
04:08:39,040 --> 04:08:42,960
the same object um a custom operator allows you in dart


3472
04:08:42,960 --> 04:08:50,080
to override the ability of your class to be compared to or added to or


3473
04:08:50,080 --> 04:08:54,159
subtracted from multiplied with something


3474
04:08:54,159 --> 04:08:59,520
with your own logic now let's see what i mean by that let's say that


3475
04:08:59,520 --> 04:09:05,279
you have final uh cat one and that is equal to cat with the name of foo


3476
04:09:05,279 --> 04:09:09,600
then you say okay i have cat two now with the exact same name


3477
04:09:09,600 --> 04:09:16,239
and then you'd say if cat one is exactly the same as cat 2 prints they are equal


3478
04:09:16,239 --> 04:09:21,760
otherwise say print they are not equal ok


3479
04:09:22,080 --> 04:09:25,040
so these two instances have the exact same


3480
04:09:25,040 --> 04:09:27,359
name foo


3481
04:09:27,359 --> 04:09:30,479
and if you run this code now you will see


3482
04:09:30,479 --> 04:09:34,800
that dart is said it says that they're not equal although internally you may


3483
04:09:34,800 --> 04:09:39,040
think hmm for me in my project anytime


3484
04:09:39,040 --> 04:09:44,720
two cats have the same name i want them to be considered equal and


3485
04:09:44,720 --> 04:09:48,000
this is like where things get interesting because then you


3486
04:09:48,000 --> 04:09:55,040
can override this particular function or operator at the language


3487
04:09:55,040 --> 04:10:00,640
level only for your class so the way to do that is you would go and start by


3488
04:10:00,640 --> 04:10:04,640
writing override with an ad sign


3489
04:10:04,640 --> 04:10:09,600
and you say bool operator equal equal covariance i'm


3490
04:10:09,600 --> 04:10:13,040
going to explain all this don't worry about it cat and you say cat and then


3491
04:10:13,040 --> 04:10:16,479
here you say um other


3492
04:10:16,479 --> 04:10:20,720
name is me okay and then we get a problem with the hash


3493
04:10:20,720 --> 04:10:25,439
i'll add that as well so don't worry about all of this um i


3494
04:10:25,439 --> 04:10:28,880
will explain it in details um


3495
04:10:28,880 --> 04:10:33,680
all right so okay so let's start by looking at what i just


3496
04:10:33,680 --> 04:10:37,880
did here with the override


3497
04:10:38,080 --> 04:10:42,319
notation here overwrite is very important term for you


3498
04:10:42,319 --> 04:10:45,359
to understand in object-oriented programming and that is


3499
04:10:45,359 --> 04:10:48,319
wherever you have um


3500
04:10:48,319 --> 04:10:53,040
a class and you are


3501
04:10:53,040 --> 04:10:58,239
inheriting from that class in in our case for instance class cat you can see


3502
04:10:58,239 --> 04:11:03,520
that it doesn't have any extents but by default in dart every class


3503
04:11:03,520 --> 04:11:08,720
inherits implicitly from the object class so you could just say extends


3504
04:11:08,720 --> 04:11:11,359
object and that is the exact same thing as


3505
04:11:11,359 --> 04:11:14,720
omitting writing that those two words so


3506
04:11:14,720 --> 04:11:21,520
just know that cat comes from object an object internally already defines an


3507
04:11:21,520 --> 04:11:26,080
operator called equal equal that returns a boolean


3508
04:11:26,080 --> 04:11:29,840
a boolean is a value that can either include true


3509
04:11:29,840 --> 04:11:34,880
that can either be true or false and it's great just for saying that is


3510
04:11:34,880 --> 04:11:40,479
this this or is this that is this this or not kind of like that


3511
04:11:40,479 --> 04:11:46,800
so a boolean is a data type all right so that operator an operator is a keyword


3512
04:11:46,800 --> 04:11:52,159
as well in dart basically saying telling dart that we are going to change


3513
04:11:52,159 --> 04:11:57,199
change as in override the functionality of this equally equal


3514
04:11:57,199 --> 04:12:01,600
operator that is defined at the object level with our own


3515
04:12:01,600 --> 04:12:05,439
implementation all right let's actually bring the extents here


3516
04:12:05,439 --> 04:12:09,680
and go into this object definition just select it right click on it and say go


3517
04:12:09,680 --> 04:12:14,640
to definition all right and search for operator equal equal


3518
04:12:14,640 --> 04:12:17,600
you'll see that it is defined right there for you okay


3519
04:12:17,600 --> 04:12:22,319
and there's lots of documentation about what it actually does


3520
04:12:22,319 --> 04:12:26,960
so that's this syntax we're overriding we're changing the definition of that


3521
04:12:26,960 --> 04:12:30,800
function all right so


3522
04:12:30,800 --> 04:12:35,040
then since this is a simple function an operator in itself is a function it


3523
04:12:35,040 --> 04:12:39,359
actually you can see it starts it has like a


3524
04:12:39,359 --> 04:12:43,760
parenthesis here in the parenthesis you get the value


3525
04:12:43,760 --> 04:12:50,000
that that operator is comparing your class with okay so


3526
04:12:50,000 --> 04:12:53,040
it's that that value that your class is being


3527
04:12:53,040 --> 04:12:56,319
compared to also needs to be a cat because you cannot in dart is not


3528
04:12:56,319 --> 04:13:00,399
recommended that you compare tune classes of different types with each


3529
04:13:00,399 --> 04:13:04,560
other so here we say covariance covariance


3530
04:13:04,560 --> 04:13:08,479
is a keyword that you merely use in dart but i think it's important for you to


3531
04:13:08,479 --> 04:13:13,600
understand what it does is that it tells dart that although


3532
04:13:13,600 --> 04:13:17,920
at the object level we said that the parameter that comes in


3533
04:13:17,920 --> 04:13:23,760
is of type object but in our case we are sure that the value that comes in this


3534
04:13:23,760 --> 04:13:28,960
function is actually a cat all right so covariant tells dart that


3535
04:13:28,960 --> 04:13:34,080
forget what the super class which is object defines as the parameter type for


3536
04:13:34,080 --> 04:13:39,279
this parameter because if you remove covarian you see it says cat


3537
04:13:39,279 --> 04:13:43,439
an object as a parameter but if it's a covariant you're kind of


3538
04:13:43,439 --> 04:13:48,960
like overriding even that assumption all right so we say okay an


3539
04:13:48,960 --> 04:13:52,720
equal so we're mean compared our instance of cat is being compared with


3540
04:13:52,720 --> 04:13:56,080
another cath instance and what we're doing is that we need to


3541
04:13:56,080 --> 04:13:59,680
return a boolean saying whether they're equal or not and you can see i'm just


3542
04:13:59,680 --> 04:14:03,279
comparing i'm just comparing the name which is our


3543
04:14:03,279 --> 04:14:07,439
name with the other instances name all right


3544
04:14:07,439 --> 04:14:12,080
now when you do that as you saw then we get a problem here which is kind of like


3545
04:14:12,080 --> 04:14:17,120
a warning that tells you that okay now that you've you've overwritten this


3546
04:14:17,120 --> 04:14:21,040
um operator you also need to override the


3547
04:14:21,040 --> 04:14:24,720
hash code all right now


3548
04:14:24,720 --> 04:14:28,880
to honestly i don't think like hashcode is such an important thing to talk about


3549
04:14:28,880 --> 04:14:34,720
right now but just know that hashcode is a special number


3550
04:14:34,720 --> 04:14:39,279
that you assign to your or a special identifier that you


3551
04:14:39,279 --> 04:14:42,560
assign to your instance of classes that is


3552
04:14:42,560 --> 04:14:47,439
then used inside collections for instance if you put your instance of of


3553
04:14:47,439 --> 04:14:49,520
cat inside a


3554
04:14:49,520 --> 04:14:53,279
dictionary then or sorry or inside a map as it is


3555
04:14:53,279 --> 04:14:56,960
called in dart which we talked about i believe in chapter


3556
04:14:56,960 --> 04:14:59,920
four yes in chapter four so if you didn't


3557
04:14:59,920 --> 04:15:03,760
watch chapter four i strongly suggest that you do that


3558
04:15:03,760 --> 04:15:08,880
so if you put instances of your


3559
04:15:10,479 --> 04:15:14,880
of your cat class inside a set


3560
04:15:14,880 --> 04:15:20,159
or inside a map then the way dart


3561
04:15:20,159 --> 04:15:25,520
knows that the the keys inside its map or the values inside the set are


3562
04:15:25,520 --> 04:15:28,880
actually unique it's using this hash value all right


3563
04:15:28,880 --> 04:15:32,479
so if you see if i go here and say command


3564
04:15:32,479 --> 04:15:37,840
dot to get a suggestion how to fix this it says create method hash code


3565
04:15:37,840 --> 04:15:40,720
that is what is required to fix this word


3566
04:15:40,720 --> 04:15:45,680
so you can see that it's an override which means that this hash code


3567
04:15:45,680 --> 04:15:50,800
getter was defined on the object class if we go to object and look for that you


3568
04:15:50,800 --> 04:15:53,680
can see that it is actually defined there


3569
04:15:53,680 --> 04:15:57,840
and we're overwriting its value and here it says i'm going to go to


3570
04:15:57,840 --> 04:16:03,600
super and get that value super is our object so as super class


3571
04:16:03,600 --> 04:16:08,000
that sits up above us all right but if you want to overwrite that in


3572
04:16:08,000 --> 04:16:12,159
case you in this case you can just say okay don't get the supers hash code just


3573
04:16:12,159 --> 04:16:15,439
get the name hashtag and to be honest with you this is just a


3574
04:16:15,439 --> 04:16:20,640
very technical stuff which i don't think belongs right in this chapter six but


3575
04:16:20,640 --> 04:16:26,239
just know that here we're creating an identifier for our cat class


3576
04:16:26,239 --> 04:16:31,359
which allows dart to understand that if this


3577
04:16:31,359 --> 04:16:39,600
cat classes instances are placed inside collections such as a map or a set


3578
04:16:39,600 --> 04:16:45,199
then it will know if they're unique or not okay


3579
04:16:45,920 --> 04:16:49,600
all right so now that we've done all of this we


3580
04:16:49,600 --> 04:16:54,479
can rerun the code and you will now see that it says they


3581
04:16:54,479 --> 04:16:57,520
are equal that's that's all we wanted that's


3582
04:16:57,520 --> 04:17:00,880
really all we want but there was a lot of code actually i


3583
04:17:00,880 --> 04:17:03,920
don't know it's like four lines of code um


3584
04:17:03,920 --> 04:17:08,560
this is not even considered a line of code it's kind of like a


3585
04:17:09,199 --> 04:17:15,520
is a hint to the analyzer but uh so


3586
04:17:15,520 --> 04:17:18,640
you could just say it's pretty much just two lines of code but it is quite a lot


3587
04:17:18,640 --> 04:17:21,199
of new things to be honest with you for you


3588
04:17:21,199 --> 04:17:23,520
to grasp


3589
04:17:23,520 --> 04:17:27,600
so i leave this here so you can have a look at it


3590
04:17:27,600 --> 04:17:30,399
um and i think


3591
04:17:30,399 --> 04:17:34,560
for this chapter to be honest with you we've talked a lot now in this chapter


3592
04:17:34,560 --> 04:17:39,760
about enumeration switch statements classes objects uh constructors


3593
04:17:39,760 --> 04:17:42,560
factory constructors


3594
04:17:42,560 --> 04:17:48,000
abstract classes inheritance a lot so it was quite a heavy chapter this chapter


3595
04:17:48,000 --> 04:17:51,120
six but i suggest that you


3596
04:17:51,120 --> 04:17:55,279
go and read the also the official documentation for dart because as i said


3597
04:17:55,279 --> 04:17:58,720
we don't have the possibility to talk about everything


3598
04:17:58,720 --> 04:18:02,560
um otherwise this course will just be


3599
04:18:02,560 --> 04:18:06,560
enormously big and that's not what i want to do so


3600
04:18:06,560 --> 04:18:09,120
please go and read the documentation about the things that we talked about


3601
04:18:09,120 --> 04:18:14,560
especially especially object oriented programming in dart so


3602
04:18:14,560 --> 04:18:19,359
and with that said in the next chapter we're going to talk


3603
04:18:19,359 --> 04:18:23,279
about some advanced features in dart such as


3604
04:18:23,279 --> 04:18:28,720
future async operations streams and generators


3605
04:18:28,720 --> 04:18:30,960
so


3606
04:18:31,439 --> 04:18:35,439
please have a look about at the documentation and i will see you in the


3607
04:18:35,439 --> 04:18:40,159
next chapter hello everyone and welcome to chapter 7


3608
04:18:40,159 --> 04:18:44,800
of this flutter course in this chapter we're going to talk about advanced dart


3609
04:18:44,800 --> 04:18:48,640
concepts things such as extensions futures


3610
04:18:48,640 --> 04:18:50,960
streams um


3611
04:18:50,960 --> 04:18:56,080
async await generators and um generics as well


3612
04:18:56,080 --> 04:18:58,800
so uh i'm kind of assuming that you've


3613
04:18:58,800 --> 04:19:01,760
already set up the project that we've talked about in the previous chapter so


3614
04:19:01,760 --> 04:19:05,439
i'm not going to go through that again and then i'm assuming that we have like


3615
04:19:05,439 --> 04:19:10,640
some sort of an iphone simulator so or an android emulator or any device


3616
04:19:10,640 --> 04:19:13,760
that you may be able to test your project on so


3617
04:19:13,760 --> 04:19:18,560
i'm going to bring up my project here so i'm going to place it right there


3618
04:19:18,560 --> 04:19:21,279
this is how we left the project in the previous chapter


3619
04:19:21,279 --> 04:19:26,319
and then i'm going to do command shift p on mac or control shift p in linux and


3620
04:19:26,319 --> 04:19:30,319
windows in order to select the device and i'm just going to say iphone 13 pro


3621
04:19:30,319 --> 04:19:35,040
which is a simulator that i have here um


3622
04:19:35,040 --> 04:19:39,680
right there and then i'm just going to go and say run


3623
04:19:39,680 --> 04:19:43,760
run without debugging okay so this is going to take its time and i just


3624
04:19:43,760 --> 04:19:47,120
thought to then use this time to explain a little


3625
04:19:47,120 --> 04:19:49,920
bit about extensions um


3626
04:19:49,920 --> 04:19:53,920
as you can see here extensions are the ability for


3627
04:19:53,920 --> 04:19:58,720
the programmer and dart in order to er are there the ability for the programmer


3628
04:19:58,720 --> 04:20:00,640
to extend


3629
04:20:00,640 --> 04:20:05,439
or add functionality to an existing class in chapter six we talked about


3630
04:20:05,439 --> 04:20:10,319
classes and objects so i kind of um would


3631
04:20:10,319 --> 04:20:14,399
wish for everyone who is in this chapter to act actually have followed that


3632
04:20:14,399 --> 04:20:17,439
chapter as well uh i'm actually going to go here and go


3633
04:20:17,439 --> 04:20:21,600
to do not disturb yeah i am actually there so let's have a look at a simple


3634
04:20:21,600 --> 04:20:25,120
extension in dart and how we can use that i can see that the programming


3635
04:20:25,120 --> 04:20:28,640
program is running i'm going to delete the old code that we had and i'm going


3636
04:20:28,640 --> 04:20:33,520
to bring my face to that bottom right and i'm just going to be a little bit


3637
04:20:33,520 --> 04:20:37,760
aware of these um captions that i'm displaying on the


3638
04:20:37,760 --> 04:20:40,960
screen and that they're blocking the screen so i'll just make sure that you


3639
04:20:40,960 --> 04:20:45,439
can see the contents as as we go on so


3640
04:20:45,439 --> 04:20:49,359
um let's also remove all of that and then let's just say that we have a


3641
04:20:49,359 --> 04:20:55,600
simple cat class here who has a name and we can go in here and say final


3642
04:20:55,600 --> 04:20:59,920
meow is yeah an instance of cat and i can say


3643
04:20:59,920 --> 04:21:02,159
print and me


3644
04:21:02,159 --> 04:21:07,359
actually we have to provide a name i can see here and let's just say fluffers


3645
04:21:07,359 --> 04:21:11,120
and save meow dot's name okay so we print that name


3646
04:21:11,120 --> 04:21:17,600
and i'm gonna say command s just like that and um perhaps gonna


3647
04:21:17,600 --> 04:21:21,680
bring up visual studio code so you can actually see the output so command s and


3648
04:21:21,680 --> 04:21:25,359
you can see that um where are we getting this there are


3649
04:21:25,359 --> 04:21:29,120
equals oh that's an old command so command is and you can see fluffers is


3650
04:21:29,120 --> 04:21:33,600
printed to the screen so that's because we have the name here okay so i'm also


3651
04:21:33,600 --> 04:21:36,800
going to get rid of this caption right now so you can see the entirety of the


3652
04:21:36,800 --> 04:21:41,279
code so like that bring it down here i'm also going to get rid of my


3653
04:21:41,279 --> 04:21:45,279
simulator and bring it to another screen okay so now let's say that you want to


3654
04:21:45,279 --> 04:21:49,600
add a functionality to this or a function to this class


3655
04:21:49,600 --> 04:21:55,120
that allows a cat to run or allow the cat to jump so one way to do that is to


3656
04:21:55,120 --> 04:22:00,239
actually go to the cat class class itself and create a


3657
04:22:00,239 --> 04:22:04,479
function in there but what you can also do is to go and say extension


3658
04:22:04,479 --> 04:22:10,000
for instance run on cat that's the syntax for creating an extension what


3659
04:22:10,000 --> 04:22:13,279
you're saying is that you're extending the


3660
04:22:13,279 --> 04:22:16,239
class call cats with


3661
04:22:16,239 --> 04:22:20,880
a new functionality that is called run now this is not the name of the function


3662
04:22:20,880 --> 04:22:23,199
itself it's just the name of your extension


3663
04:22:23,199 --> 04:22:27,439
and you don't have to really know about the name right now so much it's just


3664
04:22:27,439 --> 04:22:30,720
when you can go and become more advanced in dart and you for instance create


3665
04:22:30,720 --> 04:22:33,680
libraries for yourself that you


3666
04:22:33,680 --> 04:22:37,520
create extensions on different classes for instance in your library and then


3667
04:22:37,520 --> 04:22:41,279
people or programmers who use your library then they can in


3668
04:22:41,279 --> 04:22:45,840
basically include specific extensions that you've included


3669
04:22:45,840 --> 04:22:49,760
in your library in their code or they can exclude them


3670
04:22:49,760 --> 04:22:53,840
and so just know that it's just a name on the


3671
04:22:53,840 --> 04:22:57,760
extension so it doesn't mean so much right now okay so then you can just


3672
04:22:57,760 --> 04:23:02,000
create a function that has no return value called run and then you can say


3673
04:23:02,000 --> 04:23:06,319
print and cat name is running


3674
04:23:06,319 --> 04:23:09,760
and you know this syntax from the previous chapters that this is how you


3675
04:23:09,760 --> 04:23:15,479
format a string and then in here you're basically doing um spring interpolation


3676
04:23:15,479 --> 04:23:20,239
interpolation i think it's called and you're including that name inside


3677
04:23:20,239 --> 04:23:23,600
your own string so the result is going to be cat


3678
04:23:23,600 --> 04:23:27,199
space the name of this cat instance


3679
04:23:27,199 --> 04:23:30,399
space is running okay so


3680
04:23:30,399 --> 04:23:34,399
using that then you can every cat instance in your


3681
04:23:34,399 --> 04:23:39,439
project is gonna get that function called run so you can just


3682
04:23:39,439 --> 04:23:43,600
say me out run and command this and you can see that it


3683
04:23:43,600 --> 04:23:49,760
says cap fluffers is running so just know that extensions are


3684
04:23:49,760 --> 04:23:53,760
they're a great tool for you to use if you believe that there is a


3685
04:23:53,760 --> 04:23:57,279
functionality that you're adding to an existing class which it doesn't really


3686
04:23:57,279 --> 04:24:01,120
belong in that class itself


3687
04:24:01,120 --> 04:24:04,159
but it may for instance belong in the


3688
04:24:04,159 --> 04:24:07,199
current source file that you're working with so


3689
04:24:07,199 --> 04:24:12,159
extensions are very very useful and but i also believe that they need to


3690
04:24:12,159 --> 04:24:16,319
kind of be used with care kind of like sparsely so when you really need an


3691
04:24:16,319 --> 04:24:20,479
extension you could just go and create an extension and they have limitations


3692
04:24:20,479 --> 04:24:24,960
and as you get more used to programming in dart you will understand


3693
04:24:24,960 --> 04:24:29,279
their limitations a little bit better so just know that they're there


3694
04:24:29,279 --> 04:24:32,560
and can be used another example of an


3695
04:24:32,560 --> 04:24:34,960
extension is for instance if you had a class


3696
04:24:34,960 --> 04:24:39,199
person let me say first name


3697
04:24:39,199 --> 04:24:43,359
property okay so this is an instance property and then


3698
04:24:43,359 --> 04:24:48,319
you would say uh last name and then you say command dot individual


3699
04:24:48,319 --> 04:24:52,880
studio code on mac or control dot in linux and windows and you create a


3700
04:24:52,880 --> 04:24:57,920
constructor for your personal class okay so that's how you create an instance of


3701
04:24:57,920 --> 04:25:01,600
your person class then you can go in here and you say


3702
04:25:01,600 --> 04:25:05,600
um final fou is person whose first name is


3703
04:25:05,600 --> 04:25:11,199
who and whose last name is bar okay and in here let's say you want to be


3704
04:25:11,199 --> 04:25:16,080
able to calculate a person's full name all right so what you could do is to you


3705
04:25:16,080 --> 04:25:19,199
could say extension for me


3706
04:25:19,199 --> 04:25:23,920
one person and then here you could just say i have


3707
04:25:23,920 --> 04:25:28,479
a i want to calculate the full name so that the result type is going to be a


3708
04:25:28,479 --> 04:25:31,199
string and then you want to create a getter now


3709
04:25:31,199 --> 04:25:33,760
we haven't talked about getter so much but just know that it's kind of like a


3710
04:25:33,760 --> 04:25:37,359
property it's a property that can only be read forever but it cannot be written


3711
04:25:37,359 --> 04:25:40,640
to so you just say get and then you say phoney


3712
04:25:40,640 --> 04:25:45,439
as the name of the property and you will say that is equal to


3713
04:25:45,439 --> 04:25:50,000
dollar first name space dollar last name okay


3714
04:25:50,000 --> 04:25:53,600
so what you're saying here is that i have a getter whose return type is


3715
04:25:53,600 --> 04:25:56,880
string and whose name is full name and it returns the first name and last


3716
04:25:56,880 --> 04:26:01,760
memory with the space in between and then in here you could just say print


3717
04:26:01,760 --> 04:26:04,399
foo for me all right


3718
04:26:04,399 --> 04:26:09,279
and command s then i will bring the i'll remove the caption so you can see


3719
04:26:09,279 --> 04:26:13,279
that foo bar is printed to the screen okay


3720
04:26:13,279 --> 04:26:19,199
so that's for extensions and i'm gonna note that here in my i'm gonna mark it


3721
04:26:19,199 --> 04:26:23,439
in my notes that we've talked about extensions all right


3722
04:26:23,439 --> 04:26:27,279
now the next thing to talk about the next topic is futures


3723
04:26:27,279 --> 04:26:30,960
and as you can see here future is a data to be returned in the future as its name


3724
04:26:30,960 --> 04:26:33,520
suggests so um


3725
04:26:33,520 --> 04:26:36,880
and that is part of something called asynchronous programming if you haven't


3726
04:26:36,880 --> 04:26:40,800
uh been doing uh programming before you may not be so


3727
04:26:40,800 --> 04:26:44,800
familiar with the term synchronous or asynchronous um


3728
04:26:44,800 --> 04:26:49,600
a synchronous task is a task that happens when you ask for it and it


3729
04:26:49,600 --> 04:26:53,199
returns with the data that you ask for immediately


3730
04:26:53,199 --> 04:26:58,560
for instance if you say um what is 2 plus 2 and then we'll say


3731
04:26:58,560 --> 04:27:03,600
okay it's four that's the synchronous task but if you for instance say to your


3732
04:27:03,600 --> 04:27:08,159
um spouse or your friend go to the grocery store today please and


3733
04:27:08,159 --> 04:27:11,760
get some milk that is not gonna happen in this instant


3734
04:27:11,760 --> 04:27:16,399
it's i mean even if you even if you're the grocery stores right next to your


3735
04:27:16,399 --> 04:27:19,359
house or your apartment then your friend has to go


3736
04:27:19,359 --> 04:27:25,040
get get ready put put on shoes go to the store get the mail can come back so


3737
04:27:25,040 --> 04:27:31,040
um that that is an asynchronous task so an asynchronous task is basically a task


3738
04:27:31,040 --> 04:27:34,159
that whose results are not returned


3739
04:27:34,159 --> 04:27:36,800
immediately okay so


3740
04:27:36,800 --> 04:27:40,080
up until this point we've looked at functions that i'm actually going to


3741
04:27:40,080 --> 04:27:44,239
remove all of this code from here so that we don't have all of that


3742
04:27:44,239 --> 04:27:48,239
now we only have the void test function in here okay


3743
04:27:48,239 --> 04:27:50,479
so


3744
04:27:51,600 --> 04:27:55,520
all the functions that we've written so far have been synchronous functions in


3745
04:27:55,520 --> 04:28:00,399
that for instance you would say string multiplied by


3746
04:28:00,399 --> 04:28:05,600
two and then it gets an integer of a and it just says a multiplied by two all


3747
04:28:05,600 --> 04:28:09,760
right and actually sorry hint so it returns an


3748
04:28:09,760 --> 04:28:13,120
integer the function call the function name is called multiplied by two it


3749
04:28:13,120 --> 04:28:16,080
takes an integer as a parameter and just multiplies that integer by two and


3750
04:28:16,080 --> 04:28:21,040
returns it it's a synchronous operation okay however in dirt if you wanna work


3751
04:28:21,040 --> 04:28:24,080
with asynchronous operations that you have to


3752
04:28:24,080 --> 04:28:29,520
use a class called future so let's have a look at that um let's say


3753
04:28:29,520 --> 04:28:35,600
that you have a function multiplied by two it which it may take


3754
04:28:35,600 --> 04:28:40,319
some time in order to multiply a value okay this is hypothetical because yeah


3755
04:28:40,319 --> 04:28:43,120
the multiplication is going to be done immediately but we're just going to


3756
04:28:43,120 --> 04:28:46,399
assume that yeah this is a complicated multiplication and it will take some


3757
04:28:46,399 --> 04:28:51,040
time all right so let's say future and then you would say what is the actual


3758
04:28:51,040 --> 04:28:55,760
future what does it contain what data type can we say integer and then we say


3759
04:28:55,760 --> 04:28:58,000
heavy future


3760
04:28:58,000 --> 04:29:02,399
okay and it takes a value of int a heavy


3761
04:29:02,399 --> 04:29:06,880
future that multiplies by two something like that


3762
04:29:06,880 --> 04:29:12,640
okay so it says i return a future okay now


3763
04:29:12,640 --> 04:29:16,880
in here then your your um


3764
04:29:16,880 --> 04:29:21,600
responsibility is to create and package up an integer and return it inside a


3765
04:29:21,600 --> 04:29:25,439
future so if you for instance in here say okay


3766
04:29:25,439 --> 04:29:29,359
return 10 okay you see that it says l10 isn't


3767
04:29:29,359 --> 04:29:34,479
compatible with the future of integer because 10 is a synchronous value it's


3768
04:29:34,479 --> 04:29:39,359
right there it's present so what are you doing here then you could say


3769
04:29:39,359 --> 04:29:43,760
okay what i do return is a future and then you could say oh i'm going to


3770
04:29:43,760 --> 04:29:49,120
delay this future by a duration of three seconds okay


3771
04:29:49,120 --> 04:29:53,359
and then you'll see there's a second parameter to this delayed function


3772
04:29:53,359 --> 04:29:57,439
um you can see it let's see


3773
04:29:57,680 --> 04:30:02,399
uh if we have a look at delayed function in here you see there is a second


3774
04:30:02,399 --> 04:30:06,080
parameter called future or a computation so


3775
04:30:06,080 --> 04:30:09,840
in here what you're what you need to do is just to say okay


3776
04:30:09,840 --> 04:30:14,640
my second parameter is a function i'm going to ignore its return value well


3777
04:30:14,640 --> 04:30:17,439
i'm just going to return the value of a okay


3778
04:30:17,439 --> 04:30:22,880
so let's actually see if we say future delay duration seconds and then


3779
04:30:22,880 --> 04:30:29,840
we say the parameter is let's say e and then i'm just going to say return a


3780
04:30:29,840 --> 04:30:34,319
what is this value going to be then you know what we could actually look at


3781
04:30:34,319 --> 04:30:38,399
the documentation for future delayed so i can also refresh my mind


3782
04:30:38,399 --> 04:30:41,920
so i'm going to go and open a new safari window and i'm going to say future


3783
04:30:41,920 --> 04:30:44,960
delayed this is the type of stuff that usually


3784
04:30:44,960 --> 04:30:48,560
happens anyways if you're programming with dart i'm also going to increase the


3785
04:30:48,560 --> 04:30:50,880
size so that you can see it a little bit better


3786
04:30:50,880 --> 04:30:54,399
and let's have a look at a future delay here


3787
04:30:54,399 --> 04:30:58,080
and here we can see how it's constructed uh


3788
04:30:58,080 --> 04:31:02,159
how to use future okay so you can see here that there is a


3789
04:31:02,159 --> 04:31:06,720
function that it doesn't basically take anything any uh value so


3790
04:31:06,720 --> 04:31:12,000
i think the problem was that i may have just created like a function that um was


3791
04:31:12,000 --> 04:31:16,720
expecting a parameter so this is how you would do that and i mean


3792
04:31:16,720 --> 04:31:20,319
it is a little bit strange argument like i'm actually going to clean it up a


3793
04:31:20,319 --> 04:31:23,760
little bit as well and then make this a constant as you can


3794
04:31:23,760 --> 04:31:28,000
see it's suggested here and then return so i've written a lot of code i haven't


3795
04:31:28,000 --> 04:31:31,840
explained really what i've done here but i will do that now so let's see


3796
04:31:31,840 --> 04:31:36,960
uh we're saying that we're returning an integer in the future so


3797
04:31:36,960 --> 04:31:39,680
it's not going to be returned immediately it's going to take some time


3798
04:31:39,680 --> 04:31:44,640
for it to do its calculation okay so and then here let's say a multiplied by 2 as


3799
04:31:44,640 --> 04:31:48,640
we as we promised in the function signature okay so that's future int


3800
04:31:48,640 --> 04:31:52,080
this is the name of the function so nothing magical about that and then it


3801
04:31:52,080 --> 04:31:56,560
takes a parameter that says integer a in the function body itself we're saying


3802
04:31:56,560 --> 04:32:02,080
okay we're returning a future but we're delaying its return by the duration of


3803
04:32:02,080 --> 04:32:06,479
three seconds so duration as you can see is a class here if you go in it


3804
04:32:06,479 --> 04:32:09,680
actually is a constitution okay and then there is a class on top probably


3805
04:32:09,680 --> 04:32:14,159
somewhere uh let's see


3806
04:32:15,520 --> 04:32:22,000
constitution in blah blah blah constitution duration operator i believe


3807
04:32:22,000 --> 04:32:27,040
this is i mean the duration dart it's probably just a class duration


3808
04:32:27,040 --> 04:32:31,120
somewhere if you look at here class duration so


3809
04:32:31,120 --> 04:32:34,239
so we're saying that we're creating a duration as a first parameter to the


3810
04:32:34,239 --> 04:32:38,319
delayed function of the future so we're saying that we're delaying this future's


3811
04:32:38,319 --> 04:32:41,840
return value by three seconds and then it says okay i'm going to wait three


3812
04:32:41,840 --> 04:32:45,359
seconds but then i'm after i waited three seconds i'm going to call this


3813
04:32:45,359 --> 04:32:48,000
function and this is kind of like a shorthand for


3814
04:32:48,000 --> 04:32:52,720
creating a an inline function you could also do it like this you say okay my


3815
04:32:52,720 --> 04:32:56,319
function that i'm providing to this function so it's like you're passing a


3816
04:32:56,319 --> 04:33:00,720
function to the future delay function and then in here you could just say okay


3817
04:33:00,720 --> 04:33:06,080
i return a multiplied by two and then a semicolon so this is probably a little


3818
04:33:06,080 --> 04:33:09,920
bit easier to read so um


3819
04:33:09,920 --> 04:33:15,199
now that we have that um we could actually use this function in


3820
04:33:15,199 --> 04:33:19,760
our test um in our test function so


3821
04:33:19,760 --> 04:33:24,000
when you then um i mean now that actually we we've now


3822
04:33:24,000 --> 04:33:29,039
talked a little bit a bit about future and in order to use a


3823
04:33:29,039 --> 04:33:32,000
future then you need to know something about


3824
04:33:32,000 --> 04:33:35,199
async and awaiting dart now


3825
04:33:35,199 --> 04:33:39,920
async and await are very related to each other but quite


3826
04:33:39,920 --> 04:33:42,561
different in their meaning and um


3827
04:33:42,561 --> 04:33:46,639
i just want to now explain actually first async


3828
04:33:46,639 --> 04:33:52,320
async is a key word in dart that marks a function as asynchronous in that


3829
04:33:52,320 --> 04:33:55,680
remember synchronous is something that returns immediately and asynchronous is


3830
04:33:55,680 --> 04:33:59,520
something that does not return immediately takes some time however to


3831
04:33:59,520 --> 04:34:04,959
mark a function async in here it means that this function internally


3832
04:34:04,959 --> 04:34:09,840
can execute commands that do not return immediately okay


3833
04:34:09,840 --> 04:34:13,920
so ac marking a function as async it


3834
04:34:13,920 --> 04:34:18,561
it it means that this function internally calls other functions that do


3835
04:34:18,561 --> 04:34:24,639
asynchronous work so let's now say final um result is


3836
04:34:24,639 --> 04:34:28,561
heavy future and we say 10 okay


3837
04:34:28,561 --> 04:34:32,480
now that we've done that let me just print the result and you'd be surprised


3838
04:34:32,480 --> 04:34:36,240
to actually see the result when we do that and you'll see that it


3839
04:34:36,240 --> 04:34:39,199
is not what you think it's not going to be 20 okay


3840
04:34:39,199 --> 04:34:43,760
so i'm gonna get rid of this caption so that you can see the the result and i'm


3841
04:34:43,760 --> 04:34:47,279
gonna clear the results in the console and command s


3842
04:34:47,279 --> 04:34:52,320
and you'll see that what got printed to the screen is actually the future is not


3843
04:34:52,320 --> 04:34:56,561
is not what you think it's not the value 20 which should be a


3844
04:34:56,561 --> 04:35:00,879
multiplied by 2 which should be 20. so what happened here is that when you call


3845
04:35:00,879 --> 04:35:04,561
a function that returns a future you're actually getting the future back you're


3846
04:35:04,561 --> 04:35:09,520
not getting its data back so how do you get that data back well by


3847
04:35:09,520 --> 04:35:14,080
prefixing the function with the keyword await


3848
04:35:14,080 --> 04:35:20,240
so as its name indicates this keyword is just going to wait for


3849
04:35:20,240 --> 04:35:23,840
the result of this function to be calculated and then it's gonna go to the


3850
04:35:23,840 --> 04:35:26,959
next line okay so


3851
04:35:26,959 --> 04:35:30,879
these two are very related to each other and you'll see that if i remove async


3852
04:35:30,879 --> 04:35:34,879
then i will get an error saying that well you said this function


3853
04:35:34,879 --> 04:35:38,959
called test is a synchronous function it just returns void


3854
04:35:38,959 --> 04:35:43,600
basically means it doesn't return anything and it asynchronously does its


3855
04:35:43,600 --> 04:35:47,600
work and doesn't have to wait for anything so


3856
04:35:47,600 --> 04:35:51,119
but then inside the function you're saying wait which means yeah i have to


3857
04:35:51,119 --> 04:35:54,320
wait some time for something and that's not okay so


3858
04:35:54,320 --> 04:35:58,400
what you need to do then is you mark your functions with async if internally


3859
04:35:58,400 --> 04:36:02,160
in that function you're using a weight all right


3860
04:36:02,160 --> 04:36:07,520
and the weight itself then is used for


3861
04:36:07,520 --> 04:36:12,480
waiting for the result of the future okay so if you remove this async and


3862
04:36:12,480 --> 04:36:16,840
then you remove this await everything will just work but it's just


3863
04:36:16,840 --> 04:36:22,719
synchronously getting the future of the heavy future that multiplies by two and


3864
04:36:22,719 --> 04:36:27,199
printing it so it's not doing any asynchronous work in here you can see


3865
04:36:27,199 --> 04:36:31,840
it's just getting that instance so now that we're calling that let's command s


3866
04:36:31,840 --> 04:36:35,520
and you'll see it's waiting three seconds and then printed the


3867
04:36:35,520 --> 04:36:39,119
result 20 to the screen okay so


3868
04:36:39,119 --> 04:36:43,920
that for us was async and in weight and we're going to use async and in a way


3869
04:36:43,920 --> 04:36:48,160
and await quite a lot in this course so it would be really good if you could


3870
04:36:48,160 --> 04:36:51,279
have with this information that i gave you if you could just have a little bit


3871
04:36:51,279 --> 04:36:54,879
of a read about future like documentation


3872
04:36:54,879 --> 04:36:58,320
on the web so if you just search future


3873
04:36:58,320 --> 04:37:03,760
dart um and maybe async await and read a little bit about them because


3874
04:37:03,760 --> 04:37:06,959
they're so important in doing asynchronous work in dart that we just


3875
04:37:06,959 --> 04:37:10,480
can't jump over them okay


3876
04:37:10,719 --> 04:37:15,199
all right um so now we've talked about future


3877
04:37:15,199 --> 04:37:19,119
uh and we've talked about async and awaits


3878
04:37:19,119 --> 04:37:22,959
so i'm just gonna mark them as


3879
04:37:23,039 --> 04:37:28,400
done in my notes um the next topic to talk about


3880
04:37:28,400 --> 04:37:31,760
it would be streams


3881
04:37:31,760 --> 04:37:38,000
so as you saw here a future in dart is a class that controls the computation of


3882
04:37:38,000 --> 04:37:42,561
an asynchronous value in order to be returned in some point in the future


3883
04:37:42,561 --> 04:37:45,920
however quite often in


3884
04:37:45,920 --> 04:37:50,719
in your client's work or even server work you need to do work that is


3885
04:37:50,719 --> 04:37:56,240
asynchronous however it is continuous work for instance if you if like i have


3886
04:37:56,240 --> 04:38:01,600
the time uh displayed on top of my screen on the right hand corner


3887
04:38:01,600 --> 04:38:05,359
that is a stream of strings


3888
04:38:05,359 --> 04:38:11,840
it is a it is a stream because it doesn't have an end ready it it's a


3889
04:38:11,840 --> 04:38:15,920
continuous pipe of information every minute that


3890
04:38:15,920 --> 04:38:20,400
little ticker up on top right it's gonna increase and


3891
04:38:20,400 --> 04:38:24,639
it's gonna go to zero six fifty zero six fifty 651 so


3892
04:38:24,639 --> 04:38:29,039
it is continuously calculating the current time and like sending it down at


3893
04:38:29,039 --> 04:38:32,240
this pipe now in asynchronous programming and in


3894
04:38:32,240 --> 04:38:36,240
reactive programming which you may also get into if you're


3895
04:38:36,240 --> 04:38:39,199
following with this course or if you're following some other course you may


3896
04:38:39,199 --> 04:38:43,199
actually be interested in learning about learning more about streams


3897
04:38:43,199 --> 04:38:47,760
and reactive streams a stream is just a pipe of data


3898
04:38:47,760 --> 04:38:50,719
um that either


3899
04:38:50,719 --> 04:38:56,561
it either completes or it never completes


3900
04:38:56,561 --> 04:39:02,160
actually it completes successfully or it never completes or it errors out and


3901
04:39:02,160 --> 04:39:06,561
dies okay so um a stream of time up there you can see


3902
04:39:06,561 --> 04:39:11,840
it's not 0 6 50 in the morning and it is a stream of data that never completes


3903
04:39:11,840 --> 04:39:15,680
because time is just just continuously going forward okay


3904
04:39:15,680 --> 04:39:21,359
so when we talk about streams we just mean a pipe of data a future


3905
04:39:21,359 --> 04:39:25,279
that sends data down this pipe that


3906
04:39:25,279 --> 04:39:28,480
never ends as you saw in the case of a future a


3907
04:39:28,480 --> 04:39:32,959
future ends it calculates its data and it returns and it says i'm done


3908
04:39:32,959 --> 04:39:38,958
but a stream in dart is a future that just continues working


3909
04:39:38,958 --> 04:39:42,878
okay so it calculates some data in the future and it also sends it down the


3910
04:39:42,878 --> 04:39:46,560
stream and it says oh well i'm not done here's another data here's another data


3911
04:39:46,560 --> 04:39:49,120
okay so


3912
04:39:49,120 --> 04:39:55,520
let's have a look at this uh stream and see how we can work with streams okay


3913
04:39:55,520 --> 04:40:02,798
so let's go and create a stream of um let's say a string


3914
04:40:02,798 --> 04:40:08,798
and then we say get name okay now in here


3915
04:40:08,798 --> 04:40:14,560
you your job is to create a string so if you say return hello


3916
04:40:14,560 --> 04:40:18,560
see that hello is not compatible with the return type that you promised it's


3917
04:40:18,560 --> 04:40:22,798
going to be a string um so you it this is very similar to how


3918
04:40:22,798 --> 04:40:26,718
we worked with the future of integer you couldn't return an


3919
04:40:26,718 --> 04:40:30,638
integer in that future but you have to create a future of integer and inside


3920
04:40:30,638 --> 04:40:33,920
the function return the actual integer which was the


3921
04:40:33,920 --> 04:40:36,958
computation if i go back you will see that


3922
04:40:36,958 --> 04:40:40,878
code here right the future delayed and inside this


3923
04:40:40,878 --> 04:40:43,920
function you're actually doing the computation all right


3924
04:40:43,920 --> 04:40:46,878
so how do we create a stream and you could


3925
04:40:46,878 --> 04:40:50,878
just say stream and then you could say


3926
04:40:50,878 --> 04:40:57,600
okay periodic for instance or a value okay if you say we return a stream of


3927
04:40:57,600 --> 04:41:00,560
value and then you could say foo


3928
04:41:00,560 --> 04:41:03,840
is accepted what this means is that you have a pipe


3929
04:41:03,840 --> 04:41:07,760
of data but the only value that it contains is a


3930
04:41:07,760 --> 04:41:10,878
foo is the value of food that's it all right


3931
04:41:10,878 --> 04:41:16,878
so let's now go into this test function and try to consume this uh stream if you


3932
04:41:16,878 --> 04:41:21,200
just said final value is gets me


3933
04:41:21,200 --> 04:41:25,920
and you just print this value and then i'm going to clear the logs


3934
04:41:25,920 --> 04:41:30,000
here and say command s you'll see that just like future it just says instance


3935
04:41:30,000 --> 04:41:35,760
of controller stream okay so it is not the actual value inside the string so


3936
04:41:35,760 --> 04:41:39,280
the question is how do you wait for values


3937
04:41:39,280 --> 04:41:44,480
inside a stream you could just say okay await


3938
04:41:44,480 --> 04:41:47,440
it says okay you've actually we could read this a weight


3939
04:41:47,440 --> 04:41:50,798
applied to stream string which is not a future so


3940
04:41:50,798 --> 04:41:54,958
dart is understanding that okay you're awaiting on a stream but


3941
04:41:54,958 --> 04:41:58,160
this is this is not just like a future that you're gonna wait for there's


3942
04:41:58,160 --> 04:42:02,400
nothing to await like it's not a single value is a stream so


3943
04:42:02,400 --> 04:42:05,840
the syntax to do that is await


3944
04:42:05,840 --> 04:42:10,160
four okay so this is a syntax


3945
04:42:10,160 --> 04:42:15,040
for awaiting for values inside a stream then you could say wait for final value


3946
04:42:15,040 --> 04:42:18,000
in its name okay


3947
04:42:18,000 --> 04:42:20,958
and then you could just print the value so this is a little bit of a strange


3948
04:42:20,958 --> 04:42:25,440
syntax but if you read it in like in english it makes perfect sense you're


3949
04:42:25,440 --> 04:42:31,040
waiting for values in get's name if you just ignore the final in here


3950
04:42:31,040 --> 04:42:33,520
okay but read it in english from left to


3951
04:42:33,520 --> 04:42:37,760
right await for values in get name that's it


3952
04:42:37,760 --> 04:42:41,360
and then at the end i'm going to say print stream


3953
04:42:41,360 --> 04:42:44,480
finished working


3954
04:42:45,520 --> 04:42:50,638
here the console command s and you'll see it immediately said foo


3955
04:42:50,638 --> 04:42:54,638
and then stream finished working i'm gonna clear it command s


3956
04:42:54,638 --> 04:42:59,680
foo stream finish working okay so this is an interesting concept but


3957
04:42:59,680 --> 04:43:03,280
it's still not a stream really i mean we're packaging the full string inside


3958
04:43:03,280 --> 04:43:07,600
the stream but it's only one value we could have done


3959
04:43:07,600 --> 04:43:11,600
that with a future so let's take advantage of streams actual


3960
04:43:11,600 --> 04:43:15,920
functionality of sending down data in its pipe


3961
04:43:15,920 --> 04:43:19,760
continuously so what we could do in here say stream


3962
04:43:19,760 --> 04:43:24,718
periodic it means periodically produce values and in here you can see the first


3963
04:43:24,718 --> 04:43:28,958
parameter is a duration so let's say constant duration


3964
04:43:28,958 --> 04:43:34,958
of seconds every second okay and then there is a second parameter in here


3965
04:43:34,958 --> 04:43:38,560
that you'll have to provide if i move my mouse over periodic you'll see that the


3966
04:43:38,560 --> 04:43:44,000
second parameter is this string function int okay so it means that give me a


3967
04:43:44,000 --> 04:43:49,440
function that accepts an integer and then it returns a string all right


3968
04:43:49,440 --> 04:43:52,958
and it understands that it needs to return a string because you're saying


3969
04:43:52,958 --> 04:43:59,040
that your stream is a string if you change this to an int and then went here


3970
04:43:59,040 --> 04:44:03,760
um to the documentation and the documentation will actually or the


3971
04:44:03,760 --> 04:44:07,040
method signature will change to say that uh your you should support you're


3972
04:44:07,040 --> 04:44:10,480
supposed to take an integer in this function that you provide to me and then


3973
04:44:10,480 --> 04:44:13,840
you need to return an integer okay so that string i just wanted to show you


3974
04:44:13,840 --> 04:44:17,920
that that string that was shown in the function signature there it's because we


3975
04:44:17,920 --> 04:44:21,680
promised to return a string in our function okay so


3976
04:44:21,680 --> 04:44:25,040
let's go in here basically the function signature said


3977
04:44:25,040 --> 04:44:28,878
that you need to accept an integer so i'm just going to say value


3978
04:44:28,878 --> 04:44:34,080
and then let's go in here i'm just going to say return foo


3979
04:44:34,080 --> 04:44:38,718
so we basically conform to that function signature we


3980
04:44:38,718 --> 04:44:42,560
said we take some value and you see the value is an integer


3981
04:44:42,560 --> 04:44:47,520
and then we're returning a string okay so now we can consume that so if i clear


3982
04:44:47,520 --> 04:44:52,480
this log and i say command s you see that every second the value of foo is


3983
04:44:52,480 --> 04:44:54,560
going to get printed to the screen and that's


3984
04:44:54,560 --> 04:44:58,638
actually i need to remove this caption i can see you can't see it


3985
04:44:58,638 --> 04:45:02,400
you see that 10 times 11 times 12 13


3986
04:45:02,400 --> 04:45:05,760
14. so all right


3987
04:45:05,760 --> 04:45:09,280
um i'm sorry about that the caption was blocking the screen i wasn't aware of


3988
04:45:09,280 --> 04:45:13,920
that um or actually i was aware of that but i forgot that that was the case in


3989
04:45:13,920 --> 04:45:19,040
in this as i was talking so you can see that every second the


3990
04:45:19,040 --> 04:45:25,280
stream is sending a value all right now that's that's basically the gist of


3991
04:45:25,280 --> 04:45:28,638
using streams you will


3992
04:45:28,638 --> 04:45:33,840
i'm wondering actually if we're gonna use the streams in this course i believe


3993
04:45:33,840 --> 04:45:39,840
at some point we are i need to probably look at the um


3994
04:45:39,840 --> 04:45:44,400
look at my notes yes i can see that we're actually using


3995
04:45:44,400 --> 04:45:48,560
streams in this course so don't worry about


3996
04:45:48,560 --> 04:45:53,040
if you don't fully understand streams at the moment because we're gonna talk


3997
04:45:53,040 --> 04:45:57,360
about streams and um


3998
04:45:57,440 --> 04:46:01,920
because we're gonna actually talk about streams and stream controllers later in


3999
04:46:01,920 --> 04:46:03,760
this in this


4000
04:46:03,760 --> 04:46:07,200
course so just know for now that a stream is like


4001
04:46:07,200 --> 04:46:11,680
a future but it continuously or periodically can return


4002
04:46:11,680 --> 04:46:18,638
values and then you can wait for those values using the await for


4003
04:46:18,638 --> 04:46:21,840
syntax and dart okay


4004
04:46:23,040 --> 04:46:25,920
okay um


4005
04:46:25,920 --> 04:46:30,240
now the next topic to


4006
04:46:30,240 --> 04:46:36,480
talk about in this chapter is generators so


4007
04:46:36,480 --> 04:46:39,760
generators are very very interesting in dart


4008
04:46:39,760 --> 04:46:45,200
some other languages also support generators and


4009
04:46:45,200 --> 04:46:48,958
but not not all modern languages do that so


4010
04:46:48,958 --> 04:46:55,360
a generator in dart is a function that returns


4011
04:46:55,360 --> 04:47:02,920
i don't want to say iterable but it returns a list of things


4012
04:47:03,040 --> 04:47:07,360
but it internally calculates that data in a


4013
04:47:07,360 --> 04:47:12,160
very simple way that's the best explanation i can come


4014
04:47:12,160 --> 04:47:14,638
up with to be honest with you let's have a look here


4015
04:47:14,638 --> 04:47:18,240
i think the best way to do that is actually write a function that does uh


4016
04:47:18,240 --> 04:47:23,440
creates a generator okay um i'm gonna clear this um


4017
04:47:23,440 --> 04:47:26,638
and then we have a test function here let's mark lacing okay


4018
04:47:26,638 --> 04:47:30,320
um let's now go create a generator and


4019
04:47:30,320 --> 04:47:32,958
let's say we want to


4020
04:47:32,958 --> 04:47:36,638
create a function that returns the values one two three


4021
04:47:36,638 --> 04:47:38,878
um so


4022
04:47:38,878 --> 04:47:44,718
a way to do that is would be to say i want a list of integers okay and my


4023
04:47:44,718 --> 04:47:50,480
function or get one two three like this


4024
04:47:50,638 --> 04:47:54,320
and you could say return one two three like that okay so that's completely


4025
04:47:54,320 --> 04:47:57,040
valid another way of doing that is to use


4026
04:47:57,040 --> 04:48:02,638
something called iterable and iterables i mean you need to


4027
04:48:02,638 --> 04:48:05,760
understand what iterables actually are and they're kind of like lazy


4028
04:48:05,760 --> 04:48:10,638
collections and when you get used to doing more software engineering you will


4029
04:48:10,638 --> 04:48:15,760
understand more what why we use lazy collections


4030
04:48:15,760 --> 04:48:21,920
but for now just know that an iterable is a prepared and packaged up list of


4031
04:48:21,920 --> 04:48:24,798
things but it is not


4032
04:48:24,798 --> 04:48:29,840
it is not completely calculated when it first begins


4033
04:48:29,840 --> 04:48:34,080
it's kind of like it's kind of like how a restaurant works


4034
04:48:34,080 --> 04:48:38,160
in a typical night a restaurant might have for instance 50 customers


4035
04:48:38,160 --> 04:48:42,878
and when that shift begins during the night


4036
04:48:42,878 --> 04:48:47,360
not all food is ready i mean it can't possibly be like when cut the first


4037
04:48:47,360 --> 04:48:51,040
customer comes in we can say that the food for the 50th customer is already


4038
04:48:51,040 --> 04:48:55,120
ready in the kitchen that's how a restaurant works it it


4039
04:48:55,120 --> 04:48:59,680
listens to orders of its customers and then it generates the food based on the


4040
04:48:59,680 --> 04:49:05,040
orders that's how an iterable works okay however a list in dart is an already


4041
04:49:05,040 --> 04:49:09,280
packaged list it means that it's as if like you go to a supermarket and then


4042
04:49:09,280 --> 04:49:12,480
you buy ready ready to go


4043
04:49:12,480 --> 04:49:18,638
food that's already packaged 30 packs of that that is a list that is 30 ready


4044
04:49:18,638 --> 04:49:24,320
readily packaged food items and then you take away that's how list works but an


4045
04:49:24,320 --> 04:49:27,040
iterable is more like it's


4046
04:49:27,040 --> 04:49:32,240
it's a list of like things that gets calculated on the go


4047
04:49:32,240 --> 04:49:35,600
on the fly all right so


4048
04:49:35,600 --> 04:49:38,798
um just know that for now so we just said


4049
04:49:38,798 --> 04:49:42,320
either well and as you can see dart understood that okay a list is also an


4050
04:49:42,320 --> 04:49:45,440
eye trouble so i don't have to worry about that so it didn't give you an


4051
04:49:45,440 --> 04:49:48,480
error so let's go and actually instead of


4052
04:49:48,480 --> 04:49:51,760
doing one two three let's go and mark our


4053
04:49:51,760 --> 04:49:56,560
um function as uh a generator and you do that with


4054
04:49:56,560 --> 04:50:03,920
either sync or async okay so and this would be a stream like


4055
04:50:03,920 --> 04:50:09,680
now the difference between sync with a an asterisk an async with an


4056
04:50:09,680 --> 04:50:13,520
asterisk is a sync function is an


4057
04:50:13,520 --> 04:50:19,280
it is a generator function that returns a list of things but it calculates that


4058
04:50:19,280 --> 04:50:22,958
list of things asynchronously and as you can guess the


4059
04:50:22,958 --> 04:50:28,638
async equivalent of the sync asterisk it does the exact same thing but it returns


4060
04:50:28,638 --> 04:50:32,560
a stream and which means it's asynchronously


4061
04:50:32,560 --> 04:50:38,000
calculating its result okay so when you mark a function as sync you


4062
04:50:38,000 --> 04:50:42,560
don't then go and return like this because you can see that you


4063
04:50:42,560 --> 04:50:46,560
can see that it says you're creating a generator function so you have to kind


4064
04:50:46,560 --> 04:50:52,480
of calculate your results now you can't just return a bunch of things to me okay


4065
04:50:52,480 --> 04:50:56,560
so to do that you would use a keyword in


4066
04:50:56,560 --> 04:51:00,480
dart called yield now yield is


4067
04:51:00,480 --> 04:51:04,400
a very interesting keyword that you would use only in generator functions as


4068
04:51:04,400 --> 04:51:07,760
far as i know and in here you're telling dart that


4069
04:51:07,760 --> 04:51:14,480
okay the first value that i'm outputting in my iterable is the value of one so


4070
04:51:14,480 --> 04:51:19,440
if in here we went and said um


4071
04:51:19,440 --> 04:51:24,320
i know or say we say four value in


4072
04:51:24,798 --> 04:51:30,240
gets one two three and then you could just say print value


4073
04:51:30,240 --> 04:51:33,760
you can see it only prints the value of 1. i'm actually going to get rid of this


4074
04:51:33,760 --> 04:51:38,638
caption you can see the output it only prints the value of 1 just


4075
04:51:38,638 --> 04:51:43,040
because we yielded the value of 1. okay so you could just send then say yield


4076
04:51:43,040 --> 04:51:47,600
one yield two and yield three then you'd see the values one two three


4077
04:51:47,600 --> 04:51:50,638
so in this function internally then you


4078
04:51:50,638 --> 04:51:54,240
could do a lot of other important things maybe some synchronous uh some other


4079
04:51:54,240 --> 04:51:58,160
synchronous calculations and every time you have a value to output


4080
04:51:58,160 --> 04:52:01,840
then you would basically um


4081
04:52:01,840 --> 04:52:08,560
you would do a yield and you could also print the entire return value


4082
04:52:08,560 --> 04:52:12,638
yes you don't have to do a four loop so you could just say print it and then


4083
04:52:12,638 --> 04:52:16,798
it would say one two three okay but if you do a for loop then you're


4084
04:52:16,798 --> 04:52:20,638
actually taking advantage of that lazy um


4085
04:52:20,638 --> 04:52:25,360
capabilities of an eye turbo so you could break out the loop at loop at any


4086
04:52:25,360 --> 04:52:30,400
time you could just say print value


4087
04:52:30,400 --> 04:52:34,958
if value is two


4088
04:52:34,958 --> 04:52:40,080
then you could break okay so let's clear the logs and command s


4089
04:52:40,080 --> 04:52:44,160
you'll see only the value of one and two gets printed and then as soon as you're


4090
04:52:44,160 --> 04:52:47,680
at the value of two then you're breaking and that means that this yield


4091
04:52:47,680 --> 04:52:53,120
was basically never calculated so that's that's like the beauty of


4092
04:52:54,480 --> 04:52:57,360
generator functions


4093
04:52:57,360 --> 04:53:01,280
so you could also create asynchronous generator functions as i mentioned and


4094
04:53:01,280 --> 04:53:06,160
that means that you're kind of like creating a stream of iterables


4095
04:53:06,160 --> 04:53:11,040
to be honest with you asynchronous generators i've i've maybe used them


4096
04:53:11,040 --> 04:53:14,718
once or twice uh in in the many years i've used dart


4097
04:53:14,718 --> 04:53:17,280
so i don't think you're going to use them a


4098
04:53:17,280 --> 04:53:22,320
lot but just know that they're there and you could use them by prefixing your eye


4099
04:53:22,320 --> 04:53:25,680
treble with a stream saying that basically you're returning a


4100
04:53:25,680 --> 04:53:29,840
stream of eye troubles and then suffixing your function with async just


4101
04:53:29,840 --> 04:53:34,000
like that all right so and then here it says okay you said


4102
04:53:34,000 --> 04:53:37,200
that you're returning a stream of ideal integers but you're turning only one


4103
04:53:37,200 --> 04:53:41,680
value in here then you would just say okay one two


4104
04:53:41,680 --> 04:53:44,240
okay um but then you would say yeah then you


4105
04:53:44,240 --> 04:53:47,920
have the ability to do whatever you want here like return an actual eye variable


4106
04:53:47,920 --> 04:53:51,360
okay so i'm not going to talk about asynchronous generators to be honest


4107
04:53:51,360 --> 04:53:55,440
with you in this course because they're kind of like outside the scope


4108
04:53:55,440 --> 04:54:01,440
so just know that they exist and you can use them


4109
04:54:01,680 --> 04:54:05,040
okay i'm going to mark in my notes that we've talked about generators so


4110
04:54:05,040 --> 04:54:09,200
the next topic to talk about are generics


4111
04:54:09,200 --> 04:54:14,560
and i'm going to bring up a caption here so generics in


4112
04:54:14,560 --> 04:54:17,680
programming languages that do support it are


4113
04:54:17,680 --> 04:54:22,400
there so that you avoid writing the same code over and over again okay


4114
04:54:22,400 --> 04:54:26,958
so let's say that you i mean this is a very


4115
04:54:26,958 --> 04:54:30,480
typical example i know it's a little bit cliche


4116
04:54:30,480 --> 04:54:33,600
but i think it's cliche for a reason and


4117
04:54:33,600 --> 04:54:36,798
that's because it's such a good example um


4118
04:54:36,798 --> 04:54:41,280
let's say you have a class


4119
04:54:41,280 --> 04:54:46,240
that stores a pair of data let's just say class


4120
04:54:46,240 --> 04:54:50,320
pair okay and then in here you could say okay what


4121
04:54:50,320 --> 04:54:54,958
pair of data do i want to store okay i want to store


4122
04:54:55,520 --> 04:55:00,160
value one as a string and i want to also store value two as a string and then you


4123
04:55:00,160 --> 04:55:04,080
create the constructor for it okay all right that's that's great it's a


4124
04:55:04,080 --> 04:55:09,040
pair of strings but how do you then pair an integer like two integers then


4125
04:55:09,040 --> 04:55:13,200
you would say okay i have to have another pair class and


4126
04:55:13,200 --> 04:55:18,240
this one is an integer but then you have this problem because


4127
04:55:18,240 --> 04:55:22,080
pair is already defined as a class up there on line seven


4128
04:55:22,080 --> 04:55:26,240
so you cannot reuse that you cannot have the same name then you would say okay


4129
04:55:26,240 --> 04:55:30,080
pair of integers


4130
04:55:30,560 --> 04:55:33,680
and then here you would say pair of strings


4131
04:55:33,680 --> 04:55:37,040
and you make sure that the constructor name is also


4132
04:55:37,040 --> 04:55:39,040
correct now


4133
04:55:39,040 --> 04:55:44,480
i mean you may have also i mean in this point at this point we don't have logic


4134
04:55:44,480 --> 04:55:48,000
at all in these two classes you may have actually quite a lot of logic in your


4135
04:55:48,000 --> 04:55:52,000
classes but as i mentioned i think during one of


4136
04:55:52,000 --> 04:55:55,440
these chapters i think it was chapter one or two program one of the main


4137
04:55:55,440 --> 04:56:00,240
characteristics of software engineers is that we all dislike


4138
04:56:00,240 --> 04:56:04,798
um writing the same piece of code over and over again so


4139
04:56:04,798 --> 04:56:08,560
we try to as much as possible avoid


4140
04:56:08,560 --> 04:56:12,400
um repeating ourselves so


4141
04:56:12,400 --> 04:56:17,600
that's where generics can come in so what you could do is instead of doing


4142
04:56:17,600 --> 04:56:22,000
this pair of pair of let me bring this here let's go and


4143
04:56:22,000 --> 04:56:25,840
create a class that is generic and you would say pair


4144
04:56:25,840 --> 04:56:31,360
and then a format for creating a generic class is to write after the name of the


4145
04:56:31,360 --> 04:56:37,200
class oh just to a less than and greater than sign okay and then open your square


4146
04:56:37,200 --> 04:56:39,360
brackets now


4147
04:56:39,360 --> 04:56:43,440
in here then you define your generic


4148
04:56:43,440 --> 04:56:50,560
names like the data types with usually with single characters let's say that


4149
04:56:50,560 --> 04:56:56,240
what you want is a pair of any data type let's call the first data type a


4150
04:56:56,240 --> 04:57:00,638
and the second data type b because there's two values so let's call this


4151
04:57:00,638 --> 04:57:06,240
one a and this one b okay you would just write them as we just say we say a and b


4152
04:57:06,240 --> 04:57:10,878
okay so then in here you would say final


4153
04:57:10,878 --> 04:57:14,000
a value one so you're telling the compiler


4154
04:57:14,000 --> 04:57:19,760
that okay whatever pair i'm creating the first data type that i accept is a


4155
04:57:19,760 --> 04:57:23,600
and that should be placed here and then we say okay then the b is the


4156
04:57:23,600 --> 04:57:26,638
second one and then we create a constructor for


4157
04:57:26,638 --> 04:57:30,240
this okay so how you would use this then is you


4158
04:57:30,240 --> 04:57:37,360
would say final and is pair then you would say foo and bar okay


4159
04:57:37,360 --> 04:57:43,120
and then this is just like a simple it's very similar than to pair of


4160
04:57:43,120 --> 04:57:46,878
strings that we wrote up there you see it worked as well but now in this case


4161
04:57:46,878 --> 04:57:51,520
dart is smart enough to understand that names is a pair of string and string


4162
04:57:51,520 --> 04:57:56,560
meaning that the two values that you pass to this pair generic class were


4163
04:57:56,560 --> 04:58:02,718
actually then placed for you magically inside the a and b templates


4164
04:58:02,718 --> 04:58:07,040
that you provided up here okay so if in if in this case then you said


4165
04:58:07,040 --> 04:58:10,560
okay i have foo and then i have the value of 20


4166
04:58:10,560 --> 04:58:14,560
then dart smart enough to understand that oh now it's a pair of string and


4167
04:58:14,560 --> 04:58:16,958
integer so


4168
04:58:16,958 --> 04:58:22,080
that's how you would use uh generics basically so i mean there are so much to


4169
04:58:22,080 --> 04:58:27,120
talk about about generics and how you can


4170
04:58:27,120 --> 04:58:30,240
uh basically utilize them in order to create


4171
04:58:30,240 --> 04:58:35,520
very simple classes so that they're so that they're reusing as much


4172
04:58:35,520 --> 04:58:41,360
capability or as much code as possible without duplicating that code so


4173
04:58:41,360 --> 04:58:45,840
and talking about generics to be honest with you it could be it's its own entire


4174
04:58:45,840 --> 04:58:51,440
course we could go on and on four five six hours i could talk about generics so


4175
04:58:51,440 --> 04:58:55,840
just know that generics are created like this you say class pair and then you


4176
04:58:55,840 --> 04:58:58,638
would say your generic data types which then in


4177
04:58:58,638 --> 04:59:02,160
case then in turn get placed inside the


4178
04:59:02,160 --> 04:59:06,240
definitions inside the class itself so okay


4179
04:59:06,240 --> 04:59:08,560
um


4180
04:59:08,718 --> 04:59:12,400
all right now that we've talked about generics um i believe that we could kind


4181
04:59:12,400 --> 04:59:16,638
of like wrap up this um chapter where we talked a little bit


4182
04:59:16,638 --> 04:59:20,400
more about advanced topics in dart extensions futures


4183
04:59:20,400 --> 04:59:24,480
async awaits streams the weight for stream generators and


4184
04:59:24,480 --> 04:59:29,520
generics okay now i'm actually really happy that we


4185
04:59:29,520 --> 04:59:33,840
went through chapter number seven which is this chapter because up until this


4186
04:59:33,840 --> 04:59:38,400
point we've kind of been like preparing ourselves for our launch


4187
04:59:38,400 --> 04:59:42,240
it's it's now time that we put everything


4188
04:59:42,240 --> 04:59:47,840
that we've learned into practice and actually start building our project


4189
04:59:47,840 --> 04:59:52,000
so i'm actually getting goosebumps because it's such an important part of


4190
04:59:52,000 --> 04:59:55,600
this course that we've actually gone through the basics we've talked about


4191
04:59:55,600 --> 04:59:59,520
dart we've talked about like some of the basics of setting up the simulator etc


4192
04:59:59,520 --> 05:00:04,240
etc that it's with great pleasure that i can say okay we've gone through that now


4193
05:00:04,240 --> 05:00:08,000
and all you need to do right now is just to practice and what better way to


4194
05:00:08,000 --> 05:00:13,200
practice than to put what you've learned um into


4195
05:00:13,200 --> 05:00:15,680
application by writing


4196
05:00:15,680 --> 05:00:18,878
the flutter project that we've been aiming


4197
05:00:18,878 --> 05:00:23,440
to do from the beginning so without further ado let's then


4198
05:00:23,440 --> 05:00:26,798
prepare for the next chapter which is chapter eight and in chapter eight we're


4199
05:00:26,798 --> 05:00:30,718
gonna talk about uh project setup and then we're actually


4200
05:00:30,718 --> 05:00:34,638
gonna add some dependencies to our project which we're gonna use


4201
05:00:34,638 --> 05:00:39,440
later okay so let's aim for that and i'll see you in


4202
05:00:39,440 --> 05:00:43,120
the next chapter hello and welcome to chapter number


4203
05:00:43,120 --> 05:00:47,040
eight of the slatter course in this chapter we're going to talk


4204
05:00:47,040 --> 05:00:50,958
about our basic project setup in the previous chapters


4205
05:00:50,958 --> 05:00:54,160
up until this point to be honest with you we've been just working with dart


4206
05:00:54,160 --> 05:00:57,680
and kind of like um laying the foundation for learning


4207
05:00:57,680 --> 05:01:01,200
the programming language that actually um


4208
05:01:01,200 --> 05:01:05,600
uh it fuels flutter so it's a programming language that you're gonna


4209
05:01:05,600 --> 05:01:08,958
need to be quite comfortable with in order to be able to write your flutter


4210
05:01:08,958 --> 05:01:13,280
applications so you're gonna learn more and more about dart as we go on in this


4211
05:01:13,280 --> 05:01:16,400
course but it is very very good if you can


4212
05:01:16,400 --> 05:01:21,040
look at the intro chapter and then just kind of like follow along on the


4213
05:01:21,040 --> 05:01:26,400
chapters up until this point so that you get the general idea of what dart is all


4214
05:01:26,400 --> 05:01:30,400
about and then how you can use it at a very shallow level i mean i know


4215
05:01:30,400 --> 05:01:33,840
there's lots of material that i put out on that but


4216
05:01:33,840 --> 05:01:38,080
we really didn't like go so deep in every topic so i just wanted to give you


4217
05:01:38,080 --> 05:01:43,280
like a flavor and taste of the different available options in dart


4218
05:01:43,280 --> 05:01:45,840
so if you haven't watched those chapters


4219
05:01:45,840 --> 05:01:50,160
please just go ahead and skim skim over them even if you're comfortable already


4220
05:01:50,160 --> 05:01:52,798
with dart so


4221
05:01:52,798 --> 05:01:56,080
in this chapter we're going to talk about the project setup and this is the


4222
05:01:56,080 --> 05:02:00,080
like one of the absolute most important parts of setting up


4223
05:02:00,080 --> 05:02:04,798
um an application for flutter so if you're


4224
05:02:04,798 --> 05:02:09,760
if you're thinking of maybe skipping um over this chapter that's also okay if


4225
05:02:09,760 --> 05:02:12,240
you know what you're doing but if this is the first time that you're setting up


4226
05:02:12,240 --> 05:02:16,000
a flutter project that then i think it's really good if you can


4227
05:02:16,000 --> 05:02:23,840
follow along with this chapter so i'm going to go now into um


4228
05:02:23,840 --> 05:02:27,760
let's do some setup here so what am i going to do i'm going to bring my face


4229
05:02:27,760 --> 05:02:32,320
to the bottom right here so you can see the entirety of the screen


4230
05:02:32,320 --> 05:02:36,798
and then i'm going to bring up the caption for the next item that we're


4231
05:02:36,798 --> 05:02:43,440
going to talk about and in here well we have a um


4232
05:02:43,440 --> 05:02:46,240
as you can see there is a command that you can issue in the terminal to create


4233
05:02:46,240 --> 05:02:49,840
a new flosser project so every flosser project has different


4234
05:02:49,840 --> 05:02:54,798
properties it has for instance a name which is the entire like the name of the


4235
05:02:54,798 --> 05:02:59,280
entire project um and also one of


4236
05:02:59,280 --> 05:03:02,480
the main properties of flutter project is


4237
05:03:02,480 --> 05:03:05,680
identifier now the identifier wouldn't be so


4238
05:03:05,680 --> 05:03:11,520
important had it not been that flutter can actually deploy to ios and android


4239
05:03:11,520 --> 05:03:16,080
and an identifier for an ios app and an android app is


4240
05:03:16,080 --> 05:03:20,320
actually what defines that application as unique


4241
05:03:20,320 --> 05:03:26,400
as on the app store where ios ios users and ipad os users can download


4242
05:03:26,400 --> 05:03:30,958
applications and on the um play store where android users can


4243
05:03:30,958 --> 05:03:34,798
download android apps so these identifiers are as


4244
05:03:34,798 --> 05:03:38,160
i mentioned in one of the previous chapters are kind of like reverse domain


4245
05:03:38,160 --> 05:03:41,840
identifiers so it's kind of like if your website is


4246
05:03:41,840 --> 05:03:45,760
foobar.com and your application is called baz


4247
05:03:45,760 --> 05:03:50,560
then your reverse domain identifier for your application will become dot


4248
05:03:50,560 --> 05:03:54,400
foobar.bass so it's kind of like


4249
05:03:54,400 --> 05:03:59,680
you take your domain name and reverse it so if foobar.com becomes com.fubar and


4250
05:03:59,680 --> 05:04:04,480
then you put dots after that and then you put your actual application name


4251
05:04:04,480 --> 05:04:09,360
so these identifiers need to be unique and by that i mean like


4252
05:04:09,360 --> 05:04:14,718
if a if a developer on the ios app store or google play


4253
05:04:14,718 --> 05:04:19,680
store is already gone and registered the reverse um basically that item


4254
05:04:19,680 --> 05:04:24,320
identifier.com.fubar.bass for any of their applications so they


4255
05:04:24,320 --> 05:04:28,400
said okay here's my application called image gallery but it has a completely


4256
05:04:28,400 --> 05:04:32,680
random identifier of com.foobar.pass


4257
05:04:32,798 --> 05:04:37,760
then you as a new developer even if you want to do the same funky uh deployment


4258
05:04:37,760 --> 05:04:41,760
to the app store you can't register that name anymore because because it is


4259
05:04:41,760 --> 05:04:44,160
already taken so


4260
05:04:44,160 --> 05:04:47,680
think of the identifier of your project as


4261
05:04:47,680 --> 05:04:52,480
what is gonna carry on from the start of where you create your project all the


4262
05:04:52,480 --> 05:04:56,080
way through to the app stores okay so


4263
05:04:56,080 --> 05:05:00,480
it is quite important that you actually choose it wisely because if you don't do


4264
05:05:00,480 --> 05:05:04,320
that wisely from the absolute start unfortunately you will have to do some


4265
05:05:04,320 --> 05:05:10,400
filling around in the future to go and update that yourself so


4266
05:05:10,400 --> 05:05:13,920
um so i would i would really suggest and


4267
05:05:13,920 --> 05:05:18,480
recommend here that you take a little bit of um time to think about what that


4268
05:05:18,480 --> 05:05:22,798
identifier is going to be what you prefer that identifier to be


4269
05:05:22,798 --> 05:05:26,000
and what you're comfortable with and what for instance if you have a domain


4270
05:05:26,000 --> 05:05:31,440
name as a developer for the app store and for google play store


4271
05:05:31,440 --> 05:05:35,680
so if you have a domain name already registered on your name i suggest


4272
05:05:35,680 --> 05:05:39,760
strongly then that you use that and if you have domain names personally and


4273
05:05:39,760 --> 05:05:43,280
domain names selected as like a


4274
05:05:43,280 --> 05:05:47,200
and for your company then you need to now know whether you're going to release


4275
05:05:47,200 --> 05:05:51,280
this application under your name personally or if you're going to release


4276
05:05:51,280 --> 05:05:57,600
it on your company's name so these all play a role but


4277
05:05:57,600 --> 05:06:02,480
without further ado let's just go and create our project here and


4278
05:06:02,480 --> 05:06:05,120
um i to be honest with you i personally


4279
05:06:05,120 --> 05:06:08,638
haven't really thought about whether i want to release this application as a


4280
05:06:08,638 --> 05:06:12,240
private person or if i want to create it under my company and i think


4281
05:06:12,240 --> 05:06:18,240
since my developer account is at apple and at google is under


4282
05:06:18,240 --> 05:06:24,240
my company's name which is pixelity ab in sweden then i'm actually going to use


4283
05:06:24,240 --> 05:06:28,560
that company's domain name which is pixelity.se


4284
05:06:28,560 --> 05:06:34,480
because s is like the swedish domain name just as code.uk is the


4285
05:06:34,480 --> 05:06:40,320
um british one for instance so i think i will do that so let's go to


4286
05:06:40,320 --> 05:06:44,320
and open a new terminal let's go to terminal um


4287
05:06:44,320 --> 05:06:47,680
i don't see my screen right now but i'm just going to bring up a new terminal


4288
05:06:47,680 --> 05:06:50,240
window here


4289
05:06:50,798 --> 05:06:54,240
and bring it up so that you can also see it um


4290
05:06:54,240 --> 05:07:01,600
and i'm gonna increase the size of the text so it is clear what i'm typing okay


4291
05:07:01,600 --> 05:07:08,000
so let me go ahead and create a project so i'm gonna go to my development um


4292
05:07:08,000 --> 05:07:11,600
folder where i have all my projects and i'm gonna go to projects


4293
05:07:11,600 --> 05:07:15,840
flutter okay and then as you can see is flutter


4294
05:07:15,840 --> 05:07:19,600
create and then and then dash dash org as an


4295
05:07:19,600 --> 05:07:25,040
organization and i'm going to see say se dot pixelity


4296
05:07:25,040 --> 05:07:30,160
now as i said my domain name is called pixelity.sc but your org needs to be the


4297
05:07:30,160 --> 05:07:35,760
reverse of that okay so remember reverse identifier so reverse domain identifier


4298
05:07:35,760 --> 05:07:38,480
so then if your for instance organization


4299
05:07:38,480 --> 05:07:41,680
is hello dot com then here you would have


4300
05:07:41,680 --> 05:07:46,958
to write com dot hello alright so i'm gonna say s epixody but you


4301
05:07:46,958 --> 05:07:50,080
shouldn't do this so if you're following along with this course please just


4302
05:07:50,080 --> 05:07:54,480
choose an identifier for your domain that it makes sense to you and if you


4303
05:07:54,480 --> 05:07:57,920
don't have a domain if you if you're not bothered by all of that if you're not


4304
05:07:57,920 --> 05:08:02,320
going to release your application to the app store you don't even have to care


4305
05:08:02,320 --> 05:08:05,760
about this just put anything in here you could just say


4306
05:08:05,760 --> 05:08:09,840
come um making stuff up


4307
05:08:09,840 --> 05:08:14,400
if that's what you want so it's not a big deal to be honest with you so just


4308
05:08:14,400 --> 05:08:19,600
go ahead and pick an identifier so i'm going to say s epixody because


4309
05:08:19,600 --> 05:08:25,040
that's my reverse domain name and then in here you have to write your


4310
05:08:25,040 --> 05:08:28,080
app application name so


4311
05:08:28,080 --> 05:08:31,120
um what should we call this application to


4312
05:08:31,120 --> 05:08:34,240
be honest with you i i mean i personally haven't really


4313
05:08:34,240 --> 05:08:38,080
made up my mind what this application should be called maybe we should call it


4314
05:08:38,080 --> 05:08:41,040
uh my personal


4315
05:08:41,040 --> 05:08:45,840
notes my personal notes or my notes


4316
05:08:45,840 --> 05:08:48,560
something like that or


4317
05:08:48,560 --> 05:08:52,560
private notes okay


4318
05:08:52,638 --> 05:08:55,600
all the private notes


4319
05:08:55,760 --> 05:09:01,600
or notes list i don't know not my notes that would work


4320
05:09:01,600 --> 05:09:06,000
sd pixel in my notes yeah why not and


4321
05:09:06,000 --> 05:09:09,600
let's just call it my notes then all right


4322
05:09:09,600 --> 05:09:12,560
so let's go ahead and do that flutter


4323
05:09:12,560 --> 05:09:15,600
create and i can see i mean actually i'm very


4324
05:09:15,600 --> 05:09:19,600
grateful that we got that little notification on top so let this do its


4325
05:09:19,600 --> 05:09:22,718
work and um


4326
05:09:22,718 --> 05:09:26,560
it did its work and it's done and it called something and it created a folder


4327
05:09:26,560 --> 05:09:30,798
you can see called my notes and on top of this window if you saw


4328
05:09:30,798 --> 05:09:34,320
then there was a little message printed a new version of flutter is available to


4329
05:09:34,320 --> 05:09:38,560
update to the latest version just run flatter upgrade so that was not a part


4330
05:09:38,560 --> 05:09:41,920
of this course i didn't mean it for this to happen but i can't control it either


4331
05:09:41,920 --> 05:09:45,520
because flutter is a tool that is being developed by google it's an open source


4332
05:09:45,520 --> 05:09:49,440
tool when there is a new version when you run any of these flutter commands


4333
05:09:49,440 --> 05:09:53,440
and it's going to check um with the version repository to see is


4334
05:09:53,440 --> 05:09:56,958
there any new version available and if there is then it's going to give me this


4335
05:09:56,958 --> 05:10:00,878
flutter upgrade message here so


4336
05:10:00,878 --> 05:10:04,320
um as i mentioned in the introduction of the course


4337
05:10:04,320 --> 05:10:09,120
i've planned this course quite a lot but i haven't i can't plan it 100 so things


4338
05:10:09,120 --> 05:10:12,480
will happen that i hadn't planned for and then we just have to roll with the


4339
05:10:12,480 --> 05:10:16,160
punches and i'm actually glad that this thing happened right here so you can see


4340
05:10:16,160 --> 05:10:21,040
how to upgrade flutter as well so as you can see it's very easy just copy


4341
05:10:21,040 --> 05:10:23,840
just say flutter upgrade okay so i'm going to go at the bottom of the


4342
05:10:23,840 --> 05:10:27,520
terminal i'm just going to say flutter upgrade


4343
05:10:29,360 --> 05:10:34,000
right so this is going to actually take some time depending on how big the


4344
05:10:34,000 --> 05:10:38,718
upgrade is because flutter is divided into


4345
05:10:38,718 --> 05:10:43,680
different kind of engines as you know flutter can output um


4346
05:10:43,680 --> 05:10:49,840
binaries or applications for ios it can output it for android it can do it for


4347
05:10:49,840 --> 05:10:53,040
mac os it can do it for um


4348
05:10:53,040 --> 05:10:56,080
windows and basically desktop searches and mac


4349
05:10:56,080 --> 05:11:00,480
windows linux and then you will have web as well so there's


4350
05:11:00,480 --> 05:11:04,080
quite a lot of things involved in flutter as you can see in here it's like


4351
05:11:04,080 --> 05:11:07,520
downloading everything necessary in order for you to be able to create


4352
05:11:07,520 --> 05:11:12,718
android applications so so after that is done you see it goes to


4353
05:11:12,718 --> 05:11:17,360
the ios tool so it's downloading but it's also i believe after it's done


4354
05:11:17,360 --> 05:11:21,280
downloading stuff it also needs to make sure that it can


4355
05:11:21,280 --> 05:11:26,638
build those tool sets so this is a process that might take some


4356
05:11:26,638 --> 05:11:30,240
time and in order to avoid us having to wait


4357
05:11:30,240 --> 05:11:34,560
for that entire process as you can see it's now going to web sdk


4358
05:11:34,560 --> 05:11:38,878
and blah blah so we don't have to necessarily wait for


4359
05:11:38,878 --> 05:11:44,080
this so i'm just going to create a new oh it actually finished so that was


4360
05:11:44,080 --> 05:11:48,160
quite fast all right so it it finishes work we don't have to do anything


4361
05:11:48,160 --> 05:11:52,798
special here um so that's how you upgrade flutter so


4362
05:11:52,798 --> 05:11:56,798
just run this command as suggested by the flutter tools itself flat upgrade


4363
05:11:56,798 --> 05:12:01,600
and then you're good to go okay so


4364
05:12:01,600 --> 05:12:06,160
we've done that step now so we've set up our project i'm just gonna move to my


4365
05:12:06,160 --> 05:12:09,360
notes here and i'm gonna make sure that that topic


4366
05:12:09,360 --> 05:12:13,520
is ticked and for the next item what we're gonna


4367
05:12:13,520 --> 05:12:18,878
do here is we're gonna talk about um we're gonna basically have a quick look


4368
05:12:18,878 --> 05:12:23,360
around the the environment set up by flutter when


4369
05:12:23,360 --> 05:12:27,680
you run photo create because the flow to create doesn't just like create an empty


4370
05:12:27,680 --> 05:12:32,878
director it actually creates the skeleton or the scaffold of your


4371
05:12:32,878 --> 05:12:36,320
flosser project but pretty much everything necessary for you to be able


4372
05:12:36,320 --> 05:12:41,680
to run that project okay so in this in this application i mean in


4373
05:12:41,680 --> 05:12:46,240
this in this step of chapter 8 we're not actually going to run the application on


4374
05:12:46,240 --> 05:12:50,320
any device that's for chapter 9 and for chapter 10.


4375
05:12:50,320 --> 05:12:54,638
but what we are going to do is to have a quick look around the


4376
05:12:54,638 --> 05:13:00,400
project structure so let me go to my notes here and what i'm going to do is


4377
05:13:00,400 --> 05:13:04,400
i'm going to use this code visual studio code


4378
05:13:04,400 --> 05:13:08,400
extension which is provided in the path so i can just say code dot which opens


4379
05:13:08,400 --> 05:13:11,520
up visual studio code in the current folder okay


4380
05:13:11,520 --> 05:13:15,200
so then once that is done i'm going to


4381
05:13:15,200 --> 05:13:18,400
bring a visual studio code here i'm just going to take a little bit of care to


4382
05:13:18,400 --> 05:13:22,878
ensure that you can see the important parts of the screen


4383
05:13:22,878 --> 05:13:27,760
okay and i'm going to increase the size quite dramatically so it's visible for


4384
05:13:27,760 --> 05:13:32,160
you as well it is very big on my screen but i think it's like


4385
05:13:32,160 --> 05:13:36,320
a nice size on the on the actual output video


4386
05:13:36,320 --> 05:13:42,080
alright so as you can see here is the folder created by flutter create


4387
05:13:42,080 --> 05:13:45,520
and there are quite a lot of bits and pieces in here


4388
05:13:45,520 --> 05:13:49,120
and i'm just going to tell you


4389
05:13:49,120 --> 05:13:54,878
a bit about a few of these folders and what they they represent so


4390
05:13:54,878 --> 05:13:58,958
one thing that you need to understand about flutter is that it actually is not


4391
05:13:58,958 --> 05:14:03,920
like um it's not really like react native


4392
05:14:03,920 --> 05:14:09,200
uh if you're familiar with that flutter on ios for instance it for those who


4393
05:14:09,200 --> 05:14:15,520
have done ios development uh flutter it outputs a native binary on your on your


4394
05:14:15,520 --> 05:14:18,400
phone a native um


4395
05:14:18,400 --> 05:14:23,520
fat binary basically for your uh ios application and it just puts one


4396
05:14:23,520 --> 05:14:28,080
view on the screen and then it graphically renders all its contents


4397
05:14:28,080 --> 05:14:32,718
using metal okay so if you're not an ios developer that probably doesn't make so


4398
05:14:32,718 --> 05:14:36,958
much sense to you but this part that i'm going to mention now


4399
05:14:36,958 --> 05:14:42,080
should make sense for everybody but when you create a flutter application


4400
05:14:42,080 --> 05:14:47,600
and the flutter create command basically spits out different parts that may be


4401
05:14:47,600 --> 05:14:51,120
necessary for your application to run on different platforms


4402
05:14:51,120 --> 05:14:55,920
one of those platforms one of the key platforms that flutter runs on is ioso


4403
05:14:55,920 --> 05:15:01,920
that is the folder that contains the native bits and pieces necessary for


4404
05:15:01,920 --> 05:15:07,280
photos to be able to run in an ios simulator or on an ios device


4405
05:15:07,280 --> 05:15:11,680
such as an iphone or an ipad okay so this is like as you can see it's the


4406
05:15:11,680 --> 05:15:16,160
project or the workspace and sorry and the workspace because for those of you


4407
05:15:16,160 --> 05:15:18,560
who are ios developers you will know that


4408
05:15:18,560 --> 05:15:22,080
there's a thing called cocoapods and flutter internally actually uses


4409
05:15:22,080 --> 05:15:28,000
cocoapods for ios if you're not an ios developer just know that


4410
05:15:28,000 --> 05:15:32,718
every ios or android or web application


4411
05:15:32,718 --> 05:15:39,200
can bring with itself dependencies and a dependency is a way for your application


4412
05:15:39,200 --> 05:15:44,400
to bring in code from other people in order to be able to achieve special


4413
05:15:44,400 --> 05:15:49,920
functionalities so there are various tools available for


4414
05:15:49,920 --> 05:15:55,440
ios developers android developers web developers to be able to bring in


4415
05:15:55,440 --> 05:15:58,638
dependencies for web for instance if you're writing a node application you


4416
05:15:58,638 --> 05:16:03,600
will just use npm which is a node package manager if you're using swift


4417
05:16:03,600 --> 05:16:07,920
you will probably just bring in for instance spm i think um swift package


4418
05:16:07,920 --> 05:16:13,760
manager or cocoapods and there's another a third one


4419
05:16:13,760 --> 05:16:17,280
um which i've kind of forgotten the name of um


4420
05:16:17,280 --> 05:16:21,680
which i may remember later if you're using android you're probably familiar


4421
05:16:21,680 --> 05:16:24,480
with gradle and that you can like use for


4422
05:16:24,480 --> 05:16:28,798
bringing in external dependencies so


4423
05:16:28,878 --> 05:16:30,718
so if


4424
05:16:30,718 --> 05:16:34,480
this is a platform of android and this is a platform of ios and here's web and


4425
05:16:34,480 --> 05:16:38,878
here's um desktop for instance


4426
05:16:38,878 --> 05:16:44,400
flutter sits on top of these so it can control all the um


4427
05:16:44,400 --> 05:16:48,000
all the small bits and pieces for these platforms to be able to be packed


4428
05:16:48,000 --> 05:16:52,718
packaged inside one flutter application which sits on on top here


4429
05:16:52,718 --> 05:16:55,600
and all these different platforms down here


4430
05:16:55,600 --> 05:17:00,000
excuse me they can have their own dependency management so the dependency


4431
05:17:00,000 --> 05:17:03,040
managements kind of sit under one layer under so


4432
05:17:03,040 --> 05:17:07,280
flutter then talks with these dependency managers and says okay you need to


4433
05:17:07,280 --> 05:17:10,958
install this dependency for me to be able to work


4434
05:17:10,958 --> 05:17:15,120
so the reason i mention all of that is


4435
05:17:15,120 --> 05:17:19,520
that is the reason you can see a workspace here and an xcode project and


4436
05:17:19,520 --> 05:17:23,280
that's because flutter internally is using a dependency manager


4437
05:17:23,280 --> 05:17:26,638
system called cocoapods which in turn creates a


4438
05:17:26,638 --> 05:17:28,798
workspace that


4439
05:17:28,798 --> 05:17:32,240
links together the main project and all its dependencies


4440
05:17:32,240 --> 05:17:35,280
if you're not an ios developer if you're not interested in all of this just know


4441
05:17:35,280 --> 05:17:40,000
that this ios folder is just so that your application run can


4442
05:17:40,000 --> 05:17:44,000
run on an ios device um


4443
05:17:44,000 --> 05:17:47,760
so that's that the next part which is important is the


4444
05:17:47,760 --> 05:17:51,200
test folder which we're actually going to use in this course


4445
05:17:51,200 --> 05:17:55,040
the test folder is where you create your tests


4446
05:17:55,040 --> 05:17:57,680
if you're not familiar with software development from before if you don't


4447
05:17:57,680 --> 05:18:01,760
have a background software engineering testing is


4448
05:18:01,760 --> 05:18:05,680
the ability for programmers in order to be able to make certain assertions about


4449
05:18:05,680 --> 05:18:10,320
their code and in order in order to make sure that they can automatically run a


4450
05:18:10,320 --> 05:18:15,120
series of tests against their own code to make sure that everything is


4451
05:18:15,120 --> 05:18:20,718
functioning as the programmer intended that to if you are if you if you are


4452
05:18:20,718 --> 05:18:23,840
coming from software engineering background that know that we're gonna


4453
05:18:23,840 --> 05:18:26,798
put our integration tests we're gonna put our


4454
05:18:26,798 --> 05:18:32,160
widget tests and unit tests inside this test folder okay so i hope that covered


4455
05:18:32,160 --> 05:18:36,240
everybody that's that may be watching this course


4456
05:18:36,240 --> 05:18:40,480
then you also have a folder called android and this is as you would expect


4457
05:18:40,480 --> 05:18:46,240
it is putting all the necessary files and folders that is required for your


4458
05:18:46,240 --> 05:18:52,480
android project to be hosting your flutter application so


4459
05:18:52,480 --> 05:18:58,000
just know that flutter kind of is a series of tools is like a mobile


4460
05:18:58,000 --> 05:19:03,600
kind it's like a beautiful sdk that gets injected into these native


4461
05:19:03,600 --> 05:19:08,878
applications and natively also renders its content so


4462
05:19:08,878 --> 05:19:11,840
um and just like we had a host ios


4463
05:19:11,840 --> 05:19:16,718
application here you will also have an android folder which contains all the


4464
05:19:16,718 --> 05:19:21,600
bits and pieces required for your application to be run natively


4465
05:19:21,600 --> 05:19:24,160
on android


4466
05:19:24,160 --> 05:19:27,840
phones and on android tablets so


4467
05:19:27,840 --> 05:19:30,878
this is as you can if you're an android developer you're probably like already


4468
05:19:30,878 --> 05:19:34,080
familiar with this like you have your app and build great gradle inside the


4469
05:19:34,080 --> 05:19:38,638
app folder so there's nothing like fancy going on here it's a simple android


4470
05:19:38,638 --> 05:19:42,718
application which you can actually uh if you have android studio installed


4471
05:19:42,718 --> 05:19:45,840
on your computer if you want to you can open that folder and actually have a


4472
05:19:45,840 --> 05:19:50,160
look around and even run that application as a native and android app


4473
05:19:50,160 --> 05:19:53,040
on your phone okay


4474
05:19:53,040 --> 05:19:56,560
so that is our android folder and as you


4475
05:19:56,560 --> 05:20:00,240
would guess then we have a web folder because


4476
05:20:00,240 --> 05:20:04,560
i think i mentioned this before but flutter supports uh deployment of flash


4477
05:20:04,560 --> 05:20:07,520
applications to the web as well so you can actually create web applications


4478
05:20:07,520 --> 05:20:10,638
with flutter it's nothing that we're going to discuss in this course


4479
05:20:10,638 --> 05:20:14,160
particularly but if you're interested in writing web applications with flutter


4480
05:20:14,160 --> 05:20:18,560
you can also google that so have a look at that if you're


4481
05:20:18,560 --> 05:20:24,638
interested in web applications because though web applications in flutter are


4482
05:20:24,638 --> 05:20:29,840
relatively new but foster has actually come really far with with that so people


4483
05:20:29,840 --> 05:20:34,638
are creating all sorts of websites with flutter already


4484
05:20:34,878 --> 05:20:39,760
sorry about that okay um then we have a little file here


4485
05:20:39,760 --> 05:20:44,000
called analysis options and um as you can see it says this file


4486
05:20:44,000 --> 05:20:47,600
configures the analyzer so um


4487
05:20:47,600 --> 05:20:51,840
if you are not coming from a software engineering background then you may not


4488
05:20:51,840 --> 05:20:55,840
know what analysis actually means but think of analysis as


4489
05:20:55,840 --> 05:21:01,120
a way for a flutter to be able to have a look at the code that you write


4490
05:21:01,120 --> 05:21:03,680
and and correct you


4491
05:21:03,680 --> 05:21:07,440
where it sees fit so where it sees that oh you've


4492
05:21:07,440 --> 05:21:12,160
made a mistake in writing something that could be written in a better way then it


4493
05:21:12,160 --> 05:21:16,638
consults this analysis options yaml file and then it says okay what are the rules


4494
05:21:16,638 --> 05:21:20,160
that i have to adhere to like do you want me to be very strict about certain


4495
05:21:20,160 --> 05:21:23,760
rules or do you want me to be like less strict about other rules or do you want


4496
05:21:23,760 --> 05:21:28,240
me to completely ignore certain mistakes that you're making so


4497
05:21:28,240 --> 05:21:32,080
the analysis options yaml file as it is pronounced


4498
05:21:32,080 --> 05:21:37,440
it allows you to basically define the roles that make


4499
05:21:37,440 --> 05:21:40,240
sense for your project in this course we're not going to talk


4500
05:21:40,240 --> 05:21:43,200
about so much analysis options to be honest with you but just know that it's


4501
05:21:43,200 --> 05:21:48,638
there so let me bring up the uh


4502
05:21:48,638 --> 05:21:53,920
the project structure here again um and the next thing that we need to


4503
05:21:53,920 --> 05:22:00,320
have a look at which is very very important is this file pop spec dot yaml


4504
05:22:00,320 --> 05:22:05,760
now um this is a file that i mean one of the things that you you'll need


4505
05:22:05,760 --> 05:22:09,520
to know about flutter and the basic structure that it creates for you is


4506
05:22:09,520 --> 05:22:14,798
that there are tons of documentations and documentations are like so so well


4507
05:22:14,798 --> 05:22:19,120
done in my opinion in in the flutter world where i personally come from like


4508
05:22:19,120 --> 05:22:22,958
the back-end developer development background like i'm doing django or


4509
05:22:22,958 --> 05:22:26,878
where i'm doing ios development sometimes documentation can for instance


4510
05:22:26,878 --> 05:22:30,638
on the ios native world be very kind of lacking


4511
05:22:30,638 --> 05:22:33,760
so flutter has gone like well above the


4512
05:22:33,760 --> 05:22:37,360
line of what is required from a developer's perspective in terms of


4513
05:22:37,360 --> 05:22:41,040
documentation and they provide a lot of documentation


4514
05:22:41,040 --> 05:22:44,400
and if you're not coming from a software development background the documentation


4515
05:22:44,400 --> 05:22:47,600
is pretty much like information provided by the developers


4516
05:22:47,600 --> 05:22:52,400
who created the tool for you in order to help you get better at that tool okay as


4517
05:22:52,400 --> 05:22:56,240
you can see here there's a file created for you pop special and you can see


4518
05:22:56,240 --> 05:23:00,080
there's lots of gray lines here prefixed with this


4519
05:23:00,080 --> 05:23:03,040
hashtag if you remove them you'll see that they


4520
05:23:03,040 --> 05:23:06,400
become normal sentences but if you put them back they become something called a


4521
05:23:06,400 --> 05:23:09,600
documentation and a documentation if you're not from software engineering


4522
05:23:09,600 --> 05:23:14,320
background it means just piece of text provided as an information block to you


4523
05:23:14,320 --> 05:23:18,638
which is not code anymore so the program is not going to


4524
05:23:18,638 --> 05:23:22,798
turn this into any sort of sort of a code it's just going to ignore that this


4525
05:23:22,798 --> 05:23:27,440
is just for you to learn okay so let's go back to this pop specky ammo


4526
05:23:27,440 --> 05:23:31,920
and talk about what it actually is pop spec yaml is such an important part of


4527
05:23:31,920 --> 05:23:34,958
flutter that i think that you need to actually


4528
05:23:34,958 --> 05:23:41,200
ignore i mean don't ignore the comments go and spend some time and read the


4529
05:23:41,200 --> 05:23:44,480
comments just to understand what they mean


4530
05:23:44,480 --> 05:23:48,240
so um what i'm going to talk about here is


4531
05:23:48,240 --> 05:23:52,240
a little bit about what this pop spike yaml actually is it is if you're for


4532
05:23:52,240 --> 05:23:56,878
instance from coming from a web background and if you've worked with


4533
05:23:56,878 --> 05:24:00,240
node.js then we will have some sort of a config


4534
05:24:00,240 --> 05:24:05,200
json file or if you're coming from django you'll have settings.pi file if


4535
05:24:05,200 --> 05:24:10,400
you're coming from native ios world what would be the equivalent of the config


4536
05:24:10,400 --> 05:24:14,798
it kind of will be kind of like your info plus file um


4537
05:24:14,798 --> 05:24:19,920
so i mean it is your it is kind of like a


4538
05:24:19,920 --> 05:24:24,400
control panel of what your project should actually be


4539
05:24:24,400 --> 05:24:31,520
looking like its icons the version number its name all your dependencies so


4540
05:24:31,520 --> 05:24:36,798
these things will be all placed inside inside this file and


4541
05:24:36,798 --> 05:24:40,240
when you change this file if you're already running your application then


4542
05:24:40,240 --> 05:24:45,040
flutter are automatically understands changes to this file and


4543
05:24:45,040 --> 05:24:49,280
then reconfigures itself if it can on the fly


4544
05:24:49,280 --> 05:24:53,520
with your new configurations if it can't then you may have to restart your


4545
05:24:53,520 --> 05:24:57,360
application like if you make drastic changes for instance if you bring in a


4546
05:24:57,360 --> 05:25:02,718
completely new dependency into your project


4547
05:25:02,718 --> 05:25:07,120
then the project cannot be like re-run immediately it needs to actually


4548
05:25:07,120 --> 05:25:10,958
recompile and link against that dependency it's just like humanly


4549
05:25:10,958 --> 05:25:16,000
impossible or computerly impossible for it to do so


4550
05:25:16,000 --> 05:25:19,200
um so let's have a little look around in


4551
05:25:19,200 --> 05:25:24,320
this pop specky ammo file as you can see there's a tag here called name and it's


4552
05:25:24,320 --> 05:25:27,600
and it's a value it's my notes and if you remember


4553
05:25:27,600 --> 05:25:31,280
from the terminal if i bring back the terminal


4554
05:25:31,280 --> 05:25:35,760
bring up the text a little bit uh this is what we created right this is


4555
05:25:35,760 --> 05:25:38,400
the project this is how we created the project so


4556
05:25:38,400 --> 05:25:43,280
we said flutter creates an organization of seda pixelity and then my notes all


4557
05:25:43,280 --> 05:25:47,680
right that is what the my notes is for this is


4558
05:25:47,680 --> 05:25:51,520
your project name my notes all right and this is a little just a little


4559
05:25:51,520 --> 05:25:55,120
description of what this application is all about now


4560
05:25:55,120 --> 05:25:58,638
you may be curious about what word is actually went


4561
05:25:58,638 --> 05:26:02,718
s e se.pixelity or whatever you created your


4562
05:26:02,718 --> 05:26:07,040
project organization under now you can see i search for it i said


4563
05:26:07,040 --> 05:26:12,798
command f in visual studio code on in mac or control f in linux and


4564
05:26:12,798 --> 05:26:15,520
windows and visual studio code and i don't know actually what the shortcut


4565
05:26:15,520 --> 05:26:19,920
for that fine is in uh android studio i just now heard studios


4566
05:26:19,920 --> 05:26:24,320
a little bit peculiar about its uh key mappings so it may not be command f on


4567
05:26:24,320 --> 05:26:28,878
mac or controller for linux and windows so i search here now for sepixology and


4568
05:26:28,878 --> 05:26:34,000
you can see that there are no results so this particular thing that i stressed so


4569
05:26:34,000 --> 05:26:37,120
much in the beginning that is very important you choose wisely


4570
05:26:37,120 --> 05:26:41,120
is not actually something that flutter itself needs as i mentioned it is


4571
05:26:41,120 --> 05:26:46,240
something that the different platforms that you'll deploy to need so if i now


4572
05:26:46,240 --> 05:26:50,240
actually say command shift f in visual studio code which searches in the entire


4573
05:26:50,240 --> 05:26:55,760
project say se.pixolity you will see that it is found in different places


4574
05:26:55,760 --> 05:27:01,280
inside this project for ios for instance you can see here is in the project pbx


4575
05:27:01,280 --> 05:27:04,558
approach and for android as well in our build


4576
05:27:04,558 --> 05:27:09,600
gradle so you'll see the application id became se pixelity my nodes


4577
05:27:09,600 --> 05:27:14,320
and for ios if you look around here as well you'll see that it is s e pixel in


4578
05:27:14,320 --> 05:27:18,638
my notes okay so


4579
05:27:18,638 --> 05:27:24,080
that was just side note um so the other thing that you'll need to


4580
05:27:24,080 --> 05:27:29,440
know about the pop spec yaml is this version number here and this is the


4581
05:27:29,440 --> 05:27:32,638
if you're not from a software development background um if you haven't


4582
05:27:32,638 --> 05:27:37,840
done software development before versioning is a way for you to tell


4583
05:27:37,840 --> 05:27:42,240
various places that you publish your application on for such as ios app store


4584
05:27:42,240 --> 05:27:46,080
or google play store what


4585
05:27:46,080 --> 05:27:50,240
if you have something new in your application


4586
05:27:50,240 --> 05:27:54,080
so for instance if you and this is this is how software is actually actually


4587
05:27:54,080 --> 05:27:56,718
labeled like a software has different properties


4588
05:27:56,718 --> 05:28:00,558
what you're deploying what you're developing here is a fluster application


4589
05:28:00,558 --> 05:28:05,520
but from the point of a store such as the app store it's it's just a package


4590
05:28:05,520 --> 05:28:08,638
of stuff with some properties like its name


4591
05:28:08,638 --> 05:28:13,200
identifier and its version now this version is very important because it is


4592
05:28:13,200 --> 05:28:18,480
a number usually three digits or i know that google play store


4593
05:28:18,480 --> 05:28:22,400
actually supports also four digits separated by a dot


4594
05:28:22,400 --> 05:28:26,400
and these these numbers actually mean something


4595
05:28:26,400 --> 05:28:30,000
special they if you begin from the left and then you


4596
05:28:30,000 --> 05:28:35,680
go to the middle and then to the right the left number is something called a


4597
05:28:35,680 --> 05:28:38,798
major number the middle number is called a minor


4598
05:28:38,798 --> 05:28:44,480
number and the right one and then most the rightmost number is usually called


4599
05:28:44,480 --> 05:28:48,718
the build number in normal software development the


4600
05:28:48,718 --> 05:28:53,360
process is kind of like this that you begin with an idea you say okay my


4601
05:28:53,360 --> 05:28:57,760
idea is to create a notes application that's that's the first idea that's idea


4602
05:28:57,760 --> 05:29:03,600
number one then you put one as the major number then you begin by zero and zero


4603
05:29:03,600 --> 05:29:07,280
okay so that's how a version number is kind of like birth


4604
05:29:07,280 --> 05:29:11,680
so you say one zero zero that's version one usually called okay


4605
05:29:11,680 --> 05:29:15,680
then you release that application you say okay i'm fine with that version one


4606
05:29:15,680 --> 05:29:19,120
and then you're in the kitchen cooking some food and then you say okay um it


4607
05:29:19,120 --> 05:29:22,718
would be great if i could put like um if i could add


4608
05:29:22,718 --> 05:29:26,240
the ability for users to be able to delete their notes


4609
05:29:26,240 --> 05:29:30,798
it's not a huge functionality it's just a little bit um improvement on what i


4610
05:29:30,798 --> 05:29:35,360
already have in the store then you will go and say okay is that a


4611
05:29:35,360 --> 05:29:40,160
major idea or a minor idea hmm it's not a major idea a major idea


4612
05:29:40,160 --> 05:29:44,000
would be like a total rewrite of the application adding massive number of


4613
05:29:44,000 --> 05:29:48,558
features fixing massive number of bugs etc so it's not a major idea then you go


4614
05:29:48,558 --> 05:29:53,040
to the minor idea and that minor idea corresponds to this minor version here


4615
05:29:53,040 --> 05:29:57,520
so you say okay the previous one was zero this one is how big of a difference


4616
05:29:57,520 --> 05:30:01,440
hmm it's just a small future so let's just say one


4617
05:30:01,440 --> 05:30:06,080
it was a huge like uh minor idea


4618
05:30:06,080 --> 05:30:09,600
not major enough to be a major idea but minor


4619
05:30:09,600 --> 05:30:14,558
but quite a big minor idea then you would probably like


4620
05:30:14,558 --> 05:30:20,638
from zero to maybe two or three it's not so popular to do that usually


4621
05:30:20,638 --> 05:30:24,878
would go chronologically in that order like one two three four but you're also


4622
05:30:24,878 --> 05:30:28,240
welcome to jump versions um


4623
05:30:28,240 --> 05:30:32,240
in special cases so let's say then you say okay i fixed that


4624
05:30:32,240 --> 05:30:35,840
and i'll now make it build and send it to


4625
05:30:35,840 --> 05:30:39,440
apple and google just remember that your previous build


4626
05:30:39,440 --> 05:30:42,958
was build zero now


4627
05:30:42,958 --> 05:30:48,000
depending on how your project is structured like you may decide that okay


4628
05:30:48,000 --> 05:30:51,840
every build that i make i'm going to actually increase this build number so


4629
05:30:51,840 --> 05:30:56,400
the previous one was zero now it's gonna be one then it's going to be two three


4630
05:30:56,400 --> 05:31:00,798
four five six blocks so every time you make build and send it out to your


4631
05:31:00,798 --> 05:31:04,638
consumers even if they're a group of testers or


4632
05:31:04,638 --> 05:31:08,000
people who are your only consumers may actually just be


4633
05:31:08,000 --> 05:31:10,558
people who are downloading your application directly from the app store


4634
05:31:10,558 --> 05:31:13,760
or google play store or from the web they may be interacting


4635
05:31:13,760 --> 05:31:17,680
with your application as well then you may say okay every time i make


4636
05:31:17,680 --> 05:31:21,360
a new bill and send it out that's when i actually increase this build number


4637
05:31:21,360 --> 05:31:24,080
or depending on your project setup you may


4638
05:31:24,080 --> 05:31:28,480
come with into an agreement with your teammates to say okay we don't increase


4639
05:31:28,480 --> 05:31:32,638
the bills chronologically but every time we change the major or the minor we


4640
05:31:32,638 --> 05:31:37,360
actually reset the build back to zero and then we go up chronologically so


4641
05:31:37,360 --> 05:31:40,080
um i i don't want to go to be honest with


4642
05:31:40,080 --> 05:31:43,040
you too much into detail about the version but if you're


4643
05:31:43,040 --> 05:31:45,760
interested in software development and i think if you're watching this course


4644
05:31:45,760 --> 05:31:48,638
that kind of means that you're interested in software development


4645
05:31:48,638 --> 05:31:52,240
you'll need to know about this so just know that version is your way of


4646
05:31:52,240 --> 05:31:57,040
labeling your software and its features and what's new in it


4647
05:31:57,040 --> 05:32:02,240
with numbers okay so just remember major


4648
05:32:02,240 --> 05:32:06,160
uh minor build all right but you don't have to play with this so


4649
05:32:06,160 --> 05:32:09,600
much to be honest with you so i think in this entire course we're actually not


4650
05:32:09,600 --> 05:32:12,798
gonna play with it so all right


4651
05:32:12,798 --> 05:32:16,400
uh the next bit of information in the pop special is the environment as you


4652
05:32:16,400 --> 05:32:21,040
can see there it says sdk now when you see sdk just think of


4653
05:32:21,040 --> 05:32:25,520
software development kit and this sdk is referring to the flutter


4654
05:32:25,520 --> 05:32:30,080
sdk so it means that if you share your source code with some


4655
05:32:30,080 --> 05:32:34,558
other developer who's sitting maybe on the other side of the planet


4656
05:32:34,558 --> 05:32:37,920
if they get your source code and they want to for instance be able to test


4657
05:32:37,920 --> 05:32:42,480
this application on a simulator or an emulator on a real device then they are


4658
05:32:42,480 --> 05:32:47,120
required to have flutter sdk version this


4659
05:32:47,120 --> 05:32:51,920
or less than this all right so you can actually get your flutter version by i


4660
05:32:51,920 --> 05:32:55,680
believe if you run flutter dash dash version


4661
05:32:55,680 --> 05:33:01,680
it will tell you that i'm plotter 281 and that as you can see here it says


4662
05:33:01,680 --> 05:33:06,240
yeah the sdk required in order to run this application is two


4663
05:33:06,240 --> 05:33:13,200
one five zero more than or equal to that at least at least two one five zero okay


4664
05:33:13,200 --> 05:33:18,400
so that's your sdk the flutter sdk the other part that you'll need to know


4665
05:33:18,400 --> 05:33:22,240
about is this section in the pops wiki ammo and that that is called the


4666
05:33:22,240 --> 05:33:26,160
dependencies and this is what we're going to talk about actually


4667
05:33:26,160 --> 05:33:29,040
um right now


4668
05:33:29,040 --> 05:33:33,600
um and dependencies as i mentioned before


4669
05:33:33,600 --> 05:33:38,558
uh are ways for you as a software developer to bring in code that other


4670
05:33:38,558 --> 05:33:43,120
people have written in order to make your application application function


4671
05:33:43,120 --> 05:33:47,120
better or function in a completely new way for instance


4672
05:33:47,120 --> 05:33:50,638
um you need to kind of be careful with dependencies just because


4673
05:33:50,638 --> 05:33:55,440
depending on what dependencies or libraries you bring into your project it


4674
05:33:55,440 --> 05:33:58,558
can actually make your life better or worse


4675
05:33:58,558 --> 05:34:01,680
dependencies are um


4676
05:34:01,680 --> 05:34:04,878
basically when you bring it in a dependency they're usually code written


4677
05:34:04,878 --> 05:34:11,040
by somebody else or other people that may be working on a library so


4678
05:34:11,040 --> 05:34:14,558
when you're if you're not coming from software development background then you


4679
05:34:14,558 --> 05:34:18,240
will need to know this and i'm just going to warn you from from now so that


4680
05:34:18,240 --> 05:34:22,400
you've heard it at least from somebody dependencies when you're picking


4681
05:34:22,400 --> 05:34:26,320
dependencies just be a little bit careful in that


4682
05:34:26,320 --> 05:34:31,600
they may it may be that they initially make your


4683
05:34:31,600 --> 05:34:34,480
suffer better but


4684
05:34:34,480 --> 05:34:38,400
since dependencies are code written by other people


4685
05:34:38,400 --> 05:34:43,280
and other people's priorities change their lives may change so that they


4686
05:34:43,280 --> 05:34:47,120
don't have time enough enough time to continue working on those dependencies


4687
05:34:47,120 --> 05:34:49,520
so i have personally run into the issue


4688
05:34:49,520 --> 05:34:53,280
that uh we brought in a dependency into a project and then after a while we just


4689
05:34:53,280 --> 05:34:57,120
realized that oh the developer isn't uh


4690
05:34:57,120 --> 05:35:02,878
actively working on this and maybe even the developer made that library um


4691
05:35:02,878 --> 05:35:07,120
deprecated and deprecated is the world that a word that you'll get to know when


4692
05:35:07,120 --> 05:35:10,958
you work more with software development and deprecated kind of means that the


4693
05:35:10,958 --> 05:35:14,480
library is not supported anymore the library is not


4694
05:35:14,480 --> 05:35:19,040
is not actively being worked on anymore and the developers are encouraging you


4695
05:35:19,040 --> 05:35:21,680
to move away from them so


4696
05:35:21,680 --> 05:35:26,320
when you bring in dependencies what i'd like you to do is just to have a look at


4697
05:35:26,320 --> 05:35:31,920
who is behind the dependency and prioritize your picking and cherry


4698
05:35:31,920 --> 05:35:36,558
picking based on a few factors


4699
05:35:36,558 --> 05:35:41,200
if the divi if the if the dependency is written by a single


4700
05:35:41,200 --> 05:35:44,320
person um be a little bit careful about that


4701
05:35:44,320 --> 05:35:49,040
just because single persons priorities may change and they may not


4702
05:35:49,040 --> 05:35:53,520
be able to like continuously work on a


4703
05:35:53,520 --> 05:35:56,558
even if if it's an open source project they may not be able to continuously


4704
05:35:56,558 --> 05:35:59,840
work on that um if independence is written by an


4705
05:35:59,840 --> 05:36:02,878
organization especially an organization that you have a lot of


4706
05:36:02,878 --> 05:36:07,120
faith in then prioritize it a little bit higher


4707
05:36:07,120 --> 05:36:09,760
um at least that's my opinion


4708
05:36:09,760 --> 05:36:15,760
if a dependency is written by a bunch of independent people


4709
05:36:15,760 --> 05:36:21,360
under an organization prioritize that also higher than a single person who has


4710
05:36:21,360 --> 05:36:24,958
a who has a library under their private


4711
05:36:24,958 --> 05:36:27,760
name okay that doesn't necessarily always mean


4712
05:36:27,760 --> 05:36:31,520
that a dependency created by an organization is actually better quality


4713
05:36:31,520 --> 05:36:35,680
it just means that the chances of it being deprecated are a little bit less


4714
05:36:35,680 --> 05:36:37,760
than uh


4715
05:36:37,760 --> 05:36:40,798
chances of the same library being deprecated had it been written by a


4716
05:36:40,798 --> 05:36:46,320
single person under their private name so these may actually to be honest with


4717
05:36:46,320 --> 05:36:48,958
you sound a little bit high level at the moment


4718
05:36:48,958 --> 05:36:51,920
and you may think okay why do i have to need all


4719
05:36:51,920 --> 05:36:58,558
this it's just that it is very easy for newcomers to flutter to get


4720
05:36:58,558 --> 05:37:02,798
dependent on dependencies in that it's so easy to bring in a dependency and


4721
05:37:02,798 --> 05:37:05,600
just work with it that people forget that oh


4722
05:37:05,600 --> 05:37:09,040
this is actually code written by a single person sitting in there in their


4723
05:37:09,040 --> 05:37:12,798
room just like me sitting here and telling you not to listen to people who


4724
05:37:12,798 --> 05:37:17,680
are sitting in their rooms but i believe it is very important to


4725
05:37:17,680 --> 05:37:23,040
try to steer your thoughts towards a little bit more


4726
05:37:23,040 --> 05:37:28,638
constructive dependencies that are good for your project in the long run but if


4727
05:37:28,638 --> 05:37:31,200
you're writing an application i just want to release it and don't care about


4728
05:37:31,200 --> 05:37:34,638
it anymore after you've released it maybe


4729
05:37:34,638 --> 05:37:39,120
maybe it's okay to bring in a dependency from just a


4730
05:37:39,120 --> 05:37:42,638
that that dependency that you don't even care about but i would even challenge


4731
05:37:42,638 --> 05:37:46,160
that idea of releasing an application which you may not care about after the


4732
05:37:46,160 --> 05:37:49,920
first release but because that's usually not a good idea


4733
05:37:49,920 --> 05:37:55,040
okay a lot of talk about dependencies but i think that had to be said


4734
05:37:55,040 --> 05:37:58,718
so we're talking about dependency i'm just gonna bring in the captions so


4735
05:37:58,718 --> 05:38:02,638
um now here you can also see there is a


4736
05:38:02,638 --> 05:38:06,718
dependency dependency here by default brought into you by flutter itself


4737
05:38:06,718 --> 05:38:11,680
called cupertino icons and cupertino icons is a dependency that


4738
05:38:11,680 --> 05:38:15,520
i believe that the flutter team itself is actually behind


4739
05:38:15,520 --> 05:38:19,120
so you may be thinking okay what are these


4740
05:38:19,120 --> 05:38:22,240
dependencies like where do they come from they actually come from normal


4741
05:38:22,240 --> 05:38:26,480
people and companies so i'm going to bring up a


4742
05:38:26,480 --> 05:38:31,680
um website here for you and it is called pop.dev i'll bring it


4743
05:38:31,680 --> 05:38:38,160
up so that you can actually see it here and um


4744
05:38:38,160 --> 05:38:42,240
you can see that in this website popped up there you can search for dependencies


4745
05:38:42,240 --> 05:38:45,440
so i'm actually going to copy this cupertino icons from here


4746
05:38:45,440 --> 05:38:50,878
and i'm going to paste it right there um kupertino icon just enter and i'm


4747
05:38:50,878 --> 05:38:54,638
gonna press on it and you'll see that it's published by the flutter team


4748
05:38:54,638 --> 05:38:57,040
themselves okay so


4749
05:38:57,040 --> 05:39:01,200
pop.dev is the website where you will search for dependencies so you just


4750
05:39:01,200 --> 05:39:07,040
search for a package and then it will bring up results here for you so


4751
05:39:07,040 --> 05:39:11,280
um this is how you'll search for dependencies okay


4752
05:39:11,280 --> 05:39:13,760
um and


4753
05:39:13,760 --> 05:39:17,040
now that we talked about that let's also talk about something called dev


4754
05:39:17,040 --> 05:39:21,840
dependencies they have dependencies are


4755
05:39:21,840 --> 05:39:24,638
dependencies that will bring into your project


4756
05:39:24,638 --> 05:39:29,280
which are useful only under development so


4757
05:39:29,280 --> 05:39:33,040
if you're familiar with software engineering the normal dependencies will


4758
05:39:33,040 --> 05:39:36,480
get linked to your project and then you will they will be shipped with your


4759
05:39:36,480 --> 05:39:41,600
application whereas dev dependencies there are only dependencies that


4760
05:39:41,600 --> 05:39:45,280
you under the development time will use in


4761
05:39:45,280 --> 05:39:48,558
order to make your software better and as you can see here one of the


4762
05:39:48,558 --> 05:39:51,680
dependencies for instance is flutter test


4763
05:39:51,680 --> 05:39:56,320
or flutter lens in this case as well excuse me


4764
05:39:56,320 --> 05:40:00,000
okay so there are lots and lots of things to talk about here and as you can


4765
05:40:00,000 --> 05:40:03,040
see here in the future actually we'll work with this that you can bring in


4766
05:40:03,040 --> 05:40:08,000
assets and images and bringing them into your project okay


4767
05:40:08,000 --> 05:40:11,680
so this is a quick look around at the pub


4768
05:40:11,680 --> 05:40:16,240
spec yaml and i'm going to let this be here


4769
05:40:16,240 --> 05:40:20,240
i'm just going to tick in my notes here that pops back yaml we've talked about


4770
05:40:20,240 --> 05:40:24,558
it now to the important part


4771
05:40:24,558 --> 05:40:29,120
we actually in our application we're going to need some dependencies in order


4772
05:40:29,120 --> 05:40:32,000
to be able to continue working with the application now


4773
05:40:32,000 --> 05:40:36,958
we haven't talked so much about firebase before but just know that firebase is


4774
05:40:36,958 --> 05:40:43,680
a tool that allows you to kind of go serverless but also have a


4775
05:40:43,680 --> 05:40:48,958
server now serverless is just a fun funky word that is being used nowadays


4776
05:40:48,958 --> 05:40:53,040
to describe a server written by somebody else so a server that you don't


4777
05:40:53,040 --> 05:40:56,160
personally have to write if you don't come from a software development


4778
05:40:56,160 --> 05:40:59,040
background for instance you're a product owner or a designer


4779
05:40:59,040 --> 05:41:03,680
a server is where your data sits in the cloud kind of


4780
05:41:03,680 --> 05:41:05,920
so


4781
05:41:06,160 --> 05:41:09,760
you as a developer sitting in front of your computer right now you're writing a


4782
05:41:09,760 --> 05:41:12,320
flutter application and your flash application is going to be installed on


4783
05:41:12,320 --> 05:41:16,480
ios and android devices and that is the client the client is the consumer of the


4784
05:41:16,480 --> 05:41:21,120
data sent by the server okay so the server is where the logic sits on a


4785
05:41:21,120 --> 05:41:26,718
computer in the cloud okay and firebase is a computer in the cloud just think of


4786
05:41:26,718 --> 05:41:30,958
think of that that is written by google so you control it with simple commands


4787
05:41:30,958 --> 05:41:35,840
on your computer but it controls your data so your client your flutter


4788
05:41:35,840 --> 05:41:39,840
application can connect to it and grab the data and read the data and


4789
05:41:39,840 --> 05:41:43,680
manipulate the data on the client side so


4790
05:41:43,680 --> 05:41:49,040
now in order to talk to firebase we actually need some um


4791
05:41:49,040 --> 05:41:55,200
dependencies and firebase um will i'll bring up my safari window here


4792
05:41:55,200 --> 05:42:01,040
now let's have a look at firebase core i'm going to search for it


4793
05:42:01,040 --> 05:42:04,480
click on it firebase core as you can see it's written by the publisher is


4794
05:42:04,480 --> 05:42:07,840
firebase.google.com and just remember that flutter is


4795
05:42:07,840 --> 05:42:12,480
actually a tool created by google as well so


4796
05:42:12,480 --> 05:42:17,120
i personally think that anything related to firebase is completely okay to bring


4797
05:42:17,120 --> 05:42:21,120
in into your flutter application has a dependency all right


4798
05:42:21,120 --> 05:42:25,600
so um i'm going to go here and then say


4799
05:42:25,600 --> 05:42:31,520
we need four dependencies for this particular project okay so


4800
05:42:31,520 --> 05:42:34,878
if you're in visual studio code you can bring um


4801
05:42:34,878 --> 05:42:38,558
the terminal up uh i actually forgot the command for bringing the terminal i


4802
05:42:38,558 --> 05:42:43,440
think on my mac is control backtick but i believe you can also always bring


4803
05:42:43,440 --> 05:42:48,958
up terminal advice going to terminal and new terminal okay now i can see there


4804
05:42:48,958 --> 05:42:53,040
are two terminal windows here okay now i'm going to get rid of the explorer on


4805
05:42:53,040 --> 05:42:58,240
the left hand side so you can see that the data a little bit better here


4806
05:42:58,240 --> 05:43:02,638
there are four dependencies that we need to bring into our project all right and


4807
05:43:02,638 --> 05:43:07,360
i want you to follow along with this exactly as i'm doing


4808
05:43:07,360 --> 05:43:10,480
previously what we had to do in order to i mean previously in the previous


4809
05:43:10,480 --> 05:43:13,680
versions of flutter if you wanted to bring in a dependency then you'd have to


4810
05:43:13,680 --> 05:43:17,760
go and say you go to your in your pop spec and then


4811
05:43:17,760 --> 05:43:22,160
add your dependencies manually with special versions and then


4812
05:43:22,160 --> 05:43:27,200
you have to go to those dependencies top dev websites to see the current version


4813
05:43:27,200 --> 05:43:29,680
all but with the latest versions of flutter


4814
05:43:29,680 --> 05:43:34,080
you don't have to do that all you have to do is just to say flutter pop add


4815
05:43:34,080 --> 05:43:37,280
and i'm going to do that right now


4816
05:43:37,280 --> 05:43:41,120
so that's how you bring in a dependency all right


4817
05:43:41,120 --> 05:43:46,240
the first dependency that we need is firebase core so just enter this command


4818
05:43:46,240 --> 05:43:49,440
it'll take some time perhaps


4819
05:43:50,240 --> 05:43:53,360
okay then say the same command but say


4820
05:43:53,360 --> 05:43:56,638
firebase off i'm gonna have a look at my notes


4821
05:43:56,638 --> 05:44:00,480
basically here to make sure that i'm entering the correct dependencies


4822
05:44:00,480 --> 05:44:03,600
and i'm not going to talk so much right now about what these dependencies


4823
05:44:03,600 --> 05:44:06,958
actually are because that is going to take a lot of


4824
05:44:06,958 --> 05:44:10,958
time as well so let's just bring the dependencies in there are four


4825
05:44:10,958 --> 05:44:16,160
dependencies so the next dependency that we have to bring in is cloud


4826
05:44:16,160 --> 05:44:18,878
firestore


4827
05:44:19,040 --> 05:44:21,360
and


4828
05:44:21,440 --> 05:44:27,840
let's go to the next one and we say that


4829
05:44:27,920 --> 05:44:34,160
cloud firestore is the third dependency and then we say firebase analytics


4830
05:44:35,760 --> 05:44:41,280
so that is the fourth dependency so


4831
05:44:41,280 --> 05:44:45,360
we've brought in four dependencies at the moment if you look here


4832
05:44:45,360 --> 05:44:50,240
there is a firebase core which is like the


4833
05:44:50,240 --> 05:44:55,200
the kernel the main important parts parts of firebase which again is what


4834
05:44:55,200 --> 05:44:59,760
we're going to use as our server where all the nodes for all our users are


4835
05:44:59,760 --> 05:45:04,320
going to sit the next one is firebase auth


4836
05:45:04,320 --> 05:45:09,360
auth is the short form let me see where did it go um here firebase off that is


4837
05:45:09,360 --> 05:45:12,320
for authentication and


4838
05:45:12,320 --> 05:45:15,360
um i haven't yet shown how that our application is actually going to look


4839
05:45:15,360 --> 05:45:19,600
like but auth is for authentication is where our users will


4840
05:45:19,600 --> 05:45:23,920
be able to register uh log into our application and log out


4841
05:45:23,920 --> 05:45:28,400
and also get email confirmations to send to their emails in order to be able to


4842
05:45:28,400 --> 05:45:31,760
verify the account so auth is for authentication and that's


4843
05:45:31,760 --> 05:45:35,120
what we're gonna use it for in order to make sure that people who


4844
05:45:35,120 --> 05:45:39,920
are interacting with our application they're actually logged in okay


4845
05:45:39,920 --> 05:45:46,400
the next part is cloud firestore and this dependency is used for when we


4846
05:45:46,400 --> 05:45:51,760
actually store a logged in users notes in the firebase backend


4847
05:45:51,760 --> 05:45:54,160
all right it's just funky names to be honest with


4848
05:45:54,160 --> 05:46:01,440
you they're just names decided by developers just like me and you so


4849
05:46:01,440 --> 05:46:05,840
and the next part is firebase analytics and that is for


4850
05:46:05,840 --> 05:46:10,958
if you use firebase analytics when you basically set up your firebase backend


4851
05:46:10,958 --> 05:46:14,958
you will get some free analytics in for instance oh which


4852
05:46:14,958 --> 05:46:18,000
screen did the user go to which button did they press and you can have a look


4853
05:46:18,000 --> 05:46:22,160
at these analytics when you then look at your firebase console which we're gonna


4854
05:46:22,160 --> 05:46:27,200
talk about later i mean i know all of these are quiet um


4855
05:46:27,200 --> 05:46:30,080
maybe a high level if you're not if you're not familiar with firebase you


4856
05:46:30,080 --> 05:46:34,958
may be like what the hell did we just do and that is okay you don't have to know


4857
05:46:34,958 --> 05:46:39,840
all of this just know that we are these four dependencies are stuff we need in


4858
05:46:39,840 --> 05:46:43,360
order to make our application function all right so now that we've added these


4859
05:46:43,360 --> 05:46:47,120
dependencies you can actually go back to your popspakiano file and kind of have a


4860
05:46:47,120 --> 05:46:51,760
look here at the dependencies that we added and


4861
05:46:51,760 --> 05:46:56,080
you can see all of them were added here automatically for you with their latest


4862
05:46:56,080 --> 05:47:00,798
versions okay so previously in previous versions of flutter we had to do this


4863
05:47:00,798 --> 05:47:04,558
manually but now you can just say flutter pop ad and it will add the


4864
05:47:04,558 --> 05:47:09,280
dependencies for you directly to pop special all right


4865
05:47:09,280 --> 05:47:13,120
so great a lot of things we discussed here


4866
05:47:13,120 --> 05:47:17,200
it almost took 50 minutes to go through all of these basics but i believe


4867
05:47:17,200 --> 05:47:21,600
actually basics should take more time to explain than the more advanced stuff


4868
05:47:21,600 --> 05:47:25,440
because the more advanced you get the less


4869
05:47:25,440 --> 05:47:30,160
explanation you need so that is why all these basic things basically take time


4870
05:47:30,160 --> 05:47:33,680
to explain [Music]


4871
05:47:33,680 --> 05:47:36,400
okay i'm just going to take in my notes that


4872
05:47:36,400 --> 05:47:39,920
we've talked about all of these


4873
05:47:40,160 --> 05:47:44,638
topics and i think this is actually a wrap for


4874
05:47:44,638 --> 05:47:48,958
chapter number eight so chapter number eight we talked about um


4875
05:47:48,958 --> 05:47:52,160
how to set up our project we've actually set up our project now we've set up our


4876
05:47:52,160 --> 05:47:57,680
dependencies had a look around uh the default flutter template and we also


4877
05:47:57,680 --> 05:48:02,558
talked about pop special so that's great stuff in chapter number


4878
05:48:02,558 --> 05:48:08,160
nine we're gonna talk about my favorite which is the ios app setup and in this


4879
05:48:08,160 --> 05:48:14,558
chapter actually we're gonna go through a lot of things profiles certificates


4880
05:48:14,558 --> 05:48:19,920
we're gonna talk about app ids a lot a lot a lot i can see here in the


4881
05:48:19,920 --> 05:48:23,680
list so i'm really excited actually for chapter number nine


4882
05:48:23,680 --> 05:48:27,120
so go grab a cup of coffee or a cup of tea


4883
05:48:27,120 --> 05:48:32,000
and i'll see you in the next chapter hello and welcome to chapter nine of


4884
05:48:32,000 --> 05:48:34,480
this course in this chapter we're going to talk


4885
05:48:34,480 --> 05:48:41,520
about the setup of our ios app and as i mentioned it i think it was in um the


4886
05:48:41,520 --> 05:48:44,320
introduction uh chapter in the absolute first


4887
05:48:44,320 --> 05:48:48,480
actually it's not a chapter it's just introduction to this whole course


4888
05:48:48,480 --> 05:48:52,798
um we talked a little bit about what we're planning to do with this


4889
05:48:52,798 --> 05:48:56,878
application that we're developing here and um two of the things that we're


4890
05:48:56,878 --> 05:49:01,040
going to do is to actually release the app in the app store and in the play


4891
05:49:01,040 --> 05:49:05,040
store now if you're not planning to actually do that you could


4892
05:49:05,040 --> 05:49:08,480
potentially skip over this chapter um


4893
05:49:08,480 --> 05:49:13,200
but i still believe that if you're planning on becoming a flutter developer


4894
05:49:13,200 --> 05:49:16,718
you need to know how these things work because


4895
05:49:16,718 --> 05:49:20,400
being a flustered developer depending on what kind of flutter developer that you


4896
05:49:20,400 --> 05:49:24,080
actually want to become um with me assuming that you want to


4897
05:49:24,080 --> 05:49:27,360
become an actual flutter developer where you can for instance work on different


4898
05:49:27,360 --> 05:49:32,840
applications and release them personally or you can work in like a team con


4899
05:49:32,840 --> 05:49:36,480
concept uh and in the context of a team where you


4900
05:49:36,480 --> 05:49:40,320
work with other developers inside a company for instance in order to work on


4901
05:49:40,320 --> 05:49:44,400
their applications and release them than in the app stores so


4902
05:49:44,400 --> 05:49:47,040
if you're if you fall into any of those categories that you actually want to


4903
05:49:47,040 --> 05:49:50,558
release your application then i strongly believe that you should know how to do


4904
05:49:50,558 --> 05:49:53,760
that yourself so although you may be a part of a part of


4905
05:49:53,760 --> 05:49:58,878
a team of a huge organization where the release process is its own like process


4906
05:49:58,878 --> 05:50:02,480
that you basically hand over your source code to them and then they basically


4907
05:50:02,480 --> 05:50:06,240
build it and repair it and release it but if you want to become like a


4908
05:50:06,240 --> 05:50:10,558
full-fledged flutter developer or a mobile developer for that matter you'd


4909
05:50:10,558 --> 05:50:13,120
need to know how to actually release your


4910
05:50:13,120 --> 05:50:16,400
applications okay so in this chapter we're going to talk


4911
05:50:16,400 --> 05:50:20,400
about releasing your app or actually we're


4912
05:50:20,400 --> 05:50:24,558
going to talk about preparing your application for releasing in


4913
05:50:24,558 --> 05:50:29,600
app store later so what you need to know


4914
05:50:29,600 --> 05:50:33,600
is how do you set up your flutter application so that you can actually


4915
05:50:33,600 --> 05:50:38,240
build it later and release it in the ios app


4916
05:50:38,240 --> 05:50:44,958
store okay and if i bring up the next caption here


4917
05:50:44,958 --> 05:50:48,718
you'll see that in order for you to be able to


4918
05:50:48,718 --> 05:50:54,400
build your application and then deploy it in the app store you need an ios


4919
05:50:54,400 --> 05:50:59,600
developer account and i talked about this previously um


4920
05:50:59,600 --> 05:51:03,040
that how what a developer account is and that


4921
05:51:03,040 --> 05:51:08,638
you'd have to apply for it i think it was in chapter one we talked about this


4922
05:51:08,638 --> 05:51:11,520
but if you've jumped over that chapter you'd need to know that you have to


4923
05:51:11,520 --> 05:51:16,878
apply for a developer account at apple and once granted that developer account


4924
05:51:16,878 --> 05:51:21,520
then you're going to be able to get access to a portal portal called the


4925
05:51:21,520 --> 05:51:25,360
app store connect app store connect is your portal for


4926
05:51:25,360 --> 05:51:30,000
managing your applications and uploading to the app store


4927
05:51:30,000 --> 05:51:33,440
downloading some debug information etc which i'm not going to go into so much


4928
05:51:33,440 --> 05:51:38,480
detail right now and it also has a side note as a developer you will get access


4929
05:51:38,480 --> 05:51:42,080
something called i think the developer portal or something like that i think


4930
05:51:42,080 --> 05:51:45,280
it's called i believe so i think we just call it


4931
05:51:45,280 --> 05:51:49,280
developer portal or developer developer site


4932
05:51:49,280 --> 05:51:53,040
so you'll get access to that and you'll be able to manage things such as


4933
05:51:53,040 --> 05:51:58,080
certificates and profiles okay so which we're going to talk about soon


4934
05:51:58,080 --> 05:52:00,798
actually so let's say that you have your developer


4935
05:52:00,798 --> 05:52:03,920
account and if you don't have your developer account then please just go


4936
05:52:03,920 --> 05:52:09,120
and search online for register developer account or just watch the first chapter


4937
05:52:09,120 --> 05:52:12,718
i have to look at my notes actually here and see if that's what we talked about


4938
05:52:12,718 --> 05:52:17,200
in chapter one actually yeah i can see here chapter one


4939
05:52:17,200 --> 05:52:21,040
was titled developer accounts and in that chapter we talked about how to


4940
05:52:21,040 --> 05:52:25,760
register for an ios developer again in depth so please go and watch


4941
05:52:25,760 --> 05:52:29,040
chapter one if you haven't done that and if you are planning to actually release


4942
05:52:29,040 --> 05:52:33,200
your application in the ios app store


4943
05:52:33,200 --> 05:52:36,878
so sorry about that


4944
05:52:36,878 --> 05:52:40,160
so now you know that you need the developer account and it costs a little


4945
05:52:40,160 --> 05:52:45,040
bit of money i think it's about 99 so in sweden it's about 990 swedish crowns


4946
05:52:45,040 --> 05:52:49,120
something like that or 1000 swedish crowns almost


4947
05:52:49,120 --> 05:52:51,280
so um now that we've talked about the


4948
05:52:51,280 --> 05:52:55,120
developer account let's talk about the certificates and profiles because this


4949
05:52:55,120 --> 05:52:58,558
is the thing that trips up a lot of mobile developers when they come to ios


4950
05:52:58,558 --> 05:53:01,680
development um i mean i've been doing ios


4951
05:53:01,680 --> 05:53:06,160
development since late 2000 2007 when


4952
05:53:06,160 --> 05:53:11,680
there was pretty much no um ios sdk as such it was like just a set


4953
05:53:11,680 --> 05:53:16,638
of tools and very little library support because originally ios apps by steve


4954
05:53:16,638 --> 05:53:20,240
jobs definition were supposed to be web applications and then


4955
05:53:20,240 --> 05:53:23,600
apple just transitioned to disbelief that yeah we actually have to have


4956
05:53:23,600 --> 05:53:27,040
native applications so they released some tools and xcode was there so you


4957
05:53:27,040 --> 05:53:30,878
could build some simple applications with ios opengl es what's there so you


4958
05:53:30,878 --> 05:53:34,480
can build some games as well but


4959
05:53:34,480 --> 05:53:37,680
how it started was that apple wanted to make sure that the


4960
05:53:37,680 --> 05:53:42,558
applications that are developed can only be distributed through the app store so


4961
05:53:42,558 --> 05:53:47,120
they said that okay if i give vandal for instance a


4962
05:53:47,120 --> 05:53:50,480
developer account he shouldn't be able to create his own app store because they


4963
05:53:50,480 --> 05:53:53,520
it's just a i'm not going into the details of what


4964
05:53:53,520 --> 05:53:58,000
why they're doing that there's a whole topic and what we could discuss like a


4965
05:53:58,000 --> 05:54:01,280
few days we could talk about that whether it's a monopoly or not i don't


4966
05:54:01,280 --> 05:54:04,638
know so i'm not going to go into the detail about that but what you need to


4967
05:54:04,638 --> 05:54:09,360
know that is there is an app store the um


4968
05:54:09,360 --> 05:54:12,958
basically just called app store but you could call ios app store mac apps or


4969
05:54:12,958 --> 05:54:16,878
whatever you want and apple has control over that so it's


4970
05:54:16,878 --> 05:54:19,680
apple who sits there and like controls the


4971
05:54:19,680 --> 05:54:24,480
measures that apps that are published on the app store they're of a good quality


4972
05:54:24,480 --> 05:54:31,200
for instance okay so apple themselves have a certificate now a certificate is


4973
05:54:31,200 --> 05:54:35,600
like a piece of paper uh just imagine a piece of paper certificate that they


4974
05:54:35,600 --> 05:54:40,000
hold onto and they said okay whatever we publish on the app store


4975
05:54:40,000 --> 05:54:44,878
um it comes from us okay so every app on


4976
05:54:44,878 --> 05:54:48,638
the ios app store comes actually from apple i don't mean


4977
05:54:48,638 --> 05:54:52,718
that the apple has written the app i mean that apple has signed the app using


4978
05:54:52,718 --> 05:54:55,680
their certified that piece of paper okay so


4979
05:54:55,680 --> 05:55:00,878
and then when the app gets downloaded to your iphone your iphone actually checks


4980
05:55:00,878 --> 05:55:04,160
is this a is this a trusted application where does


4981
05:55:04,160 --> 05:55:09,120
it come from so ios as an operating system it can


4982
05:55:09,120 --> 05:55:12,000
contain and you can install many different types of applications that


4983
05:55:12,000 --> 05:55:14,320
come from many different types of sources


4984
05:55:14,320 --> 05:55:17,440
such as the ios app store or you could actually


4985
05:55:17,440 --> 05:55:21,840
download application that comes directly from a specific developer


4986
05:55:21,840 --> 05:55:25,440
now all these applications need to be signed


4987
05:55:25,440 --> 05:55:28,798
they need to be signed with a certificate that is just to identify


4988
05:55:28,798 --> 05:55:33,520
where they come from so certificate is a piece of paper that you as a developer


4989
05:55:33,520 --> 05:55:37,840
hold and every application excuse me every application that you


4990
05:55:37,840 --> 05:55:42,718
develop will be signed using that certificate okay so that certificate is


4991
05:55:42,718 --> 05:55:47,680
your identity as a developer and it gets kind of


4992
05:55:47,680 --> 05:55:52,958
carried around in with your application to the destination so if you develop


4993
05:55:52,958 --> 05:55:56,000
this notes application that we're doing in this course and you sign it with your


4994
05:55:56,000 --> 05:56:00,160
certificate then your application is going to have that certificate signature


4995
05:56:00,160 --> 05:56:04,638
inside it so when i send it to apple and then apple is like aha that's this


4996
05:56:04,638 --> 05:56:09,440
developer who created this app okay and then when apple then


4997
05:56:09,440 --> 05:56:13,920
says okay your application's fine you can't release it to the app store then


4998
05:56:13,920 --> 05:56:18,638
apple re-signs your application with their own certificate


4999
05:56:18,638 --> 05:56:22,638
that is just to make sure that your application after it's been signed with


5000
05:56:22,638 --> 05:56:28,080
apple certificate can be distributed into the ios app store and downloaded by


5001
05:56:28,080 --> 05:56:34,480
millions of users around the world so it's just sir just know that certificate


5002
05:56:34,480 --> 05:56:38,878
is your identity as a developer okay [Music]


5003
05:56:38,878 --> 05:56:42,320
now now that we talked about certificates let's talk about profiles


5004
05:56:42,320 --> 05:56:46,798
because that also is a tripping point for some developers


5005
05:56:46,798 --> 05:56:50,400
um especially if they don't come from like a native ios development background


5006
05:56:50,400 --> 05:56:52,958
which i do um


5007
05:56:52,958 --> 05:56:58,240
profiles you see a certificate identifies you


5008
05:56:58,240 --> 05:57:04,558
in short profiles identify your app so that's like the


5009
05:57:04,558 --> 05:57:08,798
very short way of saying it so you as a developer might have


5010
05:57:08,798 --> 05:57:13,440
10 20 30 applications that you're developing or you have developed


5011
05:57:13,440 --> 05:57:17,440
each of these applications will have their own identity


5012
05:57:17,440 --> 05:57:21,600
and that identity at the end is tied to you as a developer so you say here's my


5013
05:57:21,600 --> 05:57:24,558
certificate here's who i am


5014
05:57:24,558 --> 05:57:28,558
but when you then create an application then that application also needs to


5015
05:57:28,558 --> 05:57:32,958
identify itself it will be like here i am i am an application signed with this


5016
05:57:32,958 --> 05:57:38,400
profile using this certificate so just know that a profile is kind of like


5017
05:57:38,400 --> 05:57:42,240
an identity for your application and different flavors of that


5018
05:57:42,240 --> 05:57:47,200
application and a certificate is an identity of you


5019
05:57:47,200 --> 05:57:49,920
as the person who developed that application all right


5020
05:57:49,920 --> 05:57:53,840
so and if you notice i just said different


5021
05:57:53,840 --> 05:57:58,240
flavors of your application and by that i mean that if you're not


5022
05:57:58,240 --> 05:58:02,958
coming from a development background um if you're for instance coming from a


5023
05:58:02,958 --> 05:58:07,600
design background and you have a figma file or visio file that you're designing


5024
05:58:07,600 --> 05:58:11,360
your wi-frames and whatever if you're coming from a product owner ownership


5025
05:58:11,360 --> 05:58:14,638
background than your probably may have like um


5026
05:58:14,638 --> 05:58:18,400
working with jira or excel sheets or whatever wherever you put your


5027
05:58:18,400 --> 05:58:23,520
requirements you may not be familiar with different flavors of an application


5028
05:58:23,520 --> 05:58:27,440
but if you've worked a little bit close with an app


5029
05:58:27,440 --> 05:58:31,200
team then you'll know that there are different flavors of every application


5030
05:58:31,200 --> 05:58:34,240
and those flavors are usually i mean they're


5031
05:58:34,240 --> 05:58:38,160
usually two flavors one is a development flavor and the


5032
05:58:38,160 --> 05:58:43,040
other one is a production flavor a development flavor is the application


5033
05:58:43,040 --> 05:58:47,040
you see if you sit with developers with software engineers that are working on


5034
05:58:47,040 --> 05:58:50,798
your application on a daily basis they're coding they're


5035
05:58:50,798 --> 05:58:55,360
fixing things they're fixing bugs adding new features and then they will provide


5036
05:58:55,360 --> 05:59:00,958
the product to you as a software uh as a product owner for instance or a designer


5037
05:59:00,958 --> 05:59:04,160
and you will download that flavor on your application and be like okay this


5038
05:59:04,160 --> 05:59:07,360
this looks fine great now


5039
05:59:07,360 --> 05:59:11,040
all of a sudden you press a button and that button crashes the application so


5040
05:59:11,040 --> 05:59:14,558
the application just disappears oh it crashed


5041
05:59:14,558 --> 05:59:18,558
well at that point if the developers were doing their job correctly then they


5042
05:59:18,558 --> 05:59:22,558
had had to put some crash analytics into the application


5043
05:59:22,558 --> 05:59:25,600
that as soon as the application crashes or


5044
05:59:25,600 --> 05:59:29,600
something bad happens to the application of that flavor of the application that


5045
05:59:29,600 --> 05:59:31,680
you installed on your


5046
05:59:31,680 --> 05:59:37,360
iphone or android phone or tablet or whatever and they will get


5047
05:59:37,360 --> 05:59:41,680
something called a crash report a crash report is as its name indicates


5048
05:59:41,680 --> 05:59:46,240
it's just a report where the crash information is completely visible and


5049
05:59:46,240 --> 05:59:50,080
they probably even know which button you tapped at what time and what was the


5050
05:59:50,080 --> 05:59:52,958
information that your app was carrying at the point


5051
05:59:52,958 --> 05:59:57,760
that it crashed so it helps them debug and fix that problem


5052
05:59:57,760 --> 06:00:01,840
now these flavors of the application that you install on your phone on a


5053
06:00:01,840 --> 06:00:06,240
daily basis were working mobile developers are usually called debug


5054
06:00:06,240 --> 06:00:10,240
applications and a debug application it's just a way of saying that the


5055
06:00:10,240 --> 06:00:15,040
developers who created it it created the application have the opportunity then to


5056
06:00:15,040 --> 06:00:20,798
fix any bugs that may arise with more information than they would usually have


5057
06:00:20,798 --> 06:00:24,878
had they released this application to the store for millions of


5058
06:00:24,878 --> 06:00:28,798
others to download so that is a flavor it's a debug flavor or


5059
06:00:28,798 --> 06:00:32,718
is a development flavor okay and it just means that it's a daily it's kind of


5060
06:00:32,718 --> 06:00:36,878
like a updating regularly application that only


5061
06:00:36,878 --> 06:00:41,760
very close circle of people close to the project can download so that's a flavor


5062
06:00:41,760 --> 06:00:44,958
okay another flavor of an application that


5063
06:00:44,958 --> 06:00:48,958
gets released by developers could be the production


5064
06:00:48,958 --> 06:00:51,840
flavor and the product production flavor is


5065
06:00:51,840 --> 06:00:56,320
the same as the debug flavor but a little bit like


5066
06:00:56,320 --> 06:01:00,558
some stuff maybe removed from it some sensitive information that may be logged


5067
06:01:00,558 --> 06:01:04,718
otherwise maybe removed from it it's just like a stripped-down version


5068
06:01:04,718 --> 06:01:08,638
for security purposes not stripped-down version of like features or anything


5069
06:01:08,638 --> 06:01:12,080
it's just they make it tighter they make it so


5070
06:01:12,080 --> 06:01:16,718
that it is a little bit more secure like some extra stuff may be removed from it


5071
06:01:16,718 --> 06:01:21,040
extra stuff that otherwise developers only may need so


5072
06:01:21,040 --> 06:01:24,480
when it then gets packaged into this beautiful little uh


5073
06:01:24,480 --> 06:01:30,480
yeah beautiful little package basically then it will also be a new flavor called


5074
06:01:30,480 --> 06:01:34,718
the production flavor so now you have two flavors one is like


5075
06:01:34,718 --> 06:01:38,160
for a close circle people sitting next to the product


5076
06:01:38,160 --> 06:01:42,160
in the same product room or now that everyone's working


5077
06:01:42,160 --> 06:01:46,000
remotely maybe people are sitting at home etc and that is like the product


5078
06:01:46,000 --> 06:01:50,558
team closely developers testers product owners designers uxers everyone that is


5079
06:01:50,558 --> 06:01:55,040
the closed circle they get the development builds usually


5080
06:01:55,040 --> 06:01:59,360
and then when you get to sending your application to apple for


5081
06:01:59,360 --> 06:02:02,878
instance or to google for review then you would


5082
06:02:02,878 --> 06:02:06,798
get the production flavor okay the reason i'm talking about flavors is that


5083
06:02:06,798 --> 06:02:11,680
these different flavors on ios at least are basically


5084
06:02:11,680 --> 06:02:16,718
assigned with their own specific profiles so then you'd have a


5085
06:02:16,718 --> 06:02:21,280
development profile and you would have a production profile and these prof


5086
06:02:21,280 --> 06:02:26,718
profiles dictate to your application what it what it can and it can't do


5087
06:02:26,718 --> 06:02:31,280
for instance one of the capabilities of a development profile in the ios world


5088
06:02:31,280 --> 06:02:35,840
is that your application can actually be installed on a telephone hooked with a


5089
06:02:35,840 --> 06:02:41,200
cable or even without a cable and debugged remotely so


5090
06:02:41,200 --> 06:02:44,240
this is one of the cool things you can do with ios in that you can actually


5091
06:02:44,240 --> 06:02:47,840
like if i'm a developer sitting here i can


5092
06:02:47,840 --> 06:02:52,480
get the designer's telephone and say oh yeah you want the application like do


5093
06:02:52,480 --> 06:02:56,240
you want to actually see what i'm working on yeah she or he would say


5094
06:02:56,240 --> 06:02:58,958
you would connect your their phone to your


5095
06:02:58,958 --> 06:03:02,638
computer and enable something called remote debugging


5096
06:03:02,638 --> 06:03:06,160
and then you would disconnect it and then give the phone back to them and


5097
06:03:06,160 --> 06:03:09,600
whenever they want the application running live on their phone as you're


5098
06:03:09,600 --> 06:03:14,558
developing it you can actually run the application with your xcode


5099
06:03:14,558 --> 06:03:18,718
live under uh iphone or ipad so


5100
06:03:18,718 --> 06:03:23,600
that is its own flavor and the profile which is the development profile


5101
06:03:23,600 --> 06:03:29,040
dictates to that application that you can be debugged but if you then want to


5102
06:03:29,040 --> 06:03:33,440
sign your application with a production profile and send it to apple


5103
06:03:33,440 --> 06:03:37,600
that profile dictates that this application is not allowed to be


5104
06:03:37,600 --> 06:03:40,320
debugged and when you


5105
06:03:40,320 --> 06:03:45,360
create your application and send it to apple you need to make sure of two


5106
06:03:45,360 --> 06:03:48,878
things among many other things but


5107
06:03:48,878 --> 06:03:52,320
certificate and profile wise you need to make sure of two things


5108
06:03:52,320 --> 06:03:57,120
the application is signed with your production certificate and the


5109
06:03:57,120 --> 06:04:02,878
application is signed also with the production profile which is hooked to


5110
06:04:02,878 --> 06:04:07,040
the production certificate so first the certificate should be there using the


5111
06:04:07,040 --> 06:04:11,760
certificate you create the profile with the profile you sign your application


5112
06:04:11,760 --> 06:04:16,878
and then you send this application to apple apple then looks oh everything is


5113
06:04:16,878 --> 06:04:20,160
is in order the profile to use was a


5114
06:04:20,160 --> 06:04:25,680
a production profile and the certificate linked to the profile was also correct a


5115
06:04:25,680 --> 06:04:30,240
production certificate identifying you as a developer


5116
06:04:30,240 --> 06:04:33,200
so that was almost 16 minutes of


5117
06:04:33,200 --> 06:04:36,240
information about profiles and certificates for ios but i think they're


5118
06:04:36,240 --> 06:04:39,520
so paramount in i mean it's so important to


5119
06:04:39,520 --> 06:04:43,280
understand that you shouldn't really jump over


5120
06:04:43,280 --> 06:04:46,878
these concepts as if you're if you want to become a mobile developer it's so


5121
06:04:46,878 --> 06:04:49,600
important so


5122
06:04:49,680 --> 06:04:54,400
now enough with concepts now let's talk a little bit


5123
06:04:54,400 --> 06:04:57,440
about um


5124
06:04:57,440 --> 06:05:01,040
the developer account and here i actually have a link which i'm going to


5125
06:05:01,040 --> 06:05:06,000
open in a separate window and then i'm going to bring it to the


5126
06:05:06,000 --> 06:05:09,840
foreground so you can actually see


5127
06:05:09,920 --> 06:05:17,040
so here is the developer account as you can see on apple's website and i'm gonna


5128
06:05:17,040 --> 06:05:21,680
bring my face a little bit to the right bottom right so zoom into the window


5129
06:05:21,680 --> 06:05:27,480
here and this is actually on developer


5130
06:05:28,160 --> 06:05:32,798
then you would go into accounts okay so after you've registered an account


5131
06:05:32,798 --> 06:05:36,400
then you will be able to go in here and sign in with your account and i'm going


5132
06:05:36,400 --> 06:05:43,440
to sign in with my um companies apple id


5133
06:05:43,520 --> 06:05:48,958
there we go and then it says okay we sent you a verification code and i have


5134
06:05:48,958 --> 06:05:52,320
my apple watch here so i'm i'm just gonna


5135
06:05:52,320 --> 06:05:55,840
say i didn't get a code and text me the code all right


5136
06:05:55,840 --> 06:05:59,120
so in a short while i should be able to get


5137
06:05:59,120 --> 06:06:03,760
a verification code here and it is important that you don't show


5138
06:06:03,760 --> 06:06:08,160
this verification code to other people it's just you shouldn't do that so i'm


5139
06:06:08,160 --> 06:06:12,798
gonna remove the screen from where you can see it and i'm gonna enter the code


5140
06:06:12,798 --> 06:06:19,840
that was sent to me it is six digits and it is uh just basically digits and


5141
06:06:19,840 --> 06:06:23,870
bring the phone i bring the browser up now and i say trust this browser okay


5142
06:06:23,870 --> 06:06:26,480
[Music] so


5143
06:06:26,480 --> 06:06:31,520
here you will see that um license agreement has been updated okay so we


5144
06:06:31,520 --> 06:06:36,320
should be able to review that later so i'm gonna increase the


5145
06:06:36,320 --> 06:06:41,760
space that this screen is taking at the moment so you can see it in its entirety


5146
06:06:41,760 --> 06:06:45,120
and you can see that now that you you've logged into this account you should be


5147
06:06:45,120 --> 06:06:49,280
able to see things such as overview membership people's


5148
06:06:49,280 --> 06:06:55,360
certificates ids and profiles okay so and then what i talked about earlier


5149
06:06:55,360 --> 06:07:00,080
which is your app store connect okay so um


5150
06:07:00,080 --> 06:07:04,480
and what happens here basically is


5151
06:07:04,480 --> 06:07:08,160
that in the membership people's certificates


5152
06:07:08,160 --> 06:07:11,920
ids and profiles is where you will manage your certificates and all your


5153
06:07:11,920 --> 06:07:15,680
profiles as i mentioned before so


5154
06:07:15,680 --> 06:07:18,718
um here it is very important that you


5155
06:07:18,718 --> 06:07:23,120
basically set up a good ground for your uh certificates create the dev


5156
06:07:23,120 --> 06:07:25,840
certificate the the production survey and then you


5157
06:07:25,840 --> 06:07:29,120
create your profiles after that which we're gonna talk actually about in this


5158
06:07:29,120 --> 06:07:33,840
um in this chapter


5159
06:07:33,920 --> 06:07:37,920
so here are the missing pieces for us in


5160
06:07:37,920 --> 06:07:41,440
order to be able to carry on


5161
06:07:41,440 --> 06:07:46,480
so we need as i mentioned before certificates profiles and app ids app id


5162
06:07:46,480 --> 06:07:49,600
is something that i didn't mention before so i think it's just important


5163
06:07:49,600 --> 06:07:55,440
that i mention what an app id is an app id is


5164
06:07:55,440 --> 06:08:01,600
additional to the profile that you create an app id is an identifier that


5165
06:08:01,600 --> 06:08:07,120
apple and you use in order to know which application you are


5166
06:08:07,120 --> 06:08:11,120
talking with both you yourself and also


5167
06:08:11,120 --> 06:08:14,798
if you for instance in the in the future are going to enable


5168
06:08:14,798 --> 06:08:19,840
features such as push notifications now if you're not familiar with what


5169
06:08:19,840 --> 06:08:24,718
push notifications are they're basically remote notifications remote information


5170
06:08:24,718 --> 06:08:28,400
that you can send from a cloud somewhere on the internet


5171
06:08:28,400 --> 06:08:33,360
to a user's phone so when they get their phone they will see oh here is a message


5172
06:08:33,360 --> 06:08:36,958
from this application you can think of it as remote messages


5173
06:08:36,958 --> 06:08:41,520
just as if someone sent you an sms or an imessage


5174
06:08:41,520 --> 06:08:45,440
or for instance if you're using whatsapp or telegram someone writing a message in


5175
06:08:45,440 --> 06:08:47,920
a chat and then you're getting a notification on your phone that is


5176
06:08:47,920 --> 06:08:54,638
called a push notification so an app id is used mainly in order to


5177
06:08:54,638 --> 06:08:57,360
be able in order for you as a developer to be


5178
06:08:57,360 --> 06:09:01,760
able to specify different capabilities of your application for instance that it


5179
06:09:01,760 --> 06:09:04,320
can receive push notifications that it can


5180
06:09:04,320 --> 06:09:09,360
for instance store secure information on the phone etc etc so


5181
06:09:09,360 --> 06:09:12,160
so when i previously mentioned that you need a certificate and profile in order


5182
06:09:12,160 --> 06:09:16,878
to sign your application you also need an app id in order to identify your


5183
06:09:16,878 --> 06:09:20,638
application and its capabilities okay so we're going to talk about that soon


5184
06:09:20,638 --> 06:09:22,958
actually


5185
06:09:23,600 --> 06:09:26,878
so now


5186
06:09:26,878 --> 06:09:30,080
what we need to do here before we actually get started creating a


5187
06:09:30,080 --> 06:09:34,000
certificate uh is to


5188
06:09:34,000 --> 06:09:38,480
talk about the keychain now if you're if you're if you have a


5189
06:09:38,480 --> 06:09:42,240
developer account here and you are planning on releasing your application i


5190
06:09:42,240 --> 06:09:44,878
kind of can basically assume that you have


5191
06:09:44,878 --> 06:09:49,200
a macintosh so that you have registered for an account


5192
06:09:49,200 --> 06:09:53,520
and that you want to be able to sign your application with a certificate and


5193
06:09:53,520 --> 06:09:56,400
profile however you may be in a group of people


5194
06:09:56,400 --> 06:10:00,798
who doesn't have a who doesn't have a macintosh and xcode


5195
06:10:00,798 --> 06:10:04,558
etc but you still want to be able to release your application to the app


5196
06:10:04,558 --> 06:10:09,040
store so you may want to for instance create your certificate profiles an app


5197
06:10:09,040 --> 06:10:13,600
id and then later send that information to some sort of a cloud hosting service


5198
06:10:13,600 --> 06:10:17,520
for for them to sign your application and then send it back to you something


5199
06:10:17,520 --> 06:10:23,760
like that i have never done that myself but you may be in that group and uh


5200
06:10:23,760 --> 06:10:27,680
for the sake of being inclusive i think it's important to talk about that


5201
06:10:27,680 --> 06:10:31,440
um now let's talk about what i've put up here


5202
06:10:31,440 --> 06:10:35,200
as the caption and that is like the certificates in the keychain


5203
06:10:35,200 --> 06:10:39,280
you see every certificate gets created by you as a


5204
06:10:39,280 --> 06:10:43,440
developer sending a request to apple now


5205
06:10:43,440 --> 06:10:47,520
this request is you basically creating a digital


5206
06:10:47,520 --> 06:10:50,718
signature on your computer which


5207
06:10:50,718 --> 06:10:54,718
your computer holds onto then your request you will send it to


5208
06:10:54,718 --> 06:11:00,320
apple apple says oh you're asking for a certificate okay here's the certificate


5209
06:11:00,320 --> 06:11:03,200
and then you download that certificate and then when you double click on the


5210
06:11:03,200 --> 06:11:09,120
certificate it gets installed and hooked to your original request okay so here's


5211
06:11:09,120 --> 06:11:13,040
the certificate and here's the private key so


5212
06:11:13,040 --> 06:11:17,200
the private key is just a piece of information that your computer stores


5213
06:11:17,200 --> 06:11:22,400
digitally on only your computer so that later the downloaded certificate can


5214
06:11:22,400 --> 06:11:27,840
actually be hooked to it creating a chain okay so


5215
06:11:27,840 --> 06:11:31,600
your application when it gets signed with your certificate that you then


5216
06:11:31,600 --> 06:11:35,840
download from apple it actually contains some information


5217
06:11:35,840 --> 06:11:40,000
about the certificate and the private key and then you send the application


5218
06:11:40,000 --> 06:11:45,280
that was signed using these two pieces of information to apple so


5219
06:11:45,280 --> 06:11:48,080
there's a lot of information i know but i think it's important for every mobile


5220
06:11:48,080 --> 06:11:51,840
developer who wants to release something for ios appstore to


5221
06:11:51,840 --> 06:11:55,200
know this um now this


5222
06:11:55,200 --> 06:11:59,360
private key and the certificate they both get stored inside a program on your


5223
06:11:59,360 --> 06:12:03,040
computer called keychain if you have macintosh


5224
06:12:03,040 --> 06:12:08,000
and i can bring up keychain actually now let me see which i have three


5225
06:12:08,000 --> 06:12:12,000
screens here so i don't know which one is gonna get open on


5226
06:12:12,000 --> 06:12:17,040
so i will bring up keychain here um


5227
06:12:17,040 --> 06:12:21,600
and i will show you how it looks like so


5228
06:12:21,600 --> 06:12:26,638
here is an example of keychain and you can see here there's a distribution


5229
06:12:26,638 --> 06:12:30,160
certificate and a development certificate okay


5230
06:12:30,160 --> 06:12:34,400
and these certificates i didn't create them i downloaded them but the things


5231
06:12:34,400 --> 06:12:37,840
under them this is the chain i was talking about this is the key that i


5232
06:12:37,840 --> 06:12:42,080
created okay so when you request a certificate from


5233
06:12:42,080 --> 06:12:47,600
apple you actually create this thing on your computer and you upload this thing


5234
06:12:47,600 --> 06:12:52,080
to apple for them to create a certificate hooked to that kind of not


5235
06:12:52,080 --> 06:12:55,440
you don't actually upload exactly this but something that is related to this


5236
06:12:55,440 --> 06:12:57,280
okay so


5237
06:12:57,280 --> 06:13:01,200
for us in order to be able to continue i think it's important that i actually


5238
06:13:01,200 --> 06:13:04,240
delete these existing certificates from my computer


5239
06:13:04,240 --> 06:13:06,798
so i'm just going to go like this and i'm going to be like


5240
06:13:06,798 --> 06:13:11,120
delete two items all right and delete them just like that


5241
06:13:11,120 --> 06:13:14,798
okay so now they're gone now what we need to do is


5242
06:13:14,798 --> 06:13:17,120
um


5243
06:13:17,280 --> 06:13:22,360
here let me put up the captions so you can see


5244
06:13:25,680 --> 06:13:32,558
so that was the certificates and now we also need to talk about um


5245
06:13:33,440 --> 06:13:37,120
we also need to talk about actually deleting the profiles now this is an


5246
06:13:37,120 --> 06:13:40,638
interesting part if you already have like profiles installed on your computer


5247
06:13:40,638 --> 06:13:45,520
you may not want to do this but i'm just going to show you this step so that we


5248
06:13:45,520 --> 06:13:49,360
start with a clean slate okay so you're not supposed to do this if you exactly


5249
06:13:49,360 --> 06:13:52,638
know what you're doing with your certificates but if if this is the first


5250
06:13:52,638 --> 06:13:55,760
time you're doing this and there may already be some certificates for you on


5251
06:13:55,760 --> 06:13:59,920
your computer for some reason then this is the way to actually get rid of them


5252
06:13:59,920 --> 06:14:04,080
so i'm gonna open up finder um


5253
06:14:04,080 --> 06:14:08,000
let me open up finder here and i'm gonna bring it up here


5254
06:14:08,000 --> 06:14:13,200
and what we need to do is to go into a folder called um


5255
06:14:13,200 --> 06:14:16,160
i believe it's called library and then mobile


5256
06:14:16,160 --> 06:14:18,638
device and then something called provision


5257
06:14:18,638 --> 06:14:22,638
profiles okay and you can see here um and i will show


5258
06:14:22,638 --> 06:14:28,320
you this path again so it's my user library mobile device and then provision


5259
06:14:28,320 --> 06:14:32,638
profiles okay so after i've gone into that folder i'm


5260
06:14:32,638 --> 06:14:35,920
going to delete these profiles that are here okay


5261
06:14:35,920 --> 06:14:38,878
so you don't have to do this if you don't want to and you know exactly what


5262
06:14:38,878 --> 06:14:42,558
you're doing but i'm just doing it to show you that profiles are always stored


5263
06:14:42,558 --> 06:14:46,798
in that location for your user okay and what you can also do which i really


5264
06:14:46,798 --> 06:14:50,638
like is to if you say add columns here and kind of like drag it into your


5265
06:14:50,638 --> 06:14:53,840
favorites so you don't have to type that path every time so let's just put it


5266
06:14:53,840 --> 06:14:57,360
here okay so that every time i want to install the profile i can just click


5267
06:14:57,360 --> 06:15:01,840
here and put my profile there all right


5268
06:15:03,280 --> 06:15:06,400
all right um


5269
06:15:06,718 --> 06:15:10,400
now that we've done that the next step as the caption shows here is to delete


5270
06:15:10,400 --> 06:15:13,680
our existing certificates and profiles from apple's


5271
06:15:13,680 --> 06:15:17,200
development account so let's go to certificates ids and profiles here on


5272
06:15:17,200 --> 06:15:21,840
the left hand side and you'll see here i have quite a lot of things stored right


5273
06:15:21,840 --> 06:15:26,000
here okay you see distribution development development blah blah


5274
06:15:26,000 --> 06:15:32,480
so what we can do here is to go ahead and delete these certificates on the


5275
06:15:32,480 --> 06:15:35,600
left hand side you see it's a certificate so there are quite a few of


5276
06:15:35,600 --> 06:15:39,040
them so what i'm going to do is just to tap


5277
06:15:39,040 --> 06:15:44,000
on this one and just say revoke revoke tap on the next one and just revoke them


5278
06:15:44,000 --> 06:15:49,200
one by one so and again if you're new to ios development and you've just gotten


5279
06:15:49,200 --> 06:15:53,840
your development account you don't even have any certificates so this screen is


5280
06:15:53,840 --> 06:15:58,798
going to be empty for you so revoke revoke so your screen is gonna look like


5281
06:15:58,798 --> 06:16:02,400
this all right so now that we don't have certificates


5282
06:16:02,400 --> 06:16:07,360
i'm also going to go into profiles and delete these profiles so if i just go in


5283
06:16:07,360 --> 06:16:11,760
here and kind of like say all my profiles and then just delete this is


5284
06:16:11,760 --> 06:16:15,120
going to be fine as well so sort of problem all right so now i've deleted


5285
06:16:15,120 --> 06:16:19,360
all my profiles and certificates


5286
06:16:19,360 --> 06:16:23,920
and that was the goal of this part of the chapter


5287
06:16:23,920 --> 06:16:27,280
9 i believe so yeah i've now deleted the existing


5288
06:16:27,280 --> 06:16:30,400
development and production certs and


5289
06:16:30,400 --> 06:16:35,440
then that is done with the profiles as well they're also gone


5290
06:16:35,440 --> 06:16:39,120
so what we need to do now is to create something called a development


5291
06:16:39,120 --> 06:16:42,320
certificate and just to recap a development certificate is


5292
06:16:42,320 --> 06:16:47,200
a certificate that will allow you as a developer to run and test your


5293
06:16:47,200 --> 06:16:50,958
application while you're developing it on real


5294
06:16:50,958 --> 06:16:56,798
iphone or ipad all right so it's it's not necessary for releasing


5295
06:16:56,798 --> 06:17:00,558
the application but i personally after many years of experience developing


5296
06:17:00,558 --> 06:17:03,520
mobile applications i've come to the conclusion that i prefer actually


5297
06:17:03,520 --> 06:17:07,600
running my application testing my applications are real devices as i


5298
06:17:07,600 --> 06:17:12,240
develop because you also have emulators and you also have simulators that


5299
06:17:12,240 --> 06:17:16,638
simulate and emulate the capabilities of iphone and


5300
06:17:16,638 --> 06:17:21,200
android phones or tablets but i've come to the conclusion that it's actually for


5301
06:17:21,200 --> 06:17:26,160
me at least better to test my application real phones or tablets


5302
06:17:26,160 --> 06:17:29,760
so in order to be able to do that and if you have for instance an iphone


5303
06:17:29,760 --> 06:17:33,520
connected to your computer um and you want to test your flag


5304
06:17:33,520 --> 06:17:36,558
application on that iphone then the first thing you need to do is to create


5305
06:17:36,558 --> 06:17:40,798
a development certificate so you need to identify yourself as a developer to


5306
06:17:40,798 --> 06:17:44,878
apple so let's go to the certificate section and then just say create a


5307
06:17:44,878 --> 06:17:50,160
certificate and then choose apple development actually sorry ios app


5308
06:17:50,160 --> 06:17:55,040
development this is interesting it says


5309
06:17:55,200 --> 06:17:58,240
yeah so it says apple that's very interesting so you can basically use


5310
06:17:58,240 --> 06:18:00,638
something called apple development but we're not going to do that we're just


5311
06:18:00,638 --> 06:18:03,440
going to say ios app development at the moment okay


5312
06:18:03,440 --> 06:18:06,080
so let's do that just choose ios app


5313
06:18:06,080 --> 06:18:11,360
development and just press continue and here it says create a new certificate


5314
06:18:11,360 --> 06:18:17,040
and create a new certificate is it's waiting for you to tell it that you're


5315
06:18:17,040 --> 06:18:20,638
asking for a development certificate and you need to choose a file now this is


5316
06:18:20,638 --> 06:18:22,958
the magic part you need to now go back to


5317
06:18:22,958 --> 06:18:26,798
keychain so let me see if i can bring up keychain again


5318
06:18:26,798 --> 06:18:32,080
and in here just go to keychain access menu


5319
06:18:32,080 --> 06:18:36,160
and then say a certificate assistant and then say


5320
06:18:36,160 --> 06:18:40,400
request a certificate from a certificate authority okay


5321
06:18:40,400 --> 06:18:46,718
so i'm gonna press that and i'm gonna put my company's email here


5322
06:18:46,718 --> 06:18:50,798
and the common name i'm just gonna leave it as my name all right


5323
06:18:50,798 --> 06:18:53,840
and then i'm just going to say save to disk


5324
06:18:53,840 --> 06:18:57,520
all right so um


5325
06:18:57,520 --> 06:19:01,760
that's what we're doing now then i'm gonna say continue and it says


5326
06:19:01,760 --> 06:19:05,840
okay i'm gonna write a file on your desktop or wherever you want with that


5327
06:19:05,840 --> 06:19:09,520
request so save it somewhere that you know where it is actually saved so i'm


5328
06:19:09,520 --> 06:19:13,840
gonna save that and then say done all right now you see


5329
06:19:13,840 --> 06:19:17,360
that certificate request in itself didn't create a certificate it's just a


5330
06:19:17,360 --> 06:19:22,000
certificate request but what it did is that it created a private key


5331
06:19:22,000 --> 06:19:26,478
and you can actually go to your keys here and you'll see that there was a


5332
06:19:26,478 --> 06:19:30,400
if i say kind private key so one of these keys is the one that was just


5333
06:19:30,400 --> 06:19:34,080
created right now okay i don't exactly know which one because


5334
06:19:34,080 --> 06:19:39,360
it doesn't have a date but it's just one of these so every request for creating a


5335
06:19:39,360 --> 06:19:43,040
certificate it creates with itself a private key


5336
06:19:43,040 --> 06:19:47,040
okay so keep that in mind let's go back to my certificates


5337
06:19:47,040 --> 06:19:50,878
now that that file has been saved on your desktop just say choose file and


5338
06:19:50,878 --> 06:19:56,718
then go to your desktop and pick that certificate request okay


5339
06:19:56,718 --> 06:20:00,478
and it's you see here certificate request search sign request


5340
06:20:00,478 --> 06:20:05,600
and just say continue and then it says okay it expires in a


5341
06:20:05,600 --> 06:20:08,798
year and you need to keep that in mind because development certificates do


5342
06:20:08,798 --> 06:20:13,120
always expire in a year and you need to by basically renew them okay


5343
06:20:13,120 --> 06:20:15,600
so but for now you don't have to worry about that because we're not going to


5344
06:20:15,600 --> 06:20:20,320
take a year to develop this application so let's just say download and it got


5345
06:20:20,320 --> 06:20:25,760
downloaded to my downloads folder so i'm gonna bring up my downloads folder


5346
06:20:25,760 --> 06:20:29,040
uh and actually just


5347
06:20:29,040 --> 06:20:33,120
gonna show you here like this


5348
06:20:33,120 --> 06:20:35,360
so here is


5349
06:20:35,360 --> 06:20:40,240
the file that got downloaded you see it's a cert file all right now this


5350
06:20:40,240 --> 06:20:44,240
certification in itself it doesn't contain your private key remember the


5351
06:20:44,240 --> 06:20:46,958
private key is in the keychain so what you need to do is just you need to


5352
06:20:46,958 --> 06:20:51,440
double click on this all right so double clicking on it you see it will


5353
06:20:51,440 --> 06:20:54,958
then create a certificate in your keychain under my certificates and login


5354
06:20:54,958 --> 06:20:59,200
keychain that is linked with your private key you see so this is what you


5355
06:20:59,200 --> 06:21:03,440
downloaded from apple this is what you created on your computer by requesting a


5356
06:21:03,440 --> 06:21:07,520
certificate and when you double click on the downloaded certificate these two get


5357
06:21:07,520 --> 06:21:12,080
hooked together okay so that's it that that is what you have


5358
06:21:12,080 --> 06:21:16,320
to do to create a development certificate and the key related to it


5359
06:21:16,320 --> 06:21:20,160
all right now let's go to the production


5360
06:21:20,160 --> 06:21:24,000
certificate and we need to kind of do the same thing same process


5361
06:21:24,000 --> 06:21:27,360
in order to create our production certificate so let's go back to all


5362
06:21:27,360 --> 06:21:30,878
certificates and i'm just going to say plus certificate and


5363
06:21:30,878 --> 06:21:36,638
i'm gonna say ios distribution app store and ad hoc okay so choose that option


5364
06:21:36,638 --> 06:21:40,718
please and sorry i'm just gonna not also in my


5365
06:21:40,718 --> 06:21:44,478
notes here that we talked about the dev certificate


5366
06:21:44,478 --> 06:21:48,638
so let's go ahead and press continue here and you'll have to do the exact


5367
06:21:48,638 --> 06:21:52,558
same process as you did for the development certificate and create a new


5368
06:21:52,558 --> 06:21:56,958
certificate request so let's do the same thing just basically


5369
06:21:56,958 --> 06:22:01,360
kind of copy and paste the same process go to keychain access


5370
06:22:01,360 --> 06:22:05,360
certificate assistant request a certificate from a certificate authority


5371
06:22:05,360 --> 06:22:08,638
and just be careful a little bit with this because i've understood from what


5372
06:22:08,638 --> 06:22:13,200
i've what i've seen is that depending on what you've chosen here this menu


5373
06:22:13,200 --> 06:22:16,000
actually changes so


5374
06:22:16,000 --> 06:22:20,080
it could be that you kind of need to make sure in your keychain that you're


5375
06:22:20,080 --> 06:22:23,280
not selecting anything so just make sure that nothing is


5376
06:22:23,280 --> 06:22:27,760
selected and then go to um sorry then go to


5377
06:22:27,760 --> 06:22:30,878
certificate assistant and request a certificate for certificate authority


5378
06:22:30,878 --> 06:22:34,160
put your company's or your developer accounts


5379
06:22:34,160 --> 06:22:36,558
email there i'm just gonna pick solid a b


5380
06:22:36,558 --> 06:22:39,520
and then save to disk and then say continue


5381
06:22:39,520 --> 06:22:42,878
and then save it to desktop and since there is a file already there with the


5382
06:22:42,878 --> 06:22:45,680
same name from the previous step it's going to say are you sure you want to


5383
06:22:45,680 --> 06:22:50,320
replace it yes replace it and it got saved then i'm going to go


5384
06:22:50,320 --> 06:22:54,000
here and then choose the same exact file but it's


5385
06:22:54,000 --> 06:22:56,958
actually is a new file which got rewritten


5386
06:22:56,958 --> 06:23:00,400
and then say continue and you'll see now there is a download


5387
06:23:00,400 --> 06:23:03,760
so i'm going to download that and if i go


5388
06:23:03,760 --> 06:23:09,360
to my downloads folder um here i'll bring it up so you can see as


5389
06:23:09,360 --> 06:23:13,120
well um


5390
06:23:13,120 --> 06:23:15,760
let's see i'm going to bring it here you will see


5391
06:23:15,760 --> 06:23:20,000
that there is a new file called ios distribution that is your production


5392
06:23:20,000 --> 06:23:24,160
certificate okay so double click on that keychain it's open again and you'll see


5393
06:23:24,160 --> 06:23:27,920
now you have two certificates here iphone distribution and then iphone


5394
06:23:27,920 --> 06:23:31,920
developer so these are your certificates and keep


5395
06:23:31,920 --> 06:23:35,440
hold of them kind of like try to save them and if even if you don't save them


5396
06:23:35,440 --> 06:23:39,520
it's okay because they're now placed here so you can always export them okay


5397
06:23:39,520 --> 06:23:43,360
but it's also good practice just to keep hold of them


5398
06:23:43,360 --> 06:23:45,520
great now


5399
06:23:45,520 --> 06:23:50,000
sorry about that now we've created a developer and a dis


5400
06:23:50,000 --> 06:23:52,798
and a production or distribution certificate


5401
06:23:52,798 --> 06:23:56,400
let's talk about the next step and that is required for us to be able to release


5402
06:23:56,400 --> 06:24:00,080
or test our application on on phones so


5403
06:24:00,080 --> 06:24:05,520
let's go back here and to identifiers and in here is where you create your


5404
06:24:05,520 --> 06:24:09,840
application identifiers and you can see that they're actually tied to a specific


5405
06:24:09,840 --> 06:24:12,798
organization and identifier which we talked about


5406
06:24:12,798 --> 06:24:16,320
in which chapter was it that we talked about i think it was actually in chapter


5407
06:24:16,320 --> 06:24:18,958
eight yes if you have if you don't know what


5408
06:24:18,958 --> 06:24:23,120
an identifier is please go back to chapter number eight where i discussed


5409
06:24:23,120 --> 06:24:26,080
that so let's


5410
06:24:26,080 --> 06:24:30,478
press the plus button here and say that you want to create a new


5411
06:24:30,478 --> 06:24:37,600
app id okay press continue and then you will choose app here not an app clip


5412
06:24:37,600 --> 06:24:41,520
and then you will be presented with this screen here so i'm gonna


5413
06:24:41,520 --> 06:24:45,920
explain to you what all this is so in here the description um we're just


5414
06:24:45,920 --> 06:24:50,478
gonna print some information here that describes our application and to be


5415
06:24:50,478 --> 06:24:54,160
honest with you i don't remember what we actually called our application when we


5416
06:24:54,160 --> 06:24:57,360
created in the previous i can see it was called


5417
06:24:57,360 --> 06:25:01,440
my notes so i'm just going to say my notes


5418
06:25:01,440 --> 06:25:06,000
flutter application sample or flutter app all right


5419
06:25:06,000 --> 06:25:09,760
here the bundle identifier is very important that you actually specify it


5420
06:25:09,760 --> 06:25:15,440
correctly as we created it in our in chapter 8. so i'm going to bring up


5421
06:25:15,440 --> 06:25:20,558
the my notes application here i'm going to increase the font size so you can see


5422
06:25:20,558 --> 06:25:25,280
um if you remember where we created the application


5423
06:25:25,280 --> 06:25:30,320
with this command you see we said se.pixelity and then my notes meaning


5424
06:25:30,320 --> 06:25:34,760
that the application identifier from this point on is going to be


5425
06:25:34,760 --> 06:25:39,440
se.pixelity.mynotes okay with a dot in between all right so if i search for


5426
06:25:39,440 --> 06:25:43,120
that in our project let's say sepixolity.mynotes


5427
06:25:43,120 --> 06:25:46,638
you will see there are some results here you see so depending on how you created


5428
06:25:46,638 --> 06:25:50,878
your floater application depending on what organization you specified this


5429
06:25:50,878 --> 06:25:54,478
identifier may be different for you but since my identifier in this case is s


5430
06:25:54,478 --> 06:25:58,558
epixody my notes i'm just gonna copy that


5431
06:25:58,558 --> 06:26:02,000
and i'm going to bring it here make sure explicit is selected and just paste that


5432
06:26:02,000 --> 06:26:05,520
bundle id in there okay so yeah it's chosen


5433
06:26:05,520 --> 06:26:08,638
now if you remember what i said before an app identifier is not just the


5434
06:26:08,638 --> 06:26:12,240
identifier the bundle id itself but it's also like a list of capabilities that


5435
06:26:12,240 --> 06:26:16,240
your application can have now if you for instance want to have push notifications


5436
06:26:16,240 --> 06:26:20,638
you will also need to enable that in here now push notification is not not


5437
06:26:20,638 --> 06:26:25,040
something that we're going to do in this course so you don't have to do that but


5438
06:26:25,040 --> 06:26:30,000
all you need to do here after you've entered your app id prefix sorry your


5439
06:26:30,000 --> 06:26:35,040
app bundle an identifier and a description just press continue


5440
06:26:35,040 --> 06:26:38,320
and you can see that says okay are you sure everything's fine yeah explicit


5441
06:26:38,320 --> 06:26:43,920
yeah great and then i say register now that identifier got created all


5442
06:26:43,920 --> 06:26:46,400
right so


5443
06:26:46,400 --> 06:26:48,558
um you don't really have to do anything


5444
06:26:48,558 --> 06:26:52,878
with that identifier right now it's just that you have now registered that


5445
06:26:52,878 --> 06:26:57,600
identifier so no one else can basically take that app from you


5446
06:26:57,600 --> 06:26:59,760
so i'm gonna


5447
06:26:59,760 --> 06:27:02,080
actually


5448
06:27:02,160 --> 06:27:06,558
tick these items in my notes so that we know we've talked about it all right


5449
06:27:06,558 --> 06:27:11,760
now the next step is to prepare your


5450
06:27:11,760 --> 06:27:15,840
uh your application so that it can actually be installed and debugged or


5451
06:27:15,840 --> 06:27:21,440
tested on real phone now you can't see my entire setup but here i


5452
06:27:21,440 --> 06:27:26,000
have an iphone 12 pro which is just right here it's a little bit dirty


5453
06:27:26,000 --> 06:27:28,958
screen but that doesn't matter it's just my test telephone


5454
06:27:28,958 --> 06:27:31,600
and this phone


5455
06:27:31,600 --> 06:27:37,360
is connected as you can see with a cable to my computer and it is available for


5456
06:27:37,360 --> 06:27:40,798
my computer to see so i'm just going to unlock this phone right now with my


5457
06:27:40,798 --> 06:27:45,360
passcode and if i then bring up my


5458
06:27:45,360 --> 06:27:48,878
finder so here


5459
06:27:48,878 --> 06:27:52,798
you can see that it is available here right here okay


5460
06:27:52,798 --> 06:27:58,240
so it's my telephone and it has a special identifier and if you


5461
06:27:58,240 --> 06:28:02,000
want to get your device identifier which is what we need to do here as you can


5462
06:28:02,000 --> 06:28:06,160
see in order to debug on a real device we need a uid to register for our


5463
06:28:06,160 --> 06:28:08,558
profile so


5464
06:28:08,558 --> 06:28:12,478
when you i mean this is a kind of like a big thing to talk about because it takes


5465
06:28:12,478 --> 06:28:15,520
a lot of time but what i'm going to say here is that when you created that


5466
06:28:15,520 --> 06:28:21,040
development pro and development certificate the next step is for you to


5467
06:28:21,040 --> 06:28:25,440
basically register your device with apple so that apple knows on which


5468
06:28:25,440 --> 06:28:29,120
devices you actually want to test your application all right


5469
06:28:29,120 --> 06:28:34,718
and those devices they're stored in here in under the devices um tab


5470
06:28:34,718 --> 06:28:40,080
and there are ways to get your device identifier such as going to finder as i


5471
06:28:40,080 --> 06:28:43,360
just showed here and just tapping on your


5472
06:28:43,360 --> 06:28:47,360
device now i'm kind of going to do it off screen so you don't see the entirety


5473
06:28:47,360 --> 06:28:52,160
of what is here so


5474
06:28:52,160 --> 06:28:56,558
let me see if there's any way for you to actually get your device identifier yes


5475
06:28:56,558 --> 06:29:00,878
and it is i can actually see here there's a way to get that um


5476
06:29:00,878 --> 06:29:04,558
so what i'm going to do is i'm going to actually bring finder up here so you see


5477
06:29:04,558 --> 06:29:09,680
what happens i just tap on my phone now you need to register your device on


5478
06:29:09,680 --> 06:29:14,638
identifier under this devices tab before you create your profile okay


5479
06:29:14,638 --> 06:29:17,840
i'm not going to do that because my phone is already registered but you need


5480
06:29:17,840 --> 06:29:22,160
to do this on your own and the way to do that is to connect your phone or your


5481
06:29:22,160 --> 06:29:26,240
tablet which you want to test your flutter application on to your computer


5482
06:29:26,240 --> 06:29:30,000
then go into finder and tap on your phone and


5483
06:29:30,000 --> 06:29:35,200
then just click on this section now i'm not going to do that here and the reason


5484
06:29:35,200 --> 06:29:39,280
behind that is that every device says identifier really identifies that


5485
06:29:39,280 --> 06:29:42,958
device so you could go and register my device under your account


5486
06:29:42,958 --> 06:29:45,600
so and it's just not a good idea to show


5487
06:29:45,600 --> 06:29:49,200
your device identifier to others so i'm not i'm not going to be able to do that


5488
06:29:49,200 --> 06:29:53,760
unfortunately in this course but the steps you have to take is to click


5489
06:29:53,760 --> 06:29:56,798
here on this label and it will show you a


5490
06:29:56,798 --> 06:30:03,520
section called uuid copy that uuid and go into devices


5491
06:30:03,520 --> 06:30:07,760
section of the certificate identifiers and profile section of apple developer


5492
06:30:07,760 --> 06:30:12,718
account and add that uuid with a name to your account


5493
06:30:12,718 --> 06:30:16,638
okay so i'm just gonna assume you've done that and if you need some time to


5494
06:30:16,638 --> 06:30:20,638
go ahead and do that please pause this video and do that so


5495
06:30:20,638 --> 06:30:24,958
the key is just to get the identifier from here okay there's a way also get


5496
06:30:24,958 --> 06:30:29,840
your identifier your device identifier from xcode um and that works exactly the


5497
06:30:29,840 --> 06:30:35,200
same you just have to open xcode then go to um i believe go into menu and then


5498
06:30:35,200 --> 06:30:38,320
pick devices and from there you pick your device and you'll see it's


5499
06:30:38,320 --> 06:30:42,478
identifier right there so that was a lot of talk let's say that


5500
06:30:42,478 --> 06:30:46,478
you've already done that so what we need to do now is to go and


5501
06:30:46,478 --> 06:30:54,000
create a development profile all right so i'm just going to tick these items in


5502
06:30:54,000 --> 06:30:56,958
my notes as well so this is the exciting part now we're


5503
06:30:56,958 --> 06:31:01,280
going to go to the profile section and create a new development profile so


5504
06:31:01,280 --> 06:31:04,798
click on generate a profile and i'm going to say ios app development and


5505
06:31:04,798 --> 06:31:08,558
then say continue then it says okay choose an app id you


5506
06:31:08,558 --> 06:31:11,600
see now your profile is going to be linked with your app so


5507
06:31:11,600 --> 06:31:16,080
do this drop down here and you can see i'm just going to say my notes and this


5508
06:31:16,080 --> 06:31:20,638
is the app that i created and for you this id maybe a little bit


5509
06:31:20,638 --> 06:31:24,160
different the description maybe a little different but just choose the


5510
06:31:24,160 --> 06:31:27,120
um app id that you created in the previous


5511
06:31:27,120 --> 06:31:31,520
steps so i'm going to choose that i'm just going to say continue


5512
06:31:31,520 --> 06:31:35,440
now it's going to say okay which certificate is this profile connected to


5513
06:31:35,440 --> 06:31:40,000
do you remember i said that a profile is linked to a certificate this is what


5514
06:31:40,000 --> 06:31:43,680
that actually means so granted that you've created your


5515
06:31:43,680 --> 06:31:47,440
development certificate in as i talked about in this chapter just select your


5516
06:31:47,440 --> 06:31:51,600
certificate so and then say continue now


5517
06:31:51,600 --> 06:31:57,680
here it asks is that which devices do you want this um


5518
06:31:57,680 --> 06:32:01,840
profile which which device do you want your application which is signed with


5519
06:32:01,840 --> 06:32:06,878
this profile certainly to be able to run on now these all these devices come from


5520
06:32:06,878 --> 06:32:10,080
the devices section i've registered many devices so


5521
06:32:10,080 --> 06:32:14,320
um even some of my co-workers devices


5522
06:32:14,320 --> 06:32:18,320
which allow us to basically debug an application on their devices as well so


5523
06:32:18,320 --> 06:32:21,040
granted that you've done that


5524
06:32:21,040 --> 06:32:26,000
if you go back here then you will see those um


5525
06:32:26,000 --> 06:32:30,958
see those devices in this list right so i'm just going to say select


5526
06:32:30,958 --> 06:32:35,840
all just make sure my application can be run on all those devices that i've


5527
06:32:35,840 --> 06:32:39,120
registered okay then say continue and then you will give


5528
06:32:39,120 --> 06:32:42,638
it a name so i'm going to give it a name of my notes


5529
06:32:42,638 --> 06:32:46,000
dival dev profile


5530
06:32:46,000 --> 06:32:50,878
or just my notes dev okay i'm just going to say generate


5531
06:32:50,878 --> 06:32:54,638
and you will get some information about when it expires etc also expires in a


5532
06:32:54,638 --> 06:32:58,400
year so and then you'll have to say download


5533
06:32:58,400 --> 06:33:02,558
and we're going to do the exact same thing now for a distribution profile a


5534
06:33:02,558 --> 06:33:06,798
distribution profile is the kind of like the same dev profile but you cannot


5535
06:33:06,798 --> 06:33:10,638
debug your application with it all you can pretty much do with it is to sign


5536
06:33:10,638 --> 06:33:14,320
your application with that profile and send it to apple so that you can deploy


5537
06:33:14,320 --> 06:33:19,040
your application in the app store okay so press plus profile and in this and


5538
06:33:19,040 --> 06:33:23,600
this time go to distribution and say app store you see distribution subsection


5539
06:33:23,600 --> 06:33:27,760
and app store so press the continue button


5540
06:33:27,760 --> 06:33:32,320
then go here and then choose your application


5541
06:33:32,320 --> 06:33:36,478
so that was the development profile sorry now we have to go to production so


5542
06:33:36,478 --> 06:33:39,840
i'm going to bring the window a little bit up so that you can see it in its


5543
06:33:39,840 --> 06:33:44,240
entirety so then i'm gonna choose my notes


5544
06:33:44,240 --> 06:33:47,280
all right and then i'm just gonna press the


5545
06:33:47,280 --> 06:33:50,240
continue button here


5546
06:33:50,320 --> 06:33:52,638
um i'm gonna take it in my notes so we've


5547
06:33:52,638 --> 06:33:59,120
talked about the dev profile okay so now that you've done that uh


5548
06:33:59,120 --> 06:34:01,920
choose your assertive again you see it says okay now you're creating a


5549
06:34:01,920 --> 06:34:05,920
certificate a profile for a distribution then it should be hooked with some sort


5550
06:34:05,920 --> 06:34:09,360
of distribution certificate and since ios distribution certificate is the only


5551
06:34:09,360 --> 06:34:13,120
one that we created if you remember i deleted all my other certificates


5552
06:34:13,120 --> 06:34:16,798
so that's the only one left here just pick that and press continue


5553
06:34:16,798 --> 06:34:20,958
now give it a name i'm going to say my notes


5554
06:34:21,280 --> 06:34:23,840
prod production


5555
06:34:23,840 --> 06:34:26,478
and then i'm just gonna say generate it says


5556
06:34:26,478 --> 06:34:29,760
okay there you go and you can download it all right


5557
06:34:29,760 --> 06:34:33,040
now that you've done that you need to bring up your


5558
06:34:33,040 --> 06:34:37,600
downloads folder where your profiles got downloaded um


5559
06:34:37,600 --> 06:34:40,878
now you see these are the two profiles i got downloaded except with their


5560
06:34:40,878 --> 06:34:45,840
extension of mobile provision provision you need to install these somehow on


5561
06:34:45,840 --> 06:34:50,240
your computer so that you can sign your applications or your ios application


5562
06:34:50,240 --> 06:34:54,240
with this with these so what you need to do now is to copy


5563
06:34:54,240 --> 06:34:58,400
these two files i'm going to copy them like this and command c


5564
06:34:58,400 --> 06:35:02,718
and then bring them into your provision profiles folder i'm just going to


5565
06:35:02,718 --> 06:35:06,798
cut and paste them there okay so they're not in the downloads folder anymore so


5566
06:35:06,798 --> 06:35:10,320
there they are there are other ways of installing these


5567
06:35:10,320 --> 06:35:14,718
profiles some people rather drag it into xcode some people double click on them


5568
06:35:14,718 --> 06:35:18,400
and those are all fine but there's a little bit of a problem by doing those


5569
06:35:18,400 --> 06:35:22,000
methods compared with the method i showed you here if you double click


5570
06:35:22,000 --> 06:35:27,120
these profiles mac os knows how how to install them but


5571
06:35:27,120 --> 06:35:31,440
mac os just messes up their naming so they will be installed on their very


5572
06:35:31,440 --> 06:35:35,600
random names so if you come back to your provisioning profiles folder they may be


5573
06:35:35,600 --> 06:35:39,360
under some sort of a cryptic name that you don't recognize anymore so in this


5574
06:35:39,360 --> 06:35:43,200
way they basically keep their original name which


5575
06:35:43,200 --> 06:35:48,160
is very descriptive of what they actually are okay


5576
06:35:48,320 --> 06:35:57,920
okay that was that so now we've created a um dev profile and a prod profile


5577
06:35:58,558 --> 06:36:03,760
exciting stuff so what we need to do now is actually work we can say that we're


5578
06:36:03,760 --> 06:36:07,280
done with this screen here so i'm going to close that


5579
06:36:07,280 --> 06:36:12,240
and what i'm going to do here then is to what we need to talk about now is to set


5580
06:36:12,240 --> 06:36:17,200
up our project in xcode so that xcode understands that


5581
06:36:17,200 --> 06:36:20,798
our application needs to be signed with the correct profiles and certificates so


5582
06:36:20,798 --> 06:36:26,080
what i need you to do is to go to the ios folder in your flutter project and


5583
06:36:26,080 --> 06:36:30,160
just right click on it and say reveal in finder okay


5584
06:36:30,160 --> 06:36:35,040
after you do reveal in finder double click on the workspace in order to open


5585
06:36:35,040 --> 06:36:40,320
your flutter xcode workspace in xcode


5586
06:36:40,320 --> 06:36:44,320
and what you'll need to do now is to basically


5587
06:36:44,320 --> 06:36:49,840
make sure that your signing of your ios application is done correctly so choose


5588
06:36:49,840 --> 06:36:54,478
this icon on top left in your um i think it's project explorer or something


5589
06:36:54,478 --> 06:36:58,718
project navigator then on the targets


5590
06:36:58,718 --> 06:37:04,160
choose your targets and then go to signing and capabilities and just remove


5591
06:37:04,160 --> 06:37:08,160
automatic signing okay for this course we're not going to use


5592
06:37:08,160 --> 06:37:12,400
automatic signing i'm just going to take it


5593
06:37:12,400 --> 06:37:18,558
here in my notes that i've talked about removing automatic signing


5594
06:37:21,440 --> 06:37:25,360
so the next step is for us to be able to


5595
06:37:25,360 --> 06:37:29,360
tell xcode that for debug purposes in order for us to be able to run our


5596
06:37:29,360 --> 06:37:32,958
application on a real phone and debug that


5597
06:37:32,958 --> 06:37:37,120
application which profile and which certificate it needs to use


5598
06:37:37,120 --> 06:37:42,400
so what i'm going to do here is to go into this section here as you can see


5599
06:37:42,400 --> 06:37:48,798
debug on under signing and capabilities and then i can see that actually it is


5600
06:37:48,798 --> 06:37:53,120
going to it's already using the automatic signing


5601
06:37:53,120 --> 06:37:56,320
for debug and i'm going to remove that as well okay


5602
06:37:56,320 --> 06:37:59,520
so what you need what you need to do here is actually pick the right profile


5603
06:37:59,520 --> 06:38:02,958
here and it says my notes dev and my notes


5604
06:38:02,958 --> 06:38:07,360
profile sorry prod and you can see it says ineligible


5605
06:38:07,360 --> 06:38:10,320
and um that is because we don't have a


5606
06:38:10,320 --> 06:38:14,638
development team yet and alex and i'll explain that soon but for now just go to


5607
06:38:14,638 --> 06:38:19,040
your provisioning profile and say for debug purposes we're gonna use the


5608
06:38:19,040 --> 06:38:22,558
mynotes dev um


5609
06:38:22,558 --> 06:38:29,040
and then go to your release and then say i'm gonna use my notes prod okay and


5610
06:38:29,040 --> 06:38:32,798
here's a little error here you see it says producing profile my notes pro


5611
06:38:32,798 --> 06:38:37,680
doesn't include signing certificate apple development blah blah blah okay


5612
06:38:37,680 --> 06:38:40,320
that's that's fine don't worry about that


5613
06:38:40,320 --> 06:38:43,600
so what we need to do now is to actually


5614
06:38:43,600 --> 06:38:47,760
tell it um so i'm going to actually pick here


5615
06:38:47,760 --> 06:38:52,478
profound search setup release profile insert okay


5616
06:38:52,478 --> 06:38:58,000
so what you need to do here is to go to your build settings and make sure


5617
06:38:58,000 --> 06:39:01,440
that your development team


5618
06:39:01,440 --> 06:39:06,240
here is actually selected you see pixelity is for me and then for you it


5619
06:39:06,240 --> 06:39:10,240
may be something else so um now what i'm gonna do i mean


5620
06:39:10,240 --> 06:39:14,558
sometimes uh and i can see signing certificate here is actually not really


5621
06:39:14,558 --> 06:39:19,280
selected sometimes it can be that xcode kind of goes crazy when we play with


5622
06:39:19,280 --> 06:39:22,798
certificates and signings so i'm going to close xcode


5623
06:39:22,798 --> 06:39:27,120
i'm going to do the same thing here go to


5624
06:39:27,120 --> 06:39:32,000
revealingfinder finder open up in another window here so


5625
06:39:32,000 --> 06:39:35,840
i'm going to open up the workspace again


5626
06:39:39,440 --> 06:39:43,200
okay i can see we're still getting the problem provisioning profile minus that


5627
06:39:43,200 --> 06:39:46,718
doesn't include signing certificate apple development and let's open up our


5628
06:39:46,718 --> 06:39:49,360
keychain again and have a look a little bit here


5629
06:39:49,360 --> 06:39:54,478
and i can see unfortunately there is a profile you can see previously we had


5630
06:39:54,478 --> 06:39:59,360
two profiles and it is very unfortunate because um


5631
06:39:59,360 --> 06:40:03,680
so in here you can see this this development


5632
06:40:03,680 --> 06:40:07,840
certificate was created by us you see they're very tightly close to each other


5633
06:40:07,840 --> 06:40:11,040
these two we created but this is something that xcode has created and


5634
06:40:11,040 --> 06:40:15,680
that is because xcode tries to do automatic signing as you saw it was


5635
06:40:15,680 --> 06:40:20,638
saying automatically manage signing so by doing that it created a certificate


5636
06:40:20,638 --> 06:40:25,520
for me on my behalf which i don't want so the error that we're seeing here is


5637
06:40:25,520 --> 06:40:28,400
that xcode is now saying that this this


5638
06:40:28,400 --> 06:40:32,478
profile that you have here is not linked to this thing


5639
06:40:32,478 --> 06:40:36,558
which xcode created itself no one asked it to do that i didn't ask xcode to do


5640
06:40:36,558 --> 06:40:39,760
that so when you're working with is a woman just know that xco tries to do a


5641
06:40:39,760 --> 06:40:43,920
lot of magic for you and if you want to actually


5642
06:40:43,920 --> 06:40:47,840
do things manually it may get in the way


5643
06:40:47,840 --> 06:40:51,440
so what i'm going to do here is i'm going to delete this


5644
06:40:51,440 --> 06:40:54,558
development certificate because i didn't ask for it okay


5645
06:40:54,558 --> 06:40:57,360
so i'm going to say i believe actually that's the right one


5646
06:40:57,360 --> 06:41:01,760
yeah so i'm going to say delete delete and now you can see that error went away


5647
06:41:01,760 --> 06:41:04,958
simply because xcode was like ooh now i understand which one you're talking


5648
06:41:04,958 --> 06:41:08,080
about and then the provision profile of the


5649
06:41:08,080 --> 06:41:11,440
prod also is hooked


5650
06:41:11,440 --> 06:41:14,878
correctly so


5651
06:41:14,878 --> 06:41:18,400
now what i'm gonna do is as you can see here


5652
06:41:18,400 --> 06:41:24,160
i've opened the project here and then i have my actual iphone selected here to


5653
06:41:24,160 --> 06:41:28,000
be able to make sure that your application can actually run on this


5654
06:41:28,000 --> 06:41:33,040
phone now after all of this hard work is just to press the play button here


5655
06:41:33,040 --> 06:41:37,600
so i want to do that and i want to let it do its thing and if everything works


5656
06:41:37,600 --> 06:41:42,160
correctly um it's going to basically then um allow


5657
06:41:42,160 --> 06:41:46,080
us to run the application all right so now it says


5658
06:41:46,080 --> 06:41:49,600
now and this is a dialogue that you're probably also going to get


5659
06:41:49,600 --> 06:41:52,638
what's happening here is that it's trying to sign the application and all


5660
06:41:52,638 --> 06:41:56,558
its libraries using that profile


5661
06:41:56,558 --> 06:42:00,080
development profile and since that development profile is


5662
06:42:00,080 --> 06:42:04,638
linked to a development certificate in the keychain and that keychain is


5663
06:42:04,638 --> 06:42:08,718
password protected you see the login keychain it says i can't access that


5664
06:42:08,718 --> 06:42:14,718
certificate give me the password for the login keychain so i'm going to type that


5665
06:42:14,718 --> 06:42:20,798
and then i'm going to say always allow so let's do it let it do its thing


5666
06:42:20,798 --> 06:42:25,360
and this may depending on the machine that you're running this uh process on


5667
06:42:25,360 --> 06:42:32,920
it may take some time i can see it's saying now building so um


5668
06:42:33,920 --> 06:42:40,160
okay then i got an actual failure here it says cloud firestore wasn't found


5669
06:42:40,160 --> 06:42:43,920
and this is very interesting um actually i mean i didn't plan for this


5670
06:42:43,920 --> 06:42:48,478
to happen but it did happen i'm kind of glad that it happened


5671
06:42:48,478 --> 06:42:53,360
this happens usually when you um


5672
06:42:53,360 --> 06:42:57,200
when you add new dependencies to your projects such as these big dependencies


5673
06:42:57,200 --> 06:43:01,280
but they're not really linked to your project yet so the way to fix that is


5674
06:43:01,280 --> 06:43:04,878
i'm gonna let xcode be here okay i'm gonna close


5675
06:43:04,878 --> 06:43:08,718
this i'm gonna bring a terminal uh what i'm


5676
06:43:08,718 --> 06:43:13,760
going to say here is flutter clean i clean


5677
06:43:13,760 --> 06:43:17,840
ios or clear ios i think clean


5678
06:43:17,840 --> 06:43:22,400
so this is basically going to clean up how the ios project was set up and all


5679
06:43:22,400 --> 06:43:25,600
those dependencies all right now i'm going to close actually xcode as well


5680
06:43:25,600 --> 06:43:29,840
then what i'm going to say is to say flutter pop get


5681
06:43:32,160 --> 06:43:37,440
and flutter pop get what it does is that it sets up all our dependencies from the


5682
06:43:37,440 --> 06:43:40,958
beginning and just to make sure i'm going to go into the ios


5683
06:43:40,958 --> 06:43:46,400
folder and i'm going to say pod install


5684
06:43:46,558 --> 06:43:50,750
and could not be compatible version okay pod


5685
06:43:50,750 --> 06:43:52,958
[Music] install


5686
06:43:52,958 --> 06:43:58,478
dash dash update repo uh


5687
06:43:58,478 --> 06:44:02,798
hot install uh let's see if we can do an update repo


5688
06:44:02,798 --> 06:44:08,080
i'm just gonna do that uh without like explaining it right now so much and see


5689
06:44:08,080 --> 06:44:11,760
if that fixes our problem i'm going to bring up a new safari window and say


5690
06:44:11,760 --> 06:44:15,280
pod install update repo let's see what the command was but because i've


5691
06:44:15,280 --> 06:44:18,000
forgotten that


5692
06:44:20,478 --> 06:44:27,840
what update we have yeah um let's pawn install


5693
06:44:28,718 --> 06:44:32,558
i believe there is a variant of


5694
06:44:32,558 --> 06:44:38,320
repo update it's called okay pot install repo update let's see if this fixes our


5695
06:44:38,320 --> 06:44:42,478
problem and if cisco could not find compatible


5696
06:44:42,478 --> 06:44:45,920
version for podcloud firestore from blah blah


5697
06:44:45,920 --> 06:44:51,040
specs satisfying from dependencies were found but they require higher minimum


5698
06:44:51,040 --> 06:44:53,680
deployment target and that's very interesting


5699
06:44:53,680 --> 06:44:57,040
so what is happening here is


5700
06:44:57,040 --> 06:45:02,320
you see the deployment target that we have for our application um what it


5701
06:45:02,320 --> 06:45:06,080
means is that when we created the project with flutter


5702
06:45:06,080 --> 06:45:10,320
flutter said that what it does internally is says


5703
06:45:10,320 --> 06:45:14,718
this flutter application should be run on these ios versions and these android


5704
06:45:14,718 --> 06:45:19,280
versions and what we're seeing here is that


5705
06:45:19,280 --> 06:45:22,718
what we're seeing here is that we are using cloud firestore and cloud


5706
06:45:22,718 --> 06:45:26,638
firestore as a dependency is expecting our application to have a minimum


5707
06:45:26,638 --> 06:45:30,798
deployment version it means that cloud firestore cannot be used in applications


5708
06:45:30,798 --> 06:45:35,760
that for instance are trying to run on ios 7 for instance okay so what we need


5709
06:45:35,760 --> 06:45:40,958
to do here in your um flutter project just say command p in visual studio code


5710
06:45:40,958 --> 06:45:46,638
and open up a file called um pod file all right


5711
06:45:46,638 --> 06:45:49,680
you go in there and let's see


5712
06:45:49,680 --> 06:45:55,200
here we have some stuff set up let's go in here and just say platform ios and


5713
06:45:55,200 --> 06:45:59,600
what we're going to do is just to say platform ios 13


5714
06:45:59,600 --> 06:46:06,080
just just now i mean 13 it's really good because right now is ios 15 is available


5715
06:46:06,080 --> 06:46:10,638
so you could just say you're supporting 15 14 and 13. so i'm going to do that


5716
06:46:10,638 --> 06:46:14,478
and then i'm going to run pod install again


5717
06:46:15,040 --> 06:46:19,680
and this time i can see that things are going a lot better and it's installing


5718
06:46:19,680 --> 06:46:23,440
all our dependencies without a problem so


5719
06:46:23,440 --> 06:46:27,680
um what you need to know now what i did here was something that you probably


5720
06:46:27,680 --> 06:46:31,440
would need to do if you're comfortable with ios development so you need to fix


5721
06:46:31,440 --> 06:46:35,600
these problems by hand but before i explain what i actually did


5722
06:46:35,600 --> 06:46:38,000
you need to know about something called pod


5723
06:46:38,000 --> 06:46:42,000
and i explained this in the previous chapters about when we started in


5724
06:46:42,000 --> 06:46:45,760
chapter 8 when we talked about dependencies


5725
06:46:45,760 --> 06:46:50,080
flutter can in can create ios applications ios


5726
06:46:50,080 --> 06:46:56,400
applications dependencies are basically using uh cocoa pods


5727
06:46:56,400 --> 06:47:01,680
so cocoapods is a dependency management system for ios applications


5728
06:47:01,680 --> 06:47:04,638
and you need to just know that


5729
06:47:04,638 --> 06:47:08,400
you need to in order to be able to do the trick that i just did you need to


5730
06:47:08,400 --> 06:47:12,160
install cocoapods and there is a good website for that i mean you can i'll


5731
06:47:12,160 --> 06:47:19,280
bring up my and i say install cocoapods and then i go here and you just say


5732
06:47:19,280 --> 06:47:23,520
cocoapods and then there is a command that you need to issue in your computer


5733
06:47:23,520 --> 06:47:30,080
in order to install cocoapods okay so um after you've installed cocoapods


5734
06:47:30,080 --> 06:47:32,878
then you can go into your ios project and like


5735
06:47:32,878 --> 06:47:37,920
ask it to reinstall your dependencies so the key here though was for me to


5736
06:47:37,920 --> 06:47:42,478
uncomment this platform line in the pod file where my dependencies are managed


5737
06:47:42,478 --> 06:47:47,760
so i'm just going to say now i'm supporting ios 13 at the minimum


5738
06:47:47,760 --> 06:47:53,920
all right and then i manually ask the io the project to be recreated the ios


5739
06:47:53,920 --> 06:47:58,240
project to be recreated using pod install repo update


5740
06:47:58,240 --> 06:48:00,878
so after you've done that your dependencies


5741
06:48:00,878 --> 06:48:04,558
are generated and then i'm going to right click on ios again


5742
06:48:04,558 --> 06:48:08,160
and i'm going to say oh i can say open in xcode that's interesting will that


5743
06:48:08,160 --> 06:48:10,958
work i don't dare to be honest with you do that


5744
06:48:10,958 --> 06:48:16,160
revealing finder and then i'm going to do that and open a project so


5745
06:48:16,160 --> 06:48:22,320
i'm going to go now do command do i do command b maybe not let's just


5746
06:48:22,320 --> 06:48:25,440
run it directly so


5747
06:48:25,600 --> 06:48:29,040
so i'm gonna then bring up xcode and press


5748
06:48:29,040 --> 06:48:32,320
run again and let's see if it can then find


5749
06:48:32,320 --> 06:48:36,400
those dependencies that it couldn't find previously okay


5750
06:48:36,400 --> 06:48:39,520
so we're gonna


5751
06:48:39,520 --> 06:48:44,558
let it do its thing and it may take some time as you can see


5752
06:48:44,558 --> 06:48:47,840
because there's lots of dependencies we dragged in


5753
06:48:47,840 --> 06:48:53,200
and all i think there were firebase off we had firebase core we had cloud


5754
06:48:53,200 --> 06:48:56,958
firestore and also firebase analytics so these dependencies


5755
06:48:56,958 --> 06:49:01,040
themselves can bring with them a lot of other dependencies so


5756
06:49:01,040 --> 06:49:05,600
um it is important that that then to know that


5757
06:49:05,600 --> 06:49:08,478
as i mentioned in the previous chapter in chapter eight bringing dependencies


5758
06:49:08,478 --> 06:49:10,558
is not just all


5759
06:49:10,558 --> 06:49:13,920
butterflies and balloons in the sky it is actually a serious process you need


5760
06:49:13,920 --> 06:49:17,840
to consider what's bringing in a dependency means to you and your team


5761
06:49:17,840 --> 06:49:20,878
and your application so in this case we've only brought


5762
06:49:20,878 --> 06:49:25,040
dependencies that were officially done by google and google is behind flutter


5763
06:49:25,040 --> 06:49:28,160
so i think then the


5764
06:49:28,160 --> 06:49:32,478
you can basically trust anything that has to do with firebase at least so


5765
06:49:32,478 --> 06:49:37,840
if it's released by the google team that work on firebase of course


5766
06:49:37,840 --> 06:49:42,478
um so we're gonna let it do its thing i'm gonna just tap here and i can see


5767
06:49:42,478 --> 06:49:47,120
that it's building quite a lot of files


5768
06:49:47,120 --> 06:49:50,718
if everything goes according to our plan


5769
06:49:50,718 --> 06:49:53,680
then the result is going to be that


5770
06:49:53,680 --> 06:49:58,320
application run on this phone so um


5771
06:49:58,320 --> 06:50:01,760
it would be very exciting actually to see if this will


5772
06:50:01,760 --> 06:50:07,440
work as we intend to and as i mentioned depending on the


5773
06:50:07,440 --> 06:50:10,240
computer that you're using this process may take


5774
06:50:10,240 --> 06:50:14,400
in the beginning at least quite a lot of time


5775
06:50:14,400 --> 06:50:17,200
so if you have a powerful computer it may take less time and if you have a


5776
06:50:17,200 --> 06:50:20,240
little bit less powerful computer it may take some more time


5777
06:50:20,240 --> 06:50:23,520
and um now that we're waiting i should also


5778
06:50:23,520 --> 06:50:28,878
probably mention that this process of waiting is only initially


5779
06:50:28,878 --> 06:50:33,280
something you need to do once the build has been done once it


5780
06:50:33,280 --> 06:50:36,958
kind of like its artifacts will be cached inside your computer


5781
06:50:36,958 --> 06:50:41,680
so that you don't have to rebuild the entire project from the beginning okay


5782
06:50:41,680 --> 06:50:44,558
so um


5783
06:50:44,558 --> 06:50:49,360
i'm gonna let it do its thing and uh while we're waiting actually we


5784
06:50:49,360 --> 06:50:53,840
could talk a little bit about quicktime which is a caption i brought here


5785
06:50:53,840 --> 06:50:58,400
if you're like me and you like to like debug your applications on real phones


5786
06:50:58,400 --> 06:51:03,920
then you may want to see or show that your your phone's screen


5787
06:51:03,920 --> 06:51:07,360
and on your computer so for instance if


5788
06:51:07,360 --> 06:51:11,760
you're sharing your computer as a screen with a co-worker and he or she wants to


5789
06:51:11,760 --> 06:51:16,000
also see your application running on your phone you will need to use


5790
06:51:16,000 --> 06:51:19,840
something called a quicktime network quicktime


5791
06:51:19,840 --> 06:51:22,558
so we're going to talk about that now but before we do that let me just show


5792
06:51:22,558 --> 06:51:27,840
you that here is now our flutter application


5793
06:51:27,840 --> 06:51:31,520
run on this telephone so


5794
06:51:31,520 --> 06:51:34,478
there we go our app is now running


5795
06:51:34,478 --> 06:51:38,240
now that we've done that all of this is done you don't need xcode anymore so i'm


5796
06:51:38,240 --> 06:51:41,920
just going to press stop here and what i'm going to do i'm actually going to


5797
06:51:41,920 --> 06:51:47,040
run our application from visual studio code or flutter application on that


5798
06:51:47,040 --> 06:51:50,958
iphone all right so command shift b or control shift b depending on which


5799
06:51:50,958 --> 06:51:53,440
platform you're using and say select device


5800
06:51:53,440 --> 06:51:57,760
i'm going to choose my iphone 12 pro then i'm going to go to run and say run


5801
06:51:57,760 --> 06:52:01,840
without debugging you don't have any extensions oh not


5802
06:52:01,840 --> 06:52:05,680
this file open up your main darp file okay


5803
06:52:05,680 --> 06:52:11,840
and then say run run without debugging and you'll see it says launching


5804
06:52:11,840 --> 06:52:16,160
so this is going to actually consult xcode and say that hey xcode here's the


5805
06:52:16,160 --> 06:52:21,840
flutter application run it on this telephone


5806
06:52:22,478 --> 06:52:24,718
so


5807
06:52:25,200 --> 06:52:27,840
and to be honest with you i actually didn't like this that it's using


5808
06:52:27,840 --> 06:52:31,360
automatic signing it what may have happened is that when


5809
06:52:31,360 --> 06:52:36,400
we did flutter clea clean you may have messed up our


5810
06:52:36,400 --> 06:52:40,638
profiles to be honest with you and this is not a good sign it could be


5811
06:52:40,638 --> 06:52:45,040
that when i did flutter clean it actually messed up the profile


5812
06:52:45,040 --> 06:52:49,840
so i'm going to open up xcode again and bring up our application again and let's


5813
06:52:49,840 --> 06:52:54,878
have a look at our profiles and i can see debug no it's fine it's


5814
06:52:54,878 --> 06:52:58,958
not automatic signing so you don't have to worry about this


5815
06:52:58,958 --> 06:53:03,680
message that was printed to the screen by uh by flutter so i don't think this


5816
06:53:03,680 --> 06:53:09,120
something that we need to worry about so now that you've set that up then you


5817
06:53:09,120 --> 06:53:12,798
could actually run your application directly from


5818
06:53:12,798 --> 06:53:16,400
visual studio code or android studio depending on which environment you're


5819
06:53:16,400 --> 06:53:19,760
running your flutter applications or debugging your


5820
06:53:19,760 --> 06:53:26,878
applications from okay now let's say that that is done um


5821
06:53:26,878 --> 06:53:30,558
then what you need to do if you want to mirror your application


5822
06:53:30,558 --> 06:53:34,478
screen on your computer then you can bring up something called quicktime


5823
06:53:34,478 --> 06:53:39,600
player on your macintosh and then go to file and then say movie recording now


5824
06:53:39,600 --> 06:53:44,558
this is probably going to hijack my no it didn't hijack anything then i'm


5825
06:53:44,558 --> 06:53:49,120
going to go to iphone 12 pro and see if it can mirror


5826
06:53:49,120 --> 06:53:52,160
that phone for me


5827
06:53:52,320 --> 06:53:54,558
uh


5828
06:53:55,680 --> 06:53:59,520
is it not able to do that is it because i'm recording my screen or something i'm


5829
06:53:59,520 --> 06:54:02,638
gonna actually [Music]


5830
06:54:02,638 --> 06:54:06,958
wait for this debug process to continue


5831
06:54:08,400 --> 06:54:11,840
let us do its thing first i think i'm probably trying to do too many things at


5832
06:54:11,840 --> 06:54:15,060
the same time so uh


5833
06:54:15,060 --> 06:54:18,798
[Applause] i proxy i don't really know what i proxy


5834
06:54:18,798 --> 06:54:22,000
is so


5835
06:54:22,000 --> 06:54:25,840
um connecting to the vm service taking


5836
06:54:25,840 --> 06:54:28,878
longer than except expected and that could be because my macintosh is


5837
06:54:28,878 --> 06:54:33,280
actually blocking something that flopper needs so i'm going to go to privacy here


5838
06:54:33,280 --> 06:54:36,878
which is security and privacy and just let iproxy to run


5839
06:54:36,878 --> 06:54:41,360
allow anyway so that may help flutter then get its


5840
06:54:41,360 --> 06:54:44,240
process working


5841
06:54:46,798 --> 06:54:51,680
yeah that could be it because maybe my macintosh just blocked that eye proxy so


5842
06:54:51,680 --> 06:54:55,680
i'm gonna stop this process and i'm just going to say run run without debugging


5843
06:54:55,680 --> 06:55:00,080
again let's see if it can do its work this time


5844
06:55:00,958 --> 06:55:04,080
launching and this time since it's actually built the application


5845
06:55:04,080 --> 06:55:09,520
previously it shouldn't take long this time before it can run the app


5846
06:55:09,520 --> 06:55:13,680
so it has already built the app once so it shouldn't really take as long this


5847
06:55:13,680 --> 06:55:15,920
time


5848
06:55:16,000 --> 06:55:18,638
so i can now see it says installing and


5849
06:55:18,638 --> 06:55:21,120
launching


5850
06:55:21,600 --> 06:55:25,840
so let's see if we can get that to work


5851
06:55:26,000 --> 06:55:29,920
xcode build done in eight seconds and to be honest with you this is taking


5852
06:55:29,920 --> 06:55:34,400
longer than i expected it shouldn't take this long to run the application and i


5853
06:55:34,400 --> 06:55:37,920
can see nothing was blocked this time mac os cannot verify the developer of


5854
06:55:37,920 --> 06:55:42,718
iproxy and i'm just going to say open i think there is something wrong with


5855
06:55:42,718 --> 06:55:47,600
the latest versions of mac os and how it tries to for instance verify


5856
06:55:47,600 --> 06:55:51,440
various tools that flutter is using internally but


5857
06:55:51,440 --> 06:55:55,680
everything went fine at the end i could actually launch the application from


5858
06:55:55,680 --> 06:56:00,000
visual studio code and now it's running inside my iphone


5859
06:56:00,000 --> 06:56:04,400
now i'm gonna stop this so now the app as soon as i say stop the app is going


5860
06:56:04,400 --> 06:56:08,638
to stop working there what i'm going to do then is to go to


5861
06:56:08,638 --> 06:56:12,000
quicktime and see if we can get quicktime to


5862
06:56:12,000 --> 06:56:16,638
actually mirror this iphone i'm going to unplug it


5863
06:56:16,638 --> 06:56:20,320
the phone and then plug it again and see


5864
06:56:20,320 --> 06:56:25,120
if it understands that it has to mirror the phone


5865
06:56:25,120 --> 06:56:29,520
i can see my quicktime is also giving me some trouble


5866
06:56:30,798 --> 06:56:33,840
and it crashed


5867
06:56:34,160 --> 06:56:38,718
i mean this is live uh recording of this session so you can see all the problems


5868
06:56:38,718 --> 06:56:41,680
a developer will have to fix and this is me


5869
06:56:41,680 --> 06:56:48,558
so let's go to um and see if we can get it to


5870
06:56:48,718 --> 06:56:53,200
let's see if i can get it to


5871
06:56:53,440 --> 06:56:56,798
recognize this phone


5872
06:56:56,958 --> 06:56:59,840
and to be honest with you i mean i'm actually doing this on a separate screen


5873
06:56:59,840 --> 06:57:03,280
so you don't have to see my face so much but i can see that my macintosh for some


5874
06:57:03,280 --> 06:57:07,840
reason is not recognizing this telephone so i cannot record it basically on this


5875
06:57:07,840 --> 06:57:12,000
um uh on this screen right now


5876
06:57:12,000 --> 06:57:16,000
but if you're doing this at home it's probably gonna work for you so uh


5877
06:57:16,000 --> 06:57:19,760
connect your phone with a cable to your computer and then go to quicktime player


5878
06:57:19,760 --> 06:57:23,440
and then with quicktime player say new movie recording and from movie recording


5879
06:57:23,440 --> 06:57:28,718
just from the drop down choose your choose your um


5880
06:57:29,120 --> 06:57:33,840
phone and you'll be able to mirror your screen so


5881
06:57:33,840 --> 06:57:38,080
um now that that is done i mean we actually


5882
06:57:38,080 --> 06:57:43,040
got to a lot of hurdles that i hadn't planned for we saw the iproxy thing


5883
06:57:43,040 --> 06:57:46,000
happening here grateful that it happened


5884
06:57:46,000 --> 06:57:49,840
we saw the error with the pod installation which is the dependency of


5885
06:57:49,840 --> 06:57:53,680
our project because there was no minimum version set up for our flutter project


5886
06:57:53,680 --> 06:57:58,478
we fixed that we saw a problem with the profile not being picked up


5887
06:57:58,478 --> 06:58:02,718
automatically because xcode had created the certificate automatically we fixed


5888
06:58:02,718 --> 06:58:04,478
that so


5889
06:58:04,478 --> 06:58:08,798
i mean i could for instance now go and filter these out


5890
06:58:08,798 --> 06:58:13,200
from the video and kind of like when i actually output the final course for you


5891
06:58:13,200 --> 06:58:16,718
then everything will just work perfectly so


5892
06:58:16,718 --> 06:58:19,840
you don't have to see any of that hiccup


5893
06:58:19,840 --> 06:58:22,798
but i don't want to do that to be honest with you because i think it's so


5894
06:58:22,798 --> 06:58:26,400
important for you to see what issues


5895
06:58:26,400 --> 06:58:30,558
you will get as you develop your thoughts or applications it is important


5896
06:58:30,558 --> 06:58:34,878
i don't want to polish this um i don't want to polish this uh course so much


5897
06:58:34,878 --> 06:58:37,520
that you think everything is perfect from the absolute beginning and if


5898
06:58:37,520 --> 06:58:40,638
you're and if you're making mistakes then something is wrong with the way


5899
06:58:40,638 --> 06:58:44,558
you're developing things but these things happen you need to understand why


5900
06:58:44,558 --> 06:58:48,558
they happen then you need to learn how to fix them so


5901
06:58:48,558 --> 06:58:50,878
with that said uh


5902
06:58:50,878 --> 06:58:54,798
i think then we're good to go uh for ios we've explained


5903
06:58:54,798 --> 06:58:58,798
everything we needed to explain uh everything worked except for the


5904
06:58:58,798 --> 06:59:01,600
quicktime thing and i think that is because


5905
06:59:01,600 --> 06:59:05,920
um i'm actually i have a lot of software open here i am playing stop playing in


5906
06:59:05,920 --> 06:59:09,760
stuff recording stuff so it may be because of that is a little bit confused


5907
06:59:09,760 --> 06:59:12,958
and who knows maybe my computer needs to restart so


5908
06:59:12,958 --> 06:59:15,520
um so with that said let's prepare


5909
06:59:15,520 --> 06:59:18,558
ourselves for the next chapter and that is


5910
06:59:18,558 --> 06:59:23,520
to do the exact same thing with it for ios hopefully with less explanation now


5911
06:59:23,520 --> 06:59:27,440
that we've gone through the basics for android so


5912
06:59:27,440 --> 06:59:31,600
uh grab a cup of tea cup coffee whatever you want and i'll see you in the next


5913
06:59:31,600 --> 06:59:34,798
chapter hello and welcome to chapter 10 of this


5914
06:59:34,798 --> 06:59:37,600
flutter course in this chapter we're going to look at


5915
06:59:37,600 --> 06:59:40,478
setting up our android phone


5916
06:59:40,478 --> 06:59:44,320
or any android device that you may have at hand in order for us to be able to


5917
06:59:44,320 --> 06:59:49,440
run our flutter code on it and now in chapter nine we looked at how we can run


5918
06:59:49,440 --> 06:59:53,200
the application and basically run our flash application


5919
06:59:53,200 --> 06:59:58,878
on an ios device and we set up the provisioning profiles we set up the


5920
06:59:58,878 --> 07:00:03,120
certificates what else the app id


5921
07:00:03,120 --> 07:00:07,920
at app store can on um apple's developer website


5922
07:00:07,920 --> 07:00:12,638
i mean there is a lot of work to do and you know that chapter took about an hour


5923
07:00:12,638 --> 07:00:16,400
to explain everything but when it then comes to


5924
07:00:16,400 --> 07:00:20,240
the android side things are a lot easier um


5925
07:00:20,240 --> 07:00:22,958
so i thought in this chapter we're gonna


5926
07:00:22,958 --> 07:00:27,520
have a look at how we can have an android phone for instance in my


5927
07:00:27,520 --> 07:00:35,840
case here i have a oneplus pro 7 pro that is connected with a usb cable to my


5928
07:00:35,840 --> 07:00:40,478
computer so there's nothing special about it it's just an android phone and


5929
07:00:40,478 --> 07:00:44,478
um i prefer to actually as i mentioned in


5930
07:00:44,478 --> 07:00:48,638
the previous chapter in chapter 9 that i prefer personally when i'm developing


5931
07:00:48,638 --> 07:00:53,920
applications to developing floss applications to run my


5932
07:00:53,920 --> 07:00:59,440
applications on a real phone or a real device as i'm testing now


5933
07:00:59,440 --> 07:01:02,958
um you may not know this if you're coming from like a design background or


5934
07:01:02,958 --> 07:01:08,798
a background that's not really related to mobile development in previously but


5935
07:01:08,798 --> 07:01:12,240
um if you're developing applications for


5936
07:01:12,240 --> 07:01:16,718
only ios then you have something called an ios simulator


5937
07:01:16,718 --> 07:01:22,080
um an io simulator is a program that runs on your macintosh that comes with


5938
07:01:22,080 --> 07:01:28,160
xcode and the ios sdk that allows you to simulate how ios internally works and it


5939
07:01:28,160 --> 07:01:33,840
allows you to install your applications from xcode directly or from from flutter


5940
07:01:33,840 --> 07:01:39,200
directly into the simulator and simulate basically how your application will be


5941
07:01:39,200 --> 07:01:44,240
perceived by your actual users if you're developing applications for


5942
07:01:44,240 --> 07:01:50,558
android then there is something called an android emulator now an emulator is


5943
07:01:50,558 --> 07:01:55,520
quite different from a simulator in that an emulator as its name indicates it


5944
07:01:55,520 --> 07:01:59,600
actually tries to emulate everything about the operating system and the


5945
07:01:59,600 --> 07:02:05,440
device so for instance an android emulator for an old device for instance


5946
07:02:05,440 --> 07:02:09,840
that you may get a hold of a device that's five six years old


5947
07:02:09,840 --> 07:02:15,680
it will actually work slower than an android emulator for a very


5948
07:02:15,680 --> 07:02:18,798
modern device but had you done the same thing for an


5949
07:02:18,798 --> 07:02:23,280
ios simulator and simulated an ios device that's five years old


5950
07:02:23,280 --> 07:02:29,280
it would still perform at today's like at your computer's uh


5951
07:02:29,280 --> 07:02:34,558
speed because it is simulating ios it's not actually emulating it the way it


5952
07:02:34,558 --> 07:02:38,240
really works on a phone so when it comes to android you have this


5953
07:02:38,240 --> 07:02:42,798
possibility to run your application on an emulator which is a lot closer to the


5954
07:02:42,798 --> 07:02:47,040
actual device that your user will be using


5955
07:02:47,040 --> 07:02:52,558
so it is not the exact perfect copy in most cases so it's not gonna be like


5956
07:02:52,558 --> 07:02:58,718
working exactly as a real physical phone but it's a lot closer to the actual


5957
07:02:58,718 --> 07:03:04,440
physical device that an ios simulator is so


5958
07:03:04,558 --> 07:03:10,478
given that background i still prefer to run my flutter applications on a real


5959
07:03:10,478 --> 07:03:13,840
phone and in this chapter


5960
07:03:13,840 --> 07:03:17,440
if you're interested in that if you're if you have an android phone and you


5961
07:03:17,440 --> 07:03:22,478
want to for instance deploy your flutter application on an android phone and test


5962
07:03:22,478 --> 07:03:27,280
it while you're programming it then this chapter is for you


5963
07:03:27,280 --> 07:03:31,958
now i also have to say that um


5964
07:03:32,000 --> 07:03:34,240
mean [Music]


5965
07:03:34,240 --> 07:03:37,840
you don't you don't have to do this but for the


5966
07:03:37,840 --> 07:03:42,718
entire entirety of this course i'm actually going to be


5967
07:03:42,718 --> 07:03:47,440
as we're developing the application the notes application i'm personally going


5968
07:03:47,440 --> 07:03:50,878
to be using my android phone


5969
07:03:50,878 --> 07:03:55,680
so that um so as we basically do hot reloads and


5970
07:03:55,680 --> 07:03:58,478
then we write some code and we want to test it i'm not going to show any


5971
07:03:58,478 --> 07:04:01,360
emulator i'm not going to show any simulator i'm actually going to show my


5972
07:04:01,360 --> 07:04:05,360
real android phone working now i'm not going to show it with just


5973
07:04:05,360 --> 07:04:08,160
like i'm not going to install the application


5974
07:04:08,160 --> 07:04:11,360
here and just show you like this because this is not going to work it's not a


5975
07:04:11,360 --> 07:04:16,160
good way of showing things to uh to someone watching this course so what


5976
07:04:16,160 --> 07:04:20,160
we're gonna do is as the first


5977
07:04:20,160 --> 07:04:26,478
task in this uh chapter we are going to install an application on our um


5978
07:04:26,478 --> 07:04:30,718
computer called scrcpy okay


5979
07:04:30,718 --> 07:04:36,160
now scrcp cpy is a is an open source project


5980
07:04:36,160 --> 07:04:39,680
um that is on github with


5981
07:04:39,680 --> 07:04:45,440
many thousand stars and it is not like a dependency it's not something


5982
07:04:45,440 --> 07:04:48,000
that you're going to build into your flutter application but it's actually


5983
07:04:48,000 --> 07:04:52,000
utility you're going to install on your computer okay so


5984
07:04:52,000 --> 07:04:57,680
your computer will will then be able to mirror your android


5985
07:04:57,680 --> 07:05:02,718
phone or your android tablet on your computer's screen so


5986
07:05:02,718 --> 07:05:06,638
and this scr cpy is absolutely beautiful it's one of my absolute favorite


5987
07:05:06,638 --> 07:05:10,160
utilities to have when doing mobile development


5988
07:05:10,160 --> 07:05:13,520
and the reason behind that is that unlike the


5989
07:05:13,520 --> 07:05:16,400
um solution that i showed in the previous


5990
07:05:16,400 --> 07:05:21,600
chapter which is quicktime quicktime player where you mirror your ios


5991
07:05:21,600 --> 07:05:26,878
telephone on your computer but you cannot interact with that mirrored image


5992
07:05:26,878 --> 07:05:30,160
you still have to bring up your telephone and interact with the


5993
07:05:30,160 --> 07:05:33,840
telephone and see the interactions either on the phone itself or on your


5994
07:05:33,840 --> 07:05:39,280
screen unlike that scrcpy allows you to actually interact with your phone or


5995
07:05:39,280 --> 07:05:42,080
your tablet or your android phone or tablet


5996
07:05:42,080 --> 07:05:46,240
from your computer screen so you can actually take your mouse and then go to


5997
07:05:46,240 --> 07:05:50,878
that screen and tap on a button and it will actually tap on that button on your


5998
07:05:50,878 --> 07:05:55,200
android telephone so it is magical it's beautiful it's open


5999
07:05:55,200 --> 07:05:59,520
source and free so if you have an android tablet or an android phone and


6000
07:05:59,520 --> 07:06:03,840
you're following along with this course i highly recommend that we install


6001
07:06:03,840 --> 07:06:07,360
scrcpy together actually as we're going to do


6002
07:06:07,360 --> 07:06:10,080
in this course so


6003
07:06:10,080 --> 07:06:14,000
i'm just going to take in my notes here that i've explained that so


6004
07:06:14,000 --> 07:06:20,400
um before actually we go about installing scrcpy we need to


6005
07:06:20,400 --> 07:06:26,000
do um we need to install adb and


6006
07:06:26,000 --> 07:06:31,680
this adb is like um i believe it actually stands for android


6007
07:06:31,680 --> 07:06:36,400
debugger or something let's see what actually adb stands for


6008
07:06:36,400 --> 07:06:42,400
i'm gonna bring up a um a safari window here as you can see adb


6009
07:06:42,400 --> 07:06:47,760
stands for android debug bridge and adb is a great tool if you want to for


6010
07:06:47,760 --> 07:06:52,240
instance be able to talk with your android telephone all from the command


6011
07:06:52,240 --> 07:06:56,878
line so you can send it a message and say hey take a screenshot


6012
07:06:56,878 --> 07:07:02,798
hey do this or click here or yet close this application whatever so you


6013
07:07:02,798 --> 07:07:06,240
basically send commands to your android telephone or tablet through your


6014
07:07:06,240 --> 07:07:09,520
terminal it's um it's fantastic and


6015
07:07:09,520 --> 07:07:11,680
with with


6016
07:07:11,680 --> 07:07:16,638
adb i mean having adb install your computer then you can actually install


6017
07:07:16,638 --> 07:07:21,200
scrcpy which uses adb in order to talk to your


6018
07:07:21,200 --> 07:07:26,638
telephone and send commands to it and receive images from it etc so


6019
07:07:26,638 --> 07:07:32,558
with that said we need to install adb so i'm going to close this turn window here


6020
07:07:32,558 --> 07:07:38,240
and i'm going to bring up terminal i'm going to increase the size of this


6021
07:07:38,240 --> 07:07:41,360
terminal window so you see what i'm doing okay


6022
07:07:41,360 --> 07:07:46,240
so in here then i'm going to say brew install


6023
07:07:46,240 --> 07:07:51,600
cask android platform tools okay


6024
07:07:51,760 --> 07:07:58,240
so this will then allow you to install if i can


6025
07:07:58,240 --> 07:08:03,600
using android platform tools then um you will be able to grab adb from that so


6026
07:08:03,600 --> 07:08:07,600
android platform tools insta installation actually includes adb all


6027
07:08:07,600 --> 07:08:09,600
right so


6028
07:08:09,600 --> 07:08:13,440
um i can see that i mean for me you can see that i've already installed android


6029
07:08:13,440 --> 07:08:17,120
platform tools so i get this message here saying that well you've already


6030
07:08:17,120 --> 07:08:20,478
installed it but if you have not installed android


6031
07:08:20,478 --> 07:08:24,478
platform tools before you will running this command will actually install it


6032
07:08:24,478 --> 07:08:28,400
for you now i don't want to reinstall it so i'm just not going to do this


6033
07:08:28,400 --> 07:08:33,520
suggested command here but just know that before you install scr cpy you will


6034
07:08:33,520 --> 07:08:41,840
need to get adb up and running okay and that comes in android platform tools


6035
07:08:42,558 --> 07:08:45,040
all right


6036
07:08:45,680 --> 07:08:49,360
so let's let me just go into my notes and


6037
07:08:49,360 --> 07:08:55,600
say that we've talked about adb so after you've done adb we need to go and i'm


6038
07:08:55,600 --> 07:09:00,958
going to bring up safari again let's see if i can bring up the window


6039
07:09:00,958 --> 07:09:06,000
here so you can see what i'm doing as well then i'm going to say scr cpy


6040
07:09:06,000 --> 07:09:09,840
okay and then you will see that the first suggested website is on github and


6041
07:09:09,840 --> 07:09:15,840
this is exactly where you need to go so go to scrcpy here and you will see


6042
07:09:15,840 --> 07:09:21,200
information about how you can actually install scrcpy and it says on linux you


6043
07:09:21,200 --> 07:09:26,320
can do apt installer crcpy on windows you can do a download here


6044
07:09:26,320 --> 07:09:30,080
and on mac os then you can do brew install


6045
07:09:30,080 --> 07:09:33,200
scr cpy


6046
07:09:33,280 --> 07:09:36,160
so i've already done that so i've already


6047
07:09:36,160 --> 07:09:42,240
actually installed scrcpy so i don't have to do anything special


6048
07:09:42,478 --> 07:09:46,878
and um you can see it actually tells you here i'm going to increase the size of


6049
07:09:46,878 --> 07:09:49,440
this window so you can see a little bit better


6050
07:09:49,440 --> 07:09:53,920
and it will tell you here that you need adb accessible from your path if you


6051
07:09:53,920 --> 07:09:59,200
don't have it yet then do that command that i mentioned to you okay


6052
07:09:59,200 --> 07:10:02,400
so after you've done the installation on


6053
07:10:02,400 --> 07:10:06,000
your computer then you should be able to bring up a terminal so i'm going to


6054
07:10:06,000 --> 07:10:08,718
bring up terminal here and


6055
07:10:08,718 --> 07:10:14,080
as you can see here i have my android telephone and it the screen looks like


6056
07:10:14,080 --> 07:10:19,840
this right now so it's just on the home screen nothing special


6057
07:10:20,798 --> 07:10:25,840
then i want to bring up scrcpy


6058
07:10:25,840 --> 07:10:29,120
but before you do that if this is the first time you're doing


6059
07:10:29,120 --> 07:10:34,478
this process you will probably need to enable something called usb debugging on


6060
07:10:34,478 --> 07:10:37,680
your android telephone and


6061
07:10:37,680 --> 07:10:43,280
depending on how your what your android phone looks like or


6062
07:10:43,280 --> 07:10:46,638
what it is the usb debugging when you plug your


6063
07:10:46,638 --> 07:10:49,520
android telephone it will kind of show you


6064
07:10:49,520 --> 07:10:52,558
um a screen like this


6065
07:10:52,558 --> 07:10:55,520
so i'm going to enlarge this a little bit so you can see better


6066
07:10:55,520 --> 07:11:01,040
so this dialog will pop up on your android telephone saying that oh do you


6067
07:11:01,040 --> 07:11:05,600
want to allow this computer to do debugging on this um on this telephone


6068
07:11:05,600 --> 07:11:08,878
and what you need to do is just to say always allow from this computer and then


6069
07:11:08,878 --> 07:11:15,840
press the ok button this is only so that you will be first of all able to install


6070
07:11:15,840 --> 07:11:19,280
and debug your flutter applications


6071
07:11:19,280 --> 07:11:23,120
all from visual studio code or from android studio right on your android


6072
07:11:23,120 --> 07:11:27,520
telephone or tablet and also it will allow you to run scrcpy


6073
07:11:27,520 --> 07:11:32,240
which in turn uses adb in order in order to communicate with


6074
07:11:32,240 --> 07:11:36,798
your device okay so


6075
07:11:36,878 --> 07:11:43,120
that is for usb debugging all right


6076
07:11:43,120 --> 07:11:46,798
so what we need to do is actually bring up scr cpy so


6077
07:11:46,798 --> 07:11:50,478
in terminal i'm just going to say ser cpy


6078
07:11:50,478 --> 07:11:53,440
and as you can see here it's going to talk to my android telephone and it


6079
07:11:53,440 --> 07:11:57,600
brought up a window which i'm going to slowly bring here to this screen so you


6080
07:11:57,600 --> 07:12:00,718
can see so


6081
07:12:00,718 --> 07:12:03,760
i'm going to leave the terminal here because the terminal is actually fueling


6082
07:12:03,760 --> 07:12:07,760
this thing so if i close my terminal this is also going to be closed so just


6083
07:12:07,760 --> 07:12:12,798
keep this terminal open or if you're using item for instance like i'm using


6084
07:12:12,798 --> 07:12:16,400
then you can bring up a new tab and continue working with another


6085
07:12:16,400 --> 07:12:20,558
command line otherwise you can just close it or you can just minimize this


6086
07:12:20,558 --> 07:12:25,840
if you're if you're bothered by it so as you can see now i have my android


6087
07:12:25,840 --> 07:12:28,718
phone here mirrored on my screen i'm actually going


6088
07:12:28,718 --> 07:12:32,400
to do this so you can see it a little bit better i'm going to bring it right


6089
07:12:32,400 --> 07:12:38,558
here in between so this is my actual android phone so if i click here with my


6090
07:12:38,558 --> 07:12:42,638
mouse it actually interacts with my phone so


6091
07:12:42,638 --> 07:12:47,600
i can bring up my phone here so you kind of see them side by side


6092
07:12:47,600 --> 07:12:52,478
and if on the if on the scrcpy screen here i press the


6093
07:12:52,478 --> 07:12:56,000
back button you will see that my android screen


6094
07:12:56,000 --> 07:13:00,000
changes one more time click on google


6095
07:13:00,000 --> 07:13:04,638
so it's really interacting with my android telephone here okay


6096
07:13:04,638 --> 07:13:06,878
so i highly suggest that you actually


6097
07:13:06,878 --> 07:13:11,200
install sdrcpy to be honest with you it's a great great tool if you're into


6098
07:13:11,200 --> 07:13:15,360
mobile development or if you want to become a mobile developer so


6099
07:13:15,360 --> 07:13:18,958
um and regarding what i said earlier about


6100
07:13:18,958 --> 07:13:23,840
devices i think in you will get really really far with the


6101
07:13:23,840 --> 07:13:28,638
ios simulator and the android emulator however


6102
07:13:28,638 --> 07:13:31,360
i personally should suggest that you spend


6103
07:13:31,360 --> 07:13:35,680
and invest some money into getting devices for for yourself they don't have


6104
07:13:35,680 --> 07:13:39,040
to be top of the line latest devices but


6105
07:13:39,040 --> 07:13:42,798
one android telephone and one ios telephone


6106
07:13:42,798 --> 07:13:46,558
or even tablets will do but preferably telephones you don't even have to have


6107
07:13:46,558 --> 07:13:51,440
sim cards in them just just the telephone device physically itself so


6108
07:13:51,440 --> 07:13:53,520
um and


6109
07:13:53,520 --> 07:13:57,360
i mean if you're getting into mobile development you will kind of after many


6110
07:13:57,360 --> 07:14:01,760
years kind of have a lot of telephones anyways because you will get like this


6111
07:14:01,760 --> 07:14:05,280
year's new telephone and then two years later you get another telephone so you


6112
07:14:05,280 --> 07:14:07,760
kind of pile them up um


6113
07:14:07,760 --> 07:14:12,718
and you could use those all telephones then as test telephones as we call them


6114
07:14:12,718 --> 07:14:15,280
all right so


6115
07:14:15,280 --> 07:14:20,878
that's that part now what we need to do next is to now that our android phone is


6116
07:14:20,878 --> 07:14:24,718
connected here what we need to do is to go to visual


6117
07:14:24,718 --> 07:14:30,638
studio code into our project and choose that um


6118
07:14:30,638 --> 07:14:35,200
so choose our let me see bring up visual studio code here if i can visual studio


6119
07:14:35,200 --> 07:14:38,638
code this is i have so many screens here so


6120
07:14:38,638 --> 07:14:41,200
it's a little bit of a challenge to actually


6121
07:14:41,200 --> 07:14:45,680
line them up all here so what i'll do here is i will get rid of the side


6122
07:14:45,680 --> 07:14:50,878
window all right and i will bring up then scr cpy on the right hand side and


6123
07:14:50,878 --> 07:14:54,718
then just resize the screen a little bit here


6124
07:14:54,718 --> 07:14:59,040
and then like this so i have you this is like my usual setup so i have visual


6125
07:14:59,040 --> 07:15:03,600
studio code here on the left and then i have my android phone mirrored on the


6126
07:15:03,600 --> 07:15:08,000
right hand side okay so what then you'll need to do after


6127
07:15:08,000 --> 07:15:11,520
you've done all of this work is in visual studio code just say command


6128
07:15:11,520 --> 07:15:17,120
shift p on mac or ctrl shift b on linux and


6129
07:15:17,200 --> 07:15:20,400
windows and if you're using android studio i don't to honestly know the


6130
07:15:20,400 --> 07:15:24,320
commands there to select a device in flutter they may be like a drop down or


6131
07:15:24,320 --> 07:15:28,320
something so please do that so here i'm just going to say command


6132
07:15:28,320 --> 07:15:31,600
shift b and i'm going to say flutter select device okay


6133
07:15:31,600 --> 07:15:34,638
and in select device i'm actually going to choose my


6134
07:15:34,638 --> 07:15:38,240
android telephone which is the one being mirrored here


6135
07:15:38,240 --> 07:15:42,160
choose an android phone and then i'm going to say run run without debugging


6136
07:15:42,160 --> 07:15:44,478
okay


6137
07:15:45,360 --> 07:15:49,280
so let's then see


6138
07:15:49,280 --> 07:15:56,400
that you can see here it says launching dart on gm 19 blah blah in debug mode so


6139
07:15:56,400 --> 07:16:00,240
since it's an android application now all of a sudden we just switch from ios


6140
07:16:00,240 --> 07:16:03,520
to android previously our application was being like our source code was being


6141
07:16:03,520 --> 07:16:07,840
compiled by xcode and now since we're trying to deploy to


6142
07:16:07,840 --> 07:16:11,680
an android telephone it's the gradle it's gradle basically that's taking care


6143
07:16:11,680 --> 07:16:15,520
of the build process so if you're an android developer then you know that


6144
07:16:15,520 --> 07:16:18,558
basically gradle zero build system and yeah


6145
07:16:18,558 --> 07:16:22,240
it is working um it is basically doing the build in the


6146
07:16:22,240 --> 07:16:26,638
background so i'm actually so glad that we got this


6147
07:16:26,638 --> 07:16:31,120
error right now so i'm gonna take here in my notes that we've talked about in


6148
07:16:31,120 --> 07:16:36,000
vs code select android and then show android phone mirroring working okay


6149
07:16:36,000 --> 07:16:40,478
so you see here we got some errors


6150
07:16:40,478 --> 07:16:44,240
actually when we talked about in chapter what chapter are we on we're on chapter


6151
07:16:44,240 --> 07:16:48,798
10. in chapter 9 when we talked about running our application on ios we


6152
07:16:48,798 --> 07:16:53,520
actually got something similar there was an error saying that oh your


6153
07:16:53,520 --> 07:16:57,200
uh dependencies firebase they need this


6154
07:16:57,200 --> 07:17:00,958
version but you're on that version and and the under


6155
07:17:00,958 --> 07:17:04,718
and the code that actually solved it if you remember we went to our pod file i


6156
07:17:04,718 --> 07:17:09,840
just put this platform here saying ios 13 because you see we have four


6157
07:17:09,840 --> 07:17:14,718
dependencies at the moment we have firebase auth we have firebase core


6158
07:17:14,718 --> 07:17:18,798
analytics and something else which i don't remember let me have a look at the


6159
07:17:18,798 --> 07:17:23,120
notes here there were core auth cloud firestore and


6160
07:17:23,120 --> 07:17:27,440
firebase analytics these four dependencies they have their


6161
07:17:27,440 --> 07:17:32,958
own requirements so they say that we as dependencies cannot be installed on an


6162
07:17:32,958 --> 07:17:38,718
application that for instance supports a very old android os or a very old ios


6163
07:17:38,718 --> 07:17:44,958
version so these dependencies are putting requirements on your project so


6164
07:17:44,958 --> 07:17:52,000
and we fixed that yes uh in the in chapter nine we fixed that um by going


6165
07:17:52,000 --> 07:17:56,160
into the pod file and commenting out this basically removing


6166
07:17:56,160 --> 07:17:59,920
the comment from this line and changing it from 9


6167
07:17:59,920 --> 07:18:05,600
to 13. so we fix it like that for ios but how do we do it for android now we


6168
07:18:05,600 --> 07:18:09,360
get a lot of great information here and it says that you kind of need to find


6169
07:18:09,360 --> 07:18:15,680
this debug default config and min sdk version okay so let's look for default


6170
07:18:15,680 --> 07:18:22,000
config so i'm going to copy that text and i'm going to then command shift f in


6171
07:18:22,000 --> 07:18:28,240
visual studio code and search for it and as you can see here we have a little um


6172
07:18:28,240 --> 07:18:31,760
flutter version name and then flutter version code to integer


6173
07:18:31,760 --> 07:18:36,638
and i can see here there is information about flutter versions like


6174
07:18:36,638 --> 07:18:39,920
if you go to our build gradle and


6175
07:18:39,920 --> 07:18:44,638
there is a flutter version code to integer that is the


6176
07:18:44,638 --> 07:18:49,600
and the where's the main sdk here min sdk version okay so i'm going to search


6177
07:18:49,600 --> 07:18:54,558
for min sdk version and here i can see it is 19 here it is


6178
07:18:54,558 --> 07:19:01,120
19. and android min sdk version 19 so there's actually quite a lot of


6179
07:19:01,120 --> 07:19:05,120
places where 19 is mentioned all right


6180
07:19:05,120 --> 07:19:11,520
and the error itself let's read it requires a higher android sdk version


6181
07:19:11,520 --> 07:19:16,958
fix this by adding the following to the file build gradle android default config


6182
07:19:16,958 --> 07:19:23,200
min sdk version okay so if we look at the default config here


6183
07:19:23,200 --> 07:19:27,200
it's talking about this thing min sdk version i can see that previously this


6184
07:19:27,200 --> 07:19:31,680
used to be a number and recently it has been changed to flutter min sdk version


6185
07:19:31,680 --> 07:19:36,398
so i'm going to bring up a safari window and i'm going to say change flutter min


6186
07:19:36,398 --> 07:19:41,520
sdk version so let's see what people are actually suggesting is there a good


6187
07:19:41,520 --> 07:19:46,878
command that allows us to do this you see people are still saying that we


6188
07:19:46,878 --> 07:19:52,080
need to do it like that by changing it to a specific version but i believe


6189
07:19:52,080 --> 07:19:57,120
there should be a better way of doing this instead of hard-coding it um


6190
07:19:57,120 --> 07:20:00,240
with the new flutter project with the flutter style you're unable to change


6191
07:20:00,240 --> 07:20:03,760
the mini sdk version and local properties


6192
07:20:03,760 --> 07:20:08,080
great okay so if we go to a file called local.properties that's what they're


6193
07:20:08,080 --> 07:20:10,718
saying here so i'm gonna


6194
07:20:10,718 --> 07:20:15,440
try to find local properties and i can see here


6195
07:20:15,600 --> 07:20:21,680
there is an sdk set here but there is no min sdk version


6196
07:20:21,680 --> 07:20:25,040
so we probably need to just go and fix that


6197
07:20:25,040 --> 07:20:28,638
up so i'm going to copy paste and i'm just going to say flutter.sdk version


6198
07:20:28,638 --> 07:20:34,160
19. okay save that file then i'm going to go back to the main dart and then say


6199
07:20:34,160 --> 07:20:39,200
run without debugging let's see what happens this time


6200
07:20:39,440 --> 07:20:43,040
and if it accepts that local properties change that we just


6201
07:20:43,040 --> 07:20:46,718
made and it's still saying that it won't be


6202
07:20:46,718 --> 07:20:50,718
able to users running so uh what we could do in here to be honest


6203
07:20:50,718 --> 07:20:54,638
with you is just troubleshooting so let's just say go back to the root


6204
07:20:54,638 --> 07:21:00,520
folder of your application and say flutter clean android


6205
07:21:02,160 --> 07:21:06,320
why is it doing the xcode workspace and then say flutter


6206
07:21:06,320 --> 07:21:08,958
pop get


6207
07:21:13,120 --> 07:21:17,600
so if this works properly then it should have cleaned the android code for us and


6208
07:21:17,600 --> 07:21:22,320
like put the version 19 in our build gradle like this should actually resolve


6209
07:21:22,320 --> 07:21:27,280
to 19 so let's go to main dart and just give it one more try if this if this


6210
07:21:27,280 --> 07:21:30,718
solution doesn't work then we unfortunately have to go into our


6211
07:21:30,718 --> 07:21:34,878
build gradle file and and do what was recommended and put the min sdk version


6212
07:21:34,878 --> 07:21:38,558
there as a constant value of 19 just to get the code


6213
07:21:38,558 --> 07:21:42,958
compiling so let's have a look here at um


6214
07:21:42,958 --> 07:21:47,360
what our gradle build is gonna do


6215
07:21:47,680 --> 07:21:50,240
so i don't really know what happened with


6216
07:21:50,240 --> 07:21:52,398
it


6217
07:21:53,840 --> 07:21:58,398
i it doesn't seem to really be doing anything so one more try run without


6218
07:21:58,398 --> 07:22:02,320
debugging and see what happens launching


6219
07:22:02,558 --> 07:22:05,920
i'm gonna have a look at my android phone here as well running gradle task


6220
07:22:05,920 --> 07:22:08,718
assemble debug


6221
07:22:10,638 --> 07:22:14,718
and for me it's not running anything at the moment on this on this phone so what


6222
07:22:14,718 --> 07:22:19,040
we're gonna do is let's go to i mean this solution didn't work so


6223
07:22:19,040 --> 07:22:23,440
i'm gonna remove that and i'm gonna go to build gradle and put the


6224
07:22:23,440 --> 07:22:28,798
target sdk version i think that was the min sdk version sorry


6225
07:22:28,798 --> 07:22:33,200
and here we're just gonna say 19 instead okay


6226
07:22:33,200 --> 07:22:36,638
like that like it was actually suggested to us so


6227
07:22:36,638 --> 07:22:40,718
um let's then go to main dart and then say run without debugging one more time


6228
07:22:40,718 --> 07:22:45,120
and if this solution doesn't work i may actually have to like restart the visual


6229
07:22:45,120 --> 07:22:48,638
studio code if it's kind of confused for some reason


6230
07:22:48,638 --> 07:22:52,878
because usually when you say gradle like when you start the build


6231
07:22:52,878 --> 07:22:57,680
process it actually gives you some feedback it either says that something


6232
07:22:57,680 --> 07:23:03,920
failed or that yeah i um it then ran successfully and in this


6233
07:23:03,920 --> 07:23:07,200
case i can see it's not running so i'm just gonna say quit visual studio code


6234
07:23:07,200 --> 07:23:10,160
okay and then i'm gonna bring up visual


6235
07:23:10,160 --> 07:23:13,440
studio code so i have a lot of projects usually so


6236
07:23:13,440 --> 07:23:16,398
i'm gonna [Music]


6237
07:23:16,398 --> 07:23:20,558
minimize all of these things and i'm going to only open


6238
07:23:20,558 --> 07:23:25,280
our my notes application so let's go in there


6239
07:23:25,280 --> 07:23:29,920
to our my notes application and let's give this a try one more time i'm going


6240
07:23:29,920 --> 07:23:34,558
to go to run without debugging and let's see what happens


6241
07:23:35,040 --> 07:23:39,280
oh now it's choosing iphone 13 pro in debug mode so that's because i restarted


6242
07:23:39,280 --> 07:23:42,558
visual studio code and it doesn't know which device to run on so i'm going to


6243
07:23:42,558 --> 07:23:46,160
say select device and then choose my android phone again


6244
07:23:46,160 --> 07:23:52,080
run run without debugging and hopefully crossing my fingers here


6245
07:23:52,080 --> 07:23:55,120
that since we've changed the


6246
07:23:55,120 --> 07:23:58,160
um version number then it's going to work


6247
07:23:58,160 --> 07:24:01,040
and i can see here


6248
07:24:02,478 --> 07:24:07,600
i see so now it's com complaining about multi-decks so i mean this is great


6249
07:24:07,600 --> 07:24:11,280
stuff i'm so glad that we're seeing all these errors because usually we don't


6250
07:24:11,280 --> 07:24:14,798
have the possible i mean usually you see in tutorials that yeah everything's


6251
07:24:14,798 --> 07:24:19,120
working fine uh he clicked there and clicked there and everything worked but


6252
07:24:19,120 --> 07:24:23,600
here we're actually getting to the point where you see every issue that could


6253
07:24:23,600 --> 07:24:26,798
arise and then we're gonna fix it together and this is like a day in the


6254
07:24:26,798 --> 07:24:31,760
life of a software developer things go wrong but then you'll have to fix it so


6255
07:24:31,760 --> 07:24:35,520
um this multi-dex is something that you'll have to


6256
07:24:35,520 --> 07:24:42,478
configure and we're going to say use multi-dex flag so


6257
07:24:42,478 --> 07:24:46,798
i'm going to go to safari and i'm going to paste it here


6258
07:24:46,798 --> 07:24:50,958
um and then there is a solution hopefully somewhere in our default


6259
07:24:50,958 --> 07:24:54,478
config you see it says multi-dex enabled so


6260
07:24:54,478 --> 07:24:59,760
let's go to your to the build gradle in app which is right here


6261
07:24:59,760 --> 07:25:04,558
you see android app build gradle in your default config as it says here


6262
07:25:04,558 --> 07:25:08,878
multi-decks enabled just bring it here it's it there


6263
07:25:08,878 --> 07:25:13,520
and then go to your dependencies at the bottom of this file right here and bring


6264
07:25:13,520 --> 07:25:18,398
implementation multi-decks right there okay so i'm just going to paste it right


6265
07:25:18,398 --> 07:25:23,440
there go back to my main guard file here and then say run run without debugging


6266
07:25:23,440 --> 07:25:27,798
so let's see what happens


6267
07:25:28,000 --> 07:25:31,120
and there are some warnings here that are printed in red you don't have to


6268
07:25:31,120 --> 07:25:34,878
worry about them so much right now there are warnings as their name


6269
07:25:34,878 --> 07:25:39,360
suggests so um you don't have to worry so much to be honest with you as i


6270
07:25:39,360 --> 07:25:44,478
mentioned so there we go here is um our flutter


6271
07:25:44,478 --> 07:25:49,600
application now working and running on um


6272
07:25:49,600 --> 07:25:55,120
on the actual phone so i'm gonna bring then the phone here


6273
07:25:55,120 --> 07:25:59,440
and you can see it is showing the exact same thing so if i with my mouse go over


6274
07:25:59,440 --> 07:26:03,040
you can't see that because you're actually seeing my face


6275
07:26:03,040 --> 07:26:06,798
so um and then you will see the value 3


6276
07:26:06,798 --> 07:26:10,878
printed here as well so that's that's great


6277
07:26:10,878 --> 07:26:14,320
stuff um


6278
07:26:14,320 --> 07:26:17,320
then


6279
07:26:23,840 --> 07:26:28,798
i don't know why this uh screen is rotated


6280
07:26:28,798 --> 07:26:32,398
i rotate it back oh it's because my phone is actually


6281
07:26:32,398 --> 07:26:37,120
rotated so i'm gonna rotate it back so it's uh


6282
07:26:37,680 --> 07:26:42,320
it's not rotated in the wrong orientation great so we got a lot of


6283
07:26:42,320 --> 07:26:46,160
problems to be honest with you there um but that's okay that's usually what


6284
07:26:46,160 --> 07:26:50,160
happens when we're working with mobile development at least in the beginning


6285
07:26:50,160 --> 07:26:53,360
when you're doing the setup so i'm actually


6286
07:26:53,360 --> 07:26:57,920
grateful that we're getting these errors so you see them so you don't just think


6287
07:26:57,920 --> 07:27:01,440
everything is going to work from the absolute beginning so


6288
07:27:01,440 --> 07:27:04,160
even though as i said in the introduction i haven't planned all of


6289
07:27:04,160 --> 07:27:08,240
this that these errors come up i don't want things to be perfect so even though


6290
07:27:08,240 --> 07:27:12,958
that is happening but i'm still quite grateful that they are happening so


6291
07:27:12,958 --> 07:27:18,558
what we need to talk about now is something called screen sleeping and um


6292
07:27:18,558 --> 07:27:23,680
as you're developing your uh application on your android telephone or tablet


6293
07:27:23,680 --> 07:27:28,398
you'll notice that you will run your application on the phone or the tablet


6294
07:27:28,398 --> 07:27:31,680
and then after after a short while your screen will go


6295
07:27:31,680 --> 07:27:34,398
to sleep which means the screen will be locked


6296
07:27:34,398 --> 07:27:38,558
and then when you try to then rerun or rerun your application or re refresh


6297
07:27:38,558 --> 07:27:41,920
your application then you will get an error from flutter saying that it cannot


6298
07:27:41,920 --> 07:27:45,280
deploy the application because the device is locked so


6299
07:27:45,280 --> 07:27:48,638
that is quite annoying that the telephone does it but it is for a good


6300
07:27:48,638 --> 07:27:52,320
reason the telephones like for security purposes they have to lock the screen so


6301
07:27:52,320 --> 07:27:55,280
that if you leave it somewhere on a bench or something in a park and you


6302
07:27:55,280 --> 07:27:59,040
just forget it and you go away then it is locked so no one's going to get


6303
07:27:59,040 --> 07:28:03,760
access to your telephones data with that said what we need to do


6304
07:28:03,760 --> 07:28:07,280
is disable it while you're developing your applications because


6305
07:28:07,280 --> 07:28:10,638
what you want is a telephone that's always there is available the screen


6306
07:28:10,638 --> 07:28:14,558
doesn't lock so you can always deploy a newer version of our application to it


6307
07:28:14,558 --> 07:28:20,000
or as or as long as you you don't lock it yourself manually


6308
07:28:20,000 --> 07:28:23,440
so what we're going to do is i'm going to bring up the phone here so you see


6309
07:28:23,440 --> 07:28:28,840
what i'm doing i'm going to go here i'm going to go to the settings


6310
07:28:28,840 --> 07:28:32,558
screen um here and


6311
07:28:32,558 --> 07:28:35,920
you will probably need to i mean in order for you to actually even be able


6312
07:28:35,920 --> 07:28:39,920
to run your application and do funky things with your application on your


6313
07:28:39,920 --> 07:28:43,360
telephone you need to enable something called developer remote so developer


6314
07:28:43,360 --> 07:28:48,000
mode on android and on ios is a series of development tools that the phone


6315
07:28:48,000 --> 07:28:52,240
provides only to developers and in order to get those tools you need to perform a


6316
07:28:52,240 --> 07:28:56,398
series of actions like a monkey or something on your telephone and


6317
07:28:56,398 --> 07:29:00,320
um i'm not going to provide instructions exactly how to do that for all different


6318
07:29:00,320 --> 07:29:03,200
phones because depending on the manufacturer of your telephone


6319
07:29:03,200 --> 07:29:07,200
especially if it's on android then developer mode is brought


6320
07:29:07,200 --> 07:29:11,040
into life in a different way so what you need to do is to find out the


6321
07:29:11,040 --> 07:29:15,200
manufacturer of your telephone and the model of your telephone here is a


6322
07:29:15,200 --> 07:29:20,718
oneplus pro 7 i believe and then google and say oneplus pro 7 developer options


6323
07:29:20,718 --> 07:29:23,600
or developer mode then you'll get some information about


6324
07:29:23,600 --> 07:29:28,000
how to enable that i've already done that so if i go to i believe it's


6325
07:29:28,000 --> 07:29:31,440
utilities or sorry i think it's system then


6326
07:29:31,440 --> 07:29:35,520
you can see there then i have an option called developer options okay


6327
07:29:35,520 --> 07:29:39,760
so in order to disable screen sleeping you have to go to developer option and


6328
07:29:39,760 --> 07:29:45,200
say stay awake and that is by default disabled all


6329
07:29:45,200 --> 07:29:47,440
right


6330
07:29:47,680 --> 07:29:50,718
so um


6331
07:29:50,718 --> 07:29:56,718
we've now then talked about um developer tools and we've talked about


6332
07:29:56,718 --> 07:30:02,320
that you can interact with your telephone uh using scrcpy so


6333
07:30:02,320 --> 07:30:06,840
to be honest with you i think i think that's all you need to know for


6334
07:30:06,840 --> 07:30:12,398
um for the android setup there is not much more to talk about the rest is just


6335
07:30:12,398 --> 07:30:17,600
developing our application as usual and then running it on the android phone and


6336
07:30:17,600 --> 07:30:21,680
then mirroring the screen using a crcpy so that's what i'm going to do for the


6337
07:30:21,680 --> 07:30:26,000
entirety of this course i'm going to primarily run the application run our


6338
07:30:26,000 --> 07:30:29,680
application that we're going to develop in this course on this telephone and


6339
07:30:29,680 --> 07:30:33,920
mirror the screen using scr cpy but you may choose to use an ios


6340
07:30:33,920 --> 07:30:38,718
simulator or an android emulator or an ios phone or a tablet whatever


6341
07:30:38,718 --> 07:30:42,320
so i can't provide descriptions about how to do all of


6342
07:30:42,320 --> 07:30:46,398
those things because that is a complete course of its own but at least now you


6343
07:30:46,398 --> 07:30:50,878
have the tools and the necessary information in order to understand how


6344
07:30:50,878 --> 07:30:55,520
you can actually deploy to an iphone and an android phone all right


6345
07:30:55,520 --> 07:30:57,680
so uh


6346
07:30:57,680 --> 07:31:02,320
with that said now we can say that we're actually good to go on android


6347
07:31:02,320 --> 07:31:05,760
um and in the next chapter which is chapter 11 we're going to get to some


6348
07:31:05,760 --> 07:31:10,398
juicy stuff which is uh setting up our project on firebase and if you remember


6349
07:31:10,398 --> 07:31:13,920
from the introduction we're going to use firebase for our back end


6350
07:31:13,920 --> 07:31:17,520
so um then


6351
07:31:17,520 --> 07:31:21,360
you know what's coming in the next chapter and uh now you have the tools


6352
07:31:21,360 --> 07:31:26,718
necessary in order to get the app running so with that said then let's go


6353
07:31:26,718 --> 07:31:30,080
and configure our firebase project in


6354
07:31:30,080 --> 07:31:33,760
chapter 11. hello everyone and welcome to chapter 11


6355
07:31:33,760 --> 07:31:36,478
of this course in this chapter we're going to talk


6356
07:31:36,478 --> 07:31:40,080
about our back end setup which is with firebase


6357
07:31:40,080 --> 07:31:45,120
um and i'm as i as i've said it before i kind of assume that you've gone through


6358
07:31:45,120 --> 07:31:49,040
the chapters of this course chronologically so you started


6359
07:31:49,040 --> 07:31:51,440
from the absolute beginning introduction and then


6360
07:31:51,440 --> 07:31:55,040
you're following along so there's lots and lots of lots of information as you


6361
07:31:55,040 --> 07:31:58,840
can see it's about eight hours of information before this chapter


6362
07:31:58,840 --> 07:32:02,958
so i feel like since i've explained everything so thoroughly in all those


6363
07:32:02,958 --> 07:32:06,958
chapters i'm not going to go through all that again


6364
07:32:06,958 --> 07:32:10,638
so i will jump over stuff that i've already explained so i if you haven't


6365
07:32:10,638 --> 07:32:15,280
watched those chapters i really suggest that you at least skim


6366
07:32:15,280 --> 07:32:19,440
over them a little bit so you see so you get the gist of it


6367
07:32:19,440 --> 07:32:23,520
um now i'm looking at my notes and i can see


6368
07:32:23,520 --> 07:32:27,520
that in this chapter as the caption shows here we're gonna set up our back


6369
07:32:27,520 --> 07:32:33,920
end our backend is using firebase and while developing this course i


6370
07:32:33,920 --> 07:32:38,240
contemplated creating a like as a part of this course have a


6371
07:32:38,240 --> 07:32:42,240
custom backend as well that we do with django i personally do django


6372
07:32:42,240 --> 07:32:47,520
development uh for back-end and websites like rest apis and also for


6373
07:32:47,520 --> 07:32:51,600
simple websites as well but to be honest with you if i then go


6374
07:32:51,600 --> 07:32:56,080
and create a simple back-end with django and then show you how to integrate with


6375
07:32:56,080 --> 07:32:59,920
that using flutter it really has nothing to do with flutter


6376
07:32:59,920 --> 07:33:04,558
like the backend part has nothing to do with flutter itself so


6377
07:33:04,558 --> 07:33:07,520
having that issue in the beginning of this course i


6378
07:33:07,520 --> 07:33:12,798
was faced with a challenge of do i go into the rabbit hole of creating custom


6379
07:33:12,798 --> 07:33:15,120
back for this course


6380
07:33:15,120 --> 07:33:18,080
and walk you through also creating a custom package which has nothing to do


6381
07:33:18,080 --> 07:33:23,280
with flutter and flutter is the reason you were watching this course so i


6382
07:33:23,280 --> 07:33:29,520
was faced with that challenge of whether i should do that or just use uh firebase


6383
07:33:29,520 --> 07:33:34,240
and i choose and i chose firebase simply because it is a product by google it is


6384
07:33:34,240 --> 07:33:37,600
kind of like serverless so it is a server without you actually having to


6385
07:33:37,600 --> 07:33:42,558
write code as such so i picked firebase for its simplicity


6386
07:33:42,558 --> 07:33:48,080
so that we can get the backend working up and running without so much work and


6387
07:33:48,080 --> 07:33:51,440
i hope that you understand that that is the reason that we're not doing a custom


6388
07:33:51,440 --> 07:33:55,040
back-end but firebase is a very reliable uh


6389
07:33:55,040 --> 07:34:00,558
back-end created by google and it has all google's financial backing for


6390
07:34:00,558 --> 07:34:04,080
further developments and for support so you


6391
07:34:04,080 --> 07:34:07,280
don't have to worry if you're picking firebase and if you're thinking oh is it


6392
07:34:07,280 --> 07:34:11,840
going to continue being supported the quick answer is yes it is going to


6393
07:34:11,840 --> 07:34:16,000
be supported it is so big everyone's using it and it's too big even to fail i


6394
07:34:16,000 --> 07:34:19,200
would say right now at least for the


6395
07:34:19,200 --> 07:34:24,240
uh upcoming uh next few years i would say


6396
07:34:24,240 --> 07:34:28,160
i can't predict the future for 10 20 years in the future but


6397
07:34:28,160 --> 07:34:31,840
for now you don't have to worry about that so


6398
07:34:32,000 --> 07:34:35,920
um so that's what we are going to do in


6399
07:34:35,920 --> 07:34:39,280
this chapter i'm just going to take it in my notes um


6400
07:34:39,280 --> 07:34:45,520
now previously when uh flutter came out like in year 2020 or even the beginning


6401
07:34:45,520 --> 07:34:50,000
of 2021 if you want to integrate with


6402
07:34:50,000 --> 07:34:53,120
firebase you have to do a lot of custom work


6403
07:34:53,120 --> 07:34:57,760
now in the recent versions of flutter


6404
07:34:57,760 --> 07:35:01,760
there is a a command that you can issue from your


6405
07:35:01,760 --> 07:35:08,080
terminal it is called flutter fire cli and this command


6406
07:35:08,080 --> 07:35:12,718
is amazing because like the work that you have to previously do manually a lot


6407
07:35:12,718 --> 07:35:17,760
of custom work dragging files and p lists and jsons configurations app ids


6408
07:35:17,760 --> 07:35:23,040
etc etc it was such a big undertaking that a lot of developers


6409
07:35:23,040 --> 07:35:28,320
would make a lot of mistakes during that process and it was just not good so


6410
07:35:28,320 --> 07:35:31,360
um there is now a command that you can


6411
07:35:31,360 --> 07:35:35,280
issue from from your terminal which allows you to do all that custom work


6412
07:35:35,280 --> 07:35:39,600
but it does it for you so you don't have to do do that manually so


6413
07:35:39,600 --> 07:35:43,360
as i provided here there is a link i'm going to open that link


6414
07:35:43,360 --> 07:35:48,240
if i can somewhere let's see if i can bring up safari


6415
07:35:48,240 --> 07:35:53,440
it opens in a wrong screen i'll bring that screen here


6416
07:35:53,440 --> 07:35:58,718
so you'll see it as well enlarge that screen and also enlarge the


6417
07:35:58,718 --> 07:36:03,040
font so it is more visible so you can see it says fluffifier


6418
07:36:03,040 --> 07:36:06,000
overview and it says get to know firebase for


6419
07:36:06,000 --> 07:36:09,280
flutter we recommend starting with the get to


6420
07:36:09,280 --> 07:36:12,798
know firebase for flutter code lab and video okay so there's a video here if


6421
07:36:12,798 --> 07:36:16,558
you want to watch it and uh and it says okay if you're


6422
07:36:16,558 --> 07:36:20,558
migrating your existing project then look at the migration guide migrating if


6423
07:36:20,558 --> 07:36:23,840
you're not familiar with that term uh if you're not coming from a software


6424
07:36:23,840 --> 07:36:27,360
engineer background migrating economy so you have an existing thing and you want


6425
07:36:27,360 --> 07:36:30,958
to make it newer like


6426
07:36:30,958 --> 07:36:35,440
and put in new stuff in it so you kind of migrate your information from the old


6427
07:36:35,440 --> 07:36:38,638
project to the new one so but in this case we don't have to worry


6428
07:36:38,638 --> 07:36:43,360
about that because we're we've created a brand new project so there's no existing


6429
07:36:43,360 --> 07:36:47,760
firebase installation in our application that we have to worry about okay


6430
07:36:47,760 --> 07:36:53,040
there's a lot of information here you can see it says using the cli etc etc


6431
07:36:53,040 --> 07:36:56,638
and that is actually what we're going to do now


6432
07:36:56,638 --> 07:37:02,000
we are going to have a look at how we can install the flutter fire cli


6433
07:37:02,000 --> 07:37:05,920
and you can see here it says you should execute the dart pop global activate


6434
07:37:05,920 --> 07:37:09,520
flussifier cli and then you issue flutter fire


6435
07:37:09,520 --> 07:37:14,638
flussifier config so let's start by copying this code from here copy it and


6436
07:37:14,638 --> 07:37:18,878
i'm going to bring up my terminal and i'm going to increase the size of my


6437
07:37:18,878 --> 07:37:23,360
terminal so you actually see what is happening here okay so i'm gonna paste


6438
07:37:23,360 --> 07:37:27,840
that command in and i'm gonna let it do its thing


6439
07:37:27,840 --> 07:37:31,440
i've already done this installation before so for me it may actually go a


6440
07:37:31,440 --> 07:37:34,398
little bit smoother or a little bit faster but for you it may take a little


6441
07:37:34,398 --> 07:37:38,320
bit longer depending on whether you've already installed flat of rsli before or


6442
07:37:38,320 --> 07:37:41,280
not so now that that is installed the next


6443
07:37:41,280 --> 07:37:45,920
thing you will have to do is you will actually need to make sure i mean it's


6444
07:37:45,920 --> 07:37:48,798
not provided in the documentation but it's something that i'm providing for


6445
07:37:48,798 --> 07:37:53,120
you because i know that i've personally run into this issue before


6446
07:37:53,120 --> 07:37:55,680
so um


6447
07:37:55,680 --> 07:38:01,520
this flutter fire cli it will give you this command as you can see here flutter


6448
07:38:01,520 --> 07:38:07,200
fire okay and if i in my terminal say which flutter fire


6449
07:38:07,200 --> 07:38:11,360
you can see that flutter fire is installed in this folder so it's under


6450
07:38:11,360 --> 07:38:17,200
my personal folder on my computer slash dot pop cache slash bin and then


6451
07:38:17,200 --> 07:38:21,840
right there so unfortunately when you install lots of fire cli it doesn't


6452
07:38:21,840 --> 07:38:26,240
it doesn't tell your terminal where it is installed so if you then immediately


6453
07:38:26,240 --> 07:38:31,040
after that say flutter fire and then blah blah blah as it is mentioned here


6454
07:38:31,040 --> 07:38:35,120
classifier configure your terminal will most probably say that what is flutter


6455
07:38:35,120 --> 07:38:36,798
fire so


6456
07:38:36,798 --> 07:38:39,360
it's not provided here in the documentation but i'm telling you here


6457
07:38:39,360 --> 07:38:42,958
as you can see in the caption that you need to tell your terminal where flutter


6458
07:38:42,958 --> 07:38:47,280
fire is actually installed okay so


6459
07:38:47,280 --> 07:38:51,360
um then what you'll need to do is uh to do


6460
07:38:51,360 --> 07:38:54,638
as i've mentioned here you can see i've said that you need to change your path


6461
07:38:54,638 --> 07:39:00,638
and include your home folder slash pop cache slash bin so if i go to my


6462
07:39:00,638 --> 07:39:06,320
terminal configuration if i say um in


6463
07:39:06,840 --> 07:39:11,200
vshrc you can see at the top here somewhere i


6464
07:39:11,200 --> 07:39:17,280
should have there you see it says export path and i say okay my new path is the


6465
07:39:17,280 --> 07:39:22,958
old path plus using this uh double column here or column


6466
07:39:22,958 --> 07:39:26,718
this folder as i've mentioned here in the captions at the bottom of the screen


6467
07:39:26,718 --> 07:39:31,120
so you will need to do this as well so i'm going to quit vim now and then after


6468
07:39:31,120 --> 07:39:36,558
you've done that make sure that you source that


6469
07:39:37,040 --> 07:39:40,398
configuration so in my case i would have to say source


6470
07:39:40,398 --> 07:39:45,520
zsh rc and that will read the paths um


6471
07:39:45,520 --> 07:39:49,360
fresh otherwise you could also take the high road and like


6472
07:39:49,360 --> 07:39:52,878
close your terminal completely terminated and then start it again which


6473
07:39:52,878 --> 07:39:56,958
in turn reads the configuration and brings flutter fire a path


6474
07:39:56,958 --> 07:40:00,240
into existence


6475
07:40:00,240 --> 07:40:03,920
if you don't want to source that's what i mean


6476
07:40:03,920 --> 07:40:07,120
so now we've talked about that now let's


6477
07:40:07,120 --> 07:40:12,080
actually talk about what the firebase cli is


6478
07:40:12,080 --> 07:40:17,440
it is a um actually let me make sure i tick all of these items that


6479
07:40:17,440 --> 07:40:20,878
i talked about


6480
07:40:20,958 --> 07:40:24,798
in right now let me just mark them as done


6481
07:40:24,798 --> 07:40:28,638
in my notes so


6482
07:40:29,200 --> 07:40:33,040
um so what you need to do now is what we


6483
07:40:33,040 --> 07:40:37,040
need to do now is to talk about firebase cli


6484
07:40:37,040 --> 07:40:40,398
and um as you can see here is a cli to help us


6485
07:40:40,398 --> 07:40:43,760
interact with firebase right from our terminal now


6486
07:40:43,760 --> 07:40:47,440
um this this used to be done manually


6487
07:40:47,440 --> 07:40:51,520
previously in that you would have to go to firebase and like create a whole


6488
07:40:51,520 --> 07:40:55,760
separate project and then integrate that project into your flosser application so


6489
07:40:55,760 --> 07:40:58,798
you don't have to do any of that anymore so


6490
07:40:58,798 --> 07:41:03,920
um what you need to do now is as the next step is to install the firebase cli


6491
07:41:03,920 --> 07:41:09,600
which does all of that work for you so i've provided here as you can see


6492
07:41:09,600 --> 07:41:13,600
there is a command here that you can issue


6493
07:41:13,600 --> 07:41:19,600
and then you can go to a firebase google com docs cli install cli mac blah blah


6494
07:41:19,600 --> 07:41:24,080
so i'm actually going to go to that location


6495
07:41:24,080 --> 07:41:29,280
in my web browser here so you can see what i'm doing


6496
07:41:29,280 --> 07:41:33,040
here and you will see there's a lot of


6497
07:41:33,040 --> 07:41:36,798
information provided here i'm going to bring up the uh i'm going to make the


6498
07:41:36,798 --> 07:41:39,600
size a little bit bigger i'm going to bring my face maybe to the bottom right


6499
07:41:39,600 --> 07:41:42,958
as well so you can see more information on the screen


6500
07:41:42,958 --> 07:41:46,718
and you can see for mac or linux then there is


6501
07:41:46,718 --> 07:41:50,320
yeah let's go here mag you can install the firebase cli for macro linux using


6502
07:41:50,320 --> 07:41:55,120
one of the following options so standalone binary blah blah so you


6503
07:41:55,120 --> 07:41:59,040
need to have a look at this documentation on on how you can install


6504
07:41:59,040 --> 07:42:03,360
the firebase cli on your on your computer whether you're using mac or


6505
07:42:03,360 --> 07:42:07,840
whether you're using linux or windows so


6506
07:42:09,280 --> 07:42:11,920
so after you've done that after you've


6507
07:42:11,920 --> 07:42:19,600
installed the firebase cli you will actually need to


6508
07:42:19,600 --> 07:42:23,760
log in in your into your account using that


6509
07:42:23,760 --> 07:42:26,958
firebase cli


6510
07:42:26,958 --> 07:42:30,398
so let's let's do that let me actually in


6511
07:42:30,398 --> 07:42:37,440
here um let's bring up our project uh in visual studio code so i'm gonna bring it


6512
07:42:37,440 --> 07:42:41,440
up here and bring up the right caption as well


6513
07:42:41,440 --> 07:42:44,558
so you see what we're talking about we're going to talk about firebase login


6514
07:42:44,558 --> 07:42:49,200
and log out you see when you want to integrate your flutter


6515
07:42:49,200 --> 07:42:52,798
application with firebase you need to create a


6516
07:42:52,798 --> 07:42:56,840
firebase project on something called the firebase console


6517
07:42:56,840 --> 07:43:03,600
so this project is pretty much the configuration of your firebase backend


6518
07:43:03,600 --> 07:43:08,478
on firebase's console on their website so you need to configure a backend so


6519
07:43:08,478 --> 07:43:13,360
what we need to do here is now before we can actually configure it back in


6520
07:43:13,360 --> 07:43:19,040
in your terminal you need to tell firebase what user you have because i


6521
07:43:19,040 --> 07:43:23,040
personally have many google accounts and any one of those google accounts can


6522
07:43:23,040 --> 07:43:28,240
potentially have many flutter sorry many firebase projects


6523
07:43:28,240 --> 07:43:32,878
because firebase projects are linked to your google accounts okay


6524
07:43:32,878 --> 07:43:39,920
now in order for our firebase cli to understand where it needs to create the


6525
07:43:39,920 --> 07:43:44,718
project you need to tell it to log in with an account all right so


6526
07:43:44,718 --> 07:43:48,558
the way to do that is to bring up terminal and as you can see here is my


6527
07:43:48,558 --> 07:43:51,520
terminal and i'm going to clean this a little bit


6528
07:43:51,520 --> 07:43:56,718
i'm going to bring up the font as well so it's quite ginormous and that's okay


6529
07:43:56,718 --> 07:44:01,280
so what you need to do now is to tell it to log in


6530
07:44:01,280 --> 07:44:07,878
so i'm going to say firebase login okay


6531
07:44:08,000 --> 07:44:11,840
it's gonna do its work and it's telling me i'm already logged in with this


6532
07:44:11,840 --> 07:44:15,840
account if you haven't logged in with an account then you're gonna get a prompt


6533
07:44:15,840 --> 07:44:21,840
telling you uh okay which email and password do you wanna log in with so


6534
07:44:21,840 --> 07:44:24,798
now um it may be actually worth it to be


6535
07:44:24,798 --> 07:44:28,638
honest with you for me to log out right now so that you see the entire process


6536
07:44:28,638 --> 07:44:32,478
so i'm a bit hesitant to log out because


6537
07:44:32,478 --> 07:44:36,878
uh i actually have protected my google account with a security key


6538
07:44:36,878 --> 07:44:40,160
so i don't have the key right here and i


6539
07:44:40,160 --> 07:44:44,798
hope that i can find it so for the sake of for the sake of actually


6540
07:44:44,798 --> 07:44:48,478
going through this process together with you so you see how it works i'm gonna


6541
07:44:48,478 --> 07:44:52,558
log out so let's log out here


6542
07:44:52,558 --> 07:44:57,760
so i'm saying firebase logout and it says there is a new version of a


6543
07:44:57,760 --> 07:45:04,080
firebase tool so let's copy this here and i'm gonna see if we can install


6544
07:45:04,080 --> 07:45:07,840
um what did it say npm install


6545
07:45:07,840 --> 07:45:15,360
global so let's copy that here global firebase tools okay


6546
07:45:15,520 --> 07:45:19,520
if it can do its work then before we can continue


6547
07:45:19,520 --> 07:45:25,280
and npm is something called a node package manager and it is kind of like


6548
07:45:25,280 --> 07:45:29,200
if you're working with node.js if you're developing for instance node


6549
07:45:29,200 --> 07:45:32,080
applications which you which you don't have to know


6550
07:45:32,080 --> 07:45:37,600
about it's just a way it's like a tool kit for creating applications uh


6551
07:45:37,600 --> 07:45:42,080
remove the existing file and try again or npm with force okay


6552
07:45:42,080 --> 07:45:48,798
npm install global with dash dash force i think


6553
07:45:48,798 --> 07:45:51,360
yeah so it's it's like a dependency


6554
07:45:51,360 --> 07:45:55,840
management for node applications and firebase tools is


6555
07:45:55,840 --> 07:46:00,240
a node application so that's all you need to know really i mean there's there


6556
07:46:00,240 --> 07:46:04,160
are courses available about node and node.js then you can actually have a


6557
07:46:04,160 --> 07:46:09,120
look at how they work etc so i'm not going to go into details about that so


6558
07:46:09,120 --> 07:46:13,440
before i could i mean i could have actually done a firebase logout without


6559
07:46:13,440 --> 07:46:17,840
all of this but i just want to show you that things aren't planned like i can't


6560
07:46:17,840 --> 07:46:21,200
perfectly plan things here and when i tried to log out it said oh there's a


6561
07:46:21,200 --> 07:46:24,240
new version of node available blah blah so


6562
07:46:24,240 --> 07:46:28,000
now that i think sorry there's a new version of firebase tools available that


6563
07:46:28,000 --> 07:46:31,200
you can use that you can install with npm so


6564
07:46:31,200 --> 07:46:37,440
i did that so let's now say uh firebase logout


6565
07:46:37,680 --> 07:46:40,840
okay so the logit actually was successful


6566
07:46:40,840 --> 07:46:46,240
previously and so let's now say firebase login


6567
07:46:46,240 --> 07:46:49,760
and it says allow firebase to collect cli usage and error reporting


6568
07:46:49,760 --> 07:46:53,440
information i'm gonna say as a developer to be honest with you


6569
07:46:53,440 --> 07:46:59,440
you may you may be tended to say no like here but if you are a developer you can


6570
07:46:59,440 --> 07:47:02,878
put your shoe you can put yourself in the shoes of another developer working


6571
07:47:02,878 --> 07:47:07,520
at google working for firebase and they are trying to get some information about


6572
07:47:07,520 --> 07:47:12,558
how you use the cli and whether they can learn from your usage of the cli in


6573
07:47:12,558 --> 07:47:17,120
order to make the cli better so i usually say yes to these things


6574
07:47:17,120 --> 07:47:20,878
especially if there's a developer asking for permission so but you can say no to


6575
07:47:20,878 --> 07:47:23,440
this if you want to so i'm just going to say yes


6576
07:47:23,440 --> 07:47:27,440
and you can see here then there's a screen provided here asking me to log in


6577
07:47:27,440 --> 07:47:30,958
with one of my google accounts all right and


6578
07:47:30,958 --> 07:47:34,000
i'm going to pick my company's google account because that's what i usually


6579
07:47:34,000 --> 07:47:38,398
use all right so i'm going to choose that and it says firebase cli wants to


6580
07:47:38,398 --> 07:47:42,798
access your google account and it says okay what permissions it's going to use


6581
07:47:42,798 --> 07:47:45,520
you can have a look at this information if you want to


6582
07:47:45,520 --> 07:47:49,200
if it concerns you so if you if you're concerned about any of these things


6583
07:47:49,200 --> 07:47:52,638
please go and read the links provided here


6584
07:47:52,638 --> 07:47:55,760
i'm just going to say allow and once that is done you will see that


6585
07:47:55,760 --> 07:48:00,240
it says firebase cli login successful and then you can pretty much just close


6586
07:48:00,240 --> 07:48:06,080
this window safely and now it says logged in as pixelityav


6587
07:48:06,080 --> 07:48:11,360
gmail.com so i can say firebase login again and that would be the prompt that


6588
07:48:11,360 --> 07:48:16,718
you saw in the beginning of this video that you are logged in alright


6589
07:48:16,718 --> 07:48:19,360
good that was a lot of information now now


6590
07:48:19,360 --> 07:48:25,520
that you are logged in with the firebase cli you actually need to configure a


6591
07:48:25,520 --> 07:48:31,280
firebase project all right and we do that with the flutter fire cli which we


6592
07:48:31,280 --> 07:48:34,958
installed in the beginning of this chapter using this command dart pop


6593
07:48:34,958 --> 07:48:41,040
global activate all right so what you need to do now is to


6594
07:48:41,040 --> 07:48:44,558
issue the flutter fire configure


6595
07:48:44,558 --> 07:48:48,798
command as i've shown here down at on the left hand side so i'm going to do


6596
07:48:48,798 --> 07:48:54,398
that flutter fire configure so it will fetch all the projects that


6597
07:48:54,398 --> 07:48:59,920
i've already created in my google account and it says okay these


6598
07:48:59,920 --> 07:49:04,798
are the projects available flash chat fluffer note guessing chords random


6599
07:49:04,798 --> 07:49:09,360
project testing or you can create a new project


6600
07:49:09,360 --> 07:49:12,878
now i'm going to choose create a new project here okay


6601
07:49:12,878 --> 07:49:16,000
and it says okay enter a project id for your


6602
07:49:16,000 --> 07:49:20,798
new firebase project so what i'm going to do here is i'm just going to type my


6603
07:49:20,798 --> 07:49:23,920
notes all right so


6604
07:49:23,920 --> 07:49:28,638
as you can see my notes is the name of our flutter project as


6605
07:49:28,638 --> 07:49:32,320
well so my notes now i'm going to say okay i'm going to create the same


6606
07:49:32,320 --> 07:49:37,280
project called my notes okay i'm going to press enter here


6607
07:49:37,280 --> 07:49:40,718
i says yeah i'm going to create it and it's probably


6608
07:49:40,718 --> 07:49:44,718
i mean you can see that we immediately got an error saying that


6609
07:49:44,718 --> 07:49:47,200
this project already exists and you can see


6610
07:49:47,200 --> 07:49:49,760
um command blah blah blah yeah fail to


6611
07:49:49,760 --> 07:49:52,558
create a project because there's already a project with


6612
07:49:52,558 --> 07:49:56,878
with id mynotes please try again with a unique project id so


6613
07:49:56,878 --> 07:50:01,120
this is basically telling us that hey someone else has created my notes and it


6614
07:50:01,120 --> 07:50:04,958
wasn't one of the projects that we had created because if you if you have a


6615
07:50:04,958 --> 07:50:08,718
look at your if you open uh your web browser and say


6616
07:50:08,718 --> 07:50:14,240
firebase console go to your firebase console


6617
07:50:14,240 --> 07:50:19,360
and uh let me make sure that i'm logged in with my pixelity account yes


6618
07:50:19,360 --> 07:50:23,680
and if i have a look let's see dismiss let's


6619
07:50:23,680 --> 07:50:27,920
see get started firebase helps you watch


6620
07:50:27,920 --> 07:50:30,798
demo yeah we are logged in with that account


6621
07:50:30,798 --> 07:50:34,398
so i can actually see maybe i don't have any projects set up here which is a


6622
07:50:34,398 --> 07:50:37,600
little bit weird because we actually saw that there were some


6623
07:50:37,600 --> 07:50:41,440
projects set up under this account so i don't understand why the firebase


6624
07:50:41,440 --> 07:50:44,878
console so it's not showing them um


6625
07:50:44,878 --> 07:50:49,280
firebase console backed by google firebase console google


6626
07:50:49,280 --> 07:50:54,798
yeah there they are okay so it is on console.firebase.google okay


6627
07:50:54,798 --> 07:51:00,558
and i can see that my notes application is not an application that i own i


6628
07:51:00,558 --> 07:51:05,840
haven't created that so what it is saying is that globally


6629
07:51:05,840 --> 07:51:09,760
firebase projects have an identifier and now i've entered an identifier that is


6630
07:51:09,760 --> 07:51:13,120
already taken so what i'm going to do then is i'm going


6631
07:51:13,120 --> 07:51:18,878
to issue the same command uh firebase flutter fire configure and this


6632
07:51:18,878 --> 07:51:22,080
time i'm going to give it a little bit more information about the project name


6633
07:51:22,080 --> 07:51:26,878
so that makes it a little bit more unique so i'm going to choose


6634
07:51:26,878 --> 07:51:29,920
create a new project and then in here in the name of the


6635
07:51:29,920 --> 07:51:36,558
project i'm going to say mynotes flutter project


6636
07:51:36,558 --> 07:51:40,000
maybe someone has already taken this as well


6637
07:51:40,000 --> 07:51:42,478
i don't know


6638
07:51:42,638 --> 07:51:49,558
so it's doing its thing it's doing its magic basically so let's have a look


6639
07:51:51,760 --> 07:51:55,440
and i mean this is okay that is taking some time it


6640
07:51:55,440 --> 07:51:58,798
is doing a lot of work it's setting up like the ios project and android project


6641
07:51:58,798 --> 07:52:02,478
etc so this thing used to take a lot of time to


6642
07:52:02,478 --> 07:52:06,638
do by hand like maybe 10 folds the amount of time that this


6643
07:52:06,638 --> 07:52:11,360
cli is taking so i'm not so bothered by the fact that it's taking some time so


6644
07:52:11,360 --> 07:52:14,718
and here it will actually tell you okay which platforms do you want to select


6645
07:52:14,718 --> 07:52:19,840
and as i said like flutter allows you to create web applications android


6646
07:52:19,840 --> 07:52:23,360
applications ios applications and also uh


6647
07:52:23,360 --> 07:52:27,680
desktop applications or four platforms and then here it says okay which ones do


6648
07:52:27,680 --> 07:52:31,600
you want to create for our project right now you can just


6649
07:52:31,600 --> 07:52:35,440
say android and ios you don't have to worry about like


6650
07:52:35,440 --> 07:52:40,240
um mac os or linux or windows and web but


6651
07:52:40,240 --> 07:52:43,920
you have the ability to do that if you want to so choose android and ios for


6652
07:52:43,920 --> 07:52:50,320
now and press enter so it's gonna do its work


6653
07:52:53,760 --> 07:52:57,520
so let it do its magic


6654
07:52:58,478 --> 07:53:03,360
and now this is this is the amazing part that you had to do manually before you


6655
07:53:03,360 --> 07:53:08,160
had to previously go and register like your application with


6656
07:53:08,160 --> 07:53:11,440
apple and then go and register bundle identifier and then put the bundle


6657
07:53:11,440 --> 07:53:15,520
identifier manually in firebase and then download some files put those files in


6658
07:53:15,520 --> 07:53:19,200
your ios and android project now now you don't have to do that anymore


6659
07:53:19,200 --> 07:53:22,798
here it just tells you which bundle identifier are you using for your


6660
07:53:22,798 --> 07:53:26,798
project and if you remember from before when we created our flutter project from


6661
07:53:26,798 --> 07:53:33,360
the beginning we said flutter create and then an organization which for me was s


6662
07:53:33,360 --> 07:53:35,920
e dot pixolity do you remember that command


6663
07:53:35,920 --> 07:53:40,398
it kind of looked like um i mean if i bring up terminal maybe i


6664
07:53:40,398 --> 07:53:45,280
can even go back to it flutter create do you remember this command i will zoom


6665
07:53:45,280 --> 07:53:48,878
into it a little bit so you can see better this is how we actually created


6666
07:53:48,878 --> 07:53:54,000
our project we said flutter create.org as he pixeled in my notes so the bundle


6667
07:53:54,000 --> 07:53:57,680
identifier for this application will be sepixolity.mynotes


6668
07:53:57,680 --> 07:54:02,398
however since sc pixelity is the reverse domain for me this won't this won't be


6669
07:54:02,398 --> 07:54:06,000
the case for you so go back to how you created that


6670
07:54:06,000 --> 07:54:09,840
identifier for a project using your organization name and you now you have


6671
07:54:09,840 --> 07:54:14,160
to paste that in here so you will see i'm going to say s e


6672
07:54:14,160 --> 07:54:19,280
pixelity dot my notes okay


6673
07:54:19,280 --> 07:54:24,798
so enter that and it's going to configure your ios


6674
07:54:24,798 --> 07:54:27,520
project for you


6675
07:54:30,320 --> 07:54:33,920
and that was it so it has now


6676
07:54:33,920 --> 07:54:38,718
set up everything necessary for your project to work so i mean you may you


6677
07:54:38,718 --> 07:54:42,718
may just think oh well this was this was so little and what did it actually do


6678
07:54:42,718 --> 07:54:47,120
but for me who's been working with firebase and flutter for a very long


6679
07:54:47,120 --> 07:54:50,080
time this is all magical because it did a lot


6680
07:54:50,080 --> 07:54:54,080
of work it configured your application on the firebase console it actually


6681
07:54:54,080 --> 07:54:59,760
registered an android and an ios project hooked into this firebase project


6682
07:54:59,760 --> 07:55:05,040
downloaded the configuration files place them in the exact correct place in your


6683
07:55:05,040 --> 07:55:08,558
application so it did a lot of work but you don't


6684
07:55:08,558 --> 07:55:13,360
really have to know about that so um now if you want to kind of see the


6685
07:55:13,360 --> 07:55:17,280
result of it if you see here the output of this says that there is an identifier


6686
07:55:17,280 --> 07:55:21,280
associated with your ios app and then there's an identifier associated with


6687
07:55:21,280 --> 07:55:25,760
your android app so that's what we're going to do now


6688
07:55:25,760 --> 07:55:30,478
let's now make sure that these identifiers are correct and that the


6689
07:55:30,478 --> 07:55:35,600
bundle identifier that we provided to the cli is also placed in the


6690
07:55:35,600 --> 07:55:40,160
configuration file correctly so copy this for instance ios identifier


6691
07:55:40,160 --> 07:55:45,120
that was created for you so copy it and then search for it in your entire


6692
07:55:45,120 --> 07:55:49,360
project and then you'll find a little file here and let me bring it down


6693
07:55:49,360 --> 07:55:53,840
it is called firebaseoptions.dart


6694
07:55:53,840 --> 07:55:59,600
so this is where ios is configured and let me bring this like that so you don't


6695
07:55:59,600 --> 07:56:02,398
see it and this is where the android project is


6696
07:56:02,398 --> 07:56:08,638
configured you can see the um app id is right here and the api key is


6697
07:56:08,638 --> 07:56:13,200
right there so don't worry about this i mean you should not show your api key


6698
07:56:13,200 --> 07:56:19,520
and app id to anybody um so but since i'm developing this course for you i


6699
07:56:19,520 --> 07:56:23,040
have to show it i can't just go and censor it but don't worry about it by


6700
07:56:23,040 --> 07:56:26,878
the time you're seeing this um video by the time you're seeing this course i've


6701
07:56:26,878 --> 07:56:30,080
already deleted this project from firebase so there's not going to be any


6702
07:56:30,080 --> 07:56:33,600
security risk involved so um


6703
07:56:33,600 --> 07:56:37,040
so that project isn't going to exist even if you know the api key on app id


6704
07:56:37,040 --> 07:56:41,120
so don't worry about that but if you are developing your own application just


6705
07:56:41,120 --> 07:56:46,878
kind of be careful who you share your api key and app id with all right


6706
07:56:46,878 --> 07:56:52,718
that was a lot of information a lot a lot a lot so um


6707
07:56:52,718 --> 07:56:59,280
and i'm gonna actually tick here that we've talked about that


6708
07:56:59,280 --> 07:57:04,798
i create a new project and yeah that's that's all working as it


6709
07:57:04,798 --> 07:57:08,398
should so i'm also gonna go here in the


6710
07:57:08,398 --> 07:57:12,398
captions and i can see that i have some information here about enabling


6711
07:57:12,398 --> 07:57:17,040
multi-decks and multi-dex was something that we've already enabled in the


6712
07:57:17,040 --> 07:57:21,120
previous chapter which was chapter 10 for the android project so


6713
07:57:21,120 --> 07:57:25,280
now everything should be working as it did before to be honest with you so if


6714
07:57:25,280 --> 07:57:29,040
you in your visual studio code or android studio if you're developing


6715
07:57:29,040 --> 07:57:32,000
under your flutter app with android studio you can also


6716
07:57:32,000 --> 07:57:36,718
go and select your device to run on now in the previous chapter you saw that for


6717
07:57:36,718 --> 07:57:40,558
the entirety of this chat in this course i'm gonna use an android phone to


6718
07:57:40,558 --> 07:57:45,920
develop uh our application so you may choose to use an io simulator an android


6719
07:57:45,920 --> 07:57:49,920
emulator or an android phone or tablet or ios phone or tablet so but i'm gonna


6720
07:57:49,920 --> 07:57:56,160
use a real android phone and as you saw we have the ability to bring up scr cpy


6721
07:57:56,160 --> 07:58:02,878
to mirror the android screen so i'm going to bring it right here


6722
07:58:02,878 --> 07:58:06,558
change the size of visual studio codes window a little bit so you can see the


6723
07:58:06,558 --> 07:58:10,558
android um telephone right there as well then what i'm going to do


6724
07:58:10,558 --> 07:58:14,718
just to make sure that the project runs after all of this work that we've done


6725
07:58:14,718 --> 07:58:19,200
so that we haven't broken anything really let's then go and


6726
07:58:19,200 --> 07:58:23,040
debug the application sorry run it without debugging and this


6727
07:58:23,040 --> 07:58:27,120
is this is why you will see this is the result of all the work that we've done


6728
07:58:27,120 --> 07:58:30,638
pretty much nothing this is like


6729
07:58:30,638 --> 07:58:33,760
i mean it sounds funny to say it because we did


6730
07:58:33,760 --> 07:58:37,440
a lot of work with the firebase project but there is nothing that you can see on


6731
07:58:37,440 --> 07:58:40,718
the screen and that's that's the reality of doing software development you may be


6732
07:58:40,718 --> 07:58:44,240
putting a lot of work sometimes in doing something and this result isn't


6733
07:58:44,240 --> 07:58:48,638
immediately visible all right so but what you have done in this


6734
07:58:48,638 --> 07:58:52,240
chapter was that you actually set up your back end with just a few commands


6735
07:58:52,240 --> 07:58:57,360
you installed two clis the flutter fire cli and the firebase cli you logged in


6736
07:58:57,360 --> 07:59:02,398
with firebase cli and then you set up your backend with the flutter fire cli


6737
07:59:02,398 --> 07:59:04,798
all right now just to make sure everything is set


6738
07:59:04,798 --> 07:59:08,398
up properly also you can bring up your web browser i'm gonna bring it up here


6739
07:59:08,398 --> 07:59:12,958
and i'm gonna say console.firebase and


6740
07:59:12,958 --> 07:59:16,558
let me make sure that we have


6741
07:59:16,558 --> 07:59:20,558
our notes app here you can see my node slatter project


6742
07:59:20,558 --> 07:59:23,760
and you can click on it and you can see how it is set up for you you can see


6743
07:59:23,760 --> 07:59:27,920
there is an android app setup and an ios app setup so


6744
07:59:27,920 --> 07:59:31,520
you didn't have to really do anything now there's lots of things you can do


6745
07:59:31,520 --> 07:59:34,558
with firebase which we're going to actually play with throughout this


6746
07:59:34,558 --> 07:59:38,878
course but not right now just make sure that your


6747
07:59:38,878 --> 07:59:44,920
firebase project is created for you by logging into console.firebase.google.com


6748
07:59:45,280 --> 07:59:47,840
many dots


6749
07:59:48,160 --> 07:59:52,798
all right and we've talked about this now running the application on an


6750
07:59:52,798 --> 07:59:57,040
android telephone so that was already set up so we don't have


6751
07:59:57,040 --> 08:00:00,718
to talk about that now now that you've seen that you've set up


6752
08:00:00,718 --> 08:00:06,558
your backend you're ready to go and uh so i can say congratulations so that's


6753
08:00:06,558 --> 08:00:10,080
in order now


6754
08:00:10,080 --> 08:00:13,360
the android setup is already done so i can see that that is set up we don't


6755
08:00:13,360 --> 08:00:18,080
have to talk about that either however


6756
08:00:18,080 --> 08:00:21,760
what we do need to talk about is what we're gonna


6757
08:00:21,760 --> 08:00:26,558
discuss in the next chapter so


6758
08:00:26,558 --> 08:00:31,680
in the next chapter we are for the first time in this course we are going to talk


6759
08:00:31,680 --> 08:00:36,080
about the uh footer code actual thoughts or


6760
08:00:36,080 --> 08:00:41,600
code we're going to start writing a simple registration screen so using this


6761
08:00:41,600 --> 08:00:46,320
registration screen our right now hypothetical users are going


6762
08:00:46,320 --> 08:00:50,638
to look at the screen and say okay i don't


6763
08:00:50,638 --> 08:00:54,080
have an account with this application i'm going to register myself so


6764
08:00:54,080 --> 08:00:58,000
then you will be able to they will be able to enter


6765
08:00:58,000 --> 08:01:03,520
their email address a password of their uh choosing press some sort of a button


6766
08:01:03,520 --> 08:01:08,000
and we will then talk with firebase and say here's a new user register that


6767
08:01:08,000 --> 08:01:13,840
person okay so that's all for the next chapter which is chapter 12. so grab a


6768
08:01:13,840 --> 08:01:16,558
cup of coffee cup of tea whatever you want to do


6769
08:01:16,558 --> 08:01:20,878
get refreshed then and i'll see you in the next chapter


6770
08:01:20,878 --> 08:01:24,718
hello and welcome to chapter number 12 of this filter course


6771
08:01:24,718 --> 08:01:28,080
in this chapter and which i'm very excited about we're going to talk about


6772
08:01:28,080 --> 08:01:33,200
a basic register screen well up until this point we've been really configuring


6773
08:01:33,200 --> 08:01:36,718
our i mean if we go chronologically we've had the introduction we've gone


6774
08:01:36,718 --> 08:01:40,080
through so many chapters to talk about dart and its basics and even some more


6775
08:01:40,080 --> 08:01:43,600
advanced topics such as generics


6776
08:01:44,478 --> 08:01:49,200
and then as soon as we did that then we


6777
08:01:49,440 --> 08:01:53,680
basically started learning about setting up our


6778
08:01:53,680 --> 08:01:56,958
iphone and android application also after that


6779
08:01:56,958 --> 08:02:01,680
sorry the iphone and android application together with certificates profiles and


6780
08:02:01,680 --> 08:02:06,398
got scr cpy working so there's been a lot of information up on those till this


6781
08:02:06,398 --> 08:02:10,718
point so many hours of information that you can go back and watch


6782
08:02:10,718 --> 08:02:14,320
and i strongly suggest that you actually do that because i've explained


6783
08:02:14,320 --> 08:02:19,040
everything in such extent extensive detail that i feel like


6784
08:02:19,040 --> 08:02:22,320
explaining all those things again and again will be a waste of time both for


6785
08:02:22,320 --> 08:02:24,320
you and me and


6786
08:02:24,320 --> 08:02:28,160
in this chapter we are going to use all that information


6787
08:02:28,160 --> 08:02:31,280
that we've learned from the previous chapters and start actually creating a


6788
08:02:31,280 --> 08:02:34,478
registration screen a simple registration screen in our floater


6789
08:02:34,478 --> 08:02:39,600
application source code that talks with firebase and firebase we set up in the


6790
08:02:39,600 --> 08:02:44,160
previous chapter if i'm not mistaken so have a look at that chapter if you


6791
08:02:44,160 --> 08:02:47,840
haven't set up your firebase app back-end


6792
08:02:47,840 --> 08:02:51,680
or at least i mean we haven't really set up anything we've just like


6793
08:02:51,680 --> 08:02:55,600
well yeah actually set up yeah we could say set up um but we haven't really


6794
08:02:55,600 --> 08:02:59,520
configured in such great details it's just like we've set it up so


6795
08:02:59,520 --> 08:03:03,600
have a look at that chapter please if you want to um


6796
08:03:03,600 --> 08:03:07,760
before you continue with this chapter so so


6797
08:03:07,760 --> 08:03:10,718
i'm gonna go to my captions here and just ensure that i can show you the


6798
08:03:10,718 --> 08:03:14,798
correct captions now what we need to do in this chapter


6799
08:03:14,798 --> 08:03:18,718
is to start working on our registration screen and what i'm going to do here is


6800
08:03:18,718 --> 08:03:22,798
bring up a caption for you so that you know what we're going to do


6801
08:03:22,798 --> 08:03:25,600
the first thing you need to do is to bring your


6802
08:03:25,600 --> 08:03:29,840
visual studio code or your editor of choice


6803
08:03:29,840 --> 08:03:33,120
on the screen so i'm i'm going to do that and then i'm going to bring my


6804
08:03:33,120 --> 08:03:37,440
android phone mirrored on the screen with scrcpy


6805
08:03:37,440 --> 08:03:40,878
and then i'll see if i can bring my face to the right so you can see a little bit


6806
08:03:40,878 --> 08:03:46,958
of a bigger screen and what we need to do here now is to go


6807
08:03:46,958 --> 08:03:51,040
in this main dart file and remove everything that is a comment now


6808
08:03:51,040 --> 08:03:55,360
if you're coming from like a design background or a product owner or um like


6809
08:03:55,360 --> 08:03:58,240
in wherever whatever background that is not


6810
08:03:58,240 --> 08:04:01,520
software development related if you're coming from those backgrounds then you


6811
08:04:01,520 --> 08:04:06,240
may not know what a comment is however i'll tell you now a comment is a piece


6812
08:04:06,240 --> 08:04:09,840
of information piece of text that is written inside a source file such as


6813
08:04:09,840 --> 08:04:15,200
this main dart file that doesn't translate to an actual code so it's


6814
08:04:15,200 --> 08:04:19,120
information placed there usually for other developers or whoever


6815
08:04:19,120 --> 08:04:22,398
is looking at the code so that they understand the code a little bit better


6816
08:04:22,398 --> 08:04:24,718
okay comments in dart can be created in


6817
08:04:24,718 --> 08:04:30,558
different ways however the most i mean the most usual way of doing it is


6818
08:04:30,558 --> 08:04:33,040
with double forward slashes as you can see


6819
08:04:33,040 --> 08:04:35,920
here and a space and then some text all right


6820
08:04:35,920 --> 08:04:39,440
so i'm going to need you now to go into


6821
08:04:39,440 --> 08:04:42,638
your main dart file and we're going to remove all these comments right now


6822
08:04:42,638 --> 08:04:47,520
because they are basically creating a lot of noise for us right now okay


6823
08:04:47,520 --> 08:04:52,000
so let's go ahead and remove all those gray lines or whatever color they're


6824
08:04:52,000 --> 08:04:54,398
displayed on your screen they may be green


6825
08:04:54,398 --> 08:04:57,200
depending on your theme


6826
08:04:57,200 --> 08:05:00,398
i have tokyo knight as i mentioned before


6827
08:05:00,398 --> 08:05:05,280
in visual studio code so comments are displayed in gray


6828
08:05:05,280 --> 08:05:09,440
gonna remove all that comment there okay and that's it


6829
08:05:09,440 --> 08:05:15,120
so and i think this as well and i don't know yeah and it seems also


6830
08:05:15,120 --> 08:05:19,120
like uh so yeah i think now we've removed all


6831
08:05:19,120 --> 08:05:23,040
the comments so if i do command s that does a hot


6832
08:05:23,040 --> 08:05:25,600
reload and i'm actually going to talk about


6833
08:05:25,600 --> 08:05:29,600
what the hot reload is but if you've done this then you're good to go i'm


6834
08:05:29,600 --> 08:05:32,958
going to take that in my notes so we've talked about it


6835
08:05:32,958 --> 08:05:38,080
now the next topic to talk about here is hot reload versus hot restart now


6836
08:05:38,080 --> 08:05:41,680
these two are so important for you to understand that i think you should like


6837
08:05:41,680 --> 08:05:45,040
get this before you continue with the rest of the course and i'm gonna do my


6838
08:05:45,040 --> 08:05:48,718
best to explain what hot reload and hardware start are


6839
08:05:48,718 --> 08:05:51,600
if you're for instance coming from a design background where you have for


6840
08:05:51,600 --> 08:05:56,240
instance figma and you design your um


6841
08:05:56,240 --> 08:06:00,718
stuff you're you're putting some vectors on the screen you're dragging images and


6842
08:06:00,718 --> 08:06:04,160
i can go in your figma design and literally observe you as you're doing


6843
08:06:04,160 --> 08:06:08,398
that so i'm actually looking at your changes you don't have to press any


6844
08:06:08,398 --> 08:06:12,878
publish button nothing like that even if you're in your drafts i can still follow


6845
08:06:12,878 --> 08:06:18,080
you and watch you as you're designing now that future is very very much


6846
08:06:18,080 --> 08:06:21,920
possible in flutter as well however


6847
08:06:21,920 --> 08:06:27,600
the cost of doing that the same thing that figma does is quite heavy because


6848
08:06:27,600 --> 08:06:32,398
as i'm changing my code i actually i'm not going to be able to see my changes


6849
08:06:32,398 --> 08:06:37,840
unless i tell flutter that okay i've made some changes show me them on the


6850
08:06:37,840 --> 08:06:42,240
screen that is hot reload okay for instance if


6851
08:06:42,240 --> 08:06:46,478
i go in here and i say flutter demo home page and remove the demo home page from


6852
08:06:46,478 --> 08:06:49,920
here press command s that's going to save my


6853
08:06:49,920 --> 08:06:54,240
file which in turn is going to do a hot reload okay


6854
08:06:54,240 --> 08:06:58,080
so command s you can see this title now was changed


6855
08:06:58,080 --> 08:07:01,040
from here so it's set it says not flutter demo i'm


6856
08:07:01,040 --> 08:07:05,920
going to change it back command s hot reload and it's going to say home page


6857
08:07:05,920 --> 08:07:10,958
now you can also avoid for instance doing command s and just go in here in


6858
08:07:10,958 --> 08:07:15,360
your visual studio code or android studio and just say hot reload so i can


6859
08:07:15,360 --> 08:07:20,320
see now that didn't actually do it that was great because i can see a little


6860
08:07:20,320 --> 08:07:24,160
like blob here you see the circle on this file this in visual studio code is


6861
08:07:24,160 --> 08:07:28,160
an indicator of a file that has not been saved so


6862
08:07:28,160 --> 08:07:32,080
so if i save it and it itself is going to do a hot reload so i don't have to


6863
08:07:32,080 --> 08:07:35,760
actually manually press the hot reload button so save and then you can see the


6864
08:07:35,760 --> 08:07:41,600
changes immediately applied there however some changes to your code are


6865
08:07:41,600 --> 08:07:47,920
going to be so big that footwear is not able to resolve the delta from the


6866
08:07:47,920 --> 08:07:52,240
previous state of the application to the new states and we will come to those


6867
08:07:52,240 --> 08:07:56,478
changes very difficult to explain them right now but just know that hot reload


6868
08:07:56,478 --> 08:08:00,798
is usually works in 99 something percent


6869
08:08:00,798 --> 08:08:05,520
like i'm making up statistics here in most cases hot reload works in that it


6870
08:08:05,520 --> 08:08:10,878
can show you your latest changes however sometimes your changes may be so drastic


6871
08:08:10,878 --> 08:08:14,478
and so big and the the


6872
08:08:14,478 --> 08:08:17,520
calculation of the delta from the previous previous state to the next to


6873
08:08:17,520 --> 08:08:22,000
the new state may be so big that flutter isn't able to do that so then you will


6874
08:08:22,000 --> 08:08:25,600
have to do hot reload and then hot reload is


6875
08:08:25,600 --> 08:08:30,080
here sorry hot restart you will have to do a hot restart sorry about that


6876
08:08:30,080 --> 08:08:35,200
so there's more differences between them like internally about the state


6877
08:08:35,200 --> 08:08:38,558
like the state of your application and whether one


6878
08:08:38,558 --> 08:08:42,080
keeps your state and the other one loses your state so i'm not going to talk


6879
08:08:42,080 --> 08:08:47,120
about that right now because we haven't even talked about states in flutter so i


6880
08:08:47,120 --> 08:08:51,200
don't think it makes so much sense to talk about that right now just know that


6881
08:08:51,200 --> 08:08:56,638
in most cases hot reload displays your latest changes and that and it's


6882
08:08:56,638 --> 08:09:00,320
sufficient if you just do a command s and save your files


6883
08:09:00,320 --> 08:09:05,520
but hot restart it will basically kind of like rebuild your application


6884
08:09:05,520 --> 08:09:09,680
with new states okay so i think i think to be honest with you


6885
08:09:09,680 --> 08:09:15,120
that's sufficient for now so what we need to do now


6886
08:09:15,120 --> 08:09:19,600
is to have a look a little bit about at


6887
08:09:19,600 --> 08:09:23,680
restructuring the code that is created for us by default


6888
08:09:23,680 --> 08:09:27,360
and as you can see here um i mean we don't really know how these


6889
08:09:27,360 --> 08:09:32,638
things work right now um you don't even know like in the


6890
08:09:32,638 --> 08:09:37,600
caption i say material app inside run app and home page widget


6891
08:09:37,600 --> 08:09:41,360
what does this mean well you don't know that and that's okay


6892
08:09:41,360 --> 08:09:45,600
i'm not going to like confuse us right now with too much detail but what you'll


6893
08:09:45,600 --> 08:09:50,478
need to know right now is that let's go in here and i'm gonna bring the


6894
08:09:50,478 --> 08:09:53,840
logs up what i'm gonna do in here in this build


6895
08:09:53,840 --> 08:09:58,638
function of my app just go and type print


6896
08:09:58,638 --> 08:10:01,120
building


6897
08:10:01,520 --> 08:10:05,600
okay and command s and then you'll see that


6898
08:10:05,600 --> 08:10:10,320
printed to the screen so every time i'm pressing command s


6899
08:10:10,320 --> 08:10:15,440
this entire application is being built again and there is a little bit of like


6900
08:10:15,440 --> 08:10:19,360
a resource hug because


6901
08:10:20,080 --> 08:10:23,440
as you can see here material application is the entire


6902
08:10:23,440 --> 08:10:28,240
kind of like a scaffolding entire frame of your application including the bar on


6903
08:10:28,240 --> 08:10:32,718
top including this white view here and including that badge up there on the top


6904
08:10:32,718 --> 08:10:36,080
right it's like you are pretty much building


6905
08:10:36,080 --> 08:10:39,360
things that you don't need to build every time you save this file so it's a


6906
08:10:39,360 --> 08:10:44,478
little bit of like a a problem of um performance whether you want to do that


6907
08:10:44,478 --> 08:10:49,840
or not but in this in this uh course i'm just i'm gonna give you some advice on


6908
08:10:49,840 --> 08:10:54,160
how to make your application also run a little bit faster so to do that what we


6909
08:10:54,160 --> 08:10:57,680
need to do is just to tell flutter that hey look we don't want to build the


6910
08:10:57,680 --> 08:11:02,878
entire app every time or the app structure every time we're


6911
08:11:02,878 --> 08:11:06,320
pressing command s to how to hot reload so


6912
08:11:06,320 --> 08:11:10,240
your challenge here now is to if i get rid of


6913
08:11:10,240 --> 08:11:12,798
this what we need to do now is you can see


6914
08:11:12,798 --> 08:11:15,440
here in the main function which is the root


6915
08:11:15,440 --> 08:11:18,558
function that flutter calls when it actually runs your application it says


6916
08:11:18,558 --> 08:11:22,798
okay i'm running an app called my app and if you look at my app the only thing


6917
08:11:22,798 --> 08:11:26,718
it does it actually creates a material app that's all it does so


6918
08:11:26,718 --> 08:11:31,440
what you need to do now is to grab this material app so i'm just going to say


6919
08:11:31,440 --> 08:11:34,160
command x on mac


6920
08:11:34,160 --> 08:11:37,600
or control x i think on windows and linux


6921
08:11:37,600 --> 08:11:41,440
grab that and instead of this const my app


6922
08:11:41,440 --> 08:11:48,718
paste that in there okay and then kill your my app boom like that


6923
08:11:48,718 --> 08:11:52,638
okay and then do command s and just to make sure everything is


6924
08:11:52,638 --> 08:11:56,398
working correctly i'm just going to do a hot restart


6925
08:11:56,398 --> 08:12:01,920
and you can see everything is working as it should so what we did here really was


6926
08:12:01,920 --> 08:12:05,040
actually let's see my homepage yeah that's fine


6927
08:12:05,040 --> 08:12:07,520
um yeah so


6928
08:12:07,520 --> 08:12:12,320
what we have now is just the main function and something called my


6929
08:12:12,320 --> 08:12:20,478
homepage stateful widget all right so get your code also to this state


6930
08:12:20,478 --> 08:12:23,680
i'm gonna take in my notes that i've talked about that all right


6931
08:12:23,680 --> 08:12:28,798
so the next thing we need to talk about is stateless versus stateful


6932
08:12:28,798 --> 08:12:31,920
now state


6933
08:12:31,920 --> 08:12:35,360
i mean for me it feels like for me to be able to explain this i need to first


6934
08:12:35,360 --> 08:12:40,718
explain what a state is uh let's say in here i press this button


6935
08:12:40,718 --> 08:12:44,638
five times okay and then i go and i say oh i want to


6936
08:12:44,638 --> 08:12:49,200
change the title of this little label there i'm gonna say you


6937
08:12:49,200 --> 08:12:53,760
you've instead of you have or


6938
08:12:53,760 --> 08:12:58,478
yeah let's convert this to double quotes because we're putting a single code in


6939
08:12:58,478 --> 08:13:01,600
there i'm gonna say you've pushed the button


6940
08:13:01,600 --> 08:13:05,120
this many times and i'm gonna say command s or control s in windows and


6941
08:13:05,120 --> 08:13:11,120
linux to hot reload hot reload yeah command s okay


6942
08:13:11,120 --> 08:13:16,240
and you can see is that you've pushed the button this many times but it kept


6943
08:13:16,240 --> 08:13:20,558
the number five so if it rebuilt this application or


6944
08:13:20,558 --> 08:13:24,160
this widget or this thing that you can see on the


6945
08:13:24,160 --> 08:13:29,200
screen how did it keep keep the state well that is because


6946
08:13:29,200 --> 08:13:33,920
hot reload is able to sometimes as i mentioned before keep your state and


6947
08:13:33,920 --> 08:13:40,798
state is just data data usually mutated and created either by the


6948
08:13:40,798 --> 08:13:44,958
application or the user or both and in this case this is a state that the user


6949
08:13:44,958 --> 08:13:49,040
is controlling so by pressing the button he or she is increasing this number now


6950
08:13:49,040 --> 08:13:54,718
it's 10 okay a state full widget it can keep that


6951
08:13:54,718 --> 08:13:56,958
information so


6952
08:13:56,958 --> 08:14:00,718
it you see it has something called a counter


6953
08:14:00,718 --> 08:14:05,680
it's an integer and it keeps hold of that number so


6954
08:14:05,680 --> 08:14:11,600
and upon this number being changed it can kind of redraw itself so


6955
08:14:11,600 --> 08:14:15,760
stateful widget is something that is on the screen usually


6956
08:14:15,760 --> 08:14:20,320
something that you can visibly see such as this screen the white screen you


6957
08:14:20,320 --> 08:14:22,878
can see here stateful


6958
08:14:22,878 --> 08:14:30,798
and it can contain data upon who's changing it can redraw itself


6959
08:14:30,798 --> 08:14:35,040
itself so had we had the same widget as you can


6960
08:14:35,040 --> 08:14:39,840
see in my home page and it was stateless widget which is available as well


6961
08:14:39,840 --> 08:14:42,398
you see let's switch it


6962
08:14:42,398 --> 08:14:49,920
it wouldn't necessarily be able to redraw itself or contain any mutable


6963
08:14:49,920 --> 08:14:56,080
data i mean even stateless widgets for those who are a bit more familiar


6964
08:14:56,080 --> 08:15:01,760
with flutter you'll have like value not notifier and builders so even stateless


6965
08:15:01,760 --> 08:15:05,200
widgets can be redrawn depending on what you're trying to do


6966
08:15:05,200 --> 08:15:11,200
but they cannot contain mutable variables so that is kind of


6967
08:15:11,200 --> 08:15:14,318
like the um difference between stateful and


6968
08:15:14,318 --> 08:15:19,360
stateless so you can see here this is a variable that is not read-only otherwise


6969
08:15:19,360 --> 08:15:23,280
it would be final so if i make this final you can see it says oh you can't


6970
08:15:23,280 --> 08:15:27,760
reassign this value to something else so just know that if you see state full


6971
08:15:27,760 --> 08:15:32,718
widget then it is a widget that contains information that can be


6972
08:15:32,718 --> 08:15:35,840
changed as the user interacts with the widget or


6973
08:15:35,840 --> 08:15:41,360
as time goes by or as the widget sees fit however stateless widget is a widget


6974
08:15:41,360 --> 08:15:44,798
who's who has who doesn't contain any mutable


6975
08:15:44,798 --> 08:15:50,160
pieces of information and doesn't manage any mutable pieces of information


6976
08:15:50,160 --> 08:15:54,160
internally okay that's a lot of just just there's a lot


6977
08:15:54,160 --> 08:15:57,920
of talk i know if you're not comfortable with like if you if you haven't done


6978
08:15:57,920 --> 08:16:01,520
software development before you may not this may not make any sense to you and i


6979
08:16:01,520 --> 08:16:04,638
promise you as we go on and of course you're gonna learn more about it so


6980
08:16:04,638 --> 08:16:07,360
don't worry about it if you didn't get this


6981
08:16:07,360 --> 08:16:10,080
on the get-go


6982
08:16:10,240 --> 08:16:12,478
so


6983
08:16:13,120 --> 08:16:18,878
you can see now let's see um let's talk a little bit about i'm gonna


6984
08:16:18,878 --> 08:16:21,840
actually tick this


6985
08:16:23,040 --> 08:16:28,478
in the in my in my notes


6986
08:16:30,160 --> 08:16:35,120
okay so i can see in my notes that i had um


6987
08:16:35,120 --> 08:16:40,000
that as part of as part of uh what i was going to explain here i was


6988
08:16:40,000 --> 08:16:44,000
actually i had planned i can see my notes i had


6989
08:16:44,000 --> 08:16:48,798
planned in one of the previous captions uh here um


6990
08:16:48,798 --> 08:16:52,398
as part of this caption i was actually supposed to come completely kill this my


6991
08:16:52,398 --> 08:16:57,200
home page uh widget and i was supposed to actually create a


6992
08:16:57,200 --> 08:17:01,680
widget just called home page so let's do that let's just go back into that


6993
08:17:01,680 --> 08:17:06,878
caption so kill this my home page and now


6994
08:17:06,878 --> 08:17:13,280
go in here and change this to home page so what we need to do now is to create a


6995
08:17:13,280 --> 08:17:18,398
very simple home page okay so i'm gonna remove this title from here as well and


6996
08:17:18,398 --> 08:17:22,398
you can see now we have an error telling us that okay i don't know what home page


6997
08:17:22,398 --> 08:17:27,840
is now what we need to do is to create a uh actually let me see if i plan to


6998
08:17:27,840 --> 08:17:31,520
create a stateless yeah stateless widget okay


6999
08:17:31,520 --> 08:17:35,280
a great shortcut that you need to know in visual studio code and i think it may


7000
08:17:35,280 --> 08:17:39,760
be available in android studio as well is if you want to create a stateless


7001
08:17:39,760 --> 08:17:43,840
widget just type stl and you can see it tells you that okay


7002
08:17:43,840 --> 08:17:46,638
you want to create a stateless widget great


7003
08:17:46,638 --> 08:17:51,760
okay there it is then you give it the name of home page okay so now you have a


7004
08:17:51,760 --> 08:17:56,318
home page great and i'm going to do a command s and now you can see this is


7005
08:17:56,318 --> 08:17:59,280
one of the times that flutter was like okay


7006
08:17:59,280 --> 08:18:02,240
i don't understand what you're trying to do you change some stuff in this main


7007
08:18:02,240 --> 08:18:06,638
function and i can't do hot reload so you have to do hot restart so now the


7008
08:18:06,638 --> 08:18:10,000
screen is kind of gonna be black so


7009
08:18:10,000 --> 08:18:14,398
now we have what i had planned in the course initially for for this chapter so


7010
08:18:14,398 --> 08:18:19,200
great let's go now to the next point um


7011
08:18:19,200 --> 08:18:23,040
so you can see the screen is black here and that's because of this container


7012
08:18:23,040 --> 08:18:25,920
there is a little container there or something on the screen that you can't


7013
08:18:25,920 --> 08:18:29,920
really see because it's just black so you could go in here and say there is a


7014
08:18:29,920 --> 08:18:34,000
color and you can say colors red i just command s


7015
08:18:34,000 --> 08:18:37,360
and you can see now the screen is red so just know that there is something on the


7016
08:18:37,360 --> 08:18:41,040
screen but you just can't see it because it's all black so


7017
08:18:41,040 --> 08:18:45,040
the way to get your application to a point that is actually like presentable


7018
08:18:45,040 --> 08:18:49,520
to a user you usually have to create something called a scaffold now scaffold


7019
08:18:49,520 --> 08:18:54,318
as it as its name indicates it's kind of just like the basic building structures


7020
08:18:54,318 --> 08:18:58,798
of an application that kind of makes it presentable to a user to an average user


7021
08:18:58,798 --> 08:19:00,958
so even though if you're creating like a


7022
08:19:00,958 --> 08:19:05,520
graphically intensive application this black background may be completely okay


7023
08:19:05,520 --> 08:19:10,080
but in most applications when you run them then you'll get


7024
08:19:10,080 --> 08:19:13,680
then you'll get like a bar on top that tells you like the name of the screen


7025
08:19:13,680 --> 08:19:17,600
that you're on kind of like the title of a web page and you'll also get some like


7026
08:19:17,600 --> 08:19:22,000
a status bar on top where as you can see here the status bar is kind of like


7027
08:19:22,000 --> 08:19:27,040
black with all white icons on top and it will give you like a wide screen where


7028
08:19:27,040 --> 08:19:31,280
you can interact with your content so we don't have that and in order to


7029
08:19:31,280 --> 08:19:34,558
create that you have to create something called a scaffold so


7030
08:19:34,558 --> 08:19:38,798
go to your container here and say scaffold okay


7031
08:19:38,798 --> 08:19:43,280
now i'm gonna press command s and you'll see all this on then we get this little


7032
08:19:43,280 --> 08:19:47,680
white screen here and then there's a little tint on our status bar as well so


7033
08:19:47,680 --> 08:19:50,798
it makes it a little bit more presentable okay


7034
08:19:50,798 --> 08:19:54,080
so what we need to do now i'll basically


7035
08:19:54,080 --> 08:19:59,600
see if i've planned to add some bar title in here which i haven't so let's


7036
08:19:59,600 --> 08:20:04,318
do that right now so for our scaffold we're also going to add an is something


7037
08:20:04,318 --> 08:20:09,280
called an app bar so go to your scaffold and say app bar


7038
08:20:09,280 --> 08:20:14,718
and then say i create a new instance of the app bar class all right


7039
08:20:14,718 --> 08:20:20,000
and in here there's a property called title and as the title say text


7040
08:20:20,000 --> 08:20:22,478
okay and for the text i'm going to get rid of


7041
08:20:22,478 --> 08:20:25,440
all this documentation there's excessive amount of documentation here which kind


7042
08:20:25,440 --> 08:20:30,080
of blocks the screen so and for the text just say


7043
08:20:30,080 --> 08:20:33,600
register for instance and make it a constant


7044
08:20:33,600 --> 08:20:39,200
so and put a comma here and a uh comma here as well


7045
08:20:39,200 --> 08:20:43,920
so you see after you've done that your screen has a beautiful blue bar


7046
08:20:43,920 --> 08:20:47,920
here with the title of your uh application or the title of your home


7047
08:20:47,920 --> 08:20:51,440
page and there is a white canvas here for the


7048
08:20:51,440 --> 08:20:56,478
rest of your content to be displayed so now there are a few things in here which


7049
08:20:56,478 --> 08:20:59,840
i could jump over but i kind of feel like they're so important to explain


7050
08:20:59,840 --> 08:21:04,478
that i'm going to do that right now so in flutter every time you have for


7051
08:21:04,478 --> 08:21:08,958
instance here there is a text you see sorry there is an app bar an app bar if


7052
08:21:08,958 --> 08:21:13,120
you go into the source code of an app bar let's go a little bit higher you can


7053
08:21:13,120 --> 08:21:18,638
see it it says i'm a stateful widget all right so app bar in itself is a widget


7054
08:21:18,638 --> 08:21:22,240
so what we're doing here is saying we have something called a scaffold let's


7055
08:21:22,240 --> 08:21:26,798
go to scaffold it itself is a stateful widget so we're saying the main widget


7056
08:21:26,798 --> 08:21:30,160
we're returning from our build function as you can see it should return a widget


7057
08:21:30,160 --> 08:21:34,398
is a scaffold which is a stateful widget in itself it has a property called app


7058
08:21:34,398 --> 08:21:38,718
bar an app bar it itself is a stateful widget which in turn has a property


7059
08:21:38,718 --> 08:21:43,280
called title now the title if you look at the documentation it says


7060
08:21:43,280 --> 08:21:46,478
title is also widget so


7061
08:21:46,478 --> 08:21:49,280
let me also make the screen a little bit bigger


7062
08:21:49,280 --> 08:21:52,638
like this so you see it better so


7063
08:21:52,638 --> 08:21:56,240
now the title is a widget and we're saying oh we're going to use a text


7064
08:21:56,240 --> 08:22:00,558
widget if you look at text what it is is a stateless widget it means internally


7065
08:22:00,558 --> 08:22:05,680
it states or its state can change and it it doesn't have any mutable variables


7066
08:22:05,680 --> 08:22:09,840
okay oh i didn't want to change that so


7067
08:22:09,840 --> 08:22:13,760
if you see what we're doing here when in flutter you're just creating widgets


7068
08:22:13,760 --> 08:22:18,318
everywhere in flutter almost everything is a widget either stateful or stateless


7069
08:22:18,318 --> 08:22:22,160
and you try to you need to kind of try to stick to stateless widgets as much as


7070
08:22:22,160 --> 08:22:27,520
you can all right we're going to talk more about stateful and stateless so


7071
08:22:27,600 --> 08:22:31,120
now that we've added the scaffold and i've explained a little bit about these


7072
08:22:31,120 --> 08:22:36,160
widgets that were we've created and we've done a command as here just to


7073
08:22:36,160 --> 08:22:40,080
hot reload the application or this widget


7074
08:22:40,080 --> 08:22:46,318
uh what we need to do next is to create a login button


7075
08:22:46,318 --> 08:22:49,520
so let's go and create some sort of a login


7076
08:22:49,520 --> 08:22:52,478
button and you can see here i've written the


7077
08:22:52,478 --> 08:22:56,160
caption button on home page in the center to log in


7078
08:22:56,160 --> 08:23:01,200
or more accurately it could actually be register


7079
08:23:01,200 --> 08:23:05,440
so i'm going to change that i'm going to say register button


7080
08:23:05,440 --> 08:23:09,440
and button on the homepage in the center to register okay


7081
08:23:09,440 --> 08:23:14,000
display the caption to you there to and i'm gonna change my notes here


7082
08:23:14,000 --> 08:23:18,878
just quickly all right so now your task is to create a button on


7083
08:23:18,878 --> 08:23:23,280
the screen how do you do that well in scaffold you see the scaffold at the


7084
08:23:23,280 --> 08:23:27,440
moment it's the owner of that bar on top and it's the owner of this


7085
08:23:27,440 --> 08:23:31,440
white content here so what you need to do is to go and look at a property


7086
08:23:31,440 --> 08:23:34,798
called body and body is


7087
08:23:34,798 --> 08:23:39,600
in itself if i move my mouse over it says okay give me a widget you see


7088
08:23:39,600 --> 08:23:44,478
and of course i could say well i have no widgets null is also acceptable but in


7089
08:23:44,478 --> 08:23:50,240
this case we're going to create a button called text button so text button is a


7090
08:23:50,240 --> 08:23:53,920
widget if you go into source code you'll see it's a


7091
08:23:53,920 --> 08:23:59,280
text button button style button and that is a state full widget all right so


7092
08:23:59,280 --> 08:24:02,558
you're basically saying that i'm creating a button and i want to allow


7093
08:24:02,558 --> 08:24:06,638
the user to do something with it all right so we need to do as you can see


7094
08:24:06,638 --> 08:24:10,878
there is a little bit of an error here to say that says unpressed is a


7095
08:24:10,878 --> 08:24:15,440
parameter that you haven't provided to me so we need to tell this button


7096
08:24:15,440 --> 08:24:20,160
that when this button is pressed it needs to


7097
08:24:20,160 --> 08:24:24,080
do something and this is a requirement for the text button class that it's


7098
08:24:24,080 --> 08:24:28,398
telling you well i'm a button what do you want me to do when i'm


7099
08:24:28,398 --> 08:24:33,040
pressed if you don't press if you don't provide unpressed parameter to me i


7100
08:24:33,040 --> 08:24:37,040
don't i'm not even a button i could just be a label and that is what this error


7101
08:24:37,040 --> 08:24:39,840
is all about is saying that if you're creating a button make sure that you


7102
08:24:39,840 --> 08:24:43,440
handle what happens when the user presses on so


7103
08:24:43,440 --> 08:24:48,398
in here just type unpressed and i'm just going to get visual studio


7104
08:24:48,398 --> 08:24:54,080
to complete this code for me you can see it says okay an empty function


7105
08:24:54,240 --> 08:24:57,680
a function with empty list of parameters so no parameters


7106
08:24:57,680 --> 08:25:01,120
and then the code in itself is empty at the


7107
08:25:01,120 --> 08:25:06,240
moment okay so go after the create creation of that function and then you


7108
08:25:06,240 --> 08:25:09,840
see that there is another that you have to handle that says child


7109
08:25:09,840 --> 08:25:13,360
you see text button you would say you would probably just assume that oh a


7110
08:25:13,360 --> 08:25:17,840
text button should have some sort of a string parameter that says what is my


7111
08:25:17,840 --> 08:25:19,680
text so


7112
08:25:19,680 --> 08:25:24,080
if we write child here the beauty of flutter is that it says


7113
08:25:24,080 --> 08:25:30,318
child is a widget so text button doesn't doesn't make any assumptions about what


7114
08:25:30,318 --> 08:25:33,120
content you want to display on that button


7115
08:25:33,120 --> 08:25:37,440
what it does it says i need to display some widget anything it could be an


7116
08:25:37,440 --> 08:25:41,440
image it could be an icon it could be whatever it could be a list of things


7117
08:25:41,440 --> 08:25:45,040
which is not a good idea to do but you could still do that so


7118
08:25:45,040 --> 08:25:48,398
um go and create a child widget and now


7119
08:25:48,398 --> 08:25:51,680
you've learned about the text widget so i'm just gonna say a constant text


7120
08:25:51,680 --> 08:25:55,680
widget and in here we're just going to say register okay


7121
08:25:55,680 --> 08:25:58,958
now command s and you'll see now all of a sudden you


7122
08:25:58,958 --> 08:26:03,120
have a register button there so another cool feature now i want to


7123
08:26:03,120 --> 08:26:05,920
show you in visual studio and i think it's available also in android stu is


7124
08:26:05,920 --> 08:26:11,280
that you can go and wrap your widgets with other widgets so instead of for


7125
08:26:11,280 --> 08:26:15,680
instance saying that i want the text button to be in the center and then you


7126
08:26:15,680 --> 08:26:20,878
go and create a center if you know it also exists you could do


7127
08:26:20,878 --> 08:26:25,200
command dot or command dot on mac or control dot in windows and linux and


7128
08:26:25,200 --> 08:26:29,440
visual studio code on the widget that you want to wrap in some other widget


7129
08:26:29,440 --> 08:26:32,958
and then you will get this beautiful menu that


7130
08:26:32,958 --> 08:26:36,638
says you you know you can wrap it with many different things so i'm just going


7131
08:26:36,638 --> 08:26:42,000
to pronounce a wrap with center so as you can see center is a widget that has


7132
08:26:42,000 --> 08:26:47,840
a child property all center does is that it tries to center


7133
08:26:47,840 --> 08:26:55,280
horizontally and vertically it's child inside the available space of the center


7134
08:26:55,280 --> 08:26:58,878
widget itself the entire available space in this case


7135
08:26:58,878 --> 08:27:04,398
as you can see is this entire white background so center has access to that


7136
08:27:04,398 --> 08:27:09,680
entire white background right now because center is the root widget of our


7137
08:27:09,680 --> 08:27:14,638
body which is the only thing that our scaffold is showing at the moment


7138
08:27:14,638 --> 08:27:18,160
so center then is able to center align this


7139
08:27:18,160 --> 08:27:22,798
text button so let's command s and you can see the register button is centered


7140
08:27:22,798 --> 08:27:27,280
horizontally and vertically in the available space


7141
08:27:27,280 --> 08:27:32,318
now that i've talked about that i'm going to take it here


7142
08:27:32,318 --> 08:27:37,520
and what we're going to do here is very very important so


7143
08:27:37,760 --> 08:27:42,718
what we need to do is we now need to handle when the text


7144
08:27:42,718 --> 08:27:47,120
button is pressed that we're going register a user with


7145
08:27:47,120 --> 08:27:49,520
firebase okay now


7146
08:27:49,520 --> 08:27:54,240
we talked about this when i talked about like uh dart in the previous chapters we


7147
08:27:54,240 --> 08:27:57,280
talked about synchronous and asynchronous and i'm not gonna go into


7148
08:27:57,280 --> 08:28:01,280
details about that now registration i'm sorry i'm not going to


7149
08:28:01,280 --> 08:28:05,440
talk about that in details because we've talked about that in details before so


7150
08:28:05,440 --> 08:28:09,360
if you need to know about that i think synchronous and asynchronous were


7151
08:28:09,360 --> 08:28:14,558
probably explained in um i'll have a look at my notes


7152
08:28:14,558 --> 08:28:19,520
they were explained in chapter number seven so if you haven't watched chapter


7153
08:28:19,520 --> 08:28:22,958
number seven i strongly suggest that you do that if you don't know what sync and


7154
08:28:22,958 --> 08:28:25,600
async are um


7155
08:28:25,600 --> 08:28:28,878
what we need to do now is to tell firebase to register user now


7156
08:28:28,878 --> 08:28:33,040
registering a user with firebase is an asynchronous task so it's not going to


7157
08:28:33,040 --> 08:28:38,160
complete immediately so what we need to do now is to tell flutter that the


7158
08:28:38,160 --> 08:28:42,958
button press is an asynchronous task and all you need to do here is just to put


7159
08:28:42,958 --> 08:28:48,160
the keyword async in there okay so


7160
08:28:48,160 --> 08:28:52,160
that is that that's it in my


7161
08:28:52,160 --> 08:28:56,440
notes i've talked about it


7162
08:28:57,440 --> 08:29:01,440
now what we need to do is to have a look at


7163
08:29:01,440 --> 08:29:08,080
this link that i've provided for you um i'm going to close this safari window


7164
08:29:08,080 --> 08:29:13,360
let me see if i can show you on this screen


7165
08:29:13,600 --> 08:29:15,920
um


7166
08:29:16,080 --> 08:29:22,318
other sign-in methods great you can see as i'm displaying here


7167
08:29:22,318 --> 08:29:28,080
firebase allows you to enable various sign-in methods


7168
08:29:28,080 --> 08:29:32,240
uh to your for your users so um


7169
08:29:32,240 --> 08:29:35,440
firebase is not only limited to like google


7170
08:29:35,440 --> 08:29:40,160
services you can as you can see it can allow you to enable facebook signing for


7171
08:29:40,160 --> 08:29:45,360
users or apple sign-in twitter or phone number sign-in so there


7172
08:29:45,360 --> 08:29:50,478
are various methods available for you to enable in your flutter


7173
08:29:50,478 --> 08:29:54,718
application and in this application we're gonna use email and password sign


7174
08:29:54,718 --> 08:29:57,680
in and there's like documentation about all


7175
08:29:57,680 --> 08:30:02,080
of those in this link that i've provided provided to you so


7176
08:30:02,080 --> 08:30:05,360
i'm not gonna go through the entire contents of this to be honest with you


7177
08:30:05,360 --> 08:30:09,280
because there are just so much information and we're not interested in


7178
08:30:09,280 --> 08:30:13,120
all of these but still i believe if you're interested in firebase and


7179
08:30:13,120 --> 08:30:18,398
firebase authentication which we are going to use in this course it is great


7180
08:30:18,398 --> 08:30:24,638
if you could just have a look at this link that i provided for you here


7181
08:30:24,638 --> 08:30:28,160
so what we need to do now


7182
08:30:28,160 --> 08:30:32,160
is also right i've written here that i need to talk about a little bit about


7183
08:30:32,160 --> 08:30:37,280
anonymous users you see firebase when you start your application and you kick


7184
08:30:37,280 --> 08:30:41,600
firebait if firebase you basically start the whole process of


7185
08:30:41,600 --> 08:30:46,240
firebase you say firebase start firebase is amazing in that on the


7186
08:30:46,240 --> 08:30:50,958
client side it by default creates something called an anonymous user so if


7187
08:30:50,958 --> 08:30:54,080
you talk with firebase with your thoughts or application and say who's


7188
08:30:54,080 --> 08:30:57,600
the current user even if you haven't done anything with firebase before if


7189
08:30:57,600 --> 08:31:00,798
you haven't configured it or actually you have to configure it


7190
08:31:00,798 --> 08:31:05,520
which we have already done but if you haven't called any firebase functions


7191
08:31:05,520 --> 08:31:09,360
before in your application you could just say firebase who's the current user


7192
08:31:09,360 --> 08:31:13,440
and firebase will just tell you here's a current user it's an anonymous user so


7193
08:31:13,440 --> 08:31:17,120
that user is pretty much never going to be empty it's never going to be null or


7194
08:31:17,120 --> 08:31:21,760
nil or whatever you like to call it so or if you're python developer you just


7195
08:31:21,760 --> 08:31:25,520
call it none so that user is almost never none


7196
08:31:25,520 --> 08:31:30,478
so just know that firebase has a concept of anonymous users okay


7197
08:31:30,478 --> 08:31:33,840
i'm just going to take that in my notes that we've talked about it


7198
08:31:33,840 --> 08:31:37,360
so what we need to do in the next step i'm going to bring the caption up so we


7199
08:31:37,360 --> 08:31:40,638
have to kind of like speed things up a little bit here because there's so much


7200
08:31:40,638 --> 08:31:43,760
to talk about um what we need to do here now is just


7201
08:31:43,760 --> 08:31:47,120
to create two text fields now one for the


7202
08:31:47,120 --> 08:31:52,240
email and the other one for the password and we are going to then put our button


7203
08:31:52,240 --> 08:31:56,160
um next to those two text fields so text


7204
08:31:56,160 --> 08:32:00,478
field one email text field 2 password and then the register button as the


7205
08:32:00,478 --> 08:32:04,398
third component now if you have components like this that you want to


7206
08:32:04,398 --> 08:32:09,360
stack vertically one on top of each other and one after each other then you


7207
08:32:09,360 --> 08:32:12,798
need to use a which is called column all right


7208
08:32:12,798 --> 08:32:17,440
so what i'm going to do here is go here to the center and kind of like remove


7209
08:32:17,440 --> 08:32:20,798
that i'm just going to say command dot in mac or control dot in windows on


7210
08:32:20,798 --> 08:32:25,280
linux and just say remove this widget okay i don't want to center anymore


7211
08:32:25,280 --> 08:32:30,160
command s results register buttons on top left and what i'm going to do is i'm


7212
08:32:30,160 --> 08:32:34,718
going to command up again and say wrap with column okay now if you command s


7213
08:32:34,718 --> 08:32:38,878
you'll not see anything directly on the screen no changes all right


7214
08:32:38,878 --> 08:32:44,240
but what was created for you is a column widget with children property which is a


7215
08:32:44,240 --> 08:32:48,398
list of widgets that it can display so the first thing we're gonna do is to


7216
08:32:48,398 --> 08:32:52,958
create two text fields okay so let me have a look here and just make


7217
08:32:52,958 --> 08:32:57,120
sure yeah i'm just going to say a text field


7218
08:32:57,120 --> 08:33:02,240
and another text field okay like that


7219
08:33:02,240 --> 08:33:05,920
save you'll see two text fields display there so i can actually go in there and


7220
08:33:05,920 --> 08:33:11,840
start typing something okay like that so now we've created two text


7221
08:33:11,840 --> 08:33:16,878
fields with a column on the screen


7222
08:33:16,878 --> 08:33:20,638
i'm going to note that here a ticket in my notes so we've talked about it now


7223
08:33:20,638 --> 08:33:25,680
what we need to do is grab the text that is displayed in this


7224
08:33:25,680 --> 08:33:29,680
take these text fields and when you press the register button pass that to


7225
08:33:29,680 --> 08:33:33,200
firebase okay now you see i'm telling you that when you press the button you


7226
08:33:33,200 --> 08:33:37,520
need to grab the text inside these text fields but inside this function of


7227
08:33:37,520 --> 08:33:42,478
onpress you have no access to these text fields okay so you kind of need to pass


7228
08:33:42,478 --> 08:33:47,840
information from this text field and this text field to a text button and the


7229
08:33:47,840 --> 08:33:53,120
way to do that is is using something called a text controller


7230
08:33:53,120 --> 08:33:56,958
so a text or a text editing controller a


7231
08:33:56,958 --> 08:34:00,798
text editing controller is kind of like a proxy object that you pass


7232
08:34:00,798 --> 08:34:05,520
to your text field and the text field it writes its current text all the time to


7233
08:34:05,520 --> 08:34:10,080
that text editing controller and in your text button here then you can say


7234
08:34:10,080 --> 08:34:14,958
controller text okay so you can then so it's kind of like if your text field is


7235
08:34:14,958 --> 08:34:18,160
sitting here and your text button is sitting here then you'll have something


7236
08:34:18,160 --> 08:34:22,798
here in the middle that is your proxy the text editing controller that is


7237
08:34:22,798 --> 08:34:27,360
grabbing me for latest information from the text field and then your the text


7238
08:34:27,360 --> 08:34:30,638
button can read that information okay so just know that a text editing controller


7239
08:34:30,638 --> 08:34:35,360
is kind of like a proxy now that we need to manage some state we


7240
08:34:35,360 --> 08:34:39,280
need to manage this proxy object then we need to convert our home page to a


7241
08:34:39,280 --> 08:34:44,080
stateful widget okay so go in here to your home page command dot and say


7242
08:34:44,080 --> 08:34:47,760
convert to stateful widgets so all of a sudden stateful widget all right


7243
08:34:47,760 --> 08:34:53,200
so um now what we need to do is to go and


7244
08:34:53,200 --> 08:34:57,120
create those two text editing controllers so i'm going to go in here


7245
08:34:57,120 --> 08:35:01,120
go to your home page state here and say


7246
08:35:01,120 --> 08:35:05,040
late final what do we call them do i have any


7247
08:35:05,040 --> 08:35:09,200
specific desire here let me see my notes


7248
08:35:09,600 --> 08:35:12,478
no so there's no desire really for the


7249
08:35:12,478 --> 08:35:16,958
naming so let's just say late final text thing


7250
08:35:16,958 --> 08:35:21,280
controller and let's call it here email okay


7251
08:35:21,280 --> 08:35:25,120
and the other one i'm just gonna say password


7252
08:35:25,120 --> 08:35:29,120
now in the previous chapters we haven't talked about late what late is this


7253
08:35:29,120 --> 08:35:34,318
keyword in dark that tells your program that although this print although this


7254
08:35:34,318 --> 08:35:39,680
variable has no value right now but i promise to assign a value to it before


7255
08:35:39,680 --> 08:35:44,000
it is used so it's kind of like a it's a contract so


7256
08:35:44,000 --> 08:35:48,160
late literally means that i'm not ready right now i will do it later i'm not


7257
08:35:48,160 --> 08:35:53,120
ready to assign a value to this so what we need to do now is to


7258
08:35:53,120 --> 08:35:56,958
um is to create these values now


7259
08:35:56,958 --> 08:36:00,478
you need to also know something about stateful widgets now that our homepage


7260
08:36:00,478 --> 08:36:04,000
state is a stateful widget it will have two amazing


7261
08:36:04,000 --> 08:36:09,040
amazing two great functions one is called init state i


7262
08:36:09,040 --> 08:36:13,760
believe and the other one called is disposed now init state is a function


7263
08:36:13,760 --> 08:36:17,760
that will be called by flutter automatically when it creates your home


7264
08:36:17,760 --> 08:36:23,040
page so it says okay now you have the ability to create all your variables or


7265
08:36:23,040 --> 08:36:25,520
your late variables once


7266
08:36:25,520 --> 08:36:29,920
now whenever this homepage then dies and goes out of the memory or it's trying to


7267
08:36:29,920 --> 08:36:33,840
go out the memory it will also get a function called dispose


7268
08:36:33,840 --> 08:36:36,958
so you've said that in the contract i've


7269
08:36:36,958 --> 08:36:39,760
written that i'm going to provide a value for these emails email and


7270
08:36:39,760 --> 08:36:43,520
password text editing controllers and the best way to do that is to go into


7271
08:36:43,520 --> 08:36:47,120
this init state function here


7272
08:36:47,120 --> 08:36:50,878
and assign those to proper values so i'm


7273
08:36:50,878 --> 08:36:56,240
just gonna say email email is text editing controller like


7274
08:36:56,240 --> 08:36:58,878
that okay


7275
08:36:58,878 --> 08:37:02,718
and i'm gonna do the same thing for the password field


7276
08:37:02,718 --> 08:37:07,600
now you also need to understand that you after you've created these two you also


7277
08:37:07,600 --> 08:37:13,280
need to dispose of them all right so go in and overwrite your dispose


7278
08:37:13,280 --> 08:37:19,920
function and then say email dispose and password


7279
08:37:19,920 --> 08:37:24,160
so a lot of developers forget to do this especially like newcomers so don't make


7280
08:37:24,160 --> 08:37:28,638
that mistake so you created the text editing controllers and you're also in


7281
08:37:28,638 --> 08:37:35,360
charge of disposing them okay now um


7282
08:37:35,360 --> 08:37:40,318
okay uh so we've done that already after you've created your text editing


7283
08:37:40,318 --> 08:37:43,520
controllers you need to go to your text fields and assign


7284
08:37:43,520 --> 08:37:46,958
those controllers to your text field so in here there's a parameter called


7285
08:37:46,958 --> 08:37:52,000
controller and just say email and for your text field on the second


7286
08:37:52,000 --> 08:37:55,600
one which is for your password say controller


7287
08:37:55,600 --> 08:38:00,558
it's password so what is happening now is you hooked this proxy object that sat


7288
08:38:00,558 --> 08:38:03,760
here this one which is your email or password


7289
08:38:03,760 --> 08:38:07,040
text editing controller to your text field that is sitting here okay you


7290
08:38:07,040 --> 08:38:10,478
still haven't hooked it to your text button which is sitting here so this


7291
08:38:10,478 --> 08:38:14,478
link is kind of broken and we're gonna fix that soon


7292
08:38:14,478 --> 08:38:19,040
okay take it in the notes that we've talked about that


7293
08:38:19,040 --> 08:38:22,718
so what we need to do now at the moment if i press command s you will see no


7294
08:38:22,718 --> 08:38:26,080
visible changes on the screen however there's a little bit of a problem with


7295
08:38:26,080 --> 08:38:29,520
our text fields as you can see they don't have any hint they don't tell the


7296
08:38:29,520 --> 08:38:34,240
user what they expect the user to actually enter so


7297
08:38:34,240 --> 08:38:37,760
what we need to do now is to go and add something to these text fields called a


7298
08:38:37,760 --> 08:38:40,558
hint a hint is a piece of information


7299
08:38:40,558 --> 08:38:45,280
provided to the user and usually kind of like very subtle


7300
08:38:45,280 --> 08:38:49,520
color that tells the user about the information that this text field expects


7301
08:38:49,520 --> 08:38:52,798
them to enter and that hint will automatically be


7302
08:38:52,798 --> 08:38:58,318
removed as soon as the user types at least one character on that text field


7303
08:38:58,318 --> 08:39:01,920
okay so let's go to the first text field and say


7304
08:39:01,920 --> 08:39:06,000
decoration and i believe it's an input decoration


7305
08:39:06,000 --> 08:39:11,280
and then say input decoration okay and for the hint there's so much


7306
08:39:11,280 --> 08:39:13,840
information on the screen we can't see anything


7307
08:39:13,840 --> 08:39:19,680
and there is a hint text as you can see hints text and it expects a string so in


7308
08:39:19,680 --> 08:39:26,160
here say please enter or just say enter your email here


7309
08:39:26,160 --> 08:39:29,280
and you can see it's suggesting this to be a constant so i'm going to make it a


7310
08:39:29,280 --> 08:39:32,558
constant and a little bit of a comma there as


7311
08:39:32,558 --> 08:39:35,680
well and you can see now it says enter your email here


7312
08:39:35,680 --> 08:39:40,478
and copy and paste this decoration as well and put it in the next text field


7313
08:39:40,478 --> 08:39:46,160
so say that enter your password here


7314
08:39:46,160 --> 08:39:50,080
so let's enter your email here enter your password here


7315
08:39:50,080 --> 08:39:52,478
so um


7316
08:39:52,478 --> 08:39:56,638
let me also make sure that that is correct there and take it in the box so


7317
08:39:56,638 --> 08:39:59,360
um then if you start typing in those fields


7318
08:39:59,360 --> 08:40:02,398
you can see that the hints disappears as soon as you type something and if you


7319
08:40:02,398 --> 08:40:06,240
remove that character then the hint also disappears and the same thing for the


7320
08:40:06,240 --> 08:40:11,920
password okay so we've now got the


7321
08:40:11,920 --> 08:40:16,318
groundwork like the base work done here and we need to get


7322
08:40:16,318 --> 08:40:20,478
through the authentication so when you press this text button here where we


7323
08:40:20,478 --> 08:40:24,798
need to do authentication and that means we're just going to register for now


7324
08:40:24,798 --> 08:40:27,840
so what you need to do is you need to import


7325
08:40:27,840 --> 08:40:32,638
firebase so firebase was our dependency and using the import statement you can


7326
08:40:32,638 --> 08:40:36,398
actually grab the content that it was created for firebase and bring it into


7327
08:40:36,398 --> 08:40:40,478
your source code okay so as you can see here we're gonna bring


7328
08:40:40,478 --> 08:40:46,798
package uh firebase off and firebase off parts okay


7329
08:40:46,798 --> 08:40:50,160
now command s you don't see any difference on the screen because an


7330
08:40:50,160 --> 08:40:55,040
import statement doesn't really change the state of your application as such


7331
08:40:55,040 --> 08:40:58,958
and after the importing


7332
08:40:58,958 --> 08:41:01,600
we need to i'm going to take it here as well that


7333
08:41:01,600 --> 08:41:05,440
we've talked about it so what we need to do now is to upon


7334
08:41:05,440 --> 08:41:09,920
pressing this button where we're going to get your


7335
08:41:09,920 --> 08:41:14,798
username and password from these text fields so let's say final


7336
08:41:14,798 --> 08:41:19,920
username or sorry email and i'm going to say the email field text


7337
08:41:19,920 --> 08:41:24,718
i'm going to say final password is password


7338
08:41:24,718 --> 08:41:28,080
text we're going to our email and password


7339
08:41:28,080 --> 08:41:32,478
controllers and grabbing their text which is the latest text that the user


7340
08:41:32,478 --> 08:41:35,600
entered in those fields okay so


7341
08:41:35,600 --> 08:41:39,520
after we've done that now you can go and say firebase


7342
08:41:39,520 --> 08:41:43,600
auth instance


7343
08:41:44,398 --> 08:41:48,958
and then you will say create user with email and password you can see this is a


7344
08:41:48,958 --> 08:41:52,080
function that allows you to register or create a


7345
08:41:52,080 --> 08:41:56,318
user as its name indicates uh with firebase so


7346
08:41:56,318 --> 08:42:01,760
um i'm gonna do that so as you can see here as well this thing returns a future


7347
08:42:01,760 --> 08:42:05,440
okay so um


7348
08:42:05,440 --> 08:42:10,878
so this is this is not nothing that you can just like call and say hey do this


7349
08:42:10,878 --> 08:42:12,798
now um


7350
08:42:12,798 --> 08:42:17,440
without actually awaiting on it otherwise it will just say here i am a


7351
08:42:17,440 --> 08:42:21,280
future i'm something that i will calculate something in the future and


7352
08:42:21,280 --> 08:42:25,920
by not putting a weight before that call you will only get the instance of future


7353
08:42:25,920 --> 08:42:30,160
you will not actually get the work that it's doing you will get like a wrapper


7354
08:42:30,160 --> 08:42:33,520
around the work saying that this is the kind of work i'm gonna do but if you


7355
08:42:33,520 --> 08:42:37,520
have weight on it it will actually perform the work


7356
08:42:37,520 --> 08:42:40,878
if that makes any sense so i've explained the weight in that chapter i


7357
08:42:40,878 --> 08:42:44,878
think also chapter seven or whatever it was when we talked about more advanced


7358
08:42:44,878 --> 08:42:48,798
topics in dart so please have a look at that chapter as well


7359
08:42:48,798 --> 08:42:53,600
um after doing that you will see that the return of this is actually future of


7360
08:42:53,600 --> 08:42:58,080
a user credential so what i'm going to do is i'm going to say final user


7361
08:42:58,080 --> 08:43:02,638
credential is this and then i'm going to print it user


7362
08:43:02,638 --> 08:43:06,558
credential okay so command s


7363
08:43:06,558 --> 08:43:11,280
and just hot restart here just in case because we didn't import so what i'm


7364
08:43:11,280 --> 08:43:16,958
going to do in enter email here i'm going to say pixelityab.gmail.com


7365
08:43:16,958 --> 08:43:20,558
and for the password i'm just going to say fubar


7366
08:43:20,558 --> 08:43:26,240
bass okay so let's bring our console up so we can


7367
08:43:26,240 --> 08:43:29,440
see what our application prints to the screen


7368
08:43:29,440 --> 08:43:33,520
and i'm just going to say register which we're going to get an error for right


7369
08:43:33,520 --> 08:43:39,520
now so and you can see here it says no firebase


7370
08:43:39,520 --> 08:43:44,958
app default has been created called firebase initialize app


7371
08:43:44,958 --> 08:43:47,680
so this is i mean this is really good that


7372
08:43:47,680 --> 08:43:52,398
we're getting this because i actually have planned for us to fix that


7373
08:43:52,398 --> 08:43:59,120
um but before we go ahead and do that um i should probably explain what this


7374
08:43:59,120 --> 08:44:02,878
is why this is happening you see firebase there was there was if you


7375
08:44:02,878 --> 08:44:06,080
remember when we configured it there was a file created here for us called


7376
08:44:06,080 --> 08:44:09,760
firebase options and it has a lot of code in it and then


7377
08:44:09,760 --> 08:44:15,360
there's like a configuration here uh that here you see android and for ios as


7378
08:44:15,360 --> 08:44:18,798
well now what firebase is complaining about is saying that you've created this


7379
08:44:18,798 --> 08:44:22,318
configuration but you've never actually told me about it so


7380
08:44:22,318 --> 08:44:26,558
poor firebase so what we need to do now before we actually do the configuration


7381
08:44:26,558 --> 08:44:29,040
is to fix something that you can immediately see


7382
08:44:29,040 --> 08:44:31,840
on the screen which is which is incorrect


7383
08:44:31,840 --> 08:44:36,478
you see foo bar bas is your password it shouldn't be visible to the user so when


7384
08:44:36,478 --> 08:44:41,040
you're typing it it should be a password field and at the same time this field


7385
08:44:41,040 --> 08:44:45,280
here you see is is an email field but where is the add sign at sign isn't


7386
08:44:45,280 --> 08:44:49,840
immediately visible here so you need to tell these text fields to be configured


7387
08:44:49,840 --> 08:44:54,558
in a specific way so that they're actually suitable for email and password


7388
08:44:54,558 --> 08:44:58,240
registration fields so i'm going to get rid of this bar on


7389
08:44:58,240 --> 08:45:02,558
the right oh sorry on the left and what we need to do is to bring up


7390
08:45:02,558 --> 08:45:06,080
the caption for the next thing for the next topic to


7391
08:45:06,080 --> 08:45:09,600
talk about talk about first what we're going to do is to make


7392
08:45:09,600 --> 08:45:12,638
this password text field


7393
08:45:12,638 --> 08:45:14,798
secure so


7394
08:45:14,798 --> 08:45:18,718
what you need to do here in your decoration of the password field go in


7395
08:45:18,718 --> 08:45:23,840
here and say obscure um actually it's not in the decorations right here


7396
08:45:23,840 --> 08:45:28,318
obscure text it has true and if you press s on that


7397
08:45:28,318 --> 08:45:33,280
you'll see that your text is now obscure also you need to do a


7398
08:45:33,280 --> 08:45:37,680
enable suggestions false and then you will also do


7399
08:45:37,680 --> 08:45:41,120
autocorrect false these are three important


7400
08:45:41,120 --> 08:45:44,558
properties to provide here now you see enable


7401
08:45:44,558 --> 08:45:48,798
suggestions is usually like as you're typing in a text field depending on your


7402
08:45:48,798 --> 08:45:52,080
operating system it will provide you suggestions like


7403
08:45:52,080 --> 08:45:54,958
this in a password field you don't want to do


7404
08:45:54,958 --> 08:45:58,000
that you don't want to have any suggestions so that's for enabled


7405
08:45:58,000 --> 08:46:02,878
suggestions also autocorrect is when you try to type something and you know you


7406
08:46:02,878 --> 08:46:05,600
all probably know what autocorrect is so i'm not going to explain it so you're


7407
08:46:05,600 --> 08:46:08,798
disabling autocorrect based on your password password field which makes


7408
08:46:08,798 --> 08:46:14,160
sense so um now let's go and bring these two properties


7409
08:46:14,160 --> 08:46:18,318
also to our email field which is here


7410
08:46:18,318 --> 08:46:21,680
okay and what we're also going to do is to


7411
08:46:21,680 --> 08:46:27,520
tell it that it is an email it needs an email keyboard so let's go in here and


7412
08:46:27,520 --> 08:46:32,558
say input or keyboard i think type and it's called


7413
08:46:32,558 --> 08:46:36,160
text input type i think


7414
08:46:36,160 --> 08:46:41,120
and then dot email there's the email address so


7415
08:46:41,120 --> 08:46:45,520
save it now if i then go here you can see


7416
08:46:45,520 --> 08:46:51,760
there's an ad sign so i can um oh sorry you can't see it so i'm going to do


7417
08:46:51,760 --> 08:46:55,520
this so you can actually see the that sign so you can see their keyboard here


7418
08:46:55,520 --> 08:46:59,760
and then there's an ad sign right there okay


7419
08:46:59,920 --> 08:47:03,520
so that's for that and then suggestions are


7420
08:47:03,520 --> 08:47:09,280
also disabled so as i type there's no suggestions really for my um text


7421
08:47:09,280 --> 08:47:12,160
because you don't want suggestions on email fields emails are usually like


7422
08:47:12,160 --> 08:47:16,638
crazy texts so um or not usually but sometimes so you


7423
08:47:16,638 --> 08:47:21,280
don't want any suggestions there okay we've done that i wanna take all of


7424
08:47:21,280 --> 08:47:28,240
these items as done in in my notes now the next thing we need to do


7425
08:47:28,240 --> 08:47:34,080
is uh to fix that uh initialization of our firebase app so


7426
08:47:34,080 --> 08:47:38,160
we're gonna do it naively right now so i'm going to go


7427
08:47:38,160 --> 08:47:42,398
because you see we still have this error so if i if i bring this up


7428
08:47:42,398 --> 08:47:45,520
clean the errors and then say


7429
08:47:45,520 --> 08:47:52,958
pixelity a b gmail.com and i say ubar baz


7430
08:47:52,958 --> 08:47:58,000
i say register we will still get this error that says no if no firebase app is


7431
08:47:58,000 --> 08:48:02,718
configured okay so what we need to do is to actually


7432
08:48:02,718 --> 08:48:06,160
register sorry initialize firebase before we do


7433
08:48:06,160 --> 08:48:10,878
firebase instance create user with email and password


7434
08:48:10,878 --> 08:48:15,120
so what we need to do then is to go here


7435
08:48:15,120 --> 08:48:20,398
and say firebase initialize firebase


7436
08:48:20,558 --> 08:48:22,798
app


7437
08:48:22,878 --> 08:48:25,840
see what we have there


7438
08:48:26,160 --> 08:48:32,478
firebase auth instance or initialize app


7439
08:48:32,478 --> 08:48:36,000
i've actually forgotten the syntax for that so


7440
08:48:36,000 --> 08:48:41,280
let's see if we actually can learn how to do that by going to our


7441
08:48:41,280 --> 08:48:44,638
um firebase options


7442
08:48:44,638 --> 08:48:48,080
initialize you can see it should be done like this


7443
08:48:48,080 --> 08:48:52,398
and what we need to do then is to import firebase options as it's as it's showing


7444
08:48:52,398 --> 08:48:57,440
here firebase options and then await firebase.initialize app with this okay


7445
08:48:57,440 --> 08:49:01,840
so let's let's kind of grab that code and then go into our main guard file and


7446
08:49:01,840 --> 08:49:07,360
import firebase options so i'm going to go here and say import


7447
08:49:08,318 --> 08:49:13,280
firebase options and right before we


7448
08:49:13,280 --> 08:49:15,840
do the


7449
08:49:16,398 --> 08:49:19,440
registration here i'm gonna do


7450
08:49:19,440 --> 08:49:23,200
this code that was provided there for us so i'm gonna remove the comments


7451
08:49:23,200 --> 08:49:28,080
command s and i can still see that firebase isn't imported so we're going


7452
08:49:28,080 --> 08:49:32,240
to import it by doing import library package firebase core firebase core here


7453
08:49:32,240 --> 08:49:35,120
what i did here is that i basically took advantage something that's built into


7454
08:49:35,120 --> 08:49:39,440
visual studio code in order for me to get the import statement automatically


7455
08:49:39,440 --> 08:49:42,558
so i'm going to do command dot on it and it says okay


7456
08:49:42,558 --> 08:49:46,798
import this dart file so i'm just gonna take advantage of that why not


7457
08:49:46,798 --> 08:49:51,840
and you can see that it is imported here firebase core


7458
08:49:51,840 --> 08:49:54,878
so now that we've done that um i'm gonna


7459
08:49:54,878 --> 08:50:02,240
press command s my state is preserved in the uh in my phone here and let me bring


7460
08:50:02,240 --> 08:50:07,440
the logs here clean them and then i'm gonna press the register button


7461
08:50:07,440 --> 08:50:11,760
boom uh here and we got an error here and it


7462
08:50:11,760 --> 08:50:15,760
says device unlock initializing all firebase apis and firebase preparing to


7463
08:50:15,760 --> 08:50:21,440
create blah blah and let's actually see what the error was so


7464
08:50:21,440 --> 08:50:25,840
it is on handle exception request failed


7465
08:50:25,840 --> 08:50:29,280
and unreachable host and that is probably


7466
08:50:29,280 --> 08:50:33,600
because i actually don't have proper internet connection on my


7467
08:50:33,600 --> 08:50:35,440
phone here


7468
08:50:35,440 --> 08:50:39,120
so i'm gonna go here and i'm gonna go to settings


7469
08:50:39,120 --> 08:50:43,440
actually great that you're seeing these errors because these things do happen so


7470
08:50:43,440 --> 08:50:47,200
and i'm gonna turn wi-fi on so make sure that it's gonna connect to


7471
08:50:47,200 --> 08:50:50,160
a valid wi-fi here


7472
08:50:50,160 --> 08:50:53,600
and it connected i'm gonna go back to the application


7473
08:50:53,600 --> 08:50:58,718
clear the logs oh my god there are so many things displayed there


7474
08:50:58,718 --> 08:51:01,600
so then what i'm gonna do is i'm gonna repeat the same thing i'm gonna say


7475
08:51:01,600 --> 08:51:04,240
register now so


7476
08:51:04,240 --> 08:51:10,398
now we got to the next state that i have prepared that it


7477
08:51:10,398 --> 08:51:15,280
says you can see in the errors it says configuration not found now


7478
08:51:15,280 --> 08:51:20,798
what is happening here i'm not taking my notes that we've talked about the other


7479
08:51:20,798 --> 08:51:24,638
part of the code what is happening here is that


7480
08:51:24,638 --> 08:51:30,000
we haven't actually told firebase that we are going to take advantage of


7481
08:51:30,000 --> 08:51:34,318
email and password signing combination as i told you before there are various


7482
08:51:34,318 --> 08:51:40,718
way for various ways for a firebase to allow us to register a user uh apple


7483
08:51:40,718 --> 08:51:45,600
login um you can do email and password combination you can do facebook you can


7484
08:51:45,600 --> 08:51:48,958
do google maybe twitter as well yeah i think


7485
08:51:48,958 --> 08:51:53,680
twitter was there as well so you need to tell firebase that um


7486
08:51:53,680 --> 08:52:00,080
we basically want to allow this combination all right


7487
08:52:00,080 --> 08:52:03,520
so now i've explained that let's bring up


7488
08:52:03,520 --> 08:52:09,680
safari or your favorite browser maybe chrome and let's go to uh console


7489
08:52:09,680 --> 08:52:13,680
firebase google.com i'm going to bring my browser on the screen so you can also


7490
08:52:13,680 --> 08:52:17,760
see it and i'm going to then find our


7491
08:52:17,760 --> 08:52:22,798
application which was called uh my notes flutter project okay so go


7492
08:52:22,798 --> 08:52:25,520
to consolefirebase.google.com and find your


7493
08:52:25,520 --> 08:52:29,520
project that you created in the previous chapter click on it


7494
08:52:29,520 --> 08:52:33,280
then go to authentication as i as i show you here


7495
08:52:33,280 --> 08:52:36,878
and let's see uh


7496
08:52:36,878 --> 08:52:40,798
authentication actually get started


7497
08:52:41,920 --> 08:52:45,760
and in sign in uh what we need is this email and


7498
08:52:45,760 --> 08:52:49,760
password combination so go email and password combination and just allow it


7499
08:52:49,760 --> 08:52:53,920
all right so and then press save


7500
08:52:53,920 --> 08:52:56,958
and that's it that's all you have to do so i'm gonna


7501
08:52:56,958 --> 08:52:59,760
grab this screen just kind of bring it to another


7502
08:52:59,760 --> 08:53:05,200
monitor so you don't see it clean the logs and then say register


7503
08:53:05,200 --> 08:53:09,680
so you can see now all of a sudden you got user credentials back from firebase


7504
08:53:09,680 --> 08:53:14,080
so you actually could now um


7505
08:53:14,080 --> 08:53:19,360
register your application like register a real user with firebase like that is


7506
08:53:19,360 --> 08:53:23,520
actually magical so i'm gonna click on my notes that i've talked about


7507
08:53:23,520 --> 08:53:26,558
that so


7508
08:53:26,558 --> 08:53:30,478
however you see this this is a little bit problematic in that by pressing the


7509
08:53:30,478 --> 08:53:34,718
button but we're actually initializing an application and then we're doing the


7510
08:53:34,718 --> 08:53:38,718
create user with email and password what would happen if you had two or three


7511
08:53:38,718 --> 08:53:43,280
buttons on the screen all needing firebase you can't do firebase


7512
08:53:43,280 --> 08:53:47,600
initialize app in every single one of them so the solution to this is kind of


7513
08:53:47,600 --> 08:53:52,398
like initializing your firebase application before you


7514
08:53:52,398 --> 08:53:57,200
start and start with everything else in your in your on your screen and on your


7515
08:53:57,200 --> 08:54:01,760
phone so there is good documentation of how to do


7516
08:54:01,760 --> 08:54:05,760
that and i've actually linked to that so i'm going to bring it here


7517
08:54:05,760 --> 08:54:10,558
so what we need to do is take advantage of something called widgets flutter


7518
08:54:10,558 --> 08:54:13,520
binding and


7519
08:54:13,520 --> 08:54:19,040
what happens to be honest with you here is that firebase it needs some


7520
08:54:19,040 --> 08:54:23,200
it needs to kick start its process before everything


7521
08:54:23,200 --> 08:54:28,718
else is rendered on the screen and in order for that to happen it needs to it


7522
08:54:28,718 --> 08:54:33,440
needs to have some sort of that like the core flutter engine to be in place


7523
08:54:33,440 --> 08:54:37,120
and so that it can make its call to the core slaughter engine and say that i'm


7524
08:54:37,120 --> 08:54:42,638
done with my work so in order to do that then you need something called um


7525
08:54:42,638 --> 08:54:46,718
widgets flutter binding so i'm gonna


7526
08:54:46,718 --> 08:54:52,080
i'm gonna bring up the um caption for that and i can show


7527
08:54:52,080 --> 08:54:54,878
you that i'm this is this is the documentation that i'm showing you as of


7528
08:54:54,878 --> 08:54:57,360
linked there so


7529
08:54:57,360 --> 08:55:02,718
in our in your void function here um before we actually you see


7530
08:55:02,718 --> 08:55:06,398
maybe i'm jumping over a little bit but what we're trying to do is to try to fix


7531
08:55:06,398 --> 08:55:11,120
this issue here that we're awaiting on initialize app on firebase okay so we


7532
08:55:11,120 --> 08:55:14,000
don't want to do this on the press of a button we actually want to do it


7533
08:55:14,000 --> 08:55:17,760
somewhere else and in order to be able to do that somewhere else we have to


7534
08:55:17,760 --> 08:55:23,120
first take care of this widget binding okay so in your main function in here


7535
08:55:23,120 --> 08:55:27,120
then say um i think we need to say


7536
08:55:27,120 --> 08:55:33,520
widgets flutter binding dot ensure initialized like that


7537
08:55:33,520 --> 08:55:37,440
okay and if you want to know more about that i strongly suggest that you read


7538
08:55:37,440 --> 08:55:41,840
this documentation that i've provided here okay


7539
08:55:42,080 --> 08:55:47,360
so now that that is in place um now that you've done that do a hot


7540
08:55:47,360 --> 08:55:50,718
restart okay so you're gonna lose your state


7541
08:55:50,718 --> 08:55:53,920
here after the hot restart and that's okay


7542
08:55:53,920 --> 08:55:58,398
i'm gonna take that in my notes that i've talked about that


7543
08:55:58,398 --> 08:56:02,318
now as you know this initialize


7544
08:56:02,318 --> 08:56:07,680
app is a future you see it's a future of firebase app now what you need to do is


7545
08:56:07,680 --> 08:56:15,360
kind of like you want to tell flutter to not build this column before it has


7546
08:56:15,360 --> 08:56:19,280
finished doing that future and


7547
08:56:19,280 --> 08:56:25,840
the way to do that is using flutter's future builder widget future builder it


7548
08:56:25,840 --> 08:56:29,840
takes a future it performs the future and once this


7549
08:56:29,840 --> 08:56:34,958
future has succeeded or it has failed doing its work it will give you a call


7550
08:56:34,958 --> 08:56:39,600
back and in that callback it asks you to actually produce a widget you want to


7551
08:56:39,600 --> 08:56:42,478
display to the user depending on the state


7552
08:56:42,478 --> 08:56:47,680
of that futures result so it basically instead of you having to do this


7553
08:56:47,680 --> 08:56:52,558
initialization of firebase every time a user presses the button you say i'm not


7554
08:56:52,558 --> 08:56:57,840
going to do anything until that is done once that is done or if it errors out


7555
08:56:57,840 --> 08:57:01,520
let me know then i will give you a widget to display to the user depending


7556
08:57:01,520 --> 08:57:05,680
on the results okay so what we're gonna do


7557
08:57:05,680 --> 08:57:10,478
is gonna go to this body which is a column right now command dot and then


7558
08:57:10,478 --> 08:57:14,240
let's see stream builder we have but we don't have future builder so i'm just


7559
08:57:14,240 --> 08:57:19,680
gonna say command dot wrap with widget


7560
08:57:19,680 --> 08:57:24,398
and i'm gonna say future builder okay so i'm gonna build a future as you can see


7561
08:57:24,398 --> 08:57:28,718
it says okay builder is required so let's put a


7562
08:57:28,718 --> 08:57:33,040
builder parameter here and if you're like me and you forget these syntaxes


7563
08:57:33,040 --> 08:57:37,360
you can just control space in visual studio code on mac or command space in


7564
08:57:37,360 --> 08:57:42,798
linux and windows to get help and then you'll just use this syntax


7565
08:57:42,798 --> 08:57:48,558
there okay so bring your entire column


7566
08:57:48,718 --> 08:57:53,680
here you see this until the end of the column without the comma


7567
08:57:53,680 --> 08:57:57,120
then you remove your child bring that entire thing and put a return here and


7568
08:57:57,120 --> 08:58:00,638
just place it there okay like that


7569
08:58:00,638 --> 08:58:07,200
now your future builder um it doesn't have an actual future to come to perform


7570
08:58:07,200 --> 08:58:11,040
so for its future


7571
08:58:11,040 --> 08:58:14,478
let's see i wanna say that we've talked about the future


7572
08:58:14,478 --> 08:58:16,878
builder


7573
08:58:16,958 --> 08:58:20,878
and what we need to do now is to grab this future from here you see


7574
08:58:20,878 --> 08:58:25,760
await firebase initialize app and grab that future without the weight remove


7575
08:58:25,760 --> 08:58:31,120
the weight and put it in the future builders future


7576
08:58:31,120 --> 08:58:34,958
parameter like that


7577
08:58:34,958 --> 08:58:37,040
all right command s


7578
08:58:37,040 --> 08:58:40,478
on a hot restart and


7579
08:58:40,478 --> 08:58:44,798
you can see nothing has really happened on the screen so


7580
08:58:44,798 --> 08:58:49,440
you didn't have any difference you don't notice any difference basically


7581
08:58:49,440 --> 08:58:52,958
so if everything really worked as it should


7582
08:58:52,958 --> 08:58:57,840
um then what we need to do then is to


7583
08:58:57,840 --> 08:59:01,600
um if everything is working as expected then we should be able to register users


7584
08:59:01,600 --> 08:59:07,200
so what i'm going to do here is i'm going to provide the exact same user


7585
08:59:07,760 --> 08:59:13,600
already registered and then say register and you'll see now we get an error


7586
08:59:13,600 --> 08:59:17,520
let's see if i can show you there and it says the error is firebase auth email


7587
08:59:17,520 --> 08:59:22,160
already in use the email or the email address is already in use by another


7588
08:59:22,160 --> 08:59:25,520
account and that is this part which i'm gonna


7589
08:59:25,520 --> 08:59:28,718
bring the caption up for you


7590
08:59:29,360 --> 08:59:35,600
so we've also talked about that


7591
08:59:36,000 --> 08:59:38,160
all right so


7592
08:59:38,160 --> 08:59:42,840
the next topic that i want to talk about before we close off and round off this


7593
08:59:42,840 --> 08:59:47,760
uh chapter is connection states you see


7594
08:59:47,760 --> 08:59:50,558
we told future builder to perform a future


7595
08:59:50,558 --> 08:59:54,718
the future was firebase initialize app okay this thing


7596
08:59:54,718 --> 08:59:58,398
now if you look at the builder what we're returning from it right now is a


7597
08:59:58,398 --> 09:00:02,318
column but we're completely ignoring the parameters that are coming in here


7598
09:00:02,318 --> 09:00:05,120
the second parameter that gets passed your builder is something called a


7599
09:00:05,120 --> 09:00:09,120
snapshot of data type async snapshot as you can see there


7600
09:00:09,120 --> 09:00:14,398
an async snapshot of an object is the state of that object right now okay


7601
09:00:14,398 --> 09:00:19,040
so and that object itself is actually the result of your future in this case


7602
09:00:19,040 --> 09:00:22,478
firebase app so it's just that


7603
09:00:22,478 --> 09:00:26,478
it didn't understand that this snapshot is an async snapshot of your firebase


7604
09:00:26,478 --> 09:00:30,798
app but that's okay we don't actually need the firebase app in the snapshot


7605
09:00:30,798 --> 09:00:36,398
however one thing that you do need in this snapshot is its state you see a


7606
09:00:36,398 --> 09:00:42,160
future has a start point it has a line where it processes its information and


7607
09:00:42,160 --> 09:00:48,240
it has an end point it either ends successfully or it fails now the


7608
09:00:48,240 --> 09:00:54,638
snapshot is your way of getting the results of your future whether it


7609
09:00:54,638 --> 09:01:00,160
has it started is it processing is it done or did it fail so what we need to


7610
09:01:00,160 --> 09:01:05,840
do in here as we're waiting for firebase initialize app to do its work we're


7611
09:01:05,840 --> 09:01:11,200
gonna basically say uh we're loading just tell the user loading and as soon


7612
09:01:11,200 --> 09:01:14,000
as the snapshot is done then we're gonna say that


7613
09:01:14,000 --> 09:01:17,840
loading has finished


7614
09:01:17,920 --> 09:01:21,360
so let's do that let's go in here and say


7615
09:01:21,360 --> 09:01:25,040
switch snapshot


7616
09:01:25,040 --> 09:01:27,840
i believe it's called


7617
09:01:28,240 --> 09:01:32,798
connection state all right and then get help from visual studio code to complete


7618
09:01:32,798 --> 09:01:35,600
this so i'm going to say add missing case clauses and you can see there are


7619
09:01:35,600 --> 09:01:39,920
so many different cases right


7620
09:01:39,920 --> 09:01:44,398
done waiting active and done all right so


7621
09:01:44,398 --> 09:01:47,600
for none


7622
09:01:47,600 --> 09:01:52,958
waiting let's let's just say everything else except for done we're gonna return


7623
09:01:52,958 --> 09:01:57,280
like a text that just says loading so


7624
09:01:57,280 --> 09:02:02,160
let's say in here we remove all of these okay


7625
09:02:02,160 --> 09:02:07,280
in the done statement we say return this entire column


7626
09:02:07,280 --> 09:02:10,080
all the way here


7627
09:02:10,878 --> 09:02:15,120
right and then we don't need the break because we said return and then we're


7628
09:02:15,120 --> 09:02:20,160
going to say default default is a special case which is not


7629
09:02:20,160 --> 09:02:24,958
actually inside that enumeration but is a case that says everything else that i


7630
09:02:24,958 --> 09:02:30,080
haven't handled and in this case we just say return text


7631
09:02:30,080 --> 09:02:35,280
loading something like this as a constant okay


7632
09:02:35,280 --> 09:02:39,680
so i'm gonna heart reload sorry hot restart and the two hours


7633
09:02:39,680 --> 09:02:42,958
video this is happening so fast that we're not actually seeing the loading


7634
09:02:42,958 --> 09:02:46,798
but at least we have handled the case that if for instance a user's connection


7635
09:02:46,798 --> 09:02:52,000
is too slow or their device is too slow when the future has finished they will


7636
09:02:52,000 --> 09:02:54,958
see this column i'm gonna actually fold it


7637
09:02:54,958 --> 09:02:58,798
and if this feature hasn't finished yet it's not done then they will see this


7638
09:02:58,798 --> 09:03:02,398
text offloading all right and by the way this is how you can actually fold and


7639
09:03:02,398 --> 09:03:06,080
unfold things in visual studio code so fold


7640
09:03:06,080 --> 09:03:13,360
fold like this unfold all right it's a great way of seeing more of your code so


7641
09:03:13,680 --> 09:03:18,958
wow a lot of information this this video took an hour kind of like as i expected


7642
09:03:18,958 --> 09:03:24,318
um so we now have a basic firebase setup


7643
09:03:24,318 --> 09:03:28,160
we've done our initialization of the application of our firebase we talked


7644
09:03:28,160 --> 09:03:31,520
about a lot of widgets actually we talked about column


7645
09:03:31,520 --> 09:03:36,080
column we text talked about text future builder


7646
09:03:36,080 --> 09:03:39,200
text field container


7647
09:03:39,200 --> 09:03:44,558
god app bar so many things so this is a lot of content and if you


7648
09:03:44,558 --> 09:03:48,080
didn't get all of it that's okay we're gonna talk more about these in the


7649
09:03:48,080 --> 09:03:52,718
upcoming chapters but i strongly suggest that i mean if


7650
09:03:52,718 --> 09:03:57,680
you're watching this course and if you're just watching it


7651
09:03:57,680 --> 09:04:00,478
and if you're an advanced developer and


7652
09:04:00,478 --> 09:04:04,240
you're watching that's completely fine but if you're if you're develop if


7653
09:04:04,240 --> 09:04:09,200
you're not a developer or if you're a junior developer or someone who


7654
09:04:09,200 --> 09:04:12,398
doesn't have so much experience with flutter development and you're really


7655
09:04:12,398 --> 09:04:16,478
trying to learn everything i'm saying here please don't just watch this video


7656
09:04:16,478 --> 09:04:21,680
go and do this yourself go and write this code pause the video as i'm talking


7657
09:04:21,680 --> 09:04:25,040
i know i'll talk a little bit fast but that's just to save a little bit of time


7658
09:04:25,040 --> 09:04:29,200
pause the video write the code as i write it test it as i test it and see


7659
09:04:29,200 --> 09:04:32,798
the results for yourself because that's how you will learn not just by watching


7660
09:04:32,798 --> 09:04:36,718
so great we've talked a lot about


7661
09:04:36,718 --> 09:04:42,160
widgets and firebase configuration and in the next chapter we're going to


7662
09:04:42,160 --> 09:04:47,200
talk about login screen and also email verification and also clean up our


7663
09:04:47,200 --> 09:04:51,440
registration screen so without further ado let's just prepare yourself for the


7664
09:04:51,440 --> 09:04:56,718
next chapter and i'll see you there hello and welcome to chapter 13 of this


7665
09:04:56,718 --> 09:04:59,760
flutter course in this chapter we're going to talk


7666
09:04:59,760 --> 09:05:05,200
about the login view in chapter 12 as i can see here


7667
09:05:05,200 --> 09:05:10,080
sorry about that we talked about the registration flow and


7668
09:05:10,080 --> 09:05:13,760
we actually talked about quite a lot of things which after after that i i


7669
09:05:13,760 --> 09:05:18,878
thought maybe we need to kind of like go through them one more time just


7670
09:05:18,878 --> 09:05:21,920
every now and then talk about those those little widgets that we talked


7671
09:05:21,920 --> 09:05:26,958
about like a future builder center column text button and we talked also


7672
09:05:26,958 --> 09:05:30,718
about um text field text editing controller so


7673
09:05:30,718 --> 09:05:34,160
there were lots of components that we talked about but we got pretty much like


7674
09:05:34,160 --> 09:05:37,200
a a simple registration flow working it


7675
09:05:37,200 --> 09:05:41,520
wasn't really a flow actually it was just a simple registration screen


7676
09:05:41,520 --> 09:05:45,440
i'm saying that it wasn't a flow because it was just a simple screen that didn't


7677
09:05:45,440 --> 09:05:48,718
lean anywhere that's usually what is called the flow if you have a screen


7678
09:05:48,718 --> 09:05:52,478
that leads somewhere now in this chapter we're going to talk


7679
09:05:52,478 --> 09:05:56,878
about login the login view and we're also going to divide the logic that


7680
09:05:56,878 --> 09:06:03,120
we've created in our current home page and put it into a registration view so


7681
09:06:03,120 --> 09:06:06,558
we're by the end of this chapter we're gonna have two views one is for the


7682
09:06:06,558 --> 09:06:11,758
registration the other one is for the login okay


7683
09:06:11,758 --> 09:06:16,960
so as i've shown you here um we have those logic i mean the


7684
09:06:16,960 --> 09:06:20,800
registration logic in place now we have to work on login but we also work a


7685
09:06:20,800 --> 09:06:23,598
little bit on cleaning up the code because


7686
09:06:23,598 --> 09:06:26,718
usually this i mean as you get more and more comfortable with software


7687
09:06:26,718 --> 09:06:30,878
development you'll know that you will have like these flows of ideas


7688
09:06:30,878 --> 09:06:34,320
and then you'll start coding and write your code and then you test it and then


7689
09:06:34,320 --> 09:06:38,238
after a while you realize oh this got a little bit messy i have to refactor the


7690
09:06:38,238 --> 09:06:42,320
code so that's what refactoring kind of means like you take what is already


7691
09:06:42,320 --> 09:06:46,078
there and you kind of make it better make it cleaner more presentable so


7692
09:06:46,078 --> 09:06:50,398
that's what we're also going to do in this chapter


7693
09:06:50,398 --> 09:06:55,840
so the first thing we need to do is to create a stateful register view widget


7694
09:06:55,840 --> 09:06:58,878
okay so as you can see here this will be used


7695
09:06:58,878 --> 09:07:03,840
as the base of our register view


7696
09:07:03,840 --> 09:07:06,878
so let me go and bring some stuff that


7697
09:07:06,878 --> 09:07:11,680
we're going to need in this chapter the first one is my scr


7698
09:07:11,680 --> 09:07:14,800
i bring it to the screen so you'll see it as well


7699
09:07:14,800 --> 09:07:18,480
and scr cpy we set it up in one of the previous chapters so you should be


7700
09:07:18,480 --> 09:07:21,520
comfortable with that already um


7701
09:07:21,520 --> 09:07:25,520
i'm going to go to go to our app here which is the register view that we


7702
09:07:25,520 --> 09:07:29,040
created gonna bring my face to the right so we'll see a bit more of the content


7703
09:07:29,040 --> 09:07:33,200
on the screen and then i'm also going to bring up


7704
09:07:33,200 --> 09:07:38,320
visual studio code which is appearing on another screen right now but i'll bring


7705
09:07:38,320 --> 09:07:42,160
it up here so you'll see as well i'm going to increase the size a little


7706
09:07:42,160 --> 09:07:46,480
bit as well so it becomes easier to see


7707
09:07:46,480 --> 09:07:51,278
so this is where we lift things um let me bring up


7708
09:07:51,278 --> 09:07:55,598
and do the screen like this so this is where we live things we have a home page


7709
09:07:55,598 --> 09:08:00,718
which at the moment is the register view okay but we need to create a register


7710
09:08:00,718 --> 09:08:05,758
view like not just a home page it's called the home page so


7711
09:08:05,758 --> 09:08:09,122
and since we need a stateful widget we're going to use a shortcut in visual


7712
09:08:09,122 --> 09:08:13,840
studio code to create a stateful widget for us and that is with s t f as in


7713
09:08:13,840 --> 09:08:19,758
state full so if you want to create a stateless widget you'd say stl okay


7714
09:08:19,758 --> 09:08:23,918
so stf and in here we're going to call it what


7715
09:08:23,918 --> 09:08:29,360
should we say register view like that all right


7716
09:08:29,360 --> 09:08:33,200
so this will be as i've mentioned here this


7717
09:08:33,200 --> 09:08:38,238
will be the base of our


7718
09:08:39,918 --> 09:08:43,438
this will be the base of our registration view all the code for


7719
09:08:43,438 --> 09:08:47,040
register will appear here i'm sorry that i'm looking


7720
09:08:47,040 --> 09:08:50,718
here just to make sure that i'm basically


7721
09:08:50,718 --> 09:08:53,680
going through my notes i have very detailed notes here and just making sure


7722
09:08:53,680 --> 09:08:56,640
that you get all the information that i plan for you to get so if you see me


7723
09:08:56,640 --> 09:08:59,680
looking here it's just because i'm looking at the notes to ensure that


7724
09:08:59,680 --> 09:09:02,640
um so now that we've created register view at the moment it doesn't have


7725
09:09:02,640 --> 09:09:06,398
anything so it's just a container and the default color for containers and


7726
09:09:06,398 --> 09:09:11,520
background is black so let's go to our register view here


7727
09:09:11,520 --> 09:09:14,640
so let's go to our main function here and as you can see at the moment we're


7728
09:09:14,640 --> 09:09:18,640
returning home page as the home and what we're going to do here is just to say


7729
09:09:18,640 --> 09:09:22,718
instead of that return register view okay


7730
09:09:22,718 --> 09:09:26,480
and that is it's very possible we will get a problem here and you can see


7731
09:09:26,480 --> 09:09:30,718
nothing is changing because i'm changing something inside the main and that isn't


7732
09:09:30,718 --> 09:09:36,000
affected really by a hot reload so we have to hot restart so i'm gonna


7733
09:09:36,000 --> 09:09:39,598
go how to restart here and you can see now the screen is black


7734
09:09:39,598 --> 09:09:41,520
so um


7735
09:09:41,520 --> 09:09:45,520
that part is basically done


7736
09:09:45,598 --> 09:09:51,680
so what we'll have to do here now is to rename our home page to our login view


7737
09:09:51,680 --> 09:09:56,000
actually so we have a new registration view which we're going to write the code


7738
09:09:56,000 --> 09:10:00,320
for or actually place the code from the previous home page into register view


7739
09:10:00,320 --> 09:10:05,360
and we also need the home page to be renamed so it's very some i mean there's


7740
09:10:05,360 --> 09:10:09,040
lots of renaming putting things here and there but we're just playing with some


7741
09:10:09,040 --> 09:10:12,320
names basically here so the next thing you need to do is to go


7742
09:10:12,320 --> 09:10:16,640
to your home page which is here and rename it one way to do that visual


7743
09:10:16,640 --> 09:10:21,278
studio code is to right click on it and just say rename symbol or i believe it's


7744
09:10:21,278 --> 09:10:25,438
also command f2


7745
09:10:25,680 --> 09:10:30,558
or actually for me it's f2 if two does the renaming but on a macbook pro for


7746
09:10:30,558 --> 09:10:34,878
instance you don't you can't just press f2 because f2 has another function


7747
09:10:34,878 --> 09:10:39,598
so what you'll need to do is to press function keyboard keep key on your


7748
09:10:39,598 --> 09:10:43,360
keyboard and then press f2 that will bring up the rename dialog or you could


7749
09:10:43,360 --> 09:10:47,598
just right click here and just say rename symbol which does the same thing


7750
09:10:47,598 --> 09:10:52,558
so rename your home page to login view okay


7751
09:10:53,758 --> 09:10:58,800
all right so we have login view here now um i'm gonna take it that we've done the


7752
09:10:58,800 --> 09:11:02,398
rename um you see


7753
09:11:02,398 --> 09:11:06,640
right now all we've been doing here is just to like write our code write


7754
09:11:06,640 --> 09:11:11,438
everything in main dart but this is this is not a not the right way of doing


7755
09:11:11,438 --> 09:11:15,840
things especially as your projects get bigger you need to make sure that you're


7756
09:11:15,840 --> 09:11:19,278
you're taking the responsibility to also make sure that your code is readable and


7757
09:11:19,278 --> 09:11:22,960
the structure of your project is understandable by others who may also be


7758
09:11:22,960 --> 09:11:27,200
working on the same project now chances are that if you're watching this course


7759
09:11:27,200 --> 09:11:31,840
that you will be the only person working on the source code so you won't have


7760
09:11:31,840 --> 09:11:35,918
anybody else looking at your code even though


7761
09:11:35,918 --> 09:11:39,520
that you may be the only person looking at the code and working with it you


7762
09:11:39,520 --> 09:11:44,640
still will need to from time and time come back to the project fix some stuff


7763
09:11:44,640 --> 09:11:49,758
add some stuff remove some stuff so even if you're the only person working


7764
09:11:49,758 --> 09:11:55,360
with it you will need a clean source code to look at so if you come


7765
09:11:55,360 --> 09:11:58,640
back to the source code after a month and you start to add more and more stuff


7766
09:11:58,640 --> 09:12:02,640
to this main dart file after a while it will just get out of control so


7767
09:12:02,640 --> 09:12:06,160
you'll need to also do refactoring on your code just to ensure that it is in a


7768
09:12:06,160 --> 09:12:09,200
clean state so what we're going to do is to bring up


7769
09:12:09,200 --> 09:12:13,438
our project browser here as you can see we're inside lib and then


7770
09:12:13,438 --> 09:12:18,078
there's a file called main dart what we need to do here is


7771
09:12:18,078 --> 09:12:23,758
to move our login view into its own file and you can see here i've written that


7772
09:12:23,758 --> 09:12:27,918
we're going to move it into lib views login view this file doesn't exist at


7773
09:12:27,918 --> 09:12:32,160
the moment so you'll need to create it what you'll do here i mean in visual


7774
09:12:32,160 --> 09:12:36,960
studio code there's a great trick that you can do that it can create a file on


7775
09:12:36,960 --> 09:12:41,520
all the intermediate folders as well so instead of going here


7776
09:12:41,520 --> 09:12:46,800
and say new folder to create this views folder and then inside there i create a


7777
09:12:46,800 --> 09:12:50,398
login view what you'll need to do just say new file


7778
09:12:50,398 --> 09:12:54,238
and then type the entire path in there so just say


7779
09:12:54,238 --> 09:12:59,840
views and then slash login view dot dart and this will create the views folder


7780
09:12:59,840 --> 09:13:04,398
for you so it's great um


7781
09:13:04,398 --> 09:13:09,680
so what i'll need to do here is to take our login views code as you can see


7782
09:13:09,680 --> 09:13:12,000
here


7783
09:13:12,320 --> 09:13:18,640
as we had here class login view and then bring all that code into this new login


7784
09:13:18,640 --> 09:13:22,078
view file that we just created okay so i'm gonna get this out of the way


7785
09:13:22,078 --> 09:13:24,558
here and just paste it


7786
09:13:24,558 --> 09:13:28,878
all right and that's okay we're getting a lot of errors here and the reason


7787
09:13:28,878 --> 09:13:33,598
behind that is i mean we haven't talked about import statements so much before


7788
09:13:33,598 --> 09:13:38,398
but import statement is a way for you as a programmer to bring


7789
09:13:38,398 --> 09:13:42,800
in code written by others whether it is the flutter team at google


7790
09:13:42,800 --> 09:13:46,320
or whether it is a third party third-party dependency


7791
09:13:46,320 --> 09:13:49,598
and tell your flutter


7792
09:13:49,598 --> 09:13:53,122
project where those pieces of code are and at


7793
09:13:53,122 --> 09:13:55,520
the moment i mean if you're not coming from a


7794
09:13:55,520 --> 09:13:58,960
software engineering background you're not familiar with imports


7795
09:13:58,960 --> 09:14:03,278
this is um i mean the closest analogy that i can find is


7796
09:14:03,278 --> 09:14:06,238
as if for instance in figma you've created


7797
09:14:06,238 --> 09:14:10,078
um you're trying to create an instance of a


7798
09:14:10,078 --> 09:14:12,878
design that you've already created but figment doesn't know where that instance


7799
09:14:12,878 --> 09:14:17,278
is so you'll say oh here's a copy of the button instance


7800
09:14:17,278 --> 09:14:20,238
and then figma is like oh where can i find that button you haven't even


7801
09:14:20,238 --> 09:14:24,558
created it so then you need to first go create that button or drag it in from


7802
09:14:24,558 --> 09:14:27,520
another project and put it in your components


7803
09:14:27,520 --> 09:14:31,438
page and then you can create an instance of it so


7804
09:14:31,438 --> 09:14:35,918
if you're not into design and figma you may not understand what i just


7805
09:14:35,918 --> 09:14:38,640
said but what i'm trying to do is just to be as


7806
09:14:38,640 --> 09:14:41,758
inclusive as possible in this course to make sure anybody who's following this


7807
09:14:41,758 --> 09:14:45,438
course will try to at least understand bits and


7808
09:14:45,438 --> 09:14:48,718
pieces of what i'm saying so


7809
09:14:48,718 --> 09:14:52,398
going back to import what we need to do now is to tell flutter where those


7810
09:14:52,398 --> 09:14:57,360
pieces of highlighted code are and one thing to do in visual studio code which


7811
09:14:57,360 --> 09:15:01,122
can help you greatly if you're trying to go around this


7812
09:15:01,122 --> 09:15:07,200
writing things by hand is just to do command on mac or control on linux and


7813
09:15:07,200 --> 09:15:10,800
windows hold down command or control depending on your operating system and


7814
09:15:10,800 --> 09:15:14,640
press dot then you will see suggestions here as


7815
09:15:14,640 --> 09:15:19,438
where those components those missing components may be placed and what you'll


7816
09:15:19,438 --> 09:15:23,278
need to do here is just to import package flutter material because that's


7817
09:15:23,278 --> 09:15:28,480
where these components that we're using are actually placed so oops


7818
09:15:28,480 --> 09:15:34,160
i managed to click the wrong wrong option there so material boom


7819
09:15:34,160 --> 09:15:39,360
all right i think now almost everything has disappeared all almost every error


7820
09:15:39,360 --> 09:15:42,718
has disappeared except for these firebase errors so


7821
09:15:42,718 --> 09:15:46,558
let's go and let's see


7822
09:15:46,558 --> 09:15:49,598
so let's go in there


7823
09:15:49,598 --> 09:15:54,320
and say now firebase core import that


7824
09:15:54,320 --> 09:15:59,520
and also here we need to import minors firebase options okay


7825
09:15:59,520 --> 09:16:04,078
so i think everything basically is disappeared there's also firebase auth


7826
09:16:04,078 --> 09:16:07,758
import that as well alright so we're good to go now on this


7827
09:16:07,758 --> 09:16:13,918
login view however remember this login views code really is not


7828
09:16:13,918 --> 09:16:17,520
login view i mean if you remember the code that we've written in the previous


7829
09:16:17,520 --> 09:16:21,360
chapter this login view at the moment it says


7830
09:16:21,360 --> 09:16:25,200
log view but all it does is register do you remember that we have the text field


7831
09:16:25,200 --> 09:16:29,840
and even the button that says register so


7832
09:16:29,840 --> 09:16:34,078
what we need to do now is to drag the code as you can see here from


7833
09:16:34,078 --> 09:16:37,918
the login view here we need to kind of bring it into the


7834
09:16:37,918 --> 09:16:43,200
register view okay and our register view at the moment is here you see


7835
09:16:43,200 --> 09:16:47,278
there so let's go and try to do that a little


7836
09:16:47,278 --> 09:16:52,320
bit with care okay so grab all this code that is here in the login view here


7837
09:16:52,320 --> 09:16:56,078
there get dispose in its state


7838
09:16:56,078 --> 09:17:01,680
and also grab your email and password and member variables


7839
09:17:01,680 --> 09:17:06,000
from here and cut them


7840
09:17:06,000 --> 09:17:10,718
so i'm gonna go then in here in the register view state


7841
09:17:10,718 --> 09:17:16,878
then paste those right before the build function so there we go okay


7842
09:17:16,878 --> 09:17:21,520
go back to login view dart and you can see that there is a build function here


7843
09:17:21,520 --> 09:17:24,558
here and


7844
09:17:24,558 --> 09:17:28,878
i'm going to literally just grab that entire build function including the


7845
09:17:28,878 --> 09:17:31,122
override and


7846
09:17:31,122 --> 09:17:36,078
as i can see here the build function ends right there and i'm gonna cut that


7847
09:17:36,078 --> 09:17:43,122
also okay and i'm gonna go here and replace this override on the um


7848
09:17:43,122 --> 09:17:48,800
on the what is it called register view and paste that one from before here okay


7849
09:17:48,800 --> 09:17:53,200
so what all we did here is we made sure that the register view


7850
09:17:53,200 --> 09:17:57,200
it is indeed the register view and the login view is empty at the moment so


7851
09:17:57,200 --> 09:18:00,480
what you'll need to do you see there's an error here that says that okay you


7852
09:18:00,480 --> 09:18:06,320
have a stateful widget for login but it doesn't have any build function


7853
09:18:06,320 --> 09:18:10,320
so you'll now need to create that build function and of course you could do it


7854
09:18:10,320 --> 09:18:12,878
by hand


7855
09:18:13,200 --> 09:18:16,160
but it's i mean


7856
09:18:16,160 --> 09:18:19,438
it's not really it's not really that


7857
09:18:19,438 --> 09:18:22,800
good of an idea to


7858
09:18:23,040 --> 09:18:26,480
write all that code by hand of course in the beginning you may say that oh well i


7859
09:18:26,480 --> 09:18:30,238
just want to learn the best way to learn is to type and i completely understand


7860
09:18:30,238 --> 09:18:33,680
that but there are some things like there are limits i also believe like


7861
09:18:33,680 --> 09:18:36,960
once you've done it once or twice you'll kind of get bored of doing that or


7862
09:18:36,960 --> 09:18:40,238
you'll get tired of doing that so i actually suggest that for these


7863
09:18:40,238 --> 09:18:43,438
functions that you're overriding the best way is actually get your editor


7864
09:18:43,438 --> 09:18:47,758
text editor or ide to complete these things for you so i'm going to go on


7865
09:18:47,758 --> 09:18:52,878
this error and just say command dot on mac and control dot on linux and windows


7866
09:18:52,878 --> 09:18:59,840
and say create one missing override okay and in here we just say return


7867
09:19:00,160 --> 09:19:04,320
okay so that's our login view and you can see


7868
09:19:04,320 --> 09:19:06,960
here now we have


7869
09:19:06,960 --> 09:19:11,360
a register view that is right here and then we also have


7870
09:19:11,360 --> 09:19:14,640
a login view all right


7871
09:19:14,960 --> 09:19:18,800
so let's go then


7872
09:19:18,800 --> 09:19:22,960
in our main dart file here i can see that there is a register and let's just


7873
09:19:22,960 --> 09:19:28,320
actually restart this hot restart okay so we have a register


7874
09:19:28,320 --> 09:19:33,520
and our login view is completely empty so


7875
09:19:33,520 --> 09:19:38,240
now um what we need to do basically is kind of


7876
09:19:38,240 --> 09:19:40,960
like um


7877
09:19:41,120 --> 09:19:45,276
it's kind of work on our login view because this is this is like the goal of


7878
09:19:45,276 --> 09:19:49,200
this chapter we need to have a login view and up


7879
09:19:49,200 --> 09:19:52,080
until this point what we've been doing is kind of like create a register view


7880
09:19:52,080 --> 09:19:55,120
with all the code in it a separate login view


7881
09:19:55,120 --> 09:19:59,840
which was our previously previously created registry so


7882
09:19:59,840 --> 09:20:03,596
i mean this is all a lot of talk just to say that we have a registered view


7883
09:20:03,596 --> 09:20:06,960
but we don't have a login view and we need to work on login views so


7884
09:20:06,960 --> 09:20:10,320
if you remember um wow i mean you don't actually have to


7885
09:20:10,320 --> 09:20:13,596
remember you can look at it here the register view has two fields enter your


7886
09:20:13,596 --> 09:20:16,640
email here and for your password here and


7887
09:20:16,640 --> 09:20:21,276
this is this their register v and login are very similar to each other what


7888
09:20:21,276 --> 09:20:25,680
register view does differently is that it creates this it basically does a call


7889
09:20:25,680 --> 09:20:30,480
to firebase that says create user with email and password


7890
09:20:30,480 --> 09:20:34,560
but if you think about it everything else is very similar


7891
09:20:34,560 --> 09:20:38,400
sorry about that so you need to create you need to make


7892
09:20:38,400 --> 09:20:41,120
sure in both of them that firebase is initialized


7893
09:20:41,120 --> 09:20:46,080
you will have two text fields email password and you will have a button one


7894
09:20:46,080 --> 09:20:50,160
for register and for one for login so


7895
09:20:50,160 --> 09:20:55,360
what we could do to be honest with you is to now go and copy this code that we


7896
09:20:55,360 --> 09:21:00,000
got from our login view okay that happens i actually forgot that


7897
09:21:00,000 --> 09:21:04,160
so let's go and copy this code again from here


7898
09:21:04,160 --> 09:21:09,360
literally get grab everything from there and put it in our login view like that


7899
09:21:09,360 --> 09:21:12,880
and change this register button to log in


7900
09:21:12,880 --> 09:21:16,960
so now we have two copies of the same view basically once it's registered the


7901
09:21:16,960 --> 09:21:21,596
other one says log in all right so


7902
09:21:21,596 --> 09:21:25,596
and what we could do is now go to our main dart file here


7903
09:21:25,596 --> 09:21:29,840
and instead of returning the register view we could just return the login view


7904
09:21:29,840 --> 09:21:34,320
because we want to work on the login view now okay we have a user registered


7905
09:21:34,320 --> 09:21:38,960
and now we need to work on login and as a side note


7906
09:21:38,960 --> 09:21:42,880
if you follow the previous chapter you'll you'll know that we actually did


7907
09:21:42,880 --> 09:21:48,720
register a a valid user with firebase and


7908
09:21:48,720 --> 09:21:52,720
what you could do is to go to your firebase console


7909
09:21:52,720 --> 09:21:56,160
as we could do now just an ad hoc i hadn't planned for this


7910
09:21:56,160 --> 09:21:59,756
but what we could do say console.firebasegoggle.com


7911
09:21:59,756 --> 09:22:02,560
ensure that you're logged in with your account


7912
09:22:02,560 --> 09:22:07,520
then i'm going to go to this uh project that we created mynotes flutter project


7913
09:22:07,520 --> 09:22:12,800
go in there and then go into authentication and you can actually then


7914
09:22:12,800 --> 09:22:18,480
see the user that you created using the flutter application that


7915
09:22:18,480 --> 09:22:23,596
you're actually working on so when you call this function in your in your


7916
09:22:23,596 --> 09:22:28,320
register view this function firebase os instance create user with


7917
09:22:28,320 --> 09:22:33,120
email and password that user was indeed created in the firebase console so here


7918
09:22:33,120 --> 09:22:37,360
you have a user you could also disable this user and do other things but we're


7919
09:22:37,360 --> 09:22:41,120
just going to leave it like that for now okay


7920
09:22:41,120 --> 09:22:45,120
so what you need to do now is instead of register view tell your home page to


7921
09:22:45,120 --> 09:22:49,040
render the login view and you could just type login view


7922
09:22:49,040 --> 09:22:53,596
and if you just type a login view like that you will get


7923
09:22:53,596 --> 09:22:57,756
an error of course because login view isn't in scope but i believe visual


7924
09:22:57,756 --> 09:23:01,520
studio code could actually help with that because you see we haven't imported


7925
09:23:01,520 --> 09:23:05,756
login view at all so this main dart file doesn't know what


7926
09:23:05,756 --> 09:23:09,276
login view is exactly the same thing happened here do


7927
09:23:09,276 --> 09:23:12,960
you remember if we didn't have these imports we got lots of errors saying


7928
09:23:12,960 --> 09:23:17,120
that they i don't know where this class is so the same thing is happening in


7929
09:23:17,120 --> 09:23:21,436
this main dart file all right so i believe in visual studio code now i'm


7930
09:23:21,436 --> 09:23:26,320
kind of improvising but i think if you set login view and just press enter boom


7931
09:23:26,320 --> 09:23:32,400
it does an import automatically for you and let's see where it is here you see


7932
09:23:32,400 --> 09:23:36,240
but if you're not comfortable doing that just type login view


7933
09:23:36,240 --> 09:23:40,560
by hand and do the same thing i showed you before just command dot on mac or


7934
09:23:40,560 --> 09:23:45,840
controlled up in windows and linux and say import okay so it's going to import


7935
09:23:45,840 --> 09:23:49,840
it for you now we have the login view and if i


7936
09:23:49,840 --> 09:23:54,320
press command s or actually we have to do a hot restart


7937
09:23:54,320 --> 09:23:58,960
you see now there is a login button right here okay


7938
09:23:59,200 --> 09:24:03,200
so what we'll need to do is as you can see in the caption now that we're


7939
09:24:03,200 --> 09:24:07,040
working on logging the login view go to your login view


7940
09:24:07,040 --> 09:24:11,520
and go here where the button is pressed you see text button unpressed


7941
09:24:11,520 --> 09:24:17,840
what we'll need to do here is to call the a new function on our firebase


7942
09:24:17,840 --> 09:24:21,916
auth instance instead of create user with email and password we're going to


7943
09:24:21,916 --> 09:24:26,000
say firebase auth got instance


7944
09:24:26,000 --> 09:24:31,916
but sign in with email and password and you can see the function signature is


7945
09:24:31,916 --> 09:24:35,596
very similar to create user with email and password in that it takes two


7946
09:24:35,596 --> 09:24:40,960
parameters namely email and password both of type string and then what it


7947
09:24:40,960 --> 09:24:46,320
does return in fact is user credential and do you remember create user with


7948
09:24:46,320 --> 09:24:49,276
email and password also return user credentials so


7949
09:24:49,276 --> 09:24:55,596
it's very simple to switch between login and register in that in that sense so


7950
09:24:55,596 --> 09:24:58,320
grab the sign in with email and password name


7951
09:24:58,320 --> 09:25:01,436
that's the only thing we're interested in and just paste it here instead of


7952
09:25:01,436 --> 09:25:06,160
create user okay just gonna save that


7953
09:25:06,160 --> 09:25:11,436
some reason my scrcpy crashed and i have no idea why


7954
09:25:11,436 --> 09:25:14,240
so that's okay that wasn't planned what we


7955
09:25:14,240 --> 09:25:18,880
could do is to go to our and i can see you see it got an aborted so what we


7956
09:25:18,880 --> 09:25:25,200
could do is to go to our terminal and i'm gonna say scr cpy okay


7957
09:25:25,200 --> 09:25:28,720
and i'm going to bring it to the screen here so


7958
09:25:28,720 --> 09:25:33,276
and also if you're if you noticed here we have a login button but the title


7959
09:25:33,276 --> 09:25:38,000
here still says register so let's go and fix that let's go into the app bar and


7960
09:25:38,000 --> 09:25:42,480
just say login all right


7961
09:25:42,480 --> 09:25:47,840
and actually problem is i can also see that my


7962
09:25:47,840 --> 09:25:54,000
as scrcpy crash also the running of this process this application on that android


7963
09:25:54,000 --> 09:25:58,480
phone also crashed so there is i mean the flutter instance of this project


7964
09:25:58,480 --> 09:26:01,276
isn't really running at the moment so what i'll have to do is to go to main


7965
09:26:01,276 --> 09:26:07,436
dart and say run without debugging so and it's now launching doing a gradle


7966
09:26:07,436 --> 09:26:12,240
build gradle remember from the previous chapters is for android


7967
09:26:12,240 --> 09:26:16,320
and if it's using xcode it is for ios all right so


7968
09:26:16,320 --> 09:26:20,400
it's doing the greater build so if everything goes according to the plan


7969
09:26:20,400 --> 09:26:25,756
then we should get a login title up there and while this is doing


7970
09:26:25,756 --> 09:26:28,880
its work i'm going to go to my notes and just ensure


7971
09:26:28,880 --> 09:26:32,840
that i've talked about the things that i promise i'm going to talk


7972
09:26:32,840 --> 09:26:37,596
about all right it's installing our application i'm gonna remove the widget


7973
09:26:37,596 --> 09:26:40,720
inspector and now you can see we have a login


7974
09:26:40,720 --> 09:26:46,560
on top and that is working as expected all right so


7975
09:26:46,560 --> 09:26:50,560
as you can see here after the logging call here sign in with email and


7976
09:26:50,560 --> 09:26:54,880
password we're doing a print now


7977
09:26:54,880 --> 09:26:59,840
what we could do here is to enter some information of a user that


7978
09:26:59,840 --> 09:27:04,800
doesn't exist okay so i'm just going to say my personal email


7979
09:27:04,800 --> 09:27:08,960
and i'm going to say foo bar path and i'm then going to bring up the


7980
09:27:08,960 --> 09:27:12,560
console here as you'll see the debug console clear it


7981
09:27:12,560 --> 09:27:16,640
um and i'm going to actually remove


7982
09:27:16,640 --> 09:27:20,320
or do something like this so you can see the debug console a little bit better in


7983
09:27:20,320 --> 09:27:25,276
its entirety and i'm going to press the login button all right


7984
09:27:25,276 --> 09:27:28,320
and then sorry about that


7985
09:27:28,320 --> 09:27:33,680
so we have now um the next thing that we need to handle as


7986
09:27:33,680 --> 09:27:35,756
you can see uh


7987
09:27:35,756 --> 09:27:40,800
i'll perhaps increase the size even more here so you'll see it better


7988
09:27:40,800 --> 09:27:44,640
when i press the login button excuse me


7989
09:27:44,640 --> 09:27:47,520
using a user


7990
09:27:47,680 --> 09:27:52,160
that doesn't exist meaning that we haven't registered that user then we got


7991
09:27:52,160 --> 09:27:57,436
an error here that says firebase off user not found and that that makes sense


7992
09:27:57,436 --> 09:28:00,720
actually completely because the


7993
09:28:00,720 --> 09:28:05,120
we haven't actually done any registration for this user okay


7994
09:28:05,120 --> 09:28:08,800
so what we could hear what we could do here


7995
09:28:08,800 --> 09:28:14,560
is to go in here and i'm gonna bring things back up


7996
09:28:14,560 --> 09:28:18,160
kind of the way they were here


7997
09:28:18,160 --> 09:28:22,320
all right so here we're recalling this function uh


7998
09:28:22,320 --> 09:28:26,160
let me decrease the size because it's absolutely ginormous


7999
09:28:26,160 --> 09:28:29,916
in here signing with email and password


8000
09:28:29,916 --> 09:28:32,800
um we need to handle


8001
09:28:32,800 --> 09:28:37,200
a thing called an exception and i don't think we talked about exceptions to be


8002
09:28:37,200 --> 09:28:40,800
honest with you while i was i was teaching you about dart if you know


8003
09:28:40,800 --> 09:28:44,320
about exceptions you could just skip through kind of skim through this little


8004
09:28:44,320 --> 09:28:48,400
bit of the video but if you're if you're not a software development developer


8005
09:28:48,400 --> 09:28:52,880
from before or software engineer then you may not know what an exception is an


8006
09:28:52,880 --> 09:28:57,276
exception is when things go wrong and you haven't kind of


8007
09:28:57,276 --> 09:29:02,640
thought about those things from the beginning so as you can as you


8008
09:29:02,640 --> 09:29:05,756
for instance if you're if you're working with


8009
09:29:05,756 --> 09:29:09,840
if you're a software if you're a designer or a product owner


8010
09:29:09,840 --> 09:29:14,240
haven't done software development before you may have also used other pieces of


8011
09:29:14,240 --> 09:29:18,720
software and sometimes software crashes just like scr cpy just crashed a few


8012
09:29:18,720 --> 09:29:22,640
minutes ago that is perhaps probably


8013
09:29:22,640 --> 09:29:26,720
an exception or an error that the software developers who created scrcpy


8014
09:29:26,720 --> 09:29:30,640
hadn't counted with so they hadn't counted with


8015
09:29:30,640 --> 09:29:33,840
that an error might occur in this scenario


8016
09:29:33,840 --> 09:29:37,276
for instance so not having handled that the application


8017
09:29:37,276 --> 09:29:41,360
crashes it means that an exception happens and error happens that the


8018
09:29:41,360 --> 09:29:45,120
developers of that program hadn't accounted for so


8019
09:29:45,120 --> 09:29:48,720
and this is an exception that you're seeing here in your flutter application


8020
09:29:48,720 --> 09:29:52,000
so firebase is saying that you're trying to log in with a user that doesn't exist


8021
09:29:52,000 --> 09:29:54,880
so what do you want to do with it i can't continue after this i don't know


8022
09:29:54,880 --> 09:29:59,520
what to do so the way to handle exceptions in


8023
09:29:59,520 --> 09:30:04,720
flutter or in dart actually is using a try catch block so i'm going to bring it


8024
09:30:04,720 --> 09:30:09,756
here put the entire code for your user credential creation in the try statement


8025
09:30:09,756 --> 09:30:14,080
as you can see here and then go in here and say catch b


8026
09:30:14,080 --> 09:30:18,400
in parenthesis for now all right just like that


8027
09:30:18,400 --> 09:30:22,640
and then i'm just gonna say something that happened


8028
09:30:22,640 --> 09:30:26,240
in single codes all right so you can see here now we


8029
09:30:26,240 --> 09:30:31,276
have a try block as indicated here with this line it's all the way from on top


8030
09:30:31,276 --> 09:30:35,596
to here and then we have a catch block the way try catch works is that it as


8031
09:30:35,596 --> 09:30:39,680
its name indicates it tries to do the work that you're saying it needs to be


8032
09:30:39,680 --> 09:30:45,520
done in the trial block should anything bad happen it will go to various catch


8033
09:30:45,520 --> 09:30:49,276
statements that you can't then place after that try okay


8034
09:30:49,276 --> 09:30:54,640
so as you saw in the logs this error


8035
09:30:54,640 --> 09:31:01,276
let's see if we can find it here it was of type firebase auth uh let me


8036
09:31:01,276 --> 09:31:07,040
see on handle exception but we didn't actually get its type unfortunately so


8037
09:31:07,040 --> 09:31:10,800
what we could do here is print something bad happen and then


8038
09:31:10,800 --> 09:31:17,040
print the error itself okay so i'm just going to say clear the logs


8039
09:31:17,040 --> 09:31:20,640
command s and then i'm going to press the login


8040
09:31:20,640 --> 09:31:24,880
again sorry here and you can see now it says


8041
09:31:24,880 --> 09:31:31,120
something bad happened firebase auth user not found and then some information


8042
09:31:31,120 --> 09:31:35,756
and we could actually say print e


8043
09:31:35,756 --> 09:31:41,276
run time type and doing that will actually give you information about


8044
09:31:41,276 --> 09:31:45,680
which class of exception this is because you see


8045
09:31:45,680 --> 09:31:49,360
as you're working with flutter and as you're working with software generally


8046
09:31:49,360 --> 09:31:52,960
you're creating software you're writing code different types of exceptions


8047
09:31:52,960 --> 09:31:57,360
happen and these exceptions have their own identity every exception has its own


8048
09:31:57,360 --> 09:32:02,400
identity it's the series of classes or different places that it may come from


8049
09:32:02,400 --> 09:32:07,120
in dart you can pretty much anything can become an error even a text


8050
09:32:07,120 --> 09:32:11,040
can become an error or enum can become an error so


8051
09:32:11,040 --> 09:32:14,480
when you come to this catch block as i'll move my mouse over it you can see


8052
09:32:14,480 --> 09:32:18,640
that here it says i don't even know what this is this is an object so


8053
09:32:18,640 --> 09:32:22,320
it could be anything but you are actually in the in your


8054
09:32:22,320 --> 09:32:26,720
cache block you're mostly interested in exceptions that might occur from


8055
09:32:26,720 --> 09:32:29,520
firebase so since we don't really know what this


8056
09:32:29,520 --> 09:32:33,276
type is we're gonna print it out to the console


8057
09:32:33,276 --> 09:32:37,436
and we're gonna have a look at what type it is so let me do


8058
09:32:37,436 --> 09:32:41,436
a little bit of them how should i do this


8059
09:32:41,436 --> 09:32:46,240
is this a little bit better arrangement perhaps so you can see what happens yeah


8060
09:32:46,240 --> 09:32:50,720
perhaps then what i'm going to do command this hot reload


8061
09:32:50,720 --> 09:32:55,436
and go here press the login button and you'll see that the type of that


8062
09:32:55,436 --> 09:32:59,680
exception is firebase auth exception all right


8063
09:32:59,680 --> 09:33:03,120
so what we need to do now is to go to our code


8064
09:33:03,120 --> 09:33:05,200
and handle


8065
09:33:05,200 --> 09:33:10,480
firebase auth exceptions not just any exception as we're doing here


8066
09:33:10,480 --> 09:33:15,520
because we're catching any exception so what we want to do is to catch firebase


8067
09:33:15,520 --> 09:33:19,680
off exceptions in our cache block all right and a way to do that is i'm going


8068
09:33:19,680 --> 09:33:25,200
to do this now and i'm going to do like we were doing


8069
09:33:25,200 --> 09:33:28,800
before get rid of the consoles to see more of the code


8070
09:33:28,800 --> 09:33:32,320
so what you could do you can have specialized cache blocks in dart and


8071
09:33:32,320 --> 09:33:37,596
that means that you are not catching everything but you tell dark that look


8072
09:33:37,596 --> 09:33:42,160
in this particular catch block i'm interested only in exceptions of this


8073
09:33:42,160 --> 09:33:45,840
type and as you might have guessed that already a


8074
09:33:45,840 --> 09:33:51,276
try block can be accompanied by more than one catch block


8075
09:33:51,276 --> 09:33:56,160
this cache block that you can see here is called catch all it catches every


8076
09:33:56,160 --> 09:34:01,436
exception that might occur in the running of the code inside the try block


8077
09:34:01,436 --> 09:34:04,560
however if you're interested in specific


8078
09:34:04,560 --> 09:34:09,360
exceptions in this case firebase auth exception i believe oh i've cleared it


8079
09:34:09,360 --> 09:34:13,680
but i think it was firebase off exception i'm going to run it again


8080
09:34:13,680 --> 09:34:17,120
go to the login button and you can see it says firebase off exception so we're


8081
09:34:17,120 --> 09:34:21,040
interested specifically in that so let's go and say tell dart that we're


8082
09:34:21,040 --> 09:34:23,596
interested in that i'm just i'm going to say on


8083
09:34:23,596 --> 09:34:28,000
firebase off exception catch


8084
09:34:28,000 --> 09:34:29,680
e all right


8085
09:34:29,680 --> 09:34:34,560
so this is the format of catching specific exceptions you prefix your


8086
09:34:34,560 --> 09:34:39,520
catch statement with the keyword on and then you write the type the runtime type


8087
09:34:39,520 --> 09:34:43,200
or the class name of the type of exception that you're interested in


8088
09:34:43,200 --> 09:34:47,436
handling all right so in this case we said on firebase off


8089
09:34:47,436 --> 09:34:51,756
the exception catchy and we're gonna remove this catch from there


8090
09:34:51,756 --> 09:34:55,916
and we're gonna go here actually i don't even have to cut and


8091
09:34:55,916 --> 09:34:59,680
what you'll need to do in here just say print e code


8092
09:34:59,680 --> 09:35:03,520
you see save this before i before i tell you


8093
09:35:03,520 --> 09:35:08,000
what i was going to say after uc let's test this let's say login and


8094
09:35:08,000 --> 09:35:11,360
you'll see that the code is used or not found


8095
09:35:11,360 --> 09:35:14,400
so now that we told dark that we're


8096
09:35:14,400 --> 09:35:19,680
specializing in catching exceptions of firebase auth exception then this e is


8097
09:35:19,680 --> 09:35:25,276
not an object anymore really let's see if we can get some help now it says okay


8098
09:35:25,276 --> 09:35:28,960
if i can catch exceptions of firebase auth exception then i know that the


8099
09:35:28,960 --> 09:35:32,480
error that i can pass to you is of that type


8100
09:35:32,480 --> 09:35:36,320
now that you catching firebase authexception you can go to this code


8101
09:35:36,320 --> 09:35:38,560
and you see there are different properties that you can read from


8102
09:35:38,560 --> 09:35:41,756
message code email credential et cetera et cetera okay


8103
09:35:41,756 --> 09:35:46,240
so we're now interested in the code so


8104
09:35:46,240 --> 09:35:49,916
as the caption right here shows at the bottom of the screen you'll see that we


8105
09:35:49,916 --> 09:35:56,000
need to handle e-code equal to user not found all right so let's say if e code


8106
09:35:56,000 --> 09:36:01,840
is equal to user not found then let's say print


8107
09:36:01,840 --> 09:36:07,436
user not found like that else e code oh sorry actually we're not going to do it


8108
09:36:07,436 --> 09:36:11,520
outside kind of like running ahead of myself a little bit there


8109
09:36:11,520 --> 09:36:15,520
so we have now um


8110
09:36:15,520 --> 09:36:18,960
e-code user not found then we're just saying print user not found okay i'm


8111
09:36:18,960 --> 09:36:23,276
going to clear the logs here go back to see our cpy here and i'm just gonna say


8112
09:36:23,276 --> 09:36:29,436
login and you'll see all it does it says user not found all right


8113
09:36:29,436 --> 09:36:32,880
so so that's that we haven't really i mean


8114
09:36:32,880 --> 09:36:37,840
the caption at the bottom left of the screen says handle but depending on your


8115
09:36:37,840 --> 09:36:42,240
um background you may expect handle to do different things for


8116
09:36:42,240 --> 09:36:45,436
a software for a seasoned software engineer handle may actually mean that


8117
09:36:45,436 --> 09:36:50,160
well do something about it okay tell him tell the user like oh i couldn't log in


8118
09:36:50,160 --> 09:36:54,160
the user couldn't be found or whatever reason just show something to


8119
09:36:54,160 --> 09:36:57,840
the user and we could do that but at the moment we don't have the capacity to do


8120
09:36:57,840 --> 09:37:00,640
that we don't really know how to handle that so


8121
09:37:00,640 --> 09:37:06,480
what we need to do then is to simply say print so we just print it to the screen


8122
09:37:06,480 --> 09:37:10,320
so this is our handling for now okay it's very simple all it does is just


8123
09:37:10,320 --> 09:37:14,480
ensures that no exception is thrown to the user's face or that the application


8124
09:37:14,480 --> 09:37:17,720
doesn't crash


8125
09:37:18,080 --> 09:37:23,840
okay that was a lot of information um now as the caption here shows in the


8126
09:37:23,840 --> 09:37:27,596
login view we also need to handle wrong password


8127
09:37:27,596 --> 09:37:33,360
and i mean as you can see here the e code is a string so anything here could


8128
09:37:33,360 --> 09:37:38,800
happen that could be defined by string and one other


8129
09:37:38,800 --> 09:37:43,276
excuse me one of those errors actually is wrong


8130
09:37:43,276 --> 09:37:48,640
password so let's test that in here let's say else if if the code is


8131
09:37:48,640 --> 09:37:54,480
not user not found just print something else happened


8132
09:37:54,480 --> 09:37:59,436
and then print the errors code to the screen okay


8133
09:37:59,436 --> 09:38:05,596
so i'm going to save this and i'm going to then go here and then


8134
09:38:05,596 --> 09:38:09,520
actually change this email to an existing email which was the one that i


8135
09:38:09,520 --> 09:38:13,680
registered and password i believe was foobar or


8136
09:38:13,680 --> 09:38:16,960
something clickfu bar maybe


8137
09:38:16,960 --> 09:38:20,480
and i'm going to say login and you can see here it says now something else


8138
09:38:20,480 --> 09:38:25,120
happened wrong password so that could that could kind of mean that


8139
09:38:25,120 --> 09:38:28,400
well yeah actually that isn't my password this foo bar was in my password


8140
09:38:28,400 --> 09:38:31,276
i don't even remember what it was maybe it was full bar bass


8141
09:38:31,276 --> 09:38:35,200
but that is great it says something else happen an e code and that's exactly what


8142
09:38:35,200 --> 09:38:38,640
we have to sorry about that


8143
09:38:38,640 --> 09:38:43,520
and that is exactly what we need to handle here um wrong password so in your


8144
09:38:43,520 --> 09:38:48,080
else statement say else if e code


8145
09:38:48,080 --> 09:38:52,240
is wrong password


8146
09:38:52,480 --> 09:38:56,800
then we're going to say print wrong password


8147
09:38:56,800 --> 09:38:59,916
okay man is


8148
09:38:59,916 --> 09:39:05,040
so that's there clear the logs i'm going to say log in and you'll see the message


8149
09:39:05,040 --> 09:39:09,436
wrong password printed to the screen


8150
09:39:09,436 --> 09:39:13,520
all right a lot of work


8151
09:39:13,520 --> 09:39:17,040
we've done quite a lot of work now in the login view but we haven't really put


8152
09:39:17,040 --> 09:39:22,160
much energy into the register view you see they're very similar in that they do


8153
09:39:22,160 --> 09:39:25,360
almost the same api calls with the email and password ones that sign in the other


8154
09:39:25,360 --> 09:39:29,596
ones that's register however in if if we go to our main dart


8155
09:39:29,596 --> 09:39:34,800
file you'll see in here in our register view we're just calling the api and kind


8156
09:39:34,800 --> 09:39:38,720
of like hoping for the best there's no try catch statement here okay so what we


8157
09:39:38,720 --> 09:39:43,680
could do is have a look at how we did it for login we put the api call inside the


8158
09:39:43,680 --> 09:39:48,480
try block you see what we need to do is to go to main dart and for our register


8159
09:39:48,480 --> 09:39:51,596
view here register view state do the same


8160
09:39:51,596 --> 09:39:56,240
thing let's put this in a try block here


8161
09:39:57,520 --> 09:40:01,040
okay and then just say catch or say on


8162
09:40:01,040 --> 09:40:04,720
firebase off exception


8163
09:40:05,120 --> 09:40:08,000
this is i mean i'm not going to explain this again because it's exactly what we


8164
09:40:08,000 --> 09:40:12,720
did just in the login view i believe firebase authexception didn't


8165
09:40:12,720 --> 09:40:17,360
really exist in this in this dart file before but that is what visual studio


8166
09:40:17,360 --> 09:40:21,436
code helped me with as i typed it and pressed enter for auto completion


8167
09:40:21,436 --> 09:40:25,276
then it must have been imported somewhere


8168
09:40:25,276 --> 09:40:30,320
or it was probably part of firebase auth dart i believe actually so if i command


8169
09:40:30,320 --> 09:40:34,400
click on it it goes to firebase auth so that's why i


8170
09:40:34,400 --> 09:40:37,120
it probably didn't have to import anything because it was already imported


8171
09:40:37,120 --> 09:40:41,120
as a part of firebase auth okay


8172
09:40:42,000 --> 09:40:45,200
oh wow that was a lot of information also


8173
09:40:45,200 --> 09:40:49,040
now that we're working on the register view let's go to our main


8174
09:40:49,040 --> 09:40:53,276
dar main function here and since we're only seeing the login view let's switch


8175
09:40:53,276 --> 09:40:58,320
this back to register view and command s but this is not going to


8176
09:40:58,320 --> 09:41:01,840
change anything as you remember hot reload doesn't have an effect of any


8177
09:41:01,840 --> 09:41:05,360
changes that you it doesn't have an effect on anything that you're changing


8178
09:41:05,360 --> 09:41:08,960
the main function remember that you have to hot restart okay


8179
09:41:08,960 --> 09:41:13,200
so hot restart now we're in the register view


8180
09:41:13,200 --> 09:41:19,276
and we need to now handle wrong password uh actually


8181
09:41:19,276 --> 09:41:24,000
no that's not the login sorry about that now we need to handle


8182
09:41:24,000 --> 09:41:27,916
this weak password so


8183
09:41:27,916 --> 09:41:32,800
as you're working with uh firebase zoom you will notice that it has its own set


8184
09:41:32,800 --> 09:41:36,880
of security rules you also can override these security rules later for your


8185
09:41:36,880 --> 09:41:40,640
server if you want to for instance you can expect or you can say all my users


8186
09:41:40,640 --> 09:41:46,320
have to have passwords that are 18 um characters long and a mixture of digits


8187
09:41:46,320 --> 09:41:49,520
and alpha numerical values etcetera etcetera but


8188
09:41:49,520 --> 09:41:53,756
there are some default security rules set up on firebase


8189
09:41:53,756 --> 09:41:58,880
for credentials that every user needs to abide by so let's actually have a look


8190
09:41:58,880 --> 09:42:01,436
at that and let's


8191
09:42:01,436 --> 09:42:05,680
do a print here and i'm going to say print e


8192
09:42:05,680 --> 09:42:08,960
code okay and as you'll see in the caption as you


8193
09:42:08,960 --> 09:42:13,200
are seeing in the caption there is an e code of equal to weak password that


8194
09:42:13,200 --> 09:42:17,200
needs to be handled so i'm going to go here try to register user with my


8195
09:42:17,200 --> 09:42:22,240
personal email and the password of a b c all right then i'm going to bring up


8196
09:42:22,240 --> 09:42:24,480
the console clear the console a little bit


8197
09:42:24,480 --> 09:42:27,360
i'm going to do this so you'll see it a little bit better


8198
09:42:27,360 --> 09:42:33,596
then i'm gonna try to register with a password of abc press register


8199
09:42:34,400 --> 09:42:38,880
what happened here you see the code was weak password


8200
09:42:38,880 --> 09:42:43,040
and as you'll expect yeah weak password that is too weak a password to even be


8201
09:42:43,040 --> 09:42:47,680
used anywhere so um


8202
09:42:48,160 --> 09:42:52,480
so what we need to do here is to handle the weak password


8203
09:42:52,480 --> 09:42:57,520
error basically i'm gonna take in my notes that i've talked about some other


8204
09:42:57,520 --> 09:43:02,400
topics of login all right so we'll handle weak password


8205
09:43:02,400 --> 09:43:06,400
the way we handle the other errors in login view


8206
09:43:06,400 --> 09:43:10,640
then say if e code is equal to


8207
09:43:10,640 --> 09:43:14,000
weak password


8208
09:43:14,240 --> 09:43:19,596
and let's just say print week password okay


8209
09:43:19,680 --> 09:43:23,916
and we'll say um so that's that's that for now okay


8210
09:43:23,916 --> 09:43:30,160
and i'm going to just bring up the um debug console again


8211
09:43:30,160 --> 09:43:32,800
and press the register button one more time


8212
09:43:32,800 --> 09:43:37,200
now you'll see the information let me bring it so you can actually see it


8213
09:43:37,200 --> 09:43:42,160
yeah you can actually see it great you can see weak password being printed here


8214
09:43:42,160 --> 09:43:46,640
all right so that was great now let's go let me bring the let make


8215
09:43:46,640 --> 09:43:50,960
the screen a little bit bigger the next thing we have to handle


8216
09:43:50,960 --> 09:43:56,560
is um in this register view as you can see in the caption here


8217
09:43:56,560 --> 09:44:00,640
you can also get an error called email already in use so if you go to the else


8218
09:44:00,640 --> 09:44:03,436
statement here again and print e


8219
09:44:03,436 --> 09:44:08,160
if i try to register with the same email that i registered before


8220
09:44:08,160 --> 09:44:12,560
this user already exists and if even if i have quite a good password for this


8221
09:44:12,560 --> 09:44:16,720
user so i'm going to say fubar bass


8222
09:44:16,840 --> 09:44:20,000
1029. so we know that the error is not going


8223
09:44:20,000 --> 09:44:23,596
to be the password like it's actually a good password well


8224
09:44:23,596 --> 09:44:28,720
better than fubar baz at least and that or abc so i'm just going to say register


8225
09:44:28,720 --> 09:44:30,960
and


8226
09:44:31,120 --> 09:44:36,080
do we not get any value here or did i even press the register button


8227
09:44:36,160 --> 09:44:39,436
is it really registering pixelity a b


8228
09:44:39,436 --> 09:44:42,560
no i don't think so um


8229
09:44:42,560 --> 09:44:48,640
oh i hadn't saved the file oops so yeah i haven't saved my changes i'm gonna say


8230
09:44:48,640 --> 09:44:52,880
register oh now it says email already in use and


8231
09:44:52,880 --> 09:44:55,756
that is exactly i mean that is pretty much what we have to handle right


8232
09:44:55,756 --> 09:45:00,960
because we're printing e so um i didn't have to say oh no surprises


8233
09:45:00,960 --> 09:45:05,120
there so let's handle email already and use so


8234
09:45:05,120 --> 09:45:08,880
i'm going to copy this email already and use string just exactly as it's


8235
09:45:08,880 --> 09:45:12,320
mentioned here and i'm going to go to else and say


8236
09:45:12,320 --> 09:45:18,880
else if e code is equal to that string and then say uh email is


8237
09:45:18,880 --> 09:45:22,960
already in use okay


8238
09:45:22,960 --> 09:45:27,840
and then save it there clear the logs press the register button


8239
09:45:27,840 --> 09:45:33,916
again you can see now it says email is already in use okay


8240
09:45:34,160 --> 09:45:36,240
so um


8241
09:45:36,240 --> 09:45:40,960
let me also have a little bit of a look at my notes


8242
09:45:41,200 --> 09:45:43,840
um


8243
09:45:44,480 --> 09:45:48,640
i can also i mean to be honest with you in the notes i don't see anywhere


8244
09:45:48,640 --> 09:45:54,880
that we're really trying to handle uh these errors like actually doing


8245
09:45:54,880 --> 09:45:59,916
something about them all right so


8246
09:45:59,916 --> 09:46:04,560
perhaps a better thing to do would be


8247
09:46:04,560 --> 09:46:09,276
to really like show a message or something to the user


8248
09:46:09,276 --> 09:46:13,756
and i'm kind of wondering that right now like whether that's a good idea or a bad


8249
09:46:13,756 --> 09:46:18,640
idea for this chapter and perhaps just doing a print will suffice to be honest


8250
09:46:18,640 --> 09:46:22,640
with you not entirely sure about that so


8251
09:46:22,640 --> 09:46:27,916
um let's leave it at that for now okay i'm also gonna go here and make sure


8252
09:46:27,916 --> 09:46:32,400
that i'm not yeah i'm in do not disturb so let's leave it leave it at that email


8253
09:46:32,400 --> 09:46:36,320
already use perfect okay let's leave it at that


8254
09:46:36,560 --> 09:46:38,400
now the next thing that we have to handle


8255
09:46:38,400 --> 09:46:42,800
it could also write a situation where the user tries to enter an invalid email


8256
09:46:42,800 --> 09:46:46,400
all right so let's put an else statement here and say print


8257
09:46:46,400 --> 09:46:50,320
um e code again save it


8258
09:46:50,320 --> 09:46:55,040
let's go and remove this add sign so it becomes an invalid email and try to


8259
09:46:55,040 --> 09:47:00,640
press the register button okay now you can see uh you can't actually see now


8260
09:47:00,640 --> 09:47:05,120
you can see at the bottom in the logs it says invalid email and that is the code


8261
09:47:05,120 --> 09:47:10,800
for that error so let's handle invalid email now all right


8262
09:47:10,800 --> 09:47:16,800
so i'm going to go here and say else if e code we call to invalid email then


8263
09:47:16,800 --> 09:47:22,160
we're going to say print invalid email entered all right and save it


8264
09:47:22,160 --> 09:47:26,400
so clear the logs tap the register button and now you'll


8265
09:47:26,400 --> 09:47:31,840
see invalid email entered okay so


8266
09:47:31,840 --> 09:47:35,680
i mean that's really um all we have to do


8267
09:47:35,680 --> 09:47:40,640
right now for our error handling and as we're going on i


8268
09:47:40,640 --> 09:47:42,880
mean to be honest with you i still have a little bit of time to figure out


8269
09:47:42,880 --> 09:47:46,800
whether we're really going to handle these things by and by that i mean like


8270
09:47:46,800 --> 09:47:50,320
if we are if we need to display some some error to


8271
09:47:50,320 --> 09:47:56,560
the user okay and we may need to do that but it is a little bit complicated like


8272
09:47:56,560 --> 09:47:59,680
depending on how we want to handle it do we want to show like a message to the


8273
09:47:59,680 --> 09:48:03,276
user do you want to show a toast to the user um


8274
09:48:03,276 --> 09:48:06,400
or do we want to like display another screen to the user and that's kind of


8275
09:48:06,400 --> 09:48:10,880
like unclear even to me right now so maybe we'll iron these things out then


8276
09:48:10,880 --> 09:48:16,640
as we go on in in the upcoming chapters as well


8277
09:48:16,640 --> 09:48:18,880
so


8278
09:48:19,276 --> 09:48:24,000
now i can see here that login


8279
09:48:24,000 --> 09:48:28,480
we've talked about that and what we need to do then


8280
09:48:28,480 --> 09:48:34,720
in order to be able to carry on with the upcoming chapters


8281
09:48:34,720 --> 09:48:40,800
is actually to make sure that we are logged in to the application you see


8282
09:48:40,800 --> 09:48:44,640
we've worked on the register view we've worked on the login view


8283
09:48:44,640 --> 09:48:48,400
we're trying like so many different combinations here to register new user


8284
09:48:48,400 --> 09:48:51,520
login so i personally don't know at the moment whether


8285
09:48:51,520 --> 09:48:56,640
this application firebase instance actually has a logged in user and if


8286
09:48:56,640 --> 09:49:01,276
you're familiar with like python django or flask or if you're doing nodejs or


8287
09:49:01,276 --> 09:49:04,400
whatever development like backend development


8288
09:49:04,400 --> 09:49:09,040
you can be a logged in user but still end up being in a login view


8289
09:49:09,040 --> 09:49:14,240
so if you send a login login user to a login view doesn't mean that the user


8290
09:49:14,240 --> 09:49:17,680
isn't logged in instead it means well that user is


8291
09:49:17,680 --> 09:49:22,080
logged in but may want to log in as a different user so that is the case in


8292
09:49:22,080 --> 09:49:25,520
our application as well we have a register screen a login view but i


8293
09:49:25,520 --> 09:49:28,960
personally don't know what the state of the application at the moment is are we


8294
09:49:28,960 --> 09:49:32,080
logged in or are we not logged in because we're kind of like playing with


8295
09:49:32,080 --> 09:49:37,200
different views here okay so that's very important now because in the


8296
09:49:37,200 --> 09:49:42,080
next chapter i can see in chapter 14 we are going to work with


8297
09:49:42,080 --> 09:49:45,276
um we're working on separating the app


8298
09:49:45,276 --> 09:49:48,640
initialization from the login and register screens because you can see at


8299
09:49:48,640 --> 09:49:52,560
the moment we have this future builder that is


8300
09:49:52,560 --> 09:49:57,120
initializing firebase and it is doing lots of work comes with snapshots stay


8301
09:49:57,120 --> 09:50:01,276
done blah blah and we're doing the exact same thing in two views login view and


8302
09:50:01,276 --> 09:50:04,400
the register view so what we need to do is kind of like


8303
09:50:04,400 --> 09:50:07,520
separate that logic and ensure that we display the correct


8304
09:50:07,520 --> 09:50:11,276
view depending on yeah what the state of the application is and before we can


8305
09:50:11,276 --> 09:50:15,276
then continue or start that chapter we kind of need to make sure that the user


8306
09:50:15,276 --> 09:50:22,000
the current user is logged in all right so let's go to our um


8307
09:50:22,000 --> 09:50:27,040
main dart here and login logged in views already displayed so i don't really you


8308
09:50:27,040 --> 09:50:30,960
don't need to worry about this part import login view


8309
09:50:30,960 --> 09:50:36,000
what you need to do now is to make sure that instead of register view we're


8310
09:50:36,000 --> 09:50:39,840
displaying the login view and remember now we're saving something


8311
09:50:39,840 --> 09:50:44,160
changing something in the main function so hot reload isn't going to


8312
09:50:44,160 --> 09:50:50,000
work so you need to do hot restart so we'll get to that login view


8313
09:50:50,000 --> 09:50:55,840
and let's then enter valid details here so i'm going to say pixelityab.gmail.com


8314
09:50:55,840 --> 09:51:00,720
and i think the password was fubar best to be honest


8315
09:51:00,720 --> 09:51:06,000
i'm going to press the login button all right and there we got the


8316
09:51:06,000 --> 09:51:12,240
credentials for this user wow that was a lot of information and i


8317
09:51:12,240 --> 09:51:16,960
understand that um so what we need to work on now i'm going


8318
09:51:16,960 --> 09:51:21,276
to take some stuff in my notes is


8319
09:51:21,276 --> 09:51:25,200
as i mentioned we need to for the next chapter i mean we're kind of done with


8320
09:51:25,200 --> 09:51:28,720
this chapter to be honest we've talked a lot about like exception handling


8321
09:51:28,720 --> 09:51:32,240
separated the login view from the register view but our register view is


8322
09:51:32,240 --> 09:51:35,276
still in the main dart we're gonna we're gonna


8323
09:51:35,276 --> 09:51:39,120
fix that soon but what you need to know to do before


8324
09:51:39,120 --> 09:51:42,080
you continue with the next chapter and just ensure that you're displaying the


8325
09:51:42,080 --> 09:51:46,640
login view to the user and that you're actually logging logging in with a valid


8326
09:51:46,640 --> 09:51:51,680
username and password this ensures that the firebase instance that is running in


8327
09:51:51,680 --> 09:51:56,960
this application right now is going to cache that information locally on ios is


8328
09:51:56,960 --> 09:52:01,596
going to cache that information in a secure storage called keychain and on


8329
09:52:01,596 --> 09:52:05,360
android i think it's called shared preferences or something like that


8330
09:52:05,360 --> 09:52:09,520
so that information is going to be securely stored now on that telephone


8331
09:52:09,520 --> 09:52:13,360
which for me is an android telephone right here and


8332
09:52:13,360 --> 09:52:17,040
when i restart the application whenever if i like shut down my


8333
09:52:17,040 --> 09:52:21,040
telephone restart the telephone the os come back up that information is already


8334
09:52:21,040 --> 09:52:25,756
saved on that telephone so my user is logged in all right


8335
09:52:25,756 --> 09:52:29,360
so just ensure that before you continue with the next chapter that you've


8336
09:52:29,360 --> 09:52:33,200
registered the user first and that you've logged in with that user from


8337
09:52:33,200 --> 09:52:38,800
your application so that information is cached inside the application all right


8338
09:52:38,800 --> 09:52:43,436
good a lot of information in the next chapter


8339
09:52:43,436 --> 09:52:48,480
we're going to separate the app initialization from the login and the


8340
09:52:48,480 --> 09:52:53,040
register screens there are only a few steps that we have to do


8341
09:52:53,040 --> 09:52:57,840
in that chapter so


8342
09:52:58,560 --> 09:53:02,720
so i don't think that chapter is going to actually be so long


8343
09:53:02,720 --> 09:53:07,756
so grab a cup of tea coffee whatever you want chocolate or whatever it is and


8344
09:53:07,756 --> 09:53:13,040
i will see you in the next chapter hello and welcome to chapter number 14


8345
09:53:13,040 --> 09:53:16,240
of our flutter course as you saw in the previous chapter we


8346
09:53:16,240 --> 09:53:21,916
worked on the login view now we have a login view and a register view in place


8347
09:53:21,916 --> 09:53:25,916
and what you also saw is that we did some very simple


8348
09:53:25,916 --> 09:53:29,360
error handling for various scenarios such as


8349
09:53:29,360 --> 09:53:34,560
uh email address already registered weak password um


8350
09:53:34,560 --> 09:53:38,720
invalid email incorrect password or wrong password i


8351
09:53:38,720 --> 09:53:42,880
think it was called so now we have two views in place


8352
09:53:42,880 --> 09:53:47,360
um we have but we have two main issues to address here


8353
09:53:47,360 --> 09:53:50,720
the registration or the register view that


8354
09:53:50,720 --> 09:53:55,596
we created still lives in our


8355
09:53:55,596 --> 09:54:00,000
main.dart file and the other issue is as the caption


8356
09:54:00,000 --> 09:54:04,880
here displays is that the widgets are doing app initialization


8357
09:54:04,880 --> 09:54:09,276
if you remember from the code there was this firebase initialization


8358
09:54:09,276 --> 09:54:13,200
api invocation that we had to do and since


8359
09:54:13,200 --> 09:54:17,200
the login view and the register view are very similar to each other they're both


8360
09:54:17,200 --> 09:54:21,360
doing the initialization of firebase


8361
09:54:21,360 --> 09:54:24,000
what we're going to do in this chapter is


8362
09:54:24,000 --> 09:54:28,320
separate these um initializations and


8363
09:54:28,320 --> 09:54:32,400
make them one that's that's the first first thing we need to do so we just


8364
09:54:32,400 --> 09:54:35,040
have one initialization that's going to happen


8365
09:54:35,040 --> 09:54:38,960
and what we're also going to do is to bring the register view in its own file


8366
09:54:38,960 --> 09:54:42,960
so this this chapter is going to be a quick one unlike the other chapters and


8367
09:54:42,960 --> 09:54:46,080
i think that's kind of refreshing to be honest with you otherwise all chapters


8368
09:54:46,080 --> 09:54:49,680
are going to be very long and very detailed


8369
09:54:49,680 --> 09:54:54,800
so with that said let's then um


8370
09:54:55,360 --> 09:54:59,596
let's then start with the first thing we have to do


8371
09:54:59,596 --> 09:55:02,640
which is basically to move the register view into


8372
09:55:02,640 --> 09:55:05,840
views register view okay i'm going to see if i can bring up


8373
09:55:05,840 --> 09:55:10,640
visual studio code um how we had left it before


8374
09:55:10,640 --> 09:55:15,276
and i'm going to bring up scrcpy which


8375
09:55:15,276 --> 09:55:19,680
is my android phone running our flutter application right now


8376
09:55:19,680 --> 09:55:24,000
so let's do as the caption says here i'm going to make the screen a little bit


8377
09:55:24,000 --> 09:55:28,480
bigger so you can see better then go to your project uh or explorer


8378
09:55:28,480 --> 09:55:31,436
here visual studio core if you're using android studio you can go go to the


8379
09:55:31,436 --> 09:55:34,960
navigator there as well there's a similar one in android studio or if


8380
09:55:34,960 --> 09:55:38,720
you're using sublime that is exactly the same thing here on the left hand side


8381
09:55:38,720 --> 09:55:43,596
you can see the project structure then go to lib and then views as we have


8382
09:55:43,596 --> 09:55:47,276
the login view there let's create a view called register view so right click here


8383
09:55:47,276 --> 09:55:52,720
and say new file and i'm going to say register mu dot dart


8384
09:55:53,200 --> 09:55:58,960
okay so then we have to as the question says go back to our main dart file and


8385
09:55:58,960 --> 09:56:03,756
grab this register view from here group all the register view including


8386
09:56:03,756 --> 09:56:08,320
its register view state grab all of that


8387
09:56:08,320 --> 09:56:12,800
cut it in mac you do it with command x and in windows and linux i think you do


8388
09:56:12,800 --> 09:56:16,960
control x so um i cut that and i'm gonna then bring


8389
09:56:16,960 --> 09:56:21,200
it into register view here as you saw in the previous chapter doing


8390
09:56:21,200 --> 09:56:23,840
these things usually cause a lot of headache


8391
09:56:23,840 --> 09:56:27,520
for for your editor because i mean it's not


8392
09:56:27,520 --> 09:56:30,400
a headache for you because we can easily fix it for us it's not a problem but


8393
09:56:30,400 --> 09:56:32,960
it's just the editor that doesn't understand where all these classes are


8394
09:56:32,960 --> 09:56:36,960
located at so i i've explained this previously in


8395
09:56:36,960 --> 09:56:40,400
the exact previous chapter before this so i'm not going to explain it again so


8396
09:56:40,400 --> 09:56:44,800
let's say command dot in visual studio code and then say import material to fix


8397
09:56:44,800 --> 09:56:48,480
all the stateful widget problems and all the things that all the classes are


8398
09:56:48,480 --> 09:56:53,040
stored in material dart here in the flotter package okay


8399
09:56:53,040 --> 09:56:55,596
then we have other problems such as firebase so


8400
09:56:55,596 --> 09:57:01,756
command dot import firebase core to fix that command dot import firebase options


8401
09:57:01,756 --> 09:57:05,360
here it's that problem and we will also have


8402
09:57:05,360 --> 09:57:11,200
to import firebase off i believe and that is also fixed all right so now we


8403
09:57:11,200 --> 09:57:14,800
have a register view here perfect and um


8404
09:57:14,800 --> 09:57:19,520
if you see here in our main dart now there are lots of things that are


8405
09:57:19,520 --> 09:57:23,596
imported which aren't which aren't needed anymore


8406
09:57:23,596 --> 09:57:28,160
so let's remove those you can see these things are actually


8407
09:57:28,160 --> 09:57:32,080
you may say okay well how do i find all these problems like there's lots of


8408
09:57:32,080 --> 09:57:35,596
issues here but had i not come back to the main dart file i wouldn't have seen


8409
09:57:35,596 --> 09:57:39,916
them and the way to fix that is to actually bring up your


8410
09:57:39,916 --> 09:57:44,720
problems view here and you'll see that there are lots of problems stated that


8411
09:57:44,720 --> 09:57:49,120
you can go go and fix those you see print statements are here and then


8412
09:57:49,120 --> 09:57:54,240
unused imports which you can which you can clean up as well so


8413
09:57:54,240 --> 09:57:57,680
that's how you can use the problems window


8414
09:57:57,680 --> 09:58:02,640
i'm going to do that by hand now remove this and remove this so we have a clean


8415
09:58:02,640 --> 09:58:06,160
void main function here all right i'm gonna do a hot restart just to make sure


8416
09:58:06,160 --> 09:58:12,000
everything's working as expected then we have the login view here okay


8417
09:58:12,240 --> 09:58:18,560
so the next thing we need to do now is as the notes i'm actually going to go to


8418
09:58:18,560 --> 09:58:22,560
my notes and make sure that i have talked about the previous point


8419
09:58:22,560 --> 09:58:26,960
so the next thing we need to do is to create a dedicated home page that does


8420
09:58:26,960 --> 09:58:32,080
the app initialization and depending on whether the user is logged in or logged


8421
09:58:32,080 --> 09:58:35,916
out or if the user is verified or not then it's going to display the correct


8422
09:58:35,916 --> 09:58:40,000
widget on the screen okay so just to explain that a little bit more


8423
09:58:40,000 --> 09:58:45,120
is that i mean you i can say that you see in your main function here that


8424
09:58:45,120 --> 09:58:48,640
when your application run you it runs you're telling it to go to login view


8425
09:58:48,640 --> 09:58:52,320
but why why are we saying go to login view


8426
09:58:52,320 --> 09:58:57,520
why are we saying go to register view we have no logic at the moment that says


8427
09:58:57,520 --> 09:59:01,200
are you logged in then show the login view or if you're not like me and show


8428
09:59:01,200 --> 09:59:04,080
the registry so that's what we're going to do with our


8429
09:59:04,080 --> 09:59:08,400
home page okay so imagine the home page kind of being the manager of the


8430
09:59:08,400 --> 09:59:13,200
different routes that your application can manage so saying that oh if this


8431
09:59:13,200 --> 09:59:18,000
condition then do this if that condition display the other screen so


8432
09:59:18,000 --> 09:59:23,120
we need a home page and conveniently named is home page i mean lots of other


8433
09:59:23,120 --> 09:59:27,596
people may try to call it something else like a route page or whatever


8434
09:59:27,596 --> 09:59:30,640
but for now we're going to go with homepage because it's just so easy to


8435
09:59:30,640 --> 09:59:35,360
understand for everyone so let's then go in here


8436
09:59:35,360 --> 09:59:40,160
and say we want to have a stateless widget stl and we're going


8437
09:59:40,160 --> 09:59:44,560
to call it home page okay and i'm gonna press escape after that so now we have a


8438
09:59:44,560 --> 09:59:50,080
stateless widget called home page in our main dart file


8439
09:59:50,080 --> 09:59:54,880
now what we need to do then after doing that


8440
09:59:54,880 --> 09:59:59,680
we need to go in our main dart file and instead of saying login view let's just


8441
09:59:59,680 --> 10:00:03,840
say home page okay and if i press command is remember this is not going to


8442
10:00:03,840 --> 10:00:07,596
take any effect immediately because hot reload doesn't take into consideration


8443
10:00:07,596 --> 10:00:10,640
it changes the main function here so you have to do a hot restart so you'll see


8444
10:00:10,640 --> 10:00:13,840
black screen right now okay so


8445
10:00:13,840 --> 10:00:16,400
that's that


8446
10:00:16,640 --> 10:00:20,720
so what we need to do now is


8447
10:00:20,720 --> 10:00:24,240
to basically have some scaffold in our


8448
10:00:24,240 --> 10:00:27,120
homepage because we don't want to display just an empty screen to the user


8449
10:00:27,120 --> 10:00:28,880
okay so


8450
10:00:28,880 --> 10:00:34,480
let's go in here for our container instead say we return a scaffold


8451
10:00:34,480 --> 10:00:37,916
talked about scaffold in previous chapters so i'm not going to explain


8452
10:00:37,916 --> 10:00:42,320
that again and let's go and create an app bar with


8453
10:00:42,320 --> 10:00:48,080
which we've also talked about title accounts text and say home page


8454
10:00:48,080 --> 10:00:50,400
okay


8455
10:00:50,480 --> 10:00:55,436
well command s in mac or control s in linux and windows to save this file and


8456
10:00:55,436 --> 10:01:00,480
you'll see the changes took effect immediately


8457
10:01:00,480 --> 10:01:04,720
all right so what do we need in the home page we said


8458
10:01:04,720 --> 10:01:10,160
that the home page needs to initialize firebase it needs to first do that so


8459
10:01:10,160 --> 10:01:14,880
that we can get rid of this code in both register view you see this code future


8460
10:01:14,880 --> 10:01:19,200
builder firebase initialize app and then connection state done blah blah and also


8461
10:01:19,200 --> 10:01:22,640
we have the exact same code in our login view so


8462
10:01:22,640 --> 10:01:26,640
there's a lot of code to write in every view that we're gonna develop though


8463
10:01:26,640 --> 10:01:29,520
this application isn't gonna have so many views maybe six seven views but


8464
10:01:29,520 --> 10:01:34,400
still we don't wanna do initialize app in every view and do a future builder


8465
10:01:34,400 --> 10:01:38,880
it's just a lot of code so that's what our


8466
10:01:38,880 --> 10:01:46,640
homepage is gonna do okay so let's do that uh let's go and grab


8467
10:01:46,640 --> 10:01:51,520
this code um excuse me


8468
10:01:51,520 --> 10:01:55,680
let's grab this code with the future builder pretty much maybe the entire


8469
10:01:55,680 --> 10:02:00,560
build function okay from our login view so go to your login view grab the entire


8470
10:02:00,560 --> 10:02:06,160
build function until its end which is here this parenthesis okay ending


8471
10:02:06,160 --> 10:02:08,480
parenthesis close your login view close your


8472
10:02:08,480 --> 10:02:13,360
register view if you want to then go and replace the entire override of widget


8473
10:02:13,360 --> 10:02:18,400
build in your home page with that code that you just cut or


8474
10:02:18,400 --> 10:02:22,000
sorry copied from the login view paste it right here


8475
10:02:22,000 --> 10:02:26,880
now we we don't want the home page to have any logic that has anything to do


8476
10:02:26,880 --> 10:02:29,120
with um


8477
10:02:29,120 --> 10:02:33,916
text fields this homepage is we're going to use it for something a lot more noble


8478
10:02:33,916 --> 10:02:37,916
so you don't need all the text fields and


8479
10:02:37,916 --> 10:02:41,680
and all of these columns and uh your text


8480
10:02:41,680 --> 10:02:45,360
button so go to here where you're creating the


8481
10:02:45,360 --> 10:02:50,800
column in connection state done and grab that code all the way from


8482
10:02:50,800 --> 10:02:54,880
return so if i fold it you'll see that that is the entire return and i'm going


8483
10:02:54,880 --> 10:02:58,240
to actually delete it oops it didn't delete the entire code


8484
10:02:58,240 --> 10:03:00,800
okay so i'm going to do it by hand from the return


8485
10:03:00,800 --> 10:03:05,756
all the way down here to where the


8486
10:03:05,756 --> 10:03:09,436
column ends okay


8487
10:03:09,436 --> 10:03:13,040
and instead of that column what we're gonna do


8488
10:03:13,040 --> 10:03:18,080
is just return a text that says


8489
10:03:18,560 --> 10:03:22,320
okay just like that so if firebase


8490
10:03:22,320 --> 10:03:26,480
initialization is done it's just gonna say done and let's also change the text


8491
10:03:26,480 --> 10:03:30,000
here and just call it home all right now that we've done that you can see we


8492
10:03:30,000 --> 10:03:33,120
still have some problems with firebase not being imported because i deleted


8493
10:03:33,120 --> 10:03:35,520
those um um


8494
10:03:35,520 --> 10:03:39,756
imports previously so i'm gonna fix that now command dot on firebase and say


8495
10:03:39,756 --> 10:03:44,080
import that and command dot on default firebase options or control dot


8496
10:03:44,080 --> 10:03:49,680
depending on whether on your linux whether if you're on linux or a mac or


8497
10:03:49,680 --> 10:03:54,436
windows import firebase options


8498
10:03:54,480 --> 10:03:57,680
all right so now you'll see we have a homepage that just displays the word


8499
10:03:57,680 --> 10:04:01,596
done here once the connection state of our future


8500
10:04:01,596 --> 10:04:06,320
which is initialized app of firebase is actually done so hot reload


8501
10:04:06,320 --> 10:04:11,520
and you'll see hotdog sorry done is also displayed hot done


8502
10:04:11,520 --> 10:04:14,160
um so uh


8503
10:04:14,160 --> 10:04:18,320
i'm gonna take that in my notes that i've talked about that


8504
10:04:18,480 --> 10:04:21,200
all right the next thing we need to do in this


8505
10:04:21,200 --> 10:04:26,480
chapter is um to make sure that the user is not null


8506
10:04:26,480 --> 10:04:32,080
and that also the user is verified so under some rare circumstances with


8507
10:04:32,080 --> 10:04:36,000
firebase such as when you haven't initialized your firebase application


8508
10:04:36,000 --> 10:04:42,000
using initialize app the user that is stored in the firebase um


8509
10:04:42,000 --> 10:04:45,200
firebase code or in the instance of firebits


8510
10:04:45,200 --> 10:04:49,120
running inside your application may actually be null and we've talked about


8511
10:04:49,120 --> 10:04:53,436
null in uh previous chapters where we talked about dart and it's basics so you


8512
10:04:53,436 --> 10:04:56,240
can go back to those chapters and watch those so i'm not going to explain what


8513
10:04:56,240 --> 10:04:59,916
null is again but just quickly null is simply said the


8514
10:04:59,916 --> 10:05:03,680
absence of a value in this case absence of the user so


8515
10:05:03,680 --> 10:05:07,916
what we need to do in our application is to ensure


8516
10:05:07,916 --> 10:05:09,840
that a


8517
10:05:09,840 --> 10:05:13,436
the user the current user in the application is


8518
10:05:13,436 --> 10:05:19,040
um non-null meaning that it should be present and also that the user's email


8519
10:05:19,040 --> 10:05:22,160
should be verified okay so


8520
10:05:22,160 --> 10:05:27,040
you may be asking why is it important for a user's email to be


8521
10:05:27,040 --> 10:05:29,436
verified the reason


8522
10:05:29,436 --> 10:05:32,960
i mean also before i say why is it important for a user's email to be


8523
10:05:32,960 --> 10:05:37,916
verified maybe let's talk first about what an email verification is and


8524
10:05:37,916 --> 10:05:42,080
that whether you've already seen it or not so in a lot of services online if


8525
10:05:42,080 --> 10:05:46,160
for instance you go to a website even if it's a shopping website or


8526
10:05:46,160 --> 10:05:49,520
amazon or whatever ebay if you say okay i want to register a new user and you


8527
10:05:49,520 --> 10:05:54,000
say okay here's my email address here's a password of my choosing um


8528
10:05:54,000 --> 10:05:57,276
once you do that you will be logged into the website


8529
10:05:57,276 --> 10:06:00,400
they'll say okay if this email doesn't exist already


8530
10:06:00,400 --> 10:06:04,480
i'm gonna allow you to register this but then you wouldn't really be able to do


8531
10:06:04,480 --> 10:06:07,680
so much with the website you can search stuff but you probably won't be able to


8532
10:06:07,680 --> 10:06:11,756
buy things unless until unless you've


8533
10:06:11,756 --> 10:06:15,436
verified your email and that means that as soon as you register for amazon for


8534
10:06:15,436 --> 10:06:19,276
instance then it will send you an email to the email that that you chose upon


8535
10:06:19,276 --> 10:06:23,916
registration and there will usually be a link in that email and say thank you for


8536
10:06:23,916 --> 10:06:28,960
registering a user at amazon or ebay click on this link to verify your email


8537
10:06:28,960 --> 10:06:32,880
address you've probably seen emails like that so


8538
10:06:32,880 --> 10:06:35,916
you could just go to your inbox and search for verify and you'll probably


8539
10:06:35,916 --> 10:06:42,640
find lots of emails that ask you verify your account with the service so um


8540
10:06:42,640 --> 10:06:45,756
now let's now that we talked about what email verification is let's talk about


8541
10:06:45,756 --> 10:06:50,400
why it's important well let's say that i'm a user and i want to use this


8542
10:06:50,400 --> 10:06:53,680
application that we're developing so i want to score some notes in it


8543
10:06:53,680 --> 10:06:59,680
then i'll go and and register myself under an email that i don't own


8544
10:06:59,680 --> 10:07:03,680
all right so let's say then i register my


8545
10:07:03,680 --> 10:07:08,080
your email address with a password of my choosing since you haven't registered


8546
10:07:08,080 --> 10:07:12,080
your email address yet with the service icon and ahead of you and register your


8547
10:07:12,080 --> 10:07:16,080
email address with the service and now i'll just log in


8548
10:07:16,080 --> 10:07:19,680
remember i'm not logging into your email i'm logging into this application with


8549
10:07:19,680 --> 10:07:24,320
your email now now i've taken that email so if you then


8550
10:07:24,320 --> 10:07:28,240
who's the rightful owner of your email address comes to this application and


8551
10:07:28,240 --> 10:07:32,800
say oh i'm a foobarbaz gmail.com and i want to register an account with this


8552
10:07:32,800 --> 10:07:36,400
application and it says oops that email address was already taken so you'd be


8553
10:07:36,400 --> 10:07:39,520
like how is that taken that's my email address so


8554
10:07:39,520 --> 10:07:43,596
that is the importance of email verification what we need to do in our


8555
10:07:43,596 --> 10:07:47,520
application is to make sure that whenever someone comes and registers a


8556
10:07:47,520 --> 10:07:51,596
user using the email address and a password of their choosing then we're


8557
10:07:51,596 --> 10:07:56,960
gonna send a real email using firebase to that email address and say


8558
10:07:56,960 --> 10:08:03,040
hey you just registered a user here make sure that you click on this link that


8559
10:08:03,040 --> 10:08:08,880
says verify blah blah to actually verify your user with our application or with


8560
10:08:08,880 --> 10:08:13,756
our file with our applications firebase instance that sits on firebase cloud all


8561
10:08:13,756 --> 10:08:18,080
right so so what we need to do now is to go in


8562
10:08:18,080 --> 10:08:20,560
here in the connection state done you see


8563
10:08:20,560 --> 10:08:26,480
let's then check the current user okay let's see if this current user actually


8564
10:08:26,480 --> 10:08:31,040
is logged into the application so let's say firebase


8565
10:08:31,040 --> 10:08:34,720
um and then let's say


8566
10:08:34,720 --> 10:08:38,800
firebase app i believe it's called instance


8567
10:08:38,800 --> 10:08:42,160
let's see got instance


8568
10:08:42,800 --> 10:08:47,756
changelog firebase all right let's see if we can actually


8569
10:08:47,756 --> 10:08:51,200
google that together okay so this is good for you to also see


8570
10:08:51,200 --> 10:08:56,240
right base flutter get current user we're probably going to end up on some


8571
10:08:56,240 --> 10:09:00,480
sort of a stack overflow and we'll have a look at how we can


8572
10:09:00,480 --> 10:09:04,880
actually retrieve the current user as you can see the response here is from a


8573
10:09:04,880 --> 10:09:08,960
user whose username is quite


8574
10:09:08,960 --> 10:09:15,040
dissu kurt jr i apologize if i'm butching this name but you can see that


8575
10:09:15,040 --> 10:09:18,480
it's provided here for you that it says firebaseos.instance


8576
10:09:18,480 --> 10:09:22,480
and using that instance then you can get the current user so let's do the same


8577
10:09:22,480 --> 10:09:27,436
thing here let's say firebase off dot instance


8578
10:09:27,436 --> 10:09:30,480
and then current user okay


8579
10:09:30,480 --> 10:09:34,720
i'm gonna get rid of this screen on the left which which is our project browser


8580
10:09:34,720 --> 10:09:39,756
and i'm gonna print this statement right here before we return the done text okay


8581
10:09:39,756 --> 10:09:44,560
so i'll bring up the debug console clear the debug console and i'm going to say


8582
10:09:44,560 --> 10:09:49,040
command s all right and since we've made a lot of changes


8583
10:09:49,040 --> 10:09:52,720
here you see we created a home page lots of stuff in here so what we need to do


8584
10:09:52,720 --> 10:09:56,480
is just do a hot restart basically flutter in this case wasn't able to


8585
10:09:56,480 --> 10:10:01,276
really understand what we've changed in our home page so


8586
10:10:01,276 --> 10:10:05,916
there were so many changes that it just couldn't handle so a hot restart is the


8587
10:10:05,916 --> 10:10:09,756
remedy there now you can see here as we printed the


8588
10:10:09,756 --> 10:10:13,200
current user i'm going to do this so you can see more


8589
10:10:13,200 --> 10:10:16,800
of the the output i'm going to bring it up a


8590
10:10:16,800 --> 10:10:19,916
little bit i'm going to increase the size quite dramatically so you can see


8591
10:10:19,916 --> 10:10:22,880
it better as well and


8592
10:10:22,880 --> 10:10:26,640
i'm going to highlight the parts that were actually printed so this is what


8593
10:10:26,640 --> 10:10:30,640
firebase or this is what the print statement printed out for us and this is


8594
10:10:30,640 --> 10:10:35,040
user credentials that were created by firebase and


8595
10:10:35,040 --> 10:10:38,240
if you remember from the previous chapter i said that make sure before you


8596
10:10:38,240 --> 10:10:43,436
come to this chapter that you have a login user and this is the reason i


8597
10:10:43,436 --> 10:10:47,596
wanted us to i wanted the firebase instance in our application to already


8598
10:10:47,596 --> 10:10:51,680
know that you're logged in so that when we print your current user credentials


8599
10:10:51,680 --> 10:10:55,200
then as you can see it says here's the email address


8600
10:10:55,200 --> 10:10:59,840
and then there's a property called email verified false and it says are you an


8601
10:10:59,840 --> 10:11:03,436
anonymous user false and if you remember from one of


8602
10:11:03,436 --> 10:11:07,276
the earlier chapters when i talked about the firebase setup then


8603
10:11:07,276 --> 10:11:11,436
an anonymous user is a user who hasn't really logged into the application yet


8604
10:11:11,436 --> 10:11:13,840
and firebase is intelligent enough to


8605
10:11:13,840 --> 10:11:17,756
understand that any user who comes to your application who hasn't logged in


8606
10:11:17,756 --> 10:11:21,680
before or and their login information isn't saved in keychain or


8607
10:11:21,680 --> 10:11:26,400
shared preferences on android then that user is anonymous anonymous by default


8608
10:11:26,400 --> 10:11:31,276
so if you didn't take the um last action from the previous chapter


8609
10:11:31,276 --> 10:11:35,040
and you didn't log into the application with your current user


8610
10:11:35,040 --> 10:11:38,560
then you will actually be anonymous here so this flag will say true


8611
10:11:38,560 --> 10:11:41,916
but since we've already done that we've logged into the application then you'll


8612
10:11:41,916 --> 10:11:45,916
see our credentials being printed to the screen


8613
10:11:45,916 --> 10:11:49,916
now this is the part that i was interested in which is email verified


8614
10:11:49,916 --> 10:11:56,000
and it says false so what we're going to do here is to say


8615
10:11:56,000 --> 10:12:01,040
take the user so we're saying a final user is firebase off instance current


8616
10:12:01,040 --> 10:12:04,400
user i'm going to decrease the size a little bit here okay


8617
10:12:04,400 --> 10:12:08,960
and i'm gonna make the screen a little bit bigger so you can see it better


8618
10:12:08,960 --> 10:12:12,640
and let's go then create an if statement here


8619
10:12:12,640 --> 10:12:17,200
and let's say that we're gonna say what what have i planned for it let's just


8620
10:12:17,200 --> 10:12:23,276
say if user is verified email verified then we're going


8621
10:12:23,276 --> 10:12:27,916
to say print you are a verified user


8622
10:12:27,916 --> 10:12:33,596
and otherwise we're going to say print you need


8623
10:12:33,596 --> 10:12:37,200
verify your email first


8624
10:12:37,360 --> 10:12:40,800
so you see here because i'm so glad that


8625
10:12:40,800 --> 10:12:44,640
actually we're seeing this error you can see the entire error


8626
10:12:44,640 --> 10:12:47,276
it says how can i scroll here it says the


8627
10:12:47,276 --> 10:12:50,960
property email verify can't be unconditionally accessed because the


8628
10:12:50,960 --> 10:12:56,640
receiver can be null try making the access condition using question mark dot


8629
10:12:56,640 --> 10:13:01,916
or adding a null check to the target so what this is saying is if you go to this


8630
10:13:01,916 --> 10:13:06,880
user move your mouse over it uh if i can do that oh no


8631
10:13:06,880 --> 10:13:12,080
here you'll see that it says user is an optional user so what firebase has done


8632
10:13:12,080 --> 10:13:15,360
here is saying this current user property that you can


8633
10:13:15,360 --> 10:13:19,840
see here is an optional user meaning that well if something goes wrong and


8634
10:13:19,840 --> 10:13:23,436
firebase can't actually calculate your current user


8635
10:13:23,436 --> 10:13:27,360
for instance if you disable anonymous users which you can actually do


8636
10:13:27,360 --> 10:13:31,120
then firebase will be said it will be saying oops


8637
10:13:31,120 --> 10:13:34,240
null user the user is absent i don't know who this


8638
10:13:34,240 --> 10:13:38,480
user is so that is firebase api telling your


8639
10:13:38,480 --> 10:13:42,080
application that if you're using my api then you need to handle this case you


8640
10:13:42,080 --> 10:13:45,916
can't just ask me if the email is verified because the user may actually


8641
10:13:45,916 --> 10:13:50,720
be null the user may be absent so there was a great suggestion here you


8642
10:13:50,720 --> 10:13:54,800
saw here that says you can conditionally access that property using the question


8643
10:13:54,800 --> 10:13:58,800
mark dot syntax so let's do that question mark


8644
10:13:58,800 --> 10:14:03,200
done but as you do that you see you'll get another problem


8645
10:14:03,200 --> 10:14:08,320
it says okay you're asking me to compare an optional


8646
10:14:08,320 --> 10:14:10,720
boolean with


8647
10:14:10,720 --> 10:14:14,880
an actual boolean because remember your if conditions need to resolve in into a


8648
10:14:14,880 --> 10:14:20,480
true or false so um so in this case what you can do is


8649
10:14:20,480 --> 10:14:24,000
to either create something called for instance if an intermediate variable you


8650
10:14:24,000 --> 10:14:29,120
can say final email verified


8651
10:14:29,120 --> 10:14:33,840
and you'll say that is equal to user optional access to email verified field


8652
10:14:33,840 --> 10:14:38,160
or false you see this is the question mark question mark which we've already


8653
10:14:38,160 --> 10:14:41,436
talked about when we talked about dark basics so


8654
10:14:41,436 --> 10:14:46,240
what you said here is take the left hand side of this operator of question mark


8655
10:14:46,240 --> 10:14:51,120
question mark which is a null aware operator you say if the left hand side


8656
10:14:51,120 --> 10:14:56,080
exists take it otherwise take the value on the right okay so now if you move


8657
10:14:56,080 --> 10:15:00,800
your mouse over email verify you'll see that it's a boolean all right


8658
10:15:00,800 --> 10:15:05,120
perfect so you could either do that or get rid of this intermediate variable


8659
10:15:05,120 --> 10:15:08,720
that you created here and literally just put the exact same code in your if


8660
10:15:08,720 --> 10:15:12,800
statement and that will work exactly as it did up there so let's just go ahead


8661
10:15:12,800 --> 10:15:16,240
with that one less line of code one


8662
10:15:16,240 --> 10:15:21,840
line of code less maybe um all right so


8663
10:15:21,840 --> 10:15:25,520
if the user's email verified or false is true


8664
10:15:25,520 --> 10:15:30,240
which means that if the user's email verification could be read as true or


8665
10:15:30,240 --> 10:15:37,200
false and if you can't use false if the equation then in itself is true then the


8666
10:15:37,200 --> 10:15:41,520
user is verified otherwise the user isn't verified so


8667
10:15:41,520 --> 10:15:46,000
let's do command s there let's bring up our console i'm going to


8668
10:15:46,000 --> 10:15:49,840
change the screen layout a little bit so you can see better


8669
10:15:49,840 --> 10:15:53,276
and you can see here it says you need to verify your email i actually clean the


8670
10:15:53,276 --> 10:15:56,400
screen a little bit and command s again so you'll see a little bit less


8671
10:15:56,400 --> 10:16:00,480
information on screen and you can see our print statement which was here got


8672
10:16:00,480 --> 10:16:05,040
printed saying that yeah you haven't verified your email and you need to do


8673
10:16:05,040 --> 10:16:09,200
that first okay a lot of information but maybe less


8674
10:16:09,200 --> 10:16:13,040
than the other chapters and to be honest with you this is all we have to talk


8675
10:16:13,040 --> 10:16:15,916
about in this chapter i just wanted to display


8676
10:16:15,916 --> 10:16:20,960
or and show you that um or actually explain first what email verification is


8677
10:16:20,960 --> 10:16:25,520
why is it important and that we're we are going to use email verification in


8678
10:16:25,520 --> 10:16:28,480
our in our application as you'll soon see


8679
10:16:28,480 --> 10:16:34,400
and how can you actually read that property from a firebase user


8680
10:16:34,400 --> 10:16:38,560
great that was all for this chapter now the


8681
10:16:38,560 --> 10:16:42,240
next chapter is going to be a little bit different you may actually expect a


8682
10:16:42,240 --> 10:16:46,480
continuation of this chapter you would think that we're going to jump right


8683
10:16:46,480 --> 10:16:51,120
into email verification but i have intentionally actually put a little bit


8684
10:16:51,120 --> 10:16:54,640
of a pause in our flow because this is something you'll


8685
10:16:54,640 --> 10:16:58,160
have to do as a software developer sometimes in that if you see something


8686
10:16:58,160 --> 10:17:02,400
not kind of correct something isn't working


8687
10:17:02,400 --> 10:17:05,680
right then you'll need to address it as soon as possible and this is something


8688
10:17:05,680 --> 10:17:10,080
we're going to address in the next chapter the problem here that you may


8689
10:17:10,080 --> 10:17:13,596
may if you're a seasoned software developer or may not have thought about


8690
10:17:13,596 --> 10:17:17,916
is that we are just writing code on our computer


8691
10:17:17,916 --> 10:17:23,680
this code could be easily deleted by a malicious program a virus or if


8692
10:17:23,680 --> 10:17:28,480
something happens to our computer all this could just go away and you'll lose


8693
10:17:28,480 --> 10:17:31,276
everything that you've written so if you're not coming from a software


8694
10:17:31,276 --> 10:17:35,596
engineering background then you may not know what git and github are


8695
10:17:35,596 --> 10:17:37,916
now i'm not going to scare you to be honest


8696
10:17:37,916 --> 10:17:41,596
with you this is not something scary but um


8697
10:17:41,596 --> 10:17:44,720
what we need to do is just to make sure that we have a backup of our code and


8698
10:17:44,720 --> 10:17:48,240
just that's just common sense like even if you're a designer even if you're a


8699
10:17:48,240 --> 10:17:53,200
music producer even if you're a soft if if your product owner whoever


8700
10:17:53,200 --> 10:17:58,000
or product manager you probably know that whatever you're working on needs to


8701
10:17:58,000 --> 10:18:02,240
be saved somewhere safely so if you have a video file you're not just going to


8702
10:18:02,240 --> 10:18:05,200
put it on your computer you're probably going to make a backup of it if you're


8703
10:18:05,200 --> 10:18:09,596
working with figma that that file is already shared in the cloud is sorry not


8704
10:18:09,596 --> 10:18:12,800
shared it's already stored in the cloud so


8705
10:18:12,800 --> 10:18:18,960
it's very rarely that you will work on pieces of um documents that are not


8706
10:18:18,960 --> 10:18:23,120
securely stored in some sort of cloud and even if you're working for instance


8707
10:18:23,120 --> 10:18:28,240
with a document then nowadays there's also shared like um sorry there are


8708
10:18:28,240 --> 10:18:30,800
cloud solutions for storing your documents


8709
10:18:30,800 --> 10:18:34,480
securely in the cloud so um i mean it pretty much


8710
10:18:34,480 --> 10:18:38,480
almost always when you're working on a user generated document or a source code


8711
10:18:38,480 --> 10:18:41,680
in this case you'll need to make sure that it's securely stored in the cloud


8712
10:18:41,680 --> 10:18:44,720
and that's what we're going to do in the next chapter so we're going to talk


8713
10:18:44,720 --> 10:18:48,880
about git and github we're going to set up our gpg keys


8714
10:18:48,880 --> 10:18:53,120
or pgp keys how do you want to say it and we're actually going to dive a


8715
10:18:53,120 --> 10:18:57,276
little bit deep into git and what it actually means and why it is why is it


8716
10:18:57,276 --> 10:19:03,040
good why do software developers talk a lot about git and as you might know


8717
10:19:03,040 --> 10:19:06,720
this course well not might you already know this course


8718
10:19:06,720 --> 10:19:12,320
is about flutter but i couldn't help put this chapter in


8719
10:19:12,320 --> 10:19:15,756
because i believe if you're not a software developer if you're coming from


8720
10:19:15,756 --> 10:19:20,720
another background then it is my duty kind of to tell you


8721
10:19:20,720 --> 10:19:25,520
about git and github and why is it important how to use it how i like to do


8722
10:19:25,520 --> 10:19:29,040
very simple tasks with getting github so um


8723
10:19:29,040 --> 10:19:32,320
so let's then prepare ourselves for the next chapter which is going to be a


8724
10:19:32,320 --> 10:19:36,880
little bit less coding it's not really we're not at all almost not at all going


8725
10:19:36,880 --> 10:19:41,120
to be working on the source code we're mainly going to work with git and github


8726
10:19:41,120 --> 10:19:44,800
so with that said i will wrap up this


8727
10:19:44,800 --> 10:19:50,400
chapter and i'll see you in the next one hello and welcome to chapter 15 of this


8728
10:19:50,400 --> 10:19:54,000
letter course in previous chapters we talked a lot


8729
10:19:54,000 --> 10:19:58,320
about setting up our project so we've so far been working a lot with setting up


8730
10:19:58,320 --> 10:20:02,880
the project and the basics we also created our login and registered views


8731
10:20:02,880 --> 10:20:07,040
in our flutter application as i was developing this course myself i got to


8732
10:20:07,040 --> 10:20:11,120
the point that there was a lot of code being written by me and then i needed to


8733
10:20:11,120 --> 10:20:15,120
make sure that it is stored in a in a place where i can always go


8734
10:20:15,120 --> 10:20:19,040
back to even if i lose this information on my computer that i can go back to


8735
10:20:19,040 --> 10:20:23,756
that place and then retrieve that code so um


8736
10:20:23,756 --> 10:20:26,400
if you're a software developer if you're if you're a seasoned software developer


8737
10:20:26,400 --> 10:20:30,000
from before and you know what git and github are and you're comfortable using


8738
10:20:30,000 --> 10:20:34,000
them and you know how to set up for instance your secure keys with gpg


8739
10:20:34,000 --> 10:20:37,680
then you can safely jump over this chapter but if you're a designer product


8740
10:20:37,680 --> 10:20:42,160
owner product manager whoever who doesn't know what git and github are or


8741
10:20:42,160 --> 10:20:45,596
maybe need some help setting those things up


8742
10:20:45,596 --> 10:20:50,480
then this is a good chapter for you uh otherwise you can just skim quickly


8743
10:20:50,480 --> 10:20:52,480
over so


8744
10:20:52,480 --> 10:20:56,000
let's let's talk quickly about what git and


8745
10:20:56,000 --> 10:21:00,640
github are and why we need them um as i mentioned when you're working with your


8746
10:21:00,640 --> 10:21:03,436
code for instance as i was while developing this course then you're


8747
10:21:03,436 --> 10:21:08,560
writing a lot of code which is i mean intrinsically valuable because


8748
10:21:08,560 --> 10:21:13,276
your time was translated into those pieces of code as you were writing the


8749
10:21:13,276 --> 10:21:18,720
code you spent some time and energy and effort and wrote the code so it is quite


8750
10:21:18,720 --> 10:21:22,720
an important piece of information for you just to lose and depending on the


8751
10:21:22,720 --> 10:21:25,680
type of project you're working on for instance this project it has taken me


8752
10:21:25,680 --> 10:21:31,040
quite a lot of time to even develop the idea of the project and put it together


8753
10:21:31,040 --> 10:21:33,916
so while i was while i was putting together the idea of the course and


8754
10:21:33,916 --> 10:21:38,400
written writing all the bits and pieces that i have to explain in every video i


8755
10:21:38,400 --> 10:21:43,596
made quite a lot of backups of that of those ideas because had i not done that


8756
10:21:43,596 --> 10:21:47,520
and had i just put everything in just one piece of paper or something or just


8757
10:21:47,520 --> 10:21:53,520
even one digital document on my computer had i lost a document then well yeah


8758
10:21:53,520 --> 10:21:58,080
i would have lost it and i would have had to begin from the absolute beginning


8759
10:21:58,080 --> 10:22:01,840
and this is the same thing for your code [Music]


8760
10:22:01,840 --> 10:22:07,200
so you need to use two services called git and github in order to


8761
10:22:07,200 --> 10:22:10,080
store your code


8762
10:22:10,080 --> 10:22:14,560
in in a safe place so that you can always retrieve it later


8763
10:22:14,560 --> 10:22:22,400
so let's talk quickly about what is git and why do you need this um


8764
10:22:22,480 --> 10:22:28,080
so what you need to know about gitz is that git is a


8765
10:22:28,080 --> 10:22:35,276
piece of software on your computer that allows you to


8766
10:22:35,276 --> 10:22:40,320
manage various changes that you make to a code


8767
10:22:40,320 --> 10:22:45,840
base such as our project at different times keeping track of the date those


8768
10:22:45,840 --> 10:22:50,720
changes were made the person who made the changes and the changes themselves


8769
10:22:50,720 --> 10:22:54,720
and also it will be able to provide you the difference between your recent


8770
10:22:54,720 --> 10:22:59,840
changes and what was already provided in the or what was already


8771
10:22:59,840 --> 10:23:06,400
committed into this git repository well what a git repository really is is


8772
10:23:06,400 --> 10:23:09,756
a bucket is an empty bucket initially where there


8773
10:23:09,756 --> 10:23:15,200
is nothing in there and as you interact with your source code then you'd be like


8774
10:23:15,200 --> 10:23:19,200
okay now i want to turn this source code that i've written into a bucket so then


8775
10:23:19,200 --> 10:23:23,520
there's a bucket created around your source code called a git repository


8776
10:23:23,520 --> 10:23:28,960
which keeps track of all the changes that you're that you're making or


8777
10:23:28,960 --> 10:23:33,916
anybody else that works on the same source code is making to the code and it


8778
10:23:33,916 --> 10:23:39,276
will allow you to save snapshots of those changes at


8779
10:23:39,276 --> 10:23:44,160
at specific times of your choosing if you're a designer of your and you're


8780
10:23:44,160 --> 10:23:48,000
working with figma for instance figma already


8781
10:23:48,000 --> 10:23:52,640
automatically saves your work at the times that it sees fit so you never have


8782
10:23:52,640 --> 10:23:57,120
to press really a save button and also figma if you've seen it


8783
10:23:57,120 --> 10:24:03,360
and it keeps track it has a version history so you can literally go to figma


8784
10:24:03,360 --> 10:24:07,520
and say okay i've done my work i want to actually commit my changes in the


8785
10:24:07,520 --> 10:24:10,160
version history and i want to give it a name


8786
10:24:10,160 --> 10:24:14,080
most designers don't do that and they legislate must save their work


8787
10:24:14,080 --> 10:24:18,640
automatically and by that figma just says here's the timeline of your changes


8788
10:24:18,640 --> 10:24:22,160
at this time you did this at this time you did this so


8789
10:24:22,160 --> 10:24:26,480
even if you're a designer you're implicitly using something called a


8790
10:24:26,480 --> 10:24:30,720
version control and which in it in that case is figma


8791
10:24:30,720 --> 10:24:34,000
but when you're coming to the software development world we're working with


8792
10:24:34,000 --> 10:24:38,080
your flutter application there is no figma there and you're working with raw


8793
10:24:38,080 --> 10:24:42,880
code so you're going into visual studio code or sublime or whatever text editor


8794
10:24:42,880 --> 10:24:47,200
that you're using android studio as an id or whatever


8795
10:24:47,200 --> 10:24:51,276
then there is no service sitting there and saying oh you made some changes let


8796
10:24:51,276 --> 10:24:54,560
me let me help you save it in some sort of app


8797
10:24:54,560 --> 10:24:59,200
or a cloud solution so the system that allows you to do that on


8798
10:24:59,200 --> 10:25:03,520
your computer is called git so git is a software that allows you to keep track


8799
10:25:03,520 --> 10:25:07,756
of changes that you're making to source code okay


8800
10:25:07,756 --> 10:25:11,360
so i can see here that before we continue we're gonna actually talk a


8801
10:25:11,360 --> 10:25:15,040
little bit about git and so


8802
10:25:15,040 --> 10:25:19,680
what i'm gonna do here i'm gonna add lib a little bit here and improvise


8803
10:25:19,680 --> 10:25:22,800
and i'm gonna go here and make the screen a little bit bigger i'm gonna


8804
10:25:22,800 --> 10:25:27,276
bring up terminal and you don't see it on that screen because it opened on


8805
10:25:27,276 --> 10:25:31,436
another screen so let me just increase the size and bring


8806
10:25:31,436 --> 10:25:35,916
it up here so you also see it so i'm gonna go here to my development


8807
10:25:35,916 --> 10:25:43,200
folder and i'm going to go to my projects and


8808
10:25:43,200 --> 10:25:46,480
let's think go to


8809
10:25:47,200 --> 10:25:52,400
make a folder i'm going to say git okay


8810
10:25:52,400 --> 10:25:56,480
should i call it git or just let's actually create a folder called


8811
10:25:56,480 --> 10:26:02,240
testing okay let's go into testing then it is an


8812
10:26:02,240 --> 10:26:07,276
empty folder as you can see for now and what we're going to do is we're


8813
10:26:07,276 --> 10:26:12,480
going to tell git now which is a software installed on my computer um to


8814
10:26:12,480 --> 10:26:16,560
tell it that okay all of a sudden i want to turn this empty directory here into


8815
10:26:16,560 --> 10:26:20,640
something called a repository remember it's going to be a bucket then that


8816
10:26:20,640 --> 10:26:25,360
keeps track of changes in the current directory now before we continue maybe


8817
10:26:25,360 --> 10:26:29,276
oh sorry about that maybe you also need to actually install


8818
10:26:29,276 --> 10:26:32,640
git on your computer if you're not coming from a software development


8819
10:26:32,640 --> 10:26:36,640
background you probably don't even have git installed on your computer so i'm


8820
10:26:36,640 --> 10:26:40,960
going to bring up a a browser window here and say install


8821
10:26:40,960 --> 10:26:43,840
git so


8822
10:26:43,840 --> 10:26:49,276
if i google install git you will see that there there's like information


8823
10:26:49,276 --> 10:26:53,680
how you can install git on your computer if you


8824
10:26:53,680 --> 10:27:01,120
are on a macintosh and you have already installed xcode xcode comes pre pre like


8825
10:27:01,120 --> 10:27:05,916
pre-packaged with gits already if you're on windows i believe that you


8826
10:27:05,916 --> 10:27:09,436
actually have to i have a windows machine right here next to me which i


8827
10:27:09,436 --> 10:27:14,320
use daily i believe for windows you'll have to install git personally like


8828
10:27:14,320 --> 10:27:19,120
manual so let's say install git windows


8829
10:27:19,120 --> 10:27:24,240
uh get download package get a time get guys install git


8830
10:27:24,800 --> 10:27:29,120
oops my ipad for some reason got disconnected here so i'm going to have


8831
10:27:29,120 --> 10:27:32,240
some difficulty then um


8832
10:27:32,240 --> 10:27:38,480
let's see now install git on linux okay


8833
10:27:38,480 --> 10:27:42,000
i believe there is a good package actually for getting it on windows let


8834
10:27:42,000 --> 10:27:45,680
me go back here installer on windows you can see here


8835
10:27:45,680 --> 10:27:49,360
just go to i'm going to increase the screen size a little bit as well so you


8836
10:27:49,360 --> 10:27:54,320
can see it a little bit better here it says go to https get scm com


8837
10:27:54,320 --> 10:27:58,240
download win so i'm going to go here and it's going to start downloading so


8838
10:27:58,240 --> 10:28:01,520
i'm just going to say cancel because right now i'm in a macintosh so here is


8839
10:28:01,520 --> 10:28:04,880
where you can download git and install it on your computer


8840
10:28:04,880 --> 10:28:08,160
if you are on a windows machine and you have the linux subsystem which i do on


8841
10:28:08,160 --> 10:28:12,960
my windows machine then you may actually want to download git using see sudo apt


8842
10:28:12,960 --> 10:28:15,276
um on that


8843
10:28:15,276 --> 10:28:18,720
linux subsystem but it is possible that the linux subsystem


8844
10:28:18,720 --> 10:28:22,080
on windows already comes shipped with git so you don't have to do anything i


8845
10:28:22,080 --> 10:28:25,120
wouldn't be surprised if git was one of the absolute core components that was


8846
10:28:25,120 --> 10:28:28,320
shipped with linux um


8847
10:28:28,320 --> 10:28:32,320
so that's for a macintosh and also if you're on a macintosh and you don't have


8848
10:28:32,320 --> 10:28:36,320
xcode for whatever reason um


8849
10:28:36,320 --> 10:28:41,120
then you may need to also download git separately so let's go back here and see


8850
10:28:41,120 --> 10:28:45,840
how you can do that uh if you say mac os here it says there


8851
10:28:45,840 --> 10:28:49,436
are several ways to install get on mac users probably install the xcode command


8852
10:28:49,436 --> 10:28:54,240
line tools which we've already done so if you don't have it in slavery it will


8853
10:28:54,240 --> 10:28:58,640
prompt you to install it so otherwise you can go in here get


8854
10:28:58,640 --> 10:29:03,360
semcom download mac and then you can do brew install git


8855
10:29:03,360 --> 10:29:07,040
so if that is what you want to do then you first have to actually install


8856
10:29:07,040 --> 10:29:09,120
homebrew so


8857
10:29:09,120 --> 10:29:13,596
go into this link and say homebrew install basically just do as it says


8858
10:29:13,596 --> 10:29:18,880
here you see there's the command and then go and install


8859
10:29:18,880 --> 10:29:24,720
git using homebrew and if you're on linux then a sudo apt


8860
10:29:24,720 --> 10:29:28,000
install git i think maybe you don't even need to have sudo if you're installing


8861
10:29:28,000 --> 10:29:33,436
for the current user so just apt app is it get or install i forgot but


8862
10:29:33,436 --> 10:29:38,080
there's information about linux here as well


8863
10:29:38,080 --> 10:29:42,160
app install yeah get all so


8864
10:29:42,160 --> 10:29:45,840
yeah i mean i'm assuming you're kind of like on a debian based distribution as


8865
10:29:45,840 --> 10:29:50,800
well but otherwise there's information here how you can install it otherwise so


8866
10:29:50,880 --> 10:29:54,000
all right uh that was a lot of information and before


8867
10:29:54,000 --> 10:29:57,596
we continue i'm just going to try to make sure that i'm connected back to my


8868
10:29:57,596 --> 10:30:02,480
uh to my laptop to my ipad here because on


8869
10:30:02,480 --> 10:30:06,560
my ipad i keep hold of all the information that i have to provide to


8870
10:30:06,560 --> 10:30:10,400
you in some sort of like a chronological order so it is very important for me to


8871
10:30:10,400 --> 10:30:14,720
actually get my notes up there so i'm going to try to connect to my ipad and


8872
10:30:14,720 --> 10:30:18,400
yeah there it is okay


8873
10:30:18,400 --> 10:30:21,360
so now that you've i'm assuming that you've


8874
10:30:21,360 --> 10:30:26,160
installed git i'm assuming that that is done if you say which git


8875
10:30:26,160 --> 10:30:30,320
then it's going to tell me in this case that user being get that's where get it


8876
10:30:30,320 --> 10:30:34,400
installed if you're on windows to be honest with you i don't know the command


8877
10:30:34,400 --> 10:30:39,360
on windows to know whether it come like git is installed but on windows all you


8878
10:30:39,360 --> 10:30:43,120
have to do is just to type git and if if you see that


8879
10:30:43,120 --> 10:30:47,916
it throws an error it says git isn't available either you haven't installed


8880
10:30:47,916 --> 10:30:53,520
git and if you have installed git maybe git isn't in the current path so you'll


8881
10:30:53,520 --> 10:30:57,436
have to go and adjust your environment variables in order to get git and


8882
10:30:57,436 --> 10:31:01,680
is lots of information on the internet so we're not going to focus right now on


8883
10:31:01,680 --> 10:31:05,200
how to install git exactly because that's going to be like its own course


8884
10:31:05,200 --> 10:31:07,520
maybe but if you follow the instructions that


8885
10:31:07,520 --> 10:31:11,200
were provided on the website that i just showed you should be able to get far


8886
10:31:11,200 --> 10:31:15,120
so i'm assuming now git is is installed on


8887
10:31:15,120 --> 10:31:19,040
our computer and you can see here we're in a folder called testing so if i say


8888
10:31:19,040 --> 10:31:23,360
where that testing is you can see that is is right here now what we want to do


8889
10:31:23,360 --> 10:31:26,800
is to say testing for instance is the project that we're gonna place all our


8890
10:31:26,800 --> 10:31:30,480
code in okay so there's gonna be information that we're gonna write here


8891
10:31:30,480 --> 10:31:35,840
in this um in this folder there's gonna be some dart files there's gonna be some


8892
10:31:35,840 --> 10:31:40,640
png and jpeg files there's gonna be our application icon all that stuff


8893
10:31:40,640 --> 10:31:44,240
and we want to store this safely so


8894
10:31:44,240 --> 10:31:51,040
the first thing you may want to do is to to basically tell git that this current


8895
10:31:51,040 --> 10:31:57,120
directory in itself is a git's repository so the bucket remember the


8896
10:31:57,120 --> 10:32:00,160
bucket is going to wrap itself around the directory so


8897
10:32:00,160 --> 10:32:03,596
if i get the contents of this directory at the moment you can see that it's


8898
10:32:03,596 --> 10:32:08,320
completely empty but if you want to create a git bucket or a git repository


8899
10:32:08,320 --> 10:32:13,120
around this directory all you have to say is just to say git init dots


8900
10:32:13,120 --> 10:32:16,960
okay you'll see here now it says that


8901
10:32:16,960 --> 10:32:20,720
initialize amt git repository in this folder


8902
10:32:20,720 --> 10:32:24,320
so now if i get the contents of this folder you'll see that there is a new


8903
10:32:24,320 --> 10:32:29,120
directory called dot git and dot git directory is where git basically keeps


8904
10:32:29,120 --> 10:32:33,840
track of its internal like the changes to this directory and like


8905
10:32:33,840 --> 10:32:37,680
what you save when you save it who is it that


8906
10:32:37,680 --> 10:32:42,240
saved the work etc so now that you've done that now you've created a git


8907
10:32:42,240 --> 10:32:47,360
repository basically around this empty directory you can issue various diff git


8908
10:32:47,360 --> 10:32:50,400
commands such as its status


8909
10:32:50,400 --> 10:32:54,800
this will give you the current status on this um


8910
10:32:54,800 --> 10:32:58,880
on this uh directory and you can see here as soon


8911
10:32:58,880 --> 10:33:03,840
as we created a git repository with git in it all of a sudden my terminal


8912
10:33:03,840 --> 10:33:08,640
changed my prompt here and said that all of a sudden testing is not just testing


8913
10:33:08,640 --> 10:33:12,800
anymore but it's actually a git directory and we're on a branch called


8914
10:33:12,800 --> 10:33:15,436
main now


8915
10:33:15,436 --> 10:33:18,960
i don't want to talk about branches right now but just know that there are


8916
10:33:18,960 --> 10:33:21,840
um yeah let's just not talk about branches


8917
10:33:21,840 --> 10:33:25,360
right now because i'm planning to do that a little bit later so


8918
10:33:25,360 --> 10:33:28,800
so but what we are going to talk about is this little message here that says no


8919
10:33:28,800 --> 10:33:34,880
commits yet now in git whenever you're working um git


8920
10:33:34,880 --> 10:33:38,720
doesn't just save your work automatically you need to tell git to


8921
10:33:38,720 --> 10:33:43,120
save your work and those points where you save your work there are call


8922
10:33:43,120 --> 10:33:47,840
commits it commits as its name indicates is you committing your work you say i


8923
10:33:47,840 --> 10:33:52,640
committed to this and i want to save it and that's i mean it could be called


8924
10:33:52,640 --> 10:33:55,916
save but save is maybe


8925
10:33:55,916 --> 10:33:59,436
um it could be uh like


8926
10:33:59,436 --> 10:34:04,160
read as kind of more like a verb like oh am i gonna save it now or what is it but


8927
10:34:04,160 --> 10:34:08,480
if i say here's my commit then it could be a little bit easier to infer


8928
10:34:08,480 --> 10:34:13,276
that oh it's a piece of information that you've saved and you've committed to so


8929
10:34:13,276 --> 10:34:16,800
i think maybe that's the reason it's called the committee i'm not sure


8930
10:34:16,800 --> 10:34:20,560
so those commits are points of time where a


8931
10:34:20,560 --> 10:34:24,800
person that has access to this repository saved their work okay so just


8932
10:34:24,800 --> 10:34:30,320
remember that that is a commit and if we see here the status says no commits yet


8933
10:34:30,320 --> 10:34:34,000
because there was literally nothing that you told get to save now what we're


8934
10:34:34,000 --> 10:34:37,200
going to do is to open up visual studio code so i'm going to bring up you just


8935
10:34:37,200 --> 10:34:40,720
to studio code here and you can see it's an empty folder


8936
10:34:40,720 --> 10:34:44,160
and i'm gonna create a file here and let's just call


8937
10:34:44,160 --> 10:34:48,000
um let's call this um


8938
10:34:48,200 --> 10:34:54,160
info.txt so just text file okay so here's an empty file and i'm just


8939
10:34:54,160 --> 10:34:57,840
gonna type hello in here increase the size a little bit as well so you can see


8940
10:34:57,840 --> 10:34:59,756
better so


8941
10:34:59,756 --> 10:35:03,756
now if i say git status here you can see all of a sudden it doesn't say no


8942
10:35:03,756 --> 10:35:10,400
commits yet it it well basically it says dad but it also says on track files and


8943
10:35:10,400 --> 10:35:16,560
it puts the info text right here now let me then explain what attract file


8944
10:35:16,560 --> 10:35:21,520
and on track file is a track file is a file that you've told git about before


8945
10:35:21,520 --> 10:35:26,240
so it it's tracking the changes being made to that file


8946
10:35:26,240 --> 10:35:31,360
on track file is a file that you have not told yet before about so it says oh


8947
10:35:31,360 --> 10:35:34,960
here's a file you're doing something with it but i'm not gonna even look at


8948
10:35:34,960 --> 10:35:38,480
it i'm not gonna keep track of it because you don't you didn't tell me to


8949
10:35:38,480 --> 10:35:40,640
do so so


8950
10:35:40,640 --> 10:35:45,276
and things um i mean yeah a file basically can be in


8951
10:35:45,276 --> 10:35:49,916
three states in git right now you've learned two of them either tracked or on


8952
10:35:49,916 --> 10:35:55,680
track but it could also be in another state that i will show you soon


8953
10:35:55,680 --> 10:35:58,640
so now you can see there's a message here


8954
10:35:58,640 --> 10:36:02,880
that it says let me bring actually the terminal a little bit up here so you can


8955
10:36:02,880 --> 10:36:08,000
see the terminal in its entirety it says use git add and then the name of the


8956
10:36:08,000 --> 10:36:12,320
file in order to include what will be committed so let's do that i'm just


8957
10:36:12,320 --> 10:36:17,360
going to say git add info txt and now i'm going to say git status and


8958
10:36:17,360 --> 10:36:21,276
all of a sudden you'll see that get understood that here's a new file you're


8959
10:36:21,276 --> 10:36:26,480
committing committing this file called info text but you can see


8960
10:36:26,480 --> 10:36:30,480
that it still says you haven't committed anything but it says changes to be


8961
10:36:30,480 --> 10:36:34,240
committed and all of a sudden this file is green


8962
10:36:34,240 --> 10:36:38,400
remember i said a file can be in three states on tracked which means git


8963
10:36:38,400 --> 10:36:42,800
doesn't know about it tracked which means it does know about it or it could


8964
10:36:42,800 --> 10:36:47,520
be staged so if you see here this file is green


8965
10:36:47,520 --> 10:36:51,916
and it says changes to be committed so stage is where


8966
10:36:51,916 --> 10:36:56,960
you have made changes to a file and you've told git that you want to


8967
10:36:56,960 --> 10:37:00,160
commit it but you haven't committed it yet


8968
10:37:00,160 --> 10:37:04,720
now you may be asking okay why would i have files that aren't going to be


8969
10:37:04,720 --> 10:37:09,276
committed in some projects if you have some information for instance if you're


8970
10:37:09,276 --> 10:37:13,756
working with 10 other developers and you're making some


8971
10:37:13,756 --> 10:37:17,756
tests and you're writing some code in the in the directory where your source


8972
10:37:17,756 --> 10:37:21,756
code is placed at but you don't you're not really ready with that file yet you


8973
10:37:21,756 --> 10:37:25,040
don't want to commit it into a branch where everyone else sees then you could


8974
10:37:25,040 --> 10:37:29,596
say oh i'm not going to commit this it is not staged file i'm not even ready


8975
10:37:29,596 --> 10:37:33,360
for staging it and putting it into the commit so in that case you're not going


8976
10:37:33,360 --> 10:37:36,800
to add it to the staging area okay so remember that


8977
10:37:36,800 --> 10:37:40,640
now that you've you've done that you just said git add you can commit it and


8978
10:37:40,640 --> 10:37:45,436
a commit literally means that you're going to save this work in git okay


8979
10:37:45,436 --> 10:37:48,480
and the way to do that is using git commits


8980
10:37:48,480 --> 10:37:53,916
and then you will provide a message using dash m here and then quotation


8981
10:37:53,916 --> 10:37:58,000
marks okay so here you will write a message that will be appended to your


8982
10:37:58,000 --> 10:38:02,720
entire commit so what we're going to do here says


8983
10:38:02,720 --> 10:38:08,560
let's just say add new info txt file for fun okay and


8984
10:38:08,560 --> 10:38:12,800
then i'm just going to press enter and see here it says one file change and


8985
10:38:12,800 --> 10:38:17,756
one insertions and it will say that yeah it has created this file okay so i'm


8986
10:38:17,756 --> 10:38:23,040
gonna clear my uh terminal now and we're gonna do git status


8987
10:38:23,040 --> 10:38:27,120
all of a sudden that message that about no commits yet disappeared and all this


8988
10:38:27,120 --> 10:38:30,960
is is that is that you're on a branch called main and there's nothing to


8989
10:38:30,960 --> 10:38:33,756
commit okay so


8990
10:38:33,756 --> 10:38:37,916
what do you do then if you want to see the commit that you just made like if


8991
10:38:37,916 --> 10:38:41,120
you want to see okay what are all the comments that were made then in that


8992
10:38:41,120 --> 10:38:45,120
case you can say git log and git blog will display


8993
10:38:45,120 --> 10:38:49,276
all the all the commits that were made and who they were made by and you will


8994
10:38:49,276 --> 10:38:53,520
also be able to see the date that were made and the commit message do you


8995
10:38:53,520 --> 10:39:00,240
remember we said git commit dash m so that was the message provided in the get


8996
10:39:00,400 --> 10:39:04,480
command and then saved in the repository okay


8997
10:39:04,480 --> 10:39:07,040
so that is the message and that's the email


8998
10:39:07,040 --> 10:39:11,596
of the person who basically did that commit


8999
10:39:11,596 --> 10:39:16,080
now i jumped over a little bit here and um


9000
10:39:16,080 --> 10:39:20,160
and to be honest with you that was i didn't really think about that some


9001
10:39:20,160 --> 10:39:24,160
people if you're installing git then you're not going to have all this


9002
10:39:24,160 --> 10:39:27,436
information already set up like who you are


9003
10:39:27,436 --> 10:39:32,480
and there's information about how you configured it and how you tell get who


9004
10:39:32,480 --> 10:39:36,560
you are and what your name is etc and that is


9005
10:39:36,560 --> 10:39:41,200
using a command called git config and global for instance


9006
10:39:41,200 --> 10:39:45,916
but you could actually read about read about that online so just say git config


9007
10:39:45,916 --> 10:39:50,240
and then you will get a lot of information about how to do that so but


9008
10:39:50,240 --> 10:39:55,120
just know that git is such a big world that if i want to explain everything


9009
10:39:55,120 --> 10:39:58,880
about git we could have a course that is already


9010
10:39:58,880 --> 10:40:04,560
30 hours just talking about git so just know that there's constraints for


9011
10:40:04,560 --> 10:40:09,120
on me to explain like the absolute basics of get to you in order for us to


9012
10:40:09,120 --> 10:40:13,840
be able to use git in this course for this particular use case so i'm gonna


9013
10:40:13,840 --> 10:40:19,040
just focus on those things okay so um now that you know how to commit i


9014
10:40:19,040 --> 10:40:21,756
think you're you're like very


9015
10:40:21,756 --> 10:40:24,160
you're in good


9016
10:40:24,160 --> 10:40:28,560
place to start learning more about git and the thing you may want to know so


9017
10:40:28,560 --> 10:40:32,800
which we're not going to use in our in this course


9018
10:40:32,800 --> 10:40:37,360
is branch using git and why you'll need them now


9019
10:40:37,360 --> 10:40:42,160
git is a is a piece of software that allows


9020
10:40:42,160 --> 10:40:48,080
groups of people work on the same piece of code without losing their changes now


9021
10:40:48,080 --> 10:40:52,000
if you're for instance from a design background if you're working with figma


9022
10:40:52,000 --> 10:40:57,116
if i go into the design file that you you've shared with me as an observer i


9023
10:40:57,116 --> 10:41:01,756
cannot make any changes so i can only observe you and i can just like export


9024
10:41:01,756 --> 10:41:06,720
assets uh or even if you're using um a zeppelin


9025
10:41:06,720 --> 10:41:10,560
it's the same thing you can so someone some designer sitting with sketch for


9026
10:41:10,560 --> 10:41:13,840
instance and then they're exporting the work into zeppelin and then you as an


9027
10:41:13,840 --> 10:41:16,720
observer you're you're exporting that information from


9028
10:41:16,720 --> 10:41:19,596
zeppelin but you can't make any changes to the


9029
10:41:19,596 --> 10:41:24,480
source however with git when you share your information for like your git


9030
10:41:24,480 --> 10:41:28,480
repository with someone else they can also make commits to it as you'll see


9031
10:41:28,480 --> 10:41:32,720
soon we're going to use github for that so


9032
10:41:32,720 --> 10:41:35,756
um then basically you need to


9033
10:41:35,756 --> 10:41:40,240
make sure that every person is identified correctly and then they have


9034
10:41:40,240 --> 10:41:44,880
for instance they that they have configured get in the


9035
10:41:44,880 --> 10:41:49,116
right way and sometimes i mean we're talking about branches so


9036
10:41:49,116 --> 10:41:53,680
sometimes these people don't want to affect what you are doing


9037
10:41:53,680 --> 10:41:58,800
in this main branch so just imagine and a branch is more like a


9038
10:41:58,800 --> 10:42:01,596
train line like your train is going there


9039
10:42:01,596 --> 10:42:06,320
and maybe some some places your friends want to visit a town in the city that


9040
10:42:06,320 --> 10:42:11,276
you hadn't planned so they get off the train they go on another train line and


9041
10:42:11,276 --> 10:42:14,880
at the end you will meet so at that point you can see that they branched out


9042
10:42:14,880 --> 10:42:18,880
into their own branch and that is like the concept of branches in git as well


9043
10:42:18,880 --> 10:42:21,840
so sometimes when you're working with other developers they may want to branch


9044
10:42:21,840 --> 10:42:27,200
out into their own branches on the same source code do some experiments and once


9045
10:42:27,200 --> 10:42:31,040
they figure out what they actually wanted to do maybe they will save their


9046
10:42:31,040 --> 10:42:35,596
own work into that branch and then they will bring it back to your branch at the


9047
10:42:35,596 --> 10:42:38,800
end you will meet at the train station and then they bring the results with


9048
10:42:38,800 --> 10:42:43,276
them and then you merge together so there's a lot of information about


9049
10:42:43,276 --> 10:42:47,276
branches how they work in kit but just know that


9050
10:42:47,276 --> 10:42:50,400
branches are kind of like train lines and right now you're on the main train


9051
10:42:50,400 --> 10:42:53,520
line going from your city to the destination


9052
10:42:53,520 --> 10:42:56,160
okay so


9053
10:42:56,160 --> 10:43:00,240
um but again there's time constraints on this course i can't explain everything


9054
10:43:00,240 --> 10:43:03,360
about git but if you're interested there's lots of great content available


9055
10:43:03,360 --> 10:43:06,800
on youtube that you can watch and i'm pretty sure that there's lots and lots


9056
10:43:06,800 --> 10:43:12,480
of tutorials online as well that you can go and read about as well


9057
10:43:13,680 --> 10:43:18,000
wow that was a lot of information okay um


9058
10:43:18,000 --> 10:43:23,360
let's now talk about what github is now


9059
10:43:23,360 --> 10:43:30,560
github is simply said a cloud service for storing your git repositories so


9060
10:43:30,560 --> 10:43:34,160
um right now this git repository is sitting


9061
10:43:34,160 --> 10:43:39,436
on my computer so even if if it is i'm committing my work i'm saving my work


9062
10:43:39,436 --> 10:43:44,240
there's still no uh traceability from the outside


9063
10:43:44,240 --> 10:43:47,360
world so no one else is allowed to see this code right now it's sitting right


9064
10:43:47,360 --> 10:43:51,916
on my computer and for that if i want to share this code with other people and


9065
10:43:51,916 --> 10:43:56,880
potentially allow them not to read only but also to be able to commit and


9066
10:43:56,880 --> 10:44:01,916
collaborate with me in the source code then i would be able to share that on a


9067
10:44:01,916 --> 10:44:06,080
cloud service such as github github


9068
10:44:06,080 --> 10:44:10,240
has the word git in its name but it's not the same thing as git so git is a


9069
10:44:10,240 --> 10:44:14,640
software that actually manages all your commands and etc but github is the cloud


9070
10:44:14,640 --> 10:44:19,276
service that holds on these repositories for you


9071
10:44:19,276 --> 10:44:21,756
so if you don't have a github account i'm


9072
10:44:21,756 --> 10:44:24,720
going to help you do that right now so


9073
10:44:24,720 --> 10:44:28,960
let me close actually no i'm not going to close i'm going to minimize this


9074
10:44:28,960 --> 10:44:34,560
and minimize perhaps um yeah let's close this one i don't think


9075
10:44:34,560 --> 10:44:40,160
we're gonna need it so i'm gonna bring up a window here


9076
10:44:40,160 --> 10:44:45,040
and i'm gonna go here and look at this


9077
10:44:45,040 --> 10:44:48,880
website github.com all right so


9078
10:44:48,880 --> 10:44:54,560
what we need here is that for you to create a github account and to do that


9079
10:44:54,560 --> 10:44:59,680
you'll need to go to this website that i will provide for you


9080
10:44:59,680 --> 10:45:06,160
right there github.com sign up okay so i'm gonna if i bring up um


9081
10:45:06,160 --> 10:45:11,436
a browsing window here and say sign up you will see that yeah it won't know


9082
10:45:11,436 --> 10:45:15,680
that i'm signed in already with my other account and it will ask me to start


9083
10:45:15,680 --> 10:45:20,080
signing up right here okay so this is like the main window for the


9084
10:45:20,080 --> 10:45:23,916
sign up of github and this they've done it a little bit comically it kind of


9085
10:45:23,916 --> 10:45:27,596
like a star wars kind of theme i don't know what you want to call it but


9086
10:45:27,596 --> 10:45:32,240
here you will go through a few steps in order to create a github account okay


9087
10:45:32,240 --> 10:45:34,640
so i'm not going to do that simply because


9088
10:45:34,640 --> 10:45:37,840
i've already done that but in your case we'll just need to go


9089
10:45:37,840 --> 10:45:42,160
through this provide your email choose a good secure password for your email for


9090
10:45:42,160 --> 10:45:49,116
your github account and then at the end you will have a simple github account


9091
10:45:49,116 --> 10:45:54,240
okay as i already have


9092
10:45:54,240 --> 10:45:56,320
so uh


9093
10:45:56,320 --> 10:46:01,916
we've talked about already setting up git in the terminal so i'm not gonna


9094
10:46:01,916 --> 10:46:06,000
talk about that i'm just gonna maybe move this


9095
10:46:06,080 --> 10:46:13,436
um a little bit up all right now after you've set up github on your


9096
10:46:13,436 --> 10:46:18,800
uh basically after you set up a github account


9097
10:46:18,880 --> 10:46:23,680
you will need to set up something called ssh keys now


9098
10:46:23,680 --> 10:46:27,756
this is a little bit technical but


9099
10:46:28,800 --> 10:46:32,560
and it is nothing that you can jump over it's not like you can actually commit


9100
10:46:32,560 --> 10:46:36,320
your work without setting up ssh keys on your computer you can always go to


9101
10:46:36,320 --> 10:46:40,560
github and actually commit your work right on github itself like you can


9102
10:46:40,560 --> 10:46:44,560
write some text and then change that


9103
10:46:44,560 --> 10:46:49,040
text right in the github interface like the web interface so


9104
10:46:49,040 --> 10:46:52,800
then they will do all of that work for you because they will commit it from


9105
10:46:52,800 --> 10:46:57,840
kind of like their key their own ssh keys i believe but if you on your


9106
10:46:57,840 --> 10:47:02,240
computer want to be able to commit your work from your


9107
10:47:02,240 --> 10:47:06,400
hard disk or your ssc or whatever into github you will need something called


9108
10:47:06,400 --> 10:47:10,000
ssh key ssh keys are


9109
10:47:10,080 --> 10:47:16,480
cr crypto cryptograph crypt how should i say it


9110
10:47:16,480 --> 10:47:20,800
is cryptographically even uh let's see crypt


9111
10:47:20,800 --> 10:47:24,240
cryptographic no crypt


9112
10:47:24,240 --> 10:47:30,560
yeah cryptographically i don't know yeah cryptographically signed


9113
10:47:30,560 --> 10:47:34,160
these are cryptographically signed pieces of


9114
10:47:34,160 --> 10:47:38,080
signature um that


9115
10:47:38,080 --> 10:47:41,680
will just kind of like private keys that we


9116
10:47:41,680 --> 10:47:45,360
worked with when we worked with keychain in one of the previous chapters


9117
10:47:45,360 --> 10:47:50,560
they allow you to identify yourself as a person or as a committer


9118
10:47:50,560 --> 10:47:54,080
so i think that does make sense


9119
10:47:54,080 --> 10:47:57,360
so uh i apologize again for the hiccup of


9120
10:47:57,360 --> 10:48:00,880
cryptographically it's just because i'm not a native english speaker so you


9121
10:48:00,880 --> 10:48:04,800
should be expecting these hiccups every now and then at least


9122
10:48:04,800 --> 10:48:09,756
so an ssh key is a piece of key that is a


9123
10:48:09,756 --> 10:48:14,880
signature that you as a developer or a committer of code create on your


9124
10:48:14,880 --> 10:48:18,480
computer and whenever you make a commit and you


9125
10:48:18,480 --> 10:48:22,240
wanna send that commit then to


9126
10:48:22,240 --> 10:48:26,400
github then github knows who you are


9127
10:48:26,400 --> 10:48:30,000
okay so it says okay you are


9128
10:48:30,000 --> 10:48:35,360
person xyz and you're trying to push your changes into this repository i'm


9129
10:48:35,360 --> 10:48:37,916
just gonna make sure you have access to everything okay


9130
10:48:37,916 --> 10:48:43,840
so you need your ssh key set up so


9131
10:48:44,800 --> 10:48:51,756
what we need to do is to go to github and i'm going to bring up a web browser


9132
10:48:52,240 --> 10:48:58,400
for you to understand how to set up your ssh keys so let's say github sets up ssh


9133
10:48:58,400 --> 10:49:02,880
keys and you can see adding a new ssh key to


9134
10:49:02,880 --> 10:49:09,116
your github account so there is a very very comprehensive guide here on how to


9135
10:49:09,116 --> 10:49:12,480
set up your ssh keys so you can see that it says


9136
10:49:12,480 --> 10:49:16,080
um let's see


9137
10:49:16,080 --> 10:49:19,916
generating a new ssh key and adding it to the ssh agent so this is where you


9138
10:49:19,916 --> 10:49:24,480
want to go okay so after searching for github as a setup


9139
10:49:24,480 --> 10:49:28,800
ssh keys make sure that you at the end go to this link generating a new ssh key


9140
10:49:28,800 --> 10:49:34,320
and adding it to the ssh ssh agent read through this there is very


9141
10:49:34,320 --> 10:49:38,080
comprehensive guide there are only a few commands that you have to issue in the


9142
10:49:38,080 --> 10:49:42,560
terminal so do them precisely as as it is specified


9143
10:49:42,560 --> 10:49:46,960
here okay so after you've done that then what


9144
10:49:46,960 --> 10:49:52,320
you'll need to do is to add that ssh key i believe into your


9145
10:49:52,320 --> 10:49:56,640
github account you see as the link provides here adding a new ssh key to


9146
10:49:56,640 --> 10:50:01,276
your github account so you can see here then it says okay do


9147
10:50:01,276 --> 10:50:06,240
this command and then go to your github account settings and then go to search


9148
10:50:06,240 --> 10:50:11,756
and gpg keys and then say new ssh key and then add that information in here


9149
10:50:11,756 --> 10:50:16,640
okay and then press save and that's it then you have your ssh key


9150
10:50:16,640 --> 10:50:21,916
all set up and done so these are the two things you'll need to do create an ssh


9151
10:50:21,916 --> 10:50:25,916
key and then upload the public key into github


9152
10:50:25,916 --> 10:50:30,480
and again because of constraints on this course i can't explain this


9153
10:50:30,480 --> 10:50:34,080
like line by line to i'm just providing you the information that you need to


9154
10:50:34,080 --> 10:50:38,960
know and i kind of expect you to do these things on your own okay


9155
10:50:38,960 --> 10:50:41,276
um


9156
10:50:41,840 --> 10:50:45,916
so that is that now


9157
10:50:45,916 --> 10:50:52,320
we also need to talk about um gpg keys


9158
10:50:52,720 --> 10:50:56,560
uh and let's actually i think gpg was new


9159
10:50:56,560 --> 10:51:02,040
privacy what was jpg


9160
10:51:02,160 --> 10:51:05,756
privacy guard so is a piece of software that you


9161
10:51:05,756 --> 10:51:09,520
download on your computer you can see is a free software replacement for


9162
10:51:09,520 --> 10:51:13,840
semantics pgp cryptographic software suit


9163
10:51:13,840 --> 10:51:19,680
uh it is compliant with rfc blah blah all you need to know about gpg and how


9164
10:51:19,680 --> 10:51:22,320
we're going to use it in this course is that


9165
10:51:22,320 --> 10:51:25,116
um where you


9166
10:51:25,116 --> 10:51:29,840
have your i mean we talked about ssh keys where you have your ssh keys and


9167
10:51:29,840 --> 10:51:33,840
then you and i know this is a little bit geeky but that's kind of like the nature


9168
10:51:33,840 --> 10:51:36,800
of this thing anyways and when you


9169
10:51:36,800 --> 10:51:41,520
sign your commits with your ssh key with your private key and then you push your


9170
10:51:41,520 --> 10:51:46,000
changes to github and github just verifies okay this is a


9171
10:51:46,000 --> 10:51:51,040
this commit is coming from someone who has access to this repository


9172
10:51:51,040 --> 10:51:55,756
when you create your gpg keys and then you sign your commits


9173
10:51:55,756 --> 10:52:01,840
with the gpg keys then that actually verifies that you are


9174
10:52:01,840 --> 10:52:06,720
who you say you are so a lot of software developers are still continuing with ssh


9175
10:52:06,720 --> 10:52:09,520
keys and to be honest with you that's not good enough


9176
10:52:09,520 --> 10:52:10,960
um [Music]


9177
10:52:10,960 --> 10:52:14,640
i mean well it it depends kind of on your


9178
10:52:14,640 --> 10:52:18,400
opinion but in my opinion is not good enough because anybody getting a hold of


9179
10:52:18,400 --> 10:52:22,720
your ssh keys can literally just do anything they want with your commits and


9180
10:52:22,720 --> 10:52:28,560
change anything they want but um with the gpg keys you'll ensure that you


9181
10:52:28,560 --> 10:52:32,480
are who you are and anyone else even if they have hold of like your ssh keys


9182
10:52:32,480 --> 10:52:35,680
their their commits won't be signed as you so


9183
10:52:35,680 --> 10:52:38,000
um


9184
10:52:38,320 --> 10:52:41,756
so let's now talk a little bit and we're going to take some items here and just


9185
10:52:41,756 --> 10:52:46,320
make sure that we've talked about them about ssh keys


9186
10:52:46,320 --> 10:52:50,640
now we're going to talk about gpgm where you actually need it so there's a little


9187
10:52:50,640 --> 10:52:54,240
link here i'm going to open that link here so we


9188
10:52:54,240 --> 10:52:59,200
can both see it and it says git is cryptographically


9189
10:52:59,200 --> 10:53:01,756
uh still i this word is a little bit


9190
10:53:01,756 --> 10:53:04,640
different different for me to say cryptographically secure but it's not


9191
10:53:04,640 --> 10:53:09,116
foolproof if you're taking work from others on the internet and want to


9192
10:53:09,116 --> 10:53:12,960
verify that commits are actually from a trusted source git has a few ways to


9193
10:53:12,960 --> 10:53:18,400
sign and verify work using gpg okay so


9194
10:53:18,400 --> 10:53:22,480
uh so what you'll need to do is uh you need


9195
10:53:22,480 --> 10:53:26,400
to set up jpg basically on your computer and i and i believe


9196
10:53:26,400 --> 10:53:32,560
um if you just say gpg install mac or gpg install windows or whatever then you


9197
10:53:32,560 --> 10:53:37,116
can come to for instance for i'm using jpg tools on mac


9198
10:53:37,116 --> 10:53:42,320
and for you can actually install gpg for various operating systems for instance


9199
10:53:42,320 --> 10:53:47,756
windows or linux so just google gpg and then your operating system is so for


9200
10:53:47,756 --> 10:53:52,720
instance gpg i can smell as spell


9201
10:53:52,720 --> 10:53:57,360
if i can smell gpg and download noon pg here and you


9202
10:53:57,360 --> 10:54:01,116
see so this is like the download tools for


9203
10:54:01,116 --> 10:54:05,360
windows i believe let's see and you can see here you could use


9204
10:54:05,360 --> 10:54:09,276
gpg for win full featured windows version of you


9205
10:54:09,276 --> 10:54:13,596
know pg so all i'm trying to say is just to


9206
10:54:13,596 --> 10:54:17,276
download the piece of software called gpg for your operating system so whether


9207
10:54:17,276 --> 10:54:22,160
it's gpg for win or gpg tools for mac os or if it's like for


9208
10:54:22,160 --> 10:54:26,080
debian uh canoe pc is part of debian okay so it's


9209
10:54:26,080 --> 10:54:29,116
already maybe built in so you don't have to do anything for


9210
10:54:29,116 --> 10:54:32,640
your debian based linux operating systems


9211
10:54:32,640 --> 10:54:35,840
all right so after doing that then you will need


9212
10:54:35,840 --> 10:54:40,080
to set up gpg for github and i'll provide a


9213
10:54:40,080 --> 10:54:44,080
link here for you that you can read about says managing commit


9214
10:54:44,080 --> 10:54:50,400
signature verification and the link i'll open it here


9215
10:54:50,400 --> 10:54:54,720
so you can see how it looks like and you can see here


9216
10:54:54,720 --> 10:54:59,200
generating a gpg key so you can first go there and it will help you through the


9217
10:54:59,200 --> 10:55:03,276
various steps that you need to take in order to create your gpg keys it's very


9218
10:55:03,276 --> 10:55:08,480
easy it's just a few lines of uh code or a few lines of text that you


9219
10:55:08,480 --> 10:55:13,040
have to issue in your terminal in order to create your gpg keys okay


9220
10:55:13,040 --> 10:55:17,916
so after you've done that and you need to make sure to go into this


9221
10:55:17,916 --> 10:55:21,276
section add a new gpg key we've done that


9222
10:55:21,276 --> 10:55:25,916
and then you go here to your settings you can see ssh and gpg keys and then


9223
10:55:25,916 --> 10:55:30,160
the same way you added your ssh keys you'll need to add the gpg key in your


9224
10:55:30,160 --> 10:55:34,240
github account okay and after you've done that the


9225
10:55:34,240 --> 10:55:38,560
difference between sshk and a gpg key is kind of like to you need to tell get


9226
10:55:38,560 --> 10:55:42,720
that you have a gpg key and then it needs to sign your commits with your gpg


9227
10:55:42,720 --> 10:55:45,596
key okay and that's where you go into this tell


9228
10:55:45,596 --> 10:55:49,916
get your assigning key and you need to just follow these steps to tell get


9229
10:55:49,916 --> 10:55:55,200
using the git config global user signing key you


9230
10:55:55,200 --> 10:55:59,116
see here okay so just follow these steps to be honest


9231
10:55:59,116 --> 10:56:02,400
with you i don't think you need to associate email with gpg really right


9232
10:56:02,400 --> 10:56:07,840
now but if you want to you can do that so i'm kind of like assuming that you've


9233
10:56:07,840 --> 10:56:11,520
already done that for


9234
10:56:11,520 --> 10:56:13,840
um for your computer and that you've


9235
10:56:13,840 --> 10:56:17,916
created the ssh key you kind of know a little bit about git you have a github


9236
10:56:17,916 --> 10:56:24,400
account now you have created your pgp keys and then you have told git about


9237
10:56:24,400 --> 10:56:30,800
your pdp key so your signature comments are actually signed okay


9238
10:56:30,880 --> 10:56:35,916
so the next thing we need to do is to now can you see we've been working on


9239
10:56:35,916 --> 10:56:39,680
our um notes application my notes i think it


9240
10:56:39,680 --> 10:56:42,960
was the um


9241
10:56:42,960 --> 10:56:47,436
the project was called my notes here if you remember


9242
10:56:47,436 --> 10:56:50,800
and um if i say git status here you will see


9243
10:56:50,800 --> 10:56:54,080
that it says not a git repository and that's kind of a little bit sad because


9244
10:56:54,080 --> 10:56:58,160
we've written quite a lot of code but we haven't really backed it up in github


9245
10:56:58,160 --> 10:57:00,000
okay so


9246
10:57:00,000 --> 10:57:03,916
what we need to do now is to go and create a github repository remember that


9247
10:57:03,916 --> 10:57:08,160
bucket we need to create one of those buckets for our code


9248
10:57:08,320 --> 10:57:12,880
so let's go i'm going to create a safari window here or


9249
10:57:12,880 --> 10:57:16,480
chrome or brave firefox whatever you want to use and i'm


9250
10:57:16,480 --> 10:57:20,800
going to go to github.com and i'm going to go into repositories


9251
10:57:20,800 --> 10:57:23,360
here as you can see and i'm going to say new


9252
10:57:23,360 --> 10:57:27,436
and i'm going to give it the name my notes all right i'm going to increase


9253
10:57:27,436 --> 10:57:30,560
the size of the window so you see it better for the description i'm going to


9254
10:57:30,560 --> 10:57:35,436
say my notes flutter application and you can see here that tells you it


9255
10:57:35,436 --> 10:57:39,116
asks you if you want to create a public public repository or a private


9256
10:57:39,116 --> 10:57:42,880
repository and the difference here is that if you create a public repository


9257
10:57:42,880 --> 10:57:47,520
everyone can by default read the content that you're creating


9258
10:57:47,520 --> 10:57:51,520
usually if if you're if you're not 100 sure what


9259
10:57:51,520 --> 10:57:54,960
public means create a private repository because


9260
10:57:54,960 --> 10:57:58,160
usually there's lots of information that you may want to create like a private


9261
10:57:58,160 --> 10:58:02,720
information with some api keys so you want to probably create a private


9262
10:58:02,720 --> 10:58:05,756
repository unless you know exactly what you're doing or if you want to for


9263
10:58:05,756 --> 10:58:09,276
instance um contribute to open source projects and


9264
10:58:09,276 --> 10:58:12,160
create an open source project from an absolute beginning then you go and


9265
10:58:12,160 --> 10:58:18,240
create a public but you can always make your private repository public later


9266
10:58:18,240 --> 10:58:22,400
and you can always make your public repository private later but that


9267
10:58:22,400 --> 10:58:27,040
doesn't happen that often so it's probably a good idea to create a pr


9268
10:58:27,040 --> 10:58:31,360
private in the beginning okay then in here add a readme file a readme


9269
10:58:31,360 --> 10:58:35,596
file is pretty much just a file that will be displayed to whoever goes to


9270
10:58:35,596 --> 10:58:41,116
your github repository and looks at just the index file of the github repository


9271
10:58:41,116 --> 10:58:45,040
so you can place some information in there but it's usually a good idea to do


9272
10:58:45,040 --> 10:58:49,116
that you don't have to but i suggest that you actually do that and then say


9273
10:58:49,116 --> 10:58:53,116
excuse me and then say add git ignore and we


9274
10:58:53,116 --> 10:58:56,800
haven't talked about git ignore before but what get ignore is that its name


9275
10:58:56,800 --> 10:59:02,720
indicates is a file that dictates to get on your computer


9276
10:59:02,720 --> 10:59:08,320
or on the computer of whoever has cloned your repository about what files should


9277
10:59:08,320 --> 10:59:12,560
not be committed to your git repository so


9278
10:59:12,560 --> 10:59:15,596
usually it's a good idea to have a get ignore file and in here for the template


9279
10:59:15,596 --> 10:59:19,276
just choose dart okay dart


9280
10:59:19,276 --> 10:59:22,160
okay and in here you don't have to choose


9281
10:59:22,160 --> 10:59:24,960
license right now because you're probably not going to share this code


9282
10:59:24,960 --> 10:59:29,276
with anybody as it is right now but you can always add a license later okay


9283
10:59:29,276 --> 10:59:32,720
so i created a private repository some name


9284
10:59:32,720 --> 10:59:38,000
uh which is my notes sorry yeah um i actually feel no for the name of the


9285
10:59:38,000 --> 10:59:41,040
repository i'm going to change it just to lower in case i have no space it's


9286
10:59:41,040 --> 10:59:44,640
just my notes okay and then i'm going to say create


9287
10:59:44,640 --> 10:59:50,320
repository boom so as you've done that now you will see


9288
10:59:50,320 --> 10:59:54,800
that you have a repository here and


9289
10:59:54,800 --> 11:00:00,480
i mean there's nothing really in it okay so


9290
11:00:00,480 --> 11:00:04,560
what we need to do now is to you see we have


9291
11:00:04,560 --> 11:00:08,080
our code here and then we have a repository how do we put this code in


9292
11:00:08,080 --> 11:00:11,520
there you may think okay i'm going to upload all the files by hand or like go


9293
11:00:11,520 --> 11:00:14,880
and drag files here you could kind of actually do that but


9294
11:00:14,880 --> 11:00:19,116
it's not a good idea and so what you need to do is just tell


9295
11:00:19,116 --> 11:00:22,480
git now all of a sudden that hey this


9296
11:00:22,480 --> 11:00:27,680
folder here is indeed a git repository remember from what i said before so you


9297
11:00:27,680 --> 11:00:32,400
need to say git init i'm going to bring up the caption so you


9298
11:00:32,400 --> 11:00:36,400
know what i'm talking about git init and then you say good and it dot okay all of


9299
11:00:36,400 --> 11:00:41,360
a sudden this became a repository so if you do get status you see


9300
11:00:41,360 --> 11:00:44,560
let me see if i can actually change the arrangement on the screen so you'll see


9301
11:00:44,560 --> 11:00:48,000
more of the screen real estate


9302
11:00:48,000 --> 11:00:52,240
and perhaps i could even do something like this


9303
11:00:52,240 --> 11:00:55,520
is that a better idea than just doing this


9304
11:00:55,520 --> 11:01:00,320
no probably not so this is better uh okay this is a little bit better so


9305
11:01:00,320 --> 11:01:03,916
you see now it says now that you're a git repository i can see you have a lot


9306
11:01:03,916 --> 11:01:07,436
of files that you haven't really committed and what we could do then we


9307
11:01:07,436 --> 11:01:10,000
could say git add all


9308
11:01:10,000 --> 11:01:15,276
add all these files and folders to my git repository and then i'm going to say


9309
11:01:15,276 --> 11:01:19,756
git commit with the m as a message my initial


9310
11:01:19,756 --> 11:01:24,560
commits okay see now if i say git status it says


9311
11:01:24,560 --> 11:01:28,720
there's nothing to commit i want to kind of push these changes i


9312
11:01:28,720 --> 11:01:32,000
want to send these changes together but how do i do that because if i say git


9313
11:01:32,000 --> 11:01:35,596
push see it says oh i don't know where to


9314
11:01:35,596 --> 11:01:38,240
push these things to so


9315
11:01:38,240 --> 11:01:42,720
what you need to do now is to go to your github repository and then go to code


9316
11:01:42,720 --> 11:01:49,840
and then grab this guy from here you see to the code to ssh


9317
11:01:49,840 --> 11:01:54,880
and then copy this and then go in here and do what it says here git remote ad


9318
11:01:54,880 --> 11:02:01,520
so i'm going to say git remote add origin it's the name of our remote for


9319
11:02:01,520 --> 11:02:07,276
instance and now i'm going to add that if i say git push


9320
11:02:07,276 --> 11:02:11,596
it says okay now that you've done that you still need to tell me that this main


9321
11:02:11,596 --> 11:02:15,916
branch which is on your local computer is actually mapping to the main branch


9322
11:02:15,916 --> 11:02:20,800
on github which is right here so you see here's the main branch and


9323
11:02:20,800 --> 11:02:24,480
we're also on the main branch so you don't have to do this complicated


9324
11:02:24,480 --> 11:02:28,880
code you could actually say git push you origin head which to me is a little bit


9325
11:02:28,880 --> 11:02:32,720
cleaner and that will do the same thing for you


9326
11:02:32,720 --> 11:02:35,596
updates were rejected because the remote contains work that you do not have


9327
11:02:35,596 --> 11:02:39,520
locally this is usually because it's actually great that we got this


9328
11:02:39,520 --> 11:02:44,160
i had a plan for this to happen but what is happening here is that you see if i


9329
11:02:44,160 --> 11:02:48,000
go into this github repository


9330
11:02:48,000 --> 11:02:52,240
and then i can click on this initial commit here


9331
11:02:52,240 --> 11:02:56,560
you will see that when i created the repository and we chose all those you


9332
11:02:56,560 --> 11:03:02,480
know readme file and the and the git ignore file these are files


9333
11:03:02,480 --> 11:03:08,160
that are literally created on github using github by github and placed inside


9334
11:03:08,160 --> 11:03:11,756
this repository so that is a commit you see it has its own


9335
11:03:11,756 --> 11:03:16,000
and it has its own commit id


9336
11:03:16,000 --> 11:03:19,116
now that commit is sitting there in that


9337
11:03:19,116 --> 11:03:25,436
bucket over here so there's a commit in its own bucket okay now we have our own


9338
11:03:25,436 --> 11:03:30,320
computer here with its own bucket and its own commit but all of a sudden


9339
11:03:30,320 --> 11:03:34,160
we're telling this using that git add command that i said


9340
11:03:34,160 --> 11:03:37,436
what we're doing is that we're we're making a connection between this local


9341
11:03:37,436 --> 11:03:40,800
repository and the server repository and saying that any changes have happened


9342
11:03:40,800 --> 11:03:44,560
here we want to push them over here and when we said git push


9343
11:03:44,560 --> 11:03:49,200
these changes are rejected because it says oh you're you have changes here


9344
11:03:49,200 --> 11:03:53,040
and commits and you're putting them in here


9345
11:03:53,040 --> 11:03:57,116
but your changes your repository here didn't


9346
11:03:57,116 --> 11:04:01,276
contain the changes that were already there so it's saying that there's a


9347
11:04:01,276 --> 11:04:04,640
conflict i don't know what you're trying to do are you trying to like replace the


9348
11:04:04,640 --> 11:04:08,000
contents that were over there with your stuff


9349
11:04:08,000 --> 11:04:11,680
and to be honest with you that could actually be the case


9350
11:04:11,680 --> 11:04:15,596
because you see what we did here we have a git


9351
11:04:15,596 --> 11:04:20,480
ignore file here that was created for us by github and also we have our readme


9352
11:04:20,480 --> 11:04:23,840
file which we probably actually don't need to be honest with you maybe we


9353
11:04:23,840 --> 11:04:27,200
don't need that and also they get ignored but if you looked at the changes


9354
11:04:27,200 --> 11:04:30,800
that were committed committing here if i say


9355
11:04:30,800 --> 11:04:32,960
um lsla


9356
11:04:32,960 --> 11:04:37,520
you will see there already is a file here


9357
11:04:37,520 --> 11:04:42,000
it was called get ignore here you see


9358
11:04:42,000 --> 11:04:46,400
which was created by flutter when we created our project flutter already


9359
11:04:46,400 --> 11:04:51,680
added that so let's say cat and with ignore to see its contents and


9360
11:04:51,680 --> 11:04:54,880
you'll see there's lots of stuff that fluffer has already created for us that


9361
11:04:54,880 --> 11:04:59,596
says these things need to be ignored so what i'm trying to say is that all these


9362
11:04:59,596 --> 11:05:02,880
things that exist over here we don't need them really so what you could do is


9363
11:05:02,880 --> 11:05:05,840
say git push


9364
11:05:06,560 --> 11:05:09,916
f and i believe that force pushes a bit


9365
11:05:09,916 --> 11:05:13,596
push u origin


9366
11:05:13,596 --> 11:05:17,360
head f which force pushes everything


9367
11:05:17,360 --> 11:05:20,480
okay so i'm going to clear that now and i'm


9368
11:05:20,480 --> 11:05:25,040
going to go to my notes repository and all of a sudden you see that


9369
11:05:25,040 --> 11:05:29,596
here is you see and oh we already had a readme file as


9370
11:05:29,596 --> 11:05:33,520
well so flutter has created a readme file that's that's amazing i didn't know


9371
11:05:33,520 --> 11:05:36,080
this so i learned something that's pretty cool


9372
11:05:36,080 --> 11:05:41,530
all right there we go so now we have our code basically pushed


9373
11:05:41,530 --> 11:05:46,560
[Music] um so that is for our commit


9374
11:05:46,560 --> 11:05:50,400
that is already placed there


9375
11:05:50,400 --> 11:05:55,520
i'm gonna just take some items here that i've talked about them


9376
11:05:55,520 --> 11:05:59,276
um great


9377
11:05:59,276 --> 11:06:03,756
so that is already done as well pushing so now you have your changes over there


9378
11:06:03,756 --> 11:06:08,480
okay on github now what we need to talk about is also


9379
11:06:08,480 --> 11:06:12,720
tagging in this course i'm going to use a


9380
11:06:12,720 --> 11:06:17,756
feature in git called tags a tag is just as its name indicates it


9381
11:06:17,756 --> 11:06:22,000
kind of is a label so as you're as you become better and


9382
11:06:22,000 --> 11:06:26,720
better at software development you'll understand that some places sometimes


9383
11:06:26,720 --> 11:06:30,800
during your journey as a software developer the code that you wrote means


9384
11:06:30,800 --> 11:06:33,596
a special thing to you for instance you may say


9385
11:06:33,596 --> 11:06:39,840
after a whole weekend of work i could finally deliver like the verification


9386
11:06:39,840 --> 11:06:45,116
screen to my users and that in itself in its essence essence has a special


9387
11:06:45,116 --> 11:06:50,160
importance is it has a special meaning and you may want to tag it and by


9388
11:06:50,160 --> 11:06:54,720
tagging it it means that i'm just going to give a special name to this so in the


9389
11:06:54,720 --> 11:06:58,720
future if i want to go back to that point in time i don't go i don't have to


9390
11:06:58,720 --> 11:07:03,916
go into my be it log and look at all my commits and see which one was that


9391
11:07:03,916 --> 11:07:08,960
special commit but i also want to like give it a special name okay and that


9392
11:07:08,960 --> 11:07:16,640
name is a an annotated tag or a tag that has a message applied to it all right


9393
11:07:16,640 --> 11:07:20,960
so that is in its essence what tagging is


9394
11:07:20,960 --> 11:07:29,360
so you're giving a name to your um to your uh work basically


9395
11:07:29,360 --> 11:07:35,116
so what we need to do now here is to tag our work as step one we've done a lot of


9396
11:07:35,116 --> 11:07:39,116
steps up to this point but none of them has been so


9397
11:07:39,116 --> 11:07:43,680
like important that we actually have to commit yet but i think this is important


9398
11:07:43,680 --> 11:07:47,116
enough now we have a registry screen and a login screen so that we can tag it so


9399
11:07:47,116 --> 11:07:51,916
the way to create it to create an annotated tag and git you will literally


9400
11:07:51,916 --> 11:07:56,880
just say git tag okay so


9401
11:07:56,880 --> 11:08:02,080
let's go in here and say git tag and give it the name of step one


9402
11:08:02,080 --> 11:08:06,720
all right now you can see if i want to push these tags to the back end sorry to


9403
11:08:06,720 --> 11:08:10,480
github because those tags don't exist right here right now


9404
11:08:10,480 --> 11:08:14,880
and what we could do is to say git push tags


9405
11:08:14,880 --> 11:08:19,436
dash tags and this pushes all those tags to the server


9406
11:08:19,436 --> 11:08:22,640
which is github in that case and to be honest with you i don't really


9407
11:08:22,640 --> 11:08:26,080
know here one tag i can see all of a sudden here


9408
11:08:26,080 --> 11:08:33,520
tags and step one is created there okay so what we could do also is that's after


9409
11:08:33,520 --> 11:08:38,960
we have our gpg keys all set up we also can confirm that our work is truly


9410
11:08:38,960 --> 11:08:42,160
signed and if i go to my notes here and then


9411
11:08:42,160 --> 11:08:45,276
look at this commits um


9412
11:08:45,276 --> 11:08:48,400
let's see if you can see that information


9413
11:08:48,400 --> 11:08:52,320
somewhere here can we see all our commits


9414
11:08:52,320 --> 11:08:57,916
um somehow here if you go to this timeline


9415
11:08:57,916 --> 11:09:01,200
oh it's not showing me that information right now


9416
11:09:01,200 --> 11:09:05,276
yeah but anyways you could you could have a look at whether your commits are


9417
11:09:05,276 --> 11:09:08,640
signed by a little badge which i can't see right now so maybe there's actually


9418
11:09:08,640 --> 11:09:12,800
something wrong with my pgp key so if you've done all the pgp installation


9419
11:09:12,800 --> 11:09:15,916
correctly on our computer then you should see all your commits being signed


9420
11:09:15,916 --> 11:09:19,596
and actually displayed here but with some sort of a badge but i can't


9421
11:09:19,596 --> 11:09:23,680
unfortunately see that maybe github has changed that interface so that we can't


9422
11:09:23,680 --> 11:09:28,720
see our verified and badge for our jpg keys yet so


9423
11:09:28,720 --> 11:09:33,520
all right we talked a lot about gits in this chapter


9424
11:09:33,520 --> 11:09:38,160
um so i think that's actually quite enough for this chapter and git we've


9425
11:09:38,160 --> 11:09:43,276
talked almost 15 minutes about get to be honest with you and that's sufficient


9426
11:09:43,276 --> 11:09:47,276
now that we've got get set up what we're going to use it for in the upcoming


9427
11:09:47,276 --> 11:09:51,200
chapters is whenever we do something significant that needs to be saved we


9428
11:09:51,200 --> 11:09:56,240
are going to commit that change and also tag it and send both our commits and our


9429
11:09:56,240 --> 11:09:59,680
tag to github so that is stored securely in


9430
11:09:59,680 --> 11:10:03,680
some sort of a cloud storage basically so


9431
11:10:03,680 --> 11:10:06,800
that's how we're going to use git and github in this course


9432
11:10:06,800 --> 11:10:11,040
and i thought of it as so important for every software developer to know that i


9433
11:10:11,040 --> 11:10:14,000
thought if anybody is watching this course who is not a software engineer in


9434
11:10:14,000 --> 11:10:16,800
front before then you definitely need to know about


9435
11:10:16,800 --> 11:10:21,680
git and github before you can continue so what we're going to do in the next


9436
11:10:21,680 --> 11:10:26,240
chapter then is to talk about email verification we've done login register


9437
11:10:26,240 --> 11:10:29,916
screen is very simple but we haven't done the email verification yet and


9438
11:10:29,916 --> 11:10:34,320
that's exactly what we're going to do in the next chapter so i'll see you there


9439
11:10:34,320 --> 11:10:37,680
hello and welcome to chapter 16 of the swata course


9440
11:10:37,680 --> 11:10:41,756
in the previous chapters we've talked about the login and registration page


9441
11:10:41,756 --> 11:10:46,000
and also we took a little detour to talk about


9442
11:10:46,000 --> 11:10:49,520
git and github so now you should have all those things


9443
11:10:49,520 --> 11:10:53,116
set up so you should also have some sort of an emulator simulator or real device


9444
11:10:53,116 --> 11:10:57,596
setup so we're testing our application right from visual studio code or android


9445
11:10:57,596 --> 11:11:02,160
studio or sublime whatever text everyone on those devices


9446
11:11:02,160 --> 11:11:05,916
um in this chapter we're going to as the caption says here we're going to talk


9447
11:11:05,916 --> 11:11:09,680
about email verification and um


9448
11:11:09,680 --> 11:11:12,560
i talked about this in the in


9449
11:11:12,560 --> 11:11:16,160
one of the previous chapters why we need email verification


9450
11:11:16,160 --> 11:11:20,000
but the main reason for that is as you can see in the caption here says people


9451
11:11:20,000 --> 11:11:24,960
can sign up with emails they don't own and that is a little bit of a problem


9452
11:11:24,960 --> 11:11:27,756
and um


9453
11:11:27,756 --> 11:11:32,640
the reason why it is a problem is that you might


9454
11:11:32,640 --> 11:11:37,840
get into a situation actually i can see here my wi-fi is kind of tripping


9455
11:11:37,840 --> 11:11:42,160
okay it's connected now sorry about that and


9456
11:11:42,160 --> 11:11:46,240
what could happen is if a user comes in to the application and starts your


9457
11:11:46,240 --> 11:11:49,916
flutter application on their phone or tablet and then they sign up with an


9458
11:11:49,916 --> 11:11:55,436
email that they don't own and then i as the rightful owner of that email address


9459
11:11:55,436 --> 11:11:58,640
come to and download the same application and try to register my email


9460
11:11:58,640 --> 11:12:02,400
and the applications as well this email address already exists


9461
11:12:02,400 --> 11:12:04,640
so


9462
11:12:04,720 --> 11:12:08,800
um so we have a problem here so what we need to make sure is that the p people


9463
11:12:08,800 --> 11:12:14,560
who register in an email can also verify that they own that email address okay


9464
11:12:14,560 --> 11:12:18,640
so let's take care of that in this chapter


9465
11:12:18,720 --> 11:12:22,640
gonna bring up visual studio code or you also bring up the


9466
11:12:22,640 --> 11:12:26,720
editor of your choice where you're um


9467
11:12:26,800 --> 11:12:30,400
the editor that you're comfortable with um


9468
11:12:30,400 --> 11:12:35,596
and i'm just gonna take in my notes that i've talked about that


9469
11:12:35,596 --> 11:12:41,040
so what we're gonna do here as the first step is to go to our main dart file here


9470
11:12:41,040 --> 11:12:47,040
right after home page and create a state full widget i believe


9471
11:12:47,040 --> 11:12:49,596
so i'm going to do that right now so


9472
11:12:49,596 --> 11:12:54,000
sd remember sdf stateful then we're going to call let me see


9473
11:12:54,000 --> 11:12:56,880
verify email view


9474
11:12:56,880 --> 11:13:03,200
all right and in here uh what we're gonna do


9475
11:13:03,200 --> 11:13:08,000
is just to return a simple scaffold so i'm just gonna say return scaffold for


9476
11:13:08,000 --> 11:13:11,436
now we're gonna get a cons error here so i'm just gonna


9477
11:13:11,436 --> 11:13:14,560
put the constant there


9478
11:13:14,960 --> 11:13:19,200
so um that's for our stateful widget


9479
11:13:19,200 --> 11:13:24,880
then what we're gonna do is um we are as you can see here as soon as we


9480
11:13:24,880 --> 11:13:30,880
see that um the email isn't verified here we just say you are sorry that it


9481
11:13:30,880 --> 11:13:34,240
is verified we say you are a verified user and if you're not verified we just


9482
11:13:34,240 --> 11:13:38,480
say you need to verify your email first but in both cases what we're doing is


9483
11:13:38,480 --> 11:13:43,200
that we're just returning a text widget that says done and it's displayed here


9484
11:13:43,200 --> 11:13:46,400
and so what we need to do here is


9485
11:13:46,400 --> 11:13:53,116
to if the user is verified in here we're going to say return this


9486
11:13:53,116 --> 11:14:00,000
otherwise what we need to do is to display this verify email view okay


9487
11:14:00,000 --> 11:14:03,200
but the way we need to do this right now and


9488
11:14:03,200 --> 11:14:06,160
we're actually going to fix this quite a lot as we go on but right now i just


9489
11:14:06,160 --> 11:14:11,200
want to show you how to push a view into the screen now pushing is a concept that


9490
11:14:11,200 --> 11:14:14,800
i believe came came into


9491
11:14:14,800 --> 11:14:20,000
like a widespread existence after ios and android became popular in the early


9492
11:14:20,000 --> 11:14:25,436
days of like 2006 2007 actually was 2007 i think


9493
11:14:25,436 --> 11:14:31,116
and pushing is where you have a screen and you're seeing that screen and then


9494
11:14:31,116 --> 11:14:34,640
you press a button or something and another screen just kind of pushes


9495
11:14:34,640 --> 11:14:37,680
itself on top of the existing screen okay


9496
11:14:37,680 --> 11:14:43,276
so what we need to do now is to if we see that well you haven't


9497
11:14:43,276 --> 11:14:47,360
verified your email you want to push this verify email view and a way to do


9498
11:14:47,360 --> 11:14:52,560
that in um flutter is with something called a navigator and


9499
11:14:52,560 --> 11:14:55,520
remember this is a little bit problematic the thing that we're gonna


9500
11:14:55,520 --> 11:14:59,436
do right now is actually gonna cause an error and i will explain all this but


9501
11:14:59,436 --> 11:15:05,520
for now let's just go go ahead and do this so we will fix things as we go on


9502
11:15:05,520 --> 11:15:07,200
okay so


9503
11:15:07,200 --> 11:15:10,800
right here that where we say you need to verify your email first and we can


9504
11:15:10,800 --> 11:15:15,840
actually see that in the console um here um oh you can't see it because it's


9505
11:15:15,840 --> 11:15:19,756
hidden by the caption but you can see now it says


9506
11:15:19,756 --> 11:15:26,080
you need to verify your email first so let's go ahead and


9507
11:15:26,080 --> 11:15:31,436
push that verify email view onto the screen what


9508
11:15:31,436 --> 11:15:35,116
i'm going to do i'm going to get rid of this so um


9509
11:15:35,116 --> 11:15:37,276
make the uh


9510
11:15:37,276 --> 11:15:42,320
what should i do here should i go back to the same layout so you can see yeah


9511
11:15:42,320 --> 11:15:46,480
that's probably better so go in here and say navigator


9512
11:15:46,480 --> 11:15:49,276
off and


9513
11:15:49,276 --> 11:15:54,400
then you say your build context and then you should say push


9514
11:15:54,400 --> 11:15:57,116
now push is the function that you're calling


9515
11:15:57,116 --> 11:16:01,116
and you can see here it acts it says okay


9516
11:16:01,116 --> 11:16:04,560
give me a route


9517
11:16:04,560 --> 11:16:09,520
and then you say material routes here um material page route


9518
11:16:09,520 --> 11:16:12,640
okay and then there's a builder function in here


9519
11:16:12,640 --> 11:16:16,640
and um like this i will explain all of this


9520
11:16:16,640 --> 11:16:20,800
soon to you and then in here say verify email view


9521
11:16:20,800 --> 11:16:24,960
just like that um


9522
11:16:25,436 --> 11:16:28,560
we have to return all of this


9523
11:16:28,560 --> 11:16:32,320
and i think we're there's something wrong with all this


9524
11:16:32,320 --> 11:16:36,320
let's see builder and then we're doing that and then one parenthesis i think is


9525
11:16:36,320 --> 11:16:40,000
missing is it so this one closes there


9526
11:16:40,000 --> 11:16:43,756
then there's this one and it needs to be ruined and what is


9527
11:16:43,756 --> 11:16:46,880
the actual error that's being displayed the return time future dynamic isn't a


9528
11:16:46,880 --> 11:16:51,436
widget as required okay and uh what we need to do is just to do


9529
11:16:51,436 --> 11:16:53,680
this


9530
11:16:54,000 --> 11:17:00,000
and yeah that's fine so let's bring this return done back to where it was and


9531
11:17:00,000 --> 11:17:04,320
then we remove this print statement from here as well and this print statement


9532
11:17:04,320 --> 11:17:08,320
from there and make this cons and i'm gonna explain all of this so don't worry


9533
11:17:08,320 --> 11:17:11,520
about it all right so


9534
11:17:11,520 --> 11:17:15,680
what is happening here is as you can see


9535
11:17:16,240 --> 11:17:20,560
sorry about that my throat isn't really working with me today


9536
11:17:20,560 --> 11:17:26,480
so what is happening here is you see in our future builder here


9537
11:17:26,480 --> 11:17:31,840
we are expected in the builder function which we are right now in here you see


9538
11:17:31,840 --> 11:17:36,400
we're always expected to return a widget so that's what the future builder does


9539
11:17:36,400 --> 11:17:40,800
it is in itself a widget that performs a feature and once that


9540
11:17:40,800 --> 11:17:44,000
future is done or it errors out or whatever


9541
11:17:44,000 --> 11:17:48,960
then it calls this builder function and in the builder function it is expected


9542
11:17:48,960 --> 11:17:53,116
to return that builder function itself is expected to return a widget


9543
11:17:53,116 --> 11:17:57,756
something to display on the screen okay now your job as a developer who's using


9544
11:17:57,756 --> 11:18:01,520
the future builder is to actually return a widget in this builder function and


9545
11:18:01,520 --> 11:18:05,040
that's why we're doing here what we're doing here we're saying if the


9546
11:18:05,040 --> 11:18:09,436
connection state if the future is done return this text of done


9547
11:18:09,436 --> 11:18:13,756
otherwise return this text so we have basically


9548
11:18:13,756 --> 11:18:19,436
fulfilled the contractual um agreement here


9549
11:18:19,436 --> 11:18:24,320
builder expects a widget we return a widget however we're trying to be clever


9550
11:18:24,320 --> 11:18:28,880
here in saying that okay we do return done but also we're performing an action


9551
11:18:28,880 --> 11:18:33,916
which is navigator of this context which is our build context and we haven't


9552
11:18:33,916 --> 11:18:38,000
talked about build context so much before but you can actually see


9553
11:18:38,000 --> 11:18:42,720
i mean the documentation isn't so clear maybe it says this class presents a set


9554
11:18:42,720 --> 11:18:46,880
of methods that can be used from build methods and from


9555
11:18:46,880 --> 11:18:51,680
but anyways what a build context is is kind of like a packaged bit of


9556
11:18:51,680 --> 11:18:56,400
information that you can you can use in order to pass data from one widget to


9557
11:18:56,400 --> 11:19:01,756
the other and it is very useful for for instance if you're using block and we


9558
11:19:01,756 --> 11:19:05,436
haven't talked about block yet but just know the build context is kind of like a


9559
11:19:05,436 --> 11:19:09,756
bit of information about the context where your widget


9560
11:19:09,756 --> 11:19:12,640
is at so in here what we're saying we're


9561
11:19:12,640 --> 11:19:17,680
saying create a navigator of this context and navigator is just a class


9562
11:19:17,680 --> 11:19:21,116
for you okay and then when you tell navigator to push something it says okay


9563
11:19:21,116 --> 11:19:25,596
what do you want me to push on the screen then we say create a material


9564
11:19:25,596 --> 11:19:28,160
page route to push


9565
11:19:28,160 --> 11:19:33,436
and you can see that material page route has an argument called builder which


9566
11:19:33,436 --> 11:19:38,160
in itself expects a widget okay so you need to return a widget


9567
11:19:38,160 --> 11:19:41,360
in this build function but all we're doing here to be honest with you it's


9568
11:19:41,360 --> 11:19:44,560
just saying that push a widget on the screen that's all so this is like the


9569
11:19:44,560 --> 11:19:48,480
format that you need to learn about okay navigator of the context push material


9570
11:19:48,480 --> 11:19:52,400
page route builder context and then you put your widget in there


9571
11:19:52,400 --> 11:19:57,040
okay all right that was a lot of information


9572
11:19:57,040 --> 11:20:01,680
i mean this looks kind of okay at the moment


9573
11:20:02,160 --> 11:20:05,436
so however there is a problem with it and


9574
11:20:05,436 --> 11:20:09,520
if you're not careful you can miss that problem and i really always like to


9575
11:20:09,520 --> 11:20:14,000
bring up my debug console so that i'm aware of all


9576
11:20:14,000 --> 11:20:18,240
problems that might happen and the problem that you can see on the screen


9577
11:20:18,240 --> 11:20:22,640
it said on handle exception package flutter


9578
11:20:22,640 --> 11:20:27,436
widgets navigator dart failed assertion line blah blah in navigator


9579
11:20:27,436 --> 11:20:31,840
so that there is an error [Music]


9580
11:20:31,840 --> 11:20:36,720
and um there is actually a github issue for


9581
11:20:36,720 --> 11:20:40,720
that i can see i've actually linked it there as well but we're going to come to


9582
11:20:40,720 --> 11:20:45,040
that but just be aware that what we are doing here is not really good


9583
11:20:45,040 --> 11:20:50,160
it's not a good idea to push something inside a future builder but we're going


9584
11:20:50,160 --> 11:20:55,436
to do it anyways just so we can fix it later so that you know at least this


9585
11:20:55,436 --> 11:20:59,916
issue exists and at the same time we achieve what we're trying to do here


9586
11:20:59,916 --> 11:21:05,520
which is displaying a new widget once a condition is met in this case the


9587
11:21:05,520 --> 11:21:09,840
user's email is not verified okay


9588
11:21:11,520 --> 11:21:16,560
all right what we need to do now is fix this up


9589
11:21:16,560 --> 11:21:20,640
fix our widget up here


9590
11:21:20,640 --> 11:21:24,960
i'm gonna just take some items in my notes


9591
11:21:24,960 --> 11:21:28,320
alright so at the moment our


9592
11:21:28,320 --> 11:21:33,680
uh verify email view it it's it's a completely wide scaffold


9593
11:21:33,680 --> 11:21:37,360
it doesn't even have an app bar there's nothing in there so what we can do is


9594
11:21:37,360 --> 11:21:41,436
just to first of all go and create an app bar here so we say app bar


9595
11:21:41,436 --> 11:21:44,960
and app bar title we've done this before so you should


9596
11:21:44,960 --> 11:21:48,840
know already the syntax and then the title is just gonna say verify


9597
11:21:48,840 --> 11:21:53,436
email verify email


9598
11:21:53,680 --> 11:21:57,200
and i can see appbar title is text i don't even know what i've done wrong


9599
11:21:57,200 --> 11:22:00,720
here to be honest with the constraint isn't the cons instructor it just means


9600
11:22:00,720 --> 11:22:05,756
that well okay i have to remove this and i have to make this text const


9601
11:22:05,756 --> 11:22:10,080
um i mean i'm i'm like moving past these things


9602
11:22:10,080 --> 11:22:13,116
but you may be a little bit confused if you're not if you haven't done this


9603
11:22:13,116 --> 11:22:17,040
before you may be confused what i'm doing here let's maybe i should explain


9604
11:22:17,040 --> 11:22:20,080
actually this what is happening here you see


9605
11:22:20,080 --> 11:22:24,320
before we started using the app bar in scaffold everything was completely fine


9606
11:22:24,320 --> 11:22:28,240
dart was completely okay and i said okay i'm gonna accept this as it is what


9607
11:22:28,240 --> 11:22:32,720
we're telling dart here is that we're creating a scaffold and it is a constant


9608
11:22:32,720 --> 11:22:36,880
scaffold it means it is we're not actually doing any special configuration


9609
11:22:36,880 --> 11:22:42,160
that makes this not a constant okay but that's so let's actually go here i'm


9610
11:22:42,160 --> 11:22:45,596
going to hold down command on my macintosh you can hold down control your


9611
11:22:45,596 --> 11:22:49,116
linux machine or windows and click on scaffold


9612
11:22:49,116 --> 11:22:52,160
excuse me and you can see that the initializer


9613
11:22:52,160 --> 11:22:55,596
that i'm calling here or the constructor that i'm calling here is marked as const


9614
11:22:55,596 --> 11:22:59,276
here okay but as soon as we put app bar in here


9615
11:22:59,276 --> 11:23:03,680
and i'm going to click on the same thing again let's see


9616
11:23:04,240 --> 11:23:07,840
if we can find that initializer


9617
11:23:09,200 --> 11:23:14,720
scaffold app bar this app bar i can't really seem to find that particular


9618
11:23:14,720 --> 11:23:18,480
initializer but what is happening


9619
11:23:18,480 --> 11:23:22,800
essentially here is saying that um


9620
11:23:22,800 --> 11:23:28,880
what you're trying to do here which is creating an app bar with a text inside


9621
11:23:28,880 --> 11:23:33,916
here a text widget and an app bar makes this scaffold widget not a constant


9622
11:23:33,916 --> 11:23:37,360
anymore okay so the first thing you need to do is say


9623
11:23:37,360 --> 11:23:40,640
okay i understand that that's not a constant anymore remove this constant on


9624
11:23:40,640 --> 11:23:43,520
scaffold but then you get an error here or


9625
11:23:43,520 --> 11:23:47,680
well a problem telling that okay you've removed the comms from scaffold but


9626
11:23:47,680 --> 11:23:51,916
still you could make your code better by making your text a constant because this


9627
11:23:51,916 --> 11:23:56,080
text scene text widget seems to be a constant all right so i'm going to make


9628
11:23:56,080 --> 11:24:01,916
that a constant now all right so back to our


9629
11:24:01,916 --> 11:24:09,276
so i'm going to press command s here is not true and i'm going to hot restart


9630
11:24:09,596 --> 11:24:13,040
verify email okay and i can see we have yeah it's


9631
11:24:13,040 --> 11:24:17,200
again we have a problem with hot reload because as soon as we do hot reload then


9632
11:24:17,200 --> 11:24:21,040
we get this error but this error is simply because of something weird that


9633
11:24:21,040 --> 11:24:24,560
we're doing in here so if you get error just do hot restart and you should be


9634
11:24:24,560 --> 11:24:27,436
good to go until we fix this problem okay


9635
11:24:27,436 --> 11:24:31,756
all right so as you can see in the caption of this chapter what we need to


9636
11:24:31,756 --> 11:24:35,916
do here is to display a column text and a text button to send the verification


9637
11:24:35,916 --> 11:24:40,560
email so let's go to the body of our scaffold so i'm just going to say body


9638
11:24:40,560 --> 11:24:45,680
and let's create a column children and inside the children


9639
11:24:45,680 --> 11:24:51,360
let's just go and say we have a text and say please verify


9640
11:24:51,360 --> 11:24:54,560
your email address


9641
11:24:55,040 --> 11:24:59,200
and that's that and then what we're gonna do in here we're gonna place a


9642
11:24:59,200 --> 11:25:04,400
text button as well and perhaps what could be better


9643
11:25:04,400 --> 11:25:06,960
is if i scroll this a little bit up so you


9644
11:25:06,960 --> 11:25:10,480
can see the code in its entirety then the text button if you remember


9645
11:25:10,480 --> 11:25:14,800
from the previous chapters it has two very important and required parameters


9646
11:25:14,800 --> 11:25:18,480
child and on press according to darts


9647
11:25:18,480 --> 11:25:21,520
analysis tools or flutters analysis tools


9648
11:25:21,520 --> 11:25:27,276
the child parameter of those widgets or those functions that do accept the child


9649
11:25:27,276 --> 11:25:31,680
is preferred to always be the last parameter so go ahead and create the


9650
11:25:31,680 --> 11:25:36,480
unpressed first and then go ahead ahead and create the child so in the child


9651
11:25:36,480 --> 11:25:42,160
we're going to say text off and send email verification


9652
11:25:42,160 --> 11:25:45,520
okay and make this text content so dark is


9653
11:25:45,520 --> 11:25:49,436
happy about that and make this constant as well press command s


9654
11:25:49,436 --> 11:25:55,596
and don't forget the comma here then hot reload so we can see the results


9655
11:25:55,596 --> 11:25:59,680
okay so now we have some text in there and then we have a button here that says


9656
11:25:59,680 --> 11:26:03,720
send email verification


9657
11:26:04,320 --> 11:26:07,116
okay i'm going to take it in my notes that i've talked about that so we don't


9658
11:26:07,116 --> 11:26:11,116
miss it um now what we need to do here is upon


9659
11:26:11,116 --> 11:26:16,080
pressing this button we actually need to send an email


9660
11:26:16,080 --> 11:26:22,960
verification to the current user okay so what we need is the current user so that


9661
11:26:22,960 --> 11:26:28,080
comes from let's see if we can find it in our


9662
11:26:28,240 --> 11:26:33,276
login view and register view we have you see login views or credentials firebase


9663
11:26:33,276 --> 11:26:37,360
code um let's see actually we got the user


9664
11:26:37,360 --> 11:26:41,520
right here firebase initialize app and then we were like fire yeah that's how


9665
11:26:41,520 --> 11:26:45,840
you get your current user firebase auth instance current user okay so i'm going


9666
11:26:45,840 --> 11:26:52,160
to copy that information from our home page okay and bring it into your


9667
11:26:52,160 --> 11:26:56,400
verify email view state in the button press right there


9668
11:26:56,400 --> 11:26:59,756
so this is how you get your user okay


9669
11:26:59,756 --> 11:27:04,080
now what we need to do is as the caption says here we need to await on the user


9670
11:27:04,080 --> 11:27:09,756
send email verification so say await user send


9671
11:27:09,756 --> 11:27:14,720
let's see user send email verification okay so now


9672
11:27:14,720 --> 11:27:19,596
you can see this is a function and it says it can't be unconditionally


9673
11:27:19,596 --> 11:27:23,436
invoked and that is because user can be nil


9674
11:27:23,436 --> 11:27:27,116
or null and it is an optional user so as you've


9675
11:27:27,116 --> 11:27:30,560
understood from the previous chapters you need to conditionally


9676
11:27:30,560 --> 11:27:34,160
access this function now be a little bit careful here because this function is a


9677
11:27:34,160 --> 11:27:38,800
future you see it's a future void so as you know calling a function that returns


9678
11:27:38,800 --> 11:27:44,160
a future void does not invoke the future except it only tells the function to


9679
11:27:44,160 --> 11:27:48,720
return the future okay so if you actually want the future to be executed


9680
11:27:48,720 --> 11:27:53,520
you need to wait on it so if you then say await here


9681
11:27:53,520 --> 11:27:58,320
you'll see we get an error telling that yeah you can't do asynchronous call


9682
11:27:58,320 --> 11:28:02,720
calls in this current uh scope that you're at and that is simply


9683
11:28:02,720 --> 11:28:07,360
because the unpressed function is not marked as asynchronous okay so remember


9684
11:28:07,360 --> 11:28:09,520
that great


9685
11:28:09,520 --> 11:28:12,480
so um i'm gonna press command s here we get


9686
11:28:12,480 --> 11:28:17,680
the error i'm gonna do this hot restart then


9687
11:28:17,680 --> 11:28:21,756
uh if i'm not mistaken i mean if i bring a browser up let's see if i can bring a


9688
11:28:21,756 --> 11:28:26,560
browser window here and i'm going to say console.firebase google


9689
11:28:26,560 --> 11:28:30,720
and let's go to our mynotes flatter project and let's go and have a look at


9690
11:28:30,720 --> 11:28:34,840
our authentication i can see that there's a user here it says


9691
11:28:34,840 --> 11:28:37,756
pixelityab.gmail.com for you it's probably gonna say something else


9692
11:28:37,756 --> 11:28:40,640
hopefully it's gonna say something else so that you haven't registered with my


9693
11:28:40,640 --> 11:28:44,400
email and what we need to do then is to simply


9694
11:28:44,400 --> 11:28:48,560
go here and press the send email verification button


9695
11:28:48,560 --> 11:28:50,400
boom okay


9696
11:28:50,400 --> 11:28:55,756
so nothing happened on the screen and um


9697
11:28:55,756 --> 11:28:58,480
i'm going to bring up the right caption here so you know what we're talking


9698
11:28:58,480 --> 11:29:02,320
about now we want to kind of look at how this email actually looks like


9699
11:29:02,320 --> 11:29:08,480
so let's see if i can bring up that email without uh


9700
11:29:08,480 --> 11:29:12,000
without uh


9701
11:29:12,880 --> 11:29:16,640
i like bringing up all my um


9702
11:29:16,640 --> 11:29:21,200
other emails and other users because that's kind of like private information


9703
11:29:21,200 --> 11:29:25,436
so all right so uh let's go ahead and see


9704
11:29:25,436 --> 11:29:30,240
i'm gonna then bring up this email on the screen so you can see how it looks


9705
11:29:30,240 --> 11:29:32,800
like so as as


9706
11:29:32,800 --> 11:29:37,276
that email address you can see here that's my email address or this is the


9707
11:29:37,276 --> 11:29:41,756
user that is logged in into our application then received an email from


9708
11:29:41,756 --> 11:29:46,320
firebase which is no reply at mynotesflusterproject.firebaseapp.com


9709
11:29:46,320 --> 11:29:48,960
okay and it says okay you need to click on


9710
11:29:48,960 --> 11:29:54,800
this link in order to verify your user so


9711
11:29:54,800 --> 11:29:57,596
now i'm just going to take in my actions in


9712
11:29:57,596 --> 11:30:01,360
my notes here that i've talked about that


9713
11:30:01,360 --> 11:30:05,596
and let's then click on this link to verify our identity and here it says


9714
11:30:05,596 --> 11:30:10,960
your email has been verified you cannot sign in with your new account great okay


9715
11:30:10,960 --> 11:30:15,436
so i'm going to close that taking in my notes that i've talked about it


9716
11:30:15,436 --> 11:30:18,800
um and what we can do here then is just to


9717
11:30:18,800 --> 11:30:24,080
refresh here and there's nothing really different about this user as you can see


9718
11:30:24,080 --> 11:30:26,800
so um


9719
11:30:26,800 --> 11:30:30,160
we're also looking at that user and you can't really i mean at the moment i


9720
11:30:30,160 --> 11:30:33,436
can't personally see if this user is verified


9721
11:30:33,436 --> 11:30:37,200
or not so maybe that's something that firebase is


9722
11:30:37,200 --> 11:30:41,436
going to provide in the future just like a checkbox or something saying or like a


9723
11:30:41,436 --> 11:30:44,880
yeah just like a check icon saying whether this user is verified or not but


9724
11:30:44,880 --> 11:30:50,000
you can't see that at the moment in firebase console at least i can't


9725
11:30:50,320 --> 11:30:56,960
all right a lot of information now let's go to our um


9726
11:30:56,960 --> 11:31:00,400
talk about this error that we got on the screen


9727
11:31:00,400 --> 11:31:04,480
and i've provided a little link here which i'm going to click on on a


9728
11:31:04,480 --> 11:31:08,400
separate screen and then bring it bring it up here on the screen that you can


9729
11:31:08,400 --> 11:31:13,200
see now if you remember where we pushed this


9730
11:31:13,200 --> 11:31:15,520
verify email


9731
11:31:15,520 --> 11:31:19,680
widget on the screen using navigator and then material page


9732
11:31:19,680 --> 11:31:23,436
route i think it's called and where is it material page right here


9733
11:31:23,436 --> 11:31:26,160
do you remember then we got this error on handle


9734
11:31:26,160 --> 11:31:31,040
exception okay and then there's an issue actually for that here on


9735
11:31:31,040 --> 11:31:34,960
flutter's github repository so as you know flutter


9736
11:31:34,960 --> 11:31:39,276
is an open source project and is an organization here on github and


9737
11:31:39,276 --> 11:31:43,360
pretty much everything that they're doing for flutter is under that


9738
11:31:43,360 --> 11:31:48,480
organization on github so as you can see here it says how to call navigator push


9739
11:31:48,480 --> 11:31:52,320
in future builder error log and then there's lots of great discussions about


9740
11:31:52,320 --> 11:31:55,840
like what should be done and etc but


9741
11:31:55,840 --> 11:32:00,320
just know that for now what you need to know is that you cannot do that without


9742
11:32:00,320 --> 11:32:04,880
having that error although although things may seem fine in


9743
11:32:04,880 --> 11:32:07,840
on the screen but as you saw as soon as you do a


9744
11:32:07,840 --> 11:32:11,596
hot hot reload and then you will have this


9745
11:32:11,596 --> 11:32:16,560
error also so there is an exception being thrown and we need to


9746
11:32:16,560 --> 11:32:20,480
handle that all right so


9747
11:32:20,480 --> 11:32:24,720
after you've looked at that uh github issue and you've gone through the


9748
11:32:24,720 --> 11:32:28,160
comments you'll understand that that's not the way to do things in flutter at


9749
11:32:28,160 --> 11:32:33,116
least not for now and um i'm actually gonna take it in my


9750
11:32:33,116 --> 11:32:36,240
notes so if you see me looking here i'm just making sure that i'm explaining


9751
11:32:36,240 --> 11:32:39,116
everything to you okay um


9752
11:32:39,116 --> 11:32:43,360
so what we need to do now is to go and change the way our


9753
11:32:43,360 --> 11:32:50,160
um our verify email view is created so


9754
11:32:50,880 --> 11:32:55,520
so instead of us returning you see here what we're doing is that


9755
11:32:55,520 --> 11:32:59,436
we're in our verify email view what we're returning we're returning an


9756
11:32:59,436 --> 11:33:05,116
entire scaffold and that is why we're trying to push this screen on our


9757
11:33:05,116 --> 11:33:08,800
current home home page because we're saying that here's the home page and


9758
11:33:08,800 --> 11:33:12,640
then there this is the verify email view and it has a scaffold just like the home


9759
11:33:12,640 --> 11:33:18,400
page does do you remember if you go up to our homepage homepage also has a


9760
11:33:18,400 --> 11:33:22,480
scaffold and an app bar so what we're pretty much saying right now is that


9761
11:33:22,480 --> 11:33:26,720
this is the home page and we kind of need to move another page on top of it


9762
11:33:26,720 --> 11:33:30,720
which pretty much has the same structure it has the app parts etc etc


9763
11:33:30,720 --> 11:33:33,916
and that is causing the problem because we're pushing something in future


9764
11:33:33,916 --> 11:33:37,436
builder and we're not allowed to do that so


9765
11:33:37,436 --> 11:33:41,596
what you need to do now is in order to fix this problem just for


9766
11:33:41,596 --> 11:33:45,680
now we go and remove the scaffold and in our


9767
11:33:45,680 --> 11:33:50,720
build function all we're gonna do is just to return the column okay so go on


9768
11:33:50,720 --> 11:33:54,000
your scaffold here and here


9769
11:33:54,000 --> 11:33:58,000
and what we're gonna do is we're just gonna say uh let's see if we have a


9770
11:33:58,000 --> 11:34:01,360
remove functionality here and we don't and that's okay


9771
11:34:01,360 --> 11:34:05,520
i'm just going to grab this column and i'm going to bring it a little bit


9772
11:34:05,520 --> 11:34:08,160
up so you can see i'm going to put a comma here


9773
11:34:08,160 --> 11:34:12,720
hot hot reload so we don't see the ugly error on the screen


9774
11:34:12,720 --> 11:34:17,756
and grab your column here and without the comma at the end grab


9775
11:34:17,756 --> 11:34:21,840
that column and in the build function just return that okay instead of your


9776
11:34:21,840 --> 11:34:27,276
scaffold and a semicolon at the end all right


9777
11:34:27,276 --> 11:34:31,276
um so that's what we're gonna do now


9778
11:34:31,276 --> 11:34:35,916
for now we're just gonna return column there and then what we need to do


9779
11:34:35,916 --> 11:34:38,000
um let me see actually that's what we're


9780
11:34:38,000 --> 11:34:41,520
gonna do now or is it something that we're gonna do later


9781
11:34:41,520 --> 11:34:43,680
yeah um


9782
11:34:43,680 --> 11:34:46,640
so yes we've now changed verify email view and


9783
11:34:46,640 --> 11:34:51,596
that returns a column now let's go in here you see in here when we see that


9784
11:34:51,596 --> 11:34:56,480
the user isn't verified uh what we need to do then is to say navigator instead


9785
11:34:56,480 --> 11:35:01,840
of navigator of we're gonna just return our verify email view in here okay so


9786
11:35:01,840 --> 11:35:04,800
let me go in here and just say return that


9787
11:35:04,800 --> 11:35:10,800
as a constant and in here


9788
11:35:11,360 --> 11:35:14,720
otherwise do that so i'm going to press command s here


9789
11:35:14,720 --> 11:35:19,040
and a hot reload


9790
11:35:19,040 --> 11:35:20,880
okay so


9791
11:35:20,880 --> 11:35:24,640
let's go and see what is happening here so what we're saying is that


9792
11:35:24,640 --> 11:35:30,000
if user instance current if user email verified then return done otherwise


9793
11:35:30,000 --> 11:35:33,596
return verify email view so what's happening to be honest with you


9794
11:35:33,596 --> 11:35:36,240
is that previously where we were pushing an


9795
11:35:36,240 --> 11:35:40,880
entire screen on the current screen now what we're doing is saying that here is


9796
11:35:40,880 --> 11:35:47,276
a screen already put this verify emails email views widget


9797
11:35:47,276 --> 11:35:52,160
that returns that is returned from the build function right inside this current


9798
11:35:52,160 --> 11:35:55,916
screen's content okay so it's a little bit of a difference instead of pushing a


9799
11:35:55,916 --> 11:36:00,640
whole new screen we're putting that new screen's contents in our screen all


9800
11:36:00,640 --> 11:36:02,880
right


9801
11:36:03,520 --> 11:36:08,916
okay and now we have this and i see now that


9802
11:36:08,916 --> 11:36:13,756
our app still thinks that we're not verified but what we could do is just to


9803
11:36:13,756 --> 11:36:19,520
make sure you can see here that um at least we're not getting that ugly


9804
11:36:19,520 --> 11:36:23,916
error anymore so if i do a hot restart here


9805
11:36:23,916 --> 11:36:27,360
i can see this email verification and that's a little bit strange to be honest


9806
11:36:27,360 --> 11:36:31,916
with you because we did verify our user so what i'm going to do is just to


9807
11:36:31,916 --> 11:36:35,520
ensure that this this phone right now has


9808
11:36:35,520 --> 11:36:37,916
um


9809
11:36:38,160 --> 11:36:42,720
internet connection and it does so that user should have


9810
11:36:42,720 --> 11:36:47,116
been verified and i think we actually did click on the


9811
11:36:47,116 --> 11:36:50,160
verification email so let me go back here


9812
11:36:50,160 --> 11:36:54,640
go back to the application and what we could do is just to stop the


9813
11:36:54,640 --> 11:36:58,640
application from running and then press run without debugging and just to ensure


9814
11:36:58,640 --> 11:37:04,000
that everything is set up correctly so if everything is working fine then we


9815
11:37:04,000 --> 11:37:07,756
shouldn't come to verify email view instead we should go


9816
11:37:07,756 --> 11:37:10,960
to here


9817
11:37:10,960 --> 11:37:14,560
we should display the done text to the to the user


9818
11:37:14,560 --> 11:37:17,756
so let's just let's just ensure that that


9819
11:37:17,756 --> 11:37:23,520
is working as expected before we continue with the next item


9820
11:37:25,040 --> 11:37:29,116
i can still see this and we could simply put some um


9821
11:37:29,116 --> 11:37:33,040
poor man debugging in here and just prints the user email like that prints


9822
11:37:33,040 --> 11:37:36,960
the entire user to the screen command s okay


9823
11:37:36,960 --> 11:37:41,116
and let's go in here i can see email verified is still false is anonymous


9824
11:37:41,116 --> 11:37:45,276
false metadata last signing time so it still thinks


9825
11:37:45,276 --> 11:37:48,880
that i'm not verified so what i'm going to do is i'm going to send an email


9826
11:37:48,880 --> 11:37:54,320
verification and i'm just going to go to my mail here


9827
11:37:54,320 --> 11:37:59,276
and let me go here and let's just i'm going to bring up


9828
11:37:59,276 --> 11:38:04,160
that email and let me just ensure that


9829
11:38:04,160 --> 11:38:07,756
we can click on that link


9830
11:38:07,756 --> 11:38:11,916
and it says your email has been verified okay


9831
11:38:11,916 --> 11:38:16,000
then let's close this and i'm gonna do a hot reload


9832
11:38:16,000 --> 11:38:18,960
here and to be honest with you i can still


9833
11:38:18,960 --> 11:38:24,640
see now that we're not verified so let's go in to safari


9834
11:38:24,640 --> 11:38:26,800
and say um


9835
11:38:26,800 --> 11:38:34,000
firebase flutter email verified not working


9836
11:38:34,080 --> 11:38:37,276
email verification let's see if there's something that


9837
11:38:37,276 --> 11:38:42,640
we're missing uh firebase auth current user and then


9838
11:38:42,640 --> 11:38:47,520
user null is email verified and i believe that is what we're doing here it


9839
11:38:47,520 --> 11:38:50,840
this is not hopefully a future is actually a user


9840
11:38:50,840 --> 11:38:55,276
yeah and in here we're initializing the


9841
11:38:55,276 --> 11:38:58,400
application so that that should work fine as well


9842
11:38:58,400 --> 11:39:03,840
and then we're getting the user and then email verified that should also work so


9843
11:39:03,840 --> 11:39:07,360
um one thing to implement is email verified


9844
11:39:07,360 --> 11:39:10,880
and initiate function imperiality can be ideal approach to easy for verification


9845
11:39:10,880 --> 11:39:16,160
with firebase well that's not really the problem here


9846
11:39:16,640 --> 11:39:21,040
connection state waiting and it could simply be that we need to


9847
11:39:21,040 --> 11:39:25,840
just try to log in with that user so that it tries to contact firebase again


9848
11:39:25,840 --> 11:39:27,520
okay so


9849
11:39:27,520 --> 11:39:34,160
what i'm gonna do here is to as we have planned here let's go and change both


9850
11:39:34,160 --> 11:39:39,436
the login view and the register view as well so that they don't return


9851
11:39:39,436 --> 11:39:44,160
an entire scaffold but instead we're gonna make sure that they only return


9852
11:39:44,160 --> 11:39:48,720
their actual content okay as you can see i put in the caption


9853
11:39:48,720 --> 11:39:52,000
here that they shouldn't for now return a scaffold


9854
11:39:52,000 --> 11:39:54,480
um so that's going to be done in the home


9855
11:39:54,480 --> 11:39:57,596
page so let's go and i can see i have a little bit of


9856
11:39:57,596 --> 11:39:59,916
them


9857
11:40:00,560 --> 11:40:07,040
now return a scaffold that's the job of home page so i just fixed our


9858
11:40:07,040 --> 11:40:11,276
little caption there as well let's go to login view and i'm gonna go here


9859
11:40:11,276 --> 11:40:15,200
and let's go to your login view here you can see we have firebase initialize app


9860
11:40:15,200 --> 11:40:19,200
future builder we have all that logic also in both login view and registering


9861
11:40:19,200 --> 11:40:24,080
we shouldn't be doing that so i'm gonna grab this return column all the way from


9862
11:40:24,080 --> 11:40:25,756
there and


9863
11:40:25,756 --> 11:40:29,520
go to all the way where the return column ends


9864
11:40:29,520 --> 11:40:33,680
grab that then i'm gonna pretty much nuke the entire


9865
11:40:33,680 --> 11:40:40,560
build function and instead return the column okay so that's our login view


9866
11:40:40,560 --> 11:40:45,116
and now we have a lot of unused imports i'm going to remove them


9867
11:40:45,116 --> 11:40:48,880
as well and i'm going to go to our


9868
11:40:48,880 --> 11:40:53,436
register view and for now as well do the same thing for


9869
11:40:53,436 --> 11:40:56,240
register view go to your build function in the


9870
11:40:56,240 --> 11:41:00,080
register view and everything needs to be removed except for the


9871
11:41:00,080 --> 11:41:04,720
actual content which is the column so


9872
11:41:04,720 --> 11:41:10,240
grab the column as you can see here nuke the entire build function


9873
11:41:10,240 --> 11:41:15,916
and just return your call all right so what i'm gonna do here is


9874
11:41:15,916 --> 11:41:19,116
to fix this email verification issue


9875
11:41:19,116 --> 11:41:22,960
perhaps what we need to do here is


9876
11:41:22,960 --> 11:41:27,040
for now let's go in here and


9877
11:41:27,040 --> 11:41:31,596
turn just comment out all the codes so when the initialization of firebase is


9878
11:41:31,596 --> 11:41:34,800
done just return your login view so let's say return


9879
11:41:34,800 --> 11:41:38,720
login view okay as a constant so i'm just gonna


9880
11:41:38,720 --> 11:41:43,360
press command s and then we come here and i'm going to enter pixelityab


9881
11:41:43,360 --> 11:41:48,800
gmail.com football baz okay and if you remember from login view if


9882
11:41:48,800 --> 11:41:52,560
you go back to login view we had this beautiful little thing that


9883
11:41:52,560 --> 11:41:55,520
printed the user credentials to the screen so


9884
11:41:55,520 --> 11:41:59,596
that is saved already and i've saved here as well


9885
11:41:59,596 --> 11:42:04,480
so let's go and enter that information pixel tab at gmail.com and then through


9886
11:42:04,480 --> 11:42:08,000
bar bas and let me bring up the debug console


9887
11:42:08,000 --> 11:42:10,960
and kind of change the screen layout so so you see it a little bit better as


9888
11:42:10,960 --> 11:42:15,916
well i'm going to clear the console and i'm going to press the login button


9889
11:42:15,916 --> 11:42:19,680
so here now we have the user credential you


9890
11:42:19,680 --> 11:42:25,680
can see it's printed to the screen and now email verified is set to true so


9891
11:42:25,680 --> 11:42:30,320
the problem there was that when there's email verification sent


9892
11:42:30,320 --> 11:42:33,040
firebase as you as a user i mean there's


9893
11:42:33,040 --> 11:42:36,720
something for me to learn as well so i'm actually grateful that i'm learning


9894
11:42:36,720 --> 11:42:39,436
as i'm actually teaching so


9895
11:42:39,436 --> 11:42:44,400
one once what happened here is that we verified an email and that email


9896
11:42:44,400 --> 11:42:48,640
verification we clicked on the link but firebase


9897
11:42:48,640 --> 11:42:51,040
doesn't immediately understand that you've


9898
11:42:51,040 --> 11:42:55,040
as a user have verified your email now so what you need to do you need to ask


9899
11:42:55,040 --> 11:42:58,800
the user to log in and upon that point it seems like firebase is actually


9900
11:42:58,800 --> 11:43:02,960
refreshing that data locally as well as contacting firebase backend and getting


9901
11:43:02,960 --> 11:43:06,960
the latest information from there so just because your user has verified


9902
11:43:06,960 --> 11:43:09,916
their information doesn't mean that the application is immediately going to


9903
11:43:09,916 --> 11:43:14,720
understand that so you need to ask the user to log in again okay


9904
11:43:15,360 --> 11:43:20,800
so i can see here now we were supposed to return the logging view um


9905
11:43:20,800 --> 11:43:24,320
so i'm going to take some items in my notes


9906
11:43:24,320 --> 11:43:27,040
just to make sure that i've talked about them


9907
11:43:27,040 --> 11:43:32,160
and we're returning the login view right now from


9908
11:43:32,160 --> 11:43:36,160
from our home page so this is something you'll need to do also before we


9909
11:43:36,160 --> 11:43:42,320
continue to the next chapter all right that was a lot of information


9910
11:43:42,320 --> 11:43:45,800
and um


9911
11:43:46,560 --> 11:43:48,800
but for this chapter


9912
11:43:48,800 --> 11:43:54,400
what we've done pretty much is just to create the uh verify uh email view or


9913
11:43:54,400 --> 11:43:58,240
what we call it is it called verify verify email view we ensure that it can


9914
11:43:58,240 --> 11:44:01,840
send an email we clicked on the link in the email and made sure that the user is


9915
11:44:01,840 --> 11:44:05,436
verified and that's and that all has been working fine


9916
11:44:05,436 --> 11:44:09,200
um but we still have a lot to work on and


9917
11:44:09,200 --> 11:44:12,640
as you can see it right now i'm going into the code and manually like


9918
11:44:12,640 --> 11:44:16,960
returning the screens that i personally want to see or it's important for you to


9919
11:44:16,960 --> 11:44:21,680
see for instance the login view but if you display login view how is the


9920
11:44:21,680 --> 11:44:26,240
user able to go from the login view to register if they don't have an account


9921
11:44:26,240 --> 11:44:30,800
that they can log in with so that's what we're gonna do in the next chapter we're


9922
11:44:30,800 --> 11:44:35,756
gonna create links between our screens so that a user can go from one screen to


9923
11:44:35,756 --> 11:44:38,160
the other and then back


9924
11:44:38,160 --> 11:44:40,240
so um


9925
11:44:40,240 --> 11:44:45,756
so yeah great job that's it for this chapter and i'll see you in the next one


9926
11:44:45,756 --> 11:44:49,200
hello and welcome to chapter 17 of the slotted course


9927
11:44:49,200 --> 11:44:53,436
in the previous chapters we've been working quite a lot with some of the


9928
11:44:53,436 --> 11:44:58,400
basics of flutter for instance stateful stateless widgets we've been looking at


9929
11:44:58,400 --> 11:45:03,360
a column we've been looking at text button and many other widgets and kind


9930
11:45:03,360 --> 11:45:08,560
of trying to get our screens presentable to the user and


9931
11:45:08,560 --> 11:45:11,040
at the same time we've been working on the functionality of the applications


9932
11:45:11,040 --> 11:45:15,040
such as logging in registering verifying email etc


9933
11:45:15,040 --> 11:45:20,160
we have a lot to work on and um we're gonna break it down by


9934
11:45:20,160 --> 11:45:24,240
first starting to work on the link between the login and the register view


9935
11:45:24,240 --> 11:45:28,400
as you can see here at the moment we i mean i'm going to


9936
11:45:28,400 --> 11:45:32,320
bring up the code um the way we left it in the previous


9937
11:45:32,320 --> 11:45:37,200
chapter as you can see here in the main function


9938
11:45:37,200 --> 11:45:42,000
sorry in our home page widget and also let me change


9939
11:45:42,000 --> 11:45:44,720
the um


9940
11:45:44,720 --> 11:45:48,880
let me change the structure on the uh of the different views on the screen


9941
11:45:48,880 --> 11:45:54,240
so you can see a little bit better so if i do a hot restart here you can see that


9942
11:45:54,240 --> 11:45:57,276
um when the connection state is done when the firebase application is


9943
11:45:57,276 --> 11:46:01,276
initialized i'm displaying the or we're displaying the login view here without


9944
11:46:01,276 --> 11:46:06,080
basically having the option to go to any other screen from here so if i want to


9945
11:46:06,080 --> 11:46:09,520
send the user to the register view then i have to change this code right here


9946
11:46:09,520 --> 11:46:13,520
and say okay now you have to go to register view


9947
11:46:13,520 --> 11:46:17,680
so that's why we need a link between these


9948
11:46:17,680 --> 11:46:22,080
two views i'm sorry i'm looking at this screen just because i need to actually


9949
11:46:22,080 --> 11:46:26,640
ensure that i tick the items that i've already explained so um we need to make


9950
11:46:26,640 --> 11:46:30,080
sure that when a user is on the login screen even if that's the first screen


9951
11:46:30,080 --> 11:46:32,880
that we always display to the user which is not


9952
11:46:32,880 --> 11:46:36,560
but if even if it was we need to be able to let the user to go from the login


9953
11:46:36,560 --> 11:46:41,840
screen to the registry and also from registry view back to the login screen


9954
11:46:41,840 --> 11:46:46,240
so that's what we're gonna do in this chapter


9955
11:46:46,240 --> 11:46:48,480
so as the first


9956
11:46:48,480 --> 11:46:52,880
item that we have to tackle is to go to our login view and add a


9957
11:46:52,880 --> 11:46:58,560
button that will send us to the registry so i'm going to open up


9958
11:46:58,560 --> 11:47:02,880
i'm going to bring it here make the screen a little bit smaller here


9959
11:47:02,880 --> 11:47:07,680
so let's go to our login view which i can see is actually modified um yeah


9960
11:47:07,680 --> 11:47:12,080
that's okay actually so and what we need here you can see we


9961
11:47:12,080 --> 11:47:17,840
have a text button and that is for our login view the login button


9962
11:47:17,840 --> 11:47:20,400
and as you can see the cache has added text but it's allowing you to send us a


9963
11:47:20,400 --> 11:47:24,480
registry view so right after this text button let's create a new text button


9964
11:47:24,480 --> 11:47:27,520
and i'm going to bring it a little bit higher so you can see i'm going to say


9965
11:47:27,520 --> 11:47:33,680
text button remember uh child parameter always has to be at the la at the


9966
11:47:33,680 --> 11:47:38,800
it should be the last parameter so i'm going to say unpressed ask visual studio


9967
11:47:38,800 --> 11:47:42,640
code to complete it for me and then i'm going to say child the text is going to


9968
11:47:42,640 --> 11:47:47,596
say what should it say should it say not registered


9969
11:47:47,596 --> 11:47:51,200
yet and we say register here something like


9970
11:47:51,200 --> 11:47:55,200
this i make it a constant okay and i'm gonna save this and you can see


9971
11:47:55,200 --> 11:47:59,116
now that we have a little button here that says not registered yet register


9972
11:47:59,116 --> 11:48:03,040
here okay so that part is done but the button


9973
11:48:03,040 --> 11:48:06,480
at the moment the way it is right now it's not doing anything so


9974
11:48:06,480 --> 11:48:11,520
we need to address that but before we can do that we need to


9975
11:48:11,520 --> 11:48:15,916
talk about named routes


9976
11:48:15,916 --> 11:48:20,160
you see in the previous exercise or in the previous chapter


9977
11:48:20,160 --> 11:48:25,596
we use navigator and dot of context and push


9978
11:48:25,596 --> 11:48:28,640
and then we created a material page route


9979
11:48:28,640 --> 11:48:32,080
that may have all been kind of like alien to you and you didn't really know


9980
11:48:32,080 --> 11:48:35,276
what was happening and that's okay you will get to know it more and more as we


9981
11:48:35,276 --> 11:48:39,040
go through the various chapters in this in this course but what we need to do


9982
11:48:39,040 --> 11:48:44,720
here is to first talk about what a route is and what a name route is and i've


9983
11:48:44,720 --> 11:48:49,436
actually put a link to a documentation here for you


9984
11:48:49,436 --> 11:48:52,720
that we can go i'm going to bring up my web browser and i'm going to create a


9985
11:48:52,720 --> 11:48:56,960
new window and i'm going to say flutter mean routes


9986
11:48:56,960 --> 11:49:01,680
which is going to end up in the exact same link that you can see there


9987
11:49:01,680 --> 11:49:05,680
and it says here in the navig in the navigate to a new screenplay recipe


9988
11:49:05,680 --> 11:49:08,960
however if you need to navigate to the same screen actually it wasn't such a


9989
11:49:08,960 --> 11:49:12,000
great description to be honest i was kind of expecting a little bit of better


9990
11:49:12,000 --> 11:49:15,756
description but maybe i can do that myself instead of you having to look at


9991
11:49:15,756 --> 11:49:18,000
this and i can see to be honest with you this


9992
11:49:18,000 --> 11:49:21,596
this webpage is a part of a cookbook which


9993
11:49:21,596 --> 11:49:26,480
kind of is probably all like linked together so in order for you


9994
11:49:26,480 --> 11:49:30,080
to understand this page you actually have to go to this link and read that


9995
11:49:30,080 --> 11:49:33,520
and then see and then this would be the continuation


9996
11:49:33,520 --> 11:49:36,960
so i just put the link here just so you


9997
11:49:36,960 --> 11:49:40,800
have it as reference but i'm gonna explain that myself here


9998
11:49:40,800 --> 11:49:45,756
now if we go back to um where we had the named route let's see


9999
11:49:45,756 --> 11:49:50,320
uh where did we have the name route when we pushed it it was quite a bit before


10000
11:49:50,320 --> 11:49:54,720
this if i can undo here


10001
11:49:54,720 --> 11:49:59,436
so this is something called an anonymous route so sorry about that i said name


10002
11:49:59,436 --> 11:50:04,800
route but this is an anonymous route so a route is as its name indicates in


10003
11:50:04,800 --> 11:50:09,840
flutter is it's a journey that has a start and an end so it starts from a


10004
11:50:09,840 --> 11:50:13,276
view and it ends in a view okay that's a route


10005
11:50:13,276 --> 11:50:15,916
um however there are two types of routes


10006
11:50:15,916 --> 11:50:19,840
and you can create in flutter either you do your routes either you go to a new


10007
11:50:19,840 --> 11:50:24,240
screen to your destination from the current screen without providing any


10008
11:50:24,240 --> 11:50:27,916
sort of information about what this route actually means to your application


10009
11:50:27,916 --> 11:50:32,320
so it's an anonymous route you're doing it in line you're not telling flutter


10010
11:50:32,320 --> 11:50:37,916
about this route beforehand so as the user presses the button or


10011
11:50:37,916 --> 11:50:41,840
for instance in this case as the user ends up in the home page and the future


10012
11:50:41,840 --> 11:50:46,400
builder initializes firebase upon the connections they've done meaning that


10013
11:50:46,400 --> 11:50:50,800
the initialization of firebase is complete then we were pushing


10014
11:50:50,800 --> 11:50:54,000
the verify email view on the screen and then we


10015
11:50:54,000 --> 11:50:58,240
fixed it by doing all this code so that was an anonymous route you're


10016
11:50:58,240 --> 11:51:03,360
doing it in place as the done connection state happens then we were pushing a new


10017
11:51:03,360 --> 11:51:06,800
route uh in our navigator


10018
11:51:06,800 --> 11:51:12,480
but a named route is the exact same thing that we write like we were doing


10019
11:51:12,480 --> 11:51:17,840
before but you tell flutter about that route before so that when your


10020
11:51:17,840 --> 11:51:23,040
application is created and initialized and the flutter engine starts it knows


10021
11:51:23,040 --> 11:51:27,520
that there is a route with the name xyz for instance or fubar bass whatever you


10022
11:51:27,520 --> 11:51:32,320
want to define and it goes to a certain


10023
11:51:32,320 --> 11:51:36,560
screen okay so that is the difference between an anonymous route and a name


10024
11:51:36,560 --> 11:51:39,680
route in that as its name indicates a named route


10025
11:51:39,680 --> 11:51:44,080
is a route that has a name so you tell flutter that associate this particular


10026
11:51:44,080 --> 11:51:49,840
name as a type of string to this route


10027
11:51:50,800 --> 11:51:56,400
okay i'm going to take it here in my notes that we've talked about that


10028
11:51:56,400 --> 11:52:01,200
so what we need to do now is to define two routes for our


10029
11:52:01,200 --> 11:52:05,200
application one called slash login slash and the other one is called slash


10030
11:52:05,200 --> 11:52:08,160
register okay


10031
11:52:08,160 --> 11:52:13,840
so let me just go and ensure that i'm bringing those routes correctly so


10032
11:52:13,840 --> 11:52:18,480
what i'm going to do here and you need to do as well is to go to your main


10033
11:52:18,480 --> 11:52:22,480
function and at the moment we have a title for a


10034
11:52:22,480 --> 11:52:27,116
material app and a theme data and then a home here


10035
11:52:27,116 --> 11:52:32,960
but what you also have is a parameter called routes okay so let's go and say


10036
11:52:32,960 --> 11:52:39,276
we want to create these routes and you can see here it says routes its


10037
11:52:39,276 --> 11:52:44,960
value is a map of string and a builder function for the values of those


10038
11:52:44,960 --> 11:52:49,116
uh string keys so it's a little bit strange it's a map whose keys are


10039
11:52:49,116 --> 11:52:54,960
strings and values are functions that take in a


10040
11:52:54,960 --> 11:52:59,040
build context sorry about that and return a widget so it's a little bit of


10041
11:52:59,040 --> 11:53:01,840
a it's like maybe a paradigm shift in your


10042
11:53:01,840 --> 11:53:07,040
head but these things do exist and i've already i've also created my own classes


10043
11:53:07,040 --> 11:53:09,756
that kind of expect this kind of parameter


10044
11:53:09,756 --> 11:53:13,596
so let's go into routes and say okay now we have routes


10045
11:53:13,596 --> 11:53:18,080
as you know as you know this is how we create a map map is a is a list of key


10046
11:53:18,080 --> 11:53:21,916
value pairs or map entries as they're called in


10047
11:53:21,916 --> 11:53:26,240
flutter and then what we need to do here is i'm


10048
11:53:26,240 --> 11:53:30,160
sorry but i'll just move some code around i have three screens here so i


10049
11:53:30,160 --> 11:53:34,640
kind of have to manage those screens at the same time i'm explaining things so


10050
11:53:34,640 --> 11:53:40,080
what we're gonna do here is to define two routes slash login all right and


10051
11:53:40,080 --> 11:53:45,360
remember the value of this of the value of every key inside this routes needs to


10052
11:53:45,360 --> 11:53:50,640
be a function you see it's a function that returns a widget and it takes a


10053
11:53:50,640 --> 11:53:56,800
build context inside so in here what we're going to do is say we have a


10054
11:53:56,800 --> 11:54:02,080
context and we return actually sorry login slash


10055
11:54:02,080 --> 11:54:07,596
we return the login view all right so we say have a route called slash login


10056
11:54:07,596 --> 11:54:13,116
slash and when that route is used it returns the login view


10057
11:54:13,116 --> 11:54:16,880
an instance of the login view now we need to do the exact same thing but for


10058
11:54:16,880 --> 11:54:21,116
register so i'm going to copy this and here just going to say register and


10059
11:54:21,116 --> 11:54:25,756
instead return the register view which we haven't imported into our main dart


10060
11:54:25,756 --> 11:54:30,400
file and you can remedy that by pressing command dot on mac or control dot on


10061
11:54:30,400 --> 11:54:34,480
windows and linux and then say import register


10062
11:54:34,480 --> 11:54:36,800
view


10063
11:54:37,596 --> 11:54:43,756
okay that's that and i'm gonna have a look at my notes a little bit


10064
11:54:43,756 --> 11:54:46,960
so what we need to do now um i've already


10065
11:54:46,960 --> 11:54:51,596
explained that okay in log area all right so what we need to do now is to go


10066
11:54:51,596 --> 11:54:56,080
from login to the register view and as you can see i've explained it


10067
11:54:56,080 --> 11:55:00,240
here in the caption that this will actually cause an error but we will fix


10068
11:55:00,240 --> 11:55:04,640
this error as we go forward okay so


10069
11:55:04,640 --> 11:55:09,040
in this uh register view here sorry in this um


10070
11:55:09,040 --> 11:55:12,320
in our login view so let's go to the login view we have this button right


10071
11:55:12,320 --> 11:55:17,116
here and what we need to do is just to ensure that by pressing that we can go


10072
11:55:17,116 --> 11:55:21,596
to the correct place and


10073
11:55:21,596 --> 11:55:25,596
i think i brought up the caption and you can see that we need to use


10074
11:55:25,596 --> 11:55:30,480
navigator of context push named and remove until


10075
11:55:30,480 --> 11:55:35,360
and this this is kind of a peculiar call because what it essentially does is as


10076
11:55:35,360 --> 11:55:38,000
you can see right now on the screen we have


10077
11:55:38,000 --> 11:55:40,480
the login and


10078
11:55:40,480 --> 11:55:44,240
we basically the way we've created things at the moment is that we have the


10079
11:55:44,240 --> 11:55:49,840
home view which is a widget and then depending on the state of


10080
11:55:49,840 --> 11:55:54,320
actually no not depending on anything we're literally just hard coding login


10081
11:55:54,320 --> 11:56:00,320
view to be returned inside this okay so we have the home widget and then inside


10082
11:56:00,320 --> 11:56:04,560
this home widget we're inserting the contents of login view so login view and


10083
11:56:04,560 --> 11:56:08,560
home page are kind of like displayed on top of each other


10084
11:56:08,560 --> 11:56:11,840
and this home page has the scaffold whereas


10085
11:56:11,840 --> 11:56:14,720
the login view doesn't have any scaffold and


10086
11:56:14,720 --> 11:56:18,720
it's just a column at the moment if you remember we can go back to login view so


10087
11:56:18,720 --> 11:56:24,560
you can see that it's just a column okay so that's the structure currently by


10088
11:56:24,560 --> 11:56:28,640
doing this command that i'm providing you here navigator of context push name


10089
11:56:28,640 --> 11:56:33,040
and remove until what is going to happen is that as its


10090
11:56:33,040 --> 11:56:38,320
name indicates it's going to remove everything


10091
11:56:38,320 --> 11:56:42,400
before it pushes this new route so


10092
11:56:42,400 --> 11:56:46,880
is what we're basically saying here is that by pressing the not registered yet


10093
11:56:46,880 --> 11:56:50,800
button and register here we're going to nuke this screen remove it completely


10094
11:56:50,800 --> 11:56:55,840
from the screen and replace it by this new widget that we're returning okay so


10095
11:56:55,840 --> 11:57:00,560
let's go to our login view in this button here into the login view and


10096
11:57:00,560 --> 11:57:06,800
sorry in the not registered yet button we say navigator of


10097
11:57:06,800 --> 11:57:11,360
context and remove until here push and remove


10098
11:57:11,360 --> 11:57:18,480
until push named and remove until and in here now we need to display our


10099
11:57:18,480 --> 11:57:24,480
register route and we refer to that using its name


10100
11:57:24,480 --> 11:57:30,400
so let's go and fix that now so we say here


10101
11:57:30,400 --> 11:57:34,320
slash register and


10102
11:57:34,320 --> 11:57:39,360
put false there as it is and you can see you can get documentation about this and


10103
11:57:39,360 --> 11:57:44,080
there's a predicate here that returns returns true or false and it says push


10104
11:57:44,080 --> 11:57:46,880
the route with the given name onto the navigator and then remove all the


10105
11:57:46,880 --> 11:57:50,320
previous routes until the predicate returns true


10106
11:57:50,320 --> 11:57:53,680
and at the moment we're just saying return false meaning return remove


10107
11:57:53,680 --> 11:57:57,436
everything from the route and just go to the register view so just leave this as


10108
11:57:57,436 --> 11:58:02,000
false right now okay and this is actually going to cause


10109
11:58:02,000 --> 11:58:06,880
a problem and you will see that soon i'm going to hot restart just in case and we


10110
11:58:06,880 --> 11:58:11,360
go here to our login view and i'm going to press the not


10111
11:58:11,360 --> 11:58:16,480
registered button here and boom and you can see now um


10112
11:58:16,480 --> 11:58:19,436
that's actually great that we're getting this error this is exactly what i what


10113
11:58:19,436 --> 11:58:23,436
i'd expected so what is happening here is that we're


10114
11:58:23,436 --> 11:58:26,720
removing everything that's on the screen and


10115
11:58:26,720 --> 11:58:31,360
pushing around to the screen that has no scaffold so this is the problem that you


10116
11:58:31,360 --> 11:58:35,520
can see on the screen that yeah i can't just display a column on the screen


10117
11:58:35,520 --> 11:58:40,480
without anything around it so we need kind of a scaffold


10118
11:58:40,480 --> 11:58:44,720
and that is what this caption also is saying at the bottom left of the screen


10119
11:58:44,720 --> 11:58:50,880
as i'm showing you here i'll check some items in my um


10120
11:58:50,880 --> 11:58:54,560
screen so as the next thing what we need to do


10121
11:58:54,560 --> 11:59:00,240
now is to go to our register view which is what we're pushing here and


10122
11:59:00,240 --> 11:59:05,276
make sure that our register view now has all of a sudden a scaffold all right so


10123
11:59:05,276 --> 11:59:09,436
let's go to lib here and register view i'm gonna


10124
11:59:09,436 --> 11:59:14,320
remove this project explorer here at the moment we're returning a column what i'm


10125
11:59:14,320 --> 11:59:18,880
gonna do is gonna command click on mac or control click on linux and windows


10126
11:59:18,880 --> 11:59:23,436
and say wrap with widget and then call this widget


10127
11:59:23,436 --> 11:59:28,960
scaffold and just say scaffold body


10128
11:59:28,960 --> 11:59:35,596
and for the app bar create a new app bar and for its title say text and this is


10129
11:59:35,596 --> 11:59:40,400
the register view or just say register with constants okay we're just gonna


10130
11:59:40,400 --> 11:59:43,916
leave it like that i'm just gonna double check in my notes to make sure that's


10131
11:59:43,916 --> 11:59:49,360
what i had intended for the register view to actually be called yes i can see


10132
11:59:49,360 --> 11:59:53,436
that it was called register as well there great


10133
11:59:53,436 --> 11:59:56,960
so we have that now and you can see


10134
11:59:56,960 --> 12:00:01,756
now we're in the register view and there is no error i'm gonna do a hot restart


10135
12:00:01,756 --> 12:00:06,560
and we go here again and now i'm gonna press the not registered yet button and


10136
12:00:06,560 --> 12:00:10,640
you can see we are going to the register view


10137
12:00:10,640 --> 12:00:15,756
okay so now we have a good connection between


10138
12:00:15,756 --> 12:00:21,680
the login view to the register view but there is no connection backwards


10139
12:00:21,680 --> 12:00:26,560
there's no connection from the register view to the login view and that's


10140
12:00:26,560 --> 12:00:32,480
exactly what we're going to do now just as we did um


10141
12:00:32,480 --> 12:00:36,320
i'm going to take some items in my notes as well


10142
12:00:36,320 --> 12:00:40,480
so what just as we did in um


10143
12:00:41,360 --> 12:00:46,720
in the login view that i'm going to hot restart so you just uh remember you can


10144
12:00:46,720 --> 12:00:51,360
be reminded of what we did we had a login view as our login button and we


10145
12:00:51,360 --> 12:00:55,040
added a new item to go from login to register but also we want to make sure


10146
12:00:55,040 --> 12:00:59,436
that if you are already registered and you ended up on the screen then you can


10147
12:00:59,436 --> 12:01:03,596
go back to the login view okay so let's do something similar here in our


10148
12:01:03,596 --> 12:01:06,320
register view and


10149
12:01:06,320 --> 12:01:10,640
at the end of the register button here let's create a new one and we say text


10150
12:01:10,640 --> 12:01:14,560
button and uh on crest gonna get help from


10151
12:01:14,560 --> 12:01:18,560
visual studio code to create that function signature and then i'm going to


10152
12:01:18,560 --> 12:01:23,200
say child is a text that says


10153
12:01:23,200 --> 12:01:27,916
what should we say already registered


10154
12:01:27,916 --> 12:01:36,160
log in here like this okay as a constant and i comma here so we get the


10155
12:01:36,160 --> 12:01:40,560
formatting in place and now you can see the register view also has a button that


10156
12:01:40,560 --> 12:01:45,520
says if you're already registered then log in here and the login view has


10157
12:01:45,520 --> 12:01:50,800
not registered yet register here so now we have to program this and as you


10158
12:01:50,800 --> 12:01:55,276
saw in the login view we had this functionality navigator of push name


10159
12:01:55,276 --> 12:01:59,436
blah blah let's copy that functionality from the login view and bring it into


10160
12:01:59,436 --> 12:02:03,596
the register view under already registered button there


10161
12:02:03,596 --> 12:02:07,436
and instead of going to registered main route we're going to go to the login


10162
12:02:07,436 --> 12:02:10,080
name route okay and then


10163
12:02:10,080 --> 12:02:13,916
hot hot uh hot reload you don't have to hot restart


10164
12:02:13,916 --> 12:02:17,360
i'm gonna press this button and actually this is really great and


10165
12:02:17,360 --> 12:02:22,560
that's the same point that i had here


10166
12:02:22,560 --> 12:02:26,800
so uh link this okay


10167
12:02:26,800 --> 12:02:31,520
so i've talked about that i'm going to just take some items um in the


10168
12:02:31,520 --> 12:02:35,520
in my notes to make sure that i've covered all the grounds that i prepared


10169
12:02:35,520 --> 12:02:38,400
for covering basically so you can see this


10170
12:02:38,400 --> 12:02:42,400
is the exact same error that we had in the previous screen um


10171
12:02:42,400 --> 12:02:47,040
or in the previous situation that our uh register view didn't have a scaffold


10172
12:02:47,040 --> 12:02:50,400
because we went from login view and to register view and then register we


10173
12:02:50,400 --> 12:02:53,200
didn't have scaffolds so we created a scaffold here


10174
12:02:53,200 --> 12:02:56,320
if you remember okay but if you go to the login view you can see the login


10175
12:02:56,320 --> 12:03:00,320
view still returns a column and the way i mean the reason this has been working


10176
12:03:00,320 --> 12:03:05,596
so far is that because our home page had a scaffold do you remember here homepage


10177
12:03:05,596 --> 12:03:09,596
had a scaffold and the contents of login view have have


10178
12:03:09,596 --> 12:03:15,040
so far just been injected into the body of our home page and that's the reason


10179
12:03:15,040 --> 12:03:19,596
if you hot restart your application you come to this beautiful home screen it


10180
12:03:19,596 --> 12:03:24,320
says home and then you have the login view right here okay


10181
12:03:24,320 --> 12:03:27,040
so what we need now is


10182
12:03:27,040 --> 12:03:30,080
if you remember from the previous chapter we removed the scaffold from


10183
12:03:30,080 --> 12:03:33,276
their login and their register and now we're putting them back but i kind of


10184
12:03:33,276 --> 12:03:37,520
want you to understand the reasoning behind why i'm doing things i don't want


10185
12:03:37,520 --> 12:03:40,720
you to think that everything is perfect from the beginning because for me at


10186
12:03:40,720 --> 12:03:44,960
least when things are done perfectly in the beginning i always question like


10187
12:03:44,960 --> 12:03:48,880
what if this thing wasn't there and i'm just trying to make sure that we remedy


10188
12:03:48,880 --> 12:03:52,080
these things so you go through the entire journey you see what's wrong and


10189
12:03:52,080 --> 12:03:56,640
how we can fix it instead of just me presenting to you the exact right way


10190
12:03:56,640 --> 12:04:00,000
of doing things so from the beginning


10191
12:04:00,000 --> 12:04:03,596
let's go to our login view and make sure we do the same thing that we did with


10192
12:04:03,596 --> 12:04:09,040
register view and add a scaffold


10193
12:04:09,040 --> 12:04:14,560
so let's go in here and add a scaffold so i'm going to write i'm going to click


10194
12:04:14,560 --> 12:04:18,960
on it sorry i'm going to command and we're going to press command and dot


10195
12:04:18,960 --> 12:04:24,320
on it on mac or control dot on linux and windows and you say wrap with widget and


10196
12:04:24,320 --> 12:04:28,560
just say your widget is called scaffold scaffold unfortunately doesn't have a


10197
12:04:28,560 --> 12:04:33,520
child parameter so it has a body so change that parameter to body


10198
12:04:33,520 --> 12:04:37,756
and let's create an app bar for it then we say app bar


10199
12:04:37,756 --> 12:04:44,720
and it has a title and we say const text and in here we just say login


10200
12:04:44,720 --> 12:04:49,040
okay all right now


10201
12:04:49,040 --> 12:04:53,520
as you can see i mean we've now added the scaffold and as the top as the


10202
12:04:53,520 --> 12:04:56,800
caption here is telling you it says about login view is being embedded into


10203
12:04:56,800 --> 12:05:02,080
home page this isn't good so now what we need to do is to go to


10204
12:05:02,080 --> 12:05:06,880
the next uh section which is we need to remove now


10205
12:05:06,880 --> 12:05:12,720
the scaffold from our main dart or from the home page because


10206
12:05:12,720 --> 12:05:16,320
for right now home page is our login view is


10207
12:05:16,320 --> 12:05:21,276
being embedded into home page but that isn't really good enough


10208
12:05:21,276 --> 12:05:24,000
so we can't have login view with its own


10209
12:05:24,000 --> 12:05:29,360
scaffold being embedded inside a home page that already has a scaffold so


10210
12:05:29,360 --> 12:05:34,880
uh what we need to do is to remove the scaffold from our homepage uh let's see


10211
12:05:34,880 --> 12:05:38,560
if we can do that and it doesn't seem like it's working so i'm gonna go


10212
12:05:38,560 --> 12:05:42,160
and say that i'm gonna grab the future


10213
12:05:42,160 --> 12:05:44,960
builder okay and this is what you need to also do


10214
12:05:44,960 --> 12:05:48,720
grab the entire future builder and instead of returning the scaffold just


10215
12:05:48,720 --> 12:05:53,916
return your future builder just like i'm doing here


10216
12:05:55,520 --> 12:05:58,800
all right um [Music]


10217
12:05:58,800 --> 12:06:04,000
there's a lot of information and also let's make sure that our um


10218
12:06:04,000 --> 12:06:09,116
verify email view also has a scaffold because this is what we need right now


10219
12:06:09,116 --> 12:06:13,040
we need all our views to have a scaffold so i'm going to


10220
12:06:13,040 --> 12:06:18,160
embed our verify email views columns as well inside a scaffold


10221
12:06:18,160 --> 12:06:21,840
so wrap with widget and let's say scaffold


10222
12:06:21,840 --> 12:06:25,916
there is no child in scaffold remember there is a body and


10223
12:06:25,916 --> 12:06:30,480
then we say app bar is an app bar a title effect const


10224
12:06:30,480 --> 12:06:35,116
text and we say verify email something like this okay


10225
12:06:35,116 --> 12:06:39,436
good now if i command s in order to save all these changes we're gonna get an


10226
12:06:39,436 --> 12:06:43,200
error hopefully


10227
12:06:43,436 --> 12:06:48,000
which we didn't and that's also okay it's probably because we actually fixed


10228
12:06:48,000 --> 12:06:53,436
home page so it doesn't have a scaffold that's why we're not getting the error


10229
12:06:53,436 --> 12:06:57,436
so that is really good i've also explained


10230
12:06:57,436 --> 12:07:00,240
that then so let's just make sure that the


10231
12:07:00,240 --> 12:07:03,596
connection is working between these two screens so


10232
12:07:03,596 --> 12:07:07,756
login view is there you can see there is no home page any anymore displayed here


10233
12:07:07,756 --> 12:07:12,320
if you remember from before this refactoring then when we sh when we


10234
12:07:12,320 --> 12:07:16,160
showed the login view then there was the home pages app bar displayed on the


10235
12:07:16,160 --> 12:07:20,960
screen but home page right now is just a future builder that returns other things


10236
12:07:20,960 --> 12:07:23,680
such as a text of loading or the login view


10237
12:07:23,680 --> 12:07:28,720
and also here i noticed that instead of logging loading what we could do is to


10238
12:07:28,720 --> 12:07:34,000
display a circular progress indicator this is a great widget if you're if


10239
12:07:34,000 --> 12:07:38,640
you're just doing some sort of a loading that may not immediately have an end so


10240
12:07:38,640 --> 12:07:42,720
what circular progress indicator does it just shows like a loading indicator we


10241
12:07:42,720 --> 12:07:46,800
could actually comment all of this code out and just return the circular


10242
12:07:46,800 --> 12:07:51,116
progress indicator and comment the switch out as well and then press


10243
12:07:51,116 --> 12:07:54,880
command s so you actually see how it looks like it's ginormous at the moment


10244
12:07:54,880 --> 12:07:59,436
because there's no scaffold around it but if you had scaffold everything put


10245
12:07:59,436 --> 12:08:02,400
in place then you would see the circle progress indicator actually displayed


10246
12:08:02,400 --> 12:08:05,756
correctly on the screen so let's go back


10247
12:08:05,756 --> 12:08:11,200
command s so we see the log loadings sorry the login screen or the login view


10248
12:08:11,200 --> 12:08:14,840
and the connection between those screens is working as


10249
12:08:14,840 --> 12:08:19,680
well the next thing we need to do is to at the moment you see we have our login


10250
12:08:19,680 --> 12:08:24,960
view and the register view so they're in their own files but in the main guard


10251
12:08:24,960 --> 12:08:28,480
file we've kind of forgotten or maybe not forgotten we just haven't had the


10252
12:08:28,480 --> 12:08:33,596
time to do that we have the verify email view still rightly like it's just


10253
12:08:33,596 --> 12:08:37,596
displayed or it's coded in the main dart file so what we need to do is just to


10254
12:08:37,596 --> 12:08:43,276
create an an own file for it and we call it verify email view okay so go to views


10255
12:08:43,276 --> 12:08:46,320
here and right click on it new file and say


10256
12:08:46,320 --> 12:08:52,320
verify email view dot dart okay


10257
12:08:52,320 --> 12:08:56,000
and grab the code from verify email view here


10258
12:08:56,000 --> 12:09:00,000
and paste it or cut it basically and just place it


10259
12:09:00,000 --> 12:09:03,756
here and make sure all the imports are in


10260
12:09:03,756 --> 12:09:09,276
place i've already explained in previous chapters how we need to fix imports


10261
12:09:09,276 --> 12:09:13,916
so i'm not going to go into so much detail about how imports work and how we


10262
12:09:13,916 --> 12:09:17,436
should do that because i think if you've already gone through the chapters


10263
12:09:17,436 --> 12:09:21,360
chronologically then this is like obvious for you how to fix it so it kind


10264
12:09:21,360 --> 12:09:25,116
of feels like if i try to over explain all these things over and over again the


10265
12:09:25,116 --> 12:09:28,240
people who are watching this course chronologically from the beginning and


10266
12:09:28,240 --> 12:09:31,916
they're kind of gonna get bored so in the interest of not boring actual people


10267
12:09:31,916 --> 12:09:36,320
who are watching things i'm not gonna over explain so there we go that is


10268
12:09:36,320 --> 12:09:40,720
fixed and also let's make sure that we import firebase off as well so that


10269
12:09:40,720 --> 12:09:44,160
error goes away save just


10270
12:09:44,160 --> 12:09:47,596
make sure that hot we do a hot restart as well just make


10271
12:09:47,596 --> 12:09:52,640
sure everything is working as expected and it does


10272
12:09:52,840 --> 12:09:58,320
so what we need to do now also in in the interest of


10273
12:09:58,320 --> 12:10:03,596
uh following through with the plan of


10274
12:10:03,596 --> 12:10:07,840
being a good software developer what we talked about not in the previous


10275
12:10:07,840 --> 12:10:12,640
chapter but i think it was in chapter let's see it was in chapter 15 i believe


10276
12:10:12,640 --> 12:10:16,240
where we talked about git and github now we've done a lot of code things are


10277
12:10:16,240 --> 12:10:22,800
working great let's commit our code okay so as we had if i bring up the terminal


10278
12:10:22,800 --> 12:10:26,320
here i'm going to do this so you see a little bit better i'm going to bring up


10279
12:10:26,320 --> 12:10:30,320
terminal and let's go to our terminal here i can


10280
12:10:30,320 --> 12:10:34,000
see scrcpy is running in this terminal so i'm going to create a new terminal


10281
12:10:34,000 --> 12:10:37,436
here and i'm going to just say be it log and


10282
12:10:37,436 --> 12:10:41,840
you can see we had the initial commit and that was step one all right so


10283
12:10:41,840 --> 12:10:46,400
because we tagged it as a step one you see here so what we do let's just get


10284
12:10:46,400 --> 12:10:50,880
git status and we see that we've done a lot of work i'm gonna get add all the


10285
12:10:50,880 --> 12:10:54,960
files to the staging area remember from the git chapter


10286
12:10:54,960 --> 12:10:59,680
and then let me also make this a little bit bigger so you can see it better


10287
12:10:59,680 --> 12:11:02,560
um okay then i'm gonna commit and i'm gonna


10288
12:11:02,560 --> 12:11:07,360
say git commit step two like this


10289
12:11:08,320 --> 12:11:13,756
okay um and also actually before we do that i


10290
12:11:13,756 --> 12:11:19,436
believe we've missed a few things then i just look a little bit in my


10291
12:11:19,436 --> 12:11:23,756
notes just to make sure that i'm not missing things before we continue


10292
12:11:23,756 --> 12:11:27,116
if i look at um


10293
12:11:28,000 --> 12:11:31,520
yeah so what we need to actually there's one thing we missed here at the moment


10294
12:11:31,520 --> 12:11:35,116
what we're doing is saying that okay just go to the login view but one thing


10295
12:11:35,116 --> 12:11:40,320
that we've missed is to ensure that we go to the correct correct view okay so


10296
12:11:40,320 --> 12:11:45,116
what we're gonna do is we say we first get the current user so


10297
12:11:45,116 --> 12:11:48,320
we say here's the user and


10298
12:11:48,320 --> 12:11:52,000
if the user is not null


10299
12:11:52,000 --> 12:11:54,880
here and we put an else statement here as


10300
12:11:54,880 --> 12:11:58,560
well so


10301
12:11:58,560 --> 12:12:03,756
if the user is not null then we say okay


10302
12:12:03,756 --> 12:12:09,116
um if user email verified


10303
12:12:09,276 --> 12:12:14,720
so and we just say print email is verified


10304
12:12:14,720 --> 12:12:19,200
or we just return text


10305
12:12:20,240 --> 12:12:23,436
email is verified something like this okay


10306
12:12:23,436 --> 12:12:27,040
let's go back to the print so before we actually do all this maybe i


10307
12:12:27,040 --> 12:12:31,916
should explain why we're doing this so at the moment or before we started with


10308
12:12:31,916 --> 12:12:35,040
this exercise right here whenever the application was running we


10309
12:12:35,040 --> 12:12:38,560
were just going directly to the login screen but what we need to do now is to


10310
12:12:38,560 --> 12:12:41,520
now that we have three screens we have the login view register view and also


10311
12:12:41,520 --> 12:12:45,116
the verify email view is that what we call it verify email


10312
12:12:45,116 --> 12:12:48,560
view yeah we need to make sure that we're actually


10313
12:12:48,560 --> 12:12:52,960
accommodating these various conditions into returning the the correct widget so


10314
12:12:52,960 --> 12:12:56,400
here we're saying that if the user's email is verified


10315
12:12:56,400 --> 12:13:00,880
let's then say just say email is verified okay


10316
12:13:00,880 --> 12:13:06,640
and we can actually return maybe even a um


10317
12:13:08,240 --> 12:13:14,400
and we'll return something so yeah let's do that so we will return text


10318
12:13:14,400 --> 12:13:18,960
done something like that okay if the email is verified we just say


10319
12:13:18,960 --> 12:13:22,800
that your email is verified but the user doesn't see that if the email is not


10320
12:13:22,800 --> 12:13:27,596
verified we will we will basically return


10321
12:13:28,560 --> 12:13:33,680
verify email view okay so that's us basically saying that yeah you


10322
12:13:33,680 --> 12:13:40,080
need to verify your email that's if user is not null


10323
12:13:40,080 --> 12:13:44,240
now if the user is null then we send you to


10324
12:13:44,240 --> 12:13:48,720
the login view so let's go in here in the ill statement we say return login


10325
12:13:48,720 --> 12:13:53,560
view as a constant


10326
12:13:54,560 --> 12:13:58,880
so i think that should do it to be honest with you


10327
12:13:58,880 --> 12:14:03,116
return cons return log so we can remove all of this from here


10328
12:14:03,116 --> 12:14:05,436
boom


10329
12:14:05,596 --> 12:14:10,480
so let's review it upon firebase initialization being done


10330
12:14:10,480 --> 12:14:15,680
successfully we are going to check for the current user if there is a


10331
12:14:15,680 --> 12:14:19,756
user we're gonna check if the email is verified if email is verified right now


10332
12:14:19,756 --> 12:14:23,520
we're just going to say print email is verified and since we're not returning


10333
12:14:23,520 --> 12:14:27,596
anything in here the code is going to fall through to line 48 here which in


10334
12:14:27,596 --> 12:14:32,880
turn then returns just a text done okay so if you have a logged in user sorry if


10335
12:14:32,880 --> 12:14:35,596
you have a user who's logging into the application and the


10336
12:14:35,596 --> 12:14:39,916
email is verified all the user is going to see is just a text done all right


10337
12:14:39,916 --> 12:14:43,756
but if you have a user in the application whose email is not verified


10338
12:14:43,756 --> 12:14:46,160
that user is going to see the verify email view


10339
12:14:46,160 --> 12:14:50,960
if you don't have a user with firebase so that user is not logged in then we're


10340
12:14:50,960 --> 12:14:54,240
going to display the login view all right


10341
12:14:54,240 --> 12:14:58,560
a lot of information i understand this may be a little bit frustrating so


10342
12:14:58,560 --> 12:15:03,276
so now i'm going to hot restart and what you can see here is just a very ugly


10343
12:15:03,276 --> 12:15:07,360
text done displayed on the screen this means the current user in the


10344
12:15:07,360 --> 12:15:12,320
application is logged in and the email is verified and


10345
12:15:12,320 --> 12:15:15,596
it is very ugly i understand but you need to also understand the reason why


10346
12:15:15,596 --> 12:15:20,240
this is ugly at the moment and that is what happens if you do not tell flutter


10347
12:15:20,240 --> 12:15:25,840
how things need to be rendered and since our home page has a future builder


10348
12:15:25,840 --> 12:15:30,560
and nothing else surrounding it there is no scaffold there's nothing it's just a


10349
12:15:30,560 --> 12:15:35,040
text widget that's flutter telling you okay i don't even know how to render


10350
12:15:35,040 --> 12:15:38,240
things anymore i don't know what theme you're using i don't know the font size


10351
12:15:38,240 --> 12:15:41,520
i don't know the default font color so that's what happens if you don't


10352
12:15:41,520 --> 12:15:44,720
surround your widgets with a scaffold or another


10353
12:15:44,720 --> 12:15:49,916
material widget that knows how to render things okay


10354
12:15:50,080 --> 12:15:55,520
wow a lot of information again um but i hope you're sticking with me here


10355
12:15:55,520 --> 12:16:00,720
now that we've done that we can go and commit so let's have it look at our logs


10356
12:16:00,720 --> 12:16:05,276
and look at the status i'm gonna change the structure or the layout of the


10357
12:16:05,276 --> 12:16:10,160
screen so you see better and now now we see that after we did git


10358
12:16:10,160 --> 12:16:15,840
add we've also changed the main dart file with these changes so i'm gonna get


10359
12:16:15,840 --> 12:16:22,880
at that as well all those changes and i'm gonna say git commit step two okay


10360
12:16:22,880 --> 12:16:29,116
so now that's gonna be committed and we're also going to push the commit


10361
12:16:29,200 --> 12:16:33,040
and additionally we need to tag it okay because if you remember if you look at


10362
12:16:33,040 --> 12:16:36,080
the logs the first commit that we did here it was


10363
12:16:36,080 --> 12:16:38,560
tagged as step one


10364
12:16:38,560 --> 12:16:43,360
now we've committed step two but we haven't tagged it so let's go tag it


10365
12:16:43,360 --> 12:16:48,160
i'm gonna say git tag um step two


10366
12:16:48,160 --> 12:16:51,276
and then you need to push your tags with bit push


10367
12:16:51,276 --> 12:16:56,320
dash dash tags and that creates the step two tag


10368
12:16:56,320 --> 12:17:01,116
as well for you okay i understand that was a lot of


10369
12:17:01,116 --> 12:17:04,720
information but i hope you could stick with me and go through all these steps


10370
12:17:04,720 --> 12:17:10,400
so that we are ready basically for the next chapter


10371
12:17:10,560 --> 12:17:14,640
all right and also before continuing with the next chapter just ensure that


10372
12:17:14,640 --> 12:17:18,400
you're logged in because in the next chapter we're actually going to work on


10373
12:17:18,400 --> 12:17:23,116
the log out so i can see also i've planned a lot of


10374
12:17:23,116 --> 12:17:27,596
information in that chapter for you so there's lots and lots and lots of things


10375
12:17:27,596 --> 12:17:30,480
to do so it's a very exciting chapter actually


10376
12:17:30,480 --> 12:17:34,160
the next chapter and but before you continue with that just ensure that you


10377
12:17:34,160 --> 12:17:38,240
go to the login screen and ensure that you log in with the user and you just


10378
12:17:38,240 --> 12:17:42,080
see this ugly done button here okay and


10379
12:17:42,080 --> 12:17:46,400
as i mentioned in the next chapter we're going to talk about displaying a simple


10380
12:17:46,400 --> 12:17:52,240
interface to the users who are logged in and also allow those logged in users to


10381
12:17:52,240 --> 12:17:56,640
log out so get some coffee tea if you want to or


10382
12:17:56,640 --> 12:18:01,436
whatever refreshments you want and i'll see you in the next chapter


10383
12:18:01,436 --> 12:18:04,880
hello and welcome to chapter 18 of this flutter course


10384
12:18:04,880 --> 12:18:10,080
in previous chapters we've talked a lot about login and


10385
12:18:10,080 --> 12:18:13,596
registration views and and we've also talked about


10386
12:18:13,596 --> 12:18:18,160
integration with firebase we now have pretty much like our login


10387
12:18:18,160 --> 12:18:22,800
and register view well i don't want to say we've got them


10388
12:18:22,800 --> 12:18:26,560
down but we have a basic login and a basic


10389
12:18:26,560 --> 12:18:29,116
registration view um


10390
12:18:29,116 --> 12:18:32,480
if you remember from the previous chapter we kind of left the application


10391
12:18:32,480 --> 12:18:36,480
and state that if the application detected that you


10392
12:18:36,480 --> 12:18:40,400
had um you were a logged in user and that you


10393
12:18:40,400 --> 12:18:44,840
had a verified email address then we showed kind of like a


10394
12:18:44,840 --> 12:18:50,800
dirty done text on the screen and i can bring bring the screen up on my android


10395
12:18:50,800 --> 12:18:53,840
phone here and you see we kind of left it in this


10396
12:18:53,840 --> 12:18:56,560
state and i'll bring the code up as well so


10397
12:18:56,560 --> 12:19:00,720
you just get reminded of what we were doing so we


10398
12:19:00,720 --> 12:19:05,840
left the application in this state that if the user wasn't null meaning that the


10399
12:19:05,840 --> 12:19:10,560
user was present and that his or her email address was actually


10400
12:19:10,560 --> 12:19:15,116
verified we simply did a print statement in there and


10401
12:19:15,116 --> 12:19:20,160
we left it like that meaning that since our builder function


10402
12:19:20,160 --> 12:19:22,480
of


10403
12:19:22,960 --> 12:19:26,080
let me actually bring up the right caption as well


10404
12:19:26,080 --> 12:19:30,000
since the builder function of the future builder requires that you return a


10405
12:19:30,000 --> 12:19:33,916
widget by moving your mouse over you can actually see that it says required


10406
12:19:33,916 --> 12:19:38,400
widget you need to return a widget from that function


10407
12:19:38,400 --> 12:19:44,480
since it requires that what we did is just we put a like a return cons text at


10408
12:19:44,480 --> 12:19:48,640
the end of all our if statements so if none of these were present there we're


10409
12:19:48,640 --> 12:19:53,840
still returning a text okay and since that was there and in this


10410
12:19:53,840 --> 12:19:57,520
user email verified we're not returning a widget


10411
12:19:57,520 --> 12:20:03,040
then the code falls through to this line meaning that if you're a logged in user


10412
12:20:03,040 --> 12:20:07,596
and you're verified then we're returning the text off done


10413
12:20:07,680 --> 12:20:12,960
so we need to kind of um now start because you see okay before i say that


10414
12:20:12,960 --> 12:20:15,276
sentence now that we


10415
12:20:15,276 --> 12:20:19,840
are have handled the email verification view so if you're if you're a logged in


10416
12:20:19,840 --> 12:20:23,200
user but your email isn't verified we displayed it verify email and if you're


10417
12:20:23,200 --> 12:20:25,916
if you aren't registered meaning that like you don't


10418
12:20:25,916 --> 12:20:30,240
have a user then we show the login view since we've got those down what we need


10419
12:20:30,240 --> 12:20:35,116
to do now is to work on the actual main ui of our application because what you


10420
12:20:35,116 --> 12:20:40,640
can see here that says done this should be the main ui of our application so


10421
12:20:40,640 --> 12:20:44,800
users who are logged in and their emails are ready are verified should see the


10422
12:20:44,800 --> 12:20:49,520
main ui of the application so in this chapter we're actually going to


10423
12:20:49,520 --> 12:20:55,680
work on the main ui of our application and then allow the user to log out from


10424
12:20:55,680 --> 12:20:59,680
our application as well so i'm just looking at my notes to ensure i'm


10425
12:20:59,680 --> 12:21:03,840
telling you all the stuff that i plan to tell you


10426
12:21:04,400 --> 12:21:09,116
so without further ado maybe we could actually get started with that so let's


10427
12:21:09,116 --> 12:21:14,720
go into our main dart file here and create a new


10428
12:21:14,720 --> 12:21:17,116
widget


10429
12:21:17,360 --> 12:21:20,480
so i'm going to bring it up here


10430
12:21:20,480 --> 12:21:23,436
and we're going to create a new stateful widget


10431
12:21:23,436 --> 12:21:28,000
called notes view and this notes you just imagine that it


10432
12:21:28,000 --> 12:21:30,960
is the it is the main ui of the application for


10433
12:21:30,960 --> 12:21:35,276
people who are logged in okay so as i mentioned before


10434
12:21:35,276 --> 12:21:40,320
stf to create a stateful widget and then we call it um


10435
12:21:40,320 --> 12:21:44,560
notes view i believe all right


10436
12:21:45,200 --> 12:21:51,116
now what we need to do let's see it doesn't even really have a


10437
12:21:51,116 --> 12:21:55,436
scaffold or anything so maybe that's what we need to do i'm just gonna


10438
12:21:55,436 --> 12:21:58,000
go here


10439
12:21:58,160 --> 12:22:03,040
so let's go create a scaffold and an app bar for it all right


10440
12:22:03,040 --> 12:22:06,960
so we go in here into where we're returning


10441
12:22:06,960 --> 12:22:11,520
a container at the moment we just say we want a scaffold


10442
12:22:11,520 --> 12:22:17,360
and for our scaffold we want an app bar and the app bar should just be an app


10443
12:22:17,360 --> 12:22:21,840
bar with a title of um const


10444
12:22:21,840 --> 12:22:24,480
text and we just say


10445
12:22:24,480 --> 12:22:28,640
what should we call it i don't think i've got notes for that to be honest


10446
12:22:28,640 --> 12:22:32,960
with you let's just call it your notes or something like that


10447
12:22:32,960 --> 12:22:36,480
i'm gonna actually go and have a look at my notes to see


10448
12:22:36,480 --> 12:22:40,800
what i've called it in that um


10449
12:22:40,800 --> 12:22:44,160
where i was actually preparing this course for you and i can see i've


10450
12:22:44,160 --> 12:22:48,480
written main ui so let's just do that let's just say main ui in here okay so


10451
12:22:48,480 --> 12:22:51,840
we have a scaffold in there


10452
12:22:51,916 --> 12:22:56,160
so and it just says main ui and the


10453
12:22:56,160 --> 12:23:00,000
body is empty at the moment so there is nobody and if you remember from previous


10454
12:23:00,000 --> 12:23:04,080
chapters when you return a scaffold and an app bar all it does is that it


10455
12:23:04,080 --> 12:23:07,840
creates kind of like depending on your theme but usually with the light theme


10456
12:23:07,840 --> 12:23:14,400
it creates a a bluish status bar and an app bar with white text for the app bars


10457
12:23:14,400 --> 12:23:16,960
title and the rest of the content of the


10458
12:23:16,960 --> 12:23:22,480
screen is just going to be white so it's kind of like an empty container kind of


10459
12:23:22,640 --> 12:23:27,200
okay now we have that in place


10460
12:23:27,200 --> 12:23:33,276
and we are going to go to our uh


10461
12:23:33,276 --> 12:23:38,720
future builder here in our home page and instead of doing this


10462
12:23:38,720 --> 12:23:42,640
returning text done we're going to remove that and now we're


10463
12:23:42,640 --> 12:23:46,320
going to get an error saying that well the case should not complete normally


10464
12:23:46,320 --> 12:23:51,840
try adding break or return and that's basically it's complaining in this


10465
12:23:51,840 --> 12:23:56,960
line of code here for me in line 41 it may be another line of code for you


10466
12:23:56,960 --> 12:24:01,360
so it's saying that well one of the cases of your your like the entire block


10467
12:24:01,360 --> 12:24:05,520
of code that you're placing in here it doesn't always end with a return and


10468
12:24:05,520 --> 12:24:09,680
that's exactly right because in the case of user being email verified we're not


10469
12:24:09,680 --> 12:24:12,400
returning a widget and what we're going to do in here we're just going to say


10470
12:24:12,400 --> 12:24:17,520
return const to you okay


10471
12:24:18,880 --> 12:24:25,200
all right um and i'm going to press command s there and now we did a hot uh


10472
12:24:25,200 --> 12:24:30,160
reload and you can see the main ui of the application


10473
12:24:30,160 --> 12:24:33,520
and in my notes i can see here that we're going to go and place a little


10474
12:24:33,520 --> 12:24:37,436
text in our scaffold here


10475
12:24:37,436 --> 12:24:40,640
and for your app bar


10476
12:24:40,640 --> 12:24:45,436
we're good to go for the body let's just say const text


10477
12:24:45,436 --> 12:24:48,800
hello world okay


10478
12:24:48,960 --> 12:24:53,596
so now we can see the hello world displayed right there


10479
12:24:53,596 --> 12:24:57,276
i can see i have a lot of notes to be honest with you with this chapter so i'm


10480
12:24:57,276 --> 12:25:00,960
really making sure that i'm looking at my notes while i'm giving you the


10481
12:25:00,960 --> 12:25:04,480
content to ensure that you're getting all the information that i plan for you


10482
12:25:04,480 --> 12:25:08,560
to get so i apologize if i'm looking a lot at my notes it's just to


10483
12:25:08,560 --> 12:25:12,960
yeah it's just to deliver the best content for you to be honest


10484
12:25:12,960 --> 12:25:17,596
okay so we've done that hello world now


10485
12:25:17,596 --> 12:25:23,840
what we need to talk about is um the app bar class and i've provided a


10486
12:25:23,840 --> 12:25:27,360
link here for you which i'm going to


10487
12:25:27,360 --> 12:25:32,960
open on my screen and then bring to this screen so you can also see it


10488
12:25:32,960 --> 12:25:36,960
increase the size a little bit and perhaps also do this layout so you can


10489
12:25:36,960 --> 12:25:41,520
see it's um the caption as well so


10490
12:25:41,520 --> 12:25:46,240
you can see for appbar the documentation just says a material design app bar an


10491
12:25:46,240 --> 12:25:49,840
app bar consists of a toolbar and potentially other widgets so


10492
12:25:49,840 --> 12:25:54,560
all you need to do really or all you need to know about an app bar is


10493
12:25:54,560 --> 12:25:57,520
that um it it


10494
12:25:57,520 --> 12:26:01,640
it is able to display


10495
12:26:01,680 --> 12:26:06,160
various widgets i mean pretty much everything in flutter is a widget so an


10496
12:26:06,160 --> 12:26:12,560
app bar isn't an exception and an app bar consists of various


10497
12:26:12,560 --> 12:26:15,756
components the default app bar allows you to


10498
12:26:15,756 --> 12:26:20,720
display a title as you can see here in the title by default has its own styling


10499
12:26:20,720 --> 12:26:24,720
it means that it has its own left and top and


10500
12:26:24,720 --> 12:26:28,240
bottom margins so by default it's like displayed vertically in the middle of


10501
12:26:28,240 --> 12:26:32,000
your app bar as you can see in the main ui of our application so


10502
12:26:32,000 --> 12:26:35,200
pretty much every material component pretty much


10503
12:26:35,200 --> 12:26:38,800
everything you display on the screen has a theme


10504
12:26:38,800 --> 12:26:42,240
okay and an app bar has its own theme and it has


10505
12:26:42,240 --> 12:26:47,276
its own capabilities so what we're going to do the where


10506
12:26:47,276 --> 12:26:51,116
we're going to use the app bar in the main ui of our application


10507
12:26:51,116 --> 12:26:55,680
is not only to display a title but it's also to display


10508
12:26:55,680 --> 12:27:02,240
a um a little button to the far right that the user can click


10509
12:27:02,240 --> 12:27:06,720
on or tap on in in our case tap on because there'll


10510
12:27:06,720 --> 12:27:11,200
be indirect users are going to run our application on mobile devices so they're


10511
12:27:11,200 --> 12:27:16,720
going to tap and if we allowed the our application to be run on desktops


10512
12:27:16,720 --> 12:27:20,480
then they'd be able to click and maybe even tap on if they're running for for


10513
12:27:20,480 --> 12:27:23,680
instance um microsoft's


10514
12:27:23,680 --> 12:27:28,160
what is it called surface book or surface


10515
12:27:28,160 --> 12:27:31,916
lap tablets


10516
12:27:31,916 --> 12:27:36,400
so this is what an app bar is as is like


10517
12:27:36,400 --> 12:27:40,080
the gist of it and there's information here in the documentation you can see


10518
12:27:40,080 --> 12:27:43,200
here it says there's a leading space and then there's or you can actually put a


10519
12:27:43,200 --> 12:27:47,436
widget in the leading and then there's a title and then some other actions and


10520
12:27:47,436 --> 12:27:53,596
these are the things we're actually going to use actions in this um


10521
12:27:53,596 --> 12:27:57,916
in this section in this chapter of our uh


10522
12:27:57,916 --> 12:28:01,436
flutter course so you can see here for instance there's actually


10523
12:28:01,436 --> 12:28:07,436
code on how to configure an app bar with some button you can see you can press


10524
12:28:07,436 --> 12:28:11,520
the button and then you get a snack bar right here


10525
12:28:11,520 --> 12:28:15,756
okay so keep this in mind you can have a look at the documentation i really


10526
12:28:15,756 --> 12:28:21,200
actually suggest that you do that and um


10527
12:28:21,200 --> 12:28:24,400
and you can you can spend some time reading through the documentation but i


10528
12:28:24,400 --> 12:28:27,436
don't think you need to get absorbed in the documentation so much but just have


10529
12:28:27,436 --> 12:28:33,360
a look at the various parts of an app bar and try it for yourself okay


10530
12:28:33,680 --> 12:28:36,560
so um


10531
12:28:36,560 --> 12:28:41,040
i can see that i've told you about the documentaries i'm gonna um


10532
12:28:41,040 --> 12:28:44,640
i'm gonna move past that


10533
12:28:45,360 --> 12:28:51,840
so that that part is done um and now what i think we need to do


10534
12:28:51,840 --> 12:28:57,436
um is to talk about uh this print statement and why we were getting an


10535
12:28:57,436 --> 12:29:00,240
error here you see print


10536
12:29:00,240 --> 12:29:04,480
if if i if i put a print here and if i say print hello world


10537
12:29:04,480 --> 12:29:08,640
you usually get information here saying avoid print


10538
12:29:08,640 --> 12:29:13,116
calls in production code okay so


10539
12:29:13,116 --> 12:29:17,040
before we move past this because you've probably seen this quite a lot in this


10540
12:29:17,040 --> 12:29:21,680
course that i've placed print statements and then we can like for instance if i


10541
12:29:21,680 --> 12:29:26,560
bring up the debug console and just do command s on my mac or control so linux


10542
12:29:26,560 --> 12:29:29,040
and windows in order to hot reload you'll see


10543
12:29:29,040 --> 12:29:33,756
let's see actually email verify heart reload i'll restart here


10544
12:29:33,756 --> 12:29:38,080
oops see i can see that it crashed that's okay so i'm gonna go and bring up


10545
12:29:38,080 --> 12:29:41,520
scr cpy again


10546
12:29:42,560 --> 12:29:47,276
and these things do happen and that's completely fine so and i'm gonna need to


10547
12:29:47,276 --> 12:29:50,640
run the application again because i actually lost my connection with that


10548
12:29:50,640 --> 12:29:55,200
device but while that is doing its job i'm gonna tell you also about


10549
12:29:55,200 --> 12:29:59,040
print and versus a log you see


10550
12:29:59,040 --> 12:30:01,916
uh print is usually called a poor man's


10551
12:30:01,916 --> 12:30:05,436
debugger in that um if you're not a software developer you probably don't


10552
12:30:05,436 --> 12:30:08,800
know about even debugging what that means but what debugging is is it


10553
12:30:08,800 --> 12:30:11,756
essentially is is where there is a problem in your source code but you


10554
12:30:11,756 --> 12:30:15,596
don't know really where so you try to step through various lines of code in


10555
12:30:15,596 --> 12:30:18,960
your application and refine what the problem is


10556
12:30:18,960 --> 12:30:22,000
so um a lot of a lot of times when people


10557
12:30:22,000 --> 12:30:25,916
don't really either they don't have the time to debug or they believe that the


10558
12:30:25,916 --> 12:30:29,916
debugger is just too slow they start putting print statements in their


10559
12:30:29,916 --> 12:30:32,960
application and um by putting print statements in their


10560
12:30:32,960 --> 12:30:36,560
application they can kind of track where they where the application is going


10561
12:30:36,560 --> 12:30:40,800
through the various lines of code and if for instance they put a print statement


10562
12:30:40,800 --> 12:30:44,160
in a place of code where they didn't expect the application to end up and


10563
12:30:44,160 --> 12:30:47,840
then they'd be like oh okay i ended up in this code block i shouldn't have so


10564
12:30:47,840 --> 12:30:51,840
let me just check why i ended up here so it's kind of called a poor amount


10565
12:30:51,840 --> 12:30:57,360
debugging because print is a piece of code that you actually place in your


10566
12:30:57,360 --> 12:31:02,320
code so sometimes print isn't the desirable thing to do


10567
12:31:02,320 --> 12:31:06,160
in banking applications for instance you should be extremely careful what you


10568
12:31:06,160 --> 12:31:10,960
print because these things get logged and you you may think well okay they get


10569
12:31:10,960 --> 12:31:15,200
logged on that phone uh what is the problem with that


10570
12:31:15,200 --> 12:31:19,596
the problem with logging things even if it's on the phone is that you you must


10571
12:31:19,596 --> 12:31:23,840
know that the operating systems android and ios usually like the most popular


10572
12:31:23,840 --> 12:31:28,960
ones right now they keep track of your lot so these logs are actually stored in


10573
12:31:28,960 --> 12:31:32,720
a place on the operating system so you can actually read them back later so


10574
12:31:32,720 --> 12:31:36,720
there is a buffer so this information that your application may be printing to


10575
12:31:36,720 --> 12:31:41,116
the console isn't completely private except that it is stored on the phone


10576
12:31:41,116 --> 12:31:45,596
even if it's for a short while while it gets replaced by a new buffer if your


10577
12:31:45,596 --> 12:31:49,596
phone ends up in the wrong hands someone can actually get a hold of your lock so


10578
12:31:49,596 --> 12:31:55,040
imagine a banking application logs your like a login information username


10579
12:31:55,040 --> 12:31:59,596
password all that detail and even if it's only for that application you may


10580
12:31:59,596 --> 12:32:04,240
think but someone else it may actually end up in the wrong hand so that's what


10581
12:32:04,240 --> 12:32:07,756
this information is telling you avoid print calls in production code okay so


10582
12:32:07,756 --> 12:32:11,756
there is another way of doing this um


10583
12:32:11,756 --> 12:32:16,880
instead of doing prints you can actually use log


10584
12:32:16,880 --> 12:32:20,400
in your in your code and we're gonna i believe


10585
12:32:20,400 --> 12:32:24,880
we're actually going to talk about in this chapter


10586
12:32:24,880 --> 12:32:30,840
i think we're gonna talk about logging so let me have a look here in my


10587
12:32:30,840 --> 12:32:36,800
notes um yes we're actually going to talk about logging instead of printing


10588
12:32:36,800 --> 12:32:39,520
so just keep that in mind that there's a


10589
12:32:39,520 --> 12:32:43,360
better way of doing print statements if if they're if that's what you want to do


10590
12:32:43,360 --> 12:32:47,680
if that's what you want to see on the console so we're gonna fix that


10591
12:32:47,680 --> 12:32:51,040
soon and this is you see hello world information that was printed by this


10592
12:32:51,040 --> 12:32:54,880
print statement okay so sorry about that that was just a little detour but i i


10593
12:32:54,880 --> 12:32:58,080
thought it was necessary to tell you especially if you haven't done software


10594
12:32:58,080 --> 12:33:03,436
development before okay we've done the return notes view in


10595
12:33:03,436 --> 12:33:06,720
the home page we shouldn't have any print in the home page and you can see


10596
12:33:06,720 --> 12:33:10,240
this is our home page right now and we don't have any print statements let me


10597
12:33:10,240 --> 12:33:14,560
change the view a little bit all right


10598
12:33:14,560 --> 12:33:20,080
so um so what i'm gonna now describe to you is


10599
12:33:20,080 --> 12:33:26,240
that we need a an enumeration that describes our various um


10600
12:33:26,240 --> 12:33:30,320
app bar items that the user can click on you see


10601
12:33:30,320 --> 12:33:35,436
when we create our app bar and this app bar will in itself be able


10602
12:33:35,436 --> 12:33:38,800
to display something called a pop-up all


10603
12:33:38,800 --> 12:33:43,840
right so i haven't shown you how this is going to work by the end of this chapter


10604
12:33:43,840 --> 12:33:48,320
so it may be a little bit difficult to understand but just imagine that we have


10605
12:33:48,320 --> 12:33:52,480
our ui here and what we need to achieve in this chapter is to place a little


10606
12:33:52,480 --> 12:33:56,880
button here with like a dot dot either horizontally or vertically i don't


10607
12:33:56,880 --> 12:34:00,000
really know what the icon is going to be so some sort of a button here upon


10608
12:34:00,000 --> 12:34:05,040
pressing which the user will get a little fine nice


10609
12:34:05,040 --> 12:34:10,160
like a drop down and in this drop down then you can place various items like


10610
12:34:10,160 --> 12:34:13,436
log out settings blah blah blah so imagine we


10611
12:34:13,436 --> 12:34:18,800
have a drop down by pressing that button and upon pressing the log out button


10612
12:34:18,800 --> 12:34:21,756
then we're going to display a dialect to the user saying are you sure you want to


10613
12:34:21,756 --> 12:34:27,596
log out from the application so this works very nicely i mean when


10614
12:34:27,596 --> 12:34:31,680
before i say this works very nicely maybe i should explain that by pressing


10615
12:34:31,680 --> 12:34:35,360
each one of these items in the pop-up menu that we're going to display to the


10616
12:34:35,360 --> 12:34:39,916
user we are going to get a call back from the system saying oh this item got


10617
12:34:39,916 --> 12:34:43,040
pressed and you need to tell the system what


10618
12:34:43,040 --> 12:34:47,840
this item is you can either give it like an integer like a


10619
12:34:47,840 --> 12:34:52,960
numerical value or a string or even better better you can give it an


10620
12:34:52,960 --> 12:34:55,520
enumeration value if you remember from the


10621
12:34:55,520 --> 12:34:58,960
chapters where we talked about dart basics we talked about enumerations and


10622
12:34:58,960 --> 12:35:04,560
why they're important and and that they make things very easy because when you


10623
12:35:04,560 --> 12:35:08,960
specifying your enumeration and put cases in your animation


10624
12:35:08,960 --> 12:35:12,640
and then you you let me actually change this to


10625
12:35:12,640 --> 12:35:15,596
also do not do so sorry about i just remember that


10626
12:35:15,596 --> 12:35:20,800
and you give those innovation values to your pop-up menu items by press but by


10627
12:35:20,800 --> 12:35:24,560
the user pressing on any of those items you will then get that enumeration value


10628
12:35:24,560 --> 12:35:29,756
back so you can do a switch statement in your a callback and say oh which item


10629
12:35:29,756 --> 12:35:33,756
got called was it this case of the enumeration so instead of you doing like


10630
12:35:33,756 --> 12:35:36,640
integer comparisons or string comparisons you can actually use


10631
12:35:36,640 --> 12:35:41,116
enumerations which make your life a lot easier


10632
12:35:41,116 --> 12:35:44,800
so we are going to talk about that


10633
12:35:44,800 --> 12:35:49,116
soon as you can see an enumeration that describes our pop-up and we're going to


10634
12:35:49,116 --> 12:35:52,560
work on that soon


10635
12:35:53,040 --> 12:35:57,756
okay we talked about that um


10636
12:35:57,756 --> 12:36:02,400
all right so now let's talk about pop-up menu button


10637
12:36:02,400 --> 12:36:06,080
versus pop-up menu item and as you can see the caption says


10638
12:36:06,080 --> 12:36:11,040
they're usually used together and let's go actually bring up safari here and i'm


10639
12:36:11,040 --> 12:36:15,520
going to say pop-up menu item flutter and i'm going to bring up the document


10640
12:36:15,520 --> 12:36:20,560
documentation up here okay so we can have a look at it together


10641
12:36:20,560 --> 12:36:24,240
as you can see it says an item in a material design pop-up menu so this is


10642
12:36:24,240 --> 12:36:28,400
the actual menu item itself so if you imagine we're displaying a drop down


10643
12:36:28,400 --> 12:36:34,400
menu every item in that pop-up menu item is of type sorry


10644
12:36:34,400 --> 12:36:40,800
every item in the pop-up menu is of type pop-up menu item all right


10645
12:36:40,800 --> 12:36:45,200
and you can see a pop-up menu item in itself has


10646
12:36:45,200 --> 12:36:51,596
a i mean a pop-up menu item is a generic in advanced um a dart chapter we also


10647
12:36:51,596 --> 12:36:56,000
talked about generics and what a generic item in this case a pop-up menu item


10648
12:36:56,000 --> 12:37:01,116
basically is is that it has a value of this type that


10649
12:37:01,116 --> 12:37:05,040
it says is off in this case a pop-up menu item


10650
12:37:05,040 --> 12:37:09,200
is why farther is a pop-up menu item is of


10651
12:37:09,200 --> 12:37:12,400
type y farther now we don't really know why if either


10652
12:37:12,400 --> 12:37:17,040
why farther is but it could just be an enumeration okay and you can see here


10653
12:37:17,040 --> 12:37:19,436
now after you've decided decided that a


10654
12:37:19,436 --> 12:37:23,840
pop-up menu item carries a value of of this type then its


10655
12:37:23,840 --> 12:37:28,240
value should actually be specified and i can see that there is a case called


10656
12:37:28,240 --> 12:37:31,276
harder in that animation that you've assigned


10657
12:37:31,276 --> 12:37:35,200
to your pop-up menu item okay now


10658
12:37:35,200 --> 12:37:41,360
what is a pop-up menu button so let's search here pop-up menu button okay


10659
12:37:41,360 --> 12:37:45,116
let's go into the documentation here and you can see it says displays a menu when


10660
12:37:45,116 --> 12:37:50,000
pressed and calls unselected when the menu is dismissed all right so


10661
12:37:50,000 --> 12:37:53,040
um what you need to know is that the pop-up


10662
12:37:53,040 --> 12:37:58,720
menu button is the actual button that we will place on kind of on


10663
12:37:58,720 --> 12:38:02,956
our app bar upon pres upon pressing which it will display


10664
12:38:02,956 --> 12:38:08,720
a menu and you can see here in the code you see here


10665
12:38:08,720 --> 12:38:14,080
the pop-up menu button has an unselected callback and it has an


10666
12:38:14,080 --> 12:38:18,160
item builder and items inside the pop-up menu item


10667
12:38:18,160 --> 12:38:21,520
then are sorry the items inside the pop-up menu


10668
12:38:21,520 --> 12:38:26,000
button are of type pop-up menu item so


10669
12:38:26,000 --> 12:38:30,800
imagine then you have the pop-up menu button as like the parent


10670
12:38:30,800 --> 12:38:34,800
and then you will have its item builder and each of which of these items are of


10671
12:38:34,800 --> 12:38:40,160
type pop-up menu item and that's exactly what we're actually gonna do


10672
12:38:40,160 --> 12:38:44,720
in this chapter okay i'm gonna close that window i don't


10673
12:38:44,720 --> 12:38:50,800
think we need the safari window here um so


10674
12:38:50,800 --> 12:38:55,756
now i think i explained this part of the caption a little bit just now about when


10675
12:38:55,756 --> 12:39:00,160
we talked about the pop-up menu item but you can see here i've said pop-up menu


10676
12:39:00,160 --> 12:39:03,360
item has a value let's look at the code for pop-up menu items so maybe we could


10677
12:39:03,360 --> 12:39:08,160
just actually right here pop-up menu item in our code and i'm going to


10678
12:39:08,160 --> 12:39:14,160
command click on it and you can also see that a pop-up menu item has this


10679
12:39:14,160 --> 12:39:18,560
property called value okay and as you can see a pop-up menu item as i


10680
12:39:18,560 --> 12:39:23,756
mentioned before is a generic class that carries a value of type t and type d


10681
12:39:23,756 --> 12:39:27,916
basically when you see t in generics it just means something that you specified


10682
12:39:27,916 --> 12:39:34,160
so anything that's specified inside the less than and greater than size is a


10683
12:39:34,160 --> 12:39:38,560
generic name which then gets replaced at a compile


10684
12:39:38,560 --> 12:39:42,480
time with the type that you as a programmer specify okay


10685
12:39:42,480 --> 12:39:45,916
so um that's the code for the pop-up menu


10686
12:39:45,916 --> 12:39:50,080
item and you're more than welcome to drill down more into into that code to


10687
12:39:50,080 --> 12:39:54,320
understand it better so


10688
12:39:54,320 --> 12:39:59,756
let's then go and create uh our enumeration that we've now talked


10689
12:39:59,756 --> 12:40:02,560
about and


10690
12:40:02,560 --> 12:40:08,000
i'm just going to go in here right above the notes view


10691
12:40:08,000 --> 12:40:13,200
and let's then define an enumeration called menu action and in there we're


10692
12:40:13,200 --> 12:40:17,756
gonna have a case called log out okay so let's say enum


10693
12:40:17,756 --> 12:40:22,240
menu action we said we're gonna call it and then we have a case called log out


10694
12:40:22,240 --> 12:40:26,956
in there so if i do command s to hover reload then nothing happens and the dart


10695
12:40:26,956 --> 12:40:32,640
formatter i can actually see they form our code very well for us


10696
12:40:33,436 --> 12:40:37,116
so the next part that we need to take care of


10697
12:40:37,116 --> 12:40:42,160
is to actually display our pop-up menu button you can see in notes app view


10698
12:40:42,160 --> 12:40:48,880
state app bar create a pop-up menu button of type menu action


10699
12:40:48,880 --> 12:40:52,560
so in the app bar in order for us to be


10700
12:40:52,560 --> 12:40:58,560
able to display a little action there we need to um


10701
12:40:58,640 --> 12:41:02,880
actually go to the app bar here and you can see there is a property


10702
12:41:02,880 --> 12:41:07,200
called actions which is it says it's a list of widgets all right so we're gonna


10703
12:41:07,200 --> 12:41:13,116
say we need actions there okay i'm also just going to ensure that i have


10704
12:41:13,116 --> 12:41:18,320
everything here so i can see the code as well and my notes


10705
12:41:18,320 --> 12:41:21,756
i can take in my notes that we've talked about things


10706
12:41:21,756 --> 12:41:25,520
like the menu action


10707
12:41:25,520 --> 12:41:29,116
um all right and now we're gonna create the


10708
12:41:29,116 --> 12:41:33,520
um pop-up menu button all right so


10709
12:41:33,520 --> 12:41:36,956
you see the action as we saw in the source code on the website that i


10710
12:41:36,956 --> 12:41:40,800
displayed you and that i displayed to you as the documentation inside the


10711
12:41:40,800 --> 12:41:44,720
actions of our app bar then we're going to create items of type pop-up menu


10712
12:41:44,720 --> 12:41:49,436
button okay so let's go ahead and do that


10713
12:41:49,520 --> 12:41:53,436
pop-up menu button all right and then you can see it has an


10714
12:41:53,436 --> 12:41:56,880
item builder okay and and


10715
12:41:56,880 --> 12:42:01,436
i think it's actually an item builder and also unselected so


10716
12:42:01,436 --> 12:42:04,400
let's first actually take care of the unselected so i'm going to put


10717
12:42:04,400 --> 12:42:08,640
unselected command space in visual studio code on a mac and control space


10718
12:42:08,640 --> 12:42:12,320
in linux and windows in order to get this dialog get some help from visual


10719
12:42:12,320 --> 12:42:17,116
studio code to complete this code for us you see upon selected it's going to


10720
12:42:17,116 --> 12:42:22,956
return the value to us and we're telling darth in here that our pop-up menu


10721
12:42:22,956 --> 12:42:29,276
button actually manages values of type menu action all right which is what we


10722
12:42:29,276 --> 12:42:34,080
specified right here okay and you can see we're getting an error


10723
12:42:34,080 --> 12:42:37,680
saying that the named parameter item builder is required okay and we'll


10724
12:42:37,680 --> 12:42:43,360
provide that now so let's go and create a


10725
12:42:43,360 --> 12:42:47,040
item builder here get help from visual studio code with


10726
12:42:47,040 --> 12:42:50,956
the same command that i mentioned to you before


10727
12:42:50,956 --> 12:42:56,720
and in here then we're going to create a constant of a pop-up menu item


10728
12:42:56,720 --> 12:43:00,480
and we're going to say that this menu item actually manages


10729
12:43:00,480 --> 12:43:04,880
values of type menu action as well okay and we're going to say according to the


10730
12:43:04,880 --> 12:43:10,480
documentation remember every pop-up menu item has a value so a value associated


10731
12:43:10,480 --> 12:43:15,680
with it which then in turn gets passed to this unselected function


10732
12:43:15,680 --> 12:43:20,240
when this pop-up menu item is tapped okay so then we're going to say in this


10733
12:43:20,240 --> 12:43:26,000
case it has the value of menu actions when you actually log out


10734
12:43:26,000 --> 12:43:30,720
and this child is just going to be a text


10735
12:43:30,720 --> 12:43:33,436
that says log out


10736
12:43:33,436 --> 12:43:38,160
okay and as a const as well actually the entire thing is a cons so we don't have


10737
12:43:38,160 --> 12:43:42,560
to do that okay so we just uh let me have a look item


10738
12:43:42,560 --> 12:43:46,720
builder menu actions constant body might return


10739
12:43:46,720 --> 12:43:50,720
normally okay okay i see because the item builder if


10740
12:43:50,720 --> 12:43:54,320
we move our mouse over it


10741
12:43:54,720 --> 12:43:59,360
if i move the mouse over item blue you can actually see that it needs a list of


10742
12:43:59,360 --> 12:44:03,596
pop-up menu entry and you can see pop-up menu item if you


10743
12:44:03,596 --> 12:44:08,560
go to this code is actually of type pop-up menu entry so the problem we're


10744
12:44:08,560 --> 12:44:12,400
seeing here is that it says you aren't returning a list but you're just


10745
12:44:12,400 --> 12:44:15,680
returning an item so we're going to say return a list


10746
12:44:15,680 --> 12:44:21,840
and in here we just say turn that item okay


10747
12:44:21,840 --> 12:44:25,116
like that can we actually make that entire list


10748
12:44:25,116 --> 12:44:30,720
const so yeah that works as well okay i'm gonna do command s and what you'll


10749
12:44:30,720 --> 12:44:36,240
see here now is uh we've actually added log out


10750
12:44:36,240 --> 12:44:39,916
um so and you'll see here now by pressing


10751
12:44:39,916 --> 12:44:43,916
this then we'll get a beautiful pop-up menu


10752
12:44:43,916 --> 12:44:46,956
here and there is a log out item in it all


10753
12:44:46,956 --> 12:44:49,360
right so


10754
12:44:49,360 --> 12:44:56,000
that logout text there is the child of our pop-up menu item so


10755
12:44:56,000 --> 12:45:00,080
don't worry i mean don't get confused with the child and the value what you


10756
12:45:00,080 --> 12:45:04,956
need to know is that the child is what the user sees and the value is what you


10757
12:45:04,956 --> 12:45:09,436
as a programmer see because when the user then taps on that item


10758
12:45:09,436 --> 12:45:13,756
your unselected is going to get called and then we'll get that value so just to


10759
12:45:13,756 --> 12:45:18,000
test that let's go back to our print statement and say value


10760
12:45:18,000 --> 12:45:22,720
and i'm going to bring up the console here going to clear it and i'm gonna


10761
12:45:22,720 --> 12:45:27,756
change the ui layout a little bit so you see it better i'm gonna do command s and


10762
12:45:27,756 --> 12:45:31,116
then i'm gonna tap on this log out button poof


10763
12:45:31,116 --> 12:45:36,400
you'll see now our unselected got called and the out value


10764
12:45:36,400 --> 12:45:40,080
which was what you associated with your pop-up menu item


10765
12:45:40,080 --> 12:45:45,520
got printed here and got sent sent to the unselected


10766
12:45:45,520 --> 12:45:51,276
okay so we've done that part we've handled it with double quotes we haven't


10767
12:45:51,276 --> 12:45:56,800
really handled but we're just printing its value right now okay


10768
12:45:56,800 --> 12:45:59,756
so i'm just gonna go through some of the things that i


10769
12:45:59,756 --> 12:46:06,000
plan to talk to you about um


10770
12:46:06,480 --> 12:46:09,360
uh okay


10771
12:46:09,360 --> 12:46:12,880
all right so we can see that the print statement is


10772
12:46:12,880 --> 12:46:17,756
um doing its job so in the previous part of this chapter i


10773
12:46:17,756 --> 12:46:21,840
talked about why print usually isn't a good idea and


10774
12:46:21,840 --> 12:46:26,240
there is a better way of doing print and that is with logging so


10775
12:46:26,240 --> 12:46:30,560
dart itself comes pre-packed with a package called


10776
12:46:30,560 --> 12:46:34,560
developer and you can easily import developer and


10777
12:46:34,560 --> 12:46:38,956
inside the developer tools for dart there is a good function called log and


10778
12:46:38,956 --> 12:46:44,000
you can use log which is a more trustworthy and more even configurable


10779
12:46:44,000 --> 12:46:47,360
version of print and i'm going to show you how to do that


10780
12:46:47,360 --> 12:46:52,320
so in your import statements let me increase the size of the screen a little


10781
12:46:52,320 --> 12:46:56,956
bit so you see it better say import dart from dart import


10782
12:46:56,956 --> 12:47:01,200
developer okay now i haven't talked so much about


10783
12:47:01,200 --> 12:47:05,840
import statements before but import is actually configurable as well so in here


10784
12:47:05,840 --> 12:47:09,916
for instance if you look at the code inside import this dart developer


10785
12:47:09,916 --> 12:47:14,956
there's a lot of stuff that you might not need in your application okay so by


10786
12:47:14,956 --> 12:47:19,756
importing um a package or a library in your


10787
12:47:19,756 --> 12:47:23,116
program you're pretty much importing everything that that package also


10788
12:47:23,116 --> 12:47:27,040
imports so in this case extension profile or service timeline


10789
12:47:27,040 --> 12:47:31,276
and these things then get these things will then be available in


10790
12:47:31,276 --> 12:47:36,956
your workspace just by you pressing for instance for me is control space on my


10791
12:47:36,956 --> 12:47:41,756
macintosh so all these symbols will then be available right here so there's tons


10792
12:47:41,756 --> 12:47:45,680
and tons of things that are available right now in your application without


10793
12:47:45,680 --> 12:47:50,080
you having to do anything just because you imported quite a lot of things now


10794
12:47:50,080 --> 12:47:55,040
by importing the dart developer package in this case also you're making


10795
12:47:55,040 --> 12:48:00,560
all those symbols available kind of like globally inside this file at least and


10796
12:48:00,560 --> 12:48:04,080
some developers don't like that some developers kind of like to limit the


10797
12:48:04,080 --> 12:48:08,480
amount of symbols available and only have the symbols available that


10798
12:48:08,480 --> 12:48:12,240
they actually work with okay and because of this there is a good


10799
12:48:12,240 --> 12:48:16,080
functionality for import and dart where you can say show


10800
12:48:16,080 --> 12:48:20,160
and by doing a show you are telling dart that um


10801
12:48:20,160 --> 12:48:25,360
you only want to import a specific part of this package so the specific part


10802
12:48:25,360 --> 12:48:29,040
that you're interested in is a function called log


10803
12:48:29,040 --> 12:48:32,240
now after doing this you can basically go to


10804
12:48:32,240 --> 12:48:36,800
your application and then say log now a lot of developers also don't like


10805
12:48:36,800 --> 12:48:41,276
this because they think oh log where did that come from so


10806
12:48:41,276 --> 12:48:45,916
um if you want to be more specific where functions come from especially if


10807
12:48:45,916 --> 12:48:51,116
they're not your own functions or maybe even if you have few log functions maybe


10808
12:48:51,116 --> 12:48:57,116
you even have a log function in in this code right here like if you say void log


10809
12:48:57,116 --> 12:49:01,520
um like this and then you type log here


10810
12:49:01,520 --> 12:49:04,640
i mean it's there are so many logs available now i don't even know which


10811
12:49:04,640 --> 12:49:08,240
one is which so what


10812
12:49:08,240 --> 12:49:14,080
dart allows you to do is to give an alias to your import so for instance if


10813
12:49:14,080 --> 12:49:19,116
you want to use the log function that is provided in this developer package for


10814
12:49:19,116 --> 12:49:24,240
you you can actually give an alias to this entire package in this source file


10815
12:49:24,240 --> 12:49:27,680
which is the main dart file so you can say as


10816
12:49:27,680 --> 12:49:33,040
i'm going to say dev tools okay so what happens here is that the log function


10817
12:49:33,040 --> 12:49:38,956
now is not available as it was before except you have to say devtools log and


10818
12:49:38,956 --> 12:49:43,040
then you'll see that there's a log function and that's the only function


10819
12:49:43,040 --> 12:49:46,480
available inside devtools now because it says show


10820
12:49:46,480 --> 12:49:51,276
if you hadn't done the show here then devtools will have everything that


10821
12:49:51,276 --> 12:49:56,800
dev tools or the developer package in this case uh allowed you to


10822
12:49:56,800 --> 12:50:02,400
or import it into your workspace okay so do the code then as this import devtools


10823
12:50:02,400 --> 12:50:05,596
show log and the reason i'm explaining all of these is because i think these


10824
12:50:05,596 --> 12:50:09,276
are so important to understand and that


10825
12:50:09,276 --> 12:50:13,436
you need to get them like as soon as possible and now that i'm


10826
12:50:13,436 --> 12:50:17,116
explaining these things in such detail i'm not going to explain them anywhere


10827
12:50:17,116 --> 12:50:24,000
else in inside this chapter so i don't want to have like half explained


10828
12:50:24,000 --> 12:50:26,560
things that we actually need to fully


10829
12:50:26,560 --> 12:50:30,320
understand and explain half of it now and then half of it later because then


10830
12:50:30,320 --> 12:50:34,720
you may not be able to chain the information to get the entire


10831
12:50:34,720 --> 12:50:39,596
picture so that's why i'm explaining things sometimes in such great detail


10832
12:50:39,596 --> 12:50:43,756
okay now that we've done as devtools show log let's go to this print


10833
12:50:43,756 --> 12:50:49,520
statement that we put here in our notes in the unselected and then


10834
12:50:49,520 --> 12:50:52,400
say dev tools


10835
12:50:52,956 --> 12:50:55,840
log okay and you can see now that it's


10836
12:50:55,840 --> 12:51:01,116
complaining to us because it says the devtools log it doesn't allow us to


10837
12:51:01,116 --> 12:51:05,756
print a value and if you have a look at the log fi and log function signature it


10838
12:51:05,756 --> 12:51:11,116
expects a message of type string but our a menu action is an enumeration but you


10839
12:51:11,116 --> 12:51:15,360
can always say to string on an enumeration value in order to make it a


10840
12:51:15,360 --> 12:51:21,040
string so um so what we're going to do then is to


10841
12:51:21,040 --> 12:51:24,720
go and click on this log out and now you see a


10842
12:51:24,720 --> 12:51:29,200
log item being printed to the screen and it's a little bit more distinct as well


10843
12:51:29,200 --> 12:51:33,596
you can see now now that we're not using print using log make sure that your log


10844
12:51:33,596 --> 12:51:38,080
items are a little bit more distinguished inside the debug console


10845
12:51:38,080 --> 12:51:42,400
so that's also a good plus


10846
12:51:45,680 --> 12:51:51,116
all right let's go now to the next item


10847
12:51:51,916 --> 12:51:55,680
so what we're gonna do here now we have the log out


10848
12:51:55,680 --> 12:52:00,000
button here so i'm going to tap on it it says log out we have that


10849
12:52:00,000 --> 12:52:03,916
already present what we need to do now is upon pressing


10850
12:52:03,916 --> 12:52:08,560
this item we are going to display a little dialogue to the user


10851
12:52:08,560 --> 12:52:12,000
now if you're a designer you may be familiar with a dialogue and the


10852
12:52:12,000 --> 12:52:15,360
dialogue is basically like an alert displayed on the screen depending on


10853
12:52:15,360 --> 12:52:19,520
what type of operating system you're running on but both android and ios and


10854
12:52:19,520 --> 12:52:23,916
ipad os mac os windows everything they have their own


10855
12:52:23,916 --> 12:52:28,480
way of handling dialogues and dialogues are usually like a small little window


10856
12:52:28,480 --> 12:52:32,800
displayed usually in the center of the main screen where that application is


10857
12:52:32,800 --> 12:52:37,200
placed and the dialogues are configurable usually with a title with


10858
12:52:37,200 --> 12:52:42,480
the description text or even images and usually with some action buttons which


10859
12:52:42,480 --> 12:52:47,116
are called cta or call to action so


10860
12:52:47,116 --> 12:52:51,200
that is the exact same case here in flutter so upon pressing this log out


10861
12:52:51,200 --> 12:52:54,800
button we're going to display a dialogue to the user saying oh you want we see


10862
12:52:54,800 --> 12:52:57,916
that you want to log out are you sure you want to log out and then like a


10863
12:52:57,916 --> 12:53:04,720
cancel or no button and a yes button which is the call to action or cta okay


10864
12:53:04,720 --> 12:53:09,680
so um what we need to do now is to create that


10865
12:53:09,680 --> 12:53:14,400
function a function that can display an alert dialog


10866
12:53:14,400 --> 12:53:19,436
to the user and you can see here that in the caption i've mentioned write a login


10867
12:53:19,436 --> 12:53:22,640
function to display a dialog and its


10868
12:53:22,640 --> 12:53:27,040
signature is kind of like it returns a feature of boolean and if you think i


10869
12:53:27,040 --> 12:53:30,480
mean if you really think about it a dialogue that asks the user to log out


10870
12:53:30,480 --> 12:53:35,520
either has a cancel or a null button or sorry it has


10871
12:53:35,520 --> 12:53:39,360
either a cancel or no button and a


10872
12:53:39,360 --> 12:53:45,116
a call to action which does the log out so it either logs out or it doesn't


10873
12:53:45,116 --> 12:53:49,276
or basically it either confirms that you need to be logged out or it says no you


10874
12:53:49,276 --> 12:53:52,956
shouldn't be like that so it's true false okay so a boolean so boolean is


10875
12:53:52,956 --> 12:53:56,400
perfect for this case um and what we're going to do now is to


10876
12:53:56,400 --> 12:54:00,720
write a function that returns a future of that boolean saying true you have to


10877
12:54:00,720 --> 12:54:07,756
be logged out or false not and we're going to call it show logout dialog okay


10878
12:54:07,756 --> 12:54:10,640
so let's go at the bottom of this file and


10879
12:54:10,640 --> 12:54:14,800
and say future and bull


10880
12:54:14,800 --> 12:54:18,080
and as i've mentioned in the caching we're going to call the show log out


10881
12:54:18,080 --> 12:54:23,276
dialog and we say build context because we need actually context to display our


10882
12:54:23,276 --> 12:54:28,040
log out button on


10883
12:54:29,040 --> 12:54:34,400
okay a lot of information now um i'm gonna go actually a little bit back to


10884
12:54:34,400 --> 12:54:38,800
the previous caption uh because i forgot to mention something


10885
12:54:38,800 --> 12:54:43,040
there um and the important thing to mention here


10886
12:54:43,040 --> 12:54:48,956
are two things called show dialogue and alert dialogue now show dialog


10887
12:54:48,956 --> 12:54:53,596
actually let's go to alert dialog first alert dialog we can see is a class is a


10888
12:54:53,596 --> 12:54:59,436
stateless widget which defines the the dialog that gets displayed to the user


10889
12:54:59,436 --> 12:55:03,436
itself so it doesn't have any concept of being displayed to the screen or


10890
12:55:03,436 --> 12:55:07,436
what happens when the dialogue is created after that point it doesn't care


10891
12:55:07,436 --> 12:55:11,436
about that so it just performs the action of creating an alert


10892
12:55:11,436 --> 12:55:14,880
dialogue for you that's for alert dialogue but


10893
12:55:14,880 --> 12:55:18,560
you need a way to display that alert dialogue to the user and the way to do


10894
12:55:18,560 --> 12:55:24,000
that is with show i believe it's called show dialogue


10895
12:55:24,000 --> 12:55:26,800
and you can see here show dialog is a


10896
12:55:26,800 --> 12:55:33,200
function that returns an optional future or sorry a future of an optional value


10897
12:55:33,200 --> 12:55:36,480
there's a difference between an optional future and a future of an optional value


10898
12:55:36,480 --> 12:55:40,800
so in this case it's a future that always gets returned but it optionally


10899
12:55:40,800 --> 12:55:46,320
contains a value okay and you can see it says okay give me a context and then you


10900
12:55:46,320 --> 12:55:50,320
have to provide a builder to me okay and this builder should return a widget so


10901
12:55:50,320 --> 12:55:54,720
what we're gonna say is going to say show the dialogue you can see here


10902
12:55:54,720 --> 12:55:58,080
and and and builder we're going to get help from


10903
12:55:58,080 --> 12:56:00,880
visual studio code to complete it all right


10904
12:56:00,880 --> 12:56:04,640
and in here in our builder what we're going to do is we're going to actually


10905
12:56:04,640 --> 12:56:09,360
create our alert dialog okay so uh


10906
12:56:09,360 --> 12:56:13,680
let's go back to this caption so we know what we're doing what what the actual


10907
12:56:13,680 --> 12:56:17,916
goal is here okay so in


10908
12:56:17,916 --> 12:56:22,800
the builder you're responsibility is to create an alert dialogue so let's say we


10909
12:56:22,800 --> 12:56:27,040
return an alert dialog which is a widget as you


10910
12:56:27,040 --> 12:56:31,596
saw before and it has a title you can see the title


10911
12:56:31,596 --> 12:56:36,956
is a widget actually right like here is a widget


10912
12:56:37,040 --> 12:56:40,956
for the title we're going to create a const of text and


10913
12:56:40,956 --> 12:56:47,040
the text i can see we set sign out here so we're basically configuring the alert


10914
12:56:47,040 --> 12:56:50,640
dialog okay right now the title


10915
12:56:50,640 --> 12:56:55,276
then for the contents or the content also is a widget and


10916
12:56:55,276 --> 12:57:00,320
we're going to say this is also a const text and we're going to ask the user


10917
12:57:00,320 --> 12:57:05,680
are you sure you want to sign out okay just like that


10918
12:57:05,680 --> 12:57:11,040
now that we've put the title and the content in there we need to specify the


10919
12:57:11,040 --> 12:57:15,200
parameters call actions and you can see the type of this actions is list of


10920
12:57:15,200 --> 12:57:20,480
widgets all right and this is like the buttons that the user will see on this


10921
12:57:20,480 --> 12:57:24,000
alert dialog what we're going to do is going to


10922
12:57:24,000 --> 12:57:28,160
create two text buttons so i'm going to say text button all right


10923
12:57:28,160 --> 12:57:31,520
and don't worry about all these errors and things that we're seeing here this


10924
12:57:31,520 --> 12:57:34,956
is because as i mentioned in one of the previous chapters or one of the first


10925
12:57:34,956 --> 12:57:38,640
introduction chapters i think is because we have an extension here


10926
12:57:38,640 --> 12:57:43,520
called error lens and aero lens is extend expanding all these errors that


10927
12:57:43,520 --> 12:57:47,200
are happening as we type and it's displaying it on the screen it looks


10928
12:57:47,200 --> 12:57:51,520
really scary it looks like we're doing everything wrong but these these bro


10929
12:57:51,520 --> 12:57:55,596
these errors actually do make sense if you look at it it says text button the


10930
12:57:55,596 --> 12:58:00,480
named parameter on press is required but there's no corresponding blah blah so we


10931
12:58:00,480 --> 12:58:04,480
need to fix these things okay so let's go to text button and say unpressed get


10932
12:58:04,480 --> 12:58:08,880
help from visual studio go to complete it and then after that i'm pressing say


10933
12:58:08,880 --> 12:58:12,320
child so this first button is actually gonna


10934
12:58:12,320 --> 12:58:16,400
be our cancel button okay


10935
12:58:16,640 --> 12:58:21,596
so that's the first text button and copy this text button now and paste it in


10936
12:58:21,596 --> 12:58:27,360
here and instead of cancel this time say log out all right and


10937
12:58:27,360 --> 12:58:32,880
like that now you see there's a lot less information displayed on the screen and


10938
12:58:32,880 --> 12:58:37,276
it looks a lot better okay so


10939
12:58:37,276 --> 12:58:40,880
now we have an alert with two buttons cancel log out but you can see upon


10940
12:58:40,880 --> 12:58:44,880
pressing those buttons we aren't doing anything here okay and we need to fix


10941
12:58:44,880 --> 12:58:49,360
this actually so let's go ahead and first say we are returning this show


10942
12:58:49,360 --> 12:58:55,436
dialog which returns the value of boolean and now you see we get a general


10943
12:58:55,436 --> 12:58:59,436
error here saying that wait you said you're returning a future of bull but


10944
12:58:59,436 --> 12:59:03,520
this show dialogue of bull is going to return an optional so what what do you


10945
12:59:03,520 --> 12:59:07,200
mean so this is dark getting a little bit confused


10946
12:59:07,200 --> 12:59:11,756
quite correctly actually is saying that you saying that you return a boolean but


10947
12:59:11,756 --> 12:59:14,880
we know that show a dialogue returns an optional boolean so what do you want to


10948
12:59:14,880 --> 12:59:18,320
do about it and a way to fix this to be honest with you is


10949
12:59:18,320 --> 12:59:22,160
you append something called a then function


10950
12:59:22,160 --> 12:59:26,000
to the entire show dialogue saying that okay


10951
12:59:26,000 --> 12:59:29,276
if this show dialogue isn't able to return a boolean then i'm going to


10952
12:59:29,276 --> 12:59:33,756
return false otherwise return the value of the show dialogue so


10953
12:59:33,756 --> 12:59:36,800
um because i mean you may be now asking why


10954
12:59:36,800 --> 12:59:40,160
wouldn't the show dialogue return a value it either has a cancel or a logout


10955
12:59:40,160 --> 12:59:44,080
button but remember on android for instance you have these physical keys


10956
12:59:44,080 --> 12:59:49,520
i'm going to change the layout so you see this button down here if i show a


10957
12:59:49,520 --> 12:59:53,116
dialogue on the screen android users can always press this little button which


10958
12:59:53,116 --> 12:59:57,680
will then change to an arrow down that they can press on it to dismiss the


10959
12:59:57,680 --> 13:00:03,360
dialogue so they they have the ability to dismiss a dialogue without actually


10960
13:00:03,360 --> 13:00:07,200
answering a question that the dialogue asks them and ios users can sometimes


10961
13:00:07,200 --> 13:00:12,956
also tap outside a dialogue in order to cancel that dialogue so that is why show


10962
13:00:12,956 --> 13:00:16,080
dialogue says i may not be able to return


10963
13:00:16,080 --> 13:00:20,480
the value that i promised kind of to return should this or tap on any of my


10964
13:00:20,480 --> 13:00:25,680
buttons quite correctly okay so append a then statement let me change the screen


10965
13:00:25,680 --> 13:00:31,756
layout here so append event statement here which is


10966
13:00:31,756 --> 13:00:38,160
a function that gets called should this future complete so if the


10967
13:00:38,160 --> 13:00:42,080
user dismisses this dialogue this future is going to complete but it won't have a


10968
13:00:42,080 --> 13:00:46,880
value you see it is an optional bull in that case so in here we say either you


10969
13:00:46,880 --> 13:00:50,800
return a value if it's present or you return false


10970
13:00:50,800 --> 13:00:56,000
that's it okay now you see dart is quite happy about this all right


10971
13:00:56,000 --> 13:01:02,720
now what we need to also do is you see the way we're gonna


10972
13:01:02,720 --> 13:01:06,880
the way we're gonna display this dialogue is to


10973
13:01:06,880 --> 13:01:09,756
tell flutter that hey


10974
13:01:09,756 --> 13:01:15,756
this like pause everything you're doing and display this dialogue modelly on the


10975
13:01:15,756 --> 13:01:18,480
screen and this dialog is going to grab focus


10976
13:01:18,480 --> 13:01:22,720
from everything else that's on the screen so the user kind of has to go and


10977
13:01:22,720 --> 13:01:26,720
choose an item unless they want to cancel that item by for instance


10978
13:01:26,720 --> 13:01:30,320
pressing the physical key on an android phone


10979
13:01:30,320 --> 13:01:33,040
now when we display the dialog we're going


10980
13:01:33,040 --> 13:01:36,880
to use the build contents context and the navigator


10981
13:01:36,880 --> 13:01:42,800
and display the screen just like we display like a named route so


10982
13:01:42,800 --> 13:01:47,840
the show dialogue function here inside our text buttons on press it is our


10983
13:01:47,840 --> 13:01:52,720
responsibility as the alert dialogue to to dismiss ourselves


10984
13:01:52,720 --> 13:01:57,436
and it's our responsibility to actually pass a value to this show dialogue and


10985
13:01:57,436 --> 13:02:02,640
say hey this button was pressed and this is the value that it returned


10986
13:02:02,640 --> 13:02:06,240
so what you to do on these unpressed is to


10987
13:02:06,240 --> 13:02:08,680
say navigator of


10988
13:02:08,680 --> 13:02:13,360
context and then you'll say pop and then you


10989
13:02:13,360 --> 13:02:18,400
provide your value the boolean value in this case so upon cancelling we'll pop


10990
13:02:18,400 --> 13:02:22,480
with the value of false and we copy this code and we go into the


10991
13:02:22,480 --> 13:02:26,480
on press of the second text button which is log out and in this case we should we


10992
13:02:26,480 --> 13:02:29,276
say that you should basically return true


10993
13:02:29,276 --> 13:02:31,680
all right


10994
13:02:32,400 --> 13:02:35,520
that was a lot of code i understand that let's just make sure formatting is


10995
13:02:35,520 --> 13:02:39,596
correct as well put commas here before your parentheses end so the formatting


10996
13:02:39,596 --> 13:02:42,720
is a little bit nicer in that case so


10997
13:02:42,720 --> 13:02:46,880
that's our show log out dialog


10998
13:02:46,880 --> 13:02:49,276
function


10999
13:02:50,956 --> 13:02:56,956
now as the caption says what we need to do is to go and display this


11000
13:02:57,040 --> 13:03:01,520
dialogue to the user and the way to do that is


11001
13:03:01,520 --> 13:03:05,276
upon the user tapping this log out button


11002
13:03:05,276 --> 13:03:09,276
here you see the value is a menu action so what we're going to do


11003
13:03:09,276 --> 13:03:14,560
is going to um do a switch statement so we say switch


11004
13:03:14,560 --> 13:03:18,956
value and what i really like about


11005
13:03:18,956 --> 13:03:22,000
uh the this


11006
13:03:22,000 --> 13:03:25,276
warning that we're getting here saying the missing cause clause for log out


11007
13:03:25,276 --> 13:03:28,560
dart is already understanding that um


11008
13:03:28,560 --> 13:03:33,756
there's a case statement and there's a case in this menu action enumeration


11009
13:03:33,756 --> 13:03:37,756
that we're not handling and it's asking us to do that so you could tap on this


11010
13:03:37,756 --> 13:03:40,880
little here icon and say add missing case


11011
13:03:40,880 --> 13:03:45,200
clauses or you can say command dot on mac or control dot on linux and windows


11012
13:03:45,200 --> 13:03:49,680
to bring up this menu also and i've also understood from my conversations with


11013
13:03:49,680 --> 13:03:53,756
others on linkedin that this option is also available on vim


11014
13:03:53,756 --> 13:03:58,720
and other editors because this is part of the language front end actually so


11015
13:03:58,720 --> 13:04:03,520
it's not only a thing you can do in visual studio code thankfully


11016
13:04:03,520 --> 13:04:07,200
so go and add the missing case clauses


11017
13:04:07,200 --> 13:04:12,320
and in this case what we need to do now is to display our alert so we're going


11018
13:04:12,320 --> 13:04:18,956
to say await should log out or something and we say sorry final


11019
13:04:18,956 --> 13:04:22,880
should log out is equal to wait and now we're going to call this function that


11020
13:04:22,880 --> 13:04:27,680
we created show logout dialog okay


11021
13:04:28,880 --> 13:04:33,040
and now it's complaining saying that you can't do wait because this function here


11022
13:04:33,040 --> 13:04:37,040
is unselected is not asynchronous so now we're gonna make it asynchronous and


11023
13:04:37,040 --> 13:04:40,640
then we're gonna say devtools log


11024
13:04:40,640 --> 13:04:48,640
should log out to a string okay so command s and let's go to our ui now


11025
13:04:48,640 --> 13:04:51,756
and i'm going because we're doing devtools log i'm going to bring up the


11026
13:04:51,756 --> 13:04:56,000
debug console here clear it so you see better and i'm going to press the log


11027
13:04:56,000 --> 13:04:59,520
out now you see our dialogue is displayed to the user saying sign up are


11028
13:04:59,520 --> 13:05:04,400
you sure you want to sign up with our buttons pressing the cancel button where


11029
13:05:04,400 --> 13:05:07,756
we're then going to come to the unselected here and get the value of


11030
13:05:07,756 --> 13:05:12,800
false boof you see right there pressing the same button again saying


11031
13:05:12,800 --> 13:05:18,720
log out and then log out here we're going to get the value of true


11032
13:05:19,436 --> 13:05:23,680
wow that was also a lot of information so i'm just going to go to my notes and


11033
13:05:23,680 --> 13:05:26,720
ensure that i've explained everything that i want to explain


11034
13:05:26,720 --> 13:05:31,276
all right and that was done


11035
13:05:31,276 --> 13:05:34,560
now now that we've displayed amnata we can


11036
13:05:34,560 --> 13:05:38,560
actually display a dialog to the user get the true and false values back we


11037
13:05:38,560 --> 13:05:43,040
need to also ensure that we're actually logging out from firebase as well so the


11038
13:05:43,040 --> 13:05:46,480
true or false isn't enough we need to log out from firebase and the way to do


11039
13:05:46,480 --> 13:05:50,240
that as you can see in the code here in the captions is firebase auth instance


11040
13:05:50,240 --> 13:05:55,756
sign out okay so um


11041
13:05:55,756 --> 13:05:59,040
what we need to do then is to call a function


11042
13:05:59,040 --> 13:06:04,320
so we say in here um let me bring up my notes


11043
13:06:04,320 --> 13:06:10,560
so we say if should log out


11044
13:06:11,436 --> 13:06:15,840
then we are going to do that because you see this should log out says true if you


11045
13:06:15,840 --> 13:06:19,200
do have to log out and false if you don't have to so we just made sure that


11046
13:06:19,200 --> 13:06:23,360
it's true okay so you can either say it should log out or you can say if it


11047
13:06:23,360 --> 13:06:28,880
shouldn't log out then return and then you do the actual log out after


11048
13:06:28,880 --> 13:06:33,040
this so it completely depends on your style i'm just gonna do if should log


11049
13:06:33,040 --> 13:06:36,956
out because it makes more like grammatical sense for me if i should log


11050
13:06:36,956 --> 13:06:41,040
out and do this then saying if i shouldn't log out don't do this


11051
13:06:41,040 --> 13:06:44,880
it's a little bit of a preference but you're free to to choose your own style


11052
13:06:44,880 --> 13:06:48,956
as you go on so let's say firebase off


11053
13:06:48,956 --> 13:06:53,840
um instance as we can see here and then we say sign out


11054
13:06:53,840 --> 13:06:57,756
and you can see that it returns a future avoid


11055
13:06:57,756 --> 13:07:02,840
so let's call it and then we say wait oof all


11056
13:07:02,840 --> 13:07:09,116
right and now that we've done that uh after we sign the user out then


11057
13:07:09,116 --> 13:07:13,680
there's no point keeping the user in this user interface because this user


11058
13:07:13,680 --> 13:07:17,360
interface is only for people who are logged into the application and signing


11059
13:07:17,360 --> 13:07:21,596
out from firebase means that well you're not logged out anymore okay or you're


11060
13:07:21,596 --> 13:07:26,956
not signed in anymore sorry you're not logged in anymore signed in anymore


11061
13:07:26,956 --> 13:07:31,436
they could be used interchangeably sign in or log in and log out and sign up


11062
13:07:31,436 --> 13:07:37,436
depends of the lingo that you prefer to use in your in your project


11063
13:07:37,436 --> 13:07:41,276
i also use these terms interchangeably so if i say sometimes sign out or log


11064
13:07:41,276 --> 13:07:45,360
out you know what i mean all right in this case after you sign up


11065
13:07:45,360 --> 13:07:48,880
we also want to send you to the login screen because that's like the in in my


11066
13:07:48,880 --> 13:07:52,480
opinion at least it's the most common thing to do if you sign out of an


11067
13:07:52,480 --> 13:07:55,596
application you then go back to the login screen okay


11068
13:07:55,596 --> 13:07:58,400
otherwise if you for instance are developing a


11069
13:07:58,400 --> 13:08:03,276
website and then there is like a a forum website or something and


11070
13:08:03,276 --> 13:08:08,800
the user goes and logs out you may send them them to not to the login page but


11071
13:08:08,800 --> 13:08:12,560
but you may actually send them to like a read-only copy of all the forms


11072
13:08:12,560 --> 13:08:16,400
available in your in your website but since we don't have


11073
13:08:16,400 --> 13:08:20,956
any content to display to a user who has signed out the only thing we can display


11074
13:08:20,956 --> 13:08:24,800
to them is the login screen because we don't have any other content to display


11075
13:08:24,800 --> 13:08:29,756
okay so upon signing out we're gonna send you to the login screen so let's do


11076
13:08:29,756 --> 13:08:32,800
that now so we're gonna see navigator


11077
13:08:32,800 --> 13:08:38,480
as you can see in the caption of um of our context


11078
13:08:38,480 --> 13:08:43,436
and we're saying push remove push name and remove until and then we're going to


11079
13:08:43,436 --> 13:08:47,680
say login leave like that


11080
13:08:47,680 --> 13:08:53,520
and we don't need the route and just like that command s


11081
13:08:53,596 --> 13:09:01,116
all right does this make sense so let's then see if this works um


11082
13:09:01,276 --> 13:09:04,800
so let's have a look at that uh let me also


11083
13:09:04,800 --> 13:09:07,520
go to my notes to ensure that i'm explaining


11084
13:09:07,520 --> 13:09:10,520
everything


11085
13:09:10,720 --> 13:09:14,720
yep great and let's just make sure that sign


11086
13:09:14,720 --> 13:09:19,116
out is working okay so log out we say no just to test that that is working and


11087
13:09:19,116 --> 13:09:23,116
then log out and then we say log out here and i can see i'm even using the


11088
13:09:23,116 --> 13:09:26,000
language like interchangeably here which is not a good idea are you sure you want


11089
13:09:26,000 --> 13:09:30,240
to sign out and then a log out button it's not perfect but it works


11090
13:09:30,240 --> 13:09:33,680
you're free to change this if you want to and then if you say log out then we


11091
13:09:33,680 --> 13:09:37,436
should go back to the login screen perfect


11092
13:09:37,436 --> 13:09:41,200
that is working but something isn't working quite right and i'll tell you


11093
13:09:41,200 --> 13:09:44,480
soon but before we do that let's go to the terminal and


11094
13:09:44,480 --> 13:09:49,520
go to here i have two terminals one for scr cpy and the other terminal is for


11095
13:09:49,520 --> 13:09:53,916
doing commits messages i'm going to bring up actually so you see it better


11096
13:09:53,916 --> 13:09:56,640
so what we need to do as we've done in the previous chapter is now that we have


11097
13:09:56,640 --> 13:10:00,640
git and github set up let's commit our work and we're


11098
13:10:00,640 --> 13:10:05,916
going to call this step three okay so that's what we're going to do now we


11099
13:10:05,916 --> 13:10:09,596
are going to commit our work and we're also going to tag it


11100
13:10:09,596 --> 13:10:13,360
so let's say git status just to have a look at what we've changed i can see


11101
13:10:13,360 --> 13:10:17,680
that there's only changes in the main dark file and you can also say git if so


11102
13:10:17,680 --> 13:10:21,916
you can see what you've changed you see all the green ones are new and all the


11103
13:10:21,916 --> 13:10:25,040
red ones are things that you've basically removed or replaced with new


11104
13:10:25,040 --> 13:10:29,040
content for instance this one was removed this


11105
13:10:29,040 --> 13:10:32,956
one was removed and this one was added all right so quite a bit of information


11106
13:10:32,956 --> 13:10:38,400
here let's say it gets at all so we add all those to the staging environment


11107
13:10:38,400 --> 13:10:42,560
in order to commit them and then i'm going to say git commit with a message


11108
13:10:42,560 --> 13:10:46,560
of step three and let's have a look at our logs i can


11109
13:10:46,560 --> 13:10:51,680
see initial commit which is step one and then step two and then step three


11110
13:10:51,680 --> 13:10:57,040
and then you will push these changes or push the commits to github all right


11111
13:10:57,040 --> 13:11:00,240
now i'm gonna clear that terminal here and we also need to tag our code


11112
13:11:00,240 --> 13:11:04,480
remember commits are not the same thing as tags so i'm going to say git tag step


11113
13:11:04,480 --> 13:11:10,240
3 and put your tags as well


11114
13:11:10,880 --> 13:11:18,400
so that pushed the tags as well great wow that was a lot of work um


11115
13:11:18,400 --> 13:11:22,640
but uh i have to kind of say congratulations for you to


11116
13:11:22,640 --> 13:11:26,640
keep up with me in this chapter as we went through all these different bits


11117
13:11:26,640 --> 13:11:30,880
and pieces that we had to put in place for the log out to work but like at such


11118
13:11:30,880 --> 13:11:34,800
an integral part of our application that i think it's worth spending some time


11119
13:11:34,800 --> 13:11:38,480
explaining how things are working also talk about a little bit of like basics


11120
13:11:38,480 --> 13:11:42,560
of the show dialogue and menu items pop-ups


11121
13:11:42,560 --> 13:11:46,240
etc etc so once we talk about them now we don't have to talk more about them


11122
13:11:46,240 --> 13:11:49,916
later remember i told you something isn't


11123
13:11:49,916 --> 13:11:55,116
quite working right here and that's what we're going to fix in


11124
13:11:55,116 --> 13:11:59,276
the next chapter which is fixing the login screen and i'll tell you what is


11125
13:11:59,276 --> 13:12:04,800
isn't working if you now go in here and put your email address


11126
13:12:05,360 --> 13:12:09,596
and put your password in you can see pressing login doesn't do anything


11127
13:12:09,596 --> 13:12:13,276
it just logs into the application because if you go to login view and we


11128
13:12:13,276 --> 13:12:15,596
have a look at the code that we wrote here


11129
13:12:15,596 --> 13:12:19,116
let me get rid of the console here if you look at the


11130
13:12:19,116 --> 13:12:22,640
button that was pressed upon pressing it all we're doing is just we're doing a


11131
13:12:22,640 --> 13:12:27,596
print user credential and you can see that if you go here oh i can see i


11132
13:12:27,596 --> 13:12:32,956
actually got wrong password so let me go and say foo barbaz


11133
13:12:32,956 --> 13:12:35,916
oh now we got the user credential here you


11134
13:12:35,916 --> 13:12:38,800
see but still nothing worked even if you


11135
13:12:38,800 --> 13:12:41,360
provide the correct user credentials then


11136
13:12:41,360 --> 13:12:45,756
it's not working as it should and by that i mean it's not taking you to the


11137
13:12:45,756 --> 13:12:49,596
next step what should happen in the next step all right


11138
13:12:49,596 --> 13:12:52,560
so that is what we're gonna fix in the next


11139
13:12:52,560 --> 13:12:57,276
chapter we're gonna work on fixing the login view so for this chapter all you


11140
13:12:57,276 --> 13:13:02,080
all you and i did is to uh take care of our main user interface


11141
13:13:02,080 --> 13:13:08,240
we got rid of that ugly uh done text widget that we were displaying


11142
13:13:08,240 --> 13:13:14,160
at the end of the previous chapter and we have now a main ui with a


11143
13:13:14,160 --> 13:13:17,436
menu bar item on top right and pressing that


11144
13:13:17,436 --> 13:13:20,160
displays a pop-up menu


11145
13:13:20,160 --> 13:13:24,956
which has an enum item in it upon pressing which then you


11146
13:13:24,956 --> 13:13:29,360
get a dialog and then if you cancel um


11147
13:13:29,360 --> 13:13:33,116
you go back to the main ui and if you say log out or sign out you go back to


11148
13:13:33,116 --> 13:13:36,560
the long view so there was a lot of work that we did and congratulations for you


11149
13:13:36,560 --> 13:13:39,200
for keeping up so


11150
13:13:39,200 --> 13:13:43,276
uh get ready then and whatever you want to do get some refreshments and that we


11151
13:13:43,276 --> 13:13:47,040
will fix our login screen in the next chapter


11152
13:13:47,040 --> 13:13:50,640
hello and welcome to chapter 19 of the swata course


11153
13:13:50,640 --> 13:13:53,756
in the previous chapter we worked on log out


11154
13:13:53,756 --> 13:14:00,000
and after we completed log out you saw that we went to the login screen and um


11155
13:14:00,000 --> 13:14:03,200
that it wasn't really working as it should in that


11156
13:14:03,200 --> 13:14:07,916
what it was doing is um that it was logging you in with firebase and it was


11157
13:14:07,916 --> 13:14:12,800
printing the user credentials to the debug console


11158
13:14:12,800 --> 13:14:16,880
or the cons basically the console and we were seeing the logs


11159
13:14:16,880 --> 13:14:22,320
but the login view wasn't actually going to the notes view


11160
13:14:22,320 --> 13:14:25,680
so as you can see here it says the login doesn't route properly it just stays


11161
13:14:25,680 --> 13:14:29,040
there and that's does nothing upon successful login and


11162
13:14:29,040 --> 13:14:32,240
that's exactly what we're going to address in this chapter this chapter is


11163
13:14:32,240 --> 13:14:35,756
going to be quite a short one because all we're basically doing is just doing


11164
13:14:35,756 --> 13:14:40,480
some cleanup and we're going to go from the login screen to um the login view to


11165
13:14:40,480 --> 13:14:44,080
the note c and we're going to remove some um


11166
13:14:44,080 --> 13:14:46,956
law print statements um and this is like


11167
13:14:46,956 --> 13:14:50,800
what what is gonna happen as you become more and more of a software developer


11168
13:14:50,800 --> 13:14:53,840
and that sometimes you do the heavy lifting as we did in the previous


11169
13:14:53,840 --> 13:15:00,080
chapter we took care of uh logout and you learned a lot about new classes


11170
13:15:00,080 --> 13:15:06,560
like the buttons and the menus and unpressed of those menu items and then


11171
13:15:06,560 --> 13:15:09,680
after you've done that you'll probably spend some time to clean up the code and


11172
13:15:09,680 --> 13:15:13,200
this is one of those chapters that we're going to do


11173
13:15:13,200 --> 13:15:15,680
a cleanup


11174
13:15:16,160 --> 13:15:20,400
so let's have a look at the first thing that we need to remedy and that is our


11175
13:15:20,400 --> 13:15:22,880
print statements um


11176
13:15:22,880 --> 13:15:28,756
let's have a look at the code i'm going to bring up our code


11177
13:15:29,276 --> 13:15:35,840
so i think we call it my nodes so here i think is the right window


11178
13:15:35,840 --> 13:15:39,840
and i'm going to get rid of the debug console right there and i'm going to


11179
13:15:39,840 --> 13:15:44,800
bring up scrcpy which i have somewhere around here


11180
13:15:44,800 --> 13:15:48,720
okay so you can see in login view we have quite a lot of print statements at


11181
13:15:48,720 --> 13:15:52,240
the moment they just say print user not found wrong password user credentials


11182
13:15:52,240 --> 13:15:56,080
and etc and we also have a register view here


11183
13:15:56,080 --> 13:16:02,000
which has a few print statements so let's go and remedy this and use log as


11184
13:16:02,000 --> 13:16:08,160
we talked about it before so let's say i'm going to change the um


11185
13:16:08,480 --> 13:16:11,596
view layout here so you see the code a little bit better


11186
13:16:11,596 --> 13:16:15,040
let's go and use log and if you don't know the difference between log and


11187
13:16:15,040 --> 13:16:18,080
print nice drawing i strongly suggest that you watch the previous chapters


11188
13:16:18,080 --> 13:16:22,400
where we talked about this and why it is actually advised to use log instead of


11189
13:16:22,400 --> 13:16:25,436
print and login itself isn't perfect it has


11190
13:16:25,436 --> 13:16:29,040
it's not like problems but


11191
13:16:29,040 --> 13:16:33,436
not problems maybe downsize or things that you need to be aware of and i


11192
13:16:33,436 --> 13:16:37,040
highly suggest that you read the documentations for log as well but um in


11193
13:16:37,040 --> 13:16:41,200
this case as you can see it's also suggested by the analyzer not to use a


11194
13:16:41,200 --> 13:16:45,436
print so we're going to change that to both in the login view and registry


11195
13:16:45,436 --> 13:16:49,596
we're going to change that to using log so let's go ahead and say


11196
13:16:49,596 --> 13:16:56,080
import dart developer and as devtools show log all right now i'm gonna copy


11197
13:16:56,080 --> 13:17:01,436
paste this in here as well and at the same time i'm gonna clean up the code a


11198
13:17:01,436 --> 13:17:05,116
little bit in register view all right


11199
13:17:05,276 --> 13:17:10,080
okay we've done the import in login view and register you want to save those and


11200
13:17:10,080 --> 13:17:13,756
now let's go to the login view and remove all these print statements and


11201
13:17:13,756 --> 13:17:17,596
instead just say devtools log


11202
13:17:17,596 --> 13:17:21,756
and we're just going to say user credential to string okay remember print


11203
13:17:21,756 --> 13:17:25,360
can print an object if you look at the


11204
13:17:25,360 --> 13:17:28,800
information for print here excuse me


11205
13:17:28,800 --> 13:17:32,720
you can see the function signatures is that i can print an optional


11206
13:17:32,720 --> 13:17:37,840
object which is kind of peculiar that it can print an optional object i mean


11207
13:17:37,840 --> 13:17:40,160
um does it mean that i don't have to


11208
13:17:40,160 --> 13:17:44,240
actually pass a parameter no it has a positional argument but that argument


11209
13:17:44,240 --> 13:17:49,040
can be not so i could say string um


11210
13:17:49,040 --> 13:17:53,916
value is null like this like an optional and just pass that here so i animal


11211
13:17:53,916 --> 13:17:59,436
still work that's what it means so let's have fun it can accept an optional


11212
13:17:59,436 --> 13:18:03,276
object and remember every object has a function


11213
13:18:03,276 --> 13:18:07,916
called to string so this two string functions actually coming from objects


11214
13:18:07,916 --> 13:18:12,720
so we can command click on it and you'll see that uh let's see oh that


11215
13:18:12,720 --> 13:18:21,200
this is the two string of user credential but if we look at um


11216
13:18:21,840 --> 13:18:26,000
if we create for instance how do i explain the tostring and where it comes


11217
13:18:26,000 --> 13:18:27,756
from um


11218
13:18:27,756 --> 13:18:32,080
let's let's do it like this let's say we have an object


11219
13:18:32,080 --> 13:18:37,276
optional object value and that is null now i can say value to string you see


11220
13:18:37,276 --> 13:18:41,040
there's a function there so these are the op these are the


11221
13:18:41,040 --> 13:18:47,840
functions and properties that any object exposes and every class


11222
13:18:47,840 --> 13:18:50,080
in dart is


11223
13:18:50,080 --> 13:18:55,276
implicitly a subclass of object including user credential meaning that


11224
13:18:55,276 --> 13:19:00,400
user credential has inherited the tostring


11225
13:19:00,560 --> 13:19:05,276
function from the object class however if you looked at the source code for


11226
13:19:05,276 --> 13:19:08,480
this particular two string you can see it comes from package firebase off


11227
13:19:08,480 --> 13:19:14,480
firebase off the dart meaning that user credential this class has overwritten


11228
13:19:14,480 --> 13:19:18,880
the functionality of tostring meaning that it is returning its own string to


11229
13:19:18,880 --> 13:19:22,880
represent itself all right and that's this long string that we saw


11230
13:19:22,880 --> 13:19:25,596
actually we can't see it now but let me see if i


11231
13:19:25,596 --> 13:19:30,080
can log in here so you see it poof


11232
13:19:30,080 --> 13:19:33,596
and you see this user credential that is printed right here


11233
13:19:33,596 --> 13:19:38,320
let me change the screen layout a little bit so this user credential


11234
13:19:38,320 --> 13:19:41,596
so this is being printed or this is being


11235
13:19:41,596 --> 13:19:45,680
returned and calculated by the to string function on user


11236
13:19:45,680 --> 13:19:48,480
credential and you can see it looks like this user credential and then additional


11237
13:19:48,480 --> 13:19:50,880
information and then prints the additional information and that's


11238
13:19:50,880 --> 13:19:54,480
exactly what you can see here you see additional user info and then there's


11239
13:19:54,480 --> 13:19:58,240
credential which i believe


11240
13:19:59,040 --> 13:20:03,436
it should be somewhere around here is anonymous is here credential that's


11241
13:20:03,436 --> 13:20:10,160
the key and then another one called user and where could that be


11242
13:20:10,160 --> 13:20:14,880
it's somewhere in here i can't see it really but it should be somewhere in


11243
13:20:14,880 --> 13:20:17,916
here user password i mean to be honest if you


11244
13:20:17,916 --> 13:20:22,240
copied this like if i actually copied this and brought it into its own file


11245
13:20:22,240 --> 13:20:28,160
and search for user boom boom let's see


11246
13:20:28,320 --> 13:20:31,680
it's a little bit strange that it's all in one line but that's okay too i'm


11247
13:20:31,680 --> 13:20:36,240
going to search for user boom and that is the user information you can


11248
13:20:36,240 --> 13:20:42,160
see user is user display name etc so that's two string okay the reason i'm


11249
13:20:42,160 --> 13:20:45,436
explaining all of this is because you need to know that print can print an


11250
13:20:45,436 --> 13:20:50,640
object but log can't log needs a string so if you look at the function signature


11251
13:20:50,640 --> 13:20:53,436
it says give me a message of type string okay


11252
13:20:53,436 --> 13:20:56,000
so um that's what we're doing here we're


11253
13:20:56,000 --> 13:21:00,240
saying devtools log and then user credentials to string


11254
13:21:00,240 --> 13:21:05,040
we need to do the tostring okay so go ahead copy this dev tools log and


11255
13:21:05,040 --> 13:21:07,840
then let's change all these print statements


11256
13:21:07,840 --> 13:21:12,560
to say that that's what needs to be printed now or logged


11257
13:21:12,560 --> 13:21:16,080
change all of those in your login view so that you don't have any more warnings


11258
13:21:16,080 --> 13:21:19,116
here related to print okay


11259
13:21:19,116 --> 13:21:22,640
save your login view and then go to register view and do the exact same


11260
13:21:22,640 --> 13:21:25,756
thing so user credentials


11261
13:21:25,756 --> 13:21:31,520
needs to be to stream and for weak password do the same thing


11262
13:21:31,520 --> 13:21:36,240
email to the same thing and then invalid email entered and we have no other print


11263
13:21:36,240 --> 13:21:39,916
statements and what you could do i mean i haven't


11264
13:21:39,916 --> 13:21:45,756
had a plan for this uh in in my notes here i don't see


11265
13:21:45,756 --> 13:21:48,956
anywhere that i'd plan for that but i think we could just


11266
13:21:48,956 --> 13:21:51,276
uh we could just improvise a little bit and


11267
13:21:51,276 --> 13:21:54,560
what i really like to do when i'm doing like cleanups like this in my source


11268
13:21:54,560 --> 13:21:58,400
code i like to go and make sure that there's no print statement statement


11269
13:21:58,400 --> 13:22:03,276
anywhere else because it just feels like when you're clean on cleaning up your


11270
13:22:03,276 --> 13:22:06,000
code especially if you're doing something as simple as what we're doing


11271
13:22:06,000 --> 13:22:10,080
here it is worth spending maybe just a few more seconds and making sure that


11272
13:22:10,080 --> 13:22:14,240
you're applying the same cleanup in the entire source now sometimes your source


11273
13:22:14,240 --> 13:22:19,840
code may be so big and complicated that you changing even a simple bit of code


11274
13:22:19,840 --> 13:22:23,596
may affect the source code in such a way that you may not know if you're breaking


11275
13:22:23,596 --> 13:22:26,640
it or anything so


11276
13:22:26,640 --> 13:22:32,080
and for that we need tests unit tests widget tests etc but if that is the case


11277
13:22:32,080 --> 13:22:35,040
you don't have to do that but in this case since our application is so new


11278
13:22:35,040 --> 13:22:38,720
we've just created it there's not much logic in it i think it's worth maybe


11279
13:22:38,720 --> 13:22:43,200
just doing a command shift f in visual studio on mac or ctrl shift f


11280
13:22:43,200 --> 13:22:46,956
it was just here to go on linux and windows just to go go to this global


11281
13:22:46,956 --> 13:22:51,040
search and just search for print and i can see here that we don't have


11282
13:22:51,040 --> 13:22:54,800
any print left in our source code so we don't have to change anything else all


11283
13:22:54,800 --> 13:22:59,360
the prints seem to have been in the login view and in the register view so


11284
13:22:59,360 --> 13:23:03,596
don't worry about that anymore okay


11285
13:23:04,320 --> 13:23:08,840
all right that was for our prints


11286
13:23:08,840 --> 13:23:14,400
um so now what we need to do is to ensure


11287
13:23:14,400 --> 13:23:16,956
that yeah basically we need to now focus on


11288
13:23:16,956 --> 13:23:21,840
what we wanted to do in this chapter that was a side kind of like a


11289
13:23:21,840 --> 13:23:24,956
side note there to clean up our print statements what we need to do in this


11290
13:23:24,956 --> 13:23:28,956
chapter to make sure that we can go from the login view to the


11291
13:23:28,956 --> 13:23:32,560
notes view i believe is what we created in the


11292
13:23:32,560 --> 13:23:39,840
and one of the previous chapters um is it here in the main dart perhaps


11293
13:23:40,000 --> 13:23:43,436
let's see notes view yeah


11294
13:23:43,436 --> 13:23:48,160
so let's do that and you remember from the previous chapters where we oh we


11295
13:23:48,160 --> 13:23:51,680
don't need the devtools log here okay


11296
13:23:51,680 --> 13:23:54,800
if you remember from one of the previous chapters where we talked about named


11297
13:23:54,800 --> 13:23:59,680
routes and named routes as you can see that are defined in the main function


11298
13:23:59,680 --> 13:24:05,276
now remember the main function does not get recompiled


11299
13:24:05,276 --> 13:24:10,240
when you do a hot reload keep that in mind so we're now going to modify our


11300
13:24:10,240 --> 13:24:15,520
routes and allow and create a new route as you can see here it's called nodes


11301
13:24:15,520 --> 13:24:21,756
actually it should be node slash so i'm going to hide this caption


11302
13:24:21,756 --> 13:24:26,080
and change it so that it is actually accurate


11303
13:24:26,080 --> 13:24:30,240
like that um and i'm going to bring it up


11304
13:24:30,240 --> 13:24:33,916
again so you see the correct route that we have to create


11305
13:24:33,916 --> 13:24:36,560
okay so let's go in here and create a new


11306
13:24:36,560 --> 13:24:41,276
route for our notes and anybody who then


11307
13:24:41,276 --> 13:24:45,520
that tries to push this route on the screen will get


11308
13:24:45,520 --> 13:24:48,000
the notes view appear


11309
13:24:48,000 --> 13:24:53,200
on their screen okay so let's just say as a string and notes slash as the


11310
13:24:53,200 --> 13:24:58,320
captions suggest and then you have to provide remember the routes was a map


11311
13:24:58,320 --> 13:25:03,200
where the keys were strings and the values had to be functions that accept


11312
13:25:03,200 --> 13:25:07,040
the build context and return a widget it's a little bit of a string syntax but


11313
13:25:07,040 --> 13:25:10,800
you'll get used to so the value should accept the build context as you can see


11314
13:25:10,800 --> 13:25:15,756
here and it should return a widget so in this case we return the notes view okay


11315
13:25:15,756 --> 13:25:18,640
as a constant


11316
13:25:19,040 --> 13:25:24,880
okay that part is done now so what we need to do now is to ensure that


11317
13:25:24,880 --> 13:25:30,000
upon pressing the login view sorry upon press upon pressing the login button


11318
13:25:30,000 --> 13:25:36,480
that we are doing a code similar to what we did in um if you look here in


11319
13:25:36,480 --> 13:25:40,000
our login view when we went to register do you remember this navigator of


11320
13:25:40,000 --> 13:25:45,840
context push name and remove until okay so


11321
13:25:45,840 --> 13:25:50,400
we need to we need to do that and when we do this


11322
13:25:50,400 --> 13:25:54,080
when we did this initially when we worked with push name and remove until i


11323
13:25:54,080 --> 13:25:58,240
don't think i actually explained entirely what push named and remove


11324
13:25:58,240 --> 13:26:02,956
until does to be honest so i'll do that now


11325
13:26:02,956 --> 13:26:07,436
as its name suggests it pushes around on the screen so it says that you have a


11326
13:26:07,436 --> 13:26:10,956
screen and you want to put something on top of it okay so pushing is something


11327
13:26:10,956 --> 13:26:14,720
that is very popular in mobile development because


11328
13:26:14,720 --> 13:26:19,680
a mobile screen usually i mean after ios came um


11329
13:26:19,680 --> 13:26:23,116
it became very popular that you had a screen you press the button and another


11330
13:26:23,116 --> 13:26:27,840
screen got pushed on top of that screen so this has been available i mean in


11331
13:26:27,840 --> 13:26:32,000
many other places even web browsers are not doing it these days and even nokia


11332
13:26:32,000 --> 13:26:35,360
phones in in the good old days were doing the same thing but it wasn't as


11333
13:26:35,360 --> 13:26:40,320
popular back then and it wasn't like coined as a term of pushing until ios


11334
13:26:40,320 --> 13:26:43,756
and android became more and more popular back in 2007


11335
13:26:43,756 --> 13:26:46,880
so pushing is the concept of having a


11336
13:26:46,880 --> 13:26:50,480
screen and then moving and pushing physically another


11337
13:26:50,480 --> 13:26:56,080
screen on top of it okay so that's what push means in push name


11338
13:26:56,080 --> 13:27:00,000
all right the named part of this function means that you have a named


11339
13:27:00,000 --> 13:27:05,200
route so you have defined a route somewhere such as your main screen here


11340
13:27:05,200 --> 13:27:09,360
and you are trying to push that using its name so you're not just pushing a


11341
13:27:09,360 --> 13:27:13,680
new widget out of nowhere okay so that's what the name means


11342
13:27:13,680 --> 13:27:18,160
now the part that says and remove until


11343
13:27:18,160 --> 13:27:22,320
what it says is um if you have for instance one screen here


11344
13:27:22,320 --> 13:27:25,840
another one is pushed on top of it and now you want to push another one on the


11345
13:27:25,840 --> 13:27:29,200
screen what the remove until says it says if


11346
13:27:29,200 --> 13:27:32,000
you want to push this one on the screen i'm going to give you the chance to get


11347
13:27:32,000 --> 13:27:37,436
rid of the existing screen on the stack so i remove these first and then i'll


11348
13:27:37,436 --> 13:27:41,840
push yours and this is kind of useful for for instance if you're let's say you


11349
13:27:41,840 --> 13:27:46,160
have a login view and then you press the login button and


11350
13:27:46,160 --> 13:27:50,800
in the in our case when the user credentials are correct if we then


11351
13:27:50,800 --> 13:27:55,436
um if we then want to go to the notes view


11352
13:27:55,436 --> 13:28:00,000
we don't have to keep this logging view on the screen so if this login view is


11353
13:28:00,000 --> 13:28:04,080
here what we could do is to push the notes via on top of it some nodes view


11354
13:28:04,080 --> 13:28:08,800
is always sitting here but then you as a programmer not the user as a programmer


11355
13:28:08,800 --> 13:28:12,880
you'll always know that the login view is sitting behind this so


11356
13:28:12,880 --> 13:28:16,080
that's not so good because once you're logged in


11357
13:28:16,080 --> 13:28:19,276
and you're on the notes view you don't need this view anymore you don't need


11358
13:28:19,276 --> 13:28:24,160
the login view sitting there and consuming memory so that's what remove


11359
13:28:24,160 --> 13:28:28,640
until does because it gives you the opportunity it passes you see a route of


11360
13:28:28,640 --> 13:28:33,916
dynamic and it says let me know when you want me to stop


11361
13:28:33,916 --> 13:28:38,720
move removing things from the screen before i push yours and us returning


11362
13:28:38,720 --> 13:28:42,956
false basically says just remove everything don't care about


11363
13:28:42,956 --> 13:28:46,400
the routes that are on the screen at the moment and don't care about the routes


11364
13:28:46,400 --> 13:28:50,400
that you're telling me about just remove everything and go to this register view


11365
13:28:50,400 --> 13:28:53,520
okay all right that was a lot of information


11366
13:28:53,520 --> 13:28:57,756
hopefully you got that so now we need to do is to go to our login


11367
13:28:57,756 --> 13:29:04,000
view which we are right now and upon getting our user credentials here what


11368
13:29:04,000 --> 13:29:08,560
we need to do is to send the user to the um


11369
13:29:08,560 --> 13:29:11,840
main ui so i'm just gonna check in my notes that


11370
13:29:11,840 --> 13:29:15,916
i've explained everything to you before we go forward


11371
13:29:15,916 --> 13:29:20,956
and yeah that seems to be the case so um let's then go ahead and do that right


11372
13:29:20,956 --> 13:29:23,840
here what we're going to do is going to get


11373
13:29:23,840 --> 13:29:30,000
rid of this dev tools log here okay let's then go in here and say


11374
13:29:30,000 --> 13:29:33,680
and navigator of and remember we have a build context


11375
13:29:33,680 --> 13:29:37,276
and we're going to say push name and remove until


11376
13:29:37,276 --> 13:29:43,756
uh like this and our new route name is actually what's it called notes i think


11377
13:29:43,756 --> 13:29:48,720
we call it right in here yeah slash note slash


11378
13:29:48,720 --> 13:29:52,560
so put put that in there and in here you could just say


11379
13:29:52,560 --> 13:29:57,360
return false okay now this is one thing of also i haven't


11380
13:29:57,360 --> 13:30:02,400
mentioned in the previous chapters but in dart it is very important that you


11381
13:30:02,400 --> 13:30:08,240
always suffix your parameters parameter values with a


11382
13:30:08,240 --> 13:30:13,360
a comma and a comma you can see here is placed usually between parameters but


11383
13:30:13,360 --> 13:30:16,956
also the last parameter is suggested to have a comma because as you can see here


11384
13:30:16,956 --> 13:30:20,400
the dart formatter right now isn't really able to break this


11385
13:30:20,400 --> 13:30:24,640
these two parameters into two separate lines of code and that's what we usually


11386
13:30:24,640 --> 13:30:29,436
do in dart you can see here for instance when we did a wait on firebase instance


11387
13:30:29,436 --> 13:30:34,160
sign in in the last parameter we had a comma if i remove that the code will


11388
13:30:34,160 --> 13:30:38,800
actually be a little bit uglier in this it looks like this but if you put a


11389
13:30:38,800 --> 13:30:43,756
comma at the end of your last parameter dark is able to break your parameters


11390
13:30:43,756 --> 13:30:48,400
each parameter and its value in its own line and that's like a usual convention


11391
13:30:48,400 --> 13:30:51,916
in dart so if you see something like this that doesn't look quite right put a


11392
13:30:51,916 --> 13:30:55,756
comma at the end of the last parameter and press command s for dark formatter


11393
13:30:55,756 --> 13:31:00,080
to be able to format your uh code okay


11394
13:31:00,080 --> 13:31:04,400
great we've done that now and at the moment we're not using


11395
13:31:04,400 --> 13:31:09,436
the user credentials um at all so what we could do to be honest with you is to


11396
13:31:09,436 --> 13:31:13,840
get rid of that so all we'll do is we say firebase instance sign in with email


11397
13:31:13,840 --> 13:31:18,000
and password okay and um that's it because this whole


11398
13:31:18,000 --> 13:31:22,000
thing is in a try block so if this thing doesn't work properly then we'll come


11399
13:31:22,000 --> 13:31:24,880
here okay now


11400
13:31:24,880 --> 13:31:28,240
well this is great actually now we're gonna go from our


11401
13:31:28,240 --> 13:31:33,436
um login view to the notes view but you'll be a bit disappointed to see that


11402
13:31:33,436 --> 13:31:37,680
this isn't going to work as it should so let me change the


11403
13:31:37,680 --> 13:31:42,480
uh ui a little bit here and then press the login button


11404
13:31:42,480 --> 13:31:46,720
and you'll see we get an error here that says unfortunately on unknown route was


11405
13:31:46,720 --> 13:31:50,240
not set it's quite cute that they say


11406
13:31:50,240 --> 13:31:55,756
unfortunately in the uh in the actual airlocks so


11407
13:31:55,756 --> 13:32:00,000
that's what this caption also tells you you see i i talked about it a little bit


11408
13:32:00,000 --> 13:32:02,240
before when we kind of started with this


11409
13:32:02,240 --> 13:32:05,040
chapter that we said that we're going to put the


11410
13:32:05,040 --> 13:32:10,000
login as our the notes name route in the main function


11411
13:32:10,000 --> 13:32:12,400
but this is i told you that this isn't going


11412
13:32:12,400 --> 13:32:17,680
to really work so well the reason is again the main function isn't going to


11413
13:32:17,680 --> 13:32:22,400
rebuild when you do hot reload so in order for your changes in the main


11414
13:32:22,400 --> 13:32:26,480
function to take effect you need to do a hot restart so what is happening here is


11415
13:32:26,480 --> 13:32:29,756
that you've defined everything correctly everything is done right there's nothing


11416
13:32:29,756 --> 13:32:33,596
wrong in the code itself it's just the way we are executing the code that is


11417
13:32:33,596 --> 13:32:36,956
wrong and now you have to do a hot restart for flutter to be able to pick


11418
13:32:36,956 --> 13:32:40,800
up your changes in the main function as well okay so hot reload is not going to


11419
13:32:40,800 --> 13:32:45,520
do it so you need to do a hot restart so i'm going to do hot restart here


11420
13:32:45,520 --> 13:32:48,720
we come here and now you see we're in the hello world because


11421
13:32:48,720 --> 13:32:52,240
we are actually logged in from the previous section


11422
13:32:52,240 --> 13:32:56,560
um i'm going to log out and we come here now i'm going to enter


11423
13:32:56,560 --> 13:32:59,276
my details


11424
13:32:59,276 --> 13:33:03,276
foo bar baths and please don't use football bats as your password i'm


11425
13:33:03,276 --> 13:33:08,880
just doing it for the sake of simplicity and now we say login and you see that by


11426
13:33:08,880 --> 13:33:16,880
doing login we come to the main ui of the application so and as you saw


11427
13:33:16,880 --> 13:33:22,080
pushing in android using material design isn't the same thing as


11428
13:33:22,080 --> 13:33:25,916
pushing on ios let me let me demonstrate it one more time for you so you'll have


11429
13:33:25,916 --> 13:33:29,680
a good look at it in the login view enter


11430
13:33:29,680 --> 13:33:32,480
your information


11431
13:33:33,200 --> 13:33:36,956
uh through barbados and then do log in and


11432
13:33:36,956 --> 13:33:40,400
before you do that just have just make sure that you're focusing very well on


11433
13:33:40,400 --> 13:33:43,596
the screen i'm going to bring it up a little bit more


11434
13:33:43,596 --> 13:33:49,116
so you'll see better um look how this main ui of the application won't


11435
13:33:49,116 --> 13:33:53,756
actually be pushed but it instead will be kind of like moved from the bottom of


11436
13:33:53,756 --> 13:33:58,400
the screen to the top while that previous screen gets faded away so


11437
13:33:58,400 --> 13:34:02,800
focus on the screen please did you see that so


11438
13:34:02,800 --> 13:34:06,480
ios and android are going to work differently differently but the


11439
13:34:06,480 --> 13:34:11,200
concept is the same so now that the main ui is pushed to the screen where an


11440
13:34:11,200 --> 13:34:16,320
android is displayed on the screen the login view has disappeared and been


11441
13:34:16,320 --> 13:34:22,240
removed from the view stack okay so that's great that's all we have to do


11442
13:34:22,240 --> 13:34:27,756
in this chapter so i hope actually you are happy with the results and that we


11443
13:34:27,756 --> 13:34:30,720
didn't have to do too much now what we need to do also we need to make sure


11444
13:34:30,720 --> 13:34:35,200
that we do like we did in the other chapters so let's go ahead and


11445
13:34:35,200 --> 13:34:41,520
let's go and commit and tag our changes all right so we if you look at our tag


11446
13:34:41,520 --> 13:34:44,956
um if you say git tag we have now step one


11447
13:34:44,956 --> 13:34:47,436
two three and this


11448
13:34:47,436 --> 13:34:51,040
chapter in this chapter we're gonna commit our message commit our changes


11449
13:34:51,040 --> 13:34:57,276
and tag it with the tag name of step four so if you look at git log we did


11450
13:34:57,276 --> 13:35:01,040
step three in the previous chapter now we're gonna do step four so let's say


11451
13:35:01,040 --> 13:35:04,800
git add all and you can see it was just a few


11452
13:35:04,800 --> 13:35:08,720
files that we changed now let's um i'm not sorry i'm going to


11453
13:35:08,720 --> 13:35:13,200
change the screen layout i'm also going to say git commit


11454
13:35:13,200 --> 13:35:16,080
um step 4


11455
13:35:16,080 --> 13:35:19,116
okay and um


11456
13:35:19,116 --> 13:35:22,720
now let's tag it as well


11457
13:35:22,800 --> 13:35:30,720
let's push our changes to uh github and also let's get a push our tags


11458
13:35:30,720 --> 13:35:35,116
like this so if you say git tag now now we have


11459
13:35:35,116 --> 13:35:41,436
four tags and if we do its log you'll see we have step two three and


11460
13:35:41,436 --> 13:35:47,116
four and the initial commit which is step one all right well done that was


11461
13:35:47,116 --> 13:35:52,240
great and work for this chapter quite a short chapter and sweet um and now we


11462
13:35:52,240 --> 13:35:55,116
need to get ready for the next chapter as you can see in the caption here says


11463
13:35:55,116 --> 13:35:58,080
we need to clean up our routes since they are everywhere


11464
13:35:58,080 --> 13:36:02,320
and that means that you can see here we've defined our routes login register


11465
13:36:02,320 --> 13:36:06,400
nodes but also in the login view we're like redefining we're saying that


11466
13:36:06,400 --> 13:36:09,916
actually not redefining we're trying to like go to the notes route but we're


11467
13:36:09,916 --> 13:36:14,240
typing the entire route name again and this is usually in programming not a


11468
13:36:14,240 --> 13:36:18,000
good idea like if you have strings flying all over the all over the place


11469
13:36:18,000 --> 13:36:22,240
like one is defined in the main dart the other one is called in the login view


11470
13:36:22,240 --> 13:36:26,240
and this something similar is used for instance in the register view as you can


11471
13:36:26,240 --> 13:36:30,880
see here usually this means that you need to um


11472
13:36:30,880 --> 13:36:36,000
bring these into one central place and kind of reuse them and that is exactly


11473
13:36:36,000 --> 13:36:38,956
what we're gonna do in the next chapter so


11474
13:36:38,956 --> 13:36:42,080
um let's just leave it like this and i'll see you in


11475
13:36:42,080 --> 13:36:46,560
the next chapter hello and welcome to chapter 20 of this


11476
13:36:46,560 --> 13:36:50,000
flutter course in this chapter which is going to be a


11477
13:36:50,000 --> 13:36:52,956
very short one i think it's going to be the shortest chapter of all the chapters


11478
13:36:52,956 --> 13:36:57,520
we've done so far we're going to do some cleanup now


11479
13:36:57,520 --> 13:37:02,956
you can see that uh i mean i'll show you what state we left our code in in the


11480
13:37:02,956 --> 13:37:06,080
previous chapter this is what we've done so i'm gonna


11481
13:37:06,080 --> 13:37:10,560
bring up the project uh files up here


11482
13:37:10,560 --> 13:37:15,756
you will see that um the state that we left our project in was if we go to our


11483
13:37:15,756 --> 13:37:19,916
main dart we had some routes defined i'm gonna


11484
13:37:19,916 --> 13:37:23,596
do it like this you'll see it better we had some routes defined


11485
13:37:23,596 --> 13:37:28,160
and um and one was called a login which the


11486
13:37:28,160 --> 13:37:32,000
register view actually uses to send the user to the login view


11487
13:37:32,000 --> 13:37:36,240
if the user already had a


11488
13:37:36,240 --> 13:37:39,360
if the user had already registered and we don't actually have to


11489
13:37:39,360 --> 13:37:42,400
talk about that without showing it so let's


11490
13:37:42,400 --> 13:37:46,400
go here let's go here in the register view so if the user ends up in the


11491
13:37:46,400 --> 13:37:50,880
registry and they already have a username and


11492
13:37:50,880 --> 13:37:55,276
their email and password setup then they can click on this or tap on this button


11493
13:37:55,276 --> 13:38:01,436
that says already registered log in here and that happens in our


11494
13:38:01,436 --> 13:38:06,956
register view here navigator of push name and then goes to the login route


11495
13:38:06,956 --> 13:38:11,916
which is defined in main art and kind of the same thing happens in the login view


11496
13:38:11,916 --> 13:38:16,160
here so if the user doesn't have their


11497
13:38:16,160 --> 13:38:20,640
if the user hasn't registered for our service then they can actually tap on


11498
13:38:20,640 --> 13:38:23,840
not register yet register here button okay


11499
13:38:23,840 --> 13:38:28,480
and that's the register route and the third route that we have is the notes


11500
13:38:28,480 --> 13:38:34,320
route which allows us to send the user from the login screen to the main ui of


11501
13:38:34,320 --> 13:38:37,200
the application which we just call at the moment


11502
13:38:37,200 --> 13:38:43,116
notes view which right now resides inside main dart and i'll just


11503
13:38:43,116 --> 13:38:48,480
have a look at my code here and just to ensure that that is


11504
13:38:48,480 --> 13:38:51,756
what i had intended yeah so we haven't yet


11505
13:38:51,756 --> 13:38:57,116
refactored notes view and we haven't yet put it into its own file okay


11506
13:38:57,116 --> 13:39:01,596
so let's talk about hard coding now


11507
13:39:01,596 --> 13:39:04,240
if you're not a programmer like if you don't have a software development


11508
13:39:04,240 --> 13:39:08,160
background you probably don't know what hard coding is but


11509
13:39:08,160 --> 13:39:15,360
i'll i'll kind of give you the um i'll give you example maybe in different


11510
13:39:15,360 --> 13:39:19,436
worlds that may also be relevant for a programmer let's say


11511
13:39:19,436 --> 13:39:24,720
you're working in figma and you're working with a design so you have a list


11512
13:39:24,720 --> 13:39:29,756
of items to display on the screen and you create these list designs like you


11513
13:39:29,756 --> 13:39:33,596
have a little cell that should be displayed inside a view then you go and


11514
13:39:33,596 --> 13:39:38,320
copy paste this in 10 different places and then


11515
13:39:38,320 --> 13:39:41,680
you talk to the team about the design that you've created and then they say oh


11516
13:39:41,680 --> 13:39:45,276
you'd be really great if this label was a little bit bigger then what you'd have


11517
13:39:45,276 --> 13:39:50,640
to do is to go to every place that you've copy pasted that


11518
13:39:50,640 --> 13:39:54,720
cell and you have to change the label a better way of doing that in figma if


11519
13:39:54,720 --> 13:39:59,756
you're a designer would be to create a component and then create instances of


11520
13:39:59,756 --> 13:40:04,880
that design component in various pages of your figma design


11521
13:40:04,880 --> 13:40:07,756
so if so you need to update something then you


11522
13:40:07,756 --> 13:40:11,756
need to just update it in one place so


11523
13:40:11,756 --> 13:40:14,800
even if you're not coming from a design background and you're working for


11524
13:40:14,800 --> 13:40:20,080
instance as a project this is a product owner or a project manager you may be


11525
13:40:20,080 --> 13:40:24,320
working with some like um excel sheets and you're creating maybe


11526
13:40:24,320 --> 13:40:29,756
um some graphs now if you create a graph from a


11527
13:40:29,756 --> 13:40:33,200
data set you probably want to reuse that graph in


11528
13:40:33,200 --> 13:40:37,040
other places so if someone says okay can i get like all the graphs available in


11529
13:40:37,040 --> 13:40:40,240
the project then you don't go and create the same graph over and over again you


11530
13:40:40,240 --> 13:40:43,276
kind of want to refer to the same sheet in your


11531
13:40:43,276 --> 13:40:49,360
google sheets or your excel sheets so the concept is the same you don't want


11532
13:40:49,360 --> 13:40:52,880
to repeat yourself and that's what the mistake that we've done at the moment in


11533
13:40:52,880 --> 13:40:57,596
our source code in that we have our routes defined in one place however


11534
13:40:57,596 --> 13:41:01,680
where every word we're gonna use these routes we're writing their names again


11535
13:41:01,680 --> 13:41:06,240
and this is one thing that most programmers do not like


11536
13:41:06,240 --> 13:41:11,040
when you become more of a seasoned like a senior developer then you try to avoid


11537
13:41:11,040 --> 13:41:17,276
these things because if we now go to our main dart file and change this login to


11538
13:41:17,276 --> 13:41:21,680
just slash login then we have to search everywhere in our project for a name


11539
13:41:21,680 --> 13:41:27,360
route called slash login slash as it was before and change that to this new form


11540
13:41:27,360 --> 13:41:30,720
and that's not a good idea


11541
13:41:31,040 --> 13:41:35,680
that's hard coding and that is why developers don't like it and i suggest


11542
13:41:35,680 --> 13:41:40,560
that you don't like it either so uh what we're gonna do in this


11543
13:41:40,560 --> 13:41:44,560
chapter very quickly hopefully we can get done with it soon


11544
13:41:44,560 --> 13:41:50,080
uh be done with it soon we're gonna create a new file in our project is the


11545
13:41:50,080 --> 13:41:53,680
first file of its kind that we're creating where we're going to put our


11546
13:41:53,680 --> 13:41:58,080
constants okay so constants as you know from where we talked about dart are


11547
13:41:58,080 --> 13:42:01,276
values that don't change during the compile time


11548
13:42:01,276 --> 13:42:05,520
and they don't change during the runtime either so these are our route names


11549
13:42:05,520 --> 13:42:09,200
because they're always constant they're no one is going in there and changing


11550
13:42:09,200 --> 13:42:12,000
them okay so let's go ahead and do that as a


11551
13:42:12,000 --> 13:42:17,276
caption says here let's go create a fox under lib under folder called constants


11552
13:42:17,276 --> 13:42:20,800
and then routes and as i showed you before you don't have to create the


11553
13:42:20,800 --> 13:42:25,756
intermediate directories in this case constants before you create the route


11554
13:42:25,756 --> 13:42:29,276
start file what you'll need to do is just right click on lib where you want


11555
13:42:29,276 --> 13:42:34,956
to create the constants and then the lib sorry the constants folder and then um


11556
13:42:34,956 --> 13:42:40,320
route start file just right click here say new file then say constants um if i


11557
13:42:40,320 --> 13:42:44,840
can spell it um and then say


11558
13:42:44,840 --> 13:42:48,640
routes part and that will create the constants


11559
13:42:48,640 --> 13:42:53,680
folder intermediate folder for you okay so


11560
13:42:53,680 --> 13:42:57,200
what we need now is to define as the caption says here we need to define


11561
13:42:57,200 --> 13:43:01,840
three routes one for the login route one for register and the other one for the


11562
13:43:01,840 --> 13:43:05,916
notes route so let's just say const login route


11563
13:43:05,916 --> 13:43:11,360
and we just say that's equal to login slash i'm gonna copy paste this and i'm


11564
13:43:11,360 --> 13:43:14,720
just gonna in this second one just say this is


11565
13:43:14,720 --> 13:43:19,520
uh register route as the caption suggests and then the notes route okay


11566
13:43:19,520 --> 13:43:23,116
and in here i'm going to say register and in here you should say also notes


11567
13:43:23,116 --> 13:43:28,880
okay so now we've defined these three routes


11568
13:43:28,880 --> 13:43:32,480
but what we need to do now we've defined them but this is not enough what we need


11569
13:43:32,480 --> 13:43:37,436
to do is to actually go and use them so let's go back to our main dart file and


11570
13:43:37,436 --> 13:43:43,680
in here instead of using login we need to use a login route right and you can


11571
13:43:43,680 --> 13:43:47,040
see now visual studio code smart enough to understand that this is a symbol that


11572
13:43:47,040 --> 13:43:52,160
we've defined in a file here but this symbol right now isn't


11573
13:43:52,160 --> 13:43:57,840
available in the current context because we haven't imported that constant


11574
13:43:57,840 --> 13:44:00,880
routes file


11575
13:44:00,880 --> 13:44:02,880
so if i just


11576
13:44:02,880 --> 13:44:06,800
allow visual studio code to auto import that you can see all of a sudden the


11577
13:44:06,800 --> 13:44:11,200
symbol becomes a valid symbol in my current context and if i go up


11578
13:44:11,200 --> 13:44:15,596
here then i should be able to see that visual studio code has imported this


11579
13:44:15,596 --> 13:44:19,680
file for me but if you're if you're working with veeam or if you're working


11580
13:44:19,680 --> 13:44:24,400
with android studio and you're not given the opportunity to


11581
13:44:24,400 --> 13:44:28,000
uh to import you can always go to this symbol and just say


11582
13:44:28,000 --> 13:44:31,756
uh command dot or control dot depending on your operating system and just say


11583
13:44:31,756 --> 13:44:35,916
import that library and even if your


11584
13:44:35,916 --> 13:44:39,840
editor isn't smart enough to do importing in this way you can import it


11585
13:44:39,840 --> 13:44:44,956
yourself so you can just say um import


11586
13:44:44,956 --> 13:44:48,720
package then the name of the application which is my notes and then you'd say


11587
13:44:48,720 --> 13:44:54,640
constants slash routes dot darts so there you have three ways of solving the


11588
13:44:54,640 --> 13:44:59,360
same problem i usually do auto import so i don't have to type all of that um and


11589
13:44:59,360 --> 13:45:03,756
i'm not gonna explain this more than in the upcoming chapter so you have all the


11590
13:45:03,756 --> 13:45:08,240
tools necessary in order to be able to fix a problem like this okay so in here


11591
13:45:08,240 --> 13:45:10,956
i'm going to use register route and since


11592
13:45:10,956 --> 13:45:15,520
uh route start is now imported here here


11593
13:45:15,520 --> 13:45:19,040
then i'm not going to have a problem and i don't have to auto import anything


11594
13:45:19,040 --> 13:45:23,756
okay and for notes i'm going to say notes route


11595
13:45:23,756 --> 13:45:28,956
oh that's great now we've defined them in our main function however we still


11596
13:45:28,956 --> 13:45:33,436
have a few places where we're doing routing and we're hard coding those


11597
13:45:33,436 --> 13:45:39,756
routes so let's fix first our notes view which is the main ui of the application


11598
13:45:39,756 --> 13:45:45,360
so if i type here pixel tab gmail.com


11599
13:45:46,640 --> 13:45:53,040
like that and then i say um login


11600
13:45:53,916 --> 13:45:59,040
and we're getting some oh foobar baz


11601
13:46:00,320 --> 13:46:04,880
in here when we do log out that's where we sending the user to the login route


11602
13:46:04,880 --> 13:46:10,160
so let's change that as well to say login route okay so that's one place


11603
13:46:10,160 --> 13:46:14,956
uh i'm gonna then say log out here poof log out


11604
13:46:14,956 --> 13:46:19,116
so that's fixed now the other place we have to fix is in the login view as you


11605
13:46:19,116 --> 13:46:23,040
can see here where we press the not register yet


11606
13:46:23,040 --> 13:46:26,240
register here button so let's go to the login view


11607
13:46:26,240 --> 13:46:30,480
in our views in login view i'm going to get rid of the explorer


11608
13:46:30,480 --> 13:46:33,200
there in the


11609
13:46:33,200 --> 13:46:38,320
in this button not registered yet let's see where it is


11610
13:46:38,320 --> 13:46:41,840
here you see we're sending the user to the


11611
13:46:41,840 --> 13:46:46,000
register route so i'm going to send them instead to register router and you can


11612
13:46:46,000 --> 13:46:49,680
see you should code smart enough again to do auto import so i'm going to take


11613
13:46:49,680 --> 13:46:52,400
that option and also we have another route here


11614
13:46:52,400 --> 13:46:57,436
which sends you to notes where you have successfully logged in so let's


11615
13:46:57,436 --> 13:47:02,080
just say notes route okay so that's for our login view


11616
13:47:02,080 --> 13:47:06,560
and now the other place that we have to fix is in register so go to your project


11617
13:47:06,560 --> 13:47:10,240
explorer and then go to register view and have a look at where we're doing


11618
13:47:10,240 --> 13:47:15,200
this login button here okay and


11619
13:47:15,200 --> 13:47:21,360
let's then say instead of that we're just going to say


11620
13:47:21,680 --> 13:47:26,720
login routes okay so if you now search for push name and


11621
13:47:26,720 --> 13:47:32,400
remove until and then show the results if you click through them you shouldn't


11622
13:47:32,400 --> 13:47:35,756
have any routes that is hard coded okay so


11623
13:47:35,756 --> 13:47:41,680
nodes route register route and the login route so


11624
13:47:41,680 --> 13:47:47,040
now we fix this and just remember because we now have changed the main


11625
13:47:47,040 --> 13:47:51,436
function here and we have some routes here do you have to do hot restart in


11626
13:47:51,436 --> 13:47:55,596
order to see your changes but if everything's working according to the


11627
13:47:55,596 --> 13:48:00,640
plan and that we didn't like to make any wrong choices in our rat names and that


11628
13:48:00,640 --> 13:48:04,560
we gave them the same name or anything which we haven't


11629
13:48:04,560 --> 13:48:07,840
if everything is working like it did before then you shouldn't see any


11630
13:48:07,840 --> 13:48:13,840
changes in here so if you enter your information like you did before


11631
13:48:13,840 --> 13:48:17,840
and i say foobar about then i should be able to log in


11632
13:48:17,840 --> 13:48:21,680
should be able to log out and i should be able to go to register


11633
13:48:21,680 --> 13:48:26,956
view or the login view so it's working exactly as it did before


11634
13:48:26,956 --> 13:48:31,040
okay all right great stuff that was a quick


11635
13:48:31,040 --> 13:48:36,320
chapter as other chapters since now we have made some changes and we've


11636
13:48:36,320 --> 13:48:40,320
actually made the code better and we've tested to make sure everything works


11637
13:48:40,320 --> 13:48:46,240
fine it's time to commit our changes as you can see the previous chapter we


11638
13:48:46,240 --> 13:48:51,756
committed our changes as step 4 and in this chapter we're gonna commit


11639
13:48:51,756 --> 13:48:55,360
our changes as step five and we're also going to


11640
13:48:55,360 --> 13:48:58,800
um we're also going to tag it like we did


11641
13:48:58,800 --> 13:49:01,436
before and let me change the


11642
13:49:01,436 --> 13:49:06,240
layout as well so you'll see the terminal a little bit better i'm gonna


11643
13:49:06,240 --> 13:49:10,720
do it like this gonna make the terminal bigger even so you see it even better


11644
13:49:10,720 --> 13:49:16,000
so let's go ahead and see what the status is i can see there are lots of


11645
13:49:16,000 --> 13:49:19,840
changes as you can see here it says you've made changes you modified these


11646
13:49:19,840 --> 13:49:24,400
existing files and now all of a sudden there's a new folder as well so what i


11647
13:49:24,400 --> 13:49:29,360
like to do in these cases when there is a new folder i like to do bits add all


11648
13:49:29,360 --> 13:49:32,720
because this adds all the files and folders


11649
13:49:32,720 --> 13:49:37,200
so you can take it at all and if you say git status now you can see


11650
13:49:37,200 --> 13:49:42,000
the new folder including its content is now added to the staging environment or


11651
13:49:42,000 --> 13:49:44,956
the staging area


11652
13:49:45,200 --> 13:49:49,520
okay now we've staged so now let's commit and we say we said that we are


11653
13:49:49,520 --> 13:49:56,400
going to commit and tag as step five so let's say step five um and then get


11654
13:49:56,400 --> 13:50:00,400
tag um step five as well get push your


11655
13:50:00,400 --> 13:50:04,956
changes and then give push the tags as well


11656
13:50:04,956 --> 13:50:08,240
all right so if i say you tag now we have five tags


11657
13:50:08,240 --> 13:50:13,200
and if i say gitland we have step five four three two and then the initial


11658
13:50:13,200 --> 13:50:16,800
commit which is pretty much step one all right so


11659
13:50:16,800 --> 13:50:20,880
great stuff well done for going through this chapter so fast as well together


11660
13:50:20,880 --> 13:50:25,680
with me and what we need to do now is to get ready for the next chapter


11661
13:50:25,680 --> 13:50:29,916
and just to give you a little preview what we're going to work on is to have a


11662
13:50:29,916 --> 13:50:34,720
look at our error handling in specifically the login view so if i make


11663
13:50:34,720 --> 13:50:39,116
this a little bit smaller so it's more digestible you can see at the moment our


11664
13:50:39,116 --> 13:50:43,040
error handling the reason i put quotation marks around it is that it's


11665
13:50:43,040 --> 13:50:46,880
not so much of an error handling to be honest with you what it is doing is just


11666
13:50:46,880 --> 13:50:52,400
says if an error of this type happens then log this message to the console a


11667
13:50:52,400 --> 13:50:56,956
normal user sitting with their phone they don't have access to logs they're


11668
13:50:56,956 --> 13:51:01,916
not going to see any logs so logs are very very much useless for them and what


11669
13:51:01,916 --> 13:51:05,756
we're going to do in the next chapter is actually display meaningful information


11670
13:51:05,756 --> 13:51:10,080
to the user using some alert views and


11671
13:51:10,080 --> 13:51:14,080
dialogues so grab your refreshments if you want to


11672
13:51:14,080 --> 13:51:19,916
and i'll see you in the next chapter hello and welcome to chapter 21 of this


11673
13:51:19,916 --> 13:51:23,276
flutter course in the previous chapter as you remember


11674
13:51:23,276 --> 13:51:27,916
we talked about cleaning up the routes that we have in our main function and we


11675
13:51:27,916 --> 13:51:33,200
put them inside their own dart files so that they are separate from um so we're


11676
13:51:33,200 --> 13:51:36,240
basically not hard coding hard coding them in different places of the


11677
13:51:36,240 --> 13:51:39,360
application we talked about what hard coding also is


11678
13:51:39,360 --> 13:51:43,276
if you're not coming from a software development background and why it is


11679
13:51:43,276 --> 13:51:47,276
usually a good thing not to hard code your strings and spread them around in


11680
13:51:47,276 --> 13:51:52,956
the entire code base in this chapter we are going to focus on


11681
13:51:52,956 --> 13:51:56,720
cleaning up error handling in our login view to


11682
13:51:56,720 --> 13:52:00,956
start with if you remember our login view at the moment


11683
13:52:00,956 --> 13:52:04,080
actually i don't have to say if you remember because i can bring up the code


11684
13:52:04,080 --> 13:52:10,160
so we can have a look at it together here is our


11685
13:52:10,160 --> 13:52:14,000
code i'm going to bring up scrcpy here as


11686
13:52:14,000 --> 13:52:18,800
well so you can see the android phone working okay


11687
13:52:18,800 --> 13:52:23,040
so i'm going to also change a little bit the um


11688
13:52:23,040 --> 13:52:29,520
screen layout so if you remember uh we have our login view right here probably


11689
13:52:29,520 --> 13:52:33,756
have to move some things around here so it becomes a little bit better layout


11690
13:52:33,756 --> 13:52:37,916
let's go to login view and we have then our


11691
13:52:37,916 --> 13:52:41,436
um lock statements here should anything go


11692
13:52:41,436 --> 13:52:45,840
wrong so if we could sign in with an email and a


11693
13:52:45,840 --> 13:52:50,320
password then we were pushing the notes route onto the screen


11694
13:52:50,320 --> 13:52:54,640
but if there was a problem with our firebase authentication and we got a


11695
13:52:54,640 --> 13:52:59,276
firebase auth exception we are simply at the moment logging that


11696
13:52:59,276 --> 13:53:04,400
information to the debug console and that is not good enough because should


11697
13:53:04,400 --> 13:53:08,800
any errors happen for instance if the current user couldn't be found or that


11698
13:53:08,800 --> 13:53:14,080
the password is incorrect uh your end user will not receive these


11699
13:53:14,080 --> 13:53:18,320
logs because they're not running this application beside visual studio code or


11700
13:53:18,320 --> 13:53:22,320
anything like that except your actual users are going to be


11701
13:53:22,320 --> 13:53:27,840
running the application on a normal telephone such as an android or an ios


11702
13:53:27,840 --> 13:53:31,116
or an ipad even or tablet


11703
13:53:31,116 --> 13:53:34,560
so that's what we are going to do in this chapter we're going to clean up the


11704
13:53:34,560 --> 13:53:40,480
logic for our error handling so um so before you begin with this chapter


11705
13:53:40,480 --> 13:53:45,276
just make sure that you're inside your login view as we are right here and then


11706
13:53:45,276 --> 13:53:50,240
ensure that your application or your user is logged out so if you're in the


11707
13:53:50,240 --> 13:53:55,040
main interface of the application or you're inside the notes view as we call


11708
13:53:55,040 --> 13:53:59,520
it ensure that you go to the menu and then you log out of the application also


11709
13:53:59,520 --> 13:54:03,436
make sure that your telephone or your emulator simulator also has internet


11710
13:54:03,436 --> 13:54:07,320
connectivity so you can actually hit firebase back end


11711
13:54:07,320 --> 13:54:10,840
[Music] okay


11712
13:54:10,840 --> 13:54:17,840
so as you've seen in our login view and register view we have logic that tries


11713
13:54:17,840 --> 13:54:21,116
to handle different kinds of errors that may arise


11714
13:54:21,116 --> 13:54:25,276
for instance in the registration view we have weak password handling and we have


11715
13:54:25,276 --> 13:54:30,720
email already in use or an invalid email error handling


11716
13:54:30,720 --> 13:54:37,116
and so here we have three error handling and also in login view we have two error


11717
13:54:37,116 --> 13:54:42,240
handling and aside from these we also need to handle


11718
13:54:42,240 --> 13:54:47,916
the case of any other exception that might arise in this try block and we


11719
13:54:47,916 --> 13:54:51,680
don't have that at the moment you can see we're only catching firebase off


11720
13:54:51,680 --> 13:54:57,756
exceptions so we have to have a generic catch block at the end of our try


11721
13:54:57,756 --> 13:55:02,720
statement in the login view and another catch block which is a


11722
13:55:02,720 --> 13:55:09,040
generic catch block at the end of the try statement on our register view three


11723
13:55:09,040 --> 13:55:12,956
three uh auth exceptions plus and a generic


11724
13:55:12,956 --> 13:55:16,800
exception handling here four total in register view


11725
13:55:16,800 --> 13:55:23,276
plus two here six and a generic one here seven so we are going to handle seven


11726
13:55:23,276 --> 13:55:28,640
types of errors that might occur during login and registration and for any one


11727
13:55:28,640 --> 13:55:32,720
of these we are going to display an alert to the user so we're just gonna


11728
13:55:32,720 --> 13:55:37,360
alert the user that something has happened and it needs to be taken care


11729
13:55:37,360 --> 13:55:42,400
of okay so let's go then into um


11730
13:55:42,400 --> 13:55:46,800
have a look at the end of your main dart file and you


11731
13:55:46,800 --> 13:55:51,436
can see we already have a future bowl show log out dial again this is a log


11732
13:55:51,436 --> 13:55:56,080
out this is a dialog that you can see is an alert dialog that


11733
13:55:56,080 --> 13:56:00,320
at the moment just returns a boolean what we need is a


11734
13:56:00,320 --> 13:56:05,756
future void as the caption shows here a function that says show error dialog and


11735
13:56:05,756 --> 13:56:10,480
it has a context and a string to display to the user so we're just going to use


11736
13:56:10,480 --> 13:56:15,116
it generically generically from anywhere in the application okay


11737
13:56:15,116 --> 13:56:19,520
so for now i need you to go to your login view


11738
13:56:19,520 --> 13:56:23,040
and at the bottom of the login view we're going to create the function


11739
13:56:23,040 --> 13:56:26,880
signature for this so let's just say future void


11740
13:56:26,880 --> 13:56:30,240
and as i've called it here show error dialog and we're going to get a build


11741
13:56:30,240 --> 13:56:34,800
context called context and then we're also going to say string text okay


11742
13:56:34,800 --> 13:56:38,880
just like this and remember you can always put a comma


11743
13:56:38,880 --> 13:56:44,160
here to complete the um to make sure that the dart formatter


11744
13:56:44,160 --> 13:56:49,116
actually formats your functions correctly all right


11745
13:56:49,116 --> 13:56:53,276
so remember show error dialogue uh what it needs to


11746
13:56:53,276 --> 13:56:58,080
do all it has to do is just to create a dialogue and then display it so to do


11747
13:56:58,080 --> 13:57:02,080
you i mean you may think that you always start with the creation of the dialogue


11748
13:57:02,080 --> 13:57:05,680
but in fact you need to first think about returning the result of the


11749
13:57:05,680 --> 13:57:10,240
dialogue which is in cases of void so you do that using um


11750
13:57:10,240 --> 13:57:15,756
show dialogue so say return show dialog


11751
13:57:15,756 --> 13:57:21,360
and the context is available for you as a parameter to your function and also


11752
13:57:21,360 --> 13:57:25,520
let me should i make this a bit bigger or is the size okay i think this size is


11753
13:57:25,520 --> 13:57:28,480
actually quite enough so


11754
13:57:28,480 --> 13:57:34,320
now that we have that let's then go and say that we want to have a builder


11755
13:57:34,320 --> 13:57:37,596
and your builder i'm going to get help from visual studio code to complete this


11756
13:57:37,596 --> 13:57:43,360
you see it takes the um it brings the build context in as a parameter and it


11757
13:57:43,360 --> 13:57:47,436
expects you to return let's get the documentation on


11758
13:57:47,436 --> 13:57:51,596
it and expect you to return a widget and the widget that we're gonna have to


11759
13:57:51,596 --> 13:57:56,880
display in our short in our show dialog is an alert dialog so let's go create


11760
13:57:56,880 --> 13:58:01,200
that alert dialog all right so


11761
13:58:01,200 --> 13:58:04,956
um for the title of our alert dialog since


11762
13:58:04,956 --> 13:58:09,116
this is as you can see from the function signature here that says show


11763
13:58:09,116 --> 13:58:14,240
air dialog this is this dialog is explicitly going to be used and


11764
13:58:14,240 --> 13:58:19,360
exclusively gonna be used for displaying errors to the user so something has


11765
13:58:19,360 --> 13:58:23,200
happened and we need to handle that error okay so


11766
13:58:23,200 --> 13:58:27,840
we are going to in this case write a specific very specific title for our


11767
13:58:27,840 --> 13:58:31,756
alert dialogue that the user understands something bad has happened and it needs


11768
13:58:31,756 --> 13:58:35,520
their attention so for the title we're just going to say


11769
13:58:35,520 --> 13:58:40,320
a constant text remember the title property if you just move your mouse


11770
13:58:40,320 --> 13:58:44,160
over you can see it's a widget it's not a string you actually can configure the


11771
13:58:44,160 --> 13:58:47,276
title to be whatever you want so this is the beauty of


11772
13:58:47,276 --> 13:58:51,916
flutter almost everything is a widget so you'd expect oh the title should just be


11773
13:58:51,916 --> 13:58:56,320
a string but no you can configure the title to be exactly what you want so it


11774
13:58:56,320 --> 13:59:01,680
can just be an icon if you wanted to so so let's in here in the text say an


11775
13:59:01,680 --> 13:59:06,040
error occurred


11776
13:59:06,320 --> 13:59:10,080
and then we're going to go for the content


11777
13:59:10,080 --> 13:59:13,756
of this dialogue remember the content comes in


11778
13:59:13,756 --> 13:59:19,520
here as the text as a string so let's wrap that inside a text


11779
13:59:19,520 --> 13:59:24,400
widget and we just say we display the text in there okay


11780
13:59:24,400 --> 13:59:29,520
and for the actions we're gonna go here


11781
13:59:29,520 --> 13:59:34,640
and let's for the actions then say we're gonna create a text button remember the


11782
13:59:34,640 --> 13:59:39,840
text button has two parameters one is its um


11783
13:59:39,840 --> 13:59:43,756
file the other one is unpressed the text button always has to have both these


11784
13:59:43,756 --> 13:59:47,360
parameters set all right so


11785
13:59:47,360 --> 13:59:52,880
what do we want to do on the unpressed we're going to just create the um


11786
13:59:52,880 --> 13:59:58,400
function signature for it and for its child we're just going to say text


11787
13:59:58,400 --> 14:00:03,360
and let's just say okay okay


11788
14:00:03,360 --> 14:00:06,800
um so now we have that set up


11789
14:00:06,800 --> 14:00:12,320
and uh let's just do some formatting in there so let's think about what we need


11790
14:00:12,320 --> 14:00:16,320
to do on the on press just remember this dialog is just going to be displayed to


11791
14:00:16,320 --> 14:00:19,756
the user the user is just going to get the information such as we're going to


11792
14:00:19,756 --> 14:00:24,880
display an alert saying that oh um your password is too weak or uh hey


11793
14:00:24,880 --> 14:00:28,800
this user already exists or this email already exists or incorrect password so


11794
14:00:28,800 --> 14:00:33,200
it's just text and then ok button so pressing the ok button the only thing is


11795
14:00:33,200 --> 14:00:36,240
going to do is just going to dismiss the alert dialogue so only thing you need to


11796
14:00:36,240 --> 14:00:42,400
do in here is just to say navigator of your context and then you'll just pop


11797
14:00:42,400 --> 14:00:47,040
this ensures that your dialogue then gets dismissed now


11798
14:00:47,040 --> 14:00:50,800
i've done some videos about this before on linkedin and twitter i've done live


11799
14:00:50,800 --> 14:00:54,640
videos about this where we talked about a better way of displaying error


11800
14:00:54,640 --> 14:00:58,160
dialogues because this way of displaying error dialects is


11801
14:00:58,160 --> 14:01:02,320
a little bit limited in that then the


11802
14:01:02,320 --> 14:01:08,400
pressing of the button dismisses the dialog however sometimes you may need to


11803
14:01:08,400 --> 14:01:11,756
have persistent dialogue displayed on the screen even when you push new


11804
14:01:11,756 --> 14:01:16,400
screens on top of other screens so it's a little bit strange that a


11805
14:01:16,400 --> 14:01:20,800
dialogue is doing navigation in that it tells navigator to pop


11806
14:01:20,800 --> 14:01:24,720
a better way of doing this is using overlays but overlays are a little bit


11807
14:01:24,720 --> 14:01:28,400
complicated for this part of the course so we're not going to talk about


11808
14:01:28,400 --> 14:01:33,276
overlays right now let's just say now we have a generic dialogue that can display


11809
14:01:33,276 --> 14:01:40,116
a text with a title of an err occurred okay


11810
14:01:40,160 --> 14:01:46,320
all right so that is in place now and now let's go to the next item that we


11811
14:01:46,320 --> 14:01:52,320
need to handle here and that is to handle user not found


11812
14:01:52,320 --> 14:01:56,000
so if we go to our um


11813
14:01:56,000 --> 14:01:59,276
sorry i just need to have a look at my notes to ensure that i'm telling you


11814
14:01:59,276 --> 14:02:03,436
everything that i i was supposed to tell you


11815
14:02:03,436 --> 14:02:08,560
all right so in here on your login view in the case that the error is used or


11816
14:02:08,560 --> 14:02:15,116
not found we are going to display an alert to the user using our new function


11817
14:02:15,116 --> 14:02:21,436
okay so in if e code user not found instead of devtools log we're going to


11818
14:02:21,436 --> 14:02:25,840
say show error dialog the context is already


11819
14:02:25,840 --> 14:02:29,680
available for us because you see it is passed inside


11820
14:02:29,680 --> 14:02:33,276
your build function already so you don't have to grab it from anywhere else it's


11821
14:02:33,276 --> 14:02:40,240
available right there and for a text we're just gonna say user not found okay


11822
14:02:40,560 --> 14:02:45,916
and close the string you can see now if i format this um code these two


11823
14:02:45,916 --> 14:02:49,360
parameters are displayed on the same line as i mentioned in the previous


11824
14:02:49,360 --> 14:02:53,360
chapter all you have to do for the dart formatter to be able to format this code


11825
14:02:53,360 --> 14:02:56,560
correctly is put a comma at the end of the last parameter and just press


11826
14:02:56,560 --> 14:03:00,880
command s and it will format it again for you so each parameter goes into its


11827
14:03:00,880 --> 14:03:06,400
own separate line okay um in case of the so now that we've


11828
14:03:06,400 --> 14:03:10,720
handled user not found okay so we could literally test that let me do a hot


11829
14:03:10,720 --> 14:03:15,040
restart just to ensure every piece of code is injected into the binary that is


11830
14:03:15,040 --> 14:03:19,276
running in the application let's go and place an email that doesn't


11831
14:03:19,276 --> 14:03:24,160
exist so that we get the user not found and let's just enter some password and


11832
14:03:24,160 --> 14:03:28,880
then i'm going to press the login button and you can see now we get our error


11833
14:03:28,880 --> 14:03:33,520
displayed on the screen that says an error occurred user not found and you


11834
14:03:33,520 --> 14:03:37,276
can press the ok button to get rid of the


11835
14:03:37,276 --> 14:03:41,360
um the dialog and getting rid of the dialog is happening here you see


11836
14:03:41,360 --> 14:03:45,680
pressing that button says navigator of context pop so


11837
14:03:45,680 --> 14:03:51,276
that's what is happening there all right great stuff what we need to do


11838
14:03:51,276 --> 14:03:55,200
now is to handle wrong password as well and this one is going to be a breeze


11839
14:03:55,200 --> 14:04:00,320
because we've already handled user not found so what you can do is copy and


11840
14:04:00,320 --> 14:04:04,480
paste this code that was placed here in the user not found statement and bring


11841
14:04:04,480 --> 14:04:09,360
it here and replace this devtools log wrong password with that and instead of


11842
14:04:09,360 --> 14:04:14,560
saying user not found what we're going to say is going to say wrong credentials


11843
14:04:14,560 --> 14:04:16,880
okay


11844
14:04:17,116 --> 14:04:21,916
so let me now go and try to log in you can also do that at


11845
14:04:21,916 --> 14:04:25,756
home or wherever you're watching this course from you can enter the email


11846
14:04:25,756 --> 14:04:28,956
address of a user who's already registered with your application so like


11847
14:04:28,956 --> 14:04:32,720
if you're testing you may enter the email address of the person that or your


11848
14:04:32,720 --> 14:04:35,680
own email address if that's what you're testing with but enter the wrong


11849
14:04:35,680 --> 14:04:40,000
credentials so there we go and then press login and now you can see


11850
14:04:40,000 --> 14:04:44,956
that message being printed to the screen wrong credentials okay


11851
14:04:44,956 --> 14:04:50,956
all right perfect now um what we also need to do


11852
14:04:50,956 --> 14:04:53,756
um [Music]


11853
14:04:53,756 --> 14:04:58,400
is handle other firebase authentication exceptions


11854
14:04:58,400 --> 14:05:02,320
and you can see here in this case we're saying if there is a firebase auth


11855
14:05:02,320 --> 14:05:07,276
exception and if the code is used or not found or if the code is wrong password


11856
14:05:07,276 --> 14:05:12,400
however there might also be an exception that you haven't accounted for and


11857
14:05:12,400 --> 14:05:17,680
although these are the most known error codes that you can get there's always a


11858
14:05:17,680 --> 14:05:22,400
possibility that there will be another error code in the future maybe not now


11859
14:05:22,400 --> 14:05:25,276
that you will receive from firebase which you haven't accounted for in that


11860
14:05:25,276 --> 14:05:27,840
case the code then goes in here and says oh


11861
14:05:27,840 --> 14:05:31,916
the code is not user not found is not wrong password and it will just


11862
14:05:31,916 --> 14:05:36,880
fall through meaning that this entire code will this entire catch block will


11863
14:05:36,880 --> 14:05:42,480
not be able to catch the actual exception and your code will crash


11864
14:05:42,480 --> 14:05:45,916
so it is very or you will actually get an error screen


11865
14:05:45,916 --> 14:05:48,956
so it's very important that you


11866
14:05:48,956 --> 14:05:54,000
think about your exception handling early on so you don't send out a code to


11867
14:05:54,000 --> 14:05:57,116
production that doesn't have proper error handling okay


11868
14:05:57,116 --> 14:06:01,040
so um that's what we're going to do


11869
14:06:01,040 --> 14:06:05,520
so two things we need to do we have to handle other exceptions that might occur


11870
14:06:05,520 --> 14:06:11,276
and also other firebase off exceptions so let's do those things


11871
14:06:11,520 --> 14:06:15,596
so um actually we need to first do this so


11872
14:06:15,596 --> 14:06:21,040
let's first take care of other all firebase auth exception so place an else


11873
14:06:21,040 --> 14:06:25,840
statement in here and then in that case just display a dialog


11874
14:06:25,840 --> 14:06:30,400
like i'm doing here and for the error we're just going to say error and then


11875
14:06:30,400 --> 14:06:33,360
in here e dot code


11876
14:06:33,360 --> 14:06:37,040
now you may not be familiar with this syntax from before because maybe i


11877
14:06:37,040 --> 14:06:40,400
haven't explained this before but this is like string formatting and guardian


11878
14:06:40,400 --> 14:06:44,480
is very elegant it's also available i mean kind of the same thing is available


11879
14:06:44,480 --> 14:06:47,916
in almost every language that i work with swift it's available in python when


11880
14:06:47,916 --> 14:06:50,560
you're working with django it's available in ros it's available in


11881
14:06:50,560 --> 14:06:55,596
javascript javascript so you're basically escaping a string and


11882
14:06:55,596 --> 14:07:00,160
injecting some actual variables inside that all right


11883
14:07:00,160 --> 14:07:05,116
so in python for instance you would do a f which means you're formatting and


11884
14:07:05,116 --> 14:07:09,200
you'd be like hello and you would i think you would say


11885
14:07:09,200 --> 14:07:12,800
dollar value


11886
14:07:12,800 --> 14:07:16,880
and then you would put your value at the end something with a percentage sign


11887
14:07:16,880 --> 14:07:20,240
something like that and in javascript you will do


11888
14:07:20,240 --> 14:07:24,956
back quotes like this so and in swift you will do something like this uh e


11889
14:07:24,956 --> 14:07:30,800
code like that inside a string so this is basically a way for dark to inject an


11890
14:07:30,800 --> 14:07:34,320
actual code inside your string


11891
14:07:34,320 --> 14:07:38,240
and you can see in the case of firebase auth exception


11892
14:07:38,240 --> 14:07:43,116
the e becomes then a firebase auth exception and every


11893
14:07:43,116 --> 14:07:47,360
exception of this type has a code of type string


11894
14:07:47,360 --> 14:07:52,400
and this is us basically injecting that string inside our own string so every


11895
14:07:52,400 --> 14:07:57,040
code then will be prefixed with the value of error and then a double double


11896
14:07:57,040 --> 14:08:01,520
column here and then space and the code string itself


11897
14:08:01,520 --> 14:08:05,520
now that we've done that we also need to handle the case where the exception is


11898
14:08:05,520 --> 14:08:09,276
not a firebase auth exception and that's the next point that we need to talk


11899
14:08:09,276 --> 14:08:15,360
about so in here uh at the end of this


11900
14:08:15,360 --> 14:08:18,880
on firebase auth exception block and if you're kind of like unsure where things


11901
14:08:18,880 --> 14:08:22,000
start and then you can see that as you go to this


11902
14:08:22,000 --> 14:08:25,756
end of this curly bracket here you can see that visual studio code has


11903
14:08:25,756 --> 14:08:29,360
highlighted this curly bracket right there saying that this is the beginning


11904
14:08:29,360 --> 14:08:32,720
of the code and even if that's not enough for you you can always go to


11905
14:08:32,720 --> 14:08:37,520
visual studio codes and gutter on the left hand side and like


11906
14:08:37,520 --> 14:08:42,320
collapse these pieces of code so you can see oh


11907
14:08:42,320 --> 14:08:46,480
here here you can easily see them you can also i think


11908
14:08:46,480 --> 14:08:50,880
can we not collapse this entire if no we can't collapse that entire thing


11909
14:08:50,880 --> 14:08:54,956
but anyway so at the end of this we need to do now is


11910
14:08:54,956 --> 14:09:01,276
just to say catch e this is a generic catch block meaning


11911
14:09:01,276 --> 14:09:04,800
that if the exception that occurs in the try


11912
14:09:04,800 --> 14:09:09,840
statement is not a firebase auth exception then go into this catch block


11913
14:09:09,840 --> 14:09:15,040
and in this cache block now e you can see is an object so it's not like a


11914
14:09:15,040 --> 14:09:19,116
normal exception anymore it's just any object because if you remember when we


11915
14:09:19,116 --> 14:09:24,240
talked about exceptions in dart you can throw pretty much anything in dart as an


11916
14:09:24,240 --> 14:09:27,276
exception you can even throw an enumeration value so


11917
14:09:27,276 --> 14:09:30,720
that's why it's telling us saying that any except any other exception other


11918
14:09:30,720 --> 14:09:35,276
than this is just an object it's not known to me i don't know what it is so


11919
14:09:35,276 --> 14:09:39,756
it's up to you now to display that error now if you remember from before from the


11920
14:09:39,756 --> 14:09:44,560
previous chapter objects all have a function called tostring


11921
14:09:44,560 --> 14:09:49,040
so that's perfect then we can go here let me expand these so that they don't


11922
14:09:49,040 --> 14:09:51,916
become a little bit cryptic like they did


11923
14:09:51,916 --> 14:09:57,840
and paste that code to display a show error dialogue again in here also we're


11924
14:09:57,840 --> 14:10:00,560
just going to say


11925
14:10:00,720 --> 14:10:06,320
e to string just like that right


11926
14:10:06,640 --> 14:10:09,116
so we we're handling wrong credentials with


11927
14:10:09,116 --> 14:10:13,916
handling any other error that might arise and also sorry any other firebase


11928
14:10:13,916 --> 14:10:18,400
exception of exception and any other exception in


11929
14:10:18,400 --> 14:10:24,560
general that might arise during logging the user in


11930
14:10:25,276 --> 14:10:28,000
all right that was a lot of information i


11931
14:10:28,000 --> 14:10:32,560
understand and i move past this quite fast since when we talk about one thing


11932
14:10:32,560 --> 14:10:35,360
like we've already talked about displaying dialogues i don't think it's


11933
14:10:35,360 --> 14:10:39,040
worth your time and my time to spend too much time explaining all of these over


11934
14:10:39,040 --> 14:10:43,116
and over again and so and that's why i move past these


11935
14:10:43,116 --> 14:10:47,840
sometimes quite fast what we need to do now is to do some


11936
14:10:47,840 --> 14:10:51,596
cleanup because you see now we have our login view m here


11937
14:10:51,596 --> 14:10:56,640
sorry login view dart file here and the m in visual studio code means modified


11938
14:10:56,640 --> 14:11:01,756
since we last committed this into git and we have that file however we also


11939
14:11:01,756 --> 14:11:06,160
have the show error dialog that is sitting here that is also going to be


11940
14:11:06,160 --> 14:11:10,640
useful for the register view however it's right now just sitting in the login


11941
14:11:10,640 --> 14:11:15,116
view so if register view wants to then use this same code you will have to


11942
14:11:15,116 --> 14:11:20,400
import the login view and then use this feature it's a little bit wrong this is


11943
14:11:20,400 --> 14:11:24,000
supposed to be like a generic show error dialogue and it should be available for


11944
14:11:24,000 --> 14:11:28,160
pretty much any piece of code that needs it so what we were going to do as a


11945
14:11:28,160 --> 14:11:30,720
caption says here we're going to create a new file


11946
14:11:30,720 --> 14:11:37,596
um and folder as i can see under lib so open your project explorer under lib


11947
14:11:37,596 --> 14:11:42,720
go and create and you can see here we need to create a file called show error


11948
14:11:42,720 --> 14:11:46,000
dialog dart and it's it needs to be inside


11949
14:11:46,000 --> 14:11:50,720
a folder called utility so i'm going to right click on lib and say new file and


11950
14:11:50,720 --> 14:11:55,436
i'm just going to type utilities slash


11951
14:11:55,436 --> 14:12:00,000
show error dialogue dart all right


11952
14:12:00,000 --> 14:12:05,916
and go to your login view and grab that code


11953
14:12:05,916 --> 14:12:11,520
uh for show error dialogue uh poof i'm gonna grab the code


11954
14:12:11,520 --> 14:12:15,680
and cut it however you cut in your operating system


11955
14:12:15,680 --> 14:12:20,640
in mac is command x in visual studio code and bring it into your show error


11956
14:12:20,640 --> 14:12:24,720
dialog file all right we're gonna get a lot of uh errors but as i've explained


11957
14:12:24,720 --> 14:12:28,160
in the previous chapters we can also import these things material dart to get


11958
14:12:28,160 --> 14:12:32,720
rid of almost actually all of those errors so that was fantastic


11959
14:12:32,720 --> 14:12:35,520
now that we've done that you can see visual studio is already showing this


11960
14:12:35,520 --> 14:12:40,080
tab the login view as having an error and that is because login view is using


11961
14:12:40,080 --> 14:12:44,800
show error dialog but now that we've removed show error dialog from there it


11962
14:12:44,800 --> 14:12:49,680
doesn't know where this show error dialog now resides


11963
14:12:49,680 --> 14:12:55,276
so what we need to do is to use our new file in the login view dart file


11964
14:12:55,276 --> 14:12:58,880
and you could do that you could ask visual studio code to help you with this


11965
14:12:58,880 --> 14:13:02,320
and you could just say import library and


11966
14:13:02,320 --> 14:13:07,116
that's it it imported it for us and


11967
14:13:07,116 --> 14:13:10,956
as you can see now that we're we don't have any more


11968
14:13:10,956 --> 14:13:15,916
logs inside our login view visual studio code is helping and saying


11969
14:13:15,916 --> 14:13:20,160
you're no more using you're no longer using the dev tools or the dart


11970
14:13:20,160 --> 14:13:23,360
developer package import


11971
14:13:23,360 --> 14:13:27,840
what you can do is just to safely remove that and clean up your imports as well


11972
14:13:27,840 --> 14:13:31,360
while we're going okay so um


11973
14:13:31,360 --> 14:13:34,720
that is working fine and we can just confirm that so i'm just going to enter


11974
14:13:34,720 --> 14:13:38,880
an existing email here with the wrong credentials and just to


11975
14:13:38,880 --> 14:13:42,400
ensure that we're getting the dialogue wrong credentials okay


11976
14:13:42,400 --> 14:13:45,116
perfect now that we've done that i'm going to


11977
14:13:45,116 --> 14:13:49,840
change the screen layout a little bit and what we're going to do is that we


11978
14:13:49,840 --> 14:13:53,360
need to wrap up this chapter we've cleaned up our error handling and we


11979
14:13:53,360 --> 14:13:58,000
need to just make a commit remember pretty much in every chapter from a few


11980
14:13:58,000 --> 14:14:03,040
chapters uh back onwards we're to commit our code at the end of the chapter just


11981
14:14:03,040 --> 14:14:06,800
to make sure that you have traceability for for your code and this is what you


11982
14:14:06,800 --> 14:14:10,080
will need to do even if you're working for instance actually especially if


11983
14:14:10,080 --> 14:14:14,480
you're working inside a a team with other people doing flutter


11984
14:14:14,480 --> 14:14:18,640
code or any other code you need to ensure that your code which is ready or


11985
14:14:18,640 --> 14:14:22,240
even if it's not ready it is committed so um


11986
14:14:22,240 --> 14:14:26,240
even if your code isn't ready you can commit it into a specific branch but you


11987
14:14:26,240 --> 14:14:30,800
should never leave your work day without committing your work remember


11988
14:14:30,800 --> 14:14:35,200
that okay so let's now go and commit our work i'm


11989
14:14:35,200 --> 14:14:39,680
gonna bring up the terminal a little bit here so and you can see that the


11990
14:14:39,680 --> 14:14:44,480
previous chapter we did a step five and in here we're going to commit our


11991
14:14:44,480 --> 14:14:48,956
work as step 6 and also we're going to tag our work okay


11992
14:14:48,956 --> 14:14:53,276
so let's say git status you can see utilities is a new folder i'm just going


11993
14:14:53,276 --> 14:14:56,720
to say git add all i'm going to increase the size of the screen as well so you


11994
14:14:56,720 --> 14:14:59,360
see it better make your studio code a little bit


11995
14:14:59,360 --> 14:15:02,320
larger as well clean


11996
14:15:02,320 --> 14:15:07,916
and get add dash dash all and then git status now you can see these are staged


11997
14:15:07,916 --> 14:15:13,116
for committing and i'm going to commit them as step 6 i believe


11998
14:15:13,116 --> 14:15:16,800
after doing that let's tag it as well as step six


11999
14:15:16,800 --> 14:15:23,360
um and get push our changes and we're also gonna push tags


12000
14:15:23,360 --> 14:15:29,116
all right that is absolutely perfect so that was that to be honest with you


12001
14:15:29,116 --> 14:15:32,880
for this chapter so this was a quick chapter as well and that's completely


12002
14:15:32,880 --> 14:15:37,040
okay actually quite refreshing to have these short chapters for me as well


12003
14:15:37,040 --> 14:15:41,276
um so now that we've done error handling in


12004
14:15:41,276 --> 14:15:44,956
our login view we also need to clean up our register


12005
14:15:44,956 --> 14:15:48,480
view you can see our registry has kind of the same problem


12006
14:15:48,480 --> 14:15:52,640
as login view had at the beginning of this chapter in that we have a lot of


12007
14:15:52,640 --> 14:15:58,080
error like dev tools log stuff in here which aren't so useful so for the next


12008
14:15:58,080 --> 14:16:01,916
chapter um what we need to do is to ensure that


12009
14:16:01,916 --> 14:16:07,596
we're logged out of the application and that we can go to the register view as


12010
14:16:07,596 --> 14:16:13,040
we can do here so that's where you need to be for the next chapter and before we


12011
14:16:13,040 --> 14:16:17,276
can continue with that with the course to the next chapter so i


12012
14:16:17,276 --> 14:16:21,680
hope you enjoyed this chapter and i'll see you in the next one


12013
14:16:21,680 --> 14:16:25,916
hello everyone and welcome to chapter 22 of this flutter course


12014
14:16:25,916 --> 14:16:28,640
in the previous chapters we've been talking quite a lot about login and


12015
14:16:28,640 --> 14:16:33,116
register and email verification and as you saw in the previous chapter and we


12016
14:16:33,116 --> 14:16:37,596
have some problems still in our register view in that when we come to


12017
14:16:37,596 --> 14:16:40,400
the error handling we're still doing logs


12018
14:16:40,400 --> 14:16:44,000
basically instead of using our new function that was called show error


12019
14:16:44,000 --> 14:16:48,400
dialog and also our register view basically


12020
14:16:48,400 --> 14:16:52,800
isn't really able to send us to the correct place after a successful


12021
14:16:52,800 --> 14:16:56,956
registration you see we have email verification set up in that every user


12022
14:16:56,956 --> 14:17:01,520
who registers also needs to verify his or her email before entering


12023
14:17:01,520 --> 14:17:07,116
the main ui of the application so if that is the default behavior in that a


12024
14:17:07,116 --> 14:17:11,520
newly registered user needs to verify their email perhaps it would be best


12025
14:17:11,520 --> 14:17:15,520
that we send the user right after registration


12026
14:17:15,520 --> 14:17:19,200
to the email verification view and these are the things that basically we're


12027
14:17:19,200 --> 14:17:23,680
going to solve in this chapter fixing our log statements in the register view


12028
14:17:23,680 --> 14:17:28,080
and also sending the user to the email verification view


12029
14:17:28,080 --> 14:17:31,276
sending the registered user to the email verification view right after


12030
14:17:31,276 --> 14:17:35,276
registration okay so these are the goals of this chapter


12031
14:17:35,276 --> 14:17:38,560
so you know and i'm gonna bring up my visual studio code to the screen so you


12032
14:17:38,560 --> 14:17:43,116
can also see it i'm gonna bring up scr cpy to the right hand side so you see


12033
14:17:43,116 --> 14:17:47,360
you see that too position these windows a little bit better


12034
14:17:47,360 --> 14:17:50,480
alright so the first task that we we need to do


12035
14:17:50,480 --> 14:17:55,596
here is to make sure that we're using show error dialog in our


12036
14:17:55,596 --> 14:17:58,720
register view and if you haven't watched the previous


12037
14:17:58,720 --> 14:18:02,000
chapter that's what we did in one of the previous chapters that we talked about


12038
14:18:02,000 --> 14:18:06,080
this uh file here in utilities show error dialog that increase the size of


12039
14:18:06,080 --> 14:18:09,916
the window so you see it better so this show error dialog is a generic


12040
14:18:09,916 --> 14:18:13,596
dialogue that has a title that says an error occurred


12041
14:18:13,596 --> 14:18:18,800
and also a text of your choosing so let's go to our registry view as the


12042
14:18:18,800 --> 14:18:22,640
caption says here i'm going to minimize the terminal here and get rid of the


12043
14:18:22,640 --> 14:18:26,400
explorer and let's go to this weak password and


12044
14:18:26,400 --> 14:18:30,400
then start typing show error dialog and you can see it's


12045
14:18:30,400 --> 14:18:33,520
gonna auto import it excuse me


12046
14:18:33,520 --> 14:18:37,680
it's going to auto import it for us so let's say show air dialog with that


12047
14:18:37,680 --> 14:18:40,720
context and i'm just going to in this in the


12048
14:18:40,720 --> 14:18:43,436
case of a weak password um


12049
14:18:43,436 --> 14:18:50,000
we need to just say weak password okay so that part is done and you can also


12050
14:18:50,000 --> 14:18:54,320
put a comma at the end of the second parameter just to make sure that it is


12051
14:18:54,320 --> 14:18:58,320
clean but remember also that show error dialogue is a


12052
14:18:58,320 --> 14:19:02,320
is an asynchronous function so if you move your mouse over it you'll see that


12053
14:19:02,320 --> 14:19:05,916
it says future void so by just calling show air dial like you're not showing


12054
14:19:05,916 --> 14:19:09,436
the error dialogue you're basically just telling the short i like to return the


12055
14:19:09,436 --> 14:19:14,880
future which in turn then uh can display the error dialogue if you await on it so


12056
14:19:14,880 --> 14:19:19,840
don't forget a wait after doing that let's remove our dev


12057
14:19:19,840 --> 14:19:25,360
devtools log from there from the weak password and if statement


12058
14:19:25,360 --> 14:19:29,276
and now what we're going to do is to copy


12059
14:19:29,276 --> 14:19:34,240
this code that we wrote here and go to email already in use and display another


12060
14:19:34,240 --> 14:19:39,276
error dialog in here using the same exact code and i'm just going to say


12061
14:19:39,276 --> 14:19:46,160
email is already in use okay so that's for email rna news and also


12062
14:19:46,160 --> 14:19:51,116
for invalid email we're going to say just invalid


12063
14:19:51,436 --> 14:19:54,880
let me have a look for invalid email if you should just say


12064
14:19:54,880 --> 14:20:01,360
um this is an invalid email address right


12065
14:20:01,756 --> 14:20:07,840
and i can see that we haven't really handled other exceptions that might


12066
14:20:07,840 --> 14:20:11,840
occur because you remember in the login view


12067
14:20:11,840 --> 14:20:17,596
we had a look at handling for instance other uh


12068
14:20:17,596 --> 14:20:21,756
other exceptions that might occur like firebase off exceptions that we did in


12069
14:20:21,756 --> 14:20:25,840
an else statement there and also we did a generic catch statement that catches


12070
14:20:25,840 --> 14:20:29,756
any other exception that is not a firebase auth exception and i can see


12071
14:20:29,756 --> 14:20:32,880
now we haven't done that in register view so let's go and take care of that


12072
14:20:32,880 --> 14:20:37,116
so let's just say else so in this else statement we're catching


12073
14:20:37,116 --> 14:20:41,360
any other firebase off exception that might occur okay so i'm just going to


12074
14:20:41,360 --> 14:20:44,320
say here and i'm just going to say


12075
14:20:44,320 --> 14:20:48,956
error and dollar e code okay so that's very


12076
14:20:48,956 --> 14:20:52,720
similar to what we're doing in our login view


12077
14:20:52,720 --> 14:20:55,276
so and i apologize i could just see that


12078
14:20:55,276 --> 14:20:59,360
you couldn't see the code because it was hidden behind the caption but now you


12079
14:20:59,360 --> 14:21:02,640
can see it so i'm putting an else statement here and then i'm saying


12080
14:21:02,640 --> 14:21:06,720
basically a weight shorter dialogue and e code so


12081
14:21:06,720 --> 14:21:11,200
that's for if you if you look at have a look at this um


12082
14:21:11,200 --> 14:21:16,956
curly bracket right here which you can now see this purple one it it starts


12083
14:21:16,956 --> 14:21:20,640
here because it's the beginning of where we start catching firebase off


12084
14:21:20,640 --> 14:21:22,880
exceptions and


12085
14:21:22,880 --> 14:21:27,520
what we also need to do is put another l another catch statement here which


12086
14:21:27,520 --> 14:21:33,840
catches any other exception that is not a firebase auth exception okay


12087
14:21:33,840 --> 14:21:37,360
so we've covered this in the previous chapter when we talked about exception


12088
14:21:37,360 --> 14:21:43,276
handling in the login view so i don't think i need to explain that again um


12089
14:21:43,276 --> 14:21:46,560
okay so what we're going to do in here we're also going to show the error


12090
14:21:46,560 --> 14:21:50,560
dialog in this case as well but for the message we're just going to say e2


12091
14:21:50,560 --> 14:21:54,480
string okay similar something similar we did in


12092
14:21:54,480 --> 14:21:59,040
our login view actually exactly the same thing


12093
14:21:59,040 --> 14:22:02,800
okay that was great so now we're using short error dialog instead of log in the


12094
14:22:02,800 --> 14:22:06,160
register view and now basically i don't think we're using dev


12095
14:22:06,160 --> 14:22:10,320
tools over using devtools login here i don't


12096
14:22:10,320 --> 14:22:13,200
think we need to do that anymore so we can get rid of that


12097
14:22:13,200 --> 14:22:17,436
and we can also then get rid of devtools um


12098
14:22:17,436 --> 14:22:23,040
import over here okay it's gonna have a look at my notes a


12099
14:22:23,040 --> 14:22:25,596
little bit just to ensure that i'm telling you all the information that you


12100
14:22:25,596 --> 14:22:28,800
need to know that's great okay


12101
14:22:28,800 --> 14:22:32,560
um now that we've done all of this we need to also


12102
14:22:32,560 --> 14:22:35,276
make sure you can see as the cache that says after


12103
14:22:35,276 --> 14:22:40,480
every registration we need to confirm the user's email and that is like the um


12104
14:22:40,480 --> 14:22:44,720
the pattern of every newly registered user in application


12105
14:22:44,720 --> 14:22:49,916
that a newly registered user cannot have


12106
14:22:49,916 --> 14:22:53,596
already confirmed their email because it's just not possible the two don't go


12107
14:22:53,596 --> 14:22:57,756
together a newly user a newly registered user hasn't had their email address


12108
14:22:57,756 --> 14:23:02,720
registered in our system therefore has not received a verification email during


12109
14:23:02,720 --> 14:23:05,680
this session so this is a pattern that we need to


12110
14:23:05,680 --> 14:23:09,916
basically help our users with so after every successful registration we're then


12111
14:23:09,916 --> 14:23:15,276
going to automatically send the user to the verify email view and if you


12112
14:23:15,276 --> 14:23:18,880
remember from the previous chapters we have this verify email view right here


12113
14:23:18,880 --> 14:23:22,800
which is its own stateful widget and


12114
14:23:22,800 --> 14:23:26,400
i mean it doesn't necessarily have to be a stateful widget i can see it's not


12115
14:23:26,400 --> 14:23:30,560
doing anything stateful but we've just left it that state will stay full widget


12116
14:23:30,560 --> 14:23:34,880
and it can just be like that for now um but we can also turn it into a


12117
14:23:34,880 --> 14:23:39,436
stateless widget if you want to um okay


12118
14:23:39,436 --> 14:23:44,320
so that's for the pattern of what our users are doing with the register view


12119
14:23:44,320 --> 14:23:48,400
so if we go to register here uh oops no we are actually on the


12120
14:23:48,400 --> 14:23:52,640
register sorry about that so um okay so what we need to do now is


12121
14:23:52,640 --> 14:23:56,640
since we're gonna send the user from the register view we're gonna send to the


12122
14:23:56,640 --> 14:24:00,160
verify email view we need a route for that and if you remember from the


12123
14:24:00,160 --> 14:24:03,756
previous chapters we're defining our routes now inside this file lib


12124
14:24:03,756 --> 14:24:06,640
constants routes dot dart


12125
14:24:06,640 --> 14:24:11,436
and we've right now defined login route register route and nodes route


12126
14:24:11,436 --> 14:24:15,596
then we need a new route for the verify email view so let's go ahead as the


12127
14:24:15,596 --> 14:24:19,520
caption says in here and just type that and just say cons verify


12128
14:24:19,520 --> 14:24:22,956
email out is


12129
14:24:22,956 --> 14:24:28,320
slash verify email like that with a slash at the end as well


12130
14:24:28,320 --> 14:24:33,276
now that we've defined the route we need to then go excuse me we need to


12131
14:24:33,276 --> 14:24:38,000
go into our main dart file so i'm going to close this file close this file and


12132
14:24:38,000 --> 14:24:44,160
then command p on mac in visual studio or or control p in linux and windows and


12133
14:24:44,160 --> 14:24:47,596
go to main.dart okay


12134
14:24:47,596 --> 14:24:52,480
in your main.dart you remember all the routes were registered inside the routes


12135
14:24:52,480 --> 14:24:58,080
parameter of your material application so let's go ahead and register the um


12136
14:24:58,080 --> 14:25:03,916
email verify email wrap here and we say context and we just say const


12137
14:25:03,916 --> 14:25:08,560
verify email view and so that's also then registered


12138
14:25:08,560 --> 14:25:12,640
inside the main function okay remember anything that you're doing


12139
14:25:12,640 --> 14:25:17,756
inside the main function is not going to be reloading when you do hot uh


12140
14:25:17,756 --> 14:25:23,436
hot reload so you need to do a hot restart here in order for for those to


12141
14:25:23,436 --> 14:25:26,560
for for those changes in the main function to take effect so i'm just


12142
14:25:26,560 --> 14:25:30,560
going to do a hot restart here okay


12143
14:25:30,560 --> 14:25:33,520
so let's now that we've registered that


12144
14:25:33,520 --> 14:25:37,680
let's go to our register and now that we've registered there are so many


12145
14:25:37,680 --> 14:25:40,320
registered words i'm throwing out there so i just want to clarify now that we've


12146
14:25:40,320 --> 14:25:45,520
registered to verify email routes in our routes in main dart we need to go to the


12147
14:25:45,520 --> 14:25:51,116
register view and use this verify email route in there after a successful


12148
14:25:51,116 --> 14:25:54,720
registration okay so um


12149
14:25:54,720 --> 14:25:58,800
let's then go to our i'm going to close this and i'm going to


12150
14:25:58,800 --> 14:26:02,000
go to register view


12151
14:26:02,000 --> 14:26:05,276
right here okay


12152
14:26:05,276 --> 14:26:09,520
here i can see that we're getting the user credentials and then


12153
14:26:09,520 --> 14:26:12,720
assigning it to this user credential we don't have to do that anymore so let's


12154
14:26:12,720 --> 14:26:15,916
just remove that we are not going to actually use the


12155
14:26:15,916 --> 14:26:19,596
returning user credentials upon a successful create user with email and


12156
14:26:19,596 --> 14:26:24,640
password we're going to go to the next line automatically because we have a try


12157
14:26:24,640 --> 14:26:28,800
and catch statement here so


12158
14:26:28,800 --> 14:26:33,756
now what we need to do is uh we're gonna show the verify email


12159
14:26:33,756 --> 14:26:36,720
route okay uh


12160
14:26:36,720 --> 14:26:40,720
so let's go uh to our


12161
14:26:40,720 --> 14:26:45,436
uh verify email around in here and what we're going to say is to say navigator


12162
14:26:45,436 --> 14:26:48,240
and dot push


12163
14:26:48,240 --> 14:26:52,800
navigator of context and then we're going to say push named


12164
14:26:52,800 --> 14:26:56,880
and you see in this case we're actually going to say push name instead of using


12165
14:26:56,880 --> 14:27:00,080
the other functionality that says push name and


12166
14:27:00,080 --> 14:27:03,756
remove until and the reason behind this is that


12167
14:27:03,756 --> 14:27:06,756
um


12168
14:27:06,800 --> 14:27:11,200
when when a user is inside the registration page here


12169
14:27:11,200 --> 14:27:16,000
and when we want to go to the let's say that you enter some email in


12170
14:27:16,000 --> 14:27:20,320
here and then you enter some password and you click the register button or you


12171
14:27:20,320 --> 14:27:25,520
tap the register button and we send you to the verify email page


12172
14:27:25,520 --> 14:27:28,000
where we say oh um


12173
14:27:28,000 --> 14:27:32,320
here you can verify your email et cetera now in there if you if you realize that


12174
14:27:32,320 --> 14:27:37,200
oh i register with the wrong email you need to be able to go back to the


12175
14:27:37,200 --> 14:27:41,360
register page so in order to avoid having all these buttons that go send


12176
14:27:41,360 --> 14:27:45,436
one user from one page to the other it would make a lot more sense if he from


12177
14:27:45,436 --> 14:27:50,480
the register view could just push the new uh email verification route so we


12178
14:27:50,480 --> 14:27:56,160
don't replace the entire routes like the register page with the new route so


12179
14:27:56,160 --> 14:27:59,200
basically the desired effect here is that our register page is gonna stay


12180
14:27:59,200 --> 14:28:03,116
right here and then we're gonna push the verify email route on top of it if the


12181
14:28:03,116 --> 14:28:06,400
user in the verify email route realizes that they've done something wrong with


12182
14:28:06,400 --> 14:28:11,520
the email address then they can just press the back button on the top bar and


12183
14:28:11,520 --> 14:28:15,360
go back to the register page so that it's just a natural


12184
14:28:15,360 --> 14:28:19,520
way of navigating between screens so that's why we're using push named in


12185
14:28:19,520 --> 14:28:23,116
this case okay so i'm gonna say push names and push


12186
14:28:23,116 --> 14:28:28,000
name and and then in the name we're just gonna say verify


12187
14:28:28,000 --> 14:28:33,680
email route oops and verify email route like this


12188
14:28:33,680 --> 14:28:38,160
i'm gonna do a command s right there and um


12189
14:28:38,160 --> 14:28:43,436
then let's make sure that we can put all of this in action all right so i'm gonna


12190
14:28:43,436 --> 14:28:47,200
hot restart just to make sure you remember we did a


12191
14:28:47,200 --> 14:28:50,560
change in our main function so if you forgot to do hot restart please do that


12192
14:28:50,560 --> 14:28:55,200
now um so that your changes can actually take effect from the login view which is


12193
14:28:55,200 --> 14:28:59,520
the first view that the user sees we're gonna go to the register page


12194
14:28:59,520 --> 14:29:05,360
and inside this register page i'm going to register with a new user so since


12195
14:29:05,360 --> 14:29:11,040
i've already registered my user and i can actually go to firebase console so


12196
14:29:11,040 --> 14:29:16,400
let's go to console firebase the user which i usually use is already


12197
14:29:16,400 --> 14:29:20,800
registered with this application so my notes flutter project okay


12198
14:29:20,800 --> 14:29:25,596
let's go to authentication and i can see pixelityab gmail.com is already


12199
14:29:25,596 --> 14:29:29,040
registered so i'm going to register with a new user in here i'm going to say


12200
14:29:29,040 --> 14:29:33,436
van.mp and the password is foobarbaz i'm just


12201
14:29:33,436 --> 14:29:37,916
going to choose here and please don't use this password in production for any


12202
14:29:37,916 --> 14:29:42,640
of your accounts anywhere at all this is just a bad idea i'm using fubar bass for


12203
14:29:42,640 --> 14:29:47,360
consensus consistency and and for the sake of simplicity in this project so


12204
14:29:47,360 --> 14:29:51,840
because for me it's a lot easier as i'm typing and writing all the passwords


12205
14:29:51,840 --> 14:29:54,720
over and over again just to use fullbarbass but this is not a good


12206
14:29:54,720 --> 14:29:58,160
password so i think just to make this clear


12207
14:29:58,160 --> 14:30:02,800
um now i'm going to register this user and now you can see that


12208
14:30:02,800 --> 14:30:06,560
after a successful registration now we're ending up in this verify email


12209
14:30:06,560 --> 14:30:11,360
screen and this is really good and but


12210
14:30:11,360 --> 14:30:15,200
there is a way we can actually make this better and let's go to firebase here and


12211
14:30:15,200 --> 14:30:19,596
i can see now that user is already registered here you see and it has a


12212
14:30:19,596 --> 14:30:23,916
user id and here's the last sign-in date okay


12213
14:30:23,916 --> 14:30:27,756
so how can we make this better you see


12214
14:30:27,756 --> 14:30:32,800
if this is the natural flow of going like when the user is in the register


12215
14:30:32,800 --> 14:30:38,640
page or the register view and they always end up in the verify email page


12216
14:30:38,640 --> 14:30:42,640
the way that we can make this better is um


12217
14:30:42,640 --> 14:30:47,840
that upon successful registration right before we push the


12218
14:30:47,840 --> 14:30:51,916
verify email view on the screen


12219
14:30:51,916 --> 14:30:56,800
is that we actually send a verification email to that user because otherwise


12220
14:30:56,800 --> 14:30:59,916
what you're creating you're creating a logic for the user that they have to


12221
14:30:59,916 --> 14:31:04,160
take an extra step in order to verify their account so they come here and now


12222
14:31:04,160 --> 14:31:07,596
they have to press another button but it would be really good if you actually did


12223
14:31:07,596 --> 14:31:11,916
that button press kind of for them before we went to that screen so


12224
14:31:11,916 --> 14:31:15,360
we're not actually going to physically like tap that button for them but we're


12225
14:31:15,360 --> 14:31:21,116
going to execute the same code that that button executes for the user okay


12226
14:31:21,596 --> 14:31:26,880
so that's what we're gonna do now so um as the caption says in here in your


12227
14:31:26,880 --> 14:31:31,916
register view right before you navigate to the verify email route ensure that


12228
14:31:31,916 --> 14:31:35,436
you get the current user basically so you say


12229
14:31:35,436 --> 14:31:42,956
final user is firebase off instance i believe and current user okay


12230
14:31:42,956 --> 14:31:46,720
get your user and then in here


12231
14:31:46,720 --> 14:31:51,916
you'll say user um and there is a function called send email


12232
14:31:51,916 --> 14:31:55,520
verification and remember your user is an optional user and that's why you're


12233
14:31:55,520 --> 14:31:59,840
seeing this elvis operator here which is kind of like a


12234
14:31:59,840 --> 14:32:03,116
moustache or something i don't know what you want to call it some some people


12235
14:32:03,116 --> 14:32:08,000
call it elvis operator if you're coming from kotlin or in swift you would say


12236
14:32:08,000 --> 14:32:11,680
like an optional invocation depending on the language that you're coming from but


12237
14:32:11,680 --> 14:32:15,040
if you're not if you don't i have like a software development background then you


12238
14:32:15,040 --> 14:32:19,680
may just call that a question mark um remember now


12239
14:32:19,680 --> 14:32:23,840
so user is optional and this function returns a fusion voice so you can't just


12240
14:32:23,840 --> 14:32:28,720
call it you need to wait on it and so now we're doing that so we're now


12241
14:32:28,720 --> 14:32:34,080
awaiting on that all right and also since now we've changed our


12242
14:32:34,080 --> 14:32:37,520
logic in that when you press the register button upon successful


12243
14:32:37,520 --> 14:32:40,720
registration we're sending you an email verification


12244
14:32:40,720 --> 14:32:44,800
is not a good idea to end up on this screen that just says please verify your


12245
14:32:44,800 --> 14:32:48,880
email address because let's let's just face it we have already sent an email


12246
14:32:48,880 --> 14:32:53,200
verification so we don't want the user to click this button actually we want


12247
14:32:53,200 --> 14:32:56,560
the user to click this button or tap this button


12248
14:32:56,560 --> 14:33:01,200
if they haven't received the email in a while all right so we don't want like


12249
14:33:01,200 --> 14:33:05,840
double emails for users so it's just not a good idea


12250
14:33:05,840 --> 14:33:11,360
so uh sorry i'll just have a look at my notes a little bit here


12251
14:33:11,360 --> 14:33:16,400
okay so what we need to do now is as the caption now says here we need to go to


12252
14:33:16,400 --> 14:33:20,480
our verify email view and add a text on top


12253
14:33:20,480 --> 14:33:24,400
to say we have already sent a verification email okay and that's just


12254
14:33:24,400 --> 14:33:28,956
common sense okay so let's go to our


12255
14:33:28,956 --> 14:33:34,240
verify email route which is basically verify email view in here


12256
14:33:34,240 --> 14:33:38,080
and you can see that we have a column in here and the first text at the moment


12257
14:33:38,080 --> 14:33:42,240
says please verify your email address so let's create another text in here i'm


12258
14:33:42,240 --> 14:33:46,800
going to say cons text and i'm going to say


12259
14:33:46,800 --> 14:33:50,720
weave you see because i want to write the word


12260
14:33:50,720 --> 14:33:55,756
weave as in we have there is a single code in here so i cannot have my own


12261
14:33:55,756 --> 14:34:00,000
string having single codes because then dart doesn't understand where


12262
14:34:00,000 --> 14:34:04,240
this what this string is because it thinks here's a string that starts here


12263
14:34:04,240 --> 14:34:08,480
and it ends here but what is this one so in in order to have single quotes


12264
14:34:08,480 --> 14:34:11,756
inside your dark strings then you would have to


12265
14:34:11,756 --> 14:34:16,080
encapsulate or basically put your string inside double


12266
14:34:16,080 --> 14:34:20,796
quotes so you avoid that confusion so we can say we've


12267
14:34:20,796 --> 14:34:26,320
sent you an email verification please


12268
14:34:26,320 --> 14:34:30,956
please open it in order


12269
14:34:30,956 --> 14:34:34,880
to verify your yeah so please open it to verify your


12270
14:34:34,880 --> 14:34:37,040
uh accounts


12271
14:34:37,040 --> 14:34:41,360
something like this okay and also this text then we need to


12272
14:34:41,360 --> 14:34:44,400
change that as well because you see we don't want this text to be kind of like


12273
14:34:44,400 --> 14:34:48,320
a call to action saying that hello like here we're saying we sent you an


12274
14:34:48,320 --> 14:34:51,116
email verification please open the verifier again and then right after that


12275
14:34:51,116 --> 14:34:54,956
we're saying hey click this button so that's not a good idea let's just change


12276
14:34:54,956 --> 14:34:58,480
this text and say if you haven't


12277
14:34:58,480 --> 14:35:03,040
and let's make this double quotes as well just the same story as before


12278
14:35:03,040 --> 14:35:06,796
if you haven't received a verification


12279
14:35:06,796 --> 14:35:09,200
email yet


12280
14:35:09,200 --> 14:35:14,560
press the button below something like this


12281
14:35:14,560 --> 14:35:18,796
okay so i'm just gonna press command s and now you can see those texts being


12282
14:35:18,796 --> 14:35:21,520
displayed on the screen they're not very pretty to be honest with you at the


12283
14:35:21,520 --> 14:35:26,720
moment but that's okay too so um that's not a problem let it be like


12284
14:35:26,720 --> 14:35:31,276
that all right so we're displaying that text


12285
14:35:31,276 --> 14:35:35,040
uh to the user and what we need to do now uh


12286
14:35:35,040 --> 14:35:41,040
is to test this whole uh flow basically again just to make sure


12287
14:35:41,040 --> 14:35:45,276
that yeah it's working as expected so in order to do that go to your firebase


12288
14:35:45,276 --> 14:35:48,640
console again and i'm gonna bring up the console in


12289
14:35:48,640 --> 14:35:52,000
here hopefully you can see it too and i'm gonna go to that project then


12290
14:35:52,000 --> 14:35:56,400
authentication and this user i'm gonna delete this user okay delete


12291
14:35:56,400 --> 14:35:59,756
boof all right that user is gone i'm gonna


12292
14:35:59,756 --> 14:36:04,640
close the screen now and and what we're gonna do then is just


12293
14:36:04,640 --> 14:36:09,596
to hot restart the application in order to clean all the states


12294
14:36:10,840 --> 14:36:14,640
um to restart


12295
14:36:14,720 --> 14:36:21,596
is it not taking effect all right i'm gonna then uh verify email


12296
14:36:21,596 --> 14:36:25,520
i can see that there is no back button and it kind of feels like


12297
14:36:25,520 --> 14:36:30,320
uh we're ending up in in that screen because in our main dart file


12298
14:36:30,320 --> 14:36:34,720
and let's go in main dart i believe that we're actually sending


12299
14:36:34,720 --> 14:36:41,116
the user to verify email view in this case user firebase instance card okay


12300
14:36:41,116 --> 14:36:44,956
so this is a lot a little bit a bit of a problem because now we're kind of like


12301
14:36:44,956 --> 14:36:50,080
stuck in this uh in this


12302
14:36:50,480 --> 14:36:54,560
view because firebase as a caption right here says it says firebase doesn't


12303
14:36:54,560 --> 14:36:59,200
understand the remote changes we removed that user completely but


12304
14:36:59,200 --> 14:37:02,956
firebase still believes that that user exists and that is because you see


12305
14:37:02,956 --> 14:37:07,680
firebase can't like the client that is inside the code that is inside the


12306
14:37:07,680 --> 14:37:11,520
client application which you are developing can't constantly talk with


12307
14:37:11,520 --> 14:37:14,956
firebase and say give me the latest state give me the latest state


12308
14:37:14,956 --> 14:37:19,916
this user that is right now on this on this phone


12309
14:37:19,916 --> 14:37:24,080
is a local user that once had a connection with the backend but it


12310
14:37:24,080 --> 14:37:29,520
doesn't anymore but firebase doesn't like delete this user locally so


12311
14:37:29,520 --> 14:37:33,840
so what we need to do the best way to handle this case is to


12312
14:37:33,840 --> 14:37:40,560
have kind of like a restart uh button in our verify email so if for


12313
14:37:40,560 --> 14:37:46,480
some reason the user like in this case understands that hey um i'm stuck


12314
14:37:46,480 --> 14:37:50,640
i need to get out of here from verify email i kind of want to go back to where


12315
14:37:50,640 --> 14:37:56,880
i was so what we need to do is to upon the user pressing a restart button


12316
14:37:56,880 --> 14:38:00,640
here we want to sign that user out so firebase


12317
14:38:00,640 --> 14:38:05,360
understands well this user isn't signed in anymore so that we don't end up in


12318
14:38:05,360 --> 14:38:11,680
this case that email is verified etc etc and we also are going to send the user


12319
14:38:11,680 --> 14:38:15,680
to the register view okay and as you can see


12320
14:38:15,680 --> 14:38:19,756
we can't send the user back to the register view


12321
14:38:19,756 --> 14:38:25,040
i mean that we can't expect the register view to exist on the view


12322
14:38:25,040 --> 14:38:29,436
on the view stack in this case because if a user has just freshly started the


12323
14:38:29,436 --> 14:38:33,436
application application so they will end up in this future builder the future


12324
14:38:33,436 --> 14:38:36,480
builder would then check the user and says oh you should go to the verify


12325
14:38:36,480 --> 14:38:40,400
email view and in this case there is no register view behind the


12326
14:38:40,400 --> 14:38:45,116
um verify email view so in that case you will see that we won't push but we will


12327
14:38:45,116 --> 14:38:50,080
actually do push name and remove until but we will get there soon okay


12328
14:38:50,080 --> 14:38:54,956
first off let's go to your uh to your verify email view and right after this


12329
14:38:54,956 --> 14:38:58,400
text button we're gonna add another text button


12330
14:38:58,400 --> 14:39:04,000
up a little bit so you see it better and let's just say a text button


12331
14:39:04,000 --> 14:39:07,840
unpressed is just going to be empty for now and then for his child we're going


12332
14:39:07,840 --> 14:39:13,756
to add a const text that just says restart okay


12333
14:39:13,756 --> 14:39:18,880
so that's that and then here what we then need to do is as i mentioned before


12334
14:39:18,880 --> 14:39:24,160
is to uh and as the caption explains here we need to actually log


12335
14:39:24,160 --> 14:39:28,400
the user out so let's say firebase auth instance


12336
14:39:28,400 --> 14:39:32,796
and and then what we need to do is to say sign out


12337
14:39:32,796 --> 14:39:38,880
okay remember cyano i also believe is a future of void so you need to await on


12338
14:39:38,880 --> 14:39:43,276
it so oops um see i just jumped screens without


12339
14:39:43,276 --> 14:39:46,480
actually really wanting to do that so let's wait on it and it's going to give


12340
14:39:46,480 --> 14:39:51,520
you an error because now your unpressed function is not async so make it async


12341
14:39:51,520 --> 14:39:55,520
right after doing that using if i do command s


12342
14:39:55,520 --> 14:39:58,160
now we're gonna see the restart button here but


12343
14:39:58,160 --> 14:40:00,956
doing that just does a sign out it doesn't actually send you to the


12344
14:40:00,956 --> 14:40:05,040
register view and we're gonna take care of that soon so as a caption says


12345
14:40:05,040 --> 14:40:11,680
navigator of context i push named remove until and in here we're going to send


12346
14:40:11,680 --> 14:40:16,720
the user to remember from our routes view sorry a routes file there is a


12347
14:40:16,720 --> 14:40:23,116
register route okay so let's go there let's go register


12348
14:40:23,116 --> 14:40:27,436
out and in here we just leave the code as it is and i come at the end to clean


12349
14:40:27,436 --> 14:40:30,640
it up a little bit and


12350
14:40:31,116 --> 14:40:34,320
and that should be good to go


12351
14:40:35,360 --> 14:40:40,000
okay now i'm gonna do a hot restart you'll see now we end up in here


12352
14:40:40,000 --> 14:40:43,916
and because it's still the user is logged in because we haven't executed


12353
14:40:43,916 --> 14:40:48,320
this code yet and i'm just gonna then press the restart button and you'll see


12354
14:40:48,320 --> 14:40:52,240
we end up in the register view just to make sure that we're not going to go


12355
14:40:52,240 --> 14:40:55,116
into this vicious cycle again that every time we


12356
14:40:55,116 --> 14:40:58,956
do a hot restart we're going to end up in the verify email view


12357
14:40:58,956 --> 14:41:03,436
and let's just do a hot restart now to see what the state of the application is


12358
14:41:03,436 --> 14:41:08,320
going to be and as you can see upon hot restart we end up in the login view


12359
14:41:08,320 --> 14:41:13,916
which means that the main dart file in the future builder it went to this code


12360
14:41:13,916 --> 14:41:18,320
so the user is null at the moment and that's exactly what we wanted because we


12361
14:41:18,320 --> 14:41:22,000
signed the current user out okay


12362
14:41:22,720 --> 14:41:27,916
all right so we are then going to use the same credentials to um


12363
14:41:27,916 --> 14:41:30,880
as before to register let's just go to the register view then and i'm going to


12364
14:41:30,880 --> 14:41:36,160
say round.np np gmail.com and then fubarbas


12365
14:41:36,160 --> 14:41:41,116
and i'm going to then register this user and you can see it says it sent you an


12366
14:41:41,116 --> 14:41:44,640
email verification please open it to verify and i can see on my third screen


12367
14:41:44,640 --> 14:41:50,080
here that i actually got the email um verification


12368
14:41:50,080 --> 14:41:52,480
so as you can see in the caption it says


12369
14:41:52,480 --> 14:41:57,596
get the confirmation email but don't confirm yet because we kind of need to


12370
14:41:57,596 --> 14:42:00,956
have a look at a problem that we have in our application


12371
14:42:00,956 --> 14:42:06,480
so um now let's see if we can log in so what


12372
14:42:06,480 --> 14:42:10,480
i'm going to do is to go back on the screen from the verify


12373
14:42:10,480 --> 14:42:14,560
email go back to the register view and instead of doing a registration again go


12374
14:42:14,560 --> 14:42:18,480
to the login view now use your current uh


12375
14:42:18,480 --> 14:42:22,720
like the new user that you just created but you haven't confirmed the email use


12376
14:42:22,720 --> 14:42:28,956
the credentials of that user and say gmail.com and foobar as


12377
14:42:28,956 --> 14:42:33,596
and then press the login button you'll see now we've ended up in the


12378
14:42:33,596 --> 14:42:38,720
main ui of the application and that is problematic because


12379
14:42:38,720 --> 14:42:43,200
any user just like i did can go to the register view then they will go to the


12380
14:42:43,200 --> 14:42:48,796
confirmation view automatically they say okay i got a confirmation email and then


12381
14:42:48,796 --> 14:42:52,400
they don't confirm the email they press the back button to go to the registry


12382
14:42:52,400 --> 14:42:56,000
view again and from registry google they go to the login view and then they log


12383
14:42:56,000 --> 14:42:59,756
in so because you see in our login view


12384
14:42:59,756 --> 14:43:03,520
and here in this code right after signing with email and


12385
14:43:03,520 --> 14:43:08,796
password we are not verifying that the user has actually verified their email


12386
14:43:08,796 --> 14:43:13,276
address we're just saying sign in and firebase says all right sign in great


12387
14:43:13,276 --> 14:43:17,680
the email and password match an entry in the authentication database i'm good to


12388
14:43:17,680 --> 14:43:21,276
go and then we're just saying push to notes wrap so


12389
14:43:21,276 --> 14:43:25,436
that is a problem um that we have that we need to fix in the


12390
14:43:25,436 --> 14:43:29,116
next chapter okay but for now we've got a lot of code i


12391
14:43:29,116 --> 14:43:34,640
can see all the files are changed so let's commit our code and tag it like


12392
14:43:34,640 --> 14:43:37,596
what we're doing in other chapters as well


12393
14:43:37,596 --> 14:43:41,200
gonna go to the terminal i'm going to change the screen layout a little bit so


12394
14:43:41,200 --> 14:43:44,720
you see it better increase the size of the


12395
14:43:44,720 --> 14:43:49,916
views so you see it even better and you can see the previous tag was


12396
14:43:49,916 --> 14:43:54,400
step 6. now let's have a look at the status of our code and i can see there's


12397
14:43:54,400 --> 14:44:00,080
lots of changes modified you can always issue the command g apa


12398
14:44:00,080 --> 14:44:04,560
which i call gopa and that will show you all your changes but i'm just gonna say


12399
14:44:04,560 --> 14:44:09,520
git commit sorry good at all i'm going to say git commit and we said


12400
14:44:09,520 --> 14:44:12,956
that we're going to commit this as step 7 okay


12401
14:44:12,956 --> 14:44:20,080
and push those changes to github and i'm going to also tag it as step 7


12402
14:44:20,080 --> 14:44:26,080
so like that step seven and then i'm just gonna say git push tags


12403
14:44:26,080 --> 14:44:29,840
all right fantastic now as the caption says here we need to get


12404
14:44:29,840 --> 14:44:33,040
ready for the next chapter and as you can see it says user needs to verify


12405
14:44:33,040 --> 14:44:37,040
email before going to the main ui because that is as i explained there is


12406
14:44:37,040 --> 14:44:40,640
a problem that we have which we haven't addressed yet but it's quite easy to


12407
14:44:40,640 --> 14:44:44,240
address as you'll see in the next chapter so


12408
14:44:44,240 --> 14:44:48,320
uh i'll see you there hello everyone and welcome to chapter 23


12409
14:44:48,320 --> 14:44:51,756
of this vlog course as you saw in the previous chapter we talked about


12410
14:44:51,756 --> 14:44:57,436
cleaning up our registration flow so that when we tap on registration or the


12411
14:44:57,436 --> 14:45:02,560
register button we actually send an email confirmation to the user and we


12412
14:45:02,560 --> 14:45:06,640
saw that we go to the email confirmation view and before we even get there we


12413
14:45:06,640 --> 14:45:11,360
then receive our email confirmation in our inbox so that all worked very well


12414
14:45:11,360 --> 14:45:15,840
except for the fact that now a user who hasn't registered who hasn't verified


12415
14:45:15,840 --> 14:45:20,080
their email account can still end up in the main ui of our application and


12416
14:45:20,080 --> 14:45:24,160
that's what we're going to fix in this chapter so


12417
14:45:24,160 --> 14:45:28,320
as the title shows here or as the caption shows


12418
14:45:28,320 --> 14:45:31,520
here what we need to do is to ensure that


12419
14:45:31,520 --> 14:45:34,160
we first before we continue with the chapter we need to make sure that we've


12420
14:45:34,160 --> 14:45:38,320
logged out of the application so um now that you're in the main ui of the


12421
14:45:38,320 --> 14:45:42,640
application let's just go in here and say log out and we're logging out to end


12422
14:45:42,640 --> 14:45:46,560
up on the login screen i'm gonna i'm also gonna bring up visual


12423
14:45:46,560 --> 14:45:52,080
studio code as we left it before so


12424
14:45:52,080 --> 14:45:54,796
what we need to do now i'm going to close


12425
14:45:54,796 --> 14:45:59,116
other tabs except for the login view excuse me


12426
14:45:59,116 --> 14:46:02,560
and you can see in here right after we're signing with email and


12427
14:46:02,560 --> 14:46:07,200
password right now we're sending the user to the notes route and we need to


12428
14:46:07,200 --> 14:46:10,956
clean this up so what we need to do is just to get the


12429
14:46:10,956 --> 14:46:14,560
current user from firebase and


12430
14:46:14,560 --> 14:46:18,720
i'm gonna bring up the correct correct caption as well and


12431
14:46:18,720 --> 14:46:21,916
i'm gonna change the screen layouts a little bit um


12432
14:46:21,916 --> 14:46:26,320
so you see the code better so as you can see the caption says you


12433
14:46:26,320 --> 14:46:30,480
need to add an if statement before you send the user to the main ui of the


12434
14:46:30,480 --> 14:46:33,276
application and to make sure that the user is


12435
14:46:33,276 --> 14:46:36,720
verified okay so in order to do that we also need to get


12436
14:46:36,720 --> 14:46:39,916
the concurrent user so we can say final user


12437
14:46:39,916 --> 14:46:45,276
is equal to firebase off instance firebase off instance


12438
14:46:45,276 --> 14:46:50,080
and the current user okay so that's for the current user


12439
14:46:50,080 --> 14:46:54,480
and we're going to say if the user optional you see we need to optionally


12440
14:46:54,480 --> 14:47:00,000
access that email verified or false when we get a boolean value here either


12441
14:47:00,000 --> 14:47:05,520
this returns a true or reuse false so in here we say user's email is


12442
14:47:05,520 --> 14:47:12,080
verified otherwise user's email


12443
14:47:13,040 --> 14:47:18,000
uh if i can spell it is not verified okay


12444
14:47:18,000 --> 14:47:22,320
so now we have the two conditions in there


12445
14:47:22,320 --> 14:47:26,320
so what we need to do now is to grab this code that we had from before you


12446
14:47:26,320 --> 14:47:31,116
can see it sends the user to the main ui of the application and of course that


12447
14:47:31,116 --> 14:47:36,880
needs to happen only if the user has basically


12448
14:47:36,880 --> 14:47:43,116
verified their email address so grab that code and place it in user email is


12449
14:47:43,116 --> 14:47:47,520
verified okay in here and in the case that the user email is


12450
14:47:47,520 --> 14:47:50,720
not verified then we kind of need to do the same code


12451
14:47:50,720 --> 14:47:55,276
but instead of going to the nodes route which is the main ui of the application


12452
14:47:55,276 --> 14:47:59,436
we actually know we need to go to the verify email route if you remember from


12453
14:47:59,436 --> 14:48:03,916
the previous chapters in a route start we've already defined verify email route


12454
14:48:03,916 --> 14:48:06,400
okay so


12455
14:48:06,400 --> 14:48:11,916
let's go back in our login view and then paste the same code except for going to


12456
14:48:11,916 --> 14:48:17,680
notes route we're gonna go to and verify email routes okay


12457
14:48:17,680 --> 14:48:20,796
so really all we have to do for this


12458
14:48:20,796 --> 14:48:24,880
chapter so it's just cleaning up the logic one step at a time okay and that's


12459
14:48:24,880 --> 14:48:28,160
okay some chapters are going to be long some chapters are going to be short it's


12460
14:48:28,160 --> 14:48:32,796
actually quite refreshing even for me to have some shorter chapters so


12461
14:48:32,796 --> 14:48:38,640
um now what we need to do is let's put this to test


12462
14:48:38,640 --> 14:48:41,916
and as you can see what we're going to do is to remove that test user again


12463
14:48:41,916 --> 14:48:45,596
from firebase console and test the entire flow again so i'm going to do a


12464
14:48:45,596 --> 14:48:49,840
hot restart here and just to make sure that the state is


12465
14:48:49,840 --> 14:48:54,240
completely restarted i'm gonna bring up a firebase console let's go to our


12466
14:48:54,240 --> 14:48:57,680
application which for me is called mynotes flatware project


12467
14:48:57,680 --> 14:49:01,116
i'm gonna go to authentication and remove that test user that i created


12468
14:49:01,116 --> 14:49:04,880
here okay delete and do another hot restart just to make


12469
14:49:04,880 --> 14:49:08,480
sure the cache is invalidated if there's any cache in there


12470
14:49:08,480 --> 14:49:13,680
and what we need to do now is to just oops


12471
14:49:13,680 --> 14:49:17,840
what we need to do now is to do kind of like the same registration again so i'm


12472
14:49:17,840 --> 14:49:21,756
gonna go to the register page here and then i'm gonna go to your enter your


12473
14:49:21,756 --> 14:49:24,480
email here and i'm going to


12474
14:49:24,480 --> 14:49:29,040
write the same email address to register the user again through bar bath


12475
14:49:29,040 --> 14:49:32,796
press the register button and we end up here then i'm going to do


12476
14:49:32,796 --> 14:49:37,276
the same hacked as we did before uh press the back button and then go to the


12477
14:49:37,276 --> 14:49:42,796
login screen i'm going to type the same credentials and say fubar baz if


12478
14:49:42,796 --> 14:49:47,596
everything is worked according to our plan upon pressing the login button the


12479
14:49:47,596 --> 14:49:52,320
code is going to end up in here saying that the user's email is not verified


12480
14:49:52,320 --> 14:49:55,200
and it's going to remove the login route from


12481
14:49:55,200 --> 14:50:00,240
from the stack and push the verify email route on the screen okay so both


12482
14:50:00,240 --> 14:50:03,916
and that is exactly what we're getting here you can see we're going to the


12483
14:50:03,916 --> 14:50:09,916
verify email view as we planned okay as i mentioned this chapter was a


12484
14:50:09,916 --> 14:50:14,080
short one and that's actually really good so what we need to do now is to


12485
14:50:14,080 --> 14:50:17,200
focus on what we're gonna do in the next chapter as you can see it says our


12486
14:50:17,200 --> 14:50:21,360
authentication logic is all over the ui and we need to make a service for the


12487
14:50:21,360 --> 14:50:24,796
authentication you see up until this point we've been working


12488
14:50:24,796 --> 14:50:29,040
with firebase directly in the source code in that we've been like writing


12489
14:50:29,040 --> 14:50:35,276
firebase auth code pretty much in our ui now you may think that well that's okay


12490
14:50:35,276 --> 14:50:38,000
i mean if you're if you don't come from a


12491
14:50:38,000 --> 14:50:41,756
software development background you may think that that is fine and it should as


12492
14:50:41,756 --> 14:50:44,880
long as it works but


12493
14:50:44,880 --> 14:50:48,160
the software development industry has shown us over and over again that the


12494
14:50:48,160 --> 14:50:53,276
saying of oh if it if it's working if it's not broken don't fix it that that


12495
14:50:53,276 --> 14:50:58,240
doesn't that doesn't really apply to all cases as we've seen uh in the case of


12496
14:50:58,240 --> 14:51:03,116
for instance log 4j uh it was working but then there was a security flying and


12497
14:51:03,116 --> 14:51:06,400
everybody had to go out to their code base and fix everything so we're


12498
14:51:06,400 --> 14:51:10,560
entirely still of the weekends so the code works


12499
14:51:10,560 --> 14:51:15,680
but there's a problem with it in that here you have your user interface so the


12500
14:51:15,680 --> 14:51:20,240
code is quite high level it's like literally the user is here and then we


12501
14:51:20,240 --> 14:51:25,116
have our user interface here and then we have like the code that we've written


12502
14:51:25,116 --> 14:51:29,436
and like a little bit more low level like our if statements and then firebase


12503
14:51:29,436 --> 14:51:33,116
is sitting all the way down here and we're like exposing this firebase layer


12504
14:51:33,116 --> 14:51:38,400
all the way to our ui layers the ui is talking directly with a layer of the


12505
14:51:38,400 --> 14:51:41,436
code that is so level that they shouldn't have direct connection with


12506
14:51:41,436 --> 14:51:44,796
each other so if you're not from a software


12507
14:51:44,796 --> 14:51:47,520
development background this may be a little bit alien to you but software


12508
14:51:47,520 --> 14:51:50,400
developers really like to make sure things are


12509
14:51:50,400 --> 14:51:53,520
com liking their own compartments


12510
14:51:53,520 --> 14:51:56,480
so what we need to do is in order to get


12511
14:51:56,480 --> 14:52:00,240
ready for the next chapter is just get a good cup of coffee or tea because the


12512
14:52:00,240 --> 14:52:02,560
next chapter is actually going to be a long one and it's going to be a


12513
14:52:02,560 --> 14:52:07,596
complicated one but i'm gonna do my best to explain all the concepts as good as i


12514
14:52:07,596 --> 14:52:11,360
can but just know that the next chapter is gonna be a


12515
14:52:11,360 --> 14:52:16,560
big one okay so uh grab your refreshments juice tea


12516
14:52:16,560 --> 14:52:21,916
water coffee whatever you want and i'll see you in the next chapter


12517
14:52:21,916 --> 14:52:26,320
hello and welcome to chapter 24 of this flutter course in the previous chapter


12518
14:52:26,320 --> 14:52:30,880
we talked about ensuring that the user's email is verified before he or she can


12519
14:52:30,880 --> 14:52:33,680
proceed with the with


12520
14:52:33,680 --> 14:52:38,240
by before the user is able to go to the main ui of the application


12521
14:52:38,240 --> 14:52:43,680
um and what we are going to do now is take a step back from developing our ui


12522
14:52:43,680 --> 14:52:50,240
and logic of the application by creating an auth service


12523
14:52:50,240 --> 14:52:53,116
so i'm going to provide you with a caption


12524
14:52:53,116 --> 14:52:56,480
here and as you can see it says auth provider auth service meaning an author


12525
14:52:56,480 --> 14:53:01,200
provide abstract class on an off service now


12526
14:53:01,200 --> 14:53:04,640
if we have a look at the code that we've created so far let me bring up visual


12527
14:53:04,640 --> 14:53:08,640
studio code so you can see it on the screen like i do here um i'm going to


12528
14:53:08,640 --> 14:53:12,880
increase the size so you see better and i'm going to bring up the


12529
14:53:12,880 --> 14:53:17,840
application as well so we can see it side by side


12530
14:53:17,840 --> 14:53:22,160
i have three screens here so it's a lot it's a little bit difficult to juggle


12531
14:53:22,160 --> 14:53:24,796
um excuse me


12532
14:53:24,796 --> 14:53:28,400
so i'm going to change the screen layout so you see the code better


12533
14:53:28,400 --> 14:53:31,840
if you look here we have our


12534
14:53:31,840 --> 14:53:35,276
um three views login


12535
14:53:35,276 --> 14:53:39,040
register and verify email view okay or we actually have four views the other


12536
14:53:39,040 --> 14:53:44,796
one is the main ui of the application um which we have right now created in


12537
14:53:44,796 --> 14:53:48,400
here notes view excuse me


12538
14:53:48,400 --> 14:53:51,520
but if you have a look at the login view you can see one of the things that we're


12539
14:53:51,520 --> 14:53:54,240
doing immediately as we go to the login view is


12540
14:53:54,240 --> 14:53:56,560
um is not actually immediately by pressing


12541
14:53:56,560 --> 14:54:00,956
the login button we're talking with firebase off signing in we are kind of


12542
14:54:00,956 --> 14:54:05,200
doing the same thing talking with firebase by uh in the register view you


12543
14:54:05,200 --> 14:54:08,160
can see firebase auth instance create user


12544
14:54:08,160 --> 14:54:11,916
and we also have firebase in our verify email


12545
14:54:11,916 --> 14:54:17,360
so you can see here we are actually importing firebase auth firebase so


12546
14:54:17,360 --> 14:54:21,680
if you're not uh like if you don't have a software development background from


12547
14:54:21,680 --> 14:54:25,680
from before you may think well this is this is fine very important firebase but


12548
14:54:25,680 --> 14:54:30,400
you also need to know that firebase is kind of like a low-level abstraction


12549
14:54:30,400 --> 14:54:34,400
layer that um that is talking to the firebase backend


12550
14:54:34,400 --> 14:54:38,320
and providing you with a lot of high-level uh


12551
14:54:38,320 --> 14:54:42,080
functionality but those high-level functionalities at the firebase level


12552
14:54:42,080 --> 14:54:45,360
they're kind of high level but if you think about


12553
14:54:45,360 --> 14:54:49,520
that firebase is a dependency that we're bringing into


12554
14:54:49,520 --> 14:54:53,436
our application that's talking with firebase back-end in itself is


12555
14:54:53,436 --> 14:54:58,400
low-level compared with our ui so if you think that


12556
14:54:58,400 --> 14:55:03,116
the ui code is here then what we are doing is that we're like saying here is


12557
14:55:03,116 --> 14:55:07,680
firebase and then the ui is talking directly with the firebase libraries and


12558
14:55:07,680 --> 14:55:11,756
functionalities and in the in the eyes of a like a software


12559
14:55:11,756 --> 14:55:14,880
developer has been doing this for a while this is not a good idea simply


12560
14:55:14,880 --> 14:55:20,640
because we're missing a little bit of a layer in between the ui and firebase


12561
14:55:20,640 --> 14:55:24,400
which abstracts away the firebase functionality from the ui of the


12562
14:55:24,400 --> 14:55:28,640
application and as we talked about it before um it


12563
14:55:28,640 --> 14:55:32,640
is possible that in the future you may want to allow for instance apple login


12564
14:55:32,640 --> 14:55:38,640
or google login or sign in with facebook etc various options for signing in and


12565
14:55:38,640 --> 14:55:44,160
if you look at um the console at firebase you'll see immediately that


12566
14:55:44,160 --> 14:55:48,880
you have various ways of authenticating a user at the moment we've enabled sign


12567
14:55:48,880 --> 14:55:53,116
in method for email and password but you also have the ability to add a new


12568
14:55:53,116 --> 14:55:56,796
provider you can as you can see google facebook and these as you can see


12569
14:55:56,796 --> 14:56:01,200
they're called providers a new provider and that is what we're going to do in


12570
14:56:01,200 --> 14:56:06,480
this chapter of our flashlight course as well so


12571
14:56:06,480 --> 14:56:11,040
we're going to take firebase and think of it as an authentication


12572
14:56:11,040 --> 14:56:14,240
provider okay so we're going to create a class


12573
14:56:14,240 --> 14:56:19,200
which i believe we're calling at the moment firebase auth provider


12574
14:56:19,200 --> 14:56:23,520
but we're gonna say that this firebase auth provider comes from another class


12575
14:56:23,520 --> 14:56:29,436
which is called auth provider so what we're gonna do then is gonna say okay


12576
14:56:29,436 --> 14:56:35,596
any auth provider that needs to that our application can work with is expected to


12577
14:56:35,596 --> 14:56:40,240
have certain functionalities and certain properties okay such as the


12578
14:56:40,240 --> 14:56:44,240
current auth provider should be able to return the current user the author


12579
14:56:44,240 --> 14:56:47,680
provider should be able to log a user in um


12580
14:56:47,680 --> 14:56:51,840
log user out register users send an email verification so these


12581
14:56:51,840 --> 14:56:57,116
few basic functionalities so that will be our abstract offs


12582
14:56:57,116 --> 14:57:02,320
provider class and then we will create another class which is as we call it it


12583
14:57:02,320 --> 14:57:06,480
will be the concrete implementation of that abstract class so think of the


12584
14:57:06,480 --> 14:57:12,720
abstract class as kind of like a as it's it is our um contract


12585
14:57:12,720 --> 14:57:16,640
so we're saying any authentication provider such as google facebook etc


12586
14:57:16,640 --> 14:57:20,240
will need to conform to the functionality that we specified in this


12587
14:57:20,240 --> 14:57:23,756
abstract class okay then we will go and develop a concrete


12588
14:57:23,756 --> 14:57:27,040
implementation of that abstract class and we will call it firebase auth


12589
14:57:27,040 --> 14:57:31,436
provider and we will actually place the real implementation of our


12590
14:57:31,436 --> 14:57:35,040
authentication for firebase such as creating a user


12591
14:57:35,040 --> 14:57:41,520
logging user in etc etc in that concrete implementation okay


12592
14:57:41,520 --> 14:57:45,360
and then what we will do also we will create another class which we will call


12593
14:57:45,360 --> 14:57:51,596
it i believe we call it off service and its goal


12594
14:57:51,596 --> 14:57:56,080
and in this course it won't do so much what it will do it will just


12595
14:57:56,080 --> 14:58:01,200
take a provider such as a firebase auth provider a google auth provider and it


12596
14:58:01,200 --> 14:58:05,840
will just expose the functionalities of that provider to the outside world and


12597
14:58:05,840 --> 14:58:10,956
and the goal of this is that so we will have our ui talking


12598
14:58:10,956 --> 14:58:15,596
with that service and that service will talk to a provider which which is the


12599
14:58:15,596 --> 14:58:19,436
firebase auth provider and that firebase auth provider will talk to firebase so


12600
14:58:19,436 --> 14:58:23,276
we're right now we have firebase ui


12601
14:58:23,276 --> 14:58:27,200
but after after the end of this chapter we will have firebase


12602
14:58:27,200 --> 14:58:32,560
um firebase auth provider auth service and then the ui so we will


12603
14:58:32,560 --> 14:58:38,480
have two layers sitting in in between and you may actually correctly think


12604
14:58:38,480 --> 14:58:41,756
that well this is a lot of work why do we need that but


12605
14:58:41,756 --> 14:58:46,560
for me i if i wanted this course to be just another course where i show you how


12606
14:58:46,560 --> 14:58:50,080
to include firebase then it wouldn't be to be honest with you worth actually


12607
14:58:50,080 --> 14:58:53,680
doing yet another course about firebase and flutter because there are lots of


12608
14:58:53,680 --> 14:58:57,916
courses available maybe not maybe not courses that go through so much details


12609
14:58:57,916 --> 14:59:02,720
as i am going but i still believe that my job here is not just to make you a


12610
14:59:02,720 --> 14:59:07,116
developer but also make you a good developer where you take some extra


12611
14:59:07,116 --> 14:59:10,160
steps in order to make your code a little bit better and this is why you


12612
14:59:10,160 --> 14:59:14,080
will actually notice as as you get more into software development and working


12613
14:59:14,080 --> 14:59:18,240
with others in inside teams which you may not be doing at the moment but when


12614
14:59:18,240 --> 14:59:20,956
you get your first job a software developer you'll understand that other


12615
14:59:20,956 --> 14:59:24,320
software developers are actually taking some extra steps in order to make their


12616
14:59:24,320 --> 14:59:29,200
code a little bit easier and better to maintain so that's what we're gonna do


12617
14:59:29,200 --> 14:59:34,240
in our code okay so um


12618
14:59:34,240 --> 14:59:37,436
that was uh the intro for this chapter what we


12619
14:59:37,436 --> 14:59:41,756
need to do is to um first think about how we're handling


12620
14:59:41,756 --> 14:59:46,080
our um exceptions if you look inside the i mean in the


12621
14:59:46,080 --> 14:59:49,596
verify view we're not taking care of exceptions as such maybe that's


12622
14:59:49,596 --> 14:59:53,360
something we'll need to do as well but if you look at the login screen for


12623
14:59:53,360 --> 14:59:58,560
instance we're having here a try block and then when it gets to firebase off


12624
14:59:58,560 --> 15:00:03,756
exception we're handling user not found wrong password and then if anything else


12625
15:00:03,756 --> 15:00:07,680
happens we just say show error so here there are two


12626
15:00:07,680 --> 15:00:12,840
specific errors off errors that we're handling wrong password and the user not


12627
15:00:12,840 --> 15:00:18,320
found and if we go to the register view you will also see we


12628
15:00:18,320 --> 15:00:25,116
have weak password email already used and invalid email all right


12629
15:00:25,116 --> 15:00:30,400
so these are some of the exceptions that we'll need to handle in our um in our


12630
15:00:30,400 --> 15:00:34,956
application but right now as you can see our ui is going directly to firebase


12631
15:00:34,956 --> 15:00:40,080
auth exception and it's like importing firebase auth exception which is


12632
15:00:40,080 --> 15:00:45,200
created inside let's have a look firebase off accession src interface


12633
15:00:45,200 --> 15:00:48,560
it's in um


12634
15:00:49,276 --> 15:00:54,720
it's in one of the files which i believe is accessible through firebase auth so


12635
15:00:54,720 --> 15:00:59,040
if you go to firebase off that probably imports all the exceptions


12636
15:00:59,040 --> 15:01:04,400
as well there we go here it is so


12637
15:01:04,400 --> 15:01:08,560
so our ui shouldn't really know anything about firebase off by the end of this


12638
15:01:08,560 --> 15:01:13,756
chapter so let's take the first step here then and let's go and create our


12639
15:01:13,756 --> 15:01:17,276
as you can see a new file under lib


12640
15:01:17,276 --> 15:01:20,520
under folder called services auth and then off


12641
15:01:20,520 --> 15:01:23,436
exceptions.dart so i'm gonna do that right now


12642
15:01:23,436 --> 15:01:27,276
i'm going to collapse these and let's go under lay down you can see that we don't


12643
15:01:27,276 --> 15:01:30,796
have con right now we have constants utilities and views so we don't have


12644
15:01:30,796 --> 15:01:34,480
anything called services so let me right click on lib and say new file and you


12645
15:01:34,480 --> 15:01:38,080
can do the same thing and in here just enter the entire path


12646
15:01:38,080 --> 15:01:42,640
so say services off and then we say off


12647
15:01:42,640 --> 15:01:45,180
exceptions.dart okay


12648
15:01:45,180 --> 15:01:50,160
[Music] oh that is our new file that we created


12649
15:01:50,160 --> 15:01:52,956
in there and what we need to do is to go and


12650
15:01:52,956 --> 15:01:58,400
define all those exceptions so let's begin by saying that we need a new


12651
15:01:58,400 --> 15:02:02,796
exception called user not found off exception and if you remember user not


12652
15:02:02,796 --> 15:02:05,436
found is something that we're handling here do you remember


12653
15:02:05,436 --> 15:02:09,756
firebase off exception in the login view and if we cannot find that user we're


12654
15:02:09,756 --> 15:02:14,956
just showing an error saying show error dialog so let's define an exception for


12655
15:02:14,956 --> 15:02:22,560
that and i'm going to say class user not found and off


12656
15:02:25,436 --> 15:02:30,400
and i'm going to say implements exception so this is a typical way of


12657
15:02:30,400 --> 15:02:34,796
creating exception classes in your in your application that you say


12658
15:02:34,796 --> 15:02:38,956
and here is my own class that is that for instance


12659
15:02:38,956 --> 15:02:42,796
represents an exception and it's it's good practice just to say that it


12660
15:02:42,796 --> 15:02:46,796
implements an existing exception exception you can see here by command


12661
15:02:46,796 --> 15:02:51,436
pressing on it you can see it goes to flutter bin cache core exception start


12662
15:02:51,436 --> 15:02:55,116
so it is already imported by default you don't have to import any specific file


12663
15:02:55,116 --> 15:02:57,916
in order to get access to the exception class


12664
15:02:57,916 --> 15:03:04,320
so it's it suffices that you just implement that class okay


12665
15:03:04,320 --> 15:03:08,240
so now let's go ahead and implement the next


12666
15:03:08,240 --> 15:03:13,916
exception as the title as the caption says here wrong password off exception


12667
15:03:13,916 --> 15:03:17,916
and that is also handled inside our login view


12668
15:03:17,916 --> 15:03:21,596
wrong password right here so


12669
15:03:21,596 --> 15:03:27,520
i'm just gonna go and kind of like copy that code and in here i'm just gonna say


12670
15:03:27,520 --> 15:03:32,640
wrong password auth exception


12671
15:03:33,360 --> 15:03:37,916
all right what else are we handling here nothing else in the login view at least


12672
15:03:37,916 --> 15:03:41,520
so that's that's really good so i'm just going to close the login view


12673
15:03:41,520 --> 15:03:46,240
for now and save this file okay


12674
15:03:46,320 --> 15:03:50,080
so let's now start taking care of some of the exceptions that we're handling in


12675
15:03:50,080 --> 15:03:53,840
our register view and let's go to register view and you'll see here that


12676
15:03:53,840 --> 15:03:57,680
the first section exception that we're handling is called weak password


12677
15:03:57,680 --> 15:04:00,956
so i'm going to put a comment in here and


12678
15:04:00,956 --> 15:04:04,240
a comment in here i'm going to say login exceptions


12679
15:04:04,240 --> 15:04:08,400
and and register exceptions okay


12680
15:04:08,400 --> 15:04:11,916
so as the caption says let's create a class called weak password auth


12681
15:04:11,916 --> 15:04:16,880
exception gonna copy this code from here and i'm gonna say weak


12682
15:04:16,880 --> 15:04:22,560
password off exception so that's for the register views weak


12683
15:04:22,560 --> 15:04:27,916
password the next one is email already in use so that's what the caption says


12684
15:04:27,916 --> 15:04:32,640
here as well so let's go and copy this and i'm gonna say email already in use


12685
15:04:32,640 --> 15:04:35,436
auth exception


12686
15:04:35,596 --> 15:04:38,880
okay so now we have the password and email


12687
15:04:38,880 --> 15:04:44,480
already and use exceptions and let's have a look


12688
15:04:44,480 --> 15:04:49,276
and we also have the invalid email auth exception


12689
15:04:49,276 --> 15:04:53,360
which i don't think i had planned for but let's go and implement that as well


12690
15:04:53,360 --> 15:05:00,320
so let's say invalid email author okay


12691
15:05:00,796 --> 15:05:05,840
okay um now what we also need to do is to


12692
15:05:05,840 --> 15:05:10,480
define a few other exceptions as you remember from


12693
15:05:10,480 --> 15:05:15,116
register view we also have the case of an else where


12694
15:05:15,116 --> 15:05:18,720
we basically say something else happened here it's an off exception but something


12695
15:05:18,720 --> 15:05:22,880
else may have happened that we haven't handled with this code or we may also


12696
15:05:22,880 --> 15:05:26,880
have another cat statement here that catches like generic exceptions and


12697
15:05:26,880 --> 15:05:31,680
we're we're doing the same thing as you can see the code here um and let me


12698
15:05:31,680 --> 15:05:36,000
change the screen layout so you see it better i'm gonna go to


12699
15:05:36,000 --> 15:05:39,436
the login view as well because we're doing the exact same thing in the login


12700
15:05:39,436 --> 15:05:43,680
view in that upon getting a firebase auth exception


12701
15:05:43,680 --> 15:05:48,240
this code then we also have an else statement even


12702
15:05:48,240 --> 15:05:53,116
in there so we're saying if the code is not like handled by us it may be another


12703
15:05:53,116 --> 15:05:58,880
code in that case also show the show error dialog or in that case show error


12704
15:05:58,880 --> 15:06:02,400
dialogue and we're also doing a catch like a


12705
15:06:02,400 --> 15:06:05,756
generic catch as well so we need kind of like an


12706
15:06:05,756 --> 15:06:08,796
exception that handles all those cases so


12707
15:06:08,796 --> 15:06:14,000
an unknown code during the firebase off exception and an unknown exception so


12708
15:06:14,000 --> 15:06:17,680
we're gonna create a generic exception all right


12709
15:06:17,680 --> 15:06:21,040
i'm gonna change the screen layout a little bit


12710
15:06:21,040 --> 15:06:24,796
um like that i'm gonna go to my notes okay


12711
15:06:24,796 --> 15:06:30,080
so let's just in here say generic exceptions


12712
15:06:30,160 --> 15:06:35,276
um and i'm gonna bring


12713
15:06:35,276 --> 15:06:40,640
this one up as well today i'm gonna bring this one first so


12714
15:06:40,640 --> 15:06:44,240
let's go ahead and create a generic auth exception i'm gonna copy this code from


12715
15:06:44,240 --> 15:06:47,756
here i'm going to say generic auth exception


12716
15:06:47,756 --> 15:06:50,480
okay and what we also need to do is to


12717
15:06:50,480 --> 15:06:55,040
provide this thing user not logged in


12718
15:06:55,040 --> 15:07:00,400
off exception and you will you will know now that


12719
15:07:00,400 --> 15:07:03,276
um i mean you will need to know why we're


12720
15:07:03,276 --> 15:07:07,040
actually having a use or not logged in off exception and


12721
15:07:07,040 --> 15:07:12,640
this will be an exception that our um that our firebase provider will be able


12722
15:07:12,640 --> 15:07:15,200
to throw if


12723
15:07:15,200 --> 15:07:21,276
the user is null after registering that user for instance


12724
15:07:21,276 --> 15:07:26,000
so let's say that we tell our auth provider we say register a user with


12725
15:07:26,000 --> 15:07:30,640
this email and password and no exception happens nothing


12726
15:07:30,640 --> 15:07:34,640
so we the application thinks that all right everything went as expected but


12727
15:07:34,640 --> 15:07:38,240
what if the user that we access


12728
15:07:38,240 --> 15:07:42,796
at firebase auth is null in that case our auth provider


12729
15:07:42,796 --> 15:07:46,160
should be able to handle that and send an exception saying that oh i couldn't


12730
15:07:46,160 --> 15:07:50,720
find this user or this user isn't logged in so let's create that exception as


12731
15:07:50,720 --> 15:07:55,200
well so i'm just going to say user not logged in exception so let's


12732
15:07:55,200 --> 15:07:58,080
just say class implement


12733
15:07:58,080 --> 15:08:02,000
exception okay so user not logged in off exception


12734
15:08:02,000 --> 15:08:05,436
and i'm gonna save that as well


12735
15:08:06,720 --> 15:08:10,880
all right that was a lot of work now we have created all those files oh sorry


12736
15:08:10,880 --> 15:08:13,756
maybe you didn't actually see the code that i wrote i don't like having


12737
15:08:13,756 --> 15:08:17,360
captions up all the time but i also think captions are so important so that


12738
15:08:17,360 --> 15:08:20,880
you always know what we're working with but the downside of having these


12739
15:08:20,880 --> 15:08:24,320
captions at the bottom left of the screen is that sometimes they hide what


12740
15:08:24,320 --> 15:08:27,680
i'm typing so i'm doing my best really to


12741
15:08:27,680 --> 15:08:31,756
catch those and catch that issue and if i see that


12742
15:08:31,756 --> 15:08:34,720
happening i'll i'm gonna bring the screen up like this so you see it but


12743
15:08:34,720 --> 15:08:39,276
sometimes i may be missing that i apologize for that so let's let's say


12744
15:08:39,276 --> 15:08:43,276
that and now we've implemented all our exceptions


12745
15:08:43,276 --> 15:08:47,200
and as you can see in the captions it says we need an auth user we shouldn't


12746
15:08:47,200 --> 15:08:51,360
expose firebase's user to the ui and this to be honest with you is the


12747
15:08:51,360 --> 15:08:58,240
same story as we had for our exceptions the ui code should not at all be working


12748
15:08:58,240 --> 15:09:03,436
with firebase the ui code should be so high level and so abstracted from the


12749
15:09:03,436 --> 15:09:08,400
rest of your application that it shouldn't even at all know how it is


12750
15:09:08,400 --> 15:09:11,276
functioning you're just giving it different


12751
15:09:11,276 --> 15:09:15,200
providers and services and it should be calling those services and providers not


12752
15:09:15,200 --> 15:09:19,840
really knowing how they're tied together and at the moment you can see our login


12753
15:09:19,840 --> 15:09:24,160
view it's like where let's go in here


12754
15:09:24,160 --> 15:09:29,680
you can see here in login view and for me it's on line 67 for you maybe in a


12755
15:09:29,680 --> 15:09:33,916
different line but we're after calling the sign in with email and password


12756
15:09:33,916 --> 15:09:36,560
function which we also shouldn't be doing


12757
15:09:36,560 --> 15:09:39,840
but what we're doing after that is we're


12758
15:09:39,840 --> 15:09:44,400
getting the current user from firebase and this user is of type you can see


12759
15:09:44,400 --> 15:09:49,916
let's go in here and see it's of type user so if i go put the type in here and


12760
15:09:49,916 --> 15:09:54,956
command click on it you'll see this user is part of firebase auth you see there's


12761
15:09:54,956 --> 15:10:01,436
a fun there's a class called user so we are all we were also like exposing a


12762
15:10:01,436 --> 15:10:05,840
firebase user to our ui and that is not a good idea


12763
15:10:05,840 --> 15:10:10,880
so as a caption says here we shouldn't expose firebase's user to the ui so we


12764
15:10:10,880 --> 15:10:16,480
need to have our own user that abstracts away the functionality


12765
15:10:16,480 --> 15:10:21,916
or that that the current user at firebase level has okay


12766
15:10:21,916 --> 15:10:26,240
so let's go ahead and do that so


12767
15:10:26,240 --> 15:10:32,240
we're going to create an off user dart file in lib services auth a file called


12768
15:10:32,240 --> 15:10:36,240
off user so i'm going to remove or sorry i'm


12769
15:10:36,240 --> 15:10:39,596
going to close all the files that i've created and under


12770
15:10:39,596 --> 15:10:44,560
services auth i'm going to then create an off user


12771
15:10:44,560 --> 15:10:50,956
so i'm going to say off user.dark and in this off user then we need to


12772
15:10:50,956 --> 15:10:55,520
basically start working with firebase in this case so i'm going to go to my notes


12773
15:10:55,520 --> 15:10:58,796
just to ensure i'm telling you everything that i'm um that i plan to


12774
15:10:58,796 --> 15:11:03,680
tell you all right so let's go in here and import


12775
15:11:03,680 --> 15:11:08,880
firebase it's user import package


12776
15:11:09,116 --> 15:11:13,200
firebase and is it in


12777
15:11:13,200 --> 15:11:18,000
firebase auth i believe and then we're gonna say show user okay and as i've


12778
15:11:18,000 --> 15:11:23,040
mentioned before this is a great way of just ensuring that you're not exposing


12779
15:11:23,040 --> 15:11:28,720
too much of a packages classes to your current workspace except what you're


12780
15:11:28,720 --> 15:11:33,360
saying is that firebase auth is isn't it maybe an entire dart file with its


12781
15:11:33,360 --> 15:11:37,116
structures maybe thousands of classes now i'm exaggerating but a lot of


12782
15:11:37,116 --> 15:11:41,916
classes but you are only interested in the user class okay


12783
15:11:41,916 --> 15:11:45,040
so you could also like say


12784
15:11:45,040 --> 15:11:48,320
as firebase


12785
15:11:48,320 --> 15:11:52,956
off like that and then you would say show user and that will allow you so if


12786
15:11:52,956 --> 15:11:56,000
i say test then you will be able to say


12787
15:11:56,000 --> 15:12:00,000
firebaseauth.user you can also do that if you if you


12788
15:12:00,000 --> 15:12:04,640
prefer to for instance ha prefix the user in this case that comes from


12789
15:12:04,640 --> 15:12:09,520
firebase with the actual place that it comes from you could also use as


12790
15:12:09,520 --> 15:12:14,160
some people may like it and i also do but i haven't planned to do that in in


12791
15:12:14,160 --> 15:12:18,160
this particular file so do it if you want to the way


12792
15:12:18,160 --> 15:12:21,360
that i'm doing it here so you can follow along with the steps that i'm providing


12793
15:12:21,360 --> 15:12:25,200
for you in this course without diverging from


12794
15:12:25,200 --> 15:12:30,160
from the point okay now that we've done the um


12795
15:12:30,160 --> 15:12:33,200
import what we need to do as a caption in the


12796
15:12:33,200 --> 15:12:37,596
case we need to create the actual class so let's say class off user


12797
15:12:37,596 --> 15:12:45,276
and in here what we need is a field called is email verified now remember


12798
15:12:45,276 --> 15:12:49,520
right now all we need from our off user is to know whether that email is


12799
15:12:49,520 --> 15:12:53,360
verified or not so if you go for instance to our login view


12800
15:12:53,360 --> 15:12:56,796
you can see that we have this code here and


12801
15:12:56,796 --> 15:13:00,160
that signs a user in with email and password and right after that gets the


12802
15:13:00,160 --> 15:13:04,560
user and all it does with that user says email verified


12803
15:13:04,560 --> 15:13:08,240
and we're doing the same thing in register view i believe so let's go to


12804
15:13:08,240 --> 15:13:12,080
register view and you can see in here and it says


12805
15:13:12,080 --> 15:13:15,916
actually there we're not doing anything with the email verified all we're doing


12806
15:13:15,916 --> 15:13:19,916
is just saying a send email verification so sorry about that so it's in login


12807
15:13:19,916 --> 15:13:25,680
screen okay so let's go in our off user in here and say it has a property called


12808
15:13:25,680 --> 15:13:32,720
is email verified okay so i'm gonna say final and bull is email


12809
15:13:32,720 --> 15:13:36,640
and you saw that firebase has implemented this function this uh


12810
15:13:36,640 --> 15:13:41,840
property as email verified i personally prefer to call boolean functions boolean


12811
15:13:41,840 --> 15:13:47,520
getters in this case like a property of a class with is wherever i see that fit


12812
15:13:47,520 --> 15:13:51,756
it's just because it makes a lot more sense for me at least to say user dot is


12813
15:13:51,756 --> 15:13:55,680
email verified rather than saying user.email verified


12814
15:13:55,680 --> 15:14:00,640
it just makes it more like complete grammatically is blah blah verified or


12815
15:14:00,640 --> 15:14:04,320
is that so that's the reason that we're


12816
15:14:04,320 --> 15:14:07,916
diverging a little bit okay um


12817
15:14:07,916 --> 15:14:12,480
now you see this in here and we're saying it's email verified you can get


12818
15:14:12,480 --> 15:14:17,200
help from visual studio code to create a constructor for final fields


12819
15:14:17,200 --> 15:14:20,080
and even if you don't want to do that you could always just type it by hand


12820
15:14:20,080 --> 15:14:25,840
you can say off user self is email verified sorry this is email verified


12821
15:14:25,840 --> 15:14:31,436
and since this class it only has a property that you can set upon


12822
15:14:31,436 --> 15:14:34,956
initialization and you're not changing it because it's a final field


12823
15:14:34,956 --> 15:14:40,796
excuse me you can make your constructor a const


12824
15:14:40,796 --> 15:14:45,276
excuse me again and it would also be good if you could


12825
15:14:45,276 --> 15:14:49,596
basically let's say immutable as another try defining


12826
15:14:49,596 --> 15:14:53,840
undefined i believe you actually have to import foundation in here


12827
15:14:53,840 --> 15:14:59,520
now immutable basically is but immutable here i don't think we've


12828
15:14:59,520 --> 15:15:04,160
talked about that before but it's just like an annotation telling that this


12829
15:15:04,160 --> 15:15:08,956
class and any subclasses of this class are going to be immutable meaning that


12830
15:15:08,956 --> 15:15:13,520
their internals are never going to be changed upon initialization so if you


12831
15:15:13,520 --> 15:15:20,880
then go and create for instance class my off user and say extends the auth user


12832
15:15:20,880 --> 15:15:26,240
and then you'll have a bull um let's say in here and you create a


12833
15:15:26,240 --> 15:15:31,360
constructor for it so let's create a constructor for it so boom okay


12834
15:15:31,360 --> 15:15:36,320
prefer declaring what is a const okay then we say const then you say okay well


12835
15:15:36,320 --> 15:15:39,840
i want a boolean flag in here bull is blah


12836
15:15:39,840 --> 15:15:42,400
and um


12837
15:15:42,400 --> 15:15:45,520
yeah bull is blocked


12838
15:15:45,520 --> 15:15:49,116
now you see it says null not non-nullable instance flab but it must


12839
15:15:49,116 --> 15:15:53,840
be initialized let's just initialize it to false and and it says can't define a


12840
15:15:53,840 --> 15:15:57,596
cons constructor okay then we're not going to make it a cons constructor and


12841
15:15:57,596 --> 15:16:01,756
now you see that little warning here it says this class or a class that this


12842
15:16:01,756 --> 15:16:06,720
class inherits from is marked as immutable but one or more of its


12843
15:16:06,720 --> 15:16:11,756
instance feels aren't final so now you see what immutable means it


12844
15:16:11,756 --> 15:16:17,116
tells dart that this class and all its subclasses need to be immune immutable


12845
15:16:17,116 --> 15:16:22,320
they cannot have any fields that change so by removing this field then you get


12846
15:16:22,320 --> 15:16:25,276
rid of that little warning and you can make this


12847
15:16:25,276 --> 15:16:30,480
cons and the error completely goes away so now you know what immutable means


12848
15:16:30,480 --> 15:16:34,956
okay all right great now we created that is


12849
15:16:34,956 --> 15:16:38,796
email verified at a cons constructor for our off user


12850
15:16:38,796 --> 15:16:44,240
let's go to the next point the next point as you can see here it


12851
15:16:44,240 --> 15:16:50,400
says we need a factory constructor that creates our


12852
15:16:50,400 --> 15:16:55,436
auth user from a firebase user and factory constructors are really useful


12853
15:16:55,436 --> 15:17:00,720
for this purpose in that you have let's say object x and you want to


12854
15:17:00,720 --> 15:17:06,000
create an object y from that instead of you manually gluing things in some sort


12855
15:17:06,000 --> 15:17:10,480
of a middle layer saying now i take the object x and add some blah blah and fuse


12856
15:17:10,480 --> 15:17:14,640
it together and then put object y you can put that responsibility on object y


12857
15:17:14,640 --> 15:17:19,116
and saying that you need to be able to initialize yourself or construct an


12858
15:17:19,116 --> 15:17:22,720
instance of yourself from this object and this is like a typical pattern that


12859
15:17:22,720 --> 15:17:27,276
you'll see everywhere so um well everywhere everywhere but where


12860
15:17:27,276 --> 15:17:31,840
you have the ability to do that so that's what we're gonna do now with a


12861
15:17:31,840 --> 15:17:36,880
factory constructor so let's say we have a factory constructor here


12862
15:17:36,880 --> 15:17:42,320
we'll say off user and we say from firebase okay as the caption says then


12863
15:17:42,320 --> 15:17:47,200
we take a firebase user in here like that and then we say what we will


12864
15:17:47,200 --> 15:17:52,240
do in here we will actually create an instance of our own class an off user


12865
15:17:52,240 --> 15:17:56,160
given that user okay so let's say that we create


12866
15:17:56,160 --> 15:18:00,796
an off user in here and a lot of user and it's email


12867
15:18:00,796 --> 15:18:04,000
verified comes from user email verified like that


12868
15:18:04,000 --> 15:18:07,116
all right so this shouldn't be they shouldn't be that difficult to


12869
15:18:07,116 --> 15:18:10,240
understand so this creates this goes into


12870
15:18:10,240 --> 15:18:15,680
this constructor you can see and it takes the email verified value of


12871
15:18:15,680 --> 15:18:20,240
the firebase user and places it in this class so all we did is just we kind of


12872
15:18:20,240 --> 15:18:24,240
like copied a firebase user and


12873
15:18:24,240 --> 15:18:27,840
we made a copy of it into our own off user


12874
15:18:27,840 --> 15:18:32,880
okay so we're not exposing firebase's user and all of its


12875
15:18:32,880 --> 15:18:37,756
properties to our user interface


12876
15:18:39,040 --> 15:18:44,160
all right that was a lot of information now let's talk about an auth provider as


12877
15:18:44,160 --> 15:18:46,640
i mentioned in the beginning of this chapter


12878
15:18:46,640 --> 15:18:52,080
and as you saw in the firebase console you will have the possibility to add


12879
15:18:52,080 --> 15:18:54,880
various auth providers to your application when you're working with


12880
15:18:54,880 --> 15:18:59,360
firebase so such as google and apple facebook


12881
15:18:59,360 --> 15:19:03,200
and many many more okay an email and password combination like we're doing so


12882
15:19:03,200 --> 15:19:07,200
all of those are providers what we need to do now is to create an


12883
15:19:07,200 --> 15:19:14,160
alt provider class that encapsulates every provider that we may add in the


12884
15:19:14,160 --> 15:19:19,520
future and creates a nice interface for them says every provider that our


12885
15:19:19,520 --> 15:19:24,560
application can work with should conform to this particular interface okay


12886
15:19:24,560 --> 15:19:29,116
so let's go ahead and take care of that now and i can see here we're going to


12887
15:19:29,116 --> 15:19:32,080
create that file on the lib services auth


12888
15:19:32,080 --> 15:19:38,080
off provider so we have lib services off but we don't have auth provider files so


12889
15:19:38,080 --> 15:19:44,640
let's let's right click on auth and say off provider dart


12890
15:19:46,320 --> 15:19:49,436
and go to my notes


12891
15:19:49,680 --> 15:19:53,840
so what we're going to do in here then is


12892
15:19:53,840 --> 15:19:59,276
since our off uh provider is going to work with our


12893
15:19:59,276 --> 15:20:02,240
um it's for instance


12894
15:20:02,240 --> 15:20:05,360
the the functions that we're going to provide for our auth provider are for


12895
15:20:05,360 --> 15:20:10,560
instance a getter that gets the current user so that's not a function it's just


12896
15:20:10,560 --> 15:20:14,640
a getter the way we're actually doing it in here if you see let me go to login


12897
15:20:14,640 --> 15:20:18,560
view and you'll see in login view here this


12898
15:20:18,560 --> 15:20:22,956
thing at the moment say firebase auth instance current user this is a getter


12899
15:20:22,956 --> 15:20:28,880
so this is a property and returns the firebase user what we want is for our


12900
15:20:28,880 --> 15:20:34,080
auth provider to also be able to provide us with the current user now remember


12901
15:20:34,080 --> 15:20:40,080
we've abstracted away the firebase user with our own auth user which we just


12902
15:20:40,080 --> 15:20:46,000
created okay so what we need is this abstract class that can return an


12903
15:20:46,000 --> 15:20:51,840
instance of our off user okay so for that we need to import this off


12904
15:20:51,840 --> 15:20:56,160
user into this dart file so let's just say import


12905
15:20:56,160 --> 15:20:59,276
package this application that i've created as


12906
15:20:59,276 --> 15:21:02,080
you can see in the title it's called my notes


12907
15:21:02,080 --> 15:21:08,956
so let's go to my notes services auth and then auth user so that's the


12908
15:21:08,956 --> 15:21:13,116
import statement as you can see in the caption i've written package xxx and


12909
15:21:13,116 --> 15:21:17,200
that's where you need to put the name of your package in this case for me is my


12910
15:21:17,200 --> 15:21:19,520
notes


12911
15:21:20,796 --> 15:21:26,720
all right that's great now let's go and create an abstract class so i've


12912
15:21:26,720 --> 15:21:31,756
mentioned this twice before but our auth provider dart file is not gonna have


12913
15:21:31,756 --> 15:21:36,240
really is not gonna have any logic it's an


12914
15:21:36,240 --> 15:21:40,956
abstract class though abstract classes in dart can contain logic but in this


12915
15:21:40,956 --> 15:21:44,560
case our abstract class is just going to be a protocol or you may know it as


12916
15:21:44,560 --> 15:21:50,080
interface or you may also know it as well an abstract class so let's go ahead


12917
15:21:50,080 --> 15:21:55,040
and create that let's say abstract class auth provider


12918
15:21:55,040 --> 15:22:01,116
and so the abstract class creation is done what we need to do is now give it


12919
15:22:01,116 --> 15:22:05,596
like the ability to return the current off user okay so as the caption says


12920
15:22:05,596 --> 15:22:10,880
we're going to say off user and get current user okay


12921
15:22:10,880 --> 15:22:14,480
so we're saying any author provider whether it works with email password


12922
15:22:14,480 --> 15:22:18,560
whether it's a google auth provider whether it's an apple facebook twitter


12923
15:22:18,560 --> 15:22:22,956
whatever it needs to be able to optionally return the current currently


12924
15:22:22,956 --> 15:22:26,080
authenticated user and that's what this optional site is


12925
15:22:26,080 --> 15:22:31,276
here for okay and then what we will also need to do is


12926
15:22:31,276 --> 15:22:33,680
to allow it to


12927
15:22:33,680 --> 15:22:39,680
be able to log a user in okay so we're going to say we will have a function


12928
15:22:39,680 --> 15:22:43,436
that completes in the future


12929
15:22:43,436 --> 15:22:48,956
and returns an off user and it says log in


12930
15:22:48,956 --> 15:22:53,520
like this okay and now we have to think what does this


12931
15:22:53,520 --> 15:22:58,400
login actually require well in our case it requires email and password so let's


12932
15:22:58,400 --> 15:23:02,000
just put email and password we're thinking that every author provider that


12933
15:23:02,000 --> 15:23:06,240
we're writing is going to have an email and password combination of some sort


12934
15:23:06,240 --> 15:23:10,560
you could say id and password but i'm just going to go with email and password


12935
15:23:10,560 --> 15:23:14,480
for now okay so let's make these required parameters as well so i'm going


12936
15:23:14,480 --> 15:23:18,240
to put curly brackets here and curly bracket here i'm going to say required


12937
15:23:18,240 --> 15:23:22,000
stream email and then a required stream password like


12938
15:23:22,000 --> 15:23:24,560
this okay


12939
15:23:24,560 --> 15:23:28,720
and a semicolon at the end of that command s to save the file so dark


12940
15:23:28,720 --> 15:23:35,436
formatter can do its magic and the reason where you see if we go to


12941
15:23:35,436 --> 15:23:39,200
author sorry if you go to our login screen again


12942
15:23:39,200 --> 15:23:43,840
and in here we say sign in with user and password you can see that it always


12943
15:23:43,840 --> 15:23:49,040
returns a user credential now you may you may think how can i always return a


12944
15:23:49,040 --> 15:23:53,116
user credential if the current email and password are actually incorrect and they


12945
15:23:53,116 --> 15:23:57,276
don't belong to a valid user well the way that firebase is handling is that if


12946
15:23:57,276 --> 15:24:01,680
you say sign in with email and password if you can grab the current user if he


12947
15:24:01,680 --> 15:24:05,040
can't sign in that user with the information that you provide it returns


12948
15:24:05,040 --> 15:24:09,360
it otherwise it fails with an exception meaning that it's saying that as long as


12949
15:24:09,360 --> 15:24:13,276
you call me and there's no exception i will give you user credential if there


12950
15:24:13,276 --> 15:24:18,160
is an exception well you need to handle that so that is a great way to avoid


12951
15:24:18,160 --> 15:24:23,200
having functions let me close the off user as well avoid having functions that


12952
15:24:23,200 --> 15:24:27,040
do like this that option on your return user so


12953
15:24:27,040 --> 15:24:32,560
do your work in your functions return the user and return the object


12954
15:24:32,560 --> 15:24:37,436
that you promised if you can't do that throw an error so you don't have to do


12955
15:24:37,436 --> 15:24:42,640
this do this kind of a optional return okay


12956
15:24:43,596 --> 15:24:48,480
for a the login function now we need to also have a function that can create a


12957
15:24:48,480 --> 15:24:52,480
user so that imagine that it's for the sign up or


12958
15:24:52,480 --> 15:24:56,240
um yeah what else do we call it uh register


12959
15:24:56,240 --> 15:25:00,560
yeah so let's call it a create user so we say


12960
15:25:00,560 --> 15:25:06,240
this also returns a auth user and we call it creates user like this


12961
15:25:06,240 --> 15:25:09,680
and this also has all these parameters so i'm just going to copy and paste this


12962
15:25:09,680 --> 15:25:14,480
you don't have to do that twice and a semicolon at the end


12963
15:25:14,480 --> 15:25:20,080
all right guard formatter do its thing and then let's go and


12964
15:25:20,080 --> 15:25:24,880
and create a function that allows us then to log a user out because that's


12965
15:25:24,880 --> 15:25:28,720
what we're doing in the main ui of the application okay


12966
15:25:28,720 --> 15:25:32,320
the log out it's not going to return any value as you can see in the caption here


12967
15:25:32,320 --> 15:25:37,680
just a future void so we say future void log out just like that


12968
15:25:37,680 --> 15:25:42,880
all right so that was simple and also we will need a function that


12969
15:25:42,880 --> 15:25:47,040
can send an email verification okay so this one's also very easy it's just a


12970
15:25:47,040 --> 15:25:52,840
future void and as you can see in captions we're calling it send email


12971
15:25:52,840 --> 15:25:57,520
verification all right so


12972
15:25:57,520 --> 15:26:00,240
how was that okay


12973
15:26:00,240 --> 15:26:03,360
as i mentioned our office provider at the moment is


12974
15:26:03,360 --> 15:26:06,840
just an abstract class so it's


12975
15:26:06,840 --> 15:26:11,520
dictating an interface for any authentication provider that we're gonna


12976
15:26:11,520 --> 15:26:16,400
add to our application we but just so you know we are only


12977
15:26:16,400 --> 15:26:20,160
going to add an email author provider okay


12978
15:26:20,160 --> 15:26:23,840
or sorry a firebase author provider


12979
15:26:23,840 --> 15:26:28,720
but this way by creating an abstract class with an author provider as a name


12980
15:26:28,720 --> 15:26:32,080
and then you create a concrete class called firebase auth provider you're


12981
15:26:32,080 --> 15:26:36,560
able to in the future to extend this and add more and more auth providers all of


12982
15:26:36,560 --> 15:26:40,956
which will follow the same interface okay so that's the goal


12983
15:26:40,956 --> 15:26:46,000
but we're only in this in this course are gonna use firebase auth provider


12984
15:26:46,000 --> 15:26:50,720
so uh just so you know as the caption says go ahead and create


12985
15:26:50,720 --> 15:26:56,080
a a file called firebase auth provider in your services auth folder i'm gonna


12986
15:26:56,080 --> 15:27:00,720
right click here and i'm gonna say oops uh and say new file i'm gonna call it


12987
15:27:00,720 --> 15:27:04,916
firebase off dot provider.net


12988
15:27:05,200 --> 15:27:09,360
now let's go in here and say um i'm gonna go to my notes a little bit


12989
15:27:09,360 --> 15:27:13,436
here uh like that okay so this is gonna be like


12990
15:27:13,436 --> 15:27:19,916
the juiciest part of um of this chapter we are actually going to


12991
15:27:19,916 --> 15:27:25,200
abstract the way firebase authentication into our own provider so expect this


12992
15:27:25,200 --> 15:27:29,840
file to grow a little bit in size i can see my notes it's going to go to about


12993
15:27:29,840 --> 15:27:36,000
100 lines of code but that's okay too so and um we can just get started with it


12994
15:27:36,000 --> 15:27:39,040
and so as you can see in the caption we need to


12995
15:27:39,040 --> 15:27:44,640
import a few of files auth user auth provider and off exceptions we need


12996
15:27:44,640 --> 15:27:48,560
auth user because this sorry actually let me first


12997
15:27:48,560 --> 15:27:52,080
explain why we need to import auth provider because our firebase auth


12998
15:27:52,080 --> 15:27:56,080
provider is going to be a concrete implementation of the file auth provider


12999
15:27:56,080 --> 15:27:59,360
or the class auth provider that we just created so that's the reason for that


13000
15:27:59,360 --> 15:28:02,240
import the os user import is going to be


13001
15:28:02,240 --> 15:28:05,116
because as you can see in the auth provider


13002
15:28:05,116 --> 15:28:09,840
the login and create user functions they need to return an off user so that's why


13003
15:28:09,840 --> 15:28:13,596
we need to import off users so that our provider can return instances of that


13004
15:28:13,596 --> 15:28:16,480
okay and last but not least we also need to


13005
15:28:16,480 --> 15:28:20,640
import auth exceptions because remember our firebase auth provider is also going


13006
15:28:20,640 --> 15:28:23,680
to abstract away all the authentication


13007
15:28:23,680 --> 15:28:28,080
errors and exceptions that otherwise happen at the firebase level into our


13008
15:28:28,080 --> 15:28:33,360
own exceptions that we've created here off exceptions okay so let me go


13009
15:28:33,360 --> 15:28:38,160
ahead and first import off user so package


13010
15:28:38,160 --> 15:28:44,320
and this application called my notes and we have services auth


13011
15:28:44,320 --> 15:28:49,116
and then we have off user okay so i'm gonna import that


13012
15:28:49,116 --> 15:28:53,436
and i'm gonna copy this file then and this line and the next one is gonna be


13013
15:28:53,436 --> 15:28:57,040
the off provider and as you can see in the captures we


13014
15:28:57,040 --> 15:29:01,360
also have to import auth exceptions


13015
15:29:02,160 --> 15:29:05,840
so those are the three imports


13016
15:29:06,000 --> 15:29:09,680
now since we have our own imports


13017
15:29:09,680 --> 15:29:12,880
and this file is going to talk directly with firebase we also need to import


13018
15:29:12,880 --> 15:29:17,360
firebase of course so and let's go ahead and import


13019
15:29:17,360 --> 15:29:20,880
and i'm going to actually copy that code so i don't have to type all of it


13020
15:29:20,880 --> 15:29:23,520
because it's a little bit boring but you can see


13021
15:29:23,520 --> 15:29:28,240
in the captions at least what you need to import the firebase off and you need


13022
15:29:28,240 --> 15:29:32,480
to also import firebase off exception okay


13023
15:29:32,480 --> 15:29:36,720
great so that's our imports


13024
15:29:36,720 --> 15:29:40,720
um now what we need to do is to create the actual class and


13025
15:29:40,720 --> 15:29:43,916
um as you can see it's going to be called firebase all provider and


13026
15:29:43,916 --> 15:29:48,400
implements auth provider which is our own class so let's say firebase


13027
15:29:48,400 --> 15:29:53,276
auth provider implements a provider just like that okay and now


13028
15:29:53,276 --> 15:29:56,480
you can see you get an error same missing concrete implementation i'm


13029
15:29:56,480 --> 15:30:01,200
going to change the layout of the screen so you see the code in its entirety


13030
15:30:01,200 --> 15:30:05,276
and then what we need to do is to implement you see those function


13031
15:30:05,276 --> 15:30:09,596
functions and getters that auth provider abstract class


13032
15:30:09,596 --> 15:30:14,240
says that every class that implements it needs to implement those things as well


13033
15:30:14,240 --> 15:30:18,640
so you may try to do those things by hand but i absolutely


13034
15:30:18,640 --> 15:30:24,720
i i i'm not at all a fan of doing things by hand sorry about that so i prefer to


13035
15:30:24,720 --> 15:30:27,756
get help from the editor to complete these things so i'm just going to say


13036
15:30:27,756 --> 15:30:31,840
command dot and make class firebase off abstract


13037
15:30:31,840 --> 15:30:36,640
create five missing overrides okay so there we go so visual studio code


13038
15:30:36,640 --> 15:30:39,756
created all those functions in here and you can see in all of them it just says


13039
15:30:39,756 --> 15:30:44,080
throw unimplemented error great stuff


13040
15:30:44,080 --> 15:30:48,560
i'm gonna decrease the size of the font here go back to the


13041
15:30:48,560 --> 15:30:53,680
same layout that we had before so the first thing that we need to do in


13042
15:30:53,680 --> 15:30:59,200
here let's go ahead and implement this current user okay


13043
15:30:59,200 --> 15:31:03,680
so this is going to have a lot of not a lot but it's going to have a bit


13044
15:31:03,680 --> 15:31:07,360
of logic so i'm going to do this instead of being with a pointer


13045
15:31:07,360 --> 15:31:12,560
and let's go ahead in here and try to get that user so let's say


13046
15:31:12,560 --> 15:31:17,680
you see our job is now to get the firebase user and turn it into an off


13047
15:31:17,680 --> 15:31:22,240
user remember our off user had a factory constructor so we need to call that


13048
15:31:22,240 --> 15:31:28,880
factory constructor okay so let's just say final user is equal to firebase off


13049
15:31:28,880 --> 15:31:32,080
our firebase and auth


13050
15:31:32,080 --> 15:31:35,520
instance and then we say current user


13051
15:31:35,520 --> 15:31:40,160
and then we say if user is not null


13052
15:31:40,320 --> 15:31:45,116
and we need to create an instance of it as off users so we just say return


13053
15:31:45,116 --> 15:31:54,320
off user from firebase user okay otherwise we return null like this so


13054
15:31:54,320 --> 15:31:58,320
if firebase says there's a user then we create an off user out of that and we


13055
15:31:58,320 --> 15:32:01,360
just return it


13056
15:32:02,560 --> 15:32:06,400
okay that was for a current user it wasn't so much of code to be honest with


13057
15:32:06,400 --> 15:32:10,400
you now what we need to do is to take care


13058
15:32:10,400 --> 15:32:14,240
of create user which is this function right here


13059
15:32:14,240 --> 15:32:19,276
so create user is going to be a little bit thicker to be honest so


13060
15:32:19,276 --> 15:32:24,560
let's go ahead and first do a little bit of formatting in


13061
15:32:24,560 --> 15:32:29,200
here so i like to always append a comma at the end of the last


13062
15:32:29,200 --> 15:32:33,200
parameter of my function so that when i do dark formatter


13063
15:32:33,200 --> 15:32:37,840
or dart format it's going to break all these parameters into their own


13064
15:32:37,840 --> 15:32:41,520
lines okay because before it looked like this and it's not so clean in my eyes at


13065
15:32:41,520 --> 15:32:44,720
least it's a preference thing okay so


13066
15:32:44,720 --> 15:32:50,160
in here what we need to do is to create basically uh


13067
15:32:50,160 --> 15:32:55,276
a user with uh firebase so i'm going to put this entire thing in


13068
15:32:55,276 --> 15:33:01,360
in a try block and then we're going to catch firebase off exception


13069
15:33:01,360 --> 15:33:08,000
and on firebase off exception catch e okay


13070
15:33:08,000 --> 15:33:11,520
so just like that and then we're going to have a generic


13071
15:33:11,520 --> 15:33:16,080
cache block in here like this


13072
15:33:17,360 --> 15:33:21,840
all right uh now what we need to do in create user in the tri-state main


13073
15:33:21,840 --> 15:33:25,276
statement we need to actually tell firebase that we want to create a new


13074
15:33:25,276 --> 15:33:30,000
user so let's say firebase off


13075
15:33:30,000 --> 15:33:33,840
instant and then we say create user with email and password okay so we have the


13076
15:33:33,840 --> 15:33:38,320
email here and the password and we can see those parameters already there so we


13077
15:33:38,320 --> 15:33:40,560
don't have to do anything so


13078
15:33:40,560 --> 15:33:45,200
um but what we need to do here is you can first actually see yeah this


13079
15:33:45,200 --> 15:33:48,480
function needs to return a value we're gonna fix this so don't worry about that


13080
15:33:48,480 --> 15:33:52,956
but we also need to await on this because remember creating a user or


13081
15:33:52,956 --> 15:33:56,400
email password is not a function that just returns immediately and this is one


13082
15:33:56,400 --> 15:33:59,276
of the things that is absolutely beautiful about dart in that in the


13083
15:33:59,276 --> 15:34:03,040
interface we didn't actually say that this function has to be async but you


13084
15:34:03,040 --> 15:34:07,436
can in this concrete implementation make this function async so it's absolutely


13085
15:34:07,436 --> 15:34:11,436
beautiful so async is not the part of the signature of the function but it has


13086
15:34:11,436 --> 15:34:14,956
more to do with the internals of that function so in order to call this


13087
15:34:14,956 --> 15:34:19,200
function with an await you see if we put a weight here we get an error we need to


13088
15:34:19,200 --> 15:34:24,880
make this function async all right so great stuff


13089
15:34:25,360 --> 15:34:30,956
all right so after doing that what we're going to do is to get the current user


13090
15:34:30,956 --> 15:34:35,840
if the current user is there then we're just gonna return the current user if


13091
15:34:35,840 --> 15:34:40,240
the current user after creating a user or email and password and no exceptions


13092
15:34:40,240 --> 15:34:45,360
is not there then that is a bad sign and we need to return then one of our auth


13093
15:34:45,360 --> 15:34:48,880
exceptions called user not logged in off exception okay


13094
15:34:48,880 --> 15:34:52,720
so i'm going to close this so let's go in here and say final


13095
15:34:52,720 --> 15:34:57,596
user is get or just user is the current user


13096
15:34:57,596 --> 15:35:01,840
remember we already have a getter for a current user right here


13097
15:35:01,840 --> 15:35:04,640
okay and it just gets the current user from


13098
15:35:04,640 --> 15:35:10,956
firebase so we say here's the user if the user is available there


13099
15:35:10,956 --> 15:35:15,360
is not null then just return the user


13100
15:35:15,360 --> 15:35:20,320
otherwise you should throw a user not found or i think that's what we call the


13101
15:35:20,320 --> 15:35:23,436
user not logged in


13102
15:35:23,756 --> 15:35:27,956
auth exception all right


13103
15:35:28,560 --> 15:35:32,560
that's for the creation of the user if everything goes fine except for this


13104
15:35:32,560 --> 15:35:36,160
part now we need to go to our firebase auth


13105
15:35:36,160 --> 15:35:39,680
exception and we need to handle a few things um


13106
15:35:39,680 --> 15:35:44,880
so if you look at where in our register view


13107
15:35:44,880 --> 15:35:51,040
in here we are handling weak password email already in use and invalid email


13108
15:35:51,040 --> 15:35:55,596
so let's just copy these three things okay actually these four things because


13109
15:35:55,596 --> 15:35:59,276
we have an else block in there as well okay


13110
15:35:59,276 --> 15:36:03,916
so i'm gonna copy that code just do the same thing please so go to your registry


13111
15:36:03,916 --> 15:36:08,000
and copy that code go back to your firebase auth provider inside the


13112
15:36:08,000 --> 15:36:11,756
firebase off exception where you're catching that


13113
15:36:11,756 --> 15:36:15,916
paste that code but remove everything that has anything to do with the show


13114
15:36:15,916 --> 15:36:21,840
error dialog okay so at least we have if and else statements okay


13115
15:36:21,840 --> 15:36:26,080
like this so you should end up with a code that looks like this


13116
15:36:26,080 --> 15:36:29,596
now where there is a weak password we are


13117
15:36:29,596 --> 15:36:33,276
actually going to throw our own error so we're going to say throw


13118
15:36:33,276 --> 15:36:38,080
weak password off exception it is an email already in use we're


13119
15:36:38,080 --> 15:36:42,000
going to throw email already and use authexception


13120
15:36:42,000 --> 15:36:47,520
in case on invalid email throw invalid email off exception and if there is any


13121
15:36:47,520 --> 15:36:51,596
other code that we don't know about we're just going to throw a generic auth


13122
15:36:51,596 --> 15:36:54,080
exception


13123
15:36:54,560 --> 15:36:59,840
and also if there is a final catch basically meaning that by calling the


13124
15:36:59,840 --> 15:37:03,916
create user an email with email and password if there is any other exception


13125
15:37:03,916 --> 15:37:08,400
other than firebase auth exception we also need to handle that and throw


13126
15:37:08,400 --> 15:37:13,360
a generic auth exception there as well okay


13127
15:37:13,360 --> 15:37:19,040
a lot of code but hopefully this makes our ui code


13128
15:37:19,040 --> 15:37:23,360
easier to read okay so we're doing this for a good purpose


13129
15:37:23,360 --> 15:37:25,916
great stuff that's for our


13130
15:37:25,916 --> 15:37:30,720
create user i'm gonna fall create user uh if it allows me to fold the entire


13131
15:37:30,720 --> 15:37:35,360
create user poof and i'm gonna fold current user as well so this is a


13132
15:37:35,360 --> 15:37:37,840
technique that you can or not a technique that's just a trick you can do


13133
15:37:37,840 --> 15:37:41,360
in your editor if it supports folding and unfolding just to make sure that it


13134
15:37:41,360 --> 15:37:45,200
looks a little bit cleaner okay because now that you've written create user you


13135
15:37:45,200 --> 15:37:49,200
may not be directly interested in all its details you may just want to know


13136
15:37:49,200 --> 15:37:52,640
that it's there okay


13137
15:37:53,276 --> 15:37:57,916
all right the next thing we need to do is to implement send email verification


13138
15:37:57,916 --> 15:38:01,436
so let's find that function and i can see it's right here send email


13139
15:38:01,436 --> 15:38:04,400
verification i'm gonna scroll a little bit up so you see


13140
15:38:04,400 --> 15:38:09,200
like that i'm gonna go to my notes as well okay


13141
15:38:09,200 --> 15:38:14,560
so what we need to do then is to incent email verification what we need


13142
15:38:14,560 --> 15:38:18,956
is to also mark this as async because it's going to call an asynchronous


13143
15:38:18,956 --> 15:38:23,116
function on firebase as well okay and we need to


13144
15:38:23,116 --> 15:38:26,956
call the send email verification function on the firebase user remember


13145
15:38:26,956 --> 15:38:30,796
our user doesn't have that functionality our user only has is email verified


13146
15:38:30,796 --> 15:38:36,240
property so in here let's get the firebase user so i'm going to say user


13147
15:38:36,240 --> 15:38:39,596
is firebase off


13148
15:38:39,596 --> 15:38:42,840
instance current user and we say


13149
15:38:42,840 --> 15:38:50,320
if user is not null then we call that function so we say await user send email


13150
15:38:50,320 --> 15:38:53,596
verification i remember i think this was the future of void so that's why we're


13151
15:38:53,596 --> 15:38:58,880
doing a weight on it and that is why we have the async tag in here okay now


13152
15:38:58,880 --> 15:39:04,080
if the user is nil then we're gonna just say user is not logged in you cannot


13153
15:39:04,080 --> 15:39:08,080
send an email verification from user who's not logged in okay so then you


13154
15:39:08,080 --> 15:39:12,640
throw user not logged in off exception


13155
15:39:12,640 --> 15:39:17,520
okay so that's our send email verification


13156
15:39:17,520 --> 15:39:21,680
function let's then fold this function as well so


13157
15:39:21,680 --> 15:39:25,520
we don't see its internals as the caption says now we need to go


13158
15:39:25,520 --> 15:39:30,480
and implement a login login is just as important as creating a user i'm going


13159
15:39:30,480 --> 15:39:34,480
to start by putting a comma at the end of password parameter here and command s


13160
15:39:34,480 --> 15:39:38,796
in order to save it and in here in the login function we're


13161
15:39:38,796 --> 15:39:41,756
going to do something very similar to what we're doing in the register


13162
15:39:41,756 --> 15:39:45,756
function i can see in my notes by doing a try


13163
15:39:45,756 --> 15:39:50,320
and then we say on firebase off exception


13164
15:39:50,320 --> 15:39:53,360
and catch e


13165
15:39:53,360 --> 15:39:55,840
and then we'll say catch


13166
15:39:55,840 --> 15:40:02,400
any other exception okay so let's in in here then start by um


13167
15:40:02,400 --> 15:40:06,840
telling firebase that we want to log in with those credentials so let's say


13168
15:40:06,840 --> 15:40:10,720
firebase auth instance and then we say uh


13169
15:40:10,720 --> 15:40:15,756
sign in with email and password so there's a function in there okay


13170
15:40:15,756 --> 15:40:19,840
and i'm gonna put a semicolon at the end so you can see the


13171
15:40:19,840 --> 15:40:22,480
code all right so that's what we're doing but


13172
15:40:22,480 --> 15:40:26,720
remember again these functions are asynchronous so you can't just call that


13173
15:40:26,720 --> 15:40:31,200
function and expect it to work it's a future of user credential okay so make


13174
15:40:31,200 --> 15:40:34,840
your function asynchronous and then await on this


13175
15:40:34,840 --> 15:40:39,040
function so we're going to do something very similar similar to what we're doing


13176
15:40:39,040 --> 15:40:43,596
in register sorry in the create user in in that we're saying final user is


13177
15:40:43,596 --> 15:40:47,756
current user i hope you can see that code yes i can


13178
15:40:47,756 --> 15:40:54,160
see that you can see so in this in this uh code we're gonna take the exact same


13179
15:40:54,160 --> 15:40:58,240
code that we wrote in um create user so i'm gonna expand that you


13180
15:40:58,240 --> 15:41:02,160
can see here i'm gonna copy that code and you could


13181
15:41:02,160 --> 15:41:06,796
do the same what we're doing is just making sure after signing in then there


13182
15:41:06,796 --> 15:41:12,400
is a current user okay copy that code gonna fold this then i'm gonna bring it


13183
15:41:12,400 --> 15:41:16,480
to the login and right after sign in with email and password i'm gonna paste


13184
15:41:16,480 --> 15:41:20,080
that code okay so that's that part now


13185
15:41:20,080 --> 15:41:24,080
you see now we have firebase authexception again to handle just like


13186
15:41:24,080 --> 15:41:29,596
we did with create so let's go to your um login view


13187
15:41:29,596 --> 15:41:34,880
and have a look at which and which exceptions we were handling so


13188
15:41:34,880 --> 15:41:39,596
i can see here we're handling these i'm actually going to copy that entire


13189
15:41:39,596 --> 15:41:44,160
code from login view you see a firebase off exception username wrong password


13190
15:41:44,160 --> 15:41:49,680
etc and including the catch any other exception block right here copy that


13191
15:41:49,680 --> 15:41:54,796
code and bring it to your firebase auth provider


13192
15:41:54,796 --> 15:41:57,756
and replace let me actually see how it looks


13193
15:41:57,756 --> 15:42:02,560
like yeah replace all of this with that okay


13194
15:42:02,560 --> 15:42:07,596
and then remove your weights as we did before to be honest with you this this


13195
15:42:07,596 --> 15:42:10,956
is just a lot of big talk for saying that we


13196
15:42:10,956 --> 15:42:14,640
um need some code from another place to


13197
15:42:14,640 --> 15:42:18,796
bring here so your code now should look like this so it says on firebase off


13198
15:42:18,796 --> 15:42:22,720
exception and we're handling user not found wrong password off exceptions from


13199
15:42:22,720 --> 15:42:30,000
firebase and a generic catch block okay so in the case of a user not found a


13200
15:42:30,000 --> 15:42:35,116
firebase office session we're going to say throw user not found alt exception


13201
15:42:35,116 --> 15:42:38,796
in the case of a wrong password we're going to say throw on password boss


13202
15:42:38,796 --> 15:42:42,000
exception and any other case that might occur here


13203
15:42:42,000 --> 15:42:45,756
we're just going to throw generic off exception


13204
15:42:45,756 --> 15:42:50,560
and in here as well we're going to say throw generic with exception


13205
15:42:50,560 --> 15:42:54,000
and thing i really like to do is you see in


13206
15:42:54,000 --> 15:42:58,320
dart it's not yet possible to say that i want to ignore a variable in this case


13207
15:42:58,320 --> 15:43:01,916
you can see that in this like where we have a catch


13208
15:43:01,916 --> 15:43:05,840
we actually have to pattern match against an exception and then we have to


13209
15:43:05,840 --> 15:43:09,520
assign a name to it and that name is called e inside this function so if i


13210
15:43:09,520 --> 15:43:13,040
type e you can see it's an object however as you can see in the body of


13211
15:43:13,040 --> 15:43:16,160
this function we're not actually interested in e at all we're not using


13212
15:43:16,160 --> 15:43:20,480
it so in in other languages it is possible to ignore like in javascript


13213
15:43:20,480 --> 15:43:25,756
python swift rust it is possible to ignore a variable and saying that hey


13214
15:43:25,756 --> 15:43:28,796
i'm not interested in this value by putting something called like an


13215
15:43:28,796 --> 15:43:33,040
underscore or something you can do the same thing in art the difference is that


13216
15:43:33,040 --> 15:43:36,796
in dart if you say underscore you're not actually ignoring it that variable is


13217
15:43:36,796 --> 15:43:40,956
also there but it's just called underscore in this case so you can see


13218
15:43:40,956 --> 15:43:45,916
you can still call to string on it so you may want to do it or you may just


13219
15:43:45,916 --> 15:43:49,276
want to leave it alone because you can see guard an analyzer it doesn't give


13220
15:43:49,276 --> 15:43:53,276
you an error of any kind saying that yeah your


13221
15:43:53,276 --> 15:43:57,200
pattern matching but you're not using it so it's up to you how you want to do it


13222
15:43:57,200 --> 15:44:00,720
and i like to do it like this


13223
15:44:01,040 --> 15:44:05,200
wow that was a lot of code um or maybe more like a lot of explanations so let's


13224
15:44:05,200 --> 15:44:08,796
go to login and fold that and as you can see in the caption now we have to take


13225
15:44:08,796 --> 15:44:12,160
care of the logout function and the caption also says that this function


13226
15:44:12,160 --> 15:44:16,560
needs to be asynchronous okay and you know why because we're going to


13227
15:44:16,560 --> 15:44:22,796
call a function on firebase in order to take care of the logouts


13228
15:44:22,796 --> 15:44:26,640
so in order for a user to be logged out the user should actually exist so let's


13229
15:44:26,640 --> 15:44:31,116
just say final user needs firebase off


13230
15:44:31,116 --> 15:44:34,560
instance and then we're going to say current user


13231
15:44:34,560 --> 15:44:40,880
and we say if user is not null and it's a user sign uh logout what's it


13232
15:44:40,880 --> 15:44:45,436
called or what's it called oh we have to tell a firebase off so we


13233
15:44:45,436 --> 15:44:50,880
then we say firebase off instance sign out


13234
15:44:50,880 --> 15:44:57,040
the weight on it okay otherwise we say throw user not


13235
15:44:57,040 --> 15:45:00,400
logged in so we're basically saying here that you


13236
15:45:00,400 --> 15:45:04,480
cannot log out a user if that user doesn't exist okay or that user isn't


13237
15:45:04,480 --> 15:45:06,956
logged in


13238
15:45:07,360 --> 15:45:11,040
all right lots of code lots of description but


13239
15:45:11,040 --> 15:45:16,796
that's okay we've now implemented an auth provider firebase auth provider


13240
15:45:16,796 --> 15:45:19,756
okay which is a concrete implementation of


13241
15:45:19,756 --> 15:45:24,480
auth provider now as the caption indicates here we


13242
15:45:24,480 --> 15:45:28,640
need an auth service


13243
15:45:28,840 --> 15:45:33,116
um now what is an auth service i mentioned this a little bit before but


13244
15:45:33,116 --> 15:45:38,240
an auth service is also going to implement auth provider


13245
15:45:38,240 --> 15:45:42,240
and in itself is going to take an instance


13246
15:45:42,240 --> 15:45:47,520
of an auth provider as well but as you'll see in this chapter and in


13247
15:45:47,520 --> 15:45:52,560
the rest of this um course you'll see that our


13248
15:45:52,560 --> 15:45:58,560
our auth service is really just the provider itself which is


13249
15:45:58,560 --> 15:46:02,640
exposing all the functionalities of the provider that we give it


13250
15:46:02,640 --> 15:46:07,596
and it's not and it has absolutely no other logic at the moment okay but the


13251
15:46:07,596 --> 15:46:12,240
reason we're doing that is for me to just to show you that you need to have


13252
15:46:12,240 --> 15:46:15,596
providers and then you need to have services that they talk to each other


13253
15:46:15,596 --> 15:46:20,480
and then this service can then expose more value to your user interface to


13254
15:46:20,480 --> 15:46:26,000
your ui code than the provider does that's usually the case that the service


13255
15:46:26,000 --> 15:46:30,000
fuses together a few other providers talk to few


13256
15:46:30,000 --> 15:46:34,400
providers and at the end it grabs the data fuses together and provides that


13257
15:46:34,400 --> 15:46:40,160
information to the ui now in our case that's not gonna be the case okay our


13258
15:46:40,160 --> 15:46:46,320
firebit our auth service is only going to talk with our the given auth provider


13259
15:46:46,320 --> 15:46:50,796
and expose all its functionalities to the ui but we're doing this exercise so


13260
15:46:50,796 --> 15:46:55,596
that you see how you can abstract away various bits and pieces of functionality


13261
15:46:55,596 --> 15:47:00,480
from the ui code so remember that that's the reason we have our auth service


13262
15:47:00,480 --> 15:47:06,080
which we're gonna soon create okay so as a caption in the case here let's


13263
15:47:06,080 --> 15:47:10,720
go ahead and create our odd service inside the auth folder here so auth and


13264
15:47:10,720 --> 15:47:15,840
i'm going to create a new file here i'm just going to call it all service


13265
15:47:16,640 --> 15:47:22,000
in this dart file then we need to create start creating our


13266
15:47:22,000 --> 15:47:26,400
auth service okay sorry gonna go to my notes in here as


13267
15:47:26,400 --> 15:47:30,560
well so what we need in here is to


13268
15:47:30,560 --> 15:47:34,720
import a few things we need to import our auth provider and an off user so i'm


13269
15:47:34,720 --> 15:47:39,116
not to explain this again so um package my notes


13270
15:47:39,116 --> 15:47:44,000
and we have services off and we have and we need to import auth


13271
15:47:44,000 --> 15:47:47,680
provider and copy this kind of code and then i'm


13272
15:47:47,680 --> 15:47:51,840
going to say off news user i believe


13273
15:47:52,160 --> 15:47:54,956
so um


13274
15:47:54,956 --> 15:47:59,360
so let's have a look in here in the captions


13275
15:48:00,160 --> 15:48:03,680
like that okay so we need to create now as you can


13276
15:48:03,680 --> 15:48:09,360
see we need to create an auth service that also implements auth provider okay


13277
15:48:09,360 --> 15:48:11,276
so um


13278
15:48:11,276 --> 15:48:14,560
if i look at the captions here why is auth service an author provider i've


13279
15:48:14,560 --> 15:48:19,116
already explained this to you but you can see it says but can have more logic


13280
15:48:19,116 --> 15:48:23,200
so that's the reason okay so don't forget that so let's go and create a


13281
15:48:23,200 --> 15:48:28,956
class of all service in here and it implements an off of the auth


13282
15:48:28,956 --> 15:48:33,680
provider um abstract class okay


13283
15:48:33,680 --> 15:48:37,596
now what you'll need to do what you need to know is that the auth service in


13284
15:48:37,596 --> 15:48:42,080
itself isn't going to be hard coded to use the firebase auth provider


13285
15:48:42,080 --> 15:48:46,160
what it's going to do is that it's going to actually take an audit provider from


13286
15:48:46,160 --> 15:48:48,880
you and saying that okay i will then expose


13287
15:48:48,880 --> 15:48:52,160
the functionalities from that auth provider to the outside world with the


13288
15:48:52,160 --> 15:48:55,840
ability to maybe even change that data before it returns it to you but in our


13289
15:48:55,840 --> 15:48:58,880
chapter and then the rest of this course it's not going to do that it's just


13290
15:48:58,880 --> 15:49:02,560
going to expose the same auth providers functionality to the outside world so


13291
15:49:02,560 --> 15:49:08,080
let's go ahead and as the caption says say we take an auth provider and we just


13292
15:49:08,080 --> 15:49:13,276
call it provider okay we need to do then is to create a


13293
15:49:13,276 --> 15:49:17,360
constructor for your auth servicing here so command


13294
15:49:17,360 --> 15:49:21,360
dot on mac or control dot windows and linux and say create constructor for


13295
15:49:21,360 --> 15:49:24,080
final fields and make it constant as well


13296
15:49:24,080 --> 15:49:28,956
okay so now we have this beautiful little off service that takes the


13297
15:49:28,956 --> 15:49:32,480
provider but as you can see it says missing concrete implementations and


13298
15:49:32,480 --> 15:49:37,596
that's because we said our auth service is also an auth provider so we have to


13299
15:49:37,596 --> 15:49:43,680
implement those auth provider classes overrides as well so let's add them in


13300
15:49:43,680 --> 15:49:48,320
here as well but this time it's gonna be a lot easier uh to implement these


13301
15:49:48,320 --> 15:49:52,880
functions because our because our auth service internally has a provider and


13302
15:49:52,880 --> 15:49:56,720
all it has to do is just expose the functionalities of the


13303
15:49:56,720 --> 15:50:01,360
provider in its own implementation all right


13304
15:50:01,360 --> 15:50:03,436
so um


13305
15:50:03,436 --> 15:50:06,880
as the caption also says we need to delegate then to our


13306
15:50:06,880 --> 15:50:10,160
actual provider before we do that i'm going to do a


13307
15:50:10,160 --> 15:50:13,436
little bit of a clean up here and i suggest that you do too and in places


13308
15:50:13,436 --> 15:50:16,480
that we have more than one parameter let's go and put a comma at the end of


13309
15:50:16,480 --> 15:50:20,560
the last parameter right here and there boom


13310
15:50:20,560 --> 15:50:23,756
and that was it i'm going to do command s so


13311
15:50:23,756 --> 15:50:26,880
that dart formatter formats the code a little bit better


13312
15:50:26,880 --> 15:50:31,276
and let's just go and go ahead and expose the functionalities of our


13313
15:50:31,276 --> 15:50:36,320
provider in our concrete implementations of the auth


13314
15:50:36,320 --> 15:50:44,080
provider so in here we say provider dot creates user email and password perfect


13315
15:50:44,080 --> 15:50:50,080
for the current user we return the provider's current user we say provider


13316
15:50:50,480 --> 15:50:56,080
adopt current user for the login we then expose the


13317
15:50:56,080 --> 15:51:01,756
providers login function we say provider login with that information


13318
15:51:01,756 --> 15:51:08,480
and for our logout we do the same thing so i'm going to say provider logout okay


13319
15:51:08,480 --> 15:51:14,320
and for sending you so say provider send email


13320
15:51:14,320 --> 15:51:19,840
provider and notification great stuff that was uh


13321
15:51:19,840 --> 15:51:25,040
that went really fast as you can see okay


13322
15:51:25,040 --> 15:51:27,276
now um


13323
15:51:27,276 --> 15:51:32,560
you see we've done a lot of code now if we go to our if if i change the screen


13324
15:51:32,560 --> 15:51:36,640
layout a little bit better a little bit so you see the code better and let's go


13325
15:51:36,640 --> 15:51:40,480
to our terminal the built-in terminal i absolutely love it in visual studio code


13326
15:51:40,480 --> 15:51:45,756
that there is an integrated terminal and let's have a look at our git status


13327
15:51:45,756 --> 15:51:50,796
you'll see that we have changed login view but also there is an entirely new


13328
15:51:50,796 --> 15:51:56,400
folder here called lib services so if you then add all of that


13329
15:51:56,400 --> 15:52:01,840
and to get status you'll see that we actually have done a lot of work so


13330
15:52:01,840 --> 15:52:05,360
if i increase the size you see we've added all exceptions auth provider all


13331
15:52:05,360 --> 15:52:08,720
service auth user and firebase auth provider


13332
15:52:08,720 --> 15:52:13,200
plus the changes in the login view now


13333
15:52:13,200 --> 15:52:16,480
um actually i don't know what did we change in login view


13334
15:52:16,480 --> 15:52:18,956
so that's interesting to know if you go to


13335
15:52:18,956 --> 15:52:22,400
the login view did we did we change anything in login view


13336
15:52:22,400 --> 15:52:26,640
because at the moment i can't really remember if we change anything special


13337
15:52:26,640 --> 15:52:31,840
in the login view so it would be interesting to actually


13338
15:52:31,840 --> 15:52:35,520
see what we've done so if i go to my terminal here


13339
15:52:35,520 --> 15:52:38,080
and if i issue this command as you can see


13340
15:52:38,080 --> 15:52:43,360
here i'm going to remove that login view from the staging environment


13341
15:52:43,360 --> 15:52:47,520
so like this paste it there


13342
15:52:47,520 --> 15:52:52,080
and i'm gonna say git status and then i'm gonna say bit diff i can say okay


13343
15:52:52,080 --> 15:52:58,080
the difference is that i have added firebase core in here


13344
15:52:58,080 --> 15:53:02,480
which i don't see in the


13345
15:53:02,480 --> 15:53:07,520
login view and also what's changed


13346
15:53:07,840 --> 15:53:11,956
has this navigator been removed


13347
15:53:12,400 --> 15:53:16,080
there's a lot of code in here that may have not been committed from the


13348
15:53:16,080 --> 15:53:20,000
previous chapter that may be it so that may be the reason okay but that's all


13349
15:53:20,000 --> 15:53:25,680
right as well so now let's get at all and let's then go to the next stage as


13350
15:53:25,680 --> 15:53:28,956
you can see we've done a lot of work let's just make sure everything is


13351
15:53:28,956 --> 15:53:32,796
committed this time okay so get status everything is added to the staging


13352
15:53:32,796 --> 15:53:37,200
environment then i'm just gonna say git commit


13353
15:53:37,200 --> 15:53:43,680
message and step eight this time and i'm going to push all those changes


13354
15:53:43,680 --> 15:53:46,720
and get status i can see everything's committed great


13355
15:53:46,720 --> 15:53:51,680
also let's tag our code because i believe the previous


13356
15:53:51,680 --> 15:53:55,680
chapter we didn't tag anything but the one before that we tagged that step


13357
15:53:55,680 --> 15:54:00,160
seven and that was chapter number 22 where we talked about error handling in


13358
15:54:00,160 --> 15:54:03,756
the registry and going to the next screen after registration so we didn't


13359
15:54:03,756 --> 15:54:08,080
tag anything in the previous chapter so now we're going to tag things as step 8


13360
15:54:08,080 --> 15:54:13,756
so let's just say git tag step 8 i can spell here


13361
15:54:13,756 --> 15:54:18,796
and it push tags as well if you can say git log you will see get


13362
15:54:18,796 --> 15:54:23,040
step 8 is there step 7 every step is there an initial commit is there as well


13363
15:54:23,040 --> 15:54:27,680
which is step one and if you say git tag you'll see all your tags available as


13364
15:54:27,680 --> 15:54:32,080
well okay so we've committed and tagged we've done a


13365
15:54:32,080 --> 15:54:35,680
lot of work in this chapter and i don't think we need to actually drag it on for


13366
15:54:35,680 --> 15:54:40,160
longer because yeah it will be unbearable maybe if it's too long


13367
15:54:40,160 --> 15:54:43,276
now as we usually do which is the tradition


13368
15:54:43,276 --> 15:54:47,756
here before going to the next chapter we prepare ourselves for what is coming as


13369
15:54:47,756 --> 15:54:51,276
you can see in the caches that we need to migrate our existing code to using


13370
15:54:51,276 --> 15:54:55,520
our own auth service we have an auth service


13371
15:54:55,520 --> 15:55:00,320
which abstracts away the provider and we have a firebase auth provider but we


13372
15:55:00,320 --> 15:55:04,796
still are not using that code so that's exactly what we're going to do in the


13373
15:55:04,796 --> 15:55:10,160
next chapter and if i look a little bit in my in my notes i can actually see the


13374
15:55:10,160 --> 15:55:15,276
next chapter will also be quite a long one maybe not as long as this chapter so


13375
15:55:15,276 --> 15:55:18,560
maybe you'll need a cup of coffee or tea so


13376
15:55:18,560 --> 15:55:22,640
let's do that and without further ado i'll see you in the next chapter


13377
15:55:22,640 --> 15:55:26,480
hello everyone and welcome to chapter 25 of this flutter course


13378
15:55:26,480 --> 15:55:30,000
in the previous chapter we talked about earth service and that was quite a big


13379
15:55:30,000 --> 15:55:35,276
chapter we talked about cleaning up making sure that our authentication


13380
15:55:35,276 --> 15:55:40,080
related code is in one central place we created the auth


13381
15:55:40,080 --> 15:55:43,756
provider the firebase auth provider then we created


13382
15:55:43,756 --> 15:55:49,200
our auth service and and we also ensure that


13383
15:55:49,200 --> 15:55:54,880
both the service and the provider are conforming to the interface provided by


13384
15:55:54,880 --> 15:56:01,756
our abstract class for authentication so um we call those the off service and


13385
15:56:01,756 --> 15:56:07,596
the firebase auth provider and then our abstract class was called auth provider


13386
15:56:07,596 --> 15:56:11,916
now we've done all that work but we haven't really even started using that


13387
15:56:11,916 --> 15:56:18,000
auth service and that's what we're going to do in this chapter


13388
15:56:18,400 --> 15:56:21,596
um the first thing that we have to do is


13389
15:56:21,596 --> 15:56:24,640
actually making sure that we have easy access to


13390
15:56:24,640 --> 15:56:28,560
our off service um you see the way we created the auth


13391
15:56:28,560 --> 15:56:35,040
service let me bring the code here so we can all see


13392
15:56:35,840 --> 15:56:42,000
change visual studio codes um layouts a little bit


13393
15:56:42,000 --> 15:56:46,640
let's then have a look at our um let me see if i can resize this a little bit as


13394
15:56:46,640 --> 15:56:52,000
well okay let's have a look here at our auth service you see that with the way


13395
15:56:52,000 --> 15:56:56,240
that we created our off service is that it in its initializer or constructor


13396
15:56:56,240 --> 15:57:01,756
however you want to call it um it is taking a provider so for us to be able


13397
15:57:01,756 --> 15:57:06,080
to use our auth service every time you want to use our auth service we actually


13398
15:57:06,080 --> 15:57:09,596
have to provide it with an auth provider which in our case is going to be the


13399
15:57:09,596 --> 15:57:13,680
firebase auth provider which it resides right here


13400
15:57:13,680 --> 15:57:17,116
so this could be cumbersome especially if you're working with firebase quite a


13401
15:57:17,116 --> 15:57:21,680
lot in your user interface every time you want to use it then you need to say


13402
15:57:21,680 --> 15:57:25,680
auth service initialize the auth service and then initialize your firebase auth


13403
15:57:25,680 --> 15:57:30,240
provider and give that to your auth service so


13404
15:57:30,240 --> 15:57:35,436
we don't want to do that every time and that is exactly why we need to


13405
15:57:35,436 --> 15:57:40,240
create a factory uh


13406
15:57:40,240 --> 15:57:44,320
initializer as you can see here in the uh


13407
15:57:44,320 --> 15:57:47,916
in the captions so uh it says add firebase


13408
15:57:47,916 --> 15:57:52,240
factory to officers and that's exactly what we're gonna do here


13409
15:57:52,240 --> 15:57:56,956
so let's go to our auth service and as the code is provided for you just write


13410
15:57:56,956 --> 15:57:59,596
it factory and i'm going to say auth


13411
15:57:59,596 --> 15:58:04,400
service dot in firebase so the responsibility of


13412
15:58:04,400 --> 15:58:09,360
this off service firebase factory here or sorry the the responsibility of the


13413
15:58:09,360 --> 15:58:13,596
firebase uh factory here


13414
15:58:13,596 --> 15:58:17,916
on our off service is to return an instance of our auth service that is


13415
15:58:17,916 --> 15:58:23,116
already configured with a firebase auth provider so


13416
15:58:23,116 --> 15:58:27,596
then we're going to say it returns an instance of auth service


13417
15:58:27,596 --> 15:58:32,160
change the layout of the code here the screen as well so you can see it better


13418
15:58:32,160 --> 15:58:35,596
and we're going to say firebase um


13419
15:58:35,596 --> 15:58:42,880
auth provider okay so that's that um now you see i have a


13420
15:58:42,880 --> 15:58:45,680
column here in visual studio code that tells me where the code is going to


13421
15:58:45,680 --> 15:58:51,116
break some people even for one parameter in their uh dart code or flutter code


13422
15:58:51,116 --> 15:58:55,596
they prefer to have a comma at the end of it so that it is ready to take new


13423
15:58:55,596 --> 15:58:59,040
parameters in the future so if you do that then um


13424
15:58:59,040 --> 15:59:02,796
dart format is going to break that code for you into multiple lines ready for


13425
15:59:02,796 --> 15:59:06,320
you to enter the next parameter if that's your preference go for it but i


13426
15:59:06,320 --> 15:59:09,756
have no preference here i just leave it like that when i have one parameter i


13427
15:59:09,756 --> 15:59:14,240
just leave it in one line okay so


13428
15:59:14,240 --> 15:59:20,560
before we actually go about uh starting to use our auth service we need to take


13429
15:59:20,560 --> 15:59:25,276
a little trip back to the main dart file as the caption indicates here so you


13430
15:59:25,276 --> 15:59:29,436
either go to the explorer but the way i usually like to do it is with command p


13431
15:59:29,436 --> 15:59:34,080
and i say main dart and then i go there remember if you are linux or windows


13432
15:59:34,080 --> 15:59:38,560
then you have to do control p okay so let's have a look at our main dar file


13433
15:59:38,560 --> 15:59:43,840
and let's see if i can close these places firebase off firebase provider


13434
15:59:43,840 --> 15:59:48,080
login the dart what did we change there save that as


13435
15:59:48,080 --> 15:59:51,840
well let's go back to the main now so basically i just closed all the files


13436
15:59:51,840 --> 15:59:55,840
uh because i just want to have them in our files so as the caption is


13437
15:59:55,840 --> 16:00:02,160
is telling you here um our menu action and the notes view are right now spread


13438
16:00:02,160 --> 16:00:07,116
just around in the main dart file and this is usually not a good idea because


13439
16:00:07,116 --> 16:00:10,160
you need to as part of your journey into becoming a software developer you need


13440
16:00:10,160 --> 16:00:15,360
to make sure that your code is clean and it's easy for other people to read now


13441
16:00:15,360 --> 16:00:20,400
i'm not saying i mean i'm not a true true believer that the code has to be so


13442
16:00:20,400 --> 16:00:23,680
easy to understand that even if you grab a random person from the street they


13443
16:00:23,680 --> 16:00:27,680
have to understand the code because sometimes you need to make sure that


13444
16:00:27,680 --> 16:00:32,240
the person looking at your code has a certain level of knowledge from before


13445
16:00:32,240 --> 16:00:35,680
but with all that said you need to make sure that your code is easy to


13446
16:00:35,680 --> 16:00:40,000
understand and read so let's make sure that the menu action and


13447
16:00:40,000 --> 16:00:45,276
notes view are refactored and that they're in the right place and not just


13448
16:00:45,276 --> 16:00:50,480
spread around in main dart file so as a caption indicates we're going to


13449
16:00:50,480 --> 16:00:56,320
move our menu action into a new new folder called enums inside lib


13450
16:00:56,320 --> 16:01:00,720
and the file name is going to be menu action dot dart and


13451
16:01:00,720 --> 16:01:04,640
the caption was a little bit wrong it shouldn't be dark 10 it should be dart


13452
16:01:04,640 --> 16:01:10,720
so i'm going to save the caption and bring it back up so it's with the right


13453
16:01:10,720 --> 16:01:16,240
file extension so let's go and create that file i'm


13454
16:01:16,240 --> 16:01:21,200
gonna go here into lib i'm gonna right click on lib and i'm gonna say new file


13455
16:01:21,200 --> 16:01:24,720
and in the new file i'm just going to type ins


13456
16:01:24,720 --> 16:01:28,480
and bring it up as well so you see it better


13457
16:01:28,480 --> 16:01:33,756
or you see it at all enums and then menu action. okay


13458
16:01:33,756 --> 16:01:37,200
excuse me let's just go and grab that menu action


13459
16:01:37,200 --> 16:01:42,400
from there and paste it inside this menu action and save that file okay don't


13460
16:01:42,400 --> 16:01:45,680
worry main.dart at the moment has a problem because menu action doesn't


13461
16:01:45,680 --> 16:01:48,880
exist here anymore so we're getting some errors and that's okay we're gonna fix


13462
16:01:48,880 --> 16:01:54,320
that so let's go now to our um


13463
16:01:54,320 --> 16:01:59,360
to the main dark file again and we have to clean up this notes view and as the


13464
16:01:59,360 --> 16:02:01,756
caption in the case we're going to move it into


13465
16:02:01,756 --> 16:02:06,640
lib views notes view okay we already have the views folder remember from


13466
16:02:06,640 --> 16:02:11,040
before all we're going to do is just to move this notes view into its own file


13467
16:02:11,040 --> 16:02:14,240
so i'm going to right right click on views and i'm going to say


13468
16:02:14,240 --> 16:02:18,520
notes view dot darts


13469
16:02:18,796 --> 16:02:24,400
okay let's go to main guard grab the notes view and it's state so from there


13470
16:02:24,400 --> 16:02:28,000
notes view stateful widget and i'm gonna grab all of that


13471
16:02:28,000 --> 16:02:31,436
and we're gonna even


13472
16:02:31,436 --> 16:02:37,596
take the show log out dialog with it and bring it


13473
16:02:37,596 --> 16:02:42,640
to note2 and paste that there okay so now we have a lot of problems because uh


13474
16:02:42,640 --> 16:02:48,160
in an empty dart file as i've mentioned before there's no material import so i'm


13475
16:02:48,160 --> 16:02:52,640
going to do the material import now so command dot and say import library


13476
16:02:52,640 --> 16:02:56,240
package flower material and that is going to fix those import


13477
16:02:56,240 --> 16:03:00,796
those errors for you now this file doesn't have it hasn't


13478
16:03:00,796 --> 16:03:04,796
imported uh menu action so let's fix that as well


13479
16:03:04,796 --> 16:03:08,400
with visual studio command dot and get help from visual studio code to


13480
16:03:08,400 --> 16:03:14,560
automatically import our menu action dart file okay


13481
16:03:14,560 --> 16:03:21,520
so that is also fixed and also remember now in notes view also right now is


13482
16:03:21,520 --> 16:03:25,360
using firebase off and we're going to fix somebody into this chapter so that


13483
16:03:25,360 --> 16:03:29,520
note2 isn't or any of our views none of them are going to talk directly with


13484
16:03:29,520 --> 16:03:32,796
firebase so that's going to be fixed by the end of this chapter


13485
16:03:32,796 --> 16:03:36,956
but for now let's go ahead and clean this up and make sure that firebase auth


13486
16:03:36,956 --> 16:03:43,116
is imported and also remember login route was used here when we log out of


13487
16:03:43,116 --> 16:03:48,720
the main interface of the application so when we log out then it sends us back to


13488
16:03:48,720 --> 16:03:53,040
the login route and that is defined in our routes


13489
16:03:53,040 --> 16:03:58,560
dart file here so let's import that too excuse me


13490
16:03:58,640 --> 16:04:02,640
all right so that was a lot of work we've we've done that now so we're done


13491
16:04:02,640 --> 16:04:06,956
so i'm going to save this notes view dot dart


13492
16:04:07,116 --> 16:04:09,916
and now as the the case we need to go back


13493
16:04:09,916 --> 16:04:14,240
to the main dart and remedy this issue which we have and we need to import


13494
16:04:14,240 --> 16:04:18,720
notes view uh get help from visual studio code or your favorite editor or


13495
16:04:18,720 --> 16:04:22,640
if you don't have this functionality in your editor if you're using vim or


13496
16:04:22,640 --> 16:04:25,840
something you may just need to import that by hand and the import is just the


13497
16:04:25,840 --> 16:04:31,436
package name of your application views notes view okay so i'm gonna


13498
16:04:31,436 --> 16:04:34,160
get help from visual studio code to do that


13499
16:04:34,160 --> 16:04:36,480
great


13500
16:04:36,640 --> 16:04:39,680
so um


13501
16:04:39,680 --> 16:04:43,200
now let's have a look at something that we actually forgot in the previous


13502
16:04:43,200 --> 16:04:46,880
chapters um you see we've done everything in our


13503
16:04:46,880 --> 16:04:51,276
off service if you have a look at our auth service it has almost all the


13504
16:04:51,276 --> 16:04:55,360
functionalities that we need it has create view sorry create user it has


13505
16:04:55,360 --> 16:04:59,916
current user it has login log out and send email verification but there's one


13506
16:04:59,916 --> 16:05:04,956
detail that we forgot about let's go to main dart and have a look at it


13507
16:05:04,956 --> 16:05:09,840
you can see in here our entire main dart uh


13508
16:05:09,840 --> 16:05:15,436
like the home page build function is built around a future builder that i i


13509
16:05:15,436 --> 16:05:19,436
know i'm saying build quite a lot maybe i should say it's revol it's revolving


13510
16:05:19,436 --> 16:05:24,480
around a future builder which in turn initializes firebase you see it calls


13511
16:05:24,480 --> 16:05:29,520
firebase initialize app and now that we want to move away from our user


13512
16:05:29,520 --> 16:05:33,276
interface interacting directly with firebase we


13513
16:05:33,276 --> 16:05:37,916
also need to remedy this this user interface it shouldn't go to


13514
16:05:37,916 --> 16:05:42,796
firebase directly it should ideally go to our


13515
16:05:42,796 --> 16:05:47,360
off service and that's what the caption says


13516
16:05:47,436 --> 16:05:55,040
so let's now go to our auth provider abstract class so let's


13517
16:05:55,040 --> 16:05:58,000
close all these files make sure everything is saved


13518
16:05:58,000 --> 16:06:02,560
let's go to our off provider and make sure that we have a function


13519
16:06:02,560 --> 16:06:07,200
there and let me actually bring up my notes


13520
16:06:07,200 --> 16:06:12,720
that says initialize so we're going to say future void


13521
16:06:12,720 --> 16:06:16,160
initialize okay remember now that we've added this


13522
16:06:16,160 --> 16:06:19,756
function to our auth provider we're going to have problems because both the


13523
16:06:19,756 --> 16:06:24,720
firebase auth provider and auth service they're they're conforming currently to


13524
16:06:24,720 --> 16:06:28,880
the author provider abstract class and adding a new function to this abstract


13525
16:06:28,880 --> 16:06:33,436
class means that we're gonna get two errors indicating that this function


13526
16:06:33,436 --> 16:06:37,596
isn't implemented in firebase auth provider and in our auth service so we


13527
16:06:37,596 --> 16:06:44,080
need to fix those problems you can see they're actually highlighted as red here


13528
16:06:44,080 --> 16:06:47,276
okay um


13529
16:06:47,840 --> 16:06:51,840
let's go then to the next caption


13530
16:06:52,160 --> 16:06:57,040
and i'm gonna get rid of that bottom view so it doesn't bother us so let's go


13531
16:06:57,040 --> 16:07:00,956
now as you can see in the firebase auth provider and overwrite initialize and


13532
16:07:00,956 --> 16:07:05,276
make it async and call initialize app on firebase


13533
16:07:05,276 --> 16:07:10,160
so to in order to do the firebase initialize code we need to have a look


13534
16:07:10,160 --> 16:07:13,360
at our main dart and see how that is done at the moment you can see it is


13535
16:07:13,360 --> 16:07:17,596
called firebase initialize app so i'm gonna grab that code and i suggest that


13536
16:07:17,596 --> 16:07:22,160
you do the same thing i'm just gonna copy that code for initialize app


13537
16:07:22,160 --> 16:07:27,116
and let's then go to our firebase auth provider


13538
16:07:27,116 --> 16:07:30,640
and get help from visual studio code or android studio in order to complete that


13539
16:07:30,640 --> 16:07:33,596
one missing override for initialize function


13540
16:07:33,596 --> 16:07:37,840
and i believe it gets added here somewhere


13541
16:07:37,840 --> 16:07:41,360
or it didn't where did it go


13542
16:07:41,360 --> 16:07:46,880
we should have an initialize a missing concrete


13543
16:07:46,956 --> 16:07:54,116
create one missing override initialize i still don't see the missing


13544
16:07:55,916 --> 16:08:01,276
i'm gonna do that here myself future void initialize like this okay


13545
16:08:01,276 --> 16:08:05,520
and uh what we're gonna do as the name indicates it's gonna be an async


13546
16:08:05,520 --> 16:08:11,680
function here and what we need to do is just to save firebase initialize app so


13547
16:08:11,680 --> 16:08:14,796
um and we're gonna await on this so like


13548
16:08:14,796 --> 16:08:18,160
that and remember we have we need to have two


13549
16:08:18,160 --> 16:08:22,796
imports here and one is for the firebase and the other one is default firebase


13550
16:08:22,796 --> 16:08:26,956
options so let's get help from visual studio code to import those firebase


13551
16:08:26,956 --> 16:08:29,680
core and import


13552
16:08:29,680 --> 16:08:34,400
firebase options dark file which if you remember when we set up firebase


13553
16:08:34,400 --> 16:08:39,200
initially was brought into our application from the firebase cli so


13554
16:08:39,200 --> 16:08:42,956
is is not a file that we've created ourselves except it's the firebase cli


13555
16:08:42,956 --> 16:08:46,400
that created this for us okay


13556
16:08:46,560 --> 16:08:50,480
here now it says annotate over members and that's exactly what we need to do so


13557
16:08:50,480 --> 16:08:53,116
let's just say over


13558
16:08:53,116 --> 16:08:58,796
right like this and now we have initialize uh over member of our author


13559
16:08:58,796 --> 16:09:01,916
provider inside firebase author provider so


13560
16:09:01,916 --> 16:09:05,756
basically all we're saying is firebase auth provider implements initialize


13561
16:09:05,756 --> 16:09:10,400
function and it has actual implementation okay


13562
16:09:10,400 --> 16:09:14,796
all right we have one error left and that is inside auth service so let's go


13563
16:09:14,796 --> 16:09:19,040
to auth service and we'll have the exact same problem


13564
16:09:19,040 --> 16:09:23,276
here and says missing concrete implementation so i'm gonna see if i can


13565
16:09:23,276 --> 16:09:27,756
get visual studio code to add that implementation and it added it here


13566
16:09:27,756 --> 16:09:32,796
initialize okay so in here what we have to do is just to


13567
16:09:32,796 --> 16:09:38,720
delegate this function to the actual provider so we're going to say provider


13568
16:09:38,720 --> 16:09:43,436
and we're going to say initialize just like that all right so this was the easy


13569
16:09:43,436 --> 16:09:45,840
one and if you don't remember from the


13570
16:09:45,840 --> 16:09:48,956
previous chapter or maybe you jumped over the previous chapter i don't know


13571
16:09:48,956 --> 16:09:52,240
how you ended up in this chapter if you haven't watched the previous chapter i


13572
16:09:52,240 --> 16:09:56,640
strongly suggest that you do that there is a reason we have our off service that


13573
16:09:56,640 --> 16:10:00,080
implements auth provider and the reason behind that is that


13574
16:10:00,080 --> 16:10:05,756
usually services have more logic in them than what they


13575
16:10:05,756 --> 16:10:09,756
bring into themselves so if a service has two other services connected to


13576
16:10:09,756 --> 16:10:13,840
itself then it may actually take bits and pieces from the service and other


13577
16:10:13,840 --> 16:10:18,400
bits and pieces from another service and fuse them together with some extra logic


13578
16:10:18,400 --> 16:10:23,200
and that is exactly why the author services as an odd provider so the goal


13579
16:10:23,200 --> 16:10:27,916
for us is to allow the officers to do more work than an author provider even


13580
16:10:27,916 --> 16:10:32,160
though right now only thing it does is just delegates all its functionality to


13581
16:10:32,160 --> 16:10:36,880
the auth provider and remember you could also see make sure that i mean if you


13582
16:10:36,880 --> 16:10:41,520
don't like this implementation you can for instance remove this and then


13583
16:10:41,520 --> 16:10:46,480
basically remove all these functions and by doing that you're just saying that an


13584
16:10:46,480 --> 16:10:50,000
auth service includes an off provider and that's all you're doing or you could


13585
16:10:50,000 --> 16:10:55,436
completely kill you your off service so it's up to you but if you're following


13586
16:10:55,436 --> 16:10:59,200
along with this uh with this course i suggest that you keep it the way it is


13587
16:10:59,200 --> 16:11:03,276
because there's a there's a point to it so


13588
16:11:03,756 --> 16:11:07,840
okay now that we've done that uh it's time to


13589
16:11:07,840 --> 16:11:12,480
do some cleanup and this is this is a very exciting part of this uh


13590
16:11:12,480 --> 16:11:17,360
chapter because we now have our auth service and our firebase auth provider


13591
16:11:17,360 --> 16:11:22,560
and in and additionally we have an off service firebase factory which allows us


13592
16:11:22,560 --> 16:11:26,880
to anywhere inside our code we could just say autoservice.firebase


13593
16:11:26,880 --> 16:11:32,956
and in that way we get access to our um firebase auth provider inside the


13594
16:11:32,956 --> 16:11:37,520
auth services so it's it's really magical you're gonna see it soon


13595
16:11:37,520 --> 16:11:41,916
so i'm going to close all files here ensure everything is saved then as the


13596
16:11:41,916 --> 16:11:46,956
caption indicates i'm going to go into main art file


13597
16:11:47,276 --> 16:11:51,680
main dart and as you can see it says remove


13598
16:11:51,680 --> 16:11:56,240
everything related to firebase and replace with auth service by importing


13599
16:11:56,240 --> 16:12:01,520
auth service okay so one way of doing that is just to ensure that you go and


13600
16:12:01,520 --> 16:12:06,000
kill it from the source so you can see here we have two firebase imports and if


13601
16:12:06,000 --> 16:12:08,956
you remove these two firebase imports which is


13602
16:12:08,956 --> 16:12:13,520
my preferred way of usually working with software is that i try to like remove


13603
16:12:13,520 --> 16:12:17,756
something from its source so now that i've removed those then visual studio is


13604
16:12:17,756 --> 16:12:22,000
telling me that hey you're using firebase in two places you need to fix


13605
16:12:22,000 --> 16:12:24,956
this because you don't have the imports then i know okay


13606
16:12:24,956 --> 16:12:28,880
here are the two places that i have to do my refactoring in okay


13607
16:12:28,880 --> 16:12:31,116
so as you can see here it says firebase


13608
16:12:31,116 --> 16:12:34,480
initialize app and we need to make sure that we're not doing that anymore so


13609
16:12:34,480 --> 16:12:40,640
we're just going to say in this case our future remember is um


13610
16:12:40,640 --> 16:12:45,436
it's auth service and since i haven't imported that yet visual studio is


13611
16:12:45,436 --> 16:12:49,040
offering to auto import it so i'm gonna say yes please


13612
16:12:49,040 --> 16:12:52,880
um it's auto imported now but if you don't wanna if you're you're working


13613
16:12:52,880 --> 16:12:57,756
with vim or some other a text editor that doesn't have that capability you


13614
16:12:57,756 --> 16:13:01,360
could import that in


13615
16:13:01,360 --> 16:13:04,956
this way per package the name of your package


13616
16:13:04,956 --> 16:13:09,520
services off auth service dart and i just noticed that this is another


13617
16:13:09,520 --> 16:13:12,796
firebase import which i'm going to remove now


13618
16:13:12,796 --> 16:13:17,596
excuse me so auth service now we want to tell


13619
16:13:17,596 --> 16:13:22,560
because we're using firebase we're going to say auth service dot firebase and in


13620
16:13:22,560 --> 16:13:27,360
here we're just going to say initialize okay so that fits in perfectly


13621
16:13:27,360 --> 16:13:32,956
and in here you can see we're using firebase um


13622
16:13:32,956 --> 16:13:36,720
instance firebase auth instance current user in this case we're just going to


13623
16:13:36,720 --> 16:13:43,436
say uh off service dot our base man current user just like


13624
16:13:43,436 --> 16:13:48,560
that okay and now remember odd i talked about this in previous chapters but


13625
16:13:48,560 --> 16:13:53,040
i prefer to have boolean flags prefix with the word is


13626
16:13:53,040 --> 16:13:56,560
whenever that makes sense and in this case you can see firebase implementation


13627
16:13:56,560 --> 16:14:00,400
had email verified but we have is email verified so i'm going to say is email


13628
16:14:00,400 --> 16:14:03,520
verified like that all right


13629
16:14:03,520 --> 16:14:09,200
and s or control x and linux and windows a command is on on mac to save this file


13630
16:14:09,200 --> 16:14:12,320
and it looks fine right now but we're not


13631
16:14:12,320 --> 16:14:18,480
really done um we also have problems in our login view


13632
16:14:18,480 --> 16:14:23,756
i mean problems not errors or warnings but problems in that we're using


13633
16:14:23,756 --> 16:14:29,596
firebase directly and we're going to the firebase auth directly in our login view


13634
16:14:29,596 --> 16:14:32,480
and we need to fix as you can see the caption system login view remove


13635
16:14:32,480 --> 16:14:37,596
firebase and replace with off service okay


13636
16:14:37,596 --> 16:14:44,640
so let's go to uh to the source and remove firebase completely from


13637
16:14:44,640 --> 16:14:48,320
your login view command s and now you'll see we have a


13638
16:14:48,320 --> 16:14:55,116
lot of problems here and one two three yep that was it so three three places


13639
16:14:55,116 --> 16:15:00,720
that we need to fix so let's go ahead and fix those places


13640
16:15:00,720 --> 16:15:05,360
because yeah um there's a lot to handle here so we start


13641
16:15:05,360 --> 16:15:08,880
by this one at the moment we're saying firebase off instant sign in with email


13642
16:15:08,880 --> 16:15:12,640
and password and what we need to do is just to uh


13643
16:15:12,640 --> 16:15:18,320
call our off service so we're gonna say auth service and


13644
16:15:18,320 --> 16:15:22,720
auto imported and auth service has firebase auth


13645
16:15:22,720 --> 16:15:29,116
provider and we're then gonna say assign in or do we say login yeah email


13646
16:15:29,116 --> 16:15:33,520
password okay so i'm gonna i'm gonna take this code the way it is


13647
16:15:33,520 --> 16:15:38,080
and i'm not paste then them in here


13648
16:15:38,080 --> 16:15:42,796
so now we're saying auth service firebase login okay


13649
16:15:43,520 --> 16:15:47,520
then we're seeing here that we're getting the current user and the right


13650
16:15:47,520 --> 16:15:51,596
way now to get the current user is by saying off service


13651
16:15:51,596 --> 16:15:56,640
dot firebase current user and email verified should be ms email


13652
16:15:56,640 --> 16:16:02,000
verified okay so now we fix those problems in this area by going to all


13653
16:16:02,000 --> 16:16:07,436
the search instead of going directly to firebase


13654
16:16:07,596 --> 16:16:13,116
okay that was that now we need to start looking a little bit at our error


13655
16:16:13,116 --> 16:16:18,000
handling and you can see here we have on firebase off


13656
16:16:18,000 --> 16:16:24,560
exception so we need to fix these with various um


13657
16:16:24,560 --> 16:16:28,160
other exception handlings not firebase auth


13658
16:16:28,160 --> 16:16:32,000
exception but now remember we have our own


13659
16:16:32,000 --> 16:16:37,116
exceptions in auth exception start and


13660
16:16:37,116 --> 16:16:40,880
these are all coming from exception but what we're


13661
16:16:40,880 --> 16:16:43,520
going to do is we're going to have like on


13662
16:16:43,520 --> 16:16:48,720
blah blah for various of those exceptions as you'll see soon so um i'm


13663
16:16:48,720 --> 16:16:54,480
gonna what i'm gonna do is i'm gonna take this code and keep it the way it is


13664
16:16:54,480 --> 16:16:59,360
like that and i'm going to add new on statement so


13665
16:16:59,360 --> 16:17:02,240
um let's take care of user not found so i'm


13666
16:17:02,240 --> 16:17:06,480
going to say on user not found exception and you can see that it says user not


13667
16:17:06,480 --> 16:17:09,596
found exception is an exception that we created manually but it's not imported


13668
16:17:09,596 --> 16:17:13,680
here because it was inside the auth exceptions dart file so i'm going to say


13669
16:17:13,680 --> 16:17:17,756
visual studio code please complete that and also import it for me okay


13670
16:17:17,756 --> 16:17:24,880
so say in this case then we have to do show error dialog so grab that code and


13671
16:17:24,880 --> 16:17:29,596
place it here okay then we're going to say


13672
16:17:29,596 --> 16:17:33,916
on what else do we have wrong password


13673
16:17:33,916 --> 16:17:40,000
because it's this thing i'm going to say on wrong password of exception


13674
16:17:40,000 --> 16:17:45,200
and go in here and grab then your show error dialog from here


13675
16:17:45,200 --> 16:17:48,080
and place it there okay


13676
16:17:48,080 --> 16:17:51,916
that and then we also need to have the on


13677
16:17:51,916 --> 16:17:56,796
generic auth exception so on generic auth exception


13678
16:17:56,796 --> 16:18:02,480
and we do this show error i like the way it is here


13679
16:18:02,480 --> 16:18:06,400
so then we go and bring that here and you can see on generic error off


13680
16:18:06,400 --> 16:18:10,160
exception we don't have any specific like information like any e or anything


13681
16:18:10,160 --> 16:18:13,756
to string so all we're gonna do in here we'll just say we're gonna say


13682
16:18:13,756 --> 16:18:18,480
authentication error okay and then you need to go and remove


13683
16:18:18,480 --> 16:18:22,000
the other catch blocks so your code should


13684
16:18:22,000 --> 16:18:28,720
basically look like this okay so a try block and then three


13685
16:18:28,720 --> 16:18:34,080
special exception handlings one after the other


13686
16:18:34,080 --> 16:18:39,040
great command s on your login view now you shouldn't have any problems in your


13687
16:18:39,040 --> 16:18:44,560
login view and there's no import of firebase in your login view just as it


13688
16:18:44,560 --> 16:18:48,400
was in the main dart file let's just make sure that there's no firebase


13689
16:18:48,400 --> 16:18:53,756
import here either firebase yeah firebase yeah no imports of


13690
16:18:53,756 --> 16:18:57,596
firebase great [Music]


13691
16:18:57,596 --> 16:19:02,240
and as the caption now says we need to go to register view and remove firebase


13692
16:19:02,240 --> 16:19:06,720
and replace with auth service now that we've done the same exercise now for


13693
16:19:06,720 --> 16:19:10,640
login view you should now know basically what we're gonna do in register view


13694
16:19:10,640 --> 16:19:14,080
we're gonna go to pretty much the exact same thing we did in login view except


13695
16:19:14,080 --> 16:19:19,200
in registry removing firebase from the imports get all the errors that we're


13696
16:19:19,200 --> 16:19:23,360
going to get and after we get those errors we're going to fix the problems


13697
16:19:23,360 --> 16:19:27,040
in register so let's go ahead and do that


13698
16:19:27,040 --> 16:19:30,956
let's go to our imports there's firebase imported right there we're going to


13699
16:19:30,956 --> 16:19:35,756
remove that now we have probably quite a lot of errors yeah


13700
16:19:35,756 --> 16:19:39,596
that's good and let's go then and fix that i'm going


13701
16:19:39,596 --> 16:19:44,160
to go to my notes just to ensure that i'm following all the


13702
16:19:44,160 --> 16:19:48,160
notes that i was supposed to tell you about


13703
16:19:48,160 --> 16:19:50,956
then we don't create user with email and


13704
16:19:50,956 --> 16:19:54,560
password in our auth server so let's just say all service


13705
16:19:54,560 --> 16:19:59,276
and it's not imported so let's auto import it dot firebase and we're gonna


13706
16:19:59,276 --> 16:20:05,360
say sign and what do we call it create user email and password


13707
16:20:05,360 --> 16:20:10,956
on the end of the last parameter grab the code and replace your firebase auth


13708
16:20:10,956 --> 16:20:16,796
create user email and password with our auth service create user


13709
16:20:16,796 --> 16:20:19,436
okay and in the place where we're getting the


13710
16:20:19,436 --> 16:20:25,596
user let's then say auth service firebase and we're gonna say current


13711
16:20:25,596 --> 16:20:30,160
user and now we have send email verification


13712
16:20:30,160 --> 16:20:34,160
but i think we called it some something else we said


13713
16:20:34,160 --> 16:20:37,840
and oh we didn't implement the send email


13714
16:20:37,840 --> 16:20:43,680
verification or did we let me go to auth service


13715
16:20:43,756 --> 16:20:46,880
and um send email verification yeah it is


13716
16:20:46,880 --> 16:20:51,360
right there so i'm gonna oh i see because previously


13717
16:20:51,360 --> 16:20:55,200
what was happening is that firebase implements send email


13718
16:20:55,200 --> 16:21:00,240
verification at the user level but we don't have we don't want that anymore


13719
16:21:00,240 --> 16:21:05,116
and our user doesn't have that functionality actually our user has just


13720
16:21:05,116 --> 16:21:08,640
a boolean flag so what we need to do in here we're


13721
16:21:08,640 --> 16:21:13,116
going to ask our service to to send that email verification so we're going to say


13722
16:21:13,116 --> 16:21:18,320
fire and auth service and this send email verification just


13723
16:21:18,320 --> 16:21:21,040
like okay


13724
16:21:21,436 --> 16:21:24,796
all right then we need to fix these exceptions as


13725
16:21:24,796 --> 16:21:27,840
well because as you saw in the login view we don't have firebase auth


13726
16:21:27,840 --> 16:21:32,000
exception in this case like we've removed the ui's


13727
16:21:32,000 --> 16:21:36,640
ability to talk directly with firebase by removing all the imports so now we


13728
16:21:36,640 --> 16:21:39,680
need to make sure that we handle exceptions just like we did in the login


13729
16:21:39,680 --> 16:21:44,400
view okay so let's go ahead and say


13730
16:21:44,400 --> 16:21:47,040
um on


13731
16:21:47,040 --> 16:21:50,640
each password because i think that's the first one that we handle so


13732
16:21:50,640 --> 16:21:54,796
um i mean you see almost the entire screen is now red and that's one of the


13733
16:21:54,796 --> 16:21:59,040
downsides of using the extension that i talked to about during one of the first


13734
16:21:59,040 --> 16:22:02,240
chapters of this course where i'm using an extension


13735
16:22:02,240 --> 16:22:07,596
called air lens and air lens extends and expands all the errors that would


13736
16:22:07,596 --> 16:22:12,320
otherwise just happen with little icons next to the lines it's expanding them


13737
16:22:12,320 --> 16:22:16,720
into their own separate lines and it kind of makes the code look a little bit


13738
16:22:16,720 --> 16:22:21,360
angry at times when you're making drastic changes to your code but don't


13739
16:22:21,360 --> 16:22:25,360
worry about it just have a look at your syntax and kind of see that yeah i'm


13740
16:22:25,360 --> 16:22:28,956
kind of doing the right thing i'm going to fix it soon so don't be intimidated


13741
16:22:28,956 --> 16:22:34,480
by all these red flags in here okay or these red lines


13742
16:22:34,480 --> 16:22:39,680
so let's handle weak password exception now it's going to be a little bit


13743
16:22:39,680 --> 16:22:43,916
quieter here okay then grab your show error dialog


13744
16:22:43,916 --> 16:22:46,796
from there and that's for a week password


13745
16:22:46,796 --> 16:22:51,680
put it here like that and um


13746
16:22:51,680 --> 16:22:54,956
then we need to handle um our


13747
16:22:54,956 --> 16:23:01,360
email already in use on email already in use off exception


13748
16:23:01,360 --> 16:23:05,520
and we're gonna then take the code from email already and use which is just a


13749
16:23:05,520 --> 16:23:10,160
shorter dialog right there put it there okay


13750
16:23:10,240 --> 16:23:15,276
like that um and we need to also handle


13751
16:23:15,276 --> 16:23:22,320
invalid email so i'm gonna go in here and say on invalid email off exception


13752
16:23:22,320 --> 16:23:27,596
let's grab the code from invalid email off exception


13753
16:23:27,596 --> 16:23:29,916
and


13754
16:23:30,240 --> 16:23:35,916
and and that part is done as well also we need to have on generic als


13755
16:23:35,916 --> 16:23:40,480
exception so let's go in here and just say on generic auth exception


13756
16:23:40,480 --> 16:23:45,040
and let's just handle that shoulder dialog


13757
16:23:45,040 --> 16:23:49,436
and actually this is what we did for the generic auth exception so i'm just going


13758
16:23:49,436 --> 16:23:53,520
to grab that code put it there and since on generic off


13759
16:23:53,520 --> 16:23:59,360
exception we're not accepting any e so we're not saying on catch like e like


13760
16:23:59,360 --> 16:24:04,000
that we could have done that but we're just ignoring completely at the e and in


13761
16:24:04,000 --> 16:24:07,840
here and we're just gonna say failed to register


13762
16:24:07,840 --> 16:24:10,956
and then let's clean up the rest of the code remove the other cat statements


13763
16:24:10,956 --> 16:24:14,720
okay so your code basically is going to look clean like this now so you have a


13764
16:24:14,720 --> 16:24:19,756
try block and then you say okay i'm trying this code right here create user


13765
16:24:19,756 --> 16:24:24,160
if weak password auth exception happens do this if email is already in use do


13766
16:24:24,160 --> 16:24:30,240
this if invalid email do this or any other auth exception do this so


13767
16:24:30,240 --> 16:24:34,880
it looks cleaner in my eyes at least the way we've done it now than the way we've


13768
16:24:34,880 --> 16:24:39,276
done it before in that before we were going to firebase and firebase do this


13769
16:24:39,276 --> 16:24:43,116
do that on firebase auth exception do this otherwise


13770
16:24:43,116 --> 16:24:47,520
so now the only thing we're doing is going through our


13771
16:24:47,520 --> 16:24:54,796
auth service and handling auth related exceptions and that's it


13772
16:24:54,840 --> 16:25:00,480
okay all right um now that we've we've done our work in


13773
16:25:00,480 --> 16:25:04,480
the register you can see there's no errors in the register we need to go to


13774
16:25:04,480 --> 16:25:08,720
notes view as the caption indicates so i close


13775
16:25:08,720 --> 16:25:12,560
register view now let's open up our notes view


13776
16:25:12,560 --> 16:25:17,360
and see what we are doing with firebase and notes view so do the same thing like


13777
16:25:17,360 --> 16:25:22,320
we did before remove firebase as one of your imports so you get the you get the


13778
16:25:22,320 --> 16:25:26,640
idea like an overall idea of what is happening in here and how we're using


13779
16:25:26,640 --> 16:25:30,796
firebase and i can see the only place where using firebase in notes view is


13780
16:25:30,796 --> 16:25:34,956
firebase off instance sign out that's good it's just one place but we have to


13781
16:25:34,956 --> 16:25:38,400
fix that too so let's then go um sorry i'm just gonna


13782
16:25:38,400 --> 16:25:43,756
bring up my notes as well um we're in notes view


13783
16:25:43,916 --> 16:25:48,320
okay so let's just then go to um


13784
16:25:48,320 --> 16:25:52,160
here and we're gonna we're just gonna say off


13785
16:25:52,160 --> 16:25:56,400
auth service all right and then we're going to say


13786
16:25:56,400 --> 16:26:00,400
log out i think we call it and we need to wait on it okay


13787
16:26:00,400 --> 16:26:03,436
like that and


13788
16:26:03,436 --> 16:26:08,640
it's bad so what we could do now we've removed firebase from there as


13789
16:26:08,640 --> 16:26:13,116
well and let's then go


13790
16:26:13,276 --> 16:26:16,480
as the caption indicates we need to now go through the entire app and make sure


13791
16:26:16,480 --> 16:26:21,360
that everything is working as expected but before we do that let's have a look


13792
16:26:21,360 --> 16:26:26,640
at our views and make sure none of them is importing firebase so i can see login


13793
16:26:26,640 --> 16:26:29,840
view is not importing anything related to firebase meaning that it's not using


13794
16:26:29,840 --> 16:26:34,880
firebase let's go to notes view no imports related to firebase either


13795
16:26:34,880 --> 16:26:38,640
not using firebase or at least not using firebase directly


13796
16:26:38,640 --> 16:26:43,916
remember it's using firebase but through our auth service okay so no imports from


13797
16:26:43,916 --> 16:26:49,916
firebase here either and we have our verify email view which at the moment i


13798
16:26:49,916 --> 16:26:52,240
can see


13799
16:26:52,400 --> 16:26:57,040
verify email view oh i see that we haven't clean up our verify email view


13800
16:26:57,040 --> 16:27:00,560
and that's something that we also need to do so we forgot about that let's


13801
16:27:00,560 --> 16:27:05,276
let's take care of that okay so let's go in here and


13802
16:27:05,276 --> 16:27:09,680
remove this firebase auth from here as well


13803
16:27:10,160 --> 16:27:15,116
i'm gonna go to my notes here


13804
16:27:15,596 --> 16:27:18,796
okay so let's have a look at that now let's


13805
16:27:18,796 --> 16:27:23,680
say that uh send email verification shouldn't be there so let's just then


13806
16:27:23,680 --> 16:27:28,080
say fire off service um


13807
16:27:28,080 --> 16:27:33,916
firebase oops firebase a current user and i can see you see


13808
16:27:33,916 --> 16:27:37,916
here it was using the current user just to send the email verification but we


13809
16:27:37,916 --> 16:27:41,200
don't do that anymore we just because send email verification is not


13810
16:27:41,200 --> 16:27:44,480
at a user level anymore when we've developed our off service remember so


13811
16:27:44,480 --> 16:27:47,840
we'll just say send email verification like that await


13812
16:27:47,840 --> 16:27:50,720
all right and then remove those two lines of code


13813
16:27:50,720 --> 16:27:53,916
which were just getting the user and sending an email verification remove


13814
16:27:53,916 --> 16:27:57,756
those and and to answer you i hadn't planned


13815
16:27:57,756 --> 16:28:01,436
for this i can actually see in my notes i hadn't uh


13816
16:28:01,436 --> 16:28:04,720
fixed the verify email view and that's why i'm not showing it in the captions


13817
16:28:04,720 --> 16:28:09,436
and that's completely okay i have to improvise as well sometimes so


13818
16:28:09,436 --> 16:28:14,400
let's then go ahead in here in them in the text button that says restart as


13819
16:28:14,400 --> 16:28:18,560
you can see here that needs to just sign the user out so let's just say off


13820
16:28:18,560 --> 16:28:23,840
service base log out and make sure that you wait


13821
16:28:23,840 --> 16:28:28,880
on it okay just like that and remove this line of code as well so verify view


13822
16:28:28,880 --> 16:28:32,880
now doesn't have any imports to uh from firebase either


13823
16:28:32,880 --> 16:28:35,756
and i believe those were are


13824
16:28:35,756 --> 16:28:39,520
all of our views except for also main let's make sure there's no firebase


13825
16:28:39,520 --> 16:28:44,080
imports here either perfect so now we're done with this and


13826
16:28:44,080 --> 16:28:47,916
what we could do as the caption in the case we're going to do a hot a restart


13827
16:28:47,916 --> 16:28:52,560
here and let's see if things are working yeah


13828
16:28:52,560 --> 16:28:56,720
and i'm just going to say restart here and let's see


13829
16:28:56,720 --> 16:29:01,116
the current state of the application i'm going to bring up a firebase console


13830
16:29:01,116 --> 16:29:06,080
go to my notes application here authentication and i can see i have two


13831
16:29:06,080 --> 16:29:11,680
users here okay so i'm gonna i'm just gonna say pixelityab.gmail.com


13832
16:29:11,680 --> 16:29:15,520
foobarbass and let's say register and then it


13833
16:29:15,520 --> 16:29:19,520
should give us an error saying email is already in use so email is already in


13834
16:29:19,520 --> 16:29:25,756
use let's go in here and say pixelityab gmail.combarbaz and i remember from the


13835
16:29:25,756 --> 16:29:30,640
previous chapters this is a user that's already verified his um email address so


13836
16:29:30,640 --> 16:29:34,240
by pressing login we should actually go to the main ui of the application so


13837
16:29:34,240 --> 16:29:38,720
logout should work as it did before and let's go then to


13838
16:29:38,720 --> 16:29:42,080
the uh and try to log in with the user


13839
16:29:42,080 --> 16:29:45,520
and that's i think hasn't uh


13840
16:29:45,520 --> 16:29:50,240
verified his email address so you can see then we're getting sent here


13841
16:29:50,240 --> 16:29:53,840
verify email and then we can press the send email verification which in turn


13842
16:29:53,840 --> 16:29:59,680
then sends the email and to the user so


13843
16:29:59,680 --> 16:30:04,880
that was a lot of information and some improvised edition as well in this


13844
16:30:04,880 --> 16:30:08,400
chapter for the verify email view that i hadn't planned for so it's good for me


13845
16:30:08,400 --> 16:30:11,360
to know as well that sometimes i can miss things as well but now we haven't


13846
16:30:11,360 --> 16:30:14,956
missed it during talking about it in this chapter


13847
16:30:14,956 --> 16:30:17,200
so let's now


13848
16:30:17,200 --> 16:30:21,596
wrap up this chapter we've done quite a lot and the main goal of this chapter is


13849
16:30:21,596 --> 16:30:24,400
now we've achieved that because we wanted to


13850
16:30:24,400 --> 16:30:29,436
go away from using firebase directly in our ui and going away from that using


13851
16:30:29,436 --> 16:30:34,400
our auth service for everything related to firebase and that's achieved so


13852
16:30:34,400 --> 16:30:37,680
very well done now what we need to do is as we're doing


13853
16:30:37,680 --> 16:30:42,000
in other chapters we need to uh commit and tag all the code that we've done


13854
16:30:42,000 --> 16:30:44,636
because it would be horrible if we


13855
16:30:44,636 --> 16:30:50,320
lost all this code for some reason so let me change the um layout of the


13856
16:30:50,320 --> 16:30:54,400
screen here and i'm going to make the


13857
16:30:54,400 --> 16:30:58,560
browse the editor a little bit bigger so you see it better and i'm going to go


13858
16:30:58,560 --> 16:31:01,276
into the terminal which i absolutely love in visual studio called the


13859
16:31:01,276 --> 16:31:06,320
integrated terminal and you can see that in the previous chapter we had committed


13860
16:31:06,320 --> 16:31:11,436
and tagged our code as step that's step eight now we need to commit as step nine


13861
16:31:11,436 --> 16:31:15,040
first let's have a look at status and get add all


13862
16:31:15,040 --> 16:31:22,080
status and we say git commit and we say step nine okay


13863
16:31:22,080 --> 16:31:25,520
and then we say git tag


13864
16:31:26,720 --> 16:31:30,636
nine as well and we first push our commit


13865
16:31:30,636 --> 16:31:34,160
and we say good push tax


13866
16:31:34,636 --> 16:31:39,276
all right that's pushed as well well done great job we are done with


13867
16:31:39,276 --> 16:31:43,680
this chapter and as it is uh for the case for other chapters i've talked


13868
16:31:43,680 --> 16:31:46,480
about we usually talk about what we're gonna do in the next chapter at the end


13869
16:31:46,480 --> 16:31:50,080
of the current chapter so we're done with auth service it's


13870
16:31:50,080 --> 16:31:56,480
working fine but what we don't have are some um tests


13871
16:31:56,480 --> 16:32:00,480
you see there are three different types of tests


13872
16:32:00,480 --> 16:32:06,160
that you can write in flutter unit tests integration tests and widget


13873
16:32:06,160 --> 16:32:11,436
tests now a unit test is where you for instance


13874
16:32:11,436 --> 16:32:17,200
try to take your current off service and then you uh


13875
16:32:17,200 --> 16:32:22,560
want to just say okay auth service log in register do this do that and


13876
16:32:22,560 --> 16:32:27,200
given this condition i expect you to do this now our auth service is working


13877
16:32:27,200 --> 16:32:32,160
quite well but we can't be 100 sure that it is working


13878
16:32:32,160 --> 16:32:36,400
as it should and let's say you're working inside a team and there are


13879
16:32:36,400 --> 16:32:40,480
three other people working on the same code base with you and you work on the


13880
16:32:40,480 --> 16:32:44,880
auth service and then you committed everybody reviews the code or


13881
16:32:44,880 --> 16:32:49,200
the way i like to do my code is to a pair program or mob program so there's


13882
16:32:49,200 --> 16:32:52,636
no code reviewing because everyone's working on the same code at the same


13883
16:32:52,636 --> 16:32:57,596
time so it depending on how you're working inside your team then you send


13884
16:32:57,596 --> 16:33:01,360
your code then two weeks later a new developer comes in changes your auth


13885
16:33:01,360 --> 16:33:05,040
service and to and they change the service that


13886
16:33:05,040 --> 16:33:09,436
it makes sense to them but then they break your code so maybe for instance


13887
16:33:09,436 --> 16:33:12,720
email verification screen stops working because they change


13888
16:33:12,720 --> 16:33:17,276
the code so that it's not executing the logic the way you thought it should


13889
16:33:17,276 --> 16:33:22,400
execute the logic so that's why we need tests to verify that our


13890
16:33:22,400 --> 16:33:27,360
um the way we design software is actually


13891
16:33:27,360 --> 16:33:32,320
uh is the way that it should perform its work so that it's not missing any points


13892
16:33:32,320 --> 16:33:34,400
and that's what we're going to do in the


13893
16:33:34,400 --> 16:33:39,040
next chapter so um grab some refreshments and i'll see


13894
16:33:39,040 --> 16:33:44,240
you in the next chapter hello and welcome to chapter 26 of this


13895
16:33:44,240 --> 16:33:47,520
flutter course in the previous chapter you saw that we


13896
16:33:47,520 --> 16:33:52,956
started using our auth service in our user interface code so we're not


13897
16:33:52,956 --> 16:33:57,436
going against firebase directly so we removed all the


13898
16:33:57,436 --> 16:34:02,560
imports to firebase in our user interface


13899
16:34:02,560 --> 16:34:08,720
files in the login register main dart file and um


13900
16:34:08,720 --> 16:34:13,040
notes view and also verify email view


13901
16:34:13,040 --> 16:34:18,080
and we have a good working auth service however what we're missing are some


13902
16:34:18,080 --> 16:34:23,436
tests and tests are one of my absolute favorite topics when i talk about


13903
16:34:23,436 --> 16:34:27,680
software development because they make your code a lot more robust


13904
16:34:27,680 --> 16:34:30,880
than just writing the code and leaving it in


13905
16:34:30,880 --> 16:34:34,320
there and i understand some software developers may


13906
16:34:34,320 --> 16:34:38,636
look at things as black and white saying that you have to have codes or


13907
16:34:38,636 --> 16:34:43,756
you don't have to have codes but i'm more of a grayish person in


13908
16:34:43,756 --> 16:34:47,040
thinking that well you have to be realistic sometimes you if you're for


13909
16:34:47,040 --> 16:34:51,520
instance writing an application for yourself in a hackathon for instance and


13910
16:34:51,520 --> 16:34:55,596
in in your you're in time pressure and you just want to get something out well


13911
16:34:55,596 --> 16:35:00,160
that's not the right place to write a unit test if you're in a hackathon


13912
16:35:00,160 --> 16:35:04,240
but if you're working with a company and they and you're getting paid to write


13913
16:35:04,240 --> 16:35:08,080
good software and you're getting paid to write your tests as well to make sure


13914
16:35:08,080 --> 16:35:10,400
everything's working out as it should especially if you're a back-end


13915
16:35:10,400 --> 16:35:13,276
developer software like a front-end developer


13916
16:35:13,276 --> 16:35:20,080
then you will need to ensure that your code is tested properly so


13917
16:35:20,080 --> 16:35:23,916
i'm going to bring up the caption here


13918
16:35:23,916 --> 16:35:29,916
about why we actually need tests and especially unit tests


13919
16:35:29,916 --> 16:35:34,400
um and we're going to talk about the different types of tests in a while but


13920
16:35:34,400 --> 16:35:39,200
let's just talk about unit tests um i mentioned in the


13921
16:35:39,200 --> 16:35:43,276
like the outro to the previous chapter about what unit tests are


13922
16:35:43,276 --> 16:35:47,520
and why we need them and for me the main reason having a unit


13923
16:35:47,520 --> 16:35:52,320
test is to ensure that if you if you think here's the auth provider we left


13924
16:35:52,320 --> 16:35:57,680
it in a state that well it's working okay code codes on code working so


13925
16:35:57,680 --> 16:36:02,320
it's working but what if a new developer comes into the project and


13926
16:36:02,320 --> 16:36:06,320
tries to change some code so that it works for her or for him


13927
16:36:06,320 --> 16:36:10,080
but unintentionally changes it changes the code so that it's not working for us


13928
16:36:10,080 --> 16:36:15,200
the way that we intended it so that's why that's one of the reasons we


13929
16:36:15,200 --> 16:36:18,796
have unit tests okay um so that's what we're going to do in


13930
16:36:18,796 --> 16:36:23,276
this chapter and i completely understand that this you if you're watching this of


13931
16:36:23,276 --> 16:36:27,596
course you're probably sitting somewhere in a calm area a calm room and you're


13932
16:36:27,596 --> 16:36:31,116
watching this course yourself it's the chat i think the chances of you watching


13933
16:36:31,116 --> 16:36:35,116
this course with a group of people are quite slim so


13934
16:36:35,116 --> 16:36:38,480
um and chances are you're just following along with the course and you're trying


13935
16:36:38,480 --> 16:36:41,520
to write an application or release it to the app store or play store and play


13936
16:36:41,520 --> 16:36:43,360
store so


13937
16:36:43,360 --> 16:36:47,276
maybe you're not so interested in making sure that your auth service is actually


13938
16:36:47,276 --> 16:36:51,360
tested and i completely understand that but i'm basically designing this course


13939
16:36:51,360 --> 16:36:55,520
for people who are trying to become also good software developers so if you're


13940
16:36:55,520 --> 16:36:58,796
coming as i've mentioned like one of the personas that i developed this course


13941
16:36:58,796 --> 16:37:02,636
for are designers so if you're a designer have no background in flutter


13942
16:37:02,636 --> 16:37:07,200
development you may also be interested in writing tests for your application


13943
16:37:07,200 --> 16:37:11,276
especially if your goal is to go into a bigger organization and actually get a


13944
16:37:11,276 --> 16:37:14,880
job as a flutter developer or as a software developer so


13945
16:37:14,880 --> 16:37:18,956
given that background you should know what tests are what unit tests are


13946
16:37:18,956 --> 16:37:25,200
integration tests are and what for instance widget tests are in flutter


13947
16:37:25,200 --> 16:37:30,320
now i need to also mention that there's something called a tdd or test


13948
16:37:30,320 --> 16:37:34,636
driven development and the right way of actually


13949
16:37:34,636 --> 16:37:38,720
doing test driven development is to first


13950
16:37:38,720 --> 16:37:42,880
write the tests and then you write your software at the moment we're doing it


13951
16:37:42,880 --> 16:37:47,040
the exact opposite because i didn't want to complicate uh things as we're going


13952
16:37:47,040 --> 16:37:49,840
because i have this as i said i designed this course for someone who's probably


13953
16:37:49,840 --> 16:37:53,116
new to flutter development or software development in general so like going


13954
16:37:53,116 --> 16:37:56,880
into test development test driven development directly and then writing


13955
16:37:56,880 --> 16:38:00,636
our off service probably would have complicated things more so in for the


13956
16:38:00,636 --> 16:38:04,400
sake of simplicity we wrote the code and then we're writing the test but just so


13957
16:38:04,400 --> 16:38:09,200
you know if you're if you hear people talking about tdd tested with the test


13958
16:38:09,200 --> 16:38:13,360
driven development what they mean is that you write the tests and in the


13959
16:38:13,360 --> 16:38:17,596
writing of the tests you come towards the conclusion of how the interface of


13960
16:38:17,596 --> 16:38:21,276
the class you're actually writing the tests for should look like if you're


13961
16:38:21,276 --> 16:38:24,880
working with classes so test driven development is there's


13962
16:38:24,880 --> 16:38:29,916
very important and we should be aware of it how to use it and if you're


13963
16:38:29,916 --> 16:38:34,080
working in a software development organization you should do test


13964
16:38:34,080 --> 16:38:38,560
development test driven development if time allows and if


13965
16:38:38,560 --> 16:38:42,956
um all the constraints are in the right place for you to actually do tests and


13966
16:38:42,956 --> 16:38:48,480
as i said i look at things more like in a not in a black and white um


13967
16:38:48,480 --> 16:38:52,880
vision more like a gray vision i say that you should do tests but that


13968
16:38:52,880 --> 16:38:56,796
is again something that is completely up to you and up to the situation that


13969
16:38:56,796 --> 16:39:01,840
you're in so just be aware of what tdd is and that


13970
16:39:01,840 --> 16:39:05,436
the right way of doing test driven development is that you first write your


13971
16:39:05,436 --> 16:39:09,200
tests and then you write the interfaces and


13972
16:39:09,200 --> 16:39:14,320
the code that the tests are actually performing their tests on there's lots


13973
16:39:14,320 --> 16:39:19,200
uh lots and lots of resources online about tdd and what it actually means how


13974
16:39:19,200 --> 16:39:24,400
it should be used tdd flutter as well so i strongly suggest that you have a look


13975
16:39:24,400 --> 16:39:28,880
at those resources as well and maybe perhaps after you've gone through this


13976
16:39:28,880 --> 16:39:33,276
chapter and done like the basics of doing tests


13977
16:39:33,276 --> 16:39:38,240
now um you see we have time limit in this course because this course can't go


13978
16:39:38,240 --> 16:39:43,276
on for hundreds and hundreds of hours um first because i i wouldn't probably be


13979
16:39:43,276 --> 16:39:48,240
able to put so much time i know that this course is already gonna go over 20


13980
16:39:48,240 --> 16:39:53,116
hours of time but it is it is going to take a lot of time


13981
16:39:53,116 --> 16:39:58,240
if you want to go and cover everything and all different types of testing


13982
16:39:58,240 --> 16:40:02,636
in flutter so for the sake of simplicity and making


13983
16:40:02,636 --> 16:40:06,160
sure that you follow along with this course without dropping off and getting


13984
16:40:06,160 --> 16:40:10,080
scared of all testing things that we're gonna do i'm gonna give you like the


13985
16:40:10,080 --> 16:40:13,756
basics and i'm gonna give you the building blocks that you're you need in


13986
16:40:13,756 --> 16:40:17,916
order to be able to carry on later on your own and write more and more tests


13987
16:40:17,916 --> 16:40:20,320
so i just know that the reason we're


13988
16:40:20,320 --> 16:40:23,756
dedicating this chapter to testing is to make sure that everybody understands


13989
16:40:23,756 --> 16:40:28,160
that testing is very important but also we are not going to have many many many


13990
16:40:28,160 --> 16:40:34,796
hours just to focus on testing though it is a very important subject


13991
16:40:34,796 --> 16:40:40,400
now let's talk about different types of tests i mentioned this in the outro to


13992
16:40:40,400 --> 16:40:44,560
the previous chapter and but i'll mention it here in case you've jumped


13993
16:40:44,560 --> 16:40:48,636
over that chapter which i don't recommend and if if you talk about


13994
16:40:48,636 --> 16:40:52,240
different types of tests in the flutter you should know that there are unit


13995
16:40:52,240 --> 16:40:57,840
tests widget tests and integration tests and let's just quickly talk about


13996
16:40:57,840 --> 16:41:02,720
what these different types of tests are well um


13997
16:41:02,720 --> 16:41:05,756
let's go and talk about the concept for instance of a class let's say you've


13998
16:41:05,756 --> 16:41:10,240
created a class called auth service which is the case for us and you want to


13999
16:41:10,240 --> 16:41:15,276
write some tests for this class now this class is very isolated in its own in its


14000
16:41:15,276 --> 16:41:19,436
own like it is it has a set of function functionalities functions and it has a


14001
16:41:19,436 --> 16:41:22,720
getter called current user if you don't remember that let me just


14002
16:41:22,720 --> 16:41:29,436
bring it to the screen so you see better um so let's go to our auth service


14003
16:41:30,400 --> 16:41:34,796
it conforms to and implements the auth provider it has a constructor it has a


14004
16:41:34,796 --> 16:41:38,160
factory constructor here as well and it has all the functionalities that are


14005
16:41:38,160 --> 16:41:43,360
provided by the auth provider because it implements auth provider so i'm gonna


14006
16:41:43,360 --> 16:41:46,320
actually increase the size so you see better


14007
16:41:46,320 --> 16:41:51,756
so um this is a unit of itself so it's a an


14008
16:41:51,756 --> 16:41:58,400
isolated piece of code that talks with an auth provider and then it gives us uh


14009
16:41:58,400 --> 16:42:02,480
basically mirrors the functionalities of that author provider which in in this


14010
16:42:02,480 --> 16:42:06,956
case is that in the firebase case is the firebase auth provider so


14011
16:42:06,956 --> 16:42:10,720
it doesn't have so much functionality but it has functionality good enough in


14012
16:42:10,720 --> 16:42:13,916
order for it to be tested and it's actually important to test it just to


14013
16:42:13,916 --> 16:42:18,080
make sure nobody unintentionally changes this code without without consulting


14014
16:42:18,080 --> 16:42:22,160
with us or without like and making sure that their changes aren't gonna break


14015
16:42:22,160 --> 16:42:25,916
our code so that's unit tests so you have a unit of code you have a piece of


14016
16:42:25,916 --> 16:42:30,796
code isolated and you want to test that piece of code and to ensure the


14017
16:42:30,796 --> 16:42:36,000
different functions inside that code um are working as they should so that's


14018
16:42:36,000 --> 16:42:38,840
just like a general idea of what a unit test


14019
16:42:38,840 --> 16:42:45,520
is now a widget test as its name indicates is a way for you as a software


14020
16:42:45,520 --> 16:42:49,436
developer in order to make it as a way for you as a software developer to make


14021
16:42:49,436 --> 16:42:54,080
sure that your widgets like the ui that you are creating is working as a shift


14022
16:42:54,080 --> 16:42:59,596
for instance if you have a login view in your application


14023
16:42:59,596 --> 16:43:04,720
and this login view allows the user to tap on a button in order to log in and


14024
16:43:04,720 --> 16:43:07,520
you're saying that okay in the ui i'm going to make sure as soon as you press


14025
16:43:07,520 --> 16:43:11,040
the login button until the user is logged in that this


14026
16:43:11,040 --> 16:43:15,360
login button should be disabled okay so that's a piece of logic that you thought


14027
16:43:15,360 --> 16:43:18,636
about good idea you put that code in there


14028
16:43:18,636 --> 16:43:22,080
but how do you test it how do you make sure that the login button stays


14029
16:43:22,080 --> 16:43:27,756
disabled until login is successful that's where widget testing comes into


14030
16:43:27,756 --> 16:43:34,480
play so widget testing is some sort of uh like an end to end test and by that


14031
16:43:34,480 --> 16:43:40,720
we mean that your widgets are probably talking with your services and with your


14032
16:43:40,720 --> 16:43:42,956
providers so


14033
16:43:42,956 --> 16:43:45,596
your widget for instance the login widget


14034
16:43:45,596 --> 16:43:49,596
or the login screen upon pressing the login button is gonna call into your


14035
16:43:49,596 --> 16:43:53,520
service in this case the auth service and it's going to go into this login


14036
16:43:53,520 --> 16:43:57,116
function this login function in turn is going to talk with a provider the


14037
16:43:57,116 --> 16:44:01,596
provider in turn is going to talk with the firebase code which in turn is going


14038
16:44:01,596 --> 16:44:06,160
to talk with the firebase backend so you see the layers are stacking up ui is


14039
16:44:06,160 --> 16:44:11,596
here the button is on the ui ui is talking with auth service


14040
16:44:11,596 --> 16:44:16,400
here auth service is talking with the provider the provider is talking with


14041
16:44:16,400 --> 16:44:19,680
firebase firebase is talking with the firebase backend and maybe the backend


14042
16:44:19,680 --> 16:44:22,240
is also talking with some other services so


14043
16:44:22,240 --> 16:44:27,916
that's end to end it's one end and the other end is right here so


14044
16:44:27,916 --> 16:44:31,680
you are basically by writing widget tests you're doing end-to-end testing in


14045
16:44:31,680 --> 16:44:37,276
a way okay so that's widget tests the other things are integration tests


14046
16:44:37,276 --> 16:44:40,880
you see an integration test is where you for


14047
16:44:40,880 --> 16:44:46,000
instance have a service which we have in this case the auth service and the auth


14048
16:44:46,000 --> 16:44:50,956
service is in this case the auth service constructor or the factory constructor


14049
16:44:50,956 --> 16:44:56,400
is talking with firebase so if you test our off service the exact way it is in


14050
16:44:56,400 --> 16:44:59,360
that you go and say auth service firebase


14051
16:44:59,360 --> 16:45:02,560
and then you issue commands against this auth service


14052
16:45:02,560 --> 16:45:06,560
firebase you create a user you sign in with the user you log out you send an


14053
16:45:06,560 --> 16:45:10,320
email verification if you're doing these tests you are


14054
16:45:10,320 --> 16:45:15,116
actually doing integration tests so you're because you're making sure that


14055
16:45:15,116 --> 16:45:19,916
the code is also working end-to-end but there's no ui involved so


14056
16:45:19,916 --> 16:45:21,916
uh but


14057
16:45:21,916 --> 16:45:25,840
i mentioned i mean you're now thinking okay what if testing auth service the


14058
16:45:25,840 --> 16:45:29,276
way it is is integration tests how come you said in the beginning of this


14059
16:45:29,276 --> 16:45:32,956
chapter that we're going to do unit tests


14060
16:45:32,956 --> 16:45:38,080
and that's what we need to talk about now because you see in this unit test


14061
16:45:38,080 --> 16:45:40,796
exercise that we're going to do in this chapter we're not actually going to call


14062
16:45:40,796 --> 16:45:45,756
firebase we're going to call we're going to do something called mocking


14063
16:45:45,756 --> 16:45:50,240
i don't know if i've actually mentioned some something here


14064
16:45:50,240 --> 16:45:54,320
yes i can see that later i'm actually going to talk about mocking


14065
16:45:54,320 --> 16:45:58,000
and mocking in english it could mean that you're making fun of someone and


14066
16:45:58,000 --> 16:46:02,796
that's not this and what we're talking about here mocking is kind of like you


14067
16:46:02,796 --> 16:46:08,480
imitating um a real service so imagine you have the auth service the off


14068
16:46:08,480 --> 16:46:12,080
service has a firebase factory talks with firebase and it turns talks with


14069
16:46:12,080 --> 16:46:15,436
the firebase code and then talks to the backend we're going to get rid of all of


14070
16:46:15,436 --> 16:46:20,240
that pipeline and say we're going to test off service but we're going to give


14071
16:46:20,240 --> 16:46:23,916
it another provider a provider that we


14072
16:46:23,916 --> 16:46:28,720
control you see the fire the firebase auth provider has a lot of code in it so


14073
16:46:28,720 --> 16:46:31,916
we can go in there let's go in the firebase auth provider


14074
16:46:31,916 --> 16:46:36,480
it talks directly with firebase but what if we could create an


14075
16:46:36,480 --> 16:46:41,520
auth provider that conforms to auth provider and then write a lot of logic


14076
16:46:41,520 --> 16:46:46,720
in that auth provider and provide that author provider to the auth service


14077
16:46:46,720 --> 16:46:50,880
now all of a sudden we have an auth service that delegates all his tasks to


14078
16:46:50,880 --> 16:46:54,000
this mock um


14079
16:46:54,000 --> 16:46:58,560
auth provider that we control the code for so we know exactly what the sign-in


14080
16:46:58,560 --> 16:47:01,360
is going to do we know exactly what the sign out is going to do or log in and


14081
16:47:01,360 --> 16:47:04,400
lock it depending on the terminology that you like to use


14082
16:47:04,400 --> 16:47:06,956
so what we are going to do in this chapter


14083
16:47:06,956 --> 16:47:11,360
is mocking and i'm going to explain that soon so let's just jump over that for


14084
16:47:11,360 --> 16:47:13,596
now


14085
16:47:13,680 --> 16:47:16,320
okay um


14086
16:47:16,320 --> 16:47:20,480
the next thing that we need to talk about are dev dependencies


14087
16:47:20,480 --> 16:47:24,560
if you're coming from like a node background if you've worked with nodejs


14088
16:47:24,560 --> 16:47:30,320
or express you know already about npm which is the node package manager


14089
16:47:30,320 --> 16:47:34,560
and you know what dev dependencies are in there


14090
16:47:34,560 --> 16:47:39,756
if you're coming from an ios background there isn't much of a dev dependency to


14091
16:47:39,756 --> 16:47:42,480
be honest with you except if you're coming from an ios development


14092
16:47:42,480 --> 16:47:45,596
background then you know when you're writing your tests those test frameworks


14093
16:47:45,596 --> 16:47:50,400
etc that you bring into your test target there are inside their own target so


14094
16:47:50,400 --> 16:47:54,480
that they're not shipped with the final product if you're not coming from any of


14095
16:47:54,480 --> 16:47:57,040
those backgrounds and you just want to know what dev dependencies are all


14096
16:47:57,040 --> 16:48:01,916
explaining now you see when we're working with our application if we go to


14097
16:48:01,916 --> 16:48:07,200
our pop spec yaml you'll see that we have a section here


14098
16:48:07,200 --> 16:48:11,840
called dependencies and at the moment we have dependencies on various libraries


14099
16:48:11,840 --> 16:48:16,320
for instance firebase core firebase auth cloud firestore and


14100
16:48:16,320 --> 16:48:20,400
firebase analytics these are the dependencies or libraries that we're


14101
16:48:20,400 --> 16:48:24,080
bringing into our application which if you think this is our


14102
16:48:24,080 --> 16:48:27,916
application these are the various libraries coming in and then we're at


14103
16:48:27,916 --> 16:48:30,880
the end actually at the end of this um


14104
16:48:30,880 --> 16:48:34,480
course we're gonna send our application to app store and google play store


14105
16:48:34,480 --> 16:48:38,956
when we create our application to send to these respective stores we're


14106
16:48:38,956 --> 16:48:44,160
bundling the application and all the dependencies together and sending this


14107
16:48:44,160 --> 16:48:48,636
as a complete binary to the respective um


14108
16:48:48,636 --> 16:48:52,240
app store however you also have a section here in


14109
16:48:52,240 --> 16:48:55,756
your pop spec yaml called def dependencies


14110
16:48:55,756 --> 16:49:01,596
now dev dependencies are dependencies that you use and bring into your


14111
16:49:01,596 --> 16:49:05,040
application only during the development of your


14112
16:49:05,040 --> 16:49:08,720
application meaning that when you ship your application which is a term used


14113
16:49:08,720 --> 16:49:10,560
for saying that when you create the


14114
16:49:10,560 --> 16:49:14,160
application and post it to the respective app store for instance for


14115
16:49:14,160 --> 16:49:18,080
review then those dependencies aren't actually packaged inside your


14116
16:49:18,080 --> 16:49:22,320
application so they're only inside your application while you're developing it


14117
16:49:22,320 --> 16:49:25,520
and as soon as you package it up and send it for release then those


14118
16:49:25,520 --> 16:49:28,880
dependencies are not going to be packed inside the application all right


14119
16:49:28,880 --> 16:49:34,160
so those are dev dependencies


14120
16:49:37,756 --> 16:49:41,200
now let's go to our


14121
16:49:41,276 --> 16:49:45,436
testing here so as you can see here we need to bring


14122
16:49:45,436 --> 16:49:49,200
tests into our


14123
16:49:49,360 --> 16:49:52,636
into our flutter application to make sure that we can actually run our tests


14124
16:49:52,636 --> 16:49:56,480
so you will see here flutter test is already included i'm going to show you


14125
16:49:56,480 --> 16:50:00,000
the command that you'll need to issue in terminal in order to bring it manually


14126
16:50:00,000 --> 16:50:02,880
as well and that is if we go in here and just


14127
16:50:02,880 --> 16:50:08,596
type flutter pop add test dev


14128
16:50:09,680 --> 16:50:12,080
all right


14129
16:50:12,560 --> 16:50:18,480
it's doing a pop get there okay this job is done now now let's have


14130
16:50:18,480 --> 16:50:22,480
a look in here and you can see now we have a dev


14131
16:50:22,480 --> 16:50:26,720
dependency called test and that's how you bring it into your application using


14132
16:50:26,720 --> 16:50:31,596
this command so i'm going to bring it up again just so you see it flutter pop add


14133
16:50:31,596 --> 16:50:37,200
test and and a dash dash dev if as i said if you're a node


14134
16:50:37,200 --> 16:50:40,796
node.js developer you'll know this from npm


14135
16:50:40,796 --> 16:50:46,160
d which adds it as a development requirement or dependency to your


14136
16:50:46,160 --> 16:50:50,320
application so i'm not going to assume that you brought


14137
16:50:50,320 --> 16:50:53,520
in this test package into your application with the command that i


14138
16:50:53,520 --> 16:50:57,840
provided here for you in the terminal so if then you look at your pops back yaml


14139
16:50:57,840 --> 16:51:02,240
file so i'm going to bring this down if you look at your pop spec yaml file


14140
16:51:02,240 --> 16:51:06,480
inside dev dependency then you should have this test package only inside your


14141
16:51:06,480 --> 16:51:10,160
dev dependencies if you see that is brought into the dependency section that


14142
16:51:10,160 --> 16:51:14,320
is incorrect it shouldn't be there and that is because you've missed perhaps


14143
16:51:14,320 --> 16:51:19,916
adding the dash dash dev at the end of your flutter pop add test command so if


14144
16:51:19,916 --> 16:51:23,360
you do it like this then test is going to be added to


14145
16:51:23,360 --> 16:51:29,520
dependencies and that's incorrect so make sure that you fix that error


14146
16:51:30,000 --> 16:51:36,720
okay so let's go to the next section and talk about that now if you bring up your


14147
16:51:36,720 --> 16:51:41,116
explorer you will notice that if you go to your test folder the entire test


14148
16:51:41,116 --> 16:51:45,360
folder at the moment is marked as red and and


14149
16:51:45,360 --> 16:51:50,000
uh actually it's not marked as red like an email it's is is


14150
16:51:50,000 --> 16:51:54,956
rendered in red color that's what i mean so it could be um maybe


14151
16:51:54,956 --> 16:52:00,080
heard in in the wrong tone so if you go in there that folder was read and then


14152
16:52:00,080 --> 16:52:04,160
if you click on on this file which is called a widget test that file is also


14153
16:52:04,160 --> 16:52:07,596
red has a lot of errors here actually no it has one error because it's creating


14154
16:52:07,596 --> 16:52:10,240
something called my app so


14155
16:52:10,240 --> 16:52:13,916
what we need to do in here because we don't need this existing test you see


14156
16:52:13,916 --> 16:52:17,840
this test was created for us when we created our flutter application we need


14157
16:52:17,840 --> 16:52:22,160
to get rid of it okay so let's go in here and right click on it and just say


14158
16:52:22,160 --> 16:52:27,840
delete and that file is gone okay so that's the first thing that we have


14159
16:52:27,840 --> 16:52:31,360
to do and collapse this leap folder here as


14160
16:52:31,360 --> 16:52:35,040
well now what we need to do here as a caption


14161
16:52:35,040 --> 16:52:40,956
indicates we need to create a new file called auth test dot dart okay


14162
16:52:40,956 --> 16:52:47,756
so let's go ahead and do that under the test folder so


14163
16:52:47,756 --> 16:52:52,480
let me go ahead and do that right now under the test folder right click and


14164
16:52:52,480 --> 16:52:56,480
say new file and then call it off test dart


14165
16:52:56,480 --> 16:52:58,796
all right


14166
16:52:59,596 --> 16:53:04,636
okay and what we need to do then in this off test start right now this function


14167
16:53:04,636 --> 16:53:10,636
is completely empty so let's first add a main function in here


14168
16:53:10,636 --> 16:53:14,796
like that and you can see as soon as we add the main function in here dart is


14169
16:53:14,796 --> 16:53:18,400
intelligent enough to give us a run and a debug functionality here and that's


14170
16:53:18,400 --> 16:53:22,160
displayed in visual studio code i think android studio also does the same thing


14171
16:53:22,160 --> 16:53:27,276
i don't think vim is availa is able to do that it may be vim is time and time


14172
16:53:27,276 --> 16:53:31,680
again has surprised me with all this uh amazing capabilities


14173
16:53:31,680 --> 16:53:36,240
uh but depending on the um on the tool or the text editor or the


14174
16:53:36,240 --> 16:53:39,756
id that you're using this could be different but don't worry about it we're


14175
16:53:39,756 --> 16:53:43,520
not actually going to click on these things so if you don't see these things


14176
16:53:43,520 --> 16:53:47,200
in your text editor you don't have to worry about that


14177
16:53:47,200 --> 16:53:49,840
so now that we've done


14178
16:53:49,840 --> 16:53:54,400
adding the test package now that we've imported test packages that depends we


14179
16:53:54,400 --> 16:53:58,400
also need to import it so let's go in here and say import


14180
16:53:58,400 --> 16:54:03,276
and get rid of this editor sorry explorer on the left hand side and i'm


14181
16:54:03,276 --> 16:54:07,116
going to say if we import a package called test


14182
16:54:07,116 --> 16:54:13,840
and there's a file in there called test start so now we're ready basically okay


14183
16:54:14,080 --> 16:54:18,320
all right um now you see


14184
16:54:18,320 --> 16:54:22,720
you may not have noticed it but i have this application already running


14185
16:54:22,720 --> 16:54:26,636
on my actual android phone as we've done in the previous chapter so i never


14186
16:54:26,636 --> 16:54:30,320
killed this application without a reason it's always running on that android


14187
16:54:30,320 --> 16:54:36,240
phone i can always bring it up with scr cpy so i can see right here that is


14188
16:54:36,240 --> 16:54:40,240
running without a problem however


14189
16:54:40,240 --> 16:54:44,320
remember one of the previous chapters one of the first previous chapters when


14190
16:54:44,320 --> 16:54:48,636
we talked about adding firebase to our application i think it was chapter five


14191
16:54:48,636 --> 16:54:53,680
or six it was very early in the course when we brought in firebase we need to


14192
16:54:53,680 --> 16:54:56,560
we needed to kill the application meaning that we needed to terminate the


14193
16:54:56,560 --> 16:54:59,756
application and run it from scratch so


14194
16:54:59,756 --> 16:55:03,360
depending on some dependent actually no i don't think it's depending when you


14195
16:55:03,360 --> 16:55:06,880
bring in a new dependency in your project you need to always ensure that


14196
16:55:06,880 --> 16:55:10,796
you rebuild your project so you cannot do hot reload and hot restart because


14197
16:55:10,796 --> 16:55:14,880
some of these dependencies they actually need your application to be


14198
16:55:14,880 --> 16:55:18,160
compiled from scratch and then


14199
16:55:18,160 --> 16:55:22,796
then be brought into your binary so hot reload and hot restart aren't going to


14200
16:55:22,796 --> 16:55:26,796
actually like be able to bring those dependencies


14201
16:55:26,796 --> 16:55:30,796
yet at least into your flutter application so what i need you to do


14202
16:55:30,796 --> 16:55:36,880
is to stop the execution of your program and then let's go in here save these


14203
16:55:36,880 --> 16:55:42,880
changes then let's go and say main.dart


14204
16:55:42,880 --> 16:55:47,840
and let's run the application without debugging and let's see if this


14205
16:55:47,840 --> 16:55:50,956
is going to launch the application correctly on the right device as well


14206
16:55:50,956 --> 16:55:55,200
and i can see yes it is going to run it on the correct device i change the


14207
16:55:55,200 --> 16:55:59,436
screen layout a little bit here as well so


14208
16:55:59,436 --> 16:56:05,916
let's just then wait for uh this gradle belt to finish doing its work


14209
16:56:06,400 --> 16:56:09,596
it might take some time depending on the changes that you've made to the


14210
16:56:09,596 --> 16:56:13,276
application in this case we brought in a whole new package called testing to our


14211
16:56:13,276 --> 16:56:16,320
application so it is taking its time and that's


14212
16:56:16,320 --> 16:56:19,040
completely fine


14213
16:56:20,560 --> 16:56:26,320
and i can see now it has run our code without a problem great


14214
16:56:26,320 --> 16:56:33,116
stuff for this chapter i don't think we need our um device with scr cpy if


14215
16:56:33,116 --> 16:56:36,560
you're using ios simulator i don't think you need it if you're using an emulator


14216
16:56:36,560 --> 16:56:39,360
i don't think you need it either so we could just get rid of it so we don't


14217
16:56:39,360 --> 16:56:42,240
have to display it on the screen but remember my application is still running


14218
16:56:42,240 --> 16:56:44,320
okay so


14219
16:56:44,320 --> 16:56:48,956
um let me get rid of this here get rid of the widget inspector get rid of the


14220
16:56:48,956 --> 16:56:54,956
main dart and let's go to our auth test dart file in here


14221
16:56:54,956 --> 16:56:59,200
okay now one thing that we also need to fix


14222
16:56:59,200 --> 16:57:04,480
before we start writing our tests is this little functionality here this


14223
16:57:04,480 --> 16:57:11,116
little guy in our auth user if i bring up off user here


14224
16:57:11,116 --> 16:57:16,080
you'll see that it has the way we left it is we added a


14225
16:57:16,080 --> 16:57:21,680
um we added a member variable to this off user immutable class here called is


14226
16:57:21,680 --> 16:57:25,360
email verified and the way we're constructing this auth user if you see


14227
16:57:25,360 --> 16:57:30,160
here we're saying off user just give us this william so if from anywhere inside


14228
16:57:30,160 --> 16:57:33,756
your function and you have


14229
16:57:34,080 --> 16:57:37,200
a if from anywhere inside of your application you want to create an


14230
16:57:37,200 --> 16:57:41,596
instance of off user you'll probably do like this off user and then you have to


14231
16:57:41,596 --> 16:57:47,040
pass that boolean is email verified however you'll see that


14232
16:57:47,040 --> 16:57:50,956
parameter has no name it's just a true or false


14233
16:57:50,956 --> 16:57:56,240
if i as a programmer see auth user true obvious or false i don't understand what


14234
16:57:56,240 --> 16:58:00,400
this true or false is what does that even mean does that mean the auth user


14235
16:58:00,400 --> 16:58:03,680
is turned on is turned off what does it mean


14236
16:58:03,680 --> 16:58:10,880
for that dart has the capability to give you required named parameters and that


14237
16:58:10,880 --> 16:58:14,320
means that instead of passing true in here you will


14238
16:58:14,320 --> 16:58:21,916
be forced to write off user his email verified true or false like that


14239
16:58:21,916 --> 16:58:25,916
so in order to do that as the caption indicates we need to go and make this a


14240
16:58:25,916 --> 16:58:29,200
required parameter and the way to do that is to


14241
16:58:29,200 --> 16:58:33,756
wrap it inside curly brackets like this and then prefix it with the word for the


14242
16:58:33,756 --> 16:58:38,956
keyword required so after you've done that and this


14243
16:58:38,956 --> 16:58:43,436
function is not going to work anymore because this parameter is missing so


14244
16:58:43,436 --> 16:58:47,756
it's email verified and we're gonna pass


14245
16:58:47,756 --> 16:58:51,840
this value right there okay and let's just move that remove


14246
16:58:51,840 --> 16:58:55,436
that function so now we've achieved what we said we're


14247
16:58:55,436 --> 16:58:57,840
gonna do


14248
16:58:58,160 --> 16:59:01,596
now um because you see we're not gonna we're


14249
16:59:01,596 --> 16:59:05,360
not actually you may think that okay we've changed this parameter to required


14250
16:59:05,360 --> 16:59:09,360
so where are all the errors in our code why didn't anything break and that's one


14251
16:59:09,360 --> 16:59:13,116
of the beauties of what we've done so far and that we've abstracted away so


14252
16:59:13,116 --> 16:59:18,720
much code that the code is a lot more robust now so because nowhere inside our


14253
16:59:18,720 --> 16:59:24,320
application we're actually creating us users except from this factory function


14254
16:59:24,320 --> 16:59:28,400
the only place we have to fix this is email verified is inside this factory


14255
16:59:28,400 --> 16:59:31,680
function so to me that's beautiful because


14256
16:59:31,680 --> 16:59:36,720
doing something like drastic by adding a required parameter to a class it didn't


14257
16:59:36,720 --> 16:59:42,520
break anything so we're just good to go okay


14258
16:59:42,796 --> 16:59:47,200
all right um now this is the point that i mentioned


14259
16:59:47,200 --> 16:59:52,880
previously that we need a mock off provider all right


14260
16:59:52,880 --> 16:59:57,596
in order to do a mock author provider i need to go a little bit more into what


14261
16:59:57,596 --> 17:00:02,240
mocks are and why we need them you see in software um


14262
17:00:02,240 --> 17:00:06,720
we have especially in testing as well or even as the app architecture level or


14263
17:00:06,720 --> 17:00:10,720
software architect architecture level we have something called dependency in


14264
17:00:10,720 --> 17:00:14,000
injection dependency injection


14265
17:00:14,000 --> 17:00:18,560
just quickly explaining it is very similar to our auth service let's have a


14266
17:00:18,560 --> 17:00:24,560
look at our off service here you see off service is dependent on an auth provider


14267
17:00:24,560 --> 17:00:30,080
and it's not just making the assumption that it's auth providers always firebase


14268
17:00:30,080 --> 17:00:34,880
it provides a factory for firebase but it's not making an assumption about that


14269
17:00:34,880 --> 17:00:38,560
hey i'm always locked to firebase auth provider


14270
17:00:38,560 --> 17:00:43,680
this is dependency injection so this off service is dependent on a provider using


14271
17:00:43,680 --> 17:00:47,276
a constant constructor initializer we're


14272
17:00:47,276 --> 17:00:50,880
injecting the provider into it this


14273
17:00:50,880 --> 17:00:55,040
in a nutshell is dependency injection in software development


14274
17:00:55,040 --> 17:00:58,560
you could go into a lot more details about it but we don't have time for it


14275
17:00:58,560 --> 17:01:03,436
um so what is a mock the mock goes very


14276
17:01:03,436 --> 17:01:07,040
very well hand in hand with dependency injection


14277
17:01:07,040 --> 17:01:11,360
in that in this case you can see we have an off service that is mirroring the


14278
17:01:11,360 --> 17:01:15,680
functionality of its provider which you could inject into it


14279
17:01:15,680 --> 17:01:17,916
but the provider that we're using at the


14280
17:01:17,916 --> 17:01:22,000
moment is called firebase what if we created a


14281
17:01:22,000 --> 17:01:27,596
completely new provider that we have complete control over we can we can make


14282
17:01:27,596 --> 17:01:32,000
sure that it conforms and implements auth provider and we can make sure that


14283
17:01:32,000 --> 17:01:35,756
it implements all those functionalities that is that auth provider implements


14284
17:01:35,756 --> 17:01:40,956
and overrides all those but we have some special logic in our own


14285
17:01:40,956 --> 17:01:45,916
mock auth provider then we will give this auth provider to


14286
17:01:45,916 --> 17:01:51,436
our auth service and then let the auth service do its magic and and mirror all


14287
17:01:51,436 --> 17:01:58,000
those functionalities of the provider so we're gonna mock an off provider and


14288
17:01:58,000 --> 17:02:03,520
provide that into our auth service so that's what mocking is when


14289
17:02:03,520 --> 17:02:09,680
you when you create a a new function or a class and then you


14290
17:02:09,680 --> 17:02:13,116
can then inject that into another


14291
17:02:13,116 --> 17:02:17,840
place and then test that another place okay


14292
17:02:18,400 --> 17:02:22,880
so let's go in our off test dart file that we have right here i'm going to


14293
17:02:22,880 --> 17:02:31,276
command s on it and let's go and create our little off like mock off provider


14294
17:02:31,276 --> 17:02:35,840
so i'm gonna go in here and i'm just gonna say class mock off provider and


14295
17:02:35,840 --> 17:02:39,916
suggest you do the same thing and this guy is gonna implement


14296
17:02:39,916 --> 17:02:44,956
um the auth provider okay auto imported for


14297
17:02:44,956 --> 17:02:48,560
us okay so like that


14298
17:02:48,720 --> 17:02:51,596
all right now what we need to do is just to get


14299
17:02:51,596 --> 17:02:55,520
mock-off provider to implement all the functionalities


14300
17:02:55,520 --> 17:03:00,160
that the auth provider apps abstract class requires us to implement so i'm


14301
17:03:00,160 --> 17:03:04,956
going to command dot on it and respectfully ask visual studio code to


14302
17:03:04,956 --> 17:03:09,276
create those six missing overrides thank you so much visual studio code for


14303
17:03:09,276 --> 17:03:14,160
making our lives easier okay


14304
17:03:14,160 --> 17:03:19,520
now what we need to do is just to do the heavy lifting of this mock auth provider


14305
17:03:19,520 --> 17:03:25,596
which means to go ahead and create the functionality for the auth provider okay


14306
17:03:25,596 --> 17:03:28,480
i understand that the code is completely ginormous right now so i'm going to


14307
17:03:28,480 --> 17:03:32,080
decrease the size a little bit so you see more of the code


14308
17:03:32,080 --> 17:03:37,680
so let's go ahead and take care of the first function in here which is create


14309
17:03:37,680 --> 17:03:41,040
user okay now you see


14310
17:03:41,040 --> 17:03:45,040
what we're going to do is if you remember


14311
17:03:45,040 --> 17:03:50,000
our auth provider has a function called initialize all


14312
17:03:50,000 --> 17:03:53,680
right now when we're using auth provider in


14313
17:03:53,680 --> 17:03:59,520
the context of firebase firebase internally has the concept of whether it


14314
17:03:59,520 --> 17:04:03,520
is initialized or not but when we're creating a mock auth


14315
17:04:03,520 --> 17:04:09,040
provider where is that functionality we don't keep track yet of whether our mock


14316
17:04:09,040 --> 17:04:12,160
auth provider is actually initialized or not


14317
17:04:12,160 --> 17:04:18,720
and we just have an initialize function but what if someone calls create user on


14318
17:04:18,720 --> 17:04:24,400
our mock auth provider without having initialized the provider yet and that's


14319
17:04:24,400 --> 17:04:29,200
what we need to do now so let's go ahead and keep track of that


14320
17:04:29,200 --> 17:04:34,160
so what we're going to do here is we're just going to say var is initialized


14321
17:04:34,160 --> 17:04:39,520
it is false to begin with okay and the reason i'm saying underscore is


14322
17:04:39,520 --> 17:04:44,480
initialize is because um this is making this property pretty much


14323
17:04:44,480 --> 17:04:49,200
private to our mock-off provider so we're indicating to the outside world


14324
17:04:49,200 --> 17:04:52,560
that hey you shouldn't be reading from this property or writing to this


14325
17:04:52,560 --> 17:04:54,956
property


14326
17:04:55,680 --> 17:05:00,636
okay that is done now let's create a little getter for this property so that


14327
17:05:00,636 --> 17:05:05,680
when we're testing our mock auth provider we can actually say


14328
17:05:05,680 --> 17:05:10,320
hey are you initialized and we can also create a test for a mock


14329
17:05:10,320 --> 17:05:14,560
auth provider which we're actually going to do is to say okay when we create the


14330
17:05:14,560 --> 17:05:19,200
mock auth provider it shouldn't initially be initialized however after


14331
17:05:19,200 --> 17:05:24,000
calling initialize on it then we make a test to make sure that initialize flag


14332
17:05:24,000 --> 17:05:28,320
is set to true so let's in order to do that we need to be able to read this is


14333
17:05:28,320 --> 17:05:32,880
initialize flag let's go ahead and create a boolean getter for it we call


14334
17:05:32,880 --> 17:05:38,080
it is initialized it's initialized and we just return is


14335
17:05:38,080 --> 17:05:41,596
initialized in there


14336
17:05:41,680 --> 17:05:46,080
all right now let's go into our create user i'm


14337
17:05:46,080 --> 17:05:49,200
going to put a comma at the end of that parameter i'm also going to take the


14338
17:05:49,200 --> 17:05:52,956
liberty of going and creating and putting a comma at the end of login


14339
17:05:52,956 --> 17:05:57,840
function and that's the only two places that had


14340
17:05:57,840 --> 17:06:01,436
that required a comma at the end of their parameter list so now dart


14341
17:06:01,436 --> 17:06:06,080
formatter is able to format the code a lot better


14342
17:06:06,320 --> 17:06:11,680
okay let's go to create user now you see in create user i'm pretty much in all


14343
17:06:11,680 --> 17:06:14,796
these functions that we're writing in here for instance login send email


14344
17:06:14,796 --> 17:06:20,080
verification we're we need to make sure that this mock auth provider is already


14345
17:06:20,080 --> 17:06:24,796
initialized so we're actually going to throw an exception if you call these


14346
17:06:24,796 --> 17:06:29,040
functions that require initialization without having initialized the mock auth


14347
17:06:29,040 --> 17:06:36,720
provider first so let's go and define a um an exception in here


14348
17:06:36,720 --> 17:06:40,720
so let me see actually if i have written that down somewhere


14349
17:06:40,720 --> 17:06:45,276
nope so let's go in here and just say class


14350
17:06:45,276 --> 17:06:49,276
not mini initialized exception


14351
17:06:49,276 --> 17:06:53,200
implements exception so you should know this from


14352
17:06:53,200 --> 17:06:56,956
before and it's empty for now


14353
17:06:56,956 --> 17:07:00,956
okay so what we need to do in here we need to


14354
17:07:00,956 --> 17:07:06,880
just say if is initialized if it's not initialized


14355
17:07:06,880 --> 17:07:11,756
then throw not initialized exception


14356
17:07:11,756 --> 17:07:14,000
okay


14357
17:07:14,080 --> 17:07:17,596
so that's an if statement it's a one-liner that's why we don't really


14358
17:07:17,596 --> 17:07:20,796
break it in here otherwise you put curly brackets in here and then do the


14359
17:07:20,796 --> 17:07:24,636
throwing in there but you could also use a one-liner if statement if that's all


14360
17:07:24,636 --> 17:07:28,000
if that's what you're doing just one line of code


14361
17:07:28,000 --> 17:07:31,520
all right and i kind of like these one-liner if statements to be honest


14362
17:07:31,520 --> 17:07:36,720
with you so i hope you got this if the mock auth provider is not initialized


14363
17:07:36,720 --> 17:07:41,756
throw that particular exception and what we're going to do is just we're


14364
17:07:41,756 --> 17:07:46,080
going to fake creating a user okay so we're just going to say


14365
17:07:46,080 --> 17:07:50,080
if you call the create user on firebase for instance it probably needs to go and


14366
17:07:50,080 --> 17:07:54,160
talk with firebase back-end so it's going to take some time so let's build


14367
17:07:54,160 --> 17:07:58,880
in some little uh delay in here and what we're going to do is just to


14368
17:07:58,880 --> 17:08:02,560
say future and delete


14369
17:08:02,560 --> 17:08:06,400
and here you have to pass the duration to it so we say const duration


14370
17:08:06,400 --> 17:08:11,200
seconds and they do


14371
17:08:11,200 --> 17:08:17,276
i believe that's it let's just say one in here and remember


14372
17:08:17,276 --> 17:08:22,560
future delayed if i go and move over it's a function signature it returns a


14373
17:08:22,560 --> 17:08:27,840
future of dynamic so by creating a future you're not actually waiting on it


14374
17:08:27,840 --> 17:08:32,840
so let's mark our function as async and let's just wait on it


14375
17:08:32,840 --> 17:08:40,000
okay now do then is to make sure that


14376
17:08:40,000 --> 17:08:43,360
um this create user actually returns an


14377
17:08:43,360 --> 17:08:48,480
author user but remember also in firebase um or i don't actually know if


14378
17:08:48,480 --> 17:08:52,400
firebase works like this by but by creating a user what we're going to do


14379
17:08:52,400 --> 17:08:58,796
in our mock auth provider is actually logging that user in as well okay


14380
17:08:58,796 --> 17:09:02,080
so let's just say you see login returns


14381
17:09:02,080 --> 17:09:06,636
also a future of auth user so at the end of this create user we're just going to


14382
17:09:06,636 --> 17:09:10,080
make our lives easier and just return the result of logging in so let's just


14383
17:09:10,080 --> 17:09:12,720
say return and log in


14384
17:09:12,720 --> 17:09:17,596
when this email and password okay


14385
17:09:17,596 --> 17:09:23,040
so this is a very dumb and very easy mock implementation of create user in


14386
17:09:23,040 --> 17:09:27,756
itself it does three things checks to make sure that you're initialized and if


14387
17:09:27,756 --> 17:09:30,880
you're not initialized it throws an exception


14388
17:09:30,880 --> 17:09:37,436
it does a mock uh one second wait just to like fake making an api call and the


14389
17:09:37,436 --> 17:09:40,956
third thing that it does is that it calls the login function with the same


14390
17:09:40,956 --> 17:09:45,520
email and password and returns the result of login just so that it can get


14391
17:09:45,520 --> 17:09:48,796
its off user


14392
17:09:49,276 --> 17:09:54,560
okay now we need the mock current user so


14393
17:09:54,560 --> 17:09:59,040
how do we do that how do we get a current user you see


14394
17:09:59,040 --> 17:10:03,200
firebase has the ability to keep track of the current user but how do we do


14395
17:10:03,200 --> 17:10:07,276
that we can't just go and delegate this functionality to firebase right now so


14396
17:10:07,276 --> 17:10:12,796
we also need to create an auth user in here okay so let's go to deter mock auth


14397
17:10:12,796 --> 17:10:17,916
provider right there off is initialized or below it doesn't


14398
17:10:17,916 --> 17:10:22,320
matter somewhere i'm gonna do it above i'm gonna say user


14399
17:10:22,320 --> 17:10:27,040
like this you see in far in a dart if you make a


14400
17:10:27,040 --> 17:10:32,400
member variable optional by default it is null so it has no value so you don't


14401
17:10:32,400 --> 17:10:35,916
have to actually go and say no and you can see it says don't explicitly


14402
17:10:35,916 --> 17:10:40,636
initialize variables to no good good analyzer


14403
17:10:40,636 --> 17:10:44,000
i don't have a user that we're internally going to manage and i'm


14404
17:10:44,000 --> 17:10:48,796
actually going to make it prefix it with an underscore so that it is marked as a


14405
17:10:48,796 --> 17:10:52,080
private function as a private member variable


14406
17:10:52,080 --> 17:10:58,796
then in the current user simply return that user so like this okay


14407
17:10:59,596 --> 17:11:01,596
perfect now


14408
17:11:01,596 --> 17:11:06,160
we need to go and take care of the initialize function let's see if we can


14409
17:11:06,160 --> 17:11:11,040
find it login here is initialize


14410
17:11:11,040 --> 17:11:12,956
so the only thing we're going to do in


14411
17:11:12,956 --> 17:11:18,240
initializers we're going to fake waiting just wait for like a second


14412
17:11:18,240 --> 17:11:25,520
and and then set r is initialize flag to true so let's grab this code of a weight


14413
17:11:25,520 --> 17:11:30,320
from our create user function and then bring it to initialize and then just say


14414
17:11:30,320 --> 17:11:34,000
await and make your function asynchronous and then we're gonna just


14415
17:11:34,000 --> 17:11:37,360
wait and we're just going to say initialized


14416
17:11:37,360 --> 17:11:43,116
is true so that was an easy one all right so


14417
17:11:43,520 --> 17:11:48,636
then the meatiest part of our mock author provider is actually the


14418
17:11:48,636 --> 17:11:54,080
login function because it's not that it's doing login but it's also


14419
17:11:54,080 --> 17:11:58,636
the function that the register function is using or do we say create


14420
17:11:58,636 --> 17:12:02,240
user create user so that function is also


14421
17:12:02,240 --> 17:12:05,756
logging the it's calling the login function so we


14422
17:12:05,756 --> 17:12:10,240
need to really test this function to ensure that it's working properly okay


14423
17:12:10,240 --> 17:12:13,840
as i mentioned before in most of these functions when we need to make sure that


14424
17:12:13,840 --> 17:12:17,436
our mock auth providers initialize before these functions are called on


14425
17:12:17,436 --> 17:12:22,796
them so let's go and grab this code you see it says if is initialized and bring


14426
17:12:22,796 --> 17:12:27,840
that code as well in our login function so that's the first thing that we're


14427
17:12:27,840 --> 17:12:30,880
gonna do now


14428
17:12:30,880 --> 17:12:36,320
we're also going to build in some fake functionality into the login function


14429
17:12:36,320 --> 17:12:40,880
just so we can write tests for them because you see in the real world you


14430
17:12:40,880 --> 17:12:45,116
probably have like lots and lots of real logic that is


14431
17:12:45,116 --> 17:12:49,916
inside your uh auth providers and auth services but we don't have all that real


14432
17:12:49,916 --> 17:12:53,520
logic right now because our application is quite small right now so we're gonna


14433
17:12:53,520 --> 17:12:58,560
build some fake functionality into our mod provider and then sorry in our mock


14434
17:12:58,560 --> 17:13:03,040
auth provider and then we're going to write tests that test those


14435
17:13:03,040 --> 17:13:07,520
scenarios so you learn about mocking and you'll also learn about writing tests


14436
17:13:07,520 --> 17:13:12,000
for those mocks okay so that's the entire purpose of this chapter


14437
17:13:12,000 --> 17:13:14,720
so what we're going to do then is we're


14438
17:13:14,720 --> 17:13:18,320
going to say if and so we're going to make up an email


14439
17:13:18,320 --> 17:13:21,520
that we don't like we're going to say if email is


14440
17:13:21,520 --> 17:13:27,596
um fooatvar.com then throw user not found exception okay


14441
17:13:27,596 --> 17:13:31,276
so if you're trying to log in with this email address we're just gonna say user


14442
17:13:31,276 --> 17:13:36,636
not found okay and if password


14443
17:13:36,636 --> 17:13:40,880
is foobar unlike the foobar password either then


14444
17:13:40,880 --> 17:13:46,796
we're going to say throw wrong password off exception so


14445
17:13:46,796 --> 17:13:51,276
remember login in itself if we go to our


14446
17:13:51,276 --> 17:13:56,400
firebase auth provider so go to this file firebase auth provider dart it has


14447
17:13:56,400 --> 17:14:00,240
those functionalities like if you have a look at login it has a functionality


14448
17:14:00,240 --> 17:14:03,916
like handling user not found wrong password generic auth exception so what


14449
17:14:03,916 --> 17:14:07,116
we're doing is that we're creating some sort of a mock of kind of the same thing


14450
17:14:07,116 --> 17:14:11,840
but we're locking it to specific email and password okay


14451
17:14:12,000 --> 17:14:16,320
okay so that's for password we don't like the email of foo at bar.com and we


14452
17:14:16,320 --> 17:14:21,200
don't like the password of foobar now


14453
17:14:21,200 --> 17:14:24,560
we're also going to remove the unimplemented error here now in this


14454
17:14:24,560 --> 17:14:30,000
case let's just create a user so we're going to say user is and off user


14455
17:14:30,000 --> 17:14:34,720
and it's email verified we just say true or let's just say false actually so we


14456
17:14:34,720 --> 17:14:39,116
say when you're trying to log in we're just saying is email verify false okay


14457
17:14:39,116 --> 17:14:42,880
now that we've created a user let's assign it to our user


14458
17:14:42,880 --> 17:14:46,560
like this because remember we have a private field called


14459
17:14:46,560 --> 17:14:52,240
underscore user and we just keep hold of it like this


14460
17:14:52,240 --> 17:14:56,400
and then we will do because remember we need to return a future of that auth


14461
17:14:56,400 --> 17:15:04,880
user then we say return future of a value equal to our user like this


14462
17:15:05,680 --> 17:15:10,160
so that's our login function


14463
17:15:10,636 --> 17:15:14,480
so that was quite a lot of work but i think


14464
17:15:14,480 --> 17:15:19,116
you hopefully understand what we did right there


14465
17:15:19,276 --> 17:15:23,840
now we have to look at a logout function and the logout function is gonna have


14466
17:15:23,840 --> 17:15:28,796
some code as well so um it's not just gonna be saying okay i


14467
17:15:28,796 --> 17:15:32,240
logged out as i mentioned before we need to make sure that the


14468
17:15:32,240 --> 17:15:35,916
mock provider is initialized so let's bring that code in here


14469
17:15:35,916 --> 17:15:40,636
boom okay and we also need to make sure if you want to log out that you've


14470
17:15:40,636 --> 17:15:44,240
actually logged in before so let's just say if


14471
17:15:44,240 --> 17:15:49,840
um if i can find my keys if user is null


14472
17:15:49,840 --> 17:15:55,916
then throw uh user not found off exception okay


14473
17:15:55,916 --> 17:15:59,200
otherwise what we're gonna do is we're just gonna await


14474
17:15:59,200 --> 17:16:04,080
so let's find an await code from before we're just gonna fake waiting a little


14475
17:16:04,080 --> 17:16:09,840
bit just one second okay and and we're gonna set our user as well


14476
17:16:09,840 --> 17:16:13,840
to null we're just gonna say the current user then is not you can see it's


14477
17:16:13,840 --> 17:16:18,240
complaining that we're using a weight but let me just say in here then


14478
17:16:18,240 --> 17:16:21,596
async just like that then the error goes away


14479
17:16:21,596 --> 17:16:26,480
because if you mark your logout function as async then you can wait on a future


14480
17:16:26,480 --> 17:16:30,560
so easy as well logout says am i initialized


14481
17:16:30,560 --> 17:16:34,480
and in order for me to log out there needs to be a user and then i'm gonna


14482
17:16:34,480 --> 17:16:38,560
fake waiting one second and then i'm gonna set that user to null so easy pc


14483
17:16:38,560 --> 17:16:40,796
okay


14484
17:16:41,040 --> 17:16:45,680
now let's mock our email verification code


14485
17:16:45,680 --> 17:16:49,116
so same thing so you should now be familiar with this let's just make sure


14486
17:16:49,116 --> 17:16:52,956
that we are initialized i'm going to grab a code from there room throw


14487
17:16:52,956 --> 17:16:55,276
unimplemented error actually let's leave it


14488
17:16:55,276 --> 17:16:58,720
let's leave it there okay for now at least


14489
17:16:58,720 --> 17:17:03,360
and um then during the send email verification


14490
17:17:03,360 --> 17:17:08,080
what we're gonna do is you see when we did a login we said that uh let's have a


14491
17:17:08,080 --> 17:17:11,680
look at the login we said by default the email for the user's email verification


14492
17:17:11,680 --> 17:17:16,160
is false but upon send doing a send email verification we're just gonna flip


14493
17:17:16,160 --> 17:17:19,436
that flag where all of a sudden i'm gonna say oh now outside of your email


14494
17:17:19,436 --> 17:17:22,636
verified which which isn't so realistic but


14495
17:17:22,636 --> 17:17:27,116
that's the logic that we're mocking right now okay and remember a an auth


14496
17:17:27,116 --> 17:17:29,520
user uh here


14497
17:17:29,520 --> 17:17:35,276
has a and it's email verified it's read only like you it's a constant you cannot


14498
17:17:35,276 --> 17:17:39,276
change it so just because we have an optional user in


14499
17:17:39,276 --> 17:17:43,116
our mock auth provider it doesn't mean that we can just go and say off user is


14500
17:17:43,116 --> 17:17:48,400
email verified true we can't write to it so we need to rewrite this entire user


14501
17:17:48,400 --> 17:17:50,956
okay so


14502
17:17:50,956 --> 17:17:55,840
after checking that you're initialized what we're doing is saying that


14503
17:17:55,840 --> 17:17:59,680
if let's get the user actually final user


14504
17:17:59,680 --> 17:18:03,436
is this let's get your current user and we


14505
17:18:03,436 --> 17:18:10,480
say if user is null and throw user not found so our


14506
17:18:10,480 --> 17:18:14,400
send email verification code is make sure making sure that you've logged in


14507
17:18:14,400 --> 17:18:17,680
before you can send an email verification or at least you register


14508
17:18:17,680 --> 17:18:21,040
your user okay um


14509
17:18:21,040 --> 17:18:24,956
okay then what we're going to do is to create


14510
17:18:24,956 --> 17:18:29,200
a new user we're saying new user is an off user and his email verified is true


14511
17:18:29,200 --> 17:18:33,840
this time and then we set that as our current user so we say the current user


14512
17:18:33,840 --> 17:18:39,200
is the new user and then we just remove that and we make


14513
17:18:39,200 --> 17:18:44,400
our sure our code async as well okay


14514
17:18:44,400 --> 17:18:47,596
so that's for send email and verification


14515
17:18:47,596 --> 17:18:50,880
so you see it did take a while but we've actually


14516
17:18:50,880 --> 17:18:55,436
written now a mock auth provider that has its own code and it has its own


14517
17:18:55,436 --> 17:19:00,000
initialization etc okay now what we need to do is to


14518
17:19:00,000 --> 17:19:05,840
talk actually about tests so um


14519
17:19:06,000 --> 17:19:12,080
let's see yes um so what are test groups and what are


14520
17:19:12,080 --> 17:19:16,956
tests you see if you think of tests as or at least


14521
17:19:16,956 --> 17:19:22,160
unit tests as pieces of code that test other pieces of code


14522
17:19:22,160 --> 17:19:26,080
you may think okay i'm going to write a test for create user


14523
17:19:26,080 --> 17:19:29,840
here i'm going to then write a test for current user i'm going to write test for


14524
17:19:29,840 --> 17:19:34,000
initialized login blah blah now all of these are common and group they're kind


14525
17:19:34,000 --> 17:19:39,040
of related they're all testing mock auth provider and that's what test groups are


14526
17:19:39,040 --> 17:19:45,360
for in your test functions in flutter sorry in your tests and test suites in


14527
17:19:45,360 --> 17:19:50,240
florida you can actually group your test functionalities into a group that has a


14528
17:19:50,240 --> 17:19:55,436
name and then you can ask flutter to run that entire group of tests for you so


14529
17:19:55,436 --> 17:20:02,160
that's what test groups are for so now what we need to do is to go into


14530
17:20:02,160 --> 17:20:07,276
our main test function right there and basically create a group and then add


14531
17:20:07,276 --> 17:20:12,956
provider inside that so let's just go ahead and then type group


14532
17:20:12,956 --> 17:20:17,596
and in here we're just going to say mock authentication okay


14533
17:20:17,596 --> 17:20:20,956
and let's go in here the second parameters as a function


14534
17:20:20,956 --> 17:20:23,916
and like that so now you should have your code like this so basically you


14535
17:20:23,916 --> 17:20:28,000
created a test group and you can see visual studio code is telling me that oh


14536
17:20:28,000 --> 17:20:32,160
you can run this group so we're gonna put all our mock


14537
17:20:32,160 --> 17:20:36,240
authentication tests inside this group okay


14538
17:20:36,240 --> 17:20:40,560
and as a caption says the first thing we're gonna do is we're gonna create our


14539
17:20:40,560 --> 17:20:46,320
an instance of our mock aus provider so let's go ahead and say a final


14540
17:20:46,320 --> 17:20:51,200
provider is a mock-off provider just like that


14541
17:20:51,200 --> 17:20:53,360
okay so


14542
17:20:53,360 --> 17:20:57,596
now we have that so now we're getting to the juicy parts


14543
17:20:57,596 --> 17:21:00,240
and i'm so happy about this because we've done quite a lot of groundwork


14544
17:21:00,240 --> 17:21:02,880
just to get to this point for this chapter


14545
17:21:02,880 --> 17:21:07,200
so now we're gonna write our first test so as you can see the title says testing


14546
17:21:07,200 --> 17:21:11,116
provider is initialized providers shouldn't be initialized to begin with


14547
17:21:11,116 --> 17:21:14,240
you see we're starting with a


14548
17:21:14,240 --> 17:21:18,720
an assertion we're saying that according to our implementation the way we've


14549
17:21:18,720 --> 17:21:23,680
implemented our mock auth provider it should not be initialized to start with


14550
17:21:23,680 --> 17:21:26,880
so we're just making sure that by creating an instance of mock auth


14551
17:21:26,880 --> 17:21:31,276
provider it's is initialized the boolean getter


14552
17:21:31,276 --> 17:21:36,080
should return false if it if it returns true we're going to fail our tests so


14553
17:21:36,080 --> 17:21:39,360
meaning that if someone then sneakily goes into the code later and says oh


14554
17:21:39,360 --> 17:21:43,116
this is true by default then the tests are gonna fail and all the developers in


14555
17:21:43,116 --> 17:21:46,320
the team are gonna be notified about that okay


14556
17:21:46,320 --> 17:21:50,000
so let's create our first test the way to


14557
17:21:50,000 --> 17:21:54,400
create tests in flutter is that you start typing test okay


14558
17:21:54,400 --> 17:21:58,080
and you give it a name in this case i'm gonna say should not


14559
17:21:58,080 --> 17:22:03,916
be initialized to begin with okay so that's the name then you're gonna


14560
17:22:03,916 --> 17:22:08,160
provide it with a function to execute upon doing its test


14561
17:22:08,160 --> 17:22:13,116
and in here you could say you could use a function called expect


14562
17:22:13,116 --> 17:22:18,240
and you say writers provider is initialized


14563
17:22:18,240 --> 17:22:23,360
it should be false to begin with all right so


14564
17:22:23,360 --> 17:22:28,400
that's the first test that we wrote so test function then you write a name for


14565
17:22:28,400 --> 17:22:33,596
it then a function to be executed and in there you can use various flavors of the


14566
17:22:33,596 --> 17:22:38,636
expect function you'll see expect there are various flavors of that


14567
17:22:38,636 --> 17:22:41,200
so right now we're just expecting the easy


14568
17:22:41,200 --> 17:22:46,160
initialize flag to be false okay


14569
17:22:46,160 --> 17:22:52,880
now the next test that we have to do um so as the captioning case test logging


14570
17:22:52,880 --> 17:22:57,360
out before initialization the provider should throw and not initialize


14571
17:22:57,360 --> 17:22:59,756
exception so


14572
17:22:59,756 --> 17:23:03,756
basically what we're saying is that according to the log out function it


14573
17:23:03,756 --> 17:23:07,756
shouldn't be able to log out if it's not initialized first so we're literally


14574
17:23:07,756 --> 17:23:11,916
testing this line of code okay to make sure that no one just unintentionally


14575
17:23:11,916 --> 17:23:16,000
comments it out or unintentionally removes the same we don't need it all


14576
17:23:16,000 --> 17:23:21,200
right so let's test that uh functionality so let's just say test i'm


14577
17:23:21,200 --> 17:23:24,240
going to look at my notes to see what i've named there


14578
17:23:24,240 --> 17:23:28,320
cannot log out if not initialize okay now you know that


14579
17:23:28,320 --> 17:23:31,596
as a second parameter to your test function you need to provide a function


14580
17:23:31,596 --> 17:23:34,160
so uh parenthesis


14581
17:23:34,160 --> 17:23:38,560
and then curly brackets and in here we're just gonna say


14582
17:23:38,560 --> 17:23:42,560
expect and now we're using a new flavor of this


14583
17:23:42,560 --> 17:23:46,240
expect and in here i'm just going to say provider log out


14584
17:23:46,240 --> 17:23:54,240
and upon calling this logout function we actually want to expect an exception


14585
17:23:54,240 --> 17:23:59,840
so there is a really good uh catch that you can use in here that


14586
17:23:59,840 --> 17:24:04,160
is called throws a and you can see throws a is a matcher


14587
17:24:04,160 --> 17:24:08,636
and it matches the result of the log out function against whatever you provide


14588
17:24:08,636 --> 17:24:12,956
here so you say throws a and then you expect


14589
17:24:12,956 --> 17:24:18,000
an exception in here you see the const type matcher


14590
17:24:18,000 --> 17:24:21,756
height matcher is just going to say not initialized


14591
17:24:21,756 --> 17:24:26,400
exception so i'm going to type this and then i'm going to show you what i'm


14592
17:24:26,400 --> 17:24:30,880
doing basically in here see what i've done through jose const


14593
17:24:30,880 --> 17:24:35,436
blah blah blah huh that looks fine as well


14594
17:24:35,436 --> 17:24:41,520
and let's see why type manager is not extract method cons throws i probably


14595
17:24:41,520 --> 17:24:45,916
messed up something in here yeah


14596
17:24:45,916 --> 17:24:50,560
so let's see what is happening here so what we're telling expect in here is


14597
17:24:50,560 --> 17:24:54,480
saying that execute the logout function and


14598
17:24:54,480 --> 17:24:59,756
we're now testing the result of that function against something called a


14599
17:24:59,756 --> 17:25:05,116
matcher and matcher is because you see in here you can't say that this result


14600
17:25:05,116 --> 17:25:08,880
should be an exception because what are you going to do are you going to create


14601
17:25:08,880 --> 17:25:11,840
a an instance of that exception that's not


14602
17:25:11,840 --> 17:25:15,436
that's not a good way of testing your functionality in here you're saying


14603
17:25:15,436 --> 17:25:19,756
you're matching the result of calling the logout function it gains that


14604
17:25:19,756 --> 17:25:25,840
expected type as you can see type matcher is if you go into it you can see


14605
17:25:25,840 --> 17:25:31,276
is a matcher okay so that's how you would expect a


14606
17:25:31,276 --> 17:25:36,520
function to throw an exception all right


14607
17:25:37,756 --> 17:25:42,000
all right a lot of information um now what we need to do after testing


14608
17:25:42,000 --> 17:25:45,840
that functionality we just need to make sure that we can actually initialize our


14609
17:25:45,840 --> 17:25:49,116
mock provider i'm going to bring the code a little bit


14610
17:25:49,116 --> 17:25:52,480
up here so you can see it better


14611
17:25:52,636 --> 17:25:54,720
so now let's


14612
17:25:54,720 --> 17:25:58,796
go in here and say test and let me see it should be able to be initialized


14613
17:25:58,796 --> 17:26:02,080
should be able to be initialized


14614
17:26:02,080 --> 17:26:06,480
and create an empty function in here then what we're going to do is just to


14615
17:26:06,480 --> 17:26:11,436
say await provider dot initialize like this


14616
17:26:11,436 --> 17:26:14,956
and remember just like everywhere in your dart code you can make your


14617
17:26:14,956 --> 17:26:19,200
functions asynchronous just by putting async right before the curly bracket so


14618
17:26:19,200 --> 17:26:22,400
it's not a part of the signature of the function it's just telling dart that


14619
17:26:22,400 --> 17:26:26,636
inside this function i'm going to execute some code asynchronously okay


14620
17:26:26,636 --> 17:26:30,956
so upon initializing we then after initialize if you look at the code that


14621
17:26:30,956 --> 17:26:35,040
we did for initialize it just does a uh


14622
17:26:35,040 --> 17:26:39,040
and a weight of one second and then it sets the flag of is initialized to true


14623
17:26:39,040 --> 17:26:44,240
and we can read that flag by reading this boolean getter so let's say away


14624
17:26:44,240 --> 17:26:48,000
provider initialize and then we're going to say expect


14625
17:26:48,000 --> 17:26:52,000
the provider is initialized flag to be true after this


14626
17:26:52,000 --> 17:26:56,956
all right so that one was an easy one


14627
17:26:57,916 --> 17:27:02,560
so after we've done all of this you see is initialized and doing initialization


14628
17:27:02,560 --> 17:27:06,160
is not actually going to create a user for us so let's make sure upon


14629
17:27:06,160 --> 17:27:10,956
initializing our provider that the user is no so let's just say test


14630
17:27:10,956 --> 17:27:15,436
user should be null after initialization okay


14631
17:27:15,436 --> 17:27:20,000
empty function and then let's just expect the user the


14632
17:27:20,000 --> 17:27:22,796
current user to be known so let's say expect


14633
17:27:22,796 --> 17:27:27,276
a provider current user that it should be known all right so


14634
17:27:27,276 --> 17:27:32,080
easy to read and it's almost like reading english so


14635
17:27:32,080 --> 17:27:35,200
so that's it


14636
17:27:35,680 --> 17:27:39,436
all right now what we're going to do is doing some asynchronous testing i want


14637
17:27:39,436 --> 17:27:43,040
you to see this as well because it's very important now let's say that you're


14638
17:27:43,040 --> 17:27:47,116
we want to test as the caption is telling you testing the time required to


14639
17:27:47,116 --> 17:27:50,636
initialize we can test timeouts in this case so


14640
17:27:50,636 --> 17:27:57,680
what we're going to do is look at our initialization code here and let's see


14641
17:27:57,680 --> 17:28:02,160
the initialize function here at the moment is waiting one second what


14642
17:28:02,160 --> 17:28:06,320
we're going to do in our test just for the sake of using how you can test


14643
17:28:06,320 --> 17:28:10,796
timeouts and how you you can test for instance api calls in the future we're


14644
17:28:10,796 --> 17:28:15,276
going to do some asynchronous testing in here with a timeout saying that our test


14645
17:28:15,276 --> 17:28:19,360
should fail if initialize on our provider takes more


14646
17:28:19,360 --> 17:28:25,916
than x amount of seconds all right so now let's go in here and say test um


14647
17:28:25,916 --> 17:28:29,840
should be able to initialize


14648
17:28:29,840 --> 17:28:34,320
in less than two seconds okay and an empty function which is


14649
17:28:34,320 --> 17:28:39,756
asynchronous just like that empty body for now


14650
17:28:39,756 --> 17:28:45,200
and what we're going to do in here is to say await


14651
17:28:45,200 --> 17:28:49,596
on the provider's initialization okay


14652
17:28:49,596 --> 17:28:53,596
and after initialization we're also going to expect the is initialize flag


14653
17:28:53,596 --> 17:28:57,840
to be true just like that however we're going to


14654
17:28:57,840 --> 17:29:01,680
use a new parameter of our test called timeout


14655
17:29:01,680 --> 17:29:06,796
now timeout will provide a constant timeout to it


14656
17:29:06,796 --> 17:29:11,200
with a duration so duration and in this case we're just


14657
17:29:11,200 --> 17:29:13,916
going to say two seconds and i think we have one extra parameter in here


14658
17:29:13,916 --> 17:29:18,880
constitution timeout argument zero expected what one found


14659
17:29:18,880 --> 17:29:25,596
cons time and then here seconds and avoid cons here okay so this is very


14660
17:29:25,596 --> 17:29:29,436
simple simply said we're saying that we're created a test that calls the


14661
17:29:29,436 --> 17:29:35,040
initialize function on our provider and just ensures that that function returns


14662
17:29:35,040 --> 17:29:40,480
to the test context before the timeout has passed so internally this test


14663
17:29:40,480 --> 17:29:45,276
function which you provided timeout to is going to create a little timer and


14664
17:29:45,276 --> 17:29:49,200
then it's going to set the timer to start with as soon as it calls the


14665
17:29:49,200 --> 17:29:52,080
function this function in here let me show you


14666
17:29:52,080 --> 17:29:55,916
here this as that is


14667
17:29:55,916 --> 17:30:01,040
progressing and doing its work it's going to terminate its result processing


14668
17:30:01,040 --> 17:30:06,080
as soon as the timeout basically passes so in this case our initialize function


14669
17:30:06,080 --> 17:30:10,880
is going to take one second to process this work if it can't do that during


14670
17:30:10,880 --> 17:30:16,720
these two seconds of timeout that test is going to fail okay so now you know


14671
17:30:16,720 --> 17:30:19,840
how to test that as well


14672
17:30:19,916 --> 17:30:24,956
so let's go in here and now test the medius part of our


14673
17:30:24,956 --> 17:30:30,080
provider which is creating a user as you can see we have to test make sure that


14674
17:30:30,080 --> 17:30:34,560
creating a user actually delegates to our login function and we have to test


14675
17:30:34,560 --> 17:30:37,756
all the edge cases all right


14676
17:30:38,160 --> 17:30:42,840
so let's go ahead and do that let's then say we test


14677
17:30:42,840 --> 17:30:49,276
uh create user should delegate um delegate


14678
17:30:49,276 --> 17:30:53,436
to login function and in here we're gonna create


14679
17:30:53,436 --> 17:30:57,040
a function which is an asynchronous function all


14680
17:30:57,040 --> 17:31:00,240
and what right need to do is to create this


14681
17:31:00,240 --> 17:31:03,436
basically if you remember create user doesn't have internal logic of its own


14682
17:31:03,436 --> 17:31:06,880
it's just going to call login but login has this beautiful logic that first test


14683
17:31:06,880 --> 17:31:09,880
fooadbar.com


14684
17:31:09,916 --> 17:31:14,320
with any password should throw this error user not found off exception so


14685
17:31:14,320 --> 17:31:17,916
let's just test that scenario okay let's go in here


14686
17:31:17,916 --> 17:31:25,360
and say final bad email user is provider create


14687
17:31:25,360 --> 17:31:27,596
uh


14688
17:31:27,680 --> 17:31:31,840
writer oh don't we have our provider


14689
17:31:32,796 --> 17:31:38,160
oh i've added this test i apologize i've added this test i believe at the end of


14690
17:31:38,160 --> 17:31:42,160
this entire test group i should have added it here so if you've made the same


14691
17:31:42,160 --> 17:31:46,000
mistake i apologize for that it's my fault you should fix that and make make


14692
17:31:46,000 --> 17:31:50,796
sure that your test is in the same group where it has access to the provider so


14693
17:31:50,796 --> 17:31:56,000
then i'm going to say provider and so final bad email user is


14694
17:31:56,000 --> 17:32:01,596
uh provider creates user the email is fooatbar.com


14695
17:32:01,596 --> 17:32:04,796
and password could just be any password okay


14696
17:32:04,796 --> 17:32:10,000
comma semicolon make sure dart formatter formats your code properly so then what


14697
17:32:10,000 --> 17:32:14,480
we need to make sure is when the bad user is


14698
17:32:14,480 --> 17:32:19,276
basically returned to us then it should actually contain a user not found off


14699
17:32:19,276 --> 17:32:23,276
exception so let's go ahead and say expect


14700
17:32:23,276 --> 17:32:29,276
a bad email user to actually be of


14701
17:32:29,276 --> 17:32:32,320
to throw a const


14702
17:32:32,320 --> 17:32:36,080
type matcher of


14703
17:32:36,080 --> 17:32:41,756
that user not found off exception like this


14704
17:32:42,400 --> 17:32:45,436
okay let's see and i


14705
17:32:45,436 --> 17:32:50,000
have to close that here as well so we're basically saying calling the


14706
17:32:50,000 --> 17:32:55,360
bad email user the creation of a user with that specific email should throw a


14707
17:32:55,360 --> 17:32:58,956
user not found off exception and remember you may think oh we've tested


14708
17:32:58,956 --> 17:33:02,320
this before yet but that was in the context of


14709
17:33:02,320 --> 17:33:06,636
here let's see actually no we haven't tested that


14710
17:33:06,636 --> 17:33:09,596
before it's it's this thing that we've tested so sorry about that so we've


14711
17:33:09,596 --> 17:33:12,796
tested a lot yeah we haven't tested this particular case so


14712
17:33:12,796 --> 17:33:16,080
all right so now we've tested that now let's test


14713
17:33:16,080 --> 17:33:20,320
this scenario with a bad password a password of fubar you see we have that


14714
17:33:20,320 --> 17:33:24,796
logic in our mock provider here for the login function let's test this scenario


14715
17:33:24,796 --> 17:33:29,840
now let's test this code we should throw the wrong password off exception okay so


14716
17:33:29,840 --> 17:33:34,400
let's go in here and say final


14717
17:33:34,400 --> 17:33:40,560
i can see that you can't see the code so bad password user is provider and create


14718
17:33:40,560 --> 17:33:45,916
user with the email of let's just say someone at bar.com and the password is


14719
17:33:45,916 --> 17:33:50,000
fubar and that's the password we didn't like remember that okay


14720
17:33:50,000 --> 17:33:53,916
now we copy the code from here and then we say


14721
17:33:53,916 --> 17:34:00,560
that that password user should throw an exception called wrong password


14722
17:34:00,560 --> 17:34:06,480
off exception okay so we've tested that scenario as well


14723
17:34:06,480 --> 17:34:12,240
now we actually should test the um the positive scenario so let's go ahead


14724
17:34:12,240 --> 17:34:18,956
and say final user is awaits provider and we say create user


14725
17:34:18,956 --> 17:34:23,040
all right an email is going to be


14726
17:34:23,040 --> 17:34:27,520
foo and the password is going to be bar remember our our mock auth provider is


14727
17:34:27,520 --> 17:34:32,560
not actually testing whether an email is correct email or not


14728
17:34:32,560 --> 17:34:36,956
firebase is doing that but a mock provider isn't doing that so


14729
17:34:36,956 --> 17:34:41,276
we could just provide any email foo and password a bar and it will just


14730
17:34:41,276 --> 17:34:45,276
accept it as long as it's not it the password isn't foobar and as long


14731
17:34:45,276 --> 17:34:52,956
as the email is not footbar.com okay all right now let's let's make sure that


14732
17:34:52,956 --> 17:34:59,040
this user is then being assigned to the current user of our auth provider okay


14733
17:34:59,040 --> 17:35:04,560
so let's expect the auth provider offer sorry the provider's current user


14734
17:35:04,560 --> 17:35:09,596
to actually be equal to this user okay because um


14735
17:35:09,596 --> 17:35:13,520
that's what we did in our create user remember we create user delegates this


14736
17:35:13,520 --> 17:35:17,596
work to the login and then login internally sets the current user to that


14737
17:35:17,596 --> 17:35:21,916
user they just created okay so that's the scenario now we're testing with this


14738
17:35:21,916 --> 17:35:27,520
line of code here all right so that's that


14739
17:35:27,520 --> 17:35:30,636
um so what we need to do then is just to


14740
17:35:30,636 --> 17:35:33,596
make sure by just creating a user which we're


14741
17:35:33,596 --> 17:35:38,560
doing here that the is email verified functionality sorry that is email


14742
17:35:38,560 --> 17:35:45,436
verified um parameter of our auth user is set to false by default remember


14743
17:35:45,436 --> 17:35:49,680
login function here is set is email verified false let's


14744
17:35:49,680 --> 17:35:54,080
test that functionality okay so we just say expect


14745
17:35:54,080 --> 17:35:58,320
users we use email verified to be false


14746
17:35:58,320 --> 17:36:02,160
right wow that was a lot of


14747
17:36:02,160 --> 17:36:06,400
code to be honest with you and i hope that you got everything that i mentioned


14748
17:36:06,400 --> 17:36:10,560
here so now that we've done that let's test


14749
17:36:10,560 --> 17:36:14,956
the email verification functionality uh and let's have a look at what we


14750
17:36:14,956 --> 17:36:19,436
actually did in email verification you see we have this functionality not


14751
17:36:19,436 --> 17:36:22,320
initialized then we take the current user if the


14752
17:36:22,320 --> 17:36:26,720
current user is null then we say user not found exception and then we create a


14753
17:36:26,720 --> 17:36:32,000
new user with is email verified to true and we're then setting that user as the


14754
17:36:32,000 --> 17:36:38,160
current user so that's what the send email verification code is doing okay


14755
17:36:38,160 --> 17:36:40,400
now you see when


14756
17:36:40,400 --> 17:36:43,436
when flutter then runs our code it's going to run them sequentially so it's


14757
17:36:43,436 --> 17:36:47,200
just going to go from top to bottom and then you remember


14758
17:36:47,200 --> 17:36:51,276
before we test the email verification we're actually testing create user which


14759
17:36:51,276 --> 17:36:56,240
in turn calls the login function so since we're keeping a hold of our


14760
17:36:56,240 --> 17:36:59,680
provider this create user calling login function


14761
17:36:59,680 --> 17:37:05,040
ensures that the current user actually sets and is not email verified so we can


14762
17:37:05,040 --> 17:37:08,000
count on that okay so let's say


14763
17:37:08,000 --> 17:37:13,040
that we test and we say login user should be able to


14764
17:37:13,040 --> 17:37:19,200
get verified uh logged in user should be be able


14765
17:37:19,200 --> 17:37:23,200
to get verified okay and then an empty function in here


14766
17:37:23,200 --> 17:37:28,480
um like that so in here we then say provider send


14767
17:37:28,480 --> 17:37:33,200
email verification okay and with the final user is providers


14768
17:37:33,200 --> 17:37:36,080
user uh


14769
17:37:36,560 --> 17:37:39,916
current user like that


14770
17:37:39,916 --> 17:37:45,916
and we now make sure that the current user is not null so we say expect user


14771
17:37:45,916 --> 17:37:52,240
is not uh or yeah expect the user is not null which


14772
17:37:52,240 --> 17:37:55,756
as you can see is a great matcher that you can match something against it so


14773
17:37:55,756 --> 17:38:00,720
you say shouldn't be no okay like that all right


14774
17:38:00,720 --> 17:38:05,596
and then we also we need to make sure that this user's uh verification is set


14775
17:38:05,596 --> 17:38:08,796
so it's email verified should be true then we say expect and we'll get an


14776
17:38:08,796 --> 17:38:14,080
error now you'll see user is email verified it should be true


14777
17:38:14,080 --> 17:38:16,880
okay and you can see you get an error here saying that a user is optional but


14778
17:38:16,880 --> 17:38:19,916
we're gonna and do an asterisk here saying that


14779
17:38:19,916 --> 17:38:24,000
force force on rapid for us okay


14780
17:38:25,520 --> 17:38:30,320
now what we should do as the last test we as the caption says test logging out


14781
17:38:30,320 --> 17:38:33,360
and logging in and this is normal scenario that should just work let's


14782
17:38:33,360 --> 17:38:37,360
create a test for it so let's just say test


14783
17:38:37,360 --> 17:38:41,276
and we're going to call it should be able to log out and log in again should


14784
17:38:41,276 --> 17:38:47,276
be able to log out and log in and again okay


14785
17:38:47,276 --> 17:38:51,596
and an async function so and a semicolon at the end


14786
17:38:51,596 --> 17:38:55,276
so what we're going to do here then is just to say


14787
17:38:55,276 --> 17:38:59,040
log out and log in and then we get the current user and we just make sure that


14788
17:38:59,040 --> 17:39:04,240
you're not null so let's say a wait on the provider


14789
17:39:04,240 --> 17:39:08,636
to log out and we say await on the provider to log


14790
17:39:08,636 --> 17:39:14,240
in with an email of just user and password


14791
17:39:14,240 --> 17:39:19,840
just like that okay so or just email because we're not actually validating


14792
17:39:19,840 --> 17:39:25,436
the email and password in our auth provider in our mock author provider


14793
17:39:25,436 --> 17:39:30,160
and then we're going to get the current user so we say final user is provider


14794
17:39:30,160 --> 17:39:34,160
current user and we just make sure that that user is not known so let's just say


14795
17:39:34,160 --> 17:39:42,000
expect the user is not null which is a method built into


14796
17:39:42,000 --> 17:39:46,880
flutter tests all right that was a lot of work and i'm


14797
17:39:46,880 --> 17:39:51,116
proud of you for sticking with this chapter


14798
17:39:51,116 --> 17:39:55,596
we talked a lot about tests there's so much that you need to go through so much


14799
17:39:55,596 --> 17:39:58,720
material and you need to learn on your own as well about different types of


14800
17:39:58,720 --> 17:40:03,040
matters and different flavors of expect and talking about expect i kind of


14801
17:40:03,040 --> 17:40:06,796
expect you to go and read these things also on your own


14802
17:40:06,796 --> 17:40:10,000
and learn about them in your own time as well


14803
17:40:10,000 --> 17:40:15,756
now the exciting part we need to run our tests so let me change the screen layout


14804
17:40:15,756 --> 17:40:19,520
and let's go in our terminal here


14805
17:40:19,520 --> 17:40:23,200
and let's increase the size and


14806
17:40:23,200 --> 17:40:27,360
let's then uh break this and as you can see you can


14807
17:40:27,360 --> 17:40:32,320
tell flutter to run your test by saying flutter test and providing that path to


14808
17:40:32,320 --> 17:40:37,360
your test so now flutter is going to go ahead and issue and go through those


14809
17:40:37,360 --> 17:40:40,480
tests one by one


14810
17:40:41,040 --> 17:40:44,796
and let's see what we get as the result


14811
17:40:45,360 --> 17:40:50,000
and you can see it's giving like time for all of these tests and it says all


14812
17:40:50,000 --> 17:40:54,956
tests passed now i just want to highlight this before we go on we did a


14813
17:40:54,956 --> 17:41:00,080
lot of tests i've prepared these tests manually so to make sure that they


14814
17:41:00,080 --> 17:41:04,400
actually testing important functionality inside our auth provider however i've


14815
17:41:04,400 --> 17:41:07,680
written the tests very carefully to make sure


14816
17:41:07,680 --> 17:41:12,000
that they work this is not the case when you're doing


14817
17:41:12,000 --> 17:41:16,880
things in real life your tests should fail if you've done things right your


14818
17:41:16,880 --> 17:41:22,240
tests should fail to begin with and you then need to go and write your and fix


14819
17:41:22,240 --> 17:41:26,720
your logic if you're doing things even more right you should write your tests


14820
17:41:26,720 --> 17:41:31,520
first nothing is going to work then you should go and write your logic to fit


14821
17:41:31,520 --> 17:41:35,916
those tests and expectations so just because these tests are passing right


14822
17:41:35,916 --> 17:41:40,160
now i know we have joy inside we say oh everything's passing everything's great


14823
17:41:40,160 --> 17:41:45,436
but in reality that's not going to be the case usually okay


14824
17:41:45,436 --> 17:41:48,400
so a lot of work we did let's do as we


14825
17:41:48,400 --> 17:41:54,956
usually do keep the tradition and let's commit our work and and also tag it so


14826
17:41:54,956 --> 17:41:59,756
let's then say git status to see the status lots of things changed


14827
17:41:59,756 --> 17:42:04,160
hey hit add git status


14828
17:42:04,160 --> 17:42:07,756
all right we're going to commit this as step 10


14829
17:42:07,756 --> 17:42:13,680
and we're going to say in here get push it's going to push our commit to github


14830
17:42:13,680 --> 17:42:18,240
and then we get the tag as well as step 10


14831
17:42:18,240 --> 17:42:23,240
and push tax


14832
17:42:24,000 --> 17:42:28,636
traditions as it is tradition in this uh philosophy course we always talk about


14833
17:42:28,636 --> 17:42:31,680
what we're going to do in the next chapter before we wrap up the current


14834
17:42:31,680 --> 17:42:34,320
chapter so as you can see the cache has said let's get ready for the next


14835
17:42:34,320 --> 17:42:38,480
chapter we need a database to store user notes before you use or if we use


14836
17:42:38,480 --> 17:42:44,080
firebase for storage now you see we at the moment we're not


14837
17:42:44,080 --> 17:42:48,320
actually writing anything anywhere there are no nodes uh


14838
17:42:48,320 --> 17:42:52,400
the user can't even create new nodes so but what if we wanted to give the


14839
17:42:52,400 --> 17:42:55,680
ability for the user to create new nodes and then delete those nodes and update


14840
17:42:55,680 --> 17:43:00,796
those nodes and uh to begin with uh we're going to store


14841
17:43:00,796 --> 17:43:05,040
these nodes in a local database inside the application so you will learn in the


14842
17:43:05,040 --> 17:43:08,636
next chapter about sqlite


14843
17:43:08,636 --> 17:43:12,956
and local databases and how to use them with firebase


14844
17:43:12,956 --> 17:43:18,480
sorry and how to use them in flutter in the latest chapters


14845
17:43:18,480 --> 17:43:22,636
in the later chapters we will change that logic so we'll be won't use sql


14846
17:43:22,636 --> 17:43:26,880
lite uh but i believe for any developer uh


14847
17:43:26,880 --> 17:43:30,480
if you're like a i can't say any developer but if you're


14848
17:43:30,480 --> 17:43:33,436
a front-end developer or a back-end developer you should be comfortable with


14849
17:43:33,436 --> 17:43:36,480
databases and that's exactly what we're going to do


14850
17:43:36,480 --> 17:43:40,480
in the next chapter so grab some refreshments and i'll see you in the


14851
17:43:40,480 --> 17:43:44,796
next chapter hello and welcome to chapter 27 of this


14852
17:43:44,796 --> 17:43:48,000
flasa course in the previous chapters we've been


14853
17:43:48,000 --> 17:43:51,840
talking about our user interface and also we've been


14854
17:43:51,840 --> 17:43:56,240
looking at our um services and


14855
17:43:56,240 --> 17:44:00,480
we've put some time also to create some um


14856
17:44:00,480 --> 17:44:04,956
tests for our services and providers up until this up until this point we've


14857
17:44:04,956 --> 17:44:08,560
been talking quite a lot about like the logic of going from one screen to the


14858
17:44:08,560 --> 17:44:13,680
other uh integrating with firebase etc however we haven't actually talked about


14859
17:44:13,680 --> 17:44:18,400
storing um user created content inside our application or inside some


14860
17:44:18,400 --> 17:44:22,240
sort of cloud service what we're going to do in this chapter


14861
17:44:22,240 --> 17:44:27,756
is we're going to talk about sql lite and storing user generated content in


14862
17:44:27,756 --> 17:44:33,840
this case the user generated nodes inside sqlite now


14863
17:44:33,840 --> 17:44:37,360
i'm gonna get to what sqlite is but first of all let's have a look at the


14864
17:44:37,360 --> 17:44:41,436
title of this chapter which as you can see it says crotlocal storage for


14865
17:44:41,436 --> 17:44:44,320
those of you who are software developers from before and are comfortable with


14866
17:44:44,320 --> 17:44:48,480
crowd you can just jump over this part of the chapter for those who are


14867
17:44:48,480 --> 17:44:53,360
not familiar with crowdcrot stands for create read update and delete these are


14868
17:44:53,360 --> 17:44:58,560
four very fundamental operations that any developer would perform on their


14869
17:44:58,560 --> 17:45:04,320
data and for instance if you're a flask or a django developer node express um


14870
17:45:04,320 --> 17:45:08,880
developer you're you're probably already familiar with these because


14871
17:45:08,880 --> 17:45:13,840
you're probably using some sort of a database mysql or sqlite


14872
17:45:13,840 --> 17:45:17,200
um and you're storing your data in there and you're just working with the data


14873
17:45:17,200 --> 17:45:21,116
and you're familiar with the term crop but if you're not familiar with it then


14874
17:45:21,116 --> 17:45:25,360
think of it as c which is create is you creating


14875
17:45:25,360 --> 17:45:30,560
some sort of a an object inside a database some such as for instance a


14876
17:45:30,560 --> 17:45:35,276
user generated note you read of course want to be able to


14877
17:45:35,276 --> 17:45:38,636
read that data back for instance in our application's main user interface you


14878
17:45:38,636 --> 17:45:41,840
may want to read the entire contents of the database


14879
17:45:41,840 --> 17:45:45,520
not the entire contents but at least in user generated notes for that specific


14880
17:45:45,520 --> 17:45:50,080
user so that's the r in crowd then you have u which is for


14881
17:45:50,080 --> 17:45:54,956
which it stands for update um or it doesn't stand for update it means update


14882
17:45:54,956 --> 17:45:59,436
because u is the first letter of update so on update is for instance if i have


14883
17:45:59,436 --> 17:46:02,796
already generated a node inside this application i want to go and change the


14884
17:46:02,796 --> 17:46:06,160
contents of that node then that's the u in crod


14885
17:46:06,160 --> 17:46:11,840
and um last but not least you have d which is delete um and as its name


14886
17:46:11,840 --> 17:46:15,596
stands basically you you allow the user to be able to delete


14887
17:46:15,596 --> 17:46:20,400
their own generated content from the database so


14888
17:46:20,636 --> 17:46:24,080
what we're going to do in this course is to um


14889
17:46:24,080 --> 17:46:29,596
talk about sqlite that is a database or a c


14890
17:46:29,596 --> 17:46:33,756
library and a library created in c um


14891
17:46:33,756 --> 17:46:37,680
that allows us to see as a programmer language c that


14892
17:46:37,680 --> 17:46:42,560
allows us to store data inside a file now if you're if you're coming from like


14893
17:46:42,560 --> 17:46:46,880
the backend world if you're if you're programmed with inside with python in


14894
17:46:46,880 --> 17:46:50,320
django you're already familiar with this because sqlite is the default database


14895
17:46:50,320 --> 17:46:55,596
that will be provided to you in django and a flask as well i believe is using


14896
17:46:55,596 --> 17:46:59,276
sqlite by default which is very similar to


14897
17:46:59,276 --> 17:47:03,520
django but if you're not familiar with sqlite


14898
17:47:03,520 --> 17:47:07,756
is i've prepared a website here which i mean i haven't prepared the website i've


14899
17:47:07,756 --> 17:47:11,116
just opened the website so um


14900
17:47:11,116 --> 17:47:15,436
so you can see here i'll increase the size of the font here and you can see


14901
17:47:15,436 --> 17:47:19,276
sqlite is a c language library that implements a small fast self-contained


14902
17:47:19,276 --> 17:47:23,360
high reliable full-featured sql database engine sqlite is the most


14903
17:47:23,360 --> 17:47:29,200
used database engine in the world well just think of sqlite as the database


14904
17:47:29,200 --> 17:47:33,520
engine that we're going to use in our application and it's not something that


14905
17:47:33,520 --> 17:47:40,320
is built in inside um flutter we will have to use a so-called plug-in for it


14906
17:47:40,320 --> 17:47:44,080
um but that's also okay and i mean not many


14907
17:47:44,080 --> 17:47:49,200
languages have support for talking with a database and natively so


14908
17:47:49,200 --> 17:47:51,840
um but we'll get there we'll get to that


14909
17:47:51,840 --> 17:47:56,160
point okay now let's talk about how we're actually


14910
17:47:56,160 --> 17:48:00,240
going to integrate with sqlite and to start with so i'm assuming that you


14911
17:48:00,240 --> 17:48:04,480
don't you have never worked with sqlite before or you haven't worked with any


14912
17:48:04,480 --> 17:48:07,596
type of database before and you're trying to learn how to do that okay so


14913
17:48:07,596 --> 17:48:10,720
that's that's been my assumption from the beginning of this course so if


14914
17:48:10,720 --> 17:48:14,400
you're already seasoned developer you know exactly how school sql light works


14915
17:48:14,400 --> 17:48:18,160
you may want to jump over this section of this chapter and get to like more


14916
17:48:18,160 --> 17:48:22,080
juicy parts where we integrate actually with equal light inside the floater


14917
17:48:22,080 --> 17:48:25,756
application so let me close this um or maybe let's


14918
17:48:25,756 --> 17:48:29,360
just keep it open and what i'm going to talk about now is


14919
17:48:29,360 --> 17:48:34,720
um a program a free program called db browser for sql


14920
17:48:34,720 --> 17:48:40,400
lite you see sqlite allows you to i mean if you think of


14921
17:48:40,400 --> 17:48:44,240
sql lite has different components first you have your database which is just a


14922
17:48:44,240 --> 17:48:49,520
file that sits on a disk and then you will have the sqlite


14923
17:48:49,520 --> 17:48:54,880
engine that can read from this this file and write to this file so that's the


14924
17:48:54,880 --> 17:48:59,200
engine and then this engine should run somewhere so it's either going to run


14925
17:48:59,200 --> 17:49:03,360
inside an application such as the one i'm mentioning here a db browser for sql


14926
17:49:03,360 --> 17:49:08,320
light okay so sqlite's like baked into that application or you can also bring


14927
17:49:08,320 --> 17:49:12,080
sql light into your terminal so that you can actually talk with sql lite


14928
17:49:12,080 --> 17:49:15,840
databases from within your terminal or if you for instance have install


14929
17:49:15,840 --> 17:49:20,160
django on your computer then you can use django in order to integrate with sql


14930
17:49:20,160 --> 17:49:25,040
iso sqlite is the engine that talks to the sqlite files


14931
17:49:25,040 --> 17:49:30,400
uh which are your databases but then it this engine should run somewhere it's


14932
17:49:30,400 --> 17:49:35,040
not just an executable that like you say here take this file you now have to have


14933
17:49:35,040 --> 17:49:40,160
like some sort of a container where the sequel light engine basically resides


14934
17:49:40,160 --> 17:49:42,796
when we then talk about our flutter application we're going to bring this


14935
17:49:42,796 --> 17:49:47,596
engine into the flutter application so our app can talk with that database but


14936
17:49:47,596 --> 17:49:52,560
for now we're going to look at a program called db browser for lite db browser


14937
17:49:52,560 --> 17:49:56,720
for sql lite is a free and i believe it's an open source program let's search


14938
17:49:56,720 --> 17:49:59,436
for it i'm going to say


14939
17:49:59,436 --> 17:50:04,840
db browser for sqlite and we end up in this


14940
17:50:04,840 --> 17:50:09,200
website and um and as you can see the official home of the db browser for


14941
17:50:09,200 --> 17:50:12,720
sqlite and this is how the program kind of looks like


14942
17:50:12,720 --> 17:50:18,000
um i'm not sure if yeah i can see now it's actually available for windows mac


14943
17:50:18,000 --> 17:50:21,596
os and it would be amazing if it was available for linux as well


14944
17:50:21,596 --> 17:50:24,000
um yeah so


14945
17:50:24,000 --> 17:50:27,916
it seems to be available uh and you can actually use snap so


14946
17:50:27,916 --> 17:50:31,276
that's great so if you're on ubuntu like i am


14947
17:50:31,276 --> 17:50:33,916
not on this machine right now but if you're on ubuntu you can actually use


14948
17:50:33,916 --> 17:50:38,160
snapstore or even debian any type of operating system linux space operating


14949
17:50:38,160 --> 17:50:44,880
system that has snapstore so that is really good even on arch linux fantastic


14950
17:50:44,880 --> 17:50:49,916
all right on debian you used apt so that's fine but anyway so it's available


14951
17:50:49,916 --> 17:50:56,160
for windows linux and mac os so i need you to basically go to sqlite browser or


14952
17:50:56,160 --> 17:51:02,320
db browser as it's called db browser for sqlite if you go to the home page i need


14953
17:51:02,320 --> 17:51:05,840
to find this website and let me change the screen layout so


14954
17:51:05,840 --> 17:51:09,680
you see it better and i need you to download this program


14955
17:51:09,680 --> 17:51:14,080
okay i've already downloaded it on my computer so i'm going to close that


14956
17:51:14,080 --> 17:51:18,240
safari window and i'm going to bring you the db browser for sqlite as it looks


14957
17:51:18,240 --> 17:51:21,596
like on my computer the only thing i've changed on my


14958
17:51:21,596 --> 17:51:25,840
interface here is i've changed the font from 13 to 20


14959
17:51:25,840 --> 17:51:30,796
not because i don't like the number 13. it has nothing to do with that but it's


14960
17:51:30,796 --> 17:51:37,916
just i thought 20 is a little bit of a nicer font size for this course um


14961
17:51:37,916 --> 17:51:44,160
all right so what are we gonna do now so um let me then talk about


14962
17:51:44,160 --> 17:51:47,840
the structure of our database and how we're going to set it up


14963
17:51:47,840 --> 17:51:52,000
if you think about how we've created our user interface in that here's the user


14964
17:51:52,000 --> 17:51:58,000
interface if we go here you can see that we can register with different users so


14965
17:51:58,000 --> 17:52:02,720
then we have a user entity or a user table as we're going to call it


14966
17:52:02,720 --> 17:52:07,360
and then we also have we are going to allow


14967
17:52:07,360 --> 17:52:11,436
the creation of these users in our database so imagine that we will have


14968
17:52:11,436 --> 17:52:15,360
some sort of a table some sort of entity in our database that is dedicated to


14969
17:52:15,360 --> 17:52:19,436
users and users are probably just going to have


14970
17:52:19,436 --> 17:52:21,916
a what are they going to have they're


14971
17:52:21,916 --> 17:52:27,436
going to have an id and an email so as you remember when you create a


14972
17:52:27,436 --> 17:52:32,880
when you register a user with firebase you always get a user identifier so


14973
17:52:32,880 --> 17:52:38,160
we're gonna store that id plus the user's email in our database


14974
17:52:38,160 --> 17:52:41,840
okay so we're not gonna store the user's password that isn't that is an absolute


14975
17:52:41,840 --> 17:52:46,160
no-no okay so user id which comes from firebase and


14976
17:52:46,160 --> 17:52:50,636
the email address we're gonna store in our database


14977
17:52:50,636 --> 17:52:55,756
and also we are going to have another table and


14978
17:52:55,756 --> 17:53:00,796
another table in our database dedicated to notes so as a user when i log into


14979
17:53:00,796 --> 17:53:04,000
the application i should be able to create my own notes and these notes


14980
17:53:04,000 --> 17:53:09,520
should be kind of like bound to and like they should be glued to my user so if my


14981
17:53:09,520 --> 17:53:14,080
user is in the database i should be able to have notes and if my user is deleted


14982
17:53:14,080 --> 17:53:17,200
all those notes should kind of also be deleted from the database so it's kind


14983
17:53:17,200 --> 17:53:21,916
of like a cascade for those of you who are familiar with back-end development


14984
17:53:21,916 --> 17:53:25,200
so that is like the structure that we're


14985
17:53:25,200 --> 17:53:30,000
going to set up for our database so in our i can see in my notes that for


14986
17:53:30,000 --> 17:53:35,200
our notes table we are actually going to have a user id


14987
17:53:35,200 --> 17:53:39,756
integer in that table that like binds the


14988
17:53:39,756 --> 17:53:43,680
every node object to the user who created it but we'll get there so don't


14989
17:53:43,680 --> 17:53:47,276
worry about it so i'm going to get rid of this


14990
17:53:47,276 --> 17:53:50,880
here and put it there so we don't see it


14991
17:53:50,880 --> 17:53:55,360
now what we need to do is start testing so we want to create a database a simple


14992
17:53:55,360 --> 17:53:59,596
database and start creating some tables in there okay so what i need you to do


14993
17:53:59,596 --> 17:54:03,756
is just to press the new database and i'm going to save it on my desktop and


14994
17:54:03,756 --> 17:54:09,116
let's just call it testing okay and i'm going to press the


14995
17:54:09,116 --> 17:54:14,560
save button right there okay you can see now we created a


14996
17:54:14,560 --> 17:54:19,756
database and we have a table here it doesn't look so nice i mean it's not


14997
17:54:19,756 --> 17:54:23,040
rendered so fine because i've changed the font on my screen


14998
17:54:23,040 --> 17:54:26,796
but you i think you can you get the idea okay


14999
17:54:26,796 --> 17:54:30,720
so what we need to do is to as the caption says we need to create a table


15000
17:54:30,720 --> 17:54:36,320
called user okay so go in here at the table section here


15001
17:54:36,320 --> 17:54:39,116
and i'm improvising a little bit here because this is like something that i


15002
17:54:39,116 --> 17:54:42,956
plan to show you but i haven't actually prepared any notes for it so let's just


15003
17:54:42,956 --> 17:54:47,200
go ahead and create a table here called user and as you can see we're gonna be


15004
17:54:47,200 --> 17:54:50,720
able to have some um


15005
17:54:50,720 --> 17:54:55,360
fields in here what is called a field in here is pretty much just like a column


15006
17:54:55,360 --> 17:54:58,160
so by creating a field you're creating a


15007
17:54:58,160 --> 17:55:03,040
column okay and the great thing about db browser for sqlite is that you can see


15008
17:55:03,040 --> 17:55:06,636
the sql code that will be generated for you


15009
17:55:06,636 --> 17:55:10,796
which we're actually going to use later when we integrate sqlite into our


15010
17:55:10,796 --> 17:55:14,320
flutter application but for now i just want you to get the idea of how sqlite


15011
17:55:14,320 --> 17:55:17,680
works how it creates the tables et cetera okay


15012
17:55:17,680 --> 17:55:22,796
so now we have the user uh empty table it doesn't have any fields


15013
17:55:22,796 --> 17:55:27,116
or columns i need you to press this add button right here and what we're going


15014
17:55:27,116 --> 17:55:31,840
to do is we're going to just create um an id


15015
17:55:31,840 --> 17:55:34,796
field now if you're not a developer or


15016
17:55:34,796 --> 17:55:37,200
software engineer friend before you may not


15017
17:55:37,200 --> 17:55:41,276
know about id field and why it's important or if you're a developer from


15018
17:55:41,276 --> 17:55:44,400
before you may know id as primary key from before


15019
17:55:44,400 --> 17:55:48,480
so um an id is just usually an integer


15020
17:55:48,480 --> 17:55:54,080
identifier an integer is a number so a number identifier for every row that you


15021
17:55:54,080 --> 17:55:59,200
later later insert into your table so why is it important because


15022
17:55:59,200 --> 17:56:04,080
usually an id is something called a primary key and a primary key by default


15023
17:56:04,080 --> 17:56:06,320
is is


15024
17:56:06,320 --> 17:56:10,956
unique what that means is that for you to be able to create a user in this


15025
17:56:10,956 --> 17:56:15,116
table it has to have its unique identifier now


15026
17:56:15,116 --> 17:56:21,116
if you remember how our um how we are basically treating users in


15027
17:56:21,116 --> 17:56:24,480
our user interface is that we're treating them by their email so you may


15028
17:56:24,480 --> 17:56:28,560
think well the email is a unique thing as well so why don't we go with


15029
17:56:28,560 --> 17:56:33,200
uniqueness off the email well we can apply uniqueness constraints on the


15030
17:56:33,200 --> 17:56:39,200
email field and or the email column but it is very well established pattern in


15031
17:56:39,200 --> 17:56:42,880
database um world where you're working with


15032
17:56:42,880 --> 17:56:48,160
databases that you i mean you can make a string column


15033
17:56:48,160 --> 17:56:54,000
unique such as then such as an email but a primary key is usually an integer such


15034
17:56:54,000 --> 17:57:00,720
as pk or id so it's just a convention and it's also a good practice to not go


15035
17:57:00,720 --> 17:57:04,400
with like a uniqueness of a string because it


15036
17:57:04,400 --> 17:57:07,596
takes more resources in order to calculate the uniqueness of a string


15037
17:57:07,596 --> 17:57:14,080
than it takes for an integer so we're then going to call this field id


15038
17:57:14,080 --> 17:57:17,840
going to be integer and there are some fields in here which are not rendered so


15039
17:57:17,840 --> 17:57:20,480
well i'm going to increase the size of this and i'm going to do


15040
17:57:20,480 --> 17:57:24,160
like this okay


15041
17:57:24,160 --> 17:57:28,240
so what we're going to do in here um


15042
17:57:28,240 --> 17:57:32,080
we're going to take you see n n in here at the type we're going to leave as


15043
17:57:32,080 --> 17:57:38,160
integer that's fine n n means not null meaning that this field should always be


15044
17:57:38,160 --> 17:57:42,796
present it should never allow the value and emptiness of the value or the


15045
17:57:42,796 --> 17:57:46,796
absence of a value to be present there okay the absence of value to be present


15046
17:57:46,796 --> 17:57:50,400
i hope that makes sense basically just means that the value cannot not be


15047
17:57:50,400 --> 17:57:55,520
either so we're we're going to leave it like that pk stands for primary key and


15048
17:57:55,520 --> 17:57:59,040
that is what i oh actually i can move my mouse over them that's great primary key


15049
17:57:59,040 --> 17:58:03,596
so um it means that it is the key using which


15050
17:58:03,596 --> 17:58:09,116
is a unique key in this table using which we should be able to


15051
17:58:09,116 --> 17:58:14,720
then easily query different users from this table so what


15052
17:58:14,720 --> 17:58:18,160
we're going to do is we're going to take this item right here okay


15053
17:58:18,160 --> 17:58:22,080
ai is auto increment i believe and auto increment is a great functionality in


15054
17:58:22,080 --> 17:58:27,116
sqlite and many other uh databases that allows you as the as the name uh


15055
17:58:27,116 --> 17:58:31,436
suggests and as the name indicates that by you


15056
17:58:31,436 --> 17:58:36,880
creating for instance a user with a specific email and you insert that user


15057
17:58:36,880 --> 17:58:41,276
into the database in this table and you don't even have to assign an id


15058
17:58:41,276 --> 17:58:46,560
to that user you just say here is the user email boof put it in the database


15059
17:58:46,560 --> 17:58:50,880
then excuse me then sqlite is smart enough to


15060
17:58:50,880 --> 17:58:55,040
say oh i but i need an id field as well you haven't provided it and then it


15061
17:58:55,040 --> 17:58:59,360
looks at this field and says oh id is auto increment so it's going to create


15062
17:58:59,360 --> 17:59:04,080
that id for you and increment the previously generated id and assign the


15063
17:59:04,080 --> 17:59:10,240
new id to your object for instance if you have no objects inside this table


15064
17:59:10,240 --> 17:59:15,276
and then you add a new user then it automatically gets the id of zero


15065
17:59:15,276 --> 17:59:18,636
and then if you generate the next user and put it in there then it will get the


15066
17:59:18,636 --> 17:59:23,200
id of one so you get the idea okay and that is exactly what we're gonna do for


15067
17:59:23,200 --> 17:59:27,436
this particular field and unique is just yeah as its name


15068
17:59:27,436 --> 17:59:31,116
indicates this field needs to be unique but if you indicate something as primary


15069
17:59:31,116 --> 17:59:36,480
key implicitly it is a unique field okay and to be honest with you we could


15070
17:59:36,480 --> 17:59:39,840
actually check not null as well meaning that yeah it should always be there so


15071
17:59:39,840 --> 17:59:44,480
just in case so that's for the user field okay


15072
17:59:44,480 --> 17:59:48,956
sorry it's for the id field and now let's go ahead and create a new


15073
17:59:48,956 --> 17:59:53,680
field for the user's email like this and for the email you should


15074
17:59:53,680 --> 17:59:58,796
say that it is a text okay and what we'll do we'll say it shouldn't


15075
17:59:58,796 --> 18:00:06,080
be null and also the emails are unique so have a look at this now it generated


15076
18:00:06,080 --> 18:00:11,200
code for it that says create table user id integer not null email text not now


15077
18:00:11,200 --> 18:00:17,520
unique and it sets a primary key of id with an auto auto increment so


15078
18:00:17,520 --> 18:00:22,880
this is kind of like the code that we're actually going to use in our flutter


15079
18:00:22,880 --> 18:00:27,116
application in order to programmatically create this table


15080
18:00:27,116 --> 18:00:31,040
later but for now just keep it in mind this is kind of like the syntax of


15081
18:00:31,040 --> 18:00:37,360
creating a sqlite table programmatically okay


15082
18:00:37,360 --> 18:00:40,080
all right so then you can press ok in here


15083
18:00:40,080 --> 18:00:43,436
and now you can see the user table has been created for you and here's the code


15084
18:00:43,436 --> 18:00:47,596
for it or the schema as it says right there


15085
18:00:48,480 --> 18:00:52,560
all right great stuff now as we did the user table


15086
18:00:52,560 --> 18:00:57,040
we need to go and create our notes table because remember from before i said


15087
18:00:57,040 --> 18:00:59,680
we're going to allow the user to create notes when they're logged into the


15088
18:00:59,680 --> 18:01:02,880
application and by the time they're actually logged into the application we


15089
18:01:02,880 --> 18:01:07,436
should have already created a user uh row for them


15090
18:01:07,436 --> 18:01:12,400
in the user table and then by creation of every note we're


15091
18:01:12,400 --> 18:01:16,480
going to create also a new note in the database in our note table which we're


15092
18:01:16,480 --> 18:01:18,796
just going to create as the caption indicates


15093
18:01:18,796 --> 18:01:24,000
and then we're going to bind that note to that user in the database so


15094
18:01:24,000 --> 18:01:27,840
i need you to go here then and then we need to create a new table by pressing


15095
18:01:27,840 --> 18:01:31,840
create table button okay so as the caption in the case here let's


15096
18:01:31,840 --> 18:01:36,480
call this new table note and we're then gonna start by creating a


15097
18:01:36,480 --> 18:01:40,000
new field called id and we've already gone through this you know exactly what


15098
18:01:40,000 --> 18:01:44,796
to do in here an id field as integer and we say it shouldn't be in it shouldn't


15099
18:01:44,796 --> 18:01:48,880
be null it should be primary key


15100
18:01:48,880 --> 18:01:51,200
and


15101
18:01:51,596 --> 18:01:55,276
and i think that's it to be honest with you so not null and


15102
18:01:55,276 --> 18:02:00,160
auto increment as well of course so all right so that's for that's for the


15103
18:02:00,160 --> 18:02:05,200
id of a note now what other fields do we need in here so


15104
18:02:05,200 --> 18:02:10,480
what we could say is for instance that you have a a user id and so you want to


15105
18:02:10,480 --> 18:02:16,080
bind a user to a node and what we're gonna do in here we're


15106
18:02:16,080 --> 18:02:20,880
gonna bind this we're gonna say literally that this oops where did it go


15107
18:02:20,880 --> 18:02:25,116
oh it's a little bit strange interfacing here so that's okay too


15108
18:02:25,116 --> 18:02:31,520
um so user id integer and we're going to say it's not null


15109
18:02:31,520 --> 18:02:36,160
and also what we're going to do is to what we want to do is for this user id


15110
18:02:36,160 --> 18:02:42,880
to be kind of like bound to a user tables id field and that's that's


15111
18:02:42,880 --> 18:02:47,200
called a foreign key so you have a primary key


15112
18:02:47,200 --> 18:02:51,756
which is the key that your table itself manages as its own field and then you'll


15113
18:02:51,756 --> 18:02:56,796
have a foreign key as its name indicates that it is it is a field inside your


15114
18:02:56,796 --> 18:03:01,756
table that is bound to another tables something else column so in this case


15115
18:03:01,756 --> 18:03:06,160
our user id should be bound to the user tables id column and you can create that


15116
18:03:06,160 --> 18:03:10,080
with db browser for sqlite inside constraints


15117
18:03:10,080 --> 18:03:14,080
and in here let's see we add a constraint and we say we have a


15118
18:03:14,080 --> 18:03:16,880
foreign key and in here


15119
18:03:16,880 --> 18:03:20,956
so let's say sqlite foreign key


15120
18:03:20,956 --> 18:03:26,240
and we say the user id and we say apply


15121
18:03:26,240 --> 18:03:30,240
and you can see now it says foreign keys or id references it's not at the moment


15122
18:03:30,240 --> 18:03:32,720
referencing anything so


15123
18:03:32,720 --> 18:03:38,320
i wonder if that field is hidden somewhere to the right


15124
18:03:38,320 --> 18:03:40,880
hand side


15125
18:03:41,520 --> 18:03:47,436
and how we could possibly create that let's see i just remember from before


15126
18:03:47,436 --> 18:03:51,520
that this was a little bit strange to get working from the beginning so


15127
18:03:51,520 --> 18:03:56,160
name oh maybe it's it's the name right there so


15128
18:03:56,160 --> 18:04:01,436
so let's say user id references sqlite foreign key let's see how it's


15129
18:04:01,436 --> 18:04:04,720
created foreign key user id references


15130
18:04:04,720 --> 18:04:10,000
let's just say name should we say um in here if i say blob


15131
18:04:10,000 --> 18:04:13,200
what happens foreign keys ready references


15132
18:04:13,200 --> 18:04:17,436
contains blah so that's not that's not really what i


15133
18:04:17,436 --> 18:04:20,956
wanted in there so i'm going to remove this plot that i just created and let's


15134
18:04:20,956 --> 18:04:26,796
see if we can change the sequel we can't are there no other fields available here


15135
18:04:26,796 --> 18:04:30,720
that we can play with perhaps not


15136
18:04:30,720 --> 18:04:34,796
and i want to remove this just to see if i've made any mistakes in there so


15137
18:04:34,796 --> 18:04:38,320
let's say so here i can see we have a user id and


15138
18:04:38,320 --> 18:04:43,276
then there is a foreign key and i can see here this is perhaps the right


15139
18:04:43,276 --> 18:04:46,636
actual way of doing i remember there was something really strange about it and


15140
18:04:46,636 --> 18:04:53,116
now i remember that it is hidden under this foreign key um column unfortunately


15141
18:04:53,116 --> 18:04:57,360
i believe it's a little bit of a strange interface that's okay i'm just still


15142
18:04:57,360 --> 18:05:02,480
very very grateful that we have db browser for sqlite as a free software


15143
18:05:02,480 --> 18:05:06,720
and perhaps even an open source software i'm not sure about that and i'm very


15144
18:05:06,720 --> 18:05:09,520
grateful for every developer who's worked on this so


15145
18:05:09,520 --> 18:05:13,360
i just hope that it um that's understood but what we're going


15146
18:05:13,360 --> 18:05:17,360
to do here in here we want to bind this user id to the id field of the user


15147
18:05:17,360 --> 18:05:21,840
table so just click here under foreign key and double click actually i can see


15148
18:05:21,840 --> 18:05:27,360
then this magic thing appears here so let's go ahead and say that we want


15149
18:05:27,360 --> 18:05:32,796
to bind this to the user table id field and


15150
18:05:32,796 --> 18:05:38,000
i believe that should be it yeah and you can see now the code generated here says


15151
18:05:38,000 --> 18:05:44,320
we have a foreign key called user id and it references the user table id field


15152
18:05:44,320 --> 18:05:49,436
okay perfect um now we also need to do is to


15153
18:05:49,436 --> 18:05:54,160
create another field in here and that's the text of every note


15154
18:05:54,160 --> 18:05:58,480
so what we're going to do for notes is going to be very simple our notes are


15155
18:05:58,480 --> 18:06:01,916
not going to include any sort of um


15156
18:06:01,916 --> 18:06:06,000
they're not going to include any sort of for instance um


15157
18:06:06,000 --> 18:06:10,400
images they're not going to include any sort of


15158
18:06:10,956 --> 18:06:15,116
ordered list or unordered list they're going to be simple texts okay and they


15159
18:06:15,116 --> 18:06:19,040
don't even have titles the title of a note we're going to derive from the text


15160
18:06:19,040 --> 18:06:21,840
of the notes so it's very simple


15161
18:06:21,840 --> 18:06:26,560
so for the text of the note let's just go say it is of type text


15162
18:06:26,560 --> 18:06:31,116
and uh i believe i believe that's all we need


15163
18:06:31,116 --> 18:06:36,160
right now so user id text and yeah that's fine and


15164
18:06:36,160 --> 18:06:40,796
also to be honest with you if you want to you could also create a other fields


15165
18:06:40,796 --> 18:06:45,360
in here you see in this uh in this course what i what i want to do in the


15166
18:06:45,360 --> 18:06:50,636
beginning is to allow us to create a local database that you can store all


15167
18:06:50,636 --> 18:06:54,400
the users notes in it but i want you to also be able to


15168
18:06:54,400 --> 18:06:57,596
later in the future get rid of this local database and replace it with


15169
18:06:57,596 --> 18:07:02,720
firebase that's like the goal um however some of you may actually decide to keep


15170
18:07:02,720 --> 18:07:07,436
this local database store the user's information in this local database and


15171
18:07:07,436 --> 18:07:11,116
not the user's information the user's notes in this database and then you may


15172
18:07:11,116 --> 18:07:15,436
want to decide to have some sort of a um utility service that sits in the


15173
18:07:15,436 --> 18:07:20,080
background and syncs these notes with firebase at appropriate time so


15174
18:07:20,080 --> 18:07:22,956
that's up to you if you want to do that then you may want to actually create a


15175
18:07:22,956 --> 18:07:27,596
little fill in here that's called is synced with server or something like


15176
18:07:27,596 --> 18:07:32,240
this okay or it's synced with cloud i've


15177
18:07:32,240 --> 18:07:35,520
called it in my note so let's go ahead and do that although we're not actually


15178
18:07:35,520 --> 18:07:38,796
going to use this field but i just want to demonstrate to you that this field is


15179
18:07:38,796 --> 18:07:42,160
possible to achieve with


15180
18:07:42,160 --> 18:07:47,520
sqlite then in here let's say it is an integer


15181
18:07:47,520 --> 18:07:51,436
also um and we're going to say the default is


15182
18:07:51,436 --> 18:07:57,116
0 meaning it's not synced basically true or false in


15183
18:07:57,116 --> 18:08:01,680
true could be translated to any value that is not 0 and 0 could be translated


15184
18:08:01,680 --> 18:08:03,916
to the value of false so putting the value of


15185
18:08:03,916 --> 18:08:08,480
zero in here meaning that it is not synced with any cloud


15186
18:08:08,480 --> 18:08:12,560
storage so let's then go ahead and say that uh


15187
18:08:12,560 --> 18:08:18,480
this is integer and it's um we should say it's not null and um and it doesn't


15188
18:08:18,480 --> 18:08:22,880
have to be unique so now you can see that this is the result of the creation


15189
18:08:22,880 --> 18:08:27,596
of our tables this is id integer not null and the id is also primary key in


15190
18:08:27,596 --> 18:08:31,596
auto increment then there is a user id which is integer not null but it's also


15191
18:08:31,596 --> 18:08:35,040
a foreign key to the user table under the id column


15192
18:08:35,040 --> 18:08:40,080
or the id field and then we have another field here says text of type text and


15193
18:08:40,080 --> 18:08:44,480
then another field that's called isync with cloud integer not null default zero


15194
18:08:44,480 --> 18:08:48,320
okay so that's all we need to do


15195
18:08:48,320 --> 18:08:52,000
and i'm going to press okay and i need to do the same thing on your side all


15196
18:08:52,000 --> 18:08:56,400
right now we have two um


15197
18:08:56,400 --> 18:09:00,956
we have two tables in our database


15198
18:09:00,956 --> 18:09:06,320
so let's go ahead and um let's go ahead and move on to the next


15199
18:09:06,320 --> 18:09:09,520
point that we're going to talk about you see as the captioning case we need to


15200
18:09:09,520 --> 18:09:14,560
create these programmatically otherwise we have to move this


15201
18:09:14,560 --> 18:09:17,436
database that we just created called testingdb


15202
18:09:17,436 --> 18:09:21,200
manually into the documents folder of an application i'm going to explain what


15203
18:09:21,200 --> 18:09:27,040
this actually means you see now we have a file called testingdb it


15204
18:09:27,040 --> 18:09:32,080
has the database for our application with some tables okay


15205
18:09:32,080 --> 18:09:35,040
however we need to be able to create these


15206
18:09:35,040 --> 18:09:40,080
tables programmatically if they don't exist inside our application you see


15207
18:09:40,080 --> 18:09:44,240
this testing db for me is sitting on my desktop it has absolutely nothing to do


15208
18:09:44,240 --> 18:09:49,040
with our flutter application and you could be smart and like drag this db


15209
18:09:49,040 --> 18:09:53,596
into your firebase application flutter application and then kind of copy it to


15210
18:09:53,596 --> 18:09:58,400
the right place when the application is is executed in the user's telephone or


15211
18:09:58,400 --> 18:10:01,680
on the tablet and then try to read from that database


15212
18:10:01,680 --> 18:10:05,840
it is possible but what i'm going to do in here is i'm going to show you


15213
18:10:05,840 --> 18:10:10,160
a better way of doing this in that we're going to actually create these tables


15214
18:10:10,160 --> 18:10:13,840
programmatically in our flutter applications so that


15215
18:10:13,840 --> 18:10:17,756
you also see that process and how that works how can you integrate with


15216
18:10:17,756 --> 18:10:22,000
sqlite inside your flutter application okay


15217
18:10:22,000 --> 18:10:25,520
all right so in order to do that as a captioning case we need a few


15218
18:10:25,520 --> 18:10:32,080
dependencies uh we need sql sqflight path provider and path


15219
18:10:32,080 --> 18:10:36,880
and um i'm gonna then explain to you why we need these dependencies you see sql


15220
18:10:36,880 --> 18:10:40,720
sqflight is a package it's a third-party package that we need to add to our


15221
18:10:40,720 --> 18:10:45,040
application in order for our flutter application to be able to talk with sql


15222
18:10:45,040 --> 18:10:48,636
flight so that's that's that and that is for


15223
18:10:48,636 --> 18:10:54,956
storage actual storage and talking with the database that package used for okay


15224
18:10:54,956 --> 18:10:58,956
now there is a dependency that we have to drag into our application called path


15225
18:10:58,956 --> 18:11:05,596
and path is used for us to be able to grab the applications documents folder


15226
18:11:05,596 --> 18:11:10,796
so that we can actually create a file inside a documents folder and place our


15227
18:11:10,796 --> 18:11:15,840
data inside that file just like i'm placing the data for nodes and user


15228
18:11:15,840 --> 18:11:18,956
inside this testing db file on my desktop so


15229
18:11:18,956 --> 18:11:23,756
the path uh provider and the path provider uh i


15230
18:11:23,756 --> 18:11:27,680
may have actually taught set paths but it's actually called path provider path


15231
18:11:27,680 --> 18:11:32,240
provider dependency allows us to grab the the applications


15232
18:11:32,240 --> 18:11:35,756
documents folder and if you're not familiar with mobile application


15233
18:11:35,756 --> 18:11:40,080
development you may not know this but applications that sit on the uh on an


15234
18:11:40,080 --> 18:11:45,916
android phone or tablet and on ios telephone or ipad os tablet


15235
18:11:45,916 --> 18:11:50,480
they have their own file structure so every application in itself has a


15236
18:11:50,480 --> 18:11:53,200
document directory so


15237
18:11:53,200 --> 18:11:57,916
whereas on your computer like if you're sitting on a from a laptop or a desktop


15238
18:11:57,916 --> 18:12:03,360
you have a documents folder that other applications that run on your operating


15239
18:12:03,360 --> 18:12:08,160
system could get access to so it's one documents folder every application can


15240
18:12:08,160 --> 18:12:12,400
request access to and store information in it and read from it but that's not


15241
18:12:12,400 --> 18:12:17,756
the same concept in mobile devices and on tablets in that every application


15242
18:12:17,756 --> 18:12:23,280
runs inside something called sandbox the sandbox is like a it's like a


15243
18:12:23,280 --> 18:12:27,756
cage inside where the application resides and all the application data


15244
18:12:27,756 --> 18:12:32,556
resides in that sandbox so every application can request access


15245
18:12:32,556 --> 18:12:37,920
from the operating system to read its own documents folder okay and that is


15246
18:12:37,920 --> 18:12:40,960
what the path provider


15247
18:12:40,960 --> 18:12:45,600
package is gonna allow us to do to find our applications documents


15248
18:12:45,600 --> 18:12:50,640
folder in which we're gonna store our database file


15249
18:12:50,640 --> 18:12:53,756
now we also need as i mentioned a


15250
18:12:53,756 --> 18:12:57,040
a package called path and


15251
18:12:57,040 --> 18:13:01,600
we need this path just for a very single up a simple operation and


15252
18:13:01,600 --> 18:13:06,720
let's say that we have uh use path provider to get our documents folder now


15253
18:13:06,720 --> 18:13:11,040
we want to create a file in this documents folder


15254
18:13:11,040 --> 18:13:15,116
and kind of like get the full path of this file documents folder slash


15255
18:13:15,116 --> 18:13:18,720
this file and that's what we need the path package because it has a great


15256
18:13:18,720 --> 18:13:23,516
function called join that allows us to take the path or of a directory or


15257
18:13:23,516 --> 18:13:28,000
folder and join that path with a file name and it


15258
18:13:28,000 --> 18:13:32,556
gives us the entire path back so we can access that file okay


15259
18:13:32,556 --> 18:13:36,320
so a lot of information i'm gonna take this


15260
18:13:36,320 --> 18:13:41,600
um into another screen so you don't see it and i can see


15261
18:13:41,600 --> 18:13:44,876
here it's asking for to control this computer's access now i'm going to deny


15262
18:13:44,876 --> 18:13:48,320
that for now um all right so what we're going to do


15263
18:13:48,320 --> 18:13:51,600
i'm going to bring our code up if i can find it


15264
18:13:51,600 --> 18:13:55,756
and here's the code how we left it in the previous chapters


15265
18:13:55,756 --> 18:13:59,756
and i can see that it is running excuse me in scrcpy i'm going to bring


15266
18:13:59,756 --> 18:14:03,600
it here i'm not actually sure if you need a crcpy in this chapter so it may


15267
18:14:03,600 --> 18:14:07,516
be better for me to just to minimize scr cpy


15268
18:14:07,516 --> 18:14:11,516
and i'm going to make this code a little bit bigger here as well okay


15269
18:14:11,516 --> 18:14:15,436
so so what we need now


15270
18:14:15,436 --> 18:14:20,156
is to first before we go ahead and actually create our notes service is to


15271
18:14:20,156 --> 18:14:24,080
bring in those dependencies okay let me change this screen layout a


15272
18:14:24,080 --> 18:14:27,836
little bit so you see better i'm going to increase the font as well


15273
18:14:27,836 --> 18:14:33,836
so i need you to go to your uh editor text editor or id if you're using


15274
18:14:33,836 --> 18:14:38,156
and we need to bring in those uh dependencies okay


15275
18:14:38,156 --> 18:14:44,320
so let's go and bring up uh your web browser and say pop.dev and in public


15276
18:14:44,320 --> 18:14:49,516
dev search for sql flights okay and you can see it's right there and the way to


15277
18:14:49,516 --> 18:14:53,196
install it is very simple you should be able to just say


15278
18:14:53,196 --> 18:14:59,280
uh flutter pop at sqflight so let's go ahead and do that by hand


15279
18:14:59,280 --> 18:15:06,556
and let's give it a flight remember it's not sq sqlite it's sqlite


15280
18:15:07,516 --> 18:15:12,400
okay that dependency has been added then i'm going to say flutter pop add provide


15281
18:15:12,400 --> 18:15:18,400
a path provider and we can actually search for it in popdev path provider


15282
18:15:18,400 --> 18:15:22,796
and it is right there it's developed by the people who have


15283
18:15:22,796 --> 18:15:27,436
brought us flutter and so to begin with at google so it's not really a third


15284
18:15:27,436 --> 18:15:31,360
party application or third party uh package and we can actually have a look


15285
18:15:31,360 --> 18:15:35,680
at sql flight as well and see who's developed that


15286
18:15:35,680 --> 18:15:40,156
oh it's another yeah it's another publisher is not flutter themselves so


15287
18:15:40,156 --> 18:15:45,280
let's go back to path provider and i'm gonna just say


15288
18:15:45,280 --> 18:15:50,960
installing as we can see is flutter pop add path provider let me just copy that


15289
18:15:50,960 --> 18:15:55,516
and paste it there add path provider


15290
18:15:55,516 --> 18:16:00,400
and then we also need path so let's go back in here and just type path i


15291
18:16:00,400 --> 18:16:05,196
believe this is my flutter team yeah dark dev so let's just say flutter pop


15292
18:16:05,196 --> 18:16:08,720
add a path


15293
18:16:10,796 --> 18:16:16,080
alright that's going to do its work and now if you go to our um


15294
18:16:16,476 --> 18:16:21,360
pop special then you should be able to see those uh


15295
18:16:21,360 --> 18:16:26,876
dependencies sqflight path provider and path are right there okay


15296
18:16:26,876 --> 18:16:31,756
now that we've done that we can go and do what we uh are supposed to do in here


15297
18:16:31,756 --> 18:16:35,836
which is create our notes service you can see that in the


15298
18:16:35,836 --> 18:16:38,720
uh in the description i've provided here in the caption i said that we're in


15299
18:16:38,720 --> 18:16:43,116
creating inside a folder called crud and we already have lib services you can


15300
18:16:43,116 --> 18:16:48,960
see in here lib services and lib services auth but we don't have crud so


15301
18:16:48,960 --> 18:16:54,960
i'm gonna go in here in lib and just say new file and i'm gonna say services


15302
18:16:54,960 --> 18:16:56,960
well slash absolutely it's saying that it already


15303
18:16:56,960 --> 18:17:01,196
exists so inside services i'm going to say new file then i'm going to bring it


15304
18:17:01,196 --> 18:17:04,796
so you can see it as well oh where did it go


15305
18:17:04,796 --> 18:17:08,320
services new file crud


15306
18:17:08,320 --> 18:17:13,360
i think i need to change the screen layout so unfortunately so you'll see it


15307
18:17:13,360 --> 18:17:21,600
better services again new file in here a new file uh third time or fourth time


15308
18:17:21,600 --> 18:17:27,600
lucky crud and then nodes service dot


15309
18:17:28,476 --> 18:17:31,280
okay so what we're going to do with this node


15310
18:17:31,280 --> 18:17:36,244
service is to uh is to basically grab


15311
18:17:36,244 --> 18:17:41,516
a hold of our database it is the primary service that is gonna work with


15312
18:17:41,516 --> 18:17:45,116
our sqlite database it's gonna grab users it's gonna


15313
18:17:45,116 --> 18:17:51,116
create new users delete users it's gonna find users it's gonna create notes


15314
18:17:51,116 --> 18:17:55,196
delete nodes update nodes everything everything that we need from our user


15315
18:17:55,196 --> 18:17:59,600
interface this node service is going to


15316
18:17:59,600 --> 18:18:03,756
facilitate that for us okay


15317
18:18:04,320 --> 18:18:10,796
okay so what we need to do inside uh are


15318
18:18:12,080 --> 18:18:16,156
so what we need to do now is to actually i think before we do that we need to


15319
18:18:16,156 --> 18:18:20,244
import our dependencies so let's import our dependencies we need uh


15320
18:18:20,244 --> 18:18:24,960
three dependencies if you remember path path provider and sqlite so


15321
18:18:24,960 --> 18:18:29,756
um i'm gonna bring those in here so we don't have to


15322
18:18:29,756 --> 18:18:35,040
type it again so imports are kind of like boring and i


15323
18:18:35,040 --> 18:18:38,796
i don't rather not type them so let's go in here and you can have a look at what


15324
18:18:38,796 --> 18:18:42,476
i've imported here package sql flight and then we import that


15325
18:18:42,476 --> 18:18:46,244
then we also have the path provider okay so that we can get the documents folder


15326
18:18:46,244 --> 18:18:50,556
for this application and then we also are importing package path path and then


15327
18:18:50,556 --> 18:18:56,556
i'm doing this show syntax in order to bring in this particular function called


15328
18:18:56,556 --> 18:18:59,196
join all right so


15329
18:18:59,196 --> 18:19:03,600
you could also skip that but the problem is that then you get everything inside


15330
18:19:03,600 --> 18:19:07,756
path of dart and that's not what i want so i just want us to get this particular


15331
18:19:07,756 --> 18:19:10,876
function inside path.dart and you could also do the same


15332
18:19:10,876 --> 18:19:15,280
thing in here to be honest with you you could just say show um and i think the


15333
18:19:15,280 --> 18:19:19,600
function is called get application documents directory so let's do that why


15334
18:19:19,600 --> 18:19:24,080
not let's just get that particular function from path provider as well okay


15335
18:19:24,080 --> 18:19:27,600
we don't need the entire path provider all right


15336
18:19:27,600 --> 18:19:31,836
all right that's great so


15337
18:19:32,476 --> 18:19:36,320
what we need then is for us to be able to


15338
18:19:36,320 --> 18:19:41,680
grab a hold of our current database path as i mentioned are


15339
18:19:41,680 --> 18:19:45,516
every application that you develop with flutter for mobile application mobile


15340
18:19:45,516 --> 18:19:50,244
devices such as android and ios and ipad os they have their own documents


15341
18:19:50,244 --> 18:19:54,476
directory and we're going to create and we're going to get the path of the


15342
18:19:54,476 --> 18:19:58,476
documents directory and then we're what we're going to say is we're going to


15343
18:19:58,476 --> 18:20:02,400
join that using path dependency


15344
18:20:02,400 --> 18:20:07,680
with a name that we are going to specify for our database okay


15345
18:20:07,680 --> 18:20:10,156
so um


15346
18:20:10,156 --> 18:20:14,244
what we need to do then is to let's go ahead first actually and take care of


15347
18:20:14,244 --> 18:20:20,000
some other important matters that uh need to be dealt with before we actually


15348
18:20:20,000 --> 18:20:24,476
create the function functionality for for our database uh implementation you


15349
18:20:24,476 --> 18:20:28,080
see note service is going to talk with database but before you can do that it


15350
18:20:28,080 --> 18:20:32,640
needs to have some sort of dart representation of those two two very


15351
18:20:32,640 --> 18:20:38,960
important tables that we created um user and note so if you read that data from


15352
18:20:38,960 --> 18:20:43,116
the database how are we going to represent it inside our dart application


15353
18:20:43,116 --> 18:20:48,876
and for that we need dart classes so


15354
18:20:48,876 --> 18:20:53,756
what we need now is to as a caption in the case we need database users create a


15355
18:20:53,756 --> 18:20:59,516
class called database user inside notes service dart


15356
18:20:59,516 --> 18:21:03,920
all right that is going to be a bit of code so i hope you're ready for it


15357
18:21:03,920 --> 18:21:07,680
and let's just go ahead i'm looking at my notes


15358
18:21:07,680 --> 18:21:12,000
let's go ahead and create as the caption indicates we create a class in here


15359
18:21:12,000 --> 18:21:15,920
i make the a little bit bigger class and i'm just


15360
18:21:15,920 --> 18:21:22,720
going to say database user okay now if you remember from db browser for


15361
18:21:22,720 --> 18:21:26,320
sqlite i'm going to bring it here every user had


15362
18:21:26,320 --> 18:21:29,680
can we actually oh we can browse it but i want to go


15363
18:21:29,680 --> 18:21:33,920
back to the user and modify the table save it and you


15364
18:21:33,920 --> 18:21:37,920
remember it had an id and an email id was integer and email was text so that's


15365
18:21:37,920 --> 18:21:42,556
what we're going to define in here okay so we're going to say final and id and


15366
18:21:42,556 --> 18:21:46,320
final string email


15367
18:21:46,320 --> 18:21:49,436
get help from visual studio to completely complete this i'm not going


15368
18:21:49,436 --> 18:21:53,116
to explain these again and again because we've explained this quite a lot in


15369
18:21:53,116 --> 18:21:58,476
previous chapters so by this point i just assume that you know what these are


15370
18:21:58,476 --> 18:22:02,244
let's make this a constant initializer and then let's go ahead and say these


15371
18:22:02,244 --> 18:22:05,040
two parameters are required parameters so


15372
18:22:05,040 --> 18:22:09,756
they become also named parameters by default okay


15373
18:22:09,756 --> 18:22:15,360
and that's that put a comma here so we get dark formatter to do its magic


15374
18:22:15,360 --> 18:22:19,436
and what we're going to do is remember when we


15375
18:22:19,436 --> 18:22:23,196
actually you shouldn't remember because you don't know this maybe yet but when


15376
18:22:23,196 --> 18:22:28,796
we talk with our database we are going to read


15377
18:22:28,796 --> 18:22:33,756
like hash tables for every row that we read from our for


15378
18:22:33,756 --> 18:22:38,400
from that table so every user inside that database


15379
18:22:38,400 --> 18:22:43,436
table called user is going to be represented by this object a map of a


15380
18:22:43,436 --> 18:22:50,400
string and an optional object okay so that's a row inside the user table


15381
18:22:50,400 --> 18:22:53,600
now imagining that the this


15382
18:22:53,600 --> 18:22:56,796
node service that we're going to create soon


15383
18:22:56,796 --> 18:22:59,920
reads these users from the database and it should be


15384
18:22:59,920 --> 18:23:04,476
able to pass this to our database user class and the database user class should


15385
18:23:04,476 --> 18:23:09,600
create an instance of itself depending on the values inside this map


15386
18:23:09,600 --> 18:23:15,116
all right so let's go ahead and create a constructor we call it database user


15387
18:23:15,116 --> 18:23:20,080
and then we say front row and then we say we get a map of a string


15388
18:23:20,080 --> 18:23:25,436
and an optional object in here and then let's just call it map okay


15389
18:23:25,436 --> 18:23:29,116
so what we're going to do in here is we're going to create the shorthand for


15390
18:23:29,116 --> 18:23:33,920
creating and constructing our object and we'll say the id is equal to inside this


15391
18:23:33,920 --> 18:23:38,556
map there needs to be some sort of a column called an id column so instead of


15392
18:23:38,556 --> 18:23:42,796
hard coding that in here like this let's go and define a constant here and just


15393
18:23:42,796 --> 18:23:47,680
call it id column and let's just say that this is equal to id and in here


15394
18:23:47,680 --> 18:23:52,156
we're just going to say id is equal to ib column just like that all right


15395
18:23:52,156 --> 18:23:59,116
and then what we're going to say is we also need the email an email is equal to


15396
18:23:59,116 --> 18:24:02,720
map and remember we have the email i'm going


15397
18:24:02,720 --> 18:24:06,000
to open the user in here


15398
18:24:06,320 --> 18:24:09,796
modify table


15399
18:24:11,360 --> 18:24:17,040
and let's go and have a look at this email which is text right there okay


15400
18:24:17,040 --> 18:24:20,320
so the table that column basically is


15401
18:24:20,320 --> 18:24:24,720
called email so let's go and go ahead and create const i'm going to make this


15402
18:24:24,720 --> 18:24:28,156
a single single code as well because that's like the preferred way of doing


15403
18:24:28,156 --> 18:24:32,720
it and let's call it email column and i'm going to assign this to


15404
18:24:32,720 --> 18:24:36,156
full email and in here i'm just going to say email column


15405
18:24:36,156 --> 18:24:41,040
as a string and this should be as inked so


15406
18:24:41,040 --> 18:24:43,680
this was i mean it looks complicated but it


15407
18:24:43,680 --> 18:24:48,556
really isn't so and you can see it's a constant so we could also actually tag


15408
18:24:48,556 --> 18:24:54,244
this as immutable and we need to import foundation in order to be able


15409
18:24:54,244 --> 18:24:57,116
to do that okay


15410
18:24:57,116 --> 18:25:01,516
now that we have our database user we need to also implement a few more


15411
18:25:01,516 --> 18:25:05,360
functionalities for this class before we're actually done


15412
18:25:05,360 --> 18:25:09,040
with it so the three things that we need to do


15413
18:25:09,040 --> 18:25:13,680
for it is first to create like a string descriptor for this class so that if


15414
18:25:13,680 --> 18:25:17,360
we're printing out this user to the debug console


15415
18:25:17,360 --> 18:25:20,156
otherwise i mean before i say otherwise if we're


15416
18:25:20,156 --> 18:25:25,280
printing out an instance of the database user to the debug console so we're


15417
18:25:25,280 --> 18:25:29,836
looking at the various users that are inside our database


15418
18:25:29,836 --> 18:25:34,244
if we do not implement two string on our class it's literally just gonna say


15419
18:25:34,244 --> 18:25:39,040
instance of database user in the console and that's not so useful so it's my it's


15420
18:25:39,040 --> 18:25:42,876
my um habit to if i'm planning to print out


15421
18:25:42,876 --> 18:25:46,960
these things to the console it's my habit to go and implement two strings so


15422
18:25:46,960 --> 18:25:51,836
let's just in here say to string and it gives us the overwrite and what


15423
18:25:51,836 --> 18:25:55,920
we're going to do in here is just we're going to say a person


15424
18:25:55,920 --> 18:26:00,640
and person id is equal to dollar id


15425
18:26:00,640 --> 18:26:05,680
and email is equal to dollar email okay so that's for your to string


15426
18:26:05,680 --> 18:26:10,720
then what we need to do is also implement some sort of equality


15427
18:26:10,720 --> 18:26:15,116
behavior for our class you see we want to be able to see if two different


15428
18:26:15,116 --> 18:26:18,720
peoples that we've retrieved from the database are equal to each other or not


15429
18:26:18,720 --> 18:26:24,876
so if if i say if person x is equal to person y then like read the person wise


15430
18:26:24,876 --> 18:26:29,836
notes such as something like that so let's go and implement equality for our


15431
18:26:29,836 --> 18:26:33,836
class and the way to do that is you overwrite


15432
18:26:33,836 --> 18:26:39,516
a boolean operator and it's called bool operator equal equal


15433
18:26:39,516 --> 18:26:45,116
and in here you would have a covariant which we haven't talked about yet and i


15434
18:26:45,116 --> 18:26:49,116
will talk talk to you right now about it so


15435
18:26:49,116 --> 18:26:53,436
what covariance is is a keyword in dart that not many people know about but it


15436
18:26:53,436 --> 18:26:58,080
allows you to change the behavior of your input parameters so that they do


15437
18:26:58,080 --> 18:27:03,436
not necessarily conform to the signature of that parameter in the


15438
18:27:03,436 --> 18:27:07,680
super class so remember we're doing overwrite here meaning that there this


15439
18:27:07,680 --> 18:27:12,556
functionality this operator is already defined at the object level so let's go


15440
18:27:12,556 --> 18:27:16,960
to object just type object somewhere for instance


15441
18:27:16,960 --> 18:27:20,720
void hello and then say object and then command


15442
18:27:20,720 --> 18:27:25,516
click on it just so you can go there and search for operator


15443
18:27:25,516 --> 18:27:29,516
equal equal and you'll see in here that it says external operator equally and


15444
18:27:29,516 --> 18:27:35,436
the parameter should be of type object now we don't want to do that we want our


15445
18:27:35,436 --> 18:27:40,556
classes to be compared to other classes of the same type so if you don't


15446
18:27:40,556 --> 18:27:43,836
put covariant in here you'll get an error from the


15447
18:27:43,836 --> 18:27:47,116
analyzer and you'll soon see that actually we're going to remove that soon


15448
18:27:47,116 --> 18:27:49,196
so in here we're saying that we're going to


15449
18:27:49,196 --> 18:27:53,360
compare our class with equal equal and instance of our class with equal equal


15450
18:27:53,360 --> 18:27:57,836
and we're going to compare with another user of the same class okay and then


15451
18:27:57,836 --> 18:28:01,680
here we're just going to say our id should be equal to the other id that's


15452
18:28:01,680 --> 18:28:06,320
our equality now let's go ahead then and remove this


15453
18:28:06,320 --> 18:28:10,156
covariant as i promised you and now you'll see you'll get an error


15454
18:28:10,156 --> 18:28:15,116
saying that oh wait a minute according to object equal equals should compare


15455
18:28:15,116 --> 18:28:19,756
the current object with another object but using covariant you're telling dart


15456
18:28:19,756 --> 18:28:24,000
that hey i'm not comparable with other objects of any other class i'll only


15457
18:28:24,000 --> 18:28:28,476
comparable with database user instances so make that happen all right


15458
18:28:28,476 --> 18:28:31,116
so then after you implement equal you have


15459
18:28:31,116 --> 18:28:34,320
to also implement hashcode as is suggested by the analyzer so i'm going


15460
18:28:34,320 --> 18:28:38,244
to get help from the dart from visual studio code and i'm going to


15461
18:28:38,244 --> 18:28:42,960
say create method hashcode and in the overwriting of hashcode i'm


15462
18:28:42,960 --> 18:28:49,196
just going to return my id's hashcode okay so this basically the id is


15463
18:28:49,196 --> 18:28:53,920
becoming the primary key of this class using which it will hash itself so it


15464
18:28:53,920 --> 18:28:59,116
can be placed inside maps or hash nodes if you're


15465
18:28:59,116 --> 18:29:04,876
if you're a ros developer or a dictionary if you're a swift developer


15466
18:29:04,876 --> 18:29:08,876
so uh that's hashing okay so it feels like


15467
18:29:08,876 --> 18:29:16,876
we're actually done now with this um with the with our database user so


15468
18:29:16,876 --> 18:29:20,640
and that was quite a bit of code but we managed that


15469
18:29:20,640 --> 18:29:23,516
all right now that we've done the database user we need to do something


15470
18:29:23,516 --> 18:29:28,960
similar but this time we need to do it for our nodes so we have a database user


15471
18:29:28,960 --> 18:29:32,876
now we have to create something called a database node okay note


15472
18:29:32,876 --> 18:29:36,556
not node and i'm going to do that under the


15473
18:29:36,556 --> 18:29:41,280
database user just so that we can have closer access to these constants all


15474
18:29:41,280 --> 18:29:43,836
right so i suggest you do the same thing so


15475
18:29:43,836 --> 18:29:47,920
let's just say we create a class and we call it database note


15476
18:29:47,920 --> 18:29:52,000
and remember from our database schema that a note so if i go in here and say


15477
18:29:52,000 --> 18:29:58,000
right clicks right click and modify table then we had id user id text and a


15478
18:29:58,000 --> 18:30:02,080
field call is synced with cloud all right so let's go ahead and do that id


15479
18:30:02,080 --> 18:30:07,516
is integer user ids integer text is text or string as ins is synced with cloud


15480
18:30:07,516 --> 18:30:09,836
it's just an integer in here but we're gonna


15481
18:30:09,836 --> 18:30:14,320
represent it as a boolean all right so keep those four fields in mind so


15482
18:30:14,320 --> 18:30:19,436
let's go ahead and say final id and mint id


15483
18:30:19,436 --> 18:30:23,920
and we have a final int in our database we call the user underscore id because


15484
18:30:23,920 --> 18:30:28,796
that's a convention in sqlite or sql generally that you don't put you


15485
18:30:28,796 --> 18:30:32,720
like you don't write your fields with user uh


15486
18:30:32,720 --> 18:30:36,640
id usually you don't type like this the way we type with camel case in dart in


15487
18:30:36,640 --> 18:30:40,080
other languages we just say user everything's under everything is


15488
18:30:40,080 --> 18:30:43,516
lowercase and different words are separated from each other with


15489
18:30:43,516 --> 18:30:47,280
underscore but that's not the case in dart and other languages instead we say


15490
18:30:47,280 --> 18:30:51,436
user user id like this with panel case all


15491
18:30:51,436 --> 18:30:54,876
right and we're also going to create let me


15492
18:30:54,876 --> 18:30:59,360
just move this a little bit there and we're also going to create um


15493
18:30:59,360 --> 18:31:04,244
the string for our text and


15494
18:31:04,244 --> 18:31:09,436
last we're going to say is synced with cloud something like that all right and


15495
18:31:09,436 --> 18:31:13,280
again remember we're not going to use this input cloud it's just for you to


15496
18:31:13,280 --> 18:31:16,400
understand how we create different fields in the database


15497
18:31:16,400 --> 18:31:20,796
and yeah it's just it's just something that you future you guard yourself


15498
18:31:20,796 --> 18:31:25,360
against future changes in your database schema so by doing this you're allowing


15499
18:31:25,360 --> 18:31:29,680
yourself to play with this field so that you know every note that is locally


15500
18:31:29,680 --> 18:31:33,600
created in the local database is not by default sync with the cloud all right


15501
18:31:33,600 --> 18:31:36,720
i want to get help from visual studio code to complete the constructor for


15502
18:31:36,720 --> 18:31:41,920
this and i'm going to go and do all of these fields as required so i'm


15503
18:31:41,920 --> 18:31:46,400
going to say required and i'm going to copy that paste it right there paste it


15504
18:31:46,400 --> 18:31:51,040
right there and there and then i'm going to put a comma at the end and command s


15505
18:31:51,040 --> 18:31:56,720
on mac or control s in windows and linux to save this and get dart formatter to


15506
18:31:56,720 --> 18:32:00,640
format this file for me all right so that's the initializer


15507
18:32:00,640 --> 18:32:04,320
and we kind of also need to do the same thing that we did here for our database


15508
18:32:04,320 --> 18:32:09,196
user and that we need to instantiate it from a row so let me copy this code the


15509
18:32:09,196 --> 18:32:12,000
way it is right there and i'm going to bring it into our


15510
18:32:12,000 --> 18:32:16,000
database note i'm going to paste it right there and instead i'm going to say


15511
18:32:16,000 --> 18:32:21,836
this from row initializer creates a database note


15512
18:32:21,920 --> 18:32:26,640
in our database note we have an id but we don't have email so in here we're


15513
18:32:26,640 --> 18:32:31,436
just going to say user id is map then we need a new column which


15514
18:32:31,436 --> 18:32:36,476
is called user id column okay so let me just see my notes how i created it


15515
18:32:36,476 --> 18:32:40,400
yes i can see it's called just user id call so go ahead and create a new


15516
18:32:40,400 --> 18:32:43,920
constant in here and call it


15517
18:32:43,920 --> 18:32:48,796
user id column which is if you remember from our schema it was called user


15518
18:32:48,796 --> 18:32:52,796
underscore id so user id


15519
18:32:52,796 --> 18:32:56,080
okay and here we say user id is equal to map


15520
18:32:56,080 --> 18:33:00,244
user id column as a string and it's complaining right


15521
18:33:00,244 --> 18:33:03,436
now because we have two more fields to initialize but we haven't really read


15522
18:33:03,436 --> 18:33:07,600
their values from the map so text and is synced with cloud so for text we're just


15523
18:33:07,600 --> 18:33:11,756
going to say text is equal to map and let's go create a new


15524
18:33:11,756 --> 18:33:16,960
consonant in here we say text column and that's equal to text so it's just


15525
18:33:16,960 --> 18:33:20,876
the name of the field or the column here you see


15526
18:33:20,876 --> 18:33:24,320
so let's go ahead and say that's text and in here we say text


15527
18:33:24,320 --> 18:33:26,720
column


15528
18:33:27,196 --> 18:33:32,796
and we say add string and i believe that's how we call it yeah


15529
18:33:32,796 --> 18:33:36,400
and we'll be calling a string can be initialized oh sorry about this the user


15530
18:33:36,400 --> 18:33:40,320
id can't be a string it should be added in so let's just say it's an int and


15531
18:33:40,320 --> 18:33:43,836
last but not least is synced with cloud so we're to say


15532
18:33:43,836 --> 18:33:50,720
async with cloud actually is read from from our database as an integer remember


15533
18:33:50,720 --> 18:33:54,080
is synced with cloud as an integer so we're going to say


15534
18:33:54,080 --> 18:33:57,680
we're going to first define a column for it is synced


15535
18:33:57,680 --> 18:34:00,876
with cloud column


15536
18:34:00,876 --> 18:34:04,796
and we're going to call it async with cloud and


15537
18:34:04,796 --> 18:34:08,640
i mean i'm saying uh we're going to call it but actually we've already called it


15538
18:34:08,640 --> 18:34:13,116
we called it is synced with cloud so just need to copy and paste that in here


15539
18:34:13,116 --> 18:34:17,836
you see okay and then we're going to say is


15540
18:34:17,836 --> 18:34:24,156
synced with cloud as equal to now you see we don't have this uh


15541
18:34:24,156 --> 18:34:27,196
data we don't have this field as a boolean in the database we have it as an


15542
18:34:27,196 --> 18:34:31,280
integer so we have to read it as an integer so we're going to say in the map


15543
18:34:31,280 --> 18:34:37,920
there's a column called async with cloud column and it's an integer okay


15544
18:34:37,920 --> 18:34:42,244
if that is equal to one then return true


15545
18:34:42,244 --> 18:34:47,516
otherwise uh is equal to one true otherwise false so


15546
18:34:47,516 --> 18:34:51,040
you see what happened here we read the column as an integer


15547
18:34:51,040 --> 18:34:55,920
and oh if it's equal to one then this guy is equal to true otherwise this guy


15548
18:34:55,920 --> 18:35:00,796
is equal to false okay now that we've done the initialization


15549
18:35:00,796 --> 18:35:05,756
of our database notes from the from the row we


15550
18:35:05,756 --> 18:35:10,960
need to go ahead and we need to create the tostring as well


15551
18:35:10,960 --> 18:35:18,400
for our database note okay so let's go and overwrite to string


15552
18:35:18,400 --> 18:35:21,600
like this and we're just going to say this is a


15553
18:35:21,600 --> 18:35:24,556
simple note we're going to say


15554
18:35:24,556 --> 18:35:29,920
is equal to note and its id is equal to dollar id is text


15555
18:35:29,920 --> 18:35:33,756
is equal to or just its user id is equal to dollar


15556
18:35:33,756 --> 18:35:37,680
user id which is a field that we have


15557
18:35:37,680 --> 18:35:41,836
and then we are not going to print its entire scene is an entire text instead


15558
18:35:41,836 --> 18:35:46,476
we're going to say is synced with cloud is


15559
18:35:46,476 --> 18:35:52,476
other is synced with cloud just like that all right


15560
18:35:52,556 --> 18:35:57,680
all right so yeah i mean optionally you you may also add text if you want to


15561
18:35:57,680 --> 18:36:01,196
it's kind of up to you but the problem is that the text of a note


15562
18:36:01,196 --> 18:36:05,040
could be so long that it actually gets in the way of you getting information of


15563
18:36:05,040 --> 18:36:10,080
your class instance such as its id user id and a single class so maybe if you


15564
18:36:10,080 --> 18:36:14,796
want the text to be there just add it at the end so it basically doesn't disrupt


15565
18:36:14,796 --> 18:36:19,756
the rest of the fields that you may actually have interest in reading okay


15566
18:36:19,756 --> 18:36:23,040
so we did the implementation for


15567
18:36:23,040 --> 18:36:27,280
from uh tostring right now but we haven't done the equality so let's go


15568
18:36:27,280 --> 18:36:31,516
and overwrite the equality as well and the hash node hash code sorry


15569
18:36:31,516 --> 18:36:36,400
i'm going to copy that code from our database user and bring it into the


15570
18:36:36,400 --> 18:36:40,876
database node and i'm going to then paste it right here so you can see it as


15571
18:36:40,876 --> 18:36:43,920
well we're in the equality we're saying that


15572
18:36:43,920 --> 18:36:49,116
we're comparable with a database note as long as our id is equal to the other id


15573
18:36:49,116 --> 18:36:52,244
then we're good to go for the hash code then we're going to


15574
18:36:52,244 --> 18:36:58,244
get our id's hash code all right just like we did for the other class


15575
18:36:58,244 --> 18:37:03,600
wow that was a lot of work to do okay now we've created the database note


15576
18:37:03,600 --> 18:37:08,640
as well as the caption indicates um so what we need to do now is just to


15577
18:37:08,640 --> 18:37:14,720
make sure we have all our constants in place before we carry on now remember


15578
18:37:14,720 --> 18:37:18,476
right after doing these classes we're going to go ahead and create


15579
18:37:18,476 --> 18:37:24,244
our um the actual note service that talks with our database all right so


15580
18:37:24,244 --> 18:37:28,876
before we do that let's create all the necessary constants such as


15581
18:37:28,876 --> 18:37:33,516
the file under which our database is going to be saved so let's just call it


15582
18:37:33,516 --> 18:37:38,720
bb name and we're just going to call it notes.db all right remember this is like


15583
18:37:38,720 --> 18:37:43,280
the file name okay now we're going to create and you can see in here in our um


15584
18:37:43,280 --> 18:37:48,244
file here in as db browser for sqlite we call this file testing.db and in our


15585
18:37:48,244 --> 18:37:52,000
case we're just going to call it nodesdb and we're going to store it in documents


15586
18:37:52,000 --> 18:37:57,436
folder inside that application okay and then we have two tables and notes


15587
18:37:57,436 --> 18:38:01,836
table and a user table so let's go ahead and create them notes table is


15588
18:38:01,836 --> 18:38:04,244
um votes


15589
18:38:04,244 --> 18:38:08,876
and const user table means user and these are like


15590
18:38:08,876 --> 18:38:13,600
table names as we define them here node and user okay


15591
18:38:13,600 --> 18:38:17,836
so those are those and what else do we need um i think i think that's pretty


15592
18:38:17,836 --> 18:38:21,436
much it to be honest with you i think these are all the constants that are


15593
18:38:21,436 --> 18:38:26,080
needed in order for us to be able to create our notes service


15594
18:38:26,080 --> 18:38:31,040
all right let's go ahead now and start with our note server so i'm gonna clear


15595
18:38:31,040 --> 18:38:35,360
this go to the top of this file and then i'm gonna make some empty space in here


15596
18:38:35,360 --> 18:38:40,240
and actually create our notes service so let's go ahead and create a circuit


15597
18:38:40,240 --> 18:38:44,400
class here and call it node service it's very exciting this is the beginning


15598
18:38:44,400 --> 18:38:48,552
of us creating a cross service that works with our database which we're soon


15599
18:38:48,552 --> 18:38:52,240
going to create actually okay as the cache indicates we need a


15600
18:38:52,240 --> 18:38:57,600
function an async function that opens the database you see opening a database


15601
18:38:57,600 --> 18:39:02,400
is not a functionality that you can just say open now it it will happen


15602
18:39:02,400 --> 18:39:07,192
asynchronously because we may need to for instance grab the current um


15603
18:39:07,192 --> 18:39:12,080
current uh folder do documents folder and then append or


15604
18:39:12,080 --> 18:39:16,320
join that documents folder with our database name which we define here


15605
18:39:16,320 --> 18:39:18,552
as a console so it's a lot of asynchronous stuff that we're going to


15606
18:39:18,552 --> 18:39:22,080
happen in there well not a lot but a few at least


15607
18:39:22,080 --> 18:39:25,512
and that is the reason this open function is going to be asynchronous


15608
18:39:25,512 --> 18:39:28,240
okay so as i caption any case let's go ahead


15609
18:39:28,240 --> 18:39:32,400
and create a future void and call it


15610
18:39:32,400 --> 18:39:37,120
just open and we call it async like that


15611
18:39:37,120 --> 18:39:41,440
now this open function is going to keep hold off


15612
18:39:41,440 --> 18:39:45,192
i mean after it has opened the database is actually gonna


15613
18:39:45,192 --> 18:39:49,280
store it somewhere in our node service so it's going to say hey i've opened the


15614
18:39:49,280 --> 18:39:52,552
database here is the object so that other


15615
18:39:52,552 --> 18:39:55,360
functions in the future such as the functions are going to let us


15616
18:39:55,360 --> 18:39:58,960
read users from the database or you read


15617
18:39:58,960 --> 18:40:02,800
notes from the database those functions then they're going to say ah oh here's


15618
18:40:02,800 --> 18:40:07,040
the database instance i know how to grab values out of it okay so


15619
18:40:07,040 --> 18:40:11,760
what we're going to do is to say we have a database


15620
18:40:11,760 --> 18:40:16,640
as you can see it is brought by our sqflite


15621
18:40:16,640 --> 18:40:19,600
library and we're just going to call it db all


15622
18:40:19,600 --> 18:40:23,360
right so to begin with is null and we're going to


15623
18:40:23,360 --> 18:40:26,160
assign to it


15624
18:40:26,640 --> 18:40:30,360
all right um


15625
18:40:30,480 --> 18:40:36,800
so what should we do now um let's go ahead then and start by doing a


15626
18:40:36,800 --> 18:40:41,192
test and see if this database is already opened you see if we have an instance of


15627
18:40:41,192 --> 18:40:44,640
this database then we can kind of like assume that this database file has


15628
18:40:44,640 --> 18:40:48,240
already been opened and we don't have to open it anymore so let's just say if


15629
18:40:48,240 --> 18:40:51,920
the db is not null


15630
18:40:51,920 --> 18:40:54,240
and just throw


15631
18:40:54,240 --> 18:40:59,832
uh a new exception and we're gonna just call it a database already open


15632
18:40:59,832 --> 18:41:04,080
exception so let's go and define an exception


15633
18:41:04,240 --> 18:41:06,960
uh here


15634
18:41:07,040 --> 18:41:12,360
let me see if i can copy and paste that from my notes


15635
18:41:12,640 --> 18:41:15,512
but you see this is just an exception that's a database already open exception


15636
18:41:15,512 --> 18:41:20,080
all right so in here we're just going to say database already open exception all


15637
18:41:20,080 --> 18:41:23,440
right simple if you call the open function


15638
18:41:23,440 --> 18:41:27,120
multiple times while the database is already open you're going to get an


15639
18:41:27,120 --> 18:41:30,160
exception okay so that kind of makes sense


15640
18:41:30,160 --> 18:41:34,160
so let's go ahead and now get the document


15641
18:41:34,160 --> 18:41:37,360
directory path and we have to do a try in here


15642
18:41:37,360 --> 18:41:42,400
because this can actually throw an exception so let's say find final


15643
18:41:42,400 --> 18:41:46,000
docs path is equal to


15644
18:41:46,000 --> 18:41:50,960
and you need to say get documents get application documents directory if you


15645
18:41:50,960 --> 18:41:54,960
have a look at the signature of this method it says i return a future of


15646
18:41:54,960 --> 18:41:59,192
directory so let's go ahead and do that so we need to await on it and that's the


15647
18:41:59,192 --> 18:42:02,320
reason our function is async and that's the reason we're awaiting because this


15648
18:42:02,320 --> 18:42:06,080
returns the path asynchronously now if you look at


15649
18:42:06,080 --> 18:42:10,640
the documentation for this you can see that it can actually throw an exception


15650
18:42:10,640 --> 18:42:14,240
called missing platform directory exception if the system is unable to


15651
18:42:14,240 --> 18:42:18,160
provide the directory all right if for some reason this the


15652
18:42:18,160 --> 18:42:21,440
system isn't able to provide a document directory to


15653
18:42:21,440 --> 18:42:25,192
um to us is going to throw this exception and that is exactly why we


15654
18:42:25,192 --> 18:42:29,600
have our code inside a try statement here so let's say if that exception is


15655
18:42:29,600 --> 18:42:34,640
thrown like this then we're going to throw our own exception so let's define


15656
18:42:34,640 --> 18:42:39,680
an exception we call it unable to get documents directory


15657
18:42:40,720 --> 18:42:44,800
this so it's just a class unable to get documents directory


15658
18:42:44,800 --> 18:42:49,040
exception nothing special about that okay


15659
18:42:49,040 --> 18:42:53,832
and then we in here we say throw at


15660
18:42:53,832 --> 18:42:56,872
uh the name missing platform oh i see you


15661
18:42:56,872 --> 18:43:00,872
see it's it's complaining now and i can see that you couldn't see the codes i


15662
18:43:00,872 --> 18:43:04,480
apologize for that it's complaining and saying that i can't find this missing


15663
18:43:04,480 --> 18:43:10,000
platform directory exception and that is because this is specified in this um


15664
18:43:10,000 --> 18:43:14,160
path provider but for our path provider we just say show get


15665
18:43:14,160 --> 18:43:18,000
get application documents directory so all other symbols are hidden from us so


15666
18:43:18,000 --> 18:43:21,680
we could just remove that and just import the entire path provider and that


15667
18:43:21,680 --> 18:43:25,512
error goes away all right


15668
18:43:26,400 --> 18:43:31,440
okay now let's do this now let's say


15669
18:43:31,440 --> 18:43:35,600
i apologize let's get the the actual path of our


15670
18:43:35,600 --> 18:43:41,120
database so to do that you will say and what are we calling it db path is equal


15671
18:43:41,120 --> 18:43:45,832
to join remember we have this function joined here that we imported from path


15672
18:43:45,832 --> 18:43:51,760
and we say join the docs path the path and our db name


15673
18:43:51,760 --> 18:43:55,512
remember the db name is a constant as a string we define it down here we just


15674
18:43:55,512 --> 18:43:59,440
call the notes db that is now going to be joined with the


15675
18:43:59,440 --> 18:44:04,240
actual path of our documents folder all right


15676
18:44:04,240 --> 18:44:07,512
and what we're going to do is we're going to say we now want to


15677
18:44:07,512 --> 18:44:11,920
open the database with a function called open database which comes from


15678
18:44:11,920 --> 18:44:16,240
skflight and the path is dbpath and remember this


15679
18:44:16,240 --> 18:44:22,480
open database i believe is the future of our database you see so we await on it


15680
18:44:22,480 --> 18:44:25,040
all right and


15681
18:44:25,040 --> 18:44:29,832
then we assign that to our uh local database instance that's it


15682
18:44:29,832 --> 18:44:34,320
so that was basically opening the database so we've now opened


15683
18:44:34,320 --> 18:44:37,280
it but remember


15684
18:44:37,280 --> 18:44:43,832
all we've been working on right now is inside this db browser for sqlite


15685
18:44:44,320 --> 18:44:47,680
this thing this program here is managing its


15686
18:44:47,680 --> 18:44:52,160
own database file this database file is not going to exist in your flutter


15687
18:44:52,160 --> 18:44:56,160
application we've just played around i just showed you how to create a sqlite


15688
18:44:56,160 --> 18:45:01,040
database how to create different tables what fields are what primary key is so


15689
18:45:01,040 --> 18:45:05,192
you need to kind of like forget about this this application and where it


15690
18:45:05,192 --> 18:45:09,040
stores this data you need to now focus on how is your


15691
18:45:09,040 --> 18:45:12,400
flutter application going to be able to create those tables how is your flutter


15692
18:45:12,400 --> 18:45:16,552
application going to be re reading data from the tables or deleting data from


15693
18:45:16,552 --> 18:45:19,680
the table so if you think about it if you've


15694
18:45:19,680 --> 18:45:24,800
completely forgotten about the db browser for sqlite then you could


15695
18:45:24,800 --> 18:45:28,480
just say at this point in time you see open database also can create the


15696
18:45:28,480 --> 18:45:33,280
database for you if it doesn't exist we can look at the documentation for it


15697
18:45:33,280 --> 18:45:37,280
here uh oh my god opens the database at a given path by


15698
18:45:37,280 --> 18:45:41,360
the system uh on is the first let's see encrypt is


15699
18:45:41,360 --> 18:45:45,192
called if the database did not exist prior to calling opendatabase okay so it


15700
18:45:45,192 --> 18:45:48,872
can create the database for you which is what it's gonna do but those tables are


15701
18:45:48,872 --> 18:45:52,640
not gonna exist and we have to have a way of creating those tables if they


15702
18:45:52,640 --> 18:45:57,280
don't exist upon us opening the database okay and that's what we're gonna do here


15703
18:45:57,280 --> 18:46:04,960
so let's go ahead and actually grab the code for creating the user table so i'm


15704
18:46:04,960 --> 18:46:11,192
just going to say const create user table is equal to and this is now


15705
18:46:11,192 --> 18:46:14,240
i'm going to actually use the syntax that we haven't used before and that's


15706
18:46:14,240 --> 18:46:18,320
triple quotation marks okay and then triple quotation marks on the


15707
18:46:18,320 --> 18:46:23,120
next line and then a semicolon now what this does is that it allows you to place


15708
18:46:23,120 --> 18:46:27,120
pretty much anything inside this string without you having to escape that string


15709
18:46:27,120 --> 18:46:31,832
because triple quotation marks are very unique so if you paste any program other


15710
18:46:31,832 --> 18:46:34,960
programming languages code in here chances are that programming languages


15711
18:46:34,960 --> 18:46:40,480
code is not going to include three three quotation marks so the purpose of


15712
18:46:40,480 --> 18:46:45,280
this is that now you can go ahead in your sqlite uh db browser for sqlite and


15713
18:46:45,280 --> 18:46:51,280
grab those users um if i go here database structure user modify table and


15714
18:46:51,280 --> 18:46:55,280
you can literally now grab this code that was created by a db browser for


15715
18:46:55,280 --> 18:47:02,872
sqlite and paste it in here you see so there we go now you have a beautiful


15716
18:47:02,872 --> 18:47:06,720
database creation code in here sorry table creation code that says create


15717
18:47:06,720 --> 18:47:11,920
table user blah blah id integer not null and however we need to take care of


15718
18:47:11,920 --> 18:47:17,832
something in here and we just say if not exists i believe


15719
18:47:17,832 --> 18:47:22,080
and we have to put it before user as well so that's the only thing we're


15720
18:47:22,080 --> 18:47:26,240
adding here we're basically saying create a table call user if it doesn't


15721
18:47:26,240 --> 18:47:29,440
exist because you see we don't want to get an error


15722
18:47:29,440 --> 18:47:32,800
because if you create a table that already exists in the database then


15723
18:47:32,800 --> 18:47:35,512
skflight is going to throw an error saying that this table already exists


15724
18:47:35,512 --> 18:47:42,160
okay so that's why we need if not exists and then what we need to do is to tell


15725
18:47:42,160 --> 18:47:46,240
our database this database that we created up here to execute that command


15726
18:47:46,240 --> 18:47:49,440
so we're just going to say execute and you see it says give me a sequel to


15727
18:47:49,440 --> 18:47:52,720
execute and i'm going to give you a future void and we say okay execute


15728
18:47:52,720 --> 18:47:59,680
create user table and we have wait on it


15729
18:47:59,680 --> 18:48:04,960
some comment in here we just say create user table


15730
18:48:04,960 --> 18:48:10,872
and then in here for the um after we've executed the create user


15731
18:48:10,872 --> 18:48:17,192
table we also have to then take care of uh the creation of our note table


15732
18:48:17,192 --> 18:48:20,640
so i'm just going to do the same thing that we did up here and just say create


15733
18:48:20,640 --> 18:48:23,440
note table


15734
18:48:23,440 --> 18:48:28,480
equal to as single quotes triple single quote semicolon let's go to db


15735
18:48:28,480 --> 18:48:34,240
browser for sqlite and grab this node here and say modify table and grab the


15736
18:48:34,240 --> 18:48:38,080
code that was generated for you and just paste it in here do some formatting so


15737
18:48:38,080 --> 18:48:42,400
it becomes a little bit more bearable to read and have a look at and we do the


15738
18:48:42,400 --> 18:48:47,600
same thing that we did up there we say if not exists like that all right


15739
18:48:47,600 --> 18:48:50,480
so i think i think to be honest with you


15740
18:48:50,480 --> 18:48:53,600
we're good to go there i don't think we need to do anything special in there we


15741
18:48:53,600 --> 18:48:57,680
also have to execute that command so i'm just going to grab the code from there


15742
18:48:57,680 --> 18:49:02,400
paste it right here and like that and i'm going to say


15743
18:49:02,400 --> 18:49:07,680
create note table so that's going to do the creation of the note table as


15744
18:49:07,680 --> 18:49:11,600
well well done that was it that was a big


15745
18:49:11,600 --> 18:49:14,480
function i mean by the standards of what we've


15746
18:49:14,480 --> 18:49:17,512
done so far that was quite a big function okay but generally this is not


15747
18:49:17,512 --> 18:49:21,192
considered such a big function i remember now you have actually constants


15748
18:49:21,192 --> 18:49:27,832
in here you could you could i mean if it's me deciding i would bring this


15749
18:49:27,832 --> 18:49:32,640
constant somewhere else not inside this function we could literally go ahead i


15750
18:49:32,640 --> 18:49:36,080
mean i hadn't planned for this but let's go ahead and grab this constant from


15751
18:49:36,080 --> 18:49:39,192
here and bring it to the end of this file okay where we have all the other


15752
18:49:39,192 --> 18:49:42,720
constants like this and let's go and grab the other constant


15753
18:49:42,720 --> 18:49:44,640
from here boo


15754
18:49:44,640 --> 18:49:49,832
and bring it down as well so we put it at the end of our file right there


15755
18:49:49,832 --> 18:49:52,080
okay as i said i hadn't planned for this but


15756
18:49:52,080 --> 18:49:55,832
i just think it makes sense because now our function is a lot cleaner to have a


15757
18:49:55,832 --> 18:49:58,552
look at here we have a comment for create the user table let's create a


15758
18:49:58,552 --> 18:50:03,440
comment as well here we say that creates notes table


15759
18:50:03,440 --> 18:50:08,800
and remove those empty spaces and just save your file perfect


15760
18:50:08,800 --> 18:50:14,552
now we have the open function let's go ahead and have a look at how we


15761
18:50:14,552 --> 18:50:19,600
can do closing of our database right let's have a look at


15762
18:50:19,600 --> 18:50:24,000
my notes in here okay let's have a look at our


15763
18:50:24,000 --> 18:50:28,160
closing code so i'm going to fold the open function in here so we don't see it


15764
18:50:28,160 --> 18:50:32,320
anymore and let's go ahead and create as you can see in the caption we have to


15765
18:50:32,320 --> 18:50:39,040
say future void close um okay and it's asynchronous so


15766
18:50:39,360 --> 18:50:43,760
what we need to do then is we shouldn't allow any person to close the database


15767
18:50:43,760 --> 18:50:47,920
if the database is not open so let's go ahead and define an exception for that


15768
18:50:47,920 --> 18:50:52,720
and we're going to call the database is not open okay so i'm going to copy that


15769
18:50:52,720 --> 18:50:56,480
exception so i don't have to type it manually manually because by this point


15770
18:50:56,480 --> 18:51:00,400
you know how to create exceptions so it's nothing extraordinary for you to


15771
18:51:00,400 --> 18:51:02,960
learn database is not open that's a new


15772
18:51:02,960 --> 18:51:06,160
exception okay so what we're going to do is we're going


15773
18:51:06,160 --> 18:51:10,000
to say we have our database final db is equal


15774
18:51:10,000 --> 18:51:15,832
to our local db up there and we say if db is null


15775
18:51:15,832 --> 18:51:22,960
and then we throw database not open oops database


15776
18:51:22,960 --> 18:51:28,720
is not open else we're gonna ask skflight to close


15777
18:51:28,720 --> 18:51:33,120
that database for us and the way to do that is just to say db.close and you can


15778
18:51:33,120 --> 18:51:37,120
see it's a future of void so that's why we're waiting on it all right


15779
18:51:37,120 --> 18:51:40,640
and then at that point we have to also reset this local database which is


15780
18:51:40,640 --> 18:51:45,512
called underscore data underscore db so we say db is equal to no


15781
18:51:45,512 --> 18:51:52,080
right so easy peasy close went very fast actually


15782
18:51:52,480 --> 18:51:54,872
all right


15783
18:51:55,040 --> 18:51:58,960
now what we need you see as we're now as we have to open and close now we're


15784
18:51:58,960 --> 18:52:02,160
going to start working with data in the database but


15785
18:52:02,160 --> 18:52:06,240
in order for you to get like your um


15786
18:52:06,240 --> 18:52:11,920
database so that it can for instance actually grab


15787
18:52:11,920 --> 18:52:15,280
like every function that tries to read something from the database it has to


15788
18:52:15,280 --> 18:52:18,400
have some code in order to make sure that the database is open otherwise it


15789
18:52:18,400 --> 18:52:21,920
has to throw an error so we're gonna have like five six of these functions


15790
18:52:21,920 --> 18:52:25,360
and each of which is gonna check the database and then do the same thing is


15791
18:52:25,360 --> 18:52:28,960
the database open yes if it's not open throw this error we could put that


15792
18:52:28,960 --> 18:52:33,360
particular code inside on our function that we are going to call getdatabase or


15793
18:52:33,360 --> 18:52:38,240
throw okay so let's go ahead in here and just say this function returns a


15794
18:52:38,240 --> 18:52:43,120
database it database or throw


15795
18:52:43,120 --> 18:52:45,600
and prefix it without underscore saying that


15796
18:52:45,600 --> 18:52:50,480
this is a private function and then we're going to say final db is db


15797
18:52:50,480 --> 18:52:54,400
if db is null


15798
18:52:54,400 --> 18:52:59,600
and we say throw um database is not open


15799
18:52:59,600 --> 18:53:04,080
else we return the db okay so this is a


15800
18:53:04,080 --> 18:53:08,720
private function that our reading and writing internal functions in this class


15801
18:53:08,720 --> 18:53:12,160
are going to use in order to get the current database so that they avoid


15802
18:53:12,160 --> 18:53:16,160
doing the same if statement everywhere okay


15803
18:53:16,400 --> 18:53:21,360
all right now we're going to start with actual code so


15804
18:53:21,360 --> 18:53:24,240
to read and write from the database in this case we're gonna start with a


15805
18:53:24,240 --> 18:53:29,440
function called delete user that allows us to provide as you can see an email


15806
18:53:29,440 --> 18:53:32,320
address and using that email address then we're


15807
18:53:32,320 --> 18:53:36,160
gonna delete that user from our database so you you will learn how to manipulate


15808
18:53:36,160 --> 18:53:40,960
data from our or inside our database okay


15809
18:53:40,960 --> 18:53:44,400
so let's go ahead and do that function signature as it's indicated here i'm


15810
18:53:44,400 --> 18:53:47,512
just going to say future void delete user


15811
18:53:47,512 --> 18:53:54,480
and required uh string email and make this function asynchronous okay


15812
18:53:54,480 --> 18:53:57,440
then what we're gonna do is just to get our


15813
18:53:57,440 --> 18:54:01,440
database with this absolutely beautiful get database or throw function that we


15814
18:54:01,440 --> 18:54:06,160
created here so i'm just going to say final vb is get database or throw so


15815
18:54:06,160 --> 18:54:10,160
this in turn is going to throw an exception called database it's not open


15816
18:54:10,160 --> 18:54:12,720
if the database is not open so we don't have to


15817
18:54:12,720 --> 18:54:17,680
manually do that okay so in order to delete something


15818
18:54:17,680 --> 18:54:22,640
from sql flight uh or in this case sqlite that is managed by sqflight we


15819
18:54:22,640 --> 18:54:28,872
can say db dot d b dot delete and as you can see it


15820
18:54:28,872 --> 18:54:33,040
returns a future of the number of rows that were deleted and then it says okay


15821
18:54:33,040 --> 18:54:37,760
which table and then a where clause and a list of objects to pass to your word


15822
18:54:37,760 --> 18:54:42,832
clause so we're going to say the delete from the user table


15823
18:54:42,832 --> 18:54:46,800
and uh the word clause is gonna be


15824
18:54:46,800 --> 18:54:52,160
email is equal to something and the where arts are in this case are


15825
18:54:52,160 --> 18:54:56,960
gonna be email to lowercase okay so i'm gonna put this


15826
18:54:56,960 --> 18:55:00,720
semicolon there and a call in here and then we're going to wait on it and we're


15827
18:55:00,720 --> 18:55:05,600
going to say final and delete the account is a weight


15828
18:55:05,600 --> 18:55:09,040
so in this case i mean as you can see here is what we're basically doing is


15829
18:55:09,040 --> 18:55:12,720
just we're doing formatting we're going to say we're going to say delete


15830
18:55:12,720 --> 18:55:17,120
something from the user table as long as that something's email is equal to


15831
18:55:17,120 --> 18:55:21,680
something and that something is again that email so you're basically saying


15832
18:55:21,680 --> 18:55:25,192
delete as many objects as possible in the user


15833
18:55:25,192 --> 18:55:29,512
table as long as their email is equal to this and remember we made email unique


15834
18:55:29,512 --> 18:55:34,400
so if if we've done our homework right then deleted count is it should either


15835
18:55:34,400 --> 18:55:40,000
be zero meaning that no personal account or no user with this email


15836
18:55:40,000 --> 18:55:45,600
exists in it into table or it should be one meaning that yeah i could delete uh


15837
18:55:45,600 --> 18:55:49,040
without a problem so


15838
18:55:49,040 --> 18:55:53,360
we're actually gonna assert that we're gonna say if deleted count


15839
18:55:53,360 --> 18:55:55,600
is not one


15840
18:55:55,600 --> 18:55:59,280
all right then we're gonna throw an error could not delete the user so i'm


15841
18:55:59,280 --> 18:56:04,000
gonna grab that um exception i'm gonna place it right here


15842
18:56:04,000 --> 18:56:07,832
so we say if we couldn't delete that user we're just gonna say throw could


15843
18:56:07,832 --> 18:56:11,280
not delete user all right


15844
18:56:12,960 --> 18:56:17,760
so we couldn't delete that user


15845
18:56:18,872 --> 18:56:22,400
um all right so let's go ahead


15846
18:56:22,400 --> 18:56:26,872
now that we have done the delete user and and remember you may be asking okay


15847
18:56:26,872 --> 18:56:30,080
why are we throwing a user maybe that user doesn't exist and it should just


15848
18:56:30,080 --> 18:56:33,832
work fine and of course i mean it is going to work fine if you have


15849
18:56:33,832 --> 18:56:37,192
your try and catch statements when you call this function


15850
18:56:37,192 --> 18:56:40,640
what we're saying is that the interface of the node service is going to throw an


15851
18:56:40,640 --> 18:56:45,120
error through an exception if you call the lead user with a non-existing email


15852
18:56:45,120 --> 18:56:49,512
and that's completely fine for a service to do but where you're consuming the


15853
18:56:49,512 --> 18:56:53,920
service then you can manage and say oh this delete function is going to throw


15854
18:56:53,920 --> 18:56:57,040
an exception by like for instance looking at a documentation looking at


15855
18:56:57,040 --> 18:57:01,600
the code then i'm going to handle it where i'm calling it as at the call site


15856
18:57:01,600 --> 18:57:06,080
which is called okay so this is completely fine


15857
18:57:06,080 --> 18:57:10,080
for a service to do then what we're going to do as the next


15858
18:57:10,080 --> 18:57:13,512
point is to create a user and you can see


15859
18:57:13,512 --> 18:57:16,960
it's going to be a future of database user so this is beautiful it's going to


15860
18:57:16,960 --> 18:57:20,160
actually create a user given an email address and then it's going to return


15861
18:57:20,160 --> 18:57:23,920
that database user to us so let's go ahead and do that let's just say


15862
18:57:23,920 --> 18:57:27,192
future database user


15863
18:57:27,192 --> 18:57:33,920
and we're going to say create user and a required string field of email


15864
18:57:33,920 --> 18:57:37,120
and we're going to make it asynchronous all right


15865
18:57:37,120 --> 18:57:40,000
so in here what we're going to do is just going to get the database we're


15866
18:57:40,000 --> 18:57:44,960
going to say final vb is equal to get db database or throw


15867
18:57:44,960 --> 18:57:49,192
and then we're going to say um db.query


15868
18:57:49,192 --> 18:57:53,600
um like that because we're going to actually issue a query to the database


15869
18:57:53,600 --> 18:57:56,160
okay so as you can see this is a helper to


15870
18:57:56,160 --> 18:57:59,760
query table and return items found all optional clauses are unfiltered or


15871
18:57:59,760 --> 18:58:03,440
formatted as sql queries okay


15872
18:58:03,512 --> 18:58:08,800
so um let's go ahead and in here what we're going to first do the


15873
18:58:08,800 --> 18:58:13,120
first thing we're going to encrypt user now we're going to actually check if a


15874
18:58:13,120 --> 18:58:17,600
user with a given email already exists okay and that's where why we're doing


15875
18:58:17,600 --> 18:58:20,720
query and we're not like inserting something into the database to begin


15876
18:58:20,720 --> 18:58:26,552
with we're asking the data to say hey does in the user table


15877
18:58:26,552 --> 18:58:31,680
we're looking for and we're acquiring the database for a person or a user


15878
18:58:31,680 --> 18:58:36,640
whose email is this and that this thing is actually going to return and let's


15879
18:58:36,640 --> 18:58:41,760
have a look at it it's going to return a list of rows that were available in


15880
18:58:41,760 --> 18:58:47,192
the database okay and that list is going to be empty if no


15881
18:58:47,192 --> 18:58:51,920
no entities matched our query okay so let's just call it final results is


15882
18:58:51,920 --> 18:58:57,440
we're querying the user table and we're going to say um


15883
18:58:57,440 --> 18:59:00,720
we're looking for just one item


15884
18:59:00,720 --> 18:59:05,832
and we have a word equal to we're looking for the email and where


15885
18:59:05,832 --> 18:59:08,800
arts are going to be


15886
18:59:09,120 --> 18:59:15,600
email to lowercase semicolon at the end and bring it like this


15887
18:59:15,600 --> 18:59:20,552
equal to bb and we wait okay


15888
18:59:21,040 --> 18:59:25,512
so by us first making a query to the database and


15889
18:59:25,512 --> 18:59:30,400
checking whether a user with the same email exists we're basically avoiding


15890
18:59:30,400 --> 18:59:34,552
getting an error for the uniqueness of that email later


15891
18:59:34,552 --> 18:59:38,080
on at the sql layer


15892
18:59:38,080 --> 18:59:43,512
so in this case you can see results if i move my mouse over it and it says that


15893
18:59:43,512 --> 18:59:48,480
it is a list of rows and if this list is not empty


15894
18:59:48,480 --> 18:59:52,960
it literally means that a user with that co without email address already exists


15895
18:59:52,960 --> 18:59:56,240
in the database so let's then say if


15896
18:59:56,240 --> 19:00:00,720
results is not empty then we're going to say throw


15897
19:00:00,720 --> 19:00:04,872
user already exists uh exception and we don't have that


15898
19:00:04,872 --> 19:00:10,160
exception yet so let's go ahead and find that exception for me at least and


15899
19:00:10,160 --> 19:00:14,480
i can paste it right here so define this exception use already


15900
19:00:14,480 --> 19:00:18,000
exists and let's go ahead and throw that


15901
19:00:18,000 --> 19:00:22,320
exception user already exists okay so


15902
19:00:22,320 --> 19:00:25,512
that's the our if statement so at that point we've


15903
19:00:25,512 --> 19:00:30,640
basically made sure that that user does not exist in the database all right


15904
19:00:30,640 --> 19:00:35,600
so what we need to do then is to go and insert that user now that


15905
19:00:35,600 --> 19:00:38,400
we've checked that he or she doesn't exist in the database so we have to go


15906
19:00:38,400 --> 19:00:42,640
and insert that user so the way we do that is by going and telling our


15907
19:00:42,640 --> 19:00:47,832
database we say db insert and you can see it says in which table and then give


15908
19:00:47,832 --> 19:00:52,640
me a map of keys and values which is the column name


15909
19:00:52,640 --> 19:00:56,800
and the value for that column all right so let's just say we insert into the


15910
19:00:56,800 --> 19:01:00,160
user table which is a constant we've defined from


15911
19:01:00,160 --> 19:01:03,440
before remember and then the map is going to be


15912
19:01:03,440 --> 19:01:09,680
for the uh let's go back to our db browser for sql for note sorry for user


15913
19:01:09,680 --> 19:01:13,360
uh oops for user


15914
19:01:13,360 --> 19:01:18,160
we have id which is primary key not null and auto increment so we don't have to


15915
19:01:18,160 --> 19:01:22,720
insert the id but we need to insert the email so let's go ahead and say we have


15916
19:01:22,720 --> 19:01:26,960
the email call is equal to b it's going to be equal to


15917
19:01:26,960 --> 19:01:32,800
email to lowercase all right so like that and insert if you can have


15918
19:01:32,800 --> 19:01:37,120
a look here it returns a feature of pins and if you read the documentation


15919
19:01:37,120 --> 19:01:41,760
uh let's see if if it gives us some documentation here


15920
19:01:42,480 --> 19:01:46,320
zero could be returned for some specific conflict algorithm algorithm algorithms


15921
19:01:46,320 --> 19:01:50,400
if not inserted so this is going to basically give us that


15922
19:01:50,400 --> 19:01:53,440
uh so what it's going to do in this case is


15923
19:01:53,440 --> 19:01:57,040
actually going to give us a user id back i wish there was some good documentation


15924
19:01:57,040 --> 19:02:01,360
about it oh here you can see it says insert


15925
19:02:01,360 --> 19:02:06,080
returns the id so this is very very good this is


15926
19:02:06,080 --> 19:02:10,552
actually really cool because remember we said we return a database user and a


15927
19:02:10,552 --> 19:02:13,360
database user actually has an id in it so


15928
19:02:13,360 --> 19:02:18,240
if this function here did not return the id how else would we get the id then


15929
19:02:18,240 --> 19:02:21,832
we'd have to insert and then read that same user in order to get the id but we


15930
19:02:21,832 --> 19:02:25,440
don't have to do that so in here then we say final


15931
19:02:25,440 --> 19:02:30,552
and we say user id is equal to await on this function functionality


15932
19:02:30,552 --> 19:02:37,192
and then we just return a database user up so you actually see the code then we


15933
19:02:37,192 --> 19:02:41,680
say user id and the email is email the way it was before


15934
19:02:41,680 --> 19:02:46,800
they added a column there fantastic now we've taken care of the


15935
19:02:46,800 --> 19:02:49,192
create user uh


15936
19:02:49,192 --> 19:02:52,552
function in our database so that's create user i'm gonna follow so now we


15937
19:02:52,552 --> 19:02:56,320
have create user delete user and open and close and a private function in


15938
19:02:56,320 --> 19:03:00,640
order to get the current database okay


15939
19:03:00,640 --> 19:03:05,120
as the caption indicates now we have to take care of a function called get user


15940
19:03:05,120 --> 19:03:10,240
which it can retrieve a user given its email address alright so


15941
19:03:10,240 --> 19:03:14,552
i'm going to go ahead and basically write that function signature


15942
19:03:14,552 --> 19:03:18,552
in here by pasting it from my note so i don't have to type it manually but you


15943
19:03:18,552 --> 19:03:22,720
have it in the captions in case you need to go go to it we just like we did in


15944
19:03:22,720 --> 19:03:25,360
the other functions we're going to get the current database or throw an error


15945
19:03:25,360 --> 19:03:31,360
if the database isn't open so we're going to say db is get database or throw


15946
19:03:31,360 --> 19:03:35,192
then what we're going to do is we're going to query the database for that


15947
19:03:35,192 --> 19:03:38,552
email address and if you remember in the create user we already did that so let's


15948
19:03:38,552 --> 19:03:41,040
go and copy that boof


15949
19:03:41,040 --> 19:03:44,480
like this and i'm going to fold create user and


15950
19:03:44,480 --> 19:03:49,680
let's go in here and paste that code we have the results okay


15951
19:03:49,680 --> 19:03:53,512
so in this case we have to do the opposite you see in create user we


15952
19:03:53,512 --> 19:03:56,800
checked to make sure that


15953
19:03:56,800 --> 19:03:58,800
um the


15954
19:03:58,800 --> 19:04:02,080
results are actually empty because we want to make sure before we create a new


15955
19:04:02,080 --> 19:04:06,720
user with that email that email doesn't already exist but in this case we


15956
19:04:06,720 --> 19:04:09,760
actually have to do the opposite when you want to get a user we want to make


15957
19:04:09,760 --> 19:04:15,360
sure that it does exist so we have to say if results is empty meaning that we


15958
19:04:15,360 --> 19:04:20,240
couldn't find this user with the given email address then we say a throw


15959
19:04:20,240 --> 19:04:24,800
could not find user actually we don't have that yet so we


15960
19:04:24,800 --> 19:04:28,640
need to define a new exception called could not find user and i'm gonna bring


15961
19:04:28,640 --> 19:04:33,192
it up here just like we have to delete user we also


15962
19:04:33,192 --> 19:04:36,800
have could not find user okay and then here we have to throw that could not


15963
19:04:36,800 --> 19:04:42,080
find user all right if the results were empty then we throw


15964
19:04:42,080 --> 19:04:46,480
it up otherwise we have to then construct a database a user so we say


15965
19:04:46,480 --> 19:04:53,040
return database user from row and we say results


15966
19:04:53,040 --> 19:04:57,280
dot first which is the first row that was read


15967
19:04:57,280 --> 19:04:59,192
from the


15968
19:04:59,192 --> 19:05:03,832
user table also remember we set a limit of one so it should be


15969
19:05:03,832 --> 19:05:08,000
it should be either zero rows or one row which is the user with


15970
19:05:08,000 --> 19:05:11,440
the given email address okay


15971
19:05:11,512 --> 19:05:15,120
all right perfect uh let's go ahead to the next function that we have to


15972
19:05:15,120 --> 19:05:19,280
implement and that is for us to be able to create new


15973
19:05:19,280 --> 19:05:23,440
nodes so if you want to be like me and like clean up the code a little bit here


15974
19:05:23,440 --> 19:05:28,000
just fold everything so you only see the function signatures now we can focus on


15975
19:05:28,000 --> 19:05:31,920
the next function which is creates nodes i'm just going to find it


15976
19:05:31,920 --> 19:05:37,440
in my notes here just to make sure i give you the exact


15977
19:05:37,440 --> 19:05:42,320
code necessary in order to create the create note function


15978
19:05:42,320 --> 19:05:47,832
uh if i can find it um creates notes right there okay


15979
19:05:47,832 --> 19:05:50,640
as the as the caption indicates we have to have


15980
19:05:50,640 --> 19:05:55,760
a an asynchronous function called create node it returns a database node and it


15981
19:05:55,760 --> 19:06:00,872
also says who is the owner of this node and it's just going to create a new node


15982
19:06:00,872 --> 19:06:06,552
with an empty text and it's going to associate that and nodes with the given


15983
19:06:06,552 --> 19:06:11,760
database user and for you see the parameter is of type database user and a


15984
19:06:11,760 --> 19:06:16,000
way to get a user is either to create one if it doesn't exist and you get the


15985
19:06:16,000 --> 19:06:20,000
database user or you get an existing user okay so


15986
19:06:20,000 --> 19:06:24,552
excuse me let's go ahead and say future database user


15987
19:06:24,552 --> 19:06:28,160
and we call this function as the nodes indicate create node and we say it's a


15988
19:06:28,160 --> 19:06:33,512
required field of a database user oops sorry it shouldn't return a


15989
19:06:33,512 --> 19:06:37,760
database user it should be database nodes all right and the parameter is the


15990
19:06:37,760 --> 19:06:43,440
owner which is the database user and it's an async function


15991
19:06:43,440 --> 19:06:48,080
so just like we did in the other places we're going to say final db is get


15992
19:06:48,080 --> 19:06:53,512
or throw get the current database or throw


15993
19:06:53,512 --> 19:06:57,600
so what we need to do first is just to make sure that the current user that we


15994
19:06:57,600 --> 19:07:01,680
are passing here already exists in the database because remember database user


15995
19:07:01,680 --> 19:07:06,240
is just a class it can be created by calling its constructor which is right


15996
19:07:06,240 --> 19:07:09,920
here um somewhere here


15997
19:07:09,920 --> 19:07:12,720
so i could just create a new database user


15998
19:07:12,720 --> 19:07:17,120
instance as a database user and a random email and a random id


15999
19:07:17,120 --> 19:07:21,600
but in here when we're trying to create a node for that particular database user


16000
19:07:21,600 --> 19:07:24,800
we need to first make sure that that database user's actually inside the


16001
19:07:24,800 --> 19:07:27,680
database okay and to do that we say final


16002
19:07:27,680 --> 19:07:31,120
bb user equal to await


16003
19:07:31,120 --> 19:07:36,480
and we actually call our own get user function in here we say get user with


16004
19:07:36,480 --> 19:07:41,192
the email of the um owner's email on our email


16005
19:07:41,192 --> 19:07:46,872
so in here we're literally reusing the code that we've created


16006
19:07:46,872 --> 19:07:49,600
then what we're going to do is we're going to


16007
19:07:49,600 --> 19:07:54,552
check whether this database user is actually the owner


16008
19:07:54,552 --> 19:07:58,320
see what do i mean by that i mean that let's


16009
19:07:58,320 --> 19:08:02,160
say that i go and hack things up and i say oh i create a new instance of


16010
19:08:02,160 --> 19:08:05,920
database user manually without inserting into the database and here's the id some


16011
19:08:05,920 --> 19:08:10,240
sort of a random id and then here's the email which i know exists in the


16012
19:08:10,240 --> 19:08:12,960
database now what we need to do in our code is


16013
19:08:12,960 --> 19:08:18,160
just to make sure that the id that you provided in your database


16014
19:08:18,160 --> 19:08:22,160
user here is actually an id of an existing user in our database and to do


16015
19:08:22,160 --> 19:08:26,552
that we could literally use this little beautiful function that we wrote earlier


16016
19:08:26,552 --> 19:08:30,240
which is the equality function of our database user which actually checks our


16017
19:08:30,240 --> 19:08:34,640
id against the other database user's id so if we literally


16018
19:08:34,640 --> 19:08:40,400
say here in here we say if the db user is not the owner which goes into our


16019
19:08:40,400 --> 19:08:45,680
equal equal operator and negates it it says oh if it's not equal to that then


16020
19:08:45,680 --> 19:08:51,280
we say throw could not find user okay


16021
19:08:51,280 --> 19:08:53,680
so after this place


16022
19:08:53,680 --> 19:08:58,480
if we if we actually found the db user with that email and the id was exact id


16023
19:08:58,480 --> 19:09:01,760
as the owner then we can actually be sure that that user does exist in the


16024
19:09:01,760 --> 19:09:05,360
database with the correct email and the correct id okay so let's just put


16025
19:09:05,360 --> 19:09:11,832
comments here in here and say make sure owner exists in the database with the


16026
19:09:11,832 --> 19:09:16,400
correct id that's it okay


16027
19:09:16,400 --> 19:09:20,480
all right after we've done that we also have to take care of actually creating


16028
19:09:20,480 --> 19:09:24,832
um the note so let's go ahead and create a


16029
19:09:24,832 --> 19:09:30,480
um text and here we say the text is uh i'm sorry i noticed that you couldn't


16030
19:09:30,480 --> 19:09:35,440
see that code i hope that you saw this code at least


16031
19:09:35,440 --> 19:09:39,280
that i wrote here but if you didn't i apologize for that because just because


16032
19:09:39,280 --> 19:09:43,760
i'm using a software that i don't see the software all the time on my main


16033
19:09:43,760 --> 19:09:47,760
monitor which is the monitor i'm coding i have to look at a secondary monitor


16034
19:09:47,760 --> 19:09:51,832
which is down here so i'm doing my best to look at that secondary monitor just


16035
19:09:51,832 --> 19:09:54,640
to make sure you're seeing all the content but sometimes i could miss that


16036
19:09:54,640 --> 19:09:57,832
i apologize for that so let's see that


16037
19:09:57,832 --> 19:10:01,192
now you can see this code all right i'm going to bring this code a little bit up


16038
19:10:01,192 --> 19:10:05,040
so let's go ahead and actually create the notes so i'm going to put a comment


16039
19:10:05,040 --> 19:10:10,160
in here and say our work now is to create notes create the notes


16040
19:10:10,160 --> 19:10:12,960
and what we're going to say we're going to say


16041
19:10:12,960 --> 19:10:16,800
db insert just like we did an insert previously for create user we're going


16042
19:10:16,800 --> 19:10:19,512
to do a db insert for the notes and it's in


16043
19:10:19,512 --> 19:10:23,440
the notes table and you see the values in here is going


16044
19:10:23,440 --> 19:10:27,680
to be a map and the map is if you look at the


16045
19:10:27,680 --> 19:10:31,440
insert function is literally a map of string and object so


16046
19:10:31,440 --> 19:10:35,360
let's have a look at our note table in here and you can see notes right click


16047
19:10:35,360 --> 19:10:41,512
modify table it needs user id text and is synced with cloud columns so let's go


16048
19:10:41,512 --> 19:10:46,160
ahead and say user id column user id call


16049
19:10:46,160 --> 19:10:50,640
it's the owners id and we had what else do we have we have


16050
19:10:50,640 --> 19:10:54,800
the text column and that is equal to this text that we


16051
19:10:54,800 --> 19:10:57,760
just created out there which is an empty text basically


16052
19:10:57,760 --> 19:11:00,960
you don't have to do this you don't have to do that part you could just literally


16053
19:11:00,960 --> 19:11:03,440
just say this


16054
19:11:03,440 --> 19:11:09,192
to me it's more readable if i define these things beforehand like that okay


16055
19:11:09,192 --> 19:11:13,512
and then here we just say is synced with


16056
19:11:13,512 --> 19:11:19,040
cloud column and its value is one in this case so we're basically saying that


16057
19:11:19,040 --> 19:11:23,920
we start off with that okay and i just noticed that i had missed a


16058
19:11:23,920 --> 19:11:28,240
column in there remember insert it returns the id of the inserted object in


16059
19:11:28,240 --> 19:11:34,160
the database and it's a future so let's then say final note id is equal to a


16060
19:11:34,160 --> 19:11:40,240
waiting on that function to insert the notes into the note table


16061
19:11:41,512 --> 19:11:44,960
all right now that that is done we're going to


16062
19:11:44,960 --> 19:11:49,600
actually return a new note instance and return it a database note so what we're


16063
19:11:49,600 --> 19:11:51,832
going to do in here we're going to say final


16064
19:11:51,832 --> 19:11:56,480
note is equal to database note notes like that


16065
19:11:56,480 --> 19:12:00,160
and for the id we're going to say note id i'm going to bring it up so you see


16066
19:12:00,160 --> 19:12:02,552
it better


16067
19:12:02,872 --> 19:12:07,760
and for the user id we're going to say owner id text is text so this is another


16068
19:12:07,760 --> 19:12:11,440
reason to have it defined like a constant like i did so that we can reuse


16069
19:12:11,440 --> 19:12:14,640
it here and there and is synced with cloud what should we


16070
19:12:14,640 --> 19:12:19,192
do there we should probably just say true okay


16071
19:12:19,280 --> 19:12:23,440
creating a note you have to return it then inside your um asynchronous


16072
19:12:23,440 --> 19:12:26,640
function all right i'm going to put a comma here as well just to make sure


16073
19:12:26,640 --> 19:12:31,360
formatting is in place all right now we inserted notes into the


16074
19:12:31,360 --> 19:12:37,120
database and we also created a database node to return that from our function


16075
19:12:37,120 --> 19:12:40,720
wow a lot of code a lot of code but i hope


16076
19:12:40,720 --> 19:12:44,640
you're sticking with me throughout this chapter so now we have create note


16077
19:12:44,640 --> 19:12:47,760
as the caption indicates now we have to work on a function that allows us to


16078
19:12:47,760 --> 19:12:52,000
delete a node because remember we're going to allow the user to select a node


16079
19:12:52,000 --> 19:12:56,080
in the database later sorry select the node on the user interface which that


16080
19:12:56,080 --> 19:12:59,832
user themselves have created and be able to delete that notes all right so we


16081
19:12:59,832 --> 19:13:04,720
need a function that allows us to delete a node using its id all right


16082
19:13:04,720 --> 19:13:08,480
so let's go i'm just going to bring the


16083
19:13:08,480 --> 19:13:12,160
basics of this function or almost the entirety of this function actually here


16084
19:13:12,160 --> 19:13:16,480
so we don't have to code that manually i'm going to paste it here


16085
19:13:16,480 --> 19:13:19,512
and as you can see here the signature of this function i'm going to explain it


16086
19:13:19,512 --> 19:13:23,280
all the signature up to this function is called delete node as an asynchronous


16087
19:13:23,280 --> 19:13:27,600
function as the caption at the bottom of the screen in case we do the get db


16088
19:13:27,600 --> 19:13:31,512
and then we're literally just calling the delete function which is the exact


16089
19:13:31,512 --> 19:13:35,440
same thing which i believe we did in delete user let's have a look at that


16090
19:13:35,440 --> 19:13:39,512
you see delete count db delete in the table


16091
19:13:39,512 --> 19:13:44,720
and then your work clause and in this case inside the delete note we're saying


16092
19:13:44,720 --> 19:13:50,000
from the note table delete an object which has its column id equal to


16093
19:13:50,000 --> 19:13:54,720
something and then we're passing that something in the where arcs


16094
19:13:54,720 --> 19:14:00,160
now if we couldn't delete anything if that note didn't exist with the given id


16095
19:14:00,160 --> 19:14:03,600
and we're throwing an exception called could not delete node and that's an


16096
19:14:03,600 --> 19:14:07,120
exception that we haven't defined yet and we're gonna have to define that at


16097
19:14:07,120 --> 19:14:10,640
the bottom all the other exceptions that we've defined so far so that's could not


16098
19:14:10,640 --> 19:14:14,320
delete node implements exception all right


16099
19:14:14,320 --> 19:14:18,872
so i thought to i mean i usually don't copy paste code even if it's my own code


16100
19:14:18,872 --> 19:14:23,192
but i thought this is such an easy code we have literally done every part of


16101
19:14:23,192 --> 19:14:28,000
something similar before we've done the get db we've done the deletes before


16102
19:14:28,000 --> 19:14:32,480
we've done this if statement before so it's nothing new and i don't think you


16103
19:14:32,480 --> 19:14:36,240
have to have me here spending time explaining the


16104
19:14:36,240 --> 19:14:38,872
same thing over and over again and that's why i copy pasted this delete


16105
19:14:38,872 --> 19:14:41,512
note here okay


16106
19:14:41,832 --> 19:14:47,192
all right then what we need also is the ability for us to delete all nodes from


16107
19:14:47,192 --> 19:14:51,360
our database how do we do that as you can see we need a function called future


16108
19:14:51,360 --> 19:14:55,760
means which is which indicates a number of nodes that were deleted from the


16109
19:14:55,760 --> 19:14:59,920
database we call it delete all nodes and it's an async function


16110
19:14:59,920 --> 19:15:04,800
here okay and uh what we need to do in here is


16111
19:15:04,800 --> 19:15:10,160
just it's very simple we're going to say final db is equal to get or throw


16112
19:15:10,160 --> 19:15:14,800
and then we say db delete and then we just literally say uh


16113
19:15:14,800 --> 19:15:22,000
note oops note table uh boom boom await on it all right


16114
19:15:22,000 --> 19:15:25,680
and you see this if you issue the delete command on


16115
19:15:25,680 --> 19:15:30,480
on your database with a given table all what it does is that it deletes every


16116
19:15:30,480 --> 19:15:35,832
row inside that uh table for you and it will return the number of rows that were


16117
19:15:35,832 --> 19:15:38,872
affected so you can see it returns the number of rows affected so that's


16118
19:15:38,872 --> 19:15:44,960
exactly what we want to return so just return that value in this function right


16119
19:15:44,960 --> 19:15:48,800
perfect good stuff we've done some big functions and some


16120
19:15:48,800 --> 19:15:52,400
small functions so it's so refreshing to have some small functions as well


16121
19:15:52,400 --> 19:15:57,360
even for me so so what we need to do now is to create


16122
19:15:57,360 --> 19:16:02,240
the functionality for fetching a specific node you see when we actually


16123
19:16:02,240 --> 19:16:05,920
get to the ui where we render all the nodes that are inside the database to


16124
19:16:05,920 --> 19:16:09,680
our user in the main ui of our application we're going to list all the


16125
19:16:09,680 --> 19:16:13,040
nodes and then if the user presses on any specific node then we're going to


16126
19:16:13,040 --> 19:16:17,360
get the id of that node and then read that node's information from the


16127
19:16:17,360 --> 19:16:21,192
database and that's why we need a function that takes an id of a node and


16128
19:16:21,192 --> 19:16:25,512
actually grabs that node for us from the database okay


16129
19:16:25,512 --> 19:16:30,080
so let's go ahead and program that so i'm gonna bring bring the uh


16130
19:16:30,080 --> 19:16:33,760
i'm gonna bring the function signature and we're not gonna


16131
19:16:33,760 --> 19:16:37,832
copy paste it this time let me copy paste the function actually i mean so


16132
19:16:37,832 --> 19:16:43,040
let's go ahead and get the db so this is easy for you now you know how to do that


16133
19:16:43,040 --> 19:16:46,400
and we're going to query the database so we're just going to say final notes


16134
19:16:46,400 --> 19:16:48,872
which is going to be like the


16135
19:16:48,872 --> 19:16:54,160
iterable list of maps that the sqlite database can read


16136
19:16:54,160 --> 19:16:58,640
so we're going to say await on the db query


16137
19:16:58,640 --> 19:17:01,920
and we're going to say in the notes table i'm going to remove all these


16138
19:17:01,920 --> 19:17:06,872
overlays so you see the code better notes table and we're going to just say


16139
19:17:06,872 --> 19:17:12,080
um remit one because we want to get one note all right


16140
19:17:12,080 --> 19:17:17,040
and the word clause is going to be um using its id you see we're gonna say


16141
19:17:17,040 --> 19:17:21,600
id equal to something and the where arts are gonna be just the id itself like


16142
19:17:21,600 --> 19:17:26,552
that boom and a semicolon like that all right


16143
19:17:26,960 --> 19:17:31,920
and now if this notes uh which is


16144
19:17:31,920 --> 19:17:36,080
you can see it's a list if notes is empty we're going to throw an


16145
19:17:36,080 --> 19:17:40,552
exception so we're going to say um could not find notes do we have that


16146
19:17:40,552 --> 19:17:45,360
uh could not find user we have could not find notes we don't have so let's go and


16147
19:17:45,360 --> 19:17:48,800
define it i'm going to bring it from


16148
19:17:48,800 --> 19:17:52,400
my own notes so we don't have to write that manually


16149
19:17:52,400 --> 19:17:56,480
so define an exception called could not find node implements exception all right


16150
19:17:56,480 --> 19:18:01,440
and then here we just throw it could not find nodes so if you gave us an id we


16151
19:18:01,440 --> 19:18:04,640
couldn't find it in database we just throw an exception otherwise


16152
19:18:04,640 --> 19:18:09,440
we need to actually create an instance of our database node so we say return


16153
19:18:09,440 --> 19:18:17,600
database note from row and nodes first okay so that's similar to how we did it


16154
19:18:17,600 --> 19:18:21,680
before for getting a user as well


16155
19:18:22,320 --> 19:18:25,760
all right now we also need


16156
19:18:25,760 --> 19:18:31,192
a functionality that allows us to get all nodes in the system you see we have


16157
19:18:31,192 --> 19:18:35,440
get node to delete all nodes delete node create node but we don't have any


16158
19:18:35,440 --> 19:18:39,120
functionality that can get all the nodes and that is the exact function we're


16159
19:18:39,120 --> 19:18:42,872
going to use the main interface of our application to render all the nodes for


16160
19:18:42,872 --> 19:18:46,872
a given user okay so


16161
19:18:46,872 --> 19:18:50,720
let me just make sure that i have that function in here


16162
19:18:50,720 --> 19:18:55,192
and it is called get all nodes


16163
19:18:59,440 --> 19:19:03,440
let's see we can find a functionality get all


16164
19:19:03,440 --> 19:19:06,160
nodes somewhere


16165
19:19:06,480 --> 19:19:11,440
create note we have get user we have


16166
19:19:11,920 --> 19:19:15,920
and perhaps i don't actually have a functionality right now i can see in my


16167
19:19:15,920 --> 19:19:20,872
notes that i don't actually have get all notes but that is actually not a problem


16168
19:19:20,872 --> 19:19:25,832
at all in the get note here you see we have that we have to define this gets


16169
19:19:25,832 --> 19:19:30,240
all notes so let's go ahead and do that i'm going to copy the signature of this


16170
19:19:30,240 --> 19:19:33,360
function and i'm going to bring it here and we're


16171
19:19:33,360 --> 19:19:35,760
going to say we're going to return a future


16172
19:19:35,760 --> 19:19:39,832
of list of database notes and we're saying get


16173
19:19:39,832 --> 19:19:46,552
all notes like this all right excuse me and it shouldn't require any parameters


16174
19:19:46,552 --> 19:19:50,320
we're just going to ask the database to return all the notes all right


16175
19:19:50,320 --> 19:19:54,160
sorry about that again and i'm going to copy the functionality


16176
19:19:54,160 --> 19:19:58,400
from here for gets notes


16177
19:19:58,400 --> 19:20:02,872
excuse me again and in here we're not now going to limit


16178
19:20:02,872 --> 19:20:07,280
anything and we don't have anywhere clause okay so just like that we're


16179
19:20:07,280 --> 19:20:12,160
going to say db query from the note table and we get all the notes then if


16180
19:20:12,160 --> 19:20:15,440
notes is empty then we say could not find notes


16181
19:20:15,440 --> 19:20:20,480
or perhaps we could just say notes we can see it's a list we can


16182
19:20:20,480 --> 19:20:23,280
literally not have any special logic in here that


16183
19:20:23,280 --> 19:20:27,192
says could not find note or anything and i'm gonna have a look at my notes in


16184
19:20:27,192 --> 19:20:29,440
here


16185
19:20:30,480 --> 19:20:33,600
that's fine um what we need to do now now that we have


16186
19:20:33,600 --> 19:20:38,320
our notes we can map them so we say notes map and you can name this


16187
19:20:38,320 --> 19:20:42,960
parameter and and in your mapping you need to say okay i get a database note


16188
19:20:42,960 --> 19:20:46,480
which which you can see is of type let me see if i can move my mouse over here


16189
19:20:46,480 --> 19:20:51,600
it's a map of string object this matches perfectly into our database notes


16190
19:20:51,600 --> 19:20:56,320
but from row and then you say from this n


16191
19:20:56,320 --> 19:21:00,720
let's actually call it note row or something like that and we put it there


16192
19:21:00,720 --> 19:21:03,680
and if you say final result


16193
19:21:03,680 --> 19:21:06,640
and now i think this is an eye treble to be honest with you so you can see it's


16194
19:21:06,640 --> 19:21:10,640
an iterable of database notes okay so what we could do is actually change our


16195
19:21:10,640 --> 19:21:14,800
future in here instead of saying list we return on iturble okay so


16196
19:21:14,800 --> 19:21:20,080
in order for the sake of uh cleanliness i'm also gonna change our captioning


16197
19:21:20,080 --> 19:21:24,872
here and say iterable so you see the correct information on your screen as


16198
19:21:24,872 --> 19:21:27,600
well all right


16199
19:21:27,600 --> 19:21:32,160
so that's our result so all we need to do in here just to return it that's it


16200
19:21:32,160 --> 19:21:34,640
so so like that


16201
19:21:34,640 --> 19:21:38,480
perfect so um and that's the functionality of get


16202
19:21:38,480 --> 19:21:43,192
all nodes so it's very simple nothing nothing special


16203
19:21:43,760 --> 19:21:47,680
and now uh what we need to do is just to


16204
19:21:47,680 --> 19:21:51,120
wrap it up there's one last function that we have to implement and remember


16205
19:21:51,120 --> 19:21:54,080
when we go to the main ui of the application we're going to allow the


16206
19:21:54,080 --> 19:21:57,760
user to create nodes list all their created nodes and also be able to click


16207
19:21:57,760 --> 19:22:01,760
on any specific node in order to update the contents of that node so we need a


16208
19:22:01,760 --> 19:22:08,800
function called update note so let's go and bring my notes in here update notes


16209
19:22:08,800 --> 19:22:13,600
so let's go ahead and create the signature for that function and future


16210
19:22:13,600 --> 19:22:18,400
database notes and we say update notes


16211
19:22:18,400 --> 19:22:22,480
like that and we're going to have some required parameters which we actually


16212
19:22:22,480 --> 19:22:27,512
grab an existing database note object and then we


16213
19:22:27,512 --> 19:22:31,360
expect the user to also provide a new text so let's just say required


16214
19:22:31,360 --> 19:22:36,720
a database note notes and then we say it's the required


16215
19:22:36,720 --> 19:22:40,720
string of text just like that


16216
19:22:43,680 --> 19:22:46,872
you're already familiar with this we're gonna get the database we say get or


16217
19:22:46,872 --> 19:22:50,160
throw okay


16218
19:22:50,160 --> 19:22:54,240
and we're just gonna issue an update to our


16219
19:22:54,240 --> 19:22:59,440
database we haven't done updates before for our sql like database so that's what


16220
19:22:59,440 --> 19:23:02,320
we're going to do now so let's just say db.update


16221
19:23:02,320 --> 19:23:06,160
and you can see it says give us a table or give me the table and


16222
19:23:06,160 --> 19:23:10,832
your list of updates so let's go in here and say


16223
19:23:10,832 --> 19:23:15,512
update the uh note table


16224
19:23:15,512 --> 19:23:18,240
um and actually before doing that how do we


16225
19:23:18,240 --> 19:23:22,720
make sure that this table that note already exists in the database because


16226
19:23:22,720 --> 19:23:27,832
like we saw earlier anybody can go and add


16227
19:23:27,832 --> 19:23:30,800
or create an instance of a database node it doesn't necessarily have to be in the


16228
19:23:30,800 --> 19:23:33,920
database but we kind of need to make sure that it already is stored in the


16229
19:23:33,920 --> 19:23:38,800
database because before we can updates to update its text so we already have a


16230
19:23:38,800 --> 19:23:42,552
functionality that does that remember gets notes with an id so we could


16231
19:23:42,552 --> 19:23:46,872
literally just say await


16232
19:23:46,872 --> 19:23:50,872
it's note and then we say note id


16233
19:23:50,872 --> 19:23:54,400
and you see this actually throws an error


16234
19:23:54,400 --> 19:23:58,080
if you go to this function it throws an error called could not find note which


16235
19:23:58,080 --> 19:24:02,720
is exactly what we're after but we're not actually after the the result of it


16236
19:24:02,720 --> 19:24:06,400
we don't want the actual note because we're assuming that that is the same


16237
19:24:06,400 --> 19:24:12,080
object as this so we're just ignoring its return value okay


16238
19:24:12,080 --> 19:24:14,480
in the update we're going to say the notes table


16239
19:24:14,480 --> 19:24:17,512
and the values that we're going to provide are two we're going to say the


16240
19:24:17,512 --> 19:24:21,280
text column i need a new text


16241
19:24:21,280 --> 19:24:25,680
and we're upon you updating the text of a node we're also going to assume that


16242
19:24:25,680 --> 19:24:30,480
well all of a sudden this node is not synced with the back end or with the


16243
19:24:30,480 --> 19:24:34,320
data with the uh with the cloud database anymore okay


16244
19:24:34,320 --> 19:24:39,512
so that goes back to our um async with cloud column


16245
19:24:39,512 --> 19:24:43,440
so let's go in here and say is synced with cloud column then it's going to be


16246
19:24:43,440 --> 19:24:47,760
set to zero remember that was an integer field all right update is an


16247
19:24:47,760 --> 19:24:50,400
asynchronous function so you have the weight on it


16248
19:24:50,400 --> 19:24:54,320
and it also returns the number of feel a number of rows that were updated so


16249
19:24:54,320 --> 19:24:58,640
we're going to say updated updates count


16250
19:24:59,120 --> 19:25:01,120
sorry final


16251
19:25:01,120 --> 19:25:06,872
updates count is equal to a weight on db update all right now by you


16252
19:25:06,872 --> 19:25:11,040
at the call side calling the updates note function we're assuming that that


16253
19:25:11,040 --> 19:25:15,192
note should have existed in the database okay so in this case the


16254
19:25:15,192 --> 19:25:22,080
updates count should it should be a value other than zero okay so we say if


16255
19:25:22,080 --> 19:25:27,120
updates count is equal to zero bring the code up so you can see it


16256
19:25:27,120 --> 19:25:30,832
and then we have to throw a new exception called could not update


16257
19:25:30,832 --> 19:25:35,280
note and paste that exception from my notes


16258
19:25:35,280 --> 19:25:38,720
so it should look like this class could not update node implements exception all


16259
19:25:38,720 --> 19:25:41,920
right so i need you to write this code as well


16260
19:25:41,920 --> 19:25:46,320
and if updates notes if updates count is zero then we're


16261
19:25:46,320 --> 19:25:51,120
gonna say throw could not update note


16262
19:25:51,120 --> 19:25:53,832
else now you can see what we promised is to


16263
19:25:53,832 --> 19:25:58,960
return a new database note so let's go and just say


16264
19:25:58,960 --> 19:26:04,080
do we then i mean that's that's the thing we've updated that uh and how do


16265
19:26:04,080 --> 19:26:09,760
we return an update a database note to you well we could just do this


16266
19:26:09,760 --> 19:26:14,400
turn its uh notes with that note id because


16267
19:26:14,400 --> 19:26:19,360
we already have gets notes function implemented all right


16268
19:26:19,440 --> 19:26:23,040
wow very well done if you could stick with


16269
19:26:23,040 --> 19:26:28,400
me throughout this chapter because we did a lot of work so um i'm gonna fold


16270
19:26:28,400 --> 19:26:32,000
this fold this you can see we have a lot of functions here


16271
19:26:32,000 --> 19:26:36,080
quite a lot of work and i think so far this has been the biggest chapter of


16272
19:26:36,080 --> 19:26:40,800
this uh of this course but we've also had a lot to do a lot of information i


16273
19:26:40,800 --> 19:26:44,320
hope you could stick with me let's go ahead now and clean up our


16274
19:26:44,320 --> 19:26:48,080
exceptions as the caption indicates let's put all our crowd exceptions in


16275
19:26:48,080 --> 19:26:54,400
one file inside lib services crowd crud underscore quad exceptions okay


16276
19:26:54,400 --> 19:26:57,832
so let's go in here and


16277
19:26:58,480 --> 19:27:04,400
uh actually it should say crowd slash crowd exceptions so um if i look at my


16278
19:27:04,400 --> 19:27:10,480
notes inside services crud i'm gonna fix this caption and i apologize for


16279
19:27:10,480 --> 19:27:18,000
that i'm just gonna fix it on on the go like this and i'm gonna bring it up


16280
19:27:18,000 --> 19:27:22,160
and actually it should say crowd slash crud underscore exception so i think


16281
19:27:22,160 --> 19:27:25,360
there was more than one error in there and cros


16282
19:27:25,360 --> 19:27:30,320
required exceptions so it should be lip services slash quad


16283
19:27:30,320 --> 19:27:34,080
exceptions all right so let's go and fix that up


16284
19:27:34,080 --> 19:27:37,832
inside services we have crowd already and we have nodes service dart let's


16285
19:27:37,832 --> 19:27:42,720
create a new file in there and we just call it crud exceptions dot art now i


16286
19:27:42,720 --> 19:27:46,800
need you to go into your node service dart file and grab all those exceptions


16287
19:27:46,800 --> 19:27:52,000
that you define here and just cut them with command x on macintosh or control x


16288
19:27:52,000 --> 19:27:57,120
in linux and windows and then bring it into your quad exceptions alright and


16289
19:27:57,120 --> 19:27:59,920
save this file


16290
19:28:00,160 --> 19:28:04,920
and let me also have a look here


16291
19:28:06,552 --> 19:28:09,920
just to make sure my notes are clean as well for you


16292
19:28:09,920 --> 19:28:14,400
uh so because i i noticed that the next caption was also a little bit incorrect


16293
19:28:14,400 --> 19:28:18,000
now we need to go and use that crowd exceptions in our note series because as


16294
19:28:18,000 --> 19:28:21,600
you can see it is marked as red right now because there were so many


16295
19:28:21,600 --> 19:28:26,080
exceptions thrown that um this file doesn't have access to anymore so i'm


16296
19:28:26,080 --> 19:28:29,120
gonna get help from visual studio code here with command dot and say import


16297
19:28:29,120 --> 19:28:34,320
crowd exceptions and all those errors are gonna go away


16298
19:28:34,320 --> 19:28:39,040
all right well done huge chapter a lot of work done and congratulations for


16299
19:28:39,040 --> 19:28:44,080
sticking with me through this chapter now as is the tradition we're gonna now


16300
19:28:44,080 --> 19:28:50,872
go ahead and commit our work and um also tag it so i'm going to make the screen a


16301
19:28:50,872 --> 19:28:54,872
little bit bigger let's go to our terminal here


16302
19:28:54,872 --> 19:29:00,552
and i'm then going to say in here we're going to tag and commit our work as step


16303
19:29:00,552 --> 19:29:05,040
11 so let's first get status and then we say git add all


16304
19:29:05,040 --> 19:29:09,680
hit status again here are the things we've done pop spec was changed because


16305
19:29:09,680 --> 19:29:14,480
we added three dependencies uh provide a path provider path


16306
19:29:14,480 --> 19:29:18,800
and and also i believe actually it was called path and path provider right


16307
19:29:18,800 --> 19:29:22,552
yes path path provider and sqlite so that's


16308
19:29:22,552 --> 19:29:25,920
why these two files have been changed node service is completely new and crowd


16309
19:29:25,920 --> 19:29:30,720
exceptions is also new so git commit


16310
19:29:30,720 --> 19:29:36,000
uh step 11 as the caption indicates um git push


16311
19:29:36,000 --> 19:29:40,400
which they commit first remember and then we tag it as step 11


16312
19:29:40,400 --> 19:29:45,832
and we push our tags as well fantastic


16313
19:29:45,832 --> 19:29:49,512
now congratulations again for going through this chapter with me it was a


16314
19:29:49,512 --> 19:29:52,872
huge chapter i think the biggest so far now we need to get ready for the next


16315
19:29:52,872 --> 19:29:56,800
chapter as a tradition for the other chapters at the end we talk a little bit


16316
19:29:56,800 --> 19:30:00,240
about what we're going to do in the next chapter just to get ready for it


16317
19:30:00,240 --> 19:30:03,680
so we've done a lot of work on the data now


16318
19:30:03,680 --> 19:30:08,640
we need to fuse it together with our uh with our ui and in order to do that we


16319
19:30:08,640 --> 19:30:12,400
need to talk about streams and stream controllers you see


16320
19:30:12,400 --> 19:30:16,160
when you're in the main ui of your application after you've logged in you


16321
19:30:16,160 --> 19:30:20,960
need to see a list of your notes but what happens if you see the list of


16322
19:30:20,960 --> 19:30:24,000
your notes and then you press the plus button to create a new note and this


16323
19:30:24,000 --> 19:30:27,192
plus button is a button that we're going to create soon in the next chapters what


16324
19:30:27,192 --> 19:30:31,512
happens if you press the plus button should you then send manually a signal


16325
19:30:31,512 --> 19:30:37,192
to your ui and say hey a new note was created update the list that is a lot of


16326
19:30:37,192 --> 19:30:42,552
work and for that you can do things a lot cleaner if you use streams and


16327
19:30:42,552 --> 19:30:46,552
stream controllers and that's what we're going to talk about in the next chapter


16328
19:30:46,552 --> 19:30:49,600
so you may want to have a short pause after


16329
19:30:49,600 --> 19:30:53,760
this chapter since it was so big so do that please get your refreshments coffee


16330
19:30:53,760 --> 19:30:57,280
tea whatever you want and i'll see you in the next chapter


16331
19:30:57,280 --> 19:31:01,920
hello everyone and welcome to chapter 28 of the swata course in previous chapters


16332
19:31:01,920 --> 19:31:05,832
we've been talking quite a lot about crud create read update delete and we


16333
19:31:05,832 --> 19:31:10,160
talked about how we can for instance have raw functionality in our node


16334
19:31:10,160 --> 19:31:13,760
service so that we can read from the database delete stuff from the database


16335
19:31:13,760 --> 19:31:19,280
create users etc etc now we haven't really worked in the past two chapters


16336
19:31:19,280 --> 19:31:23,040
so much with our user interface and that's completely okay because sometimes


16337
19:31:23,040 --> 19:31:25,760
as you're developing applications or you're developing software you may have


16338
19:31:25,760 --> 19:31:29,512
to take detours in order to create the functionality that is later gonna be


16339
19:31:29,512 --> 19:31:32,080
needed for your user interface and you'll do


16340
19:31:32,080 --> 19:31:35,832
the same thing if you're doing um back-end development like uh web


16341
19:31:35,832 --> 19:31:39,192
development so i myself do web development with django and sometimes i


16342
19:31:39,192 --> 19:31:43,280
have to go and create a lot of functionality on the backend first


16343
19:31:43,280 --> 19:31:47,680
before i can actually go and mirror that functionality on the ui which is for


16344
19:31:47,680 --> 19:31:51,120
instance the web browser where the user is consuming the content so


16345
19:31:51,120 --> 19:31:53,360
and if even if you're a designer for


16346
19:31:53,360 --> 19:31:58,080
instance you're working with figma you can't always produce user-facing content


16347
19:31:58,080 --> 19:32:01,192
like prototypes you may have to sometimes go and design for sure


16348
19:32:01,192 --> 19:32:04,552
components and then after you've done your components and you'll be ready to


16349
19:32:04,552 --> 19:32:08,480
put those components into screens and display that to your product owner or


16350
19:32:08,480 --> 19:32:11,440
your developers so


16351
19:32:11,440 --> 19:32:15,360
um so far we've been working a lot with


16352
19:32:15,360 --> 19:32:19,600
what the user doesn't see and we have to like stitch


16353
19:32:19,600 --> 19:32:23,440
up those last bits and pieces before we can actually go to the ui and manipulate


16354
19:32:23,440 --> 19:32:29,360
that data which our notes service can right now manipulate we're missing a few


16355
19:32:29,360 --> 19:32:32,320
functionalities which we're going to develop in this chapter in the node


16356
19:32:32,320 --> 19:32:34,400
service and


16357
19:32:34,400 --> 19:32:38,160
what we're going to work with in this chapter especially is with streams and


16358
19:32:38,160 --> 19:32:42,320
stream controllers so let me bring up the caption


16359
19:32:42,320 --> 19:32:45,680
that i'm going to talk about now so what are streams and what are stream


16360
19:32:45,680 --> 19:32:49,440
controllers well if you are a developer already you've


16361
19:32:49,440 --> 19:32:52,720
done software development you may know something uh


16362
19:32:52,720 --> 19:32:58,000
about reactive programming and reactive programming is where you have


16363
19:32:58,000 --> 19:33:02,000
a bunch of data sitting somewhere for instance and then you perform some


16364
19:33:02,000 --> 19:33:06,080
operations on that data and this data gets updated and you will be notified of


16365
19:33:06,080 --> 19:33:10,480
these updates through some sort of a pipe of information so


16366
19:33:10,480 --> 19:33:13,760
and if you haven't done software development before so reactive


16367
19:33:13,760 --> 19:33:16,000
programming and streams and stream controls may be a little bit


16368
19:33:16,000 --> 19:33:20,160
overwhelming but we're going to start very slow so there's nothing to be


16369
19:33:20,160 --> 19:33:24,160
worried about i'm going to explain everything as much as i can to make


16370
19:33:24,160 --> 19:33:27,440
things easier for you but if you don't have development


16371
19:33:27,440 --> 19:33:30,800
background from before software engineering background there's not so


16372
19:33:30,800 --> 19:33:34,320
much that i can explain about streams and stream controllers for you to


16373
19:33:34,320 --> 19:33:39,360
completely understand how they work all i can say is that imagine a stream is


16374
19:33:39,360 --> 19:33:44,480
just a point of time or a stream is basically an entity that controls data


16375
19:33:44,480 --> 19:33:48,800
all right just say something that keeps hold of data and then you perform things


16376
19:33:48,800 --> 19:33:53,512
on it so you say add this data or remove this data add this data with this data


16377
19:33:53,512 --> 19:33:58,080
and give me the results so it keeps hold of its data and it has a


16378
19:33:58,080 --> 19:34:03,120
timeline so it starts at some point manipulates its data and then it either


16379
19:34:03,120 --> 19:34:07,512
errors out at the end saying that oops i can't do this and then it just dies or


16380
19:34:07,512 --> 19:34:11,192
it will just complete at some point and also there is a third category of


16381
19:34:11,192 --> 19:34:14,480
streams where the data just keeps living on so


16382
19:34:14,480 --> 19:34:16,960
it never basically um


16383
19:34:16,960 --> 19:34:20,240
completes or errors out so


16384
19:34:20,240 --> 19:34:25,040
so just think of streams as pipes of data types of information that you can


16385
19:34:25,040 --> 19:34:28,960
manipulate and you can also perform operations on


16386
19:34:28,960 --> 19:34:33,680
so if that's what streams are then what are streams stream controllers in dart a


16387
19:34:33,680 --> 19:34:40,640
stream controller is your interface um to your streams so


16388
19:34:40,640 --> 19:34:45,600
you have the stream which is sitting right here and you can't


16389
19:34:45,600 --> 19:34:49,832
you you don't basically usually go and add stuff to a stream directly or read


16390
19:34:49,832 --> 19:34:54,000
stuff from the stream what you can do is to have a stream controller where you're


16391
19:34:54,000 --> 19:34:58,320
manipulating the stream for instance our node service and this stream controller


16392
19:34:58,320 --> 19:35:02,552
is able to for instance add stuff to the stream or read stuff from the stream so


16393
19:35:02,552 --> 19:35:05,760
just imagine the stream controller is kind of like the manager of that stream


16394
19:35:05,760 --> 19:35:10,160
so if all of this sounds a little bit um high level and abstract i completely


16395
19:35:10,160 --> 19:35:13,680
understand that it usually is when you're working with reactive programming


16396
19:35:13,680 --> 19:35:17,192
some people actually hate reactive programming but


16397
19:35:17,192 --> 19:35:20,640
as one of my colleagues used to say it's always easier to


16398
19:35:20,640 --> 19:35:25,512
hate than to learn and my approach is usually if i hate something is because


16399
19:35:25,512 --> 19:35:29,040
maybe i haven't really fully understood it so there are very few things in my


16400
19:35:29,040 --> 19:35:34,552
life that i've actually learned which i hated after learning so


16401
19:35:34,552 --> 19:35:38,400
if you're a bit overwhelmed by streams and stream controllers or reactive


16402
19:35:38,400 --> 19:35:41,600
programming don't be they're actually really good if you know how to use them


16403
19:35:41,600 --> 19:35:46,160
so they're very easy to use as long as you get a handle of uh


16404
19:35:46,160 --> 19:35:50,720
how basically it's getting a handle of the right way of using them so that's


16405
19:35:50,720 --> 19:35:52,960
what i'm going to show you in this chapter and then


16406
19:35:52,960 --> 19:35:57,832
upcoming chapters as well so let's go excuse me let's go to our


16407
19:35:57,832 --> 19:36:00,960
application i'm going to put the code right here let's have a look at what


16408
19:36:00,960 --> 19:36:04,640
we've written so far i'm going to increase the size of the screen and then


16409
19:36:04,640 --> 19:36:09,512
decrease the font size a little bit so it's not as ginormous


16410
19:36:09,512 --> 19:36:11,832
so um


16411
19:36:11,832 --> 19:36:15,440
let's have a look at what we've done so far you can see we have quite a lot of


16412
19:36:15,440 --> 19:36:19,760
functionality in here we have for instance delete all nodes


16413
19:36:19,760 --> 19:36:23,440
then we have get all nodes


16414
19:36:23,440 --> 19:36:27,760
we have update nodes so quite a lot of functions


16415
19:36:27,760 --> 19:36:31,680
but if you see all of these are directly talking with our database with our


16416
19:36:31,680 --> 19:36:34,640
sqlite database none of these functionalities are


16417
19:36:34,640 --> 19:36:38,240
actually telling or we don't even have to talk about


16418
19:36:38,240 --> 19:36:41,600
functions but if you look at the node service in it itself it doesn't contain


16419
19:36:41,600 --> 19:36:47,512
a list of nodes so it doesn't have the ability to cache these nodes so it's as


16420
19:36:47,512 --> 19:36:50,240
soon as you give it a command the node services i don't know what to do i'm


16421
19:36:50,240 --> 19:36:53,680
just going to go to the database and do what you said i have to do


16422
19:36:53,680 --> 19:36:58,400
however this could i mean in not in our application but in an application that


16423
19:36:58,400 --> 19:37:02,552
has millions and millions of rows of data for instance this could not be such


16424
19:37:02,552 --> 19:37:06,080
a good idea that you always go to the database and


16425
19:37:06,080 --> 19:37:11,512
read the entire thing in order to for instance delete one row or um basically


16426
19:37:11,512 --> 19:37:15,120
these operations should kind of be like cached inside your application before


16427
19:37:15,120 --> 19:37:19,760
you go and hit the database hopefully and what we're going to do as you can


16428
19:37:19,760 --> 19:37:22,960
see in the caption here we're going to actually start caching a list of notes


16429
19:37:22,960 --> 19:37:26,872
that the node service has so the goal is for the note servers to be able to


16430
19:37:26,872 --> 19:37:32,552
expose a list of notes that the ui can then render on this on the user screen


16431
19:37:32,552 --> 19:37:36,640
so if the user goes and presses the plus button then that plus button is then


16432
19:37:36,640 --> 19:37:40,720
gonna send a message here to our note servers we're going to then go to this


16433
19:37:40,720 --> 19:37:44,320
function create node and this create node function internally is then going


16434
19:37:44,320 --> 19:37:49,280
to manipulate that list of nodes inside node service say hey here's a new node


16435
19:37:49,280 --> 19:37:53,192
add that and then our ui is going to listen to a


16436
19:37:53,192 --> 19:37:56,872
list of these notes available in note service and if things change in that


16437
19:37:56,872 --> 19:37:59,280
list then the ui is just going to


16438
19:37:59,280 --> 19:38:02,960
automatically update itself and this interface between the ui and the node


16439
19:38:02,960 --> 19:38:06,160
servers is going to be done through a stream okay


16440
19:38:06,160 --> 19:38:09,280
i know it's a lot of a lot of information but you'll get it you'll get


16441
19:38:09,280 --> 19:38:12,320
it as long as we go through this chapter together


16442
19:38:12,320 --> 19:38:15,920
so what we need to do first is let's go and as then as the caption at the bottom


16443
19:38:15,920 --> 19:38:20,320
of the screen indicates we're going to go and expose a list of notes in our


16444
19:38:20,320 --> 19:38:24,720
note service okay so let's just let's go ahead and say we have a list


16445
19:38:24,720 --> 19:38:29,680
of uh database notes and we're just gonna call it notes and


16446
19:38:29,680 --> 19:38:34,080
we're gonna start with an empty list all right


16447
19:38:34,080 --> 19:38:36,960
so that's really good now we have let's say this is our cache this is where


16448
19:38:36,960 --> 19:38:42,800
we're keeping all the notes that this node service manipulates all right


16449
19:38:42,800 --> 19:38:46,800
so now let's go and talk a little bit about our um


16450
19:38:46,800 --> 19:38:51,680
stream controller so you see what we need to do as the as the


16451
19:38:51,680 --> 19:38:57,040
information here says um what we need is for the node service to


16452
19:38:57,040 --> 19:39:04,000
be able to control a stream of nodes so when the list of this nodes changes we


16453
19:39:04,000 --> 19:39:07,440
need to tell our stream in the note servers that


16454
19:39:07,440 --> 19:39:11,920
hey some element got added hey some element got deleted or some element got


16455
19:39:11,920 --> 19:39:15,512
updated so then the ui can then reactively listen


16456
19:39:15,512 --> 19:39:21,360
for these changes in the in the nodes service and we do that through the um


16457
19:39:21,360 --> 19:39:25,760
our stream controller so let's go as the caption indicates i'm


16458
19:39:25,760 --> 19:39:29,440
going to write it and notes actually maybe i should yeah i'm going to write


16459
19:39:29,440 --> 19:39:34,240
it notes stream controller and the way to create a stream controller is that


16460
19:39:34,240 --> 19:39:38,080
you just say stream controller and then you specify the type of data that your


16461
19:39:38,080 --> 19:39:42,552
stream contains which is a list of database nodes


16462
19:39:42,640 --> 19:39:48,080
and then we're gonna just say dot broadcast


16463
19:39:48,080 --> 19:39:52,000
like that and i believe stream controller isn't yet


16464
19:39:52,000 --> 19:39:56,960
excuse me um isn't imported in our notes service so i'm gonna get help from


16465
19:39:56,960 --> 19:40:01,120
visual studio code and you can see it's it says that well stream controller is


16466
19:40:01,120 --> 19:40:08,400
available in the dart async package so um and yeah async meaning asynchronous


16467
19:40:08,400 --> 19:40:11,440
so in order to be able to use stream controller you have to import that so


16468
19:40:11,440 --> 19:40:14,552
i'm going to get help from visual studio code to do that


16469
19:40:14,552 --> 19:40:17,920
all right so let's see what we did in here


16470
19:40:17,920 --> 19:40:21,920
what is this the syntax looks really really scary but it really isn't all


16471
19:40:21,920 --> 19:40:25,760
you're saying is that i want to be able to control a stream


16472
19:40:25,760 --> 19:40:30,000
um of a list of database notes basically


16473
19:40:30,000 --> 19:40:33,512
you're saying that i have a pipe this pipe


16474
19:40:33,512 --> 19:40:37,832
every event that is inside this pipe is a list of database nodes so let's say


16475
19:40:37,832 --> 19:40:41,512
you start with an empty list so this list is empty inside this pipe then you


16476
19:40:41,512 --> 19:40:44,640
add an item to this pipe


16477
19:40:44,640 --> 19:40:49,360
then what it does it says oh what was i before i was on empty list add that new


16478
19:40:49,360 --> 19:40:54,480
item so now i'm an item now i'm an array or a list with one item and then it puts


16479
19:40:54,480 --> 19:40:58,872
that array inside the stream so the stream's value is now at the beginning


16480
19:40:58,872 --> 19:41:03,360
was empty list then it's a list of one item so this stream controller is


16481
19:41:03,360 --> 19:41:09,120
basically in in control of as its name indicates it's in control of the changes


16482
19:41:09,120 --> 19:41:14,240
to this notes um list it isn't hooked to that yet but


16483
19:41:14,240 --> 19:41:18,552
that's its purpose and that's the reason it has the exact same data type in its


16484
19:41:18,552 --> 19:41:24,800
stream controller now the broadcast part in here and as


16485
19:41:24,800 --> 19:41:28,000
you can see the documentation actually spot on it says the controller where


16486
19:41:28,000 --> 19:41:32,000
stream can be listened to more than once and


16487
19:41:32,000 --> 19:41:35,280
if you've done dark development or flutter development from before you may


16488
19:41:35,280 --> 19:41:40,400
know that if you then um and i'm now assuming as i said that your dart or


16489
19:41:40,400 --> 19:41:43,512
flutter developer from before if you have created a stream controller and


16490
19:41:43,512 --> 19:41:47,120
then you go and listen to the changes to that stream that the stream controller


16491
19:41:47,120 --> 19:41:51,440
is controlling and then you do a hot reload then you get an error from your


16492
19:41:51,440 --> 19:41:54,640
flower application saying that oh this stream's already been listened to so you


16493
19:41:54,640 --> 19:41:58,552
cannot listen to it again and that's the problem that normal stream controllers


16494
19:41:58,552 --> 19:42:02,872
can cause and that you as soon as you've listened to them you should close your


16495
19:42:02,872 --> 19:42:06,872
listening channel to that stream before you can listen to them again so that's


16496
19:42:06,872 --> 19:42:10,552
what broadcast fixes if you're not a developer from before what this


16497
19:42:10,552 --> 19:42:15,440
broadcast basically is saying is that it's okay for you to create new


16498
19:42:15,440 --> 19:42:19,760
listeners that listen to the changes to this stream controller so here's a pipe


16499
19:42:19,760 --> 19:42:23,600
of information at this point you start and listen and then it's completely okay


16500
19:42:23,600 --> 19:42:26,480
that if you want to listen to changes to the stream controller later in the


16501
19:42:26,480 --> 19:42:30,080
future as well so you're not going to get any errors by doing this broadcast


16502
19:42:30,080 --> 19:42:32,400
all right


16503
19:42:33,040 --> 19:42:36,000
all right um


16504
19:42:36,160 --> 19:42:40,960
now what we need also is a handy function


16505
19:42:40,960 --> 19:42:44,080
in our um


16506
19:42:44,640 --> 19:42:48,192
in our application.can


16507
19:42:50,240 --> 19:42:54,552
that can read all the available notes from our database and then cache them


16508
19:42:54,552 --> 19:42:59,920
inside both the notes cache right here and our controller okay


16509
19:42:59,920 --> 19:43:05,120
so you see what our our goal in this chapter is is to


16510
19:43:05,120 --> 19:43:09,600
make sure that this is the source of truth that our notes


16511
19:43:09,600 --> 19:43:15,760
list contains all the nodes for for instance the current user


16512
19:43:15,760 --> 19:43:20,160
then the stream controller is our interface to the outside world


16513
19:43:20,160 --> 19:43:24,872
the ui is going to be listening to changes that occur in this stream


16514
19:43:24,872 --> 19:43:28,480
controller so whenever you see this this is not


16515
19:43:28,480 --> 19:43:30,960
something that's going to be read from the outside


16516
19:43:30,960 --> 19:43:34,800
everything's going to be read from the outside through this all right so keep


16517
19:43:34,800 --> 19:43:37,360
that in mind so let's go ahead as a caption in the case and we're going to


16518
19:43:37,360 --> 19:43:41,120
create a function in here called cache notes and its purpose is just to read


16519
19:43:41,120 --> 19:43:45,760
all the notes from the database and place it both in here internally and in


16520
19:43:45,760 --> 19:43:51,360
our node stream controller which is going to be read externally all right


16521
19:43:51,360 --> 19:43:54,960
so let's go and do that so i'm going to say future void and we're going to call


16522
19:43:54,960 --> 19:44:00,080
it cache and notes is async


16523
19:44:00,080 --> 19:44:04,000
then if you remember we already have an async function called get all notes so


16524
19:44:04,000 --> 19:44:10,080
i'm just going to say um final uh all notes is await


16525
19:44:10,400 --> 19:44:14,872
it's all notes okay so that's gonna get all our notes


16526
19:44:14,872 --> 19:44:20,720
and we're gonna assign that to our uh list of notes in here okay


16527
19:44:20,720 --> 19:44:25,040
so let's go in here and say as you remember get all notes returns on


16528
19:44:25,040 --> 19:44:29,192
iterable of all our notes and now we have a little bit of a problem here


16529
19:44:29,192 --> 19:44:32,552
because we're saying list of all notes and in here we're also saying list of


16530
19:44:32,552 --> 19:44:38,800
notes so we have to convert that terrible to a list of all notes okay


16531
19:44:38,800 --> 19:44:43,440
either we could do that or we could have this just sit there as an eye treble


16532
19:44:43,440 --> 19:44:47,680
it's completely up to you i have no issue with any and we could just go with


16533
19:44:47,680 --> 19:44:50,080
list so let's go in here and then we're gonna


16534
19:44:50,080 --> 19:44:55,832
say uh our notes is the private notes is all notes to


16535
19:44:55,832 --> 19:44:58,960
list and we also are going to update our


16536
19:44:58,960 --> 19:45:04,080
stream controller with that with the value of underscore nodes okay so we're


16537
19:45:04,080 --> 19:45:09,832
going to say notes stream controller if i can spell


16538
19:45:09,832 --> 19:45:14,080
and then we're going to add notes to the stream and remember a


16539
19:45:14,080 --> 19:45:19,120
stream is just the evolution of a value through time


16540
19:45:19,120 --> 19:45:22,400
and the first point of this evolution was an


16541
19:45:22,400 --> 19:45:25,920
empty list and then the next one is going to be


16542
19:45:25,920 --> 19:45:29,040
the notes that are all the notes are in the


16543
19:45:29,040 --> 19:45:33,360
database okay so that's just that we telling anyone listening to the


16544
19:45:33,360 --> 19:45:37,920
stream controller that hey here's a new value all right


16545
19:45:38,400 --> 19:45:42,720
okay so um now that we're doing this you can see


16546
19:45:42,720 --> 19:45:47,600
we're getting an error and dart is very actually this analyzes so clever because


16547
19:45:47,600 --> 19:45:52,400
you see it's telling us that the cache notes function is not being used now


16548
19:45:52,400 --> 19:45:56,000
you may be asking yourself well none of these functions are being used update


16549
19:45:56,000 --> 19:45:59,040
note for instance is not being used so if i


16550
19:45:59,040 --> 19:46:02,832
search for update notes let's see update


16551
19:46:02,832 --> 19:46:07,832
nodes could not update nodes so yeah you can see that update node function in


16552
19:46:07,832 --> 19:46:12,320
itself is not being used at all so why is it that the


16553
19:46:12,320 --> 19:46:15,832
analyzer is complaining about this function particularly and the reason is


16554
19:46:15,832 --> 19:46:20,480
because we have a little prefix behind this function name


16555
19:46:20,480 --> 19:46:24,080
and this prefix is telling the analyzer that this function is


16556
19:46:24,080 --> 19:46:29,040
private and private to this class now dart analyzer is looking at it and it's


16557
19:46:29,040 --> 19:46:32,480
like okay it's a private class but you're not using it so


16558
19:46:32,480 --> 19:46:35,832
the reason that other functions aren't being um


16559
19:46:35,832 --> 19:46:40,080
marked with this warning is that dart understands that they are not prefixed


16560
19:46:40,080 --> 19:46:44,400
with a with a with an underscore meaning that


16561
19:46:44,400 --> 19:46:48,960
they're going to be used publicly somewhere else so it's not going to yet


16562
19:46:48,960 --> 19:46:51,760
give us any warning saying that you haven't used those functions as soon as


16563
19:46:51,760 --> 19:46:55,192
you remove that you see that the warning also goes away but we're going to keep


16564
19:46:55,192 --> 19:46:58,320
down the score okay i just want to explain to you why you're seeing this a


16565
19:46:58,320 --> 19:47:03,280
little warning here okay now that we've done cash notes what


16566
19:47:03,280 --> 19:47:06,800
we're going to do is just to go to our as a caption case we're going to go to


16567
19:47:06,800 --> 19:47:10,080
the open function let's see if we can find it


16568
19:47:10,080 --> 19:47:12,720
here open


16569
19:47:12,720 --> 19:47:18,800
and upon opening our database so uh let me have a look at my notes


16570
19:47:18,800 --> 19:47:24,000
upon opening our database we are going to um


16571
19:47:24,000 --> 19:47:30,000
cache all those uh let's let me just have a look at my


16572
19:47:30,000 --> 19:47:33,280
notes yeah we're gonna basically go to uh


16573
19:47:33,280 --> 19:47:36,872
the open function that we have here future void open


16574
19:47:36,872 --> 19:47:39,440
i'm a bit surprised that i actually haven't


16575
19:47:39,440 --> 19:47:44,400
written any notes about that yeah i can see actually i have so that's good okay


16576
19:47:44,400 --> 19:47:47,512
so right after executing this command for


16577
19:47:47,512 --> 19:47:51,040
creating the notes table after we've created the user table and note table


16578
19:47:51,040 --> 19:47:54,960
and now that we know that we could open the database we also have to cache all


16579
19:47:54,960 --> 19:47:59,832
the notes in our local variable so let's just go and call


16580
19:47:59,832 --> 19:48:02,872
that function so we're just going to say await cache


16581
19:48:02,872 --> 19:48:07,680
notes okay so this means that when you call this


16582
19:48:07,680 --> 19:48:10,552
open function if after we made sure all the tables


16583
19:48:10,552 --> 19:48:13,512
everything is there if they didn't exist then we're gonna


16584
19:48:13,512 --> 19:48:17,360
read all the notes and place them inside this notes variable and also in this


16585
19:48:17,360 --> 19:48:21,440
stream controller okay so that's how we did the cache notes and i hope that you


16586
19:48:21,440 --> 19:48:24,872
could see the see the code and it wasn't hidden by the caption at


16587
19:48:24,872 --> 19:48:30,000
the bottom of the screen all right so that part is done now um


16588
19:48:30,000 --> 19:48:34,240
now what we need to do in here is to go to the next part of the code and as you


16589
19:48:34,240 --> 19:48:38,720
can see it says cache note in create node in create node function add the new


16590
19:48:38,720 --> 19:48:42,800
node to underscore nodes and the node stream controller


16591
19:48:42,800 --> 19:48:46,080
so i'm going to go to my nodes here creates


16592
19:48:46,080 --> 19:48:50,552
nodes and ensure that when we create the nodes


16593
19:48:50,552 --> 19:48:54,960
in our creates node


16594
19:48:55,600 --> 19:48:58,640
right here in this function in the create node you see at the moment what


16595
19:48:58,640 --> 19:49:01,760
we're doing is that we're just creating a node and returning it


16596
19:49:01,760 --> 19:49:07,192
that's good but i mean it's not good enough because as i said we need the ui


16597
19:49:07,192 --> 19:49:12,160
to be able to reactively listen to all the notes that are right now in the


16598
19:49:12,160 --> 19:49:16,480
database for that current user okay so in here after we create the note


16599
19:49:16,480 --> 19:49:21,600
we're actually going to add it to our array of nodes and then we're also going


16600
19:49:21,600 --> 19:49:25,600
to add it to our stream controller so i'm just going


16601
19:49:25,600 --> 19:49:31,832
to go in here and say nodes and add this new node in there and also


16602
19:49:31,832 --> 19:49:35,512
remember the stream controller's responsibilities just reflect the values


16603
19:49:35,512 --> 19:49:38,480
inside the underscore nodes to the outside world so all we have to do is


16604
19:49:38,480 --> 19:49:43,832
just to say notes stream controller add notes just like that because notes is


16605
19:49:43,832 --> 19:49:49,120
the source of truth as i mentioned before all right


16606
19:49:49,120 --> 19:49:52,872
great stuff uh now we need to take care of the other


16607
19:49:52,872 --> 19:49:58,240
function called delete note let's search for that


16608
19:49:58,240 --> 19:50:03,120
um delete notes all right so


16609
19:50:03,120 --> 19:50:06,552
what we need to do is to have a look at this uh functionality here and you can


16610
19:50:06,552 --> 19:50:11,280
see it says if we couldn't delete anything then uh throw this


16611
19:50:11,280 --> 19:50:15,760
exception but now we're gonna add an else statement in here and


16612
19:50:15,760 --> 19:50:20,000
by us being able to delete that note meaning that you can see the note id we


16613
19:50:20,000 --> 19:50:23,600
have which is this id so what we need to do as a caption in the case we need to


16614
19:50:23,600 --> 19:50:27,832
actually remove that note also from our local cache so we're going to say notes


16615
19:50:27,832 --> 19:50:31,360
remove where and this is the note and then i'm going


16616
19:50:31,360 --> 19:50:36,160
to say note that id should be equal to that id


16617
19:50:36,160 --> 19:50:40,720
after doing that we could just say note stream controller add


16618
19:50:40,720 --> 19:50:44,552
notes and you could be try you could try to be clever in here and you for


16619
19:50:44,552 --> 19:50:47,680
instance could say oh you see that


16620
19:50:47,680 --> 19:50:51,600
who says that that note actually exists in our cache we can't 100 be sure about


16621
19:50:51,600 --> 19:50:54,800
that but if you look at the signature of the remove where function


16622
19:50:54,800 --> 19:51:00,400
um removes all objects oh maybe we don't have the ability to actually know


16623
19:51:00,400 --> 19:51:04,800
if that node was deleted but what you could do you could just say count before


16624
19:51:04,800 --> 19:51:09,192
is notes count and then you could in here or length


16625
19:51:09,192 --> 19:51:12,960
and here you could just say if notes links


16626
19:51:12,960 --> 19:51:18,240
is not count before then you can update your stream i don't plan to do that but


16627
19:51:18,240 --> 19:51:22,480
you can you can try to do that if you want to it's just a safeguard for you to


16628
19:51:22,480 --> 19:51:28,320
say i'm gonna update my out outside facing stream only if i actually could


16629
19:51:28,320 --> 19:51:31,760
delete this note from my cache if you think it's worth it i don't think


16630
19:51:31,760 --> 19:51:35,440
it's worth it but that's just an opinion


16631
19:51:35,440 --> 19:51:39,680
so we're going to leave it like this as the caption also indicates


16632
19:51:39,680 --> 19:51:43,440
now you see we also have a functionality to delete all nodes so


16633
19:51:43,440 --> 19:51:47,192
let me find that function all nodes


16634
19:51:47,192 --> 19:51:54,800
all right so let's go in our delete all nodes in here find that function and


16635
19:51:54,800 --> 19:51:58,400
you can see right now what it what it's doing is just returning the number of


16636
19:51:58,400 --> 19:52:01,440
deleted nodes now what we're going to do we're going


16637
19:52:01,440 --> 19:52:05,512
to say final uh what should we call it number of


16638
19:52:05,512 --> 19:52:08,720
deletions is equal to this and we're gonna return


16639
19:52:08,720 --> 19:52:12,400
that number of deletions okay because i mean i'm doing that simply because we


16640
19:52:12,400 --> 19:52:17,832
need to do some work in in the middle here okay


16641
19:52:17,832 --> 19:52:21,680
so then what we're gonna do is gonna say notes


16642
19:52:21,680 --> 19:52:27,120
is an empty list all right so we're resetting the notes and then after doing


16643
19:52:27,120 --> 19:52:30,480
that we're also going to update our stream controller so we're going to say


16644
19:52:30,480 --> 19:52:34,400
add the underscore nodes to stream control and then return the number of


16645
19:52:34,400 --> 19:52:38,960
deletions so let's make sure that our local cache is updated and also that the


16646
19:52:38,960 --> 19:52:42,400
user-facing interface of our class which is the


16647
19:52:42,400 --> 19:52:48,160
stream controller is also updated with the latest information


16648
19:52:48,720 --> 19:52:51,600
okay next thing that we need to do as you can see in the cache that says


16649
19:52:51,600 --> 19:52:56,872
update caching get node remove old node with same id and add the new one on and


16650
19:52:56,872 --> 19:53:03,872
update this stream so let's go to our git node


16651
19:53:04,080 --> 19:53:09,280
okay so um


16652
19:53:10,000 --> 19:53:13,680
let's have a look at our get note in here then


16653
19:53:13,680 --> 19:53:17,280
and at the moment as you can see in here what it's doing is


16654
19:53:17,280 --> 19:53:22,160
oops that's not get note um here is get note


16655
19:53:22,160 --> 19:53:24,160
right there okay


16656
19:53:24,160 --> 19:53:28,080
and as you can see here uh we're basically what we're doing is that we're


16657
19:53:28,080 --> 19:53:32,160
saying um upon you trying to read a note from the


16658
19:53:32,160 --> 19:53:36,552
database we're literally just making a query to the database and then if we


16659
19:53:36,552 --> 19:53:42,080
could find that item we are returning it by creating a database node from


16660
19:53:42,080 --> 19:53:48,320
from a row that you can see right here uh but what we're gonna do is that if


16661
19:53:48,320 --> 19:53:53,440
you try to get a note in there is a possibility that we already had that


16662
19:53:53,440 --> 19:53:58,320
note cached locally in our notes array but that note is


16663
19:53:58,320 --> 19:54:03,680
uh outdated meaning that the copy that we had in our cache is not really


16664
19:54:03,680 --> 19:54:07,360
updated with the latest changes that have been applied to the database so it


16665
19:54:07,360 --> 19:54:13,360
makes good sense right here to now upon creating a new instance of database node


16666
19:54:13,360 --> 19:54:17,280
actually to update our local cache as well okay so i'm just going to say final


16667
19:54:17,280 --> 19:54:21,120
note is equal to that and we're going to return that node


16668
19:54:21,120 --> 19:54:25,440
bill right here so this code is the exact same as it was before except we're


16669
19:54:25,440 --> 19:54:30,872
now assigning the return value of from row to a new local variable here okay


16670
19:54:30,872 --> 19:54:34,320
so let's go to our notes and say remove where


16671
19:54:34,320 --> 19:54:38,160
and i'm going to say in here note and i'm going to say i'm going to say note


16672
19:54:38,160 --> 19:54:42,960
id should be equal to id which is


16673
19:54:42,960 --> 19:54:48,080
this thing here okay so we first remove that node existing node from the notes


16674
19:54:48,080 --> 19:54:52,160
array then we say nodes add


16675
19:54:52,320 --> 19:54:56,160
and we add the new nodes in there and then what we're going to do is right


16676
19:54:56,160 --> 19:55:01,760
after that update the stream controller which is our outside facing um interface


16677
19:55:01,760 --> 19:55:07,280
so note stream controller add notes okay so you can see this pattern so we first


16678
19:55:07,280 --> 19:55:11,760
always update our local cache and then we reflect those changes to the outside


16679
19:55:11,760 --> 19:55:17,512
world all right all right great stuff so um


16680
19:55:17,512 --> 19:55:20,100
that's for note stream controller and notes um


16681
19:55:20,100 --> 19:55:23,512
[Music] now there's another function which is


16682
19:55:23,512 --> 19:55:28,872
called update notes and let's go to update node actually before


16683
19:55:28,872 --> 19:55:33,192
we have a look at anything else and you can see in here when we update that


16684
19:55:33,192 --> 19:55:36,872
first we make sure that that node exists so let's put actually a comment in here


16685
19:55:36,872 --> 19:55:40,480
make sure note exists


16686
19:55:40,552 --> 19:55:44,080
and then we say update db i'm going to expand this code


16687
19:55:44,080 --> 19:55:47,680
so you see better that's the update db part


16688
19:55:47,680 --> 19:55:52,320
and if we couldn't update anything then we throw it could not update note and


16689
19:55:52,320 --> 19:55:57,280
you can see that in here upon doing an update node what we want


16690
19:55:57,280 --> 19:56:00,480
to do is i mean it is quite clever what we've done so far because it means that


16691
19:56:00,480 --> 19:56:04,160
we've updated the database but what we do then in order to return the new


16692
19:56:04,160 --> 19:56:07,832
refresh node is that actually we call getsnow so


16693
19:56:07,832 --> 19:56:11,440
that is that's pretty good so but what we also need to do is just to


16694
19:56:11,440 --> 19:56:15,120
make sure our local and cache is also updated


16695
19:56:15,120 --> 19:56:18,160
so let's go in here and say final


16696
19:56:18,160 --> 19:56:21,920
updated nodes and what we're going to do as the


16697
19:56:21,920 --> 19:56:25,920
caption at the bottom of the screen indicates we're going to remove that


16698
19:56:25,920 --> 19:56:31,120
notes from our local cache and add the updated note in there and then


16699
19:56:31,120 --> 19:56:35,512
send the add message to our stream controller as well so let's just say


16700
19:56:35,512 --> 19:56:38,640
notes and remove


16701
19:56:38,640 --> 19:56:42,000
so we're going to remove the old object from our cache and i'm just going to say


16702
19:56:42,000 --> 19:56:46,160
notes as long as the notes id is equal to the


16703
19:56:46,160 --> 19:56:52,400
updated notes id so that's going to remove the existing existing node


16704
19:56:52,400 --> 19:56:56,400
and i'm going to say notes add and we have the


16705
19:56:56,400 --> 19:57:01,120
updated node in here as soon as you change your


16706
19:57:01,120 --> 19:57:06,320
notes and local cache then you need to also update your stream so the stream


16707
19:57:06,320 --> 19:57:08,800
controller add notes


16708
19:57:08,800 --> 19:57:13,360
all right and then we return the updated notes in


16709
19:57:13,360 --> 19:57:17,440
here so what happening here is just that we updated something in the database we


16710
19:57:17,440 --> 19:57:23,120
got the new object from uh the database we removed that uh node from a local


16711
19:57:23,120 --> 19:57:28,640
cache and then we added it in there okay added it back that's the updated node


16712
19:57:28,640 --> 19:57:32,800
all right all right great stuff that's for update


16713
19:57:32,800 --> 19:57:38,000
notes and then what we need is as the captioning case is get or create user in


16714
19:57:38,000 --> 19:57:41,920
node service so um


16715
19:57:41,920 --> 19:57:45,760
this is a function that we're going to actually use in the next chapter


16716
19:57:45,760 --> 19:57:48,800
um so


16717
19:57:48,800 --> 19:57:52,400
how is this function useful this is the first time we're actually seeing the the


16718
19:57:52,400 --> 19:57:54,960
um signature for this function as the name


16719
19:57:54,960 --> 19:57:59,192
in the case it says get or create user you see


16720
19:57:59,192 --> 19:58:04,320
when you at the moment go into our user interface let's go to the login view for


16721
19:58:04,320 --> 19:58:06,960
instance login view here


16722
19:58:06,960 --> 19:58:12,160
i'm gonna remove the explorer so you see the code in its entirety and right here


16723
19:58:12,160 --> 19:58:16,480
when we do auth service firebase login then we get the current user if the


16724
19:58:16,480 --> 19:58:21,360
email is verified is that we're going to nodes routes now let's then go to our


16725
19:58:21,360 --> 19:58:25,280
notes view you can see right now notes view the only thing it's doing is that


16726
19:58:25,280 --> 19:58:29,280
it's creating an app bar with a um sorry it's creating a scaffold with an app bar


16727
19:58:29,280 --> 19:58:34,000
that we have our logout button in and let's go actually let me bring up


16728
19:58:34,000 --> 19:58:40,720
scr cpy so i'm gonna use my email address in the login screen so um


16729
19:58:40,720 --> 19:58:46,640
i actually may need to go and connect this device to wi-fi so boom


16730
19:58:46,640 --> 19:58:50,400
i'm gonna open up um


16731
19:58:50,640 --> 19:58:56,160
that login with my user so i'm to get rid of all those


16732
19:58:56,160 --> 19:59:00,720
i'm going to login in here use oops uh we've sent you an email verification


16733
19:59:00,720 --> 19:59:03,280
okay maybe i should actually log in with the


16734
19:59:03,280 --> 19:59:07,800
user who has already been verified


16735
19:59:08,000 --> 19:59:12,640
so let's log in with this user you see in the main ui of the application um of


16736
19:59:12,640 --> 19:59:17,040
our application we have this hello world right there because


16737
19:59:17,040 --> 19:59:22,720
um you can see the body of the the body of our notes view right now it


16738
19:59:22,720 --> 19:59:27,120
just says hello world so you could pretty much say that the notes view has


16739
19:59:27,120 --> 19:59:31,040
literally no contact at the moment with the notes service


16740
19:59:31,040 --> 19:59:36,080
but we're gonna fix this soon by first making sure that the note service allows


16741
19:59:36,080 --> 19:59:40,552
the user interface to create a new user upon going to the


16742
19:59:40,552 --> 19:59:44,960
screen so when we come to the screen we need to make sure that there is a user


16743
19:59:44,960 --> 19:59:48,480
associated with the current firebase user


16744
19:59:48,480 --> 19:59:53,512
inside our database okay so that's what we need this little uh


16745
19:59:53,512 --> 19:59:59,120
good function called get or create user which returns a database user in our


16746
19:59:59,120 --> 20:00:04,240
notes service so we're gonna use that in the next chapter so remember that okay


16747
20:00:04,240 --> 20:00:08,000
but we need to create the function at this right now


16748
20:00:08,000 --> 20:00:13,600
all right let's go then and create this function as the name indicates so future


16749
20:00:13,600 --> 20:00:19,600
and database user and we're going to say get or create user and it has a required


16750
20:00:19,600 --> 20:00:23,280
parameter i can see required stream email


16751
20:00:23,280 --> 20:00:27,192
and it's an async function right so um


16752
20:00:27,192 --> 20:00:33,440
we need to basically have a look at this how we can create this user


16753
20:00:33,440 --> 20:00:37,192
so the goal in here is to first we try to


16754
20:00:37,192 --> 20:00:41,040
get this user from the database if that user doesn't exist then we're going to


16755
20:00:41,040 --> 20:00:45,920
create that user and then in both cases we're going to return either the


16756
20:00:45,920 --> 20:00:49,600
fetched or the created user back to the


16757
20:00:49,600 --> 20:00:54,480
caller so let's go in here and just say


16758
20:00:54,480 --> 20:00:58,240
final user is await


16759
20:00:58,240 --> 20:01:02,800
get user okay and you see the email just fits in there perfectly but if you


16760
20:01:02,800 --> 20:01:06,240
remember from the implementation of get user let's go in there and expand this


16761
20:01:06,240 --> 20:01:08,552
if the user couldn't be found then it


16762
20:01:08,552 --> 20:01:13,832
throws an error says could not find user that's rq so that if that function


16763
20:01:13,832 --> 20:01:16,872
throws that error then we're going to create that user so if that user doesn't


16764
20:01:16,872 --> 20:01:20,320
exist in the database it needs to be created so let's put a try statement in


16765
20:01:20,320 --> 20:01:23,832
here and then we're going to say on could not find user


16766
20:01:23,832 --> 20:01:28,000
so here is the user so in this case in the try


16767
20:01:28,000 --> 20:01:32,160
statement it means that we could get the user okay so if we get to this return


16768
20:01:32,160 --> 20:01:35,680
statement it means that get user function didn't throw any exceptions


16769
20:01:35,680 --> 20:01:39,040
such as could not find user in the case that we could not find user we're going


16770
20:01:39,040 --> 20:01:42,960
to actually create a user so let's just say created user


16771
20:01:42,960 --> 20:01:48,552
is a way to create user with that email and then we're gonna say


16772
20:01:48,552 --> 20:01:54,000
return created user and if you look at the create user function as well right


16773
20:01:54,000 --> 20:02:00,800
here it also i believe does it throw yes so if it couldn't create that user it if


16774
20:02:00,800 --> 20:02:04,800
it's the result was empty it just says user oh no that's that's where we get


16775
20:02:04,800 --> 20:02:08,872
the user sorry about that we need to have a look at this insert so


16776
20:02:08,872 --> 20:02:11,920
yeah that's the only thing it's doing so it's not basically throwing any other


16777
20:02:11,920 --> 20:02:14,960
error okay the only thing it does is if you're


16778
20:02:14,960 --> 20:02:18,000
creating a user that already exists i'm going to draw an error


16779
20:02:18,000 --> 20:02:21,120
so here we have where and we've ended up with a


16780
20:02:21,120 --> 20:02:25,120
try and catch block that could also throw an exception which


16781
20:02:25,120 --> 20:02:30,320
we haven't handled all right so what you could do is just to do a whole catch in


16782
20:02:30,320 --> 20:02:34,960
here and then don't do anything with it i like this pattern quite a lot in my


16783
20:02:34,960 --> 20:02:38,552
code at least because if i don't do this then i don't actually have the


16784
20:02:38,552 --> 20:02:42,400
possibility to debug my application later so i can't put like a breakpoint


16785
20:02:42,400 --> 20:02:47,040
in here and see did any other exception arise if you don't do that because then


16786
20:02:47,040 --> 20:02:50,872
the exception will be thrown to the caller and the caller will have to


16787
20:02:50,872 --> 20:02:54,080
handle that but in this case we're not really handling the exception we're just


16788
20:02:54,080 --> 20:02:58,480
catching it and then we're throwing it back to the call side this only allows


16789
20:02:58,480 --> 20:03:01,680
you basically to put a breakpoint in here if you want to debug your


16790
20:03:01,680 --> 20:03:06,640
application later okay so it's just a it's just in quite a cheap way of making


16791
20:03:06,640 --> 20:03:12,240
your code easier to debug all right for those of you who are interested in this


16792
20:03:12,240 --> 20:03:16,000
all right fantastic and we've covered a lot and


16793
20:03:16,000 --> 20:03:21,920
there's still a lot to do but we've come far so congratulations um


16794
20:03:21,920 --> 20:03:24,480
let's have a look here it says let's get ready for the next chapter and upon


16795
20:03:24,480 --> 20:03:28,720
logging in we need to call our get or create user function and have the user


16796
20:03:28,720 --> 20:03:31,040
ready and this is what i mentioned to you


16797
20:03:31,040 --> 20:03:33,512
before inside our notes view at the moment


16798
20:03:33,512 --> 20:03:36,960
we don't have any functionality that creates


16799
20:03:36,960 --> 20:03:40,872
a new user or gets the current user based on their email if they already


16800
20:03:40,872 --> 20:03:45,440
exist in the database and that is going to be like the actual uh


16801
20:03:45,440 --> 20:03:50,320
first bit of logic which we're gonna do in the next chapter which integrates our


16802
20:03:50,320 --> 20:03:53,832
notes view with the note server so the tempo


16803
20:03:53,832 --> 20:03:58,552
of our course right now is gonna shift towards more and more to the notes view


16804
20:03:58,552 --> 20:04:04,080
until we have a list of notes and allow the user to create notes update notes so


16805
20:04:04,080 --> 20:04:07,920
it's exciting times we've come far we've done quite a lot of work up up to this


16806
20:04:07,920 --> 20:04:11,280
point um and there's still a lot left but um


16807
20:04:11,280 --> 20:04:14,960
hopefully you're getting the attack at that like the


16808
20:04:14,960 --> 20:04:19,192
tempo of the uh of the course better and better and you


16809
20:04:19,192 --> 20:04:22,400
can see why we are doing things the way we are


16810
20:04:22,400 --> 20:04:25,680
doing so uh congratulations again


16811
20:04:25,680 --> 20:04:29,040
and uh get some refreshments if you want to


16812
20:04:29,040 --> 20:04:32,872
again coffee tea and i'll see you in the next chapter


16813
20:04:32,872 --> 20:04:36,720
hello everyone and welcome to chapter 29 of this flutter course in the previous


16814
20:04:36,720 --> 20:04:40,872
chapter as you saw we worked with our note servers and we talked about streams


16815
20:04:40,872 --> 20:04:45,680
and stream controllers we have put uh you know a lot of effort


16816
20:04:45,680 --> 20:04:49,360
in our note service in order to talk with the database and kind of read from


16817
20:04:49,360 --> 20:04:52,480
the database and cache the red information


16818
20:04:52,480 --> 20:04:56,240
in our notes uh member variable so if you haven't watched the previous chapter


16819
20:04:56,240 --> 20:04:58,800
i highly suggest that you do that because


16820
20:04:58,800 --> 20:05:01,360
moving forward with this course without having watched his chapters


16821
20:05:01,360 --> 20:05:05,512
chronologically makes it quite difficult for you to proceed so


16822
20:05:05,512 --> 20:05:08,640
i'm gonna build on top of the previous chapter as we've done with the other


16823
20:05:08,640 --> 20:05:12,872
chapters as well and in this chapter we're gonna basically start putting in


16824
20:05:12,872 --> 20:05:17,040
place uh all the structure necessary in in order for


16825
20:05:17,040 --> 20:05:20,400
us to be able to display all the user generated notes


16826
20:05:20,400 --> 20:05:24,800
in the notes view okay so as you can see we have almost


16827
20:05:24,800 --> 20:05:29,440
everything in place um there are a few functions left to do and we also in this


16828
20:05:29,440 --> 20:05:33,120
video in this chapter we're going to talk about future builder and also a


16829
20:05:33,120 --> 20:05:36,400
stream builder and i don't think we've talked about


16830
20:05:36,400 --> 20:05:40,240
stream builder before we talked about future builder so that's going to be an


16831
20:05:40,240 --> 20:05:45,040
exciting um new thing to talk about in this chapter


16832
20:05:45,040 --> 20:05:48,800
all right so i've just i've talked about this in the


16833
20:05:48,800 --> 20:05:52,160
um in the outro to the previous chapter


16834
20:05:52,160 --> 20:05:57,120
that what we need to do in this chapter right now in chapter 29 is to


16835
20:05:57,120 --> 20:06:01,192
allow the user to to go to the notes view and upon going to the note c we're


16836
20:06:01,192 --> 20:06:05,440
all always going to make sure that that user exists in our database now you see


16837
20:06:05,440 --> 20:06:10,240
we have firebase right here and then our user has upon coming to the notes view


16838
20:06:10,240 --> 20:06:14,960
that user must have logged in with a verified email address so that user


16839
20:06:14,960 --> 20:06:19,360
exists we know that that user exists in firebase and has a verified email


16840
20:06:19,360 --> 20:06:24,480
address but that user might not exist in our database remember we're gonna store


16841
20:06:24,480 --> 20:06:29,600
the user generated notes in our database and hook them to the user who created


16842
20:06:29,600 --> 20:06:33,512
those notes okay so um so upon going to the notes view we


16843
20:06:33,512 --> 20:06:38,240
always need to make sure that that user exists in the database


16844
20:06:38,240 --> 20:06:40,960
and the way to do that if you remember let me just bring the code you don't


16845
20:06:40,960 --> 20:06:46,960
have to try to remember that so let's go into our notes service you can see


16846
20:06:47,360 --> 20:06:51,600
we have a function called get all notes and but we don't have any functionality


16847
20:06:51,600 --> 20:06:56,960
at the moment to for instance give us the notes for a a specific user so


16848
20:06:56,960 --> 20:07:01,040
if we want to do that if you want to for instance get grab all the notes for a


16849
20:07:01,040 --> 20:07:05,120
specific user then we're going to go with a user's email address because if


16850
20:07:05,120 --> 20:07:09,360
you look at the way our application is working with um


16851
20:07:09,360 --> 20:07:13,512
the current user you can see we're working always with officer so we're not


16852
20:07:13,512 --> 20:07:18,800
going through um firebase directly and our auth service also has an off user so


16853
20:07:18,800 --> 20:07:23,600
let's have a look at our auth and have a look at auth user and you'll see that


16854
20:07:23,600 --> 20:07:28,080
our auth user only has one flag that just says is email verified


16855
20:07:28,080 --> 20:07:33,192
so how do we go and call this function which is called get or create user on


16856
20:07:33,192 --> 20:07:37,360
our note service where we don't actually have an email address for our current


16857
20:07:37,360 --> 20:07:40,240
user and that's what we need to do we need to


16858
20:07:40,240 --> 20:07:44,872
go ahead and add an email field to our off user


16859
20:07:44,872 --> 20:07:49,120
and so as the caption indicates here we need to add this field to our off user


16860
20:07:49,120 --> 20:07:53,192
okay so i'm going to change the screen layout a little bit so you see better


16861
20:07:53,192 --> 20:07:56,800
and let's go ahead and add a new field in there i'm going to have a look at my


16862
20:07:56,800 --> 20:08:02,640
notes also um or user so and add a new field in here and we


16863
20:08:02,640 --> 20:08:06,480
just call it the final string um email


16864
20:08:06,480 --> 20:08:12,240
just like that and get help from your editor in order to add the email field


16865
20:08:12,240 --> 20:08:17,360
add final field here so this is also going to be a required parameter like


16866
20:08:17,360 --> 20:08:20,240
this and i'm just going to make it required like this and it come at the


16867
20:08:20,240 --> 20:08:25,680
end to get the formatting done and here where we actually creating our


16868
20:08:25,680 --> 20:08:30,240
instance of auth user what we're going to do is to say we return an auth user


16869
20:08:30,240 --> 20:08:34,160
and the email is already actually in the firebase user let's go to the firebase


16870
20:08:34,160 --> 20:08:40,240
user and look for email you see there is a getter called email okay


16871
20:08:40,240 --> 20:08:45,280
and the thing is that this email getter is optional string so what we need to do


16872
20:08:45,280 --> 20:08:50,000
is just to make it optional maybe in our off user as well okay so in here then


16873
20:08:50,000 --> 20:08:53,280
where we create the off user we're just going to say the email field is equal to


16874
20:08:53,280 --> 20:08:57,512
user email and put a comma at the end here and a comma here as well to get the


16875
20:08:57,512 --> 20:09:01,512
format going so all we did in here would say that our


16876
20:09:01,512 --> 20:09:06,552
r auth user has an optional string as its email and that email string is read


16877
20:09:06,552 --> 20:09:10,552
from the firebase user that's all nothing complicated


16878
20:09:10,552 --> 20:09:12,872
all right


16879
20:09:14,080 --> 20:09:18,000
okay what we need to do then is to as the caption indicates go to our notes


16880
20:09:18,000 --> 20:09:23,512
view and grab the let's go notes view here and we need to then read the


16881
20:09:23,512 --> 20:09:28,080
current user's email address okay so what we're gonna do is saying that our


16882
20:09:28,080 --> 20:09:32,320
auth user has an optional email but we we as an application developer are sure


16883
20:09:32,320 --> 20:09:36,872
that because we're using email and password registration we are sure that


16884
20:09:36,872 --> 20:09:41,360
any user who ends up in the notes view has an email address okay so


16885
20:09:41,360 --> 20:09:45,360
that's an assumption we're going to make although our off


16886
20:09:45,360 --> 20:09:48,480
user which was let's see if we can find it


16887
20:09:48,480 --> 20:09:52,800
off user here although the off user says that i optionally have an email but


16888
20:09:52,800 --> 20:09:56,240
we're always going to say no that email should exist because we're only at the


16889
20:09:56,240 --> 20:10:01,040
moment using email password sign in method all right so


16890
20:10:01,040 --> 20:10:05,680
in order for this notes view to be able to make a call to the notes service and


16891
20:10:05,680 --> 20:10:09,192
grab or sorry to create or get the current


16892
20:10:09,192 --> 20:10:13,760
user it needs an email so let's go ahead and expose a functionality in our notes


16893
20:10:13,760 --> 20:10:17,040
view as the caption indicates that grabs the


16894
20:10:17,040 --> 20:10:22,000
user's email so let's go in here and i'm going to go to my notes view as well in


16895
20:10:22,000 --> 20:10:25,280
my notes all right


16896
20:10:25,280 --> 20:10:29,512
and what we're going to do in there is just to expose the user email so let's


16897
20:10:29,512 --> 20:10:34,720
just say string get user email


16898
20:10:34,720 --> 20:10:38,640
let's get rid of this side explorer as well


16899
20:10:38,640 --> 20:10:43,192
and i'm going to say off service firebase


16900
20:10:43,192 --> 20:10:47,120
all right off service i don't think it's imported so let's actually see is it


16901
20:10:47,120 --> 20:10:49,832
imported


16902
20:10:50,800 --> 20:10:54,080
off service yeah it is imported okay that's good


16903
20:10:54,080 --> 20:10:56,960
about firebase


16904
20:10:57,832 --> 20:11:01,440
and this can't be equal so that's why it's going a little bit crazy firebase


16905
20:11:01,440 --> 20:11:05,680
and then we're going to say current user and you see this current user is now


16906
20:11:05,680 --> 20:11:09,120
optional but since we are the application developer and we're sure


16907
20:11:09,120 --> 20:11:12,872
that if you end up in the notes view then you should have a current user


16908
20:11:12,872 --> 20:11:16,000
that's what we've already made sure in the previous steps okay so if you look


16909
20:11:16,000 --> 20:11:19,192
at the login screen for instance in our login


16910
20:11:19,192 --> 20:11:24,480
view so i open the login view here we're saying if the current user exists and is


16911
20:11:24,480 --> 20:11:27,760
email verified is true then go to the notes view so


16912
20:11:27,760 --> 20:11:31,192
then we can be sure that inside the notes view we already have a user okay


16913
20:11:31,192 --> 20:11:34,480
so this current user in firebase currently


16914
20:11:34,480 --> 20:11:39,280
says optional but we're gonna unwrap it force on rapid okay and then we're gonna


16915
20:11:39,280 --> 20:11:44,280
say email and force unwrap that too


16916
20:11:44,640 --> 20:11:48,552
all right so um that's what we've done so now we get the


16917
20:11:48,552 --> 20:11:54,640
user's email now if you remember inside our um


16918
20:11:54,640 --> 20:11:58,320
inside our note service we have two really important functions which at the


16919
20:11:58,320 --> 20:12:04,872
moment are at the bottom of this class which are called open and close


16920
20:12:04,872 --> 20:12:08,872
respectively and what we need to make sure is that


16921
20:12:08,872 --> 20:12:15,512
upon going to notes view that our database is actually open so we


16922
20:12:15,512 --> 20:12:20,800
cannot continue to read stuff from various parts of our database if the


16923
20:12:20,800 --> 20:12:24,552
database handle hasn't actually be created so


16924
20:12:24,552 --> 20:12:28,480
let's then go to our uh notes view and


16925
20:12:28,480 --> 20:12:31,920
in here as you can see this is the reason we made this and notes view a


16926
20:12:31,920 --> 20:12:37,192
stateful widget in that we need to now hook into the two life cycle events of


16927
20:12:37,192 --> 20:12:42,000
our notes you and to open our database upon the creation of this node 2 and


16928
20:12:42,000 --> 20:12:45,512
then close the database upon it being disposed so


16929
20:12:45,512 --> 20:12:49,040
as the caption indicates let's go and overwrite the init state function in


16930
20:12:49,040 --> 20:12:52,720
here okay and what we're going to do in here we're going to say


16931
20:12:52,720 --> 20:12:57,512
uh now we want to basically have a notes service in our


16932
20:12:57,512 --> 20:13:03,040
init state and we also need to make sure that it is open so


16933
20:13:03,360 --> 20:13:07,600
so let's have a look uh let me have a look in my notes as well


16934
20:13:07,600 --> 20:13:10,160
all right so uh


16935
20:13:10,160 --> 20:13:14,000
we need to open the database in there so let's go and


16936
20:13:14,000 --> 20:13:17,600
grab a hold of our notes service so we don't have a note service right now but


16937
20:13:17,600 --> 20:13:23,240
we're going to create that so let's just say late final notes


16938
20:13:23,832 --> 20:13:30,000
so this is our uh notes view uh undefined class notes service


16939
20:13:30,000 --> 20:13:34,080
haven't we imported note service and we haven't so let's just do it on import


16940
20:13:34,080 --> 20:13:38,720
right now so this is our notes view grabbing hold of an instance of node


16941
20:13:38,720 --> 20:13:44,400
server so that it can work with it okay so um


16942
20:13:44,400 --> 20:13:48,000
let's go ahead and do that then so we're going to go and say


16943
20:13:48,000 --> 20:13:52,720
notes service is equal to an instance of nodes


16944
20:13:52,720 --> 20:13:57,760
service like this and then we're going to say nodeservice.open


16945
20:13:57,760 --> 20:14:01,040
and right now this function is a future void


16946
20:14:01,040 --> 20:14:04,720
and you may not really be able to do an


16947
20:14:04,720 --> 20:14:08,800
async in your init stating here but we're just for now we're just saying


16948
20:14:08,800 --> 20:14:14,800
open all right so open the database and that's all we have to do and then we


16949
20:14:14,800 --> 20:14:18,872
have to take care of closing the database so let's go ahead and say


16950
20:14:18,872 --> 20:14:23,040
upon disposing upon this uh notes views disposal we're


16951
20:14:23,040 --> 20:14:27,040
also going to close the database because we're good citizens of the dart lab so


16952
20:14:27,040 --> 20:14:30,640
we're not just going to leave the database open so node service and we're


16953
20:14:30,640 --> 20:14:35,440
going to say close all right and that's that's pretty much it that's all


16954
20:14:35,440 --> 20:14:38,400
we have to do for now


16955
20:14:38,640 --> 20:14:45,440
okay great stuff let's save this and um i'm also going to maybe bring a crcpy


16956
20:14:45,440 --> 20:14:49,192
here and what i'm gonna do then is to do a


16957
20:14:49,192 --> 20:14:52,960
hot restart and


16958
20:14:52,960 --> 20:14:57,680
let's just log out and then i'm gonna log in with that user


16959
20:14:57,680 --> 20:15:03,120
again if i can spell pick solitude


16960
20:15:03,120 --> 20:15:07,120
um foo barb has horrible password i've


16961
20:15:07,120 --> 20:15:11,680
mentioned this before authentication error


16962
20:15:11,680 --> 20:15:16,640
foo barbaz it could be because this uh phone


16963
20:15:16,640 --> 20:15:21,832
doesn't have wi-fi right now so let's go in here turn wi-fi on and then i'm gonna


16964
20:15:21,832 --> 20:15:24,800
go back here android phones usually initial


16965
20:15:24,800 --> 20:15:28,240
initialize their wi-fi site quite fast so now we should be able to say login


16966
20:15:28,240 --> 20:15:31,120
and we end up in the main ui of the application so this open function has


16967
20:15:31,120 --> 20:15:34,240
gone well and i can see that we haven't had any


16968
20:15:34,240 --> 20:15:38,080
exceptions thrown in the debug console so


16969
20:15:38,080 --> 20:15:42,640
that was open and close so


16970
20:15:42,640 --> 20:15:48,000
so let's have a look in here um as you can see in the caption uh right


16971
20:15:48,000 --> 20:15:52,240
now we are what we're doing is that we're like issuing different functional


16972
20:15:52,240 --> 20:15:55,920
functions in our for instance let's have a look at delete user what it does is


16973
20:15:55,920 --> 20:16:00,480
that it says get database or throw um and at the moment this get database or


16974
20:16:00,480 --> 20:16:05,680
throw only thing it does is just make sure that this db is available in there


16975
20:16:05,680 --> 20:16:08,640
but it doesn't make sure that that database is open as such it just makes


16976
20:16:08,640 --> 20:16:13,360
sure that there is a database instance in the the internet in the node


16977
20:16:13,360 --> 20:16:17,192
service so what we need to make sure now is that


16978
20:16:17,192 --> 20:16:20,872
every function that works with our database first ensures that the database


16979
20:16:20,872 --> 20:16:25,360
not only is instance is there but that the database also


16980
20:16:25,360 --> 20:16:28,960
open all right because if you look at the


16981
20:16:28,960 --> 20:16:32,960
excuse me um here we have the open database and that basically


16982
20:16:32,960 --> 20:16:36,240
sets the instance to that database all right


16983
20:16:36,240 --> 20:16:40,640
so what we need to do is to create a little function that says ensure


16984
20:16:40,640 --> 20:16:45,040
database and what is it called ensure db is open so


16985
20:16:45,040 --> 20:16:47,920
uh i'm just going to go ahead and have a


16986
20:16:47,920 --> 20:16:55,680
look at my notes for ensure dbs open and um let's have a look at


16987
20:16:55,680 --> 20:17:00,080
putting that maybe above open in here okay so


16988
20:17:00,080 --> 20:17:04,080
if you're following along with me you just go to top of the open function and


16989
20:17:04,080 --> 20:17:09,280
we're just gonna say future void ensure db is open


16990
20:17:09,280 --> 20:17:13,120
and that's an async function all right


16991
20:17:13,760 --> 20:17:17,120
so what then we're going to do is just to


16992
20:17:17,120 --> 20:17:21,680
say um let's see


16993
20:17:21,680 --> 20:17:26,640
we're going to put a try block in here and let's go we see that our open


16994
20:17:26,640 --> 20:17:30,480
function at the moment throws an exception that says database


16995
20:17:30,480 --> 20:17:33,192
already open exception so what we need to make sure is that we cache that


16996
20:17:33,192 --> 20:17:39,680
exception so when our uh our uh notes view gets hot reloaded then


16997
20:17:39,680 --> 20:17:43,680
it shouldn't try to open the database over and over again and if it does then


16998
20:17:43,680 --> 20:17:46,720
this open function is going to throw an exception


16999
20:17:46,720 --> 20:17:51,120
and um and our ensure dbs open function is


17000
20:17:51,120 --> 20:17:55,040
going to catch that and it's just going to let it go all right so all it does is


17001
20:17:55,040 --> 20:17:58,160
that we just ensure that we're not opening


17002
20:17:58,160 --> 20:18:01,512
the database over and over again because it's just an overhead okay


17003
20:18:01,512 --> 20:18:06,000
so what we're going to do then is we're going to say awaits open in here


17004
20:18:06,000 --> 20:18:09,600
and in here we say we're catching database


17005
20:18:09,600 --> 20:18:14,000
already open exception and we're just going to let it go in this case so


17006
20:18:14,000 --> 20:18:20,320
we just say sorry on all right so now we have this


17007
20:18:20,320 --> 20:18:25,680
intro db function is open uh it's your db is open function


17008
20:18:25,680 --> 20:18:30,720
and we need to start using that um so let me bring up the right caption so


17009
20:18:30,720 --> 20:18:34,552
we need to start using ensure dbs open function in various functionalities in


17010
20:18:34,552 --> 20:18:38,720
our application so let's first go to delete user


17011
20:18:38,720 --> 20:18:42,400
here and uh we're just going to say await


17012
20:18:42,400 --> 20:18:49,360
ensure db is open that's the first place and let's go to create user


17013
20:18:49,360 --> 20:18:53,040
um we have a function called create user


17014
20:18:53,040 --> 20:18:56,240
here and we're gonna wait on ensure db is


17015
20:18:56,240 --> 20:18:59,832
open okay


17016
20:18:59,920 --> 20:19:03,440
that was create user now let's go to getuser


17017
20:19:03,440 --> 20:19:07,120
this function get user right here if i can go to it for some reason i'm


17018
20:19:07,120 --> 20:19:13,360
not able to go to it here and let's say wait db is over


17019
20:19:13,360 --> 20:19:18,320
uh that that that's that part let's go to get all notes


17020
20:19:18,320 --> 20:19:22,160
function get all notes and do the same thing await


17021
20:19:22,160 --> 20:19:27,440
on make sure db is open oh also i can see i didn't actually call


17022
20:19:27,440 --> 20:19:31,120
the function so let's make sure that i've done it in the other places i'm


17023
20:19:31,120 --> 20:19:35,280
just going to copy that code and ensure bb is open let's just make sure that i'm


17024
20:19:35,280 --> 20:19:40,160
actually calling the function and like i'm not like placing it just there


17025
20:19:40,160 --> 20:19:44,320
so it looks fine all right and so you have to do it in get all


17026
20:19:44,320 --> 20:19:48,400
nodes function as well and we're going to go to create node and


17027
20:19:48,400 --> 20:19:52,480
do the same thing so let's just go and await on


17028
20:19:52,480 --> 20:19:56,960
actually paste that code in there wait ensure db is open


17029
20:19:56,960 --> 20:20:01,040
and we're we need to do it in um so we not we've done it in create node


17030
20:20:01,040 --> 20:20:05,120
and let's go ahead to delete node delete node


17031
20:20:05,120 --> 20:20:08,552
and paste the function right there as well sorry paste the


17032
20:20:08,552 --> 20:20:13,040
invocation of the function delete all nodes


17033
20:20:13,040 --> 20:20:18,480
as well delete all nodes right there do the same thing and also we do it in


17034
20:20:18,480 --> 20:20:21,280
gets note here


17035
20:20:21,280 --> 20:20:26,872
the same thing and also we have what else do we have um


17036
20:20:26,872 --> 20:20:30,400
update notes right there


17037
20:20:30,400 --> 20:20:34,552
and we do it as the first call


17038
20:20:35,040 --> 20:20:38,480
but and then uh where else do we have to do it


17039
20:20:38,480 --> 20:20:43,120
let's see we've done it now delete user yeah i think now we place the ensure dbs


17040
20:20:43,120 --> 20:20:46,400
open all those calls all right


17041
20:20:46,640 --> 20:20:53,512
okay that was a lot of information um so what we need to do now is to


17042
20:20:53,512 --> 20:20:58,720
make sure basically that we work on our notes view as we promised in the


17043
20:20:58,720 --> 20:21:02,080
beginning of this chapter now you see


17044
20:21:02,080 --> 20:21:06,960
the reason that we created the ensure db is open is that before any of these


17045
20:21:06,960 --> 20:21:11,832
functions are called that our code is actually going to open the database for


17046
20:21:11,832 --> 20:21:16,400
us that means in our notes view we don't actually have to do this anymore because


17047
20:21:16,400 --> 20:21:21,192
we know that by issuing any database related commands to our nodes service


17048
20:21:21,192 --> 20:21:25,192
that that function in itself is going to open the database for us it's just a


17049
20:21:25,192 --> 20:21:29,120
nice little feature in our node servers to make sure that we don't have to make


17050
20:21:29,120 --> 20:21:35,120
an extra call to open the database um before we


17051
20:21:35,120 --> 20:21:39,192
start using our node service okay so it's just like a convenient a little


17052
20:21:39,192 --> 20:21:42,480
function all right as the captioning case now i'm


17053
20:21:42,480 --> 20:21:47,760
going to talk about future builder and async snapshot well um we've talked


17054
20:21:47,760 --> 20:21:52,400
actually previously a little bit about future builders before


17055
20:21:52,400 --> 20:21:57,360
but uh what a future builder is maybe actually you should write it here future


17056
20:21:57,360 --> 20:22:00,960
builder and then go to the code so you see it a little bit better you can see


17057
20:22:00,960 --> 20:22:07,760
it is a stateful widget so and what it does is that it subscribes to a future


17058
20:22:07,760 --> 20:22:11,040
that will return its value in the future if you're familiar with javascript then


17059
20:22:11,040 --> 20:22:13,680
you'll know it as promises um


17060
20:22:13,680 --> 20:22:18,960
and uh if you're familiar with rx swift or any rx related then you'll know


17061
20:22:18,960 --> 20:22:22,552
probably as like a single or an observable kind of actually not an


17062
20:22:22,552 --> 20:22:25,440
observable because that's a stream builder a future builder is kind of like


17063
20:22:25,440 --> 20:22:30,000
a single builder meaning that a value that starts someplace and then


17064
20:22:30,000 --> 20:22:34,320
calculates something returns its value and then it finishes that's it


17065
20:22:34,320 --> 20:22:37,512
so a future builder allows you to submit a future


17066
20:22:37,512 --> 20:22:41,760
and it will allow you to submit a builder meaning that


17067
20:22:41,760 --> 20:22:45,760
it takes that chunk of code that produces a value as a future it says


17068
20:22:45,760 --> 20:22:50,552
okay now it's mine i will take it subscribe to it as the value of this


17069
20:22:50,552 --> 20:22:54,320
future changes i will give you the ability to return various widgets that


17070
20:22:54,320 --> 20:22:58,320
need to be displayed on the screen so it basically ties


17071
20:22:58,320 --> 20:23:01,512
your future logic with your ui logic so it's


17072
20:23:01,512 --> 20:23:05,920
absolutely beautiful so what we need to do now is to make


17073
20:23:05,920 --> 20:23:11,192
sure that upon going to our build function right there in the body you see


17074
20:23:11,192 --> 20:23:16,872
in the body of our notes view here we need to make sure that


17075
20:23:16,872 --> 20:23:22,000
we are creating a user or getting the current


17076
20:23:22,000 --> 20:23:26,800
user from the database if it already exists and we're creating that user if


17077
20:23:26,800 --> 20:23:30,640
that user doesn't exist and if you remember we have this function


17078
20:23:30,640 --> 20:23:35,920
already it is called gets or creates something something a get or a create


17079
20:23:35,920 --> 20:23:41,280
user and it's a future so we're going to create a future builder in our uh notes


17080
20:23:41,280 --> 20:23:45,832
view that subscribes itself to the value that is returned by this and then it


17081
20:23:45,832 --> 20:23:49,920
will tell us about various updates and these various updates are going to be


17082
20:23:49,920 --> 20:23:54,720
provided to us as something called an async snapshot an async snapshot is


17083
20:23:54,720 --> 20:23:58,640
basically as its name indicates is a wrapper as a snapshot around an


17084
20:23:58,640 --> 20:24:02,640
asynchronous functionality which is in this case our future of


17085
20:24:02,640 --> 20:24:07,440
get or create user so that's what we're going to do in our


17086
20:24:07,440 --> 20:24:11,680
notes view as you can see in the


17087
20:24:11,680 --> 20:24:16,000
caption we're going to now return a future builder in nodesview.


17088
20:24:16,000 --> 20:24:21,280
and actually that should say notes view notes underscore


17089
20:24:21,280 --> 20:24:24,000
view so i'm going to fix the caption as well so


17090
20:24:24,000 --> 20:24:29,440
i don't confuse anybody including myself and notes view


17091
20:24:29,512 --> 20:24:32,240
here so now it's better i apologize for that


17092
20:24:32,240 --> 20:24:35,280
so right now we have this hello world but


17093
20:24:35,280 --> 20:24:39,360
we're gonna change that so it returns a notes view so i'm gonna say sorry a


17094
20:24:39,360 --> 20:24:43,600
future builder so let's say we now return a future builder


17095
20:24:43,600 --> 20:24:46,552
and now it says okay there are two parameters that we have to provide one


17096
20:24:46,552 --> 20:24:50,552
is the future the other one is actually the builder function so the builder


17097
20:24:50,552 --> 20:24:52,872
sorry the future in itself is going to be


17098
20:24:52,872 --> 20:24:56,800
you see the future is our note service


17099
20:24:56,800 --> 20:25:02,000
get or create the user and the email if you remember is the current user's email


17100
20:25:02,000 --> 20:25:06,640
address which we created a getter for called user email so let's go put that


17101
20:25:06,640 --> 20:25:10,640
in there user email and then you can see it's still complaining saying that the


17102
20:25:10,640 --> 20:25:14,320
builder function hasn't been provided


17103
20:25:14,320 --> 20:25:17,280
so let's go and say then that we have a builder function


17104
20:25:17,280 --> 20:25:21,512
and right there and i talked about async snapshot because that's the parameter


17105
20:25:21,512 --> 20:25:27,832
that you get in here is this is async snap snapshot of object right now


17106
20:25:27,832 --> 20:25:34,080
but we're gonna fix that so um let's then in here um


17107
20:25:34,080 --> 20:25:39,832
let's then talk about actually this functionality right here


17108
20:25:39,832 --> 20:25:43,120
so after we get the current user or creates


17109
20:25:43,120 --> 20:25:48,000
a new user if that user hasn't existed in our database we also need to grab all


17110
20:25:48,000 --> 20:25:51,680
the nodes for that user and


17111
20:25:51,680 --> 20:25:56,000
we don't right now have the functionality to


17112
20:25:56,000 --> 20:26:00,000
have like a stream of all the nodes for the current user we're going to add that


17113
20:26:00,000 --> 20:26:03,832
soon but as you can see in the caching is we can achieve this with our stream


17114
20:26:03,832 --> 20:26:08,080
controller which we've already placed like the groundwork for in our node


17115
20:26:08,080 --> 20:26:11,440
service so let's go and create a little


17116
20:26:11,440 --> 20:26:15,832
functionality in here in our notes service dot dart


17117
20:26:15,832 --> 20:26:20,480
and as you can see it allows you to retrieve all the notes so


17118
20:26:20,480 --> 20:26:23,680
we're just going to say stream


17119
20:26:24,080 --> 20:26:29,280
of a list of database notes database notes like that


17120
20:26:29,280 --> 20:26:34,720
and we it's a getter and we call it all notes okay and what it does is is in


17121
20:26:34,720 --> 20:26:39,600
itself is gonna subscribe to this note stream controller and retrieve all the


17122
20:26:39,600 --> 20:26:42,872
notes from that controller because remember this note stream controller in


17123
20:26:42,872 --> 20:26:46,800
it in itself contains this guy all right


17124
20:26:46,800 --> 20:26:50,320
so and that's what we're going to do we're going to say it returns the node


17125
20:26:50,320 --> 20:26:54,120
stream controller stream


17126
20:26:54,240 --> 20:26:58,640
actually another stream get all not so sorry that was wrong


17127
20:26:58,640 --> 20:27:01,360
and stream


17128
20:27:01,600 --> 20:27:03,832
all right


17129
20:27:04,720 --> 20:27:09,680
so that's our getter for getting all the notes um now what we need to do now that


17130
20:27:09,680 --> 20:27:15,600
we've created our uh so back into back in note2.dart now that we have


17131
20:27:15,600 --> 20:27:19,280
created our user


17132
20:27:19,280 --> 20:27:26,160
what we need to make sure of is that if the user could be created then we are


17133
20:27:26,160 --> 20:27:30,320
going to work with something called a stream builder that retrieves all the


17134
20:27:30,320 --> 20:27:34,160
nodes from the node service and then renders them on the screen okay


17135
20:27:34,160 --> 20:27:37,600
but we can't yet render them we don't have any user generated content and we


17136
20:27:37,600 --> 20:27:41,120
also don't know yet how to render them so first let's take care of something in


17137
20:27:41,120 --> 20:27:45,680
here this snapshot in here what we need to do is to say if snapchat


17138
20:27:45,680 --> 20:27:51,600
connection state is connection state dot done


17139
20:27:51,600 --> 20:27:53,920
like this um


17140
20:27:53,920 --> 20:27:57,440
if that's the case then we're gonna do some logic in here so let's just say


17141
20:27:57,440 --> 20:28:03,360
return a text of hello for now okay actually we need to maybe switch this so


17142
20:28:03,360 --> 20:28:06,240
let's just say switch


17143
20:28:07,680 --> 20:28:12,872
snapshot dots connection state and i really like to get uh visual studio code


17144
20:28:12,872 --> 20:28:16,080
to complete the rest for me so i don't like to write all the cases so i'm just


17145
20:28:16,080 --> 20:28:19,832
gonna say command dot or on mac or control dot on linux and windows i say


17146
20:28:19,832 --> 20:28:24,240
add missing case clauses and in the case of done i'm just going to say return


17147
20:28:24,240 --> 20:28:28,720
this text okay if the creation or the retrieval of the


17148
20:28:28,720 --> 20:28:32,960
current user was completed then just return this text hello


17149
20:28:32,960 --> 20:28:38,160
and in any other case for instance in the case of default


17150
20:28:38,160 --> 20:28:43,680
we're just going to return a circular progress indicator just like


17151
20:28:43,680 --> 20:28:48,400
that okay then i'm gonna put the case of done


17152
20:28:48,400 --> 20:28:52,400
above that like that all right


17153
20:28:52,400 --> 20:28:59,040
let's then do a hot restart and i can see my um scrcpy kind of just crashed so


17154
20:28:59,040 --> 20:29:03,280
yeah stuff like that happens sometimes and that's okay let me go ahead and go


17155
20:29:03,280 --> 20:29:08,000
back to this shell and say hcr cpy


17156
20:29:08,080 --> 20:29:11,600
the application is working fine it's just that scr cpy crest so i'm just


17157
20:29:11,600 --> 20:29:15,440
gonna say your notes will appear here now


17158
20:29:15,440 --> 20:29:19,832
command s actually my debug process has crashed as


17159
20:29:19,832 --> 20:29:22,552
well so i'm going to run the application now


17160
20:29:22,552 --> 20:29:24,800
again


17161
20:29:25,760 --> 20:29:29,360
hopefully this gradle task goes fast because we've


17162
20:29:29,360 --> 20:29:32,320
already compiled the application from before


17163
20:29:32,320 --> 20:29:37,192
so what we need to do you see we are now taking care of making sure that the user


17164
20:29:37,192 --> 20:29:40,960
is created in the database if it didn't exist or we're getting the user if that


17165
20:29:40,960 --> 20:29:46,000
user exists in the database but what we also need to do is to start listening to


17166
20:29:46,000 --> 20:29:50,720
changes to this stream which is in our note service called all nodes and


17167
20:29:50,720 --> 20:29:55,760
depending on the state of that stream then we're going to build our user


17168
20:29:55,760 --> 20:30:00,960
interface all right so in this in here we're actually not going to return like


17169
20:30:00,960 --> 20:30:05,360
a text of hey your notes will appear here but we're actually going to use a


17170
20:30:05,360 --> 20:30:10,320
stream builder which is very similar to a future builder but it actually listens


17171
20:30:10,320 --> 20:30:14,160
to changes to a stream okay


17172
20:30:14,400 --> 20:30:18,400
so oops did i just kill the application


17173
20:30:18,400 --> 20:30:21,192
right here so there we go your notes will appear


17174
20:30:21,192 --> 20:30:24,552
here so that seems to be working fine so let's


17175
20:30:24,552 --> 20:30:29,192
go in here and then say that we want to um


17176
20:30:29,832 --> 20:30:32,872
return our stream builder i'm going to put this


17177
20:30:32,872 --> 20:30:37,192
back and before we do that i want to explain this little thing that i've


17178
20:30:37,192 --> 20:30:42,080
shown in the captions what are the waiting and dawn flags in


17179
20:30:42,080 --> 20:30:45,680
the connection state you see both a stream builder and a future


17180
20:30:45,680 --> 20:30:49,440
builder work with something called an async snapshot which is this guy you see


17181
20:30:49,440 --> 20:30:53,920
async snapshot and this async snapshot can have various connection states so if


17182
20:30:53,920 --> 20:30:58,000
you go to connection state in there and you can see we have none waiting active


17183
20:30:58,000 --> 20:31:01,512
done all right so


17184
20:31:03,600 --> 20:31:07,120
when you when you have you see in the case of an active says for example a


17185
20:31:07,120 --> 20:31:10,872
stream that has returned at least one value but is not yet done


17186
20:31:10,872 --> 20:31:17,440
so that's for a that's for a stream uh but if you're waiting for a future or


17187
20:31:17,440 --> 20:31:21,360
a stream then you're gonna get this waiting flag and it done is gonna happen


17188
20:31:21,360 --> 20:31:26,640
for your um a future so a future that has completed its task as i said it does


17189
20:31:26,640 --> 20:31:30,552
something and it completes but a stream usually it just keeps living so you


17190
20:31:30,552 --> 20:31:34,400
can't like hook into or you shouldn't hook into the done event for a stream


17191
20:31:34,400 --> 20:31:39,440
but you should actually hook into your waiting um


17192
20:31:39,440 --> 20:31:42,480
connection state so that's what we're going to do so connections stay done for


17193
20:31:42,480 --> 20:31:46,872
a future and a connection state of um are


17194
20:31:46,872 --> 20:31:51,280
waiting for the stream so in here let's then create a


17195
20:31:51,280 --> 20:31:55,920
stream builder and our stream


17196
20:31:55,920 --> 20:32:02,120
is going to be our note services all notes um


17197
20:32:03,440 --> 20:32:08,080
so that's the stream itself and then we need a builder and let's get visual


17198
20:32:08,080 --> 20:32:13,280
studio to complete that for us um okay and in the builder what we're gonna


17199
20:32:13,280 --> 20:32:19,120
do is we're gonna say switch snapshot connection state


17200
20:32:19,120 --> 20:32:22,320
like this get visual studio code to complete the rest for you


17201
20:32:22,320 --> 20:32:26,480
in the case of waiting


17202
20:32:26,480 --> 20:32:30,640
we're just going to say return


17203
20:32:30,640 --> 20:32:36,160
paused text waiting for all notes


17204
20:32:36,160 --> 20:32:40,552
okay i'm going to remove the break from here


17205
20:32:40,552 --> 20:32:45,192
and in any other case so in the case of default we're just going to say


17206
20:32:45,192 --> 20:32:50,320
return on circular progress indicator just like


17207
20:32:50,320 --> 20:32:54,320
that so now you see if i command s to hot


17208
20:32:54,320 --> 20:32:58,800
reload then it just says waiting for all nodes to appear on the screen so


17209
20:32:58,800 --> 20:33:04,800
this is now like the skeleton of our application's notes view so that it


17210
20:33:04,800 --> 20:33:08,552
takes care of two things it gets the current user using his or her email


17211
20:33:08,552 --> 20:33:11,680
address if that user already exists in the database or creates it so that's the


17212
20:33:11,680 --> 20:33:16,320
future builder and the the widget returned by the future


17213
20:33:16,320 --> 20:33:20,960
builder in itself is a stream builder so the stream builder then calculates


17214
20:33:20,960 --> 20:33:25,512
all the nodes and returns them from the node service and then it has a


17215
20:33:25,512 --> 20:33:28,960
connection state and waiting which in turn right now is saying waiting for all


17216
20:33:28,960 --> 20:33:31,360
nodes and we're going to change this later


17217
20:33:31,360 --> 20:33:34,872
so that so that uh


17218
20:33:34,872 --> 20:33:38,240
it doesn't just return a text it actually returns a list of notes all


17219
20:33:38,240 --> 20:33:42,320
right so now let's talk about something else


17220
20:33:42,320 --> 20:33:46,872
before we wrap up this chapter and you see at the moment what we're doing is


17221
20:33:46,872 --> 20:33:53,040
that we're saying our note service um is a new service right here so every time


17222
20:33:53,040 --> 20:33:57,680
go into init states if i command s in here or if you did a hot reload or hot


17223
20:33:57,680 --> 20:34:01,120
restarting here actually hot restart this


17224
20:34:01,120 --> 20:34:04,400
i can see maybe that is the reason we're crashing the entire application because


17225
20:34:04,400 --> 20:34:07,360
we're creating a new node service so that could be the reason i can see hot


17226
20:34:07,360 --> 20:34:11,920
restart is a little bit flaky right now so um so that is pretty much the reason


17227
20:34:11,920 --> 20:34:15,192
we're going to create a single now if you're not familiar with what a


17228
20:34:15,192 --> 20:34:19,760
singleton is a singleton essentially is a pattern used in software development


17229
20:34:19,760 --> 20:34:24,872
where you create a service for instance or a class instance


17230
20:34:24,872 --> 20:34:30,240
where that class instance is only one inside the entire application right now


17231
20:34:30,240 --> 20:34:33,760
any place in our app we can go and create a new instance of node service


17232
20:34:33,760 --> 20:34:38,000
but if you think about it the node service should only exist as one copy in


17233
20:34:38,000 --> 20:34:41,360
the entire application it shouldn't be like made new copies of this note


17234
20:34:41,360 --> 20:34:44,720
service over and over again so that's what a singleton is and that's what


17235
20:34:44,720 --> 20:34:50,320
we're going to do with our note service so i see i have a little bit of problem


17236
20:34:50,320 --> 20:34:53,192
with my um


17237
20:34:53,440 --> 20:34:56,400
captions and i'm going to bring the next captioner and fix that


17238
20:34:56,400 --> 20:35:00,720
so let's go ahead first and uh before i run the application maybe we


17239
20:35:00,720 --> 20:35:04,080
should fix this problem with our singleton so let's go to our note


17240
20:35:04,080 --> 20:35:08,320
service and we're going to create a single now


17241
20:35:08,320 --> 20:35:12,800
singleton pattern in various languages i mean it differs from language language


17242
20:35:12,800 --> 20:35:16,872
and dart is not as clean to be honest with you in my opinion as it should be


17243
20:35:16,872 --> 20:35:22,240
such as it is in languages such as swift um but it is what it is and we need to


17244
20:35:22,240 --> 20:35:26,552
kind of live with it the way uh it works right now


17245
20:35:26,552 --> 20:35:30,000
so the way that we do it uh that we make our


17246
20:35:30,000 --> 20:35:35,512
class note service a singleton is to go ahead and


17247
20:35:35,512 --> 20:35:40,080
first create a private constructor for our class so we're going


17248
20:35:40,080 --> 20:35:45,040
to say note service underscore and just a


17249
20:35:45,040 --> 20:35:48,640
shared instance and this is just a function name it's


17250
20:35:48,640 --> 20:35:52,552
just a private initializer to this class okay


17251
20:35:52,552 --> 20:35:55,440
and what we're going to do then is we're going to say static


17252
20:35:55,440 --> 20:35:58,832
final notes


17253
20:35:58,832 --> 20:36:03,600
service so we're creating a shared instance and we're going to say notes


17254
20:36:03,600 --> 20:36:06,800
service got shared instance so this creates that


17255
20:36:06,800 --> 20:36:10,800
shared instance for us but no one from the outside world is going to be able to


17256
20:36:10,800 --> 20:36:15,040
then make a call to these two because they are well private so now we're going


17257
20:36:15,040 --> 20:36:18,960
to create a factory constructor we're going to call it note service


17258
20:36:18,960 --> 20:36:22,400
like that and that is going to return a shared instance for us so it's just a


17259
20:36:22,400 --> 20:36:26,240
hack to be honest with you in my opinion at least it's it's a hacky way of


17260
20:36:26,240 --> 20:36:31,512
creating a singleton but that's the way it works in dart at least for now


17261
20:36:31,760 --> 20:36:35,680
all right now we've created our singleton so what we can do then is i


17262
20:36:35,680 --> 20:36:38,720
mean we don't have to make any changes to this guy to the init state because


17263
20:36:38,720 --> 20:36:43,040
right now it's making any it's constructing node service and we


17264
20:36:43,040 --> 20:36:47,600
have changed that so that anyone who calls node service like this is actually


17265
20:36:47,600 --> 20:36:51,832
coming to the factory constructor which then in turns returns this shared


17266
20:36:51,832 --> 20:36:55,832
instance which in turn calls this private factory and it causes private


17267
20:36:55,832 --> 20:36:59,760
initializer or constructor so it's like a three layer


17268
20:36:59,760 --> 20:37:05,360
deep in order to create a singleton all right well done we


17269
20:37:05,360 --> 20:37:10,480
i mean we could also try to run the application while all this is going on


17270
20:37:10,480 --> 20:37:16,160
and i can bring up scr cpy again and if it's doing any better bring it up here


17271
20:37:16,160 --> 20:37:18,000
okay so


17272
20:37:18,000 --> 20:37:22,400
we've done quite a lot of work we've laid the groundwork for the next chapter


17273
20:37:22,400 --> 20:37:27,512
so now we have the ability to hook into all the notes available in our database


17274
20:37:27,512 --> 20:37:31,280
which is being controlled by a stream and a stream controller and we're then


17275
20:37:31,280 --> 20:37:37,440
being able then we're able to display those notes on the screen use using this


17276
20:37:37,440 --> 20:37:41,832
stream builder which i'm trying to find right now which is right here okay so


17277
20:37:41,832 --> 20:37:45,120
we've done quite a lot of work and well done to you for sticking with me


17278
20:37:45,120 --> 20:37:50,552
throughout this chapter as is the tradition we are doing in


17279
20:37:50,552 --> 20:37:54,400
every other chapter by the end of chapter we commit our work and also tag


17280
20:37:54,400 --> 20:37:57,192
them so let's go ahead and do that i'm going to change the


17281
20:37:57,192 --> 20:38:00,720
screen layout a little bit get rid of the cr cpy it has been a little bit


17282
20:38:00,720 --> 20:38:05,832
angry with us today this scr cpy and here's the screen layout and i'm


17283
20:38:05,832 --> 20:38:11,192
going to increase the font size of it and a new shell all right so in the


17284
20:38:11,192 --> 20:38:15,760
previous chapter we uh committed and tagged our work as a


17285
20:38:15,760 --> 20:38:20,552
step 11 i believe so if you say git tag you can see we have up to step 11. let's


17286
20:38:20,552 --> 20:38:25,360
go ahead and say git status first yep some files that have been modified


17287
20:38:25,360 --> 20:38:29,512
and we add all the files and then we say


17288
20:38:29,512 --> 20:38:34,552
step 12 this time and we push our changes


17289
20:38:34,552 --> 20:38:38,800
and then we're going to tag our work as well as step


17290
20:38:38,800 --> 20:38:44,000
12 and then we push our attacks


17291
20:38:44,000 --> 20:38:48,720
fantastic well done now again uh what we do in the end of every


17292
20:38:48,720 --> 20:38:52,160
chapter is we talked a little bit about what we're gonna talk about in the next


17293
20:38:52,160 --> 20:38:55,680
chapter and as the caption indicates we're gonna


17294
20:38:55,680 --> 20:38:58,400
uh we're done with the basics of the notes


17295
20:38:58,400 --> 20:39:02,080
but we have no data and that's what we're gonna fix a remedy in the next


17296
20:39:02,080 --> 20:39:06,640
chapter so we're gonna talk about how we allow the user to press a button for


17297
20:39:06,640 --> 20:39:11,120
instance in order to create a new note and for that note then to appear in our


17298
20:39:11,120 --> 20:39:15,832
stream builder and display to the user so


17299
20:39:15,832 --> 20:39:19,920
maybe you want to take a little break some refreshments do that please and


17300
20:39:19,920 --> 20:39:24,080
i'll see you in the next chapter hello everyone and welcome to chapter 30


17301
20:39:24,080 --> 20:39:27,920
of this flutter course in the previous chapters we've been working quite a lot


17302
20:39:27,920 --> 20:39:31,680
with our database layer and we've also been working with the ui in order to


17303
20:39:31,680 --> 20:39:36,400
kind of make sure that we can have a list of notes um but as you've


17304
20:39:36,400 --> 20:39:39,920
seen in the previous chapters we don't have notes or


17305
20:39:39,920 --> 20:39:43,600
we don't actually have the ability for the user to create these


17306
20:39:43,600 --> 20:39:47,832
notes so starting from this chapter we're going to start working on creating


17307
20:39:47,832 --> 20:39:51,192
some sort of user interface in which the user can enter


17308
20:39:51,192 --> 20:39:55,040
their notes and those notes will be saved then with our quad servers that


17309
20:39:55,040 --> 20:39:59,040
we've created in one of the previous chapters


17310
20:39:59,040 --> 20:40:03,280
before we carry on let's take care of one thing at the moment our notes view


17311
20:40:03,280 --> 20:40:07,360
doesn't really have like the proper title i'm going to bring the code here


17312
20:40:07,360 --> 20:40:12,720
on the screen so you see it as well and i'm going to bring scrcpy you may


17313
20:40:12,720 --> 20:40:18,160
have your simulator or emulator um or an actual device on the screen so that's


17314
20:40:18,160 --> 20:40:22,320
also fine let's do some rearrangement here and i'm


17315
20:40:22,320 --> 20:40:27,360
also going to rearrange the screen here so you see the code better at the moment


17316
20:40:27,360 --> 20:40:32,240
the ui and the title of our main ui is just saying main ui so let's take care


17317
20:40:32,240 --> 20:40:36,320
of that and that's inside notes view dart


17318
20:40:36,320 --> 20:40:41,440
let's find where we're creating the app bar and here we're saying main ui so as


17319
20:40:41,440 --> 20:40:44,800
the caption indicates we're gonna change that to your notes


17320
20:40:44,800 --> 20:40:50,480
like this and command s hot reload and then we can see your notes appear there


17321
20:40:50,480 --> 20:40:55,760
so that part is now done um so


17322
20:40:55,760 --> 20:41:00,240
let's now have a look at how we're gonna enable a user to create new notes in our


17323
20:41:00,240 --> 20:41:03,440
application you see um


17324
20:41:03,440 --> 20:41:06,320
there are different ways of going about doing that there are like some


17325
20:41:06,320 --> 20:41:10,320
applications that will display something called a floating action


17326
20:41:10,320 --> 20:41:14,872
button a floating action button is a button that appears usually to the


17327
20:41:14,872 --> 20:41:19,680
bottom right of the screen if you have languages which are left to right or if


17328
20:41:19,680 --> 20:41:23,600
you have arabic lang like arabic persian language like that that you write from


17329
20:41:23,600 --> 20:41:27,920
right to left then that floating action button should appear on bottom left so


17330
20:41:27,920 --> 20:41:32,000
it's kind of like a button that appears just floating on the screen


17331
20:41:32,000 --> 20:41:37,280
um and usually it's like out of uh out of your um out of the way for your main


17332
20:41:37,280 --> 20:41:40,400
ui uh however it can get sometimes in the


17333
20:41:40,400 --> 20:41:43,512
middle of the way so um


17334
20:41:43,512 --> 20:41:47,440
for instance if you have a list of notes and these notes can like their titles


17335
20:41:47,440 --> 20:41:52,160
can go to a few lines of text and then you have a floating button that sits


17336
20:41:52,160 --> 20:41:55,360
like at the bottom of the screen it could just block some again parts of


17337
20:41:55,360 --> 20:41:58,720
your content so some people don't like floating action


17338
20:41:58,720 --> 20:42:02,240
buttons and floating bar action buttons are


17339
20:42:02,240 --> 20:42:04,800
usually they usually appear in android


17340
20:42:04,800 --> 20:42:08,720
applications is i think it's it's coming from material design from google i could


17341
20:42:08,720 --> 20:42:12,160
be wrong about this but usually you don't see them in ios applications and


17342
20:42:12,160 --> 20:42:16,000
since we're developing our application to be user friendly for both ios and


17343
20:42:16,000 --> 20:42:19,120
android users we're not going to use floating action buttons for now but


17344
20:42:19,120 --> 20:42:22,552
there's just to be clear there's really nothing wrong with floating action


17345
20:42:22,552 --> 20:42:27,360
buttons so so what we could do is either we could


17346
20:42:27,360 --> 20:42:32,400
go in our menu here where we have log out and create a new item in here that


17347
20:42:32,400 --> 20:42:37,040
says for instance a plus or add add a new note or something like that


17348
20:42:37,040 --> 20:42:41,760
i'm sorry i'll just add this also to uh do not disturb so we could either


17349
20:42:41,760 --> 20:42:46,640
add an item in here that says add note something like that or we could go to


17350
20:42:46,640 --> 20:42:49,832
this bar that we have up here our app bar


17351
20:42:49,832 --> 20:42:54,240
and add a new item just like we have this three vertical


17352
20:42:54,240 --> 20:42:58,320
dots we could add a new item in there


17353
20:42:58,800 --> 20:43:02,160
so now then it comes to kind of like preference


17354
20:43:02,160 --> 20:43:06,000
and some sort of reasoning of why we should add


17355
20:43:06,000 --> 20:43:10,552
the plus button the way we're gonna add it and my reasoning behind um


17356
20:43:10,552 --> 20:43:15,360
wanting to put the plus button but like beside this


17357
20:43:15,360 --> 20:43:20,080
these vertical three dots is that adding a new note is pretty much like


17358
20:43:20,080 --> 20:43:24,552
one of the main tasks users would want to do in your application's main user


17359
20:43:24,552 --> 20:43:29,680
interface so they either go in here to and delete their notes update their


17360
20:43:29,680 --> 20:43:33,120
notes or add a new note so there are three things they're going to do


17361
20:43:33,120 --> 20:43:38,552
deleting notes is usually not that common so updating notes and adding new


17362
20:43:38,552 --> 20:43:43,192
notes should be like the main actions that your users perform in your main uh


17363
20:43:43,192 --> 20:43:47,280
application ui so it should be very instantaneous it should just be very


17364
20:43:47,280 --> 20:43:51,600
easy for users to do that so if you put a plus button here


17365
20:43:51,600 --> 20:43:56,872
beside this these three vertical dots then it takes the user just one click to


17366
20:43:56,872 --> 20:44:01,360
go to the new screen in order to create a new node however if you put like add


17367
20:44:01,360 --> 20:44:04,720
to notes menu in here then they have to first do


17368
20:44:04,720 --> 20:44:09,832
one tab to go here and then another tab in order to create to go to the next


17369
20:44:09,832 --> 20:44:13,040
screen and that's just like one tab extra


17370
20:44:13,040 --> 20:44:19,512
and that's where we're gonna add a plus button beside these three vertical dots


17371
20:44:19,512 --> 20:44:23,760
so before we get started with that let's go ahead and


17372
20:44:23,760 --> 20:44:27,760
do some preparation for that so we need a widget and which is going to be our


17373
20:44:27,760 --> 20:44:32,080
new notes view and as you can see we're going to create a new file for it inside


17374
20:44:32,080 --> 20:44:38,872
lib views notes which is a new folder i believe which we haven't had from before


17375
20:44:38,872 --> 20:44:42,800
let's go in here we have views as you can see and we don't have a folder


17376
20:44:42,800 --> 20:44:47,040
called notes so in views what we're going to create now


17377
20:44:47,040 --> 20:44:51,512
is this dart file new node view so i'm just going to right click on it and say


17378
20:44:51,512 --> 20:44:55,120
here i'm going to say a folder called notes which we don't have yet


17379
20:44:55,120 --> 20:45:00,480
and i'm going to say new notes view dot dart okay so that's that file already


17380
20:45:00,480 --> 20:45:04,080
we're not going to do anything in that file yet


17381
20:45:04,080 --> 20:45:09,680
and now that we have our notes folder under views it just makes


17382
20:45:09,680 --> 20:45:13,760
sense to move our notes view here as well which is at the moment sitting


17383
20:45:13,760 --> 20:45:19,440
under views you can see the breadcrumb here says lib views notes view it makes


17384
20:45:19,440 --> 20:45:24,640
sense now to move this notes view which is the list of our notes into this notes


17385
20:45:24,640 --> 20:45:29,512
folder as well so i'm going to need you to just drag that file and place it


17386
20:45:29,512 --> 20:45:34,640
inside the notes folder okay


17387
20:45:34,640 --> 20:45:39,512
all right that's great excuse me so we've done that now


17388
20:45:39,512 --> 20:45:43,192
um now what you may have noticed if i bring


17389
20:45:43,192 --> 20:45:45,680
the list a little bit higher now that we've


17390
20:45:45,680 --> 20:45:48,320
done that also let's just make sure we haven't


17391
20:45:48,320 --> 20:45:51,192
broken any uh imports


17392
20:45:51,192 --> 20:45:55,512
notes view oh i see that's that's really great because by dragging the notes view


17393
20:45:55,512 --> 20:45:58,720
into the notes folder visual studio was


17394
20:45:58,720 --> 20:46:03,680
intelligent enough to refactor also all the imports that we're referring to


17395
20:46:03,680 --> 20:46:07,832
notes view so your editor of choice like if you're using sublime or if you're


17396
20:46:07,832 --> 20:46:12,080
using some vim for instance it may not be able to automatically take care of


17397
20:46:12,080 --> 20:46:16,640
that so by you moving your notes view inside the notes folder depending on how


17398
20:46:16,640 --> 20:46:21,280
you do it you may need to fix your imports as well so


17399
20:46:21,280 --> 20:46:25,760
if you search for nodesview. let's have a look at


17400
20:46:25,760 --> 20:46:30,720
i can see the only place it was imported it was the main.dart file so you will


17401
20:46:30,720 --> 20:46:34,552
you might need to go and fix that import in there okay so if you're getting an


17402
20:46:34,552 --> 20:46:39,440
error for your imports then you know why all right so


17403
20:46:39,440 --> 20:46:43,512
that's that's moving our notes you now if you've noticed if you go back to


17404
20:46:43,512 --> 20:46:47,920
the editor here you'll you probably have noticed that we have some red files in


17405
20:46:47,920 --> 20:46:51,760
here and it's because we have added um


17406
20:46:51,760 --> 20:46:56,552
our email uh an email field to our auth user so if


17407
20:46:56,552 --> 20:47:00,720
you go in here you can see that we added this email field in our auth user in one


17408
20:47:00,720 --> 20:47:04,080
of the previous chapters because we needed


17409
20:47:04,080 --> 20:47:08,640
to be able to retrieve nodes for a specific auth user from our


17410
20:47:08,640 --> 20:47:12,872
node service okay so after adding that now we've broken


17411
20:47:12,872 --> 20:47:17,832
our tests and we haven't really had the time yet to fix the test so


17412
20:47:17,832 --> 20:47:20,800
uh let's have a look at how we can fix our


17413
20:47:20,800 --> 20:47:26,872
test if we if you dr uh scroll down a little bit in our tests file you will


17414
20:47:26,872 --> 20:47:31,832
notice where we've broken the test and this is here we're in two places where


17415
20:47:31,832 --> 20:47:37,120
we're creating an off user okay here and the way we're working with this off


17416
20:47:37,120 --> 20:47:41,832
user in our test is not really something that we're writing tests for later like


17417
20:47:41,832 --> 20:47:45,360
we're not actually creating an off user and then


17418
20:47:45,360 --> 20:47:50,640
doing a test against the off users email so it's at the moment it's pretty much


17419
20:47:50,640 --> 20:47:55,280
just decoration in that we need to just make sure that our tests compile and


17420
20:47:55,280 --> 20:47:59,760
that we don't have a compilation error here so let's go and see if visual


17421
20:47:59,760 --> 20:48:03,120
studio code can help us with that so i'm just going to do command dot on mac or


17422
20:48:03,120 --> 20:48:07,680
control dot on windows and linux and say add required argument eval and for email


17423
20:48:07,680 --> 20:48:12,080
you could just say fooatbar.com so that doesn't matter so much and a comma at


17424
20:48:12,080 --> 20:48:16,552
the end to get dark formatter to format the file correctly for us


17425
20:48:16,552 --> 20:48:20,160
and then excuse me gonna get help from visual studio code again and say add


17426
20:48:20,160 --> 20:48:24,552
record argument email and again we're going to say um


17427
20:48:24,552 --> 20:48:29,360
fooatbar.com and a commanding all right


17428
20:48:29,360 --> 20:48:32,240
so as you can see in the caption also we just need to make sure that we're


17429
20:48:32,240 --> 20:48:35,680
running our tests and making sure that we haven't broken anything so let's go


17430
20:48:35,680 --> 20:48:40,480
to our tests in here and see if i if i can bring this up a little bit


17431
20:48:40,480 --> 20:48:44,400
change the screen layout so you see what i'm doing as well uh


17432
20:48:44,400 --> 20:48:48,800
increase the size of the screen and i'm going to search for flutter test and


17433
20:48:48,800 --> 20:48:52,400
that's the line the command that you also have to type as the caption at the


17434
20:48:52,400 --> 20:48:57,192
bottom of the screen indicates as well and let's just run our tests and see


17435
20:48:57,192 --> 20:49:00,640
what we get for results if we've done everything correctly we shouldn't have


17436
20:49:00,640 --> 20:49:04,320
any problems with our tests at the moment


17437
20:49:04,320 --> 20:49:08,640
but you may have like diverged from the course uh for a good reason and written


17438
20:49:08,640 --> 20:49:13,760
more tests and you may then have to fix those tests as well and i highly


17439
20:49:13,760 --> 20:49:16,960
encourage all my watchers whoever's watching this course


17440
20:49:16,960 --> 20:49:21,832
to actually do as many tests as possible experiment with widget test integration


17441
20:49:21,832 --> 20:49:26,400
tests and unit tests as much as you can to learn how that works


17442
20:49:26,400 --> 20:49:30,000
um all right so that's that now let's go


17443
20:49:30,000 --> 20:49:33,760
ahead and change the screen layout we've taken care of our tests now and you can


17444
20:49:33,760 --> 20:49:38,872
see the tests have passed and also we don't have


17445
20:49:38,872 --> 20:49:45,360
any more red flags inside our auth test.dart file


17446
20:49:45,680 --> 20:49:48,800
all right so what we need to do now you see


17447
20:49:48,800 --> 20:49:54,480
when we then add a plus button to our main ui in order to go to


17448
20:49:54,480 --> 20:49:59,360
our new view which is um i believe we created it here new note


17449
20:49:59,360 --> 20:50:02,552
view we need to define a round for it we've


17450
20:50:02,552 --> 20:50:07,440
already done that for um for


17451
20:50:07,440 --> 20:50:12,240
all our other routes so if we have a look at our um let's see if we can find


17452
20:50:12,240 --> 20:50:15,120
it constants routes


17453
20:50:15,120 --> 20:50:18,800
we have verified email routes we have nodes route register route and all of


17454
20:50:18,800 --> 20:50:21,512
those so i'm just going to have a look at my


17455
20:50:21,512 --> 20:50:25,040
notes and make sure that we define our new route in here


17456
20:50:25,040 --> 20:50:28,000
excuse me so let's go and call this new route and


17457
20:50:28,000 --> 20:50:32,320
we're going to call it new note route and we're just going to say


17458
20:50:32,320 --> 20:50:35,832
slash and notes slash


17459
20:50:35,832 --> 20:50:38,552
new note all right so


17460
20:50:38,552 --> 20:50:43,600
and remember this doesn't really mean anything except for


17461
20:50:43,600 --> 20:50:48,320
excuse me again except for you to handle like your route


17462
20:50:48,320 --> 20:50:53,040
name so if you had like notes with a z it would


17463
20:50:53,040 --> 20:50:56,480
also work as long as you're using the same route name everywhere


17464
20:50:56,480 --> 20:51:00,960
so don't think that this is like bound to any sort of a magical


17465
20:51:00,960 --> 20:51:04,640
file finding a mechanism in flutter it has nothing to do with that it's just


17466
20:51:04,640 --> 20:51:09,040
for you to define your route name so you could literally just say fu in here and


17467
20:51:09,040 --> 20:51:12,400
as long as you use this route name everywhere everything's just gonna work


17468
20:51:12,400 --> 20:51:15,512
as expected so


17469
20:51:15,512 --> 20:51:20,000
that's our new note route created inside the cons


17470
20:51:20,000 --> 20:51:24,160
of routes dart as the notes indicate as the caption on


17471
20:51:24,160 --> 20:51:28,320
the screen indicates we have to go to main dart file in here


17472
20:51:28,320 --> 20:51:32,960
and we need to then go and define that route uh here


17473
20:51:32,960 --> 20:51:37,360
okay so we have login route register route notes route verify email route and


17474
20:51:37,360 --> 20:51:41,760
then we have to define this new route which is called new node route okay


17475
20:51:41,760 --> 20:51:46,960
so let's just let's just say new node route it takes a build context in here


17476
20:51:46,960 --> 20:51:49,760
we could just ignore that with an underscore if you want to i'm not doing


17477
20:51:49,760 --> 20:51:54,000
that and then we're going to create a new instance of new uh


17478
20:51:54,000 --> 20:51:59,440
node routes sorry a new node view um but we don't


17479
20:51:59,440 --> 20:52:05,120
have that yet so let's go and define the new node view


17480
20:52:05,120 --> 20:52:09,680
but for now i'm just going to say const new node view like this and this is not


17481
20:52:09,680 --> 20:52:12,960
going to work because we don't have that view set up


17482
20:52:12,960 --> 20:52:16,400
yet we've just created the file for it okay


17483
20:52:16,400 --> 20:52:21,192
so i'm going to close some files which we don't need and let's go into our new


17484
20:52:21,192 --> 20:52:23,760
note view


17485
20:52:24,320 --> 20:52:28,960
and as the caption indicates we're going to create a stateful widget called new


17486
20:52:28,960 --> 20:52:35,120
note view so i'm going to use a flutter sorry visual studio codes and stateful


17487
20:52:35,120 --> 20:52:40,480
widget template here stf and i'm going to call it new notes view


17488
20:52:40,480 --> 20:52:43,600
right and we're going to get some errors and


17489
20:52:43,600 --> 20:52:47,760
you know already that's because we have an imported material dot dart so i'm


17490
20:52:47,760 --> 20:52:50,160
going to get help from visual studio code command dot


17491
20:52:50,160 --> 20:52:53,440
on mac or control dot on linux and windows and say import material


17492
20:52:53,440 --> 20:52:57,280
and all those errors are going to go away okay


17493
20:52:57,280 --> 20:53:03,832
so now we have our new node view excuse me


17494
20:53:04,160 --> 20:53:09,360
so let's then inside this new note view go creates a simple scaffold so


17495
20:53:09,360 --> 20:53:14,320
i'm going to say we have a scaffold and inside our scaffold we have an app


17496
20:53:14,320 --> 20:53:19,360
bar and we're going to say avbar and an app bar has a title and in here


17497
20:53:19,360 --> 20:53:23,600
we're just going to say cons text new note


17498
20:53:23,600 --> 20:53:29,120
something like this and for the body of this scaffold we're


17499
20:53:29,120 --> 20:53:36,320
just gonna add a const of text that says write your new


17500
20:53:36,320 --> 20:53:42,240
note here something like this okay so this is a very simple stateful widget


17501
20:53:42,240 --> 20:53:45,680
at the moment i mean it's not even stateful it and what it's doing right


17502
20:53:45,680 --> 20:53:49,192
now is it could pretty much be achieved with a stateless widget but in the in


17503
20:53:49,192 --> 20:53:52,960
the next chapters we're going to add more and more logic to this view so it


17504
20:53:52,960 --> 20:53:57,440
needs to be a stateful widget for it to be able to work in the future as well


17505
20:53:57,440 --> 20:54:04,080
and for what we have planned for it okay excuse me so now that we have this ma


17506
20:54:04,080 --> 20:54:09,120
new note view let's go ahead in here back to our main dart and get help from


17507
20:54:09,120 --> 20:54:13,600
visual studio code to import that file for us so i'm just gonna say import and


17508
20:54:13,600 --> 20:54:18,720
you'll see it will be a new import right here on line five for me maybe


17509
20:54:18,720 --> 20:54:22,720
another line for you so let's import a new node view and it


17510
20:54:22,720 --> 20:54:27,760
allows us to basically define a route i'm just to say command s and just to be


17511
20:54:27,760 --> 20:54:30,960
sure since actually not to be sure we are we


17512
20:54:30,960 --> 20:54:36,080
are 100 certain that the changes in our main um function won't be


17513
20:54:36,080 --> 20:54:38,960
won't be taken uh


17514
20:54:38,960 --> 20:54:42,800
into consideration when we do a hot reload we have to do hot restart for


17515
20:54:42,800 --> 20:54:48,000
these changes to take effect so let's do a hot restart here


17516
20:54:48,960 --> 20:54:53,680
okay and for some reason i can actually see my scr cpy has now crashed again


17517
20:54:53,680 --> 20:54:57,600
it's a bit flaky that's okay i i'm not gonna complain


17518
20:54:57,600 --> 20:54:59,920
uh it's just


17519
20:54:59,920 --> 20:55:03,512
an open source project to be honest with you and i can see i actually have lost


17520
20:55:03,512 --> 20:55:07,600
my connection from flutter as well to the program so


17521
20:55:07,600 --> 20:55:13,600
let me run that code now in scrcpy on my actual android phone


17522
20:55:13,600 --> 20:55:16,640
and i'm also going to ensure that my android


17523
20:55:16,640 --> 20:55:22,240
phone actually has wi-fi as well so turn wi-fi on on my phone and


17524
20:55:22,240 --> 20:55:28,160
i'm going to go back here to the main interface so while this is all compiling


17525
20:55:28,160 --> 20:55:31,512
let's go to the next step that we have to take care of which is actually


17526
20:55:31,512 --> 20:55:35,600
displaying oops


17527
20:55:35,600 --> 20:55:43,360
so which is actually displaying um this new note view all right


17528
20:55:43,360 --> 20:55:47,280
as a caption indicates we need to go to the notes view and on press of the icon


17529
20:55:47,280 --> 20:55:52,240
button show the new notes view so i'm going to go to my notes as well go


17530
20:55:52,240 --> 20:55:55,280
to notes here


17531
20:55:55,920 --> 20:56:01,512
and we have to add a little button


17532
20:56:02,400 --> 20:56:07,600
on our uh notes view so let's go ahead and


17533
20:56:07,600 --> 20:56:11,832
go there we'll have a look at how our note2 is structured at the moment as you


17534
20:56:11,832 --> 20:56:16,480
can see right now we have an array of actions which just for now it has a


17535
20:56:16,480 --> 20:56:21,440
pop-up menu button excuse me and we need to add a new icon


17536
20:56:21,440 --> 20:56:24,960
button in there so let's go ahead and say icon button


17537
20:56:24,960 --> 20:56:30,160
an icon button has to have an icon and an on press so let's say unpressed so


17538
20:56:30,160 --> 20:56:34,240
remember this is going to be our plus icon all right


17539
20:56:34,240 --> 20:56:39,440
so that's our on press and for the icon we're just going to say const icon


17540
20:56:39,440 --> 20:56:43,280
and then we're going to say icons add and as you can see i believe that your


17541
20:56:43,280 --> 20:56:47,360
studio code was able to show your icons right in line as well so you can see


17542
20:56:47,360 --> 20:56:51,192
here that's how the button is going to look like which is a plus button all


17543
20:56:51,192 --> 20:56:54,000
right and a comma here to get that working so


17544
20:56:54,000 --> 20:56:58,872
if i do command s in here now we should see a plus button after hot reload all


17545
20:56:58,872 --> 20:57:02,080
right so but that button isn't doing anything because it's unpressed it's


17546
20:57:02,080 --> 20:57:06,240
empty all right so what we need to do is just to say uh


17547
20:57:06,240 --> 20:57:10,640
navigator of our context or build context and


17548
20:57:10,640 --> 20:57:15,832
we're just going to push a route called new node routes that's it


17549
20:57:15,832 --> 20:57:18,240
all right so that's all you have to add a comma


17550
20:57:18,240 --> 20:57:22,160
here just to get the code formatting working all right


17551
20:57:22,160 --> 20:57:25,832
so let's let's actually test this and see if it works so i'm going to press


17552
20:57:25,832 --> 20:57:30,240
the plus button in here and you can see our new node route is being displayed on


17553
20:57:30,240 --> 20:57:33,440
the screen with the little text that we added here


17554
20:57:33,440 --> 20:57:37,440
that says write your new node here right and pressing the back button will then


17555
20:57:37,440 --> 20:57:41,120
send us back to the main ui of the application and you may have noticed


17556
20:57:41,120 --> 20:57:46,240
that in the notes view i didn't say push name and remove until and that's because


17557
20:57:46,240 --> 20:57:50,480
when you press the plus button in order to create a new note you want the user


17558
20:57:50,480 --> 20:57:53,832
to be able to get back to the main ui of the application whenever they need to


17559
20:57:53,832 --> 20:57:57,360
and that's what is facility facilitating this back


17560
20:57:57,360 --> 20:58:02,400
button right here okay all right that was great stuff and that


17561
20:58:02,400 --> 20:58:06,080
is pretty much all we had to do for this chapter


17562
20:58:06,080 --> 20:58:10,400
so a short chapter is kind of refreshing to be honest with you if you ask me so


17563
20:58:10,400 --> 20:58:16,080
that's really good um as is tradition let's commit our work so


17564
20:58:16,080 --> 20:58:20,000
that we can get ready for the next chapter i'm gonna change the screen


17565
20:58:20,000 --> 20:58:25,512
layout here a little bit oops um let's go in here change the


17566
20:58:25,512 --> 20:58:29,920
screen layout and let me bring up the terminal and


17567
20:58:29,920 --> 20:58:34,160
increase the size of the screen so i see it better


17568
20:58:34,160 --> 20:58:38,960
so we're going to have a look at our git status and i can see there's a whole new


17569
20:58:38,960 --> 20:58:43,120
folder in here called lib views notes and we have two


17570
20:58:43,120 --> 20:58:47,920
files under there which is our notes view and new notes view so let's just


17571
20:58:47,920 --> 20:58:51,832
say git at all and have a look at our status here you


17572
20:58:51,832 --> 20:58:55,680
can see now everything's mentioned there i'm going to get rid of


17573
20:58:55,680 --> 20:58:59,040
this make it a little bit bigger so you see better


17574
20:58:59,040 --> 20:59:02,552
so what we need to do is just to commit this first and we're going to say step


17575
20:59:02,552 --> 20:59:06,400
13. i believe so at least so let's have a


17576
20:59:06,400 --> 20:59:11,360
look at our logs yeah step 12 was the last chapter so we're going to say


17577
20:59:11,360 --> 20:59:16,240
um step 13 and i'm gonna push now our commits to


17578
20:59:16,240 --> 20:59:21,192
github and then we're going to say good tag


17579
20:59:21,192 --> 20:59:26,640
step 13 as well and with push tags


17580
20:59:26,640 --> 20:59:30,000
all right so that's for our tagging as well so if


17581
20:59:30,000 --> 20:59:34,080
i say tag now we can see all the tags that we've created so far 13 of them all


17582
20:59:34,080 --> 20:59:38,800
right so that's pretty much what we had to do


17583
20:59:38,800 --> 20:59:42,552
and now as again is a tradition for every


17584
20:59:42,552 --> 20:59:45,360
chapter of this flood of course i usually talk about what we need to do in


17585
20:59:45,360 --> 20:59:49,040
the next chapter so we can get right get ready for that chapter as well in the


17586
20:59:49,040 --> 20:59:52,320
next chapter now that we have our new note view


17587
20:59:52,320 --> 20:59:57,192
we are going to work with adding the logic to new note view so that we can


17588
20:59:57,192 --> 21:00:02,240
actually insert new notes into our database so that we can start


17589
21:00:02,240 --> 21:00:05,680
manipulating those notes so next chapter is going to


17590
21:00:05,680 --> 21:00:10,080
be a bit of a heavy chapter code wise there is a lot of code so


17591
21:00:10,080 --> 21:00:14,240
if you want to grab some refreshments be my guest please go ahead and do that and


17592
21:00:14,240 --> 21:00:18,720
i'll see you in the next chapter hello everyone and welcome to chapter 31 of


17593
21:00:18,720 --> 21:00:22,240
this flutter course in the previous chapter we did some preparation work in


17594
21:00:22,240 --> 21:00:26,800
order to create our new note view and we've tagged everything everything


17595
21:00:26,800 --> 21:00:31,192
is ready it's just that we created our new note view as a stateful widget which


17596
21:00:31,192 --> 21:00:35,920
has pretty much no logic it had a simple scaffold with an app bar and a simple


17597
21:00:35,920 --> 21:00:39,920
text displayed on the screen so in this chapter


17598
21:00:39,920 --> 21:00:43,760
we are going to make sure that the user is not only able


17599
21:00:43,760 --> 21:00:48,320
to go to the new note view or sorry the new note view but also he


17600
21:00:48,320 --> 21:00:53,600
or she is able to create an actual note and modify its text


17601
21:00:53,600 --> 21:00:58,400
and then be able to go back to the main user interface so


17602
21:00:58,400 --> 21:01:01,440
we have quite a lot of work to do these chapters as i mentioned in the previous


17603
21:01:01,440 --> 21:01:04,872
chapter at the end of the previous chapter this chapter is kind of quite


17604
21:01:04,872 --> 21:01:08,960
code heavy so uh but i'm gonna make sure to take you


17605
21:01:08,960 --> 21:01:12,240
through all the code that we're gonna write step by step so you don't miss


17606
21:01:12,240 --> 21:01:16,320
anything okay um before we get started we need to fix


17607
21:01:16,320 --> 21:01:21,680
something in our um notes view and that is to ensure that we're listening to


17608
21:01:21,680 --> 21:01:28,160
both the active state of our all nodes stream plus the waiting and be i mean


17609
21:01:28,160 --> 21:01:32,240
without us having to actually without me having to explain that


17610
21:01:32,240 --> 21:01:36,000
in abstract terms let me bring up the code and have a look at what we've done


17611
21:01:36,000 --> 21:01:40,720
um and how we can make it better so


17612
21:01:40,720 --> 21:01:45,192
let me change the screen layout so you see the code better let's go to


17613
21:01:45,192 --> 21:01:48,552
our notes view in here and you can see at


17614
21:01:48,552 --> 21:01:53,512
in in the actual body of our notes we have the future builder where we get or


17615
21:01:53,512 --> 21:01:57,760
create a user with an email address and which you'll soon actually see why


17616
21:01:57,760 --> 21:02:01,832
we're doing this and also we have this this part which says switch connection


17617
21:02:01,832 --> 21:02:06,720
state waiting and then in here says waiting for all notes the plan for us is


17618
21:02:06,720 --> 21:02:11,360
to in the future soon actually in the near future to display all the notes


17619
21:02:11,360 --> 21:02:15,600
that the user has created in this user interface however right now we're only


17620
21:02:15,600 --> 21:02:18,480
listening for the connection state waiting


17621
21:02:18,480 --> 21:02:21,832
and if you look at the document documentation for waiting it says


17622
21:02:21,832 --> 21:02:25,512
connected to an asynchronous computation i'm waiting interaction however if you


17623
21:02:25,512 --> 21:02:30,160
look at the active it says connected to an active asynchronous computation that


17624
21:02:30,160 --> 21:02:34,240
ha and that stream has returned at least one value so


17625
21:02:34,240 --> 21:02:38,640
now we have if you look at our stream is a stream of all notes so this all notes


17626
21:02:38,640 --> 21:02:42,552
can either be empty in the beginning or it could contain some notes let's go


17627
21:02:42,552 --> 21:02:46,800
with the stream being empty when the stream is empty meaning that


17628
21:02:46,800 --> 21:02:50,080
the user hasn't created any notes yet that have been populated in a note


17629
21:02:50,080 --> 21:02:54,640
service then the connection state of that stream will be waiting because dart


17630
21:02:54,640 --> 21:03:00,400
is now waiting for that stream to return the first value so that's great and


17631
21:03:00,400 --> 21:03:03,600
we're saying okay if that's the case then return this but as soon as the


17632
21:03:03,600 --> 21:03:08,400
stream contains one value or as soon as the stream actually returns one value


17633
21:03:08,400 --> 21:03:12,400
then its connection state is going to be active and what we've done is just we


17634
21:03:12,400 --> 21:03:16,320
waited for waiting state but as soon as it goes to active then we're showing a


17635
21:03:16,320 --> 21:03:21,120
circular progress indicator and that's not the not not the right logic so


17636
21:03:21,120 --> 21:03:26,080
we need to fix that so let's go to our notes view and right after this waiting


17637
21:03:26,080 --> 21:03:28,800
we're also going to say


17638
21:03:28,800 --> 21:03:35,280
case connection states dot active all right so this


17639
21:03:35,280 --> 21:03:40,160
writing two cases right after each other it's an implicit fall through as i like


17640
21:03:40,160 --> 21:03:43,512
to call it some language is called a follow-through for instance swift


17641
21:03:43,512 --> 21:03:49,040
meaning that a case has no logic and is literally falling through to the next


17642
21:03:49,040 --> 21:03:53,360
case so you don't have any break statements here in here okay


17643
21:03:53,360 --> 21:03:57,192
so this is a follow through implicit fall through and


17644
21:03:57,192 --> 21:04:01,040
meaning that in both waiting and active states then we're showing this text and


17645
21:04:01,040 --> 21:04:05,120
if you command s then you're not going to see any difference in the running of


17646
21:04:05,120 --> 21:04:09,192
your application it's just that we fixed a broken logic


17647
21:04:09,192 --> 21:04:11,600
all right


17648
21:04:11,680 --> 21:04:17,192
all right now to the exciting parts and i'm gonna bring new notes view to


17649
21:04:17,192 --> 21:04:20,480
here just gonna reorganize it you don't have to do that but you need to now go


17650
21:04:20,480 --> 21:04:24,800
to your new node view dart file because this is


17651
21:04:24,800 --> 21:04:29,120
where we're gonna work on for pretty much the majority of this chapter now


17652
21:04:29,120 --> 21:04:31,512
okay so what we're going to do in this new


17653
21:04:31,512 --> 21:04:36,872
note view upon coming to the screen we are actually going to create a new note


17654
21:04:36,872 --> 21:04:42,080
for you okay and we're going to keep hold of that new note and creating a new


17655
21:04:42,080 --> 21:04:45,832
node if you remember from our node service if you go our


17656
21:04:45,832 --> 21:04:49,920
utilities we have crowd here and we have node service and then we have a lot of


17657
21:04:49,920 --> 21:04:54,000
functions in here at least let's see if we can find the create node view sorry


17658
21:04:54,000 --> 21:04:59,680
the create node function here you can see it's a future so we cannot


17659
21:04:59,680 --> 21:05:05,440
immediately get get a result from this create new node so the goal for our new


17660
21:05:05,440 --> 21:05:11,832
node view here is to use future builder inside the body of this function


17661
21:05:11,832 --> 21:05:15,832
so inside the body of this function we're going to say as soon as this


17662
21:05:15,832 --> 21:05:20,800
new node view state has been created then it also needs to create a new node


17663
21:05:20,800 --> 21:05:25,920
in the database however remember with flutter we have hot reload meaning that


17664
21:05:25,920 --> 21:05:30,800
as you're on that view and you're editing your text and blah blah you may


17665
21:05:30,800 --> 21:05:33,832
change your code a little bit and then press command s


17666
21:05:33,832 --> 21:05:38,720
pressing command s is just going to call your build function again so if you then


17667
21:05:38,720 --> 21:05:44,400
inside your build functions um scaffold body and you have a future builder which


17668
21:05:44,400 --> 21:05:48,640
in turn creates a new note that function is gonna go gonna get called again


17669
21:05:48,640 --> 21:05:52,640
meaning that every time you do hot reload while you're on that view a new


17670
21:05:52,640 --> 21:05:57,440
note is going to be created and for that we as the caption indicates


17671
21:05:57,440 --> 21:06:02,320
we need to keep hold of a variable called notes so that we don't recreate


17672
21:06:02,320 --> 21:06:07,040
it every time the build function gets called alright so let's go ahead and do


17673
21:06:07,040 --> 21:06:11,120
that so in inside the state of your


17674
21:06:11,120 --> 21:06:16,000
new notes view let's go and define and say database


17675
21:06:16,000 --> 21:06:19,600
notes and we're just going to say notes like


17676
21:06:19,600 --> 21:06:23,832
that okay also we just make it optional because it


17677
21:06:23,832 --> 21:06:27,192
has no value to start with


17678
21:06:27,920 --> 21:06:35,120
okay and what also what we also need is to keep hold of our note service um and


17679
21:06:35,120 --> 21:06:38,480
as you saw in the previous chapters we created node server as a singleton but


17680
21:06:38,480 --> 21:06:43,120
also you'd be really good if you didn't have to call this a factory uh function


17681
21:06:43,120 --> 21:06:46,400
for the singleton over and over again whenever we're working with node servers


17682
21:06:46,400 --> 21:06:50,720
so we're gonna also keep hold of our node service as a late final variable


17683
21:06:50,720 --> 21:06:53,832
here so let's just say late final and we're


17684
21:06:53,832 --> 21:07:00,000
going to say this is endnote service now first like this all right


17685
21:07:00,000 --> 21:07:03,600
and um you haven't seen maybe the ui of the


17686
21:07:03,600 --> 21:07:08,320
application but while we're working on variables to keep hold of we also need


17687
21:07:08,320 --> 21:07:13,192
to keep hold of a text editing controller now the way the ui of this


17688
21:07:13,192 --> 21:07:17,040
view is going to work here is that instead of this text in here we're going


17689
21:07:17,040 --> 21:07:22,552
to create a text field which will vertically increase the size as the user


17690
21:07:22,552 --> 21:07:27,040
keeps typing their information or their notes in that field


17691
21:07:27,040 --> 21:07:30,080
so what we're going to do is to keep track


17692
21:07:30,080 --> 21:07:34,080
of the text that the user enters and when the user is entering new text we


17693
21:07:34,080 --> 21:07:39,280
will automatically sync that information with our database and in the future when


17694
21:07:39,280 --> 21:07:44,160
we go to firebase we're going to sync that information with firebase


17695
21:07:44,160 --> 21:07:50,720
so we need a text editing controller to keep track of the text changes all right


17696
21:07:50,720 --> 21:07:52,872
so um


17697
21:07:52,872 --> 21:07:57,120
let me then bring this caption in here and let's then go ahead


17698
21:07:57,120 --> 21:08:02,320
and do as the caption says let's say late final and text


17699
21:08:02,320 --> 21:08:05,680
i think controller these documentation sometimes


17700
21:08:05,680 --> 21:08:12,920
are just excessive i believe and we call it text controller okay


17701
21:08:13,920 --> 21:08:19,120
all right um that was great so what we need to do now um is to


17702
21:08:19,120 --> 21:08:23,040
facilitate our uh i mean we haven't really initialized any of these but


17703
21:08:23,040 --> 21:08:27,440
we're going to take care of that soon so where we haven't forgotten about that


17704
21:08:27,440 --> 21:08:30,480
but what we need now as i mentioned in the beginning of this chapter when we


17705
21:08:30,480 --> 21:08:34,080
come to this screen we're going to create a new note and we need to have a


17706
21:08:34,080 --> 21:08:37,440
function for it as the caption in the case it's going to be called create new


17707
21:08:37,440 --> 21:08:41,600
note and it's an asynchronous function and we'll see soon why


17708
21:08:41,600 --> 21:08:46,400
so let's go ahead and say future at database node


17709
21:08:46,400 --> 21:08:50,240
because it creates a node with our node service


17710
21:08:50,240 --> 21:08:54,800
and we're going to call it create new node and it's an asynchronous function


17711
21:08:54,800 --> 21:08:57,680
so in this function what we're going to do


17712
21:08:57,680 --> 21:09:02,080
first is just to see have we created this note before inside this node


17713
21:09:02,080 --> 21:09:05,512
variable if we have created this node before then we don't have to create it


17714
21:09:05,512 --> 21:09:09,440
again we just return but if we haven't created it then we go to the node


17715
21:09:09,440 --> 21:09:13,920
service and say create the node and then get that node back to us all


17716
21:09:13,920 --> 21:09:18,000
right so let's go ahead and do that let's just


17717
21:09:18,000 --> 21:09:24,240
say final existing node is equal to this note


17718
21:09:24,240 --> 21:09:29,760
and then we say um then in here we say if existing note


17719
21:09:29,760 --> 21:09:33,600
is not null then we just return it


17720
21:09:33,600 --> 21:09:38,160
this thing notes all right so that's the return statement that


17721
21:09:38,160 --> 21:09:42,640
means we already have a note and if we don't then we're going to create a new


17722
21:09:42,640 --> 21:09:49,120
note but remember when we create a new note our um creates new note function on


17723
21:09:49,120 --> 21:09:55,832
the notes service if you look here create note it requires an owner so now


17724
21:09:55,832 --> 21:09:58,720
all of a sudden we have to have an owner okay


17725
21:09:58,720 --> 21:10:04,800
and again remember the notes view upon going to the main ui of the application


17726
21:10:04,800 --> 21:10:10,000
the notes view creates a new user in the database meaning that you've logged in


17727
21:10:10,000 --> 21:10:13,680
with firebase then you go to the notes view notes you took care of creating


17728
21:10:13,680 --> 21:10:18,400
that user all we have to do here is just to retrieve that user so we can actually


17729
21:10:18,400 --> 21:10:24,400
count with that user already existing inside the database all right


17730
21:10:24,400 --> 21:10:28,240
so let's just then say final current user


17731
21:10:28,240 --> 21:10:33,040
is equal to um our auth service


17732
21:10:33,040 --> 21:10:36,872
firebase and then we're gonna say current user


17733
21:10:36,872 --> 21:10:41,192
and we're just gonna explicitly um unwrap it meaning that


17734
21:10:41,192 --> 21:10:46,720
we're expecting a user to be there if you've ended up somehow in this new note


17735
21:10:46,720 --> 21:10:50,640
view you may be thinking but why that's unsafe well


17736
21:10:50,640 --> 21:10:54,800
it is unsafe it is it is going to crash the application if the current user


17737
21:10:54,800 --> 21:11:00,480
doesn't exist however you should never end up in this


17738
21:11:00,480 --> 21:11:04,872
new node view if you don't have a current user so ending up on this screen


17739
21:11:04,872 --> 21:11:08,640
and not having a current user is worth the crash because you want your


17740
21:11:08,640 --> 21:11:13,920
application to crash if you're if what you expect from your applications user


17741
21:11:13,920 --> 21:11:18,552
interface and logic has not been met by the previous screen so you're now


17742
21:11:18,552 --> 21:11:22,960
creating an expectation and crashing the application at this point is actually a


17743
21:11:22,960 --> 21:11:26,800
good thing in my eyes because if the current user doesn't exist you should


17744
21:11:26,800 --> 21:11:30,160
never end up in this view if you've ended up in this view and you have no


17745
21:11:30,160 --> 21:11:33,920
current user something is seriously wrong so it's completely safe i would


17746
21:11:33,920 --> 21:11:38,720
say to explicitly unwrap the current user in here okay


17747
21:11:38,720 --> 21:11:42,400
and we're gonna extract the email from the current user


17748
21:11:42,400 --> 21:11:46,080
so we're going to say current user.email and we're going to unwrap that as well


17749
21:11:46,080 --> 21:11:50,080
because remember email was an optional field but again since we know that


17750
21:11:50,080 --> 21:11:53,920
our authentication right now is going to take care of the email


17751
21:11:53,920 --> 21:11:58,160
because all our users register with an email addresses and the password then we


17752
21:11:58,160 --> 21:12:02,800
can be sure that the email address exists all right


17753
21:12:02,800 --> 21:12:06,400
so let's go ahead and get that owner from the database so we're going to say


17754
21:12:06,400 --> 21:12:14,000
the owner is equal to our off our notes service


17755
21:12:14,000 --> 21:12:19,360
so we're gonna say await notes service and then we're gonna get the user


17756
21:12:19,360 --> 21:12:24,480
with that email and then we're gonna just return our


17757
21:12:24,480 --> 21:12:29,600
note service create node so we're going to create a new node in here okay


17758
21:12:29,600 --> 21:12:35,600
so let's say note service creates notes with that owner and


17759
21:12:35,600 --> 21:12:39,280
you see this returns um


17760
21:12:39,280 --> 21:12:42,480
a future of database note which is pretty much what we need to return in


17761
21:12:42,480 --> 21:12:47,280
here so let's just return a wait on that all right


17762
21:12:48,320 --> 21:12:53,120
all right fantastic that was for the creation of the new notes and in here


17763
21:12:53,120 --> 21:12:56,320
you can see that we're not setting this um


17764
21:12:56,320 --> 21:13:00,640
new notes that we just created to this note


17765
21:13:00,640 --> 21:13:03,440
variable in there we're going to actually take care of


17766
21:13:03,440 --> 21:13:07,600
that a little bit later so you don't have to worry about


17767
21:13:07,600 --> 21:13:09,832
that


17768
21:13:10,480 --> 21:13:15,512
all right that's for the creation of our notes


17769
21:13:15,760 --> 21:13:22,080
now what we need to do is when this view is disposed of meaning


17770
21:13:22,080 --> 21:13:26,640
that for instance the user presses the back button on this view


17771
21:13:26,640 --> 21:13:33,192
we need to ensure that the current node in the database gets deleted if


17772
21:13:33,192 --> 21:13:37,512
there is no text entered for for that node so


17773
21:13:37,512 --> 21:13:42,720
the reason for that is let's say that the user is on the main interface uh of


17774
21:13:42,720 --> 21:13:46,480
the application right here the user then presses the plus button and then says


17775
21:13:46,480 --> 21:13:50,240
hmm i actually didn't want to do that so they press the back button


17776
21:13:50,240 --> 21:13:55,600
if we allow the user to do that and press press the plus button we create a


17777
21:13:55,600 --> 21:14:00,240
new empty node and go back then the view may just be full of empty nodes so it


17778
21:14:00,240 --> 21:14:04,720
will just be like empty cells that the user is not even able to see because


17779
21:14:04,720 --> 21:14:08,400
later as we'll see in the next chapters we're going to populate this list with


17780
21:14:08,400 --> 21:14:12,552
the actual contents of your notes because our notes don't have titles so


17781
21:14:12,552 --> 21:14:16,872
the actual text we're going to display is the note itself in here inside


17782
21:14:16,872 --> 21:14:21,280
various various cells so what we're going to do is saying that


17783
21:14:21,280 --> 21:14:25,192
if you go and create a new node and you don't enter any text meaning that the


17784
21:14:25,192 --> 21:14:29,120
text is empty work upon you going out of this screen


17785
21:14:29,120 --> 21:14:33,120
out of the new note screen we're going to delete that note if it's empty okay


17786
21:14:33,120 --> 21:14:36,240
so it just makes sense


17787
21:14:36,320 --> 21:14:40,080
so let's go ahead and create and find that function


17788
21:14:40,080 --> 21:14:45,832
so i'm going to bring that


17789
21:14:47,600 --> 21:14:54,552
here and let's just say void delete note if text is empty all right


17790
21:14:54,552 --> 21:14:58,480
and then we go in here now we have to have a look


17791
21:14:58,480 --> 21:15:01,280
at our notes


17792
21:15:01,512 --> 21:15:08,000
and and let's just say we get we get the note so we say in here final note


17793
21:15:08,000 --> 21:15:14,960
note that should be populated inside of our state and then we say if the


17794
21:15:14,960 --> 21:15:19,832
text controller's text is empty


17795
21:15:19,832 --> 21:15:26,720
it's empty and the node is not null then we go to our node service here


17796
21:15:26,720 --> 21:15:32,960
and then we ask it to delete the nodes right there okay and then we say use


17797
21:15:32,960 --> 21:15:36,400
notes id like that


17798
21:15:36,720 --> 21:15:40,640
alright so yeah that should that should be good to


17799
21:15:40,640 --> 21:15:45,680
go so that's the deletion of the note from the database if the text inside our


17800
21:15:45,680 --> 21:15:50,240
text editing controller is empty


17801
21:15:50,640 --> 21:15:55,680
all right so that was for deleting the note if it's empty how about actually


17802
21:15:55,680 --> 21:16:00,552
saving the notes if it's if there actually is text in it


17803
21:16:00,552 --> 21:16:05,512
and what we're gonna do in our as you'll see soon inside this view where the user


17804
21:16:05,512 --> 21:16:09,760
can edit their notes or add new text to the notes we're not going to have any


17805
21:16:09,760 --> 21:16:13,680
type of save button in modern mobile applications if you're not a software


17806
21:16:13,680 --> 21:16:16,640
development from before you may not notice but if you're a designer you


17807
21:16:16,640 --> 21:16:21,120
probably already noticed that in most note-taking applications on mobile


17808
21:16:21,120 --> 21:16:25,920
devices at least there is no save button all your contents will automatically be


17809
21:16:25,920 --> 21:16:29,832
saved so that's actually a good design decision usually in most places you


17810
21:16:29,832 --> 21:16:33,680
don't need a save button usually in mobile applications sorry especially in


17811
21:16:33,680 --> 21:16:37,600
mobile applications so we're not going to have a save button


17812
21:16:37,600 --> 21:16:41,192
so we in order to facilitate not having a save button we have to have a


17813
21:16:41,192 --> 21:16:44,240
functionality that automatically saves the current


17814
21:16:44,240 --> 21:16:48,480
the current node for instance if the user then goes out of this view so it


17815
21:16:48,480 --> 21:16:52,400
will automatically be saved okay so let's go ahead and create a function


17816
21:16:52,400 --> 21:16:57,512
in here as the as the name indicates and it's called save node if text not


17817
21:16:57,512 --> 21:17:01,120
empty and i'm gonna bring the uh function


17818
21:17:01,120 --> 21:17:05,440
signature from my node so i don't have to type it manually so you will need to


17819
21:17:05,440 --> 21:17:08,720
unfortunately type this manually unfortunately unfortunately i don't know


17820
21:17:08,720 --> 21:17:13,192
but you will need to type in manually save notes if text not empty


17821
21:17:13,192 --> 21:17:18,240
and what we're going to do in here is very similar to our the code that we


17822
21:17:18,240 --> 21:17:24,000
wrote for delete node if text empty so first we're going to get the node


17823
21:17:24,000 --> 21:17:30,000
is node and then we get the text in our text controllers text


17824
21:17:30,000 --> 21:17:32,640
and then in here um


17825
21:17:32,640 --> 21:17:37,600
we're gonna say um if the note is not null if note is


17826
21:17:37,600 --> 21:17:40,000
not normal and


17827
21:17:40,000 --> 21:17:44,960
um our text is not empty then we're gonna await


17828
21:17:44,960 --> 21:17:47,832
our note service


17829
21:17:48,720 --> 21:17:52,720
update notes functionality here


17830
21:17:52,720 --> 21:17:56,800
and that's exactly what we're doing here so it's very simple we're just saying


17831
21:17:56,800 --> 21:18:03,360
that if there is text which is is not empty and we have a note then just


17832
21:18:03,360 --> 21:18:08,720
update that note in the database so very very simple


17833
21:18:08,720 --> 21:18:12,800
all right two very important functions now we have to put these functions in


17834
21:18:12,800 --> 21:18:16,400
use as you can see we're getting a warning in here from the analyzer saying


17835
21:18:16,400 --> 21:18:20,000
that these are two private functions which are not referenced and that's for


17836
21:18:20,000 --> 21:18:23,832
a good reason because we're going to reference them inside the disposal of


17837
21:18:23,832 --> 21:18:28,640
our new node view state when this new note view basically is


17838
21:18:28,640 --> 21:18:32,720
being killed by the system for instance when the user presses the back button


17839
21:18:32,720 --> 21:18:36,720
okay so let's go into the dispose function


17840
21:18:36,720 --> 21:18:42,320
and we have to take care of uh three things in here


17841
21:18:42,320 --> 21:18:45,360
so let's go and


17842
21:18:45,360 --> 21:18:50,160
say that we have a dispose function in here and that's


17843
21:18:50,160 --> 21:18:53,040
going to be overwritten by default sorry i'll bring it up here and i'll write it


17844
21:18:53,040 --> 21:18:58,552
from the beginning so you see this pose okay and it does overwriting for us and


17845
21:18:58,552 --> 21:19:02,872
what we're going to do is first going to say delete the notes if text is empty


17846
21:19:02,872 --> 21:19:06,000
then what we're going to do is we're going to say otherwise save the notes if


17847
21:19:06,000 --> 21:19:09,192
text is not empty and then we're going to get rid of the


17848
21:19:09,192 --> 21:19:14,320
text controllers and call the dispose on it so as a good citizen of the dart land


17849
21:19:14,320 --> 21:19:17,512
when you create a new text editing controller which we're soon going to do


17850
21:19:17,512 --> 21:19:23,600
we also need to make sure that we dispose of it upon this pose all right


17851
21:19:23,920 --> 21:19:27,832
so um so that was a lot of code and i'm gonna


17852
21:19:27,832 --> 21:19:31,680
also have a look here i can see i haven't actually provided


17853
21:19:31,680 --> 21:19:36,080
any captions for us taking care of the init


17854
21:19:36,080 --> 21:19:40,080
so um let's take care of


17855
21:19:42,800 --> 21:19:45,920
so i basically what i'm doing right now because i just noticed that i haven't


17856
21:19:45,920 --> 21:19:51,120
provided a caption for the init function well we're gonna do it right now um


17857
21:19:51,120 --> 21:19:56,552
because that's a very very important uh basically function that we need to


17858
21:19:56,552 --> 21:20:01,192
program so uh i apologize for that as well i'm


17859
21:20:01,192 --> 21:20:06,640
gonna bring it here and then show you the caption so you see what i'm doing


17860
21:20:06,640 --> 21:20:11,192
so we have this pose but we don't have init state yet and i'm going to put init


17861
21:20:11,192 --> 21:20:15,440
state in here so uh let's see or do we have any state


17862
21:20:15,440 --> 21:20:17,832
already


17863
21:20:18,000 --> 21:20:21,832
i don't see that so


17864
21:20:22,640 --> 21:20:25,920
and i can see that the visual studio code isn't really helping me with that


17865
21:20:25,920 --> 21:20:29,440
so i'm just going to say overwrite void init state


17866
21:20:29,440 --> 21:20:31,920
like that


17867
21:20:32,000 --> 21:20:36,552
and then we have to call super in its states okay so you may have to type that


17868
21:20:36,552 --> 21:20:40,720
by hand as well individual studio code was being a little bit angry at me


17869
21:20:40,720 --> 21:20:44,000
maybe because i just forgot to write the caption for internet state


17870
21:20:44,000 --> 21:20:47,680
and then in here what we need to do is just to ensure that we're creating both


17871
21:20:47,680 --> 21:20:52,080
an instance of node service and also our text editing controller okay so i'm just


17872
21:20:52,080 --> 21:20:58,240
going to say node service and that is equal to node service and


17873
21:20:58,240 --> 21:21:02,000
that's just a singleton so it's not going to create really a new instance if


17874
21:21:02,000 --> 21:21:06,240
it already existed from before and our text controller is going to be a


17875
21:21:06,240 --> 21:21:12,080
new instance of text editing editing controller just like that


17876
21:21:12,080 --> 21:21:14,800
all right so i'm going to save this and then i'm


17877
21:21:14,800 --> 21:21:20,000
going to do a hot restart um and scrcpy is a little bit angry these days


17878
21:21:20,000 --> 21:21:23,280
with me when i do hot restart and i don't really know why


17879
21:21:23,280 --> 21:21:27,600
but i have learned to live with it so i'm just going to say scr cpy


17880
21:21:27,600 --> 21:21:32,480
and then i'm going to run the application without debugging and


17881
21:21:32,480 --> 21:21:36,160
bringing it bring it right there okay


17882
21:21:36,160 --> 21:21:40,232
while that is doing its job we need to take care of


17883
21:21:40,232 --> 21:21:44,080
some other functionality


17884
21:21:44,080 --> 21:21:48,320
you see um when the user is entering text in the


17885
21:21:48,320 --> 21:21:52,320
main ui of the application so when he or she is entering the text typing on a


17886
21:21:52,320 --> 21:21:57,280
keyboard we need to make sure that we're constantly updating


17887
21:21:57,280 --> 21:22:00,400
our notes in the database so


17888
21:22:00,400 --> 21:22:05,280
we're not gonna leave the updating uh for instance while


17889
21:22:05,280 --> 21:22:08,960
when the user presses the back button so we're constantly gonna do that as the


17890
21:22:08,960 --> 21:22:14,872
user is typing um in the on the screen so


17891
21:22:14,872 --> 21:22:19,512
for that we need some listeners so as the caption indicate as a caption at the


17892
21:22:19,512 --> 21:22:22,720
bottom of the screen in any case we need a text controller


17893
21:22:22,720 --> 21:22:24,552
listener and


17894
21:22:24,552 --> 21:22:28,400
all this text controller listener is going to do is it's going to be a body


17895
21:22:28,400 --> 21:22:32,552
of function it's going to be a function that takes the current node if it exists


17896
21:22:32,552 --> 21:22:37,040
then it's going to take the current text editing controllers text and update that


17897
21:22:37,040 --> 21:22:42,800
notes in the database all right so let's go and create that function so


17898
21:22:42,800 --> 21:22:47,360
void and we're going to say text controller listener


17899
21:22:47,360 --> 21:22:52,320
and remember this function is not yet being called it's it's for us


17900
21:22:52,320 --> 21:22:56,480
then to hook to the text editing controller as a listener so we are soon


17901
21:22:56,480 --> 21:23:00,400
gonna write another function that says hey text editing controller


17902
21:23:00,400 --> 21:23:04,232
whenever your text changes call this function all right so don't worry about


17903
21:23:04,232 --> 21:23:09,360
that it's not being called yet so in here we're basically going to get


17904
21:23:09,360 --> 21:23:14,400
the note um i'm going to get rid of this as well i'm going to say final


17905
21:23:14,400 --> 21:23:17,440
um notes is this note and then we're going


17906
21:23:17,440 --> 21:23:20,960
to say if note is null meaning that we don't have the note then


17907
21:23:20,960 --> 21:23:25,512
we just return we can't work with null nodes


17908
21:23:25,760 --> 21:23:31,512
and then we're going to say get the text which is from our text controller


17909
21:23:31,512 --> 21:23:36,552
like that and then we're just going to await on our note service updates notes


17910
21:23:36,552 --> 21:23:42,000
with that text and then comma at the end to get the formatting working


17911
21:23:42,000 --> 21:23:45,440
so that's easy that's very simple doesn't require so much


17912
21:23:45,440 --> 21:23:48,832
explanation perhaps it's just a simple update note all


17913
21:23:48,832 --> 21:23:52,232
right perfect so


17914
21:23:52,232 --> 21:23:57,040
as i mentioned now that we have this text controller listener we also need to


17915
21:23:57,040 --> 21:24:01,512
have a function that is called setup text controller listener which first


17916
21:24:01,512 --> 21:24:06,160
removes this listener from our text editing controller if it has already


17917
21:24:06,160 --> 21:24:10,960
been added and then it adds it again all right so let's go ahead and i'm just


17918
21:24:10,960 --> 21:24:15,040
going to copy that function name so i don't have to write it again


17919
21:24:15,040 --> 21:24:19,920
um and then in here we go to our text editing controller which we call text


17920
21:24:19,920 --> 21:24:25,280
controller and we say remove listener and that listener at the moment for us


17921
21:24:25,280 --> 21:24:28,480
is called text controller listener okay so


17922
21:24:28,480 --> 21:24:31,512
and then after removing it we're going to add it


17923
21:24:31,512 --> 21:24:36,720
so right here i'm going to add listener and


17924
21:24:36,720 --> 21:24:41,120
just add that listener back in case this function is called multiple times all


17925
21:24:41,120 --> 21:24:43,360
right


17926
21:24:43,760 --> 21:24:49,040
so now we're going gonna get to the juicy part of this chapter which is


17927
21:24:49,040 --> 21:24:53,832
because you see we've already added a lot of coding here but no one's really


17928
21:24:53,832 --> 21:24:58,480
taking advantage of these so or actually we can't say that because the


17929
21:24:58,480 --> 21:25:02,320
idiots sorry the disposes for instance taking advantage of save node if not


17930
21:25:02,320 --> 21:25:05,920
empty and it's taking advantage of delete note if text is empty but we're


17931
21:25:05,920 --> 21:25:09,040
not taking advantage of this create new node and we're not taking advantage of


17932
21:25:09,040 --> 21:25:13,192
the setup text controller listener so that's what we're going to


17933
21:25:13,192 --> 21:25:17,440
do in the body of our um of our


17934
21:25:17,440 --> 21:25:20,960
uh widget at the moment the body it just says


17935
21:25:20,960 --> 21:25:25,760
context write your new node in here but what we're going to do is we're going to


17936
21:25:25,760 --> 21:25:31,280
replace that with our future builder


17937
21:25:31,280 --> 21:25:34,480
what is this future builder actually going to do remember when you press the


17938
21:25:34,480 --> 21:25:38,232
plus button on the main ui of the application no one is creating a new


17939
21:25:38,232 --> 21:25:42,480
note for you you need to do that yourself in this new note view as its


17940
21:25:42,480 --> 21:25:47,440
name indicates so let's go and replace the body of this function of this


17941
21:25:47,440 --> 21:25:52,552
parameter with the future builder remember the future builder has to have


17942
21:25:52,552 --> 21:25:56,080
two variables one is the future itself and


17943
21:25:56,080 --> 21:25:59,920
the other one is going to be its builder function so


17944
21:25:59,920 --> 21:26:06,000
for the future we need to call the create new node which returns a future


17945
21:26:06,000 --> 21:26:11,512
remember it actually returns the database note and we've already


17946
21:26:11,512 --> 21:26:16,400
coded this function okay so that's the future that is going to be


17947
21:26:16,400 --> 21:26:22,232
called by the future builder then we're going to write the builder


17948
21:26:22,232 --> 21:26:25,040
and i'm going to get help from visual studio code to complete this and


17949
21:26:25,040 --> 21:26:28,960
remember in your builder you have to return a widget


17950
21:26:28,960 --> 21:26:31,680
so what we're gonna do is since this is a


17951
21:26:31,680 --> 21:26:36,552
future we need to look for its done state it's not gonna be where we don't


17952
21:26:36,552 --> 21:26:41,120
have to look for active and waiting we just have to look for done


17953
21:26:41,120 --> 21:26:46,160
or else we're going to show a progress indicator okay so let's just say switch


17954
21:26:46,160 --> 21:26:52,400
snapshot state connection state and help from visual studio code to add


17955
21:26:52,400 --> 21:26:56,160
these missing case clauses for me so um


17956
21:26:56,160 --> 21:27:00,800
non-waiting so none of these are important except for done


17957
21:27:00,800 --> 21:27:04,000
right so we're going to leave it like that and


17958
21:27:04,000 --> 21:27:07,920
then in the case of uh default so we're just going to say


17959
21:27:07,920 --> 21:27:13,120
default oops return cons circular progress indicator


17960
21:27:13,120 --> 21:27:17,680
so for now we're saying that when this create new node is finished so


17961
21:27:17,680 --> 21:27:20,960
a new node has been created in the database we come to done but we're not


17962
21:27:20,960 --> 21:27:24,720
returning anything and that's the reason you're seeing this little error here but


17963
21:27:24,720 --> 21:27:28,552
if the connection state is not done for instance if it's waiting for the create


17964
21:27:28,552 --> 21:27:32,160
node to happen then we're going to show a little circular progress indicator to


17965
21:27:32,160 --> 21:27:35,440
the user and remember this is going to happen so fast that you're not even


17966
21:27:35,440 --> 21:27:40,000
going to see this however i'm completely aware that the circular progress


17967
21:27:40,000 --> 21:27:43,600
indicator may not be the previous solution but what we're going to do here


17968
21:27:43,600 --> 21:27:47,920
is we're not going to spend so much time on predefining this code since it's


17969
21:27:47,920 --> 21:27:51,440
gonna probably be displayed to the user on a modern hardware on a modern


17970
21:27:51,440 --> 21:27:56,480
telephone just for a few milliseconds so it's probably not worth predefining this


17971
21:27:56,480 --> 21:28:00,232
code so much right now at least okay as we're going on in this course but if you


17972
21:28:00,232 --> 21:28:04,800
have unlimited amount of time and you and you really are attention and you


17973
21:28:04,800 --> 21:28:09,192
have a lot of attention to details then you may want to fix this up a little bit


17974
21:28:09,192 --> 21:28:14,400
and maybe put it in some sort of center or maybe change the color etc etc


17975
21:28:14,400 --> 21:28:18,480
but we're not gonna do that right now okay


17976
21:28:18,480 --> 21:28:21,920
remember our future builder at the moment is just


17977
21:28:21,920 --> 21:28:26,000
creating a future builder and it's and it's understood that it is a database


17978
21:28:26,000 --> 21:28:30,552
note so if we go upon the don connection state and say


17979
21:28:30,552 --> 21:28:35,760
snapchat snapshot data and though it says object


17980
21:28:35,760 --> 21:28:39,680
well we already know that this snapshot data is of type


17981
21:28:39,680 --> 21:28:44,000
database node as it was the future itself so we're just going to say final


17982
21:28:44,000 --> 21:28:48,400
actually no we're going to assign that to our nodes variable remember we have


17983
21:28:48,400 --> 21:28:52,960
this node variable up here and pretty much all those functions are


17984
21:28:52,960 --> 21:28:56,640
relying on that node variable to be there and that's what we're doing we're


17985
21:28:56,640 --> 21:28:59,832
creating a future builder that creates the node and then we assign it to our


17986
21:28:59,832 --> 21:29:04,000
nodes variable okay so we're gonna then say snapshot


17987
21:29:04,000 --> 21:29:06,720
data adds


17988
21:29:06,720 --> 21:29:10,000
database nodes so that's how we


17989
21:29:10,000 --> 21:29:14,480
get our nodes from our snapshot


17990
21:29:15,280 --> 21:29:18,872
right after doing this we're going to call our setup


17991
21:29:18,872 --> 21:29:24,000
text controller listener because this is it's at this point that we want to start


17992
21:29:24,000 --> 21:29:30,480
listening for user text changes on our main ui


17993
21:29:30,480 --> 21:29:34,160
all right and right at this point we've done what


17994
21:29:34,160 --> 21:29:38,872
we had to do except for actually return and returning a text


17995
21:29:38,872 --> 21:29:42,480
field to the user using which he or he can


17996
21:29:42,480 --> 21:29:46,960
edit the text on the ui so let's let's go ahead and do that so remove the break


17997
21:29:46,960 --> 21:29:49,832
statement in here because we don't need it anymore we're just going to say


17998
21:29:49,832 --> 21:29:54,232
return add text field i believe


17999
21:29:54,232 --> 21:29:58,640
we're going to assign our text our the controller parameter we're going


18000
21:29:58,640 --> 21:30:04,960
to assign a value of our text controller in here so that's how a text field can


18001
21:30:04,960 --> 21:30:09,192
send messages to an object called a text editing controller and say hey my text


18002
21:30:09,192 --> 21:30:13,832
has changed that is our proxy to a text field in


18003
21:30:13,832 --> 21:30:19,600
flutter okay so that's setting up that and what we need to also do is to allow


18004
21:30:19,600 --> 21:30:23,760
the user to enter multiple lines of text in this text field because remember text


18005
21:30:23,760 --> 21:30:27,600
fields usually in flutter are like one line so for instance you're writing an


18006
21:30:27,600 --> 21:30:32,080
email address or you're writing your password so they're not like multi-line


18007
21:30:32,080 --> 21:30:37,360
text fields by default unless you make them multi-line so that's what we're


18008
21:30:37,360 --> 21:30:40,640
going to do now so we're going to say our keyboard type


18009
21:30:40,640 --> 21:30:45,680
you can see it's of type text input type so then say text input type


18010
21:30:45,680 --> 21:30:50,232
alt-line all right so that's going to allow you to have a little enter key at


18011
21:30:50,232 --> 21:30:54,400
the bottom uh right hand side of your keyboard if you're left to right on like


18012
21:30:54,400 --> 21:30:57,360
english language or if you're right to left language like arabic then that


18013
21:30:57,360 --> 21:31:01,600
little enter key is going to be at the bottom left so then in here


18014
21:31:01,600 --> 21:31:05,760
you will get that keyboard as you'll soon see actually and


18015
21:31:05,760 --> 21:31:10,080
you'll get that key on your keyboard to go to the next line


18016
21:31:10,080 --> 21:31:13,600
now in flutter as it is also in swift when


18017
21:31:13,600 --> 21:31:17,512
you're doing ios development there is a weird habit of


18018
21:31:17,512 --> 21:31:23,040
creating text fields that are multi-line with strange parameters and


18019
21:31:23,040 --> 21:31:26,232
unfortunately it has leaked to flutter as well in that


18020
21:31:26,232 --> 21:31:29,360
um you you don't have like a parameter in


18021
21:31:29,360 --> 21:31:34,960
text field that says multiline so if you want to create a text field that


18022
21:31:34,960 --> 21:31:40,320
is multi-line and it kind of like expands as you enter more text into it


18023
21:31:40,320 --> 21:31:45,832
then unfortunately you have to call and you have to assign null to the max


18024
21:31:45,832 --> 21:31:49,120
line's parameter there are some discussions on github


18025
21:31:49,120 --> 21:31:53,040
about why that's the case but there's a good reason behind it okay


18026
21:31:53,040 --> 21:31:56,800
um and what we're then gonna do is if we if


18027
21:31:56,800 --> 21:32:02,400
we do like this and i press command s and we go here


18028
21:32:02,400 --> 21:32:06,872
and we press the plus button in here okay you'll see there's a text field in


18029
21:32:06,872 --> 21:32:11,920
here that's great okay however it's not so obvious the user


18030
21:32:11,920 --> 21:32:15,760
what what am i supposed to do what is this line here am i gonna tap somewhere


18031
21:32:15,760 --> 21:32:20,160
here it's not so obvious so what we're gonna do is to add something called a


18032
21:32:20,160 --> 21:32:24,552
hint to this text field if you're a designer or a developer from before you


18033
21:32:24,552 --> 21:32:28,080
probably already know what a hint is but if you don't know what a hint is a hint


18034
21:32:28,080 --> 21:32:31,920
is little um as this name indicates a little text


18035
21:32:31,920 --> 21:32:36,960
that usually gets displayed to the user telling telling her or him uh


18036
21:32:36,960 --> 21:32:42,400
what is expected to be entered in this uh field so


18037
21:32:42,400 --> 21:32:46,640
let's go and add the hint and that is through a property on our text field


18038
21:32:46,640 --> 21:32:49,600
called decoration and that's uh


18039
21:32:49,600 --> 21:32:53,760
an input decoration inside our input decoration we're going


18040
21:32:53,760 --> 21:32:57,920
to add a parameter called hint text and here we're just going to say start


18041
21:32:57,920 --> 21:33:01,360
typing your notes like this all right


18042
21:33:01,360 --> 21:33:03,832
so command s and


18043
21:33:03,832 --> 21:33:08,552
a comma here to prefi the code a little bit


18044
21:33:08,552 --> 21:33:14,080
but there we go now we have hints in here and as i bring up as i tap on this


18045
21:33:14,080 --> 21:33:17,832
text field you can see i can start typing in here and press this little


18046
21:33:17,832 --> 21:33:21,360
button that i was talking about for multi-line and as i start typing more


18047
21:33:21,360 --> 21:33:26,080
and more then the text field is gonna increase in size


18048
21:33:26,080 --> 21:33:28,872
all right so


18049
21:33:28,872 --> 21:33:33,440
that is that is really what we have to do in this chapter i hope i didn't scare


18050
21:33:33,440 --> 21:33:35,920
you by saying in the beginning of this chapter that this chapter is gonna be


18051
21:33:35,920 --> 21:33:40,080
kind of code heavy but i mean there were there was quite a lot


18052
21:33:40,080 --> 21:33:43,440
of code but hopefully you could stick with me throughout the chapter and get


18053
21:33:43,440 --> 21:33:48,480
it to this point as is the tradition in all the other


18054
21:33:48,480 --> 21:33:51,600
chapters we worked on we're not gonna


18055
21:33:51,600 --> 21:33:56,232
lose we don't want to lose the work that we're doing on our code so we need to


18056
21:33:56,232 --> 21:34:01,120
make sure that we commit and also we tag our code


18057
21:34:01,120 --> 21:34:06,232
okay so let me change the screen layout a little bit


18058
21:34:06,232 --> 21:34:11,280
and we've tagged the previous chapter as step 13 so as the caption indicates here


18059
21:34:11,280 --> 21:34:15,512
we're going to tag and commit this code as step 14 so


18060
21:34:15,512 --> 21:34:20,720
i'm going to say git status two files change and then i'm gonna add


18061
21:34:20,720 --> 21:34:24,640
them all to the staging environment and then i'm gonna commit them


18062
21:34:24,640 --> 21:34:29,920
as step 14 and push my changes to github


18063
21:34:29,920 --> 21:34:37,120
and then i'm gonna tag our code as step 14 as well and then push our tags


18064
21:34:37,120 --> 21:34:39,512
okay um so


18065
21:34:39,512 --> 21:34:44,720
that was that for tagging um now again as is tradition for other chapters as


18066
21:34:44,720 --> 21:34:47,600
well at the end of every chapter we're going to talk about what we are going to


18067
21:34:47,600 --> 21:34:54,800
discuss in the chapter that follows so we are now actually creating notes it


18068
21:34:54,800 --> 21:34:57,920
may not be immediately visible to you but if you if you for instance have


18069
21:34:57,920 --> 21:35:02,160
created some notes then this screen should be able to render those notes


18070
21:35:02,160 --> 21:35:06,552
because the new note view is doing everything necessary to not only create


18071
21:35:06,552 --> 21:35:10,160
the note and let's see where it is here create the new note


18072
21:35:10,160 --> 21:35:16,160
but it also is updating that note for us so here you can see update note so those


18073
21:35:16,160 --> 21:35:19,832
notes are in the database it's just that the main ui of the application which is


18074
21:35:19,832 --> 21:35:23,440
this node c the dark is not able to render them all it's doing is just


18075
21:35:23,440 --> 21:35:28,400
saying waiting for all nodes so it's not so exciting but just know that


18076
21:35:28,400 --> 21:35:32,160
you are getting there and we are getting there it's just there are a few steps


18077
21:35:32,160 --> 21:35:37,920
left to handle that and uh that's exactly what we're gonna do in the next


18078
21:35:37,920 --> 21:35:42,800
chapter so get some tea and coffee if you want to and i'll see you there


18079
21:35:42,800 --> 21:35:47,280
hello and welcome to chapter 32 of the slotzer course in the previous chapters


18080
21:35:47,280 --> 21:35:51,280
we've been talking quite a lot about our node service and creating stream


18081
21:35:51,280 --> 21:35:55,120
controller in order to populate the stream control with the nodes and we


18082
21:35:55,120 --> 21:35:59,512
also have a buffer locally called underscore nodes in our node service and


18083
21:35:59,512 --> 21:36:04,232
so we're kind of like working with our notes in a really good and organic way


18084
21:36:04,232 --> 21:36:09,040
and we also work with the new node view dark file where we created a stateful


18085
21:36:09,040 --> 21:36:12,720
widget that had a text editing controller and i also allowed the user


18086
21:36:12,720 --> 21:36:16,720
to enter some text we manage even to save that text as a


18087
21:36:16,720 --> 21:36:22,160
new note into the database so we've done quite a lot however what wasn't so much


18088
21:36:22,160 --> 21:36:26,080
fun was that it was a little bit of an anti-climax in that we we are able to


18089
21:36:26,080 --> 21:36:29,192
create notes but we're not able to actually display them so we're


18090
21:36:29,192 --> 21:36:33,920
populating the database with new notes but no one is able to show them on the


18091
21:36:33,920 --> 21:36:38,552
screen and that's what we're going to take care of in this chapter


18092
21:36:38,552 --> 21:36:44,080
so let me bring the code that we've written so far to the screen here


18093
21:36:44,080 --> 21:36:48,232
and um i'm going to clear this get status just


18094
21:36:48,232 --> 21:36:50,872
to make sure everything's working fine yeah


18095
21:36:50,872 --> 21:36:55,360
the visual studio code i'm going to bring scrcpy to the right hand side


18096
21:36:55,360 --> 21:36:59,360
and we have to now talk about a little


18097
21:36:59,360 --> 21:37:03,680
problem that we have with our nodes service you see if you look at the code


18098
21:37:03,680 --> 21:37:06,480
here i'm going to increase the size so you see better


18099
21:37:06,480 --> 21:37:10,480
so if you have a look at our note service


18100
21:37:10,480 --> 21:37:15,280
and we have this uh shared instance that we've created here okay so whenever


18101
21:37:15,280 --> 21:37:18,800
somebody says note service parenthesis then they're actually not creating any


18102
21:37:18,800 --> 21:37:22,232
instance they're not creating a new instance of node service but they're


18103
21:37:22,232 --> 21:37:27,120
going through this factory initializer which in turn calls this shared


18104
21:37:27,120 --> 21:37:33,760
static final which in turn calls this internal or private constructor that


18105
21:37:33,760 --> 21:37:37,440
means we've created a singleton so creating a new node service over and


18106
21:37:37,440 --> 21:37:41,440
over again is not gonna um create a new instance


18107
21:37:41,440 --> 21:37:45,120
he's just gonna get the same shared instance and then whoever then starts


18108
21:37:45,120 --> 21:37:48,400
talk reading or you see all notes in here


18109
21:37:48,400 --> 21:37:52,400
properly all notes is delegating its responsibility to the node stream


18110
21:37:52,400 --> 21:37:57,360
controller or stream however our node stream controller is a broadcast stream


18111
21:37:57,360 --> 21:38:02,400
controller and what that means is that a stream controller that


18112
21:38:02,400 --> 21:38:07,920
doesn't really hold on to its current value for new listeners so let's say you


18113
21:38:07,920 --> 21:38:12,080
have a stream controller that is sitting here and you start listening to events


18114
21:38:12,080 --> 21:38:16,320
uh to that stream controller from one place and then an event comes into the


18115
21:38:16,320 --> 21:38:20,720
stream controller and stream controller says oh um i have one listener right


18116
21:38:20,720 --> 21:38:24,872
here i'm gonna delegate this information to that's uh that listener


18117
21:38:24,872 --> 21:38:29,920
all looks fine however however after the propagation of this event into the


18118
21:38:29,920 --> 21:38:34,232
stream controller the stream controller is not going to hold on to this value


18119
21:38:34,232 --> 21:38:37,920
when a new listener comes in from another side so


18120
21:38:37,920 --> 21:38:41,440
any new listener to your broadcast stream controller is not going to be


18121
21:38:41,440 --> 21:38:45,280
informed of the current information which is populated in that stream


18122
21:38:45,280 --> 21:38:49,920
controller so if you're familiar with for instance uh reactive programming


18123
21:38:49,920 --> 21:38:54,080
with rx you may know this as a published subject and the same is true if you're


18124
21:38:54,080 --> 21:38:58,640
for instance versus using rx java or rx scotland


18125
21:38:58,640 --> 21:39:04,232
rx swift even if you're doing like um combined programming with a swift ui you


18126
21:39:04,232 --> 21:39:07,360
will know these as like published subjects so


18127
21:39:07,360 --> 21:39:11,832
a stream controller that is broadcast is not gonna hold on in to its current uh


18128
21:39:11,832 --> 21:39:16,960
value for new listeners we need to we need to remedy that and the way to do


18129
21:39:16,960 --> 21:39:21,280
that is just to move the initialization of node stream


18130
21:39:21,280 --> 21:39:26,480
controller to our initializer right here as we'll soon see


18131
21:39:26,480 --> 21:39:29,832
so i'm going to do a little bit of a shuffling of


18132
21:39:29,832 --> 21:39:34,320
screen sizes in here all right so as the caption indicates


18133
21:39:34,320 --> 21:39:38,640
what we need to do and we need to make this notes stream controller


18134
21:39:38,640 --> 21:39:42,552
which is let's see where it is it's right here we need to make it a late


18135
21:39:42,552 --> 21:39:47,440
final so grab the data type from where it is and just say late final put the


18136
21:39:47,440 --> 21:39:52,480
data type in here and then remove the equal all right so now it is our


18137
21:39:52,480 --> 21:39:55,920
responsibility to ensure that this node stream controller is actually


18138
21:39:55,920 --> 21:39:59,920
initialized upon constructor upon constructing a new instance of our node


18139
21:39:59,920 --> 21:40:04,552
service okay so let's go ahead and do that inside


18140
21:40:04,552 --> 21:40:08,720
shared instance which is right here so what we need to do now is to say node


18141
21:40:08,720 --> 21:40:13,360
stream controller is a stream controller list of


18142
21:40:13,360 --> 21:40:17,192
database nodes and then we do the exact same thing as we did before using


18143
21:40:17,192 --> 21:40:21,440
broadcast however what we're going to do in here is to


18144
21:40:21,440 --> 21:40:26,800
use a property inside the broadcast stream listener called on listen so this


18145
21:40:26,800 --> 21:40:30,400
unless and uh callback is going to get called whenever


18146
21:40:30,400 --> 21:40:35,600
a new listener subscribes to our note stream controller


18147
21:40:35,600 --> 21:40:41,600
note stream controllers stream so upon this happening we need to ensure


18148
21:40:41,600 --> 21:40:46,960
that our node stream controllers stream is populated with all the values that


18149
21:40:46,960 --> 21:40:52,872
we've currently read from the database so let's go ahead and do that


18150
21:40:52,872 --> 21:40:55,680
so we're just going to go ahead and say notes


18151
21:40:55,680 --> 21:41:00,400
stream controller sync add notes just like that all right so


18152
21:41:00,400 --> 21:41:04,872
this ensures anyone who starts listening to our


18153
21:41:04,872 --> 21:41:08,640
to this property all notes which in turn uses the no stream controller if it's a


18154
21:41:08,640 --> 21:41:13,600
new subscriber then it's gonna the unlisted um callback is gonna get called


18155
21:41:13,600 --> 21:41:17,920
and then we're gonna populate our stream controllers a stream with those notes


18156
21:41:17,920 --> 21:41:22,080
that we've already read from the database


18157
21:41:22,080 --> 21:41:25,120
okay let's now move to the next note before


18158
21:41:25,120 --> 21:41:29,512
we can actually get on with the rest of this chapter as the caption indicates as


18159
21:41:29,512 --> 21:41:32,720
we shouldn't close the db upon hot reload after opening db we shouldn't


18160
21:41:32,720 --> 21:41:36,232
close it otherwise upon every reload it gets closed


18161
21:41:36,232 --> 21:41:41,920
so the problem that i'm referring to is in inside our notes view and it is right


18162
21:41:41,920 --> 21:41:46,480
here inside our dispose so upon doing hot reload what we're doing is that


18163
21:41:46,480 --> 21:41:50,480
we're saying node service close which in turn is going to actually close the


18164
21:41:50,480 --> 21:41:56,800
database but remember node service is and is was and is supposed to be a


18165
21:41:56,800 --> 21:42:02,232
singleton where upon creation and upon doing an open one time it should keep


18166
21:42:02,232 --> 21:42:06,080
its state so we shouldn't play with closing of the


18167
21:42:06,080 --> 21:42:10,552
database inside any of our widgets because that is going to interfere with


18168
21:42:10,552 --> 21:42:16,400
the internals and how the node service is actually supposed to work so what


18169
21:42:16,400 --> 21:42:19,832
we're going to do as you can see since this pose function in here the


18170
21:42:19,832 --> 21:42:23,192
overwriting overwriting of the dispose function the only thing it was actually


18171
21:42:23,192 --> 21:42:27,120
doing was to close the node services database we're just going to remove this


18172
21:42:27,120 --> 21:42:32,232
function for now because we have nothing else to dispose of at the moment in our


18173
21:42:32,232 --> 21:42:35,192
notes view


18174
21:42:36,400 --> 21:42:40,960
all right um so what we need to do is actually get to


18175
21:42:40,960 --> 21:42:45,832
the meat of this section which i'm so excited about for this chapter


18176
21:42:45,832 --> 21:42:50,872
and that is to start working with the list view


18177
21:42:50,872 --> 21:42:57,680
and what we need to do is to make sure that we have a list that we can


18178
21:42:57,680 --> 21:43:03,600
we can grab the data that comes from our stream here stream builder you can see


18179
21:43:03,600 --> 21:43:08,720
it reads all the notes and right now we're just saying waiting for all nodes


18180
21:43:08,720 --> 21:43:12,320
so we're going to change that and instead we're actually going to start


18181
21:43:12,320 --> 21:43:18,232
using something called a list view now list view in flutter is an amazing


18182
21:43:18,232 --> 21:43:21,680
widget which i can actually show you here so if you just type list view and


18183
21:43:21,680 --> 21:43:26,160
then command and click control click on linux and windows you


18184
21:43:26,160 --> 21:43:29,440
can see it's a box scroll view extends box scroll view which in turn is a


18185
21:43:29,440 --> 21:43:33,280
scroll view which in turn is a stateless widget so


18186
21:43:33,280 --> 21:43:38,080
a list view has uh some function some really great functionality uh that it


18187
21:43:38,080 --> 21:43:43,120
exposes using is builder we can see here it has a builder function and i believe


18188
21:43:43,120 --> 21:43:47,512
it's a static function here or it's actually constructor great okay


18189
21:43:47,512 --> 21:43:53,280
so it has a builder and inside your builder you will be able to pass two


18190
21:43:53,280 --> 21:43:57,192
important parameters to this list view so we're gonna say


18191
21:43:57,192 --> 21:44:01,280
we return a list view instead of that little text that we had which right now


18192
21:44:01,280 --> 21:44:05,040
says waiting for all notes in here we're gonna say we have two


18193
21:44:05,040 --> 21:44:10,640
parameters first we are gonna tell it how many items it has to render on the


18194
21:44:10,640 --> 21:44:14,960
screen so we're going to say item count all right


18195
21:44:14,960 --> 21:44:20,872
and for the item count we need to actually listen for this snapshots data


18196
21:44:20,872 --> 21:44:25,832
so remember the stream builder at the moment is listening for all notes


18197
21:44:25,832 --> 21:44:29,280
and so that means the data that comes from snapshot


18198
21:44:29,280 --> 21:44:34,080
is actually going to be your um


18199
21:44:34,080 --> 21:44:39,040
is going to be the all the notes that we've read from the database so what we


18200
21:44:39,040 --> 21:44:44,480
need to do now is just to ensure that upon waiting um in here so


18201
21:44:44,480 --> 21:44:49,440
i'm gonna actually remove this and i'm gonna say if


18202
21:44:49,440 --> 21:44:54,720
snapshot has data so that's a property on your snapshot that exposes whether


18203
21:44:54,720 --> 21:44:58,872
the snapshot has actually pro can actually provide you with some data and


18204
21:44:58,872 --> 21:45:03,600
i'm going to put an else in here and upon else we're also going to say return


18205
21:45:03,600 --> 21:45:08,720
con circular progress indicator okay and if the


18206
21:45:08,720 --> 21:45:13,832
snapshot has any data then let's grab that data so i'm just going to say final


18207
21:45:13,832 --> 21:45:21,680
all notes is snapshot that's data as a list of database notes


18208
21:45:21,680 --> 21:45:24,800
all right and what we could do we could just say


18209
21:45:24,800 --> 21:45:28,872
return const text


18210
21:45:28,872 --> 21:45:33,600
got all the notes something like that and we could actually print these notes


18211
21:45:33,600 --> 21:45:37,512
to the screen if you want to it's we could say print notes


18212
21:45:37,512 --> 21:45:42,232
and i'm going to bring the debug console up


18213
21:45:42,232 --> 21:45:48,232
then i'm going to clear the logs and change the screen layout


18214
21:45:48,232 --> 21:45:52,872
so you see it better and i'm just gonna do command s


18215
21:45:52,872 --> 21:45:56,640
alright and i can see at the moment it's just saying your notes so meaning that


18216
21:45:56,640 --> 21:46:01,832
we don't actually have any notes so if i go in here then


18217
21:46:01,832 --> 21:46:07,040
you can see all of a sudden we got a new note populated into the database just


18218
21:46:07,040 --> 21:46:10,480
because i went here and i said i'm printing some notes so


18219
21:46:10,480 --> 21:46:13,760
so i'm gonna say hello okay


18220
21:46:13,760 --> 21:46:19,832
see as i'm changing this our snapshot is actually getting updated with new


18221
21:46:19,832 --> 21:46:24,080
information and it's constantly printing and it's the note id is the same and you


18222
21:46:24,080 --> 21:46:29,680
can see his text is actually changing and if i go out then you can see well


18223
21:46:29,680 --> 21:46:33,600
it's just at the moment says got all the notes meaning that you have some notes


18224
21:46:33,600 --> 21:46:38,080
so if you're seeing a circular progress indicator instead of like a text at the


18225
21:46:38,080 --> 21:46:41,512
moment that we're saying all the notes it's probably because you were like me


18226
21:46:41,512 --> 21:46:46,000
and you didn't have any notes in the database all right


18227
21:46:46,000 --> 21:46:51,440
okay now we have all the notes so how do we then render these so what we need to


18228
21:46:51,440 --> 21:46:55,360
do in here we're going to say return list view i'm going to change the screen


18229
21:46:55,360 --> 21:46:59,280
layout let's say list view builder


18230
21:46:59,280 --> 21:47:04,000
and you remember i mentioned before we need to populate this listview with two


18231
21:47:04,000 --> 21:47:09,920
important parameters one is the item count and at the moment the item count


18232
21:47:09,920 --> 21:47:15,360
is all notes count links and then we have our item builder get


18233
21:47:15,360 --> 21:47:19,120
some help from your editor to complete this you get a a


18234
21:47:19,120 --> 21:47:23,360
build context as the first parameter of type context and then you get an index


18235
21:47:23,360 --> 21:47:29,512
okay now inside your item builder your job is


18236
21:47:29,512 --> 21:47:32,232
if you look at the at the


18237
21:47:32,232 --> 21:47:35,600
signature of item builder it says it's a function


18238
21:47:35,600 --> 21:47:39,680
that takes two parameters it build context and an integer for the index and


18239
21:47:39,680 --> 21:47:44,320
it has to return a widget you see here so you could return anything in here you


18240
21:47:44,320 --> 21:47:47,600
could just say return text item something like that


18241
21:47:47,600 --> 21:47:51,600
okay it's not gonna look so pretty though


18242
21:47:51,600 --> 21:47:56,800
and actually i can see maybe did we lose our item maybe in here


18243
21:47:56,800 --> 21:47:59,832
it is possible that there is something wrong with our note 2 that it's like


18244
21:47:59,832 --> 21:48:04,160
deleting the notes it could be so i'm just gonna do a


18245
21:48:04,160 --> 21:48:10,720
hot reload here and my scr cpy may actually die no but uh it's it worked


18246
21:48:10,720 --> 21:48:13,920
without a problem so we have an item so if that's if that's what you're also


18247
21:48:13,920 --> 21:48:18,000
seeing maybe you could do a hot reload because we've changed our nodes service


18248
21:48:18,000 --> 21:48:23,120
so it could be the problem that our uh we just needed to do a hot reload for


18249
21:48:23,120 --> 21:48:27,680
this unlisten to actually get called all right so that's what we're seeing at the


18250
21:48:27,680 --> 21:48:31,440
moment so i can see item in here and i'm gonna press the plus button so and i'm


18251
21:48:31,440 --> 21:48:35,360
gonna say hello world in here and i'm gonna go out and all of a sudden


18252
21:48:35,360 --> 21:48:39,680
you see two items appearing in here okay but this is not so pretty because


18253
21:48:39,680 --> 21:48:45,920
displaying text on the screen is not so nice and you won't have uh


18254
21:48:45,920 --> 21:48:50,960
you won't be able to easily add interactions to these items because what


18255
21:48:50,960 --> 21:48:54,720
we want ideally is for these items to appear on


18256
21:48:54,720 --> 21:48:59,600
the list and then they have like their own sizing so they have a good height so


18257
21:48:59,600 --> 21:49:03,192
that they are separated a little bit from each other and as you'll see in the


18258
21:49:03,192 --> 21:49:08,080
next chapter we're going to work with um deleting these items so we want the


18259
21:49:08,080 --> 21:49:12,480
ability for the user to see some sort of an icon next to each item using which he


18260
21:49:12,480 --> 21:49:17,760
or she can click on that icon and delete the item so text in itself is not going


18261
21:49:17,760 --> 21:49:23,120
to be able to provide us with all that functionality that we need so


18262
21:49:23,120 --> 21:49:27,192
what we need is a little bit more sophisticated widget and it is called


18263
21:49:27,192 --> 21:49:32,232
list tile so let's do that let's just say we return at least tile


18264
21:49:32,232 --> 21:49:38,960
okay and our list tile is gonna have a um a title so that's the only thing at


18265
21:49:38,960 --> 21:49:42,400
the moment we're gonna provide it with and you can see it's a widget


18266
21:49:42,400 --> 21:49:45,760
and for the widget of this list and for the title of this list style we're going


18267
21:49:45,760 --> 21:49:49,440
to use text um right there okay and i'm going to put


18268
21:49:49,440 --> 21:49:54,160
some commas in there so for the text what we're going to say


18269
21:49:54,160 --> 21:49:57,440
then is the text in itself is


18270
21:49:57,440 --> 21:50:03,040
we want to grab the text that is entered in that note so you see we have all the


18271
21:50:03,040 --> 21:50:08,160
notes but we don't have the current note so the current note that we're actually


18272
21:50:08,160 --> 21:50:11,920
reading its index is going to be provided to us using this item builders


18273
21:50:11,920 --> 21:50:19,600
index so let's go and say final um notes is all nodes at that index so that's the


18274
21:50:19,600 --> 21:50:24,552
current node that we're returning a list tile for okay


18275
21:50:24,552 --> 21:50:30,480
its text is gonna be the note text as you can see here


18276
21:50:30,552 --> 21:50:34,720
uh i can see i've written tile here but it should be title


18277
21:50:34,720 --> 21:50:39,192
and in here we have to have a semicolon all right so if i do command s in here


18278
21:50:39,192 --> 21:50:45,360
you can see now we have very i mean a lot nicer and prettier versions


18279
21:50:45,360 --> 21:50:48,552
of those texts and you can see that they're right here it says hello and


18280
21:50:48,552 --> 21:50:51,920
hello world and those are the texts that we entered you can actually test that


18281
21:50:51,920 --> 21:50:57,920
and say my new my new notes is entered here


18282
21:50:57,920 --> 21:51:01,832
and by pressing the back button you'll see that your note is appearing on the


18283
21:51:01,832 --> 21:51:06,800
screen all right but what we want to do here is if you


18284
21:51:06,800 --> 21:51:14,160
enter a lot of text in your in your notes so if i go and say here


18285
21:51:14,160 --> 21:51:19,512
is a very long text that i've entered and i don't


18286
21:51:19,512 --> 21:51:26,720
want it all to be displayed in one tile and then nodes view so we have now a


18287
21:51:26,720 --> 21:51:31,832
node that is quite large but this is in it in itself is going to


18288
21:51:31,832 --> 21:51:36,400
break a little bit our layout you see in our notes list we don't want to


18289
21:51:36,400 --> 21:51:39,600
render the entire note we somehow want to cap


18290
21:51:39,600 --> 21:51:43,760
the amount of information that we're displaying to a size that is reasonable


18291
21:51:43,760 --> 21:51:47,512
and since our notes don't have titles we


18292
21:51:47,512 --> 21:51:53,760
could infer the content of the note by simply rendering just one line of text


18293
21:51:53,760 --> 21:51:57,440
and the user should be able to then say oh that's what i've written kind of in


18294
21:51:57,440 --> 21:52:01,680
my notes and as you'll see in the latest later chapters we are going to allow the


18295
21:52:01,680 --> 21:52:06,080
user to also click on or tap on these existing notes in order to go and see


18296
21:52:06,080 --> 21:52:09,360
more information about them so it's not the end of the world if you


18297
21:52:09,360 --> 21:52:13,600
don't display like the entire note to the user and as you'll see when users


18298
21:52:13,600 --> 21:52:17,440
start to enter more and more information in their notes it's actually not desired


18299
21:52:17,440 --> 21:52:21,680
uh desirable to render the entire note because imagine a


18300
21:52:21,680 --> 21:52:25,680
note is two pages long or you're gonna have like two very small notes and then


18301
21:52:25,680 --> 21:52:31,600
two pages of long of one note it's it's not feasible so actually it is feasible


18302
21:52:31,600 --> 21:52:36,960
but it's not a good user interface so i'm going to put a comma here


18303
21:52:36,960 --> 21:52:42,000
and i'm just going to use a property in our text called max lines and i'm just


18304
21:52:42,000 --> 21:52:44,800
going to say one


18305
21:52:44,832 --> 21:52:49,680
and so as you'll see here then what we're going to do is to make


18306
21:52:49,680 --> 21:52:54,232
sure that the user kind of understands that there is more information in here


18307
21:52:54,232 --> 21:52:59,512
than what we are rendering so we want to put like ellipses at the end of the text


18308
21:52:59,512 --> 21:53:03,920
that don't have enough space to render themselves fully so


18309
21:53:03,920 --> 21:53:07,760
we're going to say soft wrap and as you can see the information is


18310
21:53:07,760 --> 21:53:12,872
whether the text should break at soft line breaks so make sure that it's true


18311
21:53:12,872 --> 21:53:17,680
and then we're going to say overflow and we're going to say text overflow


18312
21:53:17,680 --> 21:53:20,640
ellipses like that


18313
21:53:20,640 --> 21:53:23,832
and now you can see it says here's a very long text blah


18314
21:53:23,832 --> 21:53:27,760
blah blah and then dot dot so this is a good indication then to all users to


18315
21:53:27,760 --> 21:53:32,400
know that well there's more information to be rendered but there's not enough


18316
21:53:32,400 --> 21:53:37,360
space for that information to be rendered on the screen right now


18317
21:53:37,680 --> 21:53:42,160
all right so i think i mean we've looked at how that all works we've actually


18318
21:53:42,160 --> 21:53:45,680
demoed it so we don't have to do a separate demo for this we've been


18319
21:53:45,680 --> 21:53:49,920
looking at it as we've been developing and the application and that's one of


18320
21:53:49,920 --> 21:53:52,552
the beauties of flutter so


18321
21:53:52,552 --> 21:53:57,120
we don't have to do anything about this demo right now


18322
21:53:57,120 --> 21:54:00,552
and you will probably be surprised that this


18323
21:54:00,552 --> 21:54:04,480
is all we have to do right now for the notes view there's not much more to work


18324
21:54:04,480 --> 21:54:06,960
on we've written


18325
21:54:06,960 --> 21:54:10,640
we were able to at the moment create new notes and we're able to display those


18326
21:54:10,640 --> 21:54:15,832
notes and one at a time inside this list view builder so you'll learn how to use


18327
21:54:15,832 --> 21:54:21,280
the list view builder as well and what we can do as is a tradition


18328
21:54:21,280 --> 21:54:25,120
we're gonna go and commit and tag our work so


18329
21:54:25,120 --> 21:54:27,680
i'm gonna do some reshuffling on the screen


18330
21:54:27,680 --> 21:54:30,400
so you see what i'm doing a little bit better


18331
21:54:30,400 --> 21:54:34,800
and i'm gonna go to my built-in terminal here and we're


18332
21:54:34,800 --> 21:54:39,680
gonna have a look at the status can see there are two files changed so


18333
21:54:39,680 --> 21:54:42,800
let's do git add all


18334
21:54:42,800 --> 21:54:48,232
and let's commit this as step 15 and before committing it you can see your


18335
21:54:48,232 --> 21:54:51,600
git lock from before the last commit was step 14


18336
21:54:51,600 --> 21:54:57,440
so and you can also look at all the tags and we have up to tag 14.


18337
21:54:57,440 --> 21:55:02,872
so let's go ahead and say git commit and we do step 15.


18338
21:55:02,872 --> 21:55:06,640
now i'm going to push that commit to github or if you're using bitbucket or


18339
21:55:06,640 --> 21:55:11,760
any other provider that's fine too and i'm going to tag this as step


18340
21:55:11,760 --> 21:55:17,280
15 right and then we're going to push our tags


18341
21:55:17,512 --> 21:55:22,872
great that part is now done so we've done what we promised to do in this


18342
21:55:22,872 --> 21:55:26,552
chapter the next thing that we have to talk


18343
21:55:26,552 --> 21:55:30,720
about as a tradition in all the other chapters is at the end of every chapter


18344
21:55:30,720 --> 21:55:34,720
we'll talk about what we're going to talk about in the next chapter and you


18345
21:55:34,720 --> 21:55:40,400
can see that we are able to create notes uh we're not able yet to update notes


18346
21:55:40,400 --> 21:55:44,232
we're going to get there soon but we also need to allow the user to delete


18347
21:55:44,232 --> 21:55:48,320
notes so that's exactly actually what we're gonna


18348
21:55:48,320 --> 21:55:51,440
take care of in the next chapter and the next chapter is not gonna be a huge


18349
21:55:51,440 --> 21:55:55,192
chapter either just like this one so it's gonna go very smooth but we're


18350
21:55:55,192 --> 21:56:00,400
gonna do some quite heavy refactoring on our project as you'll soon see so


18351
21:56:00,400 --> 21:56:05,040
grab some refreshments if you want and i'll see you in the next chapter


18352
21:56:05,040 --> 21:56:08,872
hello everyone and welcome to chapter 33 of this flutter course


18353
21:56:08,872 --> 21:56:13,600
in the previous chapters we've been talking about how to create new notes


18354
21:56:13,600 --> 21:56:17,280
and how also to display those notes on the screen


18355
21:56:17,280 --> 21:56:21,680
um and now it would make sense for any user of our application to be able to


18356
21:56:21,680 --> 21:56:24,800
delete the notes that they've created already


18357
21:56:24,800 --> 21:56:28,480
and we are not right now giving that functionality to the user and that's


18358
21:56:28,480 --> 21:56:32,000
exactly what we're gonna work on in this chapter


18359
21:56:32,000 --> 21:56:35,680
and just a heads up we're gonna work quite a bit with refactoring so things


18360
21:56:35,680 --> 21:56:39,360
are gonna get a little bit uncomfortable where the code isn't gonna compile but


18361
21:56:39,360 --> 21:56:43,832
we're gonna fix that soon and right after breaking it so we're


18362
21:56:43,832 --> 21:56:48,160
going to work a little bit about on our dialogues as well


18363
21:56:48,160 --> 21:56:52,552
you see we have a few dialogues at the moment that appear on the screen and for


18364
21:56:52,552 --> 21:56:56,552
instance will we display an error to the screen


18365
21:56:56,552 --> 21:57:00,552
or to the user where we for instance say oh you couldn't log in or oh your


18366
21:57:00,552 --> 21:57:05,600
password was incorrect or we couldn't register this user because it's a a weak


18367
21:57:05,600 --> 21:57:09,360
password entered so that's like our error dialogues and


18368
21:57:09,360 --> 21:57:13,280
we also have a dialogue that we display to the user when he or she's trying to


18369
21:57:13,280 --> 21:57:17,600
log out of the application so we have two dialogues at the moment


18370
21:57:17,600 --> 21:57:22,080
and in this chapter what we're going to do is we're going to consolidate how we


18371
21:57:22,080 --> 21:57:27,040
also display our dialogues to the user as part of delete


18372
21:57:27,040 --> 21:57:30,800
functionality because you see the delete part as well the way we're going to do


18373
21:57:30,800 --> 21:57:33,600
it is we're going to let me actually bring the


18374
21:57:33,600 --> 21:57:37,440
scrcpy to the screen so how we're going to do it is that we're


18375
21:57:37,440 --> 21:57:40,872
going to put a little delete icon next to every item on the list and we're


18376
21:57:40,872 --> 21:57:45,192
going to allow the user to tap on those icons in order to display a dialogue


18377
21:57:45,192 --> 21:57:49,280
now this is going to be the third dialogue and um a colleague of mine that


18378
21:57:49,280 --> 21:57:54,160
i work with which i really admire his way of working he mentions that he makes


18379
21:57:54,160 --> 21:57:58,720
things reusable when he gets to the third time of doing the


18380
21:57:58,720 --> 21:58:04,480
same thing again so now we've written two dialogues to this point and we also


18381
21:58:04,480 --> 21:58:08,000
now need a third dialogue and that's the point that maybe we should actually


18382
21:58:08,000 --> 21:58:11,832
consolidate all our dialogue displaying to one


18383
21:58:11,832 --> 21:58:16,640
function and then from other functions we're just gonna reuse that okay


18384
21:58:16,640 --> 21:58:21,192
so that's what we're gonna do in this chapter


18385
21:58:21,192 --> 21:58:24,960
so let's have a look at the code a little bit i'm gonna um


18386
21:58:24,960 --> 21:58:28,640
i'm gonna bring the screen to a little bit


18387
21:58:28,640 --> 21:58:33,680
um larger display so here


18388
21:58:33,680 --> 21:58:37,440
so these this is our application the way we've listed left it at the moment


18389
21:58:37,440 --> 21:58:43,192
so like that visual studio code and we have a cr cpy there as well okay


18390
21:58:43,192 --> 21:58:46,872
so let's then have a look at our as a caption in case we're going to have a


18391
21:58:46,872 --> 21:58:51,680
look at our error dialog so let's go ahead in


18392
21:58:51,680 --> 21:58:53,920
our


18393
21:58:54,400 --> 21:58:58,800
let's see what we have constant services crowd utilities we have and we have a


18394
21:58:58,800 --> 21:59:03,040
function here called show error dialog which in turn says show dialog and then


18395
21:59:03,040 --> 21:59:08,552
it says alert dialogue okay then if you have a look at how this is


18396
21:59:08,552 --> 21:59:14,480
constructed the only thing it's doing is saying like hey i have um hey i have a


18397
21:59:14,480 --> 21:59:19,280
title then i have just one action with a button


18398
21:59:19,280 --> 21:59:24,320
and also and that action doesn't return any value and also


18399
21:59:24,320 --> 21:59:30,160
we i have some text to display all right great now let's go to our notes view if


18400
21:59:30,160 --> 21:59:34,400
you look at our notes view at the end of notes view we have this


18401
21:59:34,400 --> 21:59:37,920
logout dialog what does this do it's the same thing it


18402
21:59:37,920 --> 21:59:43,192
has show dialog it has an alert dialog inside it it has a title and some text


18403
21:59:43,192 --> 21:59:48,000
but it has two actions and these actions they do different things so one action


18404
21:59:48,000 --> 21:59:51,280
does uh if it sends a value of false the other


18405
21:59:51,280 --> 21:59:54,872
one sends the value of true so every dialogue that appears to the


18406
21:59:54,872 --> 21:59:57,512
screen so let's say this one for instance


18407
21:59:57,512 --> 22:00:00,640
our logout dialog that's the one we're looking at right now


18408
22:00:00,640 --> 22:00:05,440
the cancel button sends a false value and the log out button sends a true


18409
22:00:05,440 --> 22:00:08,960
value so the dialogs are all very similar they


18410
22:00:08,960 --> 22:00:14,552
have a title they have some contents and they have some actions that the user can


18411
22:00:14,552 --> 22:00:18,400
take on those dialogues and these actions then have their own values and


18412
22:00:18,400 --> 22:00:22,232
that's what we're going to do in our application right now is that we're


18413
22:00:22,232 --> 22:00:26,552
going to consolidate all these into one generic function that is going to kind


18414
22:00:26,552 --> 22:00:31,512
of allow us to customize it to our needs all right


18415
22:00:31,760 --> 22:00:35,040
so let's have a look at how we can achieve


18416
22:00:35,040 --> 22:00:39,120
this so as the caption indicates here we're first going to cut things from the


18417
22:00:39,120 --> 22:00:42,872
source and that's like the strategy that i use a lot in software development so


18418
22:00:42,872 --> 22:00:47,440
if i'm gonna disrupt things and i'm gonna like change the way things work


18419
22:00:47,440 --> 22:00:50,960
i'm not gonna be scared and i'm really not scared of


18420
22:00:50,960 --> 22:00:56,000
making things break and i in my opinion you may think differently but in my


18421
22:00:56,000 --> 22:00:59,832
opinion it's really good to cut things from the source break the code and then


18422
22:00:59,832 --> 22:01:03,832
start fixing things one at a time instead of trying to make sure nothing


18423
22:01:03,832 --> 22:01:07,192
breaks while you're refactoring the code so that's what we're going to do here as


18424
22:01:07,192 --> 22:01:10,400
the caption indicates we're going to go to short air dialog


18425
22:01:10,400 --> 22:01:14,480
let's see if you can find it i like to use command p in visual studio code i'm


18426
22:01:14,480 --> 22:01:17,280
going to say the show error dialog in here


18427
22:01:17,280 --> 22:01:21,280
and what we're going to do is just we're going to remove all this code that is


18428
22:01:21,280 --> 22:01:25,832
there okay so that's that part


18429
22:01:25,832 --> 22:01:30,160
and what we're also going to do is um as the cache indicates remove the show log


18430
22:01:30,160 --> 22:01:34,640
out the dialog from notes view since we're going to have a generic one so go


18431
22:01:34,640 --> 22:01:38,000
into your notes view in here and


18432
22:01:38,000 --> 22:01:41,832
remove this show log out dialog all right


18433
22:01:41,832 --> 22:01:46,160
we're gonna get errors that's okay and you know this code that we removed also


18434
22:01:46,160 --> 22:01:49,760
here show error dialog is used quite a lot so


18435
22:01:49,760 --> 22:01:52,960
by removing it if i like search for show air dollar you can see we're actually


18436
22:01:52,960 --> 22:01:57,440
using in seven places so all of those places are now gonna have an error


18437
22:01:57,440 --> 22:02:03,360
that's okay fine we're gonna fix that soon so don't worry about that


18438
22:02:03,920 --> 22:02:08,960
all right so what we need to do in here is before we fix all of that we're gonna


18439
22:02:08,960 --> 22:02:14,960
start basically creating our notes list view all right


18440
22:02:14,960 --> 22:02:18,232
so at the moment if you look at our notes


18441
22:02:18,232 --> 22:02:23,512
view what we have is this beauty in here which is doing quite


18442
22:02:23,512 --> 22:02:27,832
a lot of work as you can see it's it has a future builder inside the body of the


18443
22:02:27,832 --> 22:02:32,080
notes view and it has a stream builder and a lot of code in here it would be


18444
22:02:32,080 --> 22:02:36,232
really great if you could separate this code into its own place and we could


18445
22:02:36,232 --> 22:02:40,320
call this widget like a notes list view and that's exactly what we're going to


18446
22:02:40,320 --> 22:02:46,480
do in this chapter so let's go ahead in our views inside notes


18447
22:02:46,480 --> 22:02:49,832
in here in your


18448
22:02:49,832 --> 22:02:55,440
views inside notes let's create a new file and we're going to call it notes


18449
22:02:55,600 --> 22:02:59,832
list view dot parts okay like that


18450
22:02:59,832 --> 22:03:03,600
and in in notes list view what we're going to do is going to say the notes


18451
22:03:03,600 --> 22:03:08,552
list view is a stateless widget so we create a stl which is a stateless widget


18452
22:03:08,552 --> 22:03:11,120
and we're going to call it notes list view


18453
22:03:11,120 --> 22:03:14,080
as we've seen it before we need to import material so i'm going to do that


18454
22:03:14,080 --> 22:03:17,512
right now so all those errors are going to go away


18455
22:03:17,512 --> 22:03:20,480
now what we need to do is we need to


18456
22:03:20,480 --> 22:03:25,512
actually pass a a list of notes to this notes list


18457
22:03:25,512 --> 22:03:30,400
view so that it can render them because you see all the logic for retrieving the


18458
22:03:30,400 --> 22:03:35,832
notes can stay still in the notes view but all notes list view is interested in


18459
22:03:35,832 --> 22:03:40,552
is a list of notes to display so let's go and expose that


18460
22:03:40,552 --> 22:03:44,480
as a parameter in our notes list view so we're going to say final


18461
22:03:44,480 --> 22:03:49,040
list of database nodes and you can see database node is not


18462
22:03:49,040 --> 22:03:53,192
imported right now but visual studio code is going to be smart enough to


18463
22:03:53,192 --> 22:03:55,832
import that so


18464
22:03:55,832 --> 22:03:58,800
if you're actually yeah


18465
22:03:58,800 --> 22:04:02,640
if your editor like if you're using vim or something on linux or even mac and


18466
22:04:02,640 --> 22:04:06,800
windows if you're using that you may have to import these things manually so


18467
22:04:06,800 --> 22:04:11,192
um but the import statements i believe i mean if you've gotten to this point in


18468
22:04:11,192 --> 22:04:13,512
the course you should be uh


18469
22:04:13,512 --> 22:04:17,832
like savvy enough and you should know all these things enough in order to be


18470
22:04:17,832 --> 22:04:21,680
able to solve that yourself so um so i'm not going to repeat all that


18471
22:04:21,680 --> 22:04:26,400
information again just make sure that your database note is in context in at


18472
22:04:26,400 --> 22:04:30,232
this point so that's going to be our notes


18473
22:04:30,232 --> 22:04:34,800
and also this notes view as i mentioned in the previous chapter but maybe it's


18474
22:04:34,800 --> 22:04:37,512
actually worth mentioning in this chapter because it's very relevant what


18475
22:04:37,512 --> 22:04:41,760
we're going to do is beside every note to the right hand side


18476
22:04:41,760 --> 22:04:47,920
as the trailing tile widget we're going to display a little like a trashcan icon


18477
22:04:47,920 --> 22:04:52,832
that the user can tap on in order to delete a um


18478
22:04:52,832 --> 22:04:56,480
notes and what we're going to do then is to


18479
22:04:56,480 --> 22:04:59,512
make sure that


18480
22:04:59,512 --> 22:05:06,080
that we can basically call a little function to show a delete


18481
22:05:06,080 --> 22:05:09,920
dialog to the user so upon you pressing the delete button we're going to display


18482
22:05:09,920 --> 22:05:13,280
a dialogue and the delete dialog is going to be very similar to log out like


18483
22:05:13,280 --> 22:05:16,800
saying now hey hey you're deleting this note are you sure


18484
22:05:16,800 --> 22:05:20,000
and that dialog is going to have two buttons


18485
22:05:20,000 --> 22:05:24,000
yes or no or something like that and upon pressing no we're just going to


18486
22:05:24,000 --> 22:05:27,192
dismiss the dialogue upon pressing yes then we're going to delete that note


18487
22:05:27,192 --> 22:05:32,720
from the database all right so what we need is you can see the notes


18488
22:05:32,720 --> 22:05:38,320
list view at the moment isn't like it shouldn't have any connection with the


18489
22:05:38,320 --> 22:05:42,480
notes service it should be the notes view that has that connection so this is


18490
22:05:42,480 --> 22:05:47,192
how you should also like do your components in flutter in


18491
22:05:47,192 --> 22:05:52,080
that you shouldn't leak your services everywhere so if the notes list view


18492
22:05:52,080 --> 22:05:57,760
could somehow delegate the deletion task to the notes view that would be ideal so


18493
22:05:57,760 --> 22:06:02,320
the notes list view could display the dialogue it could just say hey


18494
22:06:02,320 --> 22:06:06,552
are you sure and if the user then says yes the notes list view could then


18495
22:06:06,552 --> 22:06:11,360
delegate this information back to its parent and say hey do something with


18496
22:06:11,360 --> 22:06:14,320
this information okay


18497
22:06:14,400 --> 22:06:19,920
so let's then go and create a little callback definition using typedef


18498
22:06:19,920 --> 22:06:24,232
excuse me and we're going to call it delete note


18499
22:06:24,232 --> 22:06:30,960
callback okay and this is a void function that takes a database note


18500
22:06:30,960 --> 22:06:35,832
oops a database nodes


18501
22:06:35,920 --> 22:06:42,080
i'll note like that so we're saying we're defining a function


18502
22:06:42,080 --> 22:06:46,232
that we're then going to use in our nodes list view which we call we which


18503
22:06:46,232 --> 22:06:50,400
we use as a callback that will be called when the user


18504
22:06:50,400 --> 22:06:53,832
presses the yes on this hypothetical dialogue that we're


18505
22:06:53,832 --> 22:06:57,680
assuming gonna display that user okay so let's go in here and define that let's


18506
22:06:57,680 --> 22:07:04,232
just say um delete node callback and we're just going to say on delete nodes


18507
22:07:04,232 --> 22:07:08,400
so this is our callback and you're now getting some errors from a flutter


18508
22:07:08,400 --> 22:07:11,760
saying that these parameters aren't defined so i'm going to use visual


18509
22:07:11,760 --> 22:07:16,000
studio code and to say define these parameters for me


18510
22:07:16,000 --> 22:07:20,720
i'm also going to make them require parameters like this


18511
22:07:23,040 --> 22:07:28,320
so that's great we have still some errors in our application so


18512
22:07:28,320 --> 22:07:34,080
but we're going to continue building until we can fix all these errors okay


18513
22:07:34,160 --> 22:07:40,080
all right that's fantastic so that's the first part that we have to work on so


18514
22:07:40,080 --> 22:07:45,360
let's then go ahead and um take our notes view the way it is right here and


18515
22:07:45,360 --> 22:07:50,000
you see we already have a list view builder i'm just gonna go and grab this


18516
22:07:50,000 --> 22:07:52,960
list view the way it is from there


18517
22:07:52,960 --> 22:07:58,000
and i'm i'm actually gonna cut that and bring it into nodes list view inside the


18518
22:07:58,000 --> 22:08:02,800
build function alright so inside instead of returning a container i'm just gonna


18519
22:08:02,800 --> 22:08:07,760
return that code that i've just pasted that i just cut all right


18520
22:08:07,760 --> 22:08:11,600
it looks absolutely horrible at the moment it's because i mean we have so


18521
22:08:11,600 --> 22:08:14,640
many errors but i actually like that kind of stuff


18522
22:08:14,640 --> 22:08:18,160
to be honest with you some developers get nervous when they have lots of


18523
22:08:18,160 --> 22:08:21,832
errors in their code and they just want to patch them up as soon as they can


18524
22:08:21,832 --> 22:08:27,192
but we're gonna work just one step at a time as we say in sweden we say


18525
22:08:27,192 --> 22:08:31,120
it means one step at a time we're going to fix these errors and at


18526
22:08:31,120 --> 22:08:35,440
the end of this chapter everything's going to work i promise you


18527
22:08:35,440 --> 22:08:38,960
so let's go in here you can see the first error that we have is all notes


18528
22:08:38,960 --> 22:08:42,720
and what all notes is giving us an error for is that it doesn't exist in this


18529
22:08:42,720 --> 22:08:46,872
context and that's because we have something called notes all right so


18530
22:08:46,872 --> 22:08:50,400
let's go in here and say now we're using notes


18531
22:08:50,400 --> 22:08:53,832
and in here we don't have all notes either so we're just going to say notes


18532
22:08:53,832 --> 22:08:56,000
notes and that


18533
22:08:56,000 --> 22:08:58,480
note is going to be extracted from notes at


18534
22:08:58,480 --> 22:09:02,960
that index and the exciting part now is that


18535
22:09:02,960 --> 22:09:07,120
we don't just use the title property of our list tile anymore we're going to


18536
22:09:07,120 --> 22:09:12,640
start using something called trailing and trailing is a as a property of list


18537
22:09:12,640 --> 22:09:15,600
tile that as its name indicates it's going to allow you to


18538
22:09:15,600 --> 22:09:20,160
specify a widget that needs to be displayed at the end or the trail of


18539
22:09:20,160 --> 22:09:23,680
every list tile and this is where we're going to use an


18540
22:09:23,680 --> 22:09:28,320
icon button so to display our little trash can okay so


18541
22:09:28,320 --> 22:09:31,440
let's say icon button


18542
22:09:31,600 --> 22:09:35,920
and in this icon button what we're going to do then is we're going to define the


18543
22:09:35,920 --> 22:09:40,640
uncrest which looks like this and it's icon then


18544
22:09:40,640 --> 22:09:45,120
it's going to be icon of icons delete i believe it's called


18545
22:09:45,120 --> 22:09:48,320
let's have a look at how delete looks like and you can see it's a little trash


18546
22:09:48,320 --> 22:09:52,800
can fantastic and make this cons to make the


18547
22:09:52,800 --> 22:09:57,280
analyzer happy as well all right so what do we do i'm pressed so what we


18548
22:09:57,280 --> 22:10:00,552
need to do on press is as i mentioned before we need to take care of the


18549
22:10:00,552 --> 22:10:05,832
displaying of a dialogue that says let's just call the show delete dialogue


18550
22:10:05,832 --> 22:10:10,232
okay so this show delete dialogue we're going to call it and we expect it to


18551
22:10:10,232 --> 22:10:15,280
return a true or false remember we haven't implemented the show


18552
22:10:15,280 --> 22:10:20,160
delete dialog that's okay we can put some constraints on the


18553
22:10:20,160 --> 22:10:25,360
interface of this function yet but it doesn't yet exist so let's just say that


18554
22:10:25,360 --> 22:10:30,320
this function show delete dialog takes a build context and it returns true or


18555
22:10:30,320 --> 22:10:35,192
false to us so if the user says yes i want to delete some item then it it


18556
22:10:35,192 --> 22:10:38,640
returns true if it's if the user says no then this


18557
22:10:38,640 --> 22:10:44,400
dialog should return false to us okay so let's go ahead and say final should


18558
22:10:44,400 --> 22:10:48,720
uh you should delete is a weight


18559
22:10:48,720 --> 22:10:53,120
and when you're using a weight you need to make your own press function async


18560
22:10:53,120 --> 22:10:56,720
then we're going to say await show delete dialog we don't have that


18561
22:10:56,720 --> 22:11:01,600
function remember but that's okay and when we say


18562
22:11:01,600 --> 22:11:05,280
should delete okay if this is boolean then we say if


18563
22:11:05,280 --> 22:11:09,512
should delete then what we're going to do is we say


18564
22:11:09,512 --> 22:11:14,960
and we call our on deletes notes with the current note okay


18565
22:11:14,960 --> 22:11:19,600
so that is just the implementation of this widget


18566
22:11:19,600 --> 22:11:22,960
notes list view all right


18567
22:11:22,960 --> 22:11:27,120
but don't worry about these errors we're gonna soon fix them so


18568
22:11:27,120 --> 22:11:30,720
and just save this file as well


18569
22:11:30,800 --> 22:11:35,120
now we need to move to the next item and that's our own generic dialogue you can


18570
22:11:35,120 --> 22:11:39,512
see we're going to create a generic dialogue dart


18571
22:11:39,512 --> 22:11:45,440
which is so important because pretty much this show generic dialogue and the


18572
22:11:45,440 --> 22:11:49,120
variations that we're going to create on it is going to fix all these errors that


18573
22:11:49,120 --> 22:11:52,720
we have in our application right now so i'm actually happy to start working on


18574
22:11:52,720 --> 22:11:56,640
it i don't know about you so as the caption indicates we're going


18575
22:11:56,640 --> 22:12:02,320
to create a file in lib utilities dialogues generic dialogue dart so we


18576
22:12:02,320 --> 22:12:07,920
have what folders do we have in here we have lib consonants enums services


18577
22:12:07,920 --> 22:12:12,400
utilities all right but inside utilities we don't have at


18578
22:12:12,400 --> 22:12:17,120
the moment a dialogues folder and remember that we


18579
22:12:17,120 --> 22:12:22,080
removed all the contents of this show error dialog let's just delete the file


18580
22:12:22,080 --> 22:12:26,960
now we don't need that so i'm just gonna delete it and move it to trash


18581
22:12:26,960 --> 22:12:31,280
so now inside utilities we have nothing so let's go create this new file as the


18582
22:12:31,280 --> 22:12:36,000
caption indicates we're gonna say it's gonna be inside a folder called dialogs


18583
22:12:36,000 --> 22:12:41,872
and we're going to call it generic dialog.art


18584
22:12:42,800 --> 22:12:47,280
all right i'm going to get rid of the sidebar and we now need to start


18585
22:12:47,280 --> 22:12:51,832
implementing our generic dialogue


18586
22:12:52,232 --> 22:12:55,440
this show generic dialogue is going to be a


18587
22:12:55,440 --> 22:12:59,920
little bit complicated and um and i'm saying it a little bit


18588
22:12:59,920 --> 22:13:02,720
complicated simply because it's going to use generics


18589
22:13:02,720 --> 22:13:07,192
and the reason um i've basically


18590
22:13:07,192 --> 22:13:13,120
decided to make it generic is as the name generic indicates this


18591
22:13:13,120 --> 22:13:17,192
generic dialogue i mean the file also says generic dialect so you need to kind


18592
22:13:17,192 --> 22:13:20,552
of know already what you're getting yourself into


18593
22:13:20,552 --> 22:13:25,040
the reason it has to be generic is that it needs to be able to produce


18594
22:13:25,040 --> 22:13:29,360
different sorts of values let's go to our notes list view and you see here


18595
22:13:29,360 --> 22:13:33,440
we're going to say show delete dialog a function we haven't implemented yet and


18596
22:13:33,440 --> 22:13:37,440
show delete dialogue all of a sudden it's going to return true or false okay


18597
22:13:37,440 --> 22:13:42,320
that's one thing how about in the case of login view so let's go to login view


18598
22:13:42,320 --> 22:13:46,720
how about this case show air dot log remember show error dialog is a is also


18599
22:13:46,720 --> 22:13:51,120
a function we're soon gonna develop which we have before we we killed it we


18600
22:13:51,120 --> 22:13:54,160
have to develop a new function called show air dialog which in turn is gonna


18601
22:13:54,160 --> 22:13:59,192
use our generic dialog but in this case it's not gonna return true or false so


18602
22:13:59,192 --> 22:14:03,360
we need to make sure our generic dialogue as its name indicates is a


18603
22:14:03,360 --> 22:14:09,280
generic function that can based on what you provide to it is able to return


18604
22:14:09,280 --> 22:14:13,760
those values to you and what i mean by what you provide to


18605
22:14:13,760 --> 22:14:18,480
it every item every option or every button that is


18606
22:14:18,480 --> 22:14:22,480
displayed in our generic dialog is gonna have a value


18607
22:14:22,480 --> 22:14:27,600
we're gonna assume that all the buttons that you display in any given dialog is


18608
22:14:27,600 --> 22:14:31,680
going to have values of the exact same type so a


18609
22:14:31,680 --> 22:14:35,680
dialogue that shows a yes or no button is going to have


18610
22:14:35,680 --> 22:14:40,160
two buttons each of which contains a boolean value one true the other one


18611
22:14:40,160 --> 22:14:44,480
false or maybe you want to display 10 buttons and two of them have the value


18612
22:14:44,480 --> 22:14:49,040
of true and the other one had the others 8 have the value of false but what i


18613
22:14:49,040 --> 22:14:52,160
mean is that the buttons inside your generic dialogue are going to have the


18614
22:14:52,160 --> 22:14:57,192
same data type all right so we're going to call that data type t


18615
22:14:57,192 --> 22:15:01,512
all right so let's go ahead and define this um show


18616
22:15:01,512 --> 22:15:05,280
generic dialogue so we're going to say that this dialogue actually returns


18617
22:15:05,280 --> 22:15:09,360
um a future of t


18618
22:15:09,360 --> 22:15:13,280
and um what we're going to say we're going to say show generic


18619
22:15:13,280 --> 22:15:18,232
dialogue and it's


18620
22:15:18,232 --> 22:15:21,280
it's a function signature it kind of looks like this


18621
22:15:21,280 --> 22:15:26,160
all right so what does it actually mean t optional and that's because remember


18622
22:15:26,160 --> 22:15:29,280
on android for instance when you display a dialog to the user the user can


18623
22:15:29,280 --> 22:15:33,192
actually press the hardware down button in order to dismiss a dialog without


18624
22:15:33,192 --> 22:15:35,760
actually responding to it and ios is actually


18625
22:15:35,760 --> 22:15:40,080
not so much like that in is when you display a dialogue it's a modal that the


18626
22:15:40,080 --> 22:15:45,192
user has to reply to unless you create your own dialogue or if you're


18627
22:15:45,192 --> 22:15:49,040
doing maybe something hacky on the side to say that oh if the user taps outside


18628
22:15:49,040 --> 22:15:52,720
the dialogue then it should disappear otherwise dialogues in ios are modal and


18629
22:15:52,720 --> 22:15:56,080
have to be responded to however in android it's possible that a user


18630
22:15:56,080 --> 22:15:59,120
dismisses a dialogue without actually responding to it and in this case the


18631
22:15:59,120 --> 22:16:02,640
show generic dialogue should actually return nil or null depending what


18632
22:16:02,640 --> 22:16:05,920
language you're talking about if you're a python developer you'd say none


18633
22:16:05,920 --> 22:16:08,872
so so we're going to


18634
22:16:08,872 --> 22:16:13,280
define this saying we have a generic dialog that returns some sort of a


18635
22:16:13,280 --> 22:16:17,832
optional value all right and the first parameter that we need is


18636
22:16:17,832 --> 22:16:21,832
a build context so let's just say build context


18637
22:16:23,440 --> 22:16:28,400
and we need a title and content so we're going to say required


18638
22:16:28,400 --> 22:16:32,000
also before we do that let's also have a look at this thing that says build


18639
22:16:32,000 --> 22:16:34,960
context isn't defined and that's because we have an important material so let's


18640
22:16:34,960 --> 22:16:38,320
take care of that and we have to have curly brackets in


18641
22:16:38,320 --> 22:16:43,512
these places because required actually requires that okay


18642
22:16:43,512 --> 22:16:45,832
so the next parameter that we have to


18643
22:16:45,832 --> 22:16:50,080
implement is the title and then the content so both are going to be text or


18644
22:16:50,080 --> 22:16:52,552
string so that's the title and now i'm going to


18645
22:16:52,552 --> 22:16:56,232
copy paste that i'm going to say content in here content


18646
22:16:56,232 --> 22:17:00,640
all right now it's exciting part now what we need is


18647
22:17:00,640 --> 22:17:04,552
some sort of ability and some sort of way for the user to be able


18648
22:17:04,552 --> 22:17:09,360
to specify like a list of um


18649
22:17:09,360 --> 22:17:14,960
a list of buttons to display the to the to the user now every button if we say


18650
22:17:14,960 --> 22:17:18,160
every button by default should have for instance


18651
22:17:18,160 --> 22:17:22,400
we should we're representing every button as a text button that every text


18652
22:17:22,400 --> 22:17:27,280
button needs a string to display all right and then it will have an unpressed


18653
22:17:27,280 --> 22:17:32,000
so what we're telling what we're saying is that okay we should be able to render


18654
22:17:32,000 --> 22:17:35,832
multiple buttons and every button should have a text


18655
22:17:35,832 --> 22:17:40,232
and also we set from before every button should also have some sort of a value


18656
22:17:40,232 --> 22:17:45,920
all right which is t optional so we need a way for the user to specify a list of


18657
22:17:45,920 --> 22:17:50,000
buttons each of which has a title of type string and also every one of those


18658
22:17:50,000 --> 22:17:55,440
buttons should optionally have a value so that's best described with a map of


18659
22:17:55,440 --> 22:17:59,360
string as titles and a value of t like this


18660
22:17:59,360 --> 22:18:02,552
all right so we're going to type def that we're


18661
22:18:02,552 --> 22:18:07,920
going to say we have a definition of a and we have basically a type to finish


18662
22:18:07,920 --> 22:18:12,680
and we're going to call the dialog option builder


18663
22:18:12,960 --> 22:18:15,832
and we're going to say it has it's a generic


18664
22:18:15,832 --> 22:18:20,640
okay and we're going to say that is equal to a function


18665
22:18:20,640 --> 22:18:24,800
that returns that value so


18666
22:18:24,800 --> 22:18:30,640
let's also see the map all right key expected to find all right and


18667
22:18:30,640 --> 22:18:35,192
that's probably because i've misspelled that am all right so now we have an


18668
22:18:35,192 --> 22:18:39,280
option builder so we're gonna then use that option builder in our function so


18669
22:18:39,280 --> 22:18:42,720
you're you'll see soon how we're going to use it


18670
22:18:42,720 --> 22:18:46,320
so i'm going to say that we have a dialog option builder and let's just


18671
22:18:46,320 --> 22:18:49,512
call it options builder


18672
22:18:50,000 --> 22:18:54,080
okay so we have all those bits and pieces in place now what we need to do


18673
22:18:54,080 --> 22:18:59,192
is inside this function actually use the build context to display a dialogue to


18674
22:18:59,192 --> 22:19:04,800
the user so before we do that let's grab all the options that the caller


18675
22:19:04,800 --> 22:19:07,512
wants us to display so we're going to call it options


18676
22:19:07,512 --> 22:19:12,080
is options builder we call that function and now you'll see


18677
22:19:12,080 --> 22:19:15,192
options is


18678
22:19:15,280 --> 22:19:18,720
it smart enough to understand that yeah it's a map of string dynamic okay it


18679
22:19:18,720 --> 22:19:23,832
doesn't understand yet what it is so let's go ahead and say in here in


18680
22:19:23,832 --> 22:19:28,552
this function we return a show dialog of t


18681
22:19:28,552 --> 22:19:32,480
all right and in here we have two parameters that


18682
22:19:32,480 --> 22:19:37,920
we have to pass one is the context the other one is the actual builder


18683
22:19:37,920 --> 22:19:42,480
function all right some help from your favorite editor to


18684
22:19:42,480 --> 22:19:45,040
complete the builder function which is very simple it just takes to build


18685
22:19:45,040 --> 22:19:51,832
context all right and in your builder we are going to return an alert dialogue


18686
22:19:52,720 --> 22:19:56,320
this you should already know from before we've worked with alert dialogues and


18687
22:19:56,320 --> 22:20:00,400
show dialogue from before so this is nothing revolutionary


18688
22:20:00,400 --> 22:20:05,760
so for the title we're going to say we have a text which is equal to


18689
22:20:05,760 --> 22:20:12,480
which contains the title string for the content we're going to say also


18690
22:20:12,480 --> 22:20:16,720
a text which includes the content


18691
22:20:16,720 --> 22:20:21,600
all right and then we're gonna go into our actions


18692
22:20:21,600 --> 22:20:26,000
and this is this is the exciting part for me because for the actions what we


18693
22:20:26,000 --> 22:20:31,280
need to do you see our actions are defined in here every key inside this


18694
22:20:31,280 --> 22:20:34,232
options is the title


18695
22:20:34,232 --> 22:20:38,000
which is defined by string of the actions


18696
22:20:38,000 --> 22:20:41,920
of our dialogue so we need to start mapping them so we're going to say


18697
22:20:41,920 --> 22:20:45,360
options keys


18698
22:20:45,600 --> 22:20:49,512
keys and then we map them all right and this let's just call this


18699
22:20:49,512 --> 22:20:52,800
a option title


18700
22:20:54,000 --> 22:20:57,192
and we're not going to use a shorthand signature in here and we're just going


18701
22:20:57,192 --> 22:21:02,160
to do it like this all right so now in here in the option title we're


18702
22:21:02,160 --> 22:21:06,160
actually actually gonna return a text button so


18703
22:21:06,160 --> 22:21:10,960
let's let's get the value first of this key so i'm just gonna say


18704
22:21:10,960 --> 22:21:15,920
um final t value is equal to options


18705
22:21:15,920 --> 22:21:20,640
at the option title like that


18706
22:21:20,640 --> 22:21:23,280
right and now it's saying that yeah you're not using it that's fine we're


18707
22:21:23,280 --> 22:21:26,400
gonna we're gonna fix that soon


18708
22:21:27,760 --> 22:21:31,280
and this huge error that we're seeing here is because you see actions it


18709
22:21:31,280 --> 22:21:35,440
requires an iterable i believe no it's actually a list of widget but


18710
22:21:35,440 --> 22:21:39,920
when you do a map on your keys it's going to return an iterable so to fix


18711
22:21:39,920 --> 22:21:45,040
that we're just going to go at the end here and say this is to list all right


18712
22:21:45,040 --> 22:21:49,192
all right so let's now fix the rest of the problems i understand i mean this is


18713
22:21:49,192 --> 22:21:52,160
quite a lot of errors and you may be a little bit overwhelmed by this but


18714
22:21:52,160 --> 22:21:56,000
that's okay we're gonna fix them one at a time so a semi column at the end so to


18715
22:21:56,000 --> 22:22:02,160
get rid of that huge er at the end and then what we're going to do in here


18716
22:22:02,160 --> 22:22:05,512
where we get the value we're going to create a text button so let's just say


18717
22:22:05,512 --> 22:22:08,832
return a text button every


18718
22:22:08,832 --> 22:22:12,720
option and what the text button needs as we've


18719
22:22:12,720 --> 22:22:20,480
seen before is two parameters unpressed and it also needs the i believe it's


18720
22:22:20,480 --> 22:22:23,680
tiled and we're going to say the child is


18721
22:22:23,680 --> 22:22:27,832
equal to text of our


18722
22:22:28,000 --> 22:22:31,360
option title right


18723
22:22:31,360 --> 22:22:34,720
so i mean you may be a little bit confused by all


18724
22:22:34,720 --> 22:22:39,192
of this that's okay what we're doing is very simple we have like a list of


18725
22:22:39,192 --> 22:22:43,360
titles to display for every button so every button has one title and that


18726
22:22:43,360 --> 22:22:47,832
title is inside this map of string and the reason it's inside a map of string


18727
22:22:47,832 --> 22:22:51,040
and an optional t is simply because we don't want to have


18728
22:22:51,040 --> 22:22:54,400
we don't want to manage two separate lists a list of titles and a list of


18729
22:22:54,400 --> 22:22:57,760
values and then we're going to match the titles with the values and map is


18730
22:22:57,760 --> 22:23:01,832
already doing that for us furthermore what a map of string with a t does is


18731
22:23:01,832 --> 22:23:06,552
ensures that every string or every key in this case of type string is unique so


18732
22:23:06,552 --> 22:23:10,640
you can't have two buttons with the same title and different values so


18733
22:23:10,640 --> 22:23:14,720
the map is perfect for this case all right and what we're doing in here for


18734
22:23:14,720 --> 22:23:18,320
the actions of our alert dialog we're saying that okay


18735
22:23:18,320 --> 22:23:24,160
every key inside our map is an option title is a title of a button all right


18736
22:23:24,160 --> 22:23:28,640
so we're mapping that what are we mapping it to every one of those titles


18737
22:23:28,640 --> 22:23:31,680
of type string is going to be mapped to a text button


18738
22:23:31,680 --> 22:23:37,760
whose child is a text of the actual title which is inside this key all right


18739
22:23:37,760 --> 22:23:41,760
i understand it could be confusing but please just pause the video have a look


18740
22:23:41,760 --> 22:23:44,800
at the code and i'm sure you'll understand it better after we actually


18741
22:23:44,800 --> 22:23:47,760
thought about it yourself the values then are going to be


18742
22:23:47,760 --> 22:23:52,232
extracted of this type and what we're going to do is we're


18743
22:23:52,232 --> 22:23:56,232
going to say let's see final value


18744
22:23:56,232 --> 22:24:00,160
and in here if you look at value it's going to be dynamic and what we need to


18745
22:24:00,160 --> 22:24:05,192
do is just to make sure that say if value is not null


18746
22:24:05,192 --> 22:24:08,160
and we're going to say navigator of


18747
22:24:08,160 --> 22:24:11,512
our context it was written already then i'm going to


18748
22:24:11,512 --> 22:24:17,280
say pop it with that value otherwise we're just going to pop


18749
22:24:17,280 --> 22:24:22,080
off just pop all right so this that is now


18750
22:24:22,080 --> 22:24:27,832
you see why we're defining the value as in as an optional because you see some


18751
22:24:27,832 --> 22:24:31,440
values some buttons on our dialogs may not


18752
22:24:31,440 --> 22:24:36,160
actually have any values just like we have in our


18753
22:24:36,160 --> 22:24:40,000
login view if we go back in here this login view is going to have an error


18754
22:24:40,000 --> 22:24:44,552
dialog and this error dialog is going to use our generic dialog but this air


18755
22:24:44,552 --> 22:24:48,000
dialog is just going to have an ok button it has no value the okay is just


18756
22:24:48,000 --> 22:24:53,040
an ok just dismiss the dialog and that's exactly what this is going to do so as


18757
22:24:53,040 --> 22:24:57,192
you'll soon see the way we'll implement our new show error dialog is going to


18758
22:24:57,192 --> 22:25:01,832
use our generic dialog however it's going to place a little um option in


18759
22:25:01,832 --> 22:25:07,360
there that says ok and that ok has a null value all right


18760
22:25:07,360 --> 22:25:11,440
perfect a lot of talking a lot of logic but that's fine we sometimes need to do


18761
22:25:11,440 --> 22:25:13,832
this okay


18762
22:25:14,000 --> 22:25:18,480
wow um we've now written our generic dialogue


18763
22:25:18,480 --> 22:25:22,800
what we need to do is we need to start using it and that is inside our error


18764
22:25:22,800 --> 22:25:25,280
dialogue that we're going to implement now so


18765
22:25:25,280 --> 22:25:30,000
let's go ahead and create an error dialog


18766
22:25:30,000 --> 22:25:33,280
so i'm going to bring up my notes and


18767
22:25:33,280 --> 22:25:37,040
let's as the caption indicates inside dialogs


18768
22:25:37,040 --> 22:25:40,000
let's see where it is inside dialogues we're going to create a new file called


18769
22:25:40,000 --> 22:25:43,280
error dialog here


18770
22:25:44,960 --> 22:25:49,040
now inside error dialog what we need to do is we need to use our generic dialog


18771
22:25:49,040 --> 22:25:52,232
so we need to have an import in here which


18772
22:25:52,232 --> 22:25:55,680
we're going to get visual studio code to help us with so


18773
22:25:55,680 --> 22:26:01,192
remember error dialog is going to just show an ok button it has no value so


18774
22:26:01,192 --> 22:26:05,680
it the short error dialog is going to have the signature exactly as it had


18775
22:26:05,680 --> 22:26:10,320
before which is a future void so let's go ahead and do that


18776
22:26:10,320 --> 22:26:13,920
and we're going to call it show error dialogue


18777
22:26:13,920 --> 22:26:18,232
and the only thing i mean the two things that the shower dialog needs is a build


18778
22:26:18,232 --> 22:26:22,400
context and a text so we're saying build context


18779
22:26:22,400 --> 22:26:26,080
and we're also going to say a string of text


18780
22:26:26,080 --> 22:26:31,192
okay and let's import material to get rid of that error


18781
22:26:31,192 --> 22:26:36,552
so that's that and then in here we're actually going to return an instance of


18782
22:26:36,552 --> 22:26:40,160
our show err show generic dialogue


18783
22:26:40,160 --> 22:26:46,320
and i believe it now should be imported is it not imported automatically in here


18784
22:26:46,320 --> 22:26:51,280
it's not yet but somehow it's finding it and i can see we have a show generic


18785
22:26:51,280 --> 22:26:55,680
dialogue actually inside in here so this is not the one that


18786
22:26:55,680 --> 22:27:00,160
we're actually gonna use so we're gonna use the one with uh


18787
22:27:00,160 --> 22:27:04,720
like this and then we're gonna say our air


18788
22:27:04,720 --> 22:27:08,320
dialogue avoid so let's import our own uh


18789
22:27:08,320 --> 22:27:13,680
show gener um show generic dialogue


18790
22:27:14,160 --> 22:27:18,960
so was it a show general dialogue i'm actually curious general dialogue that's


18791
22:27:18,960 --> 22:27:22,400
interesting so there's a function called show general dialogue


18792
22:27:22,400 --> 22:27:25,920
but that's not what we've created we've called show generic dialects so be


18793
22:27:25,920 --> 22:27:29,832
careful a little bit with that because i actually tripped on that right now so


18794
22:27:29,832 --> 22:27:32,640
let's go back to our error dialog and say show


18795
22:27:32,640 --> 22:27:35,512
generic dialog and it's going to also import


18796
22:27:35,512 --> 22:27:39,360
that form you know so that's that's the correct one okay


18797
22:27:39,360 --> 22:27:44,552
so put a comma at the end to get formatting also working fine


18798
22:27:44,552 --> 22:27:49,760
and now add a comma in here to get the formatting finding there as well


18799
22:27:49,760 --> 22:27:52,320
now the title we're going to hard code that


18800
22:27:52,320 --> 22:27:55,192
we're going to say an error occurred


18801
22:27:55,192 --> 22:27:58,320
like this and the content is just going to be the


18802
22:27:58,320 --> 22:28:02,960
text and our options builder now is going to be i remember an options


18803
22:28:02,960 --> 22:28:08,480
builder if you go back in here to our generic dialog is a function all


18804
22:28:08,480 --> 22:28:13,192
right that returns that so let's go and define an inline function in here and we


18805
22:28:13,192 --> 22:28:17,192
say that oops to remove this and we say it's a


18806
22:28:17,192 --> 22:28:22,080
function that returns a map and the key in here is just going to be


18807
22:28:22,080 --> 22:28:26,552
okay with the value of null all right see how see how generic that


18808
22:28:26,552 --> 22:28:29,760
is now so we're actually defining saying that this is a show air dial again it


18809
22:28:29,760 --> 22:28:33,040
just doesn't return anything it's just a void all right


18810
22:28:33,040 --> 22:28:36,480
and to make it cleaner you could actually specify here that this is a


18811
22:28:36,480 --> 22:28:40,400
void all right that's that part so now we've


18812
22:28:40,400 --> 22:28:45,512
worked on our error dialogue um and now what we need to do in order to make our


18813
22:28:45,512 --> 22:28:48,872
code a little bit less scary with so many errors at the moment that we have


18814
22:28:48,872 --> 22:28:52,000
let's go and clean up some of these errors and let's go ahead and use this


18815
22:28:52,000 --> 22:28:56,720
show error dialogue everywhere okay so let's go to our views and have a look at


18816
22:28:56,720 --> 22:29:01,680
the login view you can see now we have show air dialog


18817
22:29:01,680 --> 22:29:07,192
and and now we have our own implementation of uh show air dialog so


18818
22:29:07,192 --> 22:29:11,512
let's get help from visual studio code to import our error dialog


18819
22:29:11,512 --> 22:29:16,400
and all of a sudden you see all the errors in the login view and disappeared


18820
22:29:16,400 --> 22:29:21,360
you can see we're in loginview. so let's save our login view


18821
22:29:21,360 --> 22:29:25,600
and we have an error in here from our previous import which was show air


18822
22:29:25,600 --> 22:29:30,800
dialog dart so let's remove that as well so


18823
22:29:30,800 --> 22:29:35,512
your login view should now look quite clean i'm going to close that and let's


18824
22:29:35,512 --> 22:29:39,680
then i'm going to save all of these things that we have in here because we


18825
22:29:39,680 --> 22:29:44,960
have so many windows so many tabs open that it's kind of scary so let's then go


18826
22:29:44,960 --> 22:29:49,680
inside the register view and clean up this import so let's remove


18827
22:29:49,680 --> 22:29:52,872
the old import from utilities show error dialog


18828
22:29:52,872 --> 22:29:56,232
and let's go and to these errors that we're getting here


18829
22:29:56,232 --> 22:30:00,400
for show air dialing and get visual studio code or your favorite editor or


18830
22:30:00,400 --> 22:30:05,360
id to auto import our new function called short error dialogue which


18831
22:30:05,360 --> 22:30:10,160
resides inside this utilities dialogues error dialog


18832
22:30:10,160 --> 22:30:12,400
okay


18833
22:30:12,480 --> 22:30:16,320
now you remember now that we also broke


18834
22:30:16,320 --> 22:30:18,800
our notes view


18835
22:30:18,800 --> 22:30:23,360
here which at the moment uh let's see


18836
22:30:23,360 --> 22:30:27,440
yeah we've broken notes view simply because we're not returning anything in


18837
22:30:27,440 --> 22:30:31,360
here because we migrated or moved all the code to the


18838
22:30:31,360 --> 22:30:37,280
notes list view so what we need to do now is to go and


18839
22:30:37,280 --> 22:30:41,192
basically work on our


18840
22:30:41,192 --> 22:30:44,720
show delete dialogue okay so that's not the one that we we need we need to work


18841
22:30:44,720 --> 22:30:48,320
on the notes views log out functionality which is here show


18842
22:30:48,320 --> 22:30:53,512
log out dialogue you see so we need to create a new logout dialog


18843
22:30:53,512 --> 22:30:57,680
as well and this this log out dialog is going to be very similar to how we


18844
22:30:57,680 --> 22:31:02,400
created our um error dialog so it's gonna be very similar


18845
22:31:02,400 --> 22:31:06,232
okay so let's i'm actually gonna i don't know


18846
22:31:06,232 --> 22:31:10,000
if it's worth copying this code i usually don't like copying even if it's


18847
22:31:10,000 --> 22:31:13,360
my own code sometimes i do but in this case i think it's actually better that


18848
22:31:13,360 --> 22:31:17,512
we write it by hand okay so let's go ahead as the caption


18849
22:31:17,512 --> 22:31:21,760
indicates inside dialogues folder create a new file called log out dialog


18850
22:31:21,760 --> 22:31:28,480
so in here i'm going to say new file log out dialogue drop down


18851
22:31:28,480 --> 22:31:33,760
and in the log out dialog so i'm going to go to my notes as well and log out


18852
22:31:33,760 --> 22:31:38,960
that one all right so let's go and say and then we need a function called show


18853
22:31:38,960 --> 22:31:43,512
logout dialog all right as we have it here okay so i'm going to just copy that


18854
22:31:43,512 --> 22:31:47,920
name so we're going to say it's a future of boolean


18855
22:31:47,920 --> 22:31:52,480
and call show logout dialog and the only thing it needs is a build


18856
22:31:52,480 --> 22:31:54,960
context okay


18857
22:31:54,960 --> 22:31:57,920
we're going to get an error for build content simply because we don't have it


18858
22:31:57,920 --> 22:32:02,800
inside our file in here and you see now the only error that


18859
22:32:02,800 --> 22:32:05,832
we're getting is saying that the body might complete normally


18860
22:32:05,832 --> 22:32:08,960
which means yeah it's not returning any value at the moment and we're going to


18861
22:32:08,960 --> 22:32:12,960
fix us so what we need in here we're actually


18862
22:32:12,960 --> 22:32:18,232
going to return our show generic dialog and auto import it


18863
22:32:18,232 --> 22:32:22,160
a comma at the end and a semicolon just to get the formatting right


18864
22:32:22,160 --> 22:32:25,832
the context is there and we're in this case we're actually going to say that


18865
22:32:25,832 --> 22:32:29,512
show generic dialogue is going to return a boolean value all right


18866
22:32:29,512 --> 22:32:34,000
so the context is there the title we need to specify kind of we're just going


18867
22:32:34,000 --> 22:32:38,640
to say log out and for the content we're going to say are you sure you want to


18868
22:32:38,640 --> 22:32:42,320
log out the optional remember it's a function


18869
22:32:42,320 --> 22:32:46,400
we're going to make an anonymous function in here and returns a map


18870
22:32:46,400 --> 22:32:50,232
and for the option of cancel we're going to say false and for the option of


18871
22:32:50,232 --> 22:32:54,400
logout we're going to say true all right we're getting a huge error in here


18872
22:32:54,400 --> 22:32:59,192
saying that there is a future of boolean you're returning a boolean optional


18873
22:32:59,192 --> 22:33:04,000
for a function that is supposed to return a future of bull again remember


18874
22:33:04,000 --> 22:33:07,832
on some platforms you're able to dismiss your dialogues without actually


18875
22:33:07,832 --> 22:33:12,640
responding to any of the options presented in the dialogue in those


18876
22:33:12,640 --> 22:33:16,800
platforms you actually need to guard yourself against that case by returning


18877
22:33:16,800 --> 22:33:20,800
a default value so let's go in here and say then


18878
22:33:20,800 --> 22:33:24,552
so if we get this value which as you can see is an optional bool then we say


18879
22:33:24,552 --> 22:33:29,512
either return that or just return false and that's it we can put a comma at the


18880
22:33:29,512 --> 22:33:33,600
end as well just to get the formatting right okay


18881
22:33:34,400 --> 22:33:38,720
perfect um now what we need to do is now that we've written our show logout


18882
22:33:38,720 --> 22:33:42,480
dialog we have to put it to use so let's go into our notes view


18883
22:33:42,480 --> 22:33:45,360
and get help from your favorite editor to


18884
22:33:45,360 --> 22:33:51,832
import your new logout dialog in here so that error goes away


18885
22:33:52,400 --> 22:33:56,080
okay so we've actually worked on that so what i


18886
22:33:56,080 --> 22:33:58,400
want to do is uh


18887
22:33:58,400 --> 22:34:01,192
edit my caption a little bit and i'm sorry about and i'm sorry about this


18888
22:34:01,192 --> 22:34:05,440
because this caption wasn't completely right so


18889
22:34:05,440 --> 22:34:08,480
i need to fix that


18890
22:34:13,440 --> 22:34:17,920
that's fine now let's now now that we've worked on the notes list view let's go


18891
22:34:17,920 --> 22:34:23,280
and bring notes list view inside notes view all right so you can see here we


18892
22:34:23,280 --> 22:34:27,832
have our notes view and but we also have our notes list view


18893
22:34:27,832 --> 22:34:32,480
which we have to import in here i'm going to go to my notes and just to


18894
22:34:32,480 --> 22:34:37,600
make sure i have everything in place all right so in this case that we have


18895
22:34:37,600 --> 22:34:42,160
all notes let's go ahead and say we return an instance of our notes list


18896
22:34:42,160 --> 22:34:44,872
view and this is gonna auto import it for me


18897
22:34:44,872 --> 22:34:51,040
so like that and for the notes i'm going to say here are all the notes and


18898
22:34:51,040 --> 22:34:54,480
upon the user wanting to delete a note i'm


18899
22:34:54,480 --> 22:34:59,120
just going to get visual studio code to complete that for me you can see here


18900
22:34:59,120 --> 22:35:04,400
and we get the note that the user wants to delete all right


18901
22:35:04,400 --> 22:35:08,720
then in here we're going to make this function asynchronous and just a wait on


18902
22:35:08,720 --> 22:35:12,872
our node service delete this


18903
22:35:12,872 --> 22:35:15,832
node with this id


18904
22:35:16,800 --> 22:35:20,552
all right i'm going to save now if you look at your


18905
22:35:20,552 --> 22:35:25,832
code in here you can see we have one error here in our notes list view and


18906
22:35:25,832 --> 22:35:31,920
let's go ahead and fix that and we can say it says show delete dialog


18907
22:35:31,920 --> 22:35:37,120
and we haven't yet actually written the delete dialogue so


18908
22:35:37,120 --> 22:35:41,512
what we need to do is need to go and fix that actually so it creates a delete


18909
22:35:41,512 --> 22:35:44,400
dialogue as well


18910
22:35:44,480 --> 22:35:51,040
so let's go inside our dialogues that we have here


18911
22:35:51,040 --> 22:35:56,160
in here utilities dialogs so let's go and right click on it and


18912
22:35:56,160 --> 22:36:00,000
create a new file called delete dialog


18913
22:36:00,872 --> 22:36:05,512
and delete dialog is going to be very very similar to the log out dialog so


18914
22:36:05,512 --> 22:36:09,512
let's just go ahead kind of maybe we could use the log out dialog so copy the


18915
22:36:09,512 --> 22:36:13,680
code from log out dialog and bring it into your new file called


18916
22:36:13,680 --> 22:36:17,040
delete dialog and just paste it in there and we're going to call this function


18917
22:36:17,040 --> 22:36:20,720
show delete dialog


18918
22:36:20,720 --> 22:36:23,280
okay and it's going to create a generic


18919
22:36:23,280 --> 22:36:27,360
dialogue in here and in here we're going to say delete


18920
22:36:27,360 --> 22:36:30,960
and we're just going to say are you sure you want to delete


18921
22:36:30,960 --> 22:36:34,552
this item the option builder is going to be cancel


18922
22:36:34,552 --> 22:36:37,280
false and then we're going to have an option that just


18923
22:36:37,280 --> 22:36:41,760
says yes true all right so now you see how easy it is now that


18924
22:36:41,760 --> 22:36:46,232
we have a generic dialog just we're reusing it everywhere okay


18925
22:36:46,232 --> 22:36:50,872
so then let's go back to our notes list view and fix this function fix the


18926
22:36:50,872 --> 22:36:53,760
calling of this function and get help from visual studio code to import our


18927
22:36:53,760 --> 22:36:56,800
delete dialogue and that error also goes away


18928
22:36:56,800 --> 22:37:02,400
so now i save my project and all of a sudden you see we have delete icons


18929
22:37:02,400 --> 22:37:06,480
appear to our every tile and


18930
22:37:06,480 --> 22:37:10,160
we should now be ready to actually put this into test so i'm going to tap on


18931
22:37:10,160 --> 22:37:14,400
the hello world item here and now you see it says are you sure you want to


18932
22:37:14,400 --> 22:37:18,800
delete delete this item pressing cancel doesn't do anything but if i press on it


18933
22:37:18,800 --> 22:37:24,232
and say yes then the hello world note is deleted and our notes view is getting


18934
22:37:24,232 --> 22:37:29,512
notified of that information from its stream builder because remember


18935
22:37:29,512 --> 22:37:32,720
notes service as we have it here let's go to our


18936
22:37:32,720 --> 22:37:35,760
services here uh crud


18937
22:37:35,760 --> 22:37:39,512
and node service upon deleting a node let's have a look


18938
22:37:39,512 --> 22:37:44,080
at the leaks node function here you see what it does is that if it could delete


18939
22:37:44,080 --> 22:37:49,192
a node it actually removes it from its array of nodes and it notifies the


18940
22:37:49,192 --> 22:37:53,920
stream controller actually no that's the delete node


18941
22:37:53,920 --> 22:37:58,640
oh yeah basically it removes the node and then puts the entire array of nodes


18942
22:37:58,640 --> 22:38:03,760
in the node stream controller okay so that's how the notes view is getting


18943
22:38:03,760 --> 22:38:07,600
notified of a deletion of an item we can delete another one if you want and


18944
22:38:07,600 --> 22:38:12,720
that's it so well done great job for sticking with


18945
22:38:12,720 --> 22:38:16,160
me throughout this chapter this was probably one of like the most


18946
22:38:16,160 --> 22:38:20,800
challenging chapters in that we had a lot of errors from the beginning


18947
22:38:20,800 --> 22:38:25,832
and we had to fix them but one of my goals for for this course is


18948
22:38:25,832 --> 22:38:29,280
not for you just to learn how to write flutter application but actually get in


18949
22:38:29,280 --> 22:38:34,160
the mindset of a software developer so and every software developer they have


18950
22:38:34,160 --> 22:38:37,760
their own preferences i included and one of my preferences when i'm doing


18951
22:38:37,760 --> 22:38:40,480
refactoring is like to cut things from the source as i mentioned in the


18952
22:38:40,480 --> 22:38:44,000
beginning of this chapter so that's why we got so many errors in the beginning


18953
22:38:44,000 --> 22:38:47,360
but you stuck with me and we fixed all those errors and now we came out of this


18954
22:38:47,360 --> 22:38:53,440
chapter actually quite victorious so now we have the delete functionality


18955
22:38:53,440 --> 22:38:58,000
what we need to do now is just to go and we because we've done a lot of work what


18956
22:38:58,000 --> 22:39:02,320
we need to make sure now is to commit and tag our work so that we don't


18957
22:39:02,320 --> 22:39:06,160
lose this work so um i'm gonna do some um


18958
22:39:06,160 --> 22:39:11,440
reorganization on the windows here so you see things a little bit better


18959
22:39:11,440 --> 22:39:16,552
i'm going to increase the size okay and let's see now


18960
22:39:16,552 --> 22:39:20,552
if we look at the previous tags we've come to tag 15 from the previous chapter


18961
22:39:20,552 --> 22:39:25,600
and now we need to do a tag 16 okay so let's go and look at the status


18962
22:39:25,600 --> 22:39:29,512
we have quite a lot of things that we've modified we've deleted the show error


18963
22:39:29,512 --> 22:39:34,080
dialogue from before we've also excuse me we've also added a whole new


18964
22:39:34,080 --> 22:39:38,320
folder here on under lib utilities dialogues


18965
22:39:38,320 --> 22:39:42,640
so let's do get at all and let's look at the status


18966
22:39:42,640 --> 22:39:45,760
a lot of things changed okay and what we're going to do is we're


18967
22:39:45,760 --> 22:39:48,720
going to commit these and let's just say step


18968
22:39:48,720 --> 22:39:53,760
16 okay and push your changes into your


18969
22:39:53,760 --> 22:40:00,160
host git repo we're also going to tag as step 16 so


18970
22:40:00,160 --> 22:40:05,280
and we're gonna push our tags if you look at your tags right now you


18971
22:40:05,280 --> 22:40:09,680
have one two three four five six seven blah blah blah so we have all our tags


18972
22:40:09,680 --> 22:40:14,800
up and including step 16. all right so that was for committing and also


18973
22:40:14,800 --> 22:40:17,760
tagging our work as it's tradition we're going to talk


18974
22:40:17,760 --> 22:40:22,160
about what we what we need to discuss in the next chapter


18975
22:40:22,160 --> 22:40:25,680
you can see we have the ability to create new notes and we also have the


18976
22:40:25,680 --> 22:40:28,872
ability to delete notes and also something that we didn't test is this


18977
22:40:28,872 --> 22:40:33,440
thing that when we create a new note and if we back out of it you see that that


18978
22:40:33,440 --> 22:40:37,280
note actually is deleted from the database so that's also working so we


18979
22:40:37,280 --> 22:40:40,160
have the ability to delete notes and the ability to create notes but we don't


18980
22:40:40,160 --> 22:40:43,920
have the ability to update notes and that's exactly what we're going to talk


18981
22:40:43,920 --> 22:40:47,512
about in the next chapter so i'll see you there


18982
22:40:47,512 --> 22:40:51,832
hello everyone and welcome to chapter 34 of the slaughter course in the previous


18983
22:40:51,832 --> 22:40:55,600
chapters we've been talking quite a bit about how we can create


18984
22:40:55,600 --> 22:40:59,192
and notes and how we can delete them so we've been working quite a bit with some


18985
22:40:59,192 --> 22:41:03,120
generic dialogues that we've also developed in order to be able to handle


18986
22:41:03,120 --> 22:41:06,960
error dialogues and also the log out dialogue for instance and also the


18987
22:41:06,960 --> 22:41:10,400
delete dialogue so there's been quite a lot of work done on


18988
22:41:10,400 --> 22:41:15,512
that side but we haven't really talked at all about how the user can tap on or


18989
22:41:15,512 --> 22:41:18,960
click on their existing notes in order to be able to


18990
22:41:18,960 --> 22:41:23,192
update that for instance and update that's a particular node so that's what


18991
22:41:23,192 --> 22:41:27,440
we're gonna take care of in um this chapter


18992
22:41:27,440 --> 22:41:30,480
so if we now start looking at the code that


18993
22:41:30,480 --> 22:41:34,160
we've written you you will see that we've called


18994
22:41:34,160 --> 22:41:39,192
the view that actually creates a note um the new node view


18995
22:41:39,192 --> 22:41:42,000
however we're not going to go and create a whole


18996
22:41:42,000 --> 22:41:47,512
new view that looks exactly the same as this new note view just so that we can


18997
22:41:47,512 --> 22:41:51,920
update existing notes so the goal of this chapter is to reuse this view so


18998
22:41:51,920 --> 22:41:55,832
that we can just use the exact same view but


18999
22:41:55,832 --> 22:41:59,440
when we when the user taps on a note in the note list we're going to pass the


19000
22:41:59,440 --> 22:42:03,512
tapped note to this existing view all right so that's what


19001
22:42:03,512 --> 22:42:07,360
we're gonna take care of in this chapter let me do a little bit of a shuffling


19002
22:42:07,360 --> 22:42:10,720
around here so you'll see the screen better i'm gonna


19003
22:42:10,720 --> 22:42:14,000
bring up visual studio code as usual here


19004
22:42:14,000 --> 22:42:20,000
i have scrcpy who is taking care of this android screen


19005
22:42:20,000 --> 22:42:23,760
and we can then have a look at the first task that we have to do as you can see


19006
22:42:23,760 --> 22:42:29,040
in the cache it says we have to rename the new node to your dart to create


19007
22:42:29,040 --> 22:42:33,760
update node view alright so let's take care of that i'm going to close all the


19008
22:42:33,760 --> 22:42:37,120
tabs in here and let's go and say command p visual


19009
22:42:37,120 --> 22:42:42,080
studio code or maybe an android studio is another command that you have to


19010
22:42:42,080 --> 22:42:45,920
execute in order in order to bring up the list of files i don't really know


19011
22:42:45,920 --> 22:42:49,512
the command in android studio but if you're not comfortable with any of those


19012
22:42:49,512 --> 22:42:54,552
you can just go to this new note view right here and we are going to rename it


19013
22:42:54,552 --> 22:42:57,600
so let's just do that now so i'm just going


19014
22:42:57,600 --> 22:43:02,000
to call as a cache in the case create updates note view okay


19015
22:43:02,000 --> 22:43:09,192
create updates notes view like that if the updating i mean if if your editor


19016
22:43:09,192 --> 22:43:14,320
is intelligent enough and it has some like um refactoring features built in


19017
22:43:14,320 --> 22:43:16,960
then you don't have to do anything special


19018
22:43:16,960 --> 22:43:21,040
for for this command to work but um you can


19019
22:43:21,040 --> 22:43:25,280
see in here for instance now we've changed this file name to create updates


19020
22:43:25,280 --> 22:43:30,232
nodes view but we haven't really changed for instance the class name so if i go


19021
22:43:30,232 --> 22:43:34,640
here this thing is still called new node view all right


19022
22:43:34,640 --> 22:43:39,920
so let's go in there and perhaps change that as well let me go to my notes


19023
22:43:39,920 --> 22:43:45,512
uh let's see create update note view and we're going to go actually and


19024
22:43:45,512 --> 22:43:50,000
rename this new note view as well so let's go ahead and do some refactoring


19025
22:43:50,000 --> 22:43:54,080
in here so i'm just going to say refactor and let's see do we have any


19026
22:43:54,080 --> 22:44:00,552
refactoring features here um we have rename symbol so maybe let's use


19027
22:44:00,552 --> 22:44:06,360
that and i'm going to call it create update node view


19028
22:44:06,800 --> 22:44:09,832
right let's see if it's successfully going to


19029
22:44:09,832 --> 22:44:13,600
be able to rename this for me so i can see it renamed the class for me and it


19030
22:44:13,600 --> 22:44:18,480
also renamed the state class which is exactly what i needed so if i now save


19031
22:44:18,480 --> 22:44:22,552
this we should have some problems excuse me


19032
22:44:22,552 --> 22:44:26,080
but i can see visual studio code was intelligent enough actually to rename


19033
22:44:26,080 --> 22:44:30,000
the main dart reference to this route as well


19034
22:44:30,000 --> 22:44:33,600
remember when we created this create


19035
22:44:33,600 --> 22:44:36,552
or what we call it actually before it was called


19036
22:44:36,552 --> 22:44:38,800
um new note view


19037
22:44:38,800 --> 22:44:43,680
that note view was a new note view was actually being used inside our routes in


19038
22:44:43,680 --> 22:44:48,080
the main function of our of our application inside main.dart now that


19039
22:44:48,080 --> 22:44:52,800
we've renamed that to create update note view both the class name the stateful


19040
22:44:52,800 --> 22:44:57,512
widget and its state then that new name should be used in


19041
22:44:57,512 --> 22:45:01,360
main.dart so if you're using vim or any other


19042
22:45:01,360 --> 22:45:04,872
code editor like if you're using sublime supply may not have this refactoring


19043
22:45:04,872 --> 22:45:10,160
feature that can actually go and rename where you've used that symbol so you may


19044
22:45:10,160 --> 22:45:13,120
need to do that by hand so you may actually get some errors in your


19045
22:45:13,120 --> 22:45:16,960
main.dart file but if you get those errors don't worry


19046
22:45:16,960 --> 22:45:19,832
about it at least you know what the problem is okay so you can go and fix it


19047
22:45:19,832 --> 22:45:22,232
yourself


19048
22:45:23,040 --> 22:45:27,192
all right so we've done that and now what we need to do is i'm actually going


19049
22:45:27,192 --> 22:45:30,160
to press command s here and command s in here just to make sure everything's


19050
22:45:30,160 --> 22:45:35,360
saved and as the caption indicates remember we also have our routes inside


19051
22:45:35,360 --> 22:45:39,600
constants so you can see our route is still called


19052
22:45:39,600 --> 22:45:44,080
new node route okay so i'm gonna rename this now and i


19053
22:45:44,080 --> 22:45:48,160
suggest that you do the same thing too let's just say rename and let's rename


19054
22:45:48,160 --> 22:45:54,080
that to as the caching indicates create or update node route okay so create or


19055
22:45:54,080 --> 22:45:59,600
update snow throughout just like that and as you can see again visual studio


19056
22:45:59,600 --> 22:46:03,760
code helped us quite a lot now it went and updated this as well


19057
22:46:03,760 --> 22:46:05,832
you see right


19058
22:46:05,832 --> 22:46:09,512
and something also happened in the notes view as well i can see and that's


19059
22:46:09,512 --> 22:46:12,800
because you see the where we actually


19060
22:46:12,800 --> 22:46:19,040
press the plus button in here to create a new node that was also using the uh


19061
22:46:19,040 --> 22:46:21,680
previously uh named


19062
22:46:21,680 --> 22:46:26,640
new node route but now it's updated to create or update node routes so all i'm


19063
22:46:26,640 --> 22:46:31,120
trying to say in here you need to rename that route so that it becomes create or


19064
22:46:31,120 --> 22:46:35,360
update new node route and depending on your editor it may be smart enough to


19065
22:46:35,360 --> 22:46:38,160
have some refactoring features if it's like visual studio code then you're good


19066
22:46:38,160 --> 22:46:42,232
to go just rename it but if it's not you may have to do that by hand so just go


19067
22:46:42,232 --> 22:46:46,720
ahead and rename where you refactor in your code where you're using


19068
22:46:46,720 --> 22:46:50,232
that route to use the new name okay


19069
22:46:50,640 --> 22:46:54,160
all right so let's have a look at this dilemma now


19070
22:46:54,160 --> 22:46:57,120
you see in our


19071
22:46:57,120 --> 22:47:01,360
notes view when we create a new note we just say


19072
22:47:01,360 --> 22:47:09,040
navigator of context push name all right now the goal here is when we create this


19073
22:47:09,040 --> 22:47:13,512
nodes list view we're going to allow the users you see at the moment we have on


19074
22:47:13,512 --> 22:47:17,920
delete node but we're also going to have a parameter called untap we're going to


19075
22:47:17,920 --> 22:47:22,080
develop that soon but the dilemma here is that when you


19076
22:47:22,080 --> 22:47:26,080
then say on tap we need to also go to this view into


19077
22:47:26,080 --> 22:47:31,280
this route that we have create or update node route but we have to pass an


19078
22:47:31,280 --> 22:47:35,832
argument to that route an argument just as it is for a parameter of a function


19079
22:47:35,832 --> 22:47:40,480
or an argument to a function is like data that you pass to that


19080
22:47:40,480 --> 22:47:45,192
route and you say hey i'm initializing this route but i'm passing some data to


19081
22:47:45,192 --> 22:47:51,192
it so then that route can then in turn reactively sorry that ralph can then


19082
22:47:51,192 --> 22:47:55,040
react to that and go and read that argument and say oh was i pass an


19083
22:47:55,040 --> 22:47:58,872
argument yes then i'm going to do this was i not pass an argument then i'm


19084
22:47:58,872 --> 22:48:03,680
going to do something else in this case if you pass a note to our create or


19085
22:48:03,680 --> 22:48:07,600
update note route then it's going to say oh i have an existing node i'm just


19086
22:48:07,600 --> 22:48:11,760
going to populate myself and my contents with that note and i'm not going to


19087
22:48:11,760 --> 22:48:16,080
create a new node remember at the moment our create update note


19088
22:48:16,080 --> 22:48:18,960
view we have this function set up in here


19089
22:48:18,960 --> 22:48:24,232
that says create a new node we're gonna fix that soon okay but remember that


19090
22:48:24,232 --> 22:48:28,640
at the moment when you go into that view by default it's creating a new node and


19091
22:48:28,640 --> 22:48:31,920
we're gonna change that so that we're saying we're going to rename that and


19092
22:48:31,920 --> 22:48:37,040
saying like create or get note or something like that soon you'll see um


19093
22:48:37,040 --> 22:48:39,600
but in that function then we're going to say


19094
22:48:39,600 --> 22:48:44,080
where we passed an argument where we pass an existing note if yes we don't


19095
22:48:44,080 --> 22:48:48,232
have to create a new node if no we have to create one okay


19096
22:48:48,232 --> 22:48:53,440
so the way arguments work then is if you have a look at our notes view where


19097
22:48:53,440 --> 22:48:58,552
we're using push name there is a parameter in here called arguments and


19098
22:48:58,552 --> 22:49:02,800
as you can see at the moment it is just an optional object meaning that well it


19099
22:49:02,800 --> 22:49:06,720
can be no or no we're not we're not leveraging that at


19100
22:49:06,720 --> 22:49:12,080
the moment but we are going to soon so at the call side where you're creating a


19101
22:49:12,080 --> 22:49:15,120
where you're creating a route and pushing it to the to the


19102
22:49:15,120 --> 22:49:19,832
navigation stack you can pass your argument using that arguments parameter


19103
22:49:19,832 --> 22:49:23,120
okay and at the receiving side in this case


19104
22:49:23,120 --> 22:49:27,680
are let's see create or update node view here


19105
22:49:27,680 --> 22:49:32,232
in here you can read then your argument


19106
22:49:32,232 --> 22:49:36,232
let's see let's go to some place that does make sense let's say in here


19107
22:49:36,232 --> 22:49:40,552
okay you can read that argument calling now you don't have to type as i'm typing


19108
22:49:40,552 --> 22:49:46,400
i'm just demonstrating something to you okay and we can use model uh route


19109
22:49:46,400 --> 22:49:51,760
and we say of is context and then you can say settings


19110
22:49:51,760 --> 22:49:58,552
dot arguments then that's where you basically get access to your arguments


19111
22:49:58,552 --> 22:50:03,920
through your modal route so now you know how to pass arguments and you know also


19112
22:50:03,920 --> 22:50:08,080
how to receive them all right so


19113
22:50:08,080 --> 22:50:12,320
let's go to the next point um you see


19114
22:50:12,320 --> 22:50:19,120
we may need to somewhere also in the future receive an argument inside our


19115
22:50:19,120 --> 22:50:23,440
any of our widgets and that argument can be any type that


19116
22:50:23,440 --> 22:50:27,440
you specify for instance you can pass an integer from one screen to the other or


19117
22:50:27,440 --> 22:50:31,280
you can pass a string or you can pass an array or in our case you can pass a


19118
22:50:31,280 --> 22:50:35,360
database node so as you could see in in this code let's


19119
22:50:35,360 --> 22:50:39,120
go in here um


19120
22:50:39,120 --> 22:50:44,000
what's this optional yes settings and then arguments


19121
22:50:44,000 --> 22:50:48,160
you see at the moment this guy is an object so it doesn't really know what it


19122
22:50:48,160 --> 22:50:51,120
is but it'd be really good if you could


19123
22:50:51,120 --> 22:50:55,280
create a function somehow that allows us just to say for


19124
22:50:55,280 --> 22:51:01,920
instance context get object of type t something like that so we


19125
22:51:01,920 --> 22:51:04,960
could just say given a build context


19126
22:51:04,960 --> 22:51:10,872
we want to extract an argument of any type from it if that argument exists


19127
22:51:10,872 --> 22:51:13,680
okay and then we're going to use it in our


19128
22:51:13,680 --> 22:51:18,800
code in here and to and we get our build context and then grab our notes out of


19129
22:51:18,800 --> 22:51:23,440
it so it's what we're going to do is like create a generic way of extracting


19130
22:51:23,440 --> 22:51:27,440
arguments from our build context and that's exactly what we're going to do


19131
22:51:27,440 --> 22:51:30,480
now okay so


19132
22:51:30,480 --> 22:51:34,080
to do that we're going to create an extension on build context and that


19133
22:51:34,080 --> 22:51:39,040
extension is going to be called guest argument and as i've indicated in the um


19134
22:51:39,040 --> 22:51:43,192
as i've indicated here in the caption at the bottom of the screen you


19135
22:51:43,192 --> 22:51:46,160
can see that we are going to create a new file


19136
22:51:46,160 --> 22:51:52,552
under lib utilities generics and a file call gets arguments so you can see we


19137
22:51:52,552 --> 22:51:57,120
have utilities at the moment here and that utilities follow me just fold


19138
22:51:57,120 --> 22:52:01,120
everything in here so it's not so scary to look at you can see utilities


19139
22:52:01,120 --> 22:52:04,720
at the moment has a folder called dialogues under it but


19140
22:52:04,720 --> 22:52:08,160
what we want to create is a folder called generics and then a file under


19141
22:52:08,160 --> 22:52:11,920
that called get arguments okay so


19142
22:52:11,920 --> 22:52:17,680
uh let's go ahead and do that right now so i'm gonna go to uh


19143
22:52:17,680 --> 22:52:21,760
utilities where where to go utilities dialogues okay so i'm just gonna right


19144
22:52:21,760 --> 22:52:25,920
right click on utilities and say new file and i'm gonna say generics


19145
22:52:25,920 --> 22:52:30,800
lyrics and get arguments dot


19146
22:52:30,800 --> 22:52:36,320
dart now in here what we need is um


19147
22:52:36,320 --> 22:52:41,440
to just start writing our extensions so i'm just going to say extension


19148
22:52:41,440 --> 22:52:45,920
and get argument on build context okay


19149
22:52:45,920 --> 22:52:50,080
now if i typed build context visual studio


19150
22:52:50,080 --> 22:52:54,000
code was smart enough to import material if you're using sublime or any other


19151
22:52:54,000 --> 22:52:57,192
text editor it may not be intelligent enough to do that for you may not have


19152
22:52:57,192 --> 22:53:00,720
like the extension to work with dart and flutter and


19153
22:53:00,720 --> 22:53:05,512
kind of so you may have to import material yourself but remember we also


19154
22:53:05,512 --> 22:53:10,080
only need um build context and modal route from


19155
22:53:10,080 --> 22:53:15,360
entire material uh packaging here so it would be it would make a lot more sense


19156
22:53:15,360 --> 22:53:19,360
if you just say show build context


19157
22:53:19,360 --> 22:53:23,440
and modal route


19158
22:53:23,440 --> 22:53:29,600
right so we're not going to use more from the material package


19159
22:53:29,600 --> 22:53:32,320
than those two


19160
22:53:32,640 --> 22:53:36,552
all right so let's go ahead and create this function so we're saying


19161
22:53:36,552 --> 22:53:42,320
that we are going to optionally return a value of type t that means any type that


19162
22:53:42,320 --> 22:53:46,800
you ask us to and we're going to call this function get


19163
22:53:46,800 --> 22:53:51,920
argument okay and get argument itself takes t all


19164
22:53:51,920 --> 22:53:56,640
right so in here what we're going to say is going to say modal route is model


19165
22:53:56,640 --> 22:54:01,360
route of our build context


19166
22:54:01,360 --> 22:54:05,760
or this because you see we we are creating an extension on build


19167
22:54:05,760 --> 22:54:11,192
context and this identifier in here refers to the current build context on


19168
22:54:11,192 --> 22:54:15,192
which the get argument function is actually invoked so if you're not


19169
22:54:15,192 --> 22:54:18,800
familiar with extensions i've talked about them before


19170
22:54:18,800 --> 22:54:23,600
and so it i think it was part of also the dart introduction in the beginning


19171
22:54:23,600 --> 22:54:26,872
absolute beginning of this course so you may want to go back to that in order to


19172
22:54:26,872 --> 22:54:32,160
understand how extensions actually work okay so remember model route in here if


19173
22:54:32,160 --> 22:54:36,000
you look at it it can be an optional in here you see so


19174
22:54:36,000 --> 22:54:40,800
what we need to do is to guard ourselves against that so we just say if modal


19175
22:54:40,800 --> 22:54:44,000
route is not null


19176
22:54:44,000 --> 22:54:47,600
and otherwise we're just going to return null we're saying that if we can't get


19177
22:54:47,600 --> 22:54:52,800
the model route then we can't extract any argument from it okay so let's get


19178
22:54:52,800 --> 22:54:55,192
the let's get all the arguments from our


19179
22:54:55,192 --> 22:54:59,680
model route now so we're gonna say args is model route settings


19180
22:54:59,680 --> 22:55:06,320
dot arguments okay and then remember args is also now an object as it was


19181
22:55:06,320 --> 22:55:11,760
on the call site the call site may skip over passing an argument to us and we in


19182
22:55:11,760 --> 22:55:14,960
that case we're not going to get any arguments which means args is going to


19183
22:55:14,960 --> 22:55:19,360
be null in here okay so let's just guard ourselves against


19184
22:55:19,360 --> 22:55:23,832
that so we say if args is not null and args


19185
22:55:23,832 --> 22:55:29,832
is of this given type then we're going to return rx okay uh oops


19186
22:55:29,832 --> 22:55:35,120
rx as t so what we're saying in here is that if


19187
22:55:35,120 --> 22:55:40,320
we could grab any arguments from um our modal route settings arguments and if


19188
22:55:40,320 --> 22:55:45,280
that argument is of the type that you are asking this function to extract then


19189
22:55:45,280 --> 22:55:48,640
we're going to give it back to otherwise we're just going to fall through to line


19190
22:55:48,640 --> 22:55:52,872
number 12 in here and just return and null all right


19191
22:55:52,872 --> 22:55:56,872
now i'm going to save this file okay


19192
22:55:56,872 --> 22:56:01,832
that was that part now what we need is let me bring up the


19193
22:56:01,832 --> 22:56:05,760
caption so you see what we have to do


19194
22:56:06,080 --> 22:56:11,760
so let's now go to our view which we call create actually it's


19195
22:56:11,760 --> 22:56:15,040
easy now now that we have a lot of files in our project it's actually easier to


19196
22:56:15,040 --> 22:56:18,872
navigate if we just do command p in visual studio code for instance to jump


19197
22:56:18,872 --> 22:56:23,512
to specific files so in that file it is now called


19198
22:56:23,512 --> 22:56:27,192
create update node view so let's go there


19199
22:56:27,192 --> 22:56:32,480
and as the caption indicates our creates note in here let's have a look and see


19200
22:56:32,480 --> 22:56:36,480
if we can find that function create new node here you see


19201
22:56:36,480 --> 22:56:40,960
so what we need to do is we just need to rename that um


19202
22:56:40,960 --> 22:56:44,872
create new notes to ask them captions to get create or get


19203
22:56:44,872 --> 22:56:48,640
existing notes so i'm gonna do that i'm gonna say create


19204
22:56:48,640 --> 22:56:53,832
or get existing note and again we just do the code smart


19205
22:56:53,832 --> 22:56:57,920
enough to rename where i'm actually using that function as well you can see


19206
22:56:57,920 --> 22:57:02,552
in here okay so you may otherwise if you're not using


19207
22:57:02,552 --> 22:57:05,920
visual code or if you're not using the refactoring features of your favorite


19208
22:57:05,920 --> 22:57:10,640
editor you may have to rename that a call site as well


19209
22:57:10,640 --> 22:57:14,400
so i don't think i have to mention this again i think i've now mentioned it


19210
22:57:14,400 --> 22:57:17,512
three times so just so you know if you're renaming something just make sure


19211
22:57:17,512 --> 22:57:21,920
that all the call sites are also updated okay


19212
22:57:23,440 --> 22:57:29,600
all right so now that we've done that we actually need to grab the existing nodes


19213
22:57:29,600 --> 22:57:32,960
if it is already there okay


19214
22:57:32,960 --> 22:57:37,832
so um so let's do that you can see it says in


19215
22:57:37,832 --> 22:57:42,872
create or get existing no gets note argument if any all right


19216
22:57:42,872 --> 22:57:48,720
so let's then in here say if we if our widgets like the widget that actually


19217
22:57:48,720 --> 22:57:52,720
called us created us has passed us an argument of type


19218
22:57:52,720 --> 22:57:56,080
database note then we're going to get that okay so let's just call it widget


19219
22:57:56,080 --> 22:57:58,872
note is um


19220
22:57:58,872 --> 22:58:02,552
we need now a build context because remember our extension was created on


19221
22:58:02,552 --> 22:58:06,720
build context however this function at the moment has no build context so let's


19222
22:58:06,720 --> 22:58:10,160
go ahead and pass a build context in here


19223
22:58:10,160 --> 22:58:13,760
okay so let's then go into the call site and


19224
22:58:13,760 --> 22:58:17,832
pass the build context in here call context which is passed to us in the


19225
22:58:17,832 --> 22:58:23,120
build function all right so trusting that you've done that


19226
22:58:23,120 --> 22:58:26,480
we're now going to go and say context get


19227
22:58:26,480 --> 22:58:31,832
and you see now we need our get argument function in here but as i type nothing


19228
22:58:31,832 --> 22:58:35,192
appears here and that's because we don't have an import so


19229
22:58:35,192 --> 22:58:38,640
i can see if i just type get the argument and ask visual studio code to


19230
22:58:38,640 --> 22:58:43,480
see if it can solve that problem for me it's saying that oh there is again


19231
22:58:43,480 --> 22:58:47,440
arguments.dart file which has a function do you want me to import it so i'm just


19232
22:58:47,440 --> 22:58:50,960
going to say yes please otherwise if you're not doing this you


19233
22:58:50,960 --> 22:58:55,600
may have to import your get arguments.dart file by hand all right so


19234
22:58:55,600 --> 22:58:59,192
now i'm just saying get arguments and remember get arguments function in


19235
22:58:59,192 --> 22:59:05,040
itself has no parameters so how do you call this function okay how do you tell


19236
22:59:05,040 --> 22:59:09,440
it to extract a t of like database node well that's very


19237
22:59:09,440 --> 22:59:13,680
easy you just put this less than sign and and grade it inside


19238
22:59:13,680 --> 22:59:18,000
like that and then you type the type of object that you want to extract so if we


19239
22:59:18,000 --> 22:59:21,680
just say data base notes all right


19240
22:59:21,680 --> 22:59:27,192
and now that we did that remember get arguments returns an optional object of


19241
22:59:27,192 --> 22:59:31,680
that type and in this case our database node is then an optional database node


19242
22:59:31,680 --> 22:59:35,040
all right meaning that you either have a node


19243
22:59:35,040 --> 22:59:38,960
so that the user has tapped on an existing node and came here or you don't


19244
22:59:38,960 --> 22:59:43,360
meaning that a user tapped on the plus button and came here okay


19245
22:59:43,360 --> 22:59:48,640
so then we say if the widget node is not null meaning that we are updating


19246
22:59:48,640 --> 22:59:52,232
an existing node so that the user has tapped on an existing node and ended up


19247
22:59:52,232 --> 22:59:54,640
on the screen then what we're going to do we're going


19248
22:59:54,640 --> 22:59:59,280
to save that inside our node private variable here


19249
22:59:59,280 --> 23:00:02,872
i think we set it up somewhere around here you see


19250
23:00:02,872 --> 23:00:05,760
so we're going to say our node is the widget node


19251
23:00:05,760 --> 23:00:09,120
okay and in this case what we also need to do


19252
23:00:09,120 --> 23:00:15,120
we need to make sure that the text field inside our on our screen


19253
23:00:15,120 --> 23:00:17,920
and i can show you here so if you go here


19254
23:00:17,920 --> 23:00:22,080
this text field it should be pre-populated with that existing notes


19255
23:00:22,080 --> 23:00:26,720
text and the way we can do that i mean we don't have direct access to our text


19256
23:00:26,720 --> 23:00:31,680
field but what we do have is this text controller which we set up in here text


19257
23:00:31,680 --> 23:00:36,320
controller okay so let's go and set that text controller's text so i'm just gonna


19258
23:00:36,320 --> 23:00:42,000
say text controller the text is equal to widget note


19259
23:00:42,000 --> 23:00:46,480
dot text and then we're just going to return the


19260
23:00:46,480 --> 23:00:51,680
widget note so the notes that we


19261
23:00:51,680 --> 23:00:55,192
could extract okay otherwise uh


19262
23:00:55,192 --> 23:00:59,600
what we're doing in here we're saying existing note notes so the logic


19263
23:00:59,600 --> 23:01:03,512
is going to stay the same the rest so if we could extract the node from the


19264
23:01:03,512 --> 23:01:08,232
passing widget or the color widget then we set that as our node set the text and


19265
23:01:08,232 --> 23:01:12,160
then just return the widget note otherwise we continue exactly as we did


19266
23:01:12,160 --> 23:01:16,552
before okay so let's see in here what we're also


19267
23:01:16,552 --> 23:01:21,680
doing existing note we're just returning in but i can also see that upon doing a


19268
23:01:21,680 --> 23:01:26,720
creates note in here we're not setting that note so what we need to do in here


19269
23:01:26,720 --> 23:01:31,040
let's just say final new note okay


19270
23:01:31,040 --> 23:01:35,440
and and then we store that note we say note is


19271
23:01:35,440 --> 23:01:39,760
new note and then we just say return you know so


19272
23:01:39,760 --> 23:01:45,120
in here we're also saving our notes okay so that's really good so we actually


19273
23:01:45,120 --> 23:01:48,960
working with an existing notes all right


19274
23:01:49,832 --> 23:01:53,192
okay so i'm actually not sure how this has


19275
23:01:53,192 --> 23:01:57,600
worked before this may have been a bug in the previous um sections in that we


19276
23:01:57,600 --> 23:02:01,440
didn't actually store the node in this node private variable


19277
23:02:01,440 --> 23:02:04,552
so maybe we had that bug from before i


19278
23:02:04,552 --> 23:02:09,040
can't be completely sure about that so i'm just gonna press back in here but if


19279
23:02:09,040 --> 23:02:12,800
you had that bug as well if you were like returning just on a weight of node


19280
23:02:12,800 --> 23:02:17,192
service create node and you weren't saving that i'm not sure how these


19281
23:02:17,192 --> 23:02:20,160
um these functions were actually working


19282
23:02:20,160 --> 23:02:24,160
because i personally oh i can see that we were setting it in


19283
23:02:24,160 --> 23:02:29,120
here so we may not have to do that anymore so let's then go ahead and i


19284
23:02:29,120 --> 23:02:34,720
mean this was quite smart but it wasn't that good idea that the widget's build


19285
23:02:34,720 --> 23:02:39,760
function was changing like a core part of this widget so let's


19286
23:02:39,760 --> 23:02:44,640
remove that now okay how it was working so that's the reason


19287
23:02:44,640 --> 23:02:49,040
it was working but it shouldn't work like that all right


19288
23:02:49,832 --> 23:02:53,920
okay let's move to the next section now um


19289
23:02:53,920 --> 23:02:59,120
you see if we go back to this part in here if i press the delete


19290
23:02:59,120 --> 23:03:02,320
button do you remember this we developed this


19291
23:03:02,320 --> 23:03:06,552
in one of the previous chapters of this course we made sure that we have a


19292
23:03:06,552 --> 23:03:10,552
callback and that callback was defined let's go in our


19293
23:03:10,552 --> 23:03:15,512
notes list view i'm actually going to do it like this notes list view


19294
23:03:15,512 --> 23:03:19,120
do you remember this callback it's called delete note callback


19295
23:03:19,120 --> 23:03:23,920
it was just a function that returned nothing and accepted the notes and this


19296
23:03:23,920 --> 23:03:27,360
way we could tell the notes view that hey


19297
23:03:27,360 --> 23:03:31,680
the user wants to delete a note do it delete that now


19298
23:03:31,680 --> 23:03:35,040
and that was being called upon the user pressing the yes button remember it's


19299
23:03:35,040 --> 23:03:38,320
this view that is actually showing the delete


19300
23:03:38,320 --> 23:03:42,080
dialog all right but if you look at that


19301
23:03:42,080 --> 23:03:45,360
but if you look at this delete node callback


19302
23:03:45,360 --> 23:03:49,832
what is it actually a call backup is a callback of a note all right so it has


19303
23:03:49,832 --> 23:03:53,920
nothing really to do with delete it's just called delete node callback all


19304
23:03:53,920 --> 23:03:58,320
right can we utilize this also to


19305
23:03:58,320 --> 23:04:02,320
tell somehow when the any of these notes is


19306
23:04:02,320 --> 23:04:07,512
tapped can we utilize the exact same function to tell the notes list view


19307
23:04:07,512 --> 23:04:13,120
sorry to tell the notes view that hey you the user tapped on a note well of


19308
23:04:13,120 --> 23:04:16,480
course we could do that because it has no return value and it just


19309
23:04:16,480 --> 23:04:20,552
accepts a note so we have a little problem with the naming of this right


19310
23:04:20,552 --> 23:04:23,680
now it's just called delete note call back but it shouldn't be all right so


19311
23:04:23,680 --> 23:04:27,120
we're going to utilize that both for delete and also for tapping


19312
23:04:27,120 --> 23:04:31,192
on an existing node so let me bring up the caption let's rename


19313
23:04:31,192 --> 23:04:35,360
that delete node callback to just node callback so i'm going to right click on


19314
23:04:35,360 --> 23:04:40,480
it i'm just going to say rename rename symbol and let's just call it


19315
23:04:40,480 --> 23:04:44,720
node callback okay and now you can see it's actually renamed it here for me as


19316
23:04:44,720 --> 23:04:48,552
well and everything should be working the way


19317
23:04:48,552 --> 23:04:51,920
it was before so we don't have to do anything special it's just called node


19318
23:04:51,920 --> 23:04:54,872
callback now all right


19319
23:04:56,320 --> 23:04:59,832
okay let's move on to the next section now


19320
23:04:59,832 --> 23:05:04,640
which is very related so what we need to do now is you see at the moment the


19321
23:05:04,640 --> 23:05:11,760
nodes list view it's not handling at all the user tapping on any of these list


19322
23:05:11,760 --> 23:05:15,680
tiles and we're going to fix that so i'm just going to go to my notes


19323
23:05:15,680 --> 23:05:20,760
and make sure that i have all the information here


19324
23:05:21,192 --> 23:05:26,320
so what we need now is just to make sure that the user can tap um


19325
23:05:26,320 --> 23:05:31,600
on those uh on the on tap all right so sorry that the user can tap on these


19326
23:05:31,600 --> 23:05:37,120
list tiles and then um we're then going to call a function just like the node


19327
23:05:37,120 --> 23:05:41,760
callback and tell our owner widget that hey the user tapped on one


19328
23:05:41,760 --> 23:05:45,600
of these just do whatever you want so let's go ahead and add a field here and


19329
23:05:45,600 --> 23:05:51,040
say on tap sorry note callback and we'll just call it ontap


19330
23:05:51,040 --> 23:05:54,480
the constructor is not happy now saying that yeah you have a final field that


19331
23:05:54,480 --> 23:05:58,480
you haven't initialized so let's just add that here right after undelete and


19332
23:05:58,480 --> 23:06:03,120
i'm just going to make this required parameter and a comma at the end just to


19333
23:06:03,120 --> 23:06:06,400
make sure that you get the formatting right as well


19334
23:06:06,400 --> 23:06:10,720
we're not using on tap right now and if you've noticed we've also broken the


19335
23:06:10,720 --> 23:06:14,080
notes here that's okay we'll get there we'll fix that soon the reason we've


19336
23:06:14,080 --> 23:06:17,600
broken note2 is because we're not passing on tap since it's a required


19337
23:06:17,600 --> 23:06:23,040
parameter okay we're gonna fix this luckily in order to handle tabs on a


19338
23:06:23,040 --> 23:06:26,872
list tile we don't have to work with gesture recognition or anything like


19339
23:06:26,872 --> 23:06:31,832
that but what we could do is just to say untapped you see it's already there so


19340
23:06:31,832 --> 23:06:36,080
there is a function that has no parameters


19341
23:06:36,080 --> 23:06:40,320
and what we need to do in here just to call our own ontap in here and you can


19342
23:06:40,320 --> 23:06:45,440
see we have to pass a database node and luckily we already have i believe a note


19343
23:06:45,440 --> 23:06:48,552
right here okay so we're just gonna say untap and


19344
23:06:48,552 --> 23:06:51,680
note that's it


19345
23:06:52,960 --> 23:06:59,192
okay um so we're doing that now now what we need to do is to go back to


19346
23:06:59,192 --> 23:07:03,192
our notes view and handle that case you see


19347
23:07:03,192 --> 23:07:06,960
so i'm going to go back to our note 2 and and scroll to the part where we're


19348
23:07:06,960 --> 23:07:11,600
getting an error and we have on delete um


19349
23:07:11,600 --> 23:07:16,400
but we don't have the on tap so i'm going to go to my notes as well all


19350
23:07:16,400 --> 23:07:20,400
right now in here right after on delete note


19351
23:07:20,400 --> 23:07:24,000
let's go and add this untapped functionality in here


19352
23:07:24,000 --> 23:07:27,280
and you can see visuals helping me and saying oh this function actually accepts


19353
23:07:27,280 --> 23:07:33,192
a node so if i move my mouse over it it already tells me it's a database node


19354
23:07:33,192 --> 23:07:37,120
and remember that's just what the nodes list view is giving us all right


19355
23:07:37,120 --> 23:07:41,832
and then here let's make this function an asynchronous function the reason for


19356
23:07:41,832 --> 23:07:45,360
that is because we're going to actually grab our


19357
23:07:45,360 --> 23:07:47,920
um let me actually see if we have to make


19358
23:07:47,920 --> 23:07:50,640
it asynchronous i don't think it needs to be async first let's just not make it


19359
23:07:50,640 --> 23:07:54,080
asynchronous i had it as asynchronous in my notes and i thought that we have to


19360
23:07:54,080 --> 23:07:56,400
do that but maybe there is a reason behind it i


19361
23:07:56,400 --> 23:07:59,920
don't know yet but uh let's just go ahead and not add asynchronous at the


19362
23:07:59,920 --> 23:08:03,440
moment so what we need to do in this case is


19363
23:08:03,440 --> 23:08:07,440
also do something very similar to what we're doing in here navigator of blah


19364
23:08:07,440 --> 23:08:12,720
blah push no not that one sorry this one navigator of context push name create or


19365
23:08:12,720 --> 23:08:18,080
update note route so it may actually make sense to copy that code and let's


19366
23:08:18,080 --> 23:08:21,832
go to in on tab and paste that i'm going to


19367
23:08:21,832 --> 23:08:25,192
put a comma here so it breaks it down for me


19368
23:08:25,192 --> 23:08:28,800
and in here what we're going to do is just to say arguments and we're going to


19369
23:08:28,800 --> 23:08:31,512
pass the notes there okay


19370
23:08:31,512 --> 23:08:34,552
so we're just saying that here's a note and


19371
23:08:34,552 --> 23:08:38,640
go to that screen and pass that argument to it then when we go to


19372
23:08:38,640 --> 23:08:42,552
the um create update note view


19373
23:08:42,552 --> 23:08:46,232
this function gets called create or get existing node


19374
23:08:46,232 --> 23:08:49,512
which in turn tries to grab that argument of type


19375
23:08:49,512 --> 23:08:53,512
database node from our context using our get argument


19376
23:08:53,512 --> 23:08:57,192
generic function which then goes to the modal route of that context and then


19377
23:08:57,192 --> 23:09:01,360
grabs that argument so it's like three layers of extraction but that's that's


19378
23:09:01,360 --> 23:09:04,872
quite fine now at least you have a generic function to grab your arguments


19379
23:09:04,872 --> 23:09:10,000
okay so i'm going to press command s it might be good to do a hot reload


19380
23:09:10,000 --> 23:09:14,160
sorry hot restart just because we've done quite a bit of


19381
23:09:14,160 --> 23:09:18,720
changing so i'm going to delete these two nodes like that and then i'm gonna


19382
23:09:18,720 --> 23:09:24,872
press the plus button let's just in here i'm gonna say my note


19383
23:09:24,872 --> 23:09:28,552
number one i'm gonna go back and then i'm gonna


19384
23:09:28,552 --> 23:09:31,600
press press and i'm just gonna say my note


19385
23:09:31,600 --> 23:09:35,600
number two now i have my note number one and two in


19386
23:09:35,600 --> 23:09:39,832
here then i'm now gonna test that to see that we can actually go and edit an


19387
23:09:39,832 --> 23:09:43,512
existing note all right so i'm gonna go to my note number one and tap on it and


19388
23:09:43,512 --> 23:09:48,960
now i can see i actually went to our notes and it says it still says new


19389
23:09:48,960 --> 23:09:52,480
notes and maybe that's okay we could just


19390
23:09:52,480 --> 23:09:56,400
leave it like that we could update the text maybe later that's that's fine


19391
23:09:56,400 --> 23:09:59,512
but at least i can see the text so i'm now going to change actually this my new


19392
23:09:59,512 --> 23:10:04,872
note sorry my note 1 to my note 3 and go back and i can see now i have my note 2


19393
23:10:04,872 --> 23:10:09,192
and 3. so this is a really good sign because that means that updating an


19394
23:10:09,192 --> 23:10:13,440
existing note is actually working and we're not creating a new note because


19395
23:10:13,440 --> 23:10:16,552
otherwise that note would have appeared in this list so i'm going to go to this


19396
23:10:16,552 --> 23:10:21,040
new note 3 and then change it to one as well so now you see it gets


19397
23:10:21,040 --> 23:10:26,720
updated all right perfect we got updating working and it


19398
23:10:26,720 --> 23:10:29,920
was quite a breeze to be honest with you if you ask me so


19399
23:10:29,920 --> 23:10:33,832
well done um what we need now is to make sure we


19400
23:10:33,832 --> 23:10:38,400
don't lose our code so let's go as we usually do at the end of every chapter


19401
23:10:38,400 --> 23:10:43,680
and we're gonna go commit and tag our code okay i'm gonna change the screen


19402
23:10:43,680 --> 23:10:49,760
layout and i'm then going to increase the size of the screen so you


19403
23:10:49,760 --> 23:10:54,720
see what i'm doing a little bit better let's go to our terminal and if you look


19404
23:10:54,720 --> 23:10:58,800
at oops if you look at


19405
23:10:58,800 --> 23:11:04,872
um i think it's was it command k yeah let's look at our git log and you see


19406
23:11:04,872 --> 23:11:10,160
the last uh commit that we did was step 16 and also your tags the last tag was


19407
23:11:10,160 --> 23:11:13,832
also step 16 okay let's go and commit now


19408
23:11:13,832 --> 23:11:16,480
as maybe before that let's have a look at


19409
23:11:16,480 --> 23:11:19,760
status and a bit has changed modified modified


19410
23:11:19,760 --> 23:11:23,680
deleted it thinks that this file was deleted


19411
23:11:23,680 --> 23:11:28,640
though it really wasn't um it was just renamed so


19412
23:11:28,640 --> 23:11:31,832
um that's unfortunate that it marked it as


19413
23:11:31,832 --> 23:11:36,720
deleted that's okay though but a little bit unfortunate there there are ways of


19414
23:11:36,720 --> 23:11:40,720
doing that so that git actually understands that you rename the file but


19415
23:11:40,720 --> 23:11:44,480
i can see that visual studio code wasn't able to actually mark that as rename and


19416
23:11:44,480 --> 23:11:48,400
it also it just marked it basically was marked as deleted


19417
23:11:48,400 --> 23:11:52,160
but that's okay we can live with that so let's just say git add all and let's


19418
23:11:52,160 --> 23:11:56,800
just say then git commit step 17


19419
23:11:56,800 --> 23:11:59,832
all right and then we just say git push so we push


19420
23:11:59,832 --> 23:12:03,192
all our changes and let's do a git status to make sure we didn't leave any


19421
23:12:03,192 --> 23:12:07,120
files behind and we haven't so in here we're then going to say get


19422
23:12:07,120 --> 23:12:12,872
tag step 17 as well and push our tags okay


19423
23:12:12,872 --> 23:12:16,000
so that part is now done we've


19424
23:12:16,000 --> 23:12:19,280
done our updating of


19425
23:12:19,280 --> 23:12:24,480
existing notes and that's fantastic so as is tradition for every chapter in


19426
23:12:24,480 --> 23:12:29,280
this course we always talk about what we when we need to work on in the coming


19427
23:12:29,280 --> 23:12:31,920
chapter so


19428
23:12:31,920 --> 23:12:35,040
we have a little bit of a problem in our source code at the moment and that is


19429
23:12:35,040 --> 23:12:39,360
inside our node service so i'm going to get rid of this bottom bar here and go


19430
23:12:39,360 --> 23:12:42,960
to node service and you can see in our node service


19431
23:12:42,960 --> 23:12:47,600
we're exposing a functionality here called gets all nodes actually i don't


19432
23:12:47,600 --> 23:12:51,040
think we're using this get all notes we're just using


19433
23:12:51,040 --> 23:12:54,640
all notes stream and um


19434
23:12:54,640 --> 23:12:58,000
let's see where that is here all notes stream and that is just reading the


19435
23:12:58,000 --> 23:13:01,280
notes stream controllers stream and


19436
23:13:01,280 --> 23:13:04,720
and uh that is coming from here you can see


19437
23:13:04,720 --> 23:13:09,280
from our notes and that notes is


19438
23:13:09,280 --> 23:13:17,832
being populated inside let's see get all nodes remove we have here


19439
23:13:17,920 --> 23:13:23,360
so you see we are at the moment reading all notes and we're just exposing them


19440
23:13:23,360 --> 23:13:28,960
to the outside world but wait a minute our application has the concept of users


19441
23:13:28,960 --> 23:13:33,360
so so if we if we now log out of the


19442
23:13:33,360 --> 23:13:37,600
application and log back in with another user then


19443
23:13:37,600 --> 23:13:43,440
that new user is going to see my notes because there is nowhere inside this


19444
23:13:43,440 --> 23:13:48,480
node service that we have a concept of a user like we're not actually filtering


19445
23:13:48,480 --> 23:13:52,800
these things out and exposing only relevant data to the user okay so


19446
23:13:52,800 --> 23:13:56,720
we need to fix that it's very serious uh it's not a bug it's actually something


19447
23:13:56,720 --> 23:13:59,920
that i've intentionally left until this point because yeah we didn't have to


19448
23:13:59,920 --> 23:14:03,760
handle that it was just more fun to work with the ui of the application but we


19449
23:14:03,760 --> 23:14:06,552
have to be very conscious about these little things that we haven't


19450
23:14:06,552 --> 23:14:10,400
implemented and that's exactly what we're gonna do and fix in the next


19451
23:14:10,400 --> 23:14:12,872
chapter so i'll see you there


19452
23:14:12,872 --> 23:14:16,872
hello everyone and welcome to chapter 35 of the swati course


19453
23:14:16,872 --> 23:14:20,720
in the previous chapter as you saw we started talking about how we can update


19454
23:14:20,720 --> 23:14:26,640
an existing node in the node list and we refactored our new node view as it was


19455
23:14:26,640 --> 23:14:31,680
called before to become i believe create update node view and this node view is


19456
23:14:31,680 --> 23:14:35,192
now able to do two things either create a new node


19457
23:14:35,192 --> 23:14:40,320
or update an existing one so we didn't create a whole new view just to be able


19458
23:14:40,320 --> 23:14:44,000
to update an existing node so that went really fine


19459
23:14:44,000 --> 23:14:47,040
and however as i mentioned


19460
23:14:47,040 --> 23:14:50,960
at the end of the previous chapter we have a little bit of a problem with our


19461
23:14:50,960 --> 23:14:56,552
node service in that right now node service doesn't really take into


19462
23:14:56,552 --> 23:15:02,320
consideration which users logged into the application and hence it cannot


19463
23:15:02,320 --> 23:15:06,320
return relevant nodes for that particular user so what the node service


19464
23:15:06,320 --> 23:15:09,360
at the moment is doing is just fetching all the nodes from the database and


19465
23:15:09,360 --> 23:15:13,680
returning it to the current user this is going to cause an issue in that when we


19466
23:15:13,680 --> 23:15:17,600
log in with one user we're going to see all the nodes in the system and when we


19467
23:15:17,600 --> 23:15:21,512
log out with a user and log in with a completely new user we're again going to


19468
23:15:21,512 --> 23:15:24,960
see all the notes that are stored in the note server so we have to fix that in


19469
23:15:24,960 --> 23:15:29,600
this chapter before we get started with that we have


19470
23:15:29,600 --> 23:15:33,360
a little bit of a problem with our updating


19471
23:15:33,360 --> 23:15:36,400
and this is a bug that's been inside the application for a while since we


19472
23:15:36,400 --> 23:15:40,480
basically created our cloud service and we have to fix that so let's have a look


19473
23:15:40,480 --> 23:15:43,920
at what this bug actually is before i can


19474
23:15:43,920 --> 23:15:47,192
before we go on so i'm going to put scrcpy in here


19475
23:15:47,192 --> 23:15:51,120
and i'm going to put visual studio code in here as well


19476
23:15:51,120 --> 23:15:55,040
all right so i hope you can see the screen so here right now we have um


19477
23:15:55,040 --> 23:15:58,160
maybe i don't have to hope for it i could just bring the screen to be a


19478
23:15:58,160 --> 23:16:03,440
little bit bigger so if you look in scr cpy right now we have two my note number


19479
23:16:03,440 --> 23:16:08,160
two and that is exactly the box so let's go in here and to the first one and i'm


19480
23:16:08,160 --> 23:16:11,512
just gonna say my note number one oops


19481
23:16:11,512 --> 23:16:15,920
and go out and everything looks fine right now it's just because we are


19482
23:16:15,920 --> 23:16:20,552
updating our local cache as well so things are looking good however if you


19483
23:16:20,552 --> 23:16:27,120
do a hot restart of the application and my scr cpy just died so that's okay


19484
23:16:27,120 --> 23:16:31,760
i can live with that it's a free software so as your cpy and and i can


19485
23:16:31,760 --> 23:16:37,192
see now i've lost actually my debug command of scrcpy as well


19486
23:16:37,192 --> 23:16:42,640
so i'm gonna restart the application but what is going to happen now is as


19487
23:16:42,640 --> 23:16:47,120
you'll soon see is we have a little bit of a problem with our updates note


19488
23:16:47,120 --> 23:16:51,440
functionality so you can see now that i now that i restarted the application all


19489
23:16:51,440 --> 23:16:56,160
of a sudden both notes were changed to my notes number one and that's not


19490
23:16:56,160 --> 23:16:59,832
that's not correct that's because there's a bug inside the application so


19491
23:16:59,832 --> 23:17:04,720
how it's manifest manifesting itself is that when you update a note


19492
23:17:04,720 --> 23:17:09,440
locally it looks fine but if you do a hot restart excuse me then it's gonna be


19493
23:17:09,440 --> 23:17:13,760
tripping like it is tripping right now and the bug is right here i don't know


19494
23:17:13,760 --> 23:17:17,360
if you can notice that excuse me


19495
23:17:17,360 --> 23:17:20,160
i don't know if you can notice that but we have this call to


19496
23:17:20,160 --> 23:17:25,760
the update function however we are not actually telling and this is also by the


19497
23:17:25,760 --> 23:17:30,640
way this is inside node services dart inside the update node function


19498
23:17:30,640 --> 23:17:34,480
in here you can see we're issuing a query to sqlite and we're saying update


19499
23:17:34,480 --> 23:17:39,680
the nodes table and set the text to this text all right and that's exactly what


19500
23:17:39,680 --> 23:17:44,232
sqlite is doing it's going through all the rows inside the note table and


19501
23:17:44,232 --> 23:17:46,960
updating their text column with the given text


19502
23:17:46,960 --> 23:17:51,600
so what we missed in there is a where argument so we're not telling sqlite


19503
23:17:51,600 --> 23:17:55,760
right now which row to update so it's updating all


19504
23:17:55,760 --> 23:18:00,000
the rows okay so we need to fix that as a matter of


19505
23:18:00,000 --> 23:18:03,832
urgency so let's go in here and say we have now


19506
23:18:03,832 --> 23:18:07,120
let's see this is our update


19507
23:18:07,512 --> 23:18:12,232
and right after the creation of this


19508
23:18:12,320 --> 23:18:17,440
dictionary we're going to say a were and we're going to say the id field of


19509
23:18:17,440 --> 23:18:21,280
that column that we want to update or sorry the id field of the row or note


19510
23:18:21,280 --> 23:18:26,160
that we want to update is going to be equal to something and where args


19511
23:18:26,160 --> 23:18:31,440
are going to be equal to our nodes id so i need you to also write this code


19512
23:18:31,440 --> 23:18:35,680
the way i've written it here so now if you say my note number one and i go in


19513
23:18:35,680 --> 23:18:39,760
here and i say minor number two then it's going to do the right thing so if


19514
23:18:39,760 --> 23:18:42,960
you do a hot restart then you can see that the notes are actually populated


19515
23:18:42,960 --> 23:18:46,400
correctly okay i'm not going to do a hot restart just


19516
23:18:46,400 --> 23:18:50,480
because i know scr cpy may crash again and i have to restart the whole process


19517
23:18:50,480 --> 23:18:52,720
so i don't want to waste your time with


19518
23:18:52,720 --> 23:18:55,360
that and that's why i'm not gonna do a hot


19519
23:18:55,360 --> 23:19:02,080
restart but this should work okay sorry again


19520
23:19:02,400 --> 23:19:06,960
okay um now back to what we were working on um


19521
23:19:06,960 --> 23:19:10,872
or back to what the main goal of this chapter is so


19522
23:19:10,872 --> 23:19:15,280
let's have a look at how we can fix the problem with our user server with our


19523
23:19:15,280 --> 23:19:20,000
node service if you go here not being able to return relevant nodes


19524
23:19:20,000 --> 23:19:24,232
except it's returning all the nodes so i believe it's inside node service right


19525
23:19:24,232 --> 23:19:28,800
here oh we were there already sorry about that so we have our node service


19526
23:19:28,800 --> 23:19:32,800
and you can see at the moment when we say


19527
23:19:32,800 --> 23:19:39,120
here notes this is happening inside uh cache all cache notes which is you can


19528
23:19:39,120 --> 23:19:42,640
see it's reading all the notes from the database using get all notes putting it


19529
23:19:42,640 --> 23:19:46,960
inside putting it sorry you couldn't see that cache notes is reading all the


19530
23:19:46,960 --> 23:19:51,512
notes and then putting them inside the local local variable and also populating


19531
23:19:51,512 --> 23:19:57,280
the stream controller with that okay but what we need to do is need is that


19532
23:19:57,280 --> 23:20:03,512
we need to make sure that the current user is saved somewhere inside this note


19533
23:20:03,512 --> 23:20:07,120
service so that note service knows that okay here's the current user whenever i


19534
23:20:07,120 --> 23:20:12,320
return all my notes to the call site using this all nodes functionality in


19535
23:20:12,320 --> 23:20:16,640
here i need to actually filter out the notes


19536
23:20:16,640 --> 23:20:21,360
inside that list to make sure only relevant notes that were created by that


19537
23:20:21,360 --> 23:20:27,280
current user are returned from this stream okay


19538
23:20:27,600 --> 23:20:31,120
so what we need then is to kind of keep


19539
23:20:31,120 --> 23:20:35,512
hold of some sort of a current user in our um


19540
23:20:35,512 --> 23:20:40,872
in our service inside this uh node service so let's go ahead and do that


19541
23:20:40,872 --> 23:20:46,160
let's go actually define our um database user in here


19542
23:20:46,160 --> 23:20:49,512
and we say this is optional and it's equal to user


19543
23:20:49,512 --> 23:20:54,960
however we always want to make sure that that user is set before you actually


19544
23:20:54,960 --> 23:20:58,080
grab a list of notes okay so this is the


19545
23:20:58,080 --> 23:21:01,600
expectation of this note server so the note server says that if you want to be


19546
23:21:01,600 --> 23:21:05,512
able to read all the notes the way you're doing it as clean as


19547
23:21:05,512 --> 23:21:10,552
you're doing it you also make sure that you've set this current user okay


19548
23:21:10,552 --> 23:21:15,280
so if that if that expectation is not met we're going to throw an exception


19549
23:21:15,280 --> 23:21:19,760
and we're going to call that exception user should be set before reading all


19550
23:21:19,760 --> 23:21:24,480
nodes as the caption indicates we're going to go to our crowd exceptions


19551
23:21:24,480 --> 23:21:29,120
which we have from before so let's find that crowd exceptions in the given


19552
23:21:29,120 --> 23:21:32,720
folder is sorry yes in the given path that i've mentioned in the bottom of the


19553
23:21:32,720 --> 23:21:35,832
screen lib services cross crowd exceptions


19554
23:21:35,832 --> 23:21:39,192
and we're going to define a new exception called user should be set


19555
23:21:39,192 --> 23:21:42,552
before reading all notes like this


19556
23:21:42,552 --> 23:21:46,960
all right so please go ahead and define that as one of the exceptions in your


19557
23:21:46,960 --> 23:21:50,800
application as well under crowd exceptions


19558
23:21:50,800 --> 23:21:53,680
all right so


19559
23:21:53,680 --> 23:21:58,080
what we need now is a way for us to be able to filter


19560
23:21:58,080 --> 23:22:01,600
all the given nodes based on the current user


19561
23:22:01,600 --> 23:22:05,360
so let's have a look at our all nodes at


19562
23:22:05,360 --> 23:22:10,872
the moment here you see what we need is to ensure that this all


19563
23:22:10,872 --> 23:22:18,000
nodes can actually filter uh the given nodes inside this stream


19564
23:22:18,000 --> 23:22:21,440
and using some sort of filter functionality


19565
23:22:21,440 --> 23:22:24,720
so what we have you can see a stream here


19566
23:22:24,720 --> 23:22:30,400
let's say stream a stream has a function called where


19567
23:22:30,400 --> 23:22:32,720
so what it does is that as you can see it


19568
23:22:32,720 --> 23:22:38,960
has um it it allows you to grab the current content of that


19569
23:22:38,960 --> 23:22:44,080
stream and then you can pass a test on that so you can say if this object is


19570
23:22:44,080 --> 23:22:48,160
equal to this then do that and return this value otherwise return something


19571
23:22:48,160 --> 23:22:51,832
else so it's kind of like a filtering mechanism on a string on a stream's


19572
23:22:51,832 --> 23:22:58,640
value however our stream includes a list remember let's go back here


19573
23:22:58,640 --> 23:23:02,800
in excuse me in here you can see


19574
23:23:02,800 --> 23:23:07,440
we return a stream of a list of database nodes


19575
23:23:07,440 --> 23:23:11,280
so what we want is a where clause that's two layers deep


19576
23:23:11,280 --> 23:23:16,400
we want to be able to filter out and change the contents of


19577
23:23:16,400 --> 23:23:21,360
this stream based on the current user and we need to then filter the list


19578
23:23:21,360 --> 23:23:25,360
based on the current user's id and only return the database notes that are


19579
23:23:25,360 --> 23:23:29,512
relevant for that user so this is a bit of a special case


19580
23:23:29,512 --> 23:23:32,960
so for that we need to create our own function


19581
23:23:32,960 --> 23:23:39,440
which is a manual like filter function on our


19582
23:23:39,920 --> 23:23:46,000
on our stream okay so let's go ahead and do that so what we need to do in here


19583
23:23:46,000 --> 23:23:50,640
and is to create a new file as you can see under lib extensions list filter so


19584
23:23:50,640 --> 23:23:56,232
i'm going to go ahead and do that let's see if we already have some extensions


19585
23:23:56,232 --> 23:24:00,960
so i can see under lib right now we have constants enum services utilities views


19586
23:24:00,960 --> 23:24:06,400
but we don't have any extensions so the best way then to do that to create that


19587
23:24:06,400 --> 23:24:10,640
filter the dart file is just right click on live and say new file


19588
23:24:10,640 --> 23:24:15,080
and then i'm going to say extensions list


19589
23:24:15,080 --> 23:24:18,000
filter. okay


19590
23:24:18,000 --> 23:24:23,040
so then what we're going to do in here is to create an extension on our


19591
23:24:23,040 --> 23:24:29,920
on our stream so let's go ahead and just say extension


19592
23:24:29,920 --> 23:24:34,160
filter on stream of t


19593
23:24:34,160 --> 23:24:37,680
so the reason i'm doing it like this is


19594
23:24:37,680 --> 23:24:43,832
that so we can grab hold of the contents of that stream inside our extension okay


19595
23:24:43,832 --> 23:24:48,400
so like if you did something like this


19596
23:24:48,400 --> 23:24:53,920
that would still work but in here what we're saying is that we're extending any


19597
23:24:53,920 --> 23:24:59,440
stream that has a value of t and in our filter function then we can


19598
23:24:59,440 --> 23:25:03,760
access that t as you'll soon see okay so then we're going to say


19599
23:25:03,760 --> 23:25:08,872
stream of a list of that object


19600
23:25:08,872 --> 23:25:11,680
and we're going to call our function filter


19601
23:25:11,680 --> 23:25:16,320
and in our filter function we want to grab another function that does a


19602
23:25:16,320 --> 23:25:20,872
testing of the items so let's then say bool


19603
23:25:20,872 --> 23:25:27,192
um function that grabs an item of that type


19604
23:25:27,192 --> 23:25:32,400
so you can see now we're basically broken down the requirements of our


19605
23:25:32,400 --> 23:25:35,280
filtering that is what's supposed to be two levels


19606
23:25:35,280 --> 23:25:40,800
deep is now one level leap because our filter function passes t


19607
23:25:40,800 --> 23:25:45,512
which is our database node to this where function okay


19608
23:25:45,512 --> 23:25:48,720
so this doesn't exist at the moment but we're creating that okay


19609
23:25:48,720 --> 23:25:51,440
so in here what we're going to say then is


19610
23:25:51,440 --> 23:25:56,080
what we are going to do is we need to map our um


19611
23:25:56,080 --> 23:25:59,440
stream and that will you can see it gives us


19612
23:25:59,440 --> 23:26:06,720
the values so in here we get the items and in here then we say items where


19613
23:26:06,720 --> 23:26:13,192
we pass that word clause in here and we say to list like this


19614
23:26:13,600 --> 23:26:17,600
so and i can see in here actually we have a


19615
23:26:17,600 --> 23:26:22,320
filter of t but our stream needs to have a list of t so then that's gonna fix the


19616
23:26:22,320 --> 23:26:25,440
problem for us so in this case we're actually drilling down two levels deep


19617
23:26:25,440 --> 23:26:29,040
inside the list okay so this is the function that we just


19618
23:26:29,040 --> 23:26:34,000
created so it allows us to filter a stream of lists of something and then


19619
23:26:34,000 --> 23:26:38,232
our where clause is going to get that something and should that something pass


19620
23:26:38,232 --> 23:26:42,800
the test then it will be included in the final list so


19621
23:26:42,800 --> 23:26:46,400
look i know this is complicated stuff but please pause the video think a


19622
23:26:46,400 --> 23:26:51,120
little bit about it we have a stream containing a list of things


19623
23:26:51,120 --> 23:26:57,680
now we want to stream of the list of the same thing as long as those things


19624
23:26:57,680 --> 23:27:01,040
any individual thing passes a specific test


19625
23:27:01,040 --> 23:27:04,552
which is specified using this work loss okay


19626
23:27:04,552 --> 23:27:09,192
this is difficult i know it may be some it may be like so difficult for some


19627
23:27:09,192 --> 23:27:12,640
users that you'll be like i don't get any of this i don't understand but


19628
23:27:12,640 --> 23:27:17,512
you will just need to practice you need to just grab a hold of this code go go


19629
23:27:17,512 --> 23:27:22,000
ahead and implement this on some other functionalities like a list of list of


19630
23:27:22,000 --> 23:27:26,400
things and see okay if i have a list of lists of things how do i filter out that


19631
23:27:26,400 --> 23:27:30,800
thing inside and it will finally click okay


19632
23:27:30,800 --> 23:27:36,160
i know it's it's a bit complicated so we've done that now


19633
23:27:36,160 --> 23:27:40,400
what we need now um is to set the current user in the node


19634
23:27:40,400 --> 23:27:44,552
service as you can see right now we have get or


19635
23:27:44,552 --> 23:27:47,832
create user functionality in our node service


19636
23:27:47,832 --> 23:27:53,360
so let's go back to our node service and find that function get or create user


19637
23:27:53,360 --> 23:27:57,920
and at the moment it just takes an email as the caption indicates we need a


19638
23:27:57,920 --> 23:28:03,360
parameter inside this function that also says set as current user so when you get


19639
23:28:03,360 --> 23:28:06,800
or create a user which we're at the moment doing i


19640
23:28:06,800 --> 23:28:11,512
believe in our notes view so let's go in here


19641
23:28:11,512 --> 23:28:17,832
notes notes view in here uh you see get or create a user so this


19642
23:28:17,832 --> 23:28:22,640
is like the bare bone this is the actual very important part of our application


19643
23:28:22,640 --> 23:28:26,320
where a user either is retrieved from the database the way he or she was or


19644
23:28:26,320 --> 23:28:31,040
it's created and it just makes sense to make that user the current user at this


19645
23:28:31,040 --> 23:28:35,920
point okay so let's go in our node service


19646
23:28:35,920 --> 23:28:42,872
and let's change that functionality so i'm going to bring up my notes as well


19647
23:28:43,040 --> 23:28:48,232
and let's add a parameter called set as current user right here going to put a


19648
23:28:48,232 --> 23:28:52,000
comma there and let's just say um that this


19649
23:28:52,000 --> 23:28:57,192
parameter is a boolean set as current user and we're going to set it to true


19650
23:28:57,192 --> 23:29:02,720
by default all right so i need to do the same thing please


19651
23:29:02,960 --> 23:29:06,400
so after doing that when we retrieve the user we're going to look at this


19652
23:29:06,400 --> 23:29:10,640
parameter we're going to say if set as current user set


19653
23:29:10,640 --> 23:29:15,360
as current user then we're going to set our own user to this user that we just


19654
23:29:15,360 --> 23:29:19,920
retrieved from the database and also don't forget when you create


19655
23:29:19,920 --> 23:29:23,920
this user and you also have to set the current


19656
23:29:23,920 --> 23:29:27,512
user if that boolean flag is true so let's just say


19657
23:29:27,512 --> 23:29:33,760
set as current user here as well then we're going to say user is created user


19658
23:29:33,760 --> 23:29:39,280
so what we did here is we just said if we could retrieve that user from the


19659
23:29:39,280 --> 23:29:44,000
database we and this boolean parameter is true then we set our own user to this


19660
23:29:44,000 --> 23:29:47,920
user otherwise if we had to create that user


19661
23:29:47,920 --> 23:29:52,000
and this parameter is true then we do the same thing we set this current user


19662
23:29:52,000 --> 23:29:55,040
to the created user and if you're getting some errors in here saying that


19663
23:29:55,040 --> 23:29:58,232
this underscore user cannot be found it's probably because you missed adding


19664
23:29:58,232 --> 23:30:01,040
this a database user to your node service


19665
23:30:01,040 --> 23:30:03,920
which is something i mentioned just before we moved on to creating that


19666
23:30:03,920 --> 23:30:08,960
filter function okay or sorry before we created this exception


19667
23:30:09,360 --> 23:30:13,360
all right that part is now done as well um


19668
23:30:13,360 --> 23:30:16,960
now what we need to do is to do the actual


19669
23:30:16,960 --> 23:30:22,080
filtering and and that is something that we need to do is uh you can see as a


19670
23:30:22,080 --> 23:30:27,120
cache index change all nodes stream to filter for the current user


19671
23:30:27,120 --> 23:30:30,960
and that's something we need to do in the all nodes


19672
23:30:30,960 --> 23:30:35,040
function or sorry the getter so right here


19673
23:30:35,040 --> 23:30:41,600
what we're going to say is i'm actually i think i'm going to change them


19674
23:30:41,600 --> 23:30:44,720
yeah just let's leave it like this so i'm just going to say no stream


19675
23:30:44,720 --> 23:30:47,760
controller and dot


19676
23:30:47,760 --> 23:30:51,600
stream and right here we can use our filter function you see now visual


19677
23:30:51,600 --> 23:30:55,040
studio code is like confused like oh there is no filter function on a stream


19678
23:30:55,040 --> 23:30:58,160
but remember we actually added that ourselves so i'm going to get help from


19679
23:30:58,160 --> 23:31:01,832
visual studio code and say command dot on mac or control dot on linux and


19680
23:31:01,832 --> 23:31:05,832
windows and visual studio code and then it's gonna understand oh there is a


19681
23:31:05,832 --> 23:31:09,760
filter function that you've defined on stream do you want me to import that and


19682
23:31:09,760 --> 23:31:12,832
i'm gonna say yes please so now we have the


19683
23:31:12,832 --> 23:31:18,872
filter remember filter then gets a note right and if i move my mouse over it now


19684
23:31:18,872 --> 23:31:23,280
you can see that says oh you have a database note however our stream


19685
23:31:23,280 --> 23:31:27,360
actually contains a list of database nodes and all of a sudden our filter


19686
23:31:27,360 --> 23:31:31,512
gets one note at a time so this is the beauty of creating your own extensions


19687
23:31:31,512 --> 23:31:37,440
so that you can drill down inside existing objects and grab what you need


19688
23:31:37,440 --> 23:31:42,872
inside your application all right so in here what we need is to create a


19689
23:31:42,872 --> 23:31:46,400
function then you remember this function has to return a boolean we haven't


19690
23:31:46,400 --> 23:31:49,360
returned anything from here yet that's why we're getting an error


19691
23:31:49,360 --> 23:31:53,360
so at the end of this function we need to return a volume so let's just say


19692
23:31:53,360 --> 23:31:59,512
final current user is this user and if this current user


19693
23:31:59,512 --> 23:32:04,000
is not null which is like the condition that we actually expect then we're going


19694
23:32:04,000 --> 23:32:07,760
to do some code otherwise we need to throw our exception


19695
23:32:07,760 --> 23:32:12,080
user should be said before okay so this is


19696
23:32:12,080 --> 23:32:16,552
our expectation from the caller if you're reading all notes from this


19697
23:32:16,552 --> 23:32:21,440
interface you need to make sure that the current user was set when you call this


19698
23:32:21,440 --> 23:32:27,120
function so this needs to be true okay sorry this yeah you may not have seen


19699
23:32:27,120 --> 23:32:30,552
the code but you could also argue that oh wait a


19700
23:32:30,552 --> 23:32:34,872
minute if this is like the expectation of this interface that the current user


19701
23:32:34,872 --> 23:32:37,832
should always be said before you read all notes


19702
23:32:37,832 --> 23:32:41,600
then why don't you make that the default why


19703
23:32:41,600 --> 23:32:45,920
don't you just do that and remove this function and always set the user as a


19704
23:32:45,920 --> 23:32:49,120
default well the reason behind that is


19705
23:32:49,120 --> 23:32:53,920
the current user has to be sent only when you're working with all nodes now


19706
23:32:53,920 --> 23:32:58,872
this node service should be able to work like to update existing nodes or remove


19707
23:32:58,872 --> 23:33:03,040
existing nodes it in those functionalities should still


19708
23:33:03,040 --> 23:33:07,832
work if the current user is not set right because those functionalities are


19709
23:33:07,832 --> 23:33:12,552
pure cross functions that say update a node with this id get a user with this


19710
23:33:12,552 --> 23:33:18,960
id delete a node with this id etc etc they are not dependent on a current user


19711
23:33:18,960 --> 23:33:24,160
however all nodes is dependent on the current user and it just makes sense to


19712
23:33:24,160 --> 23:33:27,192
have this functionality in here that says set as current user that is


19713
23:33:27,192 --> 23:33:32,552
defaulted to true so if you're using all nodes then it throws an exception if the


19714
23:33:32,552 --> 23:33:36,320
current user is not set okay so that's my reasoning for having this as a


19715
23:33:36,320 --> 23:33:39,832
parameter and not making it the default um


19716
23:33:39,832 --> 23:33:44,960
behavior of this class all right so if current user was not


19717
23:33:44,960 --> 23:33:50,720
null that's like the happy path so then we say we return this note


19718
23:33:50,720 --> 23:33:57,440
it's not as long as its um user id is the same as


19719
23:33:57,440 --> 23:34:01,680
the current user id so we say note


19720
23:34:01,680 --> 23:34:05,280
a user id should be equal to current user


19721
23:34:05,280 --> 23:34:09,760
dot id okay and remember we're not returning a note we're returning a


19722
23:34:09,760 --> 23:34:14,080
boolean remember our filter function it has a where statement that has to return


19723
23:34:14,080 --> 23:34:17,680
a boolean so we're not returning any nodes in here we're just checking is


19724
23:34:17,680 --> 23:34:22,640
this node's use ready the same as that then do this okay


19725
23:34:22,640 --> 23:34:25,832
so that should now be good to go so what we


19726
23:34:25,832 --> 23:34:31,832
could do i know this may actually and break things now because i have some


19727
23:34:31,832 --> 23:34:35,832
problems with scr cpy but you have to excuse me for that it's it's nothing


19728
23:34:35,832 --> 23:34:40,640
that i have control over but since we've changed quite a lot of code uh i'm gonna


19729
23:34:40,640 --> 23:34:45,280
now close all these screens at these tabs and i'm going to do a hot reload


19730
23:34:45,280 --> 23:34:49,192
but this most probably is going to crash the scr cpy


19731
23:34:49,192 --> 23:34:54,000
oh it didn't great thank god for that so we have our notes now how do we put


19732
23:34:54,000 --> 23:34:58,000
this into test what we need to do is to log out and log


19733
23:34:58,000 --> 23:35:01,440
in so i'm going to go to console firebase


19734
23:35:01,440 --> 23:35:06,000
and let's go to our application which is my notes flutter project


19735
23:35:06,000 --> 23:35:11,832
we have two authenticated users these two emails at the moment so right


19736
23:35:11,832 --> 23:35:15,120
now i'm logged in with one of them i don't really know which one so i'm going


19737
23:35:15,120 --> 23:35:19,120
to log out here so i'm then going to log in with


19738
23:35:19,120 --> 23:35:24,552
pixeltab gmail.com foobarbas log in


19739
23:35:24,552 --> 23:35:29,920
and i can see those email those um notes were under pixel tab so then i'm


19740
23:35:29,920 --> 23:35:34,640
going to log out again and i'm going to log in with the other user


19741
23:35:34,640 --> 23:35:37,680
like this toolbarbad and i'm going to then press


19742
23:35:37,680 --> 23:35:42,552
the login button and i haven't yet verified my email so i will have to do


19743
23:35:42,552 --> 23:35:47,600
that so let me just see if i can take care of that right now


19744
23:35:47,600 --> 23:35:53,440
i'm going to then bring my email and go to


19745
23:35:53,440 --> 23:35:58,872
and see if i can find this um verification email and i can't so i'm


19746
23:35:58,872 --> 23:36:02,400
just gonna send send email verification and it's gonna send a new email


19747
23:36:02,400 --> 23:36:08,160
verification to me all right i got the email verification


19748
23:36:08,160 --> 23:36:12,160
and it looks like this so i'm just gonna click on that and i


19749
23:36:12,160 --> 23:36:16,080
can see now it says your email has been verified okay


19750
23:36:16,080 --> 23:36:20,000
so let me go to restart then and now that


19751
23:36:20,000 --> 23:36:25,512
i've verified my email i'm going to try to log in with a user


19752
23:36:26,480 --> 23:36:29,920
as oops this is register i want to go to


19753
23:36:29,920 --> 23:36:32,552
login so


19754
23:36:32,800 --> 23:36:35,192
here foo barbats


19755
23:36:35,192 --> 23:36:39,280
and then log in and now i can see for my user i'm not


19756
23:36:39,280 --> 23:36:42,960
seeing any notes but just to make sure i'm just going to create a new user and


19757
23:36:42,960 --> 23:36:47,192
say this no sorry create a new node i'm going to say this node was created


19758
23:36:47,192 --> 23:36:52,160
for van dot or just put my email in here like this


19759
23:36:52,160 --> 23:36:54,720
okay i'm going to go back and i can see that


19760
23:36:54,720 --> 23:37:00,640
the note is displayed here then what i'm going to do is just to


19761
23:37:00,640 --> 23:37:05,512
log out of this user and log in with the other user


19762
23:37:05,512 --> 23:37:09,680
just to make sure that that oh that was created by the other user is


19763
23:37:09,680 --> 23:37:13,192
not displayed to this user okay


19764
23:37:13,512 --> 23:37:19,920
and now we can log in and i can only see notes that were for this user so


19765
23:37:19,920 --> 23:37:24,480
congratulations that was a lot of work that we did and that we did and uh the


19766
23:37:24,480 --> 23:37:28,320
application seems to be working the way we've designed it so


19767
23:37:28,320 --> 23:37:32,320
that's great job what we need to do now is just ensure


19768
23:37:32,320 --> 23:37:38,232
that we we won't lose our code as is a tradition and so we need to commit our


19769
23:37:38,232 --> 23:37:42,872
code and also tag our code okay so i'm gonna do some uh


19770
23:37:42,872 --> 23:37:46,552
shuffling around here on the screens and i'm gonna increase the size of visual


19771
23:37:46,552 --> 23:37:51,440
studio code so you see it better let's do git status and see what the


19772
23:37:51,440 --> 23:37:55,832
status is we've modified two files and we've also added a whole new folder so


19773
23:37:55,832 --> 23:38:00,000
i'm just gonna say git add all and if you look at our logs the previous


19774
23:38:00,000 --> 23:38:04,232
step was step 17 now we have to commit our work and tag


19775
23:38:04,232 --> 23:38:08,232
it as step 18 and if you look at our are your tags as well you should have step


19776
23:38:08,232 --> 23:38:11,440
17 here let's say git commit and i'm going to


19777
23:38:11,440 --> 23:38:16,552
say step 18. here i'm gonna push these changes to


19778
23:38:16,552 --> 23:38:20,640
remotes which in my case is github you may be using bitbucket or some other


19779
23:38:20,640 --> 23:38:25,120
remote and less than tag as step 18 as well


19780
23:38:25,120 --> 23:38:29,400
here and put your tags


19781
23:38:29,600 --> 23:38:34,160
alright so that part is done now we have tagged and committed or code so if you


19782
23:38:34,160 --> 23:38:40,232
say git status you should have nothing handling here to be committed all right


19783
23:38:40,400 --> 23:38:44,552
wow fantastic so again as tradition is we always talk


19784
23:38:44,552 --> 23:38:47,512
about what we need to mention in the next chapter what we're going to go


19785
23:38:47,512 --> 23:38:50,400
through in the next chapter at the end of every chapter so


19786
23:38:50,400 --> 23:38:54,000
up until this point we've been using our notes crot service and


19787
23:38:54,000 --> 23:38:57,120
that's been working really good everything's been saved on the on the


19788
23:38:57,120 --> 23:39:01,040
device however if you really think about it


19789
23:39:01,040 --> 23:39:04,480
you've now learned how to work with crowd and that was my that was like one


19790
23:39:04,480 --> 23:39:07,680
of my intentions at the beginning of this course i wanted to teach you about


19791
23:39:07,680 --> 23:39:12,400
crud because it's one of the absolute most important things that any back-end


19792
23:39:12,400 --> 23:39:15,040
developer or front-end developer such as flutter


19793
23:39:15,040 --> 23:39:19,280
developer has to know about so i hope that you've learned that now


19794
23:39:19,280 --> 23:39:23,920
however we have a big problem here and that is all our notes are saved locally


19795
23:39:23,920 --> 23:39:28,800
in a sql like database and should anything go wrong for instance if


19796
23:39:28,800 --> 23:39:33,120
if the users something happens to the user's telephone all that data is going


19797
23:39:33,120 --> 23:39:36,720
to disappear so the user's notes may disappear and


19798
23:39:36,720 --> 23:39:40,320
you may think well what's so wrong about that well if


19799
23:39:40,320 --> 23:39:44,960
you're like me i use my notes like my the default notes


19800
23:39:44,960 --> 23:39:50,000
application in macintosh and also on linux quite a lot so i store very very


19801
23:39:50,000 --> 23:39:54,872
important information sometimes in my notes and you'd be surprised that the


19802
23:39:54,872 --> 23:39:59,120
outline for this course i actually managed it all i managed all of that


19803
23:39:59,120 --> 23:40:02,872
inside the notes application on my macintosh so i wrote the entire outline


19804
23:40:02,872 --> 23:40:06,400
took many many hours and i would have been devastated


19805
23:40:06,400 --> 23:40:10,872
if those notes disappeared for some reason or if my kids got a hold of my


19806
23:40:10,872 --> 23:40:13,832
telephone and just removed the notes and there was no reason and then there was


19807
23:40:13,832 --> 23:40:17,280
no way for me to grab those notes back again so


19808
23:40:17,280 --> 23:40:21,832
what we need to do now is just ensure that we can store these nodes in some


19809
23:40:21,832 --> 23:40:24,872
sort of a back end so that it's sitting in the


19810
23:40:24,872 --> 23:40:28,800
cloud so we don't have to manage them locally and that's what we're going to


19811
23:40:28,800 --> 23:40:32,320
use firebase for and we're going to start talking more and more about


19812
23:40:32,320 --> 23:40:36,720
firebase storage from the beginning of next chapter so i hope


19813
23:40:36,720 --> 23:40:40,872
you enjoyed this chapter and grab your refreshments coffee or tea or whatever


19814
23:40:40,872 --> 23:40:44,720
you want some chocolates and i'll see you in the next chapter


19815
23:40:44,720 --> 23:40:49,040
hello and welcome to chapter 36 of this flutter course in previous chapters


19816
23:40:49,040 --> 23:40:52,400
we've been working with our quad service quite a lot and also we've been working


19817
23:40:52,400 --> 23:40:57,192
with firebase authentication so far we've stored the user generated


19818
23:40:57,192 --> 23:41:03,040
notes inside the crotch store which we're backing with a sqlite database and


19819
23:41:03,040 --> 23:41:06,872
we've also made that cloud service kind of um


19820
23:41:06,872 --> 23:41:10,160
aware of the currently logged in user so when


19821
23:41:10,160 --> 23:41:14,720
a user logs in he or she can only see their own notes and when that user logs


19822
23:41:14,720 --> 23:41:19,040
out and another user logs and then the previously created notes in the


19823
23:41:19,040 --> 23:41:25,440
database aren't exposed to the new user so we've taken care of all those but we


19824
23:41:25,440 --> 23:41:29,192
still have our notes only stored in a local storage


19825
23:41:29,192 --> 23:41:33,040
and from this chapter on we're going to be working with actually moving away


19826
23:41:33,040 --> 23:41:36,400
from storing the user data in a local database


19827
23:41:36,400 --> 23:41:41,040
and instead going towards storing that inside firebase


19828
23:41:41,040 --> 23:41:43,832
now when i was designing this course i was


19829
23:41:43,832 --> 23:41:48,000
thinking about how i can introduce more and more concepts to to become a better


19830
23:41:48,000 --> 23:41:51,680
software developer and a flutter developer and one of those absolutely


19831
23:41:51,680 --> 23:41:57,280
crucial things was crud create read update and delete and um though firebase


19832
23:41:57,280 --> 23:42:02,800
is a good way of doing that but firebase removes quite a lot of the logic that


19833
23:42:02,800 --> 23:42:07,360
you otherwise need to understand to become a better developer so firebase


19834
23:42:07,360 --> 23:42:11,920
has abstracted away the concept of crowd quite a lot and that you work with data


19835
23:42:11,920 --> 23:42:14,872
in the cloud and you don't really know how that is being populated and where


19836
23:42:14,872 --> 23:42:18,400
that is being populated so when i started designing the course i


19837
23:42:18,400 --> 23:42:22,960
thought maybe okay we could have a look at storing data locally first to get a


19838
23:42:22,960 --> 23:42:27,280
good grip of crud and then after that we now we understand


19839
23:42:27,280 --> 23:42:30,800
how crop works and how those operations are performed at a low level on a


19840
23:42:30,800 --> 23:42:35,280
database level then we can move away from it and go to a more abstract layer


19841
23:42:35,280 --> 23:42:39,832
so this was a choice that i met early on when designing this course and it is


19842
23:42:39,832 --> 23:42:44,160
definitely not like wasted time you now know how to work with sql light in your


19843
23:42:44,160 --> 23:42:49,040
applications and you will probably be using sqlite more and more as you go on


19844
23:42:49,040 --> 23:42:53,680
in your flutter development um career so


19845
23:42:53,680 --> 23:42:56,872
i am i hope that you understand that we are


19846
23:42:56,872 --> 23:43:01,600
we still have good use of uh sqlite and we've understood that but now it's time


19847
23:43:01,600 --> 23:43:08,320
that we move away from our local storage and move to using um firebase instead


19848
23:43:08,320 --> 23:43:11,600
so i want to bring up the caption for the next section of this chapter and


19849
23:43:11,600 --> 23:43:16,640
that's uh that we're going to talk about cloud firestore so if i bring up my


19850
23:43:16,640 --> 23:43:21,040
notes and go to that url that i provided right right there for you


19851
23:43:21,040 --> 23:43:25,512
and bring it up here and you can see here in in here it says


19852
23:43:25,512 --> 23:43:31,040
firestore is a flexible scalable a nosql cloud database to store and sync data


19853
23:43:31,040 --> 23:43:34,552
um the way the way it works i mean you can


19854
23:43:34,552 --> 23:43:38,232
go actually to this link that i've provided for you here and it tells you


19855
23:43:38,232 --> 23:43:41,832
about how you can actually add cloud firestore to your application but i


19856
23:43:41,832 --> 23:43:45,040
believe we've already done that so if i bring our um


19857
23:43:45,040 --> 23:43:49,360
application also to the screen increase the size and we go to our pop


19858
23:43:49,360 --> 23:43:52,552
special and we'll look at our dependencies we're


19859
23:43:52,552 --> 23:43:57,280
at the moment using firebase core firebase auth and um in here also tells


19860
23:43:57,280 --> 23:44:01,120
you you have to use cloud firestore so let's go in here and we can see we've


19861
23:44:01,120 --> 23:44:04,872
already dragged in cloud firestore from one of the absolute absolute earliest


19862
23:44:04,872 --> 23:44:08,400
chapters in this course we've already


19863
23:44:08,400 --> 23:44:12,080
added this dependency to our application so you don't have to do this but if you


19864
23:44:12,080 --> 23:44:17,440
don't have cloud firestore added to your application you may need to do that now


19865
23:44:17,440 --> 23:44:21,192
by following the instructions in this link and if you've if you don't have it


19866
23:44:21,192 --> 23:44:25,680
it's probably because you've missed one of the early chapters in this um


19867
23:44:25,680 --> 23:44:29,440
course so


19868
23:44:29,832 --> 23:44:34,000
we're going to be using the cloud firestore in order to store user


19869
23:44:34,000 --> 23:44:36,800
generated data and in this case our nodes


19870
23:44:36,800 --> 23:44:41,600
now you may be familiar with sql and nosql


19871
23:44:41,600 --> 23:44:44,720
but what i mean what


19872
23:44:44,720 --> 23:44:50,160
i can explain cloud fire stories is that you will have um


19873
23:44:50,160 --> 23:44:55,832
two concepts that you need to understand um which are called um collections and


19874
23:44:55,832 --> 23:45:01,512
the other ones are documents so whereas in traditional sql storage you


19875
23:45:01,512 --> 23:45:06,640
will have hard dependencies and every uh table for instance when we design our


19876
23:45:06,640 --> 23:45:10,960
sqlite database we actually have to design our tables with specific


19877
23:45:10,960 --> 23:45:14,720
layouts inside the table so we have different fields we have


19878
23:45:14,720 --> 23:45:20,000
foreign keys etc so that's like a typical sql relation relational database


19879
23:45:20,000 --> 23:45:24,800
but when you go to node sql for instance firestore then things are more document


19880
23:45:24,800 --> 23:45:27,600
based so for those of you who are doing backend development you already know


19881
23:45:27,600 --> 23:45:30,720
about that for instance so um


19882
23:45:30,720 --> 23:45:35,120
if you're using sequel light then things aren't document based as you would think


19883
23:45:35,120 --> 23:45:38,080
um but when we go to firestore then you


19884
23:45:38,080 --> 23:45:44,232
will have like a lot more looser data definition for your tables and for your


19885
23:45:44,232 --> 23:45:48,800
documents basically so one document inside the same collection can contain


19886
23:45:48,800 --> 23:45:52,552
two fields and the next document can contain three fields so


19887
23:45:52,552 --> 23:45:57,192
that's a lot more open the way it is created with firestar


19888
23:45:57,192 --> 23:46:00,872
so for the entirety of this course from this point on we're going to be


19889
23:46:00,872 --> 23:46:06,080
dependent on firestore in order to use it to store user generated content which


19890
23:46:06,080 --> 23:46:11,192
are notes in our case so let's now talk a little bit about


19891
23:46:11,192 --> 23:46:16,872
production versus test mode um firebase as use firestore as you'll soon see it


19892
23:46:16,872 --> 23:46:19,920
has um different ways


19893
23:46:19,920 --> 23:46:26,160
of allowing you as a developer to interact with your database so


19894
23:46:26,160 --> 23:46:30,080
and there is a thing called a test mode and another caller production mode and


19895
23:46:30,080 --> 23:46:34,080
in test mode and what it means is that as you're developing your application


19896
23:46:34,080 --> 23:46:38,960
which we are for instance at the moment then you may need to for instance open


19897
23:46:38,960 --> 23:46:43,040
up your database um so that you can actually interact


19898
23:46:43,040 --> 23:46:46,960
with it with your from your application without even authenticating a user for


19899
23:46:46,960 --> 23:46:50,232
instance so even if a user is not authenticated you can actually issue


19900
23:46:50,232 --> 23:46:55,280
some commands toward firestore in order to read data delete data


19901
23:46:55,280 --> 23:46:59,680
and and change data so that's that's as you're developing


19902
23:46:59,680 --> 23:47:02,720
your application while you're still working with your authentication but


19903
23:47:02,720 --> 23:47:06,720
remember we've already nailed down the authentication so you cannot actually


19904
23:47:06,720 --> 23:47:10,872
end up in the notes view or the notes list view which is embedded


19905
23:47:10,872 --> 23:47:13,680
inside notes view if you forgot about that


19906
23:47:13,680 --> 23:47:18,320
you cannot end up in there if you haven't authenticated and if you haven't


19907
23:47:18,320 --> 23:47:22,720
verified your email address so we know that in our case we don't actually


19908
23:47:22,720 --> 23:47:27,832
really need to use the test mode of our database with firestore we're kind of


19909
23:47:27,832 --> 23:47:32,872
gonna immediately switch to production mode and what production mode is is for


19910
23:47:32,872 --> 23:47:37,192
instance when you develop your firestore database as you'll soon see in this


19911
23:47:37,192 --> 23:47:39,192
chapter as well um


19912
23:47:39,192 --> 23:47:43,120
you will be able to add some more rules to the database


19913
23:47:43,120 --> 23:47:46,400
so that unauthenticated access to the database


19914
23:47:46,400 --> 23:47:50,800
is going to be denied and this is the kind of like model that we're going to


19915
23:47:50,800 --> 23:47:55,120
be using in the rest of the this course and also almost at the end of this


19916
23:47:55,120 --> 23:47:58,640
course we're also going to add some more rules to


19917
23:47:58,640 --> 23:48:02,480
our firebase uh sorry firestore database so that we make


19918
23:48:02,480 --> 23:48:07,512
it even more explicit who has access to what


19919
23:48:07,512 --> 23:48:10,872
just know that there is a test mode and a production mode test mode is a bit


19920
23:48:10,872 --> 23:48:14,800
looser in terms of um in terms of security but production mode


19921
23:48:14,800 --> 23:48:18,720
is a little bit tighter in that case that it it just tries to


19922
23:48:18,720 --> 23:48:21,832
make sure that on authenticated access to


19923
23:48:21,832 --> 23:48:25,440
uh for instance a document so the user doesn't have access to are going to be


19924
23:48:25,440 --> 23:48:28,000
rejected


19925
23:48:29,120 --> 23:48:32,720
all right we've i've just noticed that i just


19926
23:48:32,720 --> 23:48:37,120
mentioned a few things about rules and you may be wondering about what these


19927
23:48:37,120 --> 23:48:40,080
rules actually are and what they actually mean


19928
23:48:40,080 --> 23:48:44,480
so i've prepared the link here so i'm gonna see if i can actually open it on


19929
23:48:44,480 --> 23:48:47,440
my computer as well so i can bring it to the screen


19930
23:48:47,440 --> 23:48:51,832
here it is okay so these are the rules that i was


19931
23:48:51,832 --> 23:48:55,192
talking about so you see if you're for instance a back-end


19932
23:48:55,192 --> 23:48:59,920
developer like i am you will also be very familiar with deploying your


19933
23:48:59,920 --> 23:49:03,680
application so if you're for instance django developer or node.js with express


19934
23:49:03,680 --> 23:49:08,960
or whatever or flask developer then you are probably used to


19935
23:49:08,960 --> 23:49:12,872
deploying your application to some sort of a cloud


19936
23:49:12,872 --> 23:49:17,280
service and then you will also be


19937
23:49:17,280 --> 23:49:23,600
responsible for specifying how users can interact with your backend and what


19938
23:49:23,600 --> 23:49:29,280
rules are applied on what cases uh firebase since it is not like this


19939
23:49:29,280 --> 23:49:33,440
traditional backend that you have to deploy yourself since it is a product


19940
23:49:33,440 --> 23:49:37,760
that's already there and it's deployed it needs your help in order to


19941
23:49:37,760 --> 23:49:42,552
understand its security rules so as you can see this is a typical firebase


19942
23:49:42,552 --> 23:49:46,232
firestore configuration of a back-end and you can see in here it says the


19943
23:49:46,232 --> 23:49:51,600
service is the firestore service and match these documents at these paths and


19944
23:49:51,600 --> 23:49:56,000
also only allow read and write if the user is


19945
23:49:56,000 --> 23:49:59,192
authenticated so if you're a django developer you already know about like


19946
23:49:59,192 --> 23:50:04,872
requests you also get that you're in django so a request user will contain


19947
23:50:04,872 --> 23:50:08,960
the currently logged in an authenticated user there so that this is very similar


19948
23:50:08,960 --> 23:50:11,760
to that and i'm sorry if i'm talking a little


19949
23:50:11,760 --> 23:50:14,320
bit about back-end development that's just because i'm trying to like make


19950
23:50:14,320 --> 23:50:17,440
this connection for those of you who are back-end developers and trying to learn


19951
23:50:17,440 --> 23:50:21,040
about firebase firestore if you're not a back-end developer just


19952
23:50:21,040 --> 23:50:25,360
know that these security rules are there to help


19953
23:50:25,360 --> 23:50:27,512
you


19954
23:50:28,800 --> 23:50:33,832
they're there to help you secure your database because you see


19955
23:50:33,832 --> 23:50:37,192
the way we've actually generated our application let's go to the source code


19956
23:50:37,192 --> 23:50:41,760
and have a look at it a little bit and when we set up our uh firebase with


19957
23:50:41,760 --> 23:50:46,400
the firebase cli and firestore cli there were some files that were generated for


19958
23:50:46,400 --> 23:50:50,480
us automatically and they were inside this firebase option so


19959
23:50:50,480 --> 23:50:54,552
i'm going to open that for us here and you can see some information in here


19960
23:50:54,552 --> 23:50:58,872
as you can see for android application there is an api key app id messaging


19961
23:50:58,872 --> 23:51:05,192
sender id project id and storage bucket if anybody gets hold of this information


19962
23:51:05,192 --> 23:51:09,360
as you now are going to get hold of this information by watching this course


19963
23:51:09,360 --> 23:51:13,512
you will actually be able to replicate this firebase options. in your own


19964
23:51:13,512 --> 23:51:20,080
application with my api key app id and sender id and interact with the database


19965
23:51:20,080 --> 23:51:24,160
that i'm in control of even though you personally don't have access to that


19966
23:51:24,160 --> 23:51:28,160
database because that database is stored under my


19967
23:51:28,160 --> 23:51:30,320
profile in


19968
23:51:30,320 --> 23:51:34,480
firebase console so using this api key and app id you can


19969
23:51:34,480 --> 23:51:39,192
interact with the database and it is only the security information it's only


19970
23:51:39,192 --> 23:51:42,640
the um authentication information or the


19971
23:51:42,640 --> 23:51:46,400
authentication rules that i specify in my firebase


19972
23:51:46,400 --> 23:51:50,640
config that will then decide who has access to what


19973
23:51:50,640 --> 23:51:55,192
so don't worry also about this i'm going to delete this firebase project actually


19974
23:51:55,192 --> 23:51:59,280
by the time this course is released so i'm completely happy with this


19975
23:51:59,280 --> 23:52:04,552
information being public and shown to you just so you see what i actually mean


19976
23:52:04,552 --> 23:52:07,280
so just know that with various roles that


19977
23:52:07,280 --> 23:52:13,120
we can define on our firebase firestore project we can specify who has access to


19978
23:52:13,120 --> 23:52:17,760
what and based on what rules for instance if the user is authenticated or


19979
23:52:17,760 --> 23:52:23,512
if that user id is actually present in that document's id field for instance so


19980
23:52:23,512 --> 23:52:26,232
something like that


19981
23:52:27,120 --> 23:52:31,040
okay um now what we're gonna do is actually


19982
23:52:31,040 --> 23:52:36,960
start creating a um firestore database for our project so


19983
23:52:36,960 --> 23:52:41,360
uh what i'm gonna do in here is i'm going to bring up safari and i'm gonna


19984
23:52:41,360 --> 23:52:45,920
go to console firebase.com so i suggest that you do the same thing


19985
23:52:45,920 --> 23:52:49,120
change the screen layout a little bit here


19986
23:52:49,120 --> 23:52:52,720
so you see my screen better excuse me


19987
23:52:52,720 --> 23:52:57,512
and then i'm gonna go to our minus flower project so i suggest that you do


19988
23:52:57,512 --> 23:53:00,552
the same thing for your application all right


19989
23:53:00,552 --> 23:53:04,080
so when we end up here then on the left hand side you'll see something called


19990
23:53:04,080 --> 23:53:07,440
firestore database and i want you to click there and just ensure that you've


19991
23:53:07,440 --> 23:53:11,192
selected the correct application in here as well you may have quite a few just


19992
23:53:11,192 --> 23:53:14,800
like i do then what we'll need to do in here and


19993
23:53:14,800 --> 23:53:20,872
it's just to say create database okay and as you can see this is now the


19994
23:53:20,872 --> 23:53:26,000
screen that may look a little bit scary but it's completely fine


19995
23:53:26,000 --> 23:53:30,080
and you can see there are two different modes specified here as we talked about


19996
23:53:30,080 --> 23:53:33,832
production mode and then the other one is test mode


19997
23:53:33,832 --> 23:53:40,720
in production mode the rules by excuse me the rules by default are quite


19998
23:53:40,720 --> 23:53:46,080
um bad as you can see in here it says any document inside the database is


19999
23:53:46,080 --> 23:53:49,832
unaccessible so or inaccessible inaccessible


20000
23:53:49,832 --> 23:53:55,680
it says don't allow read or write because the condition is just false


20001
23:53:55,680 --> 23:53:59,920
so and you can see it says all third party reads and rights will be denied


20002
23:53:59,920 --> 23:54:03,600
but this is really not the um


20003
23:54:03,600 --> 23:54:06,552
this is not how we are going to set up our


20004
23:54:06,552 --> 23:54:10,800
firestore database we as i mentioned before we are going to tighten this up


20005
23:54:10,800 --> 23:54:16,640
quite a lot in in the future but not just right now so i need you go into


20006
23:54:16,640 --> 23:54:21,120
start in test mode and you'll get this absolutely beautiful um


20007
23:54:21,120 --> 23:54:25,600
message saying in um the default security rules for test mode allows


20008
23:54:25,600 --> 23:54:29,832
anyone with your database reference to view and remember database reference i


20009
23:54:29,832 --> 23:54:34,552
mentioned that that's inside this firebase options so that's the reference


20010
23:54:34,552 --> 23:54:38,552
that we're talking about okay so it may sound a little bit abstract but it's


20011
23:54:38,552 --> 23:54:41,920
really not that difficult to understand so


20012
23:54:41,920 --> 23:54:45,120
and it says edit and delete all your database from


20013
23:54:45,120 --> 23:54:50,400
all the data in your database for the next 30 days so okay


20014
23:54:50,400 --> 23:54:54,000
and you can see the rule that has been set up in here says allow read write if


20015
23:54:54,000 --> 23:54:58,480
request time is less than blah blah blah so it's opening up your database


20016
23:54:58,480 --> 23:55:02,800
basically for 30 days it's actually quite intelligent pretty nice okay so i


20017
23:55:02,800 --> 23:55:07,440
need you to do that and remember we're gonna tighten this up soon okay


20018
23:55:07,440 --> 23:55:11,760
and then you can see in here it says allow basically set up a location for


20019
23:55:11,760 --> 23:55:17,360
where your data is going to be stored now there may be some sort of like um


20020
23:55:17,360 --> 23:55:21,680
conflict of interest between like the legal portions of your


20021
23:55:21,680 --> 23:55:25,760
business and also where you want to store your data and where you actually


20022
23:55:25,760 --> 23:55:30,552
feel comfortable doing that but and gdpr definitely makes this even more


20023
23:55:30,552 --> 23:55:34,080
complicated if you're living in europe so


20024
23:55:34,080 --> 23:55:38,640
i mean even if you're living abroad gdpr makes things complicated some websites


20025
23:55:38,640 --> 23:55:43,040
that are hosted in the us are still not accessible by users in the eu


20026
23:55:43,040 --> 23:55:47,440
and this makes things a little bit complicated i'm i'm basically


20027
23:55:47,440 --> 23:55:50,320
in sweden right now so i i prefer to use


20028
23:55:50,320 --> 23:55:53,832
maybe a location that is um


20029
23:55:53,832 --> 23:55:59,600
has something to do with europe and uh i can see europe west while sweden is


20030
23:55:59,600 --> 23:56:04,000
kind of like in the middle so i'm just going to use europe west right now but


20031
23:56:04,000 --> 23:56:08,400
again this isn't so so significant right now it could have


20032
23:56:08,400 --> 23:56:12,160
some speed implications for application depending on where the server actually


20033
23:56:12,160 --> 23:56:16,000
is so it's really good that firebase is giving you the option to choose the


20034
23:56:16,000 --> 23:56:21,192
location of your firestore database so you may want to read more about this


20035
23:56:21,192 --> 23:56:25,680
and you can press learn more in order to read more about this but i'm just going


20036
23:56:25,680 --> 23:56:30,232
to pick europe west just because i believe it it could make more sense for


20037
23:56:30,232 --> 23:56:34,080
me since i am located in sweden so


20038
23:56:34,080 --> 23:56:38,960
choose a location that makes sense for you and then press the enable button


20039
23:56:38,960 --> 23:56:45,360
wow that is a an absolutely horrific looking loading screen


20040
23:56:45,360 --> 23:56:49,512
what that is i mean it's not even centered so that's okay firebase


20041
23:56:49,512 --> 23:56:53,680
remember we're using firebase as a free service so i just want to make sure that


20042
23:56:53,680 --> 23:56:56,872
everybody understands i'm very very thankful for having firebase because


20043
23:56:56,872 --> 23:57:00,872
it's made life a lot easier for me even though i can create my own backends


20044
23:57:00,872 --> 23:57:04,320
but i sometimes still prefer to use firebase so


20045
23:57:04,320 --> 23:57:10,320
um just because it's so it's so easy to use so uh thank you so


20046
23:57:10,320 --> 23:57:15,280
much any anybody who's working on firebase and providing us with free


20047
23:57:15,280 --> 23:57:19,512
services um so


20048
23:57:19,600 --> 23:57:25,120
so let's have a look in here um about in our rules so let me increase the size of


20049
23:57:25,120 --> 23:57:28,960
the screen like this and perhaps also


20050
23:57:28,960 --> 23:57:33,440
increase it like this so you see it better let me see if i can


20051
23:57:33,440 --> 23:57:37,120
perhaps close the section to the left a little


20052
23:57:37,120 --> 23:57:39,920
bit and i probably could actually have done that


20053
23:57:39,920 --> 23:57:43,832
so i'm going to go back in here and press this button to close that section


20054
23:57:43,832 --> 23:57:48,320
all right so what we need to do now is to as the caption indicates we're going


20055
23:57:48,320 --> 23:57:53,512
to change the the security rules in our database


20056
23:57:53,512 --> 23:57:57,280
and i change it so that


20057
23:57:57,440 --> 23:58:03,680
we allow read and write if the user is authenticated


20058
23:58:03,680 --> 23:58:09,040
um so we make sure you as you can see it says request off is not null so let's go


20059
23:58:09,040 --> 23:58:14,400
ahead and change that so i'm gonna remove everything after request


20060
23:58:14,400 --> 23:58:19,440
dot like this and you can see it gives you access to off path resource time


20061
23:58:19,440 --> 23:58:22,872
method so i'm just going to say off is not null


20062
23:58:22,872 --> 23:58:26,800
okay so you can actually bring it to the same


20063
23:58:26,800 --> 23:58:30,400
line as well if you want to so after you've done that you can say


20064
23:58:30,400 --> 23:58:35,680
allow read write if request auth is not all and that literally just means that


20065
23:58:35,680 --> 23:58:40,320
people who are authenticated with our application and they have


20066
23:58:40,320 --> 23:58:45,280
and they have a valid firebase user when they interact with the database are


20067
23:58:45,280 --> 23:58:49,040
allowed to read and write read from and write to the database


20068
23:58:49,040 --> 23:58:53,832
however remember this is database wide at the moment it


20069
23:58:53,832 --> 23:58:57,760
says any document and we still haven't talked about documents so much but i'll


20070
23:58:57,760 --> 23:59:02,400
tell you soon about that but any just imagine anything in your database can be


20071
23:59:02,400 --> 23:59:07,192
read from and written to if the user is logged in and that's not so secure


20072
23:59:07,192 --> 23:59:10,640
because that literally means that i as user one


20073
23:59:10,640 --> 23:59:15,192
and you as user two have access to each other's documents okay even if the


20074
23:59:15,192 --> 23:59:19,440
application itself is like segregating these two documents saying that oh


20075
23:59:19,440 --> 23:59:24,552
you're user one i'm gonna just give you user ones documents but internally as a


20076
23:59:24,552 --> 23:59:29,600
firebase user given our current security um


20077
23:59:29,600 --> 23:59:32,872
rules you will have access to my documents


20078
23:59:32,872 --> 23:59:36,872
even if the application's limiting your access just remember that okay


20079
23:59:36,872 --> 23:59:40,080
so after you've done that i need you to


20080
23:59:40,080 --> 23:59:44,960
please press the publish button so as you can see it says publish


20081
23:59:44,960 --> 23:59:48,000
changes can take up to a minute to take effect and that's all right because


20082
23:59:48,000 --> 23:59:53,120
we're going to actually take more than a minute before we jump into using these


20083
23:59:53,120 --> 23:59:58,232
new rules in our application so okay now


20084
23:59:58,232 --> 00:00:02,720
let's talk about collections here um


20085
00:00:02,720 --> 00:00:08,800
and i've prepared a doc and a link there so let me see if i can find that


20086
00:00:08,800 --> 00:00:12,872
link here as well so as you can see in here there is a


20087
00:00:12,872 --> 00:00:16,000
good documentation that will talk a little bit about collections and


20088
00:00:16,000 --> 00:00:20,720
documents and you could go through this um but i'm not gonna do that right now


20089
00:00:20,720 --> 00:00:24,080
but just so you know here's the link at the bottom of the screen if you want to


20090
00:00:24,080 --> 00:00:28,080
do that i'm going to talk about collections


20091
00:00:28,080 --> 00:00:31,600
personally so you will understand it in my words so


20092
00:00:31,600 --> 00:00:36,832
at this point what we need is just to go to our firebase database


20093
00:00:36,832 --> 00:00:42,080
okay and what you'll see is a screen that kind of looks like this so it has


20094
00:00:42,080 --> 00:00:47,120
your project name in here and then there is a button called start collection okay


20095
00:00:47,120 --> 00:00:52,080
just imagine collection as its name indicates is a group of related objects


20096
00:00:52,080 --> 00:00:56,640
objects could be you could interpret them as tables as you traditionally have


20097
00:00:56,640 --> 00:01:01,440
in your relational databases such as sqlite um


20098
00:01:01,440 --> 00:01:04,480
so a collection just imagine for instance


20099
00:01:04,480 --> 00:01:10,080
if we say what does our application do our application stores nodes for


20100
00:01:10,080 --> 00:01:15,512
all its users so user a has nodes user b has nodes but user c may not have nodes


20101
00:01:15,512 --> 00:01:18,720
so the only thing our application is storing in


20102
00:01:18,720 --> 00:01:25,360
in database right now is notes so that could be its own collection okay so we


20103
00:01:25,360 --> 00:01:29,920
just create a collection called notes and in that collection we're gonna store


20104
00:01:29,920 --> 00:01:33,832
all our notes okay so every user is going to have their own


20105
00:01:33,832 --> 00:01:37,600
notes that's how we are going to do it in this


20106
00:01:37,600 --> 00:01:40,480
course however you as a developer may just


20107
00:01:40,480 --> 00:01:43,760
think i'm going to do it differently what i'm


20108
00:01:43,760 --> 00:01:48,160
going to do is i'm going to create a new collection of notes for every user so


20109
00:01:48,160 --> 00:01:51,680
user a is going to have a collection called user a notes


20110
00:01:51,680 --> 00:01:56,080
user b is going to have user b notes or you may just


20111
00:01:56,080 --> 00:02:01,680
assign create a collection with every user id so you remember we get a user


20112
00:02:01,680 --> 00:02:06,232
identifier from firebase you may decide to you create a collection for every


20113
00:02:06,232 --> 00:02:10,800
user based on their user id okay that's fine but if you're following along with


20114
00:02:10,800 --> 00:02:13,920
this course i strongly suggest actually do it the way i'm doing especially if


20115
00:02:13,920 --> 00:02:18,720
you if you if it's the first time you're doing this if it's if you've done this


20116
00:02:18,720 --> 00:02:21,680
before you may just be comfortable with creating


20117
00:02:21,680 --> 00:02:25,440
another type of collection then be my guest please go ahead but it might then


20118
00:02:25,440 --> 00:02:30,720
be difficult for you later on to follow along with the course


20119
00:02:30,720 --> 00:02:34,552
okay so those are collections


20120
00:02:34,552 --> 00:02:40,640
so let's go ahead and um tap the start collection button in here


20121
00:02:40,640 --> 00:02:45,760
um as you can see in here it says okay this collection is being created in the


20122
00:02:45,760 --> 00:02:50,000
root path and just give me an id and here's a collection set of documents


20123
00:02:50,000 --> 00:02:53,760
that contain data and in here it's storing a collection of


20124
00:02:53,760 --> 00:02:56,400
users but remember we don't have to actually


20125
00:02:56,400 --> 00:03:00,480
store users in our database firebase is already taking care of this i actually


20126
00:03:00,480 --> 00:03:04,320
believe this is a bad example that they provided to ask people to say example


20127
00:03:04,320 --> 00:03:08,960
collection of users because this kind of gives id idea to developers oh now i


20128
00:03:08,960 --> 00:03:14,080
have to store my users here but those users are already stored at the firebase


20129
00:03:14,080 --> 00:03:18,160
level okay so let's go and go ahead in here and


20130
00:03:18,160 --> 00:03:23,760
just say we're storing nodes okay and we're just gonna say next


20131
00:03:23,760 --> 00:03:27,440
and you can see in here now we're getting something called a document


20132
00:03:27,440 --> 00:03:30,552
parent path notes and then it says a document id a


20133
00:03:30,552 --> 00:03:33,920
collection must contain at least one document cloud firestore's unit of


20134
00:03:33,920 --> 00:03:39,440
storage documents store your data as fields auto generate a document or the


20135
00:03:39,440 --> 00:03:44,480
id or customize one if needed okay so


20136
00:03:44,480 --> 00:03:47,832
that that brings us to what documents are


20137
00:03:47,832 --> 00:03:50,320
um a document


20138
00:03:50,320 --> 00:03:55,512
you could look at it as if you're if you know about uh


20139
00:03:55,512 --> 00:03:59,832
sql from before if you followed along with what being and what we've been


20140
00:03:59,832 --> 00:04:04,480
creating like when we looked at db browser for sql lite


20141
00:04:04,480 --> 00:04:08,080
then we had these tables like user and notes


20142
00:04:08,080 --> 00:04:13,440
these uh these are like the schemas of a document


20143
00:04:13,440 --> 00:04:17,440
so as you can see here and here says every note


20144
00:04:17,440 --> 00:04:21,600
is created this way it has an id it has a user id it has a text is synced with


20145
00:04:21,600 --> 00:04:25,600
cloud remember all those fields and it has that's the schema


20146
00:04:25,600 --> 00:04:31,192
in far in the firestore world those are documents so that entire notes


20147
00:04:31,192 --> 00:04:36,080
schema is one document and every field in it then it can have a data type so


20148
00:04:36,080 --> 00:04:38,640
those fields you may know them as columns


20149
00:04:38,640 --> 00:04:42,480
from before when we created our own tables okay so


20150
00:04:42,480 --> 00:04:47,120
if we go back into db browser you may not have this db browser for sql


20151
00:04:47,120 --> 00:04:50,552
light open and that's completely fine we're not gonna actually work with it


20152
00:04:50,552 --> 00:04:55,360
right now you may have you may even have like is toss that database in the trash


20153
00:04:55,360 --> 00:04:58,800
and that's completely fine i just want to show you this um


20154
00:04:58,800 --> 00:05:04,232
that when we created this node table or the node documents then we had different


20155
00:05:04,232 --> 00:05:09,280
fields remember id user id text and those were the exact same things in here


20156
00:05:09,280 --> 00:05:14,552
okay so if i if i go ahead and create a new


20157
00:05:14,552 --> 00:05:19,440
console firebase and have a look at for instance my


20158
00:05:19,440 --> 00:05:25,360
other uh firebase projects i can see i have a notes app and you can here see


20159
00:05:25,360 --> 00:05:30,160
that um the way i had designed this uh in the beginning of this course is i had


20160
00:05:30,160 --> 00:05:34,552
a collection and then every collection had documents in it that had text and


20161
00:05:34,552 --> 00:05:38,800
then user id okay so that's what we're gonna do in here we're just gonna say a


20162
00:05:38,800 --> 00:05:42,800
field of text and it's typed string and it has no


20163
00:05:42,800 --> 00:05:46,800
value okay and then we're gonna add a new field in here and just call it use


20164
00:05:46,800 --> 00:05:51,120
righty okay and then in here it has no value


20165
00:05:51,120 --> 00:05:56,800
either and then a document id that we're just gonna auto generate okay so we just


20166
00:05:56,800 --> 00:06:03,120
pretty much just created a new note okay with a random document id and it has a


20167
00:06:03,120 --> 00:06:07,280
field of text and another field called user id


20168
00:06:07,280 --> 00:06:11,832
great then i need you to press the save button and now you'll see here we have


20169
00:06:11,832 --> 00:06:16,080
our notes collection and inside there we have a document that has these two


20170
00:06:16,080 --> 00:06:20,960
fields okay so what you could do also is to delete


20171
00:06:20,960 --> 00:06:25,600
either a collection or delete a a document so i'm just going to say delete


20172
00:06:25,600 --> 00:06:30,552
document and start delete and as you can see now we have an empty collection


20173
00:06:30,552 --> 00:06:34,720
called nodes i still find this a little bit peculiar


20174
00:06:34,720 --> 00:06:38,080
that when we create a collection firebase


20175
00:06:38,080 --> 00:06:42,400
forces us to create a document inside it like if i go and say start collection


20176
00:06:42,400 --> 00:06:47,760
and then press the next button in here i can't actually save my empty collection


20177
00:06:47,760 --> 00:06:51,760
and it says every let's see here a collection must contain


20178
00:06:51,760 --> 00:06:54,552
at least one document so


20179
00:06:54,552 --> 00:06:57,600
i'm not sure if that's actually true because you can see now we have a


20180
00:06:57,600 --> 00:07:01,920
collection with no document so i'm not sure why that was created why


20181
00:07:01,920 --> 00:07:05,040
that uh rule was set when you create a new


20182
00:07:05,040 --> 00:07:08,552
collection but just know that it's not completely true so you can have a


20183
00:07:08,552 --> 00:07:12,080
collection with no documents all right


20184
00:07:12,960 --> 00:07:18,800
so now let's talk a little about streams of data if you remember from our


20185
00:07:18,800 --> 00:07:25,280
application in if we go to our i think it's called uh


20186
00:07:25,280 --> 00:07:28,552
node service here


20187
00:07:28,552 --> 00:07:33,600
you remember that we have this stream of database nodes as a stream of list of


20188
00:07:33,600 --> 00:07:39,120
database nodes and we call it all nodes in our application up to this point


20189
00:07:39,120 --> 00:07:43,680
we've had to manage these streams manually in that we have to like go


20190
00:07:43,680 --> 00:07:48,232
create a stream controller do this whole dance of um


20191
00:07:48,232 --> 00:07:52,080
unlisten populate the stream controller with the nodes


20192
00:07:52,080 --> 00:07:57,512
you'd be really really happy perhaps to hear that when we go to firebase and


20193
00:07:57,512 --> 00:08:02,232
firestore we don't have to do any of this because firestore


20194
00:08:02,232 --> 00:08:07,360
already has all of this built in in that when you for instance read all the


20195
00:08:07,360 --> 00:08:13,680
documents inside this notes collection that will actually be a stream of those


20196
00:08:13,680 --> 00:08:16,960
uh data points for you so


20197
00:08:16,960 --> 00:08:20,320
no more stream controller and no more streams


20198
00:08:20,320 --> 00:08:24,552
that you have to manage manually okay those will be exposed to your


20199
00:08:24,552 --> 00:08:28,320
application using firestore


20200
00:08:28,552 --> 00:08:32,320
so so as you saw and when i created this


20201
00:08:32,320 --> 00:08:35,920
collection to begin with i created it with


20202
00:08:35,920 --> 00:08:41,440
a note document that had a text and it had a user id field so


20203
00:08:41,440 --> 00:08:45,280
our goal in this chapter and going forward is to make sure that every node


20204
00:08:45,280 --> 00:08:50,872
has a text and it is actually linked to a firebase user using that user's user


20205
00:08:50,872 --> 00:08:53,360
id okay so


20206
00:08:53,360 --> 00:08:58,000
if we go to our application to our auth service so let's


20207
00:08:58,000 --> 00:09:02,960
go to off and then auth service in here and remember we're using firebase auth


20208
00:09:02,960 --> 00:09:06,872
provider so let's go in there and you can see that


20209
00:09:06,872 --> 00:09:11,280
when we say create user with email and password for instance then this function


20210
00:09:11,280 --> 00:09:15,512
returned something called user credential to us and user credential


20211
00:09:15,512 --> 00:09:19,040
actually has quite a few properties you can see it has a credential and it has a


20212
00:09:19,040 --> 00:09:23,832
user inside it of type user so if you go into that user you can see it has


20213
00:09:23,832 --> 00:09:28,232
different properties like display name email email verified metadata phone


20214
00:09:28,232 --> 00:09:33,832
number etc but this user also has something called a user's unique id


20215
00:09:33,832 --> 00:09:41,192
which we actually need in order to store notes into our collect notes collection


20216
00:09:41,192 --> 00:09:44,640
so and this is what i mean every document


20217
00:09:44,640 --> 00:09:47,760
that we create is for instance going to be node some


20218
00:09:47,760 --> 00:09:51,680
random id or something which we haven't decided yet and one of the fields let me


20219
00:09:51,680 --> 00:09:56,000
actually see if i can resize uh this safari window so you see it better so


20220
00:09:56,000 --> 00:09:59,120
it's going to have a text and the text is going to be generated by the user but


20221
00:09:59,120 --> 00:10:03,440
it's going to also have a field called user id okay so in this user id field we


20222
00:10:03,440 --> 00:10:07,040
actually need to store that user's gener


20223
00:10:07,040 --> 00:10:10,800
firebase generated id in there okay and


20224
00:10:10,800 --> 00:10:14,640
now going back to what we are doing with that user do you


20225
00:10:14,640 --> 00:10:20,720
remember we're not actually um exposing the firebase user to our application and


20226
00:10:20,720 --> 00:10:24,160
that's a great level of abstraction however we have a little bit of a


20227
00:10:24,160 --> 00:10:29,832
problem in that right now our user has email and is email verified it doesn't


20228
00:10:29,832 --> 00:10:34,552
actually have a unique id so our application is not going to be able to


20229
00:10:34,552 --> 00:10:39,680
associate new notes with an auth user


20230
00:10:39,680 --> 00:10:44,800
it's not going to be able to associate a new note with a user id okay


20231
00:10:44,800 --> 00:10:48,720
so we need to fix that so i'm just going to go to my notes a little bit in here


20232
00:10:48,720 --> 00:10:54,400
and what we need is to update our auth user as you can see in


20233
00:10:54,400 --> 00:10:58,480
here so in auth user.dart file as i've opened in


20234
00:10:58,480 --> 00:11:01,760
here and what we need is to add a new field


20235
00:11:01,760 --> 00:11:06,000
which is a required field and we need to make that


20236
00:11:06,000 --> 00:11:10,720
the id of that user okay


20237
00:11:10,872 --> 00:11:14,872
so let's go ahead and do that now so i'm just going to go ahead and say final


20238
00:11:14,872 --> 00:11:20,000
string and id so this field is not optional


20239
00:11:20,000 --> 00:11:25,680
here you see every user that comes into our application should have an id and


20240
00:11:25,680 --> 00:11:30,480
that's like the expectation that we have on our off users okay so i need you to


20241
00:11:30,480 --> 00:11:34,480
go ahead and add that please here of user class as well


20242
00:11:34,480 --> 00:11:40,000
let's then go in here and i'm going to add this um to um


20243
00:11:40,000 --> 00:11:43,920
the required fields i can see visual studio code wasn't able to actually meet


20244
00:11:43,920 --> 00:11:47,760
this required parameter i'm going to help visual studio code and


20245
00:11:47,760 --> 00:11:51,280
do that i'm just going to say required this id and i need you to do the same


20246
00:11:51,280 --> 00:11:55,832
thing please so now we have a problem in here in that


20247
00:11:55,832 --> 00:12:02,720
our auth user in here doesn't have an id where we created from firebase user


20248
00:12:02,720 --> 00:12:08,480
let's go and remedy that let's just say the id in here is the user uid remember


20249
00:12:08,480 --> 00:12:13,120
this uh parameter that i uh talked to you about okay


20250
00:12:13,120 --> 00:12:18,320
so that is now created and let me actually go to scrcpy i can see that


20251
00:12:18,320 --> 00:12:21,360
visual studio code has a little bit of problem hot reloading right now so


20252
00:12:21,360 --> 00:12:25,280
that's because probably the application wasn't in the foreground so that's fixed


20253
00:12:25,280 --> 00:12:28,480
now talking about scr cpy it's perhaps a


20254
00:12:28,480 --> 00:12:32,480
good idea for me to bring in crcpy here just to make sure that we're not


20255
00:12:32,480 --> 00:12:37,920
bringing and breaking anything okay so


20256
00:12:37,920 --> 00:12:41,192
so that's one change that we have to make to our auto user the other change


20257
00:12:41,192 --> 00:12:45,360
that we have to make is to make sure that the email parameter of our user is


20258
00:12:45,360 --> 00:12:48,400
not optional you see the way we are creating at the


20259
00:12:48,400 --> 00:12:50,720
moment are um


20260
00:12:50,720 --> 00:12:56,320
our application is that we've created the login process of a use email and


20261
00:12:56,320 --> 00:13:00,080
password authentication so we don't have like facebook authentication or google


20262
00:13:00,080 --> 00:13:03,040
authentication we only have username and password


20263
00:13:03,040 --> 00:13:08,232
sorry email and password so given that condition we can be sure that


20264
00:13:08,232 --> 00:13:11,832
every authenticated user in our application actually has an email


20265
00:13:11,832 --> 00:13:14,872
address okay so


20266
00:13:14,872 --> 00:13:20,160
let's go ahead and just say that email is not an optional field anymore and in


20267
00:13:20,160 --> 00:13:24,800
here we're going to explicitly unwrap that email all right so that's another


20268
00:13:24,800 --> 00:13:32,640
change that we made to our application so now that we've done that you can see


20269
00:13:32,640 --> 00:13:36,720
flutter is not so happy with those changes saying that well yeah you broke


20270
00:13:36,720 --> 00:13:41,120
something and it's our tests that have been broken


20271
00:13:41,120 --> 00:13:45,760
so as you can see uh we need to make sure that id is actually included in our


20272
00:13:45,760 --> 00:13:50,000
tests as well and since we're not actually creating a


20273
00:13:50,000 --> 00:13:55,120
specific test for that user id we can just add a random id in here


20274
00:13:55,120 --> 00:14:00,000
let's just say my id okay and i'm going to bring that and


20275
00:14:00,000 --> 00:14:05,512
bring it down here as well so we have an id field in both cases of auth user


20276
00:14:05,512 --> 00:14:08,800
inside our tests


20277
00:14:09,360 --> 00:14:12,480
okay now we have another problem as you can see


20278
00:14:12,480 --> 00:14:15,512
in the captions in our create update note view


20279
00:14:15,512 --> 00:14:20,960
we are unwrapping the user's email and that's what this little orange views um


20280
00:14:20,960 --> 00:14:25,192
folder is it's not red meaning that


20281
00:14:25,192 --> 00:14:29,920
well yeah it's not an error but it's a warning so let's go to this create


20282
00:14:29,920 --> 00:14:33,600
update note view and have a look at this uh


20283
00:14:33,600 --> 00:14:38,160
field in here as you can see we're in inside the get a create or get existing


20284
00:14:38,160 --> 00:14:42,400
note and we are unwrapping this email but


20285
00:14:42,400 --> 00:14:46,400
right now the warning is saying what is it saying the uh uh


20286
00:14:46,400 --> 00:14:50,480
asterisk will have no effect because the receiver can't be not try removing the


20287
00:14:50,480 --> 00:14:54,800
asterisk operator and i need you to do that please


20288
00:14:54,800 --> 00:14:58,552
we have another problem also we have another warning inside the notes of you


20289
00:14:58,552 --> 00:15:01,360
and i believe we're doing something similar in the notes view so let's see


20290
00:15:01,360 --> 00:15:05,360
if you can find a warning [Music]


20291
00:15:05,360 --> 00:15:08,400
where is the warning


20292
00:15:08,720 --> 00:15:12,872
i actually don't oh here we have the user email in here as well so i'm just


20293
00:15:12,872 --> 00:15:17,192
going to remove the asterisk after that so i need you to do the same thing


20294
00:15:17,192 --> 00:15:20,192
please


20295
00:15:20,480 --> 00:15:23,360
okay now we're gonna get to the juicy parts


20296
00:15:23,360 --> 00:15:28,480
of the uh cloud storage integration so i'm clean i'm basically removing all the


20297
00:15:28,480 --> 00:15:32,872
file all the dart um tabs from here i'm actually not deleting the files i'm


20298
00:15:32,872 --> 00:15:36,080
removing like that tab so it's a clean slate


20299
00:15:36,080 --> 00:15:40,480
then what we need is to um create


20300
00:15:40,480 --> 00:15:44,960
all our cloud storage exceptions you see if you remember from when we worked with


20301
00:15:44,960 --> 00:15:51,192
our quad service which is a node service then we also had a file under the croth


20302
00:15:51,192 --> 00:15:55,360
folder called crowd exceptions and in here we define all the different things


20303
00:15:55,360 --> 00:16:00,080
that could go wrong when the user is working with our node service now that


20304
00:16:00,080 --> 00:16:05,680
we're moving away from crud we need to have our new exceptions defined


20305
00:16:05,680 --> 00:16:09,192
somewhere and and


20306
00:16:09,192 --> 00:16:11,680
as you can see in the cache just like we had the crowd exceptions we're also


20307
00:16:11,680 --> 00:16:15,120
going to have some exceptions thrown by our new fire


20308
00:16:15,120 --> 00:16:19,440
firestore service which we haven't developed yet but we need to define


20309
00:16:19,440 --> 00:16:24,160
those exceptions at least okay so


20310
00:16:24,160 --> 00:16:28,160
what we need now is to go and create that file so i need you to please create


20311
00:16:28,160 --> 00:16:34,080
a file under lib services cloud and then create that file as cloud


20312
00:16:34,080 --> 00:16:38,080
storage exception so i'm going to do that as well so let's


20313
00:16:38,080 --> 00:16:41,600
see i'm going to fold all the folders in here


20314
00:16:41,600 --> 00:16:46,400
so we have lib services and then cloud you can see we don't have cloud at the


20315
00:16:46,400 --> 00:16:51,120
moment so we do have services and we have off in there and crowd so i'm gonna


20316
00:16:51,120 --> 00:16:55,600
right click on services and say new file and then in here i'm just gonna say


20317
00:16:55,600 --> 00:16:59,600
cloud and then slash cloud storage


20318
00:16:59,600 --> 00:17:04,080
exceptions.dart okay


20319
00:17:04,080 --> 00:17:08,552
so after the creation of that file


20320
00:17:08,552 --> 00:17:13,040
i'm going to remove the project explorer there as well what we need then is to


20321
00:17:13,040 --> 00:17:17,920
define a super class for all our cl cloud


20322
00:17:17,920 --> 00:17:20,552
exceptions if you remember from the crowd


20323
00:17:20,552 --> 00:17:24,552
exceptions that we created in here all those exceptions were actually of


20324
00:17:24,552 --> 00:17:28,480
type exception and that's one way of doing that however


20325
00:17:28,480 --> 00:17:32,080
if you want to group your exceptions under one


20326
00:17:32,080 --> 00:17:34,320
super exception


20327
00:17:34,320 --> 00:17:39,040
and you could then handle them quite smoothly or better


20328
00:17:39,040 --> 00:17:41,760
actually i would say in


20329
00:17:41,760 --> 00:17:46,720
at the call site and so that basically is going to use inheritance and then you


20330
00:17:46,720 --> 00:17:50,800
and we are going to create a new exception as you can see


20331
00:17:50,800 --> 00:17:55,680
here called cloud storage exception and all our cloud exceptions are going to be


20332
00:17:55,680 --> 00:18:00,160
of that type so makes grouping and catching these exceptions in the future


20333
00:18:00,160 --> 00:18:05,920
a lot easier okay so let's go ahead and


20334
00:18:05,920 --> 00:18:11,192
create our first exception it is called i can see it's called cloud storage


20335
00:18:11,192 --> 00:18:14,080
exception so let's go ahead and say clouds and


20336
00:18:14,080 --> 00:18:21,040
class cloud storage exception and implements exception


20337
00:18:21,040 --> 00:18:24,640
okay and we're also going to create a


20338
00:18:24,640 --> 00:18:29,680
constant constructor for it so it makes creating instance of this a lot easier


20339
00:18:29,680 --> 00:18:35,192
and you could also basically say that this is um an


20340
00:18:35,192 --> 00:18:39,360
immutable class meaning that this class and all its subclasses need to be


20341
00:18:39,360 --> 00:18:43,832
immutable you could do that all right that's fine as well but usually


20342
00:18:43,832 --> 00:18:47,512
exceptions aren't marked with this it's usually data classes that are marked


20343
00:18:47,512 --> 00:18:52,160
with immutable so i'm not gonna do that right now


20344
00:18:53,040 --> 00:18:57,440
okay that thing is done um


20345
00:18:57,512 --> 00:19:01,512
now so that's the parent exception we should try not to throw that exception


20346
00:19:01,512 --> 00:19:06,232
as it is we have to throw subclass subclasses of that exception okay


20347
00:19:06,232 --> 00:19:09,280
now the first exception that we're going to


20348
00:19:09,280 --> 00:19:13,360
define is could not create node exception i believe it's called yes and


20349
00:19:13,360 --> 00:19:20,640
we're going to throw this in our to be written a class soon uh upon you


20350
00:19:20,640 --> 00:19:25,280
trying to create a new note if firebase firestore is not able to actually create


20351
00:19:25,280 --> 00:19:28,160
that note then we're gonna throw this error okay


20352
00:19:28,160 --> 00:19:34,400
so i'm gonna then define that exception and you will need to type this then um i


20353
00:19:34,400 --> 00:19:38,232
just brought it from my notes


20354
00:19:38,800 --> 00:19:44,160
now also in this screen where we have all the notes displayed for a given user


20355
00:19:44,160 --> 00:19:47,920
we may also not be able to retrieve all the notes for that user for instance if


20356
00:19:47,920 --> 00:19:51,832
there is a network connection issue or whatever whatever other issues that may


20357
00:19:51,832 --> 00:19:54,232
arise so we need to have an exception for that


20358
00:19:54,232 --> 00:19:58,400
as well and that exception is called could not get all nodes exception okay


20359
00:19:58,400 --> 00:20:03,512
so let's define that as well and it's written just like could not get


20360
00:20:03,512 --> 00:20:07,440
all notes exceptions exception


20361
00:20:07,760 --> 00:20:12,480
the next exception that we have to define is called a could not update


20362
00:20:12,480 --> 00:20:17,360
nodes so we have create node exception get node exception and now we're on the


20363
00:20:17,360 --> 00:20:23,120
u part of crot so you see the


20364
00:20:23,120 --> 00:20:31,040
create part is a c in crud gets is r and now we're looking at you okay


20365
00:20:31,040 --> 00:20:36,640
and that is uh could not update node exception so


20366
00:20:36,640 --> 00:20:40,232
so we could say this is um


20367
00:20:40,232 --> 00:20:44,640
you in crud and the get


20368
00:20:44,640 --> 00:20:51,680
is r in crop and create a c in crud okay and so we


20369
00:20:51,680 --> 00:20:55,360
have c r u and then we have to define d


20370
00:20:55,360 --> 00:21:00,400
which is for delete infrared and that's exactly what we're going to


20371
00:21:00,400 --> 00:21:05,680
do now so let's go define could not delete node exception all right so


20372
00:21:05,680 --> 00:21:10,960
let's then say be in crop okay so now we have


20373
00:21:10,960 --> 00:21:16,552
um three four uh exceptions defined and all of those exceptions are uh


20374
00:21:16,552 --> 00:21:21,280
inheriting from cloud storage exception


20375
00:21:22,872 --> 00:21:26,400
okay um now that we've talked about the


20376
00:21:26,400 --> 00:21:30,552
exceptions we also have to talk about the actual cloud storage service you see


20377
00:21:30,552 --> 00:21:34,640
we have our quad service at the moment which we've been working quite a lot


20378
00:21:34,640 --> 00:21:38,960
with and we're very proud of it actually it's a lot of code in my implementation


20379
00:21:38,960 --> 00:21:45,600
at least in here we have about 360 lines of code


20380
00:21:45,600 --> 00:21:49,760
i mean it's not all code there there's also spaces there's like


20381
00:21:49,760 --> 00:21:53,680
i think there are some annotations like immutable etc but there's quite a lot of


20382
00:21:53,680 --> 00:21:56,960
code okay and there's a print statement in here which i actually have to remove


20383
00:21:56,960 --> 00:21:59,512
okay so


20384
00:21:59,512 --> 00:22:03,440
there's quite a lot of code and this is working with sql lite but we also need a


20385
00:22:03,440 --> 00:22:07,120
service that works with firebase firestore


20386
00:22:07,120 --> 00:22:12,320
so we need to create that service soon so just know that we are going to have


20387
00:22:12,320 --> 00:22:15,920
crud in here which is going to talk with sqlite


20388
00:22:15,920 --> 00:22:19,512
but we're moving actually away from it so


20389
00:22:19,512 --> 00:22:23,360
let's then fix that um


20390
00:22:23,360 --> 00:22:27,600
so let's go in here and have a look at our constants


20391
00:22:27,600 --> 00:22:31,512
and if you look at our node servicing here


20392
00:22:31,512 --> 00:22:36,640
and we have our constants in here we have routes and at


20393
00:22:36,640 --> 00:22:42,320
the end of node service we have some constants defined right in this class


20394
00:22:42,320 --> 00:22:46,720
or right in this dart file and some people may like this but i


20395
00:22:46,720 --> 00:22:51,360
personally prefer to have my constants defined in separate files even though


20396
00:22:51,360 --> 00:22:56,320
these constants are very related only to this file but just


20397
00:22:56,320 --> 00:23:00,400
making them putting them in separate places just makes it easier to look at


20398
00:23:00,400 --> 00:23:04,160
because these constants at the moment like hidden at the bottom very bottom of


20399
00:23:04,160 --> 00:23:07,832
this file so let's go ahead and define our


20400
00:23:07,832 --> 00:23:11,440
constants so let's have a look at the path it's going to be in services cloud


20401
00:23:11,440 --> 00:23:17,192
and then cloud storage constants on the services now we have cloud


20402
00:23:17,192 --> 00:23:22,552
and under cloud we have cloud storage exceptions i think exceptions yep now we


20403
00:23:22,552 --> 00:23:28,160
have to define cloud storage constants so new file cloud storage


20404
00:23:28,160 --> 00:23:32,552
constants dart and


20405
00:23:32,552 --> 00:23:35,120
i'm going to go to my notes [Music]


20406
00:23:35,120 --> 00:23:39,680
constants all right now if you remember from our note series


20407
00:23:39,680 --> 00:23:44,400
we define like the tables and excuse me


20408
00:23:44,400 --> 00:23:50,320
and we defined the tables the columns and and even the format of creating new


20409
00:23:50,320 --> 00:23:54,872
tables we don't really need these all we need are these two fields as you


20410
00:23:54,872 --> 00:24:00,232
remember the text and also we need a field for user


20411
00:24:00,232 --> 00:24:03,120
id like this


20412
00:24:03,192 --> 00:24:08,480
so let's define these let's just say owner user id so let's go in here and


20413
00:24:08,480 --> 00:24:15,280
say const increase the size owner user


20414
00:24:15,280 --> 00:24:23,192
id is just user id like this and then we're gonna say const text field name


20415
00:24:23,192 --> 00:24:28,080
excuse me so i need you to define these two fields as well for your application


20416
00:24:28,080 --> 00:24:32,160
okay so let's go back to the original font


20417
00:24:32,160 --> 00:24:36,000
size in there so


20418
00:24:36,000 --> 00:24:39,360
now that we've defined that if you remember from our note service we had


20419
00:24:39,360 --> 00:24:43,760
these beautiful classes in here a call called a database node and a database


20420
00:24:43,760 --> 00:24:47,600
user now given that we're moving away from


20421
00:24:47,600 --> 00:24:51,040
storing things and notes inside the sqlite


20422
00:24:51,040 --> 00:24:54,960
database and we're moving to towards a firestore um


20423
00:24:54,960 --> 00:24:58,640
databases we actually don't need a database user


20424
00:24:58,640 --> 00:25:02,000
anymore but we do need some sort of a class that


20425
00:25:02,000 --> 00:25:07,280
represents these documents that we're going to create in here okay and


20426
00:25:07,280 --> 00:25:11,512
what we are going to call that is called a cloud node


20427
00:25:11,512 --> 00:25:15,600
so let's go ahead you see here is called a database node so then you kind of know


20428
00:25:15,600 --> 00:25:19,832
that it is a local database maybe you could rename this local database node if


20429
00:25:19,832 --> 00:25:23,120
you want to but i'm not going to do that simply because we're moving away from


20430
00:25:23,120 --> 00:25:27,040
this so what's the point of refactoring it so


20431
00:25:27,040 --> 00:25:31,360
i'm going to close node service so then let's go ahead and create a new file


20432
00:25:31,360 --> 00:25:36,800
called cloud note dart under services lib services cloud


20433
00:25:36,800 --> 00:25:41,600
and i'm going to call it cloud underscore node.dark


20434
00:25:41,600 --> 00:25:47,280
in here now what we need to do is actually implement cloud nodes


20435
00:25:47,600 --> 00:25:50,640
excuse me so


20436
00:25:50,640 --> 00:25:55,040
what a cloud node actually is going to contain there are three properties that


20437
00:25:55,040 --> 00:25:59,920
the cloud node has to contain and they're namely the


20438
00:25:59,920 --> 00:26:04,640
actual identifier of that node and i apologize i actually have to put myself


20439
00:26:04,640 --> 00:26:10,320
into do not disturb so so


20440
00:26:10,640 --> 00:26:14,232
there are three things a cloud node has to contain


20441
00:26:14,232 --> 00:26:19,512
one is the actual like primary key of that note in our database every document


20442
00:26:19,512 --> 00:26:24,800
that is generated by firebase is going to have a unique id if you're


20443
00:26:24,800 --> 00:26:27,832
coming from like backend development then you're already familiar with this


20444
00:26:27,832 --> 00:26:32,160
for instance django has this idea of a pk which is primary key you can also


20445
00:26:32,160 --> 00:26:35,680
read it as id so everything that's stored in the database has some sort of


20446
00:26:35,680 --> 00:26:40,080
a primary key firestore is no different so every


20447
00:26:40,080 --> 00:26:43,832
document that is created inside a firestore database is also going to have


20448
00:26:43,832 --> 00:26:47,512
a primary key okay so that's the first property that our


20449
00:26:47,512 --> 00:26:52,960
cloud node is going to contain the other two are very familiar because


20450
00:26:52,960 --> 00:26:57,512
you saw here in the documents we're gonna have a text field and the other


20451
00:26:57,512 --> 00:27:01,280
one is like the owner user id so there are three fields that we have to add to


20452
00:27:01,280 --> 00:27:05,760
our class so let's go ahead and do that let's just say


20453
00:27:05,760 --> 00:27:11,832
um if i can type here so class sorry i have a microphone right


20454
00:27:11,832 --> 00:27:16,000
in front of my face like it's blocking my keyboard so that's sometimes that's


20455
00:27:16,000 --> 00:27:20,000
why i have to like look like this just to find my keyboard


20456
00:27:20,000 --> 00:27:23,040
so let's say cloud node um


20457
00:27:23,040 --> 00:27:26,960
and inside our cloud node let's define these three properties so let's just say


20458
00:27:26,960 --> 00:27:31,832
final string document id okay


20459
00:27:31,832 --> 00:27:36,552
and i'm going to copy the string here as well and say owner user id and then


20460
00:27:36,552 --> 00:27:41,512
we're going to say text okay help from visual studio code to


20461
00:27:41,512 --> 00:27:45,680
implement the constructor and um in here then i'm going to say


20462
00:27:45,680 --> 00:27:50,000
this is a constant constructor okay as i said you could actually go and define


20463
00:27:50,000 --> 00:27:53,040
this as immutable which i actually prefer in this case to be honest with


20464
00:27:53,040 --> 00:27:56,160
you i hadn't i hadn't planned to make this immutable but i think actually


20465
00:27:56,160 --> 00:28:01,832
makes sense if it's a cloud node then let's just say it's immutable okay


20466
00:28:02,160 --> 00:28:07,440
so that's that's the first part and i also know that we need to make these


20467
00:28:07,440 --> 00:28:11,512
required parameters so let's go ahead and do that let's just say required


20468
00:28:11,512 --> 00:28:16,400
before all of these parameters okay so that they're actually required named


20469
00:28:16,400 --> 00:28:20,400
parameters that are not optional basically


20470
00:28:20,400 --> 00:28:25,440
okay that's that if you look at how our database nodes


20471
00:28:25,440 --> 00:28:31,120
let's see if we can find database node inside nodes service


20472
00:28:32,320 --> 00:28:36,640
so let's have a look at database node do you remember that we had these fields


20473
00:28:36,640 --> 00:28:41,680
but we're pretty much never calling this database nodes a constructor we're


20474
00:28:41,680 --> 00:28:44,960
always using this thing database node from row


20475
00:28:44,960 --> 00:28:49,192
and this is basically the object you just see this map is the object that


20476
00:28:49,192 --> 00:28:53,600
we're reading from our sqlite database and crew and then we're internally


20477
00:28:53,600 --> 00:28:59,280
creating instances of our database node from that object okay


20478
00:28:59,280 --> 00:29:02,960
so this kind of map is what you will also


20479
00:29:02,960 --> 00:29:07,360
receive from firestore


20480
00:29:07,360 --> 00:29:11,280
however it's going to be wrapped inside something called a query document


20481
00:29:11,280 --> 00:29:17,360
snapshot so it's just a wrapper around your data so


20482
00:29:17,360 --> 00:29:22,000
let's go ahead in here and and what we're going to say is if you just type


20483
00:29:22,000 --> 00:29:27,440
query document snapshot then visual studio code is going to import


20484
00:29:27,440 --> 00:29:33,040
this automatically for you okay so then it should be imported in here so


20485
00:29:33,040 --> 00:29:37,600
that's great and also we need our um


20486
00:29:37,600 --> 00:29:41,920
cloud storage constants so let's go and import those as well so let's just say


20487
00:29:41,920 --> 00:29:47,280
package and my nodes and we have uh what do we have


20488
00:29:47,280 --> 00:29:51,832
where is this stored inside services cloud so services cloud


20489
00:29:51,832 --> 00:29:56,232
constant or sorry cloud storage constants so


20490
00:29:56,232 --> 00:30:01,512
you need cloud firestore dart and then your constants as well


20491
00:30:01,512 --> 00:30:05,920
let's go ahead and create kind of like a constructor that we are going to call


20492
00:30:05,920 --> 00:30:11,680
from snapshot and this constructor is going to allow firestore to give us a


20493
00:30:11,680 --> 00:30:15,920
snapshot of it and cloud nodes and then we're going to create an instance of our


20494
00:30:15,920 --> 00:30:21,600
cloud node from that okay so let's just say cloud node from


20495
00:30:21,600 --> 00:30:26,400
from snapshot and parameter is going to be query


20496
00:30:26,400 --> 00:30:32,000
document snapshot that has that map that we actually need


20497
00:30:32,000 --> 00:30:36,480
like this and we're going to call it snapshot like that okay


20498
00:30:36,480 --> 00:30:39,280
so now you can see that we're getting some


20499
00:30:39,280 --> 00:30:43,440
errors from um from dart saying all final variables


20500
00:30:43,440 --> 00:30:46,080
need to be initialized and a function body must be provided okay we're going


20501
00:30:46,080 --> 00:30:52,080
to fix it soon so this is this is the um signature of your function then in here


20502
00:30:52,080 --> 00:30:56,960
your job now is to make sure that all your fields are initialized so let's


20503
00:30:56,960 --> 00:31:01,040
let's just say if i can type again document id


20504
00:31:01,040 --> 00:31:06,872
it comes from our snapshot id that's a property that is stored on this


20505
00:31:06,872 --> 00:31:10,400
at the snapshot level so you can get that id okay


20506
00:31:10,400 --> 00:31:14,480
and what we're going to say is that we have an owner user id that we also have


20507
00:31:14,480 --> 00:31:18,552
to fill in so that comes from the snapshot


20508
00:31:18,552 --> 00:31:21,600
uh snap shot


20509
00:31:21,600 --> 00:31:24,800
data and in there then we have to say the


20510
00:31:24,800 --> 00:31:29,832
owner user id field name let's see owner user


20511
00:31:29,832 --> 00:31:32,160
id


20512
00:31:32,400 --> 00:31:36,552
under user id let's call this field name so sorry about that let's go back to the


20513
00:31:36,552 --> 00:31:40,872
cloud storage constants and fix this to say owner user id field name actually


20514
00:31:40,872 --> 00:31:43,192
okay


20515
00:31:43,360 --> 00:31:47,680
so we missed that but that's okay it's just a naming change so


20516
00:31:47,680 --> 00:31:50,720
then we're gonna say owner user id field name


20517
00:31:50,720 --> 00:31:55,600
so that's for the owner user id and we're going to get the text which


20518
00:31:55,600 --> 00:32:00,080
is equal to snapshot dot data


20519
00:32:00,080 --> 00:32:05,040
and text field name as string


20520
00:32:05,120 --> 00:32:09,512
okay so what we have is a beautiful cloud node immutable class with a


20521
00:32:09,512 --> 00:32:15,360
constant constructor and also we get this snapshot um query document snapshot


20522
00:32:15,360 --> 00:32:20,320
from firestore soon and we can create instances of our cloud nodes as you'll


20523
00:32:20,320 --> 00:32:23,640
soon see


20524
00:32:23,832 --> 00:32:29,920
all right now what we need um is to create our new cloud firestore


20525
00:32:29,920 --> 00:32:35,360
service so this is like the beginning of moving


20526
00:32:35,360 --> 00:32:41,920
away from cloud storage into firestore so this is actually very exciting and a


20527
00:32:41,920 --> 00:32:45,600
little bit um a little bit intimidating maybe at first


20528
00:32:45,600 --> 00:32:49,512
because well we kind of have to like redo quite a lot of work


20529
00:32:49,512 --> 00:32:54,232
but given that firestore provides you with pretty much all the tools that you


20530
00:32:54,232 --> 00:32:57,600
need as you'll soon see the implementations of the functions that


20531
00:32:57,600 --> 00:33:02,800
we're gonna that we're gonna do are so minimal because the base is there fire


20532
00:33:02,800 --> 00:33:06,640
stores already provided the base we just have to hook into it and grab the data


20533
00:33:06,640 --> 00:33:11,120
write the data etc so so let's close all these tabs that we


20534
00:33:11,120 --> 00:33:16,232
have at the moment excuse me and let's go to this um


20535
00:33:16,232 --> 00:33:20,800
services cloud and create our new firebase cloud storage dart file


20536
00:33:20,800 --> 00:33:26,232
firebase cloud storage dart


20537
00:33:26,800 --> 00:33:30,960
all right so i'm actually going to do that as well so


20538
00:33:30,960 --> 00:33:34,800
firebase cloud storage


20539
00:33:34,800 --> 00:33:39,680
in my notes all right so let's go ahead and say we have a new


20540
00:33:39,680 --> 00:33:45,192
class called firebase cloud storage like that


20541
00:33:45,192 --> 00:33:49,512
at the moment it doesn't do really anything but what we need to do uh is to


20542
00:33:49,512 --> 00:33:52,800
make uh make this a shared instance


20543
00:33:52,800 --> 00:33:56,400
and i'm gonna bring the caption for that and


20544
00:33:56,400 --> 00:34:00,480
if you remember we've already made our node service


20545
00:34:00,480 --> 00:34:02,720
a


20546
00:34:03,120 --> 00:34:06,480
a singleton so let's go back to our node service


20547
00:34:06,480 --> 00:34:10,480
command p on macintosh and visual studio code or control p in


20548
00:34:10,480 --> 00:34:15,120
windows and linux to bring up this search files by name field and i'm just


20549
00:34:15,120 --> 00:34:19,512
going to say note service if you remember inside note service i


20550
00:34:19,512 --> 00:34:23,440
think at the top we had this pattern


20551
00:34:23,440 --> 00:34:26,960
for creating a singleton do you remember this


20552
00:34:26,960 --> 00:34:32,400
right so we kind of need or sorry this part we


20553
00:34:32,400 --> 00:34:36,400
kind of need the same thing not kind of actually pretty much exactly


20554
00:34:36,400 --> 00:34:40,552
the same thing except for this part because this talks with a stream


20555
00:34:40,552 --> 00:34:45,920
controller so i find this pattern of creating singletons in dart still quite


20556
00:34:45,920 --> 00:34:49,920
hacky i think i've mentioned this before when we created the node service


20557
00:34:49,920 --> 00:34:53,920
but it's something that we have to do so make sure our firebase cloud storage is


20558
00:34:53,920 --> 00:34:58,800
actually a singleton okay so i'm gonna bring that code from my notes because i


20559
00:34:58,800 --> 00:35:02,800
don't think it's actually worth writing this and it's not worth your time or my


20560
00:35:02,800 --> 00:35:06,480
time but this is what you need to create so


20561
00:35:06,480 --> 00:35:10,720
what is happening in here is that we have a private constructor


20562
00:35:10,720 --> 00:35:13,760
then we're going to create a factory constructor which is the default


20563
00:35:13,760 --> 00:35:18,160
constructor of our of our class firebase cloud storage right here


20564
00:35:18,160 --> 00:35:23,360
and that is going to talk with a static final field which in turn calls this


20565
00:35:23,360 --> 00:35:26,400
private initializer so


20566
00:35:26,400 --> 00:35:33,512
in um in other languages like swift and rust it's it's a lot easier to create a


20567
00:35:33,512 --> 00:35:36,552
singleton but this is a pattern you have to do so


20568
00:35:36,552 --> 00:35:40,960
first create a private constructor then create a factory constructor that talks


20569
00:35:40,960 --> 00:35:47,280
with a static final which in turn talks with the private constructor okay


20570
00:35:48,400 --> 00:35:54,080
okay after you've taken care of that what we need to do is to grab all our


20571
00:35:54,080 --> 00:35:58,320
notes from our cloud storage okay


20572
00:35:58,320 --> 00:36:03,760
so let's just go ahead after this factory constructor we're gonna expose a


20573
00:36:03,760 --> 00:36:07,192
field as the note as the caption at the bottom of the screen in the case call


20574
00:36:07,192 --> 00:36:11,280
notes so i'm just going to say notes equal to


20575
00:36:11,280 --> 00:36:15,680
we're just going to say firebase and firestore and it's going to auto import


20576
00:36:15,680 --> 00:36:19,512
it for me so this is not a strange thing anymore to you as well


20577
00:36:19,512 --> 00:36:22,720
and then i'm just going to say our own instance and then


20578
00:36:22,720 --> 00:36:27,440
excuse me a collection called notes quotes as well


20579
00:36:27,440 --> 00:36:33,192
okay so this is how you actually talk with a


20580
00:36:33,192 --> 00:36:37,440
firestore so you can see that the signature of this collection is actually


20581
00:36:37,440 --> 00:36:40,872
returning use something called a collection reference


20582
00:36:40,872 --> 00:36:45,440
and you will soon see how we can extract our actual notes from this collection


20583
00:36:45,440 --> 00:36:48,400
all right and also remember


20584
00:36:48,400 --> 00:36:51,920
this isn't gonna work if you haven't actually created your notes collection


20585
00:36:51,920 --> 00:36:55,680
so if you haven't done that if you forgot to do that please go ahead


20586
00:36:55,680 --> 00:37:00,160
excuse me to go ahead and do that right now


20587
00:37:00,160 --> 00:37:05,040
so the first thing we need to do is to create a function for creating new nodes


20588
00:37:05,040 --> 00:37:08,400
all right excuse me


20589
00:37:08,400 --> 00:37:14,960
so let's go ahead um into our project and create a function as the


20590
00:37:14,960 --> 00:37:19,760
caption indicates i'm going to say void create new nodes in here


20591
00:37:19,760 --> 00:37:25,192
and then we're going to say we need a an owner id


20592
00:37:25,192 --> 00:37:30,480
so required string owner user id i believe we call it and then it's an


20593
00:37:30,480 --> 00:37:35,760
async function okay and then in here since you have


20594
00:37:35,760 --> 00:37:41,832
like a stream or a read write stream uh of all your notes and that's what this


20595
00:37:41,832 --> 00:37:45,512
uh collection reference means it's it's not


20596
00:37:45,512 --> 00:37:48,720
only a stream that you can read from but also it's a stream you can write to


20597
00:37:48,720 --> 00:37:51,920
that's why that's why it's not called a stream okay


20598
00:37:51,920 --> 00:37:55,832
because the stream is like you try to read only from it so


20599
00:37:55,832 --> 00:37:59,192
and in here what we're gonna do is going to say notes add


20600
00:37:59,192 --> 00:38:03,512
and you can see it literally says give me a map or a dictionary or however you


20601
00:38:03,512 --> 00:38:07,600
want to call it an object that has keys and values


20602
00:38:07,600 --> 00:38:11,192
what do you want me to store in a database and that's what nosql kind of


20603
00:38:11,192 --> 00:38:16,640
means in here is document based it's it has no real structure of what you're


20604
00:38:16,640 --> 00:38:21,360
adding everything that you add in here is going to be packaged into a document


20605
00:38:21,360 --> 00:38:25,192
that is going to be stored in here with the fields and the values that you


20606
00:38:25,192 --> 00:38:29,920
specified in here okay so let's go ahead and say we provide you


20607
00:38:29,920 --> 00:38:34,000
with a with a document in here and the first


20608
00:38:34,000 --> 00:38:38,872
field is owner user id field name and that's gonna auto import it from our


20609
00:38:38,872 --> 00:38:42,640
constants from before remember and in here the value of this is going


20610
00:38:42,640 --> 00:38:45,512
to be the owner user id and


20611
00:38:45,512 --> 00:38:48,320
the text field text


20612
00:38:48,320 --> 00:38:52,400
field name is just going to be an empty note


20613
00:38:52,400 --> 00:38:57,120
for now okay and remember this is an async asynchronous function which


20614
00:38:57,120 --> 00:39:00,640
returns a future of a document reference just like we have our collection


20615
00:39:00,640 --> 00:39:04,552
reference in here but we actually don't want its results right now at least so


20616
00:39:04,552 --> 00:39:08,080
we're just gonna wait on it so don't forget that weight because without doing


20617
00:39:08,080 --> 00:39:13,040
the weight this function is not actually going to be invoked


20618
00:39:13,680 --> 00:39:19,512
wow okay um what we need to do now then is to go to


20619
00:39:19,512 --> 00:39:24,000
the next item excuse me which is


20620
00:39:24,000 --> 00:39:27,440
getting notes by user id so the signature is going to be it's going to


20621
00:39:27,440 --> 00:39:30,552
return an i


20622
00:39:30,720 --> 00:39:34,872
of cloud note you given a user id so


20623
00:39:34,872 --> 00:39:39,280
as we said every every node we store in our database uh


20624
00:39:39,280 --> 00:39:42,960
is gonna have these two fields an owner and a text field so now what we want is


20625
00:39:42,960 --> 00:39:46,872
to grab all the nodes for a specific user okay


20626
00:39:46,872 --> 00:39:50,480
so let's go ahead and do that so it's called


20627
00:39:50,480 --> 00:39:56,480
um get notes and it's quite a meaty function actually i can see in here


20628
00:39:56,480 --> 00:40:04,400
so let's go ahead and do that right now let's say future of iterable um of cloud


20629
00:40:04,400 --> 00:40:07,600
nodes and i think we have to import cloud node as well so pressing this


20630
00:40:07,600 --> 00:40:10,232
button imports this for me if you're getting some errors it's probably


20631
00:40:10,232 --> 00:40:14,400
because your editor hasn't been able to find cloud nodes so


20632
00:40:14,400 --> 00:40:19,040
and then we're going to say get notes and a required parameter in here


20633
00:40:19,040 --> 00:40:25,832
under user id okay and it's an asynchronous function so like that


20634
00:40:26,160 --> 00:40:31,440
so what we're going to do then is to um a weights


20635
00:40:31,440 --> 00:40:35,920
uh on our on our notes in here you see we can


20636
00:40:35,920 --> 00:40:41,440
actually retrieve notes from our notes collection in here by saying notes where


20637
00:40:41,440 --> 00:40:45,360
so we're gonna do a search inside the notes uh


20638
00:40:45,360 --> 00:40:50,480
collection reference and that and you do that using the where clause okay


20639
00:40:50,480 --> 00:40:54,720
and these things could actually increa like create an exception i believe the


20640
00:40:54,720 --> 00:40:59,512
word clause could actually throw an exception whether it was this one


20641
00:40:59,512 --> 00:41:03,040
it's not documenting here but i do believe that it could actually create an


20642
00:41:03,040 --> 00:41:06,480
exception so let's go ahead and catch this so


20643
00:41:06,480 --> 00:41:11,192
let's just say try we're gonna try and then should anything happen in here


20644
00:41:11,192 --> 00:41:14,960
uh we're just gonna throw and could


20645
00:41:14,960 --> 00:41:20,160
not get all nodes exception and this is going to auto import that from our


20646
00:41:20,160 --> 00:41:24,320
previous code so i i shouldn't explain this over and over again you know


20647
00:41:24,320 --> 00:41:29,680
already how that works okay so now that we have that we have a try


20648
00:41:29,680 --> 00:41:35,832
and catch statement in there so let's just say we await on the notes


20649
00:41:35,832 --> 00:41:40,480
and we say uh where clause and the word clause is


20650
00:41:40,480 --> 00:41:45,360
going to say okay what is the field that you want to do


20651
00:41:45,360 --> 00:41:50,552
your work search on and we want to search for all notes that are for this


20652
00:41:50,552 --> 00:41:56,000
owner user id so let's just say owner user id field name


20653
00:41:56,000 --> 00:42:00,552
should be equal to you see that's the parameter is equal to owner user id like


20654
00:42:00,552 --> 00:42:03,280
that okay


20655
00:42:03,360 --> 00:42:07,680
waiting on it you see sorry after doing a word this gives you a query but then


20656
00:42:07,680 --> 00:42:11,512
you need to actually execute this query and you do that using its get function


20657
00:42:11,512 --> 00:42:14,640
and you see it returns and


20658
00:42:14,640 --> 00:42:19,440
let me see gets if i move my mouse over you see it returns a future of a query


20659
00:42:19,440 --> 00:42:22,640
snapshot with all the objects that firestore could retrieve from the


20660
00:42:22,640 --> 00:42:27,512
database okay so we have to get um


20661
00:42:27,512 --> 00:42:31,040
what we do then is to do then


20662
00:42:31,040 --> 00:42:35,680
that's that's how we work with future so event clause of the future allows you to


20663
00:42:35,680 --> 00:42:40,872
return it what it does is it returns the value of that future to you and it


20664
00:42:40,872 --> 00:42:44,960
allows you to return either a synchronous value inside the then


20665
00:42:44,960 --> 00:42:48,320
function or you could actually return another future


20666
00:42:48,320 --> 00:42:52,720
those who are familiar with node.js or just javascript in general


20667
00:42:52,720 --> 00:42:57,920
or even swift they're familiar with how promises and how futures work so this is


20668
00:42:57,920 --> 00:43:02,640
your chance of actually returning a value given this


20669
00:43:02,640 --> 00:43:07,760
future that is returned to you okay so we're going to call this basically


20670
00:43:07,760 --> 00:43:11,192
value at the moment and if i move my mouse over this you can see it says a


20671
00:43:11,192 --> 00:43:15,512
query snapshot of these um potentially written


20672
00:43:15,512 --> 00:43:19,680
red documents so in here what we're going to do is say


20673
00:43:19,680 --> 00:43:24,400
docs which is all the documents that could be read


20674
00:43:24,400 --> 00:43:27,920
and we're going to map all those and you can see in here


20675
00:43:27,920 --> 00:43:31,760
if i call this doc if i move my mouse over it so it creates


20676
00:43:31,760 --> 00:43:36,080
document snapshot whereas this one was a query snapshot this one is a query


20677
00:43:36,080 --> 00:43:41,192
document snapshot of those fields okay so let's go in here and what we're going


20678
00:43:41,192 --> 00:43:47,192
to do is to say we return inside this return a cloud node


20679
00:43:47,192 --> 00:43:51,760
and we have these three fields okay we have the document id owner user id and


20680
00:43:51,760 --> 00:43:55,920
the text so it's our chance basically to create


20681
00:43:55,920 --> 00:44:00,960
an instance of our cloud node right now i'm gonna put the


20682
00:44:00,960 --> 00:44:04,800
columns here so we get the formatting a little bit better


20683
00:44:04,800 --> 00:44:08,400
and what we need to do is to get the document id and the way to do that is


20684
00:44:08,400 --> 00:44:12,640
this dock has an id in here you can see it's a string so


20685
00:44:12,640 --> 00:44:19,040
and the other one is to dock and then we have the data


20686
00:44:19,040 --> 00:44:23,280
and let's just say owner user id field name


20687
00:44:23,280 --> 00:44:26,320
and that's a string


20688
00:44:26,320 --> 00:44:32,552
and in here we're gonna say then a doc data


20689
00:44:32,552 --> 00:44:38,640
and we say text field name as a string now remember this looks very


20690
00:44:38,640 --> 00:44:43,280
familiar where have we done this before yeah we've done this in cloud notes from


20691
00:44:43,280 --> 00:44:46,872
snapshot and don't worry we're actually gonna use


20692
00:44:46,872 --> 00:44:50,000
that function as soon we're gonna remove this return statement the way it's


20693
00:44:50,000 --> 00:44:53,440
written but let's just write it like this right now okay so it's easier to


20694
00:44:53,440 --> 00:44:55,920
understand


20695
00:44:56,552 --> 00:45:03,040
wow all right um i think i think that should be it


20696
00:45:03,040 --> 00:45:07,920
and so we have that excuse me


20697
00:45:07,920 --> 00:45:10,960
and um


20698
00:45:11,512 --> 00:45:15,512
yeah i believe i believe this is going to cover it for us right now so not much


20699
00:45:15,512 --> 00:45:19,280
more to explain about this to be honest so


20700
00:45:19,280 --> 00:45:23,360
we could also put a comma here to


20701
00:45:23,360 --> 00:45:27,440
make the code a little bit more readable and we have the value then


20702
00:45:27,440 --> 00:45:30,720
return and what we don't have to be honest with


20703
00:45:30,720 --> 00:45:34,400
you here is this return statement in here


20704
00:45:34,400 --> 00:45:38,720
or actually we created this like this so yeah it's an arrow function


20705
00:45:38,720 --> 00:45:42,800
so we don't have to have a special return statement but if you don't like


20706
00:45:42,800 --> 00:45:47,192
this kind of an arrow function you can grab your code that you've written up to


20707
00:45:47,192 --> 00:45:50,800
this point like this and create


20708
00:45:50,800 --> 00:45:56,320
curly brackets in here and instead use this syntax to say return


20709
00:45:56,320 --> 00:46:02,232
instead okay so it kind of depends on what you prefer um


20710
00:46:02,232 --> 00:46:05,832
i don't have a preference and i could use an error function the way it is so


20711
00:46:05,832 --> 00:46:09,040
i'm just going to leave it like this okay


20712
00:46:09,040 --> 00:46:12,872
and remember we're at the moment awaiting on this but we're not returning


20713
00:46:12,872 --> 00:46:18,320
it so let's just return so this is all basically just a fancy way of us


20714
00:46:18,320 --> 00:46:23,192
excuse me communicating with firebase firestore and reading documents and


20715
00:46:23,192 --> 00:46:27,360
there's so much to explain that i can't go through all of these but i really


20716
00:46:27,360 --> 00:46:30,160
suggest that you play with these functions yourself read the


20717
00:46:30,160 --> 00:46:35,280
documentations and see why is it that i'm using where and then get


20718
00:46:35,280 --> 00:46:39,192
so uh for that you need to read all the documentations


20719
00:46:39,192 --> 00:46:43,832
that come with these functions so you understand them better


20720
00:46:44,720 --> 00:46:51,440
okay um so that's getting notes by user id


20721
00:46:51,440 --> 00:46:54,570
now what we need is also um


20722
00:46:54,570 --> 00:46:58,160
[Music] what we need is


20723
00:46:58,160 --> 00:47:02,800
the ability for us to be able to provide our notes list


20724
00:47:02,800 --> 00:47:08,552
in here with a stream of notes for that particular user okay so


20725
00:47:08,552 --> 00:47:13,920
um as you as you know now in our note service the way we have it is we are


20726
00:47:13,920 --> 00:47:18,320
exposing this stream of list of database node and that's what we kind of also


20727
00:47:18,320 --> 00:47:21,600
need to do with our firebase cloud storage like have a function that our


20728
00:47:21,600 --> 00:47:25,120
nodes list excuse me can't subscribe to and read


20729
00:47:25,120 --> 00:47:28,480
all the available nodes for that given user so let's go ahead and do that let's


20730
00:47:28,480 --> 00:47:33,680
just call it a stream iterable and i have that function signature so i


20731
00:47:33,680 --> 00:47:38,160
don't think i should actually write it manually but you may need to write it so


20732
00:47:38,160 --> 00:47:42,800
so that's a function signature okay and in here what we're going to say is


20733
00:47:42,800 --> 00:47:47,040
that we're going to go to our notes collection in here and get all the


20734
00:47:47,040 --> 00:47:52,160
available snapshots let's see we have our notes and then we


20735
00:47:52,160 --> 00:47:57,280
have our snapshots and we're gonna map that and


20736
00:47:57,280 --> 00:48:01,600
let's just say yep gonna get our documents inside that


20737
00:48:01,600 --> 00:48:05,440
snapshot and then we're gonna


20738
00:48:05,440 --> 00:48:11,040
map that like that and let's just call it doc


20739
00:48:11,040 --> 00:48:15,832
and in here we're gonna create a cloud note from snapshots


20740
00:48:15,832 --> 00:48:21,440
of that doc like that and then in here


20741
00:48:21,440 --> 00:48:24,800
we're going to say where


20742
00:48:24,872 --> 00:48:28,480
that's our note and then we're going to say the notes


20743
00:48:28,480 --> 00:48:31,920
owner user id i'm gonna actually write this and then i'm gonna tell you what


20744
00:48:31,920 --> 00:48:34,800
i'm basically doing because there's quite a lot of code in here and like


20745
00:48:34,800 --> 00:48:39,120
pausing to describe every little bit of this code could actually make it look


20746
00:48:39,120 --> 00:48:43,512
more complicated than it is so and i'm just gonna then say owner user


20747
00:48:43,512 --> 00:48:45,760
id okay


20748
00:48:45,760 --> 00:48:50,400
but a semicolon there wait a minute


20749
00:48:50,400 --> 00:48:54,960
this ends there and then a semicolon there yeah so let's see what is


20750
00:48:54,960 --> 00:48:59,760
happening in here so this looks actually quite intimidating to look at but it's a


20751
00:48:59,760 --> 00:49:04,960
very simple piece of code so what we're doing in here is if you want


20752
00:49:04,960 --> 00:49:09,760
to grab a stream of data as it is evolving you want to be able to


20753
00:49:09,760 --> 00:49:12,872
subscribe to all the changes happening to it then you need to use something


20754
00:49:12,872 --> 00:49:17,512
called the snapshots as you can see this is a stream of query snapshot whereas


20755
00:49:17,512 --> 00:49:21,280
where is a query itself okay and then get


20756
00:49:21,280 --> 00:49:26,800
is a future so it just the get one literally takes a snapshot at that point


20757
00:49:26,800 --> 00:49:31,440
in time and returns it to you but if you want to like keep hold of


20758
00:49:31,440 --> 00:49:35,760
like if you want to be updated about all the changes live as they're happening to


20759
00:49:35,760 --> 00:49:40,552
your data in the notes collection then you need to subscribe to the snapshots


20760
00:49:40,552 --> 00:49:44,480
that's what we're doing okay so that's that first part with snapshots so we're


20761
00:49:44,480 --> 00:49:47,512
literally saying that we want to see all the changes as they're happening live


20762
00:49:47,512 --> 00:49:51,280
okay then it says okay i will give you all


20763
00:49:51,280 --> 00:49:54,800
the changes that are happening live and that comes inside the query snapshot


20764
00:49:54,800 --> 00:49:59,280
remember query snapshot from here remember query here


20765
00:49:59,280 --> 00:50:02,552
oops inside the get so


20766
00:50:02,552 --> 00:50:07,192
after this point is it's literally what we did in the get notes it's saying that


20767
00:50:07,192 --> 00:50:11,600
okay here is a query snapshot and then we're saying okay there are documents in


20768
00:50:11,600 --> 00:50:15,360
there and that's exactly what we're doing in here there's documents in the


20769
00:50:15,360 --> 00:50:20,480
query snapshot and then we're mapping every document to a cloud note all right


20770
00:50:20,480 --> 00:50:24,000
and then we're putting and where clause at the end


20771
00:50:24,000 --> 00:50:29,192
that says we're only interested in notes whose u owner user id is the owner user


20772
00:50:29,192 --> 00:50:34,552
id provided in here so without this word clause we're literally exposing all the


20773
00:50:34,552 --> 00:50:38,800
notes um to the current user for all users in the


20774
00:50:38,800 --> 00:50:43,360
system so that word clause is very important okay


20775
00:50:43,600 --> 00:50:47,600
so and this work clause as you can as you can see it is actually inside


20776
00:50:47,600 --> 00:50:53,512
flutter bin lip core iterable so that's nothing that is it's not a function that


20777
00:50:53,512 --> 00:50:57,120
firestore has provided for us okay


20778
00:50:57,920 --> 00:51:02,640
wow that was that was a lot of information


20779
00:51:03,832 --> 00:51:08,000
okay let's go ahead and talk about updating you notes sorry updating


20780
00:51:08,000 --> 00:51:12,720
existing notes so as we talked about it before if you have a note and you tap on


20781
00:51:12,720 --> 00:51:16,080
it the way it works in our application right now is i can tap on this node and


20782
00:51:16,080 --> 00:51:22,000
go and change its text like 22 and come back out and now it's changed to 22 okay


20783
00:51:22,000 --> 00:51:25,360
so we need to also expose this functionality


20784
00:51:25,360 --> 00:51:30,552
excuse me in inside our firebase cloud storage um


20785
00:51:30,552 --> 00:51:34,320
as well so the function is going to be update node and it's going to take two


20786
00:51:34,320 --> 00:51:38,000
parameters document id and a text so let's just say


20787
00:51:38,000 --> 00:51:41,280
it's going to be a future of void and we're going to call it update node


20788
00:51:41,280 --> 00:51:44,720
two parameters in here which are required i'm going to say required


20789
00:51:44,720 --> 00:51:48,160
string and document id


20790
00:51:48,160 --> 00:51:52,720
and then required string text


20791
00:51:52,720 --> 00:51:56,640
and let's make this an async function


20792
00:51:56,872 --> 00:52:00,232
all right then what we're going to do is we're going to put a try and catch in


20793
00:52:00,232 --> 00:52:05,360
here in case we can't update the notes and then here we're just going to


20794
00:52:05,360 --> 00:52:10,480
say throw could not update note exception okay and you may actually


20795
00:52:10,480 --> 00:52:14,400
ignore this e if you want to as well so you could just do like this


20796
00:52:14,400 --> 00:52:18,552
or you could just yeah i think actually we can't do an empty cache catch so you


20797
00:52:18,552 --> 00:52:23,192
may do like this if you prefer but i prefer to do it like this


20798
00:52:23,192 --> 00:52:26,232
all right and i can see that the formatting is a little bit messed up in


20799
00:52:26,232 --> 00:52:29,280
here so i'm going to put a


20800
00:52:29,760 --> 00:52:34,080
comma in there and inside the try statement in here now


20801
00:52:34,080 --> 00:52:39,040
what we need to do is to go to our collections again in here and


20802
00:52:39,040 --> 00:52:44,400
let's just say we get a doc you can see it says okay what is the path of that


20803
00:52:44,400 --> 00:52:47,832
doc and we're going to say the document id


20804
00:52:47,832 --> 00:52:52,832
is a path and then let's then go ahead and say


20805
00:52:52,832 --> 00:52:57,120
um dot update and it says okay what is the actual


20806
00:52:57,120 --> 00:53:00,720
update and inside the update what we're gonna do is gonna say


20807
00:53:00,720 --> 00:53:05,360
text field name is this text all right


20808
00:53:05,360 --> 00:53:09,040
so this may look a little bit crypt now also we have to wait on it may look a


20809
00:53:09,040 --> 00:53:12,800
little bit cryptic in the what is doc dock id


20810
00:53:12,800 --> 00:53:16,800
remember inside this function in here it says give me the path you see this


20811
00:53:16,800 --> 00:53:20,872
parameter path and what we said is that inside the


20812
00:53:20,872 --> 00:53:26,960
notes collection every document is going to have an identifier so we actually are


20813
00:53:26,960 --> 00:53:30,800
going to go with the document id which we instantiated in here do you remember


20814
00:53:30,800 --> 00:53:36,160
doc id is going to go into our cloud node document id so that's the path is


20815
00:53:36,160 --> 00:53:42,000
notes slash that document id so that's how far firebase firestore it called and


20816
00:53:42,000 --> 00:53:47,192
basically keeps hold of its paths it's the the path is in this case if i create


20817
00:53:47,192 --> 00:53:50,000
a collection you see it says oh the collection is being created in the root


20818
00:53:50,000 --> 00:53:54,720
folder and it has a collection id which in our case is called notes and we refer


20819
00:53:54,720 --> 00:53:58,872
to it here so we've already constructed the notes path and every document inside


20820
00:53:58,872 --> 00:54:03,760
it has its own id so it's going to be slash notes slash document id all right


20821
00:54:03,760 --> 00:54:07,680
so i hope and i'd explain it for you


20822
00:54:08,872 --> 00:54:13,600
let's now talk about deleting notes um so


20823
00:54:13,600 --> 00:54:17,440
deleting notes actually very easy as well so we don't have to do so much with


20824
00:54:17,440 --> 00:54:21,600
deleting nodes so it's very similar to updating nodes and


20825
00:54:21,600 --> 00:54:26,160
we're just going to go ahead and use document id for deleting notes so


20826
00:54:26,160 --> 00:54:30,400
as the caption indicates create a new feature of void in here and we're going


20827
00:54:30,400 --> 00:54:34,232
to say delete node and we're going to go ahead and use a required string


20828
00:54:34,232 --> 00:54:38,720
parameter called document id


20829
00:54:39,280 --> 00:54:44,000
it sync and let's just do a try cache in here in case we can't delete the


20830
00:54:44,000 --> 00:54:46,480
document and then we're going to say throw


20831
00:54:46,480 --> 00:54:49,440
could not


20832
00:54:49,440 --> 00:54:53,192
no notes exception i believe it's called


20833
00:54:53,192 --> 00:54:56,232
yeah inside the


20834
00:54:56,232 --> 00:55:00,400
try statement in here we are going to say notes


20835
00:55:00,400 --> 00:55:03,440
doc with that document id


20836
00:55:03,440 --> 00:55:06,480
all right and then we're just going to say delete


20837
00:55:06,480 --> 00:55:10,960
i remember i believe this is actually future void so let's just wait on it all


20838
00:55:10,960 --> 00:55:14,160
right so that's really all you have to do for


20839
00:55:14,160 --> 00:55:18,640
delete so there's no magic in that it's very similar to update note except that


20840
00:55:18,640 --> 00:55:23,760
it's not taking care of any like fields or anything like that


20841
00:55:24,640 --> 00:55:30,400
wow huge huge chapter we've talked a lot about now uh about firestore and


20842
00:55:30,400 --> 00:55:35,360
firebase storage so thank you so much for for sticking with


20843
00:55:35,360 --> 00:55:38,960
me throughout this chapter and but if you remember i mean if you look at what


20844
00:55:38,960 --> 00:55:43,600
we've done is not so much code it's 68 lines of code for me it may be less for


20845
00:55:43,600 --> 00:55:47,192
you if you haven't done all these extra commas in here so


20846
00:55:47,192 --> 00:55:52,400
maybe like 60 but there's a lot of new concepts so


20847
00:55:52,400 --> 00:55:57,192
i thought that i had to i took the liberty of maybe even over


20848
00:55:57,192 --> 00:55:59,760
explaining things but i think in the beginning it's very


20849
00:55:59,760 --> 00:56:02,160
important just to understand how everything works


20850
00:56:02,160 --> 00:56:04,080
um okay


20851
00:56:04,080 --> 00:56:08,480
so great job we've done what we promised to do in this chapter we have actually


20852
00:56:08,480 --> 00:56:11,832
tested to make sure that this is this is working we're gonna do this in the next


20853
00:56:11,832 --> 00:56:15,920
chapter but as it's tradition we're gonna make sure that our work is


20854
00:56:15,920 --> 00:56:20,960
committed to our uh github repository or bitbucket wherever


20855
00:56:20,960 --> 00:56:25,040
you're using your uh or wherever you're hosting your git project so let's go


20856
00:56:25,040 --> 00:56:30,320
ahead and do that i want to change the screen um


20857
00:56:30,320 --> 00:56:34,640
layout a little bit i'm going to get rid of scrcpy


20858
00:56:34,640 --> 00:56:38,480
oops and i'm going to close the screen


20859
00:56:38,480 --> 00:56:43,360
make this bigger in this uh view and then i'm


20860
00:56:43,360 --> 00:56:48,080
going to go to terminal okay excuse me let's have a look at our


20861
00:56:48,080 --> 00:56:53,360
status there's quite a bit modified in here and also we've added a whole new


20862
00:56:53,360 --> 00:56:56,232
folder so i'm just going to say git add all


20863
00:56:56,232 --> 00:56:59,920
and let's have a look at our log the previous commit was step 18 and let's


20864
00:56:59,920 --> 00:57:04,720
have a look at our tags i can see step 18 here as well


20865
00:57:04,720 --> 00:57:09,360
let's commit now let's say let's say step 19


20866
00:57:09,360 --> 00:57:13,600
excuse me again and then we have


20867
00:57:13,600 --> 00:57:17,040
commits and we've committed and let's push those


20868
00:57:17,040 --> 00:57:22,080
changes let's also tag and say step 19 in here


20869
00:57:22,080 --> 00:57:27,760
okay and let's push our tags as well


20870
00:57:28,872 --> 00:57:32,320
all right that's that as again is tradition at the end of


20871
00:57:32,320 --> 00:57:35,680
every chapter we'll talk about what we have to discuss in the next chapter


20872
00:57:35,680 --> 00:57:39,360
and as you can see it says uh we need to start using our new service instead of


20873
00:57:39,360 --> 00:57:41,760
sqlite database so that's a little bit of a


20874
00:57:41,760 --> 00:57:48,400
um like a turning point in our whole uh course in that we're gonna like toss our


20875
00:57:48,400 --> 00:57:54,160
local storage and go away from that and start using our firebase cloud storage


20876
00:57:54,160 --> 00:57:58,080
and so uh it's it's i think the next chapter is


20877
00:57:58,080 --> 00:58:00,960
actually one of the most exciting chapters


20878
00:58:00,960 --> 00:58:04,720
excuse me in this whole course so


20879
00:58:04,960 --> 00:58:08,640
grab some refreshments if you want to and i'll see you there


20880
00:58:08,640 --> 00:58:12,640
hello everyone and welcome to chapter 37 of this flutter course as you've seen in


20881
00:58:12,640 --> 00:58:17,280
previous chapters we've started to move away from our local database storage and


20882
00:58:17,280 --> 00:58:21,760
that was on sqlite and we started going more and more towards using firestore


20883
00:58:21,760 --> 00:58:27,512
databases that are hosted by firebase so that was a very exciting point in our um


20884
00:58:27,512 --> 00:58:32,000
in this course basically and for me as well as the as your instructor to go


20885
00:58:32,000 --> 00:58:36,320
over to a cloud storage rather than using local


20886
00:58:36,320 --> 00:58:40,552
uh storage and you see we used crud and as i mentioned in the previous chapter i


20887
00:58:40,552 --> 00:58:43,440
really wanted to introduce you to crowd because it's such


20888
00:58:43,440 --> 00:58:46,720
an important part of software development that you will sooner or


20889
00:58:46,720 --> 00:58:52,552
later need to use crowd storage locally on your computer on your applications so


20890
00:58:52,552 --> 00:58:55,440
um that was basically done


20891
00:58:55,440 --> 00:58:59,120
on purpose so we first talked about local storage and then we move away from


20892
00:58:59,120 --> 00:59:03,192
it and simply because uh even firebase in


20893
00:59:03,192 --> 00:59:08,400
itself is some sort of a crud storage not some sort of it is crud but it is


20894
00:59:08,400 --> 00:59:12,400
stored on the cloud and concepts of crop would have been a lot bit more difficult


20895
00:59:12,400 --> 00:59:16,960
for me to explain to you had me not first implemented implemented them


20896
00:59:16,960 --> 00:59:19,512
locally so um


20897
00:59:19,512 --> 00:59:25,600
in the previous chapter we prepared our service which we i will bring the code


20898
00:59:25,600 --> 00:59:29,512
here so we can have a look we we actually called it let's see


20899
00:59:29,512 --> 00:59:34,160
it's inside our services cloud we call it firebase cloud storage


20900
00:59:34,160 --> 00:59:38,480
right here and um we also talked about how we can


20901
00:59:38,480 --> 00:59:42,400
basically start integrating in this firebase cloud search in our


20902
00:59:42,400 --> 00:59:44,872
application and this is the chapter that we're gonna


20903
00:59:44,872 --> 00:59:49,832
um make those plans concrete okay


20904
00:59:49,832 --> 00:59:54,080
if you follow the chapters from the beginning chronologically in


20905
00:59:54,080 --> 00:59:57,920
this course you'll know that what i like to do when i try to refactor things is


20906
00:59:57,920 --> 01:00:01,120
to cut things from the source and by that i mean now we want to get rid of


20907
01:00:01,120 --> 01:00:06,320
our local crud storage and what i like to do as a strategy is to go to


20908
01:00:06,320 --> 01:00:10,320
uh the application and like either comment out that entire piece of code


20909
01:00:10,320 --> 01:00:13,600
which has to do with our note service and the crowd exceptions


20910
01:00:13,600 --> 01:00:16,480
or either we cut it out completely or we


20911
01:00:16,480 --> 01:00:21,360
commented out okay so let's go ahead and deal with that now


20912
01:00:21,360 --> 01:00:26,000
so i'm gonna change the screen layout a little bit here and i'm then gonna go


20913
01:00:26,000 --> 01:00:30,960
into our notes service so please go to the note service and select the entire


20914
01:00:30,960 --> 01:00:37,440
code in here and comment it out so that's for note service and then


20915
01:00:37,440 --> 01:00:40,800
we're also going to go to our i'm going to save this file and then we're going


20916
01:00:40,800 --> 01:00:46,080
to go to crowd exceptions select the entire content and comment it out please


20917
01:00:46,080 --> 01:00:49,360
so that's that um another thing that we need to take


20918
01:00:49,360 --> 01:00:56,720
care of is um inside our new firebase cloud storage inside uh get's notes what


20919
01:00:56,720 --> 01:01:00,800
we forgot to do is where i actually didn't forget to do i intentionally left


20920
01:01:00,800 --> 01:01:05,920
it like this so that we could get the basic idea is as you can see here we we


20921
01:01:05,920 --> 01:01:10,232
are inside this uh get notes function as the caption indicates at the bottom of


20922
01:01:10,232 --> 01:01:14,400
the screen we are returning an instance of our cloud node use using its


20923
01:01:14,400 --> 01:01:18,720
constructor its default constructor however if you remember from this cloud


20924
01:01:18,720 --> 01:01:23,280
node snapshot we have a convenient constructor that can create


20925
01:01:23,280 --> 01:01:28,480
an instance of our cloud node using a document snapshot and that's exactly


20926
01:01:28,480 --> 01:01:32,320
what we're getting in here you see query document snapshot but we're not using


20927
01:01:32,320 --> 01:01:36,480
that convenient constructor and that's exactly what we're going to fix


20928
01:01:36,480 --> 01:01:40,080
right now so excuse me


20929
01:01:40,080 --> 01:01:46,640
let's go in here where we have the dock and i'm going to change this code to go


20930
01:01:46,640 --> 01:01:51,512
from a normal function to an error function and then in here i'm gonna say


20931
01:01:51,512 --> 01:01:58,552
we return a cloud node from snapshot of that dock okay just like that


20932
01:01:58,552 --> 01:02:03,040
i press s to save this file command sorry and you can also remove that comma


20933
01:02:03,040 --> 01:02:06,720
at the end so you either leave it like this with a comma at the end so it


20934
01:02:06,720 --> 01:02:10,232
becomes multi-line or you remove the comma like i do in here and it just


20935
01:02:10,232 --> 01:02:16,480
becomes one line all right okay


20936
01:02:16,480 --> 01:02:19,512
that part is done


20937
01:02:19,600 --> 01:02:26,160
now what we need to do um is to be inside this


20938
01:02:26,160 --> 01:02:29,280
firebase cloud storage and you can see in here


20939
01:02:29,280 --> 01:02:33,120
inside the functionality uh sorry inside the create new node at the moment we're


20940
01:02:33,120 --> 01:02:37,832
saying void so we're not returning the node that we're actually creating and we


20941
01:02:37,832 --> 01:02:42,080
need to fix this so we need to actually create the new new


20942
01:02:42,080 --> 01:02:46,160
node and return it so let's go in here and i'm just going to say final


20943
01:02:46,160 --> 01:02:49,440
make the code a little bit bigger final


20944
01:02:49,440 --> 01:02:54,160
document is equal to a weight on this


20945
01:02:54,160 --> 01:02:59,280
and if you look at your document now you can see it is a document actually


20946
01:02:59,280 --> 01:03:02,320
you may not be able to see it now you can see it probably it is a document


20947
01:03:02,320 --> 01:03:06,872
reference okay so it's a reference as its name indicates is not the snapshot


20948
01:03:06,872 --> 01:03:12,872
in order to get the snapshot we need to just issue the get function on it


20949
01:03:12,872 --> 01:03:18,000
so let's just say final fetched note is a wait


20950
01:03:18,000 --> 01:03:23,192
on this document get and you'll see now fetch note is the


20951
01:03:23,192 --> 01:03:28,160
actual snapshot that will contain the data of that document all right


20952
01:03:28,160 --> 01:03:32,080
so in here we will just return a cloud node


20953
01:03:32,080 --> 01:03:35,192
like this or


20954
01:03:35,192 --> 01:03:39,440
let's see cloud node with these parameters


20955
01:03:39,440 --> 01:03:43,040
the document id is going to be the fetched note


20956
01:03:43,040 --> 01:03:46,720
id the owner user user id is provided to


20957
01:03:46,720 --> 01:03:51,192
our function already and the text is just going to be empty like this and


20958
01:03:51,192 --> 01:03:57,192
also make sure that uh in here we don't return void except we return a future of


20959
01:03:57,192 --> 01:04:00,160
cloud nodes okay so


20960
01:04:00,160 --> 01:04:05,640
save your file after that and this part's also done


20961
01:04:06,480 --> 01:04:08,640
okay um


20962
01:04:08,640 --> 01:04:11,920
now we need to make sure just i'm just gonna


20963
01:04:11,920 --> 01:04:16,800
close uh all these tabs and as the caption indicates we're gonna go to our


20964
01:04:16,800 --> 01:04:20,872
create update notes view and fix that up so it can


20965
01:04:20,872 --> 01:04:26,000
talk with our new service which is the cloud firebase storage i think we call


20966
01:04:26,000 --> 01:04:28,960
it firebase cloud storage sorry about that


20967
01:04:28,960 --> 01:04:32,872
so i'm going to press command p in visual studio code on mac or control p


20968
01:04:32,872 --> 01:04:38,720
and linux and windows and then just say create what's it called


20969
01:04:38,720 --> 01:04:44,320
create update node view okay and here as the caption indicates we


20970
01:04:44,320 --> 01:04:49,040
need to import three things our cloud node dart file


20971
01:04:49,040 --> 01:04:53,040
the cloud storage exceptions dark file and the firebase cloud storage dart


20972
01:04:53,040 --> 01:04:56,720
files so those are at the moment inside the um


20973
01:04:56,720 --> 01:05:01,040
let's see they're inside services cloud folder


20974
01:05:01,040 --> 01:05:05,040
so i'm going to go in here i'm just going to say import package my nodes and


20975
01:05:05,040 --> 01:05:09,440
then services cloud


20976
01:05:09,440 --> 01:05:12,800
so we have first cloud node so let's import that


20977
01:05:12,800 --> 01:05:17,512
i'm going to copy this path and then use it again to import cloud storage


20978
01:05:17,512 --> 01:05:22,160
exceptions like that and then we also need cloud


20979
01:05:22,160 --> 01:05:26,800
what's it called firebase cloud storage like that so that's


20980
01:05:26,800 --> 01:05:30,552
you will need to also do these three imports if you haven't called your


20981
01:05:30,552 --> 01:05:33,760
application my notes then this package is going to be different it's going to


20982
01:05:33,760 --> 01:05:40,720
be packaged the name of your application and then services etc etc okay


20983
01:05:41,920 --> 01:05:44,552
okay um


20984
01:05:44,552 --> 01:05:48,800
the next thing that we have to do as you can see in the captions here


20985
01:05:48,800 --> 01:05:53,440
we need to make sure that our create update node views state which is right


20986
01:05:53,440 --> 01:05:57,760
here which at the moment contains our node service as its node service it has


20987
01:05:57,760 --> 01:06:01,920
to move towards using the firebase cloud storage


20988
01:06:01,920 --> 01:06:04,872
so i'm going to go to my notes as well in here just to make sure i'm giving you


20989
01:06:04,872 --> 01:06:09,280
all the information that you need so let's change our node service in here


20990
01:06:09,280 --> 01:06:15,040
and call it now firebase cloud storage and that's the service okay


20991
01:06:15,040 --> 01:06:20,872
and in your init function then you need to also make sure that we get the


20992
01:06:20,872 --> 01:06:25,680
singleton instance of our firebase cloud storage in the init state function all


20993
01:06:25,680 --> 01:06:29,360
right also remember this note now is not a


20994
01:06:29,360 --> 01:06:33,680
database note anymore but it's actually a cloud node so let's call that cloud


20995
01:06:33,680 --> 01:06:38,400
node as well all right and and now we can see we have an unused


20996
01:06:38,400 --> 01:06:42,320
import in here so i'm just going to remove that since we don't need that


20997
01:06:42,320 --> 01:06:46,960
unused import then the next thing we need to do is as


20998
01:06:46,960 --> 01:06:50,552
a caption in the case we have to go to create or get existing node and we have


20999
01:06:50,552 --> 01:06:55,760
to make sure that it works with the cloud storage so let's go in here


21000
01:06:55,760 --> 01:06:58,552
perfect so in here


21001
01:06:58,552 --> 01:07:02,640
we're not going to return a database node anymore and we're going to say it


21002
01:07:02,640 --> 01:07:07,280
returns a cloud node and here we expect a parameter of type


21003
01:07:07,280 --> 01:07:12,960
cloud nodes optionally that can be passed to our routes


21004
01:07:12,960 --> 01:07:15,440
and here we're not going to be working with


21005
01:07:15,440 --> 01:07:18,960
you see here we were working with database users before because our


21006
01:07:18,960 --> 01:07:22,800
application was actually creating new users in the local database and


21007
01:07:22,800 --> 01:07:27,920
associating notes with those users thankfully that now that we're going to


21008
01:07:27,920 --> 01:07:32,720
now that we're using firestore um database we don't have to play with


21009
01:07:32,720 --> 01:07:37,512
users anymore because remember users are already managed by firebase


21010
01:07:37,512 --> 01:07:40,480
so what we can do is just remove that owner


21011
01:07:40,480 --> 01:07:45,192
completely and now we await on our node service and


21012
01:07:45,192 --> 01:07:49,920
we just say create new node and then we need an owner user id and remember this


21013
01:07:49,920 --> 01:07:55,512
owner user id is going to be the actual current user's user id so let's just say


21014
01:07:55,512 --> 01:08:00,800
final user id is current user dot id okay


21015
01:08:00,800 --> 01:08:07,192
and then in here we just say user id okay and we're storing that note in here


21016
01:08:07,192 --> 01:08:10,720
as we were doing before so we didn't change that code at all and then we're


21017
01:08:10,720 --> 01:08:16,160
seeing new notes also need to be returned


21018
01:08:17,192 --> 01:08:21,360
so now we need to fix the creation of our new node and that's something that


21019
01:08:21,360 --> 01:08:24,640
we've already done so that there shouldn't be a separate point really in


21020
01:08:24,640 --> 01:08:29,192
the caption so we've already done that nothing to take care of right now


21021
01:08:29,192 --> 01:08:34,160
we also need to take care of now our deleting a notes you remember when we go


21022
01:08:34,160 --> 01:08:38,000
out out of the node creation view if the node's text


21023
01:08:38,000 --> 01:08:43,512
was empty we actually delete that node from the database okay right now and now


21024
01:08:43,512 --> 01:08:48,320
we need to go towards our node service and also delete it by using the new


21025
01:08:48,320 --> 01:08:51,832
function which is called delete node and let's see what it takes as a


21026
01:08:51,832 --> 01:09:00,160
parameter it takes a document id and that's our node's document id okay


21027
01:09:00,160 --> 01:09:04,872
so that's for delete note and now we have another function very useful


21028
01:09:04,872 --> 01:09:09,760
function that saves the notes and when we go out of the screen if the if that


21029
01:09:09,760 --> 01:09:13,832
note if the text for that note is not empty


21030
01:09:13,832 --> 01:09:17,760
very similar to delete node but it kind of does the opposite make sure that the


21031
01:09:17,760 --> 01:09:21,440
node is present and also that the text to the text editing controller is set if


21032
01:09:21,440 --> 01:09:25,192
it's not not empty meaning that the text is set


21033
01:09:25,192 --> 01:09:30,232
then we update the current node so let's then await on it and in here we just say


21034
01:09:30,232 --> 01:09:32,800
update node


21035
01:09:32,872 --> 01:09:37,760
those new parameters the document id is going to be our notes


21036
01:09:37,760 --> 01:09:42,400
document id and the text in here let's see


21037
01:09:42,400 --> 01:09:46,800
oh we have to just put a comma in there and then we're good to go


21038
01:09:46,800 --> 01:09:53,192
so that's updating the save node if text not empty function


21039
01:09:54,800 --> 01:09:58,552
okay now we need to go to our note list view


21040
01:09:58,552 --> 01:10:01,280
and i'm going to do the same thing in my notes


21041
01:10:01,280 --> 01:10:03,760
excuse me


21042
01:10:04,000 --> 01:10:09,600
and let's go ahead and do that do we have any errors in here yes i can


21043
01:10:09,600 --> 01:10:13,360
see i'm getting an error for update note and i don't really know what the problem


21044
01:10:13,360 --> 01:10:17,440
actually is let's see document id is required okay and i can


21045
01:10:17,440 --> 01:10:21,512
see that this is something also we need to update so let's go to your text


21046
01:10:21,512 --> 01:10:25,512
controller listener function as well and update


21047
01:10:25,512 --> 01:10:28,960
the note there as well you can see it's doing this so


21048
01:10:28,960 --> 01:10:35,512
now we now have to say update note and we have a note document id and then


21049
01:10:35,512 --> 01:10:39,600
we've got text so please ensure that you're you've taken care of the text


21050
01:10:39,600 --> 01:10:44,232
controller listeners functionality as well


21051
01:10:44,320 --> 01:10:46,640
um


21052
01:10:46,872 --> 01:10:51,192
and i'm just making sure that that's exactly what we've done in my notes as


21053
01:10:51,192 --> 01:10:53,832
well all right


21054
01:10:54,080 --> 01:10:57,832
so that that was one step back um now let's go and do what the caption at the


21055
01:10:57,832 --> 01:11:02,000
bottom screen says let's go to our notes list view um


21056
01:11:02,000 --> 01:11:06,232
notes list view and as you can see at the moment we're working with a list of


21057
01:11:06,232 --> 01:11:10,400
database notes and we don't want to do this anymore we actually want to work


21058
01:11:10,400 --> 01:11:15,360
with iterables because that's like the default way that firebase actually works


21059
01:11:15,360 --> 01:11:18,320
it works with eye troubles it doesn't work with lists so


21060
01:11:18,320 --> 01:11:22,320
and iterables are actually better because they're like lazy lists so let's


21061
01:11:22,320 --> 01:11:27,512
change this to an iterable of a cloud node like this and also we change our


21062
01:11:27,512 --> 01:11:33,600
node callback to be a cloud node if i can spell and also we have to also


21063
01:11:33,600 --> 01:11:36,800
import this so i'm just going to import cloud node so that error is going to go


21064
01:11:36,800 --> 01:11:40,872
away i'm going to remove this uh import statement from there


21065
01:11:40,872 --> 01:11:45,120
now when you're using eye troubles you can't do a subscript like we're doing in


21066
01:11:45,120 --> 01:11:51,280
here you have to say object element at and then you have your index and that's


21067
01:11:51,280 --> 01:11:54,800
pretty much what we're doing in here so now if you've made this change in your


21068
01:11:54,800 --> 01:11:59,680
node callback you made this change from list to iterable and you change this


21069
01:11:59,680 --> 01:12:04,000
from database node to cloud node and also change this function from a


21070
01:12:04,000 --> 01:12:08,440
subscript to element add then you shouldn't have any errors in your notes


21071
01:12:08,440 --> 01:12:12,400
listview.dart file either


21072
01:12:13,120 --> 01:12:18,080
now we're going to go to a little bit juicier changes that we have to make to


21073
01:12:18,080 --> 01:12:22,080
ensure that our application works as expected with the cloud


21074
01:12:22,080 --> 01:12:24,552
storage


21075
01:12:24,640 --> 01:12:32,000
let's go to notes view notes view like here and you'll see now


21076
01:12:32,000 --> 01:12:36,480
um actually i can see my notes here uh


21077
01:12:36,480 --> 01:12:39,832
we have to do a few updates in here because we're not going to work with


21078
01:12:39,832 --> 01:12:42,552
node service anymore since it doesn't exist


21079
01:12:42,552 --> 01:12:46,232
but one bigger change that we have to make


21080
01:12:46,232 --> 01:12:50,160
is as you can see in the cash offset remove the future builder


21081
01:12:50,160 --> 01:12:54,640
why is that here is the future builder the way it is today


21082
01:12:54,640 --> 01:12:59,440
you can see the future builders actual future is to get or create a user but do


21083
01:12:59,440 --> 01:13:04,080
we really need that anymore and the answer is obviously no because


21084
01:13:04,080 --> 01:13:07,680
previously we were using this feature builder to create a user in our database


21085
01:13:07,680 --> 01:13:11,120
so that we can associate notes with that user


21086
01:13:11,120 --> 01:13:16,232
however since now we're going towards firestore and uh


21087
01:13:16,232 --> 01:13:21,512
cloud storage the users like users in your application are managed by firebase


21088
01:13:21,512 --> 01:13:26,480
itself so you don't have to create them in that sense when a user


21089
01:13:26,480 --> 01:13:29,832
has logged in and landed on the main interface of your application that


21090
01:13:29,832 --> 01:13:34,552
firebase user already exists so you don't have to do anything so we need to


21091
01:13:34,552 --> 01:13:39,440
remove this future builder so i'm just going to press command dot on it and


21092
01:13:39,440 --> 01:13:43,040
sometimes visual studio code can actually help with that to remove it but


21093
01:13:43,040 --> 01:13:46,800
it's not helping at the moment so what i'm going to do in this case as


21094
01:13:46,800 --> 01:13:50,872
you can see i want to just grab this stream builder in here


21095
01:13:50,872 --> 01:13:55,360
just grab the stream builder without the return statement okay


21096
01:13:55,360 --> 01:13:59,512
and find the end of that stream builder visual studio code is helping me very


21097
01:13:59,512 --> 01:14:03,512
nicely with this line in here and saying this is the end of stream builder so i'm


21098
01:14:03,512 --> 01:14:08,232
literally just gonna do that and cut it okay so now


21099
01:14:08,232 --> 01:14:12,080
what you should be ending up with is your future builder like that looks like


21100
01:14:12,080 --> 01:14:17,120
this and then i'm gonna basically kill that future builder like this okay so


21101
01:14:17,120 --> 01:14:22,160
then paste your stream builder in the place that your future builder


21102
01:14:22,160 --> 01:14:27,280
was before so now your body the body of your um


21103
01:14:27,280 --> 01:14:31,512
of your scaffold should just be the stream builder okay so basically we just


21104
01:14:31,512 --> 01:14:36,440
got rid of the future builder all right


21105
01:14:36,872 --> 01:14:41,600
so that was that what we need to do then is to make sure also in here that we're


21106
01:14:41,600 --> 01:14:47,192
not using that that we're not exposing a user email you see from now on when we


21107
01:14:47,192 --> 01:14:52,320
create and notes read notes et cetera we're going to use a user id the user's


21108
01:14:52,320 --> 01:14:58,400
identifier so we're not going to work with our um with the email so


21109
01:14:58,400 --> 01:15:01,680
i'm also going to go to my note sorry about that so um


21110
01:15:01,680 --> 01:15:05,680
as the caption at the bottom of the screen indicates let's go and change


21111
01:15:05,680 --> 01:15:10,480
this to user id and we're just gonna go off service


21112
01:15:10,480 --> 01:15:15,360
firebase current user and then we're gonna get the id okay so that's our user


21113
01:15:15,360 --> 01:15:21,040
id and the rest now is kind of history we


21114
01:15:21,040 --> 01:15:26,232
need to ensure that this view now works with our


21115
01:15:26,232 --> 01:15:30,400
new node service so let's remove this import from here


21116
01:15:30,400 --> 01:15:35,600
and now let's say this note service it is a firebase cloud storage so we're


21117
01:15:35,600 --> 01:15:40,160
going to say firebase cloud storage and in here we just add that and


21118
01:15:40,160 --> 01:15:44,080
initialize that we say firebase cloud storage which is uh


21119
01:15:44,080 --> 01:15:48,800
if you remember correctly um it is now a singleton so we're not creating new


21120
01:15:48,800 --> 01:15:54,080
instances basically by doing this although it looks like we're doing that


21121
01:15:54,232 --> 01:15:58,640
so inside our stream builder now what we're gonna do is not gonna say all


21122
01:15:58,640 --> 01:16:01,280
notes anymore like that we're going to say


21123
01:16:01,280 --> 01:16:04,552
all notes but we're going to pass the owner user


21124
01:16:04,552 --> 01:16:10,800
id and that owner user id remember we're storing it as a getter call user id


21125
01:16:10,800 --> 01:16:16,320
and for all our notes in here remember this all notes is going to give us an


21126
01:16:16,320 --> 01:16:20,080
eye trouble if i move my mouse over there you can see it's an eye trouble of


21127
01:16:20,080 --> 01:16:24,000
cloud node so it's not a list anymore so let's say i trouble


21128
01:16:24,000 --> 01:16:29,680
and it's a cloud node in here okay


21129
01:16:29,680 --> 01:16:32,720
and i can i can see it's complaining that


21130
01:16:32,720 --> 01:16:36,960
cloud node can't be found so i'm going to import cloud node like that


21131
01:16:36,960 --> 01:16:41,512
upon deleting in here we also need to make sure that we call the new one that


21132
01:16:41,512 --> 01:16:44,512
says delete node and in this case we just say


21133
01:16:44,512 --> 01:16:48,552
node.document id all right


21134
01:16:48,552 --> 01:16:52,800
so so that is that seems to be working fine


21135
01:16:52,800 --> 01:16:57,832
but what we got here is a subtype of type firebase cloud storage node service


21136
01:16:57,832 --> 01:17:01,832
and we're getting that in where are we getting that error let's


21137
01:17:01,832 --> 01:17:07,192
see if we can find that in here node 2 and that's okay and


21138
01:17:07,192 --> 01:17:10,232
that's because we probably don't have to do a hot restart and doing a hot restart


21139
01:17:10,232 --> 01:17:14,720
could kill my scr cpy and i can see that it did that but that's fine too i'm


21140
01:17:14,720 --> 01:17:19,120
gonna bring up scr cpy like this


21141
01:17:19,120 --> 01:17:22,160
and i'm gonna


21142
01:17:22,160 --> 01:17:26,320
do this and i'm gonna run the application now from scratch and this is


21143
01:17:26,320 --> 01:17:29,680
simply because i mean this is a state management in your application because


21144
01:17:29,680 --> 01:17:35,600
we had a node service from before and we do a hot hot reload but hot reload all


21145
01:17:35,600 --> 01:17:39,040
of a sudden says oops this node service that used to be node


21146
01:17:39,040 --> 01:17:42,480
service is not node service anymore it's a firebase cloud storage so what should


21147
01:17:42,480 --> 01:17:45,760
i do with it so it's just it's like


21148
01:17:45,760 --> 01:17:49,120
state residue that is kind of like staying in your application and you


21149
01:17:49,120 --> 01:17:53,440
can't clean it until you do a hot restart and when i did a hot restart i


21150
01:17:53,440 --> 01:17:58,000
have a problem with scr cpy so i can't i can't do anything about


21151
01:17:58,000 --> 01:18:01,040
that problem but let's just run the application from scratch and just make


21152
01:18:01,040 --> 01:18:06,960
sure everything is working as expected all right now i can see that i've logged


21153
01:18:06,960 --> 01:18:11,832
into the application and i have no notes all right


21154
01:18:11,832 --> 01:18:15,600
let me bring up the caption for the next uh


21155
01:18:15,600 --> 01:18:19,280
topic to talk about so what we need now you can see notes have disappeared and


21156
01:18:19,280 --> 01:18:23,512
this is a good sign because that kind of means that we have moved away from our


21157
01:18:23,512 --> 01:18:27,832
crotch storage and now we're not reading those notes that were in the crotch


21158
01:18:27,832 --> 01:18:32,320
storage anymore so let's go and create some notes so i


21159
01:18:32,320 --> 01:18:35,912
want to press the plus button in here and i'm just going to say note


21160
01:18:35,912 --> 01:18:39,912
number one so if i press the back button in here i can see that node number one


21161
01:18:39,912 --> 01:18:43,600
is appearing here and let's go create another one and let's say note number


21162
01:18:43,600 --> 01:18:47,680
two great note number one and number two if


21163
01:18:47,680 --> 01:18:52,552
i press this number two and then change it to note number three you can see that


21164
01:18:52,552 --> 01:18:56,320
those changes are immediately taking effect okay


21165
01:18:56,320 --> 01:19:01,512
so let me log out from this user and let's log in with i don't know really


21166
01:19:01,512 --> 01:19:07,280
which user i was logged in with before i'll log in with this user i can see


21167
01:19:07,280 --> 01:19:09,832
that user has no notes i'm just going to say


21168
01:19:09,832 --> 01:19:16,080
van dot's first note go out and then say run dots


21169
01:19:16,080 --> 01:19:20,552
second note and go out so now if i log out from this


21170
01:19:20,552 --> 01:19:26,872
one.user in here and if i say i want to log in with another user


21171
01:19:26,960 --> 01:19:30,400
so like this i can see my note one and three are


21172
01:19:30,400 --> 01:19:33,280
displayed here so i can just say note number one and two


21173
01:19:33,280 --> 01:19:38,800
and if i log out from this user and log in again with vanbot i should be


21174
01:19:38,800 --> 01:19:42,160
able to see van dot's notes


21175
01:19:42,160 --> 01:19:47,512
through barbaz great so that seems to be working now


21176
01:19:47,512 --> 01:19:51,600
what we could do i mean if you're just like me and you're curious how this data


21177
01:19:51,600 --> 01:19:55,760
is actually stored in firebase we could do that so let me open up a window in


21178
01:19:55,760 --> 01:20:02,232
here and say console and let's go ahead into our project on


21179
01:20:02,232 --> 01:20:06,872
firebase console and let's go in


21180
01:20:07,912 --> 01:20:12,320
our database and let's have a look in here as you can


21181
01:20:12,320 --> 01:20:16,800
see there are four documents two documents per person per user and you


21182
01:20:16,800 --> 01:20:21,600
can see these two have the same user id and that's the that's the van load user


21183
01:20:21,600 --> 01:20:27,280
you can see it it starts with a and c and the other two nodes they have


21184
01:20:27,280 --> 01:20:33,120
another user id which is for pixelity av remember this a and c user what we can


21185
01:20:33,120 --> 01:20:37,760
do now is actually go in here to the authentication section and have a look


21186
01:20:37,760 --> 01:20:41,512
at this vendor user and you can see the user ids a and c


21187
01:20:41,512 --> 01:20:46,400
and the other user actually has erd so if we go back to firestore and look at


21188
01:20:46,400 --> 01:20:50,640
the two last notes created by pixelity you can see


21189
01:20:50,640 --> 01:20:55,512
that their user id is erd you can see here all right


21190
01:20:55,512 --> 01:20:59,760
so very well done congratulations in two chapters we've been able to go away from


21191
01:20:59,760 --> 01:21:06,480
local uh crud storage to firebase huge feed so well done


21192
01:21:06,720 --> 01:21:10,720
what we need to do now is i was we as we usually do in other chapters is we're


21193
01:21:10,720 --> 01:21:15,512
gonna commit our work and also tag it so i'm gonna do some reshuffling on the


21194
01:21:15,512 --> 01:21:23,080
screen here and grab visual studio code here


21195
01:21:23,760 --> 01:21:27,440
make the size a little bit bigger kind of ginormous but that's okay


21196
01:21:27,440 --> 01:21:33,600
and let's have a look at our log and we can see the last step was step 19.


21197
01:21:33,600 --> 01:21:38,640
let's do a git status and there were a lot of files modified nothing new


21198
01:21:38,640 --> 01:21:42,320
so i'm just going to say git add all git commit


21199
01:21:42,320 --> 01:21:47,040
step 20 and push this


21200
01:21:47,040 --> 01:21:50,960
let's have a look at our logs we have step 19 and step 20 now and if you look


21201
01:21:50,960 --> 01:21:56,640
at our tags we have up to step 19 up to and including step 19. so let's


21202
01:21:56,640 --> 01:22:02,800
tag this as step 20 and then push our tags


21203
01:22:02,960 --> 01:22:06,400
all right that's great as is tradition again at the end of


21204
01:22:06,400 --> 01:22:11,120
every chapter i talk about what we have to discuss in the chapter that follows


21205
01:22:11,120 --> 01:22:16,232
and um we've talked quite a lot about now uh


21206
01:22:16,232 --> 01:22:20,160
allowing the user to store their own notes in the application but


21207
01:22:20,160 --> 01:22:24,640
it would be a lot more fun if he allowed the user to also share those notes with


21208
01:22:24,640 --> 01:22:28,960
somebody that they know about somebody that they know like a friend or


21209
01:22:28,960 --> 01:22:33,600
a family member so that's what we're gonna talk about in the next chapter


21210
01:22:33,600 --> 01:22:37,912
sharing notes so i'll see you there hello and welcome to chapter 38 of this


21211
01:22:37,912 --> 01:22:42,160
flutter course in previous chapters we've been talking quite a bit about how


21212
01:22:42,160 --> 01:22:46,640
we sync our notes with our firestore database and how we can read


21213
01:22:46,640 --> 01:22:51,440
those notes back and update them it'd be really fun also to be able to


21214
01:22:51,440 --> 01:22:54,400
share our notes and that's exactly what we're going to take care of in this


21215
01:22:54,400 --> 01:22:57,760
chapter in order to do that we need to use a


21216
01:22:57,760 --> 01:23:03,120
plugin called share plus and share plus is a plugin plugin as i've


21217
01:23:03,120 --> 01:23:07,832
mentioned now so it is not a package where a package extends the existing


21218
01:23:07,832 --> 01:23:13,832
capabilities of flutter into new heights a plugin takes a completely new route


21219
01:23:13,832 --> 01:23:16,400
and basically


21220
01:23:16,400 --> 01:23:19,912
uh goes well beyond beyond what flutter


21221
01:23:19,912 --> 01:23:25,680
internally can deliver and a packet a plug-in will need to be developed by


21222
01:23:25,680 --> 01:23:28,400
excuse me a developer or a set of developers


21223
01:23:28,400 --> 01:23:31,360
and it needs to be written specifically for


21224
01:23:31,360 --> 01:23:34,960
various platforms that that plugin wants to support for instance ios android so a


21225
01:23:34,960 --> 01:23:39,832
developer has to go and write some code for ios for android web etc etc in order


21226
01:23:39,832 --> 01:23:42,960
for that plugin to work on those platforms


21227
01:23:42,960 --> 01:23:47,192
now here we're going to use the share plus plugin and the share plus plugin is


21228
01:23:47,192 --> 01:23:52,480
developed by the flutter community so what we're going to have a look at here


21229
01:23:52,480 --> 01:23:56,552
is to go into pubdev


21230
01:23:56,552 --> 01:23:59,832
so i'm gonna do that right now


21231
01:24:00,640 --> 01:24:07,120
excuse me for my throat and in pub dev we're gonna search for uh share plus


21232
01:24:07,120 --> 01:24:09,912
after you've done that you'll see that you'll end up here and it is by a


21233
01:24:09,912 --> 01:24:13,512
verified developer called fluttercommunity.dev so you can tap on


21234
01:24:13,512 --> 01:24:17,760
that and you can get some more information about the developer here


21235
01:24:17,760 --> 01:24:22,400
and you can see that it supports android ios linux mac os web and windows so what


21236
01:24:22,400 --> 01:24:27,600
more could you ask for um so it's a free package that you can


21237
01:24:27,600 --> 01:24:32,232
use in your application and you can see that all you need to do is just to let's


21238
01:24:32,232 --> 01:24:36,552
go to ins installing and you see you have to say flutter pop


21239
01:24:36,552 --> 01:24:40,720
add share plus and that's exactly what we're gonna do


21240
01:24:40,720 --> 01:24:44,960
now in our application so i'm gonna bring our app here


21241
01:24:44,960 --> 01:24:49,040
and let's go ahead excuse me again


21242
01:24:49,040 --> 01:24:53,912
in our terminal and i'm gonna rearrange things a little bit here


21243
01:24:53,912 --> 01:24:56,720
okay actually perhaps i could do the same


21244
01:24:56,720 --> 01:25:01,440
thing that we've done before so let me increase the size of this


21245
01:25:01,440 --> 01:25:05,512
terminal so you see it better so let's just do the same thing that was


21246
01:25:05,512 --> 01:25:11,360
mentioned in the documentation so flutter pub ad share plus so flutter


21247
01:25:11,360 --> 01:25:14,720
op ad share plus


21248
01:25:14,960 --> 01:25:18,720
and this share plus since it's it's a whole new


21249
01:25:18,720 --> 01:25:21,440
plugin that you're adding to your application it's very important that you


21250
01:25:21,440 --> 01:25:25,280
basically rebuild your application because otherwise it won't be available


21251
01:25:25,280 --> 01:25:30,800
all right so what you could do is to do a clean and then rebuilds this is


21252
01:25:30,800 --> 01:25:36,400
cleaning is especially important for ios because sometimes when you add a


21253
01:25:36,400 --> 01:25:42,000
new plug-in um since flutter uses cocoa pods in order to


21254
01:25:42,000 --> 01:25:47,192
handle ios dependencies then your build may not


21255
01:25:47,192 --> 01:25:50,800
actually be able to pick up on that new dependency so it is important to do a


21256
01:25:50,800 --> 01:25:56,160
clean but for android it's usually not a problem so i'm just gonna


21257
01:25:56,160 --> 01:26:00,480
excuse me i'm just gonna uh rebuild the application and see if everything is


21258
01:26:00,480 --> 01:26:04,640
working as expected so i'm gonna stop the application here


21259
01:26:04,640 --> 01:26:09,680
and i'm just gonna make sure that flutter select device is using my


21260
01:26:09,680 --> 01:26:15,040
android telephone and then i'm gonna go to main dart and just say


21261
01:26:15,040 --> 01:26:19,912
run run without debugging and it's it says we have some errors so


21262
01:26:19,912 --> 01:26:24,232
let's see if we can fix those errors in here


21263
01:26:24,400 --> 01:26:28,160
okay share plus plugin as you can as i can see we already have the problem now


21264
01:26:28,160 --> 01:26:33,192
in our application so maybe that's why you have to do a clean so let's go ahead


21265
01:26:33,192 --> 01:26:35,440
i'm going to go to terminal and i'm going to say


21266
01:26:35,440 --> 01:26:38,640
flutter clean


21267
01:26:38,800 --> 01:26:41,360
okay that's going to clean the xcode


21268
01:26:41,360 --> 01:26:44,232
workspace and hopefully it's going to clean the android as well so i'm just


21269
01:26:44,232 --> 01:26:48,160
going to say flutter clean android


21270
01:26:49,512 --> 01:26:52,000
do you mean any of these did i not write clean


21271
01:26:52,000 --> 01:26:58,400
i wrote clear so clean android oh it's doing the same thing okay


21272
01:26:58,400 --> 01:27:06,232
so then i'm gonna do flutter and let's just say pop get


21273
01:27:06,400 --> 01:27:11,120
so that's gonna rebuild all our dependencies


21274
01:27:11,280 --> 01:27:16,720
so there we go now that those errors have disappeared okay so you may have to


21275
01:27:16,720 --> 01:27:21,832
have flutter clean and i was trying to get away without using that but i was


21276
01:27:21,832 --> 01:27:26,232
forced to eventually so in main dart i'm just going to say


21277
01:27:26,232 --> 01:27:29,680
run without debugging and that's just going to take its time and go to


21278
01:27:29,680 --> 01:27:33,280
scr cpy and i'm just going to bring scr cpy to


21279
01:27:33,280 --> 01:27:37,040
the screen as well soon i'll just make sure that i have wi-fi access on this


21280
01:27:37,040 --> 01:27:40,160
phone because i play quite a lot with wi-fi


21281
01:27:40,160 --> 01:27:44,080
and hotspots on this android phone so it could be that sometimes i don't actually


21282
01:27:44,080 --> 01:27:46,800
have wi-fi


21283
01:27:47,760 --> 01:27:54,080
okay so that seems to be running and here is uh that android phone and i can


21284
01:27:54,080 --> 01:27:58,400
see that the flutter application is trying to run great able to run this and


21285
01:27:58,400 --> 01:28:02,872
on that phone so we've done that we've done the clean


21286
01:28:02,872 --> 01:28:06,960
and rebuild so that's great and


21287
01:28:06,960 --> 01:28:12,480
the first thing that we're going to take care of is to disallow sharing mt notes


21288
01:28:12,480 --> 01:28:17,832
you see if if you're on a note screen and you haven't even for instance


21289
01:28:17,832 --> 01:28:20,720
written anything in your note you shouldn't be able to share that note


21290
01:28:20,720 --> 01:28:25,120
with anybody because well it's just empty text in there so let's go ahead


21291
01:28:25,120 --> 01:28:29,912
and we need to take care of that scenario by having a dialogue


21292
01:28:29,912 --> 01:28:34,480
and we're going to create this dialogue inside this folder


21293
01:28:34,480 --> 01:28:37,912
excuse me again i've been talking quite a lot today and that's why my throat is


21294
01:28:37,912 --> 01:28:42,960
giving me some trouble so let's go to lib utilities under


21295
01:28:42,960 --> 01:28:46,960
dialogues we're going to create this cannot share empty node dialog okay


21296
01:28:46,960 --> 01:28:52,552
uh let me change the screen layout a little bit here and


21297
01:28:52,720 --> 01:28:57,192
views we have there and we have services


21298
01:28:57,192 --> 01:29:00,160
so let's see what we have constant synonyms extension services


21299
01:29:00,160 --> 01:29:05,192
utilities and views but we don't have so yeah we have utilities and we have


21300
01:29:05,192 --> 01:29:09,360
dialogue so we have to create a new one let's just say new file and i'm going to


21301
01:29:09,360 --> 01:29:15,192
say cannot share empty node dialog the dart


21302
01:29:15,192 --> 01:29:19,512
and you will remember from before that we already have a


21303
01:29:19,512 --> 01:29:23,440
generic dialogue so what i'm going to do is i'm going to say future


21304
01:29:23,440 --> 01:29:28,000
of void so the function signature is going to


21305
01:29:28,000 --> 01:29:31,680
look like this as i'm showing you at the bottom of the screen so let's say show


21306
01:29:31,680 --> 01:29:35,600
cannot share empty notes dialogue it's quite a long name


21307
01:29:35,600 --> 01:29:40,320
and then it return it requires a build context so build context context like


21308
01:29:40,320 --> 01:29:44,080
this okay then what we're going to do in this


21309
01:29:44,080 --> 01:29:49,360
function is to return our generic dialog and this is something


21310
01:29:49,360 --> 01:29:53,280
that i'm actually quite proud of that we could create and we are using it so many


21311
01:29:53,280 --> 01:29:57,040
times now it's unbelievable so we literally have one dialog implementation


21312
01:29:57,040 --> 01:30:01,512
in the entire application and we're just reusing it and it's truly generic and


21313
01:30:01,512 --> 01:30:05,280
it's really good so let's in here let's say that we


21314
01:30:05,280 --> 01:30:10,872
return our generic show generic dialog


21315
01:30:10,960 --> 01:30:14,480
and it's going to also import that for me it's inside utilities dialog generic


21316
01:30:14,480 --> 01:30:17,440
dialog so you may have to import that yourself if your


21317
01:30:17,440 --> 01:30:22,872
editor doesn't allow you to auto import so the context is already there for the


21318
01:30:22,872 --> 01:30:27,120
title we're just going to say sharing for the content i'm going to say you


21319
01:30:27,120 --> 01:30:31,832
cannot share an empty note okay


21320
01:30:31,832 --> 01:30:35,760
and it's options builder remember it's a function that should return


21321
01:30:35,760 --> 01:30:39,680
um a map and in the map we're just gonna


21322
01:30:39,680 --> 01:30:44,320
say it has one button that has literally no value


21323
01:30:44,320 --> 01:30:49,600
so this is going to make it a a dialogue that returns a void or a


21324
01:30:49,600 --> 01:30:53,512
future of void when we call it here


21325
01:30:53,680 --> 01:30:58,800
okay so that file is now created now what we're going to do is to go and


21326
01:30:58,800 --> 01:31:02,400
add that button as you can see it says in create update note view add an icon


21327
01:31:02,400 --> 01:31:06,872
button to actions of app bar so i'm going to go to my notes as well and


21328
01:31:06,872 --> 01:31:11,280
create update and let's go ahead and just add that


21329
01:31:11,280 --> 01:31:14,960
button and there we go


21330
01:31:14,960 --> 01:31:18,320
i can see that we're using a share icon so i'm going to decrease the size of


21331
01:31:18,320 --> 01:31:22,160
this of the font is is very big at the moment


21332
01:31:22,160 --> 01:31:26,960
one more step i i think you can still see the way it is i mean i can see in


21333
01:31:26,960 --> 01:31:30,720
the video output video it should be visible still even though i've decreased


21334
01:31:30,720 --> 01:31:35,040
the size so let me go here bring scr cpy i'm


21335
01:31:35,040 --> 01:31:39,192
gonna close this safari window


21336
01:31:39,192 --> 01:31:43,912
let's go to create update note view and we already have this button at the at


21337
01:31:43,912 --> 01:31:47,512
the top i believe let's see do we have any buttons at the


21338
01:31:47,512 --> 01:31:50,720
top no we actually don't so


21339
01:31:50,720 --> 01:31:55,440
in our app bar so let's go and create something called actions in here and you


21340
01:31:55,440 --> 01:31:59,760
can see it's a list of widgets and in here we're just going to say icon button


21341
01:31:59,760 --> 01:32:03,832
unpressed we're just going to leave it empty and for its icon we're just going


21342
01:32:03,832 --> 01:32:11,280
to say const icon and and we're going to use icons share


21343
01:32:12,320 --> 01:32:15,912
remove this parenthesis from there and then put


21344
01:32:15,912 --> 01:32:21,440
like that okay so now now that we have this icon icon button there if i press


21345
01:32:21,440 --> 01:32:25,760
on any of these existing notes then we should be able to see a little share


21346
01:32:25,760 --> 01:32:29,832
button up here at the moment it doesn't do anything because it's on press is


21347
01:32:29,832 --> 01:32:34,552
empty but we're going to program that program that right now


21348
01:32:34,552 --> 01:32:39,040
so let's grab the current text of our current node so let's just say that this


21349
01:32:39,040 --> 01:32:44,552
is equal to our text controller's text and we're going to say if note


21350
01:32:44,552 --> 01:32:47,600
is not null and


21351
01:32:47,600 --> 01:32:52,872
the text um actually let's just check for null


21352
01:32:52,872 --> 01:32:57,280
and the text or actually


21353
01:32:57,360 --> 01:33:03,192
or this text is empty then we're gonna display our new dialogue that we just


21354
01:33:03,192 --> 01:33:07,912
implemented so let's just say we await on show cannot


21355
01:33:07,912 --> 01:33:12,480
what's that function called the show cannot uh


21356
01:33:12,872 --> 01:33:17,760
we did it inside the cannot share empty notes so i'm just going to copy its name


21357
01:33:17,760 --> 01:33:21,040
and go in here and paste it and


21358
01:33:21,040 --> 01:33:25,600
now i'm going to use visual studio code to do the auto importing for me


21359
01:33:25,600 --> 01:33:29,760
so it needs a build context and in here i'm just going to pass the context and


21360
01:33:29,760 --> 01:33:33,192
you can see it's complaining that i'm using a weight inside an unpressed


21361
01:33:33,192 --> 01:33:37,192
function that isn't async so i'm just gonna make this function async okay


21362
01:33:37,192 --> 01:33:40,552
otherwise what we're gonna do is we're gonna use share


21363
01:33:40,552 --> 01:33:45,760
and share it is coming from share plus and it can be auto imported okay so i'm


21364
01:33:45,760 --> 01:33:49,912
gonna just also import that and in here i'm just gonna say share that text it's


21365
01:33:49,912 --> 01:33:55,040
really just as simple as that so let's go in here and i'm gonna create


21366
01:33:55,040 --> 01:33:58,552
a new note you can see it has no text i'm going to


21367
01:33:58,552 --> 01:34:03,040
press the share button and now we see now we're seeing our beautiful little


21368
01:34:03,040 --> 01:34:07,280
dialogue that says you cannot share an empty note fantastic and if i go out


21369
01:34:07,280 --> 01:34:11,440
that note is deleted but then if i go to a note that does


21370
01:34:11,440 --> 01:34:14,960
have text for instance van dot's second note or vandal's first note in in here


21371
01:34:14,960 --> 01:34:18,872
i'm going to go to van.firstnode and then if i press the share button then


21372
01:34:18,872 --> 01:34:24,872
i'm going to be presented with in this case android's default share


21373
01:34:24,872 --> 01:34:28,552
sheet or how you want to call it and on ios you're going to be presented with


21374
01:34:28,552 --> 01:34:33,512
the default ios sharing activity so this is pretty much it so we didn't have


21375
01:34:33,512 --> 01:34:37,600
to do much more than this it's literally the call is share.share so you can see


21376
01:34:37,600 --> 01:34:42,160
it's so simple when you drag in a plug-in especially a plug-in that is


21377
01:34:42,160 --> 01:34:46,480
from a verified developer especially from flutter community or flutter team


21378
01:34:46,480 --> 01:34:51,760
or dark dev team themselves all right perfect so that was for


21379
01:34:51,760 --> 01:34:56,232
sharing there's not much more to sharing than that and we don't have to drag on


21380
01:34:56,232 --> 01:35:00,000
on this chapter so let's go ahead as this tradition


21381
01:35:00,000 --> 01:35:06,400
we're gonna go and uh commit our work so i'm gonna do some shuffling around here


21382
01:35:06,400 --> 01:35:11,360
gonna get rid of scrcpy increase the size of the


21383
01:35:11,360 --> 01:35:15,040
screen and the font so you see better


21384
01:35:15,040 --> 01:35:19,040
then let's go to our terminal


21385
01:35:19,040 --> 01:35:24,720
and i'm gonna have a look at our git's log the previous chapter we committed at


21386
01:35:24,720 --> 01:35:30,720
step 20 and we also tagged as a step 20. let's just do step 21 in this case


21387
01:35:30,720 --> 01:35:36,160
so get status we have quite a lot of new stuff so if i say get status in here you


21388
01:35:36,160 --> 01:35:41,600
can see a new file in here as well so let's commit as


21389
01:35:41,600 --> 01:35:46,960
step 21 and push our commit


21390
01:35:46,960 --> 01:35:51,600
and i'm gonna go and tag it and say step 21 as well


21391
01:35:51,600 --> 01:35:56,552
and then we push our tags as well okay perfect so that's it so if you say git


21392
01:35:56,552 --> 01:36:00,800
status right now we shouldn't have any uncommitted files


21393
01:36:00,800 --> 01:36:05,192
very well done so um what we're going to do in the next


21394
01:36:05,192 --> 01:36:10,720
chapter is very very exciting we're going to delve into a block and


21395
01:36:10,720 --> 01:36:14,160
if you're a flutter developer from before you'll


21396
01:36:14,160 --> 01:36:18,080
know what block is maybe or maybe you've heard of it and you want to learn about


21397
01:36:18,080 --> 01:36:21,680
it so that next chapter is perfect for you if you're not a flutter developer


21398
01:36:21,680 --> 01:36:27,192
from before you may not know what block is and i'll explain it more however


21399
01:36:27,192 --> 01:36:30,552
i'll just at the end of the chapter i'm not going to go into the details of the


21400
01:36:30,552 --> 01:36:35,680
next chapter but what we have to talk about is how at the moment our ui which


21401
01:36:35,680 --> 01:36:41,120
is our different views are actually working directly with our services so we


21402
01:36:41,120 --> 01:36:45,440
have some services that for instance can store stuff in the um


21403
01:36:45,440 --> 01:36:49,760
in the firestore database and we also have some services that are like


21404
01:36:49,760 --> 01:36:53,600
for our authentication the uis upon pressing the login button we're going to


21405
01:36:53,600 --> 01:36:57,600
the off service and the off service is coming back with results directly to our


21406
01:36:57,600 --> 01:37:00,720
ui this is working it's fine however


21407
01:37:00,720 --> 01:37:03,512
there's better way of doing this and that's through


21408
01:37:03,512 --> 01:37:09,600
separating the logic of our ui from our business logic ensuring that


21409
01:37:09,600 --> 01:37:15,192
our ui is doing what is best what it knows best and that's drawing things on


21410
01:37:15,192 --> 01:37:19,120
the screen but when it comes to handling logic and like


21411
01:37:19,120 --> 01:37:23,040
making api calls and etc the ui shouldn't really know much about that


21412
01:37:23,040 --> 01:37:27,912
the ui should just convey its purpose to some sort of a layer that we're going to


21413
01:37:27,912 --> 01:37:31,360
create in our application with the block library and that that layer will decide


21414
01:37:31,360 --> 01:37:35,360
okay upon this button being pressed i actually have to do this business logic


21415
01:37:35,360 --> 01:37:38,160
so i'm very excited actually about the next


21416
01:37:38,160 --> 01:37:41,912
chapter so grab some refreshments if you want to


21417
01:37:41,912 --> 01:37:46,480
and i'll see you there hello and welcome to chapter 39 of this flutter course


21418
01:37:46,480 --> 01:37:49,440
uh in the previous chapter at the end of the previous chapter we talked about


21419
01:37:49,440 --> 01:37:52,480
that in this chapter we're going to talk about


21420
01:37:52,480 --> 01:37:57,680
the block library and this is quite a hot topic for flutter


21421
01:37:57,680 --> 01:38:01,440
developers like if you're a flutter developer and you've just been


21422
01:38:01,440 --> 01:38:06,080
using vanilla set state in your application you may have already


21423
01:38:06,080 --> 01:38:10,960
heard about block library and qubits before if


21424
01:38:10,960 --> 01:38:14,160
you're not a flutter developer from before which i actually think the


21425
01:38:14,160 --> 01:38:17,120
majority of you taking this course probably have not been fluttered


21426
01:38:17,120 --> 01:38:20,720
involvers from before so you may have may have not heard about block


21427
01:38:20,720 --> 01:38:25,192
uh before so i'm just going to start this chapter by explaining what


21428
01:38:25,192 --> 01:38:29,360
the block library is and why do we need it


21429
01:38:29,360 --> 01:38:33,600
you see the way that we've created our application at the moment is that we


21430
01:38:33,600 --> 01:38:38,720
have direct calls from our ui code into our different services in order to


21431
01:38:38,720 --> 01:38:41,120
interact with data so


21432
01:38:41,120 --> 01:38:49,280
the ui is very well aware of the business logic so for instance the


21433
01:38:49,280 --> 01:38:52,400
the create or get existing nodes function


21434
01:38:52,400 --> 01:38:56,720
that we have when we actually go and create a new node that is already a word


21435
01:38:56,720 --> 01:39:01,440
of the fact that well if you end up in here i expect a user to be present


21436
01:39:01,440 --> 01:39:05,280
inside the application so a user should be logged in and that's


21437
01:39:05,280 --> 01:39:09,360
a sample an example of a ui component being aware


21438
01:39:09,360 --> 01:39:13,912
of the logic the business logic of our application so they're very they should


21439
01:39:13,912 --> 01:39:16,800
be very separate from each other otherwise


21440
01:39:16,800 --> 01:39:23,440
but they're not at the moment so what is block block is a um is a


21441
01:39:23,440 --> 01:39:26,872
library that we're going to drag into our application soon as you'll also see


21442
01:39:26,872 --> 01:39:32,000
is a third-party library call i believe it is created by a company called


21443
01:39:32,000 --> 01:39:35,832
very good ventures vgv


21444
01:39:35,832 --> 01:39:39,600
and there are various flutter developers and software engineers that are


21445
01:39:39,600 --> 01:39:45,192
constantly working in order to improve the quality of the block library


21446
01:39:45,192 --> 01:39:48,872
which is a dependency that will bring into our application and using the block


21447
01:39:48,872 --> 01:39:53,280
library i mean internally is using streams and streams stream controllers


21448
01:39:53,280 --> 01:39:57,760
and futures the stuff that's already built into flutter but it's like going


21449
01:39:57,760 --> 01:40:01,680
to a next level to make things more abstract so that our application isn't


21450
01:40:01,680 --> 01:40:07,360
directly dependent on its business logic with the ui inter intermixed


21451
01:40:07,360 --> 01:40:09,512
so


21452
01:40:09,832 --> 01:40:14,480
the reason we need the block library is just to ensure that our ui is only


21453
01:40:14,480 --> 01:40:19,832
taking care of the presentation of the ui and it's leaving the rest of


21454
01:40:19,832 --> 01:40:23,440
the stuff to a business business logic layer


21455
01:40:23,440 --> 01:40:26,000
excuse me


21456
01:40:27,360 --> 01:40:34,080
so that's why we need block and we're gonna use it soon in our application


21457
01:40:34,080 --> 01:40:37,912
excuse me so if that is blocked then what is


21458
01:40:37,912 --> 01:40:44,232
flutter block you see block in its in its internals is a very simple library


21459
01:40:44,232 --> 01:40:48,800
that works with streams and stream controllers so it allows you to for


21460
01:40:48,800 --> 01:40:52,160
instance pass data from here to there and have listeners that listen to


21461
01:40:52,160 --> 01:40:55,912
changes that are happening in a stream so it's only working with like very low


21462
01:40:55,912 --> 01:41:01,360
level stream stuff however when you come to your ui layer


21463
01:41:01,360 --> 01:41:04,800
as you remember i mentioned that block allows you then to separate your


21464
01:41:04,800 --> 01:41:08,720
business logic from your ui so


21465
01:41:08,720 --> 01:41:11,760
it's taking care of the business logic using streams and stream controllers and


21466
01:41:11,760 --> 01:41:16,480
futures but when it comes to the ui part in order to glue this business logic


21467
01:41:16,480 --> 01:41:21,192
with the ui it needs to be able to work with flutter


21468
01:41:21,192 --> 01:41:23,360
so the part that works with streams and


21469
01:41:23,360 --> 01:41:28,720
stream controllers using dart okay and dart asynchronous components but the


21470
01:41:28,720 --> 01:41:32,720
part that it wants to glue that with your ui needs to come to the flutter


21471
01:41:32,720 --> 01:41:36,720
world okay and that is that library in itself is


21472
01:41:36,720 --> 01:41:41,280
called flutter block so fl block is divided into two separate libraries one


21473
01:41:41,280 --> 01:41:45,912
is block which takes care of the business logic etc and the other one is


21474
01:41:45,912 --> 01:41:50,400
called flutter block all right but don't worry about it i'll go through


21475
01:41:50,400 --> 01:41:55,832
these with you one step at a time so you'll learn these


21476
01:41:57,040 --> 01:41:59,512
excuse me


21477
01:42:00,000 --> 01:42:02,720
so what we're going to do in this chapter


21478
01:42:02,720 --> 01:42:06,000
is going to have it literally has nothing to do with our


21479
01:42:06,000 --> 01:42:10,000
application we've been working with the notes app and in this chapter we're


21480
01:42:10,000 --> 01:42:12,960
actually going to break our application a little bit by just like literally


21481
01:42:12,960 --> 01:42:16,080
replacing the home page of our application with a


21482
01:42:16,080 --> 01:42:20,232
completely new application is nothing scary i i promise you the changes we're


21483
01:42:20,232 --> 01:42:26,400
going to make is is probably only going to be limited to the main.dark file


21484
01:42:26,400 --> 01:42:30,232
and what we're going to do is to create a


21485
01:42:30,232 --> 01:42:34,872
counter application if you if you've worked with flutter before and you've


21486
01:42:34,872 --> 01:42:37,512
started thinking about maybe moving over to


21487
01:42:37,512 --> 01:42:42,000
block you may have actually gone to the block library's documentation page and


21488
01:42:42,000 --> 01:42:44,960
you've seen a counter application in there where you have a plus and a minus


21489
01:42:44,960 --> 01:42:48,480
button and you can increase and decrease the value that's shown on the screen so


21490
01:42:48,480 --> 01:42:51,832
that's like the basic counter application


21491
01:42:51,832 --> 01:42:55,680
but in this example i'm going to show you we're going to take that example to


21492
01:42:55,680 --> 01:42:59,512
the next level and use the block library and i'm going to introduce all the


21493
01:42:59,512 --> 01:43:04,232
basics of the block library to you in this chapter but we're gonna take it to


21494
01:43:04,232 --> 01:43:08,960
the next level and allow the user to enter some value on the screen and that


21495
01:43:08,960 --> 01:43:14,640
value will then be able to be added or subtracted from the current


21496
01:43:14,640 --> 01:43:18,872
value that the application stores so it's kind of like a counter application


21497
01:43:18,872 --> 01:43:22,232
where the user can actually enter the value that needs to be added to the


21498
01:43:22,232 --> 01:43:25,680
previous account or it needs to be subtracted from the previous account so


21499
01:43:25,680 --> 01:43:29,912
that's the difference between our simple counter application and what


21500
01:43:29,912 --> 01:43:34,000
block libraries counter application in its documentation


21501
01:43:34,000 --> 01:43:38,480
introduces you to all right so


21502
01:43:38,480 --> 01:43:43,360
let me bring up this caption in here and we're going to talk a little bit about


21503
01:43:43,360 --> 01:43:50,320
various components of a block and i'm fully aware that pretty much


21504
01:43:50,320 --> 01:43:55,512
everything i'm saying in this chapter up to where we get to the example is


21505
01:43:55,512 --> 01:43:58,960
all very much abstract in that it is


21506
01:43:58,960 --> 01:44:03,192
literally just theory i'm like teaching you theory here


21507
01:44:03,192 --> 01:44:08,720
i personally am horrible at theory like i didn't excel at school when it came to


21508
01:44:08,720 --> 01:44:15,120
theory so i'm very aware that a lot of you may also have the same um situation


21509
01:44:15,120 --> 01:44:18,640
or maybe in the same boat that i am that are not good with theory and that's okay


21510
01:44:18,640 --> 01:44:21,440
i'll just explain these fast and then we'll go to the implementation so you


21511
01:44:21,440 --> 01:44:25,440
can put that to practice so for those of you who are interested in the theory of


21512
01:44:25,440 --> 01:44:29,512
it i'm going to explain different parts of the block library to you now


21513
01:44:29,512 --> 01:44:32,160
so here the first


21514
01:44:32,160 --> 01:44:36,480
component of the block library is a class called block


21515
01:44:36,480 --> 01:44:43,600
now block really it is a container just imagine a class a class that you add


21516
01:44:43,600 --> 01:44:50,000
events to it and every event that you add to it can produce a state so the way


21517
01:44:50,000 --> 01:44:57,040
block works is that it it is a class that begins with a state so its output


21518
01:44:57,040 --> 01:45:02,552
is always a state for instance a state can be logged in a state could be logged


21519
01:45:02,552 --> 01:45:04,960
out states could be


21520
01:45:04,960 --> 01:45:10,160
error screen so just imagine different states of the application


21521
01:45:10,160 --> 01:45:16,480
so that's the input sorry the output the input to it are your events so


21522
01:45:16,480 --> 01:45:20,552
in your block that will develop you will have


21523
01:45:20,552 --> 01:45:25,120
inputs that you for instance say log in with this username and password


21524
01:45:25,120 --> 01:45:29,512
register with this username or this email and password register oh i forgot


21525
01:45:29,512 --> 01:45:33,832
my password and here's my email so these are events that you


21526
01:45:33,832 --> 01:45:38,872
produce and give to your block and then in turn your block then looks at its own


21527
01:45:38,872 --> 01:45:42,960
internals and say oh what was this state before what is the current event then i


21528
01:45:42,960 --> 01:45:50,720
will produce a new state okay so that's the internal of the block class


21529
01:45:51,040 --> 01:45:55,360
now when you have a block class when we're gonna


21530
01:45:55,360 --> 01:45:59,760
subclass from that block class then you will actually need to create an instance


21531
01:45:59,760 --> 01:46:04,552
of that block class and you will do that using something called a block provider


21532
01:46:04,552 --> 01:46:09,512
so that's as its name indicates it is a class that creates a um


21533
01:46:09,512 --> 01:46:15,680
it creates a block instance for you and then it will allow you to do something


21534
01:46:15,680 --> 01:46:18,552
with that block so


21535
01:46:18,552 --> 01:46:22,160
i'll see if i actually can


21536
01:46:22,400 --> 01:46:25,832
show you block provider uh


21537
01:46:25,832 --> 01:46:32,832
perhaps we could bring up a window in here and i'm just gonna


21538
01:46:32,832 --> 01:46:39,760
say so block like brarry you cannot see my screen right now but i


21539
01:46:39,760 --> 01:46:43,600
promise you i will show you soon so here's the uh


21540
01:46:43,600 --> 01:46:46,872
main page for the block library so i'll


21541
01:46:46,872 --> 01:46:50,960
increase the font size so you can see it as well


21542
01:46:51,120 --> 01:46:56,080
so let's go ahead and you can see it's sponsored by very good ventures and


21543
01:46:56,080 --> 01:47:00,640
stream and medo i'm not sure i i may have butchered


21544
01:47:00,640 --> 01:47:05,512
this name right now i apologize for that but then if you look at


21545
01:47:05,512 --> 01:47:09,912
the various parts of block then you'll see let's see


21546
01:47:09,912 --> 01:47:14,720
if i can find block provider for you here


21547
01:47:14,720 --> 01:47:18,552
it could be inside the documentation so i'm going to go to get started and then


21548
01:47:18,552 --> 01:47:23,440
i'm going to have a look at block package block and let's see provider if


21549
01:47:23,440 --> 01:47:27,120
you can find the provider in here somehow


21550
01:47:27,120 --> 01:47:31,512
block uh architecture naming convention


21551
01:47:31,512 --> 01:47:36,480
getting started is there is something uh inside i have a


21552
01:47:36,480 --> 01:47:40,000
little bit of a problem right now actually finding block


21553
01:47:40,000 --> 01:47:45,360
provider so let's search for it block provider


21554
01:47:45,360 --> 01:47:49,040
and then we end up here


21555
01:47:49,120 --> 01:47:52,160
and i mean this is not the best


21556
01:47:52,160 --> 01:47:54,640
documentation right now to be honest with you we don't want to look for a


21557
01:47:54,640 --> 01:47:58,552
blog provider right here but as you can see it says it is a flutter


21558
01:47:58,552 --> 01:48:02,720
widget which provides a block to its children so this is how you would work


21559
01:48:02,720 --> 01:48:08,000
with a block provider so it creates the block instance for you and then it will


21560
01:48:08,000 --> 01:48:13,120
allow you to return a child all right so kind of like a builder but not really


21561
01:48:13,120 --> 01:48:15,512
all right


21562
01:48:15,680 --> 01:48:20,360
so that's block provider and as i mentioned you can always go to the block


21563
01:48:20,360 --> 01:48:24,552
library.dev website in order to get more information


21564
01:48:24,552 --> 01:48:28,960
about block and read its documentation


21565
01:48:29,512 --> 01:48:33,512
so the next component you need to know about is


21566
01:48:33,512 --> 01:48:36,872
block listener so


21567
01:48:36,872 --> 01:48:41,760
what is a block listener as its name indicates a block listener simply allows


21568
01:48:41,760 --> 01:48:46,000
you to hook into a um i'll actually see if we have a


21569
01:48:46,000 --> 01:48:50,080
block listener i can see that we have a blog listener in this application that


21570
01:48:50,080 --> 01:48:52,960
we're going to develop so you're going to learn about it soon but a block


21571
01:48:52,960 --> 01:48:57,040
listener as its name indicates it listen to changes to the states of a block


21572
01:48:57,040 --> 01:49:01,192
that's it so you can do some side effects so displaying a new screen for


21573
01:49:01,192 --> 01:49:05,040
instance or displaying an error message those are all side effects okay so you


21574
01:49:05,040 --> 01:49:09,080
can do that with block listener


21575
01:49:09,120 --> 01:49:14,232
now let's have a look at what a block builder is uses your block state changes


21576
01:49:14,232 --> 01:49:21,120
to provide you with a widget so as we have a block provider um sorry


21577
01:49:21,120 --> 01:49:26,080
we talked about block provider before it gives you uh the chance basically to


21578
01:49:26,080 --> 01:49:28,000
create um


21579
01:49:28,000 --> 01:49:34,960
a child now inside this child you can then provide a create a block builder


21580
01:49:34,960 --> 01:49:39,280
that listens for changes inside your block then it allows you to build new


21581
01:49:39,280 --> 01:49:44,400
widgets based on those changes so it's very much like a future builder or


21582
01:49:44,400 --> 01:49:48,080
like a stream builder i would say and we've already used stream builder so you


21583
01:49:48,080 --> 01:49:52,720
should know how they work but again this is just theory so um


21584
01:49:52,720 --> 01:49:58,080
i'm gonna talk more about these as we actually build our application okay


21585
01:49:58,080 --> 01:50:01,760
so after all this we also have a block


21586
01:50:01,760 --> 01:50:06,232
consumer and what a block consumer is that it combine as i've actually written


21587
01:50:06,232 --> 01:50:10,080
here it combines block listener and block builder so a block consumer


21588
01:50:10,080 --> 01:50:15,120
listens to changes that happen inside a block and then it will allow you to do


21589
01:50:15,120 --> 01:50:18,720
both a side effect and it will also allow you to create a widget to display


21590
01:50:18,720 --> 01:50:21,600
to the user based on those changes all right


21591
01:50:21,600 --> 01:50:26,480
and again i don't want to go too much into details in uh for a theory because


21592
01:50:26,480 --> 01:50:30,872
depending on how you learn new things theory may not be your strongest point


21593
01:50:30,872 --> 01:50:36,800
just like it is not for me so it could be a waste of time for you


21594
01:50:38,000 --> 01:50:43,440
so let's go ahead and start adding our dependencies in our project so i'm going


21595
01:50:43,440 --> 01:50:48,640
to bring our notes application to the screen


21596
01:50:49,120 --> 01:50:54,872
resize it a little bit so we have place for scr cpy as well


21597
01:50:54,872 --> 01:50:59,600
and we have scr cpy right here as i can see and this is our application


21598
01:50:59,600 --> 01:51:02,960
okay and the application is running currently


21599
01:51:02,960 --> 01:51:05,832
so then what we're going to do is going to


21600
01:51:05,832 --> 01:51:10,720
go ahead and say flutter pop add block and then flutter pop add flutter block


21601
01:51:10,720 --> 01:51:14,080
so let's go ahead and increase the size in


21602
01:51:14,080 --> 01:51:21,760
here then i'm going to go to terminal say flutter pop add walk


21603
01:51:21,832 --> 01:51:25,040
so that's going to do its work


21604
01:51:26,000 --> 01:51:30,080
and it added one dependency i'm just going to say flutter hub at flutter


21605
01:51:30,080 --> 01:51:32,400
block


21606
01:51:34,232 --> 01:51:38,640
all right and this is a package so it's not really


21607
01:51:38,640 --> 01:51:43,440
a plugin and i don't believe it's a plugin i think it's a package so it


21608
01:51:43,440 --> 01:51:47,680
could be sufficient for us just to stop our application in here and just say


21609
01:51:47,680 --> 01:51:50,552
flutter clean


21610
01:51:50,552 --> 01:51:56,320
that cleans the application that we're going to say fire pub get


21611
01:51:56,320 --> 01:52:01,192
this could be sufficient so that's gonna do its work


21612
01:52:02,000 --> 01:52:07,040
and then we're gonna go then we're gonna go to our main dart


21613
01:52:07,040 --> 01:52:11,912
file and just say run run without debugging and that's gonna just do the


21614
01:52:11,912 --> 01:52:16,232
greater build if you're running on android or it's gonna use xcode build in


21615
01:52:16,232 --> 01:52:21,192
order to build your ios application so


21616
01:52:22,320 --> 01:52:25,600
and i'm just gonna let that do its thing now so


21617
01:52:25,600 --> 01:52:30,552
let's just wait okay now the build is done and i can see


21618
01:52:30,552 --> 01:52:34,640
the application running on the screen without a problem so


21619
01:52:34,640 --> 01:52:38,552
what we need to do as the next step is to do something dramatic and that is to


21620
01:52:38,552 --> 01:52:42,800
comment out our home page because we're gonna replace our home page with another


21621
01:52:42,800 --> 01:52:47,192
home page which is gonna use block so it may sound scary but it's not that scary


21622
01:52:47,192 --> 01:52:51,440
i promise you so let's go into your main dart in here


21623
01:52:51,440 --> 01:52:55,832
select home page as it stands right there and just comment it out


21624
01:52:55,832 --> 01:53:01,120
and we're going to create a new stateful widget again and we call it home page so


21625
01:53:01,120 --> 01:53:08,000
stf and home page the reason this is a stateful widget is because we need a


21626
01:53:08,000 --> 01:53:12,400
text editing controller as i mentioned how we're going to do this example right


21627
01:53:12,400 --> 01:53:16,720
now to learn block is to create an application that gives you a text field


21628
01:53:16,720 --> 01:53:21,760
that you can enter a number into we start with the value of zero


21629
01:53:21,760 --> 01:53:26,872
in our block so the block holds on to a number and then when you and then we


21630
01:53:26,872 --> 01:53:33,192
will create two events one an increment event and a decrement event and


21631
01:53:33,192 --> 01:53:36,960
so when we then give the increment event to our block


21632
01:53:36,960 --> 01:53:40,640
then we want to grab the current value inside the text field so if we start


21633
01:53:40,640 --> 01:53:45,120
with zero and then i type five in this text field and i press increment button


21634
01:53:45,120 --> 01:53:51,512
then i want five to be added to the current state which is 0.


21635
01:53:51,512 --> 01:53:56,400
so the result will be 5. the next time i will type 10 then press decrement so


21636
01:53:56,400 --> 01:54:02,320
decrement will be 10 and then it will be 5 minus 10 so we end up with minus -5


21637
01:54:02,320 --> 01:54:04,552
so that's the ui that we're going to create


21638
01:54:04,552 --> 01:54:08,640
and for that we need this home page and the reason it's stateful is because we


21639
01:54:08,640 --> 01:54:14,320
need to grab that text from our text editing controller okay so


21640
01:54:14,480 --> 01:54:17,680
so that's our new home page and if i now


21641
01:54:17,680 --> 01:54:21,912
press command s in here our screen is going to be black because well this this


21642
01:54:21,912 --> 01:54:25,512
is a home page with no information no scaffold nothing all


21643
01:54:25,512 --> 01:54:27,760
right


21644
01:54:28,232 --> 01:54:32,872
so and now let's talk about this absolute beauty that we're going to call


21645
01:54:32,872 --> 01:54:38,320
counter state you see as i mentioned every block has two very


21646
01:54:38,320 --> 01:54:44,960
important properties one is its state and the other one is an event an event


21647
01:54:44,960 --> 01:54:49,192
goes in the block and state is something that comes out the block and so the


21648
01:54:49,192 --> 01:54:54,080
state as its name indicates describes the state of your block


21649
01:54:54,080 --> 01:54:58,080
so if you think about it what we expect


21650
01:54:58,080 --> 01:55:02,800
from our block is a simple integer okay so we could either


21651
01:55:02,800 --> 01:55:07,680
say our block's output is integer or we could define a state that wraps around


21652
01:55:07,680 --> 01:55:12,320
that integer so that's exactly what we're gonna do right now


21653
01:55:12,320 --> 01:55:16,160
so let's go ahead and say we have an abstract


21654
01:55:16,160 --> 01:55:20,320
class and we call it counter state


21655
01:55:20,320 --> 01:55:24,872
and then here we have a final integer called value and then we're gonna create


21656
01:55:24,872 --> 01:55:30,960
an initializer here like that and that's our counter


21657
01:55:30,960 --> 01:55:35,912
you could also mark this as immutable if you want to all right so let's do that


21658
01:55:35,912 --> 01:55:39,280
and let me also change the screen layout a little bit here so you see the code


21659
01:55:39,280 --> 01:55:45,192
better so that's like the basic state of our block okay we're not actually gonna


21660
01:55:45,192 --> 01:55:50,872
use the state as it is we're gonna create two sub states for this as you


21661
01:55:50,872 --> 01:55:55,440
will soon see now


21662
01:55:55,440 --> 01:55:59,512
since we're going to create a text field in the middle kind of like this screen


21663
01:55:59,512 --> 01:56:03,832
and the user is able then to enter pretty much any text in this text field


21664
01:56:03,832 --> 01:56:07,832
let's just assume so just normal text not even integer so the user just say


21665
01:56:07,832 --> 01:56:11,512
hello world and then presses the plus button what should we do in that case


21666
01:56:11,512 --> 01:56:17,600
plus button plot plus thing like adding hello world to the previous value of


21667
01:56:17,600 --> 01:56:22,480
five means nothing so we're gonna divide our state into a valid state and an


21668
01:56:22,480 --> 01:56:26,960
invalid state and then present this to the user in two different ways so let's


21669
01:56:26,960 --> 01:56:32,160
go ahead and create a class called as i've mentioned there counter stayed


21670
01:56:32,160 --> 01:56:36,960
valid so i'm going to actually grab that code


21671
01:56:36,960 --> 01:56:40,720
so we don't have to type it ourselves as you'll soon see


21672
01:56:40,720 --> 01:56:45,120
here we have a counter state valid extends our counter state which is this


21673
01:56:45,120 --> 01:56:50,640
one and we have a constant constructor that says okay give me a value a valid


21674
01:56:50,640 --> 01:56:55,120
value and then i'm going to call my super class with that value


21675
01:56:55,120 --> 01:57:02,552
all right so that's a valid state now let's then create a an invalid state


21676
01:57:02,552 --> 01:57:07,760
so let's say class i'm going to bring the correct caption


21677
01:57:07,760 --> 01:57:10,640
as well invalid state


21678
01:57:10,640 --> 01:57:17,832
let's say counter state invalid number extends counter state


21679
01:57:17,832 --> 01:57:23,440
in this case we want this state to actually include some sort of um


21680
01:57:23,440 --> 01:57:27,440
the value that actually made our state invalid so i'm just going to say that


21681
01:57:27,440 --> 01:57:31,680
value is a string and we're going to call it invalid value here okay


21682
01:57:31,680 --> 01:57:37,680
and i'm going to say const and let's just bring a create an initializer here


21683
01:57:37,680 --> 01:57:42,552
a few required parameters in here and we're just uh


21684
01:57:42,552 --> 01:57:46,552
like this so in this case we're going to create two required parameters one is


21685
01:57:46,552 --> 01:57:50,960
the invalid value that caused the error or cause the state of our block to be


21686
01:57:50,960 --> 01:57:56,160
invalid and the other one is going to be a required of the required parameter of


21687
01:57:56,160 --> 01:58:00,480
the previous value so because we may actually need the


21688
01:58:00,480 --> 01:58:04,552
previous value uh or something or maybe like the ui needs


21689
01:58:04,552 --> 01:58:08,480
to display that to the user so if this is the output of our block the state


21690
01:58:08,480 --> 01:58:14,400
remember is the output maybe then the ui actually upon me trying to plus hello


21691
01:58:14,400 --> 01:58:18,640
world with five he may want to use this previous value to populate that text


21692
01:58:18,640 --> 01:58:22,080
field or populate the ui again and say hello


21693
01:58:22,080 --> 01:58:25,280
um this value that you entered is invalid


21694
01:58:25,280 --> 01:58:28,800
but the previous value was this so i'm just going to show that okay so that's


21695
01:58:28,800 --> 01:58:31,440
why we need previous value and here we're getting an error because we're not


21696
01:58:31,440 --> 01:58:38,080
calling super let's call super with the previous value


21697
01:58:40,080 --> 01:58:44,800
okay that's our counter state invalid number okay so we've created


21698
01:58:44,800 --> 01:58:51,680
our two states that uh come from counter states immutable abstract class


21699
01:58:51,680 --> 01:58:55,040
okay let's go ahead then and create our


21700
01:58:55,040 --> 01:58:58,720
counter event and remember counter event is very


21701
01:58:58,720 --> 01:59:03,040
similar to state so first we actually have to define an event


21702
01:59:03,040 --> 01:59:06,960
and let's go ahead and define that event like this


21703
01:59:06,960 --> 01:59:09,832
and you can see it's an abstract class called counter event and it just


21704
01:59:09,832 --> 01:59:13,912
contains a value so it just says the string that comes from the ui can just


21705
01:59:13,912 --> 01:59:16,640
go directly into the counter oven that's it


21706
01:59:16,640 --> 01:59:20,480
and let's make this actually immutable as well


21707
01:59:22,552 --> 01:59:28,000
and what we're gonna do is to create an event for increment


21708
01:59:28,000 --> 01:59:32,320
so let's go and say class increment value


21709
01:59:32,320 --> 01:59:36,000
um or increment event


21710
01:59:36,000 --> 01:59:39,440
extends counter event okay


21711
01:59:39,440 --> 01:59:43,680
and in here we're just going to say const create a constant


21712
01:59:43,680 --> 01:59:48,720
constructor for it and we just grab a value in here so a string value and it


21713
01:59:48,720 --> 01:59:53,832
should just go to the super that's it and what we need to do is just to grab


21714
01:59:53,832 --> 01:59:58,480
this event as well and create a decrement event


21715
01:59:58,480 --> 02:00:03,832
so let's call this decrement here


21716
02:00:03,832 --> 02:00:09,120
like so and again remember the event is something that we need to trigger and


21717
02:00:09,120 --> 02:00:14,080
send to the block from the ui all right so we're gonna pack these increment


21718
02:00:14,080 --> 02:00:17,760
event and decrement event with with the string that the user has entered in the


21719
02:00:17,760 --> 02:00:22,872
ui and then send it to the block as you'll soon see


21720
02:00:23,360 --> 02:00:28,232
so let's go ahead now and do the main part of this application which is our


21721
02:00:28,232 --> 02:00:33,440
block and the way to do that is to create a class if i can spell class


21722
02:00:33,440 --> 02:00:38,320
and say canner block extends block and you'll see it'll now auto


21723
02:00:38,320 --> 02:00:42,160
import it for me because we hadn't imported block from before


21724
02:00:42,160 --> 02:00:46,320
and now let's see if block is imported somewhere here and that's the package


21725
02:00:46,320 --> 02:00:49,600
block block if your editor doesn't allow you to auto import you will have to do


21726
02:00:49,600 --> 02:00:53,280
that by hand excuse me


21727
02:00:53,280 --> 02:00:58,232
so the way to create a block is first you define the state of that block like


21728
02:00:58,232 --> 02:01:03,360
what type of state does it have sorry events first we start with the counter


21729
02:01:03,360 --> 02:01:08,232
event and then the counter state okay so if you look at the definition of block


21730
02:01:08,232 --> 02:01:12,080
class itself you can see the two parameters are or the two generic types


21731
02:01:12,080 --> 02:01:15,912
are the event and the state so that's here we're saying our events


21732
02:01:15,912 --> 02:01:21,360
are of type counter event and our states are of type counter state


21733
02:01:21,512 --> 02:01:26,080
so that's that then let's go ahead and say we have a counter block


21734
02:01:26,080 --> 02:01:30,720
that's the constructor and what it does is it has to call super


21735
02:01:30,720 --> 02:01:36,400
you see and our super actually needs the initial states so


21736
02:01:36,400 --> 02:01:41,680
every block has to have an initial state and that's when you pass your super okay


21737
02:01:41,680 --> 02:01:45,832
so what we're gonna do is we're going to say we start with the value a valid


21738
02:01:45,832 --> 02:01:50,080
value of 0. so we say const


21739
02:01:50,320 --> 02:01:54,000
counter state valid and we start with 0 just


21740
02:01:54,000 --> 02:01:56,480
like that


21741
02:01:56,832 --> 02:02:01,040
okay so that's our


21742
02:02:01,040 --> 02:02:06,400
let's see what happened there seems fine to me yeah


21743
02:02:07,360 --> 02:02:13,512
okay so that's the initializer in there now what we need to do is actually grab


21744
02:02:13,512 --> 02:02:17,512
these events as they come remember the ui is gonna


21745
02:02:17,512 --> 02:02:21,680
uh basically pass us these events so the ui is gonna say here's an increment


21746
02:02:21,680 --> 02:02:25,192
event with this value here's the decrement event with this value so we


21747
02:02:25,192 --> 02:02:30,080
need to catch those how do we do that there is a function called on on the


21748
02:02:30,080 --> 02:02:35,280
block itself that you can use so we're going to say on increment value


21749
02:02:35,280 --> 02:02:39,512
sorry increment event and then it gives you two parameters so


21750
02:02:39,512 --> 02:02:44,800
if you look at the function signature of on it actually gives you you see it


21751
02:02:44,800 --> 02:02:50,640
gives you the event and an emit so let's in here just write event


21752
02:02:50,640 --> 02:02:53,832
emit and in here we create a new function and


21753
02:02:53,832 --> 02:03:00,080
put semicolon at the end so that's how we're gonna handle the increment value


21754
02:03:00,080 --> 02:03:04,480
same we're gonna do for decrement so let's just copy that and paste it in


21755
02:03:04,480 --> 02:03:11,440
here and just say decrement all right so what are we doing here now


21756
02:03:11,440 --> 02:03:15,832
remember the event that comes in now is an increment event because we literally


21757
02:03:15,832 --> 02:03:19,832
said on increment event so we're we're then going to get that


21758
02:03:19,832 --> 02:03:25,760
integer from our events so remember our increment event actually has


21759
02:03:25,760 --> 02:03:30,552
is of type counter event and then it has a value of type string so we're gonna


21760
02:03:30,552 --> 02:03:37,680
try to parse that as an integer okay so we're going to say final integer is


21761
02:03:37,680 --> 02:03:43,120
int tri parse and we're going to say event dot value


21762
02:03:43,120 --> 02:03:48,400
like that so and try parse is a function on integer that


21763
02:03:48,400 --> 02:03:52,640
will try as its name indicates it's gonna try to parse a given string and


21764
02:03:52,640 --> 02:03:58,160
try to make it an integer and if it can't then that integer is gonna be null


21765
02:03:58,160 --> 02:04:02,552
so let's say if uh here if integer


21766
02:04:02,552 --> 02:04:06,800
is not null like that


21767
02:04:06,800 --> 02:04:12,080
and then we put an else in here and in the case of an else actually so


21768
02:04:12,080 --> 02:04:16,552
it means that hey you gave us something that we couldn't parse as an integer


21769
02:04:16,552 --> 02:04:20,720
what do we do with it all right then we're going to use our emit


21770
02:04:20,720 --> 02:04:26,000
emit is a function on its own you see it's an emitter that allows you then to


21771
02:04:26,000 --> 02:04:30,640
pass a state out your block so i actually scared myself with my own


21772
02:04:30,640 --> 02:04:35,440
finger so you you have you got your you got your um this


21773
02:04:35,440 --> 02:04:40,872
event in now you want to create a state and pass it out that's how you do it


21774
02:04:40,872 --> 02:04:45,680
with emit all right so we're gonna then say in this case


21775
02:04:45,680 --> 02:04:50,232
if we got uh if actually let's do integer null if we


21776
02:04:50,232 --> 02:04:53,600
got null we're going to handle the error here


21777
02:04:53,600 --> 02:04:57,600
sorry about that so if we got not what we're going to do is we're going to emit


21778
02:04:57,600 --> 02:05:02,400
a counter state invalid number


21779
02:05:02,400 --> 02:05:07,600
and we have invalid value and a previous value


21780
02:05:07,600 --> 02:05:13,680
so the invalid value was this value that was passed to us in here you see event


21781
02:05:13,680 --> 02:05:17,512
value so let's just say that's the event.value


21782
02:05:17,512 --> 02:05:21,912
and the next parameter is the previous value and the previous value is always


21783
02:05:21,912 --> 02:05:26,232
stored inside your state so let me actually do some cleanup in


21784
02:05:26,232 --> 02:05:30,320
here so you see the code better a comma here so let's see what happened


21785
02:05:30,320 --> 02:05:35,360
in here you see we're emitting so we're sending a state outside our block


21786
02:05:35,360 --> 02:05:41,360
so we're saying given an increment event where the integer where the value


21787
02:05:41,360 --> 02:05:46,960
couldn't be parsed as an integer we're emitting a new state saying that hey


21788
02:05:46,960 --> 02:05:50,960
your value which was in this event is invalid


21789
02:05:50,960 --> 02:05:55,192
so that's invalid value and the previous value that we had is


21790
02:05:55,192 --> 02:06:02,552
stored inside our state so your block in all your on functions you have access to


21791
02:06:02,552 --> 02:06:08,000
your current state before emitting a new one all right so that's the previous


21792
02:06:08,000 --> 02:06:13,600
value inside state and if we could actually grab an integer


21793
02:06:13,600 --> 02:06:17,912
we're going to emit a new value a new state and we're going to say counter


21794
02:06:17,912 --> 02:06:21,280
state valid okay


21795
02:06:21,280 --> 02:06:25,912
and we're going to say we take the current value in our state plus it this


21796
02:06:25,912 --> 02:06:29,440
integer like this right


21797
02:06:29,440 --> 02:06:34,720
like that so that's for increment


21798
02:06:35,512 --> 02:06:39,280
and as you'd guess decrement i'm going to remove this comma


21799
02:06:39,280 --> 02:06:42,400
by the way it was annoying me a little bit and decrement it's very similar to


21800
02:06:42,400 --> 02:06:47,040
increments so i'm just going to copy this code and remove this decrement one


21801
02:06:47,040 --> 02:06:50,320
and paste the increment one one more time and then this time i'm just going


21802
02:06:50,320 --> 02:06:53,832
to change it to decrements like this all right


21803
02:06:53,832 --> 02:06:57,600
and for the big decrement the only thing you have to do is just to change this


21804
02:06:57,600 --> 02:07:02,960
plus to a minus and that's it all right


21805
02:07:04,320 --> 02:07:11,280
wow a lot of work a lot of work so now let's go ahead to our


21806
02:07:11,280 --> 02:07:15,360
home page in here now we've basically gotten the block


21807
02:07:15,360 --> 02:07:18,480
down so the block should be working as uh


21808
02:07:18,480 --> 02:07:24,080
as we want it to so so let's now go into this homepage that


21809
02:07:24,080 --> 02:07:29,600
we created in here and create our text editing controller


21810
02:07:30,320 --> 02:07:35,832
so for that i'm just going to say late final


21811
02:07:35,912 --> 02:07:40,720
text editing controller and we're calling it controller as i can see here


21812
02:07:40,720 --> 02:07:46,872
let's go into init state and override also the dispose function okay


21813
02:07:46,872 --> 02:07:50,640
i'm gonna bring the code so you can see it


21814
02:07:50,640 --> 02:07:54,480
i'm gonna bring it up so in in its state we're gonna instantiate


21815
02:07:54,480 --> 02:07:58,000
our controller so this is nothing new you've already done this before many


21816
02:07:58,000 --> 02:08:01,440
times and in here we're gonna dispose of that


21817
02:08:01,440 --> 02:08:03,832
control


21818
02:08:05,192 --> 02:08:10,720
uh fantastic all right that part is done so what we need to do now inside our


21819
02:08:10,720 --> 02:08:16,552
build function we're gonna basically we have to create um


21820
02:08:16,552 --> 02:08:20,080
our main ui so i'm gonna bring the caption for that as you can see we have


21821
02:08:20,080 --> 02:08:26,552
to use block provider and block consumer so in the build function right now we


21822
02:08:26,552 --> 02:08:31,760
only have a container so let's instead of doing a container say okay we want to


21823
02:08:31,760 --> 02:08:36,080
create a block and we also want to just like make sure everything after this


21824
02:08:36,080 --> 02:08:39,600
return statement has access to that block so we need the block provider so


21825
02:08:39,600 --> 02:08:43,760
let's say block provider and block provider is in a


21826
02:08:43,760 --> 02:08:47,600
flutter block package as you can see here and we haven't imported that yet so


21827
02:08:47,600 --> 02:08:52,400
let's import that right now in the create


21828
02:08:52,400 --> 02:08:56,960
parameter we get a context as you'll see i can get visual studio code to complete


21829
02:08:56,960 --> 02:09:00,552
this for me it says i will give you context and you'll give me a block back


21830
02:09:00,552 --> 02:09:06,232
so i'll say okay i'll take the context and i'll create a counter block here


21831
02:09:06,232 --> 02:09:09,440
okay so that's the first parameter then we're


21832
02:09:09,440 --> 02:09:12,960
getting an error here just because we haven't provided a child here so if i


21833
02:09:12,960 --> 02:09:18,640
say child in here is a text of hello world


21834
02:09:18,640 --> 02:09:22,872
and press command s then we see hello world right there okay so in here our


21835
02:09:22,872 --> 02:09:27,120
task then is to create a scaffold so let's create our scaffold just we


21836
02:09:27,120 --> 02:09:32,080
usually like we usually do and for our app bar


21837
02:09:32,080 --> 02:09:35,440
let's create an app bar in here and say app bar


21838
02:09:35,440 --> 02:09:39,680
title is it const can't see anything because the


21839
02:09:39,680 --> 02:09:45,912
documentation is all over the place cons text and i'm going to say testing


21840
02:09:47,512 --> 02:09:52,160
all right so now we have a blog provider that created an instance of our counter


21841
02:09:52,160 --> 02:09:55,832
block and then we have a scaffold with a beautiful app bar displayed on the


21842
02:09:55,832 --> 02:10:00,800
screen okay so as the caption at the bottom screen


21843
02:10:00,800 --> 02:10:04,640
mentions for uh our child the child of our block


21844
02:10:04,640 --> 02:10:09,512
provider is a scaffold but inside the scaffold itself we have body


21845
02:10:09,512 --> 02:10:15,280
and for the body then we're going to create a block consumer so remember a


21846
02:10:15,280 --> 02:10:19,680
block consumer is it is


21847
02:10:19,680 --> 02:10:24,160
the combination of a block listener and a block builder


21848
02:10:24,160 --> 02:10:29,680
we need a block consumer here is and the reason for that is upon every


21849
02:10:29,680 --> 02:10:33,512
pressing of the plus or the minus buttons that we're going to develop soon


21850
02:10:33,512 --> 02:10:37,912
we want to clear the text inside of our text field


21851
02:10:37,912 --> 02:10:42,640
so that's a side effect so by us saying that okay whenever there's


21852
02:10:42,640 --> 02:10:46,160
a new state coming out of our block we want to clear something so this is a


21853
02:10:46,160 --> 02:10:50,400
signal when you want to do a side effect that has nothing really to do with like


21854
02:10:50,400 --> 02:10:55,360
a business logic or such then that is your listener so


21855
02:10:55,360 --> 02:10:59,192
so we're saying that we need a block listener but also we want to for


21856
02:10:59,192 --> 02:11:03,192
instance be able to have a builder so we want to build our


21857
02:11:03,192 --> 02:11:06,552
ui based on the current state of the block


21858
02:11:06,552 --> 02:11:10,720
well that is block builder so if you need a block listener anywhere in your


21859
02:11:10,720 --> 02:11:15,680
application and a block builder you need to instead use block consumer if you're


21860
02:11:15,680 --> 02:11:19,912
if you need them at the same level okay so block consumer combines block


21861
02:11:19,912 --> 02:11:26,480
listener and block builder so that's why we're using block consumer in this


21862
02:11:27,832 --> 02:11:31,280
block consumer it's going to say okay what block am i operating on so i'm just


21863
02:11:31,280 --> 02:11:35,040
going to say you're operating on counter block and then it says what state am i


21864
02:11:35,040 --> 02:11:39,912
operating on and we're going to say counter state


21865
02:11:39,912 --> 02:11:43,832
let's see if they're available counter


21866
02:11:44,640 --> 02:11:48,960
and you can i mean i'm not making this up this stuff is present in the


21867
02:11:48,960 --> 02:11:52,080
documentation if you go to block consumer as well


21868
02:11:52,080 --> 02:11:57,040
let's see in here what it says it says uh extend state state streamable so


21869
02:11:57,040 --> 02:12:01,912
that's the the b here b for me means the block and


21870
02:12:01,912 --> 02:12:05,440
s is the state so it's not so clear because it's working with a lot of


21871
02:12:05,440 --> 02:12:08,872
generics but you can read the documentation about that okay


21872
02:12:08,872 --> 02:12:14,320
so let's go in here and in here let's have a look


21873
02:12:14,320 --> 02:12:18,400
and it's complaining that some named parameters aren't present as you can see


21874
02:12:18,400 --> 02:12:22,872
named parameter listener is required so let's go ahead and say listener


21875
02:12:22,872 --> 02:12:27,832
and i'm going to get visual studio code to help me clean this up and upon any


21876
02:12:27,832 --> 02:12:33,600
new events or sorry upon any new states produced by our blog i want to clear our


21877
02:12:33,600 --> 02:12:37,360
text editing controller so let's just say text controller


21878
02:12:37,360 --> 02:12:40,320
uh what do we call it do we call it


21879
02:12:40,320 --> 02:12:43,600
controller yeah so we're going to say controller


21880
02:12:43,600 --> 02:12:47,440
clear so we're going to clear the text that is displayed inside the text field


21881
02:12:47,440 --> 02:12:51,192
soon okay then we need the builder function so in


21882
02:12:51,192 --> 02:12:54,552
this builder function as you'll see the


21883
02:12:54,552 --> 02:12:59,680
it will give you the current state and you need to return a widget back okay


21884
02:12:59,680 --> 02:13:04,320
so what we're going to do in this in this is first we're going to grab


21885
02:13:04,320 --> 02:13:09,280
like um to see if there's an invalid value so


21886
02:13:09,280 --> 02:13:14,800
let's just say final invalid value is and we're going to say if this state


21887
02:13:14,800 --> 02:13:19,360
is a counter state invalid number


21888
02:13:19,360 --> 02:13:22,960
with a question mark so we're using turner here and we're going to say get


21889
02:13:22,960 --> 02:13:28,720
the states uh let me bring the code up uh invalid value


21890
02:13:28,720 --> 02:13:33,192
otherwise we're gonna say empty string so


21891
02:13:33,192 --> 02:13:38,872
if i then in here say invalid value as you can see it's now a string okay


21892
02:13:38,872 --> 02:13:43,360
and the reason behind this to be honest with you is so that we can


21893
02:13:43,360 --> 02:13:47,040
basically display


21894
02:13:47,040 --> 02:13:52,480
the a little error message to the user should there be an invalid value so if i


21895
02:13:52,480 --> 02:13:56,080
have if i have entered some information in the text field instead of a number


21896
02:13:56,080 --> 02:14:00,640
i've entered hello world and then our block produces a counter state


21897
02:14:00,640 --> 02:14:05,280
invalid number we're going to display an error to user and this error is gonna


21898
02:14:05,280 --> 02:14:09,600
disappear the next time actually the user enters a valid number in the text


21899
02:14:09,600 --> 02:14:12,872
field okay so we're gonna use a new widget that we haven't used before


21900
02:14:12,872 --> 02:14:18,480
called visibility and this visibility is gonna be based on whether there is an


21901
02:14:18,480 --> 02:14:23,280
invalid state or not so you'll soon see actually how we're gonna


21902
02:14:23,280 --> 02:14:28,000
implement that so let's go and as our builder's main like


21903
02:14:28,000 --> 02:14:34,000
return value create a column okay and column has to have children all


21904
02:14:34,000 --> 02:14:37,040
right so what we're going to do is to first


21905
02:14:37,040 --> 02:14:41,832
display a text field sorry a text in here so let's just say text


21906
02:14:41,832 --> 02:14:46,872
and we're going to say current value is equal to this state value


21907
02:14:46,872 --> 02:14:51,120
all right so that's going to be the current value of our


21908
02:14:51,120 --> 02:14:58,480
state and if i do command s you can see that it says current value is 0.


21909
02:14:59,512 --> 02:15:04,480
so that's the current value then what we're going to do is to go ahead and


21910
02:15:04,480 --> 02:15:09,760
create a visibility widget which in case the


21911
02:15:09,760 --> 02:15:14,320
current state is counter state invalid number is going to display an error


21912
02:15:14,320 --> 02:15:18,232
message to the user so let's say we're going to control the visibility of that


21913
02:15:18,232 --> 02:15:21,600
error message using the visibility widget


21914
02:15:21,600 --> 02:15:26,960
like this and it's childband is going to be


21915
02:15:26,960 --> 02:15:31,360
a text that says invalid inputs and then we're going to


21916
02:15:31,360 --> 02:15:36,232
add the invalid value in here as you can see as we've constructed that up there


21917
02:15:36,232 --> 02:15:40,400
already and the visibility flag you see we have


21918
02:15:40,400 --> 02:15:44,872
to return a boolean okay so how do we know that


21919
02:15:44,872 --> 02:15:47,832
we have to display


21920
02:15:48,552 --> 02:15:53,440
this widget with visibility and that is if you can


21921
02:15:53,440 --> 02:15:57,912
grab hold of your state and say okay this state is actually counter state


21922
02:15:57,912 --> 02:16:02,232
invalid number so let's just say state


21923
02:16:02,400 --> 02:16:07,440
is counter state invalid number just like that okay so that's how we grab


21924
02:16:07,440 --> 02:16:11,440
hold of that invisibility and you can see at the moment it's not


21925
02:16:11,440 --> 02:16:15,192
displayed all right even if we even if we put some


21926
02:16:15,192 --> 02:16:19,280
um actually let me just say is not


21927
02:16:19,280 --> 02:16:22,960
and then save it and you'll see now it says invalid input so it's just


21928
02:16:22,960 --> 02:16:26,640
displayed right there okay but if you say state is then it's going to


21929
02:16:26,640 --> 02:16:31,440
disappear because the current state is not invalid number


21930
02:16:32,800 --> 02:16:37,192
okay that was for visibility now let's go and add our text field


21931
02:16:37,192 --> 02:16:40,552
so where the user can actually enter some information in the ui so let's just


21932
02:16:40,552 --> 02:16:43,192
say text field as the first parameter we're going to


21933
02:16:43,192 --> 02:16:46,872
say the controller is our controller


21934
02:16:46,872 --> 02:16:49,760
okay and what we're going to do is we're


21935
02:16:49,760 --> 02:16:53,832
going to give it a hint text so let's say decoration is a const inputs


21936
02:16:53,832 --> 02:16:57,512
decoration like that i'm going to put the code a


21937
02:16:57,512 --> 02:17:01,760
little bit higher on the screen so for the hint text i'm just going to


21938
02:17:01,760 --> 02:17:04,960
say enter and number here


21939
02:17:04,960 --> 02:17:10,000
like this okay and also let's just enforce the keyboard type


21940
02:17:10,000 --> 02:17:14,552
uh text input type of a number


21941
02:17:14,552 --> 02:17:18,160
all right but also remember if you oops


21942
02:17:18,160 --> 02:17:21,512
the controller has not been initialized really i thought we initialized the


21943
02:17:21,512 --> 02:17:26,800
controller yeah maybe you have to do a hot restart


21944
02:17:26,960 --> 02:17:31,440
there we go so now we have enter a number here okay


21945
02:17:31,680 --> 02:17:36,872
great stuff now all right this is what i was going to say even though we have a


21946
02:17:36,872 --> 02:17:39,832
text field here and we actually said that the keyboard should be numerical


21947
02:17:39,832 --> 02:17:43,512
but i can still paste non-numerical numbers in here so if i like use the


21948
02:17:43,512 --> 02:17:48,640
paste functionality in android or is so that's the reason we have that invalid


21949
02:17:48,640 --> 02:17:52,872
state in case someone else someone actually enters another value except for


21950
02:17:52,872 --> 02:17:56,720
a number and there are also input formatters in flutter that you can use


21951
02:17:56,720 --> 02:18:02,160
in order to for instance um avoid users entering non-valid values in


21952
02:18:02,160 --> 02:18:05,192
your text fields but that's a whole other subject that we're not going to


21953
02:18:05,192 --> 02:18:08,480
discuss in this chapter so


21954
02:18:08,552 --> 02:18:11,760
then what we're going to do is we're going to have two text buttons for


21955
02:18:11,760 --> 02:18:17,440
increment and decrement so let's after this text field create a row so


21956
02:18:17,440 --> 02:18:21,192
a row is like the opposite of a column whereas a column displays those


21957
02:18:21,192 --> 02:18:24,552
components vertically one after one after each other a row creates its


21958
02:18:24,552 --> 02:18:28,080
components horizontally from left to right and left speaking languages and


21959
02:18:28,080 --> 02:18:30,320
right to left right


21960
02:18:30,320 --> 02:18:33,360
speaking right side speaking language i believe


21961
02:18:33,360 --> 02:18:40,320
i think actually row changes it's uh it should at least change is uh


21962
02:18:40,320 --> 02:18:43,832
how it arranges components based on the language but i'm not quite sure about


21963
02:18:43,832 --> 02:18:49,440
that so let's say row it has children


21964
02:18:49,440 --> 02:18:56,320
and it's two text buttons okay that have unpressed at the moment empty


21965
02:18:56,320 --> 02:19:01,680
and um it's a child it just says cons text just


21966
02:19:01,680 --> 02:19:06,720
minus like this okay so that's first that's the first button


21967
02:19:06,720 --> 02:19:11,832
and then for the next one i'm just gonna copy this text button and i'm gonna


21968
02:19:11,832 --> 02:19:17,040
paste it right here and in here i'm just going to say plus


21969
02:19:17,280 --> 02:19:22,552
all right so in here when the minus button is tapped i want to convey this


21970
02:19:22,552 --> 02:19:29,120
information to our block so i want to say grab the controllers text and make


21971
02:19:29,120 --> 02:19:33,912
sure that you send this increment where is it here


21972
02:19:33,912 --> 02:19:39,192
increment event to the block so we kind of need to grab hold of our block


21973
02:19:39,192 --> 02:19:44,960
how do we do that the way to do that is using a convenient function that


21974
02:19:44,960 --> 02:19:48,960
the good people at good very good ventures have created on


21975
02:19:48,960 --> 02:19:53,680
context and it's called read and in here you can actually say i want


21976
02:19:53,680 --> 02:20:00,400
to read my counter block like this okay so this gives you access to your block


21977
02:20:00,400 --> 02:20:04,160
that has been created by the block provider


21978
02:20:04,160 --> 02:20:08,720
so let's go ahead and in here let's say after we read that we want to add a new


21979
02:20:08,720 --> 02:20:14,480
event to it like this and we want to add an increment event that has the value of


21980
02:20:14,480 --> 02:20:16,720
our controller.txt


21981
02:20:16,720 --> 02:20:20,640
like this all right so this is how you send events to your


21982
02:20:20,640 --> 02:20:24,480
block and the same thing since we're actually sorry about that this should be


21983
02:20:24,480 --> 02:20:30,640
decrement so let's just say decrement like that and we copy the same code and


21984
02:20:30,640 --> 02:20:35,040
we bring it to our increment function as unpressed button here and instead of


21985
02:20:35,040 --> 02:20:39,120
decrement then we're going to say increment


21986
02:20:39,120 --> 02:20:44,232
right perfect okay so let's see now let's test


21987
02:20:44,232 --> 02:20:48,720
this application so at the moment we have current value zero now if i press


21988
02:20:48,720 --> 02:20:51,760
the plus button as you can see it says invalid input


21989
02:20:51,760 --> 02:20:56,400
all right but if i say 2 and press the plus button you can see


21990
02:20:56,400 --> 02:21:01,040
the value of 2 is entered there if i say hello world here


21991
02:21:01,040 --> 02:21:06,000
i press minus and it says oh invalid input hello world is invalid and as you


21992
02:21:06,000 --> 02:21:10,232
can see it clears this text and that's because of this listener here


21993
02:21:10,232 --> 02:21:14,000
uh this listener because a block consumer is also block listener remember


21994
02:21:14,000 --> 02:21:17,040
so it's a combination of a block listener and a block uh


21995
02:21:17,040 --> 02:21:21,760
builder so that's the clear working and the part


21996
02:21:21,760 --> 02:21:27,360
that is handling this invalid input is this thing so visibility if the current


21997
02:21:27,360 --> 02:21:31,680
state is an invalid number then this is becoming visible but if the current


21998
02:21:31,680 --> 02:21:35,912
state is not an invalid number so let's say three four plus two


21999
02:21:35,912 --> 02:21:39,912
it's going to be three six then the current state is actually not an invalid


22000
02:21:39,912 --> 02:21:44,160
number is uh the current state should be


22001
02:21:44,160 --> 02:21:49,040
valid it should be counter state valid so then the visibility is hiding that


22002
02:21:49,040 --> 02:21:54,400
error message so so that is pretty much it i mean um


22003
02:21:54,400 --> 02:21:57,760
huge congratulations if you could stick with me throughout this chapter it was


22004
02:21:57,760 --> 02:22:02,160
very heavy i understand it was a very heavy and very like technical chapter


22005
02:22:02,160 --> 02:22:07,192
talking a lot about business logic but believe me if you didn't understand like


22006
02:22:07,192 --> 02:22:10,800
most of the things i talked about you just need to practice


22007
02:22:10,800 --> 02:22:15,280
i'm no genius nobody who knows how to work with block or stuff like this is a


22008
02:22:15,280 --> 02:22:19,512
genius everybody has practice put it into practice done their own


22009
02:22:19,512 --> 02:22:23,040
applications done this test just go and create this counter application that i


22010
02:22:23,040 --> 02:22:27,760
just created try not to look at the code that i've written or rewritten


22011
02:22:27,760 --> 02:22:31,912
in this just try to remember the stuff from your memory and


22012
02:22:31,912 --> 02:22:36,400
after exercise and practice and practice and practice and you will get it and you


22013
02:22:36,400 --> 02:22:40,400
will get the idea of what a state is you'll get the idea of what events are


22014
02:22:40,400 --> 02:22:44,872
what block is and read documentations and you'll get this eventually i promise


22015
02:22:44,872 --> 02:22:47,192
you that


22016
02:22:47,280 --> 02:22:52,000
as is tradition we're gonna now uh since we're done with what we prom promised in


22017
02:22:52,000 --> 02:22:55,832
this chapter we're gonna go and commit our code


22018
02:22:55,832 --> 02:23:00,800
so let me change the screen layout a little bit and go to uh


22019
02:23:00,800 --> 02:23:06,232
terminal and increase the size get rid of the crcpy


22020
02:23:06,232 --> 02:23:10,320
and let's have a look at our log last


22021
02:23:10,320 --> 02:23:14,800
chapter we committed step 21 so let's see git status


22022
02:23:14,800 --> 02:23:18,480
and there were just a few things changed so let's add everything and just say git


22023
02:23:18,480 --> 02:23:24,552
commit step 22 and let's push our chase


22024
02:23:24,552 --> 02:23:28,552
and then i'm just going to say git commits sorry it's


22025
02:23:28,552 --> 02:23:32,552
a tag to see our last tag and i can see it was 21.


22026
02:23:32,552 --> 02:23:40,080
so let's tag this as step 22 and say git push tags


22027
02:23:40,080 --> 02:23:46,552
there we go so now step 22 is also tagged and ready


22028
02:23:47,120 --> 02:23:50,720
so what is to come this is also a tradition


22029
02:23:50,720 --> 02:23:52,872
we have at the end of every chapter we'll talk about what we're what we need


22030
02:23:52,872 --> 02:23:55,680
to discuss in the next chapter and what we need to discuss in the next chapter


22031
02:23:55,680 --> 02:24:00,080
is and we will convert our auth process to using block so


22032
02:24:00,080 --> 02:24:04,232
we've now talked we've act we actually got our auth


22033
02:24:04,232 --> 02:24:07,680
logic inside our application and that was our auth service i don't know if you


22034
02:24:07,680 --> 02:24:11,680
remember from before but we need to convert this auth service


22035
02:24:11,680 --> 02:24:15,360
to block and uh so in that way we're actually


22036
02:24:15,360 --> 02:24:20,000
putting our knowledge about block into use and combining it with what we've


22037
02:24:20,000 --> 02:24:24,000
already developed to make our application better and our logic not so


22038
02:24:24,000 --> 02:24:28,872
spread around everywhere in the ui so if you want grab some refreshments tea


22039
02:24:28,872 --> 02:24:32,320
or coffee and i'll see you in the next chapter hello everyone and welcome to


22040
02:24:32,320 --> 02:24:36,320
chapter 40 of this letter course in previous chapters we've been talking


22041
02:24:36,320 --> 02:24:41,832
about um our aus process and also storing um


22042
02:24:41,832 --> 02:24:48,080
users notes into a firestore database and in the previous chapter we also


22043
02:24:48,080 --> 02:24:55,360
talked about block so um i'm very aware that block could be an intimidating um


22044
02:24:55,360 --> 02:25:00,080
topic for some developers and that getting started with block could just


22045
02:25:00,080 --> 02:25:03,680
be conceived as like an extra step that you


22046
02:25:03,680 --> 02:25:07,360
think you don't need however i can assure you when you get


22047
02:25:07,360 --> 02:25:10,080
more into professional software development


22048
02:25:10,080 --> 02:25:14,640
and which is which may not be your goal i completely am aware of that but when


22049
02:25:14,640 --> 02:25:17,912
you get more and more to professional software development you'll understand


22050
02:25:17,912 --> 02:25:23,120
that you need to separate various layers of your product and that


22051
02:25:23,120 --> 02:25:27,120
the um the presentation layer where you're taking care of for instance


22052
02:25:27,120 --> 02:25:31,912
displaying stuff on the on the screen to the user shouldn't really have to talk


22053
02:25:31,912 --> 02:25:37,120
with your authentication directly um or for instance your authentication layer


22054
02:25:37,120 --> 02:25:42,160
doesn't necessarily have to depend at all on other parts of the application so


22055
02:25:42,160 --> 02:25:46,800
block is gonna allow you to in a very clean and concise way to


22056
02:25:46,800 --> 02:25:51,832
separate the various uh layers of your application into their own concern


22057
02:25:51,832 --> 02:25:56,080
layers so and the services are going to be only concerned with services and then


22058
02:25:56,080 --> 02:26:01,192
your ui is going to be only concerned with ui and so on so and so forth so


22059
02:26:01,192 --> 02:26:05,192
um it could be beneficial if you could actually before starting with this


22060
02:26:05,192 --> 02:26:09,912
chapter to go to the previous chapter and maybe watch it again or maybe even


22061
02:26:09,912 --> 02:26:15,600
practice yourself with block um i understand i know for sure that the


22062
02:26:15,600 --> 02:26:20,400
block libraries website as we looked at in the previous chapter they have quite


22063
02:26:20,400 --> 02:26:24,160
a lot of examples and i highly suggest that you go through some of those


22064
02:26:24,160 --> 02:26:28,480
examples at least and develop and implement those examples also yourself


22065
02:26:28,480 --> 02:26:33,280
to get a bet to get a better hang of what a block actually means and how


22066
02:26:33,280 --> 02:26:37,760
you're supposed to use it so if you've taken care of that and you


22067
02:26:37,760 --> 02:26:42,640
understand like the basics of block then we're we're we should be good to go


22068
02:26:42,640 --> 02:26:47,360
for this chapter so let me bring up the caption for what


22069
02:26:47,360 --> 02:26:51,280
we're actually going to do in this chapter you see the way we have our


22070
02:26:51,280 --> 02:26:54,080
application at the moment is that we have our


22071
02:26:54,080 --> 02:26:57,760
authentication service and our authentication service let me just bring


22072
02:26:57,760 --> 02:27:01,192
that to the screen here and let's have a quick look at it so if


22073
02:27:01,192 --> 02:27:04,480
i go to our auth service you'll see that we have


22074
02:27:04,480 --> 02:27:07,280
quite a few function functions in here we have


22075
02:27:07,280 --> 02:27:11,040
create user and we have uh we are exposing the


22076
02:27:11,040 --> 02:27:16,400
current user we have login logouts and email verification and initialize


22077
02:27:16,400 --> 02:27:22,400
now this is all good however we are it's very raw the way it is in that the ui is


22078
02:27:22,400 --> 02:27:26,800
literally making calls to our auth service which in case which in


22079
02:27:26,800 --> 02:27:32,640
turn is making calls to a provider which is our for instance um


22080
02:27:32,640 --> 02:27:36,232
firebase provider author provider so if you go in here you'll see firebase auth


22081
02:27:36,232 --> 02:27:40,000
provider and that is talking directly with firebase so


22082
02:27:40,000 --> 02:27:44,160
in a way you could say that the ui is talking pretty much directly with


22083
02:27:44,160 --> 02:27:47,512
firebase it's just going through some functions to get to firebase but that's


22084
02:27:47,512 --> 02:27:52,080
what pretty much it's doing so what we want to do in this chapter is to


22085
02:27:52,080 --> 02:27:55,600
try to make sure that our authentication is


22086
02:27:55,600 --> 02:28:00,000
behind a layer of block meaning that all the logic that has anything to do with


22087
02:28:00,000 --> 02:28:06,400
authentication is hidden behind a layer which we're going to call off block


22088
02:28:06,400 --> 02:28:09,760
so that's going to be our off block so it's like the and as you remember from


22089
02:28:09,760 --> 02:28:15,440
the previous chapter every block has two parameters one is what is


22090
02:28:15,440 --> 02:28:21,440
what comes inside the block so what's entered and what is the output


22091
02:28:21,440 --> 02:28:27,040
the input to your block are your events so you pass for instance your ui upon


22092
02:28:27,040 --> 02:28:31,600
pressing a button then you you pass an event a packaged event that


22093
02:28:31,600 --> 02:28:36,800
we call our auth event you're gonna pack package that up with any parameters that


22094
02:28:36,800 --> 02:28:42,232
that particular event is required it is required from you you take that event


22095
02:28:42,232 --> 02:28:46,232
and you give it to your auth lock then your off block is then gonna have some


22096
02:28:46,232 --> 02:28:51,360
time to process you remember we have these on function functions on


22097
02:28:51,360 --> 02:28:56,552
your uh off on your blocks when we talked about the counter block we had on


22098
02:28:56,552 --> 02:29:01,832
increment event on the command event etc so these are the events that come in so


22099
02:29:01,832 --> 02:29:06,232
we're going to package those events up from our ui and pass them to our off


22100
02:29:06,232 --> 02:29:10,160
block then our off block is going to have some time for itself to process


22101
02:29:10,160 --> 02:29:14,232
those events and based on those events that it has


22102
02:29:14,232 --> 02:29:19,600
it has received and based on its current state it's gonna either output the same


22103
02:29:19,600 --> 02:29:22,872
state or it's gonna output a new state so


22104
02:29:22,872 --> 02:29:28,640
events come in and states go out and the off block sits in the middle so event


22105
02:29:28,640 --> 02:29:33,600
off block and estate and these are three components that we're going to develop


22106
02:29:33,600 --> 02:29:36,320
in this chapter


22107
02:29:36,872 --> 02:29:39,600
so let's go ahead and


22108
02:29:39,600 --> 02:29:44,160
take care of our state and remember again state as its name indicates is the


22109
02:29:44,160 --> 02:29:49,360
state of authentication either you're logged in or you're logged out okay and


22110
02:29:49,360 --> 02:29:53,680
you could also be logged out with an error remember so you're either logged


22111
02:29:53,680 --> 02:29:57,120
in or logged out with an error so


22112
02:29:57,120 --> 02:30:02,480
we're going to start looking at these off states so what we need to first do


22113
02:30:02,480 --> 02:30:05,192
is to create a file as the caption indicates


22114
02:30:05,192 --> 02:30:10,640
under lip services auth block off state so


22115
02:30:10,640 --> 02:30:13,680
let me do some reshuffling on the screen here


22116
02:30:13,680 --> 02:30:17,192
maybe decrease the font size a little bit because it's just ginormous the way


22117
02:30:17,192 --> 02:30:22,080
it is right now so maybe this font is a little bit better


22118
02:30:22,080 --> 02:30:25,040
i'm going to put visual studio studio code in there


22119
02:30:25,040 --> 02:30:30,160
to the left and then i'm gonna bring scr cpy to the right


22120
02:30:30,160 --> 02:30:34,320
okay so i'm gonna close all these tabs that i have right here how we left the


22121
02:30:34,320 --> 02:30:38,800
application in the previous chapter and let's go ahead inside lib let's let's


22122
02:30:38,800 --> 02:30:42,800
see actually what we have in here we have lib and we have services


22123
02:30:42,800 --> 02:30:47,192
and under services we already have auth but we don't have a folder called block


22124
02:30:47,192 --> 02:30:50,480
at the moment we have auth provider etc etc


22125
02:30:50,480 --> 02:30:54,480
so let's go in off and just create a new file in here and say block


22126
02:30:54,480 --> 02:30:58,552
slash auth state state like this dot dart


22127
02:30:58,552 --> 02:31:03,440
okay so that's our off state


22128
02:31:03,440 --> 02:31:07,192
now if you remember from the previous chapter when we talked about


22129
02:31:07,192 --> 02:31:10,480
the counter block um


22130
02:31:10,480 --> 02:31:16,552
usually states are immutable and that they're also they're like at the generic


22131
02:31:16,552 --> 02:31:21,360
states that every other state in your block


22132
02:31:21,360 --> 02:31:25,512
inherits from is usually an abstract immutable class


22133
02:31:25,512 --> 02:31:30,232
meaning that it is a class pretty much almost with no logic at all it may have


22134
02:31:30,232 --> 02:31:35,280
a constant constructor but in and on itself it does nothing so it


22135
02:31:35,280 --> 02:31:41,440
just is dictating that hey every state that comes out of this off block is of


22136
02:31:41,440 --> 02:31:46,232
this type okay so let's go ahead and create our off state


22137
02:31:46,232 --> 02:31:50,552
so maybe i should actually increase the size of that font


22138
02:31:50,552 --> 02:31:56,000
so we're going to start by writing um our


22139
02:31:56,000 --> 02:32:00,720
states as you can see so we're going to code that in auth state.dart file


22140
02:32:00,720 --> 02:32:06,080
so i'm going to go ahead and just say abstract class auth state okay


22141
02:32:06,080 --> 02:32:10,000
and let's just create a constant constructor for it as well in case one


22142
02:32:10,000 --> 02:32:13,512
of our states needs to also have a constant constructor so this is this is


22143
02:32:13,512 --> 02:32:16,080
a pattern that you may have already been used to


22144
02:32:16,080 --> 02:32:20,400
by creating abstract classes and if you have like sub classes that conform to


22145
02:32:20,400 --> 02:32:23,440
your abstract classes and those subclasses actually want to have


22146
02:32:23,440 --> 02:32:27,120
constant constructors then you need to have a constant constructor in your


22147
02:32:27,120 --> 02:32:31,680
abstract class as well so that those subclasses can actually call that const


22148
02:32:31,680 --> 02:32:36,640
constructor in the abstract class otherwise you won't be able to have


22149
02:32:36,640 --> 02:32:40,232
constant constructors for your subclasses so for instance if i say


22150
02:32:40,232 --> 02:32:43,600
abstract class blah


22151
02:32:43,600 --> 02:32:49,120
extends off state and if i say const blah like this you can see it says a


22152
02:32:49,120 --> 02:32:53,040
constant constructor can't call a non-constant superconstructor and that


22153
02:32:53,040 --> 02:32:56,720
is the reason that i usually create a cons constructor for my


22154
02:32:56,720 --> 02:33:02,640
um classes for states and for um the events


22155
02:33:02,640 --> 02:33:04,872
okay


22156
02:33:05,440 --> 02:33:10,640
okay now we have our abstract class off state now let's go and make it immutable


22157
02:33:10,640 --> 02:33:14,480
and for that we need to import material or actually it is foundation let's


22158
02:33:14,480 --> 02:33:19,192
import from foundation in that case and we could just say show immutable


22159
02:33:19,192 --> 02:33:23,832
can we do it like that yeah that works as well okay


22160
02:33:23,832 --> 02:33:29,040
so that's that we have a generic off state so um actually i don't mean


22161
02:33:29,040 --> 02:33:33,440
generic in terms of like a dart generics which i just mean an abstract class that


22162
02:33:33,440 --> 02:33:37,680
every other off state can conform to


22163
02:33:37,760 --> 02:33:43,360
okay so we have basically a low i mean we have quite a few states so


22164
02:33:43,360 --> 02:33:47,280
i'm just going to start doing and doing and creating those off states one at a


22165
02:33:47,280 --> 02:33:50,320
time so while you're authenticating for instance


22166
02:33:50,320 --> 02:33:54,400
while you're let's say that you are


22167
02:33:54,400 --> 02:33:57,680
you've just opened the application and then we need to basically tell our


22168
02:33:57,680 --> 02:34:02,960
authentication um provider which is firebase to initialize itself while it's


22169
02:34:02,960 --> 02:34:08,232
doing that then our auth state is in the state of loading or initializing


22170
02:34:08,232 --> 02:34:11,512
whatever you want to call it but we kind of need have to have a state that


22171
02:34:11,512 --> 02:34:15,040
indicates to the application that hey something is happening with the auth


22172
02:34:15,040 --> 02:34:19,440
process and it is in the in the process of loading so let's go ahead and define


22173
02:34:19,440 --> 02:34:26,872
that so let's just say off state loading extends off state just like that okay


22174
02:34:26,872 --> 02:34:31,192
and this could also have a const constructor so let's just say like that


22175
02:34:31,192 --> 02:34:35,192
okay so that's the state of loading and we can


22176
02:34:35,192 --> 02:34:39,440
actually use the state of loading and i believe we're actually going to use it


22177
02:34:39,440 --> 02:34:43,192
while the user for instance is has just opened the application and the


22178
02:34:43,192 --> 02:34:48,320
applications is initializing and we can also use it for instance when


22179
02:34:48,320 --> 02:34:52,552
you tap the login button in order to log into the application and we're


22180
02:34:52,552 --> 02:34:58,480
communicating with firebase and that is also a state of loading okay


22181
02:34:58,480 --> 02:35:02,800
so you will see soon now these states are very important how the ui then


22182
02:35:02,800 --> 02:35:07,280
reacts to various events that are or various states that are happening in our


22183
02:35:07,280 --> 02:35:10,480
off block


22184
02:35:11,040 --> 02:35:14,320
so let's say that we have the loading state let's just


22185
02:35:14,320 --> 02:35:19,120
define a a logged in state so when the user has already logged into our


22186
02:35:19,120 --> 02:35:23,440
application then that is its own separate state so let's go ahead and say


22187
02:35:23,440 --> 02:35:28,160
off state logged in and it extends the off state


22188
02:35:28,160 --> 02:35:32,800
and now this is important to see okay when


22189
02:35:32,800 --> 02:35:36,640
you're logged into the application what does the application actually need from


22190
02:35:36,640 --> 02:35:41,120
us well the only thing the application needs from us when you have logged in


22191
02:35:41,120 --> 02:35:46,080
with the user is the current user at the moment we are going to our auth provider


22192
02:35:46,080 --> 02:35:50,640
and or our auth service and grabbing the current user but if we're gonna move


22193
02:35:50,640 --> 02:35:55,440
over to block and like blockifying our entire auth process then it makes more


22194
02:35:55,440 --> 02:36:00,400
sense for us to grab the current user that has logged into the application


22195
02:36:00,400 --> 02:36:05,760
from the current state of our auth block it's it's i mean to me it's really


22196
02:36:05,760 --> 02:36:10,160
beautiful because it makes sure that we can separate


22197
02:36:10,160 --> 02:36:14,480
the auth service and the auth provider from the ui by putting a block in the


22198
02:36:14,480 --> 02:36:16,800
middle so


22199
02:36:16,800 --> 02:36:20,872
i mean the name kind of it may sound like you're blocking the ui


22200
02:36:20,872 --> 02:36:25,680
but that's not how block is written as bloc it's not block so


22201
02:36:25,680 --> 02:36:29,440
but that's that's what we need to do so let's just say we have the final off


22202
02:36:29,440 --> 02:36:33,280
user and it's going to auto import it for me if you're using vim if you're on


22203
02:36:33,280 --> 02:36:37,280
linux and or if you're using subline that it's not able to auto import things


22204
02:36:37,280 --> 02:36:41,912
then you'll need to auto you need to import off user yourself okay


22205
02:36:41,912 --> 02:36:45,832
so let's say that a state of logged in or always carries with itself the


22206
02:36:45,832 --> 02:36:50,080
currently logged in user okay so we're just going to say user and i'm going to


22207
02:36:50,080 --> 02:36:54,080
create a constant constructor then for this class as well which in turn is


22208
02:36:54,080 --> 02:36:58,640
going to cause automatically for us on off state okay


22209
02:36:58,640 --> 02:37:04,000
so that's our state of logged in now let's say that we're going to define


22210
02:37:04,000 --> 02:37:08,872
also a logged out state and but also we want


22211
02:37:08,872 --> 02:37:11,600
to um we


22212
02:37:11,600 --> 02:37:16,480
actually before we go to log out maybe we have to talk about talk about login


22213
02:37:16,480 --> 02:37:21,120
when you're trying to log in a user in our application today if we go to our


22214
02:37:21,120 --> 02:37:26,320
login view you'll see that upon pressing the button to log in then we're doing a


22215
02:37:26,320 --> 02:37:29,832
try a weight of auth service firebase login so we're literally going towards


22216
02:37:29,832 --> 02:37:34,720
firebase directly and then if anything goes wrong then we're doing like a user


22217
02:37:34,720 --> 02:37:39,120
not found off exception wrong password off exception so we're handling our


22218
02:37:39,120 --> 02:37:44,640
exceptions in this way and the way that we need to do this now with uh fire with


22219
02:37:44,640 --> 02:37:50,232
block is that we need to produce a state you see the ui needs to only talk with


22220
02:37:50,232 --> 02:37:55,040
that block so it says hey block here's an event go log in


22221
02:37:55,040 --> 02:37:58,232
and then it says and then a blog is going to do some processing and then


22222
02:37:58,232 --> 02:38:02,480
maybe it says oh incorrect user incorrect email


22223
02:38:02,480 --> 02:38:09,120
or password is wrong or whatever so that needs to be its own state so


22224
02:38:09,120 --> 02:38:13,512
at the point where an exception has occurred during login


22225
02:38:13,512 --> 02:38:18,960
that is a state login failure we're going to call it login failure so the ui


22226
02:38:18,960 --> 02:38:22,800
is then going to react to that particular state in order to display for


22227
02:38:22,800 --> 02:38:26,960
instance an error message to the user like we are doing today so


22228
02:38:26,960 --> 02:38:32,400
let's go ahead and say class off state log in


22229
02:38:32,400 --> 02:38:36,720
failure and we're going to extend our off state


22230
02:38:36,720 --> 02:38:39,512
in here and what we're going to do is that upon


22231
02:38:39,512 --> 02:38:44,720
a login failure we need to carry with that state the actual exception that


22232
02:38:44,720 --> 02:38:49,120
caused the failure so let's just in here say exception exception just like we're


22233
02:38:49,120 --> 02:38:53,600
doing we're carrying the user with us when you log in we carry the exception


22234
02:38:53,600 --> 02:38:58,640
with us as well if you couldn't log in okay so that's how you should think as


22235
02:38:58,640 --> 02:39:03,832
well so your state should carry with them all the information the ui or the


22236
02:39:03,832 --> 02:39:08,872
consumer of that blog requires in order to be able to


22237
02:39:08,872 --> 02:39:11,832
fulfill its requirements


22238
02:39:11,832 --> 02:39:15,440
so in this case upon not being able to log in


22239
02:39:15,440 --> 02:39:19,680
the ui is going to require the actual exception that occurred so that it can


22240
02:39:19,680 --> 02:39:23,680
switch on it or do some if statements and see what kind of exception it was


22241
02:39:23,680 --> 02:39:28,000
and display the correct correct message to the user


22242
02:39:28,000 --> 02:39:32,960
so let's go ahead and then define that and since we've expected an exception in


22243
02:39:32,960 --> 02:39:37,192
here i'm going to create a constant constructor here as well


22244
02:39:37,192 --> 02:39:39,680
like that oh actually we got a warning here it


22245
02:39:39,680 --> 02:39:43,360
says prefer declaring cons constructors on immutable classes that's actually


22246
02:39:43,360 --> 02:39:51,040
beautiful yes sorry constant fantastic okay so that's our login failure


22247
02:39:51,040 --> 02:39:55,120
then what we need is you remember also i mean at the moment since we have our


22248
02:39:55,120 --> 02:39:59,440
counter block uh in here and the counter application that we did in the previous


22249
02:39:59,440 --> 02:40:03,512
chapter i can't show you the ui of the application but if you can recall what


22250
02:40:03,512 --> 02:40:08,720
we also had is if you try to log in with a user and that user's email is not


22251
02:40:08,720 --> 02:40:12,872
verified when they were actually gonna what we are what we were doing is that


22252
02:40:12,872 --> 02:40:16,640
we were sending the the user to the needs verification view or something


22253
02:40:16,640 --> 02:40:22,000
that we call it let's say let's see very verify email view right so we sent the


22254
02:40:22,000 --> 02:40:27,360
user to this view and we need to also we need to also produce that state so


22255
02:40:27,360 --> 02:40:33,280
upon user pressing the login button and if our off block realizes that hey this


22256
02:40:33,280 --> 02:40:38,400
user does exist but here she hasn't verified their email address then we're


22257
02:40:38,400 --> 02:40:43,360
gonna produce a state telling you ui that hey this user needs to verify their


22258
02:40:43,360 --> 02:40:47,360
information so let's go ahead and implement that so


22259
02:40:47,360 --> 02:40:52,720
we're going to say class auth state needs verification


22260
02:40:52,720 --> 02:40:57,832
extends off state okay and then here we're just gonna grab this


22261
02:40:57,832 --> 02:41:02,640
as a cons constructor like this all right


22262
02:41:02,640 --> 02:41:06,640
so that's that and also after doing that so now we have


22263
02:41:06,640 --> 02:41:12,320
login and login failure we have needs verification and we have the loading


22264
02:41:12,320 --> 02:41:15,680
state if we're in the middle of for instance making an api call that could


22265
02:41:15,680 --> 02:41:18,872
take some time the other state that we need is also


22266
02:41:18,872 --> 02:41:22,640
logged out if you're in the log out state then we need to produce that so


22267
02:41:22,640 --> 02:41:28,160
let's just say class off state um why is everything yellow


22268
02:41:28,160 --> 02:41:31,280
class state logged out


22269
02:41:31,280 --> 02:41:34,872
okay and this is going to extend offset as


22270
02:41:34,872 --> 02:41:38,960
well let's then make a constant constructor


22271
02:41:38,960 --> 02:41:44,552
for this like this great all right so log out when you're logged out you're


22272
02:41:44,552 --> 02:41:47,360
logged out there's nothing that the logged out state actually has to carry


22273
02:41:47,360 --> 02:41:51,192
with itself it doesn't have to carry the currently logged in user or anything or


22274
02:41:51,192 --> 02:41:55,512
even the current user in firebase even if even if you have anonymous users the


22275
02:41:55,512 --> 02:41:58,480
logged out state for our application doesn't have to carry with itself


22276
02:41:58,480 --> 02:42:02,800
anything okay and last but not least we also have to


22277
02:42:02,800 --> 02:42:08,480
define our logout errors and so upon logging out you could also


22278
02:42:08,480 --> 02:42:12,720
encounter some errors like if if a firebase for some reason is trying to


22279
02:42:12,720 --> 02:42:16,872
make an api call and that api call doesn't succeed then it is going to give


22280
02:42:16,872 --> 02:42:21,760
us an error so let's just define that as well let's just say class you see we


22281
02:42:21,760 --> 02:42:26,800
have that already for login failure let's go and actually copy that and


22282
02:42:26,800 --> 02:42:30,080
paste it here and here instead of login i'm just going


22283
02:42:30,080 --> 02:42:34,720
to say log out failure and copy that name and put it in the consonant


22284
02:42:34,720 --> 02:42:39,280
constructor as well great so we have one two


22285
02:42:39,280 --> 02:42:42,552
three four five and six


22286
02:42:42,552 --> 02:42:46,720
um off states so that looks actually really


22287
02:42:46,720 --> 02:42:49,680
good so our auth states are now defined okay


22288
02:42:49,680 --> 02:42:54,080
and please save this file as well


22289
02:42:54,320 --> 02:42:58,800
now we need to define the inputs you see the


22290
02:42:58,800 --> 02:43:03,040
states have been the output of our off block which we're going to write soon


22291
02:43:03,040 --> 02:43:07,832
the off block we haven't written it yet but these have been the outputs now what


22292
02:43:07,832 --> 02:43:13,600
are the inputs imagine in our off inputs we have to think about what the ui what


22293
02:43:13,600 --> 02:43:19,600
the ui is actually going to call so the ui is going to send packages of data


22294
02:43:19,600 --> 02:43:23,832
to this off block and these packages of data are the events so we need to make


22295
02:43:23,832 --> 02:43:28,320
sure that the events can contain with them the data that the


22296
02:43:28,320 --> 02:43:33,760
ui can package and send to our off block for instance during logging in what


22297
02:43:33,760 --> 02:43:38,872
event is it okay it's let's just say off event login what should it contain well


22298
02:43:38,872 --> 02:43:43,760
it should be the email and password something like that okay upon log out


22299
02:43:43,760 --> 02:43:47,120
okay that's a log out event what should it contain


22300
02:43:47,120 --> 02:43:50,480
no it's nothing it's just a log out event it shouldn't even provide the


22301
02:43:50,480 --> 02:43:54,320
email and password it should log out the currently logged in user from the


22302
02:43:54,320 --> 02:43:58,720
application so we need to think about events and


22303
02:43:58,720 --> 02:44:03,600
their consumers and also the states and their consumers so you have to pack


22304
02:44:03,600 --> 02:44:08,552
enough information both into your states and into your events


22305
02:44:08,552 --> 02:44:14,480
so that the consumer of your blog can actually both receive enough information


22306
02:44:14,480 --> 02:44:18,800
and be able to pack enough information to send to your auth


22307
02:44:18,800 --> 02:44:24,232
let's start to your block okay now what we need to do is just go


22308
02:44:24,232 --> 02:44:30,720
and define our auth event right here in lib services auth block off state


22309
02:44:30,720 --> 02:44:34,160
we have written our off state so i'm just going to close that file and let's


22310
02:44:34,160 --> 02:44:39,760
go in the same folder called blocking here you see lib services auth block


22311
02:44:39,760 --> 02:44:44,160
we're going to create a new file called auth event so right click new file off


22312
02:44:44,160 --> 02:44:48,872
event and marked


22313
02:44:49,360 --> 02:44:53,760
all right and now we have our off event and we need to do something very similar


22314
02:44:53,760 --> 02:44:57,440
to what we did with off state in that we need to define


22315
02:44:57,440 --> 02:45:03,280
a um a super class an abstract class that


22316
02:45:03,280 --> 02:45:08,232
basically engulfs all other um auth event so every


22317
02:45:08,232 --> 02:45:12,080
auth event in our application is going to be of this type so let's say


22318
02:45:12,080 --> 02:45:17,760
immutable and we don't have access to it yet so let's just um


22319
02:45:17,760 --> 02:45:20,832
let me just write it for now let's just abstract


22320
02:45:20,832 --> 02:45:26,000
class of events and a constant constructor which you now


22321
02:45:26,000 --> 02:45:29,512
know why we're creating


22322
02:45:29,512 --> 02:45:34,720
an immutable comes from foundation we've already done this so import immutable


22323
02:45:34,720 --> 02:45:38,720
okay uh


22324
02:45:39,600 --> 02:45:42,320
oh use show


22325
02:45:42,320 --> 02:45:46,640
sorry i programming quite a lot of languages python and rust and swift and


22326
02:45:46,640 --> 02:45:50,960
you name it javascript so it's sometimes a little bit messy in my head about


22327
02:45:50,960 --> 02:45:53,832
imports so um


22328
02:45:53,832 --> 02:45:56,960
there are quite a lot of different ways of important things in different


22329
02:45:56,960 --> 02:46:02,720
languages so i sometimes mix them up and so now we have our aus event


22330
02:46:02,720 --> 02:46:08,720
which is an immutable abstract class so now what we need from the ui is upon it


22331
02:46:08,720 --> 02:46:13,280
wanting to initialize our auth you see at the moment let's see actually what we


22332
02:46:13,280 --> 02:46:17,912
have in our main dart file this is just us having a


22333
02:46:17,912 --> 02:46:20,800
look and you can see here


22334
02:46:20,800 --> 02:46:25,680
and that's that's the counter block but how we had it before is if you remember


22335
02:46:25,680 --> 02:46:31,512
in our home page we had upon the entire home page being loaded we were saying


22336
02:46:31,512 --> 02:46:36,960
auth service firebase initialize so this is a signal from the ui that needs to


22337
02:46:36,960 --> 02:46:41,192
now go to our auth block and say hey initialize yourself so


22338
02:46:41,192 --> 02:46:48,552
let's define that signal or event let's say auth event initialize


22339
02:46:48,552 --> 02:46:52,400
extends off event [Music]


22340
02:46:52,400 --> 02:46:57,832
and it has no parameters it's as you saw in main darts it's literally just a


22341
02:46:57,832 --> 02:47:01,512
function being called so we're going to represent it with an event that has no


22342
02:47:01,512 --> 02:47:06,232
parameters but it has a constant okay


22343
02:47:06,232 --> 02:47:11,680
that's that's that okay we have now our auth event initialize


22344
02:47:11,680 --> 02:47:16,232
what we also need is an auth event for logging in and as i mentioned it's very


22345
02:47:16,232 --> 02:47:19,912
simple it's just with an email and password so let's just go ahead and say


22346
02:47:19,912 --> 02:47:25,040
off of event login something like this


22347
02:47:25,040 --> 02:47:30,872
or log in with a capital i extends off event


22348
02:47:30,872 --> 02:47:35,192
and we need we need two parameters to be passed in here let's just say final


22349
02:47:35,192 --> 02:47:39,192
string email and we also need a password so let's


22350
02:47:39,192 --> 02:47:43,912
just type that here password and now we have the email and


22351
02:47:43,912 --> 02:47:47,912
password we're just going to create a constructor here and make it constant


22352
02:47:47,912 --> 02:47:54,640
just like that okay so now we have our login event


22353
02:47:54,640 --> 02:47:58,960
and so login event should carry with itself every piece of information that


22354
02:47:58,960 --> 02:48:04,080
the auth block will need in the future in order to log in that user into the


22355
02:48:04,080 --> 02:48:08,160
into our provider which in this case is firebase okay


22356
02:48:08,160 --> 02:48:12,640
so after defining login we also need to define log out now if you have a look at


22357
02:48:12,640 --> 02:48:17,192
our um there are so many files in here so views


22358
02:48:17,192 --> 02:48:22,552
and we have notes and then we have excuse me we have notes view if you have


22359
02:48:22,552 --> 02:48:27,120
a look at notes view if you have a look at this and log out what it's doing as


22360
02:48:27,120 --> 02:48:32,800
you can see it's a weight of service firebase log out so


22361
02:48:32,800 --> 02:48:37,280
so this is a clear event with no parameters it's just telling the off


22362
02:48:37,280 --> 02:48:41,680
block then or in this case the off service that hey you need to log out no


22363
02:48:41,680 --> 02:48:45,832
parameters log out the current user okay so let's go and define that as well in


22364
02:48:45,832 --> 02:48:48,960
here so let's just say class of


22365
02:48:48,960 --> 02:48:55,360
event log out extends off event and it has no parameters as i mentioned


22366
02:48:55,360 --> 02:48:59,040
so let's create a constant constructor for it which in turn is going to call


22367
02:48:59,040 --> 02:49:04,960
the constant constructor of the abstract class called auth event


22368
02:49:05,760 --> 02:49:10,640
all right fantastic those were the only events that we had to define initialize


22369
02:49:10,640 --> 02:49:14,640
login and log out so these are the inputs to the block and then we had our


22370
02:49:14,640 --> 02:49:20,960
auth states which are the output our outputs of our off block which we're


22371
02:49:20,960 --> 02:49:25,600
gonna write uh right now actually


22372
02:49:25,600 --> 02:49:29,760
so we have the events and the states the only thing that's missing is the


22373
02:49:29,760 --> 02:49:35,280
uh auth block itself so let's go ahead inside this block folder create an off


22374
02:49:35,280 --> 02:49:40,640
block file so off block oops block um


22375
02:49:40,640 --> 02:49:44,720
dart so


22376
02:49:44,720 --> 02:49:49,512
now we need to actually write our auth block and this is for me at least this


22377
02:49:49,512 --> 02:49:53,120
is like the most uh this is the most fun


22378
02:49:53,120 --> 02:49:55,832
um so


22379
02:49:55,832 --> 02:50:00,400
because we're going to put together three pieces of uh two pieces of


22380
02:50:00,400 --> 02:50:04,320
information the states and the events and now we're creating the actual login


22381
02:50:04,320 --> 02:50:07,512
the logic of our authentication block so this is


22382
02:50:07,512 --> 02:50:13,192
very exciting so let's say class off block like this extend block now


22383
02:50:13,192 --> 02:50:16,640
it's going to complain saying that well it doesn't exist yet


22384
02:50:16,640 --> 02:50:21,680
so let's go ahead and import that import that as you can see here now remember


22385
02:50:21,680 --> 02:50:26,320
block if you go into source code it has two parameters there's two generic data


22386
02:50:26,320 --> 02:50:31,192
types in here event and state our events are called off event and it's


22387
02:50:31,192 --> 02:50:35,760
going to auto import that and then we have to say auth state


22388
02:50:35,760 --> 02:50:39,912
like this which also is going to be auto imported


22389
02:50:39,912 --> 02:50:43,192
so just like our off service if we go back


22390
02:50:43,192 --> 02:50:47,760
to our off service in here you'll see that our auth service at the moment is


22391
02:50:47,760 --> 02:50:52,480
taking in as a parameter a provider so we're going to do the exact same thing


22392
02:50:52,480 --> 02:50:56,720
in our auth block it's going to say give us a provider to work with is it a


22393
02:50:56,720 --> 02:51:00,232
firebase provider or what is it so


22394
02:51:00,232 --> 02:51:03,760
but we're not gonna directly go and say give us a firebase provider we're gonna


22395
02:51:03,760 --> 02:51:07,192
say give us an auth provider remember that we had an abstract class called


22396
02:51:07,192 --> 02:51:09,512
auth provider here


22397
02:51:09,512 --> 02:51:12,960
which pretty much defines the uh


22398
02:51:12,960 --> 02:51:18,080
the logic or defines the interface for every auth provider whether it's a


22399
02:51:18,080 --> 02:51:21,760
firebase auth provider gmail auto provider facebook whatever


22400
02:51:21,760 --> 02:51:25,680
that's how the interface should look like okay so what we need to do is to


22401
02:51:25,680 --> 02:51:29,512
create a um a constructor and in here what we're


22402
02:51:29,512 --> 02:51:32,640
going to say is to give us an auth provider so


22403
02:51:32,640 --> 02:51:36,640
we expect an auth provider auto import okay so if you're getting errors here


22404
02:51:36,640 --> 02:51:40,480
it's because you have an imported off provider the way visual studio code just


22405
02:51:40,480 --> 02:51:44,552
imported it for me right now and let's say that we get


22406
02:51:44,552 --> 02:51:48,320
that we call the provider in our constructor and if you remember


22407
02:51:48,320 --> 02:51:52,232
correctly from the previous chapter we need to also make sure that auth block


22408
02:51:52,232 --> 02:51:56,640
always has an initial initial state so


22409
02:51:56,640 --> 02:52:01,360
that's what block as a super class requires so let's see you see that's the


22410
02:52:01,360 --> 02:52:06,800
constructor of the block libraries block class that


22411
02:52:06,800 --> 02:52:12,720
says it should have an initial state so our initial initial state is going to be


22412
02:52:12,720 --> 02:52:17,760
in the k in the state of loading so let's say off state loading


22413
02:52:17,760 --> 02:52:22,480
like that and we create a constant


22414
02:52:22,480 --> 02:52:27,120
okay so and i can see right now that i'm not using scr cpy so much so i'm just


22415
02:52:27,120 --> 02:52:32,400
gonna minimize or yeah i'm just moving it to another


22416
02:52:32,400 --> 02:52:35,760
screen so we don't get bothered by it and that


22417
02:52:35,760 --> 02:52:40,552
enables me then to increase the size of visual studio code in width so it's a


22418
02:52:40,552 --> 02:52:45,440
little bit easier to read so i'm gonna go create a constant here


22419
02:52:45,440 --> 02:52:49,600
and then we're gonna create our curly brackets in order to go to the actual


22420
02:52:49,600 --> 02:52:54,640
initializer or the constructor of this auth block okay


22421
02:52:54,640 --> 02:53:00,232
all right now your job in here inside the auth block is to actually handle


22422
02:53:00,232 --> 02:53:06,160
various events and then based on those events produce a state


22423
02:53:06,160 --> 02:53:11,600
what is the first event remember this event initialize so if the user tells us


22424
02:53:11,600 --> 02:53:16,640
to initialize our uh auth block what should we do well we


22425
02:53:16,640 --> 02:53:21,040
should go to that provider and actually tell it to initialize okay


22426
02:53:21,040 --> 02:53:25,600
so let's go ahead and do that so i'm just going to say on off event


22427
02:53:25,600 --> 02:53:31,440
initialize and remember every on function you see


22428
02:53:31,440 --> 02:53:36,160
it takes the the event let's see actually yeah it's


22429
02:53:36,160 --> 02:53:41,832
the event and then an emitter it's not so clear from this i mean


22430
02:53:41,832 --> 02:53:46,960
from looking at this it's quite generic it's i would say it's


22431
02:53:46,960 --> 02:53:51,512
too generic but uh but that's that's the way it is so we


22432
02:53:51,512 --> 02:53:56,720
take the event that came in so in case you need to extract some data from your


22433
02:53:56,720 --> 02:54:00,232
initialize in this case initialize is an empty


22434
02:54:00,232 --> 02:54:05,912
class so it has no data but it when we actually start loading for instance and


22435
02:54:05,912 --> 02:54:11,832
we start handling the login event we do need the events to actually come in so


22436
02:54:11,832 --> 02:54:16,160
that we can extract this email and password okay but in the case of event


22437
02:54:16,160 --> 02:54:20,400
initialize the event is pretty much useless so we could literally ignore it


22438
02:54:20,400 --> 02:54:25,760
by just doing something like this okay but we're gonna take it in anyways


22439
02:54:25,760 --> 02:54:31,120
so now that we have that event we the second parameter in here is called emit


22440
02:54:31,120 --> 02:54:38,320
and emits then allows you to um actually emit and send states from your


22441
02:54:38,320 --> 02:54:44,232
off block out to whoever is watching the stage changes in your off block


22442
02:54:44,232 --> 02:54:49,280
which is going to be our ui okay so emit is your way out is your communication


22443
02:54:49,280 --> 02:54:53,760
channel to the outside world so let's make this function asynchronous


22444
02:54:53,760 --> 02:54:57,912
because we are actually gonna call our provider and call some


22445
02:54:57,912 --> 02:55:03,912
asynchronous functionality on it so let's go ahead and see if we can do that


22446
02:55:03,912 --> 02:55:07,760
so the first thing that we need to do in here is to call our provider and say


22447
02:55:07,760 --> 02:55:11,512
initialize okay and initialize you can see is it returns


22448
02:55:11,512 --> 02:55:16,720
a future of void so i'm just gonna wait on it all right so then what we're gonna


22449
02:55:16,720 --> 02:55:20,640
do is to say okay after doing that we're gonna say


22450
02:55:20,640 --> 02:55:26,800
final user is provider current user and that is an optional off user if you


22451
02:55:26,800 --> 02:55:30,872
remember from its function signal or from its getter signature you see


22452
02:55:30,872 --> 02:55:34,872
now if the auth user is


22453
02:55:34,872 --> 02:55:40,400
null after doing an initialize then we know that the state should be logged out


22454
02:55:40,400 --> 02:55:44,720
it means we initialize the provider but there is no user you are logged out okay


22455
02:55:44,720 --> 02:55:51,440
so let's just say if user is null then we're going to emit a new state and


22456
02:55:51,440 --> 02:55:55,832
we're going to say auth state logged out like this


22457
02:55:55,832 --> 02:55:59,360
as a constant okay


22458
02:56:00,000 --> 02:56:05,680
however if there is a user so so now we have a user we're sure that


22459
02:56:05,680 --> 02:56:10,640
we're not coming into this block here that says auth user is null if there is


22460
02:56:10,640 --> 02:56:14,232
a user but that user is not email verified then we're going to produce


22461
02:56:14,232 --> 02:56:18,320
another state so let's say if


22462
02:56:18,320 --> 02:56:21,600
else if uh user


22463
02:56:21,600 --> 02:56:26,320
is email verified not so it's not email verified then we're gonna emit


22464
02:56:26,320 --> 02:56:31,600
um a const off state uh needs verification


22465
02:56:31,600 --> 02:56:35,912
okay so that makes sense as well otherwise we're going to say where our


22466
02:56:35,912 --> 02:56:42,160
state is bought state logged in and remember the logged in state actually


22467
02:56:42,160 --> 02:56:46,872
needs your user okay so


22468
02:56:46,872 --> 02:56:51,040
um that is actually working quite well right now


22469
02:56:51,040 --> 02:56:54,640
and now it says user


22470
02:56:55,440 --> 02:57:00,640
that shouldn't really happen because the user actually isn't null


22471
02:57:00,640 --> 02:57:04,960
so we have already checked the user so we could put let's see what is it


22472
02:57:04,960 --> 02:57:09,832
actually complaining about user value of type null can't be


22473
02:57:09,832 --> 02:57:15,600
assigned to a parameter of auth user in a cons constructor try using a subtype


22474
02:57:15,600 --> 02:57:20,160
or removing the keyword const and i mean i understand this part to be


22475
02:57:20,160 --> 02:57:22,640
honest with you and that's correct that's a mistake that i've made in here


22476
02:57:22,640 --> 02:57:26,160
and that's because i said a constant constructor is being called with a user


22477
02:57:26,160 --> 02:57:31,192
which is a variable so you should also know that we can't do that all right


22478
02:57:31,192 --> 02:57:36,232
because user in itself is not const hence we can't call a const constructor


22479
02:57:36,232 --> 02:57:40,400
on a on a state that uses a variable user okay


22480
02:57:40,400 --> 02:57:44,872
great now we've handled the initialize events


22481
02:57:44,872 --> 02:57:47,912
all right what we need to do is to handle the


22482
02:57:47,912 --> 02:57:52,000
login event so let's go ahead after this i'm just going to put a comment in here


22483
02:57:52,000 --> 02:57:55,360
and just say initialize just to make things a little


22484
02:57:55,360 --> 02:57:59,192
bit separate from each other and then log in


22485
02:57:59,192 --> 02:58:02,320
i'm going to bring the code up so you see it sorry about that it was a little


22486
02:58:02,320 --> 02:58:06,800
bit hidden when i wrote this comment so now you can see how it looks like


22487
02:58:06,800 --> 02:58:12,000
then we're going to handle login events so remember again an event is something


22488
02:58:12,000 --> 02:58:16,800
that the ui is going to send us and that event if you remember it has a username


22489
02:58:16,800 --> 02:58:20,720
sorry an email and a password then we're going to unpack that email and password


22490
02:58:20,720 --> 02:58:25,360
provided to give it to our provider and provide it to our provider give it to


22491
02:58:25,360 --> 02:58:29,600
the provider and then react to the various results that come back from the


22492
02:58:29,600 --> 02:58:33,040
provider okay so


22493
02:58:33,040 --> 02:58:39,360
so we're gonna say then on off event login oops yeah login and we're going to


22494
02:58:39,360 --> 02:58:43,600
say event and then emit and we're going to say this is an async


22495
02:58:43,600 --> 02:58:48,000
function and it goes in here all right so okay


22496
02:58:48,000 --> 02:58:53,600
now this is the beauty of a blog using emit you can let your consumers know


22497
02:58:53,600 --> 02:58:57,120
what you're up to let's say someone says login what is the


22498
02:58:57,120 --> 02:59:01,280
first thing that we're up to yeah we are loading we are in the state of loading


22499
02:59:01,280 --> 02:59:05,280
because we are going to start loading and make api calls and that's exactly


22500
02:59:05,280 --> 02:59:10,800
why we have these off states in here remember we have the auth state of


22501
02:59:10,800 --> 02:59:14,320
loading so let's change our state as soon as you tell us to log in we're


22502
02:59:14,320 --> 02:59:19,192
going to say oh now we're loading okay because we don't have a state that says


22503
02:59:19,192 --> 02:59:23,120
logging in but we have a general state that says


22504
02:59:23,120 --> 02:59:26,320
loading if you want to you could remove this


22505
02:59:26,320 --> 02:59:29,360
loading state and just say


22506
02:59:29,360 --> 02:59:35,680
i have a class for instance auth state logging in that's also acceptable but


22507
02:59:35,680 --> 02:59:39,512
then you have to have a um


22508
02:59:39,512 --> 02:59:43,360
something something in uh state for everything like even if


22509
02:59:43,360 --> 02:59:48,552
you're logging out you should say off state uh logging out


22510
02:59:48,552 --> 02:59:52,552
uh so then you have to have a loading state for pretty much all the states


22511
02:59:52,552 --> 02:59:55,760
that do something asynchronous and that's why we haven't done that we


22512
02:59:55,760 --> 03:00:00,552
have a generic or a general loading state that indicates to the outside


22513
03:00:00,552 --> 03:00:05,832
world that hey you are doing something okay


22514
03:00:06,232 --> 03:00:09,120
don't worry about all these saved operations that have been in this off


22515
03:00:09,120 --> 03:00:14,000
state file i pretty much i mean i didn't change anything in this file okay so it


22516
03:00:14,000 --> 03:00:17,832
is how we left it when we finished off stage


22517
03:00:17,832 --> 03:00:23,360
all right so let's in here then emit a an auth state loading


22518
03:00:23,360 --> 03:00:27,280
just like that and upon logging in what we need to do


22519
03:00:27,280 --> 03:00:30,960
is just to grab the email so we're just going to say email is equal to the event


22520
03:00:30,960 --> 03:00:35,912
email and password is equal to the event password okay


22521
03:00:35,912 --> 03:00:39,512
and then we're gonna do a try and catch


22522
03:00:39,512 --> 03:00:43,040
like this and tell our provider


22523
03:00:43,040 --> 03:00:48,480
so we're gonna say await provider um i believe we have let's see what the


22524
03:00:48,480 --> 03:00:52,400
problem in here avoid okay that's fine


22525
03:00:52,400 --> 03:00:57,912
let's then create a user so let's say final user is equal to provider dot


22526
03:00:57,912 --> 03:01:02,400
we have a login function on our provider excuse me


22527
03:01:02,400 --> 03:01:07,440
and here we're literally passing email and password to that function okay and


22528
03:01:07,440 --> 03:01:12,480
remember login function at the provider level it could


22529
03:01:12,480 --> 03:01:16,480
throw an exception but that's fine because we have a catch in here so if we


22530
03:01:16,480 --> 03:01:20,552
go to the login function in our auth provider let's see if we can find


22531
03:01:20,552 --> 03:01:24,232
firebase auth provider inside the login function let's see if


22532
03:01:24,232 --> 03:01:28,000
we can find out here we have various exceptions that are going to be thrown


22533
03:01:28,000 --> 03:01:33,192
user not found wrong password generic auth exception so if any of those


22534
03:01:33,192 --> 03:01:38,000
exceptions happen we're going to come into this catch block all right


22535
03:01:38,000 --> 03:01:41,832
so now that we have a user if nothing happens if no exceptions


22536
03:01:41,832 --> 03:01:46,640
happen then we're going to emit and we're going to say const or actually we


22537
03:01:46,640 --> 03:01:51,280
can't do a const because a user is a variable so we're going to say auth


22538
03:01:51,280 --> 03:01:53,832
state logged in


22539
03:01:53,832 --> 03:01:57,832
and it's just going to say give us a user and that's the user


22540
03:01:57,832 --> 03:02:02,400
should any exception happen we're going to emit a login failure and we're going


22541
03:02:02,400 --> 03:02:06,232
to say emit auth state


22542
03:02:06,232 --> 03:02:10,160
oops log


22543
03:02:10,160 --> 03:02:14,232
what's it failure login failure i can see yeah


22544
03:02:14,232 --> 03:02:18,552
and in here we literally pass the exception there


22545
03:02:19,040 --> 03:02:22,960
can't be assigned and then so we probably just have to see i can i mean i


22546
03:02:22,960 --> 03:02:27,600
understand this exception as well it's because exceptions in dart maybe this is


22547
03:02:27,600 --> 03:02:32,480
a little bit of a side talk but exceptions in dart can be


22548
03:02:32,480 --> 03:02:36,160
anything i mean i posted something on linkedin on twitter a while ago saying


22549
03:02:36,160 --> 03:02:42,080
that well you can even throw an enum value as an exception and that's


22550
03:02:42,080 --> 03:02:46,800
why in dart exceptions are of type object and


22551
03:02:46,800 --> 03:02:50,400
in this case i believe they're even object optional object no it's actually


22552
03:02:50,400 --> 03:02:54,872
an object so here the error is that you're saying that off state login


22553
03:02:54,872 --> 03:02:59,912
failure that needs an exception but you're passing it an object so let's say


22554
03:02:59,912 --> 03:03:04,160
on exception if an exception happens then


22555
03:03:04,160 --> 03:03:07,160
uh


22556
03:03:07,280 --> 03:03:11,040
and that's because we know that our login function is not act let's have a


22557
03:03:11,040 --> 03:03:15,192
look at the login function and see if it can throw anything other than an


22558
03:03:15,192 --> 03:03:19,040
exception and we see now that it has a general catch


22559
03:03:19,040 --> 03:03:23,192
block which throws a generic auth exception which in turn is an exception


22560
03:03:23,192 --> 03:03:27,600
so in our application right now as it is we're not throwing anything that is not


22561
03:03:27,600 --> 03:03:33,192
an exception so every exception is coming from the exception class


22562
03:03:33,192 --> 03:03:38,400
all right fantastic now we have our login um


22563
03:03:38,400 --> 03:03:43,192
event in place and we're emitting the correct states logged in or login


22564
03:03:43,192 --> 03:03:48,720
failure now we have to handle log out so let me bring the code up and we're going


22565
03:03:48,720 --> 03:03:52,800
to say log out and this is very similar to login a little bit less code so let's


22566
03:03:52,800 --> 03:03:56,400
just say on again we're going to handle inputs okay


22567
03:03:56,400 --> 03:04:02,320
so off event log out so if someone tells us to


22568
03:04:02,320 --> 03:04:06,320
log out like this then we're gonna say okay we


22569
03:04:06,320 --> 03:04:10,720
take the state oh so much documentation everywhere um


22570
03:04:10,720 --> 03:04:14,640
sorry the event and then the emit and then we make this


22571
03:04:14,640 --> 03:04:18,960
function asynchronous like that and the first thing that we have to do


22572
03:04:18,960 --> 03:04:22,320
again since in log out we're going to call the


22573
03:04:22,320 --> 03:04:26,960
logout on our provider which is an asynchronous function we need to tell


22574
03:04:26,960 --> 03:04:31,832
the ui about that we need to tell the ui that upon you requesting


22575
03:04:31,832 --> 03:04:36,320
log out from the off block you have to do some loading what better way of


22576
03:04:36,320 --> 03:04:41,120
indicating that to the output to the outside world by actually changing our


22577
03:04:41,120 --> 03:04:47,280
state using emit so we're going to say off state loading okay so that's us


22578
03:04:47,280 --> 03:04:51,600
indicating to the outside world that we're doing something


22579
03:04:52,400 --> 03:04:57,680
all right so uh let's then do a try and catch in here


22580
03:04:57,680 --> 03:05:02,232
cat on exception catch e


22581
03:05:02,232 --> 03:05:05,600
like this if an exception occurs then we're going


22582
03:05:05,600 --> 03:05:08,552
to say emit


22583
03:05:08,640 --> 03:05:13,832
off states failure we had a log out failure and that expected an exception


22584
03:05:13,832 --> 03:05:19,040
so i'm just going to put the e in there we could also put this image in try it


22585
03:05:19,040 --> 03:05:22,232
doesn't matter because this doesn't really throw an exception it can never


22586
03:05:22,232 --> 03:05:25,120
throw an exception but we're going to put it in try catch


22587
03:05:25,120 --> 03:05:30,160
because i believe just it's a little bit cleaner it's it's like a transaction


22588
03:05:30,160 --> 03:05:34,000
so what we're gonna do is to say await our provider


22589
03:05:34,000 --> 03:05:38,720
and log out in here all right and should the logout actually go through then


22590
03:05:38,720 --> 03:05:42,160
we're going to go to the next line which is line 40 for me maybe another line


22591
03:05:42,160 --> 03:05:45,912
number for you and then in this case we're just going


22592
03:05:45,912 --> 03:05:51,440
to emit a const of off state log out


22593
03:05:51,440 --> 03:05:54,960
fantastic all right so


22594
03:05:54,960 --> 03:06:01,120
that was it really i mean it was just a lot of talk a lot of creation of like uh


22595
03:06:01,120 --> 03:06:05,760
classes but um we've now gotten there so now we


22596
03:06:05,760 --> 03:06:09,760
have an off block and then we have our auth event and off state so now that we


22597
03:06:09,760 --> 03:06:13,280
have those i'm going to close those tabs after you've saved them so make sure


22598
03:06:13,280 --> 03:06:17,912
that those files are also saved then what we're going to do is just to


22599
03:06:17,912 --> 03:06:21,600
get rid of that ugly counter block that we created in the previous chapter which


22600
03:06:21,600 --> 03:06:25,192
kind of is like dirtying down our main user interface so


22601
03:06:25,192 --> 03:06:29,280
let's go to main dart and let's grab this


22602
03:06:29,280 --> 03:06:36,080
home page the way we have here let's see so let's go in this new home page that


22603
03:06:36,080 --> 03:06:40,160
we created for our counter block and just completely remove that everything


22604
03:06:40,160 --> 03:06:43,040
that is related to that counter block okay


22605
03:06:43,040 --> 03:06:48,832
and then let's go ahead and bring back our normal home page like


22606
03:06:48,832 --> 03:06:53,912
that right fantastic uh we have flutter block and block in there


22607
03:06:53,912 --> 03:06:57,680
and that is causing a little a little bit of a problem but that's okay


22608
03:06:57,680 --> 03:07:02,400
too so what we need to do now is to actually


22609
03:07:02,400 --> 03:07:04,552
go and


22610
03:07:04,552 --> 03:07:09,280
let me bring up the next captioning here as you can see now we


22611
03:07:09,280 --> 03:07:13,280
need to use block provider and block builder and we're going to do that in


22612
03:07:13,280 --> 03:07:17,680
our main dart file so i hope you haven't


22613
03:07:17,680 --> 03:07:21,360
jumped over the previous chapter because i talked a lot about in the previous


22614
03:07:21,360 --> 03:07:24,872
chapter about block providers block builders block listeners block consumers


22615
03:07:24,872 --> 03:07:27,832
and what they are how they're different from each other and there's a lot of


22616
03:07:27,832 --> 03:07:31,040
information and material available online that you can read also


22617
03:07:31,040 --> 03:07:35,440
about all these things online but if you've skimmed over that chapter and


22618
03:07:35,440 --> 03:07:39,360
didn't understand really how things worked what we need in here just think


22619
03:07:39,360 --> 03:07:44,160
of it that our main application needs to offlock the auth block is responsible


22620
03:07:44,160 --> 03:07:49,280
now from this point on to handle everything related to authentication


22621
03:07:49,280 --> 03:07:52,872
it is not the ui part remember the ui part is


22622
03:07:52,872 --> 03:07:58,320
completely separate that's the goal of block in its core to separate business


22623
03:07:58,320 --> 03:08:02,232
logic from presentation logic so your presentation logic everything related to


22624
03:08:02,232 --> 03:08:06,720
the ui for instance displaying dialogues displaying exceptions handling etc etc


22625
03:08:06,720 --> 03:08:12,320
etc that's all in the ui has nothing to do with all of what but the off block is


22626
03:08:12,320 --> 03:08:15,600
going to be responsible for actually initializing the authentication process


22627
03:08:15,600 --> 03:08:19,040
and also with with firebase and also allowing us to log in and log out et


22628
03:08:19,040 --> 03:08:22,640
cetera we need the auth block so how do we get


22629
03:08:22,640 --> 03:08:28,400
off block in our main application since the entire application is dependent on


22630
03:08:28,400 --> 03:08:32,080
the auth block even when you're in the main ui of the application you should


22631
03:08:32,080 --> 03:08:37,040
still be able to for instance log out then we could literally say that oh


22632
03:08:37,040 --> 03:08:42,080
everything inside our application in the main function is gonna be dependent on


22633
03:08:42,080 --> 03:08:47,680
that off block so what we're gonna do is in our home page


22634
03:08:47,680 --> 03:08:52,640
let's see in here here we're right now saying we have a home const homepage you


22635
03:08:52,640 --> 03:08:58,960
see actually let me command s this and bring uh scrcpy bag back here


22636
03:08:58,960 --> 03:09:04,400
so now we see our notes back so home page is fixed now


22637
03:09:04,400 --> 03:09:08,232
so what we are going to do in here we're going to instead of a const homepage


22638
03:09:08,232 --> 03:09:11,680
we're going to replace this with an auth provider okay


22639
03:09:11,680 --> 03:09:15,680
now we could do this as you can see we have


22640
03:09:15,680 --> 03:09:19,280
um do we have sorry with a block provider


22641
03:09:19,280 --> 03:09:24,480
i have the block extension in visual studio code which then gives me the


22642
03:09:24,480 --> 03:09:28,960
ability to wrap things with various block


22643
03:09:28,960 --> 03:09:34,320
components and flutter block components and you can go to extensions and install


22644
03:09:34,320 --> 03:09:40,320
the block libraries extension for visual studio code


22645
03:09:40,320 --> 03:09:44,552
if you're if you're using another uh development environment if you're for


22646
03:09:44,552 --> 03:09:51,120
instance using sublime you may not have that ability so


22647
03:09:51,120 --> 03:09:56,320
what you'll need to do is to write this by hand so i'm gonna take advantage of


22648
03:09:56,320 --> 03:10:00,232
wrapping this homepage with a block provider meaning that


22649
03:10:00,232 --> 03:10:06,552
my home page now let's see here let's say this is a const as well


22650
03:10:06,552 --> 03:10:11,280
is a home page before its creation is


22651
03:10:11,280 --> 03:10:14,232
dependent on the creation of a block okay


22652
03:10:14,232 --> 03:10:20,000
so let's go in here and say the block provider is also using our off block


22653
03:10:20,000 --> 03:10:24,480
which i believe now visual studio code is going to auto import you may need to


22654
03:10:24,480 --> 03:10:29,192
import that by hand if you are not using visual studio code or an or text editor


22655
03:10:29,192 --> 03:10:34,552
or an id that has this feature now in the create


22656
03:10:34,552 --> 03:10:39,192
parameter of our block provider we actually have to create the uh block


22657
03:10:39,192 --> 03:10:44,080
that we promised we're going to create and you can see that being created here


22658
03:10:44,080 --> 03:10:48,160
so and i can now see directly in here it's


22659
03:10:48,160 --> 03:10:53,040
creating a const provider but we can't have that simply because


22660
03:10:53,040 --> 03:10:57,600
our auth block if we go back to our off block in here i believe that our


22661
03:10:57,600 --> 03:11:02,480
constructor is not a constant so if you put const in there


22662
03:11:02,480 --> 03:11:06,552
you can see that it's not allowing us to do that simply because


22663
03:11:06,552 --> 03:11:12,160
block itself as a library as a class here it has no constant constructor so


22664
03:11:12,160 --> 03:11:16,720
we can't have a constant provider so let's remove that const from there okay


22665
03:11:16,720 --> 03:11:20,480
now in here we have to say it should create offlock


22666
03:11:20,480 --> 03:11:25,280
and if you remember offblock requires an auth provider so let's go in


22667
03:11:25,280 --> 03:11:29,680
here and say firebase off


22668
03:11:29,680 --> 03:11:33,600
fire and that's going to be auto imported as well


22669
03:11:33,600 --> 03:11:36,480
perfect now we have our


22670
03:11:36,480 --> 03:11:43,680
block provider that's fantastic so now what we need to do is to have a look


22671
03:11:43,680 --> 03:11:47,120
in here and see what else we have to change in


22672
03:11:47,120 --> 03:11:52,000
our main functionality well


22673
03:11:52,000 --> 03:11:55,040
what we have at the moment i mean we have


22674
03:11:55,040 --> 03:11:58,720
of course we have this functionality here to create the


22675
03:11:58,720 --> 03:12:03,680
auth block for us in the main function but we're not actually really using that


22676
03:12:03,680 --> 03:12:08,160
in inside here we're using future builder okay


22677
03:12:08,160 --> 03:12:13,600
so what we need to do is instead of using future builder let's use our um


22678
03:12:13,600 --> 03:12:18,320
what we're going to do is we're going to use block provider


22679
03:12:18,320 --> 03:12:22,160
i'm sorry block builder and block builder is kind of like future builder


22680
03:12:22,160 --> 03:12:25,040
but it's going to use but it's going to use our


22681
03:12:25,040 --> 03:12:29,760
block which is defined here now this may seem


22682
03:12:29,760 --> 03:12:33,600
all very complicated to begin with and what you need to understand is that


22683
03:12:33,600 --> 03:12:37,832
there is a lot of magic happening behind the scenes in block in that when you


22684
03:12:37,832 --> 03:12:42,480
create a block provider in here and then it gets a context and then it goes here


22685
03:12:42,480 --> 03:12:47,912
to create the block what's happening internally in block is that that context


22686
03:12:47,912 --> 03:12:53,192
itself is gonna get injected with your off block so when you create the auth


22687
03:12:53,192 --> 03:12:58,640
login here this context from this point on inside the entire application is


22688
03:12:58,640 --> 03:13:01,832
going to be it's going to be populated with an auth


22689
03:13:01,832 --> 03:13:07,192
block that you can read from okay and i'll show you now how


22690
03:13:07,192 --> 03:13:11,120
so in the build function of your homepage what you need to do in here


22691
03:13:11,120 --> 03:13:13,832
we're going to say


22692
03:13:13,912 --> 03:13:17,040
see we have this future we have the switch


22693
03:13:17,040 --> 03:13:20,720
of the snapshot and that's all fine


22694
03:13:20,720 --> 03:13:23,600
so let's just then go ahead actually what


22695
03:13:23,600 --> 03:13:26,640
we need to do to be honest with you is to um


22696
03:13:26,640 --> 03:13:30,320
we're not going to use so much of this code so it's perhaps makes more sense


22697
03:13:30,320 --> 03:13:34,320
just to shift it down a little bit to make room for our


22698
03:13:34,320 --> 03:13:40,480
block provider okay so in uh sorry a block builder


22699
03:13:40,480 --> 03:13:44,960
so our block builder has a builder function but we also are going to get


22700
03:13:44,960 --> 03:13:49,120
hold off our um actual block in here in the block


22701
03:13:49,120 --> 03:13:52,872
builder as you'll soon see when you come to your home page what the


22702
03:13:52,872 --> 03:13:56,720
first thing that we need to do is to tell our os block to initialize itself


22703
03:13:56,720 --> 03:14:01,760
do you remember our auth block has this um event handling for initialize so


22704
03:14:01,760 --> 03:14:06,320
somehow in this build function we need to tell our author like hey


22705
03:14:06,320 --> 03:14:09,912
initialize yourself so how do we get hold of that


22706
03:14:09,912 --> 03:14:14,080
i talked about this how do we hold off how do we get hold of the off block in


22707
03:14:14,080 --> 03:14:18,400
here since we don't have access to it here but i just mentioned that


22708
03:14:18,400 --> 03:14:22,552
when you create an auth provider sorry a blog provider that blog provider is


22709
03:14:22,552 --> 03:14:28,400
going to inject your off block into the context so the the auth block is hidden


22710
03:14:28,400 --> 03:14:34,000
somewhere in this context and the way to read that is you just say context dot


22711
03:14:34,000 --> 03:14:37,280
read and then there's a you see there's a


22712
03:14:37,280 --> 03:14:40,960
function in here and if you go into this read function you see it actually comes


22713
03:14:40,960 --> 03:14:44,552
from a provider here so


22714
03:14:44,552 --> 03:14:50,640
flutter provider provider dart okay so in context read let's just say that


22715
03:14:50,640 --> 03:14:56,640
we're looking for auth walk and what we're going to tell it to is to


22716
03:14:56,640 --> 03:15:00,480
tell it to initialize but if you put dot in here you see there is no function


22717
03:15:00,480 --> 03:15:04,480
called initialize or anything and that's because the way you communicate with an


22718
03:15:04,480 --> 03:15:09,040
auth block as we saw in um or the way that you communicate with a block


22719
03:15:09,040 --> 03:15:14,480
generally is that you send it messages using its add function so add is your


22720
03:15:14,480 --> 03:15:20,232
way of communicating with your block or your blocks about various events that


22721
03:15:20,232 --> 03:15:25,040
you're sending okay so in this in here we're going to say add and then we're


22722
03:15:25,040 --> 03:15:29,040
going to say auth event


22723
03:15:29,040 --> 03:15:31,760
okay if you're getting an error about this


22724
03:15:31,760 --> 03:15:35,040
auth event initialize not being in context it's probably because you don't


22725
03:15:35,040 --> 03:15:42,232
have an auto import for this uh file in here which i had so


22726
03:15:42,232 --> 03:15:48,720
we have now we are sending initialize events um to our auth block


22727
03:15:48,720 --> 03:15:53,192
now that that is done we need to do our block builder so in this builder


22728
03:15:53,192 --> 03:15:57,360
function let me go here and get help from visual studio code to complete that


22729
03:15:57,360 --> 03:16:02,640
and you can see now i get a context and a state so


22730
03:16:02,640 --> 03:16:06,800
so let's go ahead and handle various states that could happen during this


22731
03:16:06,800 --> 03:16:10,960
period during the initialization period okay so let's say


22732
03:16:10,960 --> 03:16:17,120
if the state is off state logged in so if we are actually logged in then we're


22733
03:16:17,120 --> 03:16:22,832
gonna return const notes view like that so that is this view all


22734
03:16:22,832 --> 03:16:30,552
right else if state is auth state needs verification


22735
03:16:30,552 --> 03:16:35,832
then let's see what we were doing we were returning this verify email view so


22736
03:16:35,832 --> 03:16:41,760
let's go ahead and do that here as well now if


22737
03:16:41,760 --> 03:16:46,640
excuse me if the state is logged out excuse me again


22738
03:16:46,640 --> 03:16:50,960
it's off it's logged out


22739
03:16:50,960 --> 03:16:55,120
then let's see how we were handling that before


22740
03:16:57,360 --> 03:17:03,680
um if we were logged out we were going to the login view like like here


22741
03:17:03,680 --> 03:17:09,440
so if we were logged out then we should send the user to the login view


22742
03:17:09,680 --> 03:17:13,512
otherwise if it's not those states


22743
03:17:13,512 --> 03:17:16,640
so what can we do let's say that in the


22744
03:17:16,640 --> 03:17:20,400
future you're going to add some more states that this


22745
03:17:20,400 --> 03:17:24,640
block block builder right now is not able to handle


22746
03:17:24,640 --> 03:17:28,320
so um what you want is still an application


22747
03:17:28,320 --> 03:17:32,080
that is in working condition you shouldn't crash or anything so


22748
03:17:32,080 --> 03:17:36,400
let's just in this case return a scaffold


22749
03:17:36,400 --> 03:17:42,552
and make it constant and let's in the body of our scaffold


22750
03:17:42,552 --> 03:17:48,720
create a circular progress indicator just like that all right so it looks


22751
03:17:48,720 --> 03:17:53,912
like that also you could mark your block builder as well to say that it


22752
03:17:53,912 --> 03:17:59,040
has the off block and also it has off states you remember


22753
03:17:59,040 --> 03:18:03,280
block builder has these parameters in you see


22754
03:18:03,280 --> 03:18:07,600
the builder and sorry the block itself and the state that's why i've marked


22755
03:18:07,600 --> 03:18:12,000
them like this okay and now as you can see state is not an uh it's not just a


22756
03:18:12,000 --> 03:18:17,360
normal object anymore it's an off state before writing that state was just an


22757
03:18:17,360 --> 03:18:21,912
object but now i've marked it as off state and you can see it's become an off


22758
03:18:21,912 --> 03:18:26,080
state here as well great stuff now let's get rid of the


22759
03:18:26,080 --> 03:18:31,280
future builder that we have from before so i'm going to remove all that code


22760
03:18:31,280 --> 03:18:36,080
excuse me and now you can see we have our off


22761
03:18:36,080 --> 03:18:40,640
our block builder here and a block provider up there


22762
03:18:40,640 --> 03:18:45,600
so that's all we have to do um now it's great actually we're getting this issue


22763
03:18:45,600 --> 03:18:50,960
um and you can see it's i love these errors i mean a lot of developers are


22764
03:18:50,960 --> 03:18:55,120
scared of stuff like this but it's so important to actually read what's inside


22765
03:18:55,120 --> 03:18:58,232
this what is what it's telling us is this happens because you use the build


22766
03:18:58,232 --> 03:19:01,360
context that does not include the provider of your choice and that's


22767
03:19:01,360 --> 03:19:07,832
because of this you see is this thing context read auth block so


22768
03:19:07,832 --> 03:19:11,832
so what flutter is saying that hey you're expecting me to extract an off


22769
03:19:11,832 --> 03:19:15,912
block from the context but it's not there okay why is it not there it's


22770
03:19:15,912 --> 03:19:20,000
simply because the main function i've mentioned this quite a few times in the


22771
03:19:20,000 --> 03:19:24,232
course but i believe it's so important that i want to mention it again the main


22772
03:19:24,232 --> 03:19:30,800
function does not get called during hot reloads and i just did a hot reload by


22773
03:19:30,800 --> 03:19:36,480
doing command s so there is no block inside the context


22774
03:19:36,480 --> 03:19:40,872
because the block is actually created by the block provider which is inside the


22775
03:19:40,872 --> 03:19:44,640
main function so if i want this auth block to be injected in the build


22776
03:19:44,640 --> 03:19:48,800
context then i have to do a hot restart so


22777
03:19:48,800 --> 03:19:52,720
now the application is working as it should all right


22778
03:19:52,720 --> 03:19:57,832
excuse me so we've now taken care of our main dart


22779
03:19:57,832 --> 03:20:02,320
file removed the stuff that we have for the counter application which we created


22780
03:20:02,320 --> 03:20:06,800
with auth with which we created with block and now we've moved to using our


22781
03:20:06,800 --> 03:20:12,480
first two components from block which is block provider and also block builder we


22782
03:20:12,480 --> 03:20:16,640
have a few unused imports so let's just remove those


22783
03:20:16,640 --> 03:20:21,120
okay just to make sure that this file is quite clean


22784
03:20:21,120 --> 03:20:26,320
the part is that it's done now what we need to do is to use as you can see in


22785
03:20:26,320 --> 03:20:31,040
the caption we need to use our off block in the login view and the only thing we


22786
03:20:31,040 --> 03:20:35,040
really need to do is upon pressing the login button we need to send the off


22787
03:20:35,040 --> 03:20:41,440
event login to our auth block that's very very simple so let's go


22788
03:20:41,440 --> 03:20:46,160
ahead and take care of that this is just easy from


22789
03:20:46,160 --> 03:20:50,552
go to login view as the caption indicates and where we're calling this


22790
03:20:50,552 --> 03:20:55,912
login functionality here as you can see we're saying


22791
03:20:55,912 --> 03:20:59,280
um we're taking the email and


22792
03:20:59,280 --> 03:21:04,640
password and we're just yeah calling a login so


22793
03:21:04,640 --> 03:21:09,832
let's see we also have is email verified so we're not gonna take care of that at


22794
03:21:09,832 --> 03:21:13,192
this point so we're not gonna really


22795
03:21:13,192 --> 03:21:18,800
uh take care of email verified so in this in this try statement here verify


22796
03:21:18,800 --> 03:21:22,000
email route we will fix that soon so let's just


22797
03:21:22,000 --> 03:21:26,552
remove this try everything in the try block


22798
03:21:26,552 --> 03:21:31,600
and what we need to do in here we need to read our block our auth block and


22799
03:21:31,600 --> 03:21:37,600
then convey an event to it okay how do we read the the a block and that is


22800
03:21:37,600 --> 03:21:44,832
using context dot read or what was it called read i believe actually yeah but


22801
03:21:44,832 --> 03:21:50,000
remember autoblock and three function is not available


22802
03:21:50,000 --> 03:21:54,480
until you import your provider and i can see in here says


22803
03:21:54,480 --> 03:22:00,400
package provider src but in the in our main file we didn't actually


22804
03:22:00,400 --> 03:22:05,360
import provider so we've imported our flutter block so let's go ahead and do


22805
03:22:05,360 --> 03:22:10,640
that as well in here so inside login view dart please import your flutter


22806
03:22:10,640 --> 03:22:16,640
block so now all of a sudden we're going to have access to the read function okay


22807
03:22:16,640 --> 03:22:20,872
so in there what we what we're going to do is just to add an event to


22808
03:22:20,872 --> 03:22:23,912
our let's see if we can get access oh for


22809
03:22:23,912 --> 03:22:27,280
that we need probably to import block as well so


22810
03:22:27,280 --> 03:22:31,832
package excuse me block


22811
03:22:31,832 --> 03:22:34,400
and then okay


22812
03:22:34,400 --> 03:22:38,232
let's see if then all of a sudden we're gonna get the add functionality in here


22813
03:22:38,232 --> 03:22:42,400
context read oh sorry about that it's because this is a function i need to


22814
03:22:42,400 --> 03:22:48,080
call the function so add and i may then get away by removing block from here i


22815
03:22:48,080 --> 03:22:51,440
apologize for that we didn't really need to import um


22816
03:22:51,440 --> 03:22:55,040
block library as such


22817
03:22:55,600 --> 03:22:58,872
okay i understand this is a little bit jumpy that's okay though so all we're


22818
03:22:58,872 --> 03:23:03,040
doing is that we removed everything in the try uh block and we're removing


22819
03:23:03,040 --> 03:23:07,512
we're replacing that using context read we're reading our off block from the


22820
03:23:07,512 --> 03:23:10,480
build context and now we want to tell it to


22821
03:23:10,480 --> 03:23:16,480
log in so you remember we had a l off event login


22822
03:23:16,480 --> 03:23:20,160
so let's go ahead and do that and as you can see it's going to auto import it for


22823
03:23:20,160 --> 03:23:22,872
us so i mean here we have the email and


22824
03:23:22,872 --> 03:23:25,832
password fantastic


22825
03:23:26,080 --> 03:23:30,800
so that's that all right so that's gonna send that


22826
03:23:30,800 --> 03:23:35,040
event and then we have the rest of the exemptions now remember


22827
03:23:35,040 --> 03:23:39,040
i understand you may think oh exceptions though how are we handling


22828
03:23:39,040 --> 03:23:41,680
them well


22829
03:23:41,760 --> 03:23:45,040
we are not at the moment our exception handling is


22830
03:23:45,040 --> 03:23:50,080
completely broken by going towards using auth block everything is broken


22831
03:23:50,080 --> 03:23:56,232
as far as exceptions go because um you can see the way our auth block


22832
03:23:56,232 --> 03:24:00,800
actually throws exceptions is by emitting them inside states so you see


22833
03:24:00,800 --> 03:24:04,800
it says a state login failure and then there's an exception in it so we're not


22834
03:24:04,800 --> 03:24:08,640
handling those at the moment so you're right exceptions are completely broken


22835
03:24:08,640 --> 03:24:13,040
for the entirety of this chapter and that's okay because we're gonna fix them


22836
03:24:13,040 --> 03:24:16,960
exactly right after this chapter so now you know what's coming in the


22837
03:24:16,960 --> 03:24:22,720
next chapter as well all right that's that's for uh our


22838
03:24:22,720 --> 03:24:25,912
login so i don't think we need to do more to be


22839
03:24:25,912 --> 03:24:29,832
honest inside our login so let's go into our imports and just clean up the


22840
03:24:29,832 --> 03:24:32,552
imports as well


22841
03:24:32,640 --> 03:24:37,280
great stuff so that's for login um what we also have to do now is the


22842
03:24:37,280 --> 03:24:40,640
caption indicates we have to go to our notes view


22843
03:24:40,640 --> 03:24:44,800
um and make sure that we can log out using our


22844
03:24:44,800 --> 03:24:48,800
auth block as well so let's go to notes view here


22845
03:24:48,800 --> 03:24:52,720
and right now what we're doing is saying we're awaiting on the auth service


22846
03:24:52,720 --> 03:24:56,480
firebase logout so we're not going to do that anymore


22847
03:24:56,480 --> 03:25:01,680
so we're just going to use our off block in order to log out


22848
03:25:01,680 --> 03:25:05,512
so in here let's remove that and just say


22849
03:25:05,512 --> 03:25:10,080
that we're saying to where we want to grab the auth block first okay so let's


22850
03:25:10,080 --> 03:25:15,120
say context and then we're gonna read our um


22851
03:25:15,120 --> 03:25:18,960
autoblock like this and if he asks visual studio


22852
03:25:18,960 --> 03:25:24,720
code it's gonna it wants to import um oh yeah it wants to import auth block so


22853
03:25:24,720 --> 03:25:30,400
let's grab off block to bring it in it also doesn't know where read comes


22854
03:25:30,400 --> 03:25:34,080
from so um


22855
03:25:34,080 --> 03:25:39,440
so what we need to do now is to import uh the block library in here so


22856
03:25:39,440 --> 03:25:42,080
i'm just gonna


22857
03:25:42,160 --> 03:25:47,040
copy that code from my notes so importing flutter block and then


22858
03:25:47,040 --> 03:25:50,800
flatter block guard and here i'm actually drilling down inside flutter


22859
03:25:50,800 --> 03:25:55,280
block and just seeing that i'm interested in read context okay and read


22860
03:25:55,280 --> 03:26:00,000
context is as you can see in the code is that is the function


22861
03:26:00,000 --> 03:26:05,192
reading here oh my god there's so much documentation here you see


22862
03:26:05,192 --> 03:26:09,760
all right so that gives us the read functionality that we can use in here so


22863
03:26:09,760 --> 03:26:13,600
that's the function all right after grabbing our off block now we have to


22864
03:26:13,600 --> 03:26:17,360
convey the message of logging out in here so we're going to add an event to


22865
03:26:17,360 --> 03:26:23,040
it and then we're going to say we add the event of off event log out just like


22866
03:26:23,040 --> 03:26:27,512
that and this is a constant constructor as well so let's just send it send it


22867
03:26:27,512 --> 03:26:29,760
through


22868
03:26:29,912 --> 03:26:34,320
and after doing that we don't really have to do so much more so


22869
03:26:34,320 --> 03:26:37,680
um and we're also not in this case we're


22870
03:26:37,680 --> 03:26:42,320
not actually gonna go to to the login view so


22871
03:26:42,320 --> 03:26:45,192
what is gonna happen in here i'm actually gonna remove that and we're


22872
03:26:45,192 --> 03:26:49,440
gonna start testing a little bit so you'll see how things work okay


22873
03:26:49,440 --> 03:26:53,192
so um i'm gonna do a hot restart in here


22874
03:26:53,192 --> 03:26:57,040
and see if everything's working as it should so yeah what i'm going to do then


22875
03:26:57,040 --> 03:27:01,280
let's test log out okay so in here i'm just going to say this


22876
03:27:01,280 --> 03:27:05,280
log out and it says log out or cancel i'll say cancel so


22877
03:27:05,280 --> 03:27:09,360
that's working as it should and i say log out and then log out and


22878
03:27:09,360 --> 03:27:12,960
all of a sudden we came to the login view but hey wait a minute what happened


22879
03:27:12,960 --> 03:27:16,480
we removed this code this code that was here


22880
03:27:16,480 --> 03:27:21,832
why is why are we going to the login view without that code so this may look


22881
03:27:21,832 --> 03:27:25,832
magical but what is happening is that since the entire application is now


22882
03:27:25,832 --> 03:27:30,232
using off our auth block an auth block upon it


22883
03:27:30,232 --> 03:27:33,760
receiving the log out event let's go to the off block


22884
03:27:33,760 --> 03:27:37,912
so you get reminded of the log out event but what it is saying is that it first


22885
03:27:37,912 --> 03:27:42,232
goes to the loading state and then if it could lock the user out and it actually


22886
03:27:42,232 --> 03:27:48,160
says that i'm logged out now remember in the main function here we are actually


22887
03:27:48,160 --> 03:27:52,480
listening to various events that come from our off blog and when the events


22888
03:27:52,480 --> 03:27:57,600
that comes in is logged out we are showing the login view so it is the main


22889
03:27:57,600 --> 03:28:00,640
uh is the home page that is doing this work


22890
03:28:00,640 --> 03:28:04,000
so it's it is to me it is absolutely beautiful


22891
03:28:04,000 --> 03:28:07,600
because we are like removing


22892
03:28:07,600 --> 03:28:12,480
uh logic from our code and one step at a time


22893
03:28:12,480 --> 03:28:16,872
so inside our login as well uh so what we need to


22894
03:28:16,872 --> 03:28:21,512
let's go to the login view here


22895
03:28:21,512 --> 03:28:28,480
uh let's have a look in here at login you see after login we're not telling


22896
03:28:28,480 --> 03:28:33,832
the application that you have to go to a screen x or screen y


22897
03:28:33,832 --> 03:28:38,480
and so we can actually test this so i'm going to say my email address here and


22898
03:28:38,480 --> 03:28:43,360
foo bar bath and then log in see it comes to the main screen how did


22899
03:28:43,360 --> 03:28:49,680
that do that and that's again because of the main dart you see it first said um


22900
03:28:49,680 --> 03:28:53,280
if it's in the state of loading let's see are we handling


22901
03:28:53,280 --> 03:28:58,080
loading somewhere no we're not using that um but if if it actually becomes uh


22902
03:28:58,080 --> 03:29:03,120
logged in then it says display the notes view so that's how these screens are now


22903
03:29:03,120 --> 03:29:06,480
being shuffled and displayed to the user without us


22904
03:29:06,480 --> 03:29:12,232
having to do push routes or push name routes so


22905
03:29:12,232 --> 03:29:15,600
fantastic very well done we've taken care of everything that we said we're


22906
03:29:15,600 --> 03:29:19,360
going to take care of in this chapter so and what we usually do at the end of


22907
03:29:19,360 --> 03:29:22,552
every chapter is now that you're familiar with everything you've come so


22908
03:29:22,552 --> 03:29:27,600
far almost 40 40 chapters in this course so you should know that we need to tag


22909
03:29:27,600 --> 03:29:31,760
our work so that we don't lose them so


22910
03:29:31,760 --> 03:29:38,552
let's go ahead and have a look at if i can bring terminal up in here and


22911
03:29:38,552 --> 03:29:43,280
we see bit log you can see the last commit was step 22 so let's say git


22912
03:29:43,280 --> 03:29:48,720
commit get status first actually a whole new folder was added so we're


22913
03:29:48,720 --> 03:29:52,400
going to say git at all and let me increase the size of the


22914
03:29:52,400 --> 03:29:57,600
screen as well so we're going to say git commit and um


22915
03:29:57,600 --> 03:30:04,000
step 23 okay and push these changes


22916
03:30:04,320 --> 03:30:09,680
and we have a look at our logs get to step 22 and step 23 and there is nothing


22917
03:30:09,680 --> 03:30:14,480
to commit at this point so let's also tag our work and we say


22918
03:30:14,480 --> 03:30:19,832
step 23 and get push tags okay


22919
03:30:19,832 --> 03:30:22,800
fantastic so if you look at our tags now we have


22920
03:30:22,800 --> 03:30:28,720
20 21 22-23 okay


22921
03:30:28,720 --> 03:30:31,912
fantastic as this tradition at the end of every chapter we talk about what


22922
03:30:31,912 --> 03:30:35,832
we're going to discuss in the chapter that is coming and um


22923
03:30:35,832 --> 03:30:40,720
as i mentioned just briefly as a little note while i was talking


22924
03:30:40,720 --> 03:30:44,800
about exception handling we've now broken our exception handling


22925
03:30:44,800 --> 03:30:49,280
in that you see when we send an ad


22926
03:30:49,280 --> 03:30:56,232
signal to our block our auth block um that in itself is not gonna produce an


22927
03:30:56,232 --> 03:31:00,232
exception but right now we're treating that add


22928
03:31:00,232 --> 03:31:05,040
function and we're putting it inside a try block and then there's on exception


22929
03:31:05,040 --> 03:31:08,720
blah blah after that so none of those exception handling uh


22930
03:31:08,720 --> 03:31:14,000
catches are gonna be caught so uh we're gonna handle that and fix


22931
03:31:14,000 --> 03:31:18,080
that in the next chapter so grab some refreshments and i'll see you there


22932
03:31:18,080 --> 03:31:21,760
hello everyone and welcome to chapter 41 of this philosophy course


22933
03:31:21,760 --> 03:31:26,552
in previous chapters we've been talking quite a bit about uh block and


22934
03:31:26,552 --> 03:31:30,480
um i suggested that everybody who's taking this course to have a look at


22935
03:31:30,480 --> 03:31:34,552
block on their own time as well and to read the documentation because


22936
03:31:34,552 --> 03:31:38,080
um i understand that block could be something intimidating for especially


22937
03:31:38,080 --> 03:31:41,600
for those who haven't done for us this reactive programming before


22938
03:31:41,600 --> 03:31:45,040
however it allows us to create a good separation


22939
03:31:45,040 --> 03:31:50,080
and between our ui and our business logic as that's the point of using block


22940
03:31:50,080 --> 03:31:54,720
in a flutter application for instance so in this chapter we're going to build


22941
03:31:54,720 --> 03:31:57,360
up on top of what we've already done but we're


22942
03:31:57,360 --> 03:32:01,440
from this chapter onwards we're going to spend a little bit of time to clean the


22943
03:32:01,440 --> 03:32:05,832
logic up i mean even though things may be working the way they are right now


22944
03:32:05,832 --> 03:32:09,040
but and there is like a saying in software


22945
03:32:09,040 --> 03:32:12,480
development which i usually strongly disagree with that


22946
03:32:12,480 --> 03:32:17,832
people say if it's not broken don't fix it however we've seen over and over


22947
03:32:17,832 --> 03:32:22,800
again that things that work don't necessarily continue to work or things


22948
03:32:22,800 --> 03:32:26,320
that do work right now aren't necessarily working to the best of their


22949
03:32:26,320 --> 03:32:28,400
abilities so


22950
03:32:28,400 --> 03:32:31,912
in order to make things uh a little bit better in our source code we're going to


22951
03:32:31,912 --> 03:32:37,680
spend a little bit of time to make the logic more thorough and we have to


22952
03:32:37,680 --> 03:32:42,480
think it more through um we've gotten started with block but we are not really


22953
03:32:42,480 --> 03:32:46,480
there yet so in this chapter as you can see in the captions we're gonna handle


22954
03:32:46,480 --> 03:32:50,480
off block exceptions during login so there's gonna be


22955
03:32:50,480 --> 03:32:55,192
um quite a bit of um moving around between different files


22956
03:32:55,192 --> 03:32:59,680
and we're gonna like basically clean things up so we have to jump around


22957
03:32:59,680 --> 03:33:02,640
between files and i'm going to do my best to explain


22958
03:33:02,640 --> 03:33:06,160
when i move between files as well and like what we're adding what we're


22959
03:33:06,160 --> 03:33:09,440
removing and what we're modifying so i hope you can


22960
03:33:09,440 --> 03:33:14,480
um you can also follow along


22961
03:33:14,640 --> 03:33:17,512
all right so the first thing that we're going to do as you can see in the


22962
03:33:17,512 --> 03:33:21,600
caption here is to remove our off state login failure


22963
03:33:21,600 --> 03:33:27,280
so what we're going to do is um first of all i'm going to bring the code to the


22964
03:33:27,280 --> 03:33:31,440
to the main screen here so you see it as well and i'm going to


22965
03:33:31,440 --> 03:33:36,160
perhaps not even bring up scrcpy because i don't really think we need scr cpy


22966
03:33:36,160 --> 03:33:42,160
right now so if we look at our um


22967
03:33:42,160 --> 03:33:44,080
auth state


22968
03:33:44,080 --> 03:33:47,680
the way it is right now i don't even know which file i opened


22969
03:33:47,680 --> 03:33:53,512
um if i say command p off state so let's go to the off state dart file okay


22970
03:33:53,512 --> 03:33:58,640
and as you can see in here if i if i make the size a little bit bigger


22971
03:33:58,640 --> 03:34:01,912
you can see that we have for instance at the moment


22972
03:34:01,912 --> 03:34:05,760
um a off state login failure and then there


22973
03:34:05,760 --> 03:34:10,400
is an exception in there and also we for instance have off state logged in so it


22974
03:34:10,400 --> 03:34:13,360
seems like this is kind of like a pattern that we're following so we have


22975
03:34:13,360 --> 03:34:18,640
off state logged in and then auth state login failure with an exception and then


22976
03:34:18,640 --> 03:34:23,040
we have off state logged out and then a log out failure


22977
03:34:23,040 --> 03:34:28,640
however we're going to clean this up a little bit here and make sure that


22978
03:34:28,640 --> 03:34:32,080
we don't have just like except like


22979
03:34:32,080 --> 03:34:36,320
too many um off states that we have to handle in our


22980
03:34:36,320 --> 03:34:41,832
application okay so what we need to do is to go into our


22981
03:34:41,832 --> 03:34:46,552
logged out in here and add an exception so


22982
03:34:46,552 --> 03:34:50,640
the point of this is that if you for instance um


22983
03:34:50,640 --> 03:34:54,080
are logged out at the moment in the application


22984
03:34:54,080 --> 03:34:58,552
then there may also be an exception and you you you probably are asking like how


22985
03:34:58,552 --> 03:35:02,232
can a state of logout have an exception well


22986
03:35:02,232 --> 03:35:06,872
what we're going to do is that when you try to log into the application let's


22987
03:35:06,872 --> 03:35:10,400
let's say you're a complete new user and you haven't logged into the application


22988
03:35:10,400 --> 03:35:14,552
before okay you download the application what you what is your state your state


22989
03:35:14,552 --> 03:35:18,552
is logged out now let's say that you make up an email


22990
03:35:18,552 --> 03:35:22,400
and a password and then you write that in the login screen and then you press


22991
03:35:22,400 --> 03:35:26,400
the login button there are no users let's say in the system with that with


22992
03:35:26,400 --> 03:35:29,600
those information that you provided then we're going to give you an


22993
03:35:29,600 --> 03:35:33,280
exception we're going to give you an error saying that well you couldn't log


22994
03:35:33,280 --> 03:35:36,552
in what is your state at that point well


22995
03:35:36,552 --> 03:35:41,040
you're still logged out okay but now you're logged out and then the screen


22996
03:35:41,040 --> 03:35:45,760
also has to display some exceptions so that's why we're going to build a build


22997
03:35:45,760 --> 03:35:50,800
exception right into the auth state logged out okay


22998
03:35:50,800 --> 03:35:56,160
so let's go in here and just create an optional exception in here like that and


22999
03:35:56,160 --> 03:35:59,680
just call it exception okay and i'm going to get help from visual studio


23000
03:35:59,680 --> 03:36:03,832
code to add that parameter into the initializer


23001
03:36:03,832 --> 03:36:08,160
and let me do some reshuffling on the screen as well so you see it better and


23002
03:36:08,160 --> 03:36:13,192
perhaps decrease the size of the font as well okay


23003
03:36:13,440 --> 03:36:17,280
so that was the first thing that we had to do and you can see here


23004
03:36:17,280 --> 03:36:22,960
that i've written we don't really need auth state loading in auth events login


23005
03:36:22,960 --> 03:36:26,800
so what we're going to do is to go in


23006
03:36:26,800 --> 03:36:32,400
our off block so let me just save this file and let's go to off block


23007
03:36:32,720 --> 03:36:36,480
and in here we have this logged out with an exception and we're going to assume


23008
03:36:36,480 --> 03:36:41,600
fix that actually let's see in here yep let's just say


23009
03:36:41,600 --> 03:36:47,832
logged out at the moment and let's pass a null exception in here as well


23010
03:36:47,832 --> 03:36:52,080
so i'm going to go to my notes as well to auth block to ensure that i have all


23011
03:36:52,080 --> 03:36:55,760
the necessary information to pass through to you


23012
03:36:55,760 --> 03:36:59,760
so let's go in here and also fix that so now we're in our off block dart file and


23013
03:36:59,760 --> 03:37:04,232
we fixed the error that was caused by us adding an optional parameter


23014
03:37:04,232 --> 03:37:11,360
um to our off state um logged out all right so we fixed that now


23015
03:37:11,360 --> 03:37:14,232
then the next step as the caption indicates is we're going to remove the


23016
03:37:14,232 --> 03:37:20,320
emitting of off state loading from auth event login so


23017
03:37:20,320 --> 03:37:25,280
let's go ahead and do that so we're going to go ahead and remove this image


23018
03:37:25,280 --> 03:37:29,280
from there okay so we're not gonna display any kind of like a login screen


23019
03:37:29,280 --> 03:37:31,680
or anything


23020
03:37:32,232 --> 03:37:34,720
okay so um


23021
03:37:34,720 --> 03:37:39,280
as you can see in here we're now gonna start using block listener


23022
03:37:39,280 --> 03:37:44,232
um i've talked about block listener block provider block builder block


23023
03:37:44,232 --> 03:37:49,360
consumer before but for those of you who are not aware of what a block listener


23024
03:37:49,360 --> 03:37:53,600
is a block listener as its name indicates and it's only going to listen


23025
03:37:53,600 --> 03:37:58,320
to changes in the state of a block for instance our off block and it is going


23026
03:37:58,320 --> 03:38:02,232
to allow you to issue some side effects so


23027
03:38:02,232 --> 03:38:07,360
a side effect is for instance displaying of a new screen or displaying a dialogue


23028
03:38:07,360 --> 03:38:10,160
or removing a dialogue or removing a screen


23029
03:38:10,160 --> 03:38:13,600
from your navigation stack these are side effects okay


23030
03:38:13,600 --> 03:38:18,400
so they don't necessarily create a new widget


23031
03:38:18,400 --> 03:38:24,080
to be for instance uh to replace the current widget that's on the screen


23032
03:38:24,080 --> 03:38:29,192
instead they can create something that is on the side as its name indicates so


23033
03:38:29,192 --> 03:38:32,960
listener is perfect for that so the listener property


23034
03:38:32,960 --> 03:38:37,192
or the listener parameter of a block listener doesn't return a widget except


23035
03:38:37,192 --> 03:38:41,280
it's just a void block so it allows you to do something with the incoming state


23036
03:38:41,280 --> 03:38:44,800
okay so what we're gonna do now is we're


23037
03:38:44,800 --> 03:38:48,640
gonna start using block listener in our login view for


23038
03:38:48,640 --> 03:38:53,360
this chapter in order to basically handle our


23039
03:38:53,360 --> 03:38:56,640
exceptions because if you have a look at our


23040
03:38:56,640 --> 03:39:00,800
login view right now you can see that we have this


23041
03:39:00,800 --> 03:39:07,280
text button which reads login and in there we're sending an


23042
03:39:07,280 --> 03:39:12,232
event of login to our auth block but we're also handling exceptions in


23043
03:39:12,232 --> 03:39:16,080
this way and as we mentioned before these exceptions are never going to


23044
03:39:16,080 --> 03:39:21,680
happen in this flow because adding a new event to your


23045
03:39:21,680 --> 03:39:27,040
block or any block doesn't necessarily have to throw an exception the way it


23046
03:39:27,040 --> 03:39:31,440
works for us if we go back to our auth block and have a


23047
03:39:31,440 --> 03:39:37,680
look at our login you can see that if there is an exception what we're going


23048
03:39:37,680 --> 03:39:41,912
to do and what we're doing at the moment is like we're saying off state login


23049
03:39:41,912 --> 03:39:46,400
failure and what we're what we also need to do


23050
03:39:46,400 --> 03:39:51,280
actually is to clean this up because login failure shouldn't really be there


23051
03:39:51,280 --> 03:39:55,680
so i'm going to go to my notes as well and make sure that that yeah that seems


23052
03:39:55,680 --> 03:40:00,232
to be completely removed so let's go to our off state actually and as part of


23053
03:40:00,232 --> 03:40:04,552
what we did in here logged out that we added the exception


23054
03:40:04,552 --> 03:40:10,400
let's go and remove this login failure completely okay so now i'm in off state


23055
03:40:10,400 --> 03:40:15,512
dark file and i removed off state


23056
03:40:15,512 --> 03:40:20,400
where was it um off state login failure because as i


23057
03:40:20,400 --> 03:40:25,760
mentioned a login failure is now expressed by the auth state logged out


23058
03:40:25,760 --> 03:40:29,600
all right so you're either logged in or logged out


23059
03:40:29,600 --> 03:40:33,912
that's how i'm thinking and if you're logged out there may be an exception


23060
03:40:33,912 --> 03:40:37,040
which was therefore for instance caused during the


23061
03:40:37,040 --> 03:40:42,800
login process so now that we've removed that state auth state login failure in


23062
03:40:42,800 --> 03:40:47,760
here we're going to replace that in our osblog dart file we're going to replace


23063
03:40:47,760 --> 03:40:52,400
that by auth state and


23064
03:40:52,400 --> 03:40:57,040
log out and then an exception in here okay


23065
03:40:57,040 --> 03:41:00,160
so that's that


23066
03:41:00,640 --> 03:41:06,000
so now we're talking about uh auth listeners so let's go ahead and try to


23067
03:41:06,000 --> 03:41:11,040
fix this up so in our login view so i'm just going to go into my notes as


23068
03:41:11,040 --> 03:41:16,000
well so if you have a look at our login view


23069
03:41:16,000 --> 03:41:20,000
right now we have a text button at the bottom of the screen


23070
03:41:20,000 --> 03:41:24,640
which looks like this this is a text button and it has an on press with an


23071
03:41:24,640 --> 03:41:31,192
async okay so that is the actual login button all right and this login button


23072
03:41:31,192 --> 03:41:34,960
is the one then for now that is going to take care of the exception handling


23073
03:41:34,960 --> 03:41:38,000
using our


23074
03:41:38,480 --> 03:41:41,912
block listener so as you can see in the cache it says our login view won't be


23075
03:41:41,912 --> 03:41:46,480
rebuilt since the state is the same but with an exception


23076
03:41:46,480 --> 03:41:50,960
so this is very important to actually understand so let's have a look again at


23077
03:41:50,960 --> 03:41:55,192
our auth state in here and auth state logged out


23078
03:41:55,192 --> 03:42:00,080
so even if we put an a block listener and


23079
03:42:00,080 --> 03:42:04,960
wrap this button this text button here with a block listener


23080
03:42:04,960 --> 03:42:08,000
and you see once the application launches in


23081
03:42:08,000 --> 03:42:13,512
our off block you can see that first we are logged out okay so when the


23082
03:42:13,512 --> 03:42:17,120
application launches there is no user then the state is logged out and then


23083
03:42:17,120 --> 03:42:20,872
when you press the login button with invalid credentials for instance


23084
03:42:20,872 --> 03:42:24,640
then the state is still going to be logged out but with an exception


23085
03:42:24,640 --> 03:42:30,080
however this button won't be able to render or do


23086
03:42:30,080 --> 03:42:35,512
anything with those exceptions because from our off blocks perspective it is


23087
03:42:35,512 --> 03:42:40,480
the same state one within without an exception and the other one


23088
03:42:40,480 --> 03:42:45,360
with an exception right so it is the same state or it is the


23089
03:42:45,360 --> 03:42:48,800
same state class at least so


23090
03:42:48,800 --> 03:42:54,000
we we are actually going to fix that um but for now we're just going to go ahead


23091
03:42:54,000 --> 03:43:00,080
and do some cleanup in here so let's go ahead and as the caption


23092
03:43:00,080 --> 03:43:05,760
indicates we're gonna handle some exceptions in our text button in here


23093
03:43:05,760 --> 03:43:12,480
so let's go and wrap our text button um with a block listener okay so i'm gonna


23094
03:43:12,480 --> 03:43:16,640
do command dots on this and then i'm gonna say wrap with block


23095
03:43:16,640 --> 03:43:22,480
listener and as i've mentioned this previously i have this these wrap with


23096
03:43:22,480 --> 03:43:27,512
block etc because i have an extension in visual studio code call call block that


23097
03:43:27,512 --> 03:43:32,400
is from felix angelov i hope that i'm pronouncing pronouncing his name right


23098
03:43:32,400 --> 03:43:36,872
from um very good ventures who are the people who are basically sponsoring


23099
03:43:36,872 --> 03:43:41,440
block library so


23100
03:43:41,440 --> 03:43:45,680
that is the reason i see all those wrap with block etc in visual studio code if


23101
03:43:45,680 --> 03:43:49,280
you don't have that you may have to do this part by hand like to create a block


23102
03:43:49,280 --> 03:43:52,800
listener in here but i'm just gonna take advantage of having that extension in


23103
03:43:52,800 --> 03:43:57,440
visual studio code and just say wrap with block listener okay


23104
03:43:57,440 --> 03:44:01,512
and here you can see it says okay what type of a block is it and i'm gonna just


23105
03:44:01,512 --> 03:44:06,800
say it is the off block and it says what state does it have then


23106
03:44:06,800 --> 03:44:11,440
i'm gonna say off state all right and then here it says okay do


23107
03:44:11,440 --> 03:44:14,720
whatever you want to do now


23108
03:44:14,800 --> 03:44:16,800
so um


23109
03:44:16,800 --> 03:44:21,832
that was the wrapping of our text button with a block listener so that's that's


23110
03:44:21,832 --> 03:44:26,320
just that just went smoothly now what we have to do is as you can see


23111
03:44:26,320 --> 03:44:30,160
in the caption is to handle three separate exceptions that might happen


23112
03:44:30,160 --> 03:44:34,552
during login let's go back let's take a trip back to our


23113
03:44:34,552 --> 03:44:39,440
firebase auth provider um so firebase author provider dart file


23114
03:44:39,440 --> 03:44:43,760
and have a look at our login code as you can see in here


23115
03:44:43,760 --> 03:44:47,832
and you can see that there could be three exceptions that might happen that


23116
03:44:47,832 --> 03:44:53,832
are called firebase auth exception user not found wrong password etc


23117
03:44:53,832 --> 03:44:58,080
so we need to handle these off exceptions so user not found wrong


23118
03:44:58,080 --> 03:45:03,912
password and generic auth exception okay so let's go in here and just say that


23119
03:45:03,912 --> 03:45:12,160
okay if state is um off state logged out like that


23120
03:45:12,160 --> 03:45:15,760
so remember inside logged out we could have


23121
03:45:15,760 --> 03:45:19,680
an exception an optional exception and that's exactly what we're gonna handle


23122
03:45:19,680 --> 03:45:22,720
right now so let's say if


23123
03:45:22,720 --> 03:45:27,912
that was you see we said now if state is logged out so now in this code block in


23124
03:45:27,912 --> 03:45:33,600
here dart is going to understand that okay anywhere in here state is


23125
03:45:33,600 --> 03:45:38,720
auth state logged out so you have access to exception right here okay


23126
03:45:38,720 --> 03:45:42,800
so then we're going to say if states exception is


23127
03:45:42,800 --> 03:45:47,120
user not found off exception


23128
03:45:47,280 --> 03:45:50,480
and we're gonna display a weight show


23129
03:45:50,480 --> 03:45:53,912
uh error dialog so let's make this a


23130
03:45:53,912 --> 03:45:59,280
listener also async and then we're gonna say show error dialog


23131
03:45:59,280 --> 03:46:03,912
and which we've coded before remember this uses the generic dialog so i'm


23132
03:46:03,912 --> 03:46:08,800
going to go back here to login view dart and for the text we're just going to say


23133
03:46:08,800 --> 03:46:13,280
user not found okay then we have to also handle wrong


23134
03:46:13,280 --> 03:46:19,040
password off exception so else if state exception is wrong password off


23135
03:46:19,040 --> 03:46:22,960
exception then copy the text here and then in here we're just going to say


23136
03:46:22,960 --> 03:46:25,832
wrong credentials


23137
03:46:26,232 --> 03:46:30,320
and remember in anything that has to do with username and password it's quite


23138
03:46:30,320 --> 03:46:36,480
important that you don't tell the user which part of their credentials actually


23139
03:46:36,480 --> 03:46:40,800
incorrect because if i mean if there is a hacker who's trying


23140
03:46:40,800 --> 03:46:45,280
to get into the system and just using the ui then if you tell them wrong


23141
03:46:45,280 --> 03:46:49,040
password they'd be like ah so i got the email right it's just a password that's


23142
03:46:49,040 --> 03:46:53,512
incorrect so try not to tell a user even if it's for


23143
03:46:53,512 --> 03:46:58,232
good reasons like if it even if you even if you think well i have no hackers in


23144
03:46:58,232 --> 03:47:02,000
my application it is still better just to say wrong


23145
03:47:02,000 --> 03:47:06,400
credentials because the user themselves probably already know that their email


23146
03:47:06,400 --> 03:47:10,232
is correct or incorrect so they're first going to check their email so if the


23147
03:47:10,232 --> 03:47:13,280
email is correct then they are going to know that the password is incorrect and


23148
03:47:13,280 --> 03:47:15,912
as you'll see we're going to later allow the user to


23149
03:47:15,912 --> 03:47:20,800
reset their password so so just say wrong credentials in my


23150
03:47:20,800 --> 03:47:25,280
opinion at least so and then else if state


23151
03:47:25,280 --> 03:47:30,872
exception is generic auth exception then we're going to display a dialogue


23152
03:47:30,872 --> 03:47:33,832
and in here we're just going to say authentication


23153
03:47:33,832 --> 03:47:37,040
error okay


23154
03:47:38,160 --> 03:47:44,000
so that's that part done so now we've handled those auth exceptions in our


23155
03:47:44,000 --> 03:47:48,400
login view for our text button that says login


23156
03:47:48,400 --> 03:47:50,800
all right


23157
03:47:51,280 --> 03:47:55,832
so now that we have that what we need to do is to remove the uh exception


23158
03:47:55,832 --> 03:48:02,960
handling from the button itself so at the moment we have a huge try statement


23159
03:48:02,960 --> 03:48:07,512
not a huge actually we have quite a long try catch statements here that we have


23160
03:48:07,512 --> 03:48:12,320
we're catching three exceptions which are now actually being caught here with


23161
03:48:12,320 --> 03:48:16,232
our block listener so let's go and not


23162
03:48:16,232 --> 03:48:19,832
actually do that so i want you to grab this complex read


23163
03:48:19,832 --> 03:48:24,640
and where we actually pass the event of log into our block and remove this


23164
03:48:24,640 --> 03:48:30,720
entire try and catch block and just do the context read at auth event login so


23165
03:48:30,720 --> 03:48:34,552
your unpressed event or sorry on your on press


23166
03:48:34,552 --> 03:48:38,960
parameter of your text button should look very simple just like this email


23167
03:48:38,960 --> 03:48:44,800
password and then you pass that event to your auth block


23168
03:48:45,512 --> 03:48:52,000
all right so now that that has happened let's actually check this out and see if


23169
03:48:52,000 --> 03:48:56,800
everything works and remember this is like the beginning of us moving towards


23170
03:48:56,800 --> 03:49:00,720
a better approach of handling our authentication and


23171
03:49:00,720 --> 03:49:05,440
routing with blocks so things aren't going to be smooth actually we have a


23172
03:49:05,440 --> 03:49:09,512
lot of problems we have to fix but this is just like the beginning so i'm going


23173
03:49:09,512 --> 03:49:15,280
to bring scr cpy in here and let's just test this so


23174
03:49:15,280 --> 03:49:18,720
i'm going to do a hot restart


23175
03:49:18,720 --> 03:49:22,640
and now i'm on the login screen so okay i'm


23176
03:49:22,640 --> 03:49:26,320
then gonna go ahead in here and like put my email address


23177
03:49:26,320 --> 03:49:29,760
and then i'm gonna put some inquiry credentials in here okay and i'm just


23178
03:49:29,760 --> 03:49:34,552
gonna press the login button and now you can see that our block listener is


23179
03:49:34,552 --> 03:49:39,360
taking care of that so it's saying oh you're logged out and then it's wrong


23180
03:49:39,360 --> 03:49:44,800
credentials okay so i'm gonna press ok then i'm gonna just put an email address


23181
03:49:44,800 --> 03:49:48,160
here that doesn't exist and then press the login button and now you can see


23182
03:49:48,160 --> 03:49:52,080
user not found okay and to be honest with you if you wanna if you wanna do


23183
03:49:52,080 --> 03:49:55,192
what i actually said before that it's better to


23184
03:49:55,192 --> 03:50:00,640
not tell the user whether it's their user that is wrong or password you may


23185
03:50:00,640 --> 03:50:05,912
want to actually wrap both the state exception of user not found and wrong


23186
03:50:05,912 --> 03:50:10,080
password and just display the same message so you could do that by saying


23187
03:50:10,080 --> 03:50:14,640
war in here so or that


23188
03:50:14,640 --> 03:50:16,720
right so


23189
03:50:16,720 --> 03:50:20,000
and then you can just display the same message and then you could just remove


23190
03:50:20,000 --> 03:50:23,832
this statement from there so that could also work i'm just gonna leave it like


23191
03:50:23,832 --> 03:50:28,080
this but just so you know it is actually better to do that approach which i just


23192
03:50:28,080 --> 03:50:32,320
showed you momentarily all right so it seems like our block


23193
03:50:32,320 --> 03:50:36,160
listener is working fine in the login view so this was just the beginning and


23194
03:50:36,160 --> 03:50:40,080
we have a lot to fix so we're going to fix those things in the coming chapters


23195
03:50:40,080 --> 03:50:43,360
okay now that the code seems to be working


23196
03:50:43,360 --> 03:50:48,400
for login view let's just go ahead and do what we usually do and commit our


23197
03:50:48,400 --> 03:50:54,480
work so that we don't lose the the code if anything happens so


23198
03:50:54,480 --> 03:50:59,192
i'm gonna minimize scr cpy make visual studio code a little bit


23199
03:50:59,192 --> 03:51:03,832
bigger in here and increase the size quite dramatically


23200
03:51:03,832 --> 03:51:08,872
let's have a look at our status we've modified three files so let's just


23201
03:51:08,872 --> 03:51:14,232
say it's a git commit and in here


23202
03:51:14,232 --> 03:51:19,832
let's actually let's do it at all and then we just do a normal commenting here


23203
03:51:19,832 --> 03:51:23,912
that's step 24 okay now that it's done let's just push our


23204
03:51:23,912 --> 03:51:29,120
changes to the remote and then let's just also gets get status nothing to


23205
03:51:29,120 --> 03:51:32,640
command so everything was committed successfully and then let's just tag as


23206
03:51:32,640 --> 03:51:38,320
step 24 i believe right so that's our tag and then we push our


23207
03:51:38,320 --> 03:51:42,872
tags and let's have a look at our tags to


23208
03:51:42,872 --> 03:51:48,960
this point 23 we have where's 24 and there is 24 so we have everything tagged


23209
03:51:48,960 --> 03:51:54,720
successfully great so um as you can see and as is


23210
03:51:54,720 --> 03:51:57,680
tradition we always talk about at the end of every chapter we talk about what


23211
03:51:57,680 --> 03:52:00,872
we need to discuss in the chapter that's uh to come


23212
03:52:00,872 --> 03:52:04,640
and um so you can see our routing and dialog


23213
03:52:04,640 --> 03:52:08,640
handling isn't isn't block based at the moment we still have quite a lot of


23214
03:52:08,640 --> 03:52:12,160
places in our application that we're seeing for instance navigator of context


23215
03:52:12,160 --> 03:52:16,320
push name and removed until or we're doing push names so


23216
03:52:16,320 --> 03:52:19,912
so we've handled some bits and pieces of our application and we're using block


23217
03:52:19,912 --> 03:52:23,280
but for instance we aren't handling stuff in the register view or the verify


23218
03:52:23,280 --> 03:52:27,440
email view stuff like that so we have a lot of work to do and the next


23219
03:52:27,440 --> 03:52:30,640
chapter is actually going to be a heavy one but it's going to be such a key


23220
03:52:30,640 --> 03:52:34,872
chapter in this entire course that if you could just stick with me


23221
03:52:34,872 --> 03:52:38,872
throughout the next chapter then you're gonna see your applications architecture


23222
03:52:38,872 --> 03:52:43,280
actually become more and more robust so grab some refreshments if you want to


23223
03:52:43,280 --> 03:52:47,512
and i'll see you in the next chapter hello everyone and welcome to chapter 42


23224
03:52:47,512 --> 03:52:50,960
of this letter course in previous chapters we've talked quite


23225
03:52:50,960 --> 03:52:55,912
a bit about cleaning up our application logic and our authentication logic we've


23226
03:52:55,912 --> 03:53:00,160
come a good bit forward with that and we've


23227
03:53:00,160 --> 03:53:05,512
um we clean up quite a bit of stuff in the login view and now we're using block


23228
03:53:05,512 --> 03:53:09,120
listener in the login view if you follow all the chapters chronologically up to


23229
03:53:09,120 --> 03:53:11,440
up to that including the previous chapter


23230
03:53:11,440 --> 03:53:14,960
so you should already know about block block listener block consumer block


23231
03:53:14,960 --> 03:53:19,192
provider um and block builder of course


23232
03:53:19,192 --> 03:53:24,400
but we have quite a bit left and i'm actually proud to say that this chapter


23233
03:53:24,400 --> 03:53:29,192
and maybe the next one or two chapters are gonna be like the


23234
03:53:29,192 --> 03:53:35,192
glues that bring the application to a lot more tighter point where it will be


23235
03:53:35,192 --> 03:53:39,360
ready for releasing to the app store and the play store so if you stick with me


23236
03:53:39,360 --> 03:53:41,912
throughout these few chapters that are left


23237
03:53:41,912 --> 03:53:46,552
we are going to basically create a lot more cleaner product that is not only


23238
03:53:46,552 --> 03:53:53,040
usable by the end user but it's also but it's also architecturally sound so


23239
03:53:53,040 --> 03:53:56,232
you're going to be proud of actually releasing this application or maybe even


23240
03:53:56,232 --> 03:54:00,720
showing this code to your friends and colleagues so


23241
03:54:00,720 --> 03:54:03,760
as a caption in the case in this chapter we're going to talk about moving to


23242
03:54:03,760 --> 03:54:08,960
block for routing and dialogues because right now you know routing what we have


23243
03:54:08,960 --> 03:54:14,400
in our application is kind of like a hybrid in the main dart file and i mean


23244
03:54:14,400 --> 03:54:19,512
we don't have to talk about uh so like abstract concept concepts we can


23245
03:54:19,512 --> 03:54:22,800
actually look at our main dart files so if you look here what we've done in the


23246
03:54:22,800 --> 03:54:26,800
main dart file we're actually creating a block builder and depending on the


23247
03:54:26,800 --> 03:54:31,440
states that are being output by our block we're displaying the correct view


23248
03:54:31,440 --> 03:54:35,600
so this in itself is quite fine so there's nothing wrong with this but


23249
03:54:35,600 --> 03:54:40,480
we're also mixing this up with custom places in our application where we're


23250
03:54:40,480 --> 03:54:47,192
saying for instance context of um let's see actually with navigator off


23251
03:54:47,192 --> 03:54:50,552
and you can see we're doing actually that's fine but you can see in our login


23252
03:54:50,552 --> 03:54:54,552
view when you press the not registered yet register here button in order to do


23253
03:54:54,552 --> 03:54:58,480
the registration of the user then we're doing a navigator of push blah blah blah


23254
03:54:58,480 --> 03:55:03,600
so there's quite a few bits and pieces left still in our application that we're


23255
03:55:03,600 --> 03:55:06,960
either directly talking with our auth service which we shouldn't be doing we


23256
03:55:06,960 --> 03:55:12,480
should be talking to the off block or and we're talking with navigator of


23257
03:55:12,480 --> 03:55:16,720
something to do push name so in this chapter we're going to clean


23258
03:55:16,720 --> 03:55:20,960
these things up and make make basically our auth block and


23259
03:55:20,960 --> 03:55:25,680
the consumption of our off block a lot tighter all right using block and


23260
03:55:25,680 --> 03:55:30,800
listeners block builders and um we're all also going to use block


23261
03:55:30,800 --> 03:55:36,800
consumers i believe so let's go ahead and do that


23262
03:55:36,800 --> 03:55:38,720
so this is i mean


23263
03:55:38,720 --> 03:55:41,280
as the caption indicates i mean i've already talked about this maybe i should


23264
03:55:41,280 --> 03:55:44,480
have displayed this caption a few seconds ago


23265
03:55:44,480 --> 03:55:47,440
but we've already talked about this we should basically tighten up how we're


23266
03:55:47,440 --> 03:55:52,400
working with our um routing and our


23267
03:55:52,400 --> 03:55:55,912
how we work with off service


23268
03:55:56,080 --> 03:56:00,800
and you can see in here we need a few more auth events in order to be able to


23269
03:56:00,800 --> 03:56:05,192
achieve this so let's go ahead and open our um


23270
03:56:05,192 --> 03:56:09,512
i need to probably do some reshuffling on the screen here so you see the code


23271
03:56:09,512 --> 03:56:15,280
better so i'll do what i usually do here and then let's go to our off event


23272
03:56:15,280 --> 03:56:17,912
in here so these are the events that we have at


23273
03:56:17,912 --> 03:56:22,872
the moment we have log out login and then we have an initialize but we also


23274
03:56:22,872 --> 03:56:27,760
have quite a few other ui events that the application is doing in order to for


23275
03:56:27,760 --> 03:56:31,120
instance interact with authentication such as


23276
03:56:31,120 --> 03:56:35,600
um sending a verification email all right so when you're in the verify email


23277
03:56:35,600 --> 03:56:39,512
view and the user presses send the verification email again then that is at


23278
03:56:39,512 --> 03:56:42,720
the moment talking with our auth service directly and we shouldn't be doing that


23279
03:56:42,720 --> 03:56:48,800
we should be asking our off blog to do that or when you for instance um


23280
03:56:48,800 --> 03:56:53,040
ask the in in our verify email view so if you go here you can see that we had


23281
03:56:53,040 --> 03:56:57,832
this um log out button or the restart button


23282
03:56:57,832 --> 03:57:03,440
so let's go ahead and i'm going to bring scrcpy in here and let's


23283
03:57:03,440 --> 03:57:06,960
actually to be able to show to verify email we have to have a user who hasn't


23284
03:57:06,960 --> 03:57:10,480
been verified but if you remember from before if you've created a user just


23285
03:57:10,480 --> 03:57:14,232
recently or just just now for instance and that


23286
03:57:14,232 --> 03:57:18,720
user hasn't verified their credentials then they're gonna always be moved into


23287
03:57:18,720 --> 03:57:23,600
this verify email view in which they have to for instance say that yeah um i


23288
03:57:23,600 --> 03:57:28,400
am i did they had the ability to send a verification email to their email again


23289
03:57:28,400 --> 03:57:32,640
or restart the whole process meaning to log out and just go to the registered


23290
03:57:32,640 --> 03:57:35,912
login viewing and so that is at the moment happening directly


23291
03:57:35,912 --> 03:57:39,680
you can see it's off service directly to the auth service and we should be doing


23292
03:57:39,680 --> 03:57:42,800
that and then there is a navigator of push name then removed until which we


23293
03:57:42,800 --> 03:57:46,160
shouldn't be doing either so in order to tighten these things up


23294
03:57:46,160 --> 03:57:50,872
we need a few more events in our auth event dart file and that's what we're


23295
03:57:50,872 --> 03:57:56,552
going to do right now so let's go to our auth event file and


23296
03:57:56,552 --> 03:58:01,680
i'm gonna do the same thing in my notes so um the first


23297
03:58:01,680 --> 03:58:05,280
new event that we're gonna create in here as you can see it's called auth


23298
03:58:05,280 --> 03:58:10,232
event send email verification all right so let's go ahead and do that i'm going


23299
03:58:10,232 --> 03:58:15,280
to get rid of this bottom view in here and also the project structure


23300
03:58:15,280 --> 03:58:20,000
so i've already written that in my notes so i'm just going to bring it here to


23301
03:58:20,000 --> 03:58:23,512
the to visual studio code so i don't have to write it manually but the event


23302
03:58:23,512 --> 03:58:29,512
name should be called off event send email verification the goal is for our


23303
03:58:29,512 --> 03:58:34,080
verify email view to send this event to our off block in order to request a new


23304
03:58:34,080 --> 03:58:39,832
verification email to be sent to the currently logged in user okay


23305
03:58:41,120 --> 03:58:46,960
we also need a register event so the goal is that inside register view so


23306
03:58:46,960 --> 03:58:50,160
let's go have a look at the register view right now and you can see when the


23307
03:58:50,160 --> 03:58:54,800
user presses the register button at the moment we're saying uh firebase create


23308
03:58:54,800 --> 03:58:58,960
user so we're going directly to firebase auth service


23309
03:58:58,960 --> 03:59:02,000
and we're saying create user and then immediately we're saying send email


23310
03:59:02,000 --> 03:59:05,760
verification so we shouldn't be doing any of these so these three things that


23311
03:59:05,760 --> 03:59:10,232
we're doing here are pretty much wrong from the architecture perspective so we


23312
03:59:10,232 --> 03:59:14,000
shouldn't be talking with these services directly we should clean this up okay


23313
03:59:14,000 --> 03:59:18,160
in order to achieve that we need to go back to our auth event and create a new


23314
03:59:18,160 --> 03:59:23,832
oz event called register so i'm going to bring that at the bottom


23315
03:59:23,832 --> 03:59:29,040
of login here so let me go ahead and create a new


23316
03:59:29,040 --> 03:59:33,192
off event we call it class of event register


23317
03:59:33,192 --> 03:59:36,720
and of course we're going to extend our auth event


23318
03:59:36,720 --> 03:59:40,960
and for register we need two parameters if we go back to the register view you


23319
03:59:40,960 --> 03:59:44,080
see upon registering we're always sending the email and the password so


23320
03:59:44,080 --> 03:59:47,912
let's go ahead and do the same thing in here so we say final string email and


23321
03:59:47,912 --> 03:59:51,120
i'm going to copy this and i'm going to say just password and get help from


23322
03:59:51,120 --> 03:59:56,160
visual studio code to create this constant constructor okay you may want


23323
03:59:56,160 --> 04:00:01,360
to make these required name fields using these but i'm not going to do that so


23324
04:00:01,360 --> 04:00:06,400
i'm just going to leave it like this with email and password okay


23325
04:00:06,552 --> 04:00:12,320
so that's our off event register excuse me


23326
04:00:12,872 --> 04:00:19,360
so the other thing that we need an event called should register so um


23327
04:00:19,360 --> 04:00:25,040
basically that means for instance if you um haven't really registered a user yet


23328
04:00:25,040 --> 04:00:28,872
then we need to send this event i'm actually gonna have


23329
04:00:28,872 --> 04:00:35,760
a look in my login view and that is if you for instance go to a


23330
04:00:35,760 --> 04:00:39,192
login view in here and then you have a look at this button


23331
04:00:39,192 --> 04:00:43,120
that we have in here not registered yet register here that is basically the


23332
04:00:43,120 --> 04:00:46,232
event that we're going to implement right now so we're going to tell the off


23333
04:00:46,232 --> 04:00:51,680
block that hey you should register user okay and then off block is then going to


23334
04:00:51,680 --> 04:00:55,760
change its state to a state that the application is going to understand and


23335
04:00:55,760 --> 04:00:59,360
automatically send the user to the register view okay so


23336
04:00:59,360 --> 04:01:04,960
that's the use case so um let's go ahead i'm gonna just


23337
04:01:04,960 --> 04:01:09,680
check my notes as well let's go ahead and develop this should register and


23338
04:01:09,680 --> 04:01:13,360
i've already done that in my notes so i'm gonna bring it at the bottom of off


23339
04:01:13,360 --> 04:01:17,120
event register but you will need to write this yourself so it looks like


23340
04:01:17,120 --> 04:01:20,872
auth event should register extends off event and it just has a constant


23341
04:01:20,872 --> 04:01:28,800
constructor so it's very simple okay so that was for our auth um event should


23342
04:01:28,800 --> 04:01:31,280
register


23343
04:01:31,440 --> 04:01:34,320
so at the moment if we go now as you can


23344
04:01:34,320 --> 04:01:38,080
see it in caption we need also and now we've done the auth events like this


23345
04:01:38,080 --> 04:01:42,080
stuff that we had to create in order to be able to handle various


23346
04:01:42,080 --> 04:01:46,320
um events that come from the ui but we also need to fix up our states so let's


23347
04:01:46,320 --> 04:01:50,872
go to our off state and have a refresher in here you can see we have the state


23348
04:01:50,872 --> 04:01:55,120
loading logged in needs verification logged out


23349
04:01:55,120 --> 04:01:58,720
and log out failure but we're going to clean this up a little bit and make sure


23350
04:01:58,720 --> 04:02:02,800
that we have every state that our application requires in order to be able


23351
04:02:02,800 --> 04:02:08,400
to for instance display dialogs or do routing okay


23352
04:02:08,400 --> 04:02:13,040
so in at the moment in our off state what


23353
04:02:13,040 --> 04:02:17,832
we need to do is to create you see we have this loading state and what we're


23354
04:02:17,832 --> 04:02:22,160
going to do is to actually remove the loading state and we're going to create


23355
04:02:22,160 --> 04:02:27,192
an auth state called on initialized all right so


23356
04:02:27,192 --> 04:02:30,400
um let's go ahead and actually remove this


23357
04:02:30,400 --> 04:02:35,360
off states loading and create a class in here say auth state


23358
04:02:35,360 --> 04:02:40,400
on initialized because when you land in the application


23359
04:02:40,400 --> 04:02:43,912
for the first time you may actually want to for instance


23360
04:02:43,912 --> 04:02:47,440
display some sort of loading screen or whatever and we're going to indicate


23361
04:02:47,440 --> 04:02:50,960
that the application hasn't really initialized firebase or its


23362
04:02:50,960 --> 04:02:55,280
authentication system using this off state uninitialized it's just this is a


23363
04:02:55,280 --> 04:03:01,680
cleaner way of indicating to the two the call side which is ui that hey we


23364
04:03:01,680 --> 04:03:05,440
haven't yet been initialized so you need to call the initialize function on our


23365
04:03:05,440 --> 04:03:10,080
off block okay or sorry you have to send the auth event of


23366
04:03:10,080 --> 04:03:14,320
uh initialize auth event okay so let's go to off state so


23367
04:03:14,320 --> 04:03:18,800
just to recap i removed off state loading


23368
04:03:18,800 --> 04:03:23,600
and now we're going to put in our off state uninitialized so we're going to


23369
04:03:23,600 --> 04:03:29,680
say uninitialize extends off state and let's just create a constant


23370
04:03:29,680 --> 04:03:35,192
constructor for it as well like that okay


23371
04:03:36,232 --> 04:03:40,232
so the other thing that we have to implement as well is to


23372
04:03:40,232 --> 04:03:45,760
obviously we've talked about login like here login logged out and then log out


23373
04:03:45,760 --> 04:03:51,280
failure etc and and now we actually have to start


23374
04:03:51,280 --> 04:03:55,040
talking about what happens when the user presses the register button when the


23375
04:03:55,040 --> 04:03:58,800
user presses the register button we also have to handle


23376
04:03:58,800 --> 04:04:03,120
the case that yeah we are registering at the moment so it's a process that's


23377
04:04:03,120 --> 04:04:07,512
ongoing but we also have to talk about what happens if the registration


23378
04:04:07,512 --> 04:04:12,232
fails so we're in the process of registering either it goes fine and then


23379
04:04:12,232 --> 04:04:17,120
we say you're registered or we say registry registration failed so let's go


23380
04:04:17,120 --> 04:04:21,280
ahead and create a um a state in here right after


23381
04:04:21,280 --> 04:04:25,512
uninitialized let's just say class of state


23382
04:04:25,512 --> 04:04:31,912
what are we calling it registering extends off state okay and let's just in


23383
04:04:31,912 --> 04:04:34,720
here as we're doing in here for instance in


23384
04:04:34,720 --> 04:04:37,440
the state of logged out let's just copy this


23385
04:04:37,440 --> 04:04:41,040
exception and bring it into off state registering


23386
04:04:41,040 --> 04:04:44,640
and then let's create a constant constructor here for our off state


23387
04:04:44,640 --> 04:04:48,320
registering and i'm just going to say constant here okay so now we have


23388
04:04:48,320 --> 04:04:54,160
registering like that so now we have registering logged in


23389
04:04:54,160 --> 04:04:59,192
and we also actually need to remove off state logged out failure


23390
04:04:59,192 --> 04:05:02,720
because we well excuse me


23391
04:05:02,720 --> 04:05:07,360
we have logged out with an exception


23392
04:05:08,320 --> 04:05:13,040
um so let's go ahead and do that right now let's just remove off state log


23393
04:05:13,040 --> 04:05:16,800
log out failure as well all right so


23394
04:05:16,800 --> 04:05:23,360
excuse me again so that's for off state registering


23395
04:05:23,600 --> 04:05:26,480
so as you can see in the caption it says


23396
04:05:26,480 --> 04:05:31,040
loading of the logged out state we need login screen to have a loading dialog so


23397
04:05:31,040 --> 04:05:36,552
we need is loading in the auth state logged out so let's have a look at


23398
04:05:36,552 --> 04:05:40,872
our logged out here and


23399
04:05:40,872 --> 04:05:46,080
previously we had this loading state as a separate state so it was off state


23400
04:05:46,080 --> 04:05:49,360
loading and we were gonna generically use it everywhere but now what we're


23401
04:05:49,360 --> 04:05:52,720
gonna do is to build this loading state into


23402
04:05:52,720 --> 04:05:58,000
or to build this loading flag into existing states themselves so


23403
04:05:58,000 --> 04:06:02,800
let's then go ahead and say well when you press the login button what


23404
04:06:02,800 --> 04:06:07,360
we're going to do first is just to say um actually wait let's go one step back


23405
04:06:07,360 --> 04:06:10,960
let's say you just landed in the application but you already have a user


23406
04:06:10,960 --> 04:06:15,360
which you haven't logged them before okay so your state is logged out and the


23407
04:06:15,360 --> 04:06:19,512
exception is null and we're going to add a flag in here


23408
04:06:19,512 --> 04:06:25,192
and say final bool is loading and let's add that is loading to this


23409
04:06:25,192 --> 04:06:30,400
parameter in here and make both of these required parameters okay like this


23410
04:06:30,400 --> 04:06:35,040
and put a comma there as well like this boom so


23411
04:06:35,040 --> 04:06:39,120
when you land in the application exception your state is logged out there


23412
04:06:39,120 --> 04:06:42,872
is no exception so exceptions null and is loading is false because we're not


23413
04:06:42,872 --> 04:06:46,640
loading anything then you write your credentials and you press the login


23414
04:06:46,640 --> 04:06:52,232
button then what happens state is still logged out exception is null but loading


23415
04:06:52,232 --> 04:06:55,440
is true then let's just say that you entered the


23416
04:06:55,440 --> 04:06:58,640
incorrect credentials then what we're going to do in our block auth block is


23417
04:06:58,640 --> 04:07:02,960
going to say ooh you're off state logged out there is an exception and is loading


23418
04:07:02,960 --> 04:07:07,360
is false and then you'd be like okay now i


23419
04:07:07,360 --> 04:07:10,640
entered the inquiry credentials then you're gonna correct those and then


23420
04:07:10,640 --> 04:07:14,080
press the login button again now what are we gonna say we're gonna say okay


23421
04:07:14,080 --> 04:07:18,872
all state logged out exception is nothing and then is loading is true


23422
04:07:18,872 --> 04:07:21,912
and if then we can log you in that we're gonna


23423
04:07:21,912 --> 04:07:26,960
produce another state for you so you see this is how we're using states to convey


23424
04:07:26,960 --> 04:07:29,832
the cur like the correct state of the


23425
04:07:29,832 --> 04:07:33,440
application to the consumer which is the ui okay


23426
04:07:33,440 --> 04:07:37,912
so and this is not like you may think oh how does he know that this is the right


23427
04:07:37,912 --> 04:07:43,600
right way of doing things well there is no rights and wrong in here it


23428
04:07:43,600 --> 04:07:47,680
is just how you reason about your application


23429
04:07:47,680 --> 04:07:50,320
and when i say there is no right and wrong


23430
04:07:50,320 --> 04:07:53,760
what i mean is that some things are more right than the others and some things


23431
04:07:53,760 --> 04:07:58,400
are more wrong than the others but what you need to find is like the sweet


23432
04:07:58,400 --> 04:08:02,720
spot in here which is which is exactly


23433
04:08:02,720 --> 04:08:07,600
good for your application and at the same time is not incorrect okay and that


23434
04:08:07,600 --> 04:08:12,320
is the definition of write for your application and in this case this is the


23435
04:08:12,320 --> 04:08:16,552
definition of right for this application so you just need to find a sweet spot


23436
04:08:16,552 --> 04:08:19,832
for your application okay


23437
04:08:20,232 --> 04:08:23,360
so now let's have a look in here a little


23438
04:08:23,360 --> 04:08:27,680
and talk a little about a little bit about equality um


23439
04:08:27,680 --> 04:08:30,960
and what i mean by equality in here is that


23440
04:08:30,960 --> 04:08:35,512
you see what i talked about is three different logged out states logged out


23441
04:08:35,512 --> 04:08:40,552
with exception null is loading false logged out with exceptional is loading


23442
04:08:40,552 --> 04:08:44,320
true and then logged out with an exception and is loading false for


23443
04:08:44,320 --> 04:08:47,512
instance so you're producing three different


23444
04:08:47,512 --> 04:08:52,720
types of states all of the same class so how will


23445
04:08:52,720 --> 04:08:57,912
how will uh your application understand that these are actually different states


23446
04:08:57,912 --> 04:09:00,552
so you kind of need to differentiate


23447
04:09:00,552 --> 04:09:05,192
between various states of your off state logged out so you kind of need to tell


23448
04:09:05,192 --> 04:09:09,192
your application that hey although the previous state was also off


23449
04:09:09,192 --> 04:09:13,360
state logged out and the correct like the one that i'm producing right now is


23450
04:09:13,360 --> 04:09:18,232
also off state logged out but these two states could actually be different from


23451
04:09:18,232 --> 04:09:22,232
each other and in what they contain so you need to kind of create like an


23452
04:09:22,232 --> 04:09:24,640
equality and


23453
04:09:24,640 --> 04:09:28,720
logic into your states to tell the application hey this


23454
04:09:28,720 --> 04:09:33,680
although it's the same is like a new instance of the same state class but


23455
04:09:33,680 --> 04:09:38,320
internally is not the same thing and for that we have to implement equality all


23456
04:09:38,320 --> 04:09:41,832
right now there is a good package that allows


23457
04:09:41,832 --> 04:09:45,832
you to do this in order to implement equality in your applications and in


23458
04:09:45,832 --> 04:09:50,400
your dart code and it is called equitable so let's go ahead and import


23459
04:09:50,400 --> 04:09:54,160
that and don't be intimidated by all these logs in here it's just because we


23460
04:09:54,160 --> 04:09:58,872
have a lot of problems that we're fixing at the moment so let's go ahead and um


23461
04:09:58,872 --> 04:10:02,552
i'm gonna change the screen layout a little bit


23462
04:10:02,552 --> 04:10:07,040
increase the size and let's just go ahead and say flutter


23463
04:10:07,040 --> 04:10:10,552
pop add equitable


23464
04:10:12,232 --> 04:10:15,600
stuff like that and you can read more about that so i'm just going to bring up


23465
04:10:15,600 --> 04:10:20,080
my safari in here and let's just say


23466
04:10:20,080 --> 04:10:23,512
flutter or just pop dev


23467
04:10:23,512 --> 04:10:28,400
and let's just say equatable excuse me


23468
04:10:28,400 --> 04:10:33,832
and you can see it is actually developed by flutter community dev in here okay so


23469
04:10:33,832 --> 04:10:38,160
it's a verified developer in here and you can also actually follow flutter


23470
04:10:38,160 --> 04:10:42,480
community dev on twitter as well to get some updates about their packages okay


23471
04:10:42,480 --> 04:10:47,120
so we're now importing that into our application and we should now be able to


23472
04:10:47,120 --> 04:10:51,120
use that so i'm going to get rid of this bottom bar


23473
04:10:51,120 --> 04:10:56,640
and change the screen layout again decrease the font size


23474
04:10:56,640 --> 04:11:03,040
okay so in here now let's go and import equitable so i'm gonna just import that


23475
04:11:03,040 --> 04:11:05,832
i've already imported that in my notes so i'm just gonna paste that in here you


23476
04:11:05,832 --> 04:11:10,960
import equitable like this package equitable slash equitable dart okay


23477
04:11:10,960 --> 04:11:16,080
so what we need here is we're already extending an existing class so what you


23478
04:11:16,080 --> 04:11:21,120
can do is you can bring in equality in your classes using a mix and so we're


23479
04:11:21,120 --> 04:11:26,832
going to say mixing e quotable mix in just like


23480
04:11:26,832 --> 04:11:32,800
that sorry with okay so now that we're doing with that mixing


23481
04:11:32,800 --> 04:11:35,512
now we have to implement a few functionalities in here as you can see


23482
04:11:35,512 --> 04:11:40,160
visual studio code helps me it says create one missing override okay


23483
04:11:40,160 --> 04:11:46,080
so i do that override in here and it says okay now we have to override


23484
04:11:46,080 --> 04:11:50,480
this property and you can see in here what you need to return is a list of


23485
04:11:50,480 --> 04:11:55,360
properties that have to be taken into account when the equitable package can


23486
04:11:55,360 --> 04:11:59,192
basically calculate equality in your class and in here what


23487
04:11:59,192 --> 04:12:02,960
we're going to say is that we have two properties in here called exception


23488
04:12:02,960 --> 04:12:08,000
and we also have is loading so take these two properties into account when


23489
04:12:08,000 --> 04:12:13,912
computing equality in the instances of auth state logged out


23490
04:12:15,192 --> 04:12:18,872
all right very well done so that's that's what


23491
04:12:18,872 --> 04:12:23,760
we've done in here so we've made our off state logged out class equitable and the


23492
04:12:23,760 --> 04:12:28,160
reason again for that is that we need to produce various


23493
04:12:28,160 --> 04:12:33,120
various um mutations of this off state logged out


23494
04:12:33,120 --> 04:12:38,080
and those different mutations with various exceptions and is


23495
04:12:38,080 --> 04:12:41,600
loading need to be distinguishable from each other okay and that's why we're


23496
04:12:41,600 --> 04:12:45,192
using the equitable package in here


23497
04:12:45,600 --> 04:12:48,960
so um this thing we've already talked about


23498
04:12:48,960 --> 04:12:53,912
and we don't need the off state logout failure so we we've removed that already


23499
04:12:53,912 --> 04:12:57,440
as part of the cleanup that we were doing earlier but if you forgot to do


23500
04:12:57,440 --> 04:13:00,160
that please just look at the caption at the bottom of the screen just to make


23501
04:13:00,160 --> 04:13:04,640
and just make sure go you go to offstate.file and remove your off state


23502
04:13:04,640 --> 04:13:07,600
logout failure and the reason behind that since i explained before is that


23503
04:13:07,600 --> 04:13:12,160
now logout failure is actually built in and baked into off state logged out


23504
04:13:12,160 --> 04:13:16,320
class inside an exception all right


23505
04:13:17,120 --> 04:13:21,120
wow all right let's go to the next section


23506
04:13:21,120 --> 04:13:23,280
now


23507
04:13:23,680 --> 04:13:26,872
well you see at the moment we have no loading


23508
04:13:26,872 --> 04:13:31,912
screens in our application so when something happens when we're doing


23509
04:13:31,912 --> 04:13:37,040
an api call for instance or we're um going to our off provider and say login


23510
04:13:37,040 --> 04:13:42,232
or send an email verification we have no loading screen inside the application


23511
04:13:42,232 --> 04:13:45,512
so there is nothing that indicates to the user that something is actually


23512
04:13:45,512 --> 04:13:49,512
happening and we're gonna go fix that up soon so as you'll see we're going to


23513
04:13:49,512 --> 04:13:54,320
create a new dialog which does some loading for the user and then using that


23514
04:13:54,320 --> 04:13:57,192
dialog users going to understand that okay something is happening i just have


23515
04:13:57,192 --> 04:14:00,480
to wait for it okay but the user experience that we have


23516
04:14:00,480 --> 04:14:04,552
right now is kind of sub-optimal in that the user presses the login screen and


23517
04:14:04,552 --> 04:14:07,832
dependent on their sorry the user presses the login button


23518
04:14:07,832 --> 04:14:11,040
and depending on their internet connectivity and the speed of their


23519
04:14:11,040 --> 04:14:14,872
internet internet connection that operation could take


23520
04:14:14,872 --> 04:14:18,800
anywhere between a few milliseconds to a few seconds so


23521
04:14:18,800 --> 04:14:22,232
if you're making a user wait a few seconds based on their internet


23522
04:14:22,232 --> 04:14:25,832
connection speed then you have to kind of display to them that you're doing


23523
04:14:25,832 --> 04:14:29,760
something well the the usual i mean way that you


23524
04:14:29,760 --> 04:14:33,600
could do that is to display some sort of a small loading indicator for instance


23525
04:14:33,600 --> 04:14:37,912
on ios natively you have a little loading


23526
04:14:37,912 --> 04:14:43,040
indicator that sits on on the status bar that just moves a little bit and it's


23527
04:14:43,040 --> 04:14:46,320
very tiny i would dare to say it's less than


23528
04:14:46,320 --> 04:14:51,192
20 pixels wide and 20 pixels in height kind of it could even be like 17 pixels


23529
04:14:51,192 --> 04:14:55,192
width on height it's very little so it's a subtle indication that something is


23530
04:14:55,192 --> 04:14:58,640
happening but that's usually i mean i find that


23531
04:14:58,640 --> 04:15:02,640
quite annoying because when something is loading you kind of need to


23532
04:15:02,640 --> 04:15:07,512
block the user from trying to press the same button thousands of times so


23533
04:15:07,512 --> 04:15:11,192
if you display that little loading indicator on the top on the status bar


23534
04:15:11,192 --> 04:15:14,080
then what you also have to do you have to add some extra logic to your


23535
04:15:14,080 --> 04:15:18,800
application to block for instance the current register button or the loading


23536
04:15:18,800 --> 04:15:22,872
button and you usually don't want to do that but because that's just extra logic


23537
04:15:22,872 --> 04:15:26,400
what would make more sense is upon a user pressing the login button or the


23538
04:15:26,400 --> 04:15:29,760
register button you want to display like a blocking screen


23539
04:15:29,760 --> 04:15:34,000
that tells them that hey i'm doing something okay so don't do anything else


23540
04:15:34,000 --> 04:15:39,512
while this screen is is visible on your mobile display so let's go ahead and do


23541
04:15:39,512 --> 04:15:41,832
that


23542
04:15:41,912 --> 04:15:45,360
so we're going to code a loading screen as you can see in the caption says we're


23543
04:15:45,360 --> 04:15:49,280
going to do it in lib utilities dialogues loading dialog so let's go


23544
04:15:49,280 --> 04:15:54,832
ahead and do that and bring up my notes as well


23545
04:15:55,360 --> 04:15:59,040
i'm going to close all these files just to make sure we've also saved them


23546
04:15:59,040 --> 04:16:02,720
because if you close a file in visual studio code at least which we haven't


23547
04:16:02,720 --> 04:16:05,512
saved before visual studio is going to display your dialogue saying are you


23548
04:16:05,512 --> 04:16:08,960
sure you want to close this file without saving it so it's usually good practice


23549
04:16:08,960 --> 04:16:13,680
to close your existing files before you move into doing something new


23550
04:16:13,680 --> 04:16:18,160
so that you at least are sure that you've saved those changes okay


23551
04:16:18,160 --> 04:16:22,872
um now let's i mean we have some errors don't worry about that so


23552
04:16:22,872 --> 04:16:25,912
you should now be comfortable with having errors in your application


23553
04:16:25,912 --> 04:16:28,552
because you know at the end of every chapter we're going to tighten things up


23554
04:16:28,552 --> 04:16:33,912
and fix things okay so let's go to lib utilities dialog


23555
04:16:33,912 --> 04:16:37,192
lib utilities dialogues and we're going to create a


23556
04:16:37,192 --> 04:16:42,000
new file in here as the caption indicates called loading dialog dart


23557
04:16:42,000 --> 04:16:46,400
and you see this loading dialog what we also have to have in this loading dialog


23558
04:16:46,400 --> 04:16:48,720
is to allow


23559
04:16:48,720 --> 04:16:53,360
to allow the caller to display this dialog but also to allow the caller to


23560
04:16:53,360 --> 04:16:57,192
dismiss this dialog so it's very important to be able to dismiss a


23561
04:16:57,192 --> 04:17:01,760
dialogue when the application actually needs for that dialog to disappear so


23562
04:17:01,760 --> 04:17:06,800
what we're going to do first is to bring a create a type f in here and we're


23563
04:17:06,800 --> 04:17:11,600
gonna call it closed dialog let me just increase the size of that font as well


23564
04:17:11,600 --> 04:17:16,480
and we're gonna make sure that it's equal to a void function in here okay so


23565
04:17:16,480 --> 04:17:20,720
what we're to do in here we have we're going to create a function that displays


23566
04:17:20,720 --> 04:17:26,720
a loading dialog but it also returns back a function that the caller can call


23567
04:17:26,720 --> 04:17:31,512
to dismiss it so it may be a little bit of a shift in how you think about


23568
04:17:31,512 --> 04:17:34,960
programming if it's the first time you're doing something like this but i


23569
04:17:34,960 --> 04:17:39,120
promise you it will make a lot more sense as we develop it so let's say that


23570
04:17:39,120 --> 04:17:44,160
we have a function that returns a close dialogue um and we call it show loading


23571
04:17:44,160 --> 04:17:47,832
dialog okay and it has two


23572
04:17:47,832 --> 04:17:51,832
required parameters so let's put curly brackets in here


23573
04:17:51,832 --> 04:17:57,512
and then let's just say we have required build context


23574
04:17:57,512 --> 04:18:03,440
and we call it build context or let's just call it context and then


23575
04:18:03,440 --> 04:18:07,680
we have a text to display so required string text okay


23576
04:18:07,680 --> 04:18:10,160
excuse me


23577
04:18:11,120 --> 04:18:14,640
so and now you can see you get this required build context


23578
04:18:14,640 --> 04:18:17,280
try changing its name and i'm going to get help from facial studio code to


23579
04:18:17,280 --> 04:18:21,832
import let's say material okay


23580
04:18:21,912 --> 04:18:25,440
now we have just one error saying that you're not returning anything in here


23581
04:18:25,440 --> 04:18:28,232
so the first thing we're going to do is we're actually going to define our


23582
04:18:28,232 --> 04:18:32,000
dialog how is this loading dialog going to look like so it's the only thing it's


23583
04:18:32,000 --> 04:18:36,872
going to do is just to have a little loading indicator a bit of spacing and


23584
04:18:36,872 --> 04:18:41,360
text that is going to be using the text widget to render this


23585
04:18:41,360 --> 04:18:44,640
string so let's first define our dialogue so i'm just going to say final


23586
04:18:44,640 --> 04:18:48,960
dialog is equal to alert dialogue like this


23587
04:18:48,960 --> 04:18:52,552
and let's just go to the next line semicolon


23588
04:18:52,552 --> 04:18:55,912
all right and then we have to define the content


23589
04:18:55,912 --> 04:18:59,280
for it as you can see content should be a widget so the widget we're developing


23590
04:18:59,280 --> 04:19:02,872
is a column because we want like a vertical list of widgets the loading


23591
04:19:02,872 --> 04:19:06,720
screen a little bit of a size box spacing and a text widget so you can


23592
04:19:06,720 --> 04:19:11,512
render that with column easily and remember column what what column


23593
04:19:11,512 --> 04:19:16,400
wants to usually do is to grab as much space as it needs so it could be like


23594
04:19:16,400 --> 04:19:20,480
the entire screen long we don't want that what we want for the column to take


23595
04:19:20,480 --> 04:19:24,872
as little space as it needs to render its content correctly so we're going to


23596
04:19:24,872 --> 04:19:29,680
say main access size oops exercise it should be of type main


23597
04:19:29,680 --> 04:19:35,280
access size and we're going to say main exercise of minimum all right


23598
04:19:35,440 --> 04:19:41,440
and its children are going to be an array of two constant


23599
04:19:41,440 --> 04:19:45,360
widgets of a circular progress indicator like


23600
04:19:45,360 --> 04:19:48,232
that and then we're going to say a constant


23601
04:19:48,232 --> 04:19:52,720
of size box we haven't used size boxes


23602
04:19:52,720 --> 04:19:59,680
before but size box is really good for um creating spacing so


23603
04:19:59,680 --> 04:20:03,912
as you can see in here it's just an empty space with a height of 10.


23604
04:20:03,912 --> 04:20:07,192
and then what we're going to do in here we're just going to say display also a


23605
04:20:07,192 --> 04:20:11,120
text that renders this particular text parameter


23606
04:20:11,120 --> 04:20:14,320
in here so like that


23607
04:20:14,960 --> 04:20:19,280
now we're we have a little problem here with how this thing is rendered and you


23608
04:20:19,280 --> 04:20:23,360
can see they're in the same line and that's why it kind of looks strange


23609
04:20:23,360 --> 04:20:27,832
let's put a comma in here and then save the file to get the


23610
04:20:27,832 --> 04:20:31,680
formatting correct and let's put a comma in here as well


23611
04:20:31,680 --> 04:20:35,360
like that okay so now it's working as it should or


23612
04:20:35,360 --> 04:20:40,400
at least it's formatting as it should so then what we're going to do in here


23613
04:20:40,400 --> 04:20:43,512
we're going to just say we want to display that dialogue so


23614
04:20:43,512 --> 04:20:46,552
let's say show oops


23615
04:20:46,552 --> 04:20:50,640
show a show dialog okay


23616
04:20:50,640 --> 04:20:54,960
and let's go in here and the context of this dialog and i'm going to bring it


23617
04:20:54,960 --> 04:20:59,120
here so you see it the context is the context that we are providing to this


23618
04:20:59,120 --> 04:21:03,120
function and a barrier or dismissable and i'm


23619
04:21:03,120 --> 04:21:06,400
going to show you the documentation for very dismissible and let's see if we can


23620
04:21:06,400 --> 04:21:09,440
actually find that oh


23621
04:21:09,440 --> 04:21:12,400
it's not helping me with that but that's okay um


23622
04:21:12,400 --> 04:21:17,192
what barrier dismissable allows you to do is to say that if the user taps


23623
04:21:17,192 --> 04:21:22,080
outside this dialogue either allow the dismissal of this dialogue or don't and


23624
04:21:22,080 --> 04:21:27,040
we don't want the user to be able to tap outside this dialog in order to dismiss


23625
04:21:27,040 --> 04:21:29,512
it because a loading screen should be dismissed when we want it to be


23626
04:21:29,512 --> 04:21:33,192
dismissed not when the user wants it to be dismissed and also


23627
04:21:33,192 --> 04:21:36,720
for those who are ux designers who are watching this course he may be actually


23628
04:21:36,720 --> 04:21:42,232
tempted also to for instance um provide a cancel i actually think


23629
04:21:42,232 --> 04:21:46,232
having a cancel button in most loading screens is a good idea


23630
04:21:46,232 --> 04:21:50,080
because sometimes for whatever reason an application may


23631
04:21:50,080 --> 04:21:52,800
not be able to handle for instance different errors and exceptions that


23632
04:21:52,800 --> 04:21:57,120
could occur while making an api call and i personally have been in this situation


23633
04:21:57,120 --> 04:22:00,960
where a dialogue was displayed to the user and it was just never dismissed


23634
04:22:00,960 --> 04:22:04,232
because something went wrong the application wasn't able to handle it so


23635
04:22:04,232 --> 04:22:07,832
i personally as a user had to go and force kill the application and restart


23636
04:22:07,832 --> 04:22:11,760
the entire process in order to get things working so if you want to have a


23637
04:22:11,760 --> 04:22:15,280
cancel button in here it's fine but um i'm not doing that right now it's just


23638
04:22:15,280 --> 04:22:19,440
for the sake of simplicity so that we can move on with this code as um as fast


23639
04:22:19,440 --> 04:22:22,720
as accuracy as fast and accurate as possible


23640
04:22:22,720 --> 04:22:25,680
so now you know what barrier dismissible false does


23641
04:22:25,680 --> 04:22:30,000
and for the builder function that's what this um error is here we have to just


23642
04:22:30,000 --> 04:22:36,232
say okay we get a context and but in here what we do is just do we


23643
04:22:36,232 --> 04:22:40,232
remove we we return the dialogue in here okay so now we're saying show this


23644
04:22:40,232 --> 04:22:45,120
dialogue and and then we're just going to say


23645
04:22:45,120 --> 04:22:48,160
the return value see we still have this problem with the return value that we're


23646
04:22:48,160 --> 04:22:51,280
not returning a closed dialogue and what this close dialogue is just going to be


23647
04:22:51,280 --> 04:22:55,600
is we are going to return a function from our function so when the user then


23648
04:22:55,600 --> 04:23:01,040
calls that function we're going to pop this dialog it's it's beautiful


23649
04:23:01,040 --> 04:23:04,232
so let's just say we return a function an error function


23650
04:23:04,232 --> 04:23:09,832
upon calling which we are going to say navigator of this context and we're just


23651
04:23:09,832 --> 04:23:15,280
going to say pop okay so that's how you return a function that can be acted upon


23652
04:23:15,280 --> 04:23:19,832
and invoked by others so now we save this and you can see we


23653
04:23:19,832 --> 04:23:23,120
don't have any errors i'm going to just


23654
04:23:23,360 --> 04:23:27,680
resize this a little bit make the font a little bit smaller so you see the code


23655
04:23:27,680 --> 04:23:30,720
in its entirety


23656
04:23:31,440 --> 04:23:35,120
so now let's talk about loading and


23657
04:23:35,120 --> 04:23:38,552
exception handling during the login process so


23658
04:23:38,552 --> 04:23:44,160
let's go to our login view and you see here we have already some


23659
04:23:44,160 --> 04:23:47,832
exception handling and we also have this off block but we also have this text


23660
04:23:47,832 --> 04:23:52,400
button that is doing like manual navigation it says push name and remove


23661
04:23:52,400 --> 04:23:58,320
until and we need to clean these things up okay


23662
04:23:58,400 --> 04:24:04,400
so let's go inside our login view and so


23663
04:24:04,400 --> 04:24:07,912
i'm going to also do it in my notes


23664
04:24:08,232 --> 04:24:11,120
and let's have a look at how we've done


23665
04:24:11,120 --> 04:24:14,640
things you can see in here we have a block listener at the moment that is


23666
04:24:14,640 --> 04:24:19,120
wrapping itself around this text button so we're


23667
04:24:19,120 --> 04:24:23,360
not gonna do that we're gonna have the text button exactly the way it is and so


23668
04:24:23,360 --> 04:24:26,872
meaning that we're gonna remove this block listener from here okay


23669
04:24:26,872 --> 04:24:31,360
so what we could do is as the caption indicates we're just gonna go here to


23670
04:24:31,360 --> 04:24:36,000
the scaffold and just say okay we have a new block listener and remember this


23671
04:24:36,000 --> 04:24:40,400
should be the off block itself so i'm gonna say off block and this should be


23672
04:24:40,400 --> 04:24:45,912
the off state like this so then inside the listener what we need to do is to


23673
04:24:45,912 --> 04:24:49,680
bring what we had already


23674
04:24:49,680 --> 04:24:52,320
um inside


23675
04:24:52,320 --> 04:24:56,160
our text button in here so we have the


23676
04:24:56,160 --> 04:25:01,192
exception handling okay excuse me so as the caption indicates


23677
04:25:01,192 --> 04:25:04,552
we're going to do this exception handling now inside our new block


23678
04:25:04,552 --> 04:25:08,872
listener on top so remove all the code from your block listener for your text


23679
04:25:08,872 --> 04:25:12,000
button all the exception handling just cut it


23680
04:25:12,000 --> 04:25:16,800
and bring it please up into this block listener which is at the top level all


23681
04:25:16,800 --> 04:25:21,280
right and make this an async listener so that you can await on your show or


23682
04:25:21,280 --> 04:25:25,440
dialogue okay so that's the first step however we still have this empty block


23683
04:25:25,440 --> 04:25:30,232
listener in here so i'm gonna remove that now so all of a sudden you see now


23684
04:25:30,232 --> 04:25:36,080
we have the text button in here all right that was fantastic


23685
04:25:36,080 --> 04:25:41,760
so then what we need to do is to start handling our


23686
04:25:41,760 --> 04:25:46,232
loading screen basically so that is going to be


23687
04:25:46,232 --> 04:25:52,080
a bit of code so but don't be scared of that we're going to handle that soon


23688
04:25:52,080 --> 04:25:57,040
so in order to be able to display our loading screen we also have


23689
04:25:57,040 --> 04:26:01,280
to kind of like keep hold off this um


23690
04:26:01,280 --> 04:26:06,320
close handle what do i mean by that let's go back to our loading dialog you


23691
04:26:06,320 --> 04:26:09,832
see every time we call this function this is going to give us a function back


23692
04:26:09,832 --> 04:26:14,232
so that we can close the the dialog we have to keep hold of this


23693
04:26:14,232 --> 04:26:18,552
so that when the states change inside our login view we're going to look at


23694
04:26:18,552 --> 04:26:22,400
that previous handle and be like oh we have a loading screen


23695
04:26:22,400 --> 04:26:27,192
displayed to the user we have to first dismiss it okay so let's go where we're


23696
04:26:27,192 --> 04:26:31,832
keeping hold of our email and password in here and keep hold of a


23697
04:26:31,832 --> 04:26:36,872
close dialogue and it's going to auto import that you see so if you don't have


23698
04:26:36,872 --> 04:26:41,832
auto import you may have to import this file yourself


23699
04:26:41,832 --> 04:26:44,720
so let's say it's an optional and we call it close


23700
04:26:44,720 --> 04:26:47,680
dialogue handle okay


23701
04:26:47,680 --> 04:26:51,120
so we keep hold of that we haven't assigned to it yet but we're gonna do


23702
04:26:51,120 --> 04:26:53,600
that soon


23703
04:26:54,080 --> 04:26:59,912
so let's stand in here in the state of logged out and right here just add some


23704
04:26:59,912 --> 04:27:03,040
space and what we're gonna do we're gonna say


23705
04:27:03,040 --> 04:27:07,832
um do we already have a closed dialog handle so let's say close


23706
04:27:07,832 --> 04:27:10,232
and dialog is


23707
04:27:10,232 --> 04:27:13,440
close dialog hana


23708
04:27:13,512 --> 04:27:17,360
and what we're going to do now is we're going to have a look at our states and


23709
04:27:17,360 --> 04:27:22,872
also if we have a closed dialog handle and we're going to display correct


23710
04:27:22,872 --> 04:27:26,320
behavior basically so what we're going to do is we're going


23711
04:27:26,320 --> 04:27:31,600
to say if state is loading if we're not loading at


23712
04:27:31,600 --> 04:27:35,440
the moment meaning that maybe we were loading before


23713
04:27:35,440 --> 04:27:40,080
then our goal in here is that saying that if we are not loading and


23714
04:27:40,080 --> 04:27:45,192
excuse me close dialogue is not null and sorry


23715
04:27:45,192 --> 04:27:47,760
and so


23716
04:27:47,760 --> 04:27:51,912
in this case what this conveys to us saying it says that we're not loading


23717
04:27:51,912 --> 04:27:56,720
now but we were loading before and that the bot part is coming from


23718
04:27:56,720 --> 04:28:00,872
here what we need to do in here then is just to close that dialog so let's just


23719
04:28:00,872 --> 04:28:05,760
say close dialog we call that function you see and then we say


23720
04:28:05,760 --> 04:28:09,832
close dialogue handle is null


23721
04:28:09,832 --> 04:28:15,760
so we're just cleaning that up now okay and then we're seeing now


23722
04:28:15,760 --> 04:28:17,680
if what we have to have so what we've


23723
04:28:17,680 --> 04:28:20,720
handled right now is closing the dial up but we also have the hell of showing it


23724
04:28:20,720 --> 04:28:24,080
all so we're now going to say if the state is loading


23725
04:28:24,080 --> 04:28:29,440
and we don't have a closed dial sorry we don't have a loading dialog yet on the


23726
04:28:29,440 --> 04:28:34,080
screen then we have to show it so excuse me so let's say if state is


23727
04:28:34,080 --> 04:28:36,160
loading and


23728
04:28:36,160 --> 04:28:40,160
close dialog is null


23729
04:28:40,160 --> 04:28:44,872
then we have to show the dialogue so let's just say close dialog handle is


23730
04:28:44,872 --> 04:28:49,360
equal to show loading dialog we pass the context


23731
04:28:49,360 --> 04:28:53,040
let's do some formatting in here and let's just say loading


23732
04:28:53,040 --> 04:28:57,680
just like that okay and we leave the rest of this stuff in


23733
04:28:57,680 --> 04:29:01,680
the code exactly as it is


23734
04:29:02,080 --> 04:29:04,872
the next thing that we need to do now is to


23735
04:29:04,872 --> 04:29:08,480
as you can see in the caption on the screen we have to hook the register


23736
04:29:08,480 --> 04:29:12,800
button to our auth block when register button is tap send the auth event should


23737
04:29:12,800 --> 04:29:18,640
register to the block and what we're going to do then is go to


23738
04:29:18,640 --> 04:29:22,960
and find this button in here at the bottom of the loading via sorry login


23739
04:29:22,960 --> 04:29:26,552
view.dart file and upon pressing it let's just make


23740
04:29:26,552 --> 04:29:30,232
this and yeah i don't think it really has to be


23741
04:29:30,232 --> 04:29:35,360
any asynchronous code at all so let's just in here let's say that we


23742
04:29:35,360 --> 04:29:40,400
grab our off block so let's say context read


23743
04:29:40,400 --> 04:29:44,400
and we are looking for off blog in our context and then we're gonna send it an


23744
04:29:44,400 --> 04:29:48,232
event and we're gonna send const auth event


23745
04:29:48,232 --> 04:29:52,960
should should register just like that okay


23746
04:29:52,960 --> 04:29:57,912
so and i believe add event is not async or anything it's just a void so this


23747
04:29:57,912 --> 04:30:01,760
function doesn't have to be async so if you had it as async you can just safely


23748
04:30:01,760 --> 04:30:07,192
remove that i'm just gonna save this file as well


23749
04:30:07,600 --> 04:30:11,760
all right a lot of work we've we're kind of now


23750
04:30:11,760 --> 04:30:17,280
almost done with uh our login view so what i'm gonna do is i'm gonna close


23751
04:30:17,280 --> 04:30:21,040
all these files that are on the screen right now and we're gonna start moving


23752
04:30:21,040 --> 04:30:26,400
towards also blockifying our register view so


23753
04:30:26,400 --> 04:30:31,192
let's go as the caption says let's go to register view


23754
04:30:31,600 --> 04:30:34,320
and having a look here


23755
04:30:34,320 --> 04:30:38,480
at the moment we don't have and i can see in here in the previous


23756
04:30:38,480 --> 04:30:41,360
chapters we've been working with cleaning up the login view so


23757
04:30:41,360 --> 04:30:44,640
blockifying the login but we didn't do the same thing in register view and


23758
04:30:44,640 --> 04:30:48,640
that's fine we're going to take care of that and i can see that by just looking


23759
04:30:48,640 --> 04:30:52,800
at our try and catch statements in here you see these things shouldn't be


23760
04:30:52,800 --> 04:30:56,480
in the text button so as like but one thing at a time as the


23761
04:30:56,480 --> 04:30:59,512
caption of the yeah as i capture the bottom screen indicates we're going to


23762
04:30:59,512 --> 04:31:03,512
wrap the scaffold inside a block listener so it's going to be very


23763
04:31:03,512 --> 04:31:08,232
similar to how we did it for our login view


23764
04:31:08,232 --> 04:31:12,872
command dot and grab a wrap with block listener here and i'm


23765
04:31:12,872 --> 04:31:16,832
just going to say this is going to be the off


23766
04:31:16,832 --> 04:31:20,480
block and it's going to auto import it for me so very important if you're


23767
04:31:20,480 --> 04:31:23,512
getting errors for the auth block not being found in this context it's


23768
04:31:23,512 --> 04:31:27,120
probably because you haven't imported off block so and in here we're going to


23769
04:31:27,120 --> 04:31:30,552
say off state and that's going to also import it as


23770
04:31:30,552 --> 04:31:34,080
well and block listener is not available in this context either because we don't


23771
04:31:34,080 --> 04:31:37,912
have a flutter block so that's also going to be all too important so that's


23772
04:31:37,912 --> 04:31:42,480
three so that's the three um auto imports and


23773
04:31:42,480 --> 04:31:46,720
they're all available i believe so that's


23774
04:31:46,720 --> 04:31:51,760
auth block auth state and flutter block so


23775
04:31:51,760 --> 04:31:55,360
you could actually bring it next to each other if you want to so you know which


23776
04:31:55,360 --> 04:31:59,120
ones to import it's these three


23777
04:31:59,680 --> 04:32:04,480
wow okay um so what we need to do that that was the first thing that we had to


23778
04:32:04,480 --> 04:32:07,600
handle so


23779
04:32:07,600 --> 04:32:11,120
we also as i said now we have to go and start handling


23780
04:32:11,120 --> 04:32:15,280
exceptions so this is very similar to how we did and


23781
04:32:15,280 --> 04:32:19,912
did it in the login views so we kind of need to get rid of these


23782
04:32:19,912 --> 04:32:24,000
so now what we need to do inside this listener of our block listener we have


23783
04:32:24,000 --> 04:32:28,232
to handle the exceptions that we are at the moment handling here at the bottom


23784
04:32:28,232 --> 04:32:32,080
so this should be very similar process to how we were doing things in the login


23785
04:32:32,080 --> 04:32:36,640
view from if you remember so if we oops if i go to our login view you can see we


23786
04:32:36,640 --> 04:32:40,320
have this uh block listener and then we're doing this


23787
04:32:40,320 --> 04:32:43,912
kind of pattern in there so we're going to do something very similar to that


23788
04:32:43,912 --> 04:32:46,720
except we're going to do it in register view okay so


23789
04:32:46,720 --> 04:32:51,440
inside register view the state is i mean all the exceptions all the


23790
04:32:51,440 --> 04:32:57,360
problems that could arise are going to be inside the um registering state so


23791
04:32:57,360 --> 04:33:01,440
we're just gonna first make sure that we're in that state okay so let's say


23792
04:33:01,440 --> 04:33:06,160
state is off state registering


23793
04:33:06,232 --> 04:33:12,480
and we're gonna say if state exception is weak password auth exception


23794
04:33:12,480 --> 04:33:15,512
then let's make this listener asynchronous so


23795
04:33:15,512 --> 04:33:20,640
we can do an await on our show dialog so we we say await


23796
04:33:20,640 --> 04:33:25,280
and show error dialog and the text is just going to be weak


23797
04:33:25,280 --> 04:33:30,160
password okay and then we're going to do another else


23798
04:33:30,160 --> 04:33:35,512
an else statement with another if and we say if state exception


23799
04:33:35,512 --> 04:33:40,720
it's email already in use auth exception and then here we're gonna display


23800
04:33:40,720 --> 04:33:46,552
another dialog then that says for instance email is already in use okay


23801
04:33:46,552 --> 04:33:50,400
and um so let's then go to another else


23802
04:33:50,400 --> 04:33:54,080
statement so i'm going to just copy this i'm a little bit lazy and i'm just going


23803
04:33:54,080 --> 04:33:58,160
to say generic auth exception and then we're going to say


23804
04:33:58,160 --> 04:34:02,480
failed to register so these are the various exceptions that can occur


23805
04:34:02,480 --> 04:34:10,080
while you're registering for a user okay and you can see in here we have three


23806
04:34:10,080 --> 04:34:13,360
uh exceptions we're handling weak password email already in use and then


23807
04:34:13,360 --> 04:34:17,600
we also have invalid email auth exception so maybe we could actually


23808
04:34:17,600 --> 04:34:21,040
handle that as well so let's just go ahead and add another else statement in


23809
04:34:21,040 --> 04:34:26,000
here and just say invalid uh invalid email auth exception so we


23810
04:34:26,000 --> 04:34:30,000
just say invalid email okay


23811
04:34:30,000 --> 04:34:35,320
so now we've handled those four exceptions all right


23812
04:34:35,360 --> 04:34:40,400
so what we need now is to make sure as you


23813
04:34:40,400 --> 04:34:43,440
can see in the caption that in register view the register button to send the


23814
04:34:43,440 --> 04:34:47,760
auth event called auth event register so let's find that register button that


23815
04:34:47,760 --> 04:34:51,360
we're talking about here and that is this text button you can see


23816
04:34:51,360 --> 04:34:54,800
it says register okay


23817
04:34:54,872 --> 04:34:58,800
so what we need to do is perhaps to clean this code up at the moment there's


23818
04:34:58,800 --> 04:35:03,192
just so much information in here that we don't really have to do so go to your


23819
04:35:03,192 --> 04:35:07,192
register button please in the register view and just pretty much just nuke this


23820
04:35:07,192 --> 04:35:12,160
entire try and all these cad statements the way they are


23821
04:35:12,160 --> 04:35:17,040
so now we have a clean slate so now we have just email and password and let's


23822
04:35:17,040 --> 04:35:21,360
grab the auth block in here and ask the auth block to do the registration okay


23823
04:35:21,360 --> 04:35:24,872
so i'm just going to say context


23824
04:35:25,360 --> 04:35:30,552
and let's just say we grab the off block in here


23825
04:35:30,552 --> 04:35:34,640
okay as a function


23826
04:35:34,640 --> 04:35:40,000
context if i can spell and then i'm just going to say add in


23827
04:35:40,000 --> 04:35:44,232
auth events of register


23828
04:35:44,232 --> 04:35:48,872
here with email and password just like that


23829
04:35:48,872 --> 04:35:51,912
okay so your code should kind of look like


23830
04:35:51,912 --> 04:35:55,832
this and put a comma in here to make it a little bit cleaner so just like that


23831
04:35:55,832 --> 04:35:58,912
all right


23832
04:35:59,512 --> 04:36:05,120
okay that was for register now we have also a


23833
04:36:05,120 --> 04:36:09,600
login button in here which right now inside our register view do you remember


23834
04:36:09,600 --> 04:36:13,280
if you end up in the registry view and incorrectly so you just tap on some


23835
04:36:13,280 --> 04:36:16,080
button and enter them in the registry and be like oh i'm in the wrong place i


23836
04:36:16,080 --> 04:36:20,232
want to log in actually instance so we have this already registered login here


23837
04:36:20,232 --> 04:36:24,232
button and at the moment that's doing custom navigator or push name and remove


23838
04:36:24,232 --> 04:36:28,800
until and it shouldn't be doing that so let's go ahead and fix that up so let's


23839
04:36:28,800 --> 04:36:33,832
go in here and remove that code and just say context read auth block


23840
04:36:33,832 --> 04:36:39,192
and we're going to basically add an event in here of con of type const auth


23841
04:36:39,192 --> 04:36:44,232
event log out just like that okay so that then


23842
04:36:44,232 --> 04:36:49,680
is going to send the user to the login screen all right


23843
04:36:50,960 --> 04:36:54,720
all right let's move now to the next point as you can see it says send


23844
04:36:54,720 --> 04:36:57,680
verification button and verify email view dart


23845
04:36:57,680 --> 04:37:01,600
it should send an auth event and when you press it it should send the auth


23846
04:37:01,600 --> 04:37:06,872
event send the email verification to the blog so i'm going to go into my notes as


23847
04:37:06,872 --> 04:37:11,680
well as well and just find that button and now let's


23848
04:37:11,680 --> 04:37:16,480
go in our code in here let's go to verify email view


23849
04:37:16,480 --> 04:37:20,872
and have a look at that button that we're talking about which is right here


23850
04:37:20,872 --> 04:37:23,760
and at the moment as you can see it's doing all service firebase and email


23851
04:37:23,760 --> 04:37:26,160
verification but we shouldn't be doing that


23852
04:37:26,160 --> 04:37:30,080
um we should ask our block to do that so let's just go ahead


23853
04:37:30,080 --> 04:37:33,120
and first of all remove that code inside the


23854
04:37:33,120 --> 04:37:37,280
buttons unpressed and then this button doesn't have to be async anymore


23855
04:37:37,280 --> 04:37:41,912
and what we're going to say is just going to say context and read


23856
04:37:41,912 --> 04:37:45,280
and but we don't have read remember because we don't have we haven't


23857
04:37:45,280 --> 04:37:49,600
imported auth we haven't imported block or flutter


23858
04:37:49,600 --> 04:37:52,960
block into this file yet but we're going to fix that soon so first of all just


23859
04:37:52,960 --> 04:37:57,680
say read the off block and that's going to also import off block for us so


23860
04:37:57,680 --> 04:38:02,000
that's the first part and now you have this error let's get visual studio code


23861
04:38:02,000 --> 04:38:05,832
to import the same provider but i actually want


23862
04:38:05,832 --> 04:38:10,232
flutter block so let's go ahead and import that ourselves


23863
04:38:10,232 --> 04:38:15,760
so let's say package flutter block and flutter block dart


23864
04:38:15,760 --> 04:38:20,400
now it's fine alright so let's in here and then add an event we say const off


23865
04:38:20,400 --> 04:38:25,680
event send email verification just like that


23866
04:38:25,680 --> 04:38:30,640
all right so it's done now


23867
04:38:31,280 --> 04:38:36,552
so the next thing we have to do is you can see inside this restart button at


23868
04:38:36,552 --> 04:38:40,080
the bottom of the screen at the moment it's doing quite a lot of work


23869
04:38:40,080 --> 04:38:44,552
it is basically first logging out from our auth service and then it's doing


23870
04:38:44,552 --> 04:38:48,320
navigation so this button is like all over the place it's taking care of


23871
04:38:48,320 --> 04:38:53,760
authentication it's taking care of i mean i'm actually very i'm laughing here


23872
04:38:53,760 --> 04:38:56,960
because i'm kind of laughing at the progress that we've made so far and that


23873
04:38:56,960 --> 04:39:00,232
we've gone from very very raw programming to


23874
04:39:00,232 --> 04:39:05,440
now very elegant handling of exceptions alien handling of


23875
04:39:05,440 --> 04:39:10,160
routing etc so it is actually really fun to be here to be honest with you


23876
04:39:10,160 --> 04:39:14,400
so in here let's remove that code and kind of grab this thing that we have up


23877
04:39:14,400 --> 04:39:17,760
here in our send email verification button and bring it down here instead of


23878
04:39:17,760 --> 04:39:21,912
sending the off event send email verification we're gonna send alt event


23879
04:39:21,912 --> 04:39:25,360
log out like this


23880
04:39:25,360 --> 04:39:29,832
excuse me all right so that part is done


23881
04:39:30,400 --> 04:39:34,080
so what we need now let's go in now let's


23882
04:39:34,080 --> 04:39:38,872
close this file and go to our off block so we have quite a bit of work now to do


23883
04:39:38,872 --> 04:39:42,552
in our off block as you can see it's just all over the place so


23884
04:39:42,552 --> 04:39:45,760
i want to do the same thing in my notes as well so off block


23885
04:39:45,760 --> 04:39:49,120
the first thing that we need to do is make sure that we are not using this off


23886
04:39:49,120 --> 04:39:53,360
state loading because we don't have that anymore what we have is off states on in


23887
04:39:53,360 --> 04:39:58,552
each light so please take care of that as a first name


23888
04:39:59,912 --> 04:40:04,720
so we also have now an auth event send


23889
04:40:04,720 --> 04:40:09,760
email verification and we haven't handled that yet so let's go on top of


23890
04:40:09,760 --> 04:40:14,080
this initialize i'm just gonna send say send email verification okay and let's


23891
04:40:14,080 --> 04:40:18,640
create a new on to handle auth events and email verification because we


23892
04:40:18,640 --> 04:40:23,040
haven't handled that so we have event animation here and


23893
04:40:23,040 --> 04:40:27,680
let's just go and say this is an async function and then open it and then a


23894
04:40:27,680 --> 04:40:32,080
semicolon at the end to get the format uh formatting working


23895
04:40:32,080 --> 04:40:35,760
the only thing we have to do in the auth event send email verification to


23896
04:40:35,760 --> 04:40:40,480
actually call and tell the provider that hey um we're gonna basically send an


23897
04:40:40,480 --> 04:40:45,680
email verification all right so let's just let's just say a wait provider


23898
04:40:45,680 --> 04:40:48,640
and email verification and then what we're gonna do we're gonna emit the


23899
04:40:48,640 --> 04:40:55,040
exact same um state so by coming into by sending this event


23900
04:40:55,040 --> 04:40:58,720
we are just going to do some work and emit the exact same state that you're in


23901
04:40:58,720 --> 04:41:02,960
so we're not actually changing the state of the application because remember when


23902
04:41:02,960 --> 04:41:07,680
you're in the verify email view and then you press the button to actually send a


23903
04:41:07,680 --> 04:41:12,232
new verification email what happens on the screen nothing we're not like doing


23904
04:41:12,232 --> 04:41:15,760
anything it's just we're sending the email verification that's all so we're


23905
04:41:15,760 --> 04:41:19,192
not sending you to a new screen or anything like that so that's why we're


23906
04:41:19,192 --> 04:41:23,280
emitting the exact same state as we had before


23907
04:41:24,720 --> 04:41:29,760
all right now we have to actually handle a


23908
04:41:29,760 --> 04:41:35,040
our auth event register so let's go ahead and do that so that is


23909
04:41:35,040 --> 04:41:40,872
completely new so let's just say on off event register


23910
04:41:40,872 --> 04:41:45,440
and we say we have the events and the emails and an asynchronous function just


23911
04:41:45,440 --> 04:41:49,080
like that all right


23912
04:41:50,160 --> 04:41:52,872
so when we have the auth event register if


23913
04:41:52,872 --> 04:41:57,832
you remember from before this authentic include the email and password in itself


23914
04:41:57,832 --> 04:42:01,192
excuse me so we can grab those and that


23915
04:42:01,192 --> 04:42:06,080
information right now just say email is advanced.email and let's just say final


23916
04:42:06,080 --> 04:42:11,600
password is events.password oops


23917
04:42:11,600 --> 04:42:16,320
all right so then we're going to put this into a try and catch block so we're


23918
04:42:16,320 --> 04:42:21,040
going to say try on exception catch e


23919
04:42:21,040 --> 04:42:25,040
when an exception happens we're just going to emit our


23920
04:42:25,040 --> 04:42:31,512
off state registering with that e um


23921
04:42:31,512 --> 04:42:34,552
so we talked about this before but just to


23922
04:42:34,552 --> 04:42:39,192
refresh when you're during the process of register we actually can emit a new


23923
04:42:39,192 --> 04:42:44,080
state in here just called registering and then it can it can contain an


23924
04:42:44,080 --> 04:42:47,512
exception all right so that's what we're emitting in here saying that you're in


23925
04:42:47,512 --> 04:42:50,960
the process of registering but something bad happened which is an exception all


23926
04:42:50,960 --> 04:42:53,120
right


23927
04:42:53,360 --> 04:42:58,080
so in here then let's just say await provider and we're going to create a new


23928
04:42:58,080 --> 04:43:03,280
user with the email and password they just fit right in so that's really great


23929
04:43:03,280 --> 04:43:07,512
and then if you remember from the registration process that we had before


23930
04:43:07,512 --> 04:43:11,600
so um in our register view during registration


23931
04:43:11,600 --> 04:43:14,872
here upon doing a registration we didn't just


23932
04:43:14,872 --> 04:43:18,872
register the user with the provider but we also send an email verification just


23933
04:43:18,872 --> 04:43:22,400
to make sure that the user doesn't have to go and send an email verification and


23934
04:43:22,400 --> 04:43:26,720
manually so we're going to do the same thing in our off block okay


23935
04:43:26,720 --> 04:43:32,080
so let's also wait on the provider and we say send email verification just


23936
04:43:32,080 --> 04:43:37,120
like that all right um and then after doing that since you


23937
04:43:37,120 --> 04:43:41,280
registered a new user well what is the states if you remember from our


23938
04:43:41,280 --> 04:43:43,912
off states off state


23939
04:43:43,912 --> 04:43:48,720
we have this needs verification we know that when we register and use a new user


23940
04:43:48,720 --> 04:43:52,872
that user is always going to need verification right so let's go in here


23941
04:43:52,872 --> 04:43:58,320
and just emits that state so uh auth state needs verification just


23942
04:43:58,320 --> 04:44:01,280
like that and that's an empty state so it doesn't have any parameters and such


23943
04:44:01,280 --> 04:44:03,600
all right


23944
04:44:05,512 --> 04:44:10,080
all right um then we have to handle our auth event


23945
04:44:10,080 --> 04:44:15,360
initialize so let's have a look in here and see how the code look looks like so


23946
04:44:15,360 --> 04:44:20,160
in here what we need to do at the moment we have logged out but you can see we're


23947
04:44:20,160 --> 04:44:24,000
not providing that is a loading parameter and we're not providing


23948
04:44:24,000 --> 04:44:28,080
exceptions so i'm just actually going to click clean this and write it by hand


23949
04:44:28,080 --> 04:44:32,160
manually so in the emit let's just emit a const


23950
04:44:32,160 --> 04:44:35,120
off state


23951
04:44:35,120 --> 04:44:38,232
uh logged out


23952
04:44:38,232 --> 04:44:40,720
all right so


23953
04:44:40,720 --> 04:44:43,912
when you initialize the application from the beginning when the application


23954
04:44:43,912 --> 04:44:48,800
actually runs we're just gonna say by default you're logged out all right


23955
04:44:48,800 --> 04:44:52,640
so let's go ahead and do that if the user is null of course


23956
04:44:52,640 --> 04:44:56,400
so in the exception we don't have any exceptions and we're not loading


23957
04:44:56,400 --> 04:45:00,000
anything as such so that's like the default state so that's it comma in


23958
04:45:00,000 --> 04:45:05,440
there and a comma here just to get the formatting working


23959
04:45:05,440 --> 04:45:09,440
all right so that seems to be fine but


23960
04:45:09,440 --> 04:45:13,600
we also have the initialize in here sounds good logged out


23961
04:45:13,600 --> 04:45:20,872
it's email verified and that so yeah that looks that looks fine to me


23962
04:45:21,512 --> 04:45:26,000
okay now let's have a look at logging in as you can see we have to take care of


23963
04:45:26,000 --> 04:45:30,960
our login and logic a little bit and make sure that we're loading so when you


23964
04:45:30,960 --> 04:45:34,800
say i want to log in we're going to say okay you want to log in that means


23965
04:45:34,800 --> 04:45:39,360
you're logged out but you're logged out and there's a loading screen okay that's


23966
04:45:39,360 --> 04:45:44,160
why we created that loading dialog which we're going to put into you so


23967
04:45:44,160 --> 04:45:49,192
so upon the user asking to log in let's just say okay we're going to emit our


23968
04:45:49,192 --> 04:45:52,400
const off state


23969
04:45:52,400 --> 04:45:55,760
log out and there is no exception and the


23970
04:45:55,760 --> 04:46:01,600
loading flag is actually true so like that and right there and just


23971
04:46:01,600 --> 04:46:04,960
like okay so


23972
04:46:04,960 --> 04:46:09,760
that's the loading part and let's have a look at how we're doing


23973
04:46:09,760 --> 04:46:15,440
things in here so we have our login um


23974
04:46:15,440 --> 04:46:19,120
and we also as you can see in here so that that was that part we've taken care


23975
04:46:19,120 --> 04:46:23,192
of and now what we have to do is to disable disable the loading screen if


23976
04:46:23,192 --> 04:46:28,400
email is not verified so um at the moment we have this user in


23977
04:46:28,400 --> 04:46:32,800
here you can see final user okay and then we're just saying


23978
04:46:32,800 --> 04:46:36,960
state now is all of a sudden logged in but that is not complete


23979
04:46:36,960 --> 04:46:39,912
because we're not checking whether the users


23980
04:46:39,912 --> 04:46:44,000
verified their email address or not so let's go ahead


23981
04:46:44,000 --> 04:46:48,080
and say as the caption indicates if email not verified then disable the


23982
04:46:48,080 --> 04:46:52,800
loading screen by sending a new logged out okay before sending the needs


23983
04:46:52,800 --> 04:46:59,192
verification so let's take care of that so we say if um user is email verified


23984
04:46:59,192 --> 04:47:02,480
not and we emit


23985
04:47:02,480 --> 04:47:08,960
a constant of auth state logged out like that


23986
04:47:08,960 --> 04:47:14,000
and we say well no exception and we're not loading all right


23987
04:47:14,000 --> 04:47:20,720
so that disables essentially the loading screen okay by saying it's loading false


23988
04:47:20,720 --> 04:47:26,320
remember here we sent is loading true now we're sending is loading false


23989
04:47:26,320 --> 04:47:30,000
and then right after when the email is not verified we


23990
04:47:30,000 --> 04:47:34,640
actually say then emit a const of off


23991
04:47:34,640 --> 04:47:39,360
state needs verification just like that all right


23992
04:47:39,360 --> 04:47:43,280
otherwise if the user's email is verified then we're gonna say we're


23993
04:47:43,280 --> 04:47:47,600
gonna first disable let me bring up the correct caption so


23994
04:47:47,600 --> 04:47:51,912
we have to do the exact same thing in here we're gonna disable basically the


23995
04:47:51,912 --> 04:47:55,040
loading screen like that


23996
04:47:55,040 --> 04:47:59,280
and then we're going to send this login


23997
04:47:59,280 --> 04:48:03,912
states right here okay


23998
04:48:05,360 --> 04:48:10,800
all right and also in our exception handling we we don't use this uh um yet


23999
04:48:10,800 --> 04:48:15,120
we're gonna use off state logged out but we're gonna clean this up so inside emit


24000
04:48:15,120 --> 04:48:21,040
we're gonna say auth state logged out and then there is an exception and we


24001
04:48:21,040 --> 04:48:24,480
are not loading okay so


24002
04:48:24,480 --> 04:48:28,000
please place that inside the exception handling of your


24003
04:48:28,000 --> 04:48:32,960
um auth event login


24004
04:48:33,512 --> 04:48:36,800
okay a lot of code a lot of code


24005
04:48:36,800 --> 04:48:39,120
um now as you can see the caption that says


24006
04:48:39,120 --> 04:48:44,000
fix fix up auth state logged out we have to emit the auth state logged


24007
04:48:44,000 --> 04:48:48,800
out and fix up exception handler as well so


24008
04:48:48,800 --> 04:48:52,400
let's find out our auth event logged out and we have a lot of errors in here


24009
04:48:52,400 --> 04:48:57,120
right now as you can see so it would actually be better


24010
04:48:57,120 --> 04:49:01,040
if we kind of like nuked this code in here and wrote it


24011
04:49:01,040 --> 04:49:03,280
from scratch so i'm just going to say try


24012
04:49:03,280 --> 04:49:07,360
and then we'll say on exception catch e


24013
04:49:07,360 --> 04:49:10,800
so that's it and then when there's an exception


24014
04:49:10,800 --> 04:49:14,480
during logged out logging out what we're going to just say we're going to say


24015
04:49:14,480 --> 04:49:20,232
well you are logged out but an exception happened all right so let's just say um


24016
04:49:20,232 --> 04:49:23,360
we immediate hans


24017
04:49:23,360 --> 04:49:28,000
no actually off state logged out


24018
04:49:28,000 --> 04:49:32,080
there is an exception and we're not loading okay so that's what you need to


24019
04:49:32,080 --> 04:49:37,600
also place inside your code so that's for the emit


24020
04:49:37,912 --> 04:49:40,960
now for trying what do we actually have to do we have


24021
04:49:40,960 --> 04:49:44,400
to tell our provider to log out oops


24022
04:49:44,400 --> 04:49:49,040
not login log out all right


24023
04:49:49,040 --> 04:49:52,720
and then we also have to emit the new states that we're going to say you're


24024
04:49:52,720 --> 04:49:56,232
logged out and then there is no exception so i'm just going to grab this


24025
04:49:56,232 --> 04:50:00,720
code from there and place it in here and say there is no exception like that


24026
04:50:00,720 --> 04:50:03,832
okay and it says well this can now be a cons


24027
04:50:03,832 --> 04:50:08,720
so i'm gonna make it a const just like that


24028
04:50:09,360 --> 04:50:12,320
so the next thing that we have to do is to


24029
04:50:12,320 --> 04:50:16,320
clean up our routing because you see the more and more we're blockifying the


24030
04:50:16,320 --> 04:50:20,232
entire process inside our application the less we need different different


24031
04:50:20,232 --> 04:50:25,600
screens to actually do routing manually because routing is going to be handled


24032
04:50:25,600 --> 04:50:29,912
by our block listeners and things like that okay


24033
04:50:29,912 --> 04:50:35,040
so let's go ahead and as the caption indicates in our routes dart file we're


24034
04:50:35,040 --> 04:50:39,912
gonna remove all routes except for create or update node route so let's


24035
04:50:39,912 --> 04:50:42,720
open routes actually before we do that i'm going to


24036
04:50:42,720 --> 04:50:46,872
close all the files in here just to make sure everything's saved then go to route


24037
04:50:46,872 --> 04:50:51,912
start and remove everything except for


24038
04:50:51,912 --> 04:50:55,552
that last route


24039
04:50:56,552 --> 04:51:00,720
all right excuse me let's now go now that we've


24040
04:51:00,720 --> 04:51:04,160
done that we have to go to our main dart file


24041
04:51:04,160 --> 04:51:08,552
excuse me again and we're gonna clean up our routing in


24042
04:51:08,552 --> 04:51:12,080
here as you can see we have those four routes now that we've removed let's just


24043
04:51:12,080 --> 04:51:18,232
remove them from main dark file as well and save your file please


24044
04:51:18,800 --> 04:51:22,480
so what we need also is as the caption captioning case we should show the


24045
04:51:22,480 --> 04:51:26,720
register view if auth state is registering okay


24046
04:51:26,720 --> 04:51:31,760
so in main dart show register view if off state is registering so i'm gonna


24047
04:51:31,760 --> 04:51:36,232
bring up my notes as well in here so let's go ahead and see what we have


24048
04:51:36,232 --> 04:51:39,912
we have auth state logged out what we have what we also have to have in here


24049
04:51:39,912 --> 04:51:45,600
we have to create another else statement and say if state is off


24050
04:51:45,680 --> 04:51:52,232
of state registering and open your curly brackets um


24051
04:51:52,232 --> 04:51:57,680
on curly bracket missing and in here we just say return cons register view okay


24052
04:51:57,680 --> 04:52:00,320
just like that


24053
04:52:01,192 --> 04:52:05,600
all right that was a lot of work that we've done and now if you then look at


24054
04:52:05,600 --> 04:52:10,320
your files in here you shouldn't you basically shouldn't have any errors okay


24055
04:52:10,320 --> 04:52:14,720
so before testing this all because there were just so much stuff that we've done


24056
04:52:14,720 --> 04:52:19,280
and we've also changed our main function it just makes sense to do a hot restart


24057
04:52:19,280 --> 04:52:23,280
okay so i did a hot restart let me just


24058
04:52:23,280 --> 04:52:28,080
resize my visual studio code so we see our trusty


24059
04:52:28,080 --> 04:52:31,280
scrcpy in here so


24060
04:52:31,280 --> 04:52:37,440
now this is the login view uh if you look at our login view dart file uh if


24061
04:52:37,440 --> 04:52:41,832
you have a look at what we did when the login button is tapped we're literally


24062
04:52:41,832 --> 04:52:44,000
telling our


24063
04:52:44,000 --> 04:52:49,280
auth block to do this thing in here log in all right so we're sending a new


24064
04:52:49,280 --> 04:52:55,680
event to it so if something happens to that and things don't work as well then


24065
04:52:55,680 --> 04:52:59,512
it says user not found wrong credentials authentication error then we should


24066
04:52:59,512 --> 04:53:02,000
probably actually get an error displayed on the


24067
04:53:02,000 --> 04:53:06,232
screen so let's test this and you can see it says authentication error so


24068
04:53:06,232 --> 04:53:11,360
that's in here okay so that's that seems to be working very well


24069
04:53:11,360 --> 04:53:15,440
and it would be really good if you could actually test this um


24070
04:53:15,440 --> 04:53:20,080
our loading dialogue and see if it works so i'm gonna write


24071
04:53:20,080 --> 04:53:25,440
foobar bads in here and say login we saw that loading so that was our


24072
04:53:25,440 --> 04:53:30,400
loading dialog that was this logic right here so it's it's really cool actually


24073
04:53:30,400 --> 04:53:35,600
how it's working let's go in here and say log out and log out and then we come


24074
04:53:35,600 --> 04:53:40,160
to the login screen so this is all working so well


24075
04:53:40,160 --> 04:53:43,360
and you could and if you want to see your loading screen a little bit more


24076
04:53:43,360 --> 04:53:47,280
and like if you're in the process of debugging it you could always go to your


24077
04:53:47,280 --> 04:53:50,960
um office block in here


24078
04:53:50,960 --> 04:53:56,800
and inside when you're asked to log in you could actually a wait so you could


24079
04:53:56,800 --> 04:54:01,120
just do like this a weight future delayed and you could


24080
04:54:01,120 --> 04:54:06,640
say duration and you could say seconds three something like this okay


24081
04:54:06,640 --> 04:54:10,552
so this is gonna await like it's just gonna wait three seconds before it


24082
04:54:10,552 --> 04:54:15,192
continues so let me just save that and enter some information in here say


24083
04:54:15,192 --> 04:54:19,280
google okay it's our gmail and then say


24084
04:54:19,280 --> 04:54:24,160
login oops that didn't work so well


24085
04:54:24,160 --> 04:54:27,360
i don't know why that didn't work so well even though this is an async


24086
04:54:27,360 --> 04:54:30,720
function could this need hot restarting maybe


24087
04:54:30,720 --> 04:54:33,760
maybe let me do


24088
04:54:33,760 --> 04:54:37,512
log out in here and enter foo barba sorry


24089
04:54:37,512 --> 04:54:44,160
avant np gmail.com foo barbas and then login there we go now it's waiting more


24090
04:54:44,160 --> 04:54:48,480
than three seconds kind of then it goes to the application so i would say that


24091
04:54:48,480 --> 04:54:53,280
is working very well so we can now remove this weight in here okay


24092
04:54:53,280 --> 04:54:57,760
and maybe do a hot restart as well


24093
04:54:57,832 --> 04:55:02,000
wow that that was a lot of work we did but


24094
04:55:02,000 --> 04:55:05,512
that's what you do with software development sometimes you break things


24095
04:55:05,512 --> 04:55:09,040
to make them better you have to break sometimes the code that you have in


24096
04:55:09,040 --> 04:55:13,192
order to build up something better we didn't really break things but we


24097
04:55:13,192 --> 04:55:17,440
what we kind of did we basically removed a lot of old old


24098
04:55:17,440 --> 04:55:22,800
code in order to make it and work better with block and


24099
04:55:22,800 --> 04:55:27,120
i'm in this course my goal is to make you a software developer using flutter


24100
04:55:27,120 --> 04:55:30,320
i'm not just going to show you the right thing to do from the beginning we're


24101
04:55:30,320 --> 04:55:34,552
going to gradually make things better a software developer also is not going to


24102
04:55:34,552 --> 04:55:37,680
be depending on their experience they're not going to do the exact right thing


24103
04:55:37,680 --> 04:55:42,400
from point one or point zero they're they're gonna make experiments


24104
04:55:42,400 --> 04:55:45,512
they're gonna google a lot of things look at stack overflow find the right


24105
04:55:45,512 --> 04:55:49,040
way to do things get inspiration maybe from like another product that's kind of


24106
04:55:49,040 --> 04:55:53,280
doing something similar and develop things one step at a time make it better


24107
04:55:53,280 --> 04:55:57,440
so that's the reason we're in chapter 40 something right now and


24108
04:55:57,440 --> 04:56:00,400
we've just gotten to this point otherwise we would have done this from


24109
04:56:00,400 --> 04:56:04,800
chapter zero for chapter one so thank you for sticking uh


24110
04:56:04,800 --> 04:56:08,000
through us sticking around throughout this chapter and coming to this point


24111
04:56:08,000 --> 04:56:11,360
that we are right now so as this tradition we're gonna now commit our


24112
04:56:11,360 --> 04:56:15,912
code and tag it so let me do some reshuffling of the screen go to terminal


24113
04:56:15,912 --> 04:56:19,600
in here minimize scr cpy


24114
04:56:19,600 --> 04:56:24,960
make the screen bigger and like that and i'm gonna shuffle the


24115
04:56:24,960 --> 04:56:30,080
screen as well so you see things better so let's go ahead and have a look at our


24116
04:56:30,080 --> 04:56:34,400
git status ginormous amount of things we've done everything is modified and


24117
04:56:34,400 --> 04:56:38,160
there's a new file added so let's say git add all


24118
04:56:38,160 --> 04:56:42,480
and let's get commit as step 25


24119
04:56:42,480 --> 04:56:46,320
because if you have a look at our logs the previous chapter was step 24 so now


24120
04:56:46,320 --> 04:56:50,160
we're at step 25. so let's then push our changes now that


24121
04:56:50,160 --> 04:56:54,640
we've committed and then we're going to say git tag


24122
04:56:54,640 --> 04:56:58,960
and we're going to say step 25 as well so and then we're going to


24123
04:56:58,960 --> 04:57:02,960
push our tags as well if you look at our tags now we have step


24124
04:57:02,960 --> 04:57:07,120
24 and then somewhere in here we should have step 25 as well as you can see here


24125
04:57:07,120 --> 04:57:10,400
great so congratulations for getting through this


24126
04:57:10,400 --> 04:57:14,160
chapter was one of the jumpiest chapters i would say in this entire course and


24127
04:57:14,160 --> 04:57:17,760
that we moved so much from file to file so if you made it through then


24128
04:57:17,760 --> 04:57:21,040
congratulations um


24129
04:57:21,040 --> 04:57:25,760
so what we need to work on in the next chapter is our broken loading screen i


24130
04:57:25,760 --> 04:57:30,320
know it's a little bit of an anti-climax in that we just work on our loading


24131
04:57:30,320 --> 04:57:34,320
screen so we should be kind of proud however there is a problem with this


24132
04:57:34,320 --> 04:57:36,960
loading screen and that is because we're using


24133
04:57:36,960 --> 04:57:43,280
navigator of context and then we're popping remember popping inside


24134
04:57:43,280 --> 04:57:48,640
executing pop invoking the pop function on your navigator and actually i can


24135
04:57:48,640 --> 04:57:52,480
show you the code without going into too much details so


24136
04:57:52,480 --> 04:57:56,480
let's have a look at our uh loading dialogue


24137
04:57:56,480 --> 04:58:00,000
see at the bottom of this loading dialogue we're doing navigator off pop


24138
04:58:00,000 --> 04:58:05,912
this doesn't necessarily pop this dialog it pops the current view on the


24139
04:58:05,912 --> 04:58:10,640
navigator so even if our dialog is not displayed on the screen saying navigator


24140
04:58:10,640 --> 04:58:16,232
of is gonna confuse the navigation stack in flutter so we're gonna have a look at


24141
04:58:16,232 --> 04:58:20,320
that and fixing that actually in the next chapter so grab some tea coffee


24142
04:58:20,320 --> 04:58:23,832
chocolate whatever you want to and i'll see you in the next chapter hello and


24143
04:58:23,832 --> 04:58:27,120
welcome to chapter 43 of this flutter course


24144
04:58:27,120 --> 04:58:30,960
we are now very very close to actually being able to release our application to


24145
04:58:30,960 --> 04:58:35,360
the app store there are just a few things left sorry app store and play


24146
04:58:35,360 --> 04:58:42,160
store and we have a few things left um to do before we can actually do that and


24147
04:58:42,160 --> 04:58:45,512
um one of the most important things we need to take care of are loading screens


24148
04:58:45,512 --> 04:58:49,120
in our application and if you remember from what we've done so


24149
04:58:49,120 --> 04:58:53,040
far we've been working with block we've been working with our auth service and


24150
04:58:53,040 --> 04:58:58,640
we've created an auth block and we also have loading state in some


24151
04:58:58,640 --> 04:59:02,872
of our off states actually i can't call it loading state


24152
04:59:02,872 --> 04:59:08,400
we have loading property on some of our off states so when our off block returns


24153
04:59:08,400 --> 04:59:12,960
a state depending on which state it is then we can actually see whether it has


24154
04:59:12,960 --> 04:59:17,912
it is loading property or not and we've been working with loading


24155
04:59:17,912 --> 04:59:21,832
dialogue so far and there are just simple dialogues that we're displaying


24156
04:59:21,832 --> 04:59:26,160
on the screen with a column with a circular progress indicator and we also


24157
04:59:26,160 --> 04:59:30,080
have a size box just to separate the loading


24158
04:59:30,080 --> 04:59:34,080
indicator from a text that we're displaying on the screen


24159
04:59:34,080 --> 04:59:37,832
this has been working okay so far but as i mentioned in at the end of the


24160
04:59:37,832 --> 04:59:41,120
previous chapter we have a bit of a problem in that


24161
04:59:41,120 --> 04:59:44,480
if you remember from the code actually i can bring it on the screen so you can


24162
04:59:44,480 --> 04:59:47,680
have a look here let's go to our loading dialog


24163
04:59:47,680 --> 04:59:52,960
loading dialog at the end of this if you remember we return a function


24164
04:59:52,960 --> 04:59:59,040
and which in turn upon calling which we pop our navigation navigator


24165
04:59:59,040 --> 05:00:02,720
however as you can see there is no transaction in here meaning that the


24166
05:00:02,720 --> 05:00:07,512
navigator can't necessarily know that what it is popping at the moment is in


24167
05:00:07,512 --> 05:00:11,600
fact our loading dialogue and this problem is actually quite big


24168
05:00:11,600 --> 05:00:15,440
in that you could for instance have a loading dialog on the screen and then


24169
05:00:15,440 --> 05:00:18,480
while that loading dialog is being displayed you could display another


24170
05:00:18,480 --> 05:00:22,872
screen and push that screen in your navigation stack and then if you then


24171
05:00:22,872 --> 05:00:26,640
try to dismiss your loading dialogue what you will dismiss in fact is the


24172
05:00:26,640 --> 05:00:29,600
second screen that you displayed in the stack so


24173
05:00:29,600 --> 05:00:34,080
this process is not transaction based in that you're playing literally with the


24174
05:00:34,080 --> 05:00:39,600
navigate in navigation stack in flutter and that's not such a wise thing to do


24175
05:00:39,600 --> 05:00:43,912
so what we want to do in this chapter is to clean up our loading screens in the


24176
05:00:43,912 --> 05:00:49,192
application and make sure that they are using overlays instead of


24177
05:00:49,192 --> 05:00:54,480
normal dialogs so now i named overlays and it is a good


24178
05:00:54,480 --> 05:00:58,872
time then to explain what overlays are and why they're good especially for


24179
05:00:58,872 --> 05:01:04,160
loading screens um as you know normal screens that you display on on


24180
05:01:04,160 --> 05:01:06,720
the mobile telephone for instance or on the


24181
05:01:06,720 --> 05:01:10,640
web or on a desktop with flutter there it


24182
05:01:10,640 --> 05:01:14,480
basically placed inside a navigation stack so the navigation stack is there


24183
05:01:14,480 --> 05:01:18,160
to keep track of which screen is displayed and then which screens you can


24184
05:01:18,160 --> 05:01:22,960
remove from that stack and so they have a hierarchy however if


24185
05:01:22,960 --> 05:01:27,832
you want to display something on top of the navigation stack independent of the


24186
05:01:27,832 --> 05:01:31,512
navigation stack and the various changes that could happen to the navigation


24187
05:01:31,512 --> 05:01:36,320
stack you could use and you probably actually should use overlays either


24188
05:01:36,320 --> 05:01:39,912
directly or using other material components that are provided by flutter


24189
05:01:39,912 --> 05:01:44,480
that in turn use overlays so overlays as their name indicates they


24190
05:01:44,480 --> 05:01:48,232
have they have the ability to place themselves over other content that is


24191
05:01:48,232 --> 05:01:52,232
currently displayed on the screen so there and that makes them the perfect


24192
05:01:52,232 --> 05:01:55,512
candidate for loading screens for instance because loading screens are


24193
05:01:55,512 --> 05:01:59,600
usually displayed on top of the current content that the user is looking at so


24194
05:01:59,600 --> 05:02:04,400
in this chapter we're going to focus on using overlays to improve the state of


24195
05:02:04,400 --> 05:02:08,552
our loading screens in the application so


24196
05:02:08,552 --> 05:02:10,872
um now before we actually get started


24197
05:02:10,872 --> 05:02:15,680
writing the uh our loading screen um what we need to talk about is a


24198
05:02:15,680 --> 05:02:20,160
controller uh as its name indicates a controller is an object usually that you


24199
05:02:20,160 --> 05:02:23,760
can pass from a


24200
05:02:23,760 --> 05:02:27,440
a function to another and using this controller usually an


24201
05:02:27,440 --> 05:02:31,280
object that receives that controller is able to control either the contents or


24202
05:02:31,280 --> 05:02:36,160
the behavior of the object that is being displayed on the screen for


24203
05:02:36,160 --> 05:02:39,680
instance so imagine a scenario where you have a


24204
05:02:39,680 --> 05:02:43,440
loading screen already appearing on the mobile device


24205
05:02:43,440 --> 05:02:48,080
and you're telling the user wait while i'm logging you in now imagine that you


24206
05:02:48,080 --> 05:02:52,080
want to kick off another process while that is ongoing and you want to display


24207
05:02:52,080 --> 05:02:55,680
a loading screen again to the user while the previous loading screen is already


24208
05:02:55,680 --> 05:02:58,400
displayed on the screen so


24209
05:02:58,400 --> 05:03:01,680
a typical way of doing that would be for instance to dismiss the first loading


24210
05:03:01,680 --> 05:03:04,000
screen show a new loading screen with the new


24211
05:03:04,000 --> 05:03:08,080
content and when you get rid of the second loading screen then you can


24212
05:03:08,080 --> 05:03:12,640
display the first loading screen again as that process is ongoing however this


24213
05:03:12,640 --> 05:03:16,640
is quite a bit of a it is quite a bit of a race in that you


24214
05:03:16,640 --> 05:03:20,552
have to know the previous context what loading screen was displayed before what


24215
05:03:20,552 --> 05:03:24,160
loading screen you're displaying now if there was a


24216
05:03:24,160 --> 05:03:27,912
loading screen before you have to display it again so it's not so scalable


24217
05:03:27,912 --> 05:03:30,960
in that you will personally then be responsible for keeping track of the


24218
05:03:30,960 --> 05:03:34,320
state of your loading screen so what we're going to do in this chapter is to


24219
05:03:34,320 --> 05:03:38,960
create a loading screen that is a that is able to be controlled and its text


24220
05:03:38,960 --> 05:03:42,552
and contents is going to be controlled using a controller object


24221
05:03:42,552 --> 05:03:45,192
so upon creating that loading screen we're


24222
05:03:45,192 --> 05:03:49,192
then gonna get a loading screen controller


24223
05:03:49,192 --> 05:03:53,600
and this loading controller is gonna allow us to one dismiss the current


24224
05:03:53,600 --> 05:03:57,360
loading screen that is displayed on the screen if any and then secondly it's


24225
05:03:57,360 --> 05:04:01,512
going to allow us to update the contents of the loading screen


24226
05:04:01,512 --> 05:04:06,320
so without further ado we could actually start by having a look at creating this


24227
05:04:06,320 --> 05:04:10,552
loading controller and or loading screen controller and then we're going to use


24228
05:04:10,552 --> 05:04:14,800
this loading screen controller where we create our loading screen so as usual


24229
05:04:14,800 --> 05:04:18,160
i'm going to do some reshuffling on the screen so


24230
05:04:18,160 --> 05:04:22,800
let me make the code bigger here and then the font a little smaller


24231
05:04:22,800 --> 05:04:28,400
and let's then actually here i i'm pretty sure that we don't need scr cpy


24232
05:04:28,400 --> 05:04:32,400
because um we're not gonna have a look at how that


24233
05:04:32,400 --> 05:04:35,440
loading screen looks which looks like right now we're gonna write quite a bit


24234
05:04:35,440 --> 05:04:38,400
of code and then we're gonna put it into you so


24235
05:04:38,400 --> 05:04:41,680
i'm gonna make visual studio code full screen in here


24236
05:04:41,680 --> 05:04:46,800
and i'm going to get rid of this bottom bar here


24237
05:04:46,960 --> 05:04:51,120
okay so as the caption indicates what we're going to do now is to go ahead and


24238
05:04:51,120 --> 05:04:55,360
create our loading screen controller under lib helpers


24239
05:04:55,360 --> 05:05:00,480
loading loading screen controller and let's go in here and have a look at lib


24240
05:05:00,480 --> 05:05:04,160
and we can see we have lib utility service access you know constant views


24241
05:05:04,160 --> 05:05:07,512
but we don't have helpers so i'm gonna right click on live and just say new


24242
05:05:07,512 --> 05:05:12,400
file and then i'm going to say helpers and so that you can also see it here


24243
05:05:12,400 --> 05:05:16,320
helpers and loading and then loading screen


24244
05:05:16,320 --> 05:05:19,120
controller so that's going to create the


24245
05:05:19,120 --> 05:05:22,232
intermediate folders for us as well so you can see


24246
05:05:22,232 --> 05:05:27,280
now we're under lip helpers loading loading screen controller okay


24247
05:05:27,280 --> 05:05:31,512
so what we need here as i mentioned before is the ability for us to be able


24248
05:05:31,512 --> 05:05:35,832
to control two things to close the loading screen and also update its


24249
05:05:35,832 --> 05:05:41,192
contents so let's go ahead and define these type def so let's just say type f


24250
05:05:41,192 --> 05:05:46,000
and we're going to call it close loading screen and this is just a


24251
05:05:46,000 --> 05:05:48,640
boolean function


24252
05:05:48,640 --> 05:05:52,552
that indicates whether the loading screen could actually be closed or not


24253
05:05:52,552 --> 05:05:56,232
okay so it's just a function definition for now there is no implementation of


24254
05:05:56,232 --> 05:06:03,040
that function yet so let's also go and create a type f


24255
05:06:03,040 --> 05:06:07,120
and we're going to say update loading screen


24256
05:06:07,120 --> 05:06:11,360
and this is a void function and actually a bool function which will also indicate


24257
05:06:11,360 --> 05:06:15,912
whether the text could be updated and we just say text so what we're saying in


24258
05:06:15,912 --> 05:06:19,440
here we will have two functions that will conform to this


24259
05:06:19,440 --> 05:06:22,552
interface basically soon as you'll soon see okay


24260
05:06:22,552 --> 05:06:26,640
excuse me let's then go ahead and create a class


24261
05:06:26,640 --> 05:06:31,280
and we call it loading screen indicator or sorry controller


24262
05:06:31,280 --> 05:06:36,000
and let's mark this as immutable as well and for this we need material so


24263
05:06:36,000 --> 05:06:40,400
um actually foundation would do as well so let's just go in foundation and in


24264
05:06:40,400 --> 05:06:44,872
here i'm actually going to say show immutable just like that so we just need


24265
05:06:44,872 --> 05:06:50,080
the immutable part of the foundation um package in here


24266
05:06:50,080 --> 05:06:54,080
okay so that's the definition of our loading screen controller so what it


24267
05:06:54,080 --> 05:07:00,552
does is that it basically it takes in a closed loading screen as a parameter and


24268
05:07:00,552 --> 05:07:02,960
we say um close


24269
05:07:02,960 --> 05:07:06,720
and we also say final update loading screen


24270
05:07:06,720 --> 05:07:09,832
updates just like that and i'm going to get help from visual studio code to


24271
05:07:09,832 --> 05:07:14,320
complete this as a constant constructor and i'm going to make these parameters


24272
05:07:14,320 --> 05:07:19,912
also required so these things we've talked about so much before so that's


24273
05:07:19,912 --> 05:07:24,160
why i'm kind of jumping over them as fast as possible hot reload is not


24274
05:07:24,160 --> 05:07:28,552
working so well right now it's just because the application on scrcpy is not


24275
05:07:28,552 --> 05:07:32,160
on the screen and that's why hot reload isn't working so well so i'm going to


24276
05:07:32,160 --> 05:07:36,640
just jump to the application and now hot reload works and then i'm going to put


24277
05:07:36,640 --> 05:07:41,120
scr cpy on another screen so it doesn't bother us so much


24278
05:07:41,120 --> 05:07:45,832
okay so that's our controller so we're then gonna work on creating a


24279
05:07:45,832 --> 05:07:49,440
function that can display the loading screen and that function itself is gonna


24280
05:07:49,440 --> 05:07:53,280
return a loading screen controller to you so that's the beauty of that


24281
05:07:53,280 --> 05:07:57,760
function using the controller then you can close the loading screen or update


24282
05:07:57,760 --> 05:08:01,912
it so you can see that these two are basically functions that the call side


24283
05:08:01,912 --> 05:08:07,040
can accept and call in order to close and update the loading screen


24284
05:08:07,040 --> 05:08:10,040
respectively


24285
05:08:10,872 --> 05:08:14,960
all right that was the loading screen controller what we need to do now is to


24286
05:08:14,960 --> 05:08:20,640
work on the loading screen itself so um let's go ahead as the caption


24287
05:08:20,640 --> 05:08:25,440
indicates we're gonna go to lib helpers loading in this folder


24288
05:08:25,440 --> 05:08:29,760
and we're going to create a new file inside loading and let's just call it


24289
05:08:29,760 --> 05:08:32,800
that loading screen


24290
05:08:33,040 --> 05:08:37,120
start and inside loading screen we're just


24291
05:08:37,120 --> 05:08:41,120
going to create a loading screen class okay


24292
05:08:41,120 --> 05:08:43,592
and we're going to make our loading screen


24293
05:08:43,592 --> 05:08:47,592
a singleton and since we've done singleton twice before i'm just going to


24294
05:08:47,592 --> 05:08:51,512
basically paste the pattern in here so we don't have to write this


24295
05:08:51,512 --> 05:08:56,232
boring code again but this is a pattern that we've done so far twice as i


24296
05:08:56,232 --> 05:09:01,040
mentioned before so you should basically know how it works so we have a private


24297
05:09:01,040 --> 05:09:04,480
constructor then we have a factory constructor which is public which in


24298
05:09:04,480 --> 05:09:10,720
turn uses a static final variable which in turn calls the private


24299
05:09:10,720 --> 05:09:14,640
initializer so it's just a bit of a we could actually


24300
05:09:14,640 --> 05:09:19,280
do it like this in so this is in order basically so when someone calls our


24301
05:09:19,280 --> 05:09:22,800
loading screen constructor factory constructor from outside in turn calls


24302
05:09:22,800 --> 05:09:29,832
this and this in turn calls this so it's a it's a layer base it's three layers


24303
05:09:30,000 --> 05:09:33,440
okay so what we're going to do in here we're also going to keep pulling up our


24304
05:09:33,440 --> 05:09:37,680
loading screen controller and so let's go ahead and send loading screen


24305
05:09:37,680 --> 05:09:40,320
controller as you can see it's going to also import it for me so i'm just going


24306
05:09:40,320 --> 05:09:43,680
to say loading screen controller and let's just say it's optional


24307
05:09:43,680 --> 05:09:49,360
because we might not actually have it and um then what we're gonna do in here


24308
05:09:49,360 --> 05:09:53,192
we're gonna have a function called show as i can see


24309
05:09:53,192 --> 05:09:56,320
and um then we're gonna have a few more


24310
05:09:56,320 --> 05:10:01,832
functions there that are gonna allow us to control basically our loading screen


24311
05:10:01,832 --> 05:10:05,040
and i wonder which one is actually best to


24312
05:10:05,040 --> 05:10:07,192
um best to


24313
05:10:07,192 --> 05:10:11,040
work with first it could be that we should be working


24314
05:10:11,040 --> 05:10:15,120
for instance with the show overlay function so let's go ahead


24315
05:10:15,120 --> 05:10:19,440
and do that so let's say that we are going to have a function on our loading


24316
05:10:19,440 --> 05:10:25,832
screen um class and we're calling it show overlay so and this show overlay is


24317
05:10:25,832 --> 05:10:30,160
then in turn going to return an instance of loading screen controller so let's go


24318
05:10:30,160 --> 05:10:33,360
ahead and start writing that so loading screen controller


24319
05:10:33,360 --> 05:10:38,872
and we say show overlay and this function has a two required


24320
05:10:38,872 --> 05:10:43,192
parameters so i'm going to put curly bracket in here a curly bracket in here


24321
05:10:43,192 --> 05:10:47,680
and let's just say we need a build context so build contacts and


24322
05:10:47,680 --> 05:10:52,400
it's going to auto import from material so that's great build context


24323
05:10:52,400 --> 05:10:55,680
and require parameter build context and i'm just going to call it context and


24324
05:10:55,680 --> 05:11:00,872
then upon you wanting to show an overlay you also have to specify its text so


24325
05:11:00,872 --> 05:11:03,192
because what we're saying in here is that an


24326
05:11:03,192 --> 05:11:07,360
overlay can't be displayed without an actual text in it okay and remember


24327
05:11:07,360 --> 05:11:11,440
we're using the word overlay but in this case our loading screen is going to have


24328
05:11:11,440 --> 05:11:16,320
a custom overlay with some material components like a column and button etc


24329
05:11:16,320 --> 05:11:20,872
etc okay so show overlay in this case means show the loading screen with this


24330
05:11:20,872 --> 05:11:25,192
text okay so we call it that and then let's go


24331
05:11:25,192 --> 05:11:30,480
ahead and basically say this is a string of text just like that okay


24332
05:11:30,480 --> 05:11:34,400
and perfect so that's fine so now what we're


24333
05:11:34,400 --> 05:11:39,440
going to create now is um we're going to create a stream controller


24334
05:11:39,440 --> 05:11:41,912
that will then


24335
05:11:41,912 --> 05:11:46,800
new strings that are provided by this controller remember we created this


24336
05:11:46,800 --> 05:11:50,720
thing so if someone updates the loading screen text we're going to put those


24337
05:11:50,720 --> 05:11:55,192
strings inside a stream controller so let's go ahead and create a final


24338
05:11:55,192 --> 05:12:00,000
if i can spell so we'll say this is a stream controller


24339
05:12:00,000 --> 05:12:06,720
control controller of string okay we just create that and it can't find


24340
05:12:06,720 --> 05:12:11,280
stream controller so i'm just going to say import lib dart async so that's


24341
05:12:11,280 --> 05:12:16,800
another import um right here which you might have to do by hand if you don't


24342
05:12:16,800 --> 05:12:20,552
have visual studio code or if you're not using for instance a text editor or id


24343
05:12:20,552 --> 05:12:24,480
that can also import things for you stream controller is available in dart


24344
05:12:24,480 --> 05:12:27,832
async so then the first thing we're going to


24345
05:12:27,832 --> 05:12:32,000
do is to add the current text into


24346
05:12:32,000 --> 05:12:36,160
our stream controller so this text parameter that was provided to us we're


24347
05:12:36,160 --> 05:12:39,360
going to put it inside the stream controller okay


24348
05:12:39,360 --> 05:12:43,040
so what we need to do is basically


24349
05:12:43,040 --> 05:12:47,120
use a new function that we haven't used before which is called overlay of


24350
05:12:47,120 --> 05:12:50,552
context so if i look at if you look at the return


24351
05:12:50,552 --> 05:12:55,360
of this it will return something called an overlay state and it says the state


24352
05:12:55,360 --> 05:13:00,320
from the closest instance of this class that encloses the given context so we


24353
05:13:00,320 --> 05:13:05,440
need this state in order to be able to display our overlay so let's just grab


24354
05:13:05,440 --> 05:13:09,512
this overlay of context and put it inside a state


24355
05:13:09,512 --> 05:13:13,912
like this and then what we're going to do is


24356
05:13:13,912 --> 05:13:17,440
since overlays are kind of displayed on top of everything else that's on the


24357
05:13:17,440 --> 05:13:21,512
screen they don't have intrinsic sizes as such so if you're using with if


24358
05:13:21,512 --> 05:13:24,232
you're using for instance material components such as


24359
05:13:24,232 --> 05:13:27,760
various widgets inside your flutter application if you create different


24360
05:13:27,760 --> 05:13:32,552
containers buttons they have some sort of intrinsic size in them however with


24361
05:13:32,552 --> 05:13:35,912
overlays you kind of have to grab like the


24362
05:13:35,912 --> 05:13:39,760
state of the current screen and what components are displayed on and


24363
05:13:39,760 --> 05:13:43,280
available with the available height so we need


24364
05:13:43,280 --> 05:13:48,000
some sort of a size to basically base our overlay on top of


24365
05:13:48,000 --> 05:13:52,320
so let's go ahead and grab our render box


24366
05:13:52,320 --> 05:13:56,800
and i'm going to say using this context and we're going to get find render


24367
05:13:56,800 --> 05:13:59,192
object


24368
05:13:59,592 --> 05:14:04,960
like this as a renderer box okay so there's lots of documentation available


24369
05:14:04,960 --> 05:14:09,192
about what render box is but it is kind of like low level and i'm not gonna go


24370
05:14:09,192 --> 05:14:13,192
into so much details about that but let's go actually have a look a little


24371
05:14:13,192 --> 05:14:17,512
bit here as you can see it's a render object and it is quite low level as i


24372
05:14:17,512 --> 05:14:21,512
mentioned inside rendering box and what it will do it will allow you to


24373
05:14:21,512 --> 05:14:26,720
basically extract the available size that our overlay can


24374
05:14:26,720 --> 05:14:31,192
have on the screen so let's go ahead and create a final size in here and say


24375
05:14:31,192 --> 05:14:36,800
render box about size okay so that's that


24376
05:14:36,800 --> 05:14:42,160
then what we need to do we actually need to now create our overlay so our overlay


24377
05:14:42,160 --> 05:14:46,000
and you may think oh this is the overlay because we call it overlay here well


24378
05:14:46,000 --> 05:14:49,592
it's not really because the overlay is like the over um


24379
05:14:49,592 --> 05:14:55,040
in in this context that's overlay of is the state of the


24380
05:14:55,040 --> 05:15:00,080
parent overlay uh context so uh what you are going to create in your


24381
05:15:00,080 --> 05:15:06,080
application is actually called overlay entry so um but when when we say we're


24382
05:15:06,080 --> 05:15:11,912
going to create an overlay what we actually mean is an overlay entry okay


24383
05:15:11,912 --> 05:15:15,680
so let's go ahead and create an overlay entry in here so we're gonna say final


24384
05:15:15,680 --> 05:15:21,040
overlay is overlay entry just like that and then we have a builder function


24385
05:15:21,040 --> 05:15:24,400
now i'm gonna get visual studio code to complete this it needs a context all


24386
05:15:24,400 --> 05:15:29,912
right so let's go in here now overlays they don't have a parent like a


24387
05:15:29,912 --> 05:15:33,832
scaffold or anything so if you don't wrap your


24388
05:15:33,832 --> 05:15:37,192
like this component that you return from your builder which should be a widget


24389
05:15:37,192 --> 05:15:40,720
let's go in here you can see it's a widget if you don't wrap this inside


24390
05:15:40,720 --> 05:15:46,080
some sort of a material component such as scaffold or material itself your


24391
05:15:46,080 --> 05:15:49,440
overlay is going to have horrible styling because it's not going to have


24392
05:15:49,440 --> 05:15:53,680
any default system styling so excuse me what we're going to do in here we're


24393
05:15:53,680 --> 05:15:58,960
going to return a material component and material is going to allow you if


24394
05:15:58,960 --> 05:16:02,160
you look here as a documentation of material it says


24395
05:16:02,160 --> 05:16:04,720
creates a piece of letter


24396
05:16:04,720 --> 05:16:08,720
i mean okay um but what it basically means it is actually let's have a look


24397
05:16:08,720 --> 05:16:11,440
at this code maybe that makes more sense so


24398
05:16:11,440 --> 05:16:16,080
uh is a stateful widget so it will create a stateful widget for you which


24399
05:16:16,080 --> 05:16:19,680
has some default styling so you can put your components in there and they'll be


24400
05:16:19,680 --> 05:16:25,512
style according to the system skin okay so let's say that we are going to give


24401
05:16:25,512 --> 05:16:29,280
the material which is going to cover the entire screen this material component


24402
05:16:29,280 --> 05:16:32,400
that we're returning here is going to cover the entire screen remember so


24403
05:16:32,400 --> 05:16:36,872
let's first paint the entire screen with kind of like a dark color as you know


24404
05:16:36,872 --> 05:16:41,040
when you display like errors or dialogues to the screen to the user


24405
05:16:41,040 --> 05:16:44,080
usually what they do is like they paint the background the entire background


24406
05:16:44,080 --> 05:16:48,232
kind of like a dark color so then they can display their dialogue in the middle


24407
05:16:48,232 --> 05:16:50,480
of the screen and kind of give it kind of


24408
05:16:50,480 --> 05:16:54,160
like um some sort of a


24409
05:16:54,160 --> 05:16:58,080
elevation so it kind of it pops out of the screen a little bit so what we're


24410
05:16:58,080 --> 05:17:01,440
going to do in here we're going to say color the color of our material uh


24411
05:17:01,440 --> 05:17:08,960
staple widget in here is colors black with alpha of 150 okay


24412
05:17:08,960 --> 05:17:14,080
and then the child of our material then it's gonna be a center okay so that's


24413
05:17:14,080 --> 05:17:18,552
what we're gonna create here so let's then go in here and what we're


24414
05:17:18,552 --> 05:17:22,400
going to do is the child of this is going to be container so i'm just going


24415
05:17:22,400 --> 05:17:28,160
to create a container here and then put a semicolon there and it's happy now


24416
05:17:28,160 --> 05:17:33,512
so then our content container is gonna place some constraints off on our


24417
05:17:33,512 --> 05:17:37,680
overlay so it's gonna say for instance that its max width and height should be


24418
05:17:37,680 --> 05:17:41,120
a certain value so we haven't used this before but we're gonna now use something


24419
05:17:41,120 --> 05:17:45,040
called constraints in here and you can see the value of constraints is of type


24420
05:17:45,040 --> 05:17:50,160
box constraints so let's say constraints and then we say box constraints okay so


24421
05:17:50,160 --> 05:17:55,912
we're going to start with max width so then we're going to say size width


24422
05:17:55,912 --> 05:18:01,440
multiplied by zero at that eight and what we're basically saying here saying


24423
05:18:01,440 --> 05:18:03,760
that this this dialogue that we're displaying to


24424
05:18:03,760 --> 05:18:08,320
the user is going to consume at most eighty percent of the available widths


24425
05:18:08,320 --> 05:18:12,160
on the screen so this is our way of creating some margins to the right and


24426
05:18:12,160 --> 05:18:15,592
left for those of you who are web developers and are like know about


24427
05:18:15,592 --> 05:18:19,120
margin um and even if you're a web even if you're


24428
05:18:19,120 --> 05:18:22,640
a designer you'll probably know already about margin so what we're saying is


24429
05:18:22,640 --> 05:18:27,760
that this container needs to wrap itself around its contents but if the contents


24430
05:18:27,760 --> 05:18:31,040
grow it's gonna go at most eighty percent


24431
05:18:31,040 --> 05:18:36,232
of the available width and this width is coming from our render box okay


24432
05:18:36,232 --> 05:18:40,232
so that's that and we're gonna do the same thing with max height so we're


24433
05:18:40,232 --> 05:18:46,232
going to say size height multiplied 0.8 and then we're going to give it a min


24434
05:18:46,232 --> 05:18:52,000
width of size with multiply 0.5 so we're going to say at least it should it


24435
05:18:52,000 --> 05:18:57,280
should grab um half of the screen width okay


24436
05:18:57,280 --> 05:19:00,080
then let's give it some decoration so we're going to say this is box


24437
05:19:00,080 --> 05:19:05,040
decoration so let's go in here and so this is just to give it some um


24438
05:19:05,040 --> 05:19:09,360
border so uh usually dialogues or in this case an overlay that we're


24439
05:19:09,360 --> 05:19:13,832
displaying to use or they have some sort of a border so it creates this kind of


24440
05:19:13,832 --> 05:19:18,320
like a beautiful elevation so if this is the dark background in here which we


24441
05:19:18,320 --> 05:19:25,040
created with black of alpha 150 then we have an arc basically overlaying here or


24442
05:19:25,040 --> 05:19:29,120
overlay um we call it here as you can see overlay entry then the overlay entry


24443
05:19:29,120 --> 05:19:32,320
will be placed here but it will have some border around it to


24444
05:19:32,320 --> 05:19:35,912
separate it from the background okay so this is just a technique to separate our


24445
05:19:35,912 --> 05:19:40,320
overlay from the background so we're going to say the border is


24446
05:19:40,320 --> 05:19:45,192
color white our sorry color is white and then we're


24447
05:19:45,192 --> 05:19:50,480
going to say it has a border radius f and border radius


24448
05:19:50,480 --> 05:19:54,680
all these documentations on the screen are just driving me crazy and border


24449
05:19:54,680 --> 05:20:01,592
radius.circular and let's just give it a circle value of 10 in here okay


24450
05:20:02,400 --> 05:20:06,960
sometimes documentation is just in the way


24451
05:20:07,040 --> 05:20:10,400
so let's stand in here as you can see now we have an empty container we should


24452
05:20:10,400 --> 05:20:14,640
never do that so let's go in here and just create a child for it so the child


24453
05:20:14,640 --> 05:20:19,592
in here is going to be a padding so um or maybe we could just say single


24454
05:20:19,592 --> 05:20:24,872
child scroll view for now and then i'm gonna embed the single


24455
05:20:24,872 --> 05:20:28,800
child scroll view inside padding that's that's my preferred way of doing this so


24456
05:20:28,800 --> 05:20:32,552
just like that and let's just give it padding of 16 for now okay


24457
05:20:32,552 --> 05:20:36,552
so the reason that the child of this padding that we created here is a single


24458
05:20:36,552 --> 05:20:41,832
child scroll view is as you remember we said the max height of our overlay entry


24459
05:20:41,832 --> 05:20:45,680
is 80 of the available height on the screen


24460
05:20:45,680 --> 05:20:49,360
that's all great and but what if


24461
05:20:49,360 --> 05:20:53,040
your just your application display on a very small screen and


24462
05:20:53,040 --> 05:20:58,552
then you're displaying a lot of text well if you don't put your contents in


24463
05:20:58,552 --> 05:21:03,440
the entire contents of your material widget inside a single child scroll view


24464
05:21:03,440 --> 05:21:07,760
then your content is going to be basically chopped so the users are not


24465
05:21:07,760 --> 05:21:12,400
going to see the content in its entirety and what single chat scroll view does is


24466
05:21:12,400 --> 05:21:17,360
that it tries to not scroll its contents if the content has enough space to be


24467
05:21:17,360 --> 05:21:22,480
displayed on the container but if the contents overflows the container's


24468
05:21:22,480 --> 05:21:27,192
height for instance then it's going to allow the user to scroll on that


24469
05:21:27,192 --> 05:21:31,592
container so it it works perfectly trust me


24470
05:21:31,592 --> 05:21:35,680
so let's go in here and then go and inside the single chart scroll view


24471
05:21:35,680 --> 05:21:39,512
create a child and in here we're going to have a column


24472
05:21:39,512 --> 05:21:44,720
and our main axis size is going to be main axis


24473
05:21:44,720 --> 05:21:48,640
main axis size of minimum because remember if you don't give a main


24474
05:21:48,640 --> 05:21:52,160
exercise a minimum pure column your column is going to grab as much space as


24475
05:21:52,160 --> 05:21:56,640
it can so it's just going to expand as much as it can and if you say main


24476
05:21:56,640 --> 05:22:00,960
exercise is minimum it's just gonna basically try to


24477
05:22:00,960 --> 05:22:04,872
hug its contents as much as it can


24478
05:22:05,120 --> 05:22:10,480
and then we're gonna say main access alignment is main access alignment of


24479
05:22:10,480 --> 05:22:18,552
center so it's also going to place its contents vertically in the center okay


24480
05:22:19,040 --> 05:22:23,512
then what we're going to do in here in column children so let's go in here and


24481
05:22:23,512 --> 05:22:29,440
say children then let's create a size box um and give it a height of 10 so


24482
05:22:29,440 --> 05:22:35,440
we're creating some top margin from um from top of the column so this is


24483
05:22:35,440 --> 05:22:39,360
saying that we have a column we're going to put some stuff in it but give it 10


24484
05:22:39,360 --> 05:22:42,400
points of emptiness on top so it just creates a


24485
05:22:42,400 --> 05:22:46,232
little bit of a margin okay and look i fully understand that this is a lot of


24486
05:22:46,232 --> 05:22:50,160
abstract stuff it would be a lot nicer if you could actually see this on the


24487
05:22:50,160 --> 05:22:52,552
screen but sometimes when you're programming


24488
05:22:52,552 --> 05:22:55,832
especially in flutter since it's so declarative then you have to kind of use


24489
05:22:55,832 --> 05:22:59,592
your imagination on how this thing is actually going to look like on the


24490
05:22:59,592 --> 05:23:01,760
screen so


24491
05:23:01,760 --> 05:23:06,800
you could do a lot of experiments and test this for your for yourself and just


24492
05:23:06,800 --> 05:23:10,000
maybe just even do this don't do anything more than this just use a size


24493
05:23:10,000 --> 05:23:13,280
block on the size box on the screen and just display it overlay and see how it


24494
05:23:13,280 --> 05:23:19,120
looks like that also works okay and right after this let's go and create


24495
05:23:19,120 --> 05:23:23,912
a our const of circular progress indicator


24496
05:23:23,912 --> 05:23:27,512
so that's going to be a little indicator that sits there and displays that


24497
05:23:27,512 --> 05:23:31,040
something is loading and then we're going to give it another


24498
05:23:31,040 --> 05:23:35,760
size box with a height of maybe this time actually 20 and so this creates a


24499
05:23:35,760 --> 05:23:39,512
little bit more spacing and then what we're doing in here we


24500
05:23:39,512 --> 05:23:44,000
want to create a text and but that text could change because


24501
05:23:44,000 --> 05:23:47,592
that text is placed inside the stream controller so we're not going to use a


24502
05:23:47,592 --> 05:23:51,040
stream builder so let's say stream builder


24503
05:23:51,040 --> 05:23:54,080
like this and our stream


24504
05:23:54,080 --> 05:23:57,360
itself is this text um


24505
05:23:57,360 --> 05:24:00,832
right that we created up


24506
05:24:00,832 --> 05:24:05,440
there so what we need to do basically is to grab the stream from the stream


24507
05:24:05,440 --> 05:24:09,832
controller and use it inside our stream builder and then i'm going to help from


24508
05:24:09,832 --> 05:24:15,832
visual studio coding here and say that the builder function should be like


24509
05:24:15,832 --> 05:24:20,160
and if you remember we could use a really handy


24510
05:24:20,160 --> 05:24:25,280
getter on our snapshot that says has data so let's say return or sorry um you


24511
05:24:25,280 --> 05:24:31,592
say if snapshot has data then we're going to return a text in here okay


24512
05:24:31,592 --> 05:24:36,872
and the text basically is it's the text of the text widget is going to be the


24513
05:24:36,872 --> 05:24:41,760
snapshots data as string we know that it is a string


24514
05:24:41,760 --> 05:24:45,912
and also we are going to give it a text alignment of text align in the center


24515
05:24:45,912 --> 05:24:50,080
okay so that's that part and let's put a


24516
05:24:50,080 --> 05:24:53,592
comma in there as well and also we're we're getting this error


24517
05:24:53,592 --> 05:24:58,000
right now because we're not returning a widget in all the available paths inside


24518
05:24:58,000 --> 05:25:01,360
this builder and we have to put an else statement in here


24519
05:25:01,360 --> 05:25:07,280
and otherwise we just can return a container as you can see in here okay so


24520
05:25:07,280 --> 05:25:11,192
since we have to return something we could just return an empty container for


24521
05:25:11,192 --> 05:25:14,552
now i mean you could also solve this in


24522
05:25:14,552 --> 05:25:19,760
another way for instance say okay if the snapshot has data i'm going to return a


24523
05:25:19,760 --> 05:25:24,232
text like this or otherwise i'm going to return a text


24524
05:25:24,232 --> 05:25:28,552
like an empty text like this you could also try to do that but right


24525
05:25:28,552 --> 05:25:33,440
now we're just leaving it as returning a container okay


24526
05:25:34,232 --> 05:25:36,960
so that's that part


24527
05:25:36,960 --> 05:25:41,760
now we created our up until this point so if i


24528
05:25:41,760 --> 05:25:45,280
do this and fold this that we created in here which


24529
05:25:45,280 --> 05:25:49,120
is our overlay we've just created the overlay that doesn't mean that we're


24530
05:25:49,120 --> 05:25:53,912
displaying it so the way to display an overlay is to use that overlay of which


24531
05:25:53,912 --> 05:26:00,872
created an overlay state and say insert overlay okay so this actually adds our


24532
05:26:00,872 --> 05:26:07,680
overlay to the entire overlay state that flutter manages on the screen so


24533
05:26:07,680 --> 05:26:12,400
so now we've done that so what we need to do then upon upon this happening we


24534
05:26:12,400 --> 05:26:16,160
need to take our return statement and that's why


24535
05:26:16,160 --> 05:26:20,160
we're seeing a red basically loading screen dart file here


24536
05:26:20,160 --> 05:26:24,000
in visual studio code depending depending on your editor or id that


24537
05:26:24,000 --> 05:26:27,512
you're using you may or may not see this screen as having an error but if you


24538
05:26:27,512 --> 05:26:31,832
scroll up in here it basically tells you that well you're not returning what you


24539
05:26:31,832 --> 05:26:35,512
said you should return so let's go in here and create an instance of loading


24540
05:26:35,512 --> 05:26:38,552
screen um controller


24541
05:26:38,552 --> 05:26:41,680
okay and we have to take care of the close


24542
05:26:41,680 --> 05:26:45,592
and we have to also take care of the update but let's take care of closed


24543
05:26:45,592 --> 05:26:50,160
first so it's an empty function and the only thing it should do is to


24544
05:26:50,160 --> 05:26:53,680
have a look at our stream controller and close that


24545
05:26:53,680 --> 05:26:57,440
and then we have we go to our overlay that we just created and basically


24546
05:26:57,440 --> 05:27:03,280
remove it from the screen and also we just say yeah we returned


24547
05:27:03,280 --> 05:27:07,192
through from this okay and now we're getting an error in here saying update


24548
05:27:07,192 --> 05:27:10,480
it's not provided so let's go ahead and create update as well and if you


24549
05:27:10,480 --> 05:27:15,360
remember from update uh what it does it actually takes the string as a parameter


24550
05:27:15,360 --> 05:27:18,320
in itself so in here the only thing we have to do is


24551
05:27:18,320 --> 05:27:22,160
to add that to our stream controller so i just noticed that you can't see the


24552
05:27:22,160 --> 05:27:26,232
code sorry about that so let's add that and just return true and


24553
05:27:26,232 --> 05:27:30,000
to be honest with you you could just say well let's just not return any value in


24554
05:27:30,000 --> 05:27:33,592
here you could do that as well but i created these


24555
05:27:33,592 --> 05:27:38,872
um function signatures so that you can also indicate an error to the call site


24556
05:27:38,872 --> 05:27:42,160
so you may try to get rid of these


24557
05:27:42,160 --> 05:27:45,120
yeah let's go ahead and do that if you want to but i'm just going to leave it


24558
05:27:45,120 --> 05:27:49,760
like this in case we want to extend this functionality in the future so that we


24559
05:27:49,760 --> 05:27:54,080
can return false if things go wrong okay


24560
05:27:54,232 --> 05:28:00,400
all right that was the uh let's say that was our show overlay function so that's


24561
05:28:00,400 --> 05:28:04,720
perfect so let's then go ahead and create a


24562
05:28:04,720 --> 05:28:08,480
function in here that we're going to call also height now we have show let's


24563
05:28:08,480 --> 05:28:14,552
go create hide okay so let's just say void hide like this


24564
05:28:14,552 --> 05:28:18,232
and what we're gonna do in here we're gonna take our controller like this and


24565
05:28:18,232 --> 05:28:22,552
if it's there we're just gonna say close okay remember close the way it was


24566
05:28:22,552 --> 05:28:25,680
implemented it closes the stream controller for text


24567
05:28:25,680 --> 05:28:29,440
and it also removes the overlay and returns true so that's gonna if there is


24568
05:28:29,440 --> 05:28:33,280
a controller available on the screen then it's gonna return that okay sorry


24569
05:28:33,280 --> 05:28:36,232
it's gonna close that


24570
05:28:36,872 --> 05:28:40,872
so um and also we're just gonna say controller is null


24571
05:28:40,872 --> 05:28:45,280
all right so and the point for us is that to show


24572
05:28:45,280 --> 05:28:49,280
to use this function internally remember this this function is going to return


24573
05:28:49,280 --> 05:28:54,800
this loading screen controller which we are soon going to place inside this


24574
05:28:54,800 --> 05:28:58,160
controller variable at the moment control variable is always basically


24575
05:28:58,160 --> 05:29:00,960
null all right


24576
05:29:01,592 --> 05:29:05,832
all right that's great stuff so now we've taken our taking care of hide so


24577
05:29:05,832 --> 05:29:11,192
now that we have hide let's go and create show so we say show and then we


24578
05:29:11,192 --> 05:29:15,192
need two parameters in here two required parameters so let's say


24579
05:29:15,192 --> 05:29:19,832
required build context build context context


24580
05:29:19,832 --> 05:29:24,000
and then we say required string text okay so anybody calling this function


24581
05:29:24,000 --> 05:29:27,592
has to provide these two parameters and they're very familiar because they are


24582
05:29:27,592 --> 05:29:31,912
the parameters needed by show overlay okay


24583
05:29:31,912 --> 05:29:37,040
so let's go in here and we say if we have a controller um if we can actually


24584
05:29:37,040 --> 05:29:41,512
use this controller's update function in here so like this


24585
05:29:41,512 --> 05:29:47,592
and we pass the text in here or false so now you probably are like starting to


24586
05:29:47,592 --> 05:29:51,680
see why i'm returning true from this function and that's because well if you


24587
05:29:51,680 --> 05:29:55,512
don't have a controller then you can't update it okay


24588
05:29:55,512 --> 05:30:00,080
so this basically what it does it makes the


24589
05:30:00,080 --> 05:30:03,360
code you have to write shorter because otherwise you'd have to do like this if


24590
05:30:03,360 --> 05:30:05,912
controller not null


24591
05:30:05,912 --> 05:30:09,912
then you would have to update but in here we're just saying either update the


24592
05:30:09,912 --> 05:30:12,872
controller's text or


24593
05:30:12,872 --> 05:30:17,592
else like this okay so if we could update the controller's x we


24594
05:30:17,592 --> 05:30:20,960
just return because that means well we already have a controller on the screen


24595
05:30:20,960 --> 05:30:26,000
a an overlay controller so we could update its text so show should just


24596
05:30:26,000 --> 05:30:30,872
return right after that it shouldn't display a new um overlay otherwise we


24597
05:30:30,872 --> 05:30:34,960
create and we basically create a new overlay using this show overlay and


24598
05:30:34,960 --> 05:30:39,592
assign it to our controller our property on top so we say this is


24599
05:30:39,592 --> 05:30:45,040
equal to show orally with that context and text


24600
05:30:45,120 --> 05:30:50,232
all right fantastic so that's pretty much all we have to do and for our


24601
05:30:50,232 --> 05:30:54,080
loading screen.dart file so we could just save this and i'm just going to


24602
05:30:54,080 --> 05:30:58,232
save this file as well and close it


24603
05:30:58,400 --> 05:31:03,120
so let's talk a little bit about our um off


24604
05:31:03,120 --> 05:31:07,280
state and if you remember from our off state


24605
05:31:07,280 --> 05:31:11,832
and for instance here we have off state logged out and that has a has is loading


24606
05:31:11,832 --> 05:31:15,912
um property in here but if you look at for instance needs verification or


24607
05:31:15,912 --> 05:31:21,592
logged in etc etc they don't have is loading so


24608
05:31:21,592 --> 05:31:28,320
what if we added is loading to a higher level here to our off state so any off


24609
05:31:28,320 --> 05:31:32,720
state in our application could potentially be in the loading state as


24610
05:31:32,720 --> 05:31:38,232
well so that means registering could be loading logging could be loading whoever


24611
05:31:38,232 --> 05:31:43,120
wants to could have loading and that's exactly what we're gonna do


24612
05:31:43,120 --> 05:31:47,192
now so i'm going to go to my notes as well so off state


24613
05:31:47,192 --> 05:31:51,760
let's go ahead and add these parameters that we have at the bottom of


24614
05:31:51,760 --> 05:31:55,760
the screen to our off state okay so i'm going to say final um


24615
05:31:55,760 --> 05:32:01,360
bool is loading and also let's say final string


24616
05:32:01,360 --> 05:32:05,120
loading text something like this


24617
05:32:05,592 --> 05:32:09,280
and then let's just undefine class build sorry about that i


24618
05:32:09,280 --> 05:32:14,080
just programmed so many different languages um at final and they're so so


24619
05:32:14,080 --> 05:32:17,512
different every language is kind of like they have their own data types and


24620
05:32:17,512 --> 05:32:21,760
typescript has their own lowercase data types uppercase etc


24621
05:32:21,760 --> 05:32:25,360
it's just a mishmash of various different types i just wish we could get


24622
05:32:25,360 --> 05:32:29,280
along and have like one standard for all data types at least the primary data


24623
05:32:29,280 --> 05:32:33,360
types in our applications but that's just wishful thinking maybe i


24624
05:32:33,360 --> 05:32:38,480
digress let's go ahead and add these parameters to our off state


24625
05:32:38,480 --> 05:32:42,400
and let's go ahead and do this make these required parameters so we say it's


24626
05:32:42,400 --> 05:32:47,760
it should uh this should be provided is loading but the loading text doesn't


24627
05:32:47,760 --> 05:32:52,080
need to be provided we'll always have a default we'll say please wait a moment


24628
05:32:52,080 --> 05:32:57,192
like this uh and we should close this have i not


24629
05:32:57,192 --> 05:33:00,480
closed this so like that okay


24630
05:33:00,480 --> 05:33:06,480
so that's adding these two parameters to our um auth state and loading text


24631
05:33:06,480 --> 05:33:11,040
always has a default string okay


24632
05:33:11,192 --> 05:33:16,160
so let's go ahead to auth state uninitialized and add is loading in here


24633
05:33:16,160 --> 05:33:20,480
so let's say required bool is loading so now that we've done


24634
05:33:20,480 --> 05:33:24,720
that we should actually you see now what we're getting in here is saying that


24635
05:33:24,720 --> 05:33:28,552
wait you're not calling your super because it's a super has this is loading


24636
05:33:28,552 --> 05:33:31,592
parameter in here that you need to provide because it's required but you're


24637
05:33:31,592 --> 05:33:35,280
not doing that so let's go ahead and actually add that parameter to our cells


24638
05:33:35,280 --> 05:33:38,960
as well and say is loading and what we're doing here which is


24639
05:33:38,960 --> 05:33:46,960
called super and we say is loading is is loading as is provided to us okay


24640
05:33:46,960 --> 05:33:51,912
so that's for uninitialized um now let's go to registering and do


24641
05:33:51,912 --> 05:33:56,720
the same thing in in there so we're going to say for registering we actually


24642
05:33:56,720 --> 05:34:02,480
have exception required so let's make this required and also make


24643
05:34:02,480 --> 05:34:06,552
is loading required so it is loading like that


24644
05:34:06,552 --> 05:34:12,232
okay and let's call super is loading is is loading like this


24645
05:34:12,232 --> 05:34:17,512
all right perfect that's also done and for


24646
05:34:17,512 --> 05:34:22,232
registering let's go to auth states logged in at the moment


24647
05:34:22,232 --> 05:34:26,480
we're getting taking the user and you see i'm making these parameters


24648
05:34:26,480 --> 05:34:29,592
required because if you don't make them required as soon


24649
05:34:29,592 --> 05:34:33,040
as you go to two parameters three parameters for creating a cons for


24650
05:34:33,040 --> 05:34:36,480
constructing an object using this initializer then


24651
05:34:36,480 --> 05:34:39,440
things start to get messy because they're not named parameters otherwise


24652
05:34:39,440 --> 05:34:44,400
so passing three unnamed parameters to an initializer to me is just it's just a


24653
05:34:44,400 --> 05:34:48,720
little bit difficult to understand so that's why we're making them required


24654
05:34:48,720 --> 05:34:52,552
okay so let's go in here and make this also


24655
05:34:52,552 --> 05:34:56,480
required name parameter required if i can spell


24656
05:34:56,480 --> 05:35:01,360
and this user and then i'm gonna say required uh bool


24657
05:35:01,360 --> 05:35:07,512
is uh required bull is loading all right


24658
05:35:07,512 --> 05:35:12,320
like that and then let's call super is loading with is loading all right


24659
05:35:12,320 --> 05:35:19,832
so that's for off state logged in now we need to also think about off


24660
05:35:19,832 --> 05:35:24,232
state needs a verification and we're just gonna take is loading in there as


24661
05:35:24,232 --> 05:35:27,912
well so let's go ahead and say needs


24662
05:35:27,912 --> 05:35:31,120
verification also has a required parameter


24663
05:35:31,120 --> 05:35:34,872
bool is loading and we're gonna do the same thing super is loading it is


24664
05:35:34,872 --> 05:35:39,512
loading so all we're doing is that we're making sure that every state has and is


24665
05:35:39,512 --> 05:35:44,552
loading and that is loading is passed to the super class called off state all


24666
05:35:44,552 --> 05:35:48,552
right and then we need to take care of also


24667
05:35:48,552 --> 05:35:52,160
our off state logged out so and


24668
05:35:52,160 --> 05:35:55,040
you see at the moment we have a little problem in here and it says don't


24669
05:35:55,040 --> 05:35:59,592
overwrite fields thank you dart and that means basically it's loading is already


24670
05:35:59,592 --> 05:36:03,280
implemented on the super class so we could just safely remove it from here


24671
05:36:03,280 --> 05:36:08,480
okay and then we say bool is loading and actually required bull


24672
05:36:08,480 --> 05:36:14,872
actually like that and also we take in a string of um our


24673
05:36:14,872 --> 05:36:18,320
loading text like this


24674
05:36:18,800 --> 05:36:22,000
um so now that that is like that we're just


24675
05:36:22,000 --> 05:36:25,680
gonna call super and say is loading is equal to is loading and then loading


24676
05:36:25,680 --> 05:36:33,680
text is loading text just like that okay and then put a comma at the end of this


24677
05:36:33,760 --> 05:36:37,760
perfect all right so that is basically saying that we may want to customize the


24678
05:36:37,760 --> 05:36:41,832
off state logged out loading text because we're taking it in and then


24679
05:36:41,832 --> 05:36:46,160
passing it up to the super whereas the others are not allowing us at the moment


24680
05:36:46,160 --> 05:36:49,592
to customize their loading text so that's why we have


24681
05:36:49,592 --> 05:36:53,360
string loading text only for off state locked out and not for the other classes


24682
05:36:53,360 --> 05:36:55,760
all right


24683
05:36:56,160 --> 05:36:58,552
um okay


24684
05:36:58,552 --> 05:37:01,760
so that's that so we've already basically taken care of this caption as


24685
05:37:01,760 --> 05:37:08,552
well so we've added loading text to our auth state logged out okay


24686
05:37:08,720 --> 05:37:14,960
so now we need to save this file and just go back to our off block in here


24687
05:37:14,960 --> 05:37:18,872
and you can see now we have a little bit of a problem in here so let me also go


24688
05:37:18,872 --> 05:37:22,720
to my notes so i can bring up my notes off block


24689
05:37:22,720 --> 05:37:25,280
so we have our um


24690
05:37:25,280 --> 05:37:29,192
auth state uninitialized in here and what we need to do is say when the


24691
05:37:29,192 --> 05:37:33,760
application opens when you the absolute initial state of the


24692
05:37:33,760 --> 05:37:37,440
application should be in the loading state so we should say it's loading true


24693
05:37:37,440 --> 05:37:41,360
okay so that's that part we taking care of


24694
05:37:41,360 --> 05:37:45,280
that so i need to what we need to do now is


24695
05:37:45,280 --> 05:37:50,552
to take care of as you say update off state logged out in off block so


24696
05:37:50,552 --> 05:37:55,040
let's go and find logged out


24697
05:37:55,040 --> 05:38:00,640
and we can have a look in here let's see if we have logged out anywhere yes and


24698
05:38:00,640 --> 05:38:05,280
it says add is loading true to off state logged out while loading


24699
05:38:05,280 --> 05:38:10,552
so um i'm gonna have a look here and see if we can actually find that so that's


24700
05:38:10,552 --> 05:38:14,080
for instance um here


24701
05:38:14,080 --> 05:38:17,912
and that's fine and then what we're gonna do in here we're gonna say loading


24702
05:38:17,912 --> 05:38:22,320
text and let's say please wait while i log


24703
05:38:22,320 --> 05:38:25,760
you in something like this okay


24704
05:38:25,832 --> 05:38:30,720
that's off state logged out that's the first thing that we have to do and let's


24705
05:38:30,720 --> 05:38:34,800
see where else we're using off state logged out and sorry


24706
05:38:34,800 --> 05:38:40,320
here yes and that's fine that's fine


24707
05:38:40,320 --> 05:38:45,832
so maybe that was the only place that we actually had to update our log state uh


24708
05:38:45,832 --> 05:38:50,000
off state logged out i don't think we have anywhere else that


24709
05:38:50,000 --> 05:38:55,360
off state logged out has to be set to true except for when we're actually


24710
05:38:55,360 --> 05:38:59,360
logging you in so and i believe that we've done that now


24711
05:38:59,360 --> 05:39:04,960
so off state logged out is there with is loading true there so that's that's the


24712
05:39:04,960 --> 05:39:09,440
only thing we have to do okay the next thing that we have to do is to


24713
05:39:09,440 --> 05:39:15,360
add is loading to other states in off block so let's start from where we're


24714
05:39:15,360 --> 05:39:20,872
getting all these errors so we have excuse me off event initialize so i'm


24715
05:39:20,872 --> 05:39:26,480
going to find that in my notes in here and in these cases when we're emitting


24716
05:39:26,480 --> 05:39:30,160
auth state needs verification we should just say is loading false because you


24717
05:39:30,160 --> 05:39:33,040
see when we actually end up in this state


24718
05:39:33,040 --> 05:39:36,320
we're not loading anything we've already done the work that we were supposed to


24719
05:39:36,320 --> 05:39:41,360
do so and that's sufficient basically in here


24720
05:39:41,360 --> 05:39:45,512
so here we have the user so now this is a required parameter named parameter so


24721
05:39:45,512 --> 05:39:48,960
it has its user and then we're going to say it's loading


24722
05:39:48,960 --> 05:39:52,872
and in here we're going to say false as well so command here to make the code


24723
05:39:52,872 --> 05:39:57,912
look a little bit better and let's then go ahead in here which is


24724
05:39:57,912 --> 05:40:02,720
our off event login and we have


24725
05:40:02,720 --> 05:40:07,120
this problem at the end which is off state needs verification


24726
05:40:07,120 --> 05:40:11,120
and when we've emitted this off state needs verification is loading is also


24727
05:40:11,120 --> 05:40:14,960
false so pretty much is loading is false almost everywhere


24728
05:40:14,960 --> 05:40:18,640
except for when we're actually loading something


24729
05:40:18,640 --> 05:40:22,400
which is for instance uh let's see here


24730
05:40:22,400 --> 05:40:26,232
when we're actually logging in for instance okay so when we have the user


24731
05:40:26,232 --> 05:40:29,592
in here we say user is a required parameter and is loading is false as


24732
05:40:29,592 --> 05:40:33,912
well coma to make it work also


24733
05:40:33,912 --> 05:40:38,080
and just looking up and down this file i can see we also have a problem off event


24734
05:40:38,080 --> 05:40:41,760
register so let's go to auth event register


24735
05:40:41,760 --> 05:40:47,280
excuse me and let's just say auth needs verification is loading is false as well


24736
05:40:47,280 --> 05:40:51,592
and in here we have an exception name parameter i believe and they require


24737
05:40:51,592 --> 05:40:55,360
parameter and then we say is loading is false as well so just a comma in there


24738
05:40:55,360 --> 05:41:00,232
to get the formatting working and that is working as it should so we


24739
05:41:00,232 --> 05:41:04,872
shouldn't have any errors basically in our offline at this point all right


24740
05:41:04,872 --> 05:41:08,960
so then i'm gonna close that file so


24741
05:41:08,960 --> 05:41:12,232
what we need to do as the captioning case we need to go to our login view and


24742
05:41:12,232 --> 05:41:14,800
remove everything that has anything to do with


24743
05:41:14,800 --> 05:41:21,280
loading so let's go to a login view and in here


24744
05:41:21,280 --> 05:41:24,552
uh login view


24745
05:41:24,552 --> 05:41:28,400
and at the moment you can see we have this closed dialog close dialog handle


24746
05:41:28,400 --> 05:41:32,800
all that stuff so we shouldn't do any of that so now you see the point of what


24747
05:41:32,800 --> 05:41:36,720
we've done is for our application to be able to handle


24748
05:41:36,720 --> 05:41:42,320
the loading dialog just in one place loading dialogue should be handled in


24749
05:41:42,320 --> 05:41:46,720
one place in the entire application that's what we're trying to do we


24750
05:41:46,720 --> 05:41:51,832
shouldn't have loading states and loading like handling loading and or any


24751
05:41:51,832 --> 05:41:56,000
dialogues and that has anything to do with loading in various views inside our


24752
05:41:56,000 --> 05:41:59,280
application so that's what we're trying to get to okay so let's first go to this


24753
05:41:59,280 --> 05:42:02,232
close dialogue handle and remove that because we're not going to need that


24754
05:42:02,232 --> 05:42:06,320
anymore and then let's go in here and remove all this code inside your login


24755
05:42:06,320 --> 05:42:10,400
view dot dart file that has anything to do with loading so now you should just


24756
05:42:10,400 --> 05:42:16,552
have exception handling all right oh now let's go to um


24757
05:42:16,552 --> 05:42:23,760
our main dart file and here have a look at what we have you can


24758
05:42:23,760 --> 05:42:28,000
see at the moment we have a block builder inside the main widget of home


24759
05:42:28,000 --> 05:42:32,872
page in in our build function we have a block builder but what we want is to


24760
05:42:32,872 --> 05:42:36,232
issue some side effects when the state


24761
05:42:36,232 --> 05:42:40,080
changes to something that has a loading in it okay so you see this state at the


24762
05:42:40,080 --> 05:42:44,872
moment is off state but inside there this state could have is loading set to


24763
05:42:44,872 --> 05:42:49,680
true so how do we handle that remember block builder is not supposed to have


24764
05:42:49,680 --> 05:42:54,480
any side effects that's the job of the block listener


24765
05:42:54,480 --> 05:42:58,320
however we need the block builder we actually need to return something in


24766
05:42:58,320 --> 05:43:01,832
here we need to return different views depending on the current


24767
05:43:01,832 --> 05:43:06,160
state but we also need a block listener so how do we do this how do we fix this


24768
05:43:06,160 --> 05:43:10,800
well the the solution is using a block consumer


24769
05:43:10,800 --> 05:43:14,720
so a block consumer i've mentioned this before the block consumer


24770
05:43:14,720 --> 05:43:18,640
builds on top of a block builder and a block listener so it allows you to do


24771
05:43:18,640 --> 05:43:22,232
both things at the same time so if you ever end up in a situation or


24772
05:43:22,232 --> 05:43:25,760
application where you want a builder a blog builder and you want a blog


24773
05:43:25,760 --> 05:43:31,120
listener block listener at the same time there is where you need a blog consumer


24774
05:43:31,120 --> 05:43:35,360
okay so let's go in here and say that in our


24775
05:43:35,360 --> 05:43:38,960
main file i'm going to go to my notes as well


24776
05:43:38,960 --> 05:43:42,872
and i'm just going to say excuse me in here


24777
05:43:42,872 --> 05:43:48,320
we don't have a block builder instead we have a block


24778
05:43:48,320 --> 05:43:52,960
consumer and now we have listener in here and


24779
05:43:52,960 --> 05:43:57,912
let's grab hold of this so what we're going to do in here is say if


24780
05:43:57,912 --> 05:44:01,280
state is loading


24781
05:44:01,512 --> 05:44:05,040
then what we're going to say is we're going to say loading screen and it also


24782
05:44:05,040 --> 05:44:09,512
imported for me okay and then we're gonna say show


24783
05:44:09,512 --> 05:44:14,552
okay we have the context already and then we either take the state's loading


24784
05:44:14,552 --> 05:44:21,360
text or we say please wait in a moment so if the state's loading text is not


24785
05:44:21,360 --> 05:44:24,800
available we just use a default one in here


24786
05:44:24,800 --> 05:44:29,192
so if the state is not loading we just say loading screen


24787
05:44:29,192 --> 05:44:33,760
dot height all right so that's that so now that we've done this this is pretty


24788
05:44:33,760 --> 05:44:37,592
much like the last building block that we have to build inside this um inside


24789
05:44:37,592 --> 05:44:41,440
this application for now so i'm just going to close this main dart file and


24790
05:44:41,440 --> 05:44:45,680
resize the screen let's go ahead and bring up scrcpy


24791
05:44:45,680 --> 05:44:50,232
and if i dare i'm gonna hot restart the application entirely because we've done


24792
05:44:50,232 --> 05:44:55,680
so much new work and let's go ahead in uh just for


24793
05:44:55,680 --> 05:45:00,720
experiment i'm gonna go into what is it loading okay i'm just gonna


24794
05:45:00,720 --> 05:45:04,080
go into our provider


24795
05:45:04,080 --> 05:45:08,480
in firebase auth provider inside this login


24796
05:45:08,480 --> 05:45:12,400
if you remember from before it user


24797
05:45:12,400 --> 05:45:17,512
login in here like this we could basically have a


24798
05:45:17,512 --> 05:45:22,400
little bit of a delay so because otherwise we may not actually see the


24799
05:45:22,400 --> 05:45:26,552
our little uh overlay so i'm just gonna first not do that and try to log in


24800
05:45:26,552 --> 05:45:31,760
normally so fubar bass you saw did you see our little overlay


24801
05:45:31,760 --> 05:45:34,800
there so i'm going to log out now and see if we can see it


24802
05:45:34,800 --> 05:45:38,232
what we didn't but if i try to now put a little bit of


24803
05:45:38,232 --> 05:45:41,360
a delay in here so i'm just going to say await


24804
05:45:41,360 --> 05:45:43,592
um future


24805
05:45:43,592 --> 05:45:49,192
delayed the rate const duration seconds three


24806
05:45:49,192 --> 05:45:55,120
and just hot restart the application and then i'm going to say


24807
05:45:55,120 --> 05:45:59,832
my normal credentials foo bar and press the login button and this is


24808
05:45:59,832 --> 05:46:04,000
our overlay right and it has the ability for you to


24809
05:46:04,000 --> 05:46:08,720
actually update its text as it's displayed on the screen so


24810
05:46:08,720 --> 05:46:12,720
then yes everything is actually working as it should so now we have an overlay


24811
05:46:12,720 --> 05:46:17,120
we don't have our loading dialog anymore so you could safely basically go and say


24812
05:46:17,120 --> 05:46:21,120
well i want to get a complete rid of the loading dialog so i'm going to leave


24813
05:46:21,120 --> 05:46:25,280
that up to you as now that we did we don't need the


24814
05:46:25,280 --> 05:46:29,120
loading dialogue so what we achieved in this chapter is actually huge because we


24815
05:46:29,120 --> 05:46:34,872
now have a loading um screen that is independent of the entire application


24816
05:46:34,872 --> 05:46:39,680
and it's in just one place that's the goal we don't have many different places


24817
05:46:39,680 --> 05:46:43,680
in our application that are handling the loading dialogue okay


24818
05:46:43,680 --> 05:46:48,480
so let's go ahead and make sure we're not going to lose our code our precious


24819
05:46:48,480 --> 05:46:52,160
code that we've written so far so i'm gonna rid of i'm gonna get rid of scr


24820
05:46:52,160 --> 05:46:57,680
cpy increase the size of the screen and let's go as we usually do and commit


24821
05:46:57,680 --> 05:47:02,960
and tag our code so if you look at our logs the previous commit was step 25


24822
05:47:02,960 --> 05:47:04,960
let's add


24823
05:47:04,960 --> 05:47:08,872
everything and say git commit step


24824
05:47:08,872 --> 05:47:12,640
26 i'm going to push these changes and


24825
05:47:12,640 --> 05:47:17,832
let's just say git tag step 26 as well


24826
05:47:17,832 --> 05:47:22,872
and then get push tags if i can spell


24827
05:47:22,872 --> 05:47:26,872
but if you look at our logs now so we have step 26 in here and if i scroll a


24828
05:47:26,872 --> 05:47:32,480
little bit step 25 is before it and all the tags are also available in here you


24829
05:47:32,480 --> 05:47:38,552
can see 25 and 26 available right there all right so we've done what we promised


24830
05:47:38,552 --> 05:47:41,912
to do at the beginning of this chapter and we created a great overlay that we


24831
05:47:41,912 --> 05:47:47,832
can reuse in the in the application and just show and hide only in one place


24832
05:47:47,832 --> 05:47:52,320
so what we need to do now is the very exciting stuff in that we're getting


24833
05:47:52,320 --> 05:47:56,640
really close to being complete with our application so we have login register


24834
05:47:56,640 --> 05:48:00,552
verification email verification we have loading in


24835
05:48:00,552 --> 05:48:04,800
screens we have sharing deleting it's just we have pretty much everything for


24836
05:48:04,800 --> 05:48:08,400
application but we still have some little bits and


24837
05:48:08,400 --> 05:48:12,552
pieces left to make the application more useful because remember when you create


24838
05:48:12,552 --> 05:48:16,480
your application and send it to apple and google for review there's actually


24839
05:48:16,480 --> 05:48:20,872
going to be real people who sit there and interact with your application to


24840
05:48:20,872 --> 05:48:25,760
see if they can make sense of it so we need to clean the ui up so that it's a


24841
05:48:25,760 --> 05:48:29,592
little bit more user friendly and that's exactly what we're going to take care of


24842
05:48:29,592 --> 05:48:33,040
in the next chapter so i'll see you there hello everyone and welcome to


24843
05:48:33,040 --> 05:48:38,640
chapter 44 of the swata course in previous chapters we've been basically


24844
05:48:38,640 --> 05:48:42,800
working quite a lot with block and we've been making sure that our applications


24845
05:48:42,800 --> 05:48:46,552
loading screen is working so we have one place in the entire application that


24846
05:48:46,552 --> 05:48:51,360
we're taking care of the loading screens and we also have wrapped our whole


24847
05:48:51,360 --> 05:48:56,400
authentication process inside a block and we're very now close to being able


24848
05:48:56,400 --> 05:49:00,080
to release our application to the app store apple's app store and google's


24849
05:49:00,080 --> 05:49:02,160
play store so


24850
05:49:02,160 --> 05:49:05,592
this is usually what we do as software developers


24851
05:49:05,592 --> 05:49:10,960
just before releasing our product or we basically go and clean it up as we say


24852
05:49:10,960 --> 05:49:16,080
so we put some final touches to it so even if you're a designer you usually do


24853
05:49:16,080 --> 05:49:20,232
that probably like if you're working with figma or you're working with sketch


24854
05:49:20,232 --> 05:49:24,232
you first are like designing your product and then before you present it


24855
05:49:24,232 --> 05:49:28,160
to the product owner or the developers you probably put some final touches to


24856
05:49:28,160 --> 05:49:34,320
it so um that's what we're gonna do in this chapter and we have um a few things


24857
05:49:34,320 --> 05:49:38,320
also left to do which have nothing really to do with the final touches to


24858
05:49:38,320 --> 05:49:43,120
the ui it's mainly to do with the products functionality and we'll talk


24859
05:49:43,120 --> 05:49:47,040
about that first so if you think about it what we have at


24860
05:49:47,040 --> 05:49:51,440
the moment is um an application that a user can register


24861
05:49:51,440 --> 05:49:55,192
they can't send an email verification they can log in and they can go into the


24862
05:49:55,192 --> 05:49:59,592
list of notes that they have they can create notes delete notes and edit and


24863
05:49:59,592 --> 05:50:04,552
share notes however we haven't really exposed a functionality for a user to be


24864
05:50:04,552 --> 05:50:09,360
able to reset their password so imagine a process imagine an application


24865
05:50:09,360 --> 05:50:14,232
where you've created it created a user in the application and you forgot your


24866
05:50:14,232 --> 05:50:18,320
password and there's absolutely no way for you to get back into the product or


24867
05:50:18,320 --> 05:50:22,000
the software and because you just don't know your password so you


24868
05:50:22,000 --> 05:50:25,440
may then have to personally contact the application developer and say could you


24869
05:50:25,440 --> 05:50:30,800
reset my password so it's a very very difficult process to do manually and you


24870
05:50:30,800 --> 05:50:34,080
shouldn't really do that so what we're going to do


24871
05:50:34,080 --> 05:50:37,832
we're going to do in this chapter is not only to do final ui touches but also


24872
05:50:37,832 --> 05:50:44,080
we're going to create a password reset functionality into our application


24873
05:50:44,080 --> 05:50:48,160
so let's get started with that i'm going to do some screen reshuffling in here as


24874
05:50:48,160 --> 05:50:51,592
you can see in the cache we're going to go delete all users in firebase console


24875
05:50:51,592 --> 05:50:54,872
and also all their data so


24876
05:50:54,872 --> 05:50:58,552
i'm going to bring up console firebase.com and i'm going to bring it


24877
05:50:58,552 --> 05:51:03,360
to the main screen in here let's find our application i believe


24878
05:51:03,360 --> 05:51:06,480
it's this one and i'm then gonna go in here


24879
05:51:06,480 --> 05:51:12,160
to a firebase date the firestore database and let's start by


24880
05:51:12,160 --> 05:51:17,912
going in here and deleting these documents so let's say delete


24881
05:51:17,912 --> 05:51:21,280
document and we have four documents so it's nothing


24882
05:51:21,280 --> 05:51:24,552
so difficult to do just one at a time we delete these


24883
05:51:24,552 --> 05:51:30,232
documents okay here here and those are our documents gone so you


24884
05:51:30,232 --> 05:51:32,960
could just keep your collection i think it's best because our application at the


24885
05:51:32,960 --> 05:51:36,480
moment is assuming that there is a node collection available


24886
05:51:36,480 --> 05:51:41,832
if you remember from our node service so that's that part we deleted the data


24887
05:51:41,832 --> 05:51:45,760
but we haven't really deleted the user so let's go off to authentication


24888
05:51:45,760 --> 05:51:49,592
section of your firebase


24889
05:51:49,592 --> 05:51:52,800
and in here i'm just gonna say delete account


24890
05:51:52,800 --> 05:51:57,512
and let's just delete this account as well so now we're basically starting off


24891
05:51:57,512 --> 05:52:01,192
fresh so no users and no data in the entire


24892
05:52:01,192 --> 05:52:06,080
and back end all right so that's that part let's do that i'm


24893
05:52:06,080 --> 05:52:09,360
going to then bring up our source coding here


24894
05:52:09,360 --> 05:52:12,552
let's see so here


24895
05:52:12,552 --> 05:52:17,512
we have our my notes application as we've called it


24896
05:52:17,512 --> 05:52:21,192
so that's visual studio code i'm going to resize it a little bit and then i'm


24897
05:52:21,192 --> 05:52:25,832
going to bring up scrcpy as well which has our app running at the moment and


24898
05:52:25,832 --> 05:52:28,640
the application thinks at the moment that we're logged in


24899
05:52:28,640 --> 05:52:32,160
because it hasn't really communicated with the back end yet so i'm gonna just


24900
05:52:32,160 --> 05:52:37,280
do a hot restart in here and this is this is the problem that you'll


24901
05:52:37,280 --> 05:52:41,592
sometimes actually notice in the in your application in that


24902
05:52:41,592 --> 05:52:45,360
firebase isn't gonna immediately understand that this user doesn't exist


24903
05:52:45,360 --> 05:52:49,760
on the back end anymore so if you delete a user from your firebase backend it


24904
05:52:49,760 --> 05:52:53,832
doesn't necessarily mean that it's immediately going to be reflected to the


24905
05:52:53,832 --> 05:52:58,232
application so let's see what happens in here if i then log out with this user


24906
05:52:58,232 --> 05:53:03,192
like this and then try to log in with a user that used to exist in the


24907
05:53:03,192 --> 05:53:06,080
application but i just deleted it foo barbado


24908
05:53:06,080 --> 05:53:09,592
and let's see what happens in here and now you can see we see we say user not


24909
05:53:09,592 --> 05:53:14,232
found okay we're gonna clean up that message as well soon in this chapter


24910
05:53:14,232 --> 05:53:18,000
so good we have a clean slate now so we have no users and no data in the


24911
05:53:18,000 --> 05:53:20,720
application um


24912
05:53:20,720 --> 05:53:26,640
so what we need to do now is to start by defining our events and states for


24913
05:53:26,640 --> 05:53:31,120
forgotten password okay so if user says hey i forgot my password we have to have


24914
05:53:31,120 --> 05:53:34,720
an event so that we can send that event


24915
05:53:34,720 --> 05:53:38,800
to our um off block


24916
05:53:38,800 --> 05:53:42,640
so you can see in here we have to go to auth event dark file and add an auth


24917
05:53:42,640 --> 05:53:47,280
event for god password okay so let's go ahead and do that so i'm


24918
05:53:47,280 --> 05:53:52,160
going to open off event dark file and perhaps


24919
05:53:52,160 --> 05:53:56,552
over log out in here we're just going to say class i'm going to increase the size


24920
05:53:56,552 --> 05:54:01,680
in here as well obviously better class um off as we've said in the notes


24921
05:54:01,680 --> 05:54:06,080
here off event forgot password extends off


24922
05:54:06,080 --> 05:54:12,160
event okay just like that and in here we need to grab the user's


24923
05:54:12,160 --> 05:54:15,912
email so we say email like that and i'm gonna create a


24924
05:54:15,912 --> 05:54:19,120
constructor for this as well just like that


24925
05:54:19,120 --> 05:54:25,760
and let's just make this or here with curly brackets okay


24926
05:54:26,160 --> 05:54:29,912
all right so it's a name parameter now um and we just said auth event forgot


24927
05:54:29,912 --> 05:54:32,400
password


24928
05:54:32,480 --> 05:54:37,760
fantastic so that's that part um then we also need to go and define a state


24929
05:54:37,760 --> 05:54:42,400
because when a user presses a button for instance saying i forgot my password


24930
05:54:42,400 --> 05:54:47,192
then our off block is going to produce that state and say hey application that


24931
05:54:47,192 --> 05:54:51,360
your state right now is forgot password and then in the main dart file as you'll


24932
05:54:51,360 --> 05:54:55,912
soon see we will go and edit and add that state to our state handling as you


24933
05:54:55,912 --> 05:55:00,320
can see in your main dart file the moment we have all these states but


24934
05:55:00,320 --> 05:55:05,280
we're going to add a new state that says else if state is off state forgot


24935
05:55:05,280 --> 05:55:11,360
password then display a forgot password view which we're also gonna develop soon


24936
05:55:11,360 --> 05:55:14,800
so as the caption indicates let's go and


24937
05:55:14,800 --> 05:55:20,640
let's go to the file off state dart file and i'm going to do that in my notes as


24938
05:55:20,640 --> 05:55:24,640
well after registering it really doesn't matter where you place that code i'm


24939
05:55:24,640 --> 05:55:28,080
just going to place it here after registering


24940
05:55:28,080 --> 05:55:33,800
and just say off state forgot password


24941
05:55:34,480 --> 05:55:38,000
and off state


24942
05:55:39,680 --> 05:55:42,480
um and then we have to also take care of


24943
05:55:42,480 --> 05:55:44,872
this so


24944
05:55:44,960 --> 05:55:48,720
what should the state actually indicate to the application


24945
05:55:48,720 --> 05:55:53,120
let's say that when you're in the forgot password view which we're soon gonna


24946
05:55:53,120 --> 05:55:56,320
develop um there could be two things that you


24947
05:55:56,320 --> 05:56:02,480
wanna convey to the user in that screen either the user has just landed so there


24948
05:56:02,480 --> 05:56:06,320
are actually three three states that that screen can have


24949
05:56:06,320 --> 05:56:10,720
either the user has just landed on that screen meaning that there is no errors


24950
05:56:10,720 --> 05:56:15,192
nothing we haven't done anything so it's just a clean slate so that's the default


24951
05:56:15,192 --> 05:56:18,640
state of off state forgot password so nothing


24952
05:56:18,640 --> 05:56:23,120
okay however what if the user has actually


24953
05:56:23,120 --> 05:56:25,360
pressed the um


24954
05:56:25,360 --> 05:56:29,280
send reminder email because you see the way we're going to handle for a password


24955
05:56:29,280 --> 05:56:33,280
is we're going to actually ask firebase and say firebase this user forgot their


24956
05:56:33,280 --> 05:56:37,680
password with this email send a reminder email to them or send some kind of like


24957
05:56:37,680 --> 05:56:41,592
an email to them that they can't actually reset their password


24958
05:56:41,592 --> 05:56:47,040
so upon user pressing that button to send a reminder email to their email


24959
05:56:47,040 --> 05:56:50,720
address um a few things can happen


24960
05:56:50,720 --> 05:56:55,512
actually two things that we're going to handle one is that well


24961
05:56:55,512 --> 05:57:00,000
we tried to send an email but it didn't succeed so kind of an exception so


24962
05:57:00,000 --> 05:57:03,040
that's the second state remember no state


24963
05:57:03,040 --> 05:57:07,192
second state is there's an exception and there's a third state that there was no


24964
05:57:07,192 --> 05:57:11,760
exception but we've actually sent the email so three things we have to handle


24965
05:57:11,760 --> 05:57:15,592
okay so the default state with no values is


24966
05:57:15,592 --> 05:57:19,912
state number one nothing has happened state number two would be actually


24967
05:57:19,912 --> 05:57:25,000
having an optional accept exception here


24968
05:57:25,280 --> 05:57:28,720
and the third state is um bull


24969
05:57:28,720 --> 05:57:33,120
has sent email like this okay


24970
05:57:33,592 --> 05:57:36,552
so let me go ahead and create a constructor for these i'm not gonna


24971
05:57:36,552 --> 05:57:39,832
explain this again because we've talked about this quite a lot and i'm gonna


24972
05:57:39,832 --> 05:57:43,280
make these required parameters okay just like that


24973
05:57:43,280 --> 05:57:49,512
and put a semicolon at the end and in here we're just gonna call em


24974
05:57:49,512 --> 05:57:54,400
we're gonna call super but remember from super off states has a constructor here


24975
05:57:54,400 --> 05:58:00,552
that has to provide is loading okay so in in this case let's just actually take


24976
05:58:00,552 --> 05:58:05,192
a bull is loading as well as a parameter in here


24977
05:58:05,192 --> 05:58:10,400
and then we're gonna pass is loading to our super as well just like that


24978
05:58:10,400 --> 05:58:12,720
all right


24979
05:58:12,872 --> 05:58:15,192
so when we're actually working with this


24980
05:58:15,192 --> 05:58:18,800
auth state for that password we can actually give it is loading parameter


24981
05:58:18,800 --> 05:58:23,680
and that's going to get delegated back to off state so our main dart file is


24982
05:58:23,680 --> 05:58:27,912
going to be able to display a loading screen if is loading is true if you


24983
05:58:27,912 --> 05:58:31,440
remember from main dart file we have this beautiful


24984
05:58:31,440 --> 05:58:35,592
block consumer with the listener that that looks at any off state and as long


24985
05:58:35,592 --> 05:58:40,720
as this auth states is loading parameter is true or that auth states is loading


24986
05:58:40,720 --> 05:58:46,000
variable or property is true then it shows the loading screen


24987
05:58:46,000 --> 05:58:49,440
all right perfect so now we've taken care of off state so we didn't make any


24988
05:58:49,440 --> 05:58:53,280
changes in main dart file yet okay


24989
05:58:54,000 --> 05:58:59,120
all right what we need to do is now go to our um auth provider dart file and


24990
05:58:59,120 --> 05:59:04,960
define an interface function for sending a reminder email so


24991
05:59:04,960 --> 05:59:09,280
i'm gonna go and do that right now auth provider


24992
05:59:09,280 --> 05:59:13,192
i'm gonna do it here as well off provider


24993
05:59:13,192 --> 05:59:16,480
okay so let's go ahead and define a function


24994
05:59:16,480 --> 05:59:20,640
that every auth provider including our firebase auth provider has to conform to


24995
05:59:20,640 --> 05:59:26,552
okay so let's say this is a future point and we call it send password


24996
05:59:26,552 --> 05:59:32,232
reset like that and we have a required string parameter to email just like that


24997
05:59:32,232 --> 05:59:35,512
so this is now defined after defining this you'll understand


24998
05:59:35,512 --> 05:59:39,912
now soon that we have a few errors because auth service conforms to auth


24999
05:59:39,912 --> 05:59:43,120
provider and so does firebase auth provider but


25000
05:59:43,120 --> 05:59:48,800
we're gonna fix these soon okay so as the caption indicates let's go to


25001
05:59:48,800 --> 05:59:53,592
firebase auth provider in here and actually implement that so i'm gonna go


25002
05:59:53,592 --> 05:59:57,360
to firebase off


25003
05:59:57,360 --> 06:00:02,000
provider in my notes and i'm also going to go here on the


25004
06:00:02,000 --> 06:00:07,360
screen and say um firebase off provider and you'll see an error in


25005
06:00:07,360 --> 06:00:10,080
here in visual studio code you can actually get help from visual studio


25006
06:00:10,080 --> 06:00:14,000
code to complete that missing overwrite for us you can see create one missing


25007
06:00:14,000 --> 06:00:17,592
override and this is basically saying that you're conforming to auth provider


25008
06:00:17,592 --> 06:00:21,440
but you're not actually overwriting all the functions that boss provider wants


25009
06:00:21,440 --> 06:00:25,280
you to override okay so if you're working with vim or if you're working


25010
06:00:25,280 --> 06:00:30,000
with sublime that doesn't for instance have dart's um


25011
06:00:30,000 --> 06:00:34,720
plugin then you may have to override that function yourself but the signature


25012
06:00:34,720 --> 06:00:37,912
of that function is very easy you can just go to auth provider and grab this


25013
06:00:37,912 --> 06:00:41,912
function and just put a override before it okay so that's


25014
06:00:41,912 --> 06:00:46,320
completely fine as well but since i'm working with and this is asking me to


25015
06:00:46,320 --> 06:00:49,192
save this file but there's pretty much nothing that i did in this file already


25016
06:00:49,192 --> 06:00:52,320
okay so since i have visual studio code i can


25017
06:00:52,320 --> 06:00:55,592
ask it to create the missing override for me and it's gonna probably create it


25018
06:00:55,592 --> 06:00:59,192
right at the bottom in here okay so that's fine


25019
06:00:59,192 --> 06:01:05,440
so let's put this whole thing into a catch block so i'm just gonna say catch


25020
06:01:05,440 --> 06:01:09,832
like this all right and then if anything happens


25021
06:01:09,832 --> 06:01:14,480
during this process of sending a password reset email to the user we're


25022
06:01:14,480 --> 06:01:20,640
just gonna throw a generic auth exception in here okay so


25023
06:01:21,280 --> 06:01:25,680
then um and also if you're wondering about this syntax this is just like you


25024
06:01:25,680 --> 06:01:31,120
ignoring an incoming variable in swift and in rust and some other languages


25025
06:01:31,120 --> 06:01:35,592
like python you could also do something like this that you ignore an incoming


25026
06:01:35,592 --> 06:01:40,720
variable using underscore but in dart it's not really you ignoring ignoring


25027
06:01:40,720 --> 06:01:43,680
the variable it's you naming the variable


25028
06:01:43,680 --> 06:01:48,960
underscore but i try to sometimes use this just to indicate that hey i don't


25029
06:01:48,960 --> 06:01:53,280
care about this variable okay but just know that internally you're not ignoring


25030
06:01:53,280 --> 06:01:59,592
it you're just naming it underscore okay so let's go in here and and now ask our


25031
06:01:59,592 --> 06:02:04,320
provider so um so we just say await since we're in firebase auth provider we


25032
06:02:04,320 --> 06:02:09,192
can actually say wait firebase off oh and we have to mark this function as


25033
06:02:09,192 --> 06:02:14,000
async otherwise we can't use a weight and then instance and then there's a


25034
06:02:14,000 --> 06:02:18,400
function called send password reset email and it it says to which email and


25035
06:02:18,400 --> 06:02:22,080
we're gonna say to this email okay


25036
06:02:22,640 --> 06:02:27,120
all right so that's our catch in there but we also have to have another catch


25037
06:02:27,120 --> 06:02:31,512
that is that catches firebase off exception as we're doing in many other


25038
06:02:31,512 --> 06:02:36,160
places so let's have a look um here for instance okay so let's go


25039
06:02:36,160 --> 06:02:40,552
before this catch and say on firebase off exception


25040
06:02:40,552 --> 06:02:46,160
catch e something like that and then curly brackets and curly


25041
06:02:46,160 --> 06:02:51,512
brackets close so i'm going to bring this code up so we see better


25042
06:02:51,512 --> 06:02:55,440
so there are two things that we have to handle two codes that we have to handle


25043
06:02:55,440 --> 06:02:58,720
as you can see we're handling a few codes in here for instance user not


25044
06:02:58,720 --> 06:03:02,400
found wrong password and these things are basically


25045
06:03:02,400 --> 06:03:05,680
i haven't really found the correct documentation for these things like


25046
06:03:05,680 --> 06:03:10,000
where firebase has documented that these errors are going to happen with these


25047
06:03:10,000 --> 06:03:14,080
codes it's mainly that i found them out through experience just like trying


25048
06:03:14,080 --> 06:03:18,400
different things and seeing that things fail and upon failing i caught their


25049
06:03:18,400 --> 06:03:22,160
error code and now i know which error codes i had to actually have to handle


25050
06:03:22,160 --> 06:03:24,960
but if you search on google i'm pretty sure you're gonna find some good


25051
06:03:24,960 --> 06:03:28,720
documentation about a firebase and the google team are great at documenting


25052
06:03:28,720 --> 06:03:32,720
things so so one error that we have to handle is


25053
06:03:32,720 --> 06:03:36,400
called firebase auth invalid email and the other one call is called firebase


25054
06:03:36,400 --> 06:03:41,832
off user not found so let's first grab the um error code so i'm just going


25055
06:03:41,832 --> 06:03:45,440
to say switch e code in here because remember


25056
06:03:45,440 --> 06:03:49,192
any firebase auth exception that comes from firebase has a code of type string


25057
06:03:49,192 --> 06:03:53,592
as you can see here and that's that string that we're interested in so let's


25058
06:03:53,592 --> 06:03:58,080
handle firebase auth invalid email for now okay


25059
06:03:58,080 --> 06:04:02,800
and then in this case we're just going to say throw um invalid email off


25060
06:04:02,800 --> 06:04:07,680
exception oops we already have this defined from before


25061
06:04:07,680 --> 06:04:11,832
okay in our off exceptions here dark file you


25062
06:04:11,832 --> 06:04:14,400
see and the other case that we have to


25063
06:04:14,400 --> 06:04:18,552
handle is called firebase auth user not found so it's a


25064
06:04:18,552 --> 06:04:23,832
user it's like anyone asking for a reminder email for their password and


25065
06:04:23,832 --> 06:04:27,680
that user just doesn't exist in the database so then we have to handle that


25066
06:04:27,680 --> 06:04:31,360
case as well it's called user not found just like that okay and then we're gonna


25067
06:04:31,360 --> 06:04:36,080
throw a user not found off exception


25068
06:04:36,080 --> 06:04:40,160
in any other case of firebase authexception we're just going to throw


25069
06:04:40,160 --> 06:04:43,592
generic off exception just like that okay


25070
06:04:43,592 --> 06:04:47,040
and we're going to save this file


25071
06:04:48,160 --> 06:04:52,080
fantastic so we fixed firebase auth provider but if you look at your project


25072
06:04:52,080 --> 06:04:55,912
explorer you still have a problem in auth service because if you remember


25073
06:04:55,912 --> 06:04:59,912
auth service also implements auth provider but it delegates all its


25074
06:04:59,912 --> 06:05:06,480
responsibility to its auth provider so let's go into our auth service and


25075
06:05:06,480 --> 06:05:10,320
implement the send password reset functionality so i'm just going to go in


25076
06:05:10,320 --> 06:05:13,760
here and get a visual studio code to complete


25077
06:05:13,760 --> 06:05:17,592
this with command dot on mac or control dot and linux and windows and just say


25078
06:05:17,592 --> 06:05:23,040
create one missing override okay and in here i'm making this an arrow function


25079
06:05:23,040 --> 06:05:27,040
because i believe every other function we've done in here is an error function


25080
06:05:27,040 --> 06:05:29,832
since all these functions inside all servers


25081
06:05:29,832 --> 06:05:33,760
as i've stated before basically delegate their functionality


25082
06:05:33,760 --> 06:05:38,000
to the provider which is given to it inside its


25083
06:05:38,000 --> 06:05:40,872
constructor so let's go ahead and create an error


25084
06:05:40,872 --> 06:05:44,720
function and in here just delegate this to the provider and we just say provider


25085
06:05:44,720 --> 06:05:46,832
send email


25086
06:05:46,832 --> 06:05:52,960
verification and in here we just say um send password resets actually called


25087
06:05:52,960 --> 06:05:59,440
sorry provider send password reset to email to email just like that


25088
06:06:00,160 --> 06:06:03,040
all right and let's just save this file then um


25089
06:06:03,040 --> 06:06:04,960
[Music] so


25090
06:06:04,960 --> 06:06:09,592
what we need to do now is to actually handle our auth event for


25091
06:06:09,592 --> 06:06:13,680
god password in the off box so i understand there's lots of like


25092
06:06:13,680 --> 06:06:17,040
jargons that are flying around here so you may just be a bit confused about


25093
06:06:17,040 --> 06:06:21,360
okay what are we actually doing so what we need to do now is you see


25094
06:06:21,360 --> 06:06:24,640
soon what we're going to do is to create a little button in here


25095
06:06:24,640 --> 06:06:28,640
and say forgot password so when the user


25096
06:06:28,640 --> 06:06:32,320
lands in the login screen they may be like okay this is my email but i


25097
06:06:32,320 --> 06:06:35,440
actually forgot my password so they have to have a forgot password button


25098
06:06:35,440 --> 06:06:38,872
somewhere here upon them pressing that button


25099
06:06:38,872 --> 06:06:43,512
in the login view we're gonna send this event to our off block so if you


25100
06:06:43,512 --> 06:06:47,512
remember from our off event so i'm going to go back here you don't have to go


25101
06:06:47,512 --> 06:06:52,160
here if you go to our off events you can see we have an auth event forgot


25102
06:06:52,160 --> 06:06:56,400
password so the goal is for our user and for


25103
06:06:56,400 --> 06:07:00,872
for our user interface to send this events to the auth block and then off


25104
06:07:00,872 --> 06:07:06,320
block is going to calculate its state based on that okay


25105
06:07:06,320 --> 06:07:12,640
so let's go now into our auth block file here as you can see


25106
06:07:12,640 --> 06:07:17,280
and i'm going to do that here in my code as well and we're going to go


25107
06:07:17,280 --> 06:07:19,912
and implement um


25108
06:07:19,912 --> 06:07:27,192
this functionality here forgot password like this and let's go and say on off


25109
06:07:27,192 --> 06:07:30,552
event forgot password just like that and you


25110
06:07:30,552 --> 06:07:35,192
now should be quite used to this syntax emit


25111
06:07:35,192 --> 06:07:39,592
and this is going to be asynchronous function and just uh curly brackets just


25112
06:07:39,592 --> 06:07:43,440
like that so this is like the bare bones of handling


25113
06:07:43,440 --> 06:07:48,080
an event in your block okay now we're handling off event for a


25114
06:07:48,080 --> 06:07:52,640
god password so what we're gonna do in here is we're just gonna say


25115
06:07:52,640 --> 06:07:57,120
uh by default we're emitting a constant


25116
06:07:57,120 --> 06:08:02,232
off state for a god password exception is null has sent email is


25117
06:08:02,232 --> 06:08:06,232
false and it's loading is false so what we're


25118
06:08:06,232 --> 06:08:10,552
basically saying in here is saying by the user pressing the forgot password


25119
06:08:10,552 --> 06:08:15,760
button what we're doing is saying yeah go to the forgot password screen


25120
06:08:15,760 --> 06:08:20,080
that's all that's all we're saying okay because then our main dart file is gonna


25121
06:08:20,080 --> 06:08:23,280
handle this it's gonna say okay if this date is forgot password i'm just gonna


25122
06:08:23,280 --> 06:08:28,480
go to the forgot password screen okay so then what we're gonna do is we're


25123
06:08:28,480 --> 06:08:33,680
gonna extract the user's email from this event if there is an email in there it


25124
06:08:33,680 --> 06:08:39,680
means that the user was in the fargot password screen and actually press the


25125
06:08:39,680 --> 06:08:45,360
button to send a forgot password email to themselves okay so


25126
06:08:45,360 --> 06:08:49,592
if that's not the case then we know that all the user did is just to go to that


25127
06:08:49,592 --> 06:08:55,040
screen so there is no email to handle so let's just say final and if i can spell


25128
06:08:55,040 --> 06:08:59,512
oops final email is event email and we say if


25129
06:08:59,512 --> 06:09:03,832
email is null then we just return meaning that yeah the user it seems like


25130
06:09:03,832 --> 06:09:08,720
the user just wanted to go to the forgot password screen okay


25131
06:09:09,512 --> 06:09:13,360
so that's that's that now if that is not the case so let's just


25132
06:09:13,360 --> 06:09:18,480
put a comment in here user just wants to go to forgot password


25133
06:09:18,480 --> 06:09:22,480
screen and if we end up in here in line 21 for


25134
06:09:22,480 --> 06:09:30,320
me user wants to actually send a forgot password email okay and in this case


25135
06:09:30,320 --> 06:09:35,040
let's just emit the exact same state as we did before but in this case we're


25136
06:09:35,040 --> 06:09:40,160
saying loading okay remember our main dart file is going to catch all


25137
06:09:40,160 --> 06:09:43,512
the states that have loading and actually display our loading screen or


25138
06:09:43,512 --> 06:09:48,232
the loading um overlay okay so that's that part


25139
06:09:48,232 --> 06:09:51,120
but then what we're gonna do is let's just go in here


25140
06:09:51,120 --> 06:09:56,160
and we have to actually say in here do a try catching here so we say cat on


25141
06:09:56,160 --> 06:09:59,680
exception catch


25142
06:09:59,680 --> 06:10:03,912
like that and since we're in our off block we have


25143
06:10:03,912 --> 06:10:08,800
access to our provider so let's say we wait for the provider to send a password


25144
06:10:08,800 --> 06:10:15,512
reset to the email just like that okay and then we have to enable two variables


25145
06:10:15,512 --> 06:10:23,040
in here we just say boolean did send password or set bits and email


25146
06:10:23,040 --> 06:10:27,680
and just like that and we also have an optional exception


25147
06:10:27,680 --> 06:10:32,960
like this so the goal is we have a try and catch block in here and in the try


25148
06:10:32,960 --> 06:10:36,000
we just say yeah this email was sent successfully


25149
06:10:36,000 --> 06:10:39,512
because yeah if you don't end up in the catch block meaning that there's there


25150
06:10:39,512 --> 06:10:42,800
was no error then the email was actually sent


25151
06:10:42,800 --> 06:10:47,360
successfully and we will also say the exception is basically null so we don't


25152
06:10:47,360 --> 06:10:50,872
have to worry about any of those uh


25153
06:10:50,872 --> 06:10:55,040
functionalities um after this point but remember we are


25154
06:10:55,040 --> 06:11:00,800
basically saving these two variables in here so that after the try and catch


25155
06:11:00,800 --> 06:11:06,400
block we can actually emit an aust state for a password with those variables so


25156
06:11:06,400 --> 06:11:10,480
this thing is going to go in here in oh the documentation it's going to go in


25157
06:11:10,480 --> 06:11:14,480
here and this thing is going to go in here


25158
06:11:14,480 --> 06:11:18,000
okay and it's loading is going to be false so that's why we're basically


25159
06:11:18,000 --> 06:11:22,552
storing them in here so in the positive case in the happy path as we call it


25160
06:11:22,552 --> 06:11:25,592
we're going to say did send email is true


25161
06:11:25,592 --> 06:11:30,320
and we're gonna say exception is no okay and in this case that's an email it's


25162
06:11:30,320 --> 06:11:36,000
gonna be false and exception is gonna be e all right so we store those


25163
06:11:36,000 --> 06:11:42,160
and let's just then copy this state from above and let's just paste it in here


25164
06:11:42,160 --> 06:11:46,960
so in this case we say hey the exception is the exception if any


25165
06:11:46,960 --> 06:11:50,320
um invalid oh yeah it can't be constant if


25166
06:11:50,320 --> 06:11:54,320
it's a variable so um let me bring it here again so you can see exception is


25167
06:11:54,320 --> 06:12:00,000
the exception like that it has sent email is going to be it send


25168
06:12:00,000 --> 06:12:03,040
email and um


25169
06:12:03,040 --> 06:12:08,480
is loading is false so that's it now we are emitting that state to the


25170
06:12:08,480 --> 06:12:11,040
application


25171
06:12:11,280 --> 06:12:15,120
all right so after all of this you see if and now


25172
06:12:15,120 --> 06:12:18,872
that we've handled that event and the state in our offload we also have to


25173
06:12:18,872 --> 06:12:23,040
display some sort of a dialogue to the user so if you're on the reset password


25174
06:12:23,040 --> 06:12:28,400
um screen and you enter you've entered your email and you say hey send me a


25175
06:12:28,400 --> 06:12:32,640
reset um password email after you've done that we're then going


25176
06:12:32,640 --> 06:12:36,800
to display a little dialogue to you and say hey okay we did that we've sent any


25177
06:12:36,800 --> 06:12:40,232
error an email to you go check your email so


25178
06:12:40,232 --> 06:12:43,680
we basically need a dialogue and if you remember we have a generic dialogue


25179
06:12:43,680 --> 06:12:47,832
already so we're just going to reuse that okay so let's go ahead as the


25180
06:12:47,832 --> 06:12:51,040
caption at the bottom of the screen in the case go and create a file under lib


25181
06:12:51,040 --> 06:12:56,480
utilities dialogues called password reset email sends dialog


25182
06:12:56,480 --> 06:13:02,960
so um let's let's go ahead and do that under i'm gonna close this file as well


25183
06:13:02,960 --> 06:13:06,960
have a look at what we have in here and we have utilities


25184
06:13:06,960 --> 06:13:10,800
excuse me dialogs i'm going to create a new file in here


25185
06:13:10,800 --> 06:13:14,400
and just going to call it password reset


25186
06:13:14,400 --> 06:13:20,720
and email send dialogue dot dart okay and so that's the file and we're just


25187
06:13:20,720 --> 06:13:24,080
gonna say this is a future void um show


25188
06:13:24,080 --> 06:13:29,680
password uh reset sent dialogue all right so it's


25189
06:13:29,680 --> 06:13:33,440
a function that just needs a build context


25190
06:13:33,440 --> 06:13:37,040
and we're going to get an error here simply because um i believe


25191
06:13:37,040 --> 06:13:40,232
oh visual studio code imported build context for me automatically that was


25192
06:13:40,232 --> 06:13:45,592
fantastic okay so we're just gonna return show generic


25193
06:13:45,592 --> 06:13:49,760
dialogue okay and you can see this is also gonna be auto imported we've


25194
06:13:49,760 --> 06:13:54,800
already had this function from before so let me put a comma here and a


25195
06:13:54,800 --> 06:14:00,000
semicolon at the end just to get the um dart formatter to format my code and i'm


25196
06:14:00,000 --> 06:14:04,400
just going to in here say this is a generic void function okay


25197
06:14:04,400 --> 06:14:08,960
and for title we're just going to say password reset like that with a capital


25198
06:14:08,960 --> 06:14:13,360
r and the content is also string we can say we have now sent


25199
06:14:13,360 --> 06:14:17,040
you a password a reset


25200
06:14:17,040 --> 06:14:20,720
link so like this please check your


25201
06:14:20,720 --> 06:14:24,960
email for more information something like that okay and you can


25202
06:14:24,960 --> 06:14:28,640
change the string if you want and for the options it's an error


25203
06:14:28,640 --> 06:14:33,592
function that has to return a map and it has only one button with the value of


25204
06:14:33,592 --> 06:14:37,280
null and that's it okay


25205
06:14:38,320 --> 06:14:43,192
all right so that's our show password reset sends dialog um


25206
06:14:43,192 --> 06:14:47,592
now what we have to do we also have to develop the actual view for password


25207
06:14:47,592 --> 06:14:50,800
reset so as the caption at the bottom of the


25208
06:14:50,800 --> 06:14:53,592
screen indicates we're gonna go to lib views


25209
06:14:53,592 --> 06:14:58,320
and we're gonna go here you see lib views and under views we're gonna create


25210
06:14:58,320 --> 06:15:01,912
a view called forgot password view so let me go ahead and do that forgot


25211
06:15:01,912 --> 06:15:08,320
password view dot dart okay and i'm gonna go into my notes as well i


25212
06:15:08,320 --> 06:15:13,360
forgot the password view okay but we're gonna create a stateful widget


25213
06:15:13,360 --> 06:15:16,800
in here so that's actually quite a bit of code that we have to we have to write


25214
06:15:16,800 --> 06:15:20,872
but we're gonna take care of that so it's not a problem so let's go to forgot


25215
06:15:20,872 --> 06:15:24,640
password view and the first thing i'm going to do is to create a stateful


25216
06:15:24,640 --> 06:15:28,640
widget with stf in visual studio code i'm just going to call forgot password


25217
06:15:28,640 --> 06:15:33,592
view just like that and since we need a text field on the


25218
06:15:33,592 --> 06:15:38,160
screen and so that the user can enter their uh email address just like we're


25219
06:15:38,160 --> 06:15:43,760
doing in the login view let's go ahead and create a text editing controller but


25220
06:15:43,760 --> 06:15:46,480
before all of that we also have to import materials so that we get rid of


25221
06:15:46,480 --> 06:15:50,080
all these errors that are on the screen right now so let's go in here and just


25222
06:15:50,080 --> 06:15:53,440
create a text editing controller so late final


25223
06:15:53,440 --> 06:15:57,760
text editing controller and let's just call it controller


25224
06:15:57,760 --> 06:16:00,400
and you remember this pattern from before so i don't have to explain it


25225
06:16:00,400 --> 06:16:04,160
again so we go into init state inside in its state we create the


25226
06:16:04,160 --> 06:16:07,760
controller so we say it's a text editing controller oops


25227
06:16:07,760 --> 06:16:11,832
text editing controller and


25228
06:16:11,832 --> 06:16:15,680
in dispose we just dispose of it basically so controller dot displays


25229
06:16:15,680 --> 06:16:18,800
okay so that's just a boilerplate there's nothing


25230
06:16:18,800 --> 06:16:23,192
magical happening in here we're just preparing that view okay


25231
06:16:23,192 --> 06:16:27,760
so what we need to do also in here we're going to create inside this build


25232
06:16:27,760 --> 06:16:32,720
function we're going to return a block listener because


25233
06:16:32,720 --> 06:16:37,192
based on the various states of auth state forgot password so let's go to


25234
06:16:37,192 --> 06:16:41,592
auth state or god password here based on various


25235
06:16:41,592 --> 06:16:46,640
states of this we may have to show or hide different things for instance


25236
06:16:46,640 --> 06:16:51,120
if um if we know that the has sent email


25237
06:16:51,120 --> 06:16:56,960
boolean flag is true then we're gonna basically clear the text fields value


25238
06:16:56,960 --> 06:17:02,232
using the controller's clear function and we're also going to display that


25239
06:17:02,232 --> 06:17:06,080
dialogue that we just wrote has sent email


25240
06:17:06,080 --> 06:17:09,040
blah blah dialogue


25241
06:17:09,040 --> 06:17:14,320
it was a long name it was let's see in our dialogues


25242
06:17:14,320 --> 06:17:19,360
uh where is it in our dialogues if i can find it it should be under utilities


25243
06:17:19,360 --> 06:17:22,720
dialogues and then we we should be called a password recent email sends


25244
06:17:22,720 --> 06:17:26,080
dialogue okay so we're going to display that


25245
06:17:26,080 --> 06:17:32,232
and that is why we need a listener so inside this build in here what we're


25246
06:17:32,232 --> 06:17:36,552
going to do is just going to say we return um a block listener and this


25247
06:17:36,552 --> 06:17:41,912
needs to be auto imported as you can see and this block listener actually listens


25248
06:17:41,912 --> 06:17:46,400
for off block which also needs to be auto imported so there's lots of imports


25249
06:17:46,400 --> 06:17:50,720
and if you don't have a good text editor like visual studio code unfortunately


25250
06:17:50,720 --> 06:17:55,120
you'll have to import all these by hand and that's just a huge time waste direct


25251
06:17:55,120 --> 06:17:59,760
oxy so i don't usually give advice but um


25252
06:17:59,760 --> 06:18:05,120
my advice here at least because i think it's so important is to get yourself a


25253
06:18:05,120 --> 06:18:09,280
good text editor because it makes development a lot easier if you have


25254
06:18:09,280 --> 06:18:13,912
like visual studio code so we have off block and then the second


25255
06:18:13,912 --> 06:18:17,832
and generic parameter is off state which also needs to be auto imported so


25256
06:18:17,832 --> 06:18:21,512
there's if you look at the top of the file there's quite a few um imports


25257
06:18:21,512 --> 06:18:25,912
already that i didn't have to do manually and so we have a listener let's


25258
06:18:25,912 --> 06:18:30,000
get help from visual studio to complete the listener and we also have a little


25259
06:18:30,000 --> 06:18:34,800
um let's see we have a child in our block listener that we can return so in


25260
06:18:34,800 --> 06:18:39,760
here for now let's just say we return a scaffold as a constant all right so


25261
06:18:39,760 --> 06:18:43,760
but we can now work on our listener first


25262
06:18:43,760 --> 06:18:47,192
so inside the listener the only thing we're the only state that we're


25263
06:18:47,192 --> 06:18:50,552
interested in because this is going to return any off state to us as they


25264
06:18:50,552 --> 06:18:56,400
change we're only interested in um if state if i can spell


25265
06:18:56,400 --> 06:19:01,592
is off state forgot password so that's the only state we're interested in


25266
06:19:01,592 --> 06:19:05,912
and then we say if state has sent email then we're going to control go to


25267
06:19:05,912 --> 06:19:10,720
controller and say clear and then we're gonna await on and


25268
06:19:10,720 --> 06:19:15,912
displaying the dialogue so async and then we're gonna say await


25269
06:19:16,160 --> 06:19:21,280
and i forgot the name of our huge file in here again utilities dialogs and


25270
06:19:21,280 --> 06:19:24,872
password reset email so i'm going to grab this the name of this function at


25271
06:19:24,872 --> 06:19:27,912
least okay so i grab the name of that function


25272
06:19:27,912 --> 06:19:32,480
paste it in here and get visual studio code to auto import it for me okay


25273
06:19:32,480 --> 06:19:36,232
and in here the only thing we have to do is just to pass the context in there so


25274
06:19:36,232 --> 06:19:40,000
if the email was sent the password reset was sent and we're going to say clear


25275
06:19:40,000 --> 06:19:44,080
the text on the screen on the controller and then show the dialog telling the


25276
06:19:44,080 --> 06:19:49,360
user hey we sent an email to you okay however if there's


25277
06:19:49,360 --> 06:19:53,120
um exception like this


25278
06:19:53,120 --> 06:19:57,192
then what we're gonna do is to display an error to the user so we're just gonna


25279
06:19:57,192 --> 06:20:01,592
say await show error dialog


25280
06:20:01,592 --> 06:20:04,872
and i think that also got auto imported again


25281
06:20:04,872 --> 06:20:07,512
you see so then we're going to say error dialog


25282
06:20:07,512 --> 06:20:12,720
with that context and then we're going to say we could not process


25283
06:20:13,120 --> 06:20:17,440
your request please make sure that you are a


25284
06:20:17,440 --> 06:20:25,280
registered user or something like that um and we can say


25285
06:20:25,280 --> 06:20:28,160
please make sure that you're a registered user


25286
06:20:28,160 --> 06:20:32,552
or if not and a user


25287
06:20:32,552 --> 06:20:37,912
um or or if not register a user now by


25288
06:20:37,912 --> 06:20:42,552
going back one step okay so this is just some text i mean you


25289
06:20:42,552 --> 06:20:45,192
don't have to write this text it's just basically saying that if you're in the


25290
06:20:45,192 --> 06:20:47,912
forgot password screen and you're saying that hey i


25291
06:20:47,912 --> 06:20:51,280
forgot my password it's my email if we can't find that email if there's an


25292
06:20:51,280 --> 06:20:53,592
exception for instance then


25293
06:20:53,592 --> 06:20:58,080
um we're gonna display this message and say hey you may not be a registered user


25294
06:20:58,080 --> 06:21:02,160
do you want to go back and register yourself


25295
06:21:02,160 --> 06:21:05,280
so and remember in here you could be you


25296
06:21:05,280 --> 06:21:08,720
could try to be more fine-grained because remember our exceptions in here


25297
06:21:08,720 --> 06:21:12,552
off state exception in the case of auth state forgot password


25298
06:21:12,552 --> 06:21:17,360
if you go to our off block um off block


25299
06:21:17,360 --> 06:21:21,760
in this case remember the exceptions come from the send password reset so


25300
06:21:21,760 --> 06:21:24,800
this send password reset if you go to our


25301
06:21:24,800 --> 06:21:28,800
firebase auth provider send password reset oh my god where did


25302
06:21:28,800 --> 06:21:31,360
i end up um no


25303
06:21:31,360 --> 06:21:36,400
firebase auth provider in this case those exceptions could be


25304
06:21:36,400 --> 06:21:41,512
invalid email or user not found so you could actually try to be clean and in


25305
06:21:41,512 --> 06:21:45,512
your auth sorry in your forgot password view and actually check what kind of


25306
06:21:45,512 --> 06:21:49,512
exception that is so i actually think it's it's better if you do that i'm not


25307
06:21:49,512 --> 06:21:53,360
going to do that in for the sake of just saving some time but you may decide to


25308
06:21:53,360 --> 06:21:57,680
go ahead and do that and i encourage you actually excuse me


25309
06:21:57,680 --> 06:22:01,360
to do something like that if you want to


25310
06:22:03,512 --> 06:22:07,440
so what we need to do now um


25311
06:22:07,440 --> 06:22:11,680
is we've done the listener so that's really good but in the child we actually


25312
06:22:11,680 --> 06:22:16,720
have to create um we have to create a um proper scaffold


25313
06:22:16,720 --> 06:22:20,232
so let's go ahead and remove the consonant


25314
06:22:20,232 --> 06:22:22,872
in here because at the end we're not going to end up with a constant scaffold


25315
06:22:22,872 --> 06:22:26,080
it's very rare that you'd end up with a constant scaffold


25316
06:22:26,080 --> 06:22:29,440
and in the app bar i'm just going to say we have an app bar


25317
06:22:29,440 --> 06:22:33,592
in here and it has a title and the title is just


25318
06:22:33,592 --> 06:22:39,680
going to be constant text and we're just gonna say forgot password


25319
06:22:39,680 --> 06:22:42,480
okay some commas in there to get the


25320
06:22:42,480 --> 06:22:46,720
formatting correctly and in the body we're gonna


25321
06:22:46,720 --> 06:22:50,552
create a column this is what i usually like to do create


25322
06:22:50,552 --> 06:22:54,480
a column and then i'm going to wrap it in some padding like this and let's just


25323
06:22:54,480 --> 06:22:58,480
say padding of 16 as well okay


25324
06:22:58,960 --> 06:23:01,592
so then


25325
06:23:01,592 --> 06:23:05,680
that's that's basically our main focus in here so we need to work on


25326
06:23:05,680 --> 06:23:10,480
a little column in your forgot password view


25327
06:23:10,552 --> 06:23:14,160
so now we have that as the first child of the column we're going to add a


25328
06:23:14,160 --> 06:23:18,640
little const of text in here and to tell the user actually what they


25329
06:23:18,640 --> 06:23:20,960
should do in this screen so let's just say


25330
06:23:20,960 --> 06:23:25,832
and i'm going to grab the text that i had prepared from before


25331
06:23:25,832 --> 06:23:30,480
and paste it in here so i don't have to actually write this thing again so uh


25332
06:23:30,480 --> 06:23:37,120
let's see why is it complaining what is the actual error um too many


25333
06:23:37,120 --> 06:23:40,400
positional arguments okay i've messed up something in here


25334
06:23:40,400 --> 06:23:44,640
right of course because in the column i added actually didn't say children


25335
06:23:44,640 --> 06:23:49,832
so let me remove this children inside the children first i'm


25336
06:23:49,832 --> 06:23:53,832
going to put this text okay so if you have the same problem like me it's


25337
06:23:53,832 --> 06:23:57,760
because you place the text right inside the column and that's not okay we have


25338
06:23:57,760 --> 06:24:01,680
to put it inside children property of the column okay


25339
06:24:01,680 --> 06:24:04,872
and we're going to create a text field right after this where the user can


25340
06:24:04,872 --> 06:24:10,480
actually enter their email address so let's say text um text field


25341
06:24:11,120 --> 06:24:15,832
and in here let's see yeah but we don't have a comma at the end of


25342
06:24:15,832 --> 06:24:19,192
this either so i'm going to put a comma in here okay text field so the screen


25343
06:24:19,192 --> 06:24:22,800
looks a little bit scary right now it's just because it thinks that it has to be


25344
06:24:22,800 --> 06:24:27,360
a constant but it's not a constant so these little warnings are gonna soon


25345
06:24:27,360 --> 06:24:31,360
disappear okay so let's say keyboard type and it's a


25346
06:24:31,360 --> 06:24:35,512
text input type so i'm gonna say text input type


25347
06:24:35,512 --> 06:24:41,592
email address okay autocorrect on email fields always has


25348
06:24:41,592 --> 06:24:44,800
to be false okay you don't want autocorrect on email fields it's very


25349
06:24:44,800 --> 06:24:47,912
annoying and we autofocus as well so that when


25350
06:24:47,912 --> 06:24:53,120
the user ends up on that screen the textville is automatically focused on


25351
06:24:53,120 --> 06:24:56,800
and then we put a controller and after this the problem with the constants is


25352
06:24:56,800 --> 06:25:01,040
gonna go away so that's fantastic um and then let's


25353
06:25:01,040 --> 06:25:06,720
just go and create a little decoration with a hint so we just say const


25354
06:25:06,720 --> 06:25:11,760
input decoration and we're going to say hint text is


25355
06:25:11,760 --> 06:25:16,320
your email address like this okay


25356
06:25:16,480 --> 06:25:19,592
so that's that part now we've created the text field


25357
06:25:19,592 --> 06:25:24,080
after this we actually need to have a text button we actually need two of them


25358
06:25:24,080 --> 06:25:27,120
so i'm going to say text button [Music]


25359
06:25:27,120 --> 06:25:30,320
like this and inside the text button on the first


25360
06:25:30,320 --> 06:25:34,552
one it's going to it's going to be the actual cta call to action meaning that


25361
06:25:34,552 --> 06:25:37,760
when the users enter their email address then they're going to press this button


25362
06:25:37,760 --> 06:25:40,960
and this upon pressing this button we're going to send


25363
06:25:40,960 --> 06:25:46,320
the email to them okay so let's say i'm pressed and this is an empty function


25364
06:25:46,320 --> 06:25:50,872
just like this for now and its child is just going to be const of text


25365
06:25:50,872 --> 06:25:55,280
and we're gonna send send me password reset link


25366
06:25:55,280 --> 06:25:59,760
like this so that's the first i'm gonna copy this


25367
06:25:59,760 --> 06:26:04,480
text button actually and paste it again right after that and in here we're just


25368
06:26:04,480 --> 06:26:06,800
gonna say back to


25369
06:26:06,800 --> 06:26:11,512
login the login page and in here we actually have this functionality from


25370
06:26:11,512 --> 06:26:17,040
before in our auth blog so let's just go inside this and say context read or off


25371
06:26:17,040 --> 06:26:21,832
block from the context and then we're gonna add an event in here and say off


25372
06:26:21,832 --> 06:26:28,400
event login so actually sorry log out


25373
06:26:28,640 --> 06:26:32,552
so this is gonna send the user to the login page okay so that's the second


25374
06:26:32,552 --> 06:26:36,960
button handle already and in the first button let's just grab


25375
06:26:36,960 --> 06:26:41,280
the user's email so let's just say email is controller


25376
06:26:41,280 --> 06:26:43,592
text and


25377
06:26:43,592 --> 06:26:47,360
in here we're then going to tell the off block that it has to send a password


25378
06:26:47,360 --> 06:26:51,592
reset to this email so we're just going to say context dot read off block from


25379
06:26:51,592 --> 06:26:55,832
the context and we're going to add and we're going to say off


25380
06:26:55,832 --> 06:27:00,552
event forgot password


25381
06:27:00,552 --> 06:27:06,232
and the email is email just like that all right


25382
06:27:06,960 --> 06:27:10,080
well that's it actually in this case maybe


25383
06:27:10,080 --> 06:27:14,080
yeah it's cleaner not to have a comma in there because if i put a comma then it


25384
06:27:14,080 --> 06:27:17,360
formats a code like this but without having formats like this which to me in


25385
06:27:17,360 --> 06:27:22,872
my opinion is a little bit cleaner okay so i think now we've implemented that so


25386
06:27:22,872 --> 06:27:27,280
this screen should be ready our forgot password view


25387
06:27:27,280 --> 06:27:31,120
so as a caption now at the bottom of the screen in the case we need to go and


25388
06:27:31,120 --> 06:27:36,552
look for the off state for god password and return for god password view in main


25389
06:27:36,552 --> 06:27:40,240
dark file so i'm gonna go to main dark file um


25390
06:27:40,240 --> 06:27:44,000
[Music] so let's let me close this and close


25391
06:27:44,000 --> 06:27:48,000
this and let's go to main dart file and we are handling already quite a lot of


25392
06:27:48,000 --> 06:27:52,800
states and right after here login view excuse me


25393
06:27:52,800 --> 06:27:57,360
let's then say else if state is off state for a god


25394
06:27:57,360 --> 06:28:01,440
password just like that curly brackets


25395
06:28:01,440 --> 06:28:04,400
and in here then we're going to say return


25396
06:28:04,400 --> 06:28:09,680
const forgot password view and this is going to be also imported as well okay


25397
06:28:09,680 --> 06:28:14,480
so that's it oh um


25398
06:28:14,480 --> 06:28:20,000
that's that's that part uh our forgot password


25399
06:28:20,000 --> 06:28:23,192
and what we also need to do is to make sure


25400
06:28:23,192 --> 06:28:29,512
inside our login view so let's go into our login view now


25401
06:28:29,512 --> 06:28:34,000
we need to have a little button in here that allows the user to go to the


25402
06:28:34,000 --> 06:28:38,400
foreground password view so we're gonna add that in here so i'm just gonna


25403
06:28:38,400 --> 06:28:42,000
create another text button so copy the text button that you have at the bottom


25404
06:28:42,000 --> 06:28:46,640
and paste it in between in here okay and in this text right now we're just going


25405
06:28:46,640 --> 06:28:51,912
to say i forgot my password like this and in here let's just send off event


25406
06:28:51,912 --> 06:28:55,832
for that password okay


25407
06:28:55,832 --> 06:29:00,400
so now if i press the command s button to hot reload you can see i forgot my


25408
06:29:00,400 --> 06:29:04,800
password displayed here and we press it and at the moment actually nothing is


25409
06:29:04,800 --> 06:29:08,800
happening it's probably because we changed our main dart file and we


25410
06:29:08,800 --> 06:29:13,680
haven't done hot reload so sorry hot restart so i do a hot restart now and i


25411
06:29:13,680 --> 06:29:16,960
say i forgot my password you can see we end up in this screen that we just


25412
06:29:16,960 --> 06:29:21,040
developed and then you have the avail ability to send a


25413
06:29:21,040 --> 06:29:27,192
um reminder email and if you say back to login page then logout is sent and you


25414
06:29:27,192 --> 06:29:31,360
end up in here okay so that is working now


25415
06:29:31,360 --> 06:29:34,720
um now what we need to do also in a login


25416
06:29:34,720 --> 06:29:38,720
view dart in here so let's go to login view dart


25417
06:29:38,720 --> 06:29:43,440
and have a look at how we're handling this user not found at the moment and we


25418
06:29:43,440 --> 06:29:47,120
have just user not found but if you think about it there is going to be


25419
06:29:47,120 --> 06:29:52,320
people from both apple and google who will test your application when you send


25420
06:29:52,320 --> 06:29:56,640
it to app store and uh google play store so just saying user


25421
06:29:56,640 --> 06:30:00,400
not found is a little bit it's i don't want to say it's wrong but


25422
06:30:00,400 --> 06:30:06,320
it's just not fully encompassing what could what the problem


25423
06:30:06,320 --> 06:30:08,552
could actually be so


25424
06:30:08,552 --> 06:30:12,552
saying user not found is like the bare minimum of what we could convey to our


25425
06:30:12,552 --> 06:30:16,480
user so let's just make that better by having a little bit better


25426
06:30:16,480 --> 06:30:20,960
text in here so i'm just going to write this text that i had from before so we


25427
06:30:20,960 --> 06:30:24,640
it's better just to say cannot find a user with the entered credentials okay


25428
06:30:24,640 --> 06:30:30,160
just a little bit better message as now that we're we've basically done


25429
06:30:30,160 --> 06:30:34,800
the forgot password where we're going into the cleanup state so we're adding


25430
06:30:34,800 --> 06:30:38,960
some final ui touches to our application to make it look better so as the caption


25431
06:30:38,960 --> 06:30:42,800
indicates let's go into login view and add a padding in here you see we just


25432
06:30:42,800 --> 06:30:47,512
have a column and it kind of looks like edge to edge it's not so professional so


25433
06:30:47,512 --> 06:30:51,832
let's just add a padding in here i'm just going to say wrap with padding


25434
06:30:51,832 --> 06:30:55,912
and we're just going to say padding of 16 in here okay so it looks a little bit


25435
06:30:55,912 --> 06:30:59,040
nicer in my opinion at least looks cleaner okay even if you're doing


25436
06:30:59,040 --> 06:31:02,960
website development you're inherited um


25437
06:31:02,960 --> 06:31:07,192
for instance elements on the screen they have like your user agent has some


25438
06:31:07,192 --> 06:31:11,192
padding already or margins built in to inherited widgets it's our inherited


25439
06:31:11,192 --> 06:31:15,040
element so um unless you go and change your css so


25440
06:31:15,040 --> 06:31:20,160
this is kind of us adding that um padding in our elements in the flutter


25441
06:31:20,160 --> 06:31:23,760
application so the next thing that we need to do in


25442
06:31:23,760 --> 06:31:26,800
here you can see in the login page at the moment it's just on the top says


25443
06:31:26,800 --> 06:31:30,480
login and enter your email blah blah but it doesn't actually give the user any


25444
06:31:30,480 --> 06:31:33,912
instructions you see here in the i forgot my password we're giving the user


25445
06:31:33,912 --> 06:31:38,080
some instructions on what he or she has to do but in the login page we're not so


25446
06:31:38,080 --> 06:31:42,400
let's go ahead and remedy that and just add a text on top of the screen i'm


25447
06:31:42,400 --> 06:31:46,480
going to paste that text from what i had before inside the children of this


25448
06:31:46,480 --> 06:31:50,720
column and we're just saying please log into your account blah blah


25449
06:31:50,720 --> 06:31:54,800
and you'll see now that appear here just makes it look a little bit nicer in my


25450
06:31:54,800 --> 06:31:58,552
opinion and


25451
06:31:58,552 --> 06:32:03,832
we've already now fixed this and going from the login view to our


25452
06:32:03,832 --> 06:32:08,400
forgot password we've already added that in here as you can see so this element


25453
06:32:08,400 --> 06:32:10,960
at the bottom of the screen this caption is already addressed we don't have to do


25454
06:32:10,960 --> 06:32:15,192
anything special about that now let's go to


25455
06:32:15,192 --> 06:32:20,000
register view as you can see our have you broken the register view not


25456
06:32:20,000 --> 06:32:24,160
registered yet i can see that that button at the moment isn't working so


25457
06:32:24,160 --> 06:32:29,440
let's see what we've broken event should register okay


25458
06:32:29,440 --> 06:32:34,232
and inside our off block event should register i can see we


25459
06:32:34,232 --> 06:32:37,760
haven't even handled off event should register so


25460
06:32:37,760 --> 06:32:40,800
that's we need to definitely do that right now


25461
06:32:40,800 --> 06:32:45,192
so let's go to off block and um


25462
06:32:45,192 --> 06:32:51,120
have a look at handling our um i'm gonna remove this caption right now


25463
06:32:51,120 --> 06:32:55,280
because that's not what we're working on right now so let's go to our off block


25464
06:32:55,280 --> 06:33:00,320
i'm going to maybe actually add that so um


25465
06:33:00,320 --> 06:33:04,000
as a caption so that it is clear


25466
06:33:04,000 --> 06:33:09,760
what we're working on right now okay so let's go to our auth block and say on


25467
06:33:09,760 --> 06:33:14,960
this event and let's just say event and emit


25468
06:33:14,960 --> 06:33:19,680
just like that and what we're doing in here is to say


25469
06:33:19,680 --> 06:33:25,120
we're now emitting constant off state registering


25470
06:33:25,120 --> 06:33:29,592
okay and there is no exception and there is no loading so false just like that


25471
06:33:29,592 --> 06:33:34,000
okay and a comma here to get the formatting working so now let's press


25472
06:33:34,000 --> 06:33:37,592
hot restart because remember you're changing your auth block which is being


25473
06:33:37,592 --> 06:33:42,720
provided in your in to your entire application in the main dart file so


25474
06:33:42,720 --> 06:33:47,360
main dart here so you can see in here it's the


25475
06:33:47,360 --> 06:33:51,832
block provider that is basically creating the off block so if you change


25476
06:33:51,832 --> 06:33:54,800
anything in your off block you may actually have to do a hot restart okay


25477
06:33:54,800 --> 06:33:58,800
for those changes to take effect for app for entire applications so not


25478
06:33:58,800 --> 06:34:02,552
registered yet pressing it goes to the register view okay


25479
06:34:02,552 --> 06:34:06,640
so as the next point that we have to handle here is to add some padding to


25480
06:34:06,640 --> 06:34:10,720
our register view as you can see in here our register view


25481
06:34:10,720 --> 06:34:13,280
at the moment looks like this we have the register button and already


25482
06:34:13,280 --> 06:34:17,912
registered button buttons right here but we don't have any padding around our


25483
06:34:17,912 --> 06:34:20,800
register view so let's go ahead and take care of that so i'm going to go to


25484
06:34:20,800 --> 06:34:23,680
register view here and


25485
06:34:23,680 --> 06:34:27,912
let's go ahead then and wrap this column that is


25486
06:34:27,912 --> 06:34:31,192
at the moment in here and just say wrap it with padding as the caption at the


25487
06:34:31,192 --> 06:34:34,720
bottom of the screen says we're going to add a padding of 16. so


25488
06:34:34,720 --> 06:34:39,040
you can see now we have some padding in there and soon just like in the login


25489
06:34:39,040 --> 06:34:42,320
view we're going to add some text to the top of the register view so what we need


25490
06:34:42,320 --> 06:34:46,720
to do is just to ensure that deleting that their text inside this column is


25491
06:34:46,720 --> 06:34:50,960
actually pat it's and it's basically sticking to the left side of the column


25492
06:34:50,960 --> 06:34:54,720
because by default all the components that you place inside your column are


25493
06:34:54,720 --> 06:35:00,552
vertically aligned and no sorry they're horizontally aligned in the main axis of


25494
06:35:00,552 --> 06:35:03,592
your of your um


25495
06:35:03,592 --> 06:35:07,592
column so if you that's what i mean like if the column what i mean is that the


25496
06:35:07,592 --> 06:35:12,960
column is expanding to the entire space uh real state and then all the


25497
06:35:12,960 --> 06:35:16,480
components that you're placing inside your column they're horizontally aligned


25498
06:35:16,480 --> 06:35:20,400
in inside the column so that's actually a better way of probably


25499
06:35:20,400 --> 06:35:24,320
saying it so and what we need to do in here let's just go and say uh inside the


25500
06:35:24,320 --> 06:35:27,512
column as you can see in the caption at the bottom screen we're going to say


25501
06:35:27,512 --> 06:35:31,120
cross axis alignment we're going to say cross axis alignment


25502
06:35:31,120 --> 06:35:35,512
start if i save this and go back to the register viewer you're seeing this in


25503
06:35:35,512 --> 06:35:40,720
here basically like that and what we're going to do then is to um


25504
06:35:40,720 --> 06:35:46,960
is to add a title to our column so i've already added that before so let me


25505
06:35:46,960 --> 06:35:50,872
bring that up so uh


25506
06:35:50,872 --> 06:35:55,440
i'm going to add a little title to the first item inside the register view so


25507
06:35:55,440 --> 06:35:59,592
it looks like this but we also now that we've done that i mean we want our text


25508
06:35:59,592 --> 06:36:02,480
field to be left aligned that's why we added this cross access alignment but


25509
06:36:02,480 --> 06:36:06,160
we've kind of messed up the alignment of our buttons in here so we need to kind


25510
06:36:06,160 --> 06:36:11,912
of wrap them inside centers so what we could do is to inside you see we


25511
06:36:11,912 --> 06:36:16,232
have two elements in here but we don't want to wrap both of them in their own


25512
06:36:16,232 --> 06:36:20,320
centers so what we could do is just to say wrap um this


25513
06:36:20,320 --> 06:36:24,552
text button inside a column then we put the other text button also


25514
06:36:24,552 --> 06:36:31,280
inside the column right here and then we will wrap this column


25515
06:36:31,280 --> 06:36:37,040
inside a center so wrap this column then inside a center just like that


25516
06:36:37,040 --> 06:36:40,720
so if you go back to our register view now we have a nice little layout


25517
06:36:40,720 --> 06:36:45,192
displayed there so we've taken care of that we've taken


25518
06:36:45,192 --> 06:36:49,280
care of the title of our application and what we also need to do is to make


25519
06:36:49,280 --> 06:36:52,640
sure when we come to the register view um


25520
06:36:52,640 --> 06:36:58,000
that we are auto focusing on our uh text field in here


25521
06:36:58,000 --> 06:37:03,440
so let's go inside the effects if the first text field and um


25522
06:37:03,440 --> 06:37:07,680
and right after auto correcting here we're gonna say um


25523
06:37:07,680 --> 06:37:11,592
autofocus true so when i press save in here and i


25524
06:37:11,592 --> 06:37:14,800
go to the register screen you can see that the keyboard pops up automatically


25525
06:37:14,800 --> 06:37:19,832
auto focusing on the first email field right there


25526
06:37:20,640 --> 06:37:25,592
okay now we also have a little problem in here and that is


25527
06:37:25,592 --> 06:37:29,760
that we haven't fixed our tests as you can see in here


25528
06:37:29,760 --> 06:37:33,440
implement send password reset and mock auth provider


25529
06:37:33,440 --> 06:37:37,512
and throw i can see there's a spelling error in the caption i'm going to fix


25530
06:37:37,512 --> 06:37:40,872
that right away um


25531
06:37:40,960 --> 06:37:44,320
like that i apologize for that um


25532
06:37:44,320 --> 06:37:50,160
and that is here so let's go and fix our test so i want you to please go to us


25533
06:37:50,160 --> 06:37:54,720
testing here and you'll see that we have an error here telling us in mock auth


25534
06:37:54,720 --> 06:37:58,320
provider saying that we haven't implemented the last function that we


25535
06:37:58,320 --> 06:38:01,760
just added to our off provider called send password reset


25536
06:38:01,760 --> 06:38:06,960
so let's go in here and just ask it to oops ask it to


25537
06:38:06,960 --> 06:38:11,912
create that missing override and what we're going to do for this


25538
06:38:11,912 --> 06:38:15,912
exercise at the moment is just we're gonna leave this as it is on implemented


25539
06:38:15,912 --> 06:38:20,000
error and i actually encourage you to go and do an implementation for the send


25540
06:38:20,000 --> 06:38:23,040
password reset you may for instance do some


25541
06:38:23,040 --> 06:38:28,800
mock and password reset do some future uh delayed a weight on it and change


25542
06:38:28,800 --> 06:38:32,320
some states in your provider if you want to you're more welcome to do that so you


25543
06:38:32,320 --> 06:38:36,160
could just take this as an exercise but we're just going to leave it like this


25544
06:38:36,160 --> 06:38:40,160
for now but i highly encourage you to actually write some tests for this as


25545
06:38:40,160 --> 06:38:43,680
well so we've now done quite a lot of work


25546
06:38:43,680 --> 06:38:47,360
we've done quite a lot of reshuffling things around what we could do is just


25547
06:38:47,360 --> 06:38:51,360
to have a look at the entire app and see how it kind of looks like so i'm gonna


25548
06:38:51,360 --> 06:38:55,192
do a hot restart and we end up in here you can see our


25549
06:38:55,192 --> 06:39:00,232
login screen works fine and if we try to log in with a user that


25550
06:39:00,232 --> 06:39:05,040
doesn't exist in the application anymore so i could just type any password and


25551
06:39:05,040 --> 06:39:09,440
say login and we get our updated screen that says cannot find a user


25552
06:39:09,440 --> 06:39:13,440
then i can actually go and register that user the text field is autofocus that we


25553
06:39:13,440 --> 06:39:17,760
fixed so foobar who barbaz


25554
06:39:17,760 --> 06:39:21,680
register this user and we can see that we get this verify


25555
06:39:21,680 --> 06:39:26,400
email we sent you an email verification we also have to clean this view up soon


25556
06:39:26,400 --> 06:39:31,760
because i believe that this is not a part of this a particular chapter at the


25557
06:39:31,760 --> 06:39:36,552
moment that we clean this up but we're gonna we're gonna clean it up soon


25558
06:39:36,552 --> 06:39:42,320
um so the verification email should have been sent now so if i go to my mail


25559
06:39:42,320 --> 06:39:46,720
application i'll just see if i can somehow bring it up so


25560
06:39:46,720 --> 06:39:50,320
i can see that


25561
06:39:50,320 --> 06:39:56,640
have i received any email from firebase yes and that email is available here i


25562
06:39:56,640 --> 06:40:01,760
can bring it to the screen as you can see there is a link on it so


25563
06:40:01,760 --> 06:40:05,680
i'm gonna tap this link and this will then verify my user


25564
06:40:05,680 --> 06:40:10,720
if we then go to our firebase so if i say console firebase if


25565
06:40:10,720 --> 06:40:14,480
we go to the console of our application now we should see that user generated


25566
06:40:14,480 --> 06:40:18,872
here inside authentication so that user is right here and is


25567
06:40:18,872 --> 06:40:23,912
verified user so we can just press the restart button and log in with that user


25568
06:40:23,912 --> 06:40:27,192
so if i say foo bar bas


25569
06:40:27,192 --> 06:40:30,552
log in and we see our dialog and there are no notes so i'm just going to create


25570
06:40:30,552 --> 06:40:36,232
my first note in here and it's sitting there thinking


25571
06:40:36,232 --> 06:40:41,760
and then i'm gonna say hello world all right that's my first note gonna go out


25572
06:40:41,760 --> 06:40:47,592
let's go to the console again and to our application and have a look at


25573
06:40:47,592 --> 06:40:52,232
our fire firestore database and make sure that that note was actually created


25574
06:40:52,232 --> 06:40:57,680
and i can see that was actually created here hello world with that user id nvic


25575
06:40:57,680 --> 06:41:01,040
if i go to authentication i can see nvic is actually


25576
06:41:01,040 --> 06:41:05,912
and indeed that user so it seems to be working we have quite a


25577
06:41:05,912 --> 06:41:09,512
bit of work still left we have worked with the


25578
06:41:09,512 --> 06:41:13,832
with some margins we have worked with icons app name etc before we can submit


25579
06:41:13,832 --> 06:41:16,552
it and these are things that we're going to take care of in the coming chapters


25580
06:41:16,552 --> 06:41:19,592
but we've got we've come basically a good bit forward


25581
06:41:19,592 --> 06:41:23,280
so we're almost there but not really really there so


25582
06:41:23,280 --> 06:41:27,360
but no worries we're going to fix those soon and let me do some screen


25583
06:41:27,360 --> 06:41:32,080
reshuffling in here and let's have a look at the committing of our work which


25584
06:41:32,080 --> 06:41:35,360
is something that we usually do at the end of every chapter so


25585
06:41:35,360 --> 06:41:39,360
i'm going to minimize scr cpy increase the size of visual studio code so you


25586
06:41:39,360 --> 06:41:45,192
see my screen better let's go in here to the terminal and have a look at this


25587
06:41:45,192 --> 06:41:51,592
shell in here and say git status and and yes we have


25588
06:41:51,592 --> 06:41:55,192
a few files that are on track which are new which is our forgot password view


25589
06:41:55,192 --> 06:41:59,040
which is new and password reset email sent dialog which is new


25590
06:41:59,040 --> 06:42:04,000
and quite a lot of files that have been updated in here so let's just say git


25591
06:42:04,000 --> 06:42:08,800
add all and also git commit step 27 all right


25592
06:42:08,800 --> 06:42:14,160
hit status and we have to push our changes also


25593
06:42:14,232 --> 06:42:18,232
so after we've done that let's also tag as is tradition at the end of every


25594
06:42:18,232 --> 06:42:23,280
chapter we're going to tag this and push our tags


25595
06:42:23,280 --> 06:42:27,120
and after doing that we can say git status as you can see there's nothing to


25596
06:42:27,120 --> 06:42:31,592
commit in here and nothing to push again as a tradition at the end of every


25597
06:42:31,592 --> 06:42:35,280
chapter we talk about what we need to discuss in the coming chapter


25598
06:42:35,280 --> 06:42:38,720
so this is the exciting part at the moment we've been working a lot with the


25599
06:42:38,720 --> 06:42:43,120
application code itself but we haven't really done anything to make it ready


25600
06:42:43,120 --> 06:42:48,232
really for release the app store and the play store google play store and there


25601
06:42:48,232 --> 06:42:52,080
are a lot of things that we have to do such as screenshots we have to prepare


25602
06:42:52,080 --> 06:42:54,552
for each respective store and we also have


25603
06:42:54,552 --> 06:42:57,760
to prepare the app icon the app name etc so


25604
06:42:57,760 --> 06:43:00,800
lots of work to do and that's the kind of thing that we're going to take care


25605
06:43:00,800 --> 06:43:05,512
of in the next chapter so i'll see you there hello and welcome to chapter 45 of


25606
06:43:05,512 --> 06:43:09,512
the slatter course in previous chapters we've been talking quite a bit about our


25607
06:43:09,512 --> 06:43:13,192
authentication and authentication block and then in the previous chapter we made


25608
06:43:13,192 --> 06:43:16,400
our application a little bit more ready for releasing in the app store and


25609
06:43:16,400 --> 06:43:20,720
google play store but we still have quite a bit left and these are like some


25610
06:43:20,720 --> 06:43:24,640
of the final touches that we're gonna put on our application before we can


25611
06:43:24,640 --> 06:43:27,040
release it in their respective app stores


25612
06:43:27,040 --> 06:43:30,720
um so what we're gonna do specifically in this chapter as you can see in the


25613
06:43:30,720 --> 06:43:33,592
caption at the bottom of the screen we're gonna take care of our app icons


25614
06:43:33,592 --> 06:43:37,280
and the app name and i'm gonna take you through the process which works very


25615
06:43:37,280 --> 06:43:41,912
well and has always worked for me so i'm going to show you how to grab


25616
06:43:41,912 --> 06:43:46,552
free icons bring them into your application and also be able to kind of


25617
06:43:46,552 --> 06:43:51,120
like automate that process you don't have to generate the icons by hand


25618
06:43:51,120 --> 06:43:55,832
so to begin with we have to talk about what app icons are so so far we've been


25619
06:43:55,832 --> 06:43:59,760
just kind of like running our application and just looking at what is


25620
06:43:59,760 --> 06:44:03,832
inside the app itself we haven't really have we haven't had the time to actually


25621
06:44:03,832 --> 06:44:08,400
look what's the application how the application is represented from


25622
06:44:08,400 --> 06:44:12,720
the user's perspective on the operating system so


25623
06:44:12,720 --> 06:44:16,720
if i bring up scr cpy in the middle of the screen


25624
06:44:16,720 --> 06:44:20,080
and then i bring this application and the um


25625
06:44:20,080 --> 06:44:23,680
all the apps up in this android phone for instance this you can see is our


25626
06:44:23,680 --> 06:44:29,040
application right here so if i change the screen and


25627
06:44:29,040 --> 06:44:32,640
a little bit here so you see better so you can see our


25628
06:44:32,640 --> 06:44:36,640
notes application is right here and it has a default icon so every application


25629
06:44:36,640 --> 06:44:40,960
on both android and ios and pretty much in every operating system has its own


25630
06:44:40,960 --> 06:44:46,480
icon so flutter allows you or flutter provides a default icon for all the


25631
06:44:46,480 --> 06:44:50,080
applications that you create with flutter create so you have a default


25632
06:44:50,080 --> 06:44:52,872
icon that is displayed for your application but


25633
06:44:52,872 --> 06:44:56,720
this is just a default flutter icon as i'm mentioning so we need to have our


25634
06:44:56,720 --> 06:45:00,400
own icon that the operating system can display to the user


25635
06:45:00,400 --> 06:45:04,640
in order to represent our application amongst all the other applications that


25636
06:45:04,640 --> 06:45:08,232
are installed on that target operating system


25637
06:45:08,232 --> 06:45:12,480
so that's for the icons and then what we have to talk about is what splash


25638
06:45:12,480 --> 06:45:16,480
screens are so splash screen is this little screen that the operating system


25639
06:45:16,480 --> 06:45:22,080
displays on the screen and as soon as you open an application so i'm wondering


25640
06:45:22,080 --> 06:45:24,960
if there's any application for instance here that i can


25641
06:45:24,960 --> 06:45:28,960
open up in order for us to see a splash screen so let's for instance go here to


25642
06:45:28,960 --> 06:45:34,232
the clock application and as i saw here let me just bring it up again so if i


25643
06:45:34,232 --> 06:45:40,232
kill the clock application by going here and then i go to the clock


25644
06:45:40,232 --> 06:45:43,512
application again you can see that there is a black screen just


25645
06:45:43,512 --> 06:45:47,760
displays instantaneously and then just disappears that is the splash screen and


25646
06:45:47,760 --> 06:45:50,872
or in this case you could actually see it's the lack of its flat screen because


25647
06:45:50,872 --> 06:45:54,320
there's no splash screen apparently for the clock application and let's go to


25648
06:45:54,320 --> 06:45:57,360
calculator and this application opens up so fast it


25649
06:45:57,360 --> 06:46:00,720
probably doesn't even have a splash screen but what essentially his flash


25650
06:46:00,720 --> 06:46:04,960
screen is is a screen as its name indicate that gets displayed to the user


25651
06:46:04,960 --> 06:46:11,832
just very fast while flutter is loading its binary to display to the to


25652
06:46:11,832 --> 06:46:17,360
um the user so there are two stages for flutter to actually show a splash screen


25653
06:46:17,360 --> 06:46:21,512
one is when the application binary is being loaded by the operating system and


25654
06:46:21,512 --> 06:46:26,232
then there is another stage when the flutter engine is being loaded to be


25655
06:46:26,232 --> 06:46:30,640
basically kicking off your applications process basically but i'm not going to


25656
06:46:30,640 --> 06:46:33,440
go into too much details about that but just know that splashbearing is a screen


25657
06:46:33,440 --> 06:46:37,680
that the operating system displays the user while it's loading the application


25658
06:46:37,680 --> 06:46:42,160
so if for instance your application is being loaded or is being displayed for


25659
06:46:42,160 --> 06:46:47,360
the first time on an android telephone version that has very old hardware


25660
06:46:47,360 --> 06:46:50,480
because there are thousands and thousands of android devices out there


25661
06:46:50,480 --> 06:46:54,720
then the operating system may actually take a lot of time in order to load your


25662
06:46:54,720 --> 06:46:59,192
binary and that time it will and during that time it will display a splash


25663
06:46:59,192 --> 06:47:05,120
screen so we're going to fix both the app icon and a splash screen soon


25664
06:47:05,120 --> 06:47:08,552
so let's now talk about where you can actually find some icons so if you're a


25665
06:47:08,552 --> 06:47:11,760
designer and if you're comfortable with figma or sketch for instance then you


25666
06:47:11,760 --> 06:47:16,000
can go and design your own app icon you're more welcome to do that i can i


25667
06:47:16,000 --> 06:47:21,040
feel free with figma i'm not a sketch user but i can design my like icons in


25668
06:47:21,040 --> 06:47:24,160
figma but that's not what we're going to do in this chapter we're actually going


25669
06:47:24,160 --> 06:47:28,800
to go to this website as i'm showing you here stockio.com and grab some free


25670
06:47:28,800 --> 06:47:32,800
icons so if i minimize scrcpy here and bring up a


25671
06:47:32,800 --> 06:47:38,480
safari window let's just say stock io.com you can't see that right


25672
06:47:38,480 --> 06:47:43,832
now i'll bring it to the screen like that and you can see you can hear


25673
06:47:43,832 --> 06:47:47,360
go to for instance icons and then there's a search functionality where you


25674
06:47:47,360 --> 06:47:51,680
can search for the type of icons that you're interested in these icons are not


25675
06:47:51,680 --> 06:47:56,640
really free sometimes they're actually they need to be paid for however you can


25676
06:47:56,640 --> 06:48:02,552
also find um cheap or even free icons that you can use in your application but


25677
06:48:02,552 --> 06:48:06,800
it's very important that you attribute the author work the way they ask you to


25678
06:48:06,800 --> 06:48:11,760
do that and i'll talk about that soon so for our application we're actually


25679
06:48:11,760 --> 06:48:15,760
going to grab this particular icon so it's called stock io we're going to go


25680
06:48:15,760 --> 06:48:18,480
to free icon in here


25681
06:48:18,480 --> 06:48:23,040
and say sticky note file icon okay so that's the icon


25682
06:48:23,040 --> 06:48:27,512
we are going to use for our application and and you can go ahead and do the same


25683
06:48:27,512 --> 06:48:32,160
thing i mean it's not that the app store is gonna like google play store and apps


25684
06:48:32,160 --> 06:48:35,440
are not gonna set us like they're not gonna stop you from releasing your


25685
06:48:35,440 --> 06:48:40,872
application just because your icon is the same icon as someone else's app


25686
06:48:40,872 --> 06:48:44,232
so they're not gonna basically check that really unless your


25687
06:48:44,232 --> 06:48:47,760
icon represents a very well-known app for instance if you


25688
06:48:47,760 --> 06:48:50,552
add the facebook icon to your application then the people who are


25689
06:48:50,552 --> 06:48:53,760
reviewing your application are going to know that immediately and recognize it


25690
06:48:53,760 --> 06:48:57,120
and then they're going to flag it and perhaps reject your application but this


25691
06:48:57,120 --> 06:49:01,512
is such a generic icon that i don't think anybody is going to basically


25692
06:49:01,512 --> 06:49:06,552
have anything to say about it if someone else has used this already in one of the


25693
06:49:06,552 --> 06:49:10,160
hundreds and thousands of applications that are available in in those


25694
06:49:10,160 --> 06:49:16,960
respective stores so what we need to do here go and say free download as an svg


25695
06:49:16,960 --> 06:49:20,160
so i just did that so let's go in here and


25696
06:49:20,160 --> 06:49:24,160
have a look at that excuse me


25697
06:49:24,160 --> 06:49:28,160
so i'm going to bring it up here and you can see it's an svg and that's been


25698
06:49:28,160 --> 06:49:32,552
downloaded on my computer right now so i'm gonna um


25699
06:49:32,552 --> 06:49:36,552
basically talk now a little bit about attribution


25700
06:49:36,552 --> 06:49:40,800
so as you can see here in the information that is provided here on the


25701
06:49:40,800 --> 06:49:44,552
screen i'm going to increase the size so you see it better it says free for


25702
06:49:44,552 --> 06:49:48,872
personal and commercial use that's that means even if your application is free


25703
06:49:48,872 --> 06:49:52,320
or paid for in this in this flutter course we're


25704
06:49:52,320 --> 06:49:54,960
going to release our application as a free application of course but if even


25705
06:49:54,960 --> 06:49:58,960
if it's for a commercial use you're allowed to use this icon but it says


25706
06:49:58,960 --> 06:50:04,080
with attribution to stock io.com so what we should do if we're a good


25707
06:50:04,080 --> 06:50:09,280
citizens of the internet land then when you basically upload your application to


25708
06:50:09,280 --> 06:50:13,592
the app store and google play store as i'll show you later we will actually


25709
06:50:13,592 --> 06:50:19,512
write a little sentence and attribute the um stock io.com website and even


25710
06:50:19,512 --> 06:50:24,552
maybe say icon is provided by stockion.com and even place the entire


25711
06:50:24,552 --> 06:50:28,480
url of that icon um


25712
06:50:28,480 --> 06:50:32,480
inside our application description when we submit it to the respective app store


25713
06:50:32,480 --> 06:50:36,160
so be very careful about this because there are actually artists that are


25714
06:50:36,160 --> 06:50:40,320
creating these icons for you so even if you


25715
06:50:40,320 --> 06:50:44,160
see that it's free you may be attempted to just say yeah i forget about i'm just


25716
06:50:44,160 --> 06:50:46,872
gonna put it there i'm not gonna attribute the author but if you think


25717
06:50:46,872 --> 06:50:50,160
about it it's just one line of text that you're going to write in your


25718
06:50:50,160 --> 06:50:54,232
application description it's worth it because someone has actually sat there


25719
06:50:54,232 --> 06:50:57,120
spent quite a lot of time designing this icon so it's just


25720
06:50:57,120 --> 06:51:00,160
good karma to make sure that we follow these


25721
06:51:00,160 --> 06:51:03,280
attributions apps that are provided in the website where you download your


25722
06:51:03,280 --> 06:51:08,000
icons okay so now we have this svg icon so if i


25723
06:51:08,000 --> 06:51:13,192
bring my finder here so we just have one file in here but as you'll soon see when


25724
06:51:13,192 --> 06:51:16,720
we submit our application to app store and play store google play store we have


25725
06:51:16,720 --> 06:51:20,872
to provide various icon sizes all right so and


25726
06:51:20,872 --> 06:51:24,720
it's not that you have to provide the various icon sizes to the app store but


25727
06:51:24,720 --> 06:51:28,400
when you build your application you actually have to provide these different


25728
06:51:28,400 --> 06:51:33,360
icon sizes to the operating system for instance if the user is loading your


25729
06:51:33,360 --> 06:51:38,400
application on a very old iphone without a retina display which i highly doubt


25730
06:51:38,400 --> 06:51:42,480
now nowadays almost all ios devices have a retina display


25731
06:51:42,480 --> 06:51:47,040
then that user with that phone that phone particularly cannot display very


25732
06:51:47,040 --> 06:51:51,040
high resolution images so it needs to grab a particular


25733
06:51:51,040 --> 06:51:54,160
app icon resolution however if you run your


25734
06:51:54,160 --> 06:52:00,232
app for instance on an iphone 13 pro max then that device can actually


25735
06:52:00,232 --> 06:52:05,592
display a high resolution image so using this svg file we have to create


25736
06:52:05,592 --> 06:52:10,000
and slice it up so that we have various icon sizes to provide for various


25737
06:52:10,000 --> 06:52:12,832
operating systems and device configurations


25738
06:52:12,832 --> 06:52:16,400
so that's what we're going to do but we're not going to do that by hand we're


25739
06:52:16,400 --> 06:52:21,040
going to use a tool in here called app icon dot co so let's go in app icon dot


25740
06:52:21,040 --> 06:52:24,160
co and this is a great free tool that you


25741
06:52:24,160 --> 06:52:31,832
can use and you can just basically drag your svg file in this


25742
06:52:31,832 --> 06:52:36,872
target and it will generate your icons for you so let's go ahead and do that


25743
06:52:36,872 --> 06:52:40,552
i'm going to drag this svg in here just like this


25744
06:52:40,552 --> 06:52:46,000
all right and you can see that i can generate the icons for the destinations


25745
06:52:46,000 --> 06:52:49,760
that i'm interested in our application doesn't support watch os at the moment


25746
06:52:49,760 --> 06:52:53,440
and we're not a mac os application so at the moment we're just saying iphone and


25747
06:52:53,440 --> 06:52:59,760
ipad and for android okay so let's just generate these icons and


25748
06:52:59,760 --> 06:53:03,912
if i go in here i can see that there was a zip file generated in here so let's


25749
06:53:03,912 --> 06:53:07,832
just unzip this file and have a look at it and you see that there's a folder


25750
06:53:07,832 --> 06:53:13,512
called app icons so it has android app store assets etc in


25751
06:53:13,512 --> 06:53:16,400
here okay


25752
06:53:16,480 --> 06:53:19,592
so now that we have these icons generated here as a caption indicates we


25753
06:53:19,592 --> 06:53:22,872
have to add them to our application so how do we do that do we go ahead and


25754
06:53:22,872 --> 06:53:26,232
like add these by hand no but there is


25755
06:53:26,232 --> 06:53:30,480
actually better way of doing this so i'll explain it to you right now


25756
06:53:30,480 --> 06:53:35,040
there is a package called flutter launcher icons that can take care of


25757
06:53:35,040 --> 06:53:39,592
this for you so instead of you having to place these icons manually inside your


25758
06:53:39,592 --> 06:53:42,872
application binary or inside your application source code for instance


25759
06:53:42,872 --> 06:53:47,760
visual studio code or android studio it can do that for you so let's go to pub


25760
06:53:47,760 --> 06:53:50,640
dev i'm getting rid of this dialog here as


25761
06:53:50,640 --> 06:53:56,160
well and let's search for flutter launcher icons okay


25762
06:53:56,160 --> 06:53:59,912
and we found it right here and you can see that it is provided by the flutter


25763
06:53:59,912 --> 06:54:04,872
community right there and there is information on how you should actually


25764
06:54:04,872 --> 06:54:08,000
configure this and we'll get there soon so


25765
06:54:08,000 --> 06:54:12,000
uh but what we first need to do


25766
06:54:12,000 --> 06:54:15,832
uh is to bring this into


25767
06:54:15,832 --> 06:54:20,800
our application so this uh plugin


25768
06:54:20,800 --> 06:54:23,832
so let's go to installing in here and


25769
06:54:23,832 --> 06:54:28,640
you'll see here that it says dart pub and with flutter we want to do


25770
06:54:28,640 --> 06:54:33,440
this basically father pub at flutter launcher icons okay so let's go ahead in


25771
06:54:33,440 --> 06:54:37,512
our application so i'm going to bring our application in here and


25772
06:54:37,512 --> 06:54:40,800
let's go to terminal so let me bring this up a little bit


25773
06:54:40,800 --> 06:54:46,000
and let's just paste that command in here um boof


25774
06:54:46,000 --> 06:54:49,512
all right so that is just going to add flutter launcher icons to our


25775
06:54:49,512 --> 06:54:52,080
application


25776
06:54:52,552 --> 06:54:57,040
and so that's the adding of it so if you go to pop spec yaml now and have a look


25777
06:54:57,040 --> 06:55:00,232
at our yaml file you can see that there's this flutter launcher icons


25778
06:55:00,232 --> 06:55:03,912
added right here okay then what we need to do is to create some sort of a


25779
06:55:03,912 --> 06:55:08,800
configuration file for this plugin and to understand how it should generate our


25780
06:55:08,800 --> 06:55:11,912
icons for us you can see if we go back in here


25781
06:55:11,912 --> 06:55:14,720
you can see that there's some information about that if you read the


25782
06:55:14,720 --> 06:55:18,160
readme file it actually asks you actually to generate a file called


25783
06:55:18,160 --> 06:55:22,080
flutter launcher icons yaml and that's exactly what we're going to do in here


25784
06:55:22,080 --> 06:55:26,000
so let's go to the root folder of our application so if i


25785
06:55:26,000 --> 06:55:29,360
collapse every folder in here so make sure that you're


25786
06:55:29,360 --> 06:55:35,120
in the root folder of your application and then i'm just gonna say new file


25787
06:55:35,120 --> 06:55:38,800
and let's just add flutter launcher icons okay


25788
06:55:38,800 --> 06:55:44,480
and in here they basically say add this assets icon etc etc so


25789
06:55:44,480 --> 06:55:50,160
let me just bring this here copy this information as it is


25790
06:55:50,160 --> 06:55:55,440
stated there and place it there but we also have to add a new um


25791
06:55:55,440 --> 06:56:01,680
and basically key in here called remove alpha ios and we have to set this to


25792
06:56:01,680 --> 06:56:06,232
true and this is a key that i don't know if it's actually documented so let's


25793
06:56:06,232 --> 06:56:11,360
have a look at the documentation in here let's see version scores change log


25794
06:56:11,360 --> 06:56:16,232
installing it's not really documented unfortunately


25795
06:56:16,232 --> 06:56:20,232
but there may be inside the git repository for this application like


25796
06:56:20,232 --> 06:56:24,232
there may be some good documentation to be honest with you change log


25797
06:56:24,232 --> 06:56:29,440
examples um flavors could there be anything in there


25798
06:56:29,440 --> 06:56:33,280
production no unfortunately but i will just explain


25799
06:56:33,280 --> 06:56:37,440
what this key basically does what it does is an ios


25800
06:56:37,440 --> 06:56:42,320
as an operating system it doesn't allow alpha channel transparency channel on


25801
06:56:42,320 --> 06:56:46,800
its icons on its app icons so what you need to do is to get rid of


25802
06:56:46,800 --> 06:56:50,400
that so when we generate our icons we're going to tell this plugin that hey when


25803
06:56:50,400 --> 06:56:55,192
you're generating the ios icons remove the alpha channel and for you designers


25804
06:56:55,192 --> 06:56:58,640
out there you already know what alpha channel is okay


25805
06:56:58,640 --> 06:57:02,872
so it's just a transparency layer all right so what we need to do now is


25806
06:57:02,872 --> 06:57:09,832
to grab our icon the downloaded icon and place it inside assets icon icon.png


25807
06:57:09,832 --> 06:57:13,512
okay so as you can see in here let's see if you have an assets folder and we


25808
06:57:13,512 --> 06:57:18,720
don't so let's go ahead and say new file oops a new folder


25809
06:57:18,720 --> 06:57:23,192
and i'm going to say assets and then we're gonna call it icon okay


25810
06:57:23,192 --> 06:57:27,440
just like that and let's go then and bring that app


25811
06:57:27,440 --> 06:57:32,160
store png file that is right here and just place it inside the folder that we


25812
06:57:32,160 --> 06:57:35,680
just created so it's a huge file okay and that's okay


25813
06:57:35,680 --> 06:57:39,440
so now that we've done that and you'll be wondering okay where why is it under


25814
06:57:39,440 --> 06:57:44,320
assets icon and that's because in this launcher configuration we said that that


25815
06:57:44,320 --> 06:57:49,832
icon should be there you see icon png so what we need to do now is just to rename


25816
06:57:49,832 --> 06:57:55,280
this file to icon.png just to make sure that this


25817
06:57:55,280 --> 06:58:02,080
package can find it under assets icon icon ph png as it's specified here okay


25818
06:58:02,080 --> 06:58:06,480
so in order to then generate your icons you just have to run this for


25819
06:58:06,480 --> 06:58:10,400
this command right here so i'm gonna i'm gonna go to terminal


25820
06:58:10,400 --> 06:58:14,232
let's see uh terminal is actually right here it's ginormous


25821
06:58:14,232 --> 06:58:19,592
um let's go here terminals and i'm then going to clean the terminal get rid of


25822
06:58:19,592 --> 06:58:25,832
the left hand side bar i'm going to say flutter pump run flutter launcher icons


25823
06:58:25,832 --> 06:58:29,592
and main just like that


25824
06:58:30,000 --> 06:58:34,160
that is going to basically do its job have a look at um the configuration and


25825
06:58:34,160 --> 06:58:38,720
then it's going to generate our icons for us


25826
06:58:38,720 --> 06:58:42,872
so in order to test this we actually need to make a clean build and this is a


25827
06:58:42,872 --> 06:58:45,912
little bit of a pain in the neck and that's completely okay it's just because


25828
06:58:45,912 --> 06:58:49,592
we change something dramatic in our application and then we need to just


25829
06:58:49,592 --> 06:58:52,872
make sure that we stop the running of our application so i can see now this


25830
06:58:52,872 --> 06:58:56,720
particular application at the moment isn't running in scrcpy so that's really


25831
06:58:56,720 --> 06:59:00,080
good as you can note here this is the icon of


25832
06:59:00,080 --> 06:59:03,912
our application right now without us having launched it again


25833
06:59:03,912 --> 06:59:09,912
so let's just do as the caption indicates we're gonna do flutter clean


25834
06:59:11,120 --> 06:59:14,960
and after cleaning is done we're just going to say flutter


25835
06:59:14,960 --> 06:59:19,440
pop get in order to grab all our dependencies again


25836
06:59:19,440 --> 06:59:23,512
and i can see that you can't actually see what i typed there but that's what i


25837
06:59:23,512 --> 06:59:27,040
typed flutter pup get as you can see here


25838
06:59:27,040 --> 06:59:30,872
and it grabbed all the dependencies again and what i'm going to do is just


25839
06:59:30,872 --> 06:59:34,640
going to go to main dart file in here and


25840
06:59:34,640 --> 06:59:38,552
just run the application but before doing that i'm just going to also make


25841
06:59:38,552 --> 06:59:42,552
sure that flutter select device has selected the correct device which is my


25842
06:59:42,552 --> 06:59:46,640
android app and which is my android phone and just gonna say run without


25843
06:59:46,640 --> 06:59:50,872
debugging it could actually help if you removed


25844
06:59:50,872 --> 06:59:54,400
your application as well so just to make sure that that


25845
06:59:54,400 --> 06:59:59,280
application is completely deleted from the phone so it's completely gone now


25846
06:59:59,280 --> 07:00:04,160
and really all we have to do is just right now wait for this gradle task to


25847
07:00:04,160 --> 07:00:09,280
complete its work so i'm just gonna let it do its work and um


25848
07:00:09,280 --> 07:00:12,160
let's just wait for it all right


25849
07:00:12,160 --> 07:00:17,120
now you can see that our application is running on uh scr cpy which is an actual


25850
07:00:17,120 --> 07:00:22,720
real phone in here so if i now go back here and bring up all the apps installed


25851
07:00:22,720 --> 07:00:27,192
on this device you can see we have this application running right there my notes


25852
07:00:27,192 --> 07:00:31,040
and it has this little icon here and this is another application that i've


25853
07:00:31,040 --> 07:00:35,040
had from before so i can just uninstall that safely and we just go to our


25854
07:00:35,040 --> 07:00:39,680
application in here you can see it is as we left it last time but the important


25855
07:00:39,680 --> 07:00:44,320
thing is that there is a new icon basically provided here


25856
07:00:44,320 --> 07:00:47,120
so that's really good now we've tested that


25857
07:00:47,120 --> 07:00:51,120
on android so the testing of android is actually done so you don't need this


25858
07:00:51,120 --> 07:00:53,512
caption at the bottom of the screen i should have brought up brought it up a


25859
07:00:53,512 --> 07:00:57,832
little bit earlier and what we need to do is just to run our application on ios


25860
07:00:57,832 --> 07:01:02,720
as well so i'm going to stop the the execution of the application on android


25861
07:01:02,720 --> 07:01:07,512
and i'm just going to say flutter select device and iphone 13 pro which is a


25862
07:01:07,512 --> 07:01:12,552
simulator and then i'm just gonna say run and this is also gonna perhaps take


25863
07:01:12,552 --> 07:01:17,280
some time because usually i run my applications on the android telephone as


25864
07:01:17,280 --> 07:01:22,872
you've seen with scrcpy i usually don't run with an ios simulator or a device


25865
07:01:22,872 --> 07:01:28,080
when i'm developing with flutter and but it is always good practice to do


25866
07:01:28,080 --> 07:01:34,160
that so now it's doing the xcode build and let's just wait for it to finish


25867
07:01:34,160 --> 07:01:38,640
okay and now we can see that our application is also running on ios so


25868
07:01:38,640 --> 07:01:42,080
what we can do in here is just to send the app to the background and then you


25869
07:01:42,080 --> 07:01:48,080
can see that we have our my notes application right here and the icon that


25870
07:01:48,080 --> 07:01:53,592
we basically created for our app so that seems to be working as well


25871
07:01:53,592 --> 07:01:57,280
what we need to talk about now is our app name and as you can see in the


25872
07:01:57,280 --> 07:01:59,592
caption at the bottom of the screen since we need to update the app name


25873
07:01:59,592 --> 07:02:04,232
it's not so nice as it is now and right now it's just saying my notes with a


25874
07:02:04,232 --> 07:02:10,080
lowercase and and capital m and all in one word so it's not as it should be so


25875
07:02:10,080 --> 07:02:13,512
let's go ahead and fix this and the way to do that is that you have to do it in


25876
07:02:13,512 --> 07:02:16,872
two places one for ios and one for android so we're going to take care of


25877
07:02:16,872 --> 07:02:21,120
ios first so in visual studio code i'm going to jump into a file called info


25878
07:02:21,120 --> 07:02:26,872
key list and this is the info p list is like basically an ios applications and


25879
07:02:26,872 --> 07:02:30,320
kind of configuration place which you can configure a few things for


25880
07:02:30,320 --> 07:02:36,320
application like permissions etc and if you go to this uh file ios runner slash


25881
07:02:36,320 --> 07:02:40,232
info p list so let's go in there and then there is a key in here called core


25882
07:02:40,232 --> 07:02:45,192
foundation bundle name so let's see if you can find a bundle name


25883
07:02:45,192 --> 07:02:49,280
cf bundle name at the moment it says my notes in here so we need to fix this


25884
07:02:49,280 --> 07:02:54,480
just to call it basically my notes like this


25885
07:02:54,480 --> 07:02:57,040
okay and let's see if there's any other place


25886
07:02:57,040 --> 07:03:01,192
in here we can also see that there is a bundle display name which we may also


25887
07:03:01,192 --> 07:03:05,192
have to fix so let's just call it my


25888
07:03:05,280 --> 07:03:08,160
this and to be honest with you we don't maybe


25889
07:03:08,160 --> 07:03:12,160
actually have to change the bundle name i would say maybe changing the bundle


25890
07:03:12,160 --> 07:03:16,552
name is not so good so let's not do the bundle name actually


25891
07:03:16,552 --> 07:03:21,040
i'm going to change the caption and just call it changing the bundle display name


25892
07:03:21,040 --> 07:03:25,040
because i would say a bundle name and bundle display name are two completely


25893
07:03:25,040 --> 07:03:28,552
different things the bundle name is like the binary name of the application and


25894
07:03:28,552 --> 07:03:32,400
the bundled display name is what the user sees on the screen so let's not do


25895
07:03:32,400 --> 07:03:36,400
the bundle name and let's just change the bundle display name in here and just


25896
07:03:36,400 --> 07:03:41,280
call it my notes okay so after doing that we could try to


25897
07:03:41,280 --> 07:03:44,872
stop the application in here and then run it again


25898
07:03:44,872 --> 07:03:49,360
um it may take effect it depends kind of on


25899
07:03:49,360 --> 07:03:55,192
how flutter is gonna trigger these changes with xcode build and how xcode


25900
07:03:55,192 --> 07:03:58,720
build is going to interpret our changes sometimes


25901
07:03:58,720 --> 07:04:02,640
it might actually be necessary for you to do another clean


25902
07:04:02,640 --> 07:04:06,872
and then run the application again on that target platform so that's just a


25903
07:04:06,872 --> 07:04:11,120
bit unfortunate when you change like huge changes when you make you changes


25904
07:04:11,120 --> 07:04:15,512
to the applications structure and i could see now that my notes was


25905
07:04:15,512 --> 07:04:19,832
actually taking the fed effect right now so we don't have to do any flutter clean


25906
07:04:19,832 --> 07:04:24,232
so that's really good then what we need to do also is to


25907
07:04:24,232 --> 07:04:29,760
update the app name on android and we do that by going to android app src main


25908
07:04:29,760 --> 07:04:35,280
and we could just do that right now so let's go to android manifest xml


25909
07:04:35,280 --> 07:04:40,232
and you can see here is android app src main i'm going to go in there and then


25910
07:04:40,232 --> 07:04:43,192
i'm going to find this key in here android label and just


25911
07:04:43,192 --> 07:04:48,080
change it to my notes all right so let's just do that and then i'm going


25912
07:04:48,080 --> 07:04:52,232
to go here just to a flutter select device run it on my android phone then


25913
07:04:52,232 --> 07:04:57,832
i'm just going to stop the ios execution and just go to run run without debugging


25914
07:04:57,832 --> 07:05:03,512
so that you can try to run the application on this android phone so if


25915
07:05:03,512 --> 07:05:08,720
everything works as expected then we should have our mynotes application


25916
07:05:08,720 --> 07:05:13,360
right here with the correct uh icon and then we should also have the


25917
07:05:13,360 --> 07:05:17,680
correct label alright so let's just send this to the background


25918
07:05:17,680 --> 07:05:20,872
let's go in here and have a look at our application you can see now it says my


25919
07:05:20,872 --> 07:05:26,640
notes the right icon and also um yeah the application is running as it should


25920
07:05:26,640 --> 07:05:30,232
and if you go back to our ios application then we can see the name is


25921
07:05:30,232 --> 07:05:36,000
also correct and the right icon so we could actually say that we've


25922
07:05:36,000 --> 07:05:39,440
already tested things on ios they seem to be working so if i bring up the


25923
07:05:39,440 --> 07:05:41,912
simulator the app is working as it should


25924
07:05:41,912 --> 07:05:44,552
and we don't have any crashes the icon is


25925
07:05:44,552 --> 07:05:50,080
correct and the label is correct and on android if we bring up scrcpy again you


25926
07:05:50,080 --> 07:05:54,960
can see that the icon is correct and also the name of the


25927
07:05:54,960 --> 07:05:58,232
application is correct so


25928
07:05:58,232 --> 07:06:01,192
we've done what we said that we're going to do in this chapter we talked about


25929
07:06:01,192 --> 07:06:06,080
icons and we also talked about what splash screens are in preparation for


25930
07:06:06,080 --> 07:06:10,480
the next chapter and it's usually the um what we do in the and at the end of


25931
07:06:10,480 --> 07:06:14,000
every chapter we talk about what we need to discuss in the chapter that's coming


25932
07:06:14,000 --> 07:06:18,720
so what we need to do in the chapter that is coming is to prepare ourselves


25933
07:06:18,720 --> 07:06:23,680
for creating splash screens you now know what splash screens are but in the next


25934
07:06:23,680 --> 07:06:26,872
chapter we're gonna go and create them and


25935
07:06:26,872 --> 07:06:31,280
we're gonna add them to our application so grab some refreshments if you want to


25936
07:06:31,280 --> 07:06:33,040
do and


25937
07:06:33,040 --> 07:06:36,800
i'll see you in the next chapter hello and welcome to chapter 46 of the


25938
07:06:36,800 --> 07:06:40,552
slaughter course um if you follow the chapters up to this point


25939
07:06:40,552 --> 07:06:44,160
chronologically you'll know that we've done a lot of preparation and we're


25940
07:06:44,160 --> 07:06:49,120
actually about to start preparing our app to be submitted to the app store and


25941
07:06:49,120 --> 07:06:53,912
google play store but before doing that now that we fixed our icons and


25942
07:06:53,912 --> 07:06:58,000
our application name for both android and ios we need to fix something called


25943
07:06:58,000 --> 07:07:02,160
a splash screen so and we talked briefly about splash


25944
07:07:02,160 --> 07:07:06,480
screens and what they actually mean in the mobile world for instance in both


25945
07:07:06,480 --> 07:07:11,440
android os and ios and ipad os for that matter but for those of you who missed


25946
07:07:11,440 --> 07:07:15,040
the previous chapter a splash screen is a screen that is


25947
07:07:15,040 --> 07:07:19,512
displayed to the user when they open your application from a cold


25948
07:07:19,512 --> 07:07:22,960
boots basically meaning that your application hasn't been running for


25949
07:07:22,960 --> 07:07:26,872
instance in the background in that operating system and while the


25950
07:07:26,872 --> 07:07:30,400
application binary is being loaded to the screen and the experience is being


25951
07:07:30,400 --> 07:07:34,480
loaded to the screen um then the host operating system in


25952
07:07:34,480 --> 07:07:38,960
this case android and ios will have to display something to the user while


25953
07:07:38,960 --> 07:07:41,680
they're waiting for the experience to be loaded


25954
07:07:41,680 --> 07:07:45,512
so in native applications for instance if you're creating a native


25955
07:07:45,512 --> 07:07:50,080
application with um coupling for ios sorry kotlin for


25956
07:07:50,080 --> 07:07:55,512
android and swift or swift ui for ios then um in that case there is there is


25957
07:07:55,512 --> 07:07:58,800
only one stage of loading for application in that


25958
07:07:58,800 --> 07:08:01,912
you submit your binary to apple and then or


25959
07:08:01,912 --> 07:08:06,480
um to google play store and then the host operating system just loads your


25960
07:08:06,480 --> 07:08:10,552
binary and then that um your main user interface is displayed to the user so


25961
07:08:10,552 --> 07:08:14,480
it's just one stage in flutter however there are two stages


25962
07:08:14,480 --> 07:08:19,760
of loading your application one is the your application binary in itself


25963
07:08:19,760 --> 07:08:24,000
being loaded and the second stage is for the flutter experience to actually be


25964
07:08:24,000 --> 07:08:28,400
loaded inside your application since flutter is its own sdk basically


25965
07:08:28,400 --> 07:08:31,120
so what we're going to do is we're going to create a splash screen that gets


25966
07:08:31,120 --> 07:08:34,552
displayed to the user while our application binary is being presented to


25967
07:08:34,552 --> 07:08:39,760
the user so let's have a little look at a the


25968
07:08:39,760 --> 07:08:42,960
official documentation for splash screens


25969
07:08:42,960 --> 07:08:46,480
and i'm going to bring the screen up here and increase the size


25970
07:08:46,480 --> 07:08:52,872
perhaps a little bit so like this so you see here


25971
07:08:52,872 --> 07:08:56,552
as it is explaining here first and you have your


25972
07:08:56,552 --> 07:09:00,232
android for instance operating system in here and you tap on your application


25973
07:09:00,232 --> 07:09:04,080
icon and then it goes through a series of steps in order to land on your


25974
07:09:04,080 --> 07:09:08,480
application's um main interface and here there's a great


25975
07:09:08,480 --> 07:09:13,040
documentation basically for splash screens which i recommend everybody


25976
07:09:13,040 --> 07:09:17,280
who wants to submit their application to ios app store and google play so to read


25977
07:09:17,280 --> 07:09:21,760
this thoroughly because there's great pieces of information here even if you


25978
07:09:21,760 --> 07:09:25,832
are just following for instance my advice in this chapter but it is still a


25979
07:09:25,832 --> 07:09:32,232
good practice to go ahead and read about this


25980
07:09:32,232 --> 07:09:36,000
so um before we actually go and start


25981
07:09:36,000 --> 07:09:41,730
designing our splash screen i also have to mention something that


25982
07:09:41,730 --> 07:09:45,360
[Applause] this chapter is quite i mean you need in


25983
07:09:45,360 --> 07:09:48,320
order for you to be able to go through the chapter you will unfortunately need


25984
07:09:48,320 --> 07:09:52,400
to have a macintosh so because we're actually going to play a little bit with


25985
07:09:52,400 --> 07:09:55,192
our um ios splash screen and for that you


25986
07:09:55,192 --> 07:09:59,912
need to have xcode but i'll talk soon about that as you'll see


25987
07:09:59,912 --> 07:10:04,872
so how do we go about creating a splash screen so


25988
07:10:04,872 --> 07:10:08,160
i mean there are so many different ways of doing this and


25989
07:10:08,160 --> 07:10:12,400
if if you're a developer from before you probably are not so comfortable you're


25990
07:10:12,400 --> 07:10:15,832
not this kind of like a unicorn developer you might not be


25991
07:10:15,832 --> 07:10:19,512
a so-called unicorn developer as a developer who's also comfortable with


25992
07:10:19,512 --> 07:10:22,640
designing or you might you might only be a


25993
07:10:22,640 --> 07:10:26,800
designer and you've started this course and you've come to this point so you may


25994
07:10:26,800 --> 07:10:30,400
actually be comfortable with a tool like figma


25995
07:10:30,400 --> 07:10:34,872
so um depending on your background you may or


25996
07:10:34,872 --> 07:10:39,832
may not be comfortable with designing so i've basically taken the liberty of


25997
07:10:39,832 --> 07:10:43,040
using a design tool a free design tool called figma


25998
07:10:43,040 --> 07:10:46,552
and for this chapter which you can access freely with for instance a google


25999
07:10:46,552 --> 07:10:49,912
account or an apple apple id


26000
07:10:49,912 --> 07:10:54,912
or you could just create a normal free account on figma.com


26001
07:10:55,192 --> 07:10:59,360
but i don't make the assumption that you know anything about designing and for


26002
07:10:59,360 --> 07:11:04,080
that what we're going to do is we're going to create a very very very simple


26003
07:11:04,080 --> 07:11:07,512
splash screen in figma assuming that the person is watching


26004
07:11:07,512 --> 07:11:15,192
this course has no information about figma or designing previously okay


26005
07:11:16,160 --> 07:11:20,400
so let's have a look um


26006
07:11:20,640 --> 07:11:24,160
now that we talked about figma let's have a look


26007
07:11:24,160 --> 07:11:30,640
at storyboard on ios so um what we can do in here is to bring


26008
07:11:30,640 --> 07:11:34,640
our application to the screen so i'll bring up our


26009
07:11:34,640 --> 07:11:39,512
app in here increase the size a little bit so you see it better


26010
07:11:39,512 --> 07:11:43,592
and what we can do is to bring up terminal in here so get rid of a little


26011
07:11:43,592 --> 07:11:47,832
bit of distraction in here so let's see


26012
07:11:47,832 --> 07:11:53,120
so if you say good status we have a lot of stuff that we've done but we haven't


26013
07:11:53,120 --> 07:11:57,192
committed them so that's fine let those be there we're going to commit them soon


26014
07:11:57,192 --> 07:12:00,720
okay so in your application what i need you


26015
07:12:00,720 --> 07:12:05,680
to do is to have a look at


26016
07:12:05,680 --> 07:12:11,680
your ios application so there is something in the ios application


26017
07:12:11,680 --> 07:12:15,680
generated by the flutter template when we created our our


26018
07:12:15,680 --> 07:12:18,552
template from the absolute beginning of this course


26019
07:12:18,552 --> 07:12:23,680
and there is a file a specific file called a launch i believe it's called


26020
07:12:23,680 --> 07:12:28,000
launch screen dot storyboard if you're not comfortable with ios development


26021
07:12:28,000 --> 07:12:32,800
like native ios development from before i can just explain you that a storyboard


26022
07:12:32,800 --> 07:12:38,160
file is a file that apple designated for um


26023
07:12:38,160 --> 07:12:41,912
developers to be able to visually design their application and then write the


26024
07:12:41,912 --> 07:12:46,400
code for it later and apple's decided that for specifically the launch screen


26025
07:12:46,400 --> 07:12:52,232
for instance that gets displayed to the user there should be a a dedicated um


26026
07:12:52,232 --> 07:12:59,360
storyboard file for that so we're gonna go ahead and launch xcode


26027
07:12:59,360 --> 07:13:05,832
on this macintosh in order to manipulate that storyboard file but before we do


26028
07:13:05,832 --> 07:13:11,360
that i'm just going to go ahead and open the root folder of our application


26029
07:13:11,360 --> 07:13:15,680
then i'm going to go and let me also change the screen layout a little bit so


26030
07:13:15,680 --> 07:13:18,720
you see things better


26031
07:13:18,720 --> 07:13:22,800
then inside this ios folder so in the root folder of your application go to


26032
07:13:22,800 --> 07:13:27,760
ios and then you can see two files in here runner xcode proj and runner xc


26033
07:13:27,760 --> 07:13:32,320
workspace and dependent on your settings on your macintosh you may or may not be


26034
07:13:32,320 --> 07:13:34,640
able to see the


26035
07:13:34,640 --> 07:13:39,360
extensions of these files i i've i've done so in my macintosh that i can


26036
07:13:39,360 --> 07:13:43,040
always see file extensions because it's important


26037
07:13:43,040 --> 07:13:46,960
for me so if you're not seeing the extensions you just have to trust on the


26038
07:13:46,960 --> 07:13:52,640
icon so one of these files has this bluish icon which says project here and


26039
07:13:52,640 --> 07:13:56,720
the other one is a workspace i need you to basically double click


26040
07:13:56,720 --> 07:14:00,400
on this workspace in order to open it okay


26041
07:14:00,400 --> 07:14:05,912
so let's go ahead and open this workspace inside xcode


26042
07:14:05,912 --> 07:14:12,000
and let's then go have a look at this launch screen inside this runner folder


26043
07:14:12,000 --> 07:14:15,680
so if i collapse everything inside you will


26044
07:14:15,680 --> 07:14:19,832
see that you have your runner and which is the flutter templates created


26045
07:14:19,832 --> 07:14:24,232
workspace inside there we have another runner and


26046
07:14:24,232 --> 07:14:28,800
in that runner folder then you'll have this launch screen


26047
07:14:28,800 --> 07:14:31,512
so we can then have a look at this launch


26048
07:14:31,512 --> 07:14:36,160
screen and see how it is created and you can literally


26049
07:14:36,160 --> 07:14:40,000
click in here in order to expand the contents of this


26050
07:14:40,000 --> 07:14:43,760
view controller to have a look at the internals of this launch screen and a


26051
07:14:43,760 --> 07:14:48,232
good trick is if you want to expand you can see here you have to expand this and


26052
07:14:48,232 --> 07:14:50,720
then you have to expand this and expand this


26053
07:14:50,720 --> 07:14:54,960
if you don't want to expand one step at a time you can always hold down the


26054
07:14:54,960 --> 07:14:59,192
option key or the alt key and then click on this little arrow and that expands


26055
07:14:59,192 --> 07:15:03,360
the entire chain for you and if you want to collapse the entire chain you can


26056
07:15:03,360 --> 07:15:08,080
press down alt and then click and then collapses the entire change so


26057
07:15:08,080 --> 07:15:12,960
let's let's expand the entire chain and then in here you'll see that there is a


26058
07:15:12,960 --> 07:15:17,680
view and then a launch image image view which at the moment is pointing to a


26059
07:15:17,680 --> 07:15:22,160
file called launch image which doesn't exist because if you go to our assets in


26060
07:15:22,160 --> 07:15:25,832
here you'll see that launch image is just empty at the moment okay so there


26061
07:15:25,832 --> 07:15:30,480
is no launch image meaning there is no splash screen okay


26062
07:15:30,480 --> 07:15:33,440
so we're gonna manipulate this file a


26063
07:15:33,440 --> 07:15:36,720
little bit as you'll soon see so let me just


26064
07:15:36,720 --> 07:15:40,872
keep xcode running okay


26065
07:15:41,040 --> 07:15:46,232
so that was the basics of that launch screen storyboard and


26066
07:15:46,232 --> 07:15:50,400
as you see at the caption on on the caption at the bottom of the screen this


26067
07:15:50,400 --> 07:15:54,320
is an unfortunate unfortunate thing that um


26068
07:15:54,320 --> 07:15:58,232
that apple isn't as open in my eyes at least as


26069
07:15:58,232 --> 07:16:01,680
many other companies like microsoft and google


26070
07:16:01,680 --> 07:16:06,800
in that if you want to for instance do native ios development and have xcode in


26071
07:16:06,800 --> 07:16:11,360
order to open your project and run your project for instance then you'll have to


26072
07:16:11,360 --> 07:16:16,232
have a macintosh because xcode isn't available on other platforms and it's


26073
07:16:16,232 --> 07:16:21,440
very unfortunate i mean it's it's nothing to really be proud of


26074
07:16:21,440 --> 07:16:25,680
i would say i'm a native ios developer and i'm actually ashamed of the fact


26075
07:16:25,680 --> 07:16:29,440
that xcode the tool that i use on a daily basis is only available on a


26076
07:16:29,440 --> 07:16:32,640
macintosh because i might personally for instance


26077
07:16:32,640 --> 07:16:37,512
like to write my code ios code on ubuntu or fedora


26078
07:16:37,512 --> 07:16:40,800
or some of you may actually prefer windows but let's not go there let's


26079
07:16:40,800 --> 07:16:43,832
just say that you'll unfortunately need macintosh in order to be able to


26080
07:16:43,832 --> 07:16:48,960
manipulate that um launch screen as storyboard file and


26081
07:16:48,960 --> 07:16:53,120
for those of you who don't have a macintosh you'll need to contact perhaps


26082
07:16:53,120 --> 07:16:58,720
somebody in your network who does have access to a macintosh and ask them to


26083
07:16:58,720 --> 07:17:03,512
manipulate the storyboard file for you and add your icons as you'll soon see


26084
07:17:03,512 --> 07:17:07,680
how and then send that storyboard file back to you


26085
07:17:07,680 --> 07:17:10,832
so that's an


26086
07:17:10,832 --> 07:17:14,320
unfortunate problem


26087
07:17:14,480 --> 07:17:17,760
um so what we need to do is to actually get


26088
07:17:17,760 --> 07:17:22,232
to the roots of what we need to work on in this


26089
07:17:22,232 --> 07:17:26,720
chapter and that is creating a splash screen okay so as i mentioned in the


26090
07:17:26,720 --> 07:17:31,832
beginning of this chapter i'm gonna rely on a free tool called figma


26091
07:17:31,832 --> 07:17:35,832
so let's go ahead let me see if i can do some re


26092
07:17:35,832 --> 07:17:42,160
reshuffling on this screen and close a tab in here i'm gonna bring


26093
07:17:42,160 --> 07:17:48,080
up my browser gonna minimize our application and bring


26094
07:17:48,080 --> 07:17:52,872
up my browser right here so i need you to please visit a website called


26095
07:17:52,872 --> 07:17:58,400
figma.com and in figma.com then you will have the


26096
07:17:58,400 --> 07:18:03,040
ability to create your design files all right


26097
07:18:03,040 --> 07:18:06,960
so i'm not gonna show you actually how to register for figma because that is


26098
07:18:06,960 --> 07:18:12,400
very easy so you can just perhaps if i for instance go to and bring up a


26099
07:18:12,400 --> 07:18:16,160
completely new tab in here and say figma.com where i'm


26100
07:18:16,160 --> 07:18:21,120
not logged in you can just say sign up and as you'll soon see here you can


26101
07:18:21,120 --> 07:18:26,640
continue with google or use an email address of your choice in order to sign


26102
07:18:26,640 --> 07:18:30,480
up for figma and as i mentioned figma is


26103
07:18:30,480 --> 07:18:36,400
free until to a certain point and you can you can for instance um


26104
07:18:36,400 --> 07:18:40,872
work with your uh normal design files in figma without


26105
07:18:40,872 --> 07:18:45,360
having to think about actually paying for a subscription but if you


26106
07:18:45,360 --> 07:18:48,872
want to do advanced work for instance if you want to do a lot of sharing of your


26107
07:18:48,872 --> 07:18:53,280
work with other team members etc then you will need to


26108
07:18:53,280 --> 07:18:55,680
pay for figma so


26109
07:18:55,680 --> 07:18:59,680
after you've registered your account in figma what i need you to do please is


26110
07:18:59,680 --> 07:19:04,552
just to go and click on new design file okay so i'm going to increase the size


26111
07:19:04,552 --> 07:19:08,872
in here and just say new design file


26112
07:19:08,960 --> 07:19:14,232
all right so it's created a new design file here for us and as you'll see as


26113
07:19:14,232 --> 07:19:19,192
you'll see in the bottom of the screen in here um i wonder if i actually have


26114
07:19:19,192 --> 07:19:23,832
to bring my face to the right because i'm blocked by that


26115
07:19:23,832 --> 07:19:29,512
so i hadn't noticed that so um so what you'll need to do is to create a


26116
07:19:29,512 --> 07:19:35,680
container here on figma maybe this is a better screen um


26117
07:19:35,680 --> 07:19:40,400
yeah set up maybe this is better okay so what we need to do in here is to create


26118
07:19:40,400 --> 07:19:44,680
a container that is at 1284 by


26119
07:19:44,680 --> 07:19:49,360
2778 and i didn't i didn't like make up this number


26120
07:19:49,360 --> 07:19:56,480
this is the size of a screen for an iphone 13 pro max so


26121
07:19:56,480 --> 07:19:59,360
if you're not a designer you may not notice but when you're designing things


26122
07:19:59,360 --> 07:20:03,440
you always have to create like your design so that it it scales to various


26123
07:20:03,440 --> 07:20:08,320
sizes this was not a problem back in 2007 or 2008 when we only had one iphone


26124
07:20:08,320 --> 07:20:11,680
and just a handful of android devices but nowadays you have to kind of like


26125
07:20:11,680 --> 07:20:16,552
create a template in for instance figma and then ensure that it is scalable for


26126
07:20:16,552 --> 07:20:20,000
different sizes but we're not going to focus on that right now all we're going


26127
07:20:20,000 --> 07:20:26,800
to do is just to create one splash screen and then inside our ios


26128
07:20:26,800 --> 07:20:30,400
app and android app we're just going to make sure that it scales okay so let's


26129
07:20:30,400 --> 07:20:35,120
just target one device at the moment and in here i need you to go in here and


26130
07:20:35,120 --> 07:20:39,040
actually here sorry about that and create a rectangle


26131
07:20:39,040 --> 07:20:42,552
after creating a rectangle we're going to go in here and set the width to what


26132
07:20:42,552 --> 07:20:46,640
i've specified down there 18284


26133
07:20:46,640 --> 07:20:51,280
i can see my keyboard and the height is going to be 2778


26134
07:20:51,280 --> 07:20:57,360
okay so it's a huge rectangle as you can see here okay so


26135
07:20:57,360 --> 07:21:02,720
that's our rectangle and what we need to do is to kind of give this a background


26136
07:21:02,720 --> 07:21:07,280
color now as you've seen so far and if you follow the chapters chronologically


26137
07:21:07,280 --> 07:21:13,760
for this course you'll know that i basically use a very very


26138
07:21:13,760 --> 07:21:18,960
soft theme in visual studio code for uh coding and i absolutely love this


26139
07:21:18,960 --> 07:21:23,760
it's the preference you may like a light team i like a dark team such as tokyo


26140
07:21:23,760 --> 07:21:29,040
night and tokyo night is a visual studio code theme that is open source and you


26141
07:21:29,040 --> 07:21:32,320
can actually grab its colors from


26142
07:21:32,320 --> 07:21:36,080
github so what i'm going to do in here is just to make sure that the background


26143
07:21:36,080 --> 07:21:42,480
color of our splash screens actually painted with that color okay so let's go


26144
07:21:42,480 --> 07:21:48,160
and search for tokyo night in github and you'll end up in this


26145
07:21:48,160 --> 07:21:54,160
website github.com and kia tokyo night vs code theme so if you don't have this


26146
07:21:54,160 --> 07:21:58,000
link and if you couldn't be bothered writing this name you could just google


26147
07:21:58,000 --> 07:22:03,592
and so i'm just gonna go to google and say tokyo night theme okay and you'll


26148
07:22:03,592 --> 07:22:07,832
end up with the github link so you can just click on it all right so i'm gonna


26149
07:22:07,832 --> 07:22:14,320
go down here in this um theme and i'm going to grab this beautiful editor


26150
07:22:14,320 --> 07:22:19,440
background storm color from here okay


26151
07:22:19,440 --> 07:22:24,552
um actually either we could use storm or night i'm gonna choose storm and just


26152
07:22:24,552 --> 07:22:28,160
see how it looks like so grab this code please


26153
07:22:28,160 --> 07:22:34,400
the rgb code for uh tokyo knight and let's go to figma into our rectangle and


26154
07:22:34,400 --> 07:22:38,960
just paste it in fill so that created a nice little background


26155
07:22:38,960 --> 07:22:43,280
color for us okay so we could just live with this at the moment


26156
07:22:43,280 --> 07:22:48,400
then what we need to do is i like to basically create some sort of a gradient


26157
07:22:48,400 --> 07:22:52,480
in this background color so it's not so bland as it is right now so what i'm


26158
07:22:52,480 --> 07:22:57,360
gonna do is just to go to effects in here and then say that we have actually


26159
07:22:57,360 --> 07:23:02,480
no not effects it's probably in fill let's go and fill press the plus button


26160
07:23:02,480 --> 07:23:09,192
and in here just click on this little uh space right there


26161
07:23:09,192 --> 07:23:13,592
and let's just say that um you know what actually i would really


26162
07:23:13,592 --> 07:23:16,960
like to change the screen layout a little bit so you see my figma screen


26163
07:23:16,960 --> 07:23:22,872
better so i'm gonna hide this caption and let's see


26164
07:23:22,872 --> 07:23:27,280
and see if i can change the caption length


26165
07:23:27,592 --> 07:23:31,760
like this so that it is smaller


26166
07:23:31,760 --> 07:23:36,232
and hence i can change the screen layout with my screen with my face still


26167
07:23:36,232 --> 07:23:39,512
visible so i think this is a little bit better okay after doing this fill so we


26168
07:23:39,512 --> 07:23:42,720
added a fill effect in here using this plus icon


26169
07:23:42,720 --> 07:23:48,872
and go and tap on this um little icon next to fill you see here clicking on it


26170
07:23:48,872 --> 07:23:53,360
you can then say that you want for instance a


26171
07:23:53,360 --> 07:23:59,360
linear should we create a radial maybe or a linear gradient let's see


26172
07:23:59,360 --> 07:24:04,160
let's create a linear gradient okay then this as you can see is a gradient


26173
07:24:04,160 --> 07:24:08,080
that at the moment is going from black to


26174
07:24:08,080 --> 07:24:13,040
transparent with zero percent in here so let's make this black point as well


26175
07:24:13,040 --> 07:24:15,760
transparent like this


26176
07:24:15,760 --> 07:24:21,680
zero and we're gonna in both these cases set the background color as the starting


26177
07:24:21,680 --> 07:24:25,440
point and the ending point so click on the starting point change this color to


26178
07:24:25,440 --> 07:24:29,512
our um tokenite background color and here as


26179
07:24:29,512 --> 07:24:33,760
well so that's that okay then in the middle somewhere we're gonna create a


26180
07:24:33,760 --> 07:24:39,680
point and give it a hundred percent uh transparency and let's see how it looks


26181
07:24:39,680 --> 07:24:43,360
like so in here can we not have three points


26182
07:24:43,360 --> 07:24:47,192
yeah figma just went a little bit ballistic on us but that's okay


26183
07:24:47,192 --> 07:24:52,160
so in here we have that color in here we have that color


26184
07:24:52,160 --> 07:24:56,872
so so the start and the end have to be transparent with that color that we've


26185
07:24:56,872 --> 07:25:01,040
chosen and let's go in in the middle and just kind of change the color to red and


26186
07:25:01,040 --> 07:25:03,832
you can see that it gets created here without a problem


26187
07:25:03,832 --> 07:25:08,400
and then what we're going to do for the middle we're going to go and create


26188
07:25:08,400 --> 07:25:12,800
grab this particular color here as you can see it's kind of like a light very


26189
07:25:12,800 --> 07:25:17,440
soft light blue starts with 7d so it's 7dcff


26190
07:25:17,440 --> 07:25:20,640
and i'm going to go back to the figma design and in here


26191
07:25:20,640 --> 07:25:25,440
change the middle color to that just like this okay so it kind of


26192
07:25:25,440 --> 07:25:30,232
creates a nice little effect for us in the middle kind of a


26193
07:25:30,232 --> 07:25:32,720
nice gradient okay


26194
07:25:32,720 --> 07:25:37,040
so after doing that let's go to our downloads and grab our icon so i'm going


26195
07:25:37,040 --> 07:25:41,192
to go here to downloads and if you remember we had


26196
07:25:41,192 --> 07:25:45,040
this sticky note svg file and figma is great


26197
07:25:45,040 --> 07:25:48,832
with stuff like this so let's just grab svg right in the


26198
07:25:48,832 --> 07:25:53,360
middle okay and that's our sticky note right here okay


26199
07:25:53,360 --> 07:25:57,592
so let's see what we can actually do should we use the svg or should we use


26200
07:25:57,592 --> 07:26:00,960
maybe our app icons it's probably better to use actually the


26201
07:26:00,960 --> 07:26:06,480
app icon so revert this change please so let's not use this svg let's go to our


26202
07:26:06,480 --> 07:26:10,000
app icons that we extracted in the previous chapter and let's grab a


26203
07:26:10,000 --> 07:26:15,360
rasterize png which is this app store icon and bring it right here okay so it


26204
07:26:15,360 --> 07:26:19,512
actually is a nice size i'm going to use these built-in layout guides in figma as


26205
07:26:19,512 --> 07:26:22,720
you can see it tells me where the center is so i'm just going to place our icon


26206
07:26:22,720 --> 07:26:25,912
right there and as you can see it actually blends really well with that


26207
07:26:25,912 --> 07:26:30,872
background linear gradient that we created so it's a it's a subtle effect


26208
07:26:30,872 --> 07:26:35,280
so you can see that the linear gradient is a little bit visible


26209
07:26:35,280 --> 07:26:39,592
and if you disable that linear gradient with this icon it's


26210
07:26:39,592 --> 07:26:44,400
it's very bland so without that linear gradient it's our splash screen doesn't


26211
07:26:44,400 --> 07:26:48,720
look so well so you can also play a little bit with the transparency of the


26212
07:26:48,720 --> 07:26:53,440
entire thing like 100 and i feel like um this is just


26213
07:26:53,440 --> 07:26:57,192
crazy so maybe 20 was actually pretty good


26214
07:26:57,192 --> 07:27:01,280
i don't know where i went so here let's go back here and say 20


26215
07:27:01,280 --> 07:27:05,280
okay as it was so now we have a really good


26216
07:27:05,280 --> 07:27:08,960
um base for our splash screen so what we


26217
07:27:08,960 --> 07:27:13,360
need to do now in order to download this splash screen you need to select those


26218
07:27:13,360 --> 07:27:17,760
two layers so on my macintosh i'm just going to hold down the shift key and


26219
07:27:17,760 --> 07:27:22,000
click on this icon for instance and then click on the next one in order to select


26220
07:27:22,000 --> 07:27:25,592
both where i think you could actually no you can't select like that so you


26221
07:27:25,592 --> 07:27:29,360
need to basically hold down the shift key and select both layers


26222
07:27:29,360 --> 07:27:33,680
then press command g on a macintosh or ctrl g on


26223
07:27:33,680 --> 07:27:38,320
linux and windows in order to group these two layers together okay so now


26224
07:27:38,320 --> 07:27:40,960
it's a group and i'm just going to call it


26225
07:27:40,960 --> 07:27:44,872
splash screens just like that it doesn't have to be called like that splash


26226
07:27:44,872 --> 07:27:50,160
screen but i just call it so okay so what we need to do is to grab this


26227
07:27:50,160 --> 07:27:55,592
splash screen in three flavors so normal like um in normal ios development


26228
07:27:55,592 --> 07:28:02,160
you have to support three different resolutions for your assets usually


26229
07:28:02,160 --> 07:28:06,552
some developers are not as bothered with


26230
07:28:06,552 --> 07:28:10,960
supporting older devices so they only support for instance the


26231
07:28:10,960 --> 07:28:16,000
resolution of 2x and 3x and if this doesn't make sense to you i


26232
07:28:16,000 --> 07:28:18,400
will just explain what this actually means


26233
07:28:18,400 --> 07:28:22,552
um modern devices


26234
07:28:22,552 --> 07:28:26,640
on ios at least they're called at their screen and they're called retina devices


26235
07:28:26,640 --> 07:28:32,160
and it's just a term created by apple um many many years back


26236
07:28:32,160 --> 07:28:35,832
and where they said basically they doubled the amount of pixels that a


26237
07:28:35,832 --> 07:28:40,480
device can display on the screen but they held the aspect ratio as it was so


26238
07:28:40,480 --> 07:28:46,080
if in a little square in an old device the device could display four pixels


26239
07:28:46,080 --> 07:28:50,080
then the new devices could display eight pixels so they doubled the amount of


26240
07:28:50,080 --> 07:28:54,552
pixels per square feet i don't know how you want to say it and


26241
07:28:54,552 --> 07:28:58,640
they call it retina and then they added they said every


26242
07:28:58,640 --> 07:29:03,280
every developer needs to provide an image for the old devices and we call it


26243
07:29:03,280 --> 07:29:05,592
1x as in


26244
07:29:05,592 --> 07:29:10,000
scale to 1 and the new devices will have 2x


26245
07:29:10,000 --> 07:29:14,960
then newer iphone devices came out they had more modern retina displays and even


26246
07:29:14,960 --> 07:29:19,912
more pixels packed into the same space so they said now those devices are


26247
07:29:19,912 --> 07:29:24,800
able to display eight times more pixels than the original ones so


26248
07:29:24,800 --> 07:29:29,360
it's basically gonna be um one x two x and three x


26249
07:29:29,360 --> 07:29:34,400
so um i think it's eight times more is that i don't know


26250
07:29:34,400 --> 07:29:38,720
so it's 1x2x and 3x that we have to support so let's go in here


26251
07:29:38,720 --> 07:29:41,832
um let me see if i can shuffle things


26252
07:29:41,832 --> 07:29:47,280
around so you see better um maybe like this so let's go in here in figma at the


26253
07:29:47,280 --> 07:29:50,960
bottom of the screen you see this export button so i'm going to press that export


26254
07:29:50,960 --> 07:29:54,480
so i'm going to press that export button actually three times as you can see in


26255
07:29:54,480 --> 07:30:00,000
here so we have the first one is a png make sure that they're all png files and


26256
07:30:00,000 --> 07:30:04,400
the first one has no suffix second one has two x and the third one has three x


26257
07:30:04,400 --> 07:30:07,440
that's exactly what we need okay so


26258
07:30:07,440 --> 07:30:12,720
after doing that what we're gonna do is to say export splash screen just like


26259
07:30:12,720 --> 07:30:15,360
that and that's gonna do its processing so it


26260
07:30:15,360 --> 07:30:19,592
may actually take some time depending on our internet connection as well and then


26261
07:30:19,592 --> 07:30:25,192
we downloaded this zip file so our work in this file is basically done and this


26262
07:30:25,192 --> 07:30:29,192
is the contents of that zip file as you can see splash screen png and they're


26263
07:30:29,192 --> 07:30:32,320
all the same but their sizes are quite different you can see the first one is


26264
07:30:32,320 --> 07:30:38,160
604 kilobytes the second one is 1.4 megabytes and the third one is 2.5


26265
07:30:38,160 --> 07:30:44,320
megabytes okay so after doing that let's now remove


26266
07:30:44,320 --> 07:30:48,640
safari or your web browser from from the screen


26267
07:30:48,640 --> 07:30:52,720
and we need to basically go into our source code now so i'm going to keep


26268
07:30:52,720 --> 07:30:56,400
this window here do some reshuffling on the screen


26269
07:30:56,400 --> 07:31:01,440
and then i'm gonna bring our let's see i'm gonna bring our uh


26270
07:31:01,440 --> 07:31:05,912
application to the to the screen like this


26271
07:31:05,912 --> 07:31:11,512
okay and actually we don't need the application sorry about that we kind of


26272
07:31:11,512 --> 07:31:16,080
need xcode in here so let me bring up xcode


26273
07:31:16,080 --> 07:31:20,232
but let's bring xcode to the screen and what we need now is to go to our assets


26274
07:31:20,232 --> 07:31:25,192
in here run our assets and we have our launch image right there so what we need


26275
07:31:25,192 --> 07:31:30,480
to do is to grab these images one at a time and bring them in here okay so and


26276
07:31:30,480 --> 07:31:34,552
they can be called splash screen that's not a problem xcode will do the mapping


26277
07:31:34,552 --> 07:31:38,640
for us so as long as this thing in here is called launch image then we're


26278
07:31:38,640 --> 07:31:42,320
good to go so as a caption any case we're now going


26279
07:31:42,320 --> 07:31:46,400
to go and bring these images in here so we have three images you can see in here


26280
07:31:46,400 --> 07:31:50,160
and we have three placeholders in here that we have to drag and drop our images


26281
07:31:50,160 --> 07:31:54,800
into so let's begin by splash screen png and bring it to 1x


26282
07:31:54,800 --> 07:32:01,440
let's bring our splash screen 2x into 2x and 3x into 3x okay


26283
07:32:01,440 --> 07:32:04,552
and just like that so


26284
07:32:04,552 --> 07:32:08,800
that part is now done but we're not really done designing this splash screen


26285
07:32:08,800 --> 07:32:13,440
as such for the ios app so let's go to the launch screen storyboard


26286
07:32:13,440 --> 07:32:16,720
file in here as you'll see it doesn't look so well


26287
07:32:16,720 --> 07:32:20,232
so we need to find this launch image that


26288
07:32:20,232 --> 07:32:25,192
is displayed in here and you can see at the moment its constraints are like


26289
07:32:25,192 --> 07:32:29,592
very very wrong so it just thinks that if you go into this tab it thinks that


26290
07:32:29,592 --> 07:32:33,360
this image is one two eight four by two seven seven eight


26291
07:32:33,360 --> 07:32:38,872
but we don't want that okay we want this image to be as big as the screen but we


26292
07:32:38,872 --> 07:32:43,040
also want it to fix the aspect ratio of the image so


26293
07:32:43,040 --> 07:32:47,120
that it always fills the entire contents of the screen even if that means the


26294
07:32:47,120 --> 07:32:50,872
image goes a little bit outside the outside the boundaries of the screen


26295
07:32:50,872 --> 07:32:56,960
okay so that the launch screen looks great on all ios devices


26296
07:32:56,960 --> 07:33:01,592
so what you need to do here is just a little bit of a work on ios side so you


26297
07:33:01,592 --> 07:33:06,160
need to go in and select your launch image in this tab in here which is your


26298
07:33:06,160 --> 07:33:12,232
dimensions the size inspector as as it is called in xcode go and say that the x


26299
07:33:12,232 --> 07:33:17,912
is zero and y is also zero so that kind of like make sure that your image starts


26300
07:33:17,912 --> 07:33:22,960
right there then let's just zoom out a little bit and go manually and drag this


26301
07:33:22,960 --> 07:33:26,800
a little bit so that it fits the screen so i'm going to drag this point let's


26302
07:33:26,800 --> 07:33:30,832
see if i can do that with my trackpad or maybe i should use my


26303
07:33:30,832 --> 07:33:35,192
mouse and it's it's like playing a little bit with me just because this


26304
07:33:35,192 --> 07:33:40,320
launch image at the moment has some constraints so let's go and actually


26305
07:33:40,320 --> 07:33:43,592
remove these constraints so i'm going to remove this horizontal constraint by


26306
07:33:43,592 --> 07:33:46,480
pressing the backspace button on it or if you're on windows and linux you have


26307
07:33:46,480 --> 07:33:49,592
to press the delete button on your keyboard so now i've removed those


26308
07:33:49,592 --> 07:33:54,160
constraints so i should be able to freely size this hopefully let's see


26309
07:33:54,160 --> 07:33:57,592
and it's not letting me size this but that's okay so what i'm going to do is


26310
07:33:57,592 --> 07:34:01,040
i'm going to have a look at this view and see its size i can see that view is


26311
07:34:01,040 --> 07:34:07,192
896 then i'm gonna go to my launch image and say okay your height is also 896. so


26312
07:34:07,192 --> 07:34:11,120
that's going to ensure that the height of my launch image is the exact same


26313
07:34:11,120 --> 07:34:15,040
height as the view then i'm going to have a look at the views with is four


26314
07:34:15,040 --> 07:34:19,040
one four and i'm gonna go to the launch image and say you're also four


26315
07:34:19,040 --> 07:34:23,680
four one four okay so now the image container actually


26316
07:34:23,680 --> 07:34:29,120
looks good however this launch image it now has hard-coded values hard-coded


26317
07:34:29,120 --> 07:34:34,232
width and hard-coded height it's x and y and y are quite fine but


26318
07:34:34,232 --> 07:34:38,232
what we need to do is to create some constraints for it and constraints are


26319
07:34:38,232 --> 07:34:41,040
literally i mean we're not going to go into native ios development at this


26320
07:34:41,040 --> 07:34:44,232
moment so you need to kind of have some knowledge about this yourself and if you


26321
07:34:44,232 --> 07:34:48,640
don't i'm just going to tell you just quickly how we create these constraints


26322
07:34:48,640 --> 07:34:54,160
so what we need to do is to click on our launch image and then drag


26323
07:34:54,160 --> 07:34:58,800
and hold down the control button on your keyboard okay


26324
07:34:58,800 --> 07:35:00,640
so click


26325
07:35:00,640 --> 07:35:05,512
hold down control and drag from launch image into the view


26326
07:35:05,512 --> 07:35:09,360
like that then this menu appears on the screen and


26327
07:35:09,360 --> 07:35:14,232
then hold down the shift key on your computer on your macintosh and say you


26328
07:35:14,232 --> 07:35:18,080
want an equal width equal height


26329
07:35:18,080 --> 07:35:24,400
and also you want to see leading space and you want to say


26330
07:35:24,400 --> 07:35:28,080
what else do we want yeah


26331
07:35:28,080 --> 07:35:33,280
that's fine for now i would say i mean ideally what we want is for this screen


26332
07:35:33,280 --> 07:35:37,040
to be in the center as well so maybe we could just say center horizontal and


26333
07:35:37,040 --> 07:35:41,760
center vertical so check these four items as you're holding down the shift


26334
07:35:41,760 --> 07:35:46,160
button and then you can let go of the shift button and then just click here


26335
07:35:46,160 --> 07:35:48,872
anywhere on the screen to dismiss of that


26336
07:35:48,872 --> 07:35:52,552
so now you can see xcode is also happy with the constraints that we created


26337
07:35:52,552 --> 07:35:56,640
then what we need to do is just to tell this image to scale


26338
07:35:56,640 --> 07:36:00,480
according to its width and height so let's go into this tab which is called


26339
07:36:00,480 --> 07:36:03,360
let's see what this tab is actually called


26340
07:36:03,360 --> 07:36:08,800
attribute inspector and inside this scaling here actually


26341
07:36:08,800 --> 07:36:14,000
it's not scale really i believe it should be content mode in here and let's


26342
07:36:14,000 --> 07:36:20,160
just say it is aspect fit okay so it keeps the aspect ratio of the


26343
07:36:20,160 --> 07:36:24,640
original image but it also ensures that it's like yeah it's fitting on the


26344
07:36:24,640 --> 07:36:31,360
screen for now okay so let's leave it like this


26345
07:36:31,760 --> 07:36:37,512
all right so let's then go ahead and actually see if this looks okay so what


26346
07:36:37,512 --> 07:36:42,080
we could do is to write in xcode let's just say yeah


26347
07:36:42,080 --> 07:36:48,400
let's run on ios 13 pro which i believe is the simulator and that i have already


26348
07:36:48,400 --> 07:36:51,760
in here and from


26349
07:36:51,760 --> 07:36:56,720
from xcode itself we can press the run button to have a look at how this


26350
07:36:56,720 --> 07:37:01,192
actually looks like and while this build process is going you can also go to your


26351
07:37:01,192 --> 07:37:05,832
simulator here and say file and open simulator and i'm just going to


26352
07:37:05,832 --> 07:37:12,080
choose another simulator as well such as iphone 8 plus okay it is just good idea


26353
07:37:12,080 --> 07:37:16,320
usually to test your splash screen and the functionality of your application on


26354
07:37:16,320 --> 07:37:22,800
as many devices and simulator as you can i mean i actually prefer to test on real


26355
07:37:22,800 --> 07:37:26,640
devices but right now it is quite


26356
07:37:26,640 --> 07:37:29,832
difficult for me to bring so many test devices on the screen so i'm just going


26357
07:37:29,832 --> 07:37:33,280
to use a simulator to test the splash screen okay


26358
07:37:33,280 --> 07:37:38,400
so now what we're doing is just to compile our application for iphone 13


26359
07:37:38,400 --> 07:37:42,832
pro which is a simulator we've been using so far when it came to for


26360
07:37:42,832 --> 07:37:46,960
instance um testing our application so let's move


26361
07:37:46,960 --> 07:37:50,080
this to the background because this is not really our application this is our


26362
07:37:50,080 --> 07:37:55,440
application so let's bring it here and let's


26363
07:37:55,440 --> 07:38:00,872
just give some time to xcode to do the work that it needs in order to build


26364
07:38:00,872 --> 07:38:05,040
our application for this simulator and also install it and run it so that we


26365
07:38:05,040 --> 07:38:08,720
can have a look a little bit at the splash screen so i'm just going to


26366
07:38:08,720 --> 07:38:13,360
be waiting until that process is done


26367
07:38:13,360 --> 07:38:20,552
all right now our application is running on a simulator called iphone 13 pro so


26368
07:38:20,552 --> 07:38:24,640
what we need to do is to actually kill the running of the application because


26369
07:38:24,640 --> 07:38:28,552
after the application is launched we're not going to see the launch screen even


26370
07:38:28,552 --> 07:38:32,552
if you for instance send the application to the background with command shift h


26371
07:38:32,552 --> 07:38:36,552
that sends the application to home and bring it back up there is no launch


26372
07:38:36,552 --> 07:38:40,960
screen remember launch screen for an application is only displayed when the


26373
07:38:40,960 --> 07:38:45,592
application is completely dead and it's cold booting so in order to send in


26374
07:38:45,592 --> 07:38:49,120
order to basically kill the application what you could do is either press the


26375
07:38:49,120 --> 07:38:52,960
stop button here on xcode which basically kills the debug


26376
07:38:52,960 --> 07:38:57,440
process and and also kills the application so now


26377
07:38:57,440 --> 07:39:01,512
you can actually click on the application in your home screen and


26378
07:39:01,512 --> 07:39:05,120
bring it to the foreground and as you saw that was the little splash screen


26379
07:39:05,120 --> 07:39:08,960
that we saw on the screen so i'm gonna kill the app and bring it back up again


26380
07:39:08,960 --> 07:39:13,680
and that's our splash screen so seems to be actually looking fine on iphone 13


26381
07:39:13,680 --> 07:39:19,760
pro let's now change the target in here and change it to our iphone 8 plus


26382
07:39:19,760 --> 07:39:23,040
which is the other simulator that i brought up here


26383
07:39:23,040 --> 07:39:27,832
and the reasoning for that is that iphone 8 plus is still a major player in


26384
07:39:27,832 --> 07:39:32,320
the market a lot of people have iphone 8 plus and the screen is fabulous it is a


26385
07:39:32,320 --> 07:39:37,280
great phone that people are still using so and the huge difference between


26386
07:39:37,280 --> 07:39:43,192
iphone 8 plus and iphone 13 pro is that iphone 8 plus has no notch so it doesn't


26387
07:39:43,192 --> 07:39:48,640
have um the notch that you can see in here on an iphone 13 pro so and it has a


26388
07:39:48,640 --> 07:39:53,440
home button so that's a little bit of a thing that we have to think about that


26389
07:39:53,440 --> 07:39:56,872
you need to test your application on multiple devices and now i'm going to


26390
07:39:56,872 --> 07:40:00,872
kill the application oops i don't actually know what i did so


26391
07:40:00,872 --> 07:40:04,960
let's go in here and i'm going to kill the debug process on iphone 8 plus as


26392
07:40:04,960 --> 07:40:09,592
well and run it again and let me just delete this old app from here so we so


26393
07:40:09,592 --> 07:40:13,440
we don't get confused and if you run the application did you just


26394
07:40:13,440 --> 07:40:17,192
see it momentarily that the application that the splash screen doesn't look so


26395
07:40:17,192 --> 07:40:23,192
good it's not doing so well so if i run it again with do you see the spacing on


26396
07:40:23,192 --> 07:40:27,280
the right and left if you pause the video you will see it


26397
07:40:27,280 --> 07:40:31,120
that is because we have a little bit of problem with our aspect ratio in here


26398
07:40:31,120 --> 07:40:35,440
because you remember in this launch emit launch image we said aspect fit what we


26399
07:40:35,440 --> 07:40:40,232
need to do is just to say aspect fill and aspect fill what it does it tries to


26400
07:40:40,232 --> 07:40:44,160
keep it it doesn't try it keeps the aspect ratio but it always makes sure


26401
07:40:44,160 --> 07:40:49,360
that the image is that is at least as big as its container so having done that


26402
07:40:49,360 --> 07:40:52,720
let's run the application again on iphone 8 plus


26403
07:40:52,720 --> 07:40:59,960
with that change in mind and let's see how the application looks like


26404
07:41:00,000 --> 07:41:04,480
now it looked a lot better so there was no empty space to the right and left i'm


26405
07:41:04,480 --> 07:41:09,512
gonna kill the application like this send it up bring it up


26406
07:41:09,512 --> 07:41:13,512
and let's see oh it's because my debug debug process i just killed my debug


26407
07:41:13,512 --> 07:41:18,232
process so let's kill it again like this let's see


26408
07:41:18,232 --> 07:41:21,592
if i c if i can manage to do that kill the application


26409
07:41:21,592 --> 07:41:24,720
and open it and now i can see that this splash


26410
07:41:24,720 --> 07:41:29,680
screen is actually looking good on iphone 8 plus as well


26411
07:41:29,680 --> 07:41:35,040
great now that things are working fine on ios we need to focus on android so


26412
07:41:35,040 --> 07:41:40,000
let me bring up the caption for the next section that we're going to talk about


26413
07:41:40,000 --> 07:41:44,480
we're going to talk about android slash screens here i'll also try to open this


26414
07:41:44,480 --> 07:41:47,832
url so let me bring it here


26415
07:41:47,832 --> 07:41:51,512
so you'll see that there is official documentation about creating splash


26416
07:41:51,512 --> 07:41:54,480
screens for android as well on developerandroid.com


26417
07:41:54,480 --> 07:41:59,120
guide topics ui splash slash um


26418
07:41:59,120 --> 07:42:02,080
splash dash screen and


26419
07:42:02,080 --> 07:42:05,760
um here there is a lot of information that you can have a look at and like


26420
07:42:05,760 --> 07:42:09,440
even animations as you can see in here what splash screens mean to android


26421
07:42:09,440 --> 07:42:14,400
applications and that you can even animate them etc etc so i suggest that


26422
07:42:14,400 --> 07:42:18,960
you actually read the documentation for splash screens on android to get a


26423
07:42:18,960 --> 07:42:23,192
better understanding of the differences between ios splash screens and android


26424
07:42:23,192 --> 07:42:27,512
splash screens it's always good to know i like the underlying implementation and


26425
07:42:27,512 --> 07:42:31,912
how it actually works under the hood if you're a flutter developer you don't


26426
07:42:31,912 --> 07:42:35,440
necessarily have to only focus on flutter but you since you're deploying


26427
07:42:35,440 --> 07:42:41,360
your application compatible with for instance mac os linux windows and


26428
07:42:41,360 --> 07:42:44,960
android it's always good to know in my opinion


26429
07:42:44,960 --> 07:42:49,440
how it works under the hood so if you want to have a look at this


26430
07:42:49,440 --> 07:42:53,912
please go ahead and read the documentation on how it works and now


26431
07:42:53,912 --> 07:42:59,040
let's go to this a little beauty of a link which is on stack overflow


26432
07:42:59,040 --> 07:43:01,832
which which is one of my favorite websites to find


26433
07:43:01,832 --> 07:43:05,040
um solutions that i can't even think of the


26434
07:43:05,040 --> 07:43:09,592
answers to sorry the problems that i can't find the answers to so let's go


26435
07:43:09,592 --> 07:43:13,760
ahead and have a look at this url in here which will explain to you the


26436
07:43:13,760 --> 07:43:18,480
different resolutions that we have to provide for our splash screen for an


26437
07:43:18,480 --> 07:43:23,440
android device and you saw it from our figma design in here


26438
07:43:23,440 --> 07:43:27,440
it's gonna load now excuse me um


26439
07:43:27,440 --> 07:43:31,592
so here you saw that when we exported our


26440
07:43:31,760 --> 07:43:35,120
oh this sticky note shouldn't be there i don't know why it was added there so i'm


26441
07:43:35,120 --> 07:43:39,680
just going to remove it and i hope that we actually didn't create our


26442
07:43:39,680 --> 07:43:43,832
splash screen with that in we could double check that by bringing up xcode


26443
07:43:43,832 --> 07:43:46,720
and have it looking have a look at our assets


26444
07:43:46,720 --> 07:43:50,480
and just have a look at these images showing finder


26445
07:43:50,480 --> 07:43:53,760
excuse me i'm going to bring it up and i can see that little sticky note wasn't


26446
07:43:53,760 --> 07:43:57,680
in our splash screen so that's really good it was just probably a mistake


26447
07:43:57,680 --> 07:44:02,320
from my side so that's great so as you saw for ios we


26448
07:44:02,320 --> 07:44:07,592
exported these assets in here three two one x


26449
07:44:07,592 --> 07:44:12,720
with these suffixes so two x four two x three x for three x and nothing for the


26450
07:44:12,720 --> 07:44:17,512
normal um splash screen on one x devices but on


26451
07:44:17,512 --> 07:44:21,832
android there's a lot more that we have to export so i'll open that url in here


26452
07:44:21,832 --> 07:44:27,120
that you can you'll also see and you'll see that these are the various um


26453
07:44:27,120 --> 07:44:31,592
resolutions that we have to export for our splice screen on android we're not


26454
07:44:31,592 --> 07:44:36,640
in our application supporting ldb ldpi in here so we'll we're going to go and


26455
07:44:36,640 --> 07:44:44,872
export mdpi hdpi xhdpi and etc etc so let's go ahead now in your figma design


26456
07:44:44,872 --> 07:44:48,960
right there select your splash screen from the left hand side and go go ahead


26457
07:44:48,960 --> 07:44:54,552
please and remove all these exports that we've created earlier okay so what


26458
07:44:54,552 --> 07:44:58,960
we need to do now is to make sure that we're conforming to these sizes for mdpi


26459
07:44:58,960 --> 07:45:02,320
for instance and we're going to basically select the splash screen and


26460
07:45:02,320 --> 07:45:06,800
say export and let's in here see


26461
07:45:06,800 --> 07:45:12,640
that okay these are the sizes so 1x let's just say we don't want any suffix


26462
07:45:12,640 --> 07:45:16,160
and i've already prepared something like that before so let me just show you how


26463
07:45:16,160 --> 07:45:20,960
it should look like and i'm going to select this splash here


26464
07:45:20,960 --> 07:45:25,280
and you can see this is pretty much how you should create it so one x and we say


26465
07:45:25,280 --> 07:45:30,720
mdpi as it was displayed in here mdpi you see and then we say one and a half x


26466
07:45:30,720 --> 07:45:36,800
is hdpi and xhdpi etc etc okay so let's go ahead and do something similar in our


26467
07:45:36,800 --> 07:45:40,720
splash screen in here so one x and as you could as you could see in the one


26468
07:45:40,720 --> 07:45:46,232
that i preferred here one x was mdpi so let's go ahead and say a suffix is mdpi


26469
07:45:46,232 --> 07:45:50,000
like that i'll create another export in here and


26470
07:45:50,000 --> 07:45:56,080
we're in this case we need hdpi which is one and a half x so let's select this


26471
07:45:56,080 --> 07:46:01,040
and say one and a half x and we say hdpi like that


26472
07:46:01,040 --> 07:46:06,480
and then we go for the next one which is xhdpi so let's go and press the


26473
07:46:06,480 --> 07:46:11,440
plus button in here and say 2x is a x hdpi


26474
07:46:11,440 --> 07:46:15,280
and then we go to the next level which is xxhdpi


26475
07:46:15,280 --> 07:46:19,120
so let's press the plus button and say


26476
07:46:19,120 --> 07:46:23,760
uh and this needs to be x x hdpi okay


26477
07:46:23,760 --> 07:46:29,512
so we're gonna say xx hdpi and last but not least we have triplex


26478
07:46:29,512 --> 07:46:34,160
hdpi which is four x the resolution so let's say xxx


26479
07:46:34,160 --> 07:46:40,480
a plus button triplex hdpi and in here this should be 4x okay so


26480
07:46:40,480 --> 07:46:43,592
now oops i didn't want to create this drop shadow so


26481
07:46:43,592 --> 07:46:48,640
that's how yours should also look like with all these uh various resolutions in


26482
07:46:48,640 --> 07:46:51,120
here okay


26483
07:46:51,120 --> 07:46:54,960
so now what i need you to do please is just to go ahead so make sure that your


26484
07:46:54,960 --> 07:46:58,320
slash screen is selected on the left hand side and then just go and export


26485
07:46:58,320 --> 07:47:02,552
all of these so let's just press the export button


26486
07:47:02,552 --> 07:47:06,080
so that's going to take its time and calculate basically all these different


26487
07:47:06,080 --> 07:47:09,360
resolutions prepare the pngs for us and it's going to pack them into beautiful


26488
07:47:09,360 --> 07:47:12,552
zip file and then it's going to download that packed file


26489
07:47:12,552 --> 07:47:16,320
for us so depending on your connection speed this could take some time and the


26490
07:47:16,320 --> 07:47:20,000
result i can see is an untitled 2 zip file uh


26491
07:47:20,000 --> 07:47:26,080
of about 10 megabytes so there we go so let me


26492
07:47:26,080 --> 07:47:30,232
double click on this file in order to unpack it and i'm going to open the


26493
07:47:30,232 --> 07:47:34,080
folder here for you so you can also see as you can see splash screen


26494
07:47:34,080 --> 07:47:37,440
it's all there so they're all looking very similar to each other but they have


26495
07:47:37,440 --> 07:47:41,592
very different sizes as you can see though so the xxx hdpi has the size of


26496
07:47:41,592 --> 07:47:48,232
almost four megabytes whereas the mdpi is only 600 kilobytes so


26497
07:47:48,232 --> 07:47:52,232
now we got our images perfect so what we need to do is um


26498
07:47:52,232 --> 07:47:56,480
we're going to basically call them splash screens and then place


26499
07:47:56,480 --> 07:47:59,512
them inside various um


26500
07:47:59,512 --> 07:48:04,552
mipmaps folder in our android application so let me bring up visual


26501
07:48:04,552 --> 07:48:08,080
studio code in here let me see where i've placed my visual studio code right


26502
07:48:08,080 --> 07:48:12,232
there okay and if you then ex


26503
07:48:12,232 --> 07:48:16,000
go into exploration a little bit here you can see we have an ios folder so let


26504
07:48:16,000 --> 07:48:18,080
me just make the size a little bit bigger


26505
07:48:18,080 --> 07:48:21,360
excuse me and we have an android folder in here so


26506
07:48:21,360 --> 07:48:27,120
if you go to android and then app src main and then res and you'll see that


26507
07:48:27,120 --> 07:48:32,320
you have these mipmap folders hdpi mdpi and all those one two three four five


26508
07:48:32,320 --> 07:48:37,680
folders that we need for our five assets in here okay so let's go ahead and


26509
07:48:37,680 --> 07:48:42,720
actually name this file in here and let me close this little folder that i have


26510
07:48:42,720 --> 07:48:47,360
at the bottom of the screen as well so okay so um we start with mdpi in here


26511
07:48:47,360 --> 07:48:53,280
let's just call it splash okay slash png and i'm just gonna go to this mdpi


26512
07:48:53,280 --> 07:48:57,280
folder here and i can see i have a launcher icon an ic launcher so let's


26513
07:48:57,280 --> 07:49:03,360
just drag this into mip map mdpi if i can


26514
07:49:03,360 --> 07:49:08,232
and mid map mdpi there it is so the mdp i want is done


26515
07:49:08,232 --> 07:49:10,872
now i'm going to delete it from here so now


26516
07:49:10,872 --> 07:49:16,000
we have hdpi then i'm going to call it splash again remember it's hdpi so i'm


26517
07:49:16,000 --> 07:49:21,360
going to drag and drop it into the hdpi folder so it's called png there as well


26518
07:49:21,360 --> 07:49:25,512
then i'm going to delete it from here then we have the xhdpi so i'm going to


26519
07:49:25,512 --> 07:49:30,872
call it splash again and remember xhdpi so let's go and drag


26520
07:49:30,872 --> 07:49:34,592
it there great then delete it from here then we have


26521
07:49:34,592 --> 07:49:40,872
xxhdpi so call it splash again and bring it into xx folder in here


26522
07:49:40,872 --> 07:49:43,832
and i can see it's right there splash okay


26523
07:49:43,832 --> 07:49:48,480
and last but not least we have the triple x hdpi and we're going to call it


26524
07:49:48,480 --> 07:49:52,872
slash again and then let's go in here and bring it right there


26525
07:49:52,872 --> 07:49:57,912
great so now you should actually see one two


26526
07:49:57,912 --> 07:50:00,960
three four


26527
07:50:00,960 --> 07:50:06,640
and five images that we have exported and placed inside our android folder so


26528
07:50:06,640 --> 07:50:10,480
then i can delete the last one safely


26529
07:50:10,872 --> 07:50:15,440
so now that we've done that we need to actually tell our android application to


26530
07:50:15,440 --> 07:50:19,192
use those splash screens so what we need to do is to look for android window


26531
07:50:19,192 --> 07:50:23,280
background inside our application i'm going to close all these open tabs and


26532
07:50:23,280 --> 07:50:28,000
i'm going to search for android window background just like that okay


26533
07:50:28,000 --> 07:50:33,360
so you'll find four of them but only two of them are actually interesting for us


26534
07:50:33,360 --> 07:50:38,000
so what we need to do is actually i'm going to go to my styles as well here so


26535
07:50:38,000 --> 07:50:41,192
as you can see here is using a drawable but we're not using a drawable a


26536
07:50:41,192 --> 07:50:44,800
drawable is something that for instance if you look for launch background let's


26537
07:50:44,800 --> 07:50:49,760
go in here you see these um fine launch background actually is there


26538
07:50:49,760 --> 07:50:53,592
a drawable called launch oh we don't have it right now okay anyways so i'm


26539
07:50:53,592 --> 07:50:59,120
gonna search for um android window background as it was our


26540
07:50:59,120 --> 07:51:02,080
mission so let's go in here and find that window


26541
07:51:02,080 --> 07:51:05,760
background and here as you can see it says drawable launch background and this


26542
07:51:05,760 --> 07:51:11,192
file is android app src main res values styles xml so that's the first one okay


26543
07:51:11,192 --> 07:51:15,680
that's this drawable so i need you in here to change this to mipmap


26544
07:51:15,680 --> 07:51:20,080
and in here just say splash which is the name of our file that we created okay so


26545
07:51:20,080 --> 07:51:24,640
that's the first um occurrence of this android window background and then we're


26546
07:51:24,640 --> 07:51:29,280
going to go in here as well which is in android app src main res values knight


26547
07:51:29,280 --> 07:51:34,552
styles xml and call this mipmap like that


26548
07:51:34,552 --> 07:51:40,160
and in here we also say splash perfect so we've changed those


26549
07:51:40,160 --> 07:51:44,480
so what we need to do now is to actually test our changes on android as well so


26550
07:51:44,480 --> 07:51:49,040
i'm going to close all those tabs as you saw and let's just go to main dart file


26551
07:51:49,040 --> 07:51:53,040
just to have a dart file open and then i'm going to stop the running


26552
07:51:53,040 --> 07:51:55,680
of this application because i don't really know i think it's actually


26553
07:51:55,680 --> 07:52:00,080
running the application on um the iphone simulator and then i'm going to say


26554
07:52:00,080 --> 07:52:03,832
command shift p on a macintosh or ctrl shift p in windows and linux if you're


26555
07:52:03,832 --> 07:52:07,360
on visual studio code and then say flutter select device as you can see in


26556
07:52:07,360 --> 07:52:12,160
here and then i'm going to choose my android phone okay and as you know from


26557
07:52:12,160 --> 07:52:15,040
the previous chapters i actually prefer to run my


26558
07:52:15,040 --> 07:52:19,512
applications real phones and then run and then run without debugging


26559
07:52:19,512 --> 07:52:23,280
and this is gonna basically kick start our gradle build


26560
07:52:23,280 --> 07:52:30,080
processing here and while that is ongoing i'll go and bring um scr cpy to


26561
07:52:30,080 --> 07:52:34,960
the screen so here it is and i can see


26562
07:52:34,960 --> 07:52:38,000
nothing actually what happened to our build


26563
07:52:38,000 --> 07:52:42,640
i think our build somehow crashed so let's go and build again and see what


26564
07:52:42,640 --> 07:52:47,280
happens debug console and


26565
07:52:47,280 --> 07:52:51,760
okay i can see it says there is a problem and let's see another expected


26566
07:52:51,760 --> 07:52:58,080
caller reference bot got raw string mid map splash okay so let's have a look at


26567
07:52:58,080 --> 07:53:03,592
what we actually did with this mid map splash i can see i've actually written


26568
07:53:03,592 --> 07:53:07,440
incorrectly i've written me map so that could that could explain it it's a


26569
07:53:07,440 --> 07:53:10,960
mid-map so if you've done the same mistake as me in one place please just


26570
07:53:10,960 --> 07:53:15,280
correct this so it's mipmap all right so


26571
07:53:15,280 --> 07:53:21,040
fine okay fair enough and let's now try to run the application again and see if


26572
07:53:21,040 --> 07:53:25,192
it can compile this time so it says


26573
07:53:25,192 --> 07:53:30,080
it got a raw string again and it's now did i really type it in correctly did i


26574
07:53:30,080 --> 07:53:34,640
write mimi map this is unbelievable um if i've actually


26575
07:53:34,640 --> 07:53:39,760
done that so so no i i think i've actually written it


26576
07:53:39,760 --> 07:53:43,592
in two places incorrectly so map


26577
07:53:43,592 --> 07:53:47,280
all right it would be very comical if i made a


26578
07:53:47,280 --> 07:53:51,360
mistake again while trying to fix my previous mistakes


26579
07:53:51,360 --> 07:53:55,760
so let's see now if the android build is gonna go through successfully so i'll


26580
07:53:55,760 --> 07:54:00,160
just wait here until that task is done


26581
07:54:01,360 --> 07:54:07,120
okay it's built successfully i was just gonna go grab some coffee so


26582
07:54:08,160 --> 07:54:12,480
and it's connecting now so that actually went really fast i would say gradle


26583
07:54:12,480 --> 07:54:16,320
builds in here are surprisingly fast when running with flutter for instance


26584
07:54:16,320 --> 07:54:21,512
compared to the ios xcode build system so i'm going to bring up scrcpy in here


26585
07:54:21,512 --> 07:54:24,872
and i can see the application running without a problem but we didn't actually


26586
07:54:24,872 --> 07:54:28,480
see our splash screen so what i'm going to do is i'm going to


26587
07:54:28,480 --> 07:54:31,512
stop the processing here which kills the


26588
07:54:31,512 --> 07:54:35,680
application and then i'm gonna find our application here and then open it and


26589
07:54:35,680 --> 07:54:39,832
then i can see our beautiful splash screen on the screen when the


26590
07:54:39,832 --> 07:54:44,232
application starts so that's also working as expected no problems at all


26591
07:54:44,232 --> 07:54:48,232
and remember we've done quite a lot of work now we've done like icons from the


26592
07:54:48,232 --> 07:54:51,832
previous chapters and we've also worked on our splash screen so


26593
07:54:51,832 --> 07:54:54,960
there's lots that we've done but we haven't really committed any of these


26594
07:54:54,960 --> 07:54:58,400
because the work wasn't complete however


26595
07:54:58,400 --> 07:55:02,800
now that we have um both icons and splash screens on both


26596
07:55:02,800 --> 07:55:06,480
ios and android i think it's time that we do as we usually do at the end of


26597
07:55:06,480 --> 07:55:09,760
every chapter is to commit our work and make sure that we're not going to lose


26598
07:55:09,760 --> 07:55:12,480
it so i'm going to do some reshuffling on


26599
07:55:12,480 --> 07:55:16,960
the screen right here and i'm going to increase the size here as well so i'm


26600
07:55:16,960 --> 07:55:23,120
going to go to terminal then like this and let's then have a look at the status


26601
07:55:23,120 --> 07:55:26,872
and you can see that we've done a lot of work so


26602
07:55:26,872 --> 07:55:30,640
there are many files that have been changed as you can see in here modified


26603
07:55:30,640 --> 07:55:34,320
modified a tremendous amount of work so


26604
07:55:34,320 --> 07:55:40,000
let's just say get at all and then let's commit all this work as


26605
07:55:40,000 --> 07:55:45,440
is it step 28 yes step 28 okay so if you look at our logs so we have


26606
07:55:45,440 --> 07:55:50,640
step 27 and then we have step 28 as well so i'm gonna push all these changes and


26607
07:55:50,640 --> 07:55:55,592
this push is actually quite a big push because we have a lot of resources that


26608
07:55:55,592 --> 07:56:00,160
we're pushing to github so or wherever you're hosting your git repository it


26609
07:56:00,160 --> 07:56:04,552
could be bitbucket or somewhere else but depending on your connection and the


26610
07:56:04,552 --> 07:56:08,720
ability of your host to receive these files this operation could actually take


26611
07:56:08,720 --> 07:56:14,232
some time so and after we've done that let's also tag our work at step 28


26612
07:56:14,232 --> 07:56:18,160
like that and push our tags


26613
07:56:18,320 --> 07:56:22,400
all right so if i say now git tag we should have 26


26614
07:56:22,400 --> 07:56:29,192
27 and 28 line up right there so perfect and we should have no status right now


26615
07:56:29,192 --> 07:56:32,640
awesome as it's tradition after our tagging and


26616
07:56:32,640 --> 07:56:35,280
committing everything at the end of every chapter we'll talk about what we


26617
07:56:35,280 --> 07:56:38,552
need to discuss in the chapter that is to come and


26618
07:56:38,552 --> 07:56:41,120
um i can't believe we're actually getting


26619
07:56:41,120 --> 07:56:46,000
to this point in this course it is such a huge moment both both for me and i


26620
07:56:46,000 --> 07:56:50,800
hope it is for you as well because we are actually going to submit our ios


26621
07:56:50,800 --> 07:56:55,120
application to the app store so without further ado if you want to


26622
07:56:55,120 --> 07:56:58,872
get some refreshments please do and i'll see you in the next chapter


26623
07:56:58,872 --> 07:57:02,480
hello and welcome to chapter 47 of the slatter course


26624
07:57:02,480 --> 07:57:05,912
uh we've been waiting for this moment for a very long time now at least i have


26625
07:57:05,912 --> 07:57:09,912
so that we have been developing our application using block we've been doing


26626
07:57:09,912 --> 07:57:14,320
a lot of work with widgets we've prepared splash screens icons etc etc


26627
07:57:14,320 --> 07:57:18,160
we've even got our hands dirty with figma a task that maybe many of you


26628
07:57:18,160 --> 07:57:22,872
hadn't done before so what is left now well we're gonna send


26629
07:57:22,872 --> 07:57:28,480
our application to the ios app store and it gives me really a lot of pressure


26630
07:57:28,480 --> 07:57:31,592
pleasure to actually announce that that we're gonna do this so


26631
07:57:31,592 --> 07:57:36,080
what do we need to do in order to be able to interact with the app store and


26632
07:57:36,080 --> 07:57:38,320
also in order to be able to create your


26633
07:57:38,320 --> 07:57:43,192
application of course you you're going to need to have a macintosh and that is


26634
07:57:43,192 --> 07:57:46,720
as i've mentioned an unfortunate fact when you're dealing with ios development


26635
07:57:46,720 --> 07:57:51,040
but if you don't have a macintosh you can always contact a friend or maybe you


26636
07:57:51,040 --> 07:57:55,280
use a service on the internet that can for instance take your source code and


26637
07:57:55,280 --> 07:57:58,960
build your application for you i don't know if those services exist however


26638
07:57:58,960 --> 07:58:02,160
let's just accept the fact the unfortunate fact that you'll need to


26639
07:58:02,160 --> 07:58:06,000
have a macintosh in order to build your application and send it to the ios app


26640
07:58:06,000 --> 07:58:08,480
store so


26641
07:58:08,480 --> 07:58:13,360
what do we actually need you see when you create your application for um for


26642
07:58:13,360 --> 07:58:17,760
apple you need to bundle it up inside a file which is pretty much just a zip


26643
07:58:17,760 --> 07:58:23,680
file but its extension is called ipa and this zip file in essence contains


26644
07:58:23,680 --> 07:58:27,680
your entire application bundle all the resources and all the


26645
07:58:27,680 --> 07:58:32,960
signed binaries from your side and then you'll just need to submit it to apple


26646
07:58:32,960 --> 07:58:36,480
and then this submission is going to go to


26647
07:58:36,480 --> 07:58:39,832
something called app store connect and um


26648
07:58:39,832 --> 07:58:44,232
we're going to now talk about app store connect actually and what that is so you


26649
07:58:44,232 --> 07:58:46,960
see when when you're developing your flutter


26650
07:58:46,960 --> 07:58:49,760
application for instance and you're talking with firebase then inside of


26651
07:58:49,760 --> 07:58:54,000
your code you're talking with the firebase sdk but on the backend side of


26652
07:58:54,000 --> 07:58:58,960
firebase then there's an entire console so there's in the console.firebase


26653
07:58:58,960 --> 07:59:02,232
google.com i think it's called or if you just google it and say


26654
07:59:02,232 --> 07:59:05,280
firebase console you'll get to that point and


26655
07:59:05,280 --> 07:59:07,680
app store connect is


26656
07:59:07,680 --> 07:59:13,512
the firebase console for ios developers so it is where you basically manage your


26657
07:59:13,512 --> 07:59:16,800
applications the reviews that are submitted to your


26658
07:59:16,800 --> 07:59:21,592
applications you can respond to those reviews so it's like the back end


26659
07:59:21,592 --> 07:59:25,512
um is kind of like a front end for app


26660
07:59:25,512 --> 07:59:28,960
store's back-end you could say so it's your portal


26661
07:59:28,960 --> 07:59:32,800
basically to to the app store as a developer


26662
07:59:32,800 --> 07:59:37,280
and google also has something similar which is the google developer console


26663
07:59:37,280 --> 07:59:42,232
excuse me so what we need to do now in order to


26664
07:59:42,232 --> 07:59:47,440
be able to continue we need to actually create our applications on the app store


26665
07:59:47,440 --> 07:59:51,440
connect so what i'm going to do in here is i'm going to bring up app store


26666
07:59:51,440 --> 07:59:54,720
connect and i've already logged in with my developer account


26667
07:59:54,720 --> 07:59:58,480
and let's go in here as you can see these are some of the apps that i'd


26668
07:59:58,480 --> 08:00:02,800
submitted to apple previously if i can increase the size of this let's


26669
08:00:02,800 --> 08:00:05,760
see if it works yep all right


26670
08:00:05,760 --> 08:00:10,232
so what we need to do is in order to be able to submit our application if we


26671
08:00:10,232 --> 08:00:13,832
haven't done that before for this particular application which we haven't


26672
08:00:13,832 --> 08:00:17,360
we need to create an application here on app store connect okay so please go to


26673
08:00:17,360 --> 08:00:21,040
appstoreconnect.apple.com and then you'll be presented with a


26674
08:00:21,040 --> 08:00:23,912
screen that asks you okay what do you want to do with app store connect and it


26675
08:00:23,912 --> 08:00:28,232
kind of looks like this my apps app analytics etc etc


26676
08:00:28,232 --> 08:00:32,640
and this is actually i'm assuming that you have admin access


26677
08:00:32,640 --> 08:00:35,680
to app store connect because apps are connect like many other


26678
08:00:35,680 --> 08:00:39,680
frontends it has permission it's like permission based so


26679
08:00:39,680 --> 08:00:43,592
if you're for instance working with a company and that company has invited you


26680
08:00:43,592 --> 08:00:47,192
to their own app store connect account and depending on the permissions that


26681
08:00:47,192 --> 08:00:53,760
they set for you you may or may not have access to either one or all the apps so


26682
08:00:53,760 --> 08:00:58,400
it is also app-based the permission so like and i can invite you to my app


26683
08:00:58,400 --> 08:01:02,232
store connect and only give you access for instance to this application and


26684
08:01:02,232 --> 08:01:07,040
only give you a very limited access or admin access okay


26685
08:01:07,040 --> 08:01:11,280
so if you don't have access to this app sections because you're invited as


26686
08:01:11,280 --> 08:01:15,680
um as a user to someone else's app store connect account and they haven't given


26687
08:01:15,680 --> 08:01:20,080
you the access to access their application so you need to ask them for


26688
08:01:20,080 --> 08:01:24,320
permission basically to increase the permission level for you


26689
08:01:24,320 --> 08:01:27,680
so let's go ahead and press this plus button and this is in here we're going


26690
08:01:27,680 --> 08:01:31,680
to say new app and in here it's going to ask you okay what kind of app is it it's


26691
08:01:31,680 --> 08:01:36,552
an ios app it's not a mac os like we haven't really worked on a native mac os


26692
08:01:36,552 --> 08:01:40,232
application although users


26693
08:01:40,232 --> 08:01:44,160
now with m1 processors on macintosh with


26694
08:01:44,160 --> 08:01:48,640
macintosh which are arm based they can actually install ios applications as


26695
08:01:48,640 --> 08:01:52,000
you'll soon see so this application that we're developing flutter we didn't


26696
08:01:52,000 --> 08:01:56,552
actually create a macintosh target for it but even though it's an ios


26697
08:01:56,552 --> 08:02:00,552
application you can still install it with test flight or later when it's


26698
08:02:00,552 --> 08:02:04,480
actually released on the ios app store you can install it with the mac app


26699
08:02:04,480 --> 08:02:07,760
store on your macintosh so it's absolutely lovely


26700
08:02:07,760 --> 08:02:11,040
okay so here one you need to do in the name field


26701
08:02:11,040 --> 08:02:16,320
you need to find a unique name in the entire app store there are millions of


26702
08:02:16,320 --> 08:02:19,680
applications on the i'm actually making up this statistic i don't know if it's


26703
08:02:19,680 --> 08:02:23,120
like hundreds of thousands of applications or millions but let's just


26704
08:02:23,120 --> 08:02:26,000
let's just say millions because easier to say


26705
08:02:26,000 --> 08:02:29,192
all these applications are in the app store you have to find a unique name for


26706
08:02:29,192 --> 08:02:35,120
your application and remember you can't use reserved words so if you look in


26707
08:02:35,120 --> 08:02:38,872
here if i cancel this if you look in here


26708
08:02:38,872 --> 08:02:43,120
this is not an accepted application name so i just i've prepared this in here


26709
08:02:43,120 --> 08:02:47,360
just to demonstrate it for you that if you use for instance a name like


26710
08:02:47,360 --> 08:02:51,592
firebase things like that probably apple is going to reject your


26711
08:02:51,592 --> 08:02:56,160
application and definitely google is not even going to allow you to go to the


26712
08:02:56,160 --> 08:03:00,960
google play store with a name with a part of your application name


26713
08:03:00,960 --> 08:03:04,720
being a reserved word like a product such as firebase so


26714
08:03:04,720 --> 08:03:08,960
you have to find a unique name that is not reserved so let's just say ios and


26715
08:03:08,960 --> 08:03:13,592
what should we call this i mean in our application we call it now my notes


26716
08:03:13,592 --> 08:03:18,080
i'm pretty sure if you say my notes that name is already taken


26717
08:03:18,080 --> 08:03:20,232
so let's say my


26718
08:03:20,232 --> 08:03:26,400
awesome notes something like that as you can see it says it is the name


26719
08:03:26,400 --> 08:03:29,912
that will appear in the app store okay my awesome notes


26720
08:03:29,912 --> 08:03:33,512
and in here in this box the primary language we're going to choose english


26721
08:03:33,512 --> 08:03:37,760
and we're going to choose us because we didn't really focus on


26722
08:03:37,760 --> 08:03:40,640
separating our language like how we actually


26723
08:03:40,640 --> 08:03:43,760
interact with the user with our strings in the application to make sure that


26724
08:03:43,760 --> 08:03:47,512
it's like british english or us english so let's just go with the international


26725
08:03:47,512 --> 08:03:51,040
us english in here and in this box you're going to be asked


26726
08:03:51,040 --> 08:03:55,040
to actually choose your bundle identifier and app store connect has


26727
08:03:55,040 --> 08:03:58,720
then after you log in with app store connect it's going to hook into the


26728
08:03:58,720 --> 08:04:02,960
developer account for this user that you logged in with and it's going to pull


26729
08:04:02,960 --> 08:04:07,440
all your bundle identifiers into the app store connect so you don't have to type


26730
08:04:07,440 --> 08:04:11,192
it by hand so let's go find our my notes application as you can see in here it's


26731
08:04:11,192 --> 08:04:15,440
as epic salty my notes and for you it may be something else okay


26732
08:04:15,440 --> 08:04:20,160
so i chose that and then sku is a unique id for your app that is not visible on


26733
08:04:20,160 --> 08:04:23,832
the app store so this is mainly for you sku is kind of like


26734
08:04:23,832 --> 08:04:29,192
it kind of comes from like um old school when you had a normal


26735
08:04:29,192 --> 08:04:33,192
physical store and your products had kind of like an identifier so this is an


26736
08:04:33,192 --> 08:04:38,160
identifier for you it may appear some places like when you're extracting some


26737
08:04:38,160 --> 08:04:42,400
reports from apple to see okay how many unique users do i have how many unique


26738
08:04:42,400 --> 08:04:46,720
installs do i have etc so this sku is mainly for you it's an


26739
08:04:46,720 --> 08:04:49,592
identifier so you could just go with something that makes sense to you and in


26740
08:04:49,592 --> 08:04:53,760
here i'm just gonna say zero one zero one zero one


26741
08:04:53,760 --> 08:04:57,192
or this and then one one one one


26742
08:04:57,192 --> 08:05:01,592
just making things up okay and user access in here you can say you


26743
08:05:01,592 --> 08:05:05,512
you can limit which user see this app in the app store connect if you select full


26744
08:05:05,512 --> 08:05:10,720
access all your users will have access to the app so this is like you limiting


26745
08:05:10,720 --> 08:05:14,552
who can in your app store connect account who can have access to this


26746
08:05:14,552 --> 08:05:18,640
application and since i don't have any guest users in my private company's


26747
08:05:18,640 --> 08:05:22,480
account i'm just gonna go with full access but if you're working with like


26748
08:05:22,480 --> 08:05:25,912
if you're if you're the account owner and then you have some other people


26749
08:05:25,912 --> 08:05:29,832
invited to app store connect that don't want that shouldn't get access to this


26750
08:05:29,832 --> 08:05:33,912
account you could just go in here and basically say limit the access to this


26751
08:05:33,912 --> 08:05:37,120
application to these accounts but i'm just going to go with full access okay


26752
08:05:37,120 --> 08:05:40,720
i'm going to say create and in here is the place that you may actually get a


26753
08:05:40,720 --> 08:05:44,400
problem with the name of the application so let's just try it out and see if my


26754
08:05:44,400 --> 08:05:48,400
awesome notes is some name that somebody else has taken and we'll get to know


26755
08:05:48,400 --> 08:05:52,400
that soon and from from the looks of it it seems


26756
08:05:52,400 --> 08:05:57,760
like that my awesome notes was such a lame name that nobody has taken so


26757
08:05:57,760 --> 08:06:03,832
so that's great for us so um now we've created the application and um


26758
08:06:03,832 --> 08:06:07,832
that part is basically done so as you can see in here the first


26759
08:06:07,832 --> 08:06:12,640
thing that you have to enter in this screen let me actually increase the size


26760
08:06:12,640 --> 08:06:17,120
and let me change the screen layout a little bit here okay


26761
08:06:17,120 --> 08:06:21,360
so the first thing that we see on the screen here is that uh there's a version


26762
08:06:21,360 --> 08:06:24,232
information and also there's app previews and screenshots and this is the


26763
08:06:24,232 --> 08:06:27,592
place that we're gonna upload our screenshots to the app store


26764
08:06:27,592 --> 08:06:30,960
as you can see at the bottom of the screen it's very important that you take


26765
08:06:30,960 --> 08:06:35,912
your screenshots first on an iphone 13 pro max because that is


26766
08:06:35,912 --> 08:06:40,000
the iphone with a six and a half inch display and you may be tempted to just


26767
08:06:40,000 --> 08:06:44,160
try to take your screenshots on an iphone 13 pro but if you do that then


26768
08:06:44,160 --> 08:06:47,192
you'll understand after uploading them you'll get an error from app store


26769
08:06:47,192 --> 08:06:52,480
connect saying that the resolution isn't according to what is expected so what we


26770
08:06:52,480 --> 08:06:57,360
need to do here is to go to our iphone um simulator so and i have quite a few


26771
08:06:57,360 --> 08:07:01,360
of them here so this is our iphone 13 pro


26772
08:07:01,360 --> 08:07:08,080
this is our iphone 8 plus and also we have our iphone 13 pro max


26773
08:07:08,080 --> 08:07:12,720
so now our responsibility is to actually take the screenshots on this simulator


26774
08:07:12,720 --> 08:07:16,480
however you'll notice that we have a little problem in here


26775
08:07:16,480 --> 08:07:20,080
well problem problem but for taking screenshots this is a little bit of a


26776
08:07:20,080 --> 08:07:23,912
problem in that we have this debug manner here that i am that flutter


26777
08:07:23,912 --> 08:07:27,360
creates by default so if i zoom in a little bit here you'll see that it's


26778
08:07:27,360 --> 08:07:30,480
it's just saying debug right here and we need to make sure that we remove that


26779
08:07:30,480 --> 08:07:34,232
before taking our screenshots so what i'm going to do is i'm going to go back


26780
08:07:34,232 --> 08:07:38,080
to our source code so let's go in here


26781
08:07:38,080 --> 08:07:42,160
and you can see at the moment the application's running on iphone 8 plus


26782
08:07:42,160 --> 08:07:46,720
which is the simulator to the left hand side so in order to remove that debug


26783
08:07:46,720 --> 08:07:52,000
banner what you'll have to do is to go to your main um dart file as you can see


26784
08:07:52,000 --> 08:07:55,360
and go to the main function where you've created the material application right


26785
08:07:55,360 --> 08:07:59,680
after the title or even before you can just say banner which is debug show


26786
08:07:59,680 --> 08:08:03,120
check mode banner and set that parameter to false and then i'm just going to do a


26787
08:08:03,120 --> 08:08:07,280
hot reload actually hot restart we have to do so


26788
08:08:07,280 --> 08:08:12,640
oh i'm not even running it so let's just go flutter select device 8 plus and then


26789
08:08:12,640 --> 08:08:17,512
i'm going to say run without debugging so you need to ensure that you remove


26790
08:08:17,512 --> 08:08:21,832
that um debug show checked mode banner and i started not remove it you have to


26791
08:08:21,832 --> 08:08:26,480
remove the banner by setting this parameter to false and now it's going to


26792
08:08:26,480 --> 08:08:31,120
basically run the application on iphone 8 plus and it's going to show us the


26793
08:08:31,120 --> 08:08:33,832
results so this debug banner is going to go away


26794
08:08:33,832 --> 08:08:37,120
after doing that when we see that it's working on iphone 8 plus for instance


26795
08:08:37,120 --> 08:08:40,232
then we're going to do the same thing do a flutter select device and run the


26796
08:08:40,232 --> 08:08:45,760
application on iphone 13 pro max so this process depending on your machine


26797
08:08:45,760 --> 08:08:50,480
depending on your settings etc it could take a while so i'll just wait here and


26798
08:08:50,480 --> 08:08:54,320
do this now it's running okay that's eight plus


26799
08:08:54,320 --> 08:08:57,760
that's great so now that's done now i'm going to close this and stop the debug


26800
08:08:57,760 --> 08:09:02,232
process and say flutter select device and choose iphone 13 from max


26801
08:09:02,232 --> 08:09:06,720
and do the same thing run without debugging okay


26802
08:09:06,720 --> 08:09:10,000
and then again depending on the machine that


26803
08:09:10,000 --> 08:09:12,800
you're running this command on this process could take anywhere between a


26804
08:09:12,800 --> 08:09:16,872
few seconds to maybe even a minute or even maybe more


26805
08:09:16,872 --> 08:09:20,320
so i'm just gonna wait here for this


26806
08:09:20,320 --> 08:09:25,440
process to go through and um while that is actually happening you'll


26807
08:09:25,440 --> 08:09:29,040
also need to know that you need to take your screenshots on iphone 13 pro max


26808
08:09:29,040 --> 08:09:33,280
and iphone 8 plus in order to be able to cover all the required screenshots for


26809
08:09:33,280 --> 08:09:37,440
app store connect so since we don't need iphone 13 pro i'm just going to minimize


26810
08:09:37,440 --> 08:09:41,592
it right now into the taskbar and here is iphone 13 pro max


26811
08:09:41,592 --> 08:09:44,720
so let's go ahead in here and take some screenshots so i'm going to minimize


26812
08:09:44,720 --> 08:09:49,680
iphone 8 plus as well so we have this in focus so what i'm going to do in here is


26813
08:09:49,680 --> 08:09:53,832
i'm going to go to this login field and at the moment as you can see i can type


26814
08:09:53,832 --> 08:09:57,192
in this field because this is a simulator but i don't see the keyboard


26815
08:09:57,192 --> 08:10:00,960
but in real life when users actually download your application and run it on


26816
08:10:00,960 --> 08:10:04,960
their iphones they're gonna see a keyboard so it is a lot more realistic


26817
08:10:04,960 --> 08:10:09,360
if we bring the software keyboard as well on the screen so to do that on your


26818
08:10:09,360 --> 08:10:13,360
macintosh we'll just have to do command k for keyboard and that will just bring


26819
08:10:13,360 --> 08:10:17,120
up the keyboard just like this so what i'm going to do since i don't like


26820
08:10:17,120 --> 08:10:20,960
this carrot that at the moment is blinking right there what


26821
08:10:20,960 --> 08:10:24,400
i'm going to do is just wait until that carrot appears and just take a


26822
08:10:24,400 --> 08:10:28,320
screenshot of this iphone 13 pro max simulator and the way to take a


26823
08:10:28,320 --> 08:10:33,360
screenshot on a macintosh on an iphone simulator is to press command s as in


26824
08:10:33,360 --> 08:10:37,360
screenshot or save okay so i'm just going to wait for this care


26825
08:10:37,360 --> 08:10:40,720
to go away and sorry about that i'll just go also


26826
08:10:40,720 --> 08:10:45,192
here in desktop and remove everything that was created already


26827
08:10:45,192 --> 08:10:47,680
so here's the simulator and here's the


26828
08:10:47,680 --> 08:10:52,400
desktop then i'll wait for the care and it went away i took a screenshot so


26829
08:10:52,400 --> 08:10:56,552
let's go ahead and do the same thing in forgot password screen for instance


26830
08:10:56,552 --> 08:11:01,120
and i'm just going to wait for care to go away took a screenshot


26831
08:11:01,120 --> 08:11:04,872
then let's go back to the login screen and then to the register


26832
08:11:04,872 --> 08:11:08,080
and right here as the care disappears i'm going to take a screenshot as well


26833
08:11:08,080 --> 08:11:10,960
so this is going to be our third screenshot okay so we have a screenshot


26834
08:11:10,960 --> 08:11:13,440
of the login screen the register screen and


26835
08:11:13,440 --> 08:11:17,360
the verify or was it verified


26836
08:11:17,360 --> 08:11:22,640
i forgot my password sorry okay so now i'm going to log in with a user that


26837
08:11:22,640 --> 08:11:26,080
already exists in the application so that we can take a screenshot of the


26838
08:11:26,080 --> 08:11:28,720
main interface of the application as well so i'm going to take a screenshot


26839
08:11:28,720 --> 08:11:32,720
of this with command s on my macintosh and maybe for the fifth screenshot we're


26840
08:11:32,720 --> 08:11:37,192
also gonna take one from where you're in the screen and editing your notes with


26841
08:11:37,192 --> 08:11:41,360
the keyboard up as well okay gonna wait for the chara to go away and i just took


26842
08:11:41,360 --> 08:11:45,192
a screenshot right there as well so now you should end up with five screenshots


26843
08:11:45,192 --> 08:11:47,760
for your application so if you have a look at them they should kind of look


26844
08:11:47,760 --> 08:11:52,720
like this this this this this and ensure that also you don't have that debug


26845
08:11:52,720 --> 08:11:57,192
manner by removing the debug show check mode banner and after doing that if


26846
08:11:57,192 --> 08:12:00,232
you're already running a debug session on your simulator for instance you have


26847
08:12:00,232 --> 08:12:04,480
to do a hot restart remember hot reload is not going to take it's not going to


26848
08:12:04,480 --> 08:12:08,232
take the code in your main function into effect all right so now we have five


26849
08:12:08,232 --> 08:12:12,000
screenshots in here so i'm going to go back to app store connect and let's then


26850
08:12:12,000 --> 08:12:16,400
tap here or click here and view all sizes in media manager okay


26851
08:12:16,400 --> 08:12:19,592
and let's go to choose file in here and then choose all these screenshots and


26852
08:12:19,592 --> 08:12:23,832
i'm just gonna say upload all right so now in here you have


26853
08:12:23,832 --> 08:12:28,160
basically the chance to reorder these screenshots so i think i'm gonna put


26854
08:12:28,160 --> 08:12:33,040
maybe the login screen first then i'm gonna go to the register and then forgot


26855
08:12:33,040 --> 08:12:37,120
password and i'm gonna then put the main interface of the application


26856
08:12:37,120 --> 08:12:42,800
here and then the actual new node screen okay so you can see at the moment when


26857
08:12:42,800 --> 08:12:46,800
uploading the six and a half inch display screenshots the five and five


26858
08:12:46,800 --> 08:12:50,872
and eight inch display screen is also using the six and a half


26859
08:12:50,872 --> 08:12:54,232
inch display screenshots so they're the same screenshots so you don't have to


26860
08:12:54,232 --> 08:12:59,512
upload them again however then you have this five and a half inch display and


26861
08:12:59,512 --> 08:13:04,872
which you also have to upload your screenshots for and that is what we need


26862
08:13:04,872 --> 08:13:10,480
the iphone 8 plus for so we i'm just going to minimize this and


26863
08:13:10,480 --> 08:13:15,040
then i'm going to bring up iphone 8 plus to the screen


26864
08:13:15,040 --> 08:13:19,512
and we're going to do the exact same process here so bring up the keyboard as


26865
08:13:19,512 --> 08:13:23,040
the carrot goes away take a screenshot of login


26866
08:13:23,040 --> 08:13:26,640
sorry i'm going to go to forgot password screen


26867
08:13:26,640 --> 08:13:30,872
carrot goes away take a screenshot then i'm going to go to a register screen


26868
08:13:30,872 --> 08:13:36,000
carrot goes away screenshot and in the login screen i'm going to log in with a


26869
08:13:36,000 --> 08:13:40,400
user that already exists in the system if i can spell


26870
08:13:40,400 --> 08:13:43,192
and now it's just


26871
08:13:43,192 --> 08:13:46,160
beach balling on me so um


26872
08:13:46,160 --> 08:13:49,440
at oh it's my keyboard by the way i can't see


26873
08:13:49,440 --> 08:13:52,640
the keyboard so i can see it's been switched to unfortunately swedish so i'm


26874
08:13:52,640 --> 08:13:57,832
just gonna switch to english here english


26875
08:13:57,832 --> 08:14:02,000
and it's not helping me really so let's see


26876
08:14:02,000 --> 08:14:06,232
if it can switch to english please


26877
08:14:06,232 --> 08:14:09,280
english for some reason it's still showing the


26878
08:14:09,280 --> 08:14:13,512
swedish stuff in here and i don't really know why so i'm just going to say


26879
08:14:13,512 --> 08:14:18,400
gmail.com and foo barbados okay he's i mean


26880
08:14:18,400 --> 08:14:22,800
an iphone simulator is also software so it could be buggy okay so then i'm gonna


26881
08:14:22,800 --> 08:14:25,280
take let's see what screenshots we've taken


26882
08:14:25,280 --> 08:14:28,720
so three screenshots so far and let's go to the main ui of the application take


26883
08:14:28,720 --> 08:14:32,160
another one with command s as i've mentioned before and let's go here as


26884
08:14:32,160 --> 08:14:37,592
well into oh is this screenshot gonna go away


26885
08:14:37,592 --> 08:14:42,552
soon hopefully go away please


26886
08:14:42,552 --> 08:14:47,280
it's not gonna go away please go away okay i think iphone 8


26887
08:14:47,280 --> 08:14:50,400
plus is having some problems so what i'm gonna do is i'm just going to close it


26888
08:14:50,400 --> 08:14:54,640
and then say open simulator and let's go to 8 plus and i can see after i close


26889
08:14:54,640 --> 08:14:58,400
the 8 plus simulator it actually saved the screenshot so that's great all we


26890
08:14:58,400 --> 08:15:02,800
have to do is just to go back to our application and right here in the screen


26891
08:15:02,800 --> 08:15:06,000
as the keyboard is displayed on the screen after the carrot has disappeared


26892
08:15:06,000 --> 08:15:09,280
i'm going to take a screenshot i'm not sure if i actually


26893
08:15:09,280 --> 08:15:12,160
did it at the right time without the carrot on the screen so let's have a


26894
08:15:12,160 --> 08:15:14,320
look


26895
08:15:14,872 --> 08:15:19,360
please go away okay so this is the screenshot so now we have


26896
08:15:19,360 --> 08:15:23,512
five screenshots on iphone 8 plus as well so i'm gonna basically delete these


26897
08:15:23,512 --> 08:15:27,912
screenshots that we took from the iphone 13 pro max right there and let's go to


26898
08:15:27,912 --> 08:15:31,512
the five and a half inch display section here in app store connect and say choose


26899
08:15:31,512 --> 08:15:35,832
file and i'm then going to choose all those screenshots that we took from


26900
08:15:35,832 --> 08:15:41,040
iphone 8 plus and reorder them so let's say log in first then we have register


26901
08:15:41,040 --> 08:15:45,440
forgot password and then main interface of the application and then new nodes


26902
08:15:45,440 --> 08:15:49,680
and this is exactly in line with what we've done in here so it's just a good


26903
08:15:49,680 --> 08:15:53,040
idea usually to make sure that your screenshots are lined up in the same


26904
08:15:53,040 --> 08:15:57,280
order for different devices okay so now you can see all those


26905
08:15:57,280 --> 08:16:02,232
three other screens screen types are using the iphone 8


26906
08:16:02,232 --> 08:16:06,080
plus i think simulators screenshots so okay


26907
08:16:06,080 --> 08:16:10,800
yes iphone 8 plus so now we've uploaded those so as you can see more screenshots


26908
08:16:10,800 --> 08:16:16,480
are already there now so iphone 8 plus is also uploaded and we're done


26909
08:16:16,480 --> 08:16:22,552
so what we need to do now is to bring up the ipad pro 12 inch simulator as well


26910
08:16:22,552 --> 08:16:26,480
so i'm going to go here to this simulator and say file open simulator


26911
08:16:26,480 --> 08:16:31,280
and then say ipad pro as you can see we have to bring ipad pro


26912
08:16:31,280 --> 08:16:35,360
12 inch so i'm just gonna click on it like that


26913
08:16:35,360 --> 08:16:40,320
let's go to um visual studio code and say select device and then i'm gonna


26914
08:16:40,320 --> 08:16:45,680
choose that ipad pro as it is there and then i'm going to stop the debug process


26915
08:16:45,680 --> 08:16:52,232
on the iphone 13 pro max and then say run it on the ipad pro


26916
08:16:52,232 --> 08:16:56,400
and if you're lucky then this process is actually going to go quite fast because


26917
08:16:56,400 --> 08:17:00,080
the application binary has already been compiled and it should pretty much be


26918
08:17:00,080 --> 08:17:04,872
the same application running on an ipad pro 12


26919
08:17:04,872 --> 08:17:08,080
0.9 inches so again depending on your machine this


26920
08:17:08,080 --> 08:17:12,720
process could take anywhere between a few seconds to a few minutes even


26921
08:17:12,720 --> 08:17:16,400
and let's see here so let's go in here and


26922
08:17:16,400 --> 08:17:20,480
you can see the first section in app store connect for ipad is asking you to


26923
08:17:20,480 --> 08:17:24,480
upload for ipad pro third gen which doesn't


26924
08:17:24,480 --> 08:17:28,872
necessarily have to be third gen any ipad pro of 12 and a nine inch display


26925
08:17:28,872 --> 08:17:33,360
is going to suffice so here's our application it this screen


26926
08:17:33,360 --> 08:17:38,720
is obviously ginormous so i'm gonna go here bring up the keyboard and


26927
08:17:38,720 --> 08:17:43,512
take a screenshot and then go to forgot my password take a screenshot then go to


26928
08:17:43,512 --> 08:17:48,232
back to login and in the register screen take a screenshot all where the carrot


26929
08:17:48,232 --> 08:17:52,160
has disappeared let's just double check this and i'm going to remove the iphone


26930
08:17:52,160 --> 08:17:56,232
8 plus screenshot so now we have three on the ipad pro no carrot no carrot no


26931
08:17:56,232 --> 08:18:00,720
carrot and let's go now to the login screen and i'm going to log in with an


26932
08:18:00,720 --> 08:18:06,480
existing user in here okay foo barbat login and now you can see the main


26933
08:18:06,480 --> 08:18:09,760
interface of the application let's take a screenshot of it and then go to the


26934
08:18:09,760 --> 08:18:15,120
first note bring the keyboard up like this and without the carrot take a


26935
08:18:15,120 --> 08:18:19,832
screenshot i actually think i i um captured the carrot unfortunately


26936
08:18:19,832 --> 08:18:23,360
in this last screenshot and i can see a little bit of glimpse of it there so i'm


26937
08:18:23,360 --> 08:18:28,480
gonna delete that and i think i did it actually again to take


26938
08:18:28,480 --> 08:18:33,760
a screenshot basically of the same screen with the carrot


26939
08:18:33,760 --> 08:18:36,960
so let's see if the ipad's going to help us soon


26940
08:18:36,960 --> 08:18:40,640
where's the screenshot there i can see the carrot again a little bit


26941
08:18:40,640 --> 08:18:45,440
so this is a tough one now all right i think i got it this time


26942
08:18:45,440 --> 08:18:48,640
so let's just wait for the screenshot to appear here


26943
08:18:48,640 --> 08:18:51,360
okay and there is no carrot so that's great


26944
08:18:51,360 --> 08:18:54,640
so now we have basically our screenshots for ipad


26945
08:18:54,640 --> 08:18:59,192
12 and a nine inch display let's go in here and say choose file and i'm gonna


26946
08:18:59,192 --> 08:19:04,552
select all the screenshots for that ipad and put them in order so i'm just going


26947
08:19:04,552 --> 08:19:08,872
to say the login screen first then register then forgot password the main


26948
08:19:08,872 --> 08:19:13,120
interface of the application and then the note screen okay so as you can see


26949
08:19:13,120 --> 08:19:18,080
the 11 inch display is using the 12 and a 9 inch display so that's really great


26950
08:19:18,080 --> 08:19:25,912
however the ipad pro here the second gen to 12.9 inch display um is


26951
08:19:25,912 --> 08:19:31,680
is i mean these it's not using this 12 and a 9 inch display of this ipad so


26952
08:19:31,680 --> 08:19:35,192
what could we do here can we go in here and say choose file and upload the same


26953
08:19:35,192 --> 08:19:39,512
screenshots again and it seems like we can so that's not a problem let's just


26954
08:19:39,512 --> 08:19:44,320
reuse the same because it's the same screen size so it's a bit strange that i


26955
08:19:44,320 --> 08:19:48,552
app store connect is not automatically using this 12 inch


26956
08:19:48,552 --> 08:19:53,120
ipad screenshots for also this 12 and a 9 inch display even though they're the


26957
08:19:53,120 --> 08:19:56,800
same so i'm going to bring login to the left then i'm going to bring register


26958
08:19:56,800 --> 08:20:01,120
here for god password like that and then the notes and then the new note so now


26959
08:20:01,120 --> 08:20:05,192
you can see all your screens are now set all the snap all this screenshots are


26960
08:20:05,192 --> 08:20:11,832
set for both iphone and ipad so after uploading all our screenshots


26961
08:20:11,832 --> 08:20:15,760
then we can actually go and set the basic information


26962
08:20:15,760 --> 08:20:21,512
of our application so so let's go in here inside our app


26963
08:20:21,512 --> 08:20:23,592
information okay


26964
08:20:23,592 --> 08:20:28,000
and you can see here there is a note and that is called


26965
08:20:28,000 --> 08:20:32,080
sorry there's a name inside the app information section then we have the


26966
08:20:32,080 --> 08:20:35,120
name of our application okay and then the subtitle as you can see it says the


26967
08:20:35,120 --> 08:20:37,832
subtitle will be reviewed before it's made available on the app store


26968
08:20:37,832 --> 08:20:40,960
unfortunately it doesn't tell you so much information but every application


26969
08:20:40,960 --> 08:20:45,832
can have a short subtitle up to 30k up to and including 30 characters so when


26970
08:20:45,832 --> 08:20:49,912
people search for my awesome notes for instance in app store then they can


26971
08:20:49,912 --> 08:20:53,912
actually see both the name of the application and a short subtitle so


26972
08:20:53,912 --> 08:20:58,000
let's say store and store


26973
08:20:58,000 --> 08:21:02,960
your notes securely with an asterisk at the end okay


26974
08:21:02,960 --> 08:21:09,192
so that's already set i can see so um and then we could then after making


26975
08:21:09,192 --> 08:21:12,000
these changes the app store connect expects you to


26976
08:21:12,000 --> 08:21:16,400
press the save button so that's also good now we've set that


26977
08:21:16,400 --> 08:21:21,512
so let's go here in this section and go to content rights and then set up


26978
08:21:21,512 --> 08:21:25,360
content rights information click on it so it says apps that continue or access


26979
08:21:25,360 --> 08:21:29,192
third-party content must have all the necessary rights to that content or be


26980
08:21:29,192 --> 08:21:33,040
otherwise permitted to use it under the laws of each app store country or region


26981
08:21:33,040 --> 08:21:36,552
so we don't have third-party content like we're not actually displaying any


26982
08:21:36,552 --> 08:21:40,000
videos that's coming from a third party service so here we can just say no it


26983
08:21:40,000 --> 08:21:43,120
doesn't contain show or access third party content


26984
08:21:43,120 --> 08:21:46,080
and after pressing the down button we can also press the save button just to


26985
08:21:46,080 --> 08:21:52,720
ensure that everything is as saved so what we need to do in here also um


26986
08:21:52,720 --> 08:21:56,640
let's see here a privacy we also have and then we have


26987
08:21:56,640 --> 08:22:01,592
set age rating across all platforms so let's go ahead and do that and say as


26988
08:22:01,592 --> 08:22:04,232
you can see here it says select the level of frequency for each content


26989
08:22:04,232 --> 08:22:07,360
description that best describes your application so we don't have any


26990
08:22:07,360 --> 08:22:11,680
violence so we say no realistic violence none


26991
08:22:11,680 --> 08:22:16,480
uh prolonged graphic or sadistic realistic violence i don't even wanna i


26992
08:22:16,480 --> 08:22:19,592
don't even to say say these things out loud to be honest with you but what you


26993
08:22:19,592 --> 08:22:23,360
have to do is just to say none to all of these because we don't have any like


26994
08:22:23,360 --> 08:22:28,480
medical information alcohol related stuff so let's just say none to all of


26995
08:22:28,480 --> 08:22:31,680
these and uh


26996
08:22:31,680 --> 08:22:35,120
contests and we don't have that either so let's just say next does your app


26997
08:22:35,120 --> 08:22:38,800
contain unrestricted web access it doesn't does your app contain instance


26998
08:22:38,800 --> 08:22:43,512
of gambling no and then we're saying next and you can say our


26999
08:22:43,512 --> 08:22:47,120
age rate rating result is that people of age


27000
08:22:47,120 --> 08:22:50,080
four plus can use the application and here


27001
08:22:50,080 --> 08:22:53,760
make sure that your app is not made for kids because remember applications that


27002
08:22:53,760 --> 08:22:57,512
are made for kids that have to actually conform to specific standards in order


27003
08:22:57,512 --> 08:23:01,592
to make sure that eight kids of age four plus are actually safe in the


27004
08:23:01,592 --> 08:23:05,360
application so um what we could do let's see in here if


27005
08:23:05,360 --> 08:23:09,440
your app rates 12 plus or lower and you believe it contents may not be suitable


27006
08:23:09,440 --> 08:23:14,640
for children under 17 you can manually set the age rating to 17 plus so i'm not


27007
08:23:14,640 --> 08:23:17,280
sure about this to be honest with you but i'm just going to leave it blank at


27008
08:23:17,280 --> 08:23:20,552
the moment and press the down button okay and then we can press the save


27009
08:23:20,552 --> 08:23:24,400
button right here so the next thing that we need to talk


27010
08:23:24,400 --> 08:23:28,800
about now is something called a support url and support url is actually very


27011
08:23:28,800 --> 08:23:33,360
important and that actually appears i believe in app


27012
08:23:33,360 --> 08:23:37,760
let's see is it in


27013
08:23:38,640 --> 08:23:44,160
app information i believe i think it is somewhere around here


27014
08:23:44,160 --> 08:23:50,232
ratings and reviews app privacy pricing and availability


27015
08:23:50,232 --> 08:23:54,232
we haven't really come there yet but i believe we have to submit that anyway


27016
08:23:54,232 --> 08:23:58,640
somewhere and it is here as you can see so support url is actually very very


27017
08:23:58,640 --> 08:24:01,360
important as you can see marketing url is not


27018
08:24:01,360 --> 08:24:05,512
optional sorry marketing url is optional support url isn't a support url it's


27019
08:24:05,512 --> 08:24:09,192
basically a url that needs to be hosted on your website


27020
08:24:09,192 --> 08:24:12,480
that users of your application if they have any problem with it then they can


27021
08:24:12,480 --> 08:24:16,320
go to the support url and get some more information about that okay


27022
08:24:16,320 --> 08:24:20,960
so i have previously created a support url for one of my other applications in


27023
08:24:20,960 --> 08:24:27,120
my website so let's just say pixel sc and then we're going to say support


27024
08:24:27,120 --> 08:24:32,320
chords library text okay and as you can see here it's a little text document and


27025
08:24:32,320 --> 08:24:34,872
says if you have any questions about this app you can drop us a line at


27026
08:24:34,872 --> 08:24:37,680
support pixel dot


27027
08:24:37,680 --> 08:24:44,232
so you need to just ensure that you have a support document that you can um


27028
08:24:44,232 --> 08:24:50,160
place in a website and then you can send your users to that okay so


27029
08:24:50,160 --> 08:24:54,232
let's now go ahead and create a support document so what i'm going to do in here


27030
08:24:54,232 --> 08:24:57,832
i'm just going to bring up literally text edit on my macintosh you can bring


27031
08:24:57,832 --> 08:25:03,440
your um favorite hex editor um um actually my tech favorite text editor is


27032
08:25:03,440 --> 08:25:06,552
visual studio code but in this case it's just a simple text document so i'm just


27033
08:25:06,552 --> 08:25:11,760
going to use um normal text edit on macintosh even if you're linux for


27034
08:25:11,760 --> 08:25:16,552
instance you can just use vim and create or vi you can create a simple document


27035
08:25:16,552 --> 08:25:21,192
and let's i'm just going to basically copy this and paste it in here and i say


27036
08:25:21,192 --> 08:25:26,080
contact support and thank you for using my awesome


27037
08:25:26,080 --> 08:25:28,552
notes because that's the name of our


27038
08:25:28,552 --> 08:25:33,440
application right it is my awesome notes so i'm going to save this document and


27039
08:25:33,440 --> 08:25:37,680
i'm just going to say in here let's call it


27040
08:25:37,680 --> 08:25:41,440
my awesome notes txt and i'm going to save it on


27041
08:25:41,440 --> 08:25:46,232
desktop save all right did it not save it


27042
08:25:46,232 --> 08:25:49,592
it is a little bit strange that it didn't save it so


27043
08:25:49,592 --> 08:25:52,400
let me go back to this text now it saved it


27044
08:25:52,400 --> 08:25:57,280
yeah it is right here okay so this is a document now text file simple and i'm


27045
08:25:57,280 --> 08:26:01,592
going to go to my website control panel as you can see here there's a support


27046
08:26:01,592 --> 08:26:03,680
folder so i'm going to go into the support


27047
08:26:03,680 --> 08:26:07,760
folder and as you can see i already have four text files in this pixelity se


27048
08:26:07,760 --> 08:26:12,320
website and i'm just going to hopefully be able to drag a file in


27049
08:26:12,320 --> 08:26:17,440
there or maybe even upload so i'm going to drag this file boom


27050
08:26:17,440 --> 08:26:21,440
and i can see it has uploaded now and


27051
08:26:21,440 --> 08:26:25,832
seems to be it to be honest so let me just go back and see i'm my


27052
08:26:25,832 --> 08:26:29,512
awesomenotes text file right there and i'm then going to go in here and see


27053
08:26:29,512 --> 08:26:34,000
it's actually uploaded my awesome notes


27054
08:26:34,000 --> 08:26:37,760
txt and i can actually see it is uploaded


27055
08:26:37,760 --> 08:26:41,760
and it's there so if you don't have a website which you


27056
08:26:41,760 --> 08:26:46,232
should if you're developing applications for ios and android or even if you're


27057
08:26:46,232 --> 08:26:49,440
developing any applications and putting it out for customers you should have


27058
08:26:49,440 --> 08:26:53,760
your own website and they're like very cheap ways of grabbing


27059
08:26:53,760 --> 08:26:57,592
a website with cheap hosting i don't want to go and like


27060
08:26:57,592 --> 08:27:02,000
sponsor various services and i'm even not even gonna name what i'm using but


27061
08:27:02,000 --> 08:27:06,872
you can google that or just search online for a cheap hosting


27062
08:27:06,872 --> 08:27:11,192
and creating a website of your own okay but since this is the outside that's


27063
08:27:11,192 --> 08:27:15,120
outside the scope of this course i'm not going to talk so much about that okay so


27064
08:27:15,120 --> 08:27:19,192
now we have this my awesome notes and what we need to do


27065
08:27:19,192 --> 08:27:23,760
is to go ahead and add this support url so i'm going to copy it here and go to


27066
08:27:23,760 --> 08:27:27,512
app store connect and in the support url i'm just gonna save it there i'm gonna


27067
08:27:27,512 --> 08:27:31,280
press the save button okay so


27068
08:27:31,280 --> 08:27:35,512
that's that and we also need to make sure that we add some other information


27069
08:27:35,512 --> 08:27:40,640
in here promotional text description and also keywords and etc okay so


27070
08:27:40,640 --> 08:27:44,552
these things are very important and we need to make sure that we fill these out


27071
08:27:44,552 --> 08:27:50,400
so um let's see actually here okay so in the promotional text let's just


27072
08:27:50,400 --> 08:27:52,960
enter in some information here as you can see this commercial text lets you


27073
08:27:52,960 --> 08:27:56,320
inform your app store visitors of any current app features without requiring


27074
08:27:56,320 --> 08:27:59,440
an updated submission okay so let's just say


27075
08:27:59,440 --> 08:28:03,440
use my awesome notes


27076
08:28:03,440 --> 08:28:08,800
in order to securely store your notes in the cloud


27077
08:28:08,800 --> 08:28:14,552
all right and description and this app sim this free app allows you


27078
08:28:14,552 --> 08:28:18,552
to store your notes securely on the cloud


27079
08:28:18,552 --> 08:28:20,400
and um


27080
08:28:20,400 --> 08:28:23,360
and that's it i mean they're very similar to each other but that's okay


27081
08:28:23,360 --> 08:28:26,160
too and for the keywords in here you have to


27082
08:28:26,160 --> 08:28:30,160
enter i think up to it doesn't really say how many yes 100


27083
08:28:30,160 --> 08:28:33,512
characters you have and you have to like comma separate your keywords in here so


27084
08:28:33,512 --> 08:28:38,080
i'm just going to say and notes and secure


27085
08:28:38,080 --> 08:28:40,720
wow and make sure you don't have to actually


27086
08:28:40,720 --> 08:28:45,120
have um let's see boom


27087
08:28:45,120 --> 08:28:47,912
i don't think you have to have space between them and i'm just going to leave


27088
08:28:47,912 --> 08:28:52,232
it like a notes secure cloud okay these are my keywords so


27089
08:28:52,232 --> 08:28:55,512
i'm going to save this and remember we're in here in the ios prepare for


27090
08:28:55,512 --> 08:28:58,800
submission section so that's also done


27091
08:28:58,800 --> 08:29:04,872
and our app version is right there copyright we can just say 2022 pixelity


27092
08:29:04,872 --> 08:29:06,872
uh a b


27093
08:29:06,872 --> 08:29:11,360
all rights reserved


27094
08:29:11,360 --> 08:29:14,640
okay these are just big words don't worry about it


27095
08:29:14,640 --> 08:29:19,592
and um and that is pretty much it so


27096
08:29:19,592 --> 08:29:23,120
um i don't think we need to do so much more


27097
08:29:23,120 --> 08:29:27,592
to be honest with you in here and uh we don't even have to have the


27098
08:29:27,592 --> 08:29:30,400
signing required for now and


27099
08:29:30,400 --> 08:29:34,640
let's see and also need to go to contact information in here so let's say


27100
08:29:34,640 --> 08:29:37,680
vandal and my


27101
08:29:37,680 --> 08:29:42,320
last name and then i'm going to enter some


27102
08:29:42,320 --> 08:29:46,512
fake phone number right now


27103
08:29:46,872 --> 08:29:52,552
something like that and here's my support at pixelity


27104
08:29:52,552 --> 08:29:55,512
and like that no signing required


27105
08:29:55,512 --> 08:29:58,960
and here where we have the version release as you can see it says this app


27106
08:29:58,960 --> 08:30:01,832
version can be automatically released right after it has been approved so


27107
08:30:01,832 --> 08:30:05,040
there you have a few abilities to


27108
08:30:05,040 --> 08:30:07,832
how you want to actually release your application so after you send your


27109
08:30:07,832 --> 08:30:11,680
binary to apple you can choose for apple to either automatically release this


27110
08:30:11,680 --> 08:30:14,800
version to all your users in the app store or


27111
08:30:14,800 --> 08:30:17,360
you can say manually release this version meaning that after your


27112
08:30:17,360 --> 08:30:20,720
application has been accepted by apple and approved by apple


27113
08:30:20,720 --> 08:30:24,552
you can go manually press the release button wherever whenever it suits you


27114
08:30:24,552 --> 08:30:27,120
best or you can say automatically release


27115
08:30:27,120 --> 08:30:31,440
this version after app review no earlier now so you can set a date for it but


27116
08:30:31,440 --> 08:30:34,232
we're gonna say manually release this version okay


27117
08:30:34,232 --> 08:30:38,232
and after all of this i'm just gonna save this information right there and


27118
08:30:38,232 --> 08:30:45,912
let's now go to app privacy so this is also very important to remember to do


27119
08:30:45,912 --> 08:30:49,360
because i don't think


27120
08:30:49,360 --> 08:30:52,720
um that we have actually


27121
08:30:52,720 --> 08:30:57,120
yeah i actually believe here now that i can see that i've prepared some


27122
08:30:57,120 --> 08:31:00,872
information about this in the upcoming chapter so


27123
08:31:00,872 --> 08:31:06,080
we're going to take care of privacy policy in the next chapter so but know


27124
08:31:06,080 --> 08:31:09,760
that it exists right there and we have to fix it soon


27125
08:31:09,760 --> 08:31:13,760
so then what we need to do is to actually make a build for apple because


27126
08:31:13,760 --> 08:31:18,400
this is like the most important part and and you need to make sure that you


27127
08:31:18,400 --> 08:31:22,872
followed like the first chapters of this course where i talked about preparing


27128
08:31:22,872 --> 08:31:27,360
our application for ios there is a chapter in the beginning of this course


27129
08:31:27,360 --> 08:31:31,192
where we actually talk about creating our certificates and profiles and all of


27130
08:31:31,192 --> 08:31:34,800
that for for ios distribution so i'm assuming


27131
08:31:34,800 --> 08:31:38,160
you've already gone through that so we don't have to take care of that now all


27132
08:31:38,160 --> 08:31:42,960
right so let's go now to our application in xcode let's see if i can bring up


27133
08:31:42,960 --> 08:31:47,512
xcode it is somewhere around here


27134
08:31:47,512 --> 08:31:52,232
so there is our application and i'm just going to go into runner and have a look


27135
08:31:52,232 --> 08:31:56,160
at signing and capabilities and release and i can see that there is absolutely


27136
08:31:56,160 --> 08:32:00,552
no problem with this production certificate and profile so what we need


27137
08:32:00,552 --> 08:32:04,232
to do in here to make a release for app store is just to have a look at our


27138
08:32:04,232 --> 08:32:09,192
runner and here change the target to for instance any ios device


27139
08:32:09,192 --> 08:32:13,592
and then we go to product and then we say archive so


27140
08:32:13,592 --> 08:32:19,680
this archiving is then in turn gonna create an ipa file for us and as i


27141
08:32:19,680 --> 08:32:22,640
mentioned in the beginning of this chapter and this is the ipa file that


27142
08:32:22,640 --> 08:32:25,912
we're going to submit to apple and


27143
08:32:25,912 --> 08:32:28,640
xcode is going to help you a lot with that


27144
08:32:28,640 --> 08:32:33,040
i'm not sure if i'm a fan of that to be honest with you i think xcode hides a


27145
08:32:33,040 --> 08:32:36,480
lot of details and usually i'm used to like doing things in the command line


27146
08:32:36,480 --> 08:32:39,680
and doing things simply from visual studio code for instance


27147
08:32:39,680 --> 08:32:42,960
but it is still a good thing that xcode is going to help you submit your


27148
08:32:42,960 --> 08:32:47,040
application because in the previous versions of xcode like


27149
08:32:47,040 --> 08:32:50,552
many many years ago xcode couldn't do this so you had a separate application


27150
08:32:50,552 --> 08:32:57,360
to actually upload your ipa files to app and that in itself was also quite


27151
08:32:57,360 --> 08:33:00,872
a i wouldn't say a negative body was


27152
08:33:00,872 --> 08:33:03,592
something that you have to go through so


27153
08:33:03,592 --> 08:33:07,680
it is a plus and a minus that xcode is going to take care of all of these in my


27154
08:33:07,680 --> 08:33:12,000
opinion at least so i'm just going to wait here for xcode to


27155
08:33:12,000 --> 08:33:16,160
do its work and it is very possible that if


27156
08:33:16,160 --> 08:33:19,912
this is the first time that you're archiving your application with the


27157
08:33:19,912 --> 08:33:22,400
certificates that you


27158
08:33:22,400 --> 08:33:26,320
basically created in the beginning of this course it's very possible that


27159
08:33:26,320 --> 08:33:31,192
when the time comes for xcode to actually sign your binary and all its


27160
08:33:31,192 --> 08:33:35,680
other related libraries it's possible that your macintosh is


27161
08:33:35,680 --> 08:33:40,000
going to ask you for the password to this certificate and


27162
08:33:40,000 --> 08:33:44,080
actually it's going to ask you for the password to the keychain


27163
08:33:44,080 --> 08:33:49,680
in which on your computer this certificate is stored so this is usually


27164
08:33:49,680 --> 08:33:54,232
the login keychain so if i go to keychain access in here you'll see that


27165
08:33:54,232 --> 08:33:58,800
i have my login keychain and i have certificates in here as you can see


27166
08:33:58,800 --> 08:34:01,760
distribution so this is the sort that i'm at the moment


27167
08:34:01,760 --> 08:34:06,480
using for duplication and um after assigning this as you can see it's


27168
08:34:06,480 --> 08:34:10,320
archiving right hasn't really signed things it's very possible that my


27169
08:34:10,320 --> 08:34:15,360
macintosh is going to ask me for the password to that keychain so


27170
08:34:15,360 --> 08:34:20,400
it's very close now to finishing the archiving process so


27171
08:34:20,400 --> 08:34:24,552
excuse me so let's see basically how it goes after


27172
08:34:24,552 --> 08:34:28,800
after doing that after actually creating our application ipa file we're going to


27173
08:34:28,800 --> 08:34:35,120
submit it to apple and that app is going to be displayed then first inside here


27174
08:34:35,120 --> 08:34:39,832
in the build section of your applications


27175
08:34:39,832 --> 08:34:43,120
store connect view


27176
08:34:43,120 --> 08:34:48,320
so let's see if we get this password for signing as i've mentioned here


27177
08:34:48,320 --> 08:34:57,120
at the bottom of the screen so 4660 or 70 files out of 5039 files to


27178
08:34:57,120 --> 08:35:01,760
compile and creating our binary so it's very very


27179
08:35:01,760 --> 08:35:06,160
close let's just see if it can succeed in doing that


27180
08:35:06,160 --> 08:35:11,912
and i can hear my macintosh um and fans going full speed right now and


27181
08:35:11,912 --> 08:35:15,832
that's usually something you don't hear on the latest uh


27182
08:35:15,832 --> 08:35:20,320
max or macbook pros because they're usually so silent like the fan almost


27183
08:35:20,320 --> 08:35:23,680
never kicks in but this is apparently such a heavy


27184
08:35:23,680 --> 08:35:30,160
process for this macintosh to perform the faster googling full speed so


27185
08:35:30,160 --> 08:35:34,552
let's see if it succeeds all right and here is where we're seeing


27186
08:35:34,552 --> 08:35:37,760
that dialogue that i was talking about as you can see it says code sign wants


27187
08:35:37,760 --> 08:35:42,160
to sign using your van.hawa nippor in your keychain to allow this enter the


27188
08:35:42,160 --> 08:35:45,760
login keychains password so it has nothing to do with your certificate it's


27189
08:35:45,760 --> 08:35:49,192
just actually has everything to do with your certificate but the password itself


27190
08:35:49,192 --> 08:35:53,592
is the login keychains password so it's usually your computer's password so


27191
08:35:53,592 --> 08:35:57,912
i'm just going to enter that and then i'm going to say always allow


27192
08:35:57,912 --> 08:36:03,120
all right so after doing that hopefully xcode is not


27193
08:36:03,120 --> 08:36:06,800
going to bother me with this password again however i know in some older


27194
08:36:06,800 --> 08:36:10,000
versions of xcode it doesn't really understand when you


27195
08:36:10,000 --> 08:36:13,760
say always allow so when it comes to signing your application you may have to


27196
08:36:13,760 --> 08:36:17,192
enter your password up to like 20 times depending


27197
08:36:17,192 --> 08:36:20,160
on how many libraries your application depends on so


27198
08:36:20,160 --> 08:36:24,080
i remember this vividly when i was working at a company and a tester i was


27199
08:36:24,080 --> 08:36:27,912
telling that tester how to compile an archive an application for


27200
08:36:27,912 --> 08:36:31,680
ios and we both thought that he's entering his password for his


27201
08:36:31,680 --> 08:36:35,832
certificate incorrectly so and here now we got


27202
08:36:35,832 --> 08:36:41,912
module shareplus not found and what could that be because shareplus is


27203
08:36:41,912 --> 08:36:45,592
basically something that we're using in our application


27204
08:36:45,592 --> 08:36:48,800
as and it's continuing to archive even


27205
08:36:48,800 --> 08:36:52,400
though it it says that something's failed so all right so now we got an


27206
08:36:52,400 --> 08:36:56,640
issue here with pods runner framework and this could seem i mean i'm actually


27207
08:36:56,640 --> 08:36:59,192
quite glad that we're getting these errors and that could some and be


27208
08:36:59,192 --> 08:37:04,160
because we haven't done a proper pod install so what i'm gonna do is go to


27209
08:37:04,160 --> 08:37:08,400
visual studio code here and in the terminal then let me actually change the


27210
08:37:08,400 --> 08:37:10,872
screen layout a little bit so you see what i'm doing


27211
08:37:10,872 --> 08:37:13,592
so i'm gonna bring this up so you see better what i'm doing and i'm going to


27212
08:37:13,592 --> 08:37:18,160
go to the ios folder here


27213
08:37:18,160 --> 08:37:22,640
okay and then in here you could just say pod d integrate


27214
08:37:22,640 --> 08:37:26,640
basically pod the integrate it's going to remove all your ios dependencies from


27215
08:37:26,640 --> 08:37:29,832
your workspace and then you could just say pawn install okay


27216
08:37:29,832 --> 08:37:33,760
and this is gonna reinstall all your dependencies from scratch so


27217
08:37:33,760 --> 08:37:37,832
let's see and i can see share plus is actually installed now so it's


27218
08:37:37,832 --> 08:37:40,720
generating the pods project and


27219
08:37:40,720 --> 08:37:45,440
great so that seems to be fine so let's go in here and see if we can


27220
08:37:45,440 --> 08:37:52,640
uh do a clean so i'm gonna go to debug sra product clean build folder and let's


27221
08:37:52,640 --> 08:37:56,552
see if we can make a fresh build and this could actually take some time


27222
08:37:56,552 --> 08:38:01,512
because now we've really uh cleaned the build art artifact so


27223
08:38:01,512 --> 08:38:05,832
it's gonna basically start the archiving process from absolute beginning so


27224
08:38:05,832 --> 08:38:09,832
i'm just gonna be quiet for a while and let us do its work and let's see if the


27225
08:38:09,832 --> 08:38:14,960
archiving process succeeds okay so here's the result of actually


27226
08:38:14,960 --> 08:38:19,040
archiving our application again and we're seeing the exact same problem now


27227
08:38:19,040 --> 08:38:24,160
after doing a podly integrate and also doing a completely new pod install so


27228
08:38:24,160 --> 08:38:28,400
we're seeing the exact same problem with share plus say module share plus not


27229
08:38:28,400 --> 08:38:33,912
found and this could be a problem with how we've done for instance our


27230
08:38:33,912 --> 08:38:36,800
um pub get


27231
08:38:36,800 --> 08:38:40,872
and to be honest with you i could cut this out of this whole video but i'm so


27232
08:38:40,872 --> 08:38:44,640
so glad that we're seeing these problems because


27233
08:38:44,640 --> 08:38:48,800
archiving an ios application and simply it's


27234
08:38:48,800 --> 08:38:52,160
not always going to go fine even just doing the same thing for android it's


27235
08:38:52,160 --> 08:38:56,080
not always going to go fine and if i cut this out of this video you you


27236
08:38:56,080 --> 08:38:58,872
will be thinking that everything is going fine for me but things are not


27237
08:38:58,872 --> 08:39:02,400
working for you and then you'll start blaming yourself but i really want to


27238
08:39:02,400 --> 08:39:07,512
keep these stuff in this course so you see that well a person like me trying to


27239
08:39:07,512 --> 08:39:12,000
tell you how to do things also needs to understand himself how and why these


27240
08:39:12,000 --> 08:39:16,480
things are going wrong so in my guess in this case since we've


27241
08:39:16,480 --> 08:39:20,400
already done a pod install it would be to actually go and clear the


27242
08:39:20,400 --> 08:39:24,552
build folder for our entire flutter application and also do a


27243
08:39:24,552 --> 08:39:29,440
flutter pop get from scratch so let's go ahead in our flutter


27244
08:39:29,440 --> 08:39:34,160
application in here and at the bottom i'm just going to say fluffer clean


27245
08:39:34,160 --> 08:39:37,912
and that's going to clean the artifacts for ios and android


27246
08:39:37,912 --> 08:39:40,480
okay and then you're going to get a lot of


27247
08:39:40,480 --> 08:39:44,232
errors in your application because then it doesn't understand anything so we


27248
08:39:44,232 --> 08:39:49,440
then say flutter pop get all right


27249
08:39:49,440 --> 08:39:53,040
so that's gonna do its work and get all your dependencies from scratch basically


27250
08:39:53,040 --> 08:39:58,480
and install them in your application all right then what i'm gonna do in here


27251
08:39:58,480 --> 08:40:01,192
is to yeah we could just leave it like that


27252
08:40:01,192 --> 08:40:06,872
now and go back to our xcode and then try to archive the application from


27253
08:40:06,872 --> 08:40:11,592
scratch let's see let's see if this time it goes a little bit better and


27254
08:40:11,592 --> 08:40:16,872
hopefully it shouldn't take so much time this time but you never know with xcode


27255
08:40:16,872 --> 08:40:20,160
and with ios development it has its own


27256
08:40:20,160 --> 08:40:24,800
antiques so let's just wait and see after doing a pop get if this process is


27257
08:40:24,800 --> 08:40:29,592
going to go through or not so after xcode has compiled the application again


27258
08:40:29,592 --> 08:40:34,160
i could see the same problems as as we had before so meaning that our pod the


27259
08:40:34,160 --> 08:40:38,080
integrate and flutter clean really didn't have so much effect on the


27260
08:40:38,080 --> 08:40:42,000
application itself now since i've been doing ios development for a very long


27261
08:40:42,000 --> 08:40:47,120
time i still have some tools in my in my belt that i can drag out and use


27262
08:40:47,120 --> 08:40:51,592
and one of the first things i would use as a software engineer and an ios


27263
08:40:51,592 --> 08:40:54,232
developer is just to first have a look at


27264
08:40:54,232 --> 08:40:59,360
our deployment ios version and here we're supporting ios 9 and it's very


27265
08:40:59,360 --> 08:41:03,912
well possible that this sharing capability that is built into


27266
08:41:03,912 --> 08:41:07,120
the plugin that we're dragging into our application isn't compatible with this


27267
08:41:07,120 --> 08:41:10,720
ios version so first i'm going to bump this to ios 13


27268
08:41:10,720 --> 08:41:15,280
at the moment at the their ios 13 14 and 50 are very popular so there are the


27269
08:41:15,280 --> 08:41:19,760
latest versions of ios at the time of recording this um course so first i'm


27270
08:41:19,760 --> 08:41:23,512
going to do that the next thing that i'm going to do is


27271
08:41:23,512 --> 08:41:29,120
to from our project in here so i'm having a look here as you can see i'm in


27272
08:41:29,120 --> 08:41:34,160
the ios folder of this notes project so let's go in there


27273
08:41:34,160 --> 08:41:39,832
then the first thing i'm going to do is to perhaps remove the um i wonder if i


27274
08:41:39,832 --> 08:41:43,040
should actually remove the pod file as well


27275
08:41:43,040 --> 08:41:49,360
maybe let's just remove the podfile.lock and remove also all the pots from the


27276
08:41:49,360 --> 08:41:55,592
project okay so then i'm gonna do fluster clean in here


27277
08:41:55,592 --> 08:41:59,760
that removed really all the pots from the project


27278
08:41:59,760 --> 08:42:06,080
and then after undoing that i'm going to have actually a look at our pot file to


27279
08:42:06,080 --> 08:42:10,800
have a look at all our ios dependencies and see how they look like so i'm going


27280
08:42:10,800 --> 08:42:15,120
to stop the execution of the program and then i'm going to open a file called pod


27281
08:42:15,120 --> 08:42:18,872
file and this is where all your ios dependencies basically are stored as you


27282
08:42:18,872 --> 08:42:23,592
can see the platform is ios 13. so it was strange that our deployment target


27283
08:42:23,592 --> 08:42:27,440
was ios 9 so this could be a potential source of problem


27284
08:42:27,440 --> 08:42:32,640
and after doing that then we have our pod file and yeah this this looks fine


27285
08:42:32,640 --> 08:42:38,000
as it is so um let's then go after into the terminal


27286
08:42:38,000 --> 08:42:41,280
and after flats are clean let's just say flop


27287
08:42:41,280 --> 08:42:45,592
flutter pop get which is going to redrag


27288
08:42:45,592 --> 08:42:50,480
our dependencies into our flutter project and ios project for instance


27289
08:42:50,480 --> 08:42:55,760
then and we can then go back i'm actually going to kill xcode and open


27290
08:42:55,760 --> 08:43:00,000
the ios folder and open the


27291
08:43:00,232 --> 08:43:04,800
project workspace again and i can see here at the moment the pods aren't


27292
08:43:04,800 --> 08:43:09,192
really installed so let's go and do the installation of pods ourselves so i'm


27293
08:43:09,192 --> 08:43:13,280
going to say pod install this is going to install all the dependencies and


27294
08:43:13,280 --> 08:43:17,360
let's have a look in here and say what it is talking about


27295
08:43:17,360 --> 08:43:21,192
cloud fire support as far as store using firebase is defining okay those all look


27296
08:43:21,192 --> 08:43:24,552
fine here says coco pods didn't see the base configuration of your project


27297
08:43:24,552 --> 08:43:28,160
because your project already has a custom config set in order for cocoapods


27298
08:43:28,160 --> 08:43:31,912
integration to work at all please either set the base configuration of the target


27299
08:43:31,912 --> 08:43:37,440
runner to target support files blah blah blah or include the target support files


27300
08:43:37,440 --> 08:43:41,512
in your build configuration so this could actually be very important as we


27301
08:43:41,512 --> 08:43:46,000
can see in here so maybe there was a problem in setting up our


27302
08:43:46,000 --> 08:43:50,552
project with flutter create when we said we created our application to begin with


27303
08:43:50,552 --> 08:43:55,592
but let's just keep this in mind and try to


27304
08:43:56,480 --> 08:44:01,192
go in here and open our workspace one more time and now i can see all the pods


27305
08:44:01,192 --> 08:44:05,512
are in here development pods okay


27306
08:44:05,512 --> 08:44:10,960
share plus is right there pod okay and the pod spec what is the pod spec


27307
08:44:10,960 --> 08:44:14,960
says it actually says the platform should be ios 8 so it supports ios 8 so


27308
08:44:14,960 --> 08:44:18,800
that's not a problem so what i'm going to do now is after doing all these


27309
08:44:18,800 --> 08:44:22,232
things i'm going to basically try to build this project again so i'm going to


27310
08:44:22,232 --> 08:44:28,000
do a clean here clean build folder with command shift k so blink basically clean


27311
08:44:28,000 --> 08:44:33,512
your build folder and all while all of this is going on


27312
08:44:33,512 --> 08:44:38,400
editor functionality that's that's fine so i'm going to basically start doing a


27313
08:44:38,400 --> 08:44:42,552
um product and archive again and then i'll


27314
08:44:42,552 --> 08:44:46,160
see you on the other side either this succeeds or fails and if it fails we're


27315
08:44:46,160 --> 08:44:50,480
gonna fix it so let's have a look okay now i can see


27316
08:44:50,480 --> 08:44:54,320
after doing all the gymnastics that i just had to do


27317
08:44:54,320 --> 08:44:59,280
then our application has finally compiled without a problem and to be


27318
08:44:59,280 --> 08:45:02,400
honest with you this is one of the things that i believe many courses are


27319
08:45:02,400 --> 08:45:06,080
missing in that when you go through distributing your


27320
08:45:06,080 --> 08:45:09,912
application you actually go through a lot it's not just that you press a


27321
08:45:09,912 --> 08:45:13,832
button and submit your application and you're done well usually if everything


27322
08:45:13,832 --> 08:45:18,160
is set up correctly then that is the case however you have to set up


27323
08:45:18,160 --> 08:45:21,680
everything correctly so what happened in here is that we have


27324
08:45:21,680 --> 08:45:28,400
to issue a few things what i did just to name them step by step is that i


27325
08:45:28,400 --> 08:45:32,320
first bumped the deployment target of our application


27326
08:45:32,320 --> 08:45:37,912
from 9 to 13. so you can find that by clicking on your workspace in xcode then


27327
08:45:37,912 --> 08:45:42,640
clicking on your runner target general tab in here and then the deployment


27328
08:45:42,640 --> 08:45:47,040
information i bumped it to ios 13 so that's the first thing that i that i did


27329
08:45:47,040 --> 08:45:50,552
however i don't think that that necessarily had anything to do with


27330
08:45:50,552 --> 08:45:54,160
fixing this problem the other thing that we did from


27331
08:45:54,160 --> 08:45:58,320
terminal was to clean all our pots and i did that by saying


27332
08:45:58,320 --> 08:46:03,360
rmrf pods now we issued that command from the ios


27333
08:46:03,360 --> 08:46:07,760
folder if i open this ios folder you'll see that there is a folder in here


27334
08:46:07,760 --> 08:46:12,960
called pods what are pods pods are basically your applications dependencies


27335
08:46:12,960 --> 08:46:18,320
for ios that's how flutter manages your ios application dependencies so all


27336
08:46:18,320 --> 08:46:22,320
these libraries for instance like firebase and this sharing library that


27337
08:46:22,320 --> 08:46:27,912
we just dragged in they're using basically they are dependencies that


27338
08:46:27,912 --> 08:46:32,800
flutter manages using cocoapods which is a third-party software and you have to


27339
08:46:32,800 --> 08:46:36,552
have cocoapods installed on your computer in order to even be able to


27340
08:46:36,552 --> 08:46:40,552
interact with pods so there's lots of information on the internet on how to


27341
08:46:40,552 --> 08:46:44,800
install cocoapods but it's usually pseudo jam install cocoapods and i think


27342
08:46:44,800 --> 08:46:49,680
maybe you can even use homebrew to install cocoapods but i usually use


27343
08:46:49,680 --> 08:46:53,040
sudo jam or jam in this case but you need sudo


27344
08:46:53,040 --> 08:46:57,192
usually to install cocoapods so so what we did we removed the pots


27345
08:46:57,192 --> 08:47:01,360
folder we removed the podfile lock which for you who are like comfortable with


27346
08:47:01,360 --> 08:47:05,192
backing the web development with npm this is this is like your package lock


27347
08:47:05,192 --> 08:47:08,640
file and if you're not comfortable with back-end development basically a pod


27348
08:47:08,640 --> 08:47:14,160
file lock is a file that stores information about all your dependencies


27349
08:47:14,160 --> 08:47:19,512
which are currently installed whereas the pod file stores information


27350
08:47:19,512 --> 08:47:24,800
about which dependencies you need and pod file log stores information about


27351
08:47:24,800 --> 08:47:30,000
the ones that are integrated right now into your application so we remove that


27352
08:47:30,000 --> 08:47:33,440
just to ensure that on the next pod install


27353
08:47:33,440 --> 08:47:37,592
all our dependencies will be freshly installed and regardless of what is


27354
08:47:37,592 --> 08:47:41,592
inside the pod file lock so there were a few steps that we had to


27355
08:47:41,592 --> 08:47:46,160
take but finally we manage oh also we don't forget flutter clean we also


27356
08:47:46,160 --> 08:47:50,000
issued flutter clean so after all these steps we finally managed


27357
08:47:50,000 --> 08:47:54,400
to build our application and as you saw in this screen we came to this archive


27358
08:47:54,400 --> 08:47:58,800
section so i want to have a look a little bit here


27359
08:47:58,800 --> 08:48:01,832
at my notes to see


27360
08:48:01,832 --> 08:48:05,120
um so yeah we've done the password signing


27361
08:48:05,120 --> 08:48:09,280
etc etc and now we basically um


27362
08:48:09,280 --> 08:48:13,760
basically created this ipa file in here so one you need to do


27363
08:48:13,760 --> 08:48:17,192
in here then you press the distribute app button and say app store connect and


27364
08:48:17,192 --> 08:48:20,872
say send send and this is going to do some analysis on


27365
08:48:20,872 --> 08:48:25,512
that binary for you and it's this is going to connect to app


27366
08:48:25,512 --> 08:48:29,192
store connect and some of you in here may immediately


27367
08:48:29,192 --> 08:48:32,872
get an error saying that well i don't know how to connect and that's because


27368
08:48:32,872 --> 08:48:35,832
you haven't entered your um


27369
08:48:35,832 --> 08:48:39,680
profile information in xcode if you go to xcode preferences there is a section


27370
08:48:39,680 --> 08:48:44,800
called accounts and you need to ensure that you basically add your app apple id


27371
08:48:44,800 --> 08:48:47,760
with your account in xcode for any of that


27372
08:48:47,760 --> 08:48:51,120
for the distribution to actually work at all so i'm going to say app store


27373
08:48:51,120 --> 08:48:56,232
connect here and next upload to app store connect next


27374
08:48:56,232 --> 08:48:59,192
so let's go in there


27375
08:49:03,120 --> 08:49:07,360
okay and it says okay upload your app symbols


27376
08:49:07,360 --> 08:49:10,640
manage version and build number i don't really like that so we're gonna take


27377
08:49:10,640 --> 08:49:13,280
that off so we're not gonna use that okay


27378
08:49:13,280 --> 08:49:17,512
and let me just make the screen a little bit bigger and press next in here and


27379
08:49:17,512 --> 08:49:22,552
here you have to select your uh profile and seems fine


27380
08:49:22,552 --> 08:49:26,640
press the next button in there and this is going to contact app store connect


27381
08:49:26,640 --> 08:49:31,280
and depending on your application size this could actually take quite a long


27382
08:49:31,280 --> 08:49:35,280
time for some of the applications that i'm working on


27383
08:49:35,280 --> 08:49:40,480
not personally but for various companies even with my thousand thousand download


27384
08:49:40,480 --> 08:49:43,440
upload um [Music]


27385
08:49:43,440 --> 08:49:48,080
internet connection this process could take a long time so let's see how long


27386
08:49:48,080 --> 08:49:51,192
it takes because you see during the upload process it's not just uploading


27387
08:49:51,192 --> 08:49:54,320
your binary it's actually contacting apple and


27388
08:49:54,320 --> 08:49:58,800
even validating a lot of your assets like your images it's valuing your icons


27389
08:49:58,800 --> 08:50:03,120
it's valid validating even if you have other resources in your application and


27390
08:50:03,120 --> 08:50:06,400
i believe it even checks like if you're making any


27391
08:50:06,400 --> 08:50:10,640
api calls which you shouldn't be making and i'm not talking about network api


27392
08:50:10,640 --> 08:50:14,800
calls but i'm actually talking about ios sdk api calls for instance if you've


27393
08:50:14,800 --> 08:50:20,232
hidden some work in your application which is making uh calls to some um


27394
08:50:20,232 --> 08:50:26,720
private apis at the ios sdk level so now we're just gonna let it do its thing


27395
08:50:26,720 --> 08:50:31,832
and upload and um we'll just wait until it's done


27396
08:50:31,832 --> 08:50:35,832
okay well the upload process seems to have gone


27397
08:50:35,832 --> 08:50:42,080
actually a lot better this time and um and i actually have to really confess to


27398
08:50:42,080 --> 08:50:46,800
something in here in that the upload process for me took a very


27399
08:50:46,800 --> 08:50:51,512
very very long time i'm talking about upwards of 30 minutes even though i'm on


27400
08:50:51,512 --> 08:50:55,192
a thousand thousand um fiber optic


27401
08:50:55,192 --> 08:51:00,232
download the upload speed um for my internet connection this still took a


27402
08:51:00,232 --> 08:51:05,512
long time and this could either be a temporary bug a glitch on apple on


27403
08:51:05,512 --> 08:51:09,192
apple's app store connect website or it could just be something that well from


27404
08:51:09,192 --> 08:51:13,280
now on things are gonna take a long time you never know what apple so


27405
08:51:13,280 --> 08:51:18,000
that's unfortunate but at the moment it's gone through and i can see that um


27406
08:51:18,000 --> 08:51:22,000
you will get this message telling you that your app was uploaded successfully


27407
08:51:22,000 --> 08:51:26,720
okay now let's talk about a um


27408
08:51:26,720 --> 08:51:31,832
a push notification email that you'll receive from apple that will look like


27409
08:51:31,832 --> 08:51:35,192
this after submitting your application you will probably receive an email from


27410
08:51:35,192 --> 08:51:40,232
apple that looks kind of like this and in here as you'll see it says we i i


27411
08:51:40,232 --> 08:51:43,360
want more issues with recent delivery of your application my awesome notes your


27412
08:51:43,360 --> 08:51:45,680
delivery was successful but you mentioned you may wish to correct the


27413
08:51:45,680 --> 08:51:49,280
following issues in your next lorry missing push notification entitlements


27414
08:51:49,280 --> 08:51:52,400
and this may be a bit


27415
08:51:52,400 --> 08:51:55,680
troubling for some developers but this is simply because we're at the moment


27416
08:51:55,680 --> 08:51:58,872
using firebase in our application on firebase is


27417
08:51:58,872 --> 08:52:02,080
able to handle push notifications so that you can send a push notification


27418
08:52:02,080 --> 08:52:07,760
from firebase console to your users however our application isn't


27419
08:52:07,760 --> 08:52:11,040
taking advantage of push notifications at the moment so


27420
08:52:11,040 --> 08:52:14,552
you can just disregard this email and just


27421
08:52:14,552 --> 08:52:18,960
don't try to even fix anything because all this email is saying is that we've


27422
08:52:18,960 --> 08:52:22,872
analyzed your binary it looks like you are accessing some push notification


27423
08:52:22,872 --> 08:52:27,680
apis however you forgot to enable push notifications for applications so and


27424
08:52:27,680 --> 08:52:31,680
this is simply because when you bundle your application and send it to apple as


27425
08:52:31,680 --> 08:52:34,720
an ipa which is something you probably didn't


27426
08:52:34,720 --> 08:52:39,592
actually look at but if you go to visual studio code sorry if you go to xcode in


27427
08:52:39,592 --> 08:52:42,720
this archive browser right click on your runner


27428
08:52:42,720 --> 08:52:48,000
and here and say show in finder you'll see this xcode archive file and say show


27429
08:52:48,000 --> 08:52:51,680
package contents and in here you'll probably see some products and


27430
08:52:51,680 --> 08:52:56,800
applications run our app so this whole thing is like your ipa file that apple


27431
08:52:56,800 --> 08:53:01,040
has received now in this runner application there is information about


27432
08:53:01,040 --> 08:53:04,872
what kind of like libraries it has included in itself and you can actually


27433
08:53:04,872 --> 08:53:08,320
right click on run or app and say show package contents and in here you'll see


27434
08:53:08,320 --> 08:53:12,400
all the frameworks that your application ships with and you can see


27435
08:53:12,400 --> 08:53:16,720
firebase etc etc so one of these frameworks


27436
08:53:16,720 --> 08:53:21,680
most probably one of the firebase frameworks is internally using it has it


27437
08:53:21,680 --> 08:53:24,720
is using some apis related to push notifications but that doesn't


27438
08:53:24,720 --> 08:53:29,192
necessarily mean that it is active and it's actively being used


27439
08:53:29,192 --> 08:53:33,592
so that's just an email that apple tells you that hey you may have forgotten to


27440
08:53:33,592 --> 08:53:36,960
do something but you can just disregard from this email and say no i didn't


27441
08:53:36,960 --> 08:53:40,640
forget anything because we don't have push notifications in our application


27442
08:53:40,640 --> 08:53:44,720
okay so that's that email and


27443
08:53:44,720 --> 08:53:48,000
um so that seems to be fine and after that


27444
08:53:48,000 --> 08:53:51,360
email you'll probably also receive an email that looks like this telling you


27445
08:53:51,360 --> 08:53:56,960
that hey your application with this sku has now been submitted and has completed


27446
08:53:56,960 --> 08:54:01,280
processing and this this email literally means that after


27447
08:54:01,280 --> 08:54:05,192
this application's finished processing you're able to install it on your ios or


27448
08:54:05,192 --> 08:54:10,320
mac device and you can test it as you'll see in the next chapter but


27449
08:54:10,320 --> 08:54:13,192
as we usually do in every chapter at the


27450
08:54:13,192 --> 08:54:16,872
end of every chapter we commit to what we've done and we make sure that we


27451
08:54:16,872 --> 08:54:21,120
commit and tag those changes so let me do some reshuffling on the screen


27452
08:54:21,120 --> 08:54:24,232
here and let's go to and i'm going to close


27453
08:54:24,232 --> 08:54:30,080
xcode here like that go to our application my notes to terminal and


27454
08:54:30,080 --> 08:54:34,480
let's just see git status a few things change so i'm going to go


27455
08:54:34,480 --> 08:54:37,912
cd get status in the main folder of our


27456
08:54:37,912 --> 08:54:43,120
application my notes because i was in the ios folder so i just did cd dot dot


27457
08:54:43,120 --> 08:54:46,720
like this so now i'm in the main folder grid status shows this and i'm just


27458
08:54:46,720 --> 08:54:51,120
going to say git add all right and let's just have a look at our logs the last


27459
08:54:51,120 --> 08:54:55,192
commit was step 28 so let's just think it's commit


27460
08:54:55,192 --> 08:54:59,192
step 29 as a caption at the bottom screen indicates and we just push our


27461
08:54:59,192 --> 08:55:03,120
changes after that is now let's just tag our


27462
08:55:03,120 --> 08:55:07,592
changes as well and say step 29 and hit push


27463
08:55:07,592 --> 08:55:14,160
tags just like that all right so that is now working as


27464
08:55:14,160 --> 08:55:17,680
expected so what uh we usually at the end of it at


27465
08:55:17,680 --> 08:55:20,400
the end of every chapter is that we talk about what we when we are going to


27466
08:55:20,400 --> 08:55:24,800
discuss in the following chapter and what we need to do in the next chapter


27467
08:55:24,800 --> 08:55:29,440
is actually release our ios application we've sent it now to apple and apple has


27468
08:55:29,440 --> 08:55:34,960
finally finished processing that and build meaning that it's ready now to be


27469
08:55:34,960 --> 08:55:38,720
actually submitted to apple and that's what we're going to do in the next


27470
08:55:38,720 --> 08:55:43,440
chapter to submit the app for release to the app store so i'll see


27471
08:55:43,440 --> 08:55:47,592
you there hello everyone and welcome to chapter 48 of this flutter course in


27472
08:55:47,592 --> 08:55:50,000
previous chapters we've been working with


27473
08:55:50,000 --> 08:55:54,800
creating an ipa file and sending it to apple and in this chapter we're going to


27474
08:55:54,800 --> 08:55:58,960
make sure that we're releasing that ipa file meaning that we're going to tell


27475
08:55:58,960 --> 08:56:02,872
apple that hey we're ready with this ipa file and we want you to


27476
08:56:02,872 --> 08:56:06,872
um review this file for us and the review process


27477
08:56:06,872 --> 08:56:11,360
for apple and and google are a little bit different in that for instance with


27478
08:56:11,360 --> 08:56:15,280
apple sometimes uh there's an actual user looking at your application and


27479
08:56:15,280 --> 08:56:20,400
sometimes if you for instance request a um a fast review from apple they may not


27480
08:56:20,400 --> 08:56:24,000
even look at it and they may just say okay it just works it's it doesn't crash


27481
08:56:24,000 --> 08:56:29,120
and then they it just goes through um and for google it could also be a


27482
08:56:29,120 --> 08:56:32,080
completely different process but we're right now in this chapter we're


27483
08:56:32,080 --> 08:56:37,360
going to focus on how ios app app submission basically works okay


27484
08:56:37,360 --> 08:56:41,040
so when you send an ipa file like we've


27485
08:56:41,040 --> 08:56:46,720
done to apple it will be available in a place called test flight so let me bring


27486
08:56:46,720 --> 08:56:54,400
our web browser to the screen and let's go and see if we can if you can actually


27487
08:56:54,640 --> 08:56:59,040
bring the views as we had before so let's see app


27488
08:56:59,040 --> 08:57:03,280
store connect and i've restarted my computer since last time so i may have


27489
08:57:03,280 --> 08:57:05,832
to basically


27490
08:57:06,480 --> 08:57:10,232
log in again and thank god i didn't actually have to restart the whole


27491
08:57:10,232 --> 08:57:14,080
process and actually grab my security key in here so


27492
08:57:14,080 --> 08:57:17,760
it just allowed me to log in so let's go to my awesome apps in app store connect


27493
08:57:17,760 --> 08:57:20,552
and then you'll see a tab up here called test flight


27494
08:57:20,552 --> 08:57:25,120
and test flight as you'll see now our build then is available in here


27495
08:57:25,120 --> 08:57:30,480
and it's ready to be tested basically so


27496
08:57:30,480 --> 08:57:34,320
what we need to also do is to go in here in the missing compliance and then tap


27497
08:57:34,320 --> 08:57:38,000
on this manage and it says does your app use encryption select yes


27498
08:57:38,000 --> 08:57:41,680
and and it says export logs require that products containing encryption must be


27499
08:57:41,680 --> 08:57:46,400
uh properly authorized so in here we could just say yes


27500
08:57:46,400 --> 08:57:49,360
and it says export compliance does your app


27501
08:57:49,360 --> 08:57:52,552
qualify for any of the exams provided in the category make sure that your app


27502
08:57:52,552 --> 08:57:55,912
meets the criteria actually we could go previous and just say no in here because


27503
08:57:55,912 --> 08:58:00,480
we're not directly using um if you it is your responsibility to


27504
08:58:00,480 --> 08:58:03,680
comply with export regulation and you should revisit this question if your


27505
08:58:03,680 --> 08:58:06,800
encryption exists i'll just say blah blah blah okay


27506
08:58:06,800 --> 08:58:11,120
now okay and then we say start internal testing okay so now that compliance


27507
08:58:11,120 --> 08:58:15,760
error is going to go away so now that we've done that you'll see


27508
08:58:15,760 --> 08:58:19,440
that here in app store connect there is a section called test flight and in here


27509
08:58:19,440 --> 08:58:24,080
you have the ability to for instance invite third-party testers


27510
08:58:24,080 --> 08:58:28,800
to your um to test your application and you are


27511
08:58:28,800 --> 08:58:34,080
also allowed to give access to your application to users


27512
08:58:34,080 --> 08:58:38,232
who you've invited to app store connect so it is very very important to


27513
08:58:38,232 --> 08:58:41,592
understand the difference one is internal testing and the other one is


27514
08:58:41,592 --> 08:58:45,280
like if you want to submit your application to be tested by third


27515
08:58:45,280 --> 08:58:48,960
parties like someone who doesn't work for your company for instance so in this


27516
08:58:48,960 --> 08:58:52,552
case we're just going to use internal testing in this chapter but just know


27517
08:58:52,552 --> 08:58:57,192
that test flight is on ios and mac os an application that


27518
08:58:57,192 --> 08:59:00,160
you can actually download on those operating systems


27519
08:59:00,160 --> 08:59:05,592
and you can use test flight in order to test your own ios applications or mac


27520
08:59:05,592 --> 08:59:11,440
applications before you submit them to app store okay


27521
08:59:11,440 --> 08:59:15,912
so that's where test flight now that we're talking all about all


27522
08:59:15,912 --> 08:59:20,232
these let's just also make sure that we know we have a little bit of a security


27523
08:59:20,232 --> 08:59:23,912
problem um we haven't really talked about it so


27524
08:59:23,912 --> 08:59:30,400
much yet but i i built this um with uh uh in swedish you say midfield and that


27525
08:59:30,400 --> 08:59:35,360
is like intentionally intentionally i built this into this course so you'll


27526
08:59:35,360 --> 08:59:38,400
see how the resubmission process also works so


27527
08:59:38,400 --> 08:59:43,280
if if we bring our code let's let's bring our mynotes code in here


27528
08:59:43,280 --> 08:59:48,720
and have a look at our um i believe was one of our services


27529
08:59:48,720 --> 08:59:51,192
notes service oops


27530
08:59:51,192 --> 08:59:55,192
no service is completely oh because that was the crowd service so


27531
08:59:55,192 --> 08:59:59,912
let's have a look at the service and cloud note and we have


27532
08:59:59,912 --> 09:00:05,120
crowd cloud storage cloud firebase cloud storage it's called okay i'd forgotten


27533
09:00:05,120 --> 09:00:10,400
the name and we had this little all field in here you see


27534
09:00:10,400 --> 09:00:16,080
so what this all field at the moment is doing is saying that go get all the


27535
09:00:16,080 --> 09:00:20,800
notes in all the notes in the notes collection


27536
09:00:20,800 --> 09:00:25,912
so that's doing that and then from all the notes remember all the notes not


27537
09:00:25,912 --> 09:00:30,720
only your notes it's taking and creating a cloud note


27538
09:00:30,720 --> 09:00:37,040
and then it's filtering them out by who you are that is a huge security problem


27539
09:00:37,040 --> 09:00:40,232
because by doing this subscription and getting


27540
09:00:40,232 --> 09:00:44,160
this stream you're pretty much reading everyone else's notes as well what we


27541
09:00:44,160 --> 09:00:48,400
want soon we're gonna fix that don't worry about it what we want is to not


27542
09:00:48,400 --> 09:00:53,360
even allow any user to read someone else's notes okay and then we're going


27543
09:00:53,360 --> 09:00:57,192
to change this implementation of all notes and resubmit


27544
09:00:57,192 --> 09:00:59,592
our application to apple so


27545
09:00:59,592 --> 09:01:03,120
i didn't want us to submit an app to apple and then to google and then have


27546
09:01:03,120 --> 09:01:06,800
to resubmit it in both platforms because as i said planned this so i just wanted


27547
09:01:06,800 --> 09:01:10,640
us to submit something only to one platform and then draw it back and then


27548
09:01:10,640 --> 09:01:14,400
send it again but don't worry about this yet i'm just giving you some preparation


27549
09:01:14,400 --> 09:01:18,000
of what's to come so


27550
09:01:18,000 --> 09:01:21,272
what we need to do now first is to as the caption at the bottom of the screen


27551
09:01:21,272 --> 09:01:25,760
in the case we need to install test flight for both ios and you also have to


27552
09:01:25,760 --> 09:01:30,960
install it for um your mac on on the mac you can just go


27553
09:01:30,960 --> 09:01:36,640
to app store on your macintosh so app store app and then search for test


27554
09:01:36,640 --> 09:01:39,120
flight okay after


27555
09:01:39,120 --> 09:01:42,960
search for test flight you can install it with this install button i have it


27556
09:01:42,960 --> 09:01:46,552
installed already on my computer so i don't see a install button in here i can


27557
09:01:46,552 --> 09:01:50,640
just open it and after you've done that um for your


27558
09:01:50,640 --> 09:01:55,680
macintosh you'll also need to install it for your um


27559
09:01:55,680 --> 09:02:01,120
ios device and here i actually have my iphone my little


27560
09:02:01,120 --> 09:02:06,000
iphone 13 pro max here and i have i'm


27561
09:02:06,000 --> 09:02:09,832
mirroring that iphone here on the screen as you can see so what you can see on


27562
09:02:09,832 --> 09:02:12,552
the screen is actually my iphone right here okay


27563
09:02:12,552 --> 09:02:17,272
and test flight is an application which is available right here so this is the


27564
09:02:17,272 --> 09:02:20,800
test flight application on ios so at the moment you can see that i don't have


27565
09:02:20,800 --> 09:02:26,160
access to my nodes application but we're going to fix that soon or my awesome


27566
09:02:26,160 --> 09:02:30,800
notes as we call it okay so let's go ahead in here and have a


27567
09:02:30,800 --> 09:02:34,232
look at the next thing we need to talk about and that's adding a user to to


27568
09:02:34,232 --> 09:02:39,512
test light so how do i get access to um to


27569
09:02:39,512 --> 09:02:44,160
this build that we've submitted so that i can test it with test flight well the


27570
09:02:44,160 --> 09:02:48,872
user that i've used for testing in here and i know that user it's


27571
09:02:48,872 --> 09:02:53,680
pixelity.sweden gmail.com so what i'm going to do now is


27572
09:02:53,680 --> 09:02:58,480
to invite that user to test this build so let's go to internal testing and


27573
09:02:58,480 --> 09:03:03,512
press the plus button and in here i'm just going to say my users okay


27574
09:03:03,512 --> 09:03:07,912
and then press the create button and in here you'll see a plus button


27575
09:03:07,912 --> 09:03:12,400
tester 0 and i'm just going to say plus and in here i'm just going to use a


27576
09:03:12,400 --> 09:03:15,360
pixel to switch so i'm just going to say add in here


27577
09:03:15,360 --> 09:03:20,000
okay and it says one tester has been added to this group and that's pretty


27578
09:03:20,000 --> 09:03:23,440
much it so i don't have to do anything extra there


27579
09:03:23,440 --> 09:03:29,592
so what i'm gonna do then is going to wait for um an email to be sent by app


27580
09:03:29,592 --> 09:03:33,512
store connect to my user and it's just been sent i'm gonna open it so you can


27581
09:03:33,512 --> 09:03:37,192
also see it how it looks like here's the email that i just received so app store


27582
09:03:37,192 --> 09:03:41,592
connect is telling me that hey you've now been invited to and test this


27583
09:03:41,592 --> 09:03:45,592
application and you can just go ahead and do it so i'm just gonna tap on view


27584
09:03:45,592 --> 09:03:50,552
in test flight and this is just gonna work because i already have um


27585
09:03:50,552 --> 09:03:55,760
basically a test light installed on my macintosh so let me just tap on that and


27586
09:03:55,760 --> 09:03:59,360
i can see test flight open on a separate screen i'll bring it to the screen here


27587
09:03:59,360 --> 09:04:04,680
and i can accept in basically installing


27588
09:04:05,440 --> 09:04:09,832
this application so as the bottom as the bottom captioning indicates we've


27589
09:04:09,832 --> 09:04:14,080
already looked at the email it looked like this and now we're going


27590
09:04:14,080 --> 09:04:18,400
to install this application which is a flutter application


27591
09:04:18,400 --> 09:04:22,232
but we're installing it on a macintosh and that's just great so let's just


27592
09:04:22,232 --> 09:04:26,872
accept this and you can see now i can either say install or done so i'm just


27593
09:04:26,872 --> 09:04:30,480
gonna say done so you see it so this is our application here and i'm just gonna


27594
09:04:30,480 --> 09:04:34,800
press the install button and this is just gonna go to app store connect and


27595
09:04:34,800 --> 09:04:41,592
grab that binary and bring it down so and i can just press the open button


27596
09:04:41,592 --> 09:04:47,120
and if everything goes well this is our flutter application running on this


27597
09:04:47,120 --> 09:04:51,272
macintosh but it is an ios app we didn't actually


27598
09:04:51,272 --> 09:04:54,640
compile this to be running on a macintosh so everything is just working


27599
09:04:54,640 --> 09:04:58,480
as it should i can even log in here


27600
09:04:58,832 --> 09:05:04,080
right like that and then in here it's a foo bar bass


27601
09:05:04,080 --> 09:05:08,000
log in and i can see my note so it's working as


27602
09:05:08,000 --> 09:05:12,080
expected so i'm just going to close the app now all right


27603
09:05:12,080 --> 09:05:15,360
so what we need to do now is to submit this


27604
09:05:15,360 --> 09:05:18,720
build we've looked at it it seems to be working fine so i'm just going to close


27605
09:05:18,720 --> 09:05:22,552
test flight here and close this email let's then go to app store connect and


27606
09:05:22,552 --> 09:05:27,440
let's go to this app store section in here and in this ios app section here


27607
09:05:27,440 --> 09:05:32,400
1.0 prepare for submission let's scroll down to the place that says build and we


27608
09:05:32,400 --> 09:05:36,720
need to then say select a build before you submit your app okay now


27609
09:05:36,720 --> 09:05:40,232
remember uh if you don't see this blue button in


27610
09:05:40,232 --> 09:05:45,120
here that's because you've probably just submitted your bill to apple


27611
09:05:45,120 --> 09:05:49,192
apple usually takes up to 30 minutes or sometimes even more to validate your


27612
09:05:49,192 --> 09:05:53,440
build so they may not have even appeared in here especially if it's the first


27613
09:05:53,440 --> 09:05:56,800
build that you're sending to apple it may take a while for


27614
09:05:56,800 --> 09:06:01,592
them to process it so you may not see this button simply because there is no


27615
09:06:01,592 --> 09:06:06,320
valid build yet but you can test you can check the status of your builds by just


27616
09:06:06,320 --> 09:06:10,160
going to this test flight section and just having a look at the version that


27617
09:06:10,160 --> 09:06:15,120
you've submitted and if there is if that build is still processing it will just


27618
09:06:15,120 --> 09:06:19,512
say uh paranthesis processing and the icon will just be a little bit grayed


27619
09:06:19,512 --> 09:06:23,120
out okay so don't worry it's not there's nothing wrong you just have to wait a


27620
09:06:23,120 --> 09:06:26,232
little bit so in here i'm just going to say select


27621
09:06:26,232 --> 09:06:29,592
a bill before you submit your app and then say one that build that i'd


27622
09:06:29,592 --> 09:06:35,592
submitted all right so and then i'm just gonna press the save button


27623
09:06:35,592 --> 09:06:40,480
so that's for the build so age rating in app store connect


27624
09:06:40,480 --> 09:06:44,232
go to app information and fill in age rating and i believe we've already done


27625
09:06:44,232 --> 09:06:48,232
this so if if you've not done that before please go ahead and take care of


27626
09:06:48,232 --> 09:06:51,912
that but i explained this in one of the previous chapters so you may have to go


27627
09:06:51,912 --> 09:06:56,400
and edit your age rating if you want to but if you have followed the chapters


27628
09:06:56,400 --> 09:06:58,640
chronologically you should have done this


27629
09:06:58,640 --> 09:07:02,800
by this point okay


27630
09:07:02,800 --> 09:07:06,960
we also need to take care of our app privacy so we need to go to app privacy


27631
09:07:06,960 --> 09:07:10,000
as the caption at the bottom of the screen indicates and here we have to get


27632
09:07:10,000 --> 09:07:12,640
started by filling out


27633
09:07:12,640 --> 09:07:16,720
our app privacy and as you can see in here if you have an


27634
09:07:16,720 --> 09:07:20,800
application that collects a lot of data you i don't want to scare you but you


27635
09:07:20,800 --> 09:07:25,760
may kind of be in trouble because you will have to inform apple about all


27636
09:07:25,760 --> 09:07:29,272
those things what you're collecting from the user okay


27637
09:07:29,272 --> 09:07:34,720
so let's let's in here let's say do you or third party partners collect data


27638
09:07:34,720 --> 09:07:38,232
from this app then we should say yes in here right because we are collecting


27639
09:07:38,232 --> 09:07:43,440
data and that is the user's for instance email address


27640
09:07:43,440 --> 09:07:49,592
password and notes so let's just say yes in here's a data types that meet all of


27641
09:07:49,592 --> 09:07:53,832
the following criteria are optional to disclosure the data is not used for


27642
09:07:53,832 --> 09:07:56,552
tracking we're not using it for tracking the data


27643
09:07:56,552 --> 09:08:00,480
is not used for third party we're not doing that collection of data occurs


27644
09:08:00,480 --> 09:08:04,480
only in infrequent cases okay so we pretty much are not


27645
09:08:04,480 --> 09:08:08,480
doing any of those tracking stuff that they're saying here so


27646
09:08:08,480 --> 09:08:11,832
let's go in here and say data collection yeah we're collecting your email address


27647
09:08:11,832 --> 09:08:14,232
and that's it


27648
09:08:14,232 --> 09:08:18,640
we're not collecting any financial information location


27649
09:08:18,640 --> 09:08:24,232
contacts user content photos audio gameplay none of that


27650
09:08:24,232 --> 09:08:30,552
any other user generated contents yes browsing history no search history no


27651
09:08:30,552 --> 09:08:35,360
user ids screen name handle account id


27652
09:08:35,360 --> 09:08:39,040
yes we are device id we're not


27653
09:08:39,040 --> 09:08:42,480
um diagnosis crash data we're not doing


27654
09:08:42,480 --> 09:08:46,080
that at the moment and other data so yeah this seems fine


27655
09:08:46,080 --> 09:08:50,320
so for now we can just say identifier to user id we also said other user content


27656
09:08:50,320 --> 09:08:54,000
because we're collecting the users generated notes and we're also


27657
09:08:54,000 --> 09:08:57,592
collecting their email address so let's just say saving here


27658
09:08:57,592 --> 09:09:02,232
okay and it says additional setup required so let's go ahead and fix those


27659
09:09:02,232 --> 09:09:05,512
now in email address let's go set up email address so i'm going to click


27660
09:09:05,512 --> 09:09:08,720
there and are we using it for third party no


27661
09:09:08,720 --> 09:09:14,232
developer advertising no analytics no product personalization


27662
09:09:14,232 --> 09:09:19,592
customizing what the user sees such as a list of recommended products for no


27663
09:09:19,592 --> 09:09:24,080
app functionality yes that's what we're doing so press next


27664
09:09:24,080 --> 09:09:27,360
and are the email addresses collected from this app linked to the user's


27665
09:09:27,360 --> 09:09:32,320
identity link to the yes email address collector


27666
09:09:32,320 --> 09:09:36,552
link to the user's identity are there i mean this is this is a


27667
09:09:36,552 --> 09:09:39,440
little bit of a legal question so i'm not best


27668
09:09:39,440 --> 09:09:42,480
um placed here to


27669
09:09:42,480 --> 09:09:47,120
answer this but i mean an email isn't necessarily connected to someone's


27670
09:09:47,120 --> 09:09:51,272
identity as a person because i can just go create like a private email and no


27671
09:09:51,272 --> 09:09:54,800
one knows about so i'm just gonna answer no


27672
09:09:54,800 --> 09:09:59,360
tracking email address okay next


27673
09:09:59,360 --> 09:10:02,400
um okay


27674
09:10:02,400 --> 09:10:05,912
doesn't seem like okay do you or third-party partners use email addresses


27675
09:10:05,912 --> 09:10:11,680
for tracking purposes nope okay and saved okay so


27676
09:10:11,680 --> 09:10:15,760
the email address stuff is saved now let's go to other user content which is


27677
09:10:15,760 --> 09:10:20,552
the user generated notes okay so indicate how other user content


27678
09:10:20,552 --> 09:10:25,512
collected from this app is being used um advertising no analytics no


27679
09:10:25,512 --> 09:10:29,272
customization no and app functionality of course


27680
09:10:29,272 --> 09:10:32,872
so let's then go and say is user content collected from the sub link to the


27681
09:10:32,872 --> 09:10:36,800
user's identity they're used they're linked to the


27682
09:10:36,800 --> 09:10:40,960
user's email and since we said email is not linked to the user's identity i'm


27683
09:10:40,960 --> 09:10:46,400
just gonna reason to say no in here do you or third-party partners use other


27684
09:10:46,400 --> 09:10:52,720
user content for tracking purposes nope okay so that part is done as well then


27685
09:10:52,720 --> 09:10:56,320
let's go to identifiers for user id so i'm just going to click there


27686
09:10:56,320 --> 09:11:02,000
and remember user id in here is that uid that firebase creates okay remember that


27687
09:11:02,000 --> 09:11:06,080
so we're using that for app functionality okay


27688
09:11:06,080 --> 09:11:10,872
are the user ids collected from this app linked to the user's identity


27689
09:11:10,872 --> 09:11:15,040
user id user identity


27690
09:11:15,040 --> 09:11:19,360
i would say yes it is quite obvious so let's just say yes


27691
09:11:19,360 --> 09:11:24,960
do you or third party partners use user ids for tracking purposes nope


27692
09:11:24,960 --> 09:11:28,640
nope all right so saved and that's that now


27693
09:11:28,640 --> 09:11:32,552
you've gone through the privacy policy and this is like that


27694
09:11:32,552 --> 09:11:35,832
basically what happens is apple will


27695
09:11:35,832 --> 09:11:41,272
display this to users when they try to download your application this is very


27696
09:11:41,272 --> 09:11:45,592
important that you fill in to the best of your knowledge and ability this is


27697
09:11:45,592 --> 09:11:50,160
not the place that you go and fake anything and say try to hide the


27698
09:11:50,160 --> 09:11:54,080
information that you're collecting from the users it is in the in your best


27699
09:11:54,080 --> 09:11:58,552
interest in your product's best interest and in your company's best interest to


27700
09:11:58,552 --> 09:12:05,040
make sure that you fill these in as best as you can okay usually in bigger


27701
09:12:05,040 --> 09:12:10,080
companies you'd want to probably um consult with a lawyer or somebody who's


27702
09:12:10,080 --> 09:12:14,552
um good at making sure you're not missing anything so in a big company you


27703
09:12:14,552 --> 09:12:18,320
usually don't do this on your own but since we're now assuming that you're a


27704
09:12:18,320 --> 09:12:22,320
simple like a single entity even if you're behind an organization like me


27705
09:12:22,320 --> 09:12:28,480
but you're a single entity and trying to do this to the best of your ability okay


27706
09:12:28,480 --> 09:12:33,040
so now what we need to do is also fill in this um


27707
09:12:33,040 --> 09:12:38,720
let's see here privacy policy so what this is as you can see in here a


27708
09:12:38,720 --> 09:12:43,120
url that links to the privacy policy privacy policy is required for all apps


27709
09:12:43,120 --> 09:12:46,400
and as you can see at the bottom of the screen i've actually included a little


27710
09:12:46,400 --> 09:12:52,480
privacy policy for my own website and i've included that let's see


27711
09:12:52,480 --> 09:12:57,272
if i can log in in here let's see if i can do it on a separate


27712
09:12:57,272 --> 09:13:01,360
window so you don't have to be bothered by that


27713
09:13:03,760 --> 09:13:10,320
because i've actually included that um you know what i will actually do it on a


27714
09:13:10,320 --> 09:13:16,000
separate screen so you don't have to be bothered by that and um


27715
09:13:16,232 --> 09:13:20,480
so i will go to


27716
09:13:21,512 --> 09:13:24,872
i'll go to my hosting website and i'll take care of that and then i'll bring it


27717
09:13:24,872 --> 09:13:29,272
to the screen so you can actually see it so


27718
09:13:29,272 --> 09:13:34,720
let's see if i can go to my hosting in here and then go to my


27719
09:13:35,192 --> 09:13:39,120
hosting basically


27720
09:13:39,120 --> 09:13:43,912
well all my file files are residing excuse me


27721
09:13:43,912 --> 09:13:48,400
and i'll bring it in here so let's have a look at this url that i provided at


27722
09:13:48,400 --> 09:13:51,512
the bottom of the screen you can see pixel dsc privacy policy so i'm going to


27723
09:13:51,512 --> 09:13:54,480
go to dub dub up there and i have a look at


27724
09:13:54,480 --> 09:13:58,872
this text file which is right there privacy policy so if i type pixelity


27725
09:13:58,872 --> 09:14:04,160
excuse me privacy policy you see that there is a generic privacy policy that


27726
09:14:04,160 --> 09:14:08,160
i've placed in my website and you will need to do the same thing


27727
09:14:08,160 --> 09:14:12,480
so you'll need to basically grab a privacy policy from somewhere and look


27728
09:14:12,480 --> 09:14:17,120
at that privacy policy and make sure that it works for you so what i did is i


27729
09:14:17,120 --> 09:14:20,480
found a website and i'm not just going to go advertising


27730
09:14:20,480 --> 09:14:25,912
here but you can find free privacy policy written by a very good and smart


27731
09:14:25,912 --> 09:14:30,320
people and you can have a look at those adjust them to make sure that they make


27732
09:14:30,320 --> 09:14:34,080
sense for you and your company and for instance in here i've just taken a


27733
09:14:34,080 --> 09:14:38,872
generic privacy policy let's see if i can find it here


27734
09:14:38,872 --> 09:14:43,120
so i put my company name in there and i just ensure that it makes sense for my


27735
09:14:43,120 --> 09:14:47,192
company and i've just basically put it inside that url that you can see at the


27736
09:14:47,192 --> 09:14:50,872
bottom of the screen so i'm going to go in here at privacy and app store connect


27737
09:14:50,872 --> 09:14:54,800
and say privacy policy edit and in the privacy policy url i'm just going to say


27738
09:14:54,800 --> 09:14:59,360
https pixelity dot se and then i'm just going to say


27739
09:14:59,360 --> 09:15:03,680
privacy policy.txt but for you this should be


27740
09:15:03,680 --> 09:15:07,680
something else okay and i'm just going to copy that open it and make sure that


27741
09:15:07,680 --> 09:15:12,232
it exists and then i'm going to press the save button okay


27742
09:15:12,232 --> 09:15:17,912
so after we've done that we also need to make sure that we've taken care of our


27743
09:15:17,912 --> 09:15:22,800
categories the categories to which our application belongs so let's go to app


27744
09:15:22,800 --> 09:15:26,000
information at the bottom of the screen indicates i'm going here in the category


27745
09:15:26,000 --> 09:15:30,000
and the primary category we're going to say our app belongs to productivity and


27746
09:15:30,000 --> 09:15:36,232
then it belongs to utilities okay here utilities all right then i'm gonna


27747
09:15:36,232 --> 09:15:39,272
save this information


27748
09:15:39,360 --> 09:15:44,080
okay then what we need to also do before we submit our app for review is that


27749
09:15:44,080 --> 09:15:50,000
just remember this application is going to be reviewed by an actual human so


27750
09:15:50,000 --> 09:15:54,320
this person is literally going to get this information in the queue of their


27751
09:15:54,320 --> 09:15:57,360
work they're going to say oh an application called my awesome notes


27752
09:15:57,360 --> 09:16:00,640
needs to be reviewed and then they're going to say okay


27753
09:16:00,640 --> 09:16:03,192
they're going to have some control panel on their screen i don't know really how


27754
09:16:03,192 --> 09:16:07,680
it's formed on apple's site but they're going to then download this application


27755
09:16:07,680 --> 09:16:12,080
on various devices automatically perhaps and then they're gonna open the app and


27756
09:16:12,080 --> 09:16:15,192
then like how am i supposed to use this app so


27757
09:16:15,192 --> 09:16:19,360
it is in your best interest to ensure that you provide all information


27758
09:16:19,360 --> 09:16:24,232
possible to that person so that they can review your application so what you need


27759
09:16:24,232 --> 09:16:28,960
to do then is to go inside app here prepare for submission in here app


27760
09:16:28,960 --> 09:16:33,680
review information and then under notes just tell that person


27761
09:16:33,680 --> 09:16:38,160
what your how your application works and how they need to register so in here


27762
09:16:38,160 --> 09:16:42,400
what we're going to say is um you you will need


27763
09:16:42,400 --> 09:16:46,160
a valid email address in order


27764
09:16:46,160 --> 09:16:49,120
to register please follow these


27765
09:16:49,120 --> 09:16:55,592
steps to register now i'm gonna say um open the register view and register


27766
09:16:55,592 --> 09:17:02,000
with the email and password of your choosing


27767
09:17:02,000 --> 09:17:09,192
you're choosing wait for a confirmation email


27768
09:17:09,192 --> 09:17:16,480
wait for a confirmation email from to be to be sent to your email address


27769
09:17:16,480 --> 09:17:20,000
and in the confirmation


27770
09:17:20,320 --> 09:17:24,480
click on the link to confirm your email


27771
09:17:24,480 --> 09:17:29,360
address okay and then step three is go back


27772
09:17:29,360 --> 09:17:34,832
to the app and in the login screen log


27773
09:17:34,832 --> 09:17:40,720
in with your email and password


27774
09:17:40,720 --> 09:17:44,800
and that's it so we've done that now so i'm gonna


27775
09:17:44,800 --> 09:17:48,232
actually then provide a valid phone number in here and since i don't want to


27776
09:17:48,232 --> 09:17:52,160
really share my like phone number everywhere on the internet i'm just


27777
09:17:52,160 --> 09:17:55,680
going to go on to a separate screen here and


27778
09:17:55,680 --> 09:18:00,640
write my valid phone number in here um


27779
09:18:00,640 --> 09:18:05,512
but that's my phone number great and let's then


27780
09:18:05,512 --> 09:18:08,872
go here and then i'm going to press save button as well


27781
09:18:08,872 --> 09:18:13,192
and then bring the screen here perfect so now i've saved that information


27782
09:18:13,192 --> 09:18:17,512
including my phone number and everything should be ready at this point


27783
09:18:17,512 --> 09:18:22,160
so what you need to do then is to go and grab some popcorn while you're


27784
09:18:22,160 --> 09:18:26,552
doing this hopefully and then you'll just need to say submit for review


27785
09:18:26,552 --> 09:18:29,592
and it says the items below need to be okay


27786
09:18:29,592 --> 09:18:33,832
we haven't really done the price pricing and then it saw it says an admin must


27787
09:18:33,832 --> 09:18:37,832
provide information about the app's privacy practices in app privacy section


27788
09:18:37,832 --> 09:18:42,080
it seems like we missed some stuff so let's go to pricing and availability and


27789
09:18:42,080 --> 09:18:45,760
fix that this application is going to be free so i'm just going to say it doesn't


27790
09:18:45,760 --> 09:18:49,040
cost anything and save that so that's for pricing


27791
09:18:49,040 --> 09:18:52,720
and let's go to app privacy and see if we've actually missed anything doesn't


27792
09:18:52,720 --> 09:18:56,400
seem like it but what we've forgotten is to actually press the publish button so


27793
09:18:56,400 --> 09:19:00,960
let's just publish that okay then we go back in here and then we


27794
09:19:00,960 --> 09:19:03,592
say submit


27795
09:19:03,832 --> 09:19:09,912
that's great so now your application is submitted to app store and a reviewer


27796
09:19:09,912 --> 09:19:13,760
from the app store connecting is going to have a look at your application so


27797
09:19:13,760 --> 09:19:18,232
that they can confirm that it works according to the


27798
09:19:18,232 --> 09:19:22,080
information that you've provided and i can see that i actually got an email


27799
09:19:22,080 --> 09:19:26,480
from apple that looks like this and it says the status of your application has


27800
09:19:26,480 --> 09:19:30,232
changed to waiting for review so it's not a waiting game so


27801
09:19:30,232 --> 09:19:34,552
um but before before we actually do all of this we


27802
09:19:34,552 --> 09:19:39,272
whether apple has had the time to review our application and


27803
09:19:39,272 --> 09:19:42,720
accept it or they found some bugs in it and


27804
09:19:42,720 --> 09:19:48,320
rejected our application whichever case we need to draw back this


27805
09:19:48,320 --> 09:19:52,160
build and i will show you how in the upcoming chapters because we have the


27806
09:19:52,160 --> 09:19:56,720
security bug that i told you about so for now we can just be happy that we've


27807
09:19:56,720 --> 09:19:59,440
gone through this chapter we've done quite a lot of work


27808
09:19:59,440 --> 09:20:04,160
and um pat yourself on the back just great job


27809
09:20:04,160 --> 09:20:08,872
and grab some uh maybe a tea or coffee


27810
09:20:08,872 --> 09:20:12,960
and we can get start to actually get ready for the next chapter and i'll tell


27811
09:20:12,960 --> 09:20:16,960
you actually what we need to talk about in the next chapter and that is this


27812
09:20:16,960 --> 09:20:21,680
little um problem that we had in the all notes and


27813
09:20:21,680 --> 09:20:26,800
we need to fix this before we can go live with android as well so


27814
09:20:26,800 --> 09:20:30,872
now you know what's coming in the upcoming chapters and um


27815
09:20:30,872 --> 09:20:34,640
i'll see you there hello everyone and welcome to chapter 49 of this flutter


27816
09:20:34,640 --> 09:20:40,000
course in previous chapters we've submitted our application to um


27817
09:20:40,000 --> 09:20:43,760
app store connect and we also briefly talked about the fact


27818
09:20:43,760 --> 09:20:47,912
that we have a little bit of a security problem in our firebase firestore


27819
09:20:47,912 --> 09:20:51,760
database so let's have a look at what the actual


27820
09:20:51,760 --> 09:20:55,680
problem is so i explained this briefly in the previous chapters but i'll do it


27821
09:20:55,680 --> 09:21:00,160
again in here so let's have a look um so if this is our code i'm going to


27822
09:21:00,160 --> 09:21:04,720
increase the size so we'll see it better and you'll see that when we are working


27823
09:21:04,720 --> 09:21:09,192
with displaying all the notes on the screen for a user so for instance user a


27824
09:21:09,192 --> 09:21:13,272
has signed into the application and inside our


27825
09:21:13,272 --> 09:21:16,480
notes view if you go there we'll see that we're


27826
09:21:16,480 --> 09:21:20,720
subscribing to all nodes in here in our stream builder so we're saying we're


27827
09:21:20,720 --> 09:21:25,680
basically building our entire list view which is here now it's list view and


27828
09:21:25,680 --> 09:21:30,232
we're building it on top of the data that comes from this all nodes function


27829
09:21:30,232 --> 09:21:34,800
which is at the moment inside our firebase cloud storage okay


27830
09:21:34,800 --> 09:21:39,120
however if you look at this code you'll see that what it is doing is referring


27831
09:21:39,120 --> 09:21:44,400
to this node's private um or this node's local variable and which


27832
09:21:44,400 --> 09:21:48,080
is right here and this notes at the moment is


27833
09:21:48,080 --> 09:21:54,080
pointing to the notes collection and what it does it literally takes all


27834
09:21:54,080 --> 09:21:59,912
the notes from the notes collection so this look this essentially means any


27835
09:21:59,912 --> 09:22:04,720
user logged into our application is truly retrieving all the nodes in the


27836
09:22:04,720 --> 09:22:07,360
entire database although


27837
09:22:07,360 --> 09:22:11,760
at the end of that code what we're doing is saying we're okay after we retrieve


27838
09:22:11,760 --> 09:22:16,552
all the nodes from the database then we're mapping them here to cloud


27839
09:22:16,552 --> 09:22:20,232
nodes so we can consume them locally and


27840
09:22:20,232 --> 09:22:25,120
right at the end we're saying hey but we're only interested in notes that are


27841
09:22:25,120 --> 09:22:27,680
for discard user but


27842
09:22:27,680 --> 09:22:31,040
even though the current login user is not going to see all the notes in the


27843
09:22:31,040 --> 09:22:36,640
database but the current user is reading all the notes in the database and if you


27844
09:22:36,640 --> 09:22:40,720
perform a man in the middle attack for instance if you're using charles proxy


27845
09:22:40,720 --> 09:22:45,832
on a computer and then you're using your phone and you're using for


27846
09:22:45,832 --> 09:22:49,272
instance let's say you have charles proxy on your computer and then you're


27847
09:22:49,272 --> 09:22:53,592
sharing your wi-fi connection from an ethernet connection through wi-fi with


27848
09:22:53,592 --> 09:22:57,120
an iphone that is running your application if i don't sit in the middle


27849
09:22:57,120 --> 09:23:00,232
with charles proxy and look at all the traffic that's going from your flutter


27850
09:23:00,232 --> 09:23:05,040
application to firebase then i can actually see you requesting information


27851
09:23:05,040 --> 09:23:09,912
about all those notes and then those notes coming back to the application so


27852
09:23:09,912 --> 09:23:15,040
a man in the middle attack could potentially then expose all data in our


27853
09:23:15,040 --> 09:23:18,640
database or in the notes collection at least so we need to


27854
09:23:18,640 --> 09:23:23,512
we need to fix this so what we're going to do is by is to start


27855
09:23:23,512 --> 09:23:28,552
by removing our application from app store connect if you remember in the


27856
09:23:28,552 --> 09:23:33,192
previous chapters we sent our application to apple for review and what


27857
09:23:33,192 --> 09:23:38,000
i've done in here i've developer rejected this application essentially so


27858
09:23:38,000 --> 09:23:42,400
let me have a look and see if i can increase the size of the screen so we


27859
09:23:42,400 --> 09:23:46,800
submitted our application to app store connect for review from the apple um


27860
09:23:46,800 --> 09:23:51,272
team review team but right before it actually went to review i refreshed the


27861
09:23:51,272 --> 09:23:55,360
screen in here and you didn't see this but i said remove this application from


27862
09:23:55,360 --> 09:23:59,592
review if you remove your own application from review basically it


27863
09:23:59,592 --> 09:24:04,552
will become this it will go to the state developer rejected so this is basically


27864
09:24:04,552 --> 09:24:08,480
informing you that hey it's not apple basically rejecting your application it


27865
09:24:08,480 --> 09:24:13,760
is you yourself who's done this so so i can show you an example how


27866
09:24:13,760 --> 09:24:16,480
that confirmation email from apple will look


27867
09:24:16,480 --> 09:24:20,232
like so i'll open it in a separate screen


27868
09:24:20,232 --> 09:24:24,400
and it kind of looks like this i'll bring it to this main screen so you see


27869
09:24:24,400 --> 09:24:26,720
it as well okay all right


27870
09:24:26,720 --> 09:24:30,960
so there we go so then i received an email from apple that said that status


27871
09:24:30,960 --> 09:24:36,400
of your app has changed to developer rejected app name blah blah okay so


27872
09:24:36,400 --> 09:24:39,912
this is the email that you'll receive so i need you to basically reject your


27873
09:24:39,912 --> 09:24:43,192
application the version one zero that you sent to


27874
09:24:43,192 --> 09:24:47,040
apple because we have security problems with that application okay and again


27875
09:24:47,040 --> 09:24:50,640
i've mentioned this in the previous chapters i did this in on purpose so


27876
09:24:50,640 --> 09:24:53,680
that we can understand like someone because this is the kind of stuff that


27877
09:24:53,680 --> 09:24:56,232
you're going to go through as a software developer sometimes you're going to


27878
09:24:56,232 --> 09:25:00,872
submit something to apple or google and then you understand you made a mistake


27879
09:25:00,872 --> 09:25:05,192
so how do you how do you fix that and i really wanted this to be a part of this


27880
09:25:05,192 --> 09:25:09,360
um course so you understand how you reject


27881
09:25:09,360 --> 09:25:12,320
your application how you fix the problem and how you resubmit the application


27882
09:25:12,320 --> 09:25:16,552
okay but i didn't want to do it for both ios and android because it just gets


27883
09:25:16,552 --> 09:25:20,000
boring if you have to submit first go through the entire submission from two


27884
09:25:20,000 --> 09:25:23,592
platforms and then to submit again so that's why we first submitted for ios


27885
09:25:23,592 --> 09:25:26,640
and then we're gonna fix it and then once that's fixed we're also gonna


27886
09:25:26,640 --> 09:25:31,120
submit for android okay so after rejecting your application you


27887
09:25:31,120 --> 09:25:36,400
also need to basically remove your build from this at 1.0 so i i believe i've


27888
09:25:36,400 --> 09:25:39,760
already done that oh no i haven't so it's actually good i haven't done that


27889
09:25:39,760 --> 09:25:44,400
so let's go ahead and here in 1.0 and just remove this build okay so we say we


27890
09:25:44,400 --> 09:25:48,720
don't want to submit anything and then press save okay


27891
09:25:49,832 --> 09:25:53,912
all right um and also as you can see at the bottom of the screen we're going to


27892
09:25:53,912 --> 09:25:59,760
update this 1.0 version now to 1.1 so let's go and see if he can find that


27893
09:25:59,760 --> 09:26:04,232
information so right now i also saw that i got an email from


27894
09:26:04,232 --> 09:26:07,912
apple and here says okay now it's prepared for submission meaning that


27895
09:26:07,912 --> 09:26:12,480
it's not developed or rejected anymore and let's just bump this version in here


27896
09:26:12,480 --> 09:26:17,760
to 1.1 0.0 okay and then i'm going to save it


27897
09:26:17,760 --> 09:26:22,232
well and here i mean this is kind of like a it depends on your taste if you


27898
09:26:22,232 --> 09:26:27,192
want to resubmit 1.0 you're more than welcome to do that but it's usually


27899
09:26:27,192 --> 09:26:32,640
if you change something in your code then it is usual for you to go and


27900
09:26:32,640 --> 09:26:36,552
update this um minor version and it's called so because


27901
09:26:36,552 --> 09:26:39,832
this first version is the major version so if there's a huge future in the


27902
09:26:39,832 --> 09:26:44,400
application and this is the minor version and here is a patch i mean


27903
09:26:44,400 --> 09:26:48,320
you could argue that we could i essentially maybe change our application


27904
09:26:48,320 --> 09:26:53,832
version to one zero one because this is a patch but i just choose to do one one


27905
09:26:53,832 --> 09:26:58,000
zero okay so let's go ahead and i'm assuming that


27906
09:26:58,000 --> 09:27:00,160
you're doing the same thing because there's some information i'm gonna


27907
09:27:00,160 --> 09:27:03,832
provide to you a little bit later in this chapter that relies on you having


27908
09:27:03,832 --> 09:27:07,592
actually changed your app version to one one zero okay


27909
09:27:07,592 --> 09:27:12,000
so that's that part is done what we need to do now is to go as a caption in case


27910
09:27:12,000 --> 09:27:16,400
we're gonna go clean all the notes and users in our firestore


27911
09:27:16,400 --> 09:27:21,680
database so let's go ahead and see if we can get that to work so


27912
09:27:21,680 --> 09:27:24,640
my notes flutter project so that's in your


27913
09:27:24,640 --> 09:27:29,192
firebase console and i'm going to go first to authentication to users there's


27914
09:27:29,192 --> 09:27:32,720
just one user in here i'm just going to delete that account okay then i'm going


27915
09:27:32,720 --> 09:27:36,720
to go to firestore database and there's probably two notes in the notes


27916
09:27:36,720 --> 09:27:41,360
collection and i'm going to delete them as well so delete documents there and


27917
09:27:41,360 --> 09:27:45,832
then delete this document as well okay so we have a clean slate no users and no


27918
09:27:45,832 --> 09:27:51,192
notes in the database so you may be wondering well if we have


27919
09:27:51,192 --> 09:27:54,800
security problems with our database shouldn't firebase be intelligent enough


27920
09:27:54,800 --> 09:27:58,400
to know that and firebase is actually intelligent enough to know that and


27921
09:27:58,400 --> 09:28:02,480
sometimes you will receive emails from i mean depending on the security holes in


27922
09:28:02,480 --> 09:28:06,720
your database you will receive emails from at firebase telling you that hey


27923
09:28:06,720 --> 09:28:10,552
there is something wrong with your security rules and i've prepared some


27924
09:28:10,552 --> 09:28:14,640
email that that kind of indicates that i just wanted to show you how that kind of


27925
09:28:14,640 --> 09:28:17,912
email looks like so you can see if you have security


27926
09:28:17,912 --> 09:28:21,832
issues with your fire firebase and firestore database you may receive


27927
09:28:21,832 --> 09:28:24,552
something like this you see it says we've detected the following issues with


27928
09:28:24,552 --> 09:28:28,720
your security rules any user can read your entire database so


27929
09:28:28,720 --> 09:28:33,192
it kind of looks like this okay so just know that if you receive an email like


27930
09:28:33,192 --> 09:28:37,272
that then you know at least the reason for it okay


27931
09:28:37,272 --> 09:28:41,912
and if you're wondering more about like security rules and


27932
09:28:41,912 --> 09:28:44,720
how you have to configure them although i'm going to tell you how we're going to


27933
09:28:44,720 --> 09:28:47,512
configure our security rules in this chapter but if you're wondering how to


27934
09:28:47,512 --> 09:28:51,360
do that on your own and you're curious about reading more about it i've


27935
09:28:51,360 --> 09:28:55,760
prepared a little link here so let me see if i can actually bring it


27936
09:28:55,760 --> 09:28:59,760
to the screen by opening


27937
09:28:59,760 --> 09:29:03,440
a link and it kind of looks like this so you see firebase google.com docs first


27938
09:29:03,440 --> 09:29:06,640
our security rules and conditions so


27939
09:29:06,640 --> 09:29:11,040
and so you can read about this and i did that and i got a lot of inspiration from


27940
09:29:11,040 --> 09:29:15,360
how to fix our security uh problem in our


27941
09:29:15,360 --> 09:29:18,400
firestore database so i strongly suggest that you actually read this


27942
09:29:18,400 --> 09:29:22,872
documentation you don't have to do it right now but please just at least um


27943
09:29:22,872 --> 09:29:27,360
bookmark this page so you can come back to it later


27944
09:29:27,360 --> 09:29:32,720
okay so now to the point let's go and fix our security issue in our firestore


27945
09:29:32,720 --> 09:29:37,272
database okay so i've also prepared here how we have to actually do it and you


27946
09:29:37,272 --> 09:29:41,760
can see the let me actually bring up our security rules so go to firestore


27947
09:29:41,760 --> 09:29:46,552
database tab in your firebase console and then go to rules okay let's have a


27948
09:29:46,552 --> 09:29:50,320
look at all roles at the moment and how they're set up so the way it's set up at


27949
09:29:50,320 --> 09:29:54,320
the moment you can see it says match any database and any documents okay and


27950
09:29:54,320 --> 09:29:58,720
that's what we're doing here as well and it says match any document in there so


27951
09:29:58,720 --> 09:30:02,320
at the moment we're allowing read and write access only if you're


27952
09:30:02,320 --> 09:30:08,960
authenticated so okay so let's just for now say we are allowing create


27953
09:30:08,960 --> 09:30:13,832
if you're authenticated so we say you should be able to create a node as long


27954
09:30:13,832 --> 09:30:17,120
as you're authenticated so let's say create and you can see we get some help


27955
09:30:17,120 --> 09:30:21,760
from firebase as well in here okay so that's that so creation and then we


27956
09:30:21,760 --> 09:30:27,360
say allow read write and update


27957
09:30:27,360 --> 09:30:30,400
okay and this is the rules that we're going to write in here you can see read


27958
09:30:30,400 --> 09:30:34,800
update actually read update and delete so


27959
09:30:34,800 --> 09:30:40,160
so read updates and delete and the way we have to set it up is of course as you


27960
09:30:40,160 --> 09:30:44,960
can see in here what i preferred is we first need to make sure anyone tries to


27961
09:30:44,960 --> 09:30:49,192
read from our database or update the database or delete the document should


27962
09:30:49,192 --> 09:30:53,040
be authenticated so let's go in here and say okay if


27963
09:30:53,040 --> 09:30:56,800
authenticated we'll bring that code up here okay


27964
09:30:56,800 --> 09:31:01,192
but we're also going to add some more information to it and the information


27965
09:31:01,192 --> 09:31:05,832
should like look like this you can see in this document in here


27966
09:31:05,832 --> 09:31:11,760
you may be like okay but how do i know because okay before i actually say that


27967
09:31:11,760 --> 09:31:16,872
what we want is for the currently authenticated user id


27968
09:31:16,872 --> 09:31:23,360
to only be able to access his or her documents that have the same user id


27969
09:31:23,360 --> 09:31:28,552
remember in our code we have this user id field let me bring it up here


27970
09:31:28,552 --> 09:31:33,192
so if you go to our storage here we have these constants and we have this user id


27971
09:31:33,192 --> 09:31:39,272
field so every node that we store in our firestore database has a user id field


27972
09:31:39,272 --> 09:31:45,592
so what we want in here is to basically grab the user id from the request so if


27973
09:31:45,592 --> 09:31:50,480
you say in here request you'll see we have off path resource so let's go off


27974
09:31:50,480 --> 09:31:54,552
and then you'll see there's something called a uid and that is the user id


27975
09:31:54,552 --> 09:31:59,192
okay so if we have a look how we have to actually do that so we're saying user


27976
09:31:59,192 --> 09:32:04,552
request rtu id should be equal to resource data user id and this resource


27977
09:32:04,552 --> 09:32:09,360
is the current resource that the user is trying to access okay and if you read


27978
09:32:09,360 --> 09:32:13,120
the documentation that i provided to you earlier you'll you would know this so


27979
09:32:13,120 --> 09:32:17,120
let's go in here and say okay the request auth uid should be equal to


27980
09:32:17,120 --> 09:32:21,120
resource beta dot user id because that's the


27981
09:32:21,120 --> 09:32:27,912
field that we provided um as you saw in the code here so let's then um


27982
09:32:27,912 --> 09:32:31,760
yeah i think this is good to go so we could then publish these changes and it


27983
09:32:31,760 --> 09:32:34,960
says publish changes can take up to a minute to propagate and that's


27984
09:32:34,960 --> 09:32:38,640
completely fine because we're actually going to take some time in order to


27985
09:32:38,640 --> 09:32:43,192
update our code as well okay so that's our


27986
09:32:43,192 --> 09:32:46,800
security rule so let's just make sure that they look like this and i'm gonna


27987
09:32:46,800 --> 09:32:50,872
actually bring it to two lines so you can see it in its entirety


27988
09:32:50,872 --> 09:32:55,912
um if you need to get some um inspiration from this you can also build


27989
09:32:55,912 --> 09:32:59,512
on top of this tomorrow so you can add more security to this so you're more


27990
09:32:59,512 --> 09:33:03,040
welcome to um


27991
09:33:03,040 --> 09:33:07,360
then what we need to do is start cleaning up our code on the dart


27992
09:33:07,360 --> 09:33:11,512
site so on the dart side so let's have a look at this code that


27993
09:33:11,512 --> 09:33:14,400
we've written in here i'm going to change the screen layout a little bit so


27994
09:33:14,400 --> 09:33:19,040
you see it better so let's go to this function gets notes


27995
09:33:19,040 --> 09:33:22,800
and you may have noticed it but gets notes at the moment we're not using this


27996
09:33:22,800 --> 09:33:28,160
function at the moment so we're only using all nodes so let's go ahead and


27997
09:33:28,160 --> 09:33:31,912
just remove this gets notes from firebase cloud storage okay


27998
09:33:31,912 --> 09:33:35,680
just like that i'm running the application at the


27999
09:33:35,680 --> 09:33:39,832
moment so let's just command s and i can see there's no problems because no one


28000
09:33:39,832 --> 09:33:43,120
is actually using get notes and there's no


28001
09:33:43,120 --> 09:33:46,720
errors in our code you can see there's no files or folders that are marked as


28002
09:33:46,720 --> 09:33:50,080
red so um so that's that one that was one of


28003
09:33:50,080 --> 09:33:52,960
the things that we have to do just to remove the get nodes


28004
09:33:52,960 --> 09:33:57,120
and then what we need to do in here is to ensure that our when we're actually


28005
09:33:57,120 --> 09:34:04,000
saying all notes that we are filtering the snapshots before we actually read


28006
09:34:04,000 --> 09:34:09,760
them so let's just go in here and say notes and before snapshots f like this


28007
09:34:09,760 --> 09:34:13,760
i'm gonna say where and you can see it says okay which field


28008
09:34:13,760 --> 09:34:16,552
are you looking for then we say owner user id


28009
09:34:16,552 --> 09:34:21,360
field name and that should actually be is equal to


28010
09:34:21,360 --> 09:34:26,320
and we have the owner it's ready right


28011
09:34:26,320 --> 09:34:32,872
so that's that one and then after that we say snapshot and snapshots map


28012
09:34:32,872 --> 09:34:37,680
and that's also fine actually so


28013
09:34:37,680 --> 09:34:40,720
in to be honest with you we could clean this code up as well so let's just say


28014
09:34:40,720 --> 09:34:43,832
in here and we take this and we say this is our


28015
09:34:43,832 --> 09:34:46,872
notes excuse me


28016
09:34:46,872 --> 09:34:53,832
the final notes is equal to that for all notes


28017
09:34:53,832 --> 09:34:59,272
and we could just return it all right so now we have this and you


28018
09:34:59,272 --> 09:35:04,400
could basically argue saying that okay we have a where clause in here so we


28019
09:35:04,400 --> 09:35:08,960
don't have to have this word clause in here and i would actually say yeah that


28020
09:35:08,960 --> 09:35:13,272
does make sense because yeah why would we have two word clauses so let's just


28021
09:35:13,272 --> 09:35:16,400
remove that word clause and put the semicolon in here


28022
09:35:16,400 --> 09:35:21,040
okay so we filter before we read all the snapshots all right we're getting an


28023
09:35:21,040 --> 09:35:24,480
error in here let me see what the problem could be because there's a map


28024
09:35:24,480 --> 09:35:27,192
all right so your code basically should look like


28025
09:35:27,192 --> 09:35:31,360
this right now and what we can do now is to actually


28026
09:35:31,360 --> 09:35:35,120
put this to test to make sure everything's working as expected so i'm


28027
09:35:35,120 --> 09:35:38,872
gonna bring our ios simulator in here which the application is running on


28028
09:35:38,872 --> 09:35:43,680
already gonna do a hot restart and let's just register a user so i'm just gonna


28029
09:35:43,680 --> 09:35:46,480
say van.np


28030
09:35:46,480 --> 09:35:51,680
gmail.com foo barbeaus and please don't use this uh password say register and


28031
09:35:51,680 --> 09:35:56,320
then it says verify email okay and let me go ahead and bring up my


28032
09:35:56,320 --> 09:36:01,592
mails and have a look at my email and see if a


28033
09:36:01,592 --> 09:36:08,160
verification email has been sent to me and we've sent an email verification


28034
09:36:08,160 --> 09:36:12,480
please open it to verify your account and i hope i actually entered my email


28035
09:36:12,480 --> 09:36:16,960
correctly because i haven't yet received a verification email


28036
09:36:16,960 --> 09:36:22,960
so perhaps i could open up gmail in a separate tab because i'm using gmail at


28037
09:36:22,960 --> 09:36:28,872
the moment for that particular user and see if that email has appeared in my


28038
09:36:28,872 --> 09:36:32,320
gmail inbox okay


28039
09:36:32,320 --> 09:36:36,160
i'm gonna switch users all right let's see


28040
09:36:36,160 --> 09:36:39,760
and this is i'm doing this on a separate screen so that's why you're not seeing


28041
09:36:39,760 --> 09:36:44,232
any of this happening um i can't see really any email at the


28042
09:36:44,232 --> 09:36:49,832
moment so um let me go ahead in our firebase console in here so


28043
09:36:49,832 --> 09:36:54,872
um let's go here and let's go then to authentication and


28044
09:36:54,872 --> 09:37:00,720
i can see that there is a user here and that is actually correct but i don't see


28045
09:37:00,720 --> 09:37:06,160
any verification email being sent to me so let's go ahead and have a look at our


28046
09:37:06,160 --> 09:37:09,680
register view and let's have a look at the button


28047
09:37:09,680 --> 09:37:14,080
implementation if we actually forgot to do something so when we pass this


28048
09:37:14,080 --> 09:37:18,320
register event you can see auth event register then we have to go to our off


28049
09:37:18,320 --> 09:37:21,592
block and have a look at how we've implemented


28050
09:37:21,592 --> 09:37:25,512
implemented that i can see that we say create user and then we're awaiting on


28051
09:37:25,512 --> 09:37:31,120
the provider send email verification so it seems to be working fine however i


28052
09:37:31,120 --> 09:37:34,552
still haven't received any verification email and that's why i'm just going to


28053
09:37:34,552 --> 09:37:37,912
say send email verification here on this screen


28054
09:37:37,912 --> 09:37:41,680
and by pressing that i'm just going to refresh my emails and now i can see i


28055
09:37:41,680 --> 09:37:46,160
received a verification email i'm going to bring it here tap on the link and i


28056
09:37:46,160 --> 09:37:50,160
can see that i saw this um i can see that


28057
09:37:50,160 --> 09:37:54,480
your email has been verified was displayed to me so


28058
09:37:54,480 --> 09:37:59,760
that's great let's go ahead now and um go to the application and i'm going to


28059
09:37:59,760 --> 09:38:04,080
restart here go to the login page and i'm going to log in with that user


28060
09:38:04,080 --> 09:38:06,800
fu barbaz


28061
09:38:06,800 --> 09:38:10,552
log in with the user and no problems i can log into the application press the


28062
09:38:10,552 --> 09:38:13,192
plus button and i'm going to say my first note


28063
09:38:13,192 --> 09:38:16,640
okay that's saved and then i'm going to save


28064
09:38:16,640 --> 09:38:21,272
my second note all right and that is also saved then


28065
09:38:21,272 --> 09:38:25,360
i'm going to log out and try to log back in with another user


28066
09:38:25,360 --> 09:38:30,320
so let's register a new user because remember we deleted all our users from


28067
09:38:30,320 --> 09:38:34,960
firestore database so who are about again please don't use this password


28068
09:38:34,960 --> 09:38:38,800
and i'm going to have a look at my emails then


28069
09:38:38,800 --> 09:38:42,640
and i can actually see a new verification email was sent to me so


28070
09:38:42,640 --> 09:38:46,080
that's perfect i'm going to bring it here


28071
09:38:46,080 --> 09:38:51,120
if i can open that email it looks like this i'm going to verify my user great


28072
09:38:51,120 --> 09:38:55,760
then i'm going to restart the process and try to log in with that user


28073
09:38:55,760 --> 09:38:58,320
okay through barbaz


28074
09:38:58,320 --> 09:39:02,000
log in with the user and i can't see van dot's


28075
09:39:02,000 --> 09:39:08,000
notes so i'm going to say another first note


28076
09:39:08,000 --> 09:39:11,512
another first note and


28077
09:39:11,512 --> 09:39:16,872
create a new note say another second note all right so after these two users


28078
09:39:16,872 --> 09:39:21,912
have created their own two individual notes let's go ahead in our database


28079
09:39:21,912 --> 09:39:26,080
refresh the users we can see there are two users in here one starting with pg


28080
09:39:26,080 --> 09:39:31,192
which is this pixelity and then there's a 9v which is the other user okay


28081
09:39:31,192 --> 09:39:34,640
let's go to our database and see how many nodes we have and we can see we


28082
09:39:34,640 --> 09:39:36,960
have four nodes 9v


28083
09:39:36,960 --> 09:39:41,040
9v which is for default.user and then we have two


28084
09:39:41,040 --> 09:39:46,552
um documents created by the pixelity email which start with the


28085
09:39:46,552 --> 09:39:52,552
user id of pg as you can see in here and they they have full access to their own


28086
09:39:52,552 --> 09:39:57,120
documents so now this user you can actually go and delete this document for


28087
09:39:57,120 --> 09:40:01,512
instance another first note so he can go and say okay i want to delete this note


28088
09:40:01,512 --> 09:40:04,552
so boom and you can see it just immediately got


28089
09:40:04,552 --> 09:40:09,512
deleted from firebase as well so they have full access to their own notes


28090
09:40:09,512 --> 09:40:14,000
but they have absolutely no access to anybody else's notes alright so that's


28091
09:40:14,000 --> 09:40:18,720
working fantastically if that's even a word fantastically


28092
09:40:18,720 --> 09:40:22,800
so the next thing we need to do now that we fix this is to go ahead and update


28093
09:40:22,800 --> 09:40:27,760
the build number in our pop spec yaml file so now i'll show you this let's go


28094
09:40:27,760 --> 09:40:31,680
to visual studio code to our code right here and then say pop spec


28095
09:40:31,680 --> 09:40:35,360
um camel and you'll see on top of this file


28096
09:40:35,360 --> 09:40:38,720
somewhere around here we have this version at the moment is one zero zero


28097
09:40:38,720 --> 09:40:43,680
plus one but what we want to do in here is just is to say it's one one zero plus


28098
09:40:43,680 --> 09:40:48,720
one so we're updating our build number in here as well okay


28099
09:40:48,720 --> 09:40:54,720
so after doing that since it's such a big change you could perhaps look at


28100
09:40:54,720 --> 09:41:00,000
your terminal and see and do a git status and you can see by updating that


28101
09:41:00,000 --> 09:41:05,040
build number in here um it didn't immediately update the build


28102
09:41:05,040 --> 09:41:09,192
number for our application because had it done that it should have also been


28103
09:41:09,192 --> 09:41:14,080
updated for our ios application in the info plist file so that unfortunately


28104
09:41:14,080 --> 09:41:18,400
wasn't updated and because of this it's probably a good idea to issue flutter


28105
09:41:18,400 --> 09:41:22,552
clean so i'm going to bring the code like that let's just say flutter


28106
09:41:22,552 --> 09:41:25,832
clean okay


28107
09:41:26,400 --> 09:41:30,872
that's gonna do its work and let's say flutter


28108
09:41:30,872 --> 09:41:33,592
pop get


28109
09:41:34,872 --> 09:41:39,160
that and


28110
09:41:39,360 --> 09:41:42,720
all right that's doing is we're going to say git status let's have a look at our


28111
09:41:42,720 --> 09:41:48,480
status and there's still nothing changed so let's just say flutter run ios


28112
09:41:49,680 --> 09:41:53,592
and see if that's gonna listen okay flutter run because that's our default


28113
09:41:53,592 --> 09:41:58,480
target at the moment is an ios simulator so maybe flutter rom will just accept


28114
09:41:58,480 --> 09:42:02,552
multiple devices found all right


28115
09:42:02,552 --> 09:42:06,832
show us the list of devices please


28116
09:42:08,480 --> 09:42:12,640
perhaps it's having oh now it found it please


28117
09:42:12,640 --> 09:42:17,832
choose one okay i want to choose the iphone 13 pro so i'm gonna choose um


28118
09:42:17,832 --> 09:42:23,440
iphone 13 pro number two in here okay so now it's gonna build the project with


28119
09:42:23,440 --> 09:42:26,232
xcode build and in my experience these days


28120
09:42:26,232 --> 09:42:30,720
xcode build has been it's just horribly slow so


28121
09:42:30,720 --> 09:42:35,680
i'm basically gonna stay quiet now let it do its work and when it's done we


28122
09:42:35,680 --> 09:42:41,440
will continue with the video all right as i suspected this process


28123
09:42:41,440 --> 09:42:45,832
actually took a very long time and i think we could actually see in here that


28124
09:42:45,832 --> 09:42:50,720
the xcode build took 164 seconds


28125
09:42:50,720 --> 09:42:55,272
it is well i'm not going to go into that it's a long time um so let's have a look


28126
09:42:55,272 --> 09:42:59,360
now if the version was actually updated correctly so i'm going to go another


28127
09:42:59,360 --> 09:43:04,320
into another shell in here and let's say git status and i still don't see any


28128
09:43:04,320 --> 09:43:08,160
info plist files have been getting changed on the ios side so i'm just


28129
09:43:08,160 --> 09:43:12,872
gonna be curious here and then go to the ios file in here and have a look at the


28130
09:43:12,872 --> 09:43:16,960
xcode workspace and let's have a look at the version in


28131
09:43:16,960 --> 09:43:20,872
here well the version does seem to have been updated so it's 1 1 0 that's


28132
09:43:20,872 --> 09:43:26,000
exactly what we specified in our pop spec yaml so that's you making sure that


28133
09:43:26,000 --> 09:43:29,592
this file is updated and if you don't have xcode so if you're for instance


28134
09:43:29,592 --> 09:43:32,160
running on linux


28135
09:43:32,160 --> 09:43:35,592
ubuntu or something and you want to still check whether the version number


28136
09:43:35,592 --> 09:43:39,592
was updated for the ios application you can always do that by opening up this


28137
09:43:39,592 --> 09:43:44,960
file info plist inside ios runner and then you can have i believe you


28138
09:43:44,960 --> 09:43:49,120
could have a look at your flutter build number in here and


28139
09:43:49,120 --> 09:43:53,592
let's see if flutter build number is set somewhere


28140
09:43:53,592 --> 09:43:57,192
that one that one i don't actually see the flutter build


28141
09:43:57,192 --> 09:44:01,680
number being set anywhere so if we search for one one zero


28142
09:44:01,680 --> 09:44:05,360
actually let's search for one one zero in the entire application and the only


28143
09:44:05,360 --> 09:44:09,120
thing i can see in here are like some of our pop specs


28144
09:44:09,120 --> 09:44:13,040
and one one zero in here so


28145
09:44:13,040 --> 09:44:18,080
unfortunately that's not gonna work so i don't really know the magic behind how


28146
09:44:18,080 --> 09:44:22,000
the flutter team has actually injected that 110 into


28147
09:44:22,000 --> 09:44:26,400
it's probably some sort of a build variable so if you want to get into


28148
09:44:26,400 --> 09:44:29,680
details about that perhaps we could just open xcode


28149
09:44:29,680 --> 09:44:34,480
and have a look at that application let's go in here into build settings and


28150
09:44:34,480 --> 09:44:39,832
have a look at the version um and see if there's any one one zero


28151
09:44:39,832 --> 09:44:43,512
in here flutter build name exactly so that's that's how they're injecting it


28152
09:44:43,512 --> 09:44:47,760
they have a user defined variable called slots are built and flutter build the


28153
09:44:47,760 --> 09:44:51,760
name is then being injected for our info p list so


28154
09:44:51,760 --> 09:44:56,000
if you go here you can see oh this is flutter build number so yeah but anyway


28155
09:44:56,000 --> 09:45:00,000
it's this this must be a variable that the flutter team has injected into the


28156
09:45:00,000 --> 09:45:05,040
xcode build somehow all right but bringing up xcode could confirm that


28157
09:45:05,040 --> 09:45:09,680
the version number is set to 110 correctly so that's all we needed to do


28158
09:45:09,680 --> 09:45:13,360
then the next step for this chapter for us is to


28159
09:45:13,360 --> 09:45:16,552
make a build and send it to apple this time so


28160
09:45:16,552 --> 09:45:19,592
not this time we did it the previous time as well we sent it to apple so what


28161
09:45:19,592 --> 09:45:23,592
i'm going to do is i need to bring up xcode again i shouldn't have closed it


28162
09:45:23,592 --> 09:45:28,320
maybe let's go in here and while we're in there we could just go and say we're


28163
09:45:28,320 --> 09:45:32,872
building for any ios device and then i'm just going to say product archive as


28164
09:45:32,872 --> 09:45:35,512
we've done in the previous chapters as well


28165
09:45:35,512 --> 09:45:38,720
so let it do its work


28166
09:45:38,960 --> 09:45:44,552
okay now our build has been um created by xcode and in here it's very important


28167
09:45:44,552 --> 09:45:47,360
that you actually check that the version number in here


28168
09:45:47,360 --> 09:45:51,192
corresponds to the version number that you've created in app store connect and


28169
09:45:51,192 --> 09:45:55,192
just a reminder in app store connect if you go back there you can see that the


28170
09:45:55,192 --> 09:45:58,480
version that we prepared is 110 and that's why i said in the beginning of


28171
09:45:58,480 --> 09:46:02,080
this chapter it's actually important for you to follow the same versioning that


28172
09:46:02,080 --> 09:46:06,160
i'm doing in in the current chapter so let's say 110 and i'm going to say


28173
09:46:06,160 --> 09:46:10,720
distribute to apple or distribute app upload


28174
09:46:10,720 --> 09:46:13,760
and let's go in here


28175
09:46:16,080 --> 09:46:20,480
analyzing app version fetching app store configuration


28176
09:46:20,480 --> 09:46:24,552
and i'm going to uncheck manage version and build number because i want flutter


28177
09:46:24,552 --> 09:46:29,592
to be able to do that and then i'm going to choose the production profile that


28178
09:46:29,592 --> 09:46:35,040
we've created for application press the next button in here as well


28179
09:46:35,360 --> 09:46:39,680
and then depending on your network connection and your and different


28180
09:46:39,680 --> 09:46:42,872
configurations that you have for your network this process could actually take


28181
09:46:42,872 --> 09:46:47,592
a very very long time previously when i tried this even even


28182
09:46:47,592 --> 09:46:50,960
though i'm on a fiber optic net network connection


28183
09:46:50,960 --> 09:46:55,512
with a thousand upload a thousand download it still took about 30 minutes


28184
09:46:55,512 --> 09:46:59,592
for a simple application to be sent to apple and it was literally stuck in this


28185
09:46:59,592 --> 09:47:03,360
requesting app information for more than 20 minutes so


28186
09:47:03,360 --> 09:47:07,760
that's an unfortunate fact that we just have to accept and let it do its work


28187
09:47:07,760 --> 09:47:11,040
and i will see you then once it's


28188
09:47:11,040 --> 09:47:15,760
finally sent the application to apple all right so now i can see that our


28189
09:47:15,760 --> 09:47:18,960
application has been submitted to apple and i have to confess that this time it


28190
09:47:18,960 --> 09:47:22,800
took only about a minute for this process to go through so that was very


28191
09:47:22,800 --> 09:47:26,640
fast much much faster than the previous chapters we'd have to submit our


28192
09:47:26,640 --> 09:47:30,000
application which took upwards of 30 minutes for me


28193
09:47:30,000 --> 09:47:33,680
so now that it's done after you've done this you will receive an email from


28194
09:47:33,680 --> 09:47:37,512
apple that kind of looks like this if i can bring it to the screen


28195
09:47:37,512 --> 09:47:40,232
it will look like this and it will tell you that


28196
09:47:40,232 --> 09:47:45,040
the following build has completed processing only after this email has


28197
09:47:45,040 --> 09:47:48,320
been sent you can go to app store connect and


28198
09:47:48,320 --> 09:47:52,480
go and we also have to fix our missing compliance so let's just say manage and


28199
09:47:52,480 --> 09:47:54,960
say use encryption no


28200
09:47:54,960 --> 09:48:00,552
start internal testing after you've done that you need to go to the app store


28201
09:48:00,640 --> 09:48:04,400
how do you say tab and in that tab let's just select a new


28202
09:48:04,400 --> 09:48:09,680
bill and it's our 110 build and i'm going to say done in there okay after


28203
09:48:09,680 --> 09:48:13,040
you've done that you can press the save button and then you can submit your


28204
09:48:13,040 --> 09:48:17,680
application fresh to apple so that


28205
09:48:17,680 --> 09:48:23,440
then in turn concludes the submission of our app to app store and um if there's


28206
09:48:23,440 --> 09:48:26,400
any complications with this application like if apple for some reason can't


28207
09:48:26,400 --> 09:48:29,592
register a user or something they're going to send you an email telling you


28208
09:48:29,592 --> 09:48:33,040
about that so then you need to go through that process


28209
09:48:33,040 --> 09:48:37,360
and help the app store review team in order to get started with


28210
09:48:37,360 --> 09:48:40,160
your application but if you remember from the previous chapters we've


28211
09:48:40,160 --> 09:48:44,960
actually left some information in there like review information


28212
09:48:44,960 --> 09:48:50,000
and told the review team how to register for a


28213
09:48:50,000 --> 09:48:52,872
user in our application so that information should be sufficient for


28214
09:48:52,872 --> 09:48:57,592
them to understand how to use the app fantastic we're done with the origin


28215
09:48:57,592 --> 09:49:03,192
with the submission of our ios app to app store so as usual since we've now


28216
09:49:03,192 --> 09:49:07,912
changed our code let's go into visual studio code and


28217
09:49:07,912 --> 09:49:11,832
i'm going to close all these tabs because it's just extremely populated on


28218
09:49:11,832 --> 09:49:17,192
my screen get rid of the explorer and go to


28219
09:49:17,192 --> 09:49:21,680
my terminal in here and have a look at art status and i can see there's only


28220
09:49:21,680 --> 09:49:26,800
two files changed so i'm going to add them and let's commit as step 30 as you


28221
09:49:26,800 --> 09:49:30,232
can see at the bottom of the screen okay so if you look at our logs we have step


28222
09:49:30,232 --> 09:49:34,400
29 and then we have step 30 so i'm going to say git push


28223
09:49:34,400 --> 09:49:40,160
that's going to push our commit and less than a tag v so step 30 and


28224
09:49:40,160 --> 09:49:46,872
let's just say get push tags so that is done now and our tag of 30 is


28225
09:49:46,872 --> 09:49:51,440
also sent to a github what we need to do now as usual is


28226
09:49:51,440 --> 09:49:55,592
tradition where we talk about what we need to discuss in the upcoming chapters


28227
09:49:55,592 --> 09:50:00,160
and in the next chapter we're going to talk about sending our app also to


28228
09:50:00,160 --> 09:50:03,832
google play store we've done it for ios we have to do the same process for


28229
09:50:03,832 --> 09:50:06,552
google play store so get some refreshments if you want to and i'll see


28230
09:50:06,552 --> 09:50:10,160
you in the next chapter hello everyone and welcome to chapter 50 of the slotted


28231
09:50:10,160 --> 09:50:13,360
course in previous chapters we've been working quite a lot with submitting our


28232
09:50:13,360 --> 09:50:18,320
application for the ios app store using app store connect and in this chapter


28233
09:50:18,320 --> 09:50:21,360
we're going to focus on doing the same thing but for


28234
09:50:21,360 --> 09:50:25,680
google and play store so whereas you have app store and at the back of app


28235
09:50:25,680 --> 09:50:29,912
store you have the um app store connect which allows you as


28236
09:50:29,912 --> 09:50:32,872
a developer to go and interact with the your product that's going to be


28237
09:50:32,872 --> 09:50:37,040
submitted to the app store google has something similar for your product for


28238
09:50:37,040 --> 09:50:40,720
your android app in this case our flutter application to be available in


28239
09:50:40,720 --> 09:50:43,912
the google play store which is where users download your


28240
09:50:43,912 --> 09:50:50,872
applications you you as a developer will have to go to the google play console so


28241
09:50:50,872 --> 09:50:53,512
we're going to take care of that and for that we're going to create something


28242
09:50:53,512 --> 09:50:58,480
called an app bundle where whereas if you remember when we created our ios


28243
09:50:58,480 --> 09:51:01,440
application we went to xcode and archive our application and that created


28244
09:51:01,440 --> 09:51:05,680
something called an xc archive file and that was kind of like a zip file


28245
09:51:05,680 --> 09:51:09,360
and all your files were all your binaries at least all your like linked


28246
09:51:09,360 --> 09:51:15,680
libraries all your pods the application itself binary was signed with your


28247
09:51:15,680 --> 09:51:19,760
production certificate and profile an app bundle for


28248
09:51:19,760 --> 09:51:25,360
your um android devices as well is a signed bundle so it is the equivalent of


28249
09:51:25,360 --> 09:51:30,160
your um xc archive kind of and we're going to take care of that as well soon


28250
09:51:30,160 --> 09:51:34,800
in this chapter and we have a um


28251
09:51:34,800 --> 09:51:37,912
i mean there's something that i i actually prefer this but i didn't want


28252
09:51:37,912 --> 09:51:41,512
to mention it before because we were so close to actually raising our ios


28253
09:51:41,512 --> 09:51:44,800
application we have to make just some small adjustments to our code as well as


28254
09:51:44,800 --> 09:51:49,592
you'll soon see when we start for instance working with


28255
09:51:49,592 --> 09:51:53,760
taking screenshots of our android of our flutter app running on various android


28256
09:51:53,760 --> 09:51:59,592
devices and that's um a scrolling issue that we have generally on our


28257
09:51:59,592 --> 09:52:03,440
screens where we display the keyboard those screens are


28258
09:52:03,440 --> 09:52:06,800
um login view and i believe there's


28259
09:52:06,800 --> 09:52:11,360
register view and where else do we display a keyword i


28260
09:52:11,360 --> 09:52:15,360
believe we also log in register for a got password view


28261
09:52:15,360 --> 09:52:19,120
because we asked the user for her email address there as well and also


28262
09:52:19,120 --> 09:52:23,192
one year for instance um actually we don't have the problem on


28263
09:52:23,192 --> 09:52:26,480
the edit notes view so that's not a problem so


28264
09:52:26,480 --> 09:52:30,160
we have this problem in verify email view login view register view and forgot


28265
09:52:30,160 --> 09:52:33,760
password view so um


28266
09:52:33,760 --> 09:52:37,192
actually verify email view you could argue that yeah it's it's not a problem


28267
09:52:37,192 --> 09:52:39,680
but so the issue that we have at the moment


28268
09:52:39,680 --> 09:52:43,512
is that imagine that your application application is being run on a very small


28269
09:52:43,512 --> 09:52:46,160
screen and um


28270
09:52:46,160 --> 09:52:49,680
and then the user for instance has a very very small screen and then they're


28271
09:52:49,680 --> 09:52:53,760
on the login view and then we displayed the keyboard where at where for instance


28272
09:52:53,760 --> 09:52:57,680
they tap on the email field and they try to write their email and then the


28273
09:52:57,680 --> 09:53:01,912
keyboard pops up blocking like half the screen and depending on the size of the


28274
09:53:01,912 --> 09:53:05,120
screen the rest of the half that is remaining might not actually be able to


28275
09:53:05,120 --> 09:53:08,640
display the entire contents of your view


28276
09:53:08,640 --> 09:53:11,192
so this is a little problem and we have to


28277
09:53:11,192 --> 09:53:16,160
fix it but it is so simple to fix and you may then decide to say well the ios


28278
09:53:16,160 --> 09:53:20,480
application we've done already is sent to apple it's um it's already accepted


28279
09:53:20,480 --> 09:53:22,960
and i'm going to release it and you could definitely do that so it's


28280
09:53:22,960 --> 09:53:26,800
actually good practice if you want to release your is application as is just


28281
09:53:26,800 --> 09:53:30,800
go ahead and do that and then you can do a patch later and release another


28282
09:53:30,800 --> 09:53:34,960
application to fix that issue and i think the more you release


28283
09:53:34,960 --> 09:53:40,400
applications the better because then you learn the process of updating things and


28284
09:53:40,400 --> 09:53:44,832
sending release notes etc it's just good practice to do that quite


28285
09:53:44,832 --> 09:53:51,912
often so let's go ahead now and talk a little bit about the documentation for


28286
09:53:52,232 --> 09:53:55,272
creating an app bundle so i'll bring it up


28287
09:53:55,272 --> 09:53:58,552
here and it's as you can see at the bottom of


28288
09:53:58,552 --> 09:54:03,192
the screen it's in distribute console and um


28289
09:54:03,192 --> 09:54:07,120
there's a lot of documentation here that you can go and read more about it so i


28290
09:54:07,120 --> 09:54:12,400
thought just to um explain like the google play console in here a little bit


28291
09:54:12,400 --> 09:54:16,320
to you so that you can sign in here and then you can read more about all


28292
09:54:16,320 --> 09:54:21,040
these topics so i think it's just a good url for you to um


28293
09:54:21,040 --> 09:54:24,232
bookmark if you want to be able to release your application in the future


28294
09:54:24,232 --> 09:54:28,800
as well with google and play store otherwise if you're like me and you


28295
09:54:28,800 --> 09:54:32,080
sometimes just want to jump into things you could start by


28296
09:54:32,080 --> 09:54:39,272
um logging into google play console so let me bring you to the next url as you


28297
09:54:39,272 --> 09:54:45,872
can see the url is played at google.com console about so i'm just gonna say um


28298
09:54:45,872 --> 09:54:51,440
play.google.com slash console slash out


28299
09:54:51,440 --> 09:54:55,832
if i can spell and that's our google play console okay


28300
09:54:55,832 --> 09:54:59,680
and i'm just going to log in here with my


28301
09:54:59,680 --> 09:55:04,000
a user account and i have this user account here which i can log in with


28302
09:55:04,000 --> 09:55:07,912
let's see if i can log in successfully with that


28303
09:55:07,912 --> 09:55:13,040
all right and then it says choose developer again and if you haven't done


28304
09:55:13,040 --> 09:55:18,160
this before you may have to go and create a developer account first but i


28305
09:55:18,160 --> 09:55:20,320
but in the beginning of this chapter we


28306
09:55:20,320 --> 09:55:24,000
talked quite a lot about creating a developer account both for ios and


28307
09:55:24,000 --> 09:55:27,680
android so i'm assuming you've already done that but if you haven't you can go


28308
09:55:27,680 --> 09:55:31,040
and create a developer account it is free you don't have to pay for anything


28309
09:55:31,040 --> 09:55:35,192
so just go ahead and create your developer account


28310
09:55:35,192 --> 09:55:38,640
so now here i'm going to choose my developer account and just go in here


28311
09:55:38,640 --> 09:55:43,440
okay so here's my google play console as you can see in here this


28312
09:55:43,440 --> 09:55:49,360
is the console url for me at least and what we need to do in here is to go


28313
09:55:49,360 --> 09:55:55,040
ahead and create an app so let's go ahead as you can see at the


28314
09:55:55,040 --> 09:55:59,192
bottom of the screen let's go ahead and tap on create app in here and now in


28315
09:55:59,192 --> 09:56:04,080
here it's asking us for some information


28316
09:56:04,160 --> 09:56:09,512
um and also i just saw that i have a little um


28317
09:56:09,512 --> 09:56:13,832
ipo in my action so i'll bring the right caption


28318
09:56:13,832 --> 09:56:17,512
up in here and you'll see that we have to go through these steps in order to


28319
09:56:17,512 --> 09:56:22,720
create our application all right so i'm gonna go in here and let's just say my


28320
09:56:22,720 --> 09:56:25,272
awesome


28321
09:56:25,440 --> 09:56:28,320
notes the default language let's just leave it


28322
09:56:28,320 --> 09:56:32,872
as english us and and it asks you is it an app or a game then we're gonna say


28323
09:56:32,872 --> 09:56:36,320
it's an application and it's a free application


28324
09:56:36,320 --> 09:56:41,440
and and and we're going to say it it meets the developer policies and accept


28325
09:56:41,440 --> 09:56:46,832
us export laws okay and then we create the application this may take some


28326
09:56:46,832 --> 09:56:52,552
time okay so what we need to do now is to go through


28327
09:56:52,552 --> 09:56:56,320
um app access in here so i'm going to bring


28328
09:56:56,320 --> 09:57:01,120
up the caption so we need to go through let's see if


28329
09:57:01,120 --> 09:57:04,400
you can actually find the provided information about your app and as you


28330
09:57:04,400 --> 09:57:07,272
can see it's right here provide information about your app and set up


28331
09:57:07,272 --> 09:57:11,512
your store listening okay so i'm gonna have a look at that and these are the


28332
09:57:11,512 --> 09:57:14,800
things you have to go through and we're actually gonna go through this together


28333
09:57:14,800 --> 09:57:18,800
to in order to be able to create a listing for your application so it's a


28334
09:57:18,800 --> 09:57:25,360
good check checklist basically um and i have to say i mean i'm more used to


28335
09:57:25,360 --> 09:57:29,512
the app store connect interface it's a little bit like less cluttered i find


28336
09:57:29,512 --> 09:57:32,800
google play console a little bit more cluttered to be honest with you and


28337
09:57:32,800 --> 09:57:36,552
things are just there are so much in your face but once


28338
09:57:36,552 --> 09:57:40,232
you get used to it i think you'll understand the purpose and


28339
09:57:40,232 --> 09:57:44,320
and then you'll just as as long as you know where to find things so in the


28340
09:57:44,320 --> 09:57:48,640
dashboard and for your application just scroll down to set up your app provide


28341
09:57:48,640 --> 09:57:52,480
information here about your app instead of your store listing and let's go to


28342
09:57:52,480 --> 09:57:57,832
app access and set that up okay and then here is asking us okay is there


28343
09:57:57,832 --> 09:58:00,720
any restricted content that we're going to say


28344
09:58:00,720 --> 09:58:05,120
all functionalities available without special access press the save button


28345
09:58:05,120 --> 09:58:09,272
and you can see for instance i saved it and now i have to manually go back to


28346
09:58:09,272 --> 09:58:13,832
the dashboard it could have just saved it and sent me back but no it doesn't do


28347
09:58:13,832 --> 09:58:18,552
that so app access is now crossed out as you can see all right


28348
09:58:18,552 --> 09:58:22,800
let's go to the ad section so for the ads we're gonna say no my app does not


28349
09:58:22,800 --> 09:58:27,360
contain ads okay press the save button and then dashboard button


28350
09:58:27,360 --> 09:58:33,040
so that's for ads and let's go ahead and take care of


28351
09:58:33,040 --> 09:58:36,232
content rating and this is kind of like what we have to do for app store connect


28352
09:58:36,232 --> 09:58:39,680
as well in order to for instance say our application doesn't contain violence it


28353
09:58:39,680 --> 09:58:43,512
doesn't contain mature content etc so let's go to


28354
09:58:43,512 --> 09:58:47,272
content rating and say start questionnaire


28355
09:58:47,272 --> 09:58:51,192
and let's just fill in our email address so in here i'm just gonna


28356
09:58:51,192 --> 09:58:58,080
provide if i can spell support at a pixelity


28357
09:58:58,080 --> 09:59:02,000
i have some problems right now uh


28358
09:59:02,000 --> 09:59:06,640
support at pixelity ab.sc and i believe yeah that's my


28359
09:59:06,640 --> 09:59:11,512
website so um so i think that's that's the email i've


28360
09:59:11,512 --> 09:59:15,760
been using in app store connect as well so uh let me also


28361
09:59:15,760 --> 09:59:18,720
just double check that in my notes so i'm gonna bring this into a separate


28362
09:59:18,720 --> 09:59:23,192
website just i'm gonna check this in my website um


28363
09:59:23,192 --> 09:59:27,272
and i think the it is actually so i'm not using this


28364
09:59:27,272 --> 09:59:30,720
anymore so let's just pick some of the appointments and here you just have to


28365
09:59:30,720 --> 09:59:35,680
enter your own email so don't enter my email here so this is in case they need


28366
09:59:35,680 --> 09:59:38,720
as you can see if in case they need to contact you so the category of our


28367
09:59:38,720 --> 09:59:42,960
application we say all other app types because it's not a game or social or a


28368
09:59:42,960 --> 09:59:47,680
communication application so next does the app contain any rating


28369
09:59:47,680 --> 09:59:51,360
ratings relevant content downloaded as part of the app package


28370
09:59:51,360 --> 09:59:54,800
code or assets no


28371
09:59:54,800 --> 09:59:58,400
and user accountant does the app natively allow users to interact or


28372
09:59:58,400 --> 10:00:03,832
exchange content with other users through the voice communication text no


28373
10:00:03,832 --> 10:00:07,360
then let's say online content does the app feature


28374
10:00:07,360 --> 10:00:10,960
promote content that isn't part of the initial app download but can be accessed


28375
10:00:10,960 --> 10:00:15,512
from the app no promotion or sale of age restricted


28376
10:00:15,512 --> 10:00:19,760
products no miscellaneous does the app share the user's current and precise


28377
10:00:19,760 --> 10:00:24,000
physical location nope um does the app allow users to purchase


28378
10:00:24,000 --> 10:00:28,640
purchase digital goods no is the app a web browser or search engine


28379
10:00:28,640 --> 10:00:32,232
no is he a primarily a news or educational


28380
10:00:32,232 --> 10:00:37,760
product no okay so we save this and we go to the next page summary and


28381
10:00:37,760 --> 10:00:43,040
you can see it says rating of 30 in brazil all ages peggy 3


28382
10:00:43,040 --> 10:00:46,960
everyone can use this application rate it for three plus


28383
10:00:46,960 --> 10:00:49,440
not sure to be honest with you with that three plus


28384
10:00:49,440 --> 10:00:53,360
um and then we could just say


28385
10:00:53,360 --> 10:00:56,552
submit all right


28386
10:00:56,872 --> 10:00:59,512
so that part is done


28387
10:00:59,512 --> 10:01:03,760
seems like it and then we can we can just go to our dashboard


28388
10:01:03,760 --> 10:01:08,232
okay and then let's go and take out our target audience


28389
10:01:08,232 --> 10:01:16,640
and we say in here we choose 13 to 15 16 to 17 18 and over can also use


28390
10:01:16,640 --> 10:01:20,552
our application okay and this is kind of like something you may decide on your


28391
10:01:20,552 --> 10:01:24,400
own whether like you you must add a privacy policy target audience inclusion


28392
10:01:24,400 --> 10:01:28,400
or under 13 and that's why we're not like targeting anybody under 13. and to


28393
10:01:28,400 --> 10:01:31,832
basically you may say oh my app's only suitable for 18 and plus and that's


28394
10:01:31,832 --> 10:01:35,192
that's that's completely up to you and you're more than welcome to do that but


28395
10:01:35,192 --> 10:01:40,800
i think our app is suitable even for 13 or even maybe less a 13 is quite a


28396
10:01:40,800 --> 10:01:44,480
basically like the sweet spot i would say yeah because if you go lower than


28397
10:01:44,480 --> 10:01:48,800
that then you'll have to provide like your privacy policy for those specific


28398
10:01:48,800 --> 10:01:51,760
targets so we're not gonna do that


28399
10:01:51,760 --> 10:01:55,592
and then we're gonna press the next button and let's have a look in here


28400
10:01:55,592 --> 10:01:59,832
what's asking us to do appeal to children could your store listing


28401
10:01:59,832 --> 10:02:04,552
unintentionally appear to children and we say yes


28402
10:02:04,552 --> 10:02:07,832
because um we may not want this app to be


28403
10:02:07,832 --> 10:02:12,872
appearing for children but it may appear nonetheless so let's just say yes there


28404
10:02:12,872 --> 10:02:18,232
and in here you can see the target group is 13 to 18. so that's great now we


28405
10:02:18,232 --> 10:02:22,232
saved it and let's go back to our dashboard and you can see here a target


28406
10:02:22,232 --> 10:02:26,872
audience is also done


28407
10:02:27,040 --> 10:02:31,592
so let's go to the new section in here news app is our app and news app and we


28408
10:02:31,592 --> 10:02:35,272
say no all right and then we save and go back


28409
10:02:35,272 --> 10:02:38,800
and you can see that the news app stuff is done


28410
10:02:38,800 --> 10:02:44,232
so let's now have a look at this covet 19 contact application and we say um


28411
10:02:44,232 --> 10:02:49,440
my app is not a publicly available code with 19 contact tracing or status app so


28412
10:02:49,440 --> 10:02:54,320
save it and we say go back to dashboard so that part of the application process


28413
10:02:54,320 --> 10:02:58,080
is also done now we have to fill in the data safety


28414
10:02:58,080 --> 10:03:00,640
stuff so let's go through all of these and


28415
10:03:00,640 --> 10:03:04,160
and this might take some time but that's okay does your app collector share any


28416
10:03:04,160 --> 10:03:08,800
of the required user data types required does your app collect or share any of


28417
10:03:08,800 --> 10:03:12,960
the required collect required


28418
10:03:12,960 --> 10:03:18,232
user data types what do they mean by required


28419
10:03:18,232 --> 10:03:22,232
personal information yeah we will collect email addresses so yes of course


28420
10:03:22,232 --> 10:03:25,512
so let's just say yes and


28421
10:03:25,512 --> 10:03:29,592
let's remove that is all of the user data collected about your app encrypted


28422
10:03:29,592 --> 10:03:33,592
in transit yes and that's because we're using firebase and that's using https so


28423
10:03:33,592 --> 10:03:37,272
that's encrypt in transit do you provide a way for users to request that their


28424
10:03:37,272 --> 10:03:41,592
data is deleted no we don't do that and i actually believe that it will be


28425
10:03:41,592 --> 10:03:45,592
really good if you did that so if you are curious about this and if


28426
10:03:45,592 --> 10:03:49,120
you want to allow the user for instance to be able to do that you could you


28427
10:03:49,120 --> 10:03:51,832
could check that out and see how you can request


28428
10:03:51,832 --> 10:03:56,000
their data to be deleted you can create a separate view for that for instance


28429
10:03:56,000 --> 10:04:01,680
and from there you can you can basically make an api call to firebase and delete


28430
10:04:01,680 --> 10:04:05,272
this user so you could do that if you want to okay and i may actually provide


28431
10:04:05,272 --> 10:04:08,320
a chapter for that i don't know but at the moment


28432
10:04:08,320 --> 10:04:12,960
we say no data types okay and let's have a look in


28433
10:04:12,960 --> 10:04:17,760
here this may take a quite a long time so let's have a look


28434
10:04:17,760 --> 10:04:20,960
um data types you must select any user data


28435
10:04:20,960 --> 10:04:24,800
that's are collected okay we're not doing um location


28436
10:04:24,800 --> 10:04:29,760
personal information and we're collecting email


28437
10:04:29,760 --> 10:04:32,872
personal identifier that relates to an identifiable person for example an


28438
10:04:32,872 --> 10:04:37,360
account id account number or account name yeah personal identifiers yeah


28439
10:04:37,360 --> 10:04:39,440
definitely um


28440
10:04:39,440 --> 10:04:43,360
and other personal info we're not collecting so we only have a user id and


28441
10:04:43,360 --> 10:04:46,552
an email address and that's it and we're not even asking for their


28442
10:04:46,552 --> 10:04:50,160
names so financial info no health no


28443
10:04:50,160 --> 10:04:54,800
messages let's see what messages uh entails in


28444
10:04:54,800 --> 10:04:59,680
here where is it where do you go here messages


28445
10:04:59,680 --> 10:05:03,912
emails no photos and videos audio files files and


28446
10:05:03,912 --> 10:05:07,440
documents um files and docs


28447
10:05:07,440 --> 10:05:10,960
a user's files or documents or any information about a user's files or


28448
10:05:10,960 --> 10:05:15,192
documents for example file names yes because we're storing actually their


28449
10:05:15,192 --> 10:05:20,872
files their notes so app activity no contacts calendar no web browsing no


28450
10:05:20,872 --> 10:05:24,872
app info and performance no device or other identifiers no so let's just then


28451
10:05:24,872 --> 10:05:28,400
press next there and


28452
10:05:28,400 --> 10:05:33,512
not started so let's have a look at start this email


28453
10:05:33,512 --> 10:05:38,720
process in here and we say select all that apply is this data collected shared


28454
10:05:38,720 --> 10:05:44,872
or both it's only collected okay and data collected in this way must


28455
10:05:44,872 --> 10:05:49,760
still be disclosed but will not be shown to users on your store listing


28456
10:05:49,760 --> 10:05:53,832
is this data processed ephemerally process family means that


28457
10:05:53,832 --> 10:05:58,160
the data is only stored in memory and is retained for no longer than necessary so


28458
10:05:58,160 --> 10:06:01,912
no it is it is not stored only in the memory so


28459
10:06:01,912 --> 10:06:05,192
and we say is this data required for your application and in this case i


28460
10:06:05,192 --> 10:06:08,552
believe that we're talking about email address and yes this data is required so


28461
10:06:08,552 --> 10:06:13,272
i'm just going to say yes it's required why is the user data collected it's for


28462
10:06:13,272 --> 10:06:17,512
app functionality okay so um


28463
10:06:17,512 --> 10:06:21,040
use for the setup and management of user accounts actually yeah account


28464
10:06:21,040 --> 10:06:24,720
management so let's just say account management so


28465
10:06:24,720 --> 10:06:27,512
um and then press the save button so now


28466
10:06:27,512 --> 10:06:31,680
we've submitted the email address and while we're why we're using that so


28467
10:06:31,680 --> 10:06:35,120
let's go to personal identifiers now and start that process so we say we are only


28468
10:06:35,120 --> 10:06:39,440
collecting that and because it's a user id and we're not


28469
10:06:39,440 --> 10:06:43,040
processing it ephemerally i think that's how it's pronounced


28470
10:06:43,040 --> 10:06:48,872
and we say the data collection is required and we say um it is used for


28471
10:06:48,872 --> 10:06:52,640
app functionality okay because we're using the user identifier remember when


28472
10:06:52,640 --> 10:06:55,760
we store their notes so it's more for app functionality than it is for


28473
10:06:55,760 --> 10:06:59,040
registration so that's why we do that and that is


28474
10:06:59,040 --> 10:07:03,192
completed now so let's go to files and docs and have a look at this process


28475
10:07:03,192 --> 10:07:06,960
files and docs and say it is only collected but it is not


28476
10:07:06,960 --> 10:07:11,120
shared remember we are not sharing the user's data even though we added that


28477
10:07:11,120 --> 10:07:14,960
sharing sheet for the user to share their own information with someone else


28478
10:07:14,960 --> 10:07:19,680
but then that is their choice it is not something that we are doing okay


28479
10:07:19,680 --> 10:07:23,912
is it then is this data processed ephemerally then we say no and again i


28480
10:07:23,912 --> 10:07:26,320
don't know if that's the correct pronunciation


28481
10:07:26,320 --> 10:07:30,000
and then is this data required for your app and remember we're talking about


28482
10:07:30,000 --> 10:07:35,760
files and docs users can choose whether this data is collected okay


28483
10:07:35,760 --> 10:07:39,832
because it is not something that we force them to do okay


28484
10:07:39,832 --> 10:07:46,160
and why is this data collected then we say it is for


28485
10:07:46,160 --> 10:07:50,080
advertising personalization should i recommend it no account


28486
10:07:50,080 --> 10:07:55,272
management no so it is app functionality we would say and we save it and that's


28487
10:07:55,272 --> 10:07:59,272
it so after you've done that we can just go to the next screen and have a look at


28488
10:07:59,272 --> 10:08:02,320
this how it looks like you can actually read about all the information that you


28489
10:08:02,320 --> 10:08:06,000
entered in here so um and in here you can see at the bottom


28490
10:08:06,000 --> 10:08:10,400
of the screen says provide a link to your privacy policy and and i have


28491
10:08:10,400 --> 10:08:15,912
already a privacy policy so i've um i believe i have it in privacy policy text


28492
10:08:15,912 --> 10:08:21,440
so i'm gonna copy that and go to privacy policy in here actually leave


28493
10:08:21,440 --> 10:08:24,000
and discard stay um


28494
10:08:24,000 --> 10:08:28,160
so we may have to actually provide that privacy policy i haven't yet done that


28495
10:08:28,160 --> 10:08:31,912
but we will have to do that and


28496
10:08:31,912 --> 10:08:36,232
on the privacy policy page so yes we need to we need to actually do that so


28497
10:08:36,232 --> 10:08:40,800
let's go ahead to um i actually don't want let's save this as


28498
10:08:40,800 --> 10:08:44,400
draft and go here and then enter the privacy policy in


28499
10:08:44,400 --> 10:08:48,400
here and i'm just going to say https let's just make sure it's https yes and


28500
10:08:48,400 --> 10:08:52,800
save that okay then i'm going to go back to the dashboard in here where we were


28501
10:08:52,800 --> 10:08:59,592
for data safety we were at the end of this so let's go to uh next um


28502
10:08:59,592 --> 10:09:05,440
next next next at the bottom of this now we have our privacy policy so now we can


28503
10:09:05,440 --> 10:09:08,080
save this and let's see if there's anything that we have to do in order to


28504
10:09:08,080 --> 10:09:12,960
actually submit it so it doesn't seem like it so it is


28505
10:09:12,960 --> 10:09:17,040
saved successfully so if we go back to the dashboard and then have a look at


28506
10:09:17,040 --> 10:09:21,192
our data safety now we should be able to see that it is crossed out so


28507
10:09:21,192 --> 10:09:27,440
that's fantastic so um data safety is done and now we


28508
10:09:27,440 --> 10:09:32,872
have to have a look at this app category and provide contact details okay


28509
10:09:32,872 --> 10:09:37,680
so let's go in here to app category and we say it is an app and it's category


28510
10:09:37,680 --> 10:09:42,160
let's just say utilities if they're if one exists in here


28511
10:09:42,160 --> 10:09:46,960
um let's just say it is a what should we say


28512
10:09:46,960 --> 10:09:52,480
communication education events food house library blah blah medical news


28513
10:09:52,480 --> 10:09:57,272
personalization productivity perhaps okay and then tags let's just say


28514
10:09:57,272 --> 10:10:00,800
um oh this is horrendous okay


28515
10:10:00,800 --> 10:10:07,040
um let's just say a note notebook yeah let's just keep that okay


28516
10:10:07,040 --> 10:10:10,160
and you can choose more tags if you want to


28517
10:10:10,160 --> 10:10:12,960
and after that is done


28518
10:10:12,960 --> 10:10:16,640
let's see store listing contact details and email address i'm just going to say


28519
10:10:16,640 --> 10:10:20,872
support app pixelity.se phone number and i'm going


28520
10:10:20,872 --> 10:10:26,400
to enter some phone number in here okay just a fake phone number for now


28521
10:10:26,400 --> 10:10:31,360
and https pixelity.se external marketing


28522
10:10:31,360 --> 10:10:34,480
and you may choose to advertise your


28523
10:10:34,480 --> 10:10:39,040
application outside of google play if you want to and that's okay perhaps and


28524
10:10:39,040 --> 10:10:43,512
um before i save this i'm going to bring the screen to another screen and


28525
10:10:43,512 --> 10:10:47,440
actually enter my real phone number okay so i'm going to do that here let's see


28526
10:10:47,440 --> 10:10:53,760
if i can manage to do that it doesn't really seem to like the fact


28527
10:10:53,760 --> 10:10:58,160
that i dragged it to another screen now it likes it okay


28528
10:10:58,160 --> 10:11:02,872
so let me see um uh


28529
10:11:02,872 --> 10:11:07,272
it really doesn't like that i'm dragging it to my ipad so i'm gonna bring it to


28530
10:11:07,272 --> 10:11:10,480
my macintosh


28531
10:11:10,720 --> 10:11:15,272
yes and so all i'm doing here is just to enter that information so let me bring


28532
10:11:15,272 --> 10:11:18,552
it up again and then let's see if you can press the


28533
10:11:18,552 --> 10:11:22,320
save button okay so all i did is just move the screen to another


28534
10:11:22,320 --> 10:11:26,232
physical screen enter my real phone number and that was it


28535
10:11:26,232 --> 10:11:28,160
so oops


28536
10:11:28,160 --> 10:11:35,680
stay safe your changes couldn't be saved why not let me go and see if i


28537
10:11:35,680 --> 10:11:39,680
enter a valid oh i entered my phone number incorrectly so i'm just gonna


28538
10:11:39,680 --> 10:11:43,192
save it and scroll to the top of the screen


28539
10:11:43,192 --> 10:11:47,832
bring it back up and then let's go to all apps okay


28540
10:11:47,832 --> 10:11:54,320
oops i want to go back to my app here so in here we're done with the select


28541
10:11:54,320 --> 10:12:00,320
app category so that's fantastic now it's the juicy part we have to set


28542
10:12:00,320 --> 10:12:05,760
up our store listing so um this is also actually going to be quite


28543
10:12:05,760 --> 10:12:11,440
a an important part of the setup process so this may actually take some time but


28544
10:12:11,440 --> 10:12:15,912
that's okay and we're gonna take care of that in due time so now we have to look


28545
10:12:15,912 --> 10:12:19,832
at setting up our store listening and the store listening um is one of the


28546
10:12:19,832 --> 10:12:23,192
absolute core components or and the core things we have to do in order to be able


28547
10:12:23,192 --> 10:12:28,320
to release our applications so let's go to set up your store listing in here and


28548
10:12:28,320 --> 10:12:31,360
let's put a short description and say store


28549
10:12:31,360 --> 10:12:36,160
your notes securely okay and a full description with this


28550
10:12:36,160 --> 10:12:40,400
application and you can store your notes in the


28551
10:12:40,400 --> 10:12:45,680
cloud okay so and also i strongly suggest that you write some proper


28552
10:12:45,680 --> 10:12:49,760
description for these things and it is also very important if you remember that


28553
10:12:49,760 --> 10:12:54,552
we used an icon for our application and that icon we


28554
10:12:54,552 --> 10:13:01,680
brought it from stock io so if you go in here stock io and we use the sticky note


28555
10:13:01,680 --> 10:13:06,400
icon so it is important that in your store description in both ios and


28556
10:13:06,400 --> 10:13:12,232
android you just say um app icon provided by and just give


28557
10:13:12,232 --> 10:13:16,552
some attribution to that okay so it's very very important that you read these


28558
10:13:16,552 --> 10:13:20,872
things and also give attributions where attributions are due


28559
10:13:20,872 --> 10:13:25,912
so now we come to the application icon section and you can see in here that


28560
10:13:25,912 --> 10:13:29,760
says the application icon should be five twelve by five twelve and we don't have


28561
10:13:29,760 --> 10:13:33,040
that unfortunately at the moment what we have is a thousand twenty four by


28562
10:13:33,040 --> 10:13:36,960
thousand twenty four so if we go back to our downloads for instance in here


28563
10:13:36,960 --> 10:13:40,872
you'll see that we downloaded our app icons in one of the earlier chapters and


28564
10:13:40,872 --> 10:13:44,400
we have this app store image in here which i believe is thousand twenty four


28565
10:13:44,400 --> 10:13:47,592
thousand twenty four at the moment so what i'm gonna do is i'm gonna duplicate


28566
10:13:47,592 --> 10:13:51,272
this file command d on my macintosh on windows and linux you may have to do


28567
10:13:51,272 --> 10:13:56,000
something else and if you have for instance paint and paint


28568
10:13:56,000 --> 10:14:00,080
plus plus it's called paint.net or something on windows you can also resize


28569
10:14:00,080 --> 10:14:03,360
your image but all you need to do is just in your host operating system you


28570
10:14:03,360 --> 10:14:06,640
need to make sure that this image is 512512 so on the mac i'm just going to


28571
10:14:06,640 --> 10:14:09,360
click on here it open on a separate screen and then


28572
10:14:09,360 --> 10:14:13,120
i'm going to go to tools and say adjust size and i'm just going to say it is 5


28573
10:14:13,120 --> 10:14:17,440
12 5 12 okay these are the guidelines so in here i'm


28574
10:14:17,440 --> 10:14:22,552
just going to drop that file right there okay


28575
10:14:23,592 --> 10:14:28,552
okay so that's for your application icon that's 5 12 5 12.


28576
10:14:28,552 --> 10:14:32,640
now we also need a it's a required feel as you can see it is marked with an


28577
10:14:32,640 --> 10:14:36,080
asterisk in here and it's a future graphing and future graphic is something


28578
10:14:36,080 --> 10:14:40,232
that a google play store can sometimes use in for instance if your application


28579
10:14:40,232 --> 10:14:44,640
is featured on play store um and they are going to use this image in


28580
10:14:44,640 --> 10:14:49,680
order to to basically um do an advertisement for applications so


28581
10:14:49,680 --> 10:14:52,232
there are guidelines for this and it should be you


28582
10:14:52,232 --> 10:14:56,800
can see it should be 1024x500 and since we don't have that we are


28583
10:14:56,800 --> 10:15:01,192
going to use our application icon in order to create that future image so


28584
10:15:01,192 --> 10:15:04,232
what i think we should do is just to open figma perhaps


28585
10:15:04,232 --> 10:15:09,040
and after our figma document is open what we can do in here is to go and


28586
10:15:09,040 --> 10:15:14,640
create a little rectangle which was 1024x500 i believe the guidelines were


28587
10:15:14,640 --> 10:15:18,872
telling us to create it by so 1024 by 500 so i'm going to select this


28588
10:15:18,872 --> 10:15:24,320
rectangle and i say its width is 1024 by and then height is 500 and what i like


28589
10:15:24,320 --> 10:15:29,440
to do is to go my trusty color palette which is from a tokyo night


28590
10:15:29,440 --> 10:15:32,720
let's go to tokyo knight in here in github as we've seen in previous


28591
10:15:32,720 --> 10:15:36,960
chapters i'm going to go scroll down a little bit here and say that i have i


28592
10:15:36,960 --> 10:15:41,680
want the editor background color so it's 2428 3b and then i'm going to copy that


28593
10:15:41,680 --> 10:15:46,552
close the tab come here to figma and change the fill color of this layer to


28594
10:15:46,552 --> 10:15:51,120
that so we're going to use this as our background and what i'm going to do is


28595
10:15:51,120 --> 10:15:56,680
i'm going to go to our downloads folder and grab that app icon png


28596
10:15:56,680 --> 10:16:00,160
1024024 which we've downloaded in one of the previous chapters so i'm gonna bring


28597
10:16:00,160 --> 10:16:03,272
it in here then it is huge i'm gonna hold down the


28598
10:16:03,272 --> 10:16:07,120
shift key and then resize this proportionally so kind of reset it to


28599
10:16:07,120 --> 10:16:10,640
something like this okay so i'm gonna place it in the middle now i'm gonna


28600
10:16:10,640 --> 10:16:15,272
change the name of this to bg change the name of this to icon by double clicking


28601
10:16:15,272 --> 10:16:20,320
on it and then i'm gonna create a text field in here and save my awesome


28602
10:16:20,320 --> 10:16:22,720
notes and let's


28603
10:16:22,720 --> 10:16:27,272
bring these into three separate lines like that and let's also make sure that


28604
10:16:27,272 --> 10:16:32,400
the fill color of this is white also ensure as you can see like mine


28605
10:16:32,400 --> 10:16:37,760
it is right aligned then i'm gonna place it somewhere here okay in the middle as


28606
10:16:37,760 --> 10:16:42,160
well and perhaps we could even increase the size of the font so let's see what


28607
10:16:42,160 --> 10:16:47,440
we have here we have about 200 let's say 120 and it is a little bit bigger a


28608
10:16:47,440 --> 10:16:51,680
little bit bolder in your face kind of stuff so and this is our text so this is


28609
10:16:51,680 --> 10:16:55,680
our text what i'm going to do in here then is i'm going to


28610
10:16:55,680 --> 10:16:59,512
um basically take these like bg icon and


28611
10:16:59,512 --> 10:17:03,440
text and then duplicate this bg in here because this is going to be our mask i'm


28612
10:17:03,440 --> 10:17:06,800
going to grab grab it and bring it at the bottom then i'm going to right click


28613
10:17:06,800 --> 10:17:11,592
it and say use as mask and now it has its own group then i'm going to grab all


28614
10:17:11,592 --> 10:17:15,272
of these three layers and then drag them here and now you can see that that mask


28615
10:17:15,272 --> 10:17:21,040
is basically masking off this entire content so it's masking off our icon as


28616
10:17:21,040 --> 10:17:25,192
well so it looks pretty good to me it's kind of proportional it's nice so then


28617
10:17:25,192 --> 10:17:30,640
you can click on this and then in figma go to the bottom so if


28618
10:17:30,640 --> 10:17:35,832
i change the um in here so you can see better perhaps


28619
10:17:35,832 --> 10:17:41,592
then scroll so make sure your mask group is selected then go to export and then


28620
10:17:41,592 --> 10:17:46,000
we're gonna export it as one x and then that is exported now so now we have our


28621
10:17:46,000 --> 10:17:52,160
image looking like this and it is 1024x500 so we can go to uh


28622
10:17:52,160 --> 10:17:57,272
our play console google play console and right where we have to uh throw this


28623
10:17:57,272 --> 10:18:01,680
feature graphic i'm going to go to downloads and the image that we just


28624
10:18:01,680 --> 10:18:06,960
downloaded which is right here i'm gonna just drop it in there


28625
10:18:07,120 --> 10:18:10,720
so then that is working fine as well and then i'm gonna


28626
10:18:10,720 --> 10:18:15,040
save my changes and something is wrong with our changes some languages have


28627
10:18:15,040 --> 10:18:18,080
errors okay that's probably because we haven't


28628
10:18:18,080 --> 10:18:22,232
really uploaded any screenshots yet and we're gonna take care of that soon so it


28629
10:18:22,232 --> 10:18:25,592
is a little bit um strange that it doesn't let me just let


28630
10:18:25,592 --> 10:18:30,000
me save my changes as a draft i have to save this entire screen and since i


28631
10:18:30,000 --> 10:18:33,440
haven't entered some of the information in the screen which is required it's not


28632
10:18:33,440 --> 10:18:38,000
allowing me to actually save it so but we're gonna take care of that soon so um


28633
10:18:38,000 --> 10:18:41,832
what we need to do in here is to ensure that we're first running our latest


28634
10:18:41,832 --> 10:18:45,272
application on the correct phone as well so


28635
10:18:45,272 --> 10:18:49,040
let's see in here i'm going to bring our source code in here and then i'm going


28636
10:18:49,040 --> 10:18:53,272
to say select the device and then i'm going to choose my android phone all


28637
10:18:53,272 --> 10:18:57,272
right so that's that then i'm going to actually


28638
10:18:57,272 --> 10:19:01,040
grab my android phone let's see if i can do it without causing too much problem


28639
10:19:01,040 --> 10:19:04,480
here on the screen like that


28640
10:19:04,640 --> 10:19:08,800
and authenticated great


28641
10:19:08,800 --> 10:19:11,512
make sure it is connected to wi-fi as well


28642
10:19:11,512 --> 10:19:16,872
fantastic so my android phone is now set up


28643
10:19:16,872 --> 10:19:21,912
and let's then go ahead in our source code let me change some


28644
10:19:21,912 --> 10:19:25,760
screen layout in here in our source code then i'm going to go


28645
10:19:25,760 --> 10:19:34,320
to main dark file if i can spell dart file and in here in our terminal


28646
10:19:34,320 --> 10:19:39,192
i have two terminals so one i usually dedicate here to um


28647
10:19:39,192 --> 10:19:43,680
scr cpy so i'm just going to say scr cpy and that's going to bring up the android


28648
10:19:43,680 --> 10:19:47,912
phone up right there and since we've selected that we can now just say run


28649
10:19:47,912 --> 10:19:51,592
without debugging so the goal in here is to run the application on this


28650
10:19:51,592 --> 10:19:56,872
particular android phone and have sdrcpy take screenshots for us


28651
10:19:56,872 --> 10:20:02,552
as you'll soon see so there's a really good command called adb and adb is like


28652
10:20:02,552 --> 10:20:06,000
the low level and low level android debugger


28653
10:20:06,000 --> 10:20:10,960
and by using adb you can actually communicate with your


28654
10:20:10,960 --> 10:20:14,800
you know for instance your emulators android emulators and your android


28655
10:20:14,800 --> 10:20:18,080
phones as we have here so


28656
10:20:18,080 --> 10:20:23,680
if you don't have adb you will actually have to install it so if i say which adb


28657
10:20:23,680 --> 10:20:28,232
on my computer you can see that it says it's homebrew bin adb basically telling


28658
10:20:28,232 --> 10:20:31,272
you that i've installed adb using homebrew


28659
10:20:31,272 --> 10:20:36,480
if you haven't a if you don't have adb on your computer you may need to install


28660
10:20:36,480 --> 10:20:40,400
it if if what you're also doing is following along with the steps that i'm


28661
10:20:40,400 --> 10:20:44,232
providing you meaning that you're taking trying to take a screenshot with


28662
10:20:44,232 --> 10:20:48,872
from an actual device that is connected to your computer okay so i can see now


28663
10:20:48,872 --> 10:20:53,272
that our application is running in scr cpy looking like this so what we could


28664
10:20:53,272 --> 10:20:57,912
do is to issue the command as you saw so let's just go ahead and say


28665
10:20:57,912 --> 10:21:04,720
um adb exec exec out screen cap key and then we save


28666
10:21:04,720 --> 10:21:10,800
it into for instance file1.png and if i have a look in visual studio


28667
10:21:10,800 --> 10:21:15,832
code you'll soon see now there is a file stored here file1png and that is that


28668
10:21:15,832 --> 10:21:18,800
file with the screenshot of our application


28669
10:21:18,800 --> 10:21:24,160
and then we can go to another screen for instance the i forgot my password screen


28670
10:21:24,160 --> 10:21:29,120
in here and we could also send our keyboard down


28671
10:21:29,120 --> 10:21:32,640
kind of look like this and then we can issue another one


28672
10:21:32,640 --> 10:21:38,400
file to png so that's stored as well let's go to the registration screen and


28673
10:21:38,400 --> 10:21:43,040
send the keyboard down and then let's say file three png and also sending the


28674
10:21:43,040 --> 10:21:48,160
keyboard down or up or leaving it up it is it is a it is a taste thing it is


28675
10:21:48,160 --> 10:21:52,552
completely up to you how you want to do it okay so in here i'm going to go here


28676
10:21:52,552 --> 10:21:58,000
vandal mp and actually log in with a real user


28677
10:21:58,000 --> 10:22:04,232
and go to the main screen of the application i'm gonna take file for png


28678
10:22:04,232 --> 10:22:07,832
and then i'm going to go to one of my notes in here with the keyboard up


28679
10:22:07,832 --> 10:22:11,592
perhaps in this case and then say file five png okay


28680
10:22:11,592 --> 10:22:16,720
and then i'm gonna say open so i'll see all my png files in here then i'm going


28681
10:22:16,720 --> 10:22:21,760
to take those files and bring them to desktop so they're not polluting the


28682
10:22:21,760 --> 10:22:26,720
workspace here in visual studio code let's go back in here and you can see


28683
10:22:26,720 --> 10:22:31,512
that you can just drop drop two phone or tablet screenshots in there


28684
10:22:31,512 --> 10:22:34,872
so let's go ahead to my desktop folder


28685
10:22:34,872 --> 10:22:40,960
where i stored all those screenshots and just drop all those images in here okay


28686
10:22:40,960 --> 10:22:46,160
and i can see them populated here i'm gonna grab the login screen and see if


28687
10:22:46,160 --> 10:22:48,872
it can actually bring it first and unfortunately here it's not allowing me


28688
10:22:48,872 --> 10:22:53,120
to drop things at the right order so unfortunately i have to delete them and


28689
10:22:53,120 --> 10:22:57,832
like drop them at the right order so file one first


28690
10:22:58,000 --> 10:23:02,400
and then i have to upload file too so it is a little bit um strange that it


28691
10:23:02,400 --> 10:23:06,552
doesn't let me re rearrange these images


28692
10:23:06,552 --> 10:23:11,440
but perhaps there is a functionality for that that i don't know about


28693
10:23:11,440 --> 10:23:17,192
so let's then say file four and then we have to upload file five as


28694
10:23:17,192 --> 10:23:21,360
well okay so that's there as well


28695
10:23:21,360 --> 10:23:23,272
um okay


28696
10:23:23,272 --> 10:23:27,592
so that's that then what we need to take care of now is to create a five inch


28697
10:23:27,592 --> 10:23:32,480
tablet and since i don't have a five inch tablet here sitting around as a


28698
10:23:32,480 --> 10:23:38,000
physical device then we have to go and create one so if we look at um here


28699
10:23:38,000 --> 10:23:42,400
visual studio code and go to flutter select device you'll see that there are


28700
10:23:42,400 --> 10:23:45,912
various um basic um


28701
10:23:45,912 --> 10:23:50,320
tablets that i've created with my device manager with


28702
10:23:50,320 --> 10:23:55,040
android studio so if you have android studio you can always open it and


28703
10:23:55,040 --> 10:23:58,160
android studio um oh


28704
10:23:58,160 --> 10:24:04,160
oh it did open it anyway so it's right here you can always go i believe into um


28705
10:24:04,160 --> 10:24:08,960
avd manager which is the virtual device manager and then create your virtual


28706
10:24:08,960 --> 10:24:13,680
device as you can see you need to create a file is this seven inch and a 10.1


28707
10:24:13,680 --> 10:24:18,000
inch tablet because we're going to take screenshots with these so what i'm going


28708
10:24:18,000 --> 10:24:22,960
to do actually is to launch both of these tablets so that they're ready to


28709
10:24:22,960 --> 10:24:28,552
go when we need them so that's the first tablet and i'm actually going to


28710
10:24:28,552 --> 10:24:33,680
turn it around so it is in the portrait mode so that's that one and then i'm


28711
10:24:33,680 --> 10:24:38,872
also going to ask avd manager here to run a second tablet


28712
10:24:38,872 --> 10:24:44,232
in here and that was extremely fast i saw i don't even know how it did that


28713
10:24:44,232 --> 10:24:49,040
how could it run this tablet so fast a little bit scary to be honest so


28714
10:24:49,040 --> 10:24:53,832
now that's sitting there um let's see if it's gonna do its work


28715
10:24:53,832 --> 10:24:58,320
correctly though i can see the seven inch tablet is not doing so well let's


28716
10:24:58,320 --> 10:25:03,760
see if i can close it and i'm gonna say yes close so perhaps i should have i'm


28717
10:25:03,760 --> 10:25:08,160
going to shut this one down and don't know if we're going to


28718
10:25:08,160 --> 10:25:13,912
actually be better off first running the 7-inch tablet and see if that is


28719
10:25:13,912 --> 10:25:16,872
successful maybe something happened in the


28720
10:25:16,872 --> 10:25:21,680
processing of the 10 inch as well as the 7 inch i don't really know


28721
10:25:21,680 --> 10:25:26,000
it is completely up to the device manager here


28722
10:25:26,000 --> 10:25:30,480
and i can see that this device isn't really doing so well so i press the


28723
10:25:30,480 --> 10:25:34,400
power button on it here and i can see now it is running so i'm going to press


28724
10:25:34,400 --> 10:25:38,552
the home button and um orientation isn't really working


28725
10:25:38,552 --> 10:25:42,552
so well here so i can see that


28726
10:25:42,552 --> 10:25:45,832
now maybe it's working a little bit better so let's just leave it at that so


28727
10:25:45,832 --> 10:25:50,400
that's the seven inch display and it is up and running then what i'm going to do


28728
10:25:50,400 --> 10:25:55,440
and the flutter daemon has terminated that's completely fine reload it


28729
10:25:55,440 --> 10:26:00,960
then what we're going to do is to say select device in here


28730
10:26:00,960 --> 10:26:04,800
flutter select the vibe and that's probably because the flutter demon


28731
10:26:04,800 --> 10:26:09,832
actually crashed on us here so i'm gonna try one more time and if it doesn't work


28732
10:26:09,832 --> 10:26:12,960
then i'm going to quit visual studio code so


28733
10:26:12,960 --> 10:26:17,272
let me start visual studio code and fresh


28734
10:26:17,272 --> 10:26:20,552
okay now that visual studio started fresh let's just try again and say


28735
10:26:20,552 --> 10:26:24,400
flutter select device and this time i'm going to choose a 7-inch


28736
10:26:24,400 --> 10:26:29,592
android tablet then i'm going to say run without debugging so let's see if we're


28737
10:26:29,592 --> 10:26:33,512
going to have any success running this application in this tablet


28738
10:26:33,512 --> 10:26:38,320
and if gradle build is working well for us today then it's


28739
10:26:38,320 --> 10:26:42,640
going to allow us to do lse performing stream install failed to install


28740
10:26:42,640 --> 10:26:47,760
launching application and sdk g phone 64 rm64 so there could be some problem with


28741
10:26:47,760 --> 10:26:51,680
this android tablet in here so i'm going to close that


28742
10:26:51,680 --> 10:26:57,440
and i'm going to go back to android studio if i can't find it somewhere here


28743
10:26:57,440 --> 10:27:00,400
let's see android


28744
10:27:00,480 --> 10:27:05,120
studio okay it's running now


28745
10:27:05,120 --> 10:27:09,680
and let's go in here then i'm going to go to avd manager


28746
10:27:09,680 --> 10:27:15,360
and let's have a look if we can close these and kill these two tablets


28747
10:27:15,360 --> 10:27:20,080
completely like that like that and while i'm at it i'm also going to


28748
10:27:20,080 --> 10:27:23,272
kill this one so i don't have any use for that so i'm going to create a new


28749
10:27:23,272 --> 10:27:29,832
virtual device then i'm going to say excuse me a tablet that is nexus 7 and 7


28750
10:27:29,832 --> 10:27:33,120
inch display something like this


28751
10:27:33,120 --> 10:27:38,320
that is fine and it's thousand 200 by nineteen twenty so what is required here


28752
10:27:38,320 --> 10:27:40,720
from us it says uh


28753
10:27:40,720 --> 10:27:45,040
seven inch tablet screenshots okay that's fantastic so it doesn't have


28754
10:27:45,040 --> 10:27:49,832
specific size requirements and then i'm gonna press next on s


28755
10:27:49,832 --> 10:27:54,080
is absolutely fine that is fine as well on portrait and


28756
10:27:54,080 --> 10:27:57,680
then i'm going to say finish then let's see if he can run this


28757
10:27:57,680 --> 10:28:01,360
emulator on this computer


28758
10:28:01,440 --> 10:28:04,872
and if everything goes fine we're going to see the welcome screen here i can see


28759
10:28:04,872 --> 10:28:08,800
google's logo so that's a great sign always and i'm going to keep the screen


28760
10:28:08,800 --> 10:28:13,040
here just in case and while that is doing its work we're


28761
10:28:13,040 --> 10:28:17,360
going to go back to flutter and i can see the emulator is up


28762
10:28:17,360 --> 10:28:21,760
now and i'm going to say select device and i'm going to choose it here let's


28763
10:28:21,760 --> 10:28:26,160
then say run run without debugging and see hopefully this time we have better


28764
10:28:26,160 --> 10:28:31,832
luck in running that application in the given emulator so let's see


28765
10:28:31,832 --> 10:28:36,872
wow that went really fast actually it went surprisingly fast so now it's


28766
10:28:36,872 --> 10:28:40,640
running in there and i can see our application running in the emulator so


28767
10:28:40,640 --> 10:28:46,160
what we need to do in here is to actually take some screenshots so um


28768
10:28:46,160 --> 10:28:50,400
when we need all you see here actually we all have to provide 7-inch tablet


28769
10:28:50,400 --> 10:28:54,960
screenshots and we also have to fix the 10-inch tablet screenshot but what i


28770
10:28:54,960 --> 10:28:58,960
want to mention is depending on the size of the screen at


28771
10:28:58,960 --> 10:29:02,640
the moment you can see everything is working fine there's not a problem you


28772
10:29:02,640 --> 10:29:06,232
can go to register screen i also forgot my password and all of these are working


28773
10:29:06,232 --> 10:29:11,120
quite fine however we have a scrolling problem


28774
10:29:11,120 --> 10:29:14,800
and i can see in here that the seven inch display i've mentioned at the


28775
10:29:14,800 --> 10:29:18,552
bottom of the screen that the seven inch display could actually block the view


28776
10:29:18,552 --> 10:29:23,760
and that could be for instance because um now in in this case is not actually


28777
10:29:23,760 --> 10:29:27,192
blocking the view but if you had a smaller screen it could block the view


28778
10:29:27,192 --> 10:29:31,272
in that this screen as you can see is not scrollable so if you had a smaller


28779
10:29:31,272 --> 10:29:36,480
screen then this keyboard could pop on top of the content that you have in here


28780
10:29:36,480 --> 10:29:40,232
blocking the content so what we need to do before we start taking some


28781
10:29:40,232 --> 10:29:44,720
screenshots from our android um tablet let's go and fix these things up


28782
10:29:44,720 --> 10:29:48,640
let's first go to our verify email view in our application oops i press the


28783
10:29:48,640 --> 10:29:52,800
launch button again by mistake sorry about that i'm going to stop this


28784
10:29:52,800 --> 10:29:59,272
let's go to and verify email view and you'll see in the code that the verify


28785
10:29:59,272 --> 10:30:02,960
email view state at the moment's return is scaffold and it has a column in order


28786
10:30:02,960 --> 10:30:06,080
for this column to be vertically scrollable all you have to do is just


28787
10:30:06,080 --> 10:30:10,552
wrap it with a widget and just say single child


28788
10:30:10,552 --> 10:30:14,720
world view as the notes indicate at the bottom of the screen okay so that's the


28789
10:30:14,720 --> 10:30:20,400
scrolling down for that let's now go to the login view so login view and wrap


28790
10:30:20,400 --> 10:30:26,000
the entire content in here in this column and let's say wrap it with


28791
10:30:26,000 --> 10:30:30,232
a widget okay and i'm going to say single child


28792
10:30:30,232 --> 10:30:35,832
scroll view just like that okay and i changed the screen layout a little


28793
10:30:35,832 --> 10:30:40,800
bit so you see the code better let's then go to our register view as well so


28794
10:30:40,800 --> 10:30:46,000
register view and on top of the screen we have the scaffold and a column so


28795
10:30:46,000 --> 10:30:50,800
let's also in this column say wrap it with a widget of single child scroll


28796
10:30:50,800 --> 10:30:56,800
view alright and last but not least we're gonna go to our forgot password


28797
10:30:56,800 --> 10:31:00,232
view and have a look at how we're creating the screen we have a scaffold


28798
10:31:00,232 --> 10:31:04,232
padding column just like a standard we've done in other places as well wrap


28799
10:31:04,232 --> 10:31:10,080
with widget in a single child scroll view all right so that's that now


28800
10:31:10,080 --> 10:31:13,120
that we've done that we're actually ready to launch this application again


28801
10:31:13,120 --> 10:31:17,360
so select device to nexus and then i'm going to say run without debugging all


28802
10:31:17,360 --> 10:31:22,872
right so what we need to do now is to use adb again the low level debugger for


28803
10:31:22,872 --> 10:31:27,512
android but this time we want to take screenshots of an emulator as you saw in


28804
10:31:27,512 --> 10:31:30,320
the previous uh section when we talked about taking


28805
10:31:30,320 --> 10:31:36,080
screenshots of an actual android phone running in scr cpy we had to use adb as


28806
10:31:36,080 --> 10:31:40,800
well but we didn't have to tell it that it is an emulator as you can see at the


28807
10:31:40,800 --> 10:31:47,040
bottom of the screen now if you specify an e flag to adb then that indicates the


28808
10:31:47,040 --> 10:31:51,592
adb that you want to take a screenshot of an emulator okay so


28809
10:31:51,592 --> 10:31:56,000
here's that device running excuse me our application


28810
10:31:56,000 --> 10:32:00,960
and what we need to do now is to go to command line and let me just do some


28811
10:32:00,960 --> 10:32:05,272
reshuffling on the screen and this is our


28812
10:32:05,272 --> 10:32:11,912
scrcpy and i'm gonna just do some screen shuffling here so get rid of this


28813
10:32:11,912 --> 10:32:15,592
let's go to terminal okay so


28814
10:32:15,592 --> 10:32:19,512
let's issue the command as you can see at the bottom of the screen so


28815
10:32:19,512 --> 10:32:24,552
i'm gonna do like this and uh like that so


28816
10:32:24,552 --> 10:32:31,040
adb exit out but before that i'm just gonna say dash e and screen cap


28817
10:32:31,040 --> 10:32:36,552
e and then let's say file one png all right so


28818
10:32:36,552 --> 10:32:40,400
and if i now go to the project structure i can see there is a file called file


28819
10:32:40,400 --> 10:32:45,832
one png and it is a screenshot from our emulator okay so i'm gonna re


28820
10:32:45,832 --> 10:32:51,040
do the same thing i'm gonna go to forgot my password screen and um let's get up


28821
10:32:51,040 --> 10:32:54,400
and get rid of the keyboard in here and let's remove that space that i just


28822
10:32:54,400 --> 10:32:59,040
entered and then take the second screenshot as file to png


28823
10:32:59,040 --> 10:33:03,360
and then let's go to the login page and the register page get rid of this


28824
10:33:03,360 --> 10:33:08,320
keyboard file free png okay so now that we have


28825
10:33:08,320 --> 10:33:12,720
that oops i'm going to i press the back button i'm going to


28826
10:33:12,720 --> 10:33:18,232
log into our application with my email address and our


28827
10:33:18,232 --> 10:33:22,000
horrible password of foo barb ads now we're in the application let's take a


28828
10:33:22,000 --> 10:33:28,160
fourth screenshot called file for png and in here while this is up with the


28829
10:33:28,160 --> 10:33:31,512
keyboard perhaps as well let's see


28830
10:33:31,512 --> 10:33:37,512
and then take screen shot 5 or file 5 png so now we have 5 screenshots from


28831
10:33:37,512 --> 10:33:40,720
our 7 inch display as well let's


28832
10:33:40,720 --> 10:33:45,512
excuse me let's go and collect those screenshots file one two five and then


28833
10:33:45,512 --> 10:33:50,400
i'm gonna delete the ones on desktop and just cut and paste the ones from


28834
10:33:50,400 --> 10:33:54,800
our application then let's go to um


28835
10:33:54,800 --> 10:33:59,440
our google play console in here in the seven inch display i'm gonna drop these


28836
10:33:59,440 --> 10:34:04,160
one by one so drop the file one in here


28837
10:34:04,160 --> 10:34:08,640
and then let's drop file two right after that and then we can say file three four


28838
10:34:08,640 --> 10:34:13,512
and five so i uh so that you know how um i'm


28839
10:34:13,512 --> 10:34:18,000
thinking about the ordering of the screenshots okay


28840
10:34:18,000 --> 10:34:23,120
so that's file four and then we have file five right there and what we need


28841
10:34:23,120 --> 10:34:27,440
to do is we need to basically do the same thing for as


28842
10:34:27,440 --> 10:34:32,552
a 10 inch display as you can see here it says 10 inch tablet screenshot so let's


28843
10:34:32,552 --> 10:34:36,480
go again now we can close this emulator that is


28844
10:34:36,480 --> 10:34:41,760
right there then we can go back to android studio so if i can find android


28845
10:34:41,760 --> 10:34:46,320
studio here okay let's go to avd manager and in here


28846
10:34:46,320 --> 10:34:49,360
we're going to create a new virtual device in this case it's going gonna say


28847
10:34:49,360 --> 10:34:54,320
tablet and in a nexus 10 is a 10 inch display i'm going to press


28848
10:34:54,320 --> 10:35:00,640
next and then sdk s that's fine as well and just run it ooh landscape not sure


28849
10:35:00,640 --> 10:35:04,480
about that but that's that may be fine but you know


28850
10:35:04,480 --> 10:35:07,832
what i'm actually going to delete it and create a new one because we had some


28851
10:35:07,832 --> 10:35:13,040
problem before with the landscape mode so i'm going to say nexus 10 again next


28852
10:35:13,040 --> 10:35:17,512
next portrait and then finish okay so hopefully this starts it in the portrait


28853
10:35:17,512 --> 10:35:22,000
mode so then i'm gonna press the play button right there and unfortunately it


28854
10:35:22,000 --> 10:35:25,512
started in the landscape mode but that's okay hopefully we're gonna be able to


28855
10:35:25,512 --> 10:35:29,832
rotate it around and i can see now it is running


28856
10:35:29,832 --> 10:35:33,832
hopefully uh so like that


28857
10:35:33,912 --> 10:35:39,760
and we should see now the home screen let's see if we can rotate this uh


28858
10:35:39,760 --> 10:35:44,320
and unfortunately it doesn't actually rotate so i want to see if there's any


28859
10:35:44,320 --> 10:35:48,552
properties in here that allows us to change the display


28860
10:35:48,552 --> 10:35:55,512
from landscape to portrait so snapshots recording settings enabled


28861
10:35:55,512 --> 10:35:59,512
light proxy advanced show window frame


28862
10:35:59,512 --> 10:36:04,320
nope nothing in there that allows us to change this device from


28863
10:36:04,320 --> 10:36:08,800
um directional pad no it doesn't change the


28864
10:36:08,800 --> 10:36:12,720
display from landscape to portrait and i am now


28865
10:36:12,720 --> 10:36:17,680
basically trying anything i can so even if i go to chrome in here for instance


28866
10:36:17,680 --> 10:36:22,640
and say no thanks and then if i rotate this i can see that it's unfortunately


28867
10:36:22,640 --> 10:36:27,592
not rotating the actual application so we might then have to


28868
10:36:27,592 --> 10:36:33,360
take a screenshot in landscape mode so let's see if if you can actually do that


28869
10:36:33,360 --> 10:36:36,640
so if there's anybody out there who knows how to fix this issue i'd be


28870
10:36:36,640 --> 10:36:40,960
grateful to also know because at the moment even doing the


28871
10:36:40,960 --> 10:36:44,232
command right and left it's not listening to my commands it's not


28872
10:36:44,232 --> 10:36:48,320
basically rotating so how about this icon


28873
10:36:48,320 --> 10:36:52,800
um well that didn't help so so much to be honest with you so


28874
10:36:52,800 --> 10:36:57,040
um it didn't really i mean i can go here


28875
10:36:57,040 --> 10:37:01,440
and then here oh now it's portrait okay i did something so i just clicked on a


28876
10:37:01,440 --> 10:37:05,272
little icon on the top left after rotating so it rotated to portrait so


28877
10:37:05,272 --> 10:37:09,040
that was just pure luck let's go to visual studio code and say


28878
10:37:09,040 --> 10:37:13,040
command shift p on a macintosh or ctrl shift p in linux and windows and save


28879
10:37:13,040 --> 10:37:16,800
flash or select device choose our 10 inch display


28880
10:37:16,800 --> 10:37:20,400
then i'm going to say run run without debugging and if


28881
10:37:20,400 --> 10:37:24,720
everything is working correctly and gradle's working in our favor then then


28882
10:37:24,720 --> 10:37:29,192
the gradle task is going to go by really fast and i'm very grateful actually for


28883
10:37:29,192 --> 10:37:32,640
that to be honest so gradle is working a lot better now


28884
10:37:32,640 --> 10:37:38,080
than xcode build process so here's our application and displayed on a 10 inch


28885
10:37:38,080 --> 10:37:42,160
display and let's go ahead and start taking some screenshots so i'm going to


28886
10:37:42,160 --> 10:37:46,400
go to terminal here and then start taking screenshots of


28887
10:37:46,400 --> 10:37:51,832
file one in the login view then let's go to forgot password and say


28888
10:37:51,832 --> 10:37:55,680
file two i'm gonna get rid of the keyboard and take the screenshot without


28889
10:37:55,680 --> 10:37:59,512
the keyboard i'm gonna go here to the register view get rid of the


28890
10:37:59,512 --> 10:38:06,872
keyboard and then say file three so that's that let's not log in with a user


28891
10:38:06,872 --> 10:38:11,760
um like this and say foobar baz log in with that user oh wrong


28892
10:38:11,760 --> 10:38:16,000
credentials okay uh foo barbaz


28893
10:38:16,000 --> 10:38:19,680
login and after logging in we're going to take


28894
10:38:19,680 --> 10:38:23,192
another screenshot which is our screenshot 4 and then we're going to


28895
10:38:23,192 --> 10:38:27,912
take another screenshot with the keyboard and for our um


28896
10:38:27,912 --> 10:38:33,040
file 5. all right so that is also that then i'm going to open


28897
10:38:33,040 --> 10:38:36,872
the current folder i can see five screenshots in here go to my desktop get


28898
10:38:36,872 --> 10:38:40,872
rid of the old ones and paste the new ones in there


28899
10:38:40,872 --> 10:38:44,800
okay now that we have those we can clean and remove this


28900
10:38:44,800 --> 10:38:49,832
emulator we don't have it and i'm also going to close avd i can see it's


28901
10:38:49,832 --> 10:38:55,512
already closed so let's go back to um our play store in here


28902
10:38:55,512 --> 10:39:00,080
so and play store um console so i'm gonna upload


28903
10:39:00,080 --> 10:39:06,160
this new um png file file one then file two for the ten inch tablet so all of


28904
10:39:06,160 --> 10:39:10,080
these five screenshots are for the ten inch tablet


28905
10:39:10,080 --> 10:39:14,960
three and then we're gonna go to four here


28906
10:39:14,960 --> 10:39:19,512
and then last but not least we're gonna upload screenshot five and then right


28907
10:39:19,512 --> 10:39:22,872
after the upload is done i'm just going to delete all those files to keep my


28908
10:39:22,872 --> 10:39:26,640
desktop clean so after doing that let's just then save this and now you can see


28909
10:39:26,640 --> 10:39:31,440
it says your changes have been saved fantastic


28910
10:39:31,440 --> 10:39:37,592
so now that is done and we need to create a release app so if i


28911
10:39:37,592 --> 10:39:42,720
just bring my notes up a little bit here fantastic so


28912
10:39:42,720 --> 10:39:46,320
what we need to do we need to have a look at a little url here as you can see


28913
10:39:46,320 --> 10:39:50,800
at the bottom of the screen it's called docslatter dev deployment android it is


28914
10:39:50,800 --> 10:39:55,040
a very important document and here i strongly suggest anybody who's trying to


28915
10:39:55,040 --> 10:39:59,192
create a release application to go through this it has information for


28916
10:39:59,192 --> 10:40:05,832
windows and macintosh and linux users and these commands are absolutely um


28917
10:40:05,832 --> 10:40:09,512
full of value so you may have to google these otherwise


28918
10:40:09,512 --> 10:40:15,680
around but this document has really put all of that together in the same place


28919
10:40:15,680 --> 10:40:19,360
so as you can see in here the first thing that we need to do is to create a


28920
10:40:19,360 --> 10:40:25,040
signing key for our application and you need to follow these um


28921
10:40:25,040 --> 10:40:30,160
commands in here that have been created for you so you can see and if i bring a


28922
10:40:30,160 --> 10:40:34,080
terminal up so if i say terminal and i'll bring it up here and


28923
10:40:34,080 --> 10:40:40,080
if i go to this folder dot android on my computer like this and i already have


28924
10:40:40,080 --> 10:40:44,800
some keys as you can see in here so i have some keys already set up but in


28925
10:40:44,800 --> 10:40:47,592
order for us to actually um


28926
10:40:47,592 --> 10:40:53,912
be able to follow along with this and guide we need to go and create these


28927
10:40:53,912 --> 10:40:59,440
keys for us as well okay so what i'm going to do is i'm going to do


28928
10:40:59,440 --> 10:41:03,040
let's see if i can bring up the command for you as you can see at the bottom of


28929
10:41:03,040 --> 10:41:06,872
the screen so i'm going to actually copy that command that i provided for you at


28930
10:41:06,872 --> 10:41:11,512
the bottom of the screen okay so and i'm going to go to terminal and


28931
10:41:11,512 --> 10:41:16,800
um let's just go to desktop for instance and then i'm going to issue that command


28932
10:41:16,800 --> 10:41:20,320
exactly as you can see at the bottom of the screen so let's see what happens in


28933
10:41:20,320 --> 10:41:24,480
here now it says enter a key store password so this is a password that you


28934
10:41:24,480 --> 10:41:28,640
need to then provide inside a property file i'll tell you soon about it so


28935
10:41:28,640 --> 10:41:32,320
remember this password up until this point for this course we've been using


28936
10:41:32,320 --> 10:41:36,320
foobar baz as a password is an absolutely horrible password so please


28937
10:41:36,320 --> 10:41:40,000
don't use that but since we've used it consistently in this course and since


28938
10:41:40,000 --> 10:41:44,320
the password in this sense has no meaning for this course i'm just going


28939
10:41:44,320 --> 10:41:48,640
to say foo bar pass but please don't use a password as weak as that so


28940
10:41:48,640 --> 10:41:53,120
let's say foo barbaz and let's see what it said java as a


28941
10:41:53,120 --> 10:41:56,960
keystore was tampered with or password was incorrect so


28942
10:41:56,960 --> 10:42:01,912
um it this could perhaps be because i'm actually trying to create an upload key


28943
10:42:01,912 --> 10:42:06,720
store like this and i already have one from before so what i'm going to do is


28944
10:42:06,720 --> 10:42:10,960
to actually delete this file so i'm going to say remove that file okay


28945
10:42:10,960 --> 10:42:15,360
upload keystore like that and i'm going to issue this command again and i'm


28946
10:42:15,360 --> 10:42:20,872
going to say foo bar house and fubarba so if you if you've already


28947
10:42:20,872 --> 10:42:24,872
had a key store from before then you could just use it but i'm assuming that


28948
10:42:24,872 --> 10:42:30,160
you didn't have one however when i did issue this command i already had one so


28949
10:42:30,160 --> 10:42:33,760
chances are you didn't have a keystore from before you didn't you didn't have


28950
10:42:33,760 --> 10:42:37,912
to delete it but in my case i actually have to delete it first and then issue


28951
10:42:37,912 --> 10:42:41,040
the command that you can see in the caption at the bottom of the screen so


28952
10:42:41,040 --> 10:42:44,720
what is your first and last name i'm just going to save and i have andy poor


28953
10:42:44,720 --> 10:42:47,832
okay and your organization unit i'm just


28954
10:42:47,832 --> 10:42:52,480
going to say development and then name of your organization is


28955
10:42:52,480 --> 10:42:58,080
pixelity a b okay city or locality okay i can just say stockholm okay


28956
10:42:58,080 --> 10:43:03,832
and state or okay stockholm again let's see uh two letter country code i'm gonna


28957
10:43:03,832 --> 10:43:09,760
say s e and it is saying is it correct then i'm gonna press the enter button


28958
10:43:09,760 --> 10:43:13,760
uh i've already entered all of that maybe i made a mistake in here so let's


28959
10:43:13,760 --> 10:43:20,080
just say what was the question correct no do i have to type yes i'm


28960
10:43:20,080 --> 10:43:24,232
just going to say yes so you have to provide yes at the end of


28961
10:43:24,232 --> 10:43:29,832
that and then what is the same return if same as keystore password yes just enter


28962
10:43:29,832 --> 10:43:34,552
okay so now it's created a key store for us in here you can see in the


28963
10:43:34,552 --> 10:43:40,960
android folder upload keystore jks okay so that's very very important


28964
10:43:40,960 --> 10:43:44,872
now that that has been created what we need to do is to have if you had


28965
10:43:44,872 --> 10:43:48,800
followed this you can see that what we need to do now is to go to our flutter


28966
10:43:48,800 --> 10:43:52,872
project in here you see it says go to your flutter project


28967
10:43:52,872 --> 10:43:55,512
and and go to the android folder and create


28968
10:43:55,512 --> 10:44:01,832
a file called key dot properties okay so let's go ahead and create that so i'm


28969
10:44:01,832 --> 10:44:06,960
going to open visual studio code in here and then i'm going to go to cd


28970
10:44:06,960 --> 10:44:10,480
and let's see where we are at the moment we're in the


28971
10:44:10,480 --> 10:44:14,320
root folder of our project standard project i'm gonna go to the android


28972
10:44:14,320 --> 10:44:18,400
folder as it was suggested there and then i'm gonna create a new file as it


28973
10:44:18,400 --> 10:44:23,512
was called here key dot properties okay so key dot properties like this and then


28974
10:44:23,512 --> 10:44:26,960
i'm gonna paste that content that was mentioned


28975
10:44:26,960 --> 10:44:30,480
here as you can see like that


28976
10:44:30,480 --> 10:44:34,960
so maybe the entire content so i'm just gonna paste it in here okay so it says


28977
10:44:34,960 --> 10:44:40,000
password for previous step from previous step and we just said fubar bass


28978
10:44:40,000 --> 10:44:45,192
like that and the key password as well and again that is foo bar bass the key


28979
10:44:45,192 --> 10:44:49,040
alias we're going to leave it as upload and in here we're going to say the file


28980
10:44:49,040 --> 10:44:54,720
was stored in let's see if you can get the entire path for this so it's right


28981
10:44:54,720 --> 10:45:01,192
here so i'm going to copy that path path sorry and then i'm going to delete this


28982
10:45:01,192 --> 10:45:05,680
information in here and then paste it right there okay


28983
10:45:05,680 --> 10:45:10,400
so that should be good to go so i'm just gonna double check in my notes as well


28984
10:45:10,400 --> 10:45:14,960
that that is how we've done it before as well and that seems to be completely


28985
10:45:14,960 --> 10:45:18,232
fine so then after doing that with an empty line


28986
10:45:18,232 --> 10:45:23,040
at the end i'm going to close this file and save its contents right there so now


28987
10:45:23,040 --> 10:45:26,800
if you go to the main folder of your application and say git status then you


28988
10:45:26,800 --> 10:45:31,040
should see that you have only these things basically


28989
10:45:31,040 --> 10:45:35,120
committing to your project because your key properties are not going to be


28990
10:45:35,120 --> 10:45:37,760
committed okay so


28991
10:45:37,760 --> 10:45:41,120
and that's that's why i'm mentioning here that you always need to make sure


28992
10:45:41,120 --> 10:45:45,440
that that particular file is not going to be committed with your project into


28993
10:45:45,440 --> 10:45:50,232
github so you could always go to your git ignore file and actually add that


28994
10:45:50,232 --> 10:45:55,192
particular file to your ignore so let's just say veeam git ignore


28995
10:45:55,192 --> 10:46:00,040
not get ignore and in here we're just going to add a new file and say any


28996
10:46:00,040 --> 10:46:04,640
key.properties file should not be committed and then we do a good status


28997
10:46:04,640 --> 10:46:09,120
again that our get ignore is changed if you're paranoid like me you will do it


28998
10:46:09,120 --> 10:46:14,400
like i did all right so after doing that what we need to do


28999
10:46:14,400 --> 10:46:19,120
is to in fact create basically um


29000
10:46:19,120 --> 10:46:23,272
sorry we have to update our build gradle for signing and


29001
10:46:23,272 --> 10:46:30,000
i provide a link which i'm going to go to myself and let's see um


29002
10:46:30,000 --> 10:46:33,592
if i can find that link myself


29003
10:46:33,592 --> 10:46:38,320
configure signing in gradle and that is right here uh here


29004
10:46:38,320 --> 10:46:42,400
and it is telling us exactly what to do it says add the keystore information


29005
10:46:42,400 --> 10:46:46,872
from your properties file before the android block you see this android block


29006
10:46:46,872 --> 10:46:52,480
in here so what we need to do is to go to this file in our project android app


29007
10:46:52,480 --> 10:47:00,080
build gradle so visual studio code let's go to um build.gradle in android


29008
10:47:00,080 --> 10:47:04,160
app all right so we're there and what did it say that we have to find this


29009
10:47:04,160 --> 10:47:08,000
section android you see so let's find the android block right


29010
10:47:08,000 --> 10:47:13,832
there it's just one so right there then let's copy this text as it is mentioned


29011
10:47:13,832 --> 10:47:18,960
there and paste it right before android okay boom and i'm going to bring it one


29012
10:47:18,960 --> 10:47:21,592
step back as well so it is


29013
10:47:21,592 --> 10:47:24,640
um basically formatted correctly okay so


29014
10:47:24,640 --> 10:47:28,872
that's that part and it says then load the key.properties file into the


29015
10:47:28,872 --> 10:47:32,872
keystore properties object and that's what this guy is doing okay then what we


29016
10:47:32,872 --> 10:47:37,272
need to do it says find the build types block so let's go and find that you can


29017
10:47:37,272 --> 10:47:41,760
see the release we're gonna basically edit that as well so i'm gonna go to my


29018
10:47:41,760 --> 10:47:45,592
notes as well build gradle uh sorry about that just to ensure that i'm


29019
10:47:45,592 --> 10:47:50,872
following all the steps correctly and in here it says release to do add


29020
10:47:50,872 --> 10:47:54,080
your own signing config for the release build signing with the debug key for now


29021
10:47:54,080 --> 10:47:59,272
so flutter run release works and it says then replace that with this so you just


29022
10:47:59,272 --> 10:48:04,872
have to grab this information here and just completely replace this build types


29023
10:48:04,872 --> 10:48:09,512
with that thing that was provided i'm gonna fix the uh indentation a little


29024
10:48:09,512 --> 10:48:14,320
bit as well so here the key alias password are being read from the correct


29025
10:48:14,320 --> 10:48:19,760
place and then the release is signed with the release key in here


29026
10:48:19,760 --> 10:48:24,552
and that is it really so you don't have to do so much more and what we're gonna


29027
10:48:24,552 --> 10:48:27,760
do now is to as you can see at the bottom of the screen we're gonna do some


29028
10:48:27,760 --> 10:48:32,400
cleaning up of the um of the build artifact so in your project you need to


29029
10:48:32,400 --> 10:48:37,832
now go to terminal here as you can see for on my screen so i'm just going to go


29030
10:48:37,832 --> 10:48:42,800
and say flutter clean okay


29031
10:48:42,960 --> 10:48:45,760
so like that


29032
10:48:46,640 --> 10:48:51,832
all right and we're then going to say flutter


29033
10:48:51,832 --> 10:48:54,960
pub get


29034
10:48:54,960 --> 10:48:57,512
all right


29035
10:48:59,040 --> 10:49:02,640
and after doing that we're actually going to


29036
10:49:02,640 --> 10:49:07,040
um create our app bundle so after doing flutter pop get then you have to issue


29037
10:49:07,040 --> 10:49:12,320
flutter build app bundle so by issuing this command you can see


29038
10:49:12,320 --> 10:49:16,320
now it is going to start building your application with griddle using all those


29039
10:49:16,320 --> 10:49:19,680
properties that you've specified in those various files so there was a lot


29040
10:49:19,680 --> 10:49:24,000
of work that we have to do but thankfully it's been documented so well


29041
10:49:24,000 --> 10:49:28,640
that it makes the whole process so much easier had it not been for all those


29042
10:49:28,640 --> 10:49:33,192
documentation bits and pieces it would have been such a difficult process to go


29043
10:49:33,192 --> 10:49:38,400
through so let's just wait for this build gradle process to now do its work


29044
10:49:38,400 --> 10:49:41,912
and all right now you can see that the process has gone through it has created


29045
10:49:41,912 --> 10:49:46,640
our little app bundle which is this aab file


29046
10:49:46,640 --> 10:49:50,960
and what we need to do is to be able to then upload this app bundle to google


29047
10:49:50,960 --> 10:49:55,440
play store so let's go back to our play store and here i'm going to close this


29048
10:49:55,440 --> 10:50:00,080
close figma and let's now go back to our dashboard


29049
10:50:00,080 --> 10:50:04,160
in here and you can see my awesome notes and


29050
10:50:04,160 --> 10:50:08,080
let's see what we have going on in here and what we need to do


29051
10:50:08,080 --> 10:50:15,360
is to go to our production in here and and then create a new release okay so


29052
10:50:15,360 --> 10:50:19,272
press the create new new release in there and you can see now it asks you to


29053
10:50:19,272 --> 10:50:23,192
upload your app bundle so what i'm going to do is to go back to visual studio


29054
10:50:23,192 --> 10:50:29,272
code and see where this file is located so i'm going to open that folder and i


29055
10:50:29,272 --> 10:50:34,960
can see the aab here and i'm going to then drag it in here and place it there


29056
10:50:34,960 --> 10:50:37,272
okay


29057
10:50:38,320 --> 10:50:41,760
so after this upload is done it may take


29058
10:50:41,760 --> 10:50:45,192
some time i can see it's 25 megabytes although i'm at a thousand thousand line


29059
10:50:45,192 --> 10:50:49,440
um fiber optic network in here it's taking like a while to upload i don't


29060
10:50:49,440 --> 10:50:52,400
know really why but in the release name as you can see


29061
10:50:52,400 --> 10:50:56,960
it says that well this is not something um that we actually share with anybody


29062
10:50:56,960 --> 10:51:03,120
so let's just say um first we call it first version okay so and in here for


29063
10:51:03,120 --> 10:51:07,120
your release notes you will basically copy from a previous release well we


29064
10:51:07,120 --> 10:51:12,000
don't have that listen here just say um the first


29065
10:51:12,000 --> 10:51:18,320
version of our app okay and then we can save this information


29066
10:51:18,320 --> 10:51:21,592
all right so excuse me


29067
10:51:21,592 --> 10:51:27,760
so now we have that um we have the first version in there okay


29068
10:51:27,760 --> 10:51:30,000
and


29069
10:51:30,320 --> 10:51:33,592
that should be it so let's just go to the review release in here and we have


29070
10:51:33,592 --> 10:51:36,872
one error that's probably because we haven't provided the countries


29071
10:51:36,872 --> 10:51:40,720
and add at least one country or region and that's fine we're gonna we're gonna


29072
10:51:40,720 --> 10:51:46,400
add that so let's go and see overview where we have to add these


29073
10:51:46,400 --> 10:51:49,912
countries if we can't figure it out somehow


29074
10:51:49,912 --> 10:51:56,160
let's click in there android okay that is fine


29075
10:51:56,160 --> 10:52:01,192
and um we need to go to under production and


29076
10:52:01,192 --> 10:52:04,800
all the countries or release as you can see in google play a console under


29077
10:52:04,800 --> 10:52:09,040
production so i believe we're already under production so if i click under


29078
10:52:09,040 --> 10:52:13,272
production now we can see countries and regions so let's go in there and say add


29079
10:52:13,272 --> 10:52:16,320
countries and regions and i believe we could in here


29080
10:52:16,320 --> 10:52:20,400
hopefully select all countries if you


29081
10:52:20,400 --> 10:52:24,080
sell such good make sure your price for the countries well can we not sell oh


29082
10:52:24,080 --> 10:52:28,400
yeah i i saw that if i click here i can select all the


29083
10:52:28,400 --> 10:52:32,800
countries so let's do that and say add countries and regions and then press the


29084
10:52:32,800 --> 10:52:38,080
add button fantastic then we're gonna go to our releases


29085
10:52:38,080 --> 10:52:40,640
and uh here


29086
10:52:40,640 --> 10:52:44,872
we have this release so let's go to the release dashboard


29087
10:52:44,872 --> 10:52:48,400
okay that's fine and then i'm gonna press the edit release


29088
10:52:48,400 --> 10:52:51,832
and i'm gonna press the review release now that we've selected all those


29089
10:52:51,832 --> 10:52:54,640
countries we have one warning the app bundle contains native code and if


29090
10:52:54,640 --> 10:52:57,832
you've not uploaded debug symbols okay and these debug symbols is something


29091
10:52:57,832 --> 10:53:01,680
that i actually encourage you to go read about because these are gonna allow you


29092
10:53:01,680 --> 10:53:07,192
to see when whenever and if there is any crashes in your application occurring


29093
10:53:07,192 --> 10:53:09,592
anywhere where your users are using your


29094
10:53:09,592 --> 10:53:13,440
application so i would really suggest that you do this


29095
10:53:13,440 --> 10:53:16,800
and upload your d box symbols although that's something that i believe is


29096
10:53:16,800 --> 10:53:20,480
outside the scope of this course but it should be quite straightforward for you


29097
10:53:20,480 --> 10:53:24,480
to figure it out and there's link in here that you can read more about it


29098
10:53:24,480 --> 10:53:29,040
so now we can start the rollout to production and then say rollout


29099
10:53:29,040 --> 10:53:33,120
and you'll see now this is going to go in review and


29100
10:53:33,120 --> 10:53:38,160
and google uh cons like at the play console could take some while some time


29101
10:53:38,160 --> 10:53:42,080
to rel to review the first version of our application some people said it


29102
10:53:42,080 --> 10:53:46,320
takes upwards of a week and for me it's some sometimes actually taking about


29103
10:53:46,320 --> 10:53:50,320
eight nine days so depending on what you've done like that


29104
10:53:50,320 --> 10:53:53,760
your track record from before if you release any applications from before you


29105
10:53:53,760 --> 10:53:58,552
may actually be able to be placed somewhere first in the queue or maybe


29106
10:53:58,552 --> 10:54:01,680
last i don't know i don't know their processes so


29107
10:54:01,680 --> 10:54:05,040
um and that that was really in that was like the releasing of our android


29108
10:54:05,040 --> 10:54:08,480
application and we went through quite a lot even figma design in the middle of


29109
10:54:08,480 --> 10:54:12,720
everything so congratulations for going through this together with me


29110
10:54:12,720 --> 10:54:16,400
since we've changed some code let's go ahead and


29111
10:54:16,400 --> 10:54:21,040
um actually commits all our changes so i'm going to say good status


29112
10:54:21,040 --> 10:54:25,040
and make sure that your properties file the key properties file


29113
10:54:25,040 --> 10:54:28,872
is not added so let's just say git add all


29114
10:54:28,872 --> 10:54:32,960
and then i'm going to say git commit step


29115
10:54:32,960 --> 10:54:36,320
31 and if you have a look at our logs we


29116
10:54:36,320 --> 10:54:41,272
have step 30 and 31 so let's push those changes to our remote and then i'm going


29117
10:54:41,272 --> 10:54:46,480
to say get a tag also step 31 okay


29118
10:54:46,480 --> 10:54:51,040
and get push tags so


29119
10:54:51,040 --> 10:54:56,800
that was it now you've released your application for ios and android and um


29120
10:54:56,800 --> 10:55:02,960
this this could perhaps be the last thing that you will um learn about in


29121
10:55:02,960 --> 10:55:07,120
this course right now as it is if you're one of the early adopters of this course


29122
10:55:07,120 --> 10:55:12,232
but i'm planning on putting out a lot more videos that i'm going to append to


29123
10:55:12,232 --> 10:55:18,232
this course with a lot more material so stay tuned and i may actually see you in


29124
10:55:18,232 --> 10:55:22,960
the next chapter hello everyone and welcome to this chapter in the previous


29125
10:55:22,960 --> 10:55:25,760
chapters as you've been following along with this


29126
10:55:25,760 --> 10:55:29,120
course you know that we've created our application and we've also released it


29127
10:55:29,120 --> 10:55:32,800
to the app store for ios and also google's play store


29128
10:55:32,800 --> 10:55:37,120
using a play store console and now you will


29129
10:55:37,120 --> 10:55:41,272
i mean any application or any software is not something that you will do and


29130
10:55:41,272 --> 10:55:45,192
it's just finished every application has to live on and there will be you will


29131
10:55:45,192 --> 10:55:50,552
add new functionalities to it and then um you kind of have to keep it alive


29132
10:55:50,552 --> 10:55:53,592
just as i will keep this course live you'll also have to keep your


29133
10:55:53,592 --> 10:55:56,872
application alive so one of the things that you might want to add to your


29134
10:55:56,872 --> 10:56:01,272
application is localization now um


29135
10:56:01,272 --> 10:56:03,832
if you don't know i mean if you haven't done software


29136
10:56:03,832 --> 10:56:07,040
development before you may not know what localization is but


29137
10:56:07,040 --> 10:56:12,232
localization in um short form is the process of you making your application


29138
10:56:12,232 --> 10:56:16,872
more accessible to other people in different countries


29139
10:56:16,872 --> 10:56:21,360
than the one for instance that um you live in so


29140
10:56:21,360 --> 10:56:24,872
up until this point we've been creating our application with a user interface


29141
10:56:24,872 --> 10:56:29,512
that is mainly in english but you may not be even from england you


29142
10:56:29,512 --> 10:56:34,400
may not be from australia or us you may just speak the language english


29143
10:56:34,400 --> 10:56:39,120
and um for instance i live in sweden so the application that we have developed


29144
10:56:39,120 --> 10:56:43,360
right now isn't really accessible to everyone in sweden


29145
10:56:43,360 --> 10:56:47,680
even though most people in sweden speak very fluent english however it's not


29146
10:56:47,680 --> 10:56:53,192
their mother tongue so localization is um the process of making


29147
10:56:53,192 --> 10:56:56,000
your application more accessible to those people who don't speak the


29148
10:56:56,000 --> 10:56:59,192
language that you've designed for your user interface


29149
10:56:59,192 --> 10:57:04,000
and it's not just about the language and the text that


29150
10:57:04,000 --> 10:57:07,512
you're using it also entails a lot of other and also


29151
10:57:07,512 --> 10:57:10,800
includes many other things for instance how you


29152
10:57:10,800 --> 10:57:14,720
present currency and values in your application


29153
10:57:14,720 --> 10:57:18,320
now we don't have like a shopping basket or anything we don't have an e-commerce


29154
10:57:18,320 --> 10:57:22,232
application and that we've developed so far so there's nothing for the user to


29155
10:57:22,232 --> 10:57:26,000
purchase in the application but um


29156
10:57:26,000 --> 10:57:29,512
if you were developing an application where the user could for instance buy


29157
10:57:29,512 --> 10:57:32,480
things then your shopping basket would need to for


29158
10:57:32,480 --> 10:57:37,272
instance present the amount um for um like the product


29159
10:57:37,272 --> 10:57:41,360
prices in in that person's


29160
10:57:41,360 --> 10:57:46,400
currency so if you're for instance presenting the ui to a person in sweden


29161
10:57:46,400 --> 10:57:49,592
that person doesn't expect to see for instance prices in dollars they would


29162
10:57:49,592 --> 10:57:52,160
expect to see prices in the swedish crown


29163
10:57:52,160 --> 10:57:56,872
and um or if for instance you're doing this application for someone in


29164
10:57:56,872 --> 10:58:01,192
england you'd probably want to do with gbp which is the great


29165
10:58:01,192 --> 10:58:05,440
british pound i think or just pound so


29166
10:58:05,440 --> 10:58:10,080
localization is a lot more than just changing the text of our application but


29167
10:58:10,080 --> 10:58:14,480
since our application doesn't have any of those things we're not presenting any


29168
10:58:14,480 --> 10:58:17,360
dates for instance at the moment we're not presenting


29169
10:58:17,360 --> 10:58:22,400
any currencies or values like that then for us it in it basically means only


29170
10:58:22,400 --> 10:58:27,592
changing the text of our application so what we're going to do in this


29171
10:58:27,592 --> 10:58:31,680
chapter is going to localize our application


29172
10:58:31,680 --> 10:58:34,480
and we're going to do it in two languages so


29173
10:58:34,480 --> 10:58:37,592
for english which we've already done so far which is the text that we've


29174
10:58:37,592 --> 10:58:41,592
provided for the user interface of the application to this point and we're also


29175
10:58:41,592 --> 10:58:44,960
going to do it in swedish now you don't have to know swedish in order to be able


29176
10:58:44,960 --> 10:58:48,160
to go through this chapter i'm going to help you with that and there's a github


29177
10:58:48,160 --> 10:58:51,832
repository for this project that you can just copy and paste


29178
10:58:51,832 --> 10:58:56,320
the swedish text for instance you don't have to even write swedish at


29179
10:58:56,320 --> 10:58:59,360
all you don't even have to follow along writing the exact text that i'm writing


29180
10:58:59,360 --> 10:59:03,040
for instance in swedish you can just put some gibberish in there because


29181
10:59:03,040 --> 10:59:05,760
all you have to do really is just to understand the concepts of what


29182
10:59:05,760 --> 10:59:08,872
localization entails for your application how you can do it with


29183
10:59:08,872 --> 10:59:11,440
flutter and then when it comes to actually localizing your own


29184
10:59:11,440 --> 10:59:16,080
applications then you can for instance choose um bangladeshi or if you want to


29185
10:59:16,080 --> 10:59:21,440
choose any language in india for instance or um or do if in pakistan or


29186
10:59:21,440 --> 10:59:26,400
whatever um language you choose to basically go for


29187
10:59:26,400 --> 10:59:29,040
so you don't have to really know swedish that's what i'm that's what i'm saying


29188
10:59:29,040 --> 10:59:32,000
but um also as you can see at the bottom of


29189
10:59:32,000 --> 10:59:35,512
the screen localization could also be for languages that are not traditionally


29190
10:59:35,512 --> 10:59:40,160
left right like farsi or um arabic so those languages are written


29191
10:59:40,160 --> 10:59:43,440
right to left so there will need to be some special


29192
10:59:43,440 --> 10:59:47,912
considerations made into um code for you if you're trying to support


29193
10:59:47,912 --> 10:59:51,760
right to left languages like for c and um


29194
10:59:51,760 --> 10:59:55,192
so for instance a name of a person um


29195
10:59:55,192 --> 10:59:59,440
you may want to be able for instance if you're presenting a list of famous


29196
10:59:59,440 --> 11:00:02,480
people that for instance the user can read


29197
11:00:02,480 --> 11:00:06,320
about those names may not have to necessarily be


29198
11:00:06,320 --> 11:00:11,360
um presented in arabic names like they're like their spelling doesn't


29199
11:00:11,360 --> 11:00:14,160
necessarily have to be arabic it could be english but


29200
11:00:14,160 --> 11:00:17,912
for instance an age of a person like if you were saying bill gates you could


29201
11:00:17,912 --> 11:00:21,120
write the name in english even though the language of user user interface is


29202
11:00:21,120 --> 11:00:25,192
arabic but the age of that person if you're presenting then it might need to


29203
11:00:25,192 --> 11:00:30,872
be translated in like um numerical values that are under understood by


29204
11:00:30,872 --> 11:00:34,960
whoever speaks that language so um


29205
11:00:34,960 --> 11:00:37,680
what i'm trying to say is that if you're trying to support right-to-left


29206
11:00:37,680 --> 11:00:41,680
languages you may have to take into consideration those points that i just


29207
11:00:41,680 --> 11:00:44,320
mentioned but in this chapter we're not going to do that we're just going to


29208
11:00:44,320 --> 11:00:50,000
cover english and swedish and those both languages are left to right


29209
11:00:50,000 --> 11:00:53,040
now let's have a look at the documentation because the


29210
11:00:53,040 --> 11:00:58,960
documentation for localization of a fluster application is very thorough


29211
11:00:58,960 --> 11:01:03,120
and i highly suggest that after watching this chapter and learning about it


29212
11:01:03,120 --> 11:01:07,512
from my perspective i think it is very very important that you actually have a


29213
11:01:07,512 --> 11:01:11,760
look at the um the official become documentation i'll


29214
11:01:11,760 --> 11:01:18,000
try to open with a tab in here so um i'll bring it to the screen so you'll


29215
11:01:18,000 --> 11:01:21,512
see so i'll get rid of that


29216
11:01:21,512 --> 11:01:24,480
and i'll bring up the


29217
11:01:24,480 --> 11:01:28,872
screen a little bit like this sorry i have to do some rearrangement so you see


29218
11:01:28,872 --> 11:01:34,000
the screen better so as you can see here it's an official documentation for


29219
11:01:34,000 --> 11:01:38,640
accessibility localization and international internationalization


29220
11:01:38,640 --> 11:01:40,400
and um


29221
11:01:40,400 --> 11:01:44,872
you'll see some terms sometimes for instance and during internationalization


29222
11:01:44,872 --> 11:01:50,160
and localization you'll see some terms such as i 18 n


29223
11:01:50,160 --> 11:01:56,800
and sometimes you'll also see l 10 n and you'll be wondering like what are these


29224
11:01:56,800 --> 11:02:03,040
things what does it even mean l 10 n and the reason for like what i 18n


29225
11:02:03,040 --> 11:02:07,040
actually means it is internationalization


29226
11:02:07,040 --> 11:02:12,080
um and if you look at it internationalizes


29227
11:02:12,080 --> 11:02:16,400
if i write it the asian like this


29228
11:02:16,400 --> 11:02:21,440
and then if you take 1 2 3 4 5 6 7 8 9 10


29229
11:02:21,440 --> 11:02:26,960
one two three four five six seven eight so 18 total number of characters between


29230
11:02:26,960 --> 11:02:32,720
i and n so it is known then to write i 18 n just


29231
11:02:32,720 --> 11:02:37,272
to refer to internationalization and the same thing is true for


29232
11:02:37,272 --> 11:02:41,512
localization because let's let's bring up for instance visual studio code


29233
11:02:41,512 --> 11:02:45,440
maybe we can actually see in visual studio code a little bit better


29234
11:02:45,440 --> 11:02:48,960
um if i bring it up here and i


29235
11:02:48,960 --> 11:02:54,680
increase the size of the font and if i write enter


29236
11:02:54,680 --> 11:03:00,640
nationalized international international non-lineation


29237
11:03:00,640 --> 11:03:05,832
okay and then write localization so that was one two three four five six seven


29238
11:03:05,832 --> 11:03:12,000
eight nine ten one two three four five six seven eight so it's 18 total and if


29239
11:03:12,000 --> 11:03:16,960
we look at localization between l and n if you count it one two three four five


29240
11:03:16,960 --> 11:03:22,040
six seven eight nine ten characters so a lot of people refer to these things as


29241
11:03:22,040 --> 11:03:28,720
i18n and l10n i18n basically means internationalization and l10n means


29242
11:03:28,720 --> 11:03:32,720
localization so now you know the reason for that it's just it's just programmers


29243
11:03:32,720 --> 11:03:37,120
being lazy and trying to like shorten everything as much as they can so now if


29244
11:03:37,120 --> 11:03:41,360
you see these two terms then you know what they refer to


29245
11:03:41,360 --> 11:03:45,832
okay so what i was saying basically in the beginning is to please after


29246
11:03:45,832 --> 11:03:50,000
watching this video go ahead and read the official documentation because it is


29247
11:03:50,000 --> 11:03:53,680
very important it's very thorough it talks about things that we don't even


29248
11:03:53,680 --> 11:03:57,272
talk about in this chapter so um i


29249
11:03:57,272 --> 11:04:01,120
highly recommend that you read this documentation as well


29250
11:04:01,120 --> 11:04:04,720
okay so that was that and now what we need to


29251
11:04:04,720 --> 11:04:09,440
do is to basically get started by adding um internationalization localization


29252
11:04:09,440 --> 11:04:13,592
support to our flutter application so i'm gonna bring bring a visual studio


29253
11:04:13,592 --> 11:04:18,552
code in here and maybe decrease the size a little bit


29254
11:04:18,552 --> 11:04:22,160
i'm gonna change the screen layout all right so


29255
11:04:22,160 --> 11:04:25,192
um this is how we've left our application to this point so what we


29256
11:04:25,192 --> 11:04:28,160
need to do is i'm just gonna close all the tabs and then i'm going to press


29257
11:04:28,160 --> 11:04:33,040
command and command p in visual studio to open a file for instance


29258
11:04:33,040 --> 11:04:37,912
and then we're going to look at our pop spec yaml file so


29259
11:04:37,912 --> 11:04:42,800
if you go there and what we need to do is to add flutter localizations to our


29260
11:04:42,800 --> 11:04:45,760
pop special let's have a look in here and you can


29261
11:04:45,760 --> 11:04:49,120
see and you may be actually wondering why i'm


29262
11:04:49,120 --> 11:04:52,872
what am i even talking about what is flutter um


29263
11:04:52,872 --> 11:04:57,360
localizations and i didn't make that up it is basically documented right here


29264
11:04:57,360 --> 11:05:00,800
let's have a look at it as you can see it says the first thing


29265
11:05:00,800 --> 11:05:04,800
that we need to do is to go to our pop spec yaml file and add flutter


29266
11:05:04,800 --> 11:05:08,872
localizations now what this basically does for our


29267
11:05:08,872 --> 11:05:15,040
application is that it allows our application to be


29268
11:05:15,040 --> 11:05:20,232
localized and it also adds uh like auto-generated code for our application


29269
11:05:20,232 --> 11:05:23,912
as you'll soon see so it is a little bit difficult to explain


29270
11:05:23,912 --> 11:05:27,912
exactly what it does before you've seen the results so what we need to do for


29271
11:05:27,912 --> 11:05:32,800
now is just to find the dependencies section of our pop specky ammo here and


29272
11:05:32,800 --> 11:05:37,040
i found it here and what we need to do in as you can see it says you just need


29273
11:05:37,040 --> 11:05:40,872
to add flutter localizations and i'm going to do that right after flutter


29274
11:05:40,872 --> 11:05:46,232
okay and a column and then we're going to say sdk flutter


29275
11:05:46,232 --> 11:05:50,640
all right so that's that and this application at the moment is not running


29276
11:05:50,640 --> 11:05:55,512
so what i'm gonna do is just to say um select device and then i'm going to


29277
11:05:55,512 --> 11:06:00,872
use my android phone okay as you follow along with the with the course you know


29278
11:06:00,872 --> 11:06:04,800
that i prefer personally to have


29279
11:06:04,800 --> 11:06:10,720
real devices running so right now i have um scr cpy i think somewhere let's see


29280
11:06:10,720 --> 11:06:13,592
if we can bring it up actually let's go to terminal


29281
11:06:13,592 --> 11:06:17,440
scr cpy so this is


29282
11:06:17,440 --> 11:06:21,680
my android telephone and then on the side i also have an


29283
11:06:21,680 --> 11:06:26,320
actual iphone running here so basically there are two devices and that


29284
11:06:26,320 --> 11:06:30,800
have our app installed um so an iphone and an android and we're going to work


29285
11:06:30,800 --> 11:06:33,272
with both of them um


29286
11:06:33,272 --> 11:06:38,960
so um what we're gonna do is to run our application uh on the android phone for


29287
11:06:38,960 --> 11:06:42,400
instance i'm gonna say command shift p on uh when


29288
11:06:42,400 --> 11:06:47,360
on mac and then ctrl shift b on a linux machine or windows and then say select


29289
11:06:47,360 --> 11:06:51,680
device and i'm going to select this android phone then i'm going to go to


29290
11:06:51,680 --> 11:06:57,680
the main dart file and then just say run without debugging so let that do its job


29291
11:06:57,680 --> 11:07:00,960
i'm going to decrease the font a little bit because it's just humongous at the


29292
11:07:00,960 --> 11:07:07,192
moment so after doing that after adding the pop specky ammo in here we also need


29293
11:07:07,192 --> 11:07:11,592
to make sure that we follow the as you can see in here it says yeah you


29294
11:07:11,592 --> 11:07:14,960
have to do these things and we're going to take care of that


29295
11:07:14,960 --> 11:07:18,640
but what we're also going to do is to add this internationalization package to


29296
11:07:18,640 --> 11:07:22,720
our application so let me remove that screen from there make sure that our


29297
11:07:22,720 --> 11:07:26,480
android application is running and this is the state i've left the application


29298
11:07:26,480 --> 11:07:31,120
i'm logged in at the moment so what i'm going to do is just to log out


29299
11:07:31,120 --> 11:07:34,640
all right so that up until this point the only thing we did really was to add


29300
11:07:34,640 --> 11:07:40,400
flutter localization sdk true sorry sdk flutter here then what we need to do is


29301
11:07:40,400 --> 11:07:46,000
to add the internationalization package to our application okay so let's go and


29302
11:07:46,000 --> 11:07:51,120
i'm going to open a new terminal in here in visual studio code and change the


29303
11:07:51,120 --> 11:07:54,400
layout a little bit so you see it better as well like this


29304
11:07:54,400 --> 11:07:58,872
and let's just go ahead and say flutter pop add intel okay


29305
11:07:58,872 --> 11:08:04,080
and you can read more about this intel package on popdev so if we for instance


29306
11:08:04,080 --> 11:08:09,760
go to create a new tab in here and i bring it here and we just say puff.dev


29307
11:08:09,760 --> 11:08:14,320
and let me increase the size to a little bit more ginormous size


29308
11:08:14,320 --> 11:08:20,000
and let's just say intl okay and you can see here's the intl package


29309
11:08:20,000 --> 11:08:24,480
and it is from darkdev so it is actually an official package that you can include


29310
11:08:24,480 --> 11:08:29,120
in your application and there's documentations about how to use it okay


29311
11:08:29,120 --> 11:08:33,512
so you can also see how you can for instance um handle date formatting in


29312
11:08:33,512 --> 11:08:38,080
different languages all right so now we've added that and if i bring this


29313
11:08:38,080 --> 11:08:41,360
screen like this so you can see the results of adding that package to our


29314
11:08:41,360 --> 11:08:46,080
application and i can see it says got dependencies all right so


29315
11:08:46,080 --> 11:08:51,040
that was the result of saying flutter pop at intel


29316
11:08:51,192 --> 11:08:54,480
fantastic the other thing that we need to do is to


29317
11:08:54,480 --> 11:08:59,360
go under flutter here in our pop spec if i change the screen


29318
11:08:59,360 --> 11:09:03,272
layout a little bit more um we need to go as you can see at the


29319
11:09:03,272 --> 11:09:07,512
bottom of the screen we need to add a generate true under the flutter section


29320
11:09:07,512 --> 11:09:14,232
and it is right here so this generates true that we add just like this it is um


29321
11:09:14,232 --> 11:09:17,912
it is very very important basically for how


29322
11:09:17,912 --> 11:09:23,360
code generation is gonna work so i'm gonna basically have a look here


29323
11:09:23,360 --> 11:09:28,960
generate and add space here okay so if you add this generate true in here it


29324
11:09:28,960 --> 11:09:33,040
allows the localization packages and like the localization code that is


29325
11:09:33,040 --> 11:09:38,552
running in your application to generate to auto generate


29326
11:09:38,552 --> 11:09:44,320
code for you what i mean by that is as you'll soon see


29327
11:09:44,320 --> 11:09:53,000
flutter internally uses a file called a file type called marb


29328
11:09:53,360 --> 11:09:57,272
and these arb files are kind of like key value


29329
11:09:57,272 --> 11:10:03,912
files and very i mean kind of like json and in the keys um you specify some


29330
11:10:03,912 --> 11:10:07,192
names for instance you say login screen title


29331
11:10:07,192 --> 11:10:12,000
and the value would then be the actual value you've translated in that specific


29332
11:10:12,000 --> 11:10:14,872
language and you will have multiple of these arb


29333
11:10:14,872 --> 11:10:18,400
files and i think actually i'm going to


29334
11:10:18,400 --> 11:10:23,760
explain it rb more soon but it stands for application resource bundle


29335
11:10:23,760 --> 11:10:26,640
but just know that i mean i don't want to go too much into


29336
11:10:26,640 --> 11:10:29,760
details about arb files right now because there's a section coming up


29337
11:10:29,760 --> 11:10:33,360
where i'll explain that but what you need to know right now is that this


29338
11:10:33,360 --> 11:10:38,640
generate true flag under your flutter section in pop special allows


29339
11:10:38,640 --> 11:10:44,232
the auto generated code to basically hook itself into your project and when


29340
11:10:44,232 --> 11:10:49,040
you add new keys and values to your arb files as you'll soon see how


29341
11:10:49,040 --> 11:10:53,680
then up then the code generation will kick in every time you do a hot restart


29342
11:10:53,680 --> 11:10:58,000
or you run your application fresh and it will go through your arb files and it


29343
11:10:58,000 --> 11:11:00,640
will generate the keys in


29344
11:11:00,640 --> 11:11:04,872
inside like a dart um source code for you


29345
11:11:04,872 --> 11:11:08,080
and this dart source code will be something that you can literally import


29346
11:11:08,080 --> 11:11:12,320
into your application and like use the keys you added to the json as just like


29347
11:11:12,320 --> 11:11:16,800
dart code inside your application so this is a lot of talking just like


29348
11:11:16,800 --> 11:11:20,872
abstract talking but you will soon see exactly how these things work so don't


29349
11:11:20,872 --> 11:11:25,680
worry about that so what we need to do now is after we've


29350
11:11:25,680 --> 11:11:30,480
done all this work we need to basically add support for localization into our


29351
11:11:30,480 --> 11:11:34,800
ios application as you can see at the bottom of the screen in the caption now


29352
11:11:34,800 --> 11:11:40,552
android works just automatically in that when we start adding localization to our


29353
11:11:40,552 --> 11:11:43,832
application new languages the android app just completely understands then


29354
11:11:43,832 --> 11:11:48,320
okay here's a new language i can handle that and i will just refresh my


29355
11:11:48,320 --> 11:11:52,552
ui in order to display all the values that you entered but ios is a little bit


29356
11:11:52,552 --> 11:11:56,160
more old-fashioned you have to help it understand that this application


29357
11:11:56,160 --> 11:12:00,552
actually supports various languages so and i'm actually glad to say that you


29358
11:12:00,552 --> 11:12:04,080
don't have to have xcode in order to go through this particular


29359
11:12:04,080 --> 11:12:07,360
section of this chapter but we need to as you can see at the


29360
11:12:07,360 --> 11:12:12,552
bottom of the screen we have to go to our info plist file and update a special


29361
11:12:12,552 --> 11:12:15,680
section or create a special section called core foundation bundle


29362
11:12:15,680 --> 11:12:21,512
localizations okay so let's go ahead and actually take care of that right now so


29363
11:12:21,512 --> 11:12:24,640
i'm gonna also bring up my notes to ensure that i'm telling you all


29364
11:12:24,640 --> 11:12:30,160
everything that i plan to tell you see if i can find that section


29365
11:12:30,160 --> 11:12:32,640
all right so what i'm going to do in here i'm


29366
11:12:32,640 --> 11:12:36,480
going to close that file i'm also going to close the main dar file and then i'm


29367
11:12:36,480 --> 11:12:40,720
going to press command p in visual studio code and i'm going to look for a


29368
11:12:40,720 --> 11:12:46,000
file called info.plist it should be under the ios folder slash runner and in


29369
11:12:46,000 --> 11:12:50,800
there there's an info p list and if you're curious exactly where that is you


29370
11:12:50,800 --> 11:12:54,640
will be able to for instance go to terminal and i'm gonna clean the


29371
11:12:54,640 --> 11:12:58,872
terminal and i'm just gonna say open you can see this is the folder where


29372
11:12:58,872 --> 11:13:03,192
this entire course source code is based if i say open


29373
11:13:03,192 --> 11:13:06,480
okay so we're gonna open as you can see in here


29374
11:13:06,480 --> 11:13:09,272
so this is the source code where we we are


29375
11:13:09,272 --> 11:13:12,400
at the moment and there is a folder called ios and in there there's a a


29376
11:13:12,400 --> 11:13:16,872
folder called runner and in there there's a file called info plist so


29377
11:13:16,872 --> 11:13:19,592
that's where that's the file that we have to open


29378
11:13:19,592 --> 11:13:22,480
right now okay so i'm going to say command p again and


29379
11:13:22,480 --> 11:13:26,720
then info plist let's open that and these are like key values as you can see


29380
11:13:26,720 --> 11:13:32,160
it's it's a strange like p list kind of like an xml format kind of thing


29381
11:13:32,160 --> 11:13:36,872
but you will need to look for cf bundle localizations in here um


29382
11:13:36,872 --> 11:13:40,552
and if you don't have cf bundle localizations then you'll have to create


29383
11:13:40,552 --> 11:13:45,120
it just like in here so as soon as you see this dict which is dictionary let's


29384
11:13:45,120 --> 11:13:48,960
go ahead and create a new key so let's just say key and we're going to say core


29385
11:13:48,960 --> 11:13:53,040
foundation bundle localizations okay


29386
11:13:53,040 --> 11:13:58,080
and then we end the key right there and what you have to do this the value


29387
11:13:58,080 --> 11:14:02,480
of this key is not just a string but it's actually an array an array meaning


29388
11:14:02,480 --> 11:14:06,872
that is a list of things it's a list of languages or


29389
11:14:06,872 --> 11:14:09,832
localizations that your application supports so


29390
11:14:09,832 --> 11:14:14,232
as you see all the other things in here there they have like these keys and then


29391
11:14:14,232 --> 11:14:17,680
values but for us we have to do something like this you see there's a


29392
11:14:17,680 --> 11:14:22,000
key which is cf um bundle localization and localizations


29393
11:14:22,000 --> 11:14:25,440
and we have to then create an array so let's go up here right after this say


29394
11:14:25,440 --> 11:14:28,640
array and then we close the array just like


29395
11:14:28,640 --> 11:14:32,080
that you see this is how they were doing it here as well


29396
11:14:32,080 --> 11:14:36,080
and then we need to add two strings in here so one string and we close that


29397
11:14:36,080 --> 11:14:39,360
string and another one okay so because we're


29398
11:14:39,360 --> 11:14:44,320
supporting english and swedish so every string in your arraylist is gonna then


29399
11:14:44,320 --> 11:14:47,512
um indicate the language code that your


29400
11:14:47,512 --> 11:14:51,832
application supports okay so first we're gonna support english and then we're


29401
11:14:51,832 --> 11:14:55,680
gonna sweet and support swedish and swedish language code is suv because in


29402
11:14:55,680 --> 11:14:59,832
sweden and sweden itself we don't call the


29403
11:14:59,832 --> 11:15:05,192
country sweden we call it sevaria and that's what that's where sv comes


29404
11:15:05,192 --> 11:15:10,552
from but you can also google this and you can like look for localization


29405
11:15:10,552 --> 11:15:15,120
country codes and you will get to a list on wikipedia or something that tells you


29406
11:15:15,120 --> 11:15:19,272
exactly what you have to use for instance if you want to write um


29407
11:15:19,272 --> 11:15:24,480
a special language in india or pakistan like urdu or whatever you'll have to


29408
11:15:24,480 --> 11:15:30,872
find the correct language code for that so but you can google that easily so um


29409
11:15:30,872 --> 11:15:35,040
i'm not gonna present all those languages code language codes in this


29410
11:15:35,040 --> 11:15:40,080
chapter but i'm just giving you the tools necessary to find out on your own


29411
11:15:40,080 --> 11:15:44,400
okay and that is it really that's all we have to do for the ios app so we've


29412
11:15:44,400 --> 11:15:49,440
added the cf bundle localizations in here and we're good to go for the info p


29413
11:15:49,440 --> 11:15:53,760
list then what we need to do in here is we


29414
11:15:53,760 --> 11:15:58,640
need to go into our root folder of our application and then we need to add a


29415
11:15:58,640 --> 11:16:02,080
file as you can see on the bottom of the screen called l10n and as i told you


29416
11:16:02,080 --> 11:16:07,192
this l10n is a it means a localization that's the 10


29417
11:16:07,192 --> 11:16:11,760
thing meaning that there's 10 letters between l and n in localization so let's


29418
11:16:11,760 --> 11:16:16,800
go ahead in here and i'm just going to right click on this folder in here and


29419
11:16:16,800 --> 11:16:20,160
actually here and then let's add a new file and call


29420
11:16:20,160 --> 11:16:23,192
it lpn yamo all right and


29421
11:16:23,192 --> 11:16:27,440
in here then we have to write some stuff and i'll bring the official


29422
11:16:27,440 --> 11:16:31,192
documentation because it is very very helpful in this case so let's go and


29423
11:16:31,192 --> 11:16:35,440
have a look at the documentation what we have to enter in this ltn file


29424
11:16:35,440 --> 11:16:41,360
let's see if we can find it somewhere and it is an arb file so l10n


29425
11:16:41,360 --> 11:16:45,272
and it looks like this so this is this is like the contents that we kind of


29426
11:16:45,272 --> 11:16:51,040
need to place in our l10 file so as you can see it says


29427
11:16:51,040 --> 11:16:55,832
arb directory and it's called lib el tenen all right and we'll soon have a


29428
11:16:55,832 --> 11:17:00,232
look at what this actually means excuse me


29429
11:17:00,232 --> 11:17:04,872
and then we have something called a template arb file and then something


29430
11:17:04,872 --> 11:17:09,760
called an output localization file okay so um i'm going to explain to you what


29431
11:17:09,760 --> 11:17:13,592
this what these all actually mean so


29432
11:17:13,592 --> 11:17:17,272
what what this arb directory means is it is


29433
11:17:17,272 --> 11:17:22,552
an indication for you you're telling um flutters auto generated localization


29434
11:17:22,552 --> 11:17:25,512
engine where to find your


29435
11:17:25,512 --> 11:17:28,800
files where to find your localizations you see


29436
11:17:28,800 --> 11:17:32,400
when you create localizations for a new language then you have to create a an


29437
11:17:32,400 --> 11:17:36,960
arb file so and you're basically telling dart in this case or flutter in this


29438
11:17:36,960 --> 11:17:41,192
case that these arb files i'm going to create are going to reside under this


29439
11:17:41,192 --> 11:17:46,400
folder so if you look at visual studio code here we have now a folder from all


29440
11:17:46,400 --> 11:17:50,400
when we created basically our project which was called lib as you can see in


29441
11:17:50,400 --> 11:17:53,040
here okay so


29442
11:17:53,040 --> 11:17:59,272
in this lib then we're going to create a folder as it's indicated in here called


29443
11:17:59,272 --> 11:18:03,760
l10n well you don't actually have to call it altenent and that's why you have


29444
11:18:03,760 --> 11:18:08,800
this configuration so you could call it something else you could call it


29445
11:18:08,800 --> 11:18:13,760
localization if you want to or my strings whatever you want to it's just


29446
11:18:13,760 --> 11:18:17,512
an indication to flutter and the localization engine where you're


29447
11:18:17,512 --> 11:18:21,120
replacing those files okay so that's that so that's you're telling


29448
11:18:21,120 --> 11:18:26,552
dart where it f it where to find your localization information then in here


29449
11:18:26,552 --> 11:18:31,680
the template arv file is a file in that directory that you're


29450
11:18:31,680 --> 11:18:36,960
basically choosing as the main language of the application so if for instance it


29451
11:18:36,960 --> 11:18:40,872
can't find a key for swedish in the swedish file arb file it's going to fall


29452
11:18:40,872 --> 11:18:46,000
back to the english one and this is like setting the ground for or setting the


29453
11:18:46,000 --> 11:18:49,592
foundation for how you're localizing your application


29454
11:18:49,592 --> 11:18:53,272
you can think of it as the default language that your application supports


29455
11:18:53,272 --> 11:18:56,320
in our case that language is going to be english so we're going to leave this


29456
11:18:56,320 --> 11:19:02,960
file name as it is indicated here the other thing output localization file


29457
11:19:02,960 --> 11:19:09,512
it is a file for that auto generation to basically create for you so as you'll


29458
11:19:09,512 --> 11:19:14,960
soon see auto generation is very special i mean it's very magic


29459
11:19:14,960 --> 11:19:19,592
so um but you have some control over it and this is like one of those things


29460
11:19:19,592 --> 11:19:22,640
that you can control you can actually control where that auto generated dart


29461
11:19:22,640 --> 11:19:27,192
code is going to be generated and in like what file name


29462
11:19:27,192 --> 11:19:30,640
it is a little bit abstract so i'm not going to go too much into it and you'll


29463
11:19:30,640 --> 11:19:34,480
soon see how we can configure this and what this actually means so what we need


29464
11:19:34,480 --> 11:19:38,080
to do in this internationalization documentation let's just copy this


29465
11:19:38,080 --> 11:19:42,232
content and i'm going to then go in this l10 and


29466
11:19:42,232 --> 11:19:46,720
yaml file that we created and just paste it there okay


29467
11:19:46,720 --> 11:19:51,512
what we need to do in here we're going to leave the arb directory directory as


29468
11:19:51,512 --> 11:19:55,040
lib l10 because that kind of makes sense okay


29469
11:19:55,040 --> 11:20:00,320
uh but in here app instead of app ian i'm just going to say intel yeah it's


29470
11:20:00,320 --> 11:20:04,080
just for me it makes more sense to use


29471
11:20:04,080 --> 11:20:10,720
the intl underscore en as the default file so we're going to create intl en


29472
11:20:10,720 --> 11:20:15,832
and then intl sv for swedish okay and then we're just


29473
11:20:15,832 --> 11:20:19,512
going to leave this as it is so i'm just going to save this file right there and


29474
11:20:19,512 --> 11:20:24,232
then what we can do is just to do a hot restart


29475
11:20:24,232 --> 11:20:27,832
now remember hot restarting is something in internationalization it's very


29476
11:20:27,832 --> 11:20:32,872
important flutter because hot reload won't trigger auto generation of your


29477
11:20:32,872 --> 11:20:36,552
internationalization code meaning that if you have some


29478
11:20:36,552 --> 11:20:40,640
if you've added some new strings for instance to your arb files as we'll talk


29479
11:20:40,640 --> 11:20:46,160
about it soon those things won't be auto injected and generated into your code


29480
11:20:46,160 --> 11:20:50,960
until you do a hot restart hot reload won't cut it so you have to either do a


29481
11:20:50,960 --> 11:20:54,960
hot restart or just completely stop the application and build it from scratch


29482
11:20:54,960 --> 11:20:59,440
and that's a huge overhead so you may not want to do that but a hot restart is


29483
11:20:59,440 --> 11:21:05,592
necessary for that okay so let's have a look now at um


29484
11:21:05,592 --> 11:21:09,272
what arb files are as i mentioned before now


29485
11:21:09,272 --> 11:21:14,000
arb files are application resource bundles and they're pretty much json


29486
11:21:14,000 --> 11:21:20,232
files they are key values in there and your keys are basically how a handle for


29487
11:21:20,232 --> 11:21:24,080
your application to then reach into your localization and grab for instance a


29488
11:21:24,080 --> 11:21:28,160
string and the values of those keys are the actual strings that will be


29489
11:21:28,160 --> 11:21:32,872
displayed in your user interface they are more than just key values


29490
11:21:32,872 --> 11:21:36,800
because you can actually put logic in your arb files in that for instance as


29491
11:21:36,800 --> 11:21:40,552
you soon see inside this screen let me bring it up in


29492
11:21:40,552 --> 11:21:45,832
scr cpy and if you log in with a valid user in here


29493
11:21:45,832 --> 11:21:50,080
and we have foobarbas as our password i think


29494
11:21:50,080 --> 11:21:52,960
um in this screen at the moment on the top of the screen we're seeing your


29495
11:21:52,960 --> 11:21:56,320
notes but what we're going to do in this chapter just to demonstrate how arp


29496
11:21:56,320 --> 11:22:00,160
files work we're gonna say if you have one note


29497
11:22:00,160 --> 11:22:05,360
it's just gonna write no you have one note something like that or


29498
11:22:05,360 --> 11:22:08,000
one note if you have more than one note then it's


29499
11:22:08,000 --> 11:22:13,512
gonna say for instance if you have three notes it's gonna say three notes


29500
11:22:13,512 --> 11:22:17,760
or if you have zero notes no notes at all it's gonna say


29501
11:22:17,760 --> 11:22:22,320
you have no notes so for the same title


29502
11:22:22,320 --> 11:22:26,480
which is the title on top of the screen we can actually put logic into the arb


29503
11:22:26,480 --> 11:22:31,680
file to say hey this isn't a title however i wanted to


29504
11:22:31,680 --> 11:22:36,232
say this if this particular count is zero i


29505
11:22:36,232 --> 11:22:40,480
wanted to say you have no notes if the account is one i want it to say


29506
11:22:40,480 --> 11:22:45,440
you have one note or if the count is more than one i wanted to say you have


29507
11:22:45,440 --> 11:22:48,800
x amount of notes and that x is the actual


29508
11:22:48,800 --> 11:22:53,592
number that we will provide to it so rb files are more than just json they


29509
11:22:53,592 --> 11:22:57,680
can actually have logic in them and they stand as you can see at the bottom of


29510
11:22:57,680 --> 11:23:02,080
the screen they stand for application resource bundle


29511
11:23:02,552 --> 11:23:09,040
all right and now what we need to do is to actually go and create these um files


29512
11:23:09,040 --> 11:23:15,040
so let's go into this lib folder and let's go and create our the folder


29513
11:23:15,040 --> 11:23:19,912
that we mentioned in this l10 and you see we said that under lib we're gonna


29514
11:23:19,912 --> 11:23:25,832
have a folder called l10n and under that l10n we're gonna have a file called intl


29515
11:23:25,832 --> 11:23:30,960
en arb okay so let's go ahead and see if we can get that to work so in lib let's


29516
11:23:30,960 --> 11:23:36,640
go and say new file and then i'm going to say l10n slash


29517
11:23:36,640 --> 11:23:40,720
intl en arb and you can see that it creates the


29518
11:23:40,720 --> 11:23:46,720
folder as well lib l10n and intl enarb and that is the file that we said we're


29519
11:23:46,720 --> 11:23:50,000
going to create here let's then go ahead and say new file


29520
11:23:50,000 --> 11:23:56,400
intl and then we're going to say sv arv okay


29521
11:23:56,400 --> 11:24:01,192
and as i mentioned before these are very simple jsons to begin with so we can


29522
11:24:01,192 --> 11:24:04,960
just create a json for instance here and in the english one first


29523
11:24:04,960 --> 11:24:08,640
so like this and in here i'm just going to say my title


29524
11:24:08,640 --> 11:24:15,040
and then a value of my title goes here okay and let's just copy and paste this


29525
11:24:15,040 --> 11:24:18,640
in the swedish one as well just for now okay


29526
11:24:18,640 --> 11:24:22,640
so and i'm just going to do a hot restart


29527
11:24:22,640 --> 11:24:28,640
all right so what this all did since we've added our auto generation


29528
11:24:28,640 --> 11:24:32,872
in our pop speaking ammo if you remember from before we added this generate true


29529
11:24:32,872 --> 11:24:38,000
inside here now what you should be able to do is to have a look at the structure


29530
11:24:38,000 --> 11:24:40,872
of your project and now all of a sudden you should be able to see a folder


29531
11:24:40,872 --> 11:24:44,872
called dot dart tool and if you drill down in there you should be able to see


29532
11:24:44,872 --> 11:24:48,640
something called a flutter gen and if you drill down in there you'll see gen


29533
11:24:48,640 --> 11:24:55,040
l10n and in there you'll see now three files app localizations app localization


29534
11:24:55,040 --> 11:25:01,040
sv and applicalizations en now what is this app localizations well if


29535
11:25:01,040 --> 11:25:08,080
you remember from our um l10n we actually told the generation to


29536
11:25:08,080 --> 11:25:12,720
generate generated code to be named app localizations and that's


29537
11:25:12,720 --> 11:25:17,760
basically it that's that file we said that it needs to be called that so we


29538
11:25:17,760 --> 11:25:22,232
can open that and you'll see now there's some information in here and


29539
11:25:22,232 --> 11:25:26,080
there is a locale name for instance and then there are some delegate stuff and


29540
11:25:26,080 --> 11:25:30,960
i'll explain all these but what you'll see here now is something called my


29541
11:25:30,960 --> 11:25:36,400
title and is a string and this is exactly what we wrote in this my title


29542
11:25:36,400 --> 11:25:41,192
my title goes here and you can see then if you go to the


29543
11:25:41,192 --> 11:25:45,832
english one your string is there my title goes here


29544
11:25:45,832 --> 11:25:50,320
and the swedish one is also saying my title goes here so it's not so it's not


29545
11:25:50,320 --> 11:25:54,232
so impressive since we actually chose to have the exact same string in the


29546
11:25:54,232 --> 11:25:59,272
english and the swedish version so what we could do is to go to the english one


29547
11:25:59,272 --> 11:26:03,912
in this intel en arb and put eng at the end of


29548
11:26:03,912 --> 11:26:09,040
it and go to the swedish one and say swe like in sweden


29549
11:26:09,040 --> 11:26:15,272
okay and then i now get a a save on this file and then if you go in here you'll


29550
11:26:15,272 --> 11:26:18,872
see nothing has changed and that's what i meant hot


29551
11:26:18,872 --> 11:26:23,912
reload doesn't cut it you have to do a hot restart and if you do a hot restart


29552
11:26:23,912 --> 11:26:29,360
then this code should basically get updated let's go ahead and see if it did


29553
11:26:29,360 --> 11:26:33,760
you can see here's the english one oops i didn't mean to change it and here's


29554
11:26:33,760 --> 11:26:38,160
the swedish one so now you know what those things actually


29555
11:26:38,160 --> 11:26:41,912
stand for and


29556
11:26:41,912 --> 11:26:48,320
we now have a really good ground to stand on because we've created our


29557
11:26:48,320 --> 11:26:54,000
localization yaml a configuration file we have our english and swedish


29558
11:26:54,000 --> 11:26:58,872
localization files right here in lib if you have a look here lib


29559
11:26:58,872 --> 11:27:05,360
ltn and under those we have intel en and intel sv which means intel


29560
11:27:05,360 --> 11:27:09,120
internationalization english and international nationalization swedish


29561
11:27:09,120 --> 11:27:15,272
now all we really have to do is to basically go ahead now and start


29562
11:27:15,272 --> 11:27:21,192
populating these um strings in our application and um kind


29563
11:27:21,192 --> 11:27:24,080
of sorry populating them in the in these


29564
11:27:24,080 --> 11:27:27,680
arb files and then where in our application we have


29565
11:27:27,680 --> 11:27:33,192
text hard-coded then we're going to switch to using these


29566
11:27:33,192 --> 11:27:37,440
strings which are in our l10n file


29567
11:27:37,440 --> 11:27:42,800
and in order for our application to actually understand what


29568
11:27:42,800 --> 11:27:48,080
we have localized in inside our arb files we have to actually tell the


29569
11:27:48,080 --> 11:27:53,040
application which locales we support and in order to


29570
11:27:53,040 --> 11:27:57,192
mention sorry in order to explain that we have to go back to the main dart file


29571
11:27:57,192 --> 11:27:59,680
so let's go to main dart file and have a


29572
11:27:59,680 --> 11:28:03,592
look at how we've created our application and you can see we have this


29573
11:28:03,592 --> 11:28:07,760
code right here that at the moment says run app and then we're creating a


29574
11:28:07,760 --> 11:28:12,552
material application and there are two important properties


29575
11:28:12,552 --> 11:28:16,640
in the creation of material app which we haven't used so far because in the


29576
11:28:16,640 --> 11:28:21,272
previous chapters we haven't done any localization of the application so far


29577
11:28:21,272 --> 11:28:25,832
so these two properties are namely localizations delegate and supported


29578
11:28:25,832 --> 11:28:29,512
locales so let me bring up the caption for this


29579
11:28:29,512 --> 11:28:34,872
section um the way flutter localization communicates with the ios app and


29580
11:28:34,872 --> 11:28:39,440
android app or for instance a web application or desktop whatever you're


29581
11:28:39,440 --> 11:28:44,552
running flatter on it needs to tell the underlying operating system what locales


29582
11:28:44,552 --> 11:28:48,640
and it's supporting so basically that's telling your


29583
11:28:48,640 --> 11:28:54,160
material application which languages your application is built to work with


29584
11:28:54,160 --> 11:29:00,160
so that's the locale so you could say swedish english persian and arabic or


29585
11:29:00,160 --> 11:29:05,120
what have you so those are the locales but you also have the concept of


29586
11:29:05,120 --> 11:29:09,760
localization of your widgets you see at the moment we've created some


29587
11:29:09,760 --> 11:29:14,640
strings and and also we're then gonna soon go and place those strings on our


29588
11:29:14,640 --> 11:29:18,960
ui but also flutter itself has localization support for various


29589
11:29:18,960 --> 11:29:22,800
languages there are so many languages that flutter at the moment supports and


29590
11:29:22,800 --> 11:29:27,760
it can internally also localize its own widgets for instance if you bring up a


29591
11:29:27,760 --> 11:29:31,912
date picker for instance in your flutter application for user to select the date


29592
11:29:31,912 --> 11:29:36,232
that day picker itself can have localization based on the system's


29593
11:29:36,232 --> 11:29:39,680
language or your application's language so if you've chosen arabic career


29594
11:29:39,680 --> 11:29:43,040
applications language versus at the os level


29595
11:29:43,040 --> 11:29:46,640
then and if you bring up a date picker then that date picker is going to be


29596
11:29:46,640 --> 11:29:51,440
localized for that language by default by the flutter team so


29597
11:29:51,440 --> 11:29:55,440
you need to tell material app both about the locales that your application


29598
11:29:55,440 --> 11:30:01,040
supports also how it should localize for instance internal widgets and also your


29599
11:30:01,040 --> 11:30:05,592
custom widgets so what we need to do is to actually go and


29600
11:30:05,592 --> 11:30:11,440
add these two properties here and what we want to do is to refer to


29601
11:30:11,440 --> 11:30:15,440
this app localization file so if you go to dart tools and you can see there's


29602
11:30:15,440 --> 11:30:19,832
this app localizations right here and you can see there is a pop speaking


29603
11:30:19,832 --> 11:30:24,480
ammo and and then this is basically a package so it is a package that was


29604
11:30:24,480 --> 11:30:28,720
created for you you haven't done anything it's just generated for you so


29605
11:30:28,720 --> 11:30:33,912
how do we go ahead and import this in our application and that is by going to


29606
11:30:33,912 --> 11:30:38,000
the top of your main file for instance and say import and then you say package


29607
11:30:38,000 --> 11:30:41,120
and then in here we just say flutter underscore gen


29608
11:30:41,120 --> 11:30:45,512
and this is like the generated code for you and then gen l10n and in there


29609
11:30:45,512 --> 11:30:48,552
you'll see that there is applicabilization's dark files so i need


29610
11:30:48,552 --> 11:30:52,480
you to please go ahead and import this file into your


29611
11:30:52,480 --> 11:30:56,552
main dart file after having done that we need to go to


29612
11:30:56,552 --> 11:31:01,512
the material app and right before we do anything else we're first going to say


29613
11:31:01,512 --> 11:31:06,552
supported locales this is a property and that allows us to tell flutter which


29614
11:31:06,552 --> 11:31:11,192
lookouts our application supports now you may be wondering okay what data


29615
11:31:11,192 --> 11:31:15,272
type this is this is actually a list as you can see it's an iterable of locale


29616
11:31:15,272 --> 11:31:19,040
and some people go and incorrectly create a custom list of accounts and


29617
11:31:19,040 --> 11:31:22,480
then put that in here but you don't have to do that and i actually suggest that


29618
11:31:22,480 --> 11:31:26,000
you don't do that even if you can because if you go inside this


29619
11:31:26,000 --> 11:31:30,552
applicalization start file you see that something down here


29620
11:31:30,552 --> 11:31:33,760
it is created for you calls supported locales


29621
11:31:33,760 --> 11:31:37,192
so it is already understanding what locales your application supports based


29622
11:31:37,192 --> 11:31:42,080
on the arb files that you've provided to um flutter gen so


29623
11:31:42,080 --> 11:31:47,680
please don't go and create the same list in your main dart file in here what


29624
11:31:47,680 --> 11:31:51,040
you'll need to do is just to say applicalizations


29625
11:31:51,040 --> 11:31:56,080
and then you just say supported locales okay so this goes and uses your arb


29626
11:31:56,080 --> 11:32:01,360
files as like a guide let's see lib ltn and ar b fast it just knows that


29627
11:32:01,360 --> 11:32:04,480
you're supporting english and swedish at this point okay


29628
11:32:04,480 --> 11:32:07,512
so that's the first thing that we have to do the other thing that we have to do


29629
11:32:07,512 --> 11:32:12,960
in here is just to say it's called localizations delegates as


29630
11:32:12,960 --> 11:32:16,720
you can see it says the delegates for this apps localizations widget


29631
11:32:16,720 --> 11:32:20,480
and this is basically a way for you to tell flutter that hey i


29632
11:32:20,480 --> 11:32:24,320
support for instance swedish and english please localize your own widgets as well


29633
11:32:24,320 --> 11:32:28,160
so in here you don't have to create custom delegates because those are also


29634
11:32:28,160 --> 11:32:32,480
provided inside your applicalizations so if you go in there you'll see


29635
11:32:32,480 --> 11:32:38,080
something in here localizations delegates all right so


29636
11:32:38,080 --> 11:32:42,592
what we need to do now is just to say applicalizations


29637
11:32:43,272 --> 11:32:47,680
localize app localizations


29638
11:32:47,680 --> 11:32:52,320
and then localizations delegates so then that is provided and i'm going to do a


29639
11:32:52,320 --> 11:32:56,640
hot restart just because we've changed the main function in our application and


29640
11:32:56,640 --> 11:33:01,192
those changes aren't going to take effect until you do a hot restart okay


29641
11:33:01,192 --> 11:33:05,120
and what we can do now is to go ahead and test these changes


29642
11:33:05,120 --> 11:33:09,120
and um what would be really great is actually


29643
11:33:09,120 --> 11:33:14,400
if you could extract that little title that we've written in our intel en arb


29644
11:33:14,400 --> 11:33:18,160
and and put it somewhere on some sort of widget just to see that it is working in


29645
11:33:18,160 --> 11:33:21,680
english and in swedish so what i'm going to do is i'm going to bring scr cpy on


29646
11:33:21,680 --> 11:33:24,720
the screen right here at the moment you can see


29647
11:33:24,720 --> 11:33:29,680
we're on the login page so let's go to the login page and you don't have to do


29648
11:33:29,680 --> 11:33:34,552
this so i'm just going to do this myself just to demonstrate something and while


29649
11:33:34,552 --> 11:33:39,512
we're in the login page let's also clean up these two unused imports okay and


29650
11:33:39,512 --> 11:33:44,000
let's go ahead into our code here to the login and you can see there's a cons


29651
11:33:44,000 --> 11:33:49,120
text login but in here we want to use that title and again you don't have to


29652
11:33:49,120 --> 11:33:52,640
do this and i actually suggest you don't do it it's just for me demonstrating to


29653
11:33:52,640 --> 11:33:57,360
you that hey it's working as expected okay so just follow along and look at


29654
11:33:57,360 --> 11:34:00,720
this part without having to do it yourself so what we need to do in here


29655
11:34:00,720 --> 11:34:03,760
let's go and import the same localization so i'm just going to say


29656
11:34:03,760 --> 11:34:06,400
import package


29657
11:34:06,400 --> 11:34:11,192
and then we had flutter lock what was it called let's go to main dart


29658
11:34:11,192 --> 11:34:15,192
file and and exactly copy and paste that flutter gen okay and i'm gonna bring it


29659
11:34:15,192 --> 11:34:19,192
into login view dot dart i'm gonna paste it there so we also have


29660
11:34:19,192 --> 11:34:24,000
access to our localizations and the way to grab your localizations is with this


29661
11:34:24,000 --> 11:34:27,912
code so if i write this for instance just in here i'm going to remove


29662
11:34:27,912 --> 11:34:31,760
actually let cons be there i just want you to see why we have to remove const


29663
11:34:31,760 --> 11:34:36,232
in the future so for us to be able to grab this string which is my title in


29664
11:34:36,232 --> 11:34:40,320
our login view we have to say app localizations


29665
11:34:40,320 --> 11:34:44,872
of context and then we can say my title and


29666
11:34:44,872 --> 11:34:50,080
then we have to explicitly on wrapless okay so this is how you grab a


29667
11:34:50,080 --> 11:34:54,960
localization out of your um supported localizations basically the stuff that


29668
11:34:54,960 --> 11:34:58,400
you placed in your arv files okay


29669
11:34:58,400 --> 11:35:02,480
so now we have my title and in here as you can see


29670
11:35:02,480 --> 11:35:06,872
it says hey a value of type null can't be assigned so


29671
11:35:06,872 --> 11:35:11,512
basically this is an issue with having constant here because in in the previous


29672
11:35:11,512 --> 11:35:14,872
i mean up until this point the way we've created our app bar was that we said


29673
11:35:14,872 --> 11:35:19,120
that is a constant string it's a constant text that says login but now


29674
11:35:19,120 --> 11:35:22,480
that all of a sudden we're saying we're retrieving this text from our


29675
11:35:22,480 --> 11:35:26,720
applicalizations these properties unfortunately are not


29676
11:35:26,720 --> 11:35:30,000
defined as constants so if you go in here you can


29677
11:35:30,000 --> 11:35:33,512
see it's just a string getter and that's the reason you can't have cons in here


29678
11:35:33,512 --> 11:35:36,320
so i'm just going to remove that cons it's going to be very happy and the


29679
11:35:36,320 --> 11:35:40,000
reason we have this exclamation mark in here is that the app localization is off


29680
11:35:40,000 --> 11:35:44,640
function and you can see it returns an optional application it is a bit


29681
11:35:44,640 --> 11:35:48,000
unfortunate i don't really like the syntax that everywhere we have to go on


29682
11:35:48,000 --> 11:35:51,120
applications of context and a


29683
11:35:51,120 --> 11:35:55,192
um an exclamation mark in here and we're


29684
11:35:55,192 --> 11:35:59,192
actually going to fix that soon right after this demonstration and because


29685
11:35:59,192 --> 11:36:02,720
this is as you'll see soon it is soon gonna get


29686
11:36:02,720 --> 11:36:06,552
quite annoying to have to always say applicalizations of context exclamation


29687
11:36:06,552 --> 11:36:10,872
mark dot and then the name of your property but so hang on we'll fix that


29688
11:36:10,872 --> 11:36:15,592
soon so now we have the login in here and i'm going to do a hot restart


29689
11:36:15,592 --> 11:36:20,320
and let's see what we get i'm going to bring scrcpy and now you can see i see


29690
11:36:20,320 --> 11:36:25,760
my title goes here swedish all right and that's the title that we put in the


29691
11:36:25,760 --> 11:36:28,480
intel um


29692
11:36:28,480 --> 11:36:33,680
swedish you see right here okay so we have that english one let me bring


29693
11:36:33,680 --> 11:36:37,440
the swedish one next to the english one as well like that


29694
11:36:37,440 --> 11:36:40,000
so we have the english one and the swedish one here and you can see at the


29695
11:36:40,000 --> 11:36:43,192
moment we're seeing the swedish one and the way to actually change the language


29696
11:36:43,192 --> 11:36:47,912
of your um phone on android is a little bit different from ios so here i'm just


29697
11:36:47,912 --> 11:36:52,080
going to go to install nina and that's settings and in


29698
11:36:52,080 --> 11:36:58,232
here i believe it is somewhere it's in system i believe


29699
11:36:58,232 --> 11:37:01,680
and then spirowak which means language and then i'm going to go to language and


29700
11:37:01,680 --> 11:37:07,120
at the moment spirowak here is swedish i'm just going to bring english on top


29701
11:37:07,120 --> 11:37:11,360
and you can see now english is on top so let's go back to our application and see


29702
11:37:11,360 --> 11:37:14,720
if its title is going to change and now all of a sudden you see that it's


29703
11:37:14,720 --> 11:37:20,480
displaying the english title so it's working very very well on android i'm


29704
11:37:20,480 --> 11:37:25,440
gonna get rid of the scr cpy on the screen and bring up


29705
11:37:25,440 --> 11:37:30,640
a an ios device which i've created with um


29706
11:37:30,640 --> 11:37:35,592
so it's an iphone 12 pro that is sitting on my desk right here and i have


29707
11:37:35,592 --> 11:37:41,040
quicktime which is mirroring that iphone screen here so let's go ahead and in


29708
11:37:41,040 --> 11:37:45,512
here stop the process on android and then command shift b on macintosh to


29709
11:37:45,512 --> 11:37:48,480
select the device or control should be on windows and linux and say select


29710
11:37:48,480 --> 11:37:53,272
device and then i'm going to choose that iphone 12 pro and i'm going to go to the


29711
11:37:53,272 --> 11:37:56,800
main dart file because that's how we should run the application because if


29712
11:37:56,800 --> 11:37:59,680
you try to run the application when you're on this file it's just going to


29713
11:37:59,680 --> 11:38:04,400
give you an error telling you hey i don't know how to run an arb file so


29714
11:38:04,400 --> 11:38:08,232
that's the reason you always have to go to a dart file


29715
11:38:08,232 --> 11:38:11,912
in your application so that visual studio code at least knows how to run


29716
11:38:11,912 --> 11:38:14,640
your application so


29717
11:38:14,640 --> 11:38:19,680
now let's bring up um our um


29718
11:38:19,680 --> 11:38:24,960
quicktime here and let's wait basically for this running xcode build process to


29719
11:38:24,960 --> 11:38:27,360
finish and as i've mentioned before sometimes


29720
11:38:27,360 --> 11:38:32,232
xcode can actually be much slower than building with gradle so


29721
11:38:32,232 --> 11:38:37,120
that is quite annoying um so i'm just gonna wait here until this process is


29722
11:38:37,120 --> 11:38:41,272
done let's see how long it takes oh it's installing that so i don't


29723
11:38:41,272 --> 11:38:45,440
actually have to do anything so installing and launching it says at the


29724
11:38:45,440 --> 11:38:48,872
moment so let's get ready


29725
11:38:48,872 --> 11:38:52,320
let's see how long that takes and i can see now that it's going to install the


29726
11:38:52,320 --> 11:38:55,440
application right here we should see some sort of progress


29727
11:38:55,440 --> 11:38:58,832
on my notes


29728
11:39:02,000 --> 11:39:06,080
right there okay now it is launching the application and


29729
11:39:06,080 --> 11:39:12,160
we can see that at the moment the user and face is english and um so i'm gonna


29730
11:39:12,160 --> 11:39:15,832
close this widget and then bring visual studio code here


29731
11:39:15,832 --> 11:39:20,800
as well all right fantastic so um unfortunately mirroring


29732
11:39:20,800 --> 11:39:25,512
an iphone a real iphone on your computer screen with quicktime isn't going to


29733
11:39:25,512 --> 11:39:30,640
allow you to interact with that iphone at all and scr cpy is very special in


29734
11:39:30,640 --> 11:39:34,720
that it connects with adb and at the low level it allows you to interact with the


29735
11:39:34,720 --> 11:39:37,512
screen however the same thing isn't true when


29736
11:39:37,512 --> 11:39:41,192
you're mirroring an iphone screen so right now i have to go and interact with


29737
11:39:41,192 --> 11:39:46,640
this phone by hand so i'm going to grab this phone


29738
11:39:46,872 --> 11:39:52,080
and it is right here i don't know if the cable is long enough for me to show you


29739
11:39:52,080 --> 11:39:58,320
so here is the phone right there and i'm going to then go to system


29740
11:39:58,320 --> 11:40:03,272
settings right here and i'm then going to go to general


29741
11:40:03,272 --> 11:40:07,360
and um and then let's go to language and region


29742
11:40:07,360 --> 11:40:11,832
and in there i'm going to choose swedish right here and


29743
11:40:11,832 --> 11:40:15,192
the the thing that is a bit disappointing in ios is that the


29744
11:40:15,192 --> 11:40:18,872
language that you choose for your system is for the entire system and when you do


29745
11:40:18,872 --> 11:40:24,320
that it's going to kill all the running applications because ios applications


29746
11:40:24,320 --> 11:40:27,680
don't have the possibility to change their language on the fly that's


29747
11:40:27,680 --> 11:40:31,192
something like android does very very well in that


29748
11:40:31,192 --> 11:40:34,720
you can change the language of the entire system and nothing has to restart


29749
11:40:34,720 --> 11:40:38,720
the applications keep running you could even see when we changed the language


29750
11:40:38,720 --> 11:40:43,832
the um like here we couldn't we didn't basically see the application


29751
11:40:43,832 --> 11:40:49,360
terminate or anything so what we need to do now is to ensure that


29752
11:40:49,360 --> 11:40:53,192
we don't change the entire system's language instead i'm going to show you a


29753
11:40:53,192 --> 11:40:58,000
way that you can choose to do in ios that changes only your applications


29754
11:40:58,000 --> 11:41:02,552
language so let's go back in here and let's go and find our application which


29755
11:41:02,552 --> 11:41:07,120
is called my notes i believe somewhere and let's see if you can find it and


29756
11:41:07,120 --> 11:41:10,640
it's right there my notes and now you can see that there's a menu at the


29757
11:41:10,640 --> 11:41:13,680
bottom of the screen that says language and then i'm going to tap on that and


29758
11:41:13,680 --> 11:41:17,360
then i'm going to choose swedish and the reason that you're seeing these two


29759
11:41:17,360 --> 11:41:22,080
options in here because the change we made in our info p list so if i say main


29760
11:41:22,080 --> 11:41:25,440
sorry info p list we can see that we said english and


29761
11:41:25,440 --> 11:41:29,272
swedish in this order and that's why they are displayed here also in that


29762
11:41:29,272 --> 11:41:33,272
order so i'm going to then choose swedish and as soon as i do this you'll


29763
11:41:33,272 --> 11:41:38,080
see up here that our application will terminate because ios can't handle that


29764
11:41:38,080 --> 11:41:41,272
so and there we go the application's


29765
11:41:41,272 --> 11:41:44,640
completely terminated now but that's okay so i'm gonna go back


29766
11:41:44,640 --> 11:41:48,640
here and then open the application on ios oh now we have to debug it as well


29767
11:41:48,640 --> 11:41:51,912
okay because we're in debug mode so let's go ahead and main dark file and


29768
11:41:51,912 --> 11:41:56,232
then run the application again and you can see it says in ios 14 plus


29769
11:41:56,232 --> 11:41:59,832
debug mode flatter apps can only be launched from flutter tooling ids with


29770
11:41:59,832 --> 11:42:04,872
flutter plugins or from xcode so this is a little bit unfortunate as


29771
11:42:04,872 --> 11:42:08,720
well um because then you have to basically run


29772
11:42:08,720 --> 11:42:10,720
your build


29773
11:42:10,720 --> 11:42:14,800
over and over again just while you're testing and this is another


29774
11:42:14,800 --> 11:42:19,272
i would say it's one of the shortcomings of running applications on ios as well


29775
11:42:19,272 --> 11:42:23,192
like there are so many things i feel like android is ahead of ios


29776
11:42:23,192 --> 11:42:27,512
that it's just android is a little bit more developer friendly i would say


29777
11:42:27,512 --> 11:42:31,120
the tooling the whole operating system is a little


29778
11:42:31,120 --> 11:42:35,760
bit more friendly so let's see um i can see now at the bottom of the


29779
11:42:35,760 --> 11:42:40,320
screen it says installing and launching so let's have a look here now our user


29780
11:42:40,320 --> 11:42:47,680
interface should be in swedish if everything goes well of course


29781
11:42:47,680 --> 11:42:50,720
and if things are going well then on ios we


29782
11:42:50,720 --> 11:42:54,552
don't have to do this process over and over again so it's just just to make


29783
11:42:54,552 --> 11:42:58,080
sure that it's working for the first time as you can see now after changing


29784
11:42:58,080 --> 11:43:02,400
our applications into language to swedish now we can see the swedish title


29785
11:43:02,400 --> 11:43:05,760
being displayed on top all right so i'm going to close the widget


29786
11:43:05,760 --> 11:43:09,760
inspector right there and i'm going to stop this process and


29787
11:43:09,760 --> 11:43:14,552
i'm going to get rid of this and now we should be focusing only then on


29788
11:43:14,552 --> 11:43:18,400
deploying on android because it's just so much easier


29789
11:43:18,400 --> 11:43:22,872
so let's go and do a flaster select and then i'm going to say i'm choosing to


29790
11:43:22,872 --> 11:43:28,160
run my application on my android device then i'm gonna put away my iphone


29791
11:43:28,160 --> 11:43:32,080
great so that is that and and the thing that


29792
11:43:32,080 --> 11:43:37,360
we need to talk about now is at the optionality of this app localizations so


29793
11:43:37,360 --> 11:43:40,832
if you go back to our login view you saw that


29794
11:43:40,832 --> 11:43:44,800
applicalizations of context is an optional value because this function


29795
11:43:44,800 --> 11:43:48,960
returns an optional app localizations and there is a way to make this better


29796
11:43:48,960 --> 11:43:53,512
it's one of my favorite ways it's like the shortest extension that we can write


29797
11:43:53,512 --> 11:43:58,080
in our flutter career progress but it's one of the most powerful as


29798
11:43:58,080 --> 11:44:02,000
you'll soon see in order not to have to repeat this code


29799
11:44:02,000 --> 11:44:07,040
what we could do is to create an extension on build context that grabs


29800
11:44:07,040 --> 11:44:12,440
its applicalizations and returns it as a non-optional value so here we have


29801
11:44:12,440 --> 11:44:17,040
applicalizations being returned by passing the context in but what we are


29802
11:44:17,040 --> 11:44:23,040
going to do is to grab the applications from the context itself all right


29803
11:44:23,040 --> 11:44:28,160
so let's have a look at um how we can actually do that in order in


29804
11:44:28,160 --> 11:44:31,760
order to get started let's leave this code as it is right there we don't have


29805
11:44:31,760 --> 11:44:35,360
to do anything special but what we're going to do is to go as you can see at


29806
11:44:35,360 --> 11:44:38,800
the bottom of the screen we have to go and create a new file under lib


29807
11:44:38,800 --> 11:44:42,320
extensions and then we're going to create a new folder as well called build


29808
11:44:42,320 --> 11:44:47,192
context lock dot dart and lock as in localization in this file we're going to


29809
11:44:47,192 --> 11:44:51,832
create our extension on build contacts that allows us to


29810
11:44:51,832 --> 11:44:56,400
return our localizations to the caller all right


29811
11:44:56,400 --> 11:45:00,960
so let's go ahead and do that i'm going to go to lib in here and then


29812
11:45:00,960 --> 11:45:04,872
we have um as the bottom at the bottom of the screen says extensions we already


29813
11:45:04,872 --> 11:45:09,832
have the extensions folder but we only have list folder in there with a filter


29814
11:45:09,832 --> 11:45:14,000
file so in extensions i'm just going to right click and say new file then let's


29815
11:45:14,000 --> 11:45:19,272
go ahead and create build context slash lock dart okay


29816
11:45:19,272 --> 11:45:22,480
and in here what we're going to do is to say


29817
11:45:22,480 --> 11:45:26,640
um import our flutter


29818
11:45:26,640 --> 11:45:30,552
sorry package after gen as we did in the other places


29819
11:45:30,552 --> 11:45:36,080
and then gen l10n applicalization starts okay


29820
11:45:36,080 --> 11:45:42,080
so that's the first import and in here we don't we only need a few symbols or


29821
11:45:42,080 --> 11:45:44,960
actually one symbol which is the applicalizations but we'll talk about


29822
11:45:44,960 --> 11:45:49,192
that soon so let's go ahead and say extension um and we're gonna say


29823
11:45:49,192 --> 11:45:54,400
localization on build context as you'll see it says i have to also import this


29824
11:45:54,400 --> 11:45:57,832
because it is in material so i'm gonna say go ahead and import it


29825
11:45:57,832 --> 11:46:01,680
and i really don't like as if as you follow along with this course i don't


29826
11:46:01,680 --> 11:46:06,400
like to import everything in material like if i only need build context i only


29827
11:46:06,400 --> 11:46:09,760
need build context so i'm not going to import everything so let's just go ahead


29828
11:46:09,760 --> 11:46:14,480
and say show build context and that only brings build context in


29829
11:46:14,480 --> 11:46:16,960
this context


29830
11:46:16,960 --> 11:46:19,592
so what we need to do in here we're going


29831
11:46:19,592 --> 11:46:25,320
to create basically a getter which returns app localizations


29832
11:46:26,832 --> 11:46:30,800
applocalizations we're going to say this is a getter and it's called lock


29833
11:46:30,800 --> 11:46:34,720
and what it does is is returns applicalizations


29834
11:46:34,720 --> 11:46:36,552
of this


29835
11:46:36,552 --> 11:46:41,192
and it puts a an exclamation mark at the end of it so


29836
11:46:41,192 --> 11:46:45,512
and also you'll see that we've imported applications as a whole but we only need


29837
11:46:45,512 --> 11:46:50,400
app localizations from that file so i'm just gonna say show this okay


29838
11:46:50,400 --> 11:46:55,912
so that's that file now it's created and and while this all is going on i'm gonna


29839
11:46:55,912 --> 11:47:01,040
select that and also i'm gonna say run because it is always good to have the


29840
11:47:01,040 --> 11:47:04,872
application running as we're doing hot restarts and hot reload so we can see


29841
11:47:04,872 --> 11:47:08,640
the results on the screen so with this extension now you're soon gonna be able


29842
11:47:08,640 --> 11:47:11,680
to say build context dot


29843
11:47:11,680 --> 11:47:16,960
and then you can get your localizations so let's go back now to this login view


29844
11:47:16,960 --> 11:47:21,272
what we wrote here as you can see is this syntax at the moment but what you


29845
11:47:21,272 --> 11:47:26,000
can replace the syntax with is if we remove this and we just say context


29846
11:47:26,000 --> 11:47:30,720
which is our build context and then you say dot lock and you'll see here it says


29847
11:47:30,720 --> 11:47:34,000
oh i don't know what lock is and that's correct it doesn't know what lock is


29848
11:47:34,000 --> 11:47:36,720
because we haven't imported that extension


29849
11:47:36,720 --> 11:47:39,832
sorry about that i'll just close the switches inspector


29850
11:47:39,832 --> 11:47:43,040
so it doesn't know what that is so i'm just going to say command dot and it's


29851
11:47:43,040 --> 11:47:48,232
going to auto import it for me great and now we can just say my title


29852
11:47:48,232 --> 11:47:52,552
i mean tell me this isn't better this is for me 100 times better like if you


29853
11:47:52,552 --> 11:47:57,512
compare this with what we had before which was this i mean come on


29854
11:47:57,512 --> 11:48:02,800
it's a lot shorter a lot more is the same and i personally think it is it is


29855
11:48:02,800 --> 11:48:07,272
a better code so let me go back all right so let's leave


29856
11:48:07,272 --> 11:48:12,080
this here for now okay just my title let's leave it there and let's go to our


29857
11:48:12,080 --> 11:48:15,592
android application which is scrcpy in here and we can see that it's displaying


29858
11:48:15,592 --> 11:48:19,512
the correct title so if i do a hot restart as well it's still going to work


29859
11:48:19,512 --> 11:48:24,080
and display the string from our um


29860
11:48:24,080 --> 11:48:29,192
from our arb file now that we've done this


29861
11:48:29,192 --> 11:48:34,872
we actually have to talk about all right how are we going to go about


29862
11:48:34,872 --> 11:48:39,512
localizing things well this is the important part you see


29863
11:48:39,512 --> 11:48:44,480
localizing is in a lot of places quite a boring work in that you have to


29864
11:48:44,480 --> 11:48:48,720
literally go for instance if if you're i mean it is boring if you're doing it the


29865
11:48:48,720 --> 11:48:52,232
way we are doing it in this chapter and that you have to go and collect all


29866
11:48:52,232 --> 11:48:55,360
these strings excuse me and then you have to go and


29867
11:48:55,360 --> 11:48:59,120
place them in your arb files and then you have to also place them in the


29868
11:48:59,120 --> 11:49:02,400
swedish arab file and then you have to do the translation


29869
11:49:02,400 --> 11:49:05,360
etc so you have to create keys for all of these so


29870
11:49:05,360 --> 11:49:09,760
this is quite a boring work and it is not something that we're gonna do in


29871
11:49:09,760 --> 11:49:13,440
this chapter because i've already prepared all those for you so you don't


29872
11:49:13,440 --> 11:49:16,640
have to go and write them by your by yourself so


29873
11:49:16,640 --> 11:49:20,872
what i'm going to do here is i'm going to literally go and bring all those


29874
11:49:20,872 --> 11:49:25,120
strings that i've prepared for you and let me see if i can find them


29875
11:49:25,120 --> 11:49:28,480
somewhere in the en rb


29876
11:49:28,480 --> 11:49:32,640
okay i found them right here and what i'm going to do then is i'm


29877
11:49:32,640 --> 11:49:37,192
going to just bring all those strings and place them


29878
11:49:37,192 --> 11:49:42,800
in our intel en arabi file so here you see at the moment


29879
11:49:42,800 --> 11:49:47,360
we have my title and i'm just going to leave my title in there because we're


29880
11:49:47,360 --> 11:49:51,680
using it right now but we're going to have to delete it soon


29881
11:49:51,680 --> 11:49:56,640
and i'm going to paste all these strings that i've prepared for us okay so there


29882
11:49:56,640 --> 11:50:02,000
we go all of those are here now and there is a github repository for this uh


29883
11:50:02,000 --> 11:50:06,080
for this uh course of course and you can go after


29884
11:50:06,080 --> 11:50:08,232
this chapter is done you can go to that


29885
11:50:08,232 --> 11:50:11,512
github repository and retrieve all these strings so you don't have to type them


29886
11:50:11,512 --> 11:50:16,800
by hand either so it is nothing n nothing at all special


29887
11:50:16,800 --> 11:50:20,720
going on about this as you can see we have just a logout button that says log


29888
11:50:20,720 --> 11:50:26,232
out we have versus a cancel button we have the verify email which is something


29889
11:50:26,232 --> 11:50:29,592
that we're using in the verify email screen for instance we have the register


29890
11:50:29,592 --> 11:50:33,512
button we have the restart button let's see where the restart is used


29891
11:50:33,512 --> 11:50:38,000
it is i believe oh restart i believe it is inside the


29892
11:50:38,000 --> 11:50:42,160
verify email screen so if i created for instance um


29893
11:50:42,160 --> 11:50:46,720
if i say pixel to a b gmail foo bar about and i say


29894
11:50:46,720 --> 11:50:51,680
um oh sorry to register screen so let's say pixelity


29895
11:50:51,680 --> 11:50:56,720
gmail.com foo barbaz i'm gonna register this user and then we're gonna go into


29896
11:50:56,720 --> 11:51:00,960
this screen at the moment it says restart and that's this key restart okay


29897
11:51:00,960 --> 11:51:06,080
so i literally gone to through all our screens all our dialogues as well and


29898
11:51:06,080 --> 11:51:09,912
collected all those strings and placed them here in this


29899
11:51:09,912 --> 11:51:14,232
international internationalization enarb file and i've also done the same thing


29900
11:51:14,232 --> 11:51:18,960
for swedish so i'm going to go and bring those files i'm sorry bring those keys


29901
11:51:18,960 --> 11:51:23,440
in here so i've done the translation to swedish and i'm not my mother tongue


29902
11:51:23,440 --> 11:51:28,000
isn't swedish so but i've lived in sweden for a long time so um i can't


29903
11:51:28,000 --> 11:51:32,320
speak swedish a little bit actually enough i can speak enough and


29904
11:51:32,320 --> 11:51:35,680
i'm gonna paste those string in strings in here as you can see they're


29905
11:51:35,680 --> 11:51:39,760
completely in swedish okay so what i've done is literally we have the english


29906
11:51:39,760 --> 11:51:44,160
ones you can see here and we have the swedish ones so it's the same keys but


29907
11:51:44,160 --> 11:51:47,592
different values and again don't worry i understand if


29908
11:51:47,592 --> 11:51:50,640
you're watching this course you're like oh but how am i going to get all these


29909
11:51:50,640 --> 11:51:54,400
just please go to the github repository and you can extract these values you


29910
11:51:54,400 --> 11:51:57,592
don't have to type them by hand and


29911
11:51:57,592 --> 11:52:02,480
you should be good to go so now we have these in order for our


29912
11:52:02,480 --> 11:52:06,640
localizations to be generated in these dark tool files let's go to


29913
11:52:06,640 --> 11:52:09,680
flutter jan and have a look at this gen 10 l


29914
11:52:09,680 --> 11:52:15,120
gen l10n you can see those strings aren't here at the moment because only


29915
11:52:15,120 --> 11:52:20,720
my title should be here somewhere let's see if you can find it


29916
11:52:20,720 --> 11:52:25,360
let's see en locale should reload my title you see


29917
11:52:25,360 --> 11:52:30,320
nothing else is in here but if we do a hot restart all those strings


29918
11:52:30,320 --> 11:52:34,232
should get generated and then we should have them all here you can see login


29919
11:52:34,232 --> 11:52:37,592
verify email all these are provided right here okay


29920
11:52:37,592 --> 11:52:40,720
so that's that part so now we have all our


29921
11:52:40,720 --> 11:52:45,512
strings and we should just be able to do the coding part which is the fun part so


29922
11:52:45,512 --> 11:52:49,680
let's go ahead and take care of that i'm going to close all these files that are


29923
11:52:49,680 --> 11:52:54,232
there at the moment so we have a clean slate to work with


29924
11:52:54,232 --> 11:52:59,272
the first thing that we're going to do is to localize our um what is it called


29925
11:52:59,272 --> 11:53:03,760
cannot share empty note dialogue so let's go ahead in there and then i'm


29926
11:53:03,760 --> 11:53:08,080
going to say command shift p and go to cannot share empty now dialog


29927
11:53:08,080 --> 11:53:12,080
if you remember if you're if the user is trying to share a dial sharing note that


29928
11:53:12,080 --> 11:53:17,680
is its contents is empty so sharing in this case we have a key


29929
11:53:17,680 --> 11:53:21,360
for it so we're just going to say context.lock


29930
11:53:21,360 --> 11:53:24,720
and remember this lock is an extension that we've


29931
11:53:24,720 --> 11:53:28,160
created we don't have access to it unless we import it so i'm just going to


29932
11:53:28,160 --> 11:53:31,120
say command dot in visual studio code and it's going to also import that file


29933
11:53:31,120 --> 11:53:34,080
for me just right here as you can see


29934
11:53:34,080 --> 11:53:37,360
and now we have access to all our strings okay so in here we're just going


29935
11:53:37,360 --> 11:53:41,040
to say sharing which is a key i've created remember all


29936
11:53:41,040 --> 11:53:45,680
these keys are in the arb file and you cannot share an empty note so


29937
11:53:45,680 --> 11:53:51,512
we're going to say context.log cannot share empty node prompt


29938
11:53:51,512 --> 11:53:55,760
which is a key again i've called an okay we also have


29939
11:53:55,760 --> 11:53:58,160
okay right


29940
11:53:58,160 --> 11:54:02,400
okay so and now we've localized our show


29941
11:54:02,400 --> 11:54:07,272
cannot share empty notes dialog fantastic


29942
11:54:07,272 --> 11:54:11,440
so let's go ahead and localize our delete dialogue so i'm


29943
11:54:11,440 --> 11:54:14,960
going to say command shift p visual studio code on mac or control should be


29944
11:54:14,960 --> 11:54:19,912
usually code for windows and linux and this and let's say delete dialog


29945
11:54:19,912 --> 11:54:25,360
in here we have this um little uh title in here so let's just


29946
11:54:25,360 --> 11:54:29,680
say um context dot lock and remember we're in a new file we don't have access


29947
11:54:29,680 --> 11:54:34,000
to log let's auto import it and in here i'm just gonna say delete


29948
11:54:34,000 --> 11:54:38,000
that and prompt we're going to say context


29949
11:54:38,000 --> 11:54:44,400
unlock and delete nodes prompt cancel context dot log cancel


29950
11:54:44,400 --> 11:54:50,232
and here context.lock and was it okay or it's yes so let's just say yes all right


29951
11:54:50,232 --> 11:54:55,120
so that's the localization of this file as well i'm going to say command command


29952
11:54:55,120 --> 11:54:59,832
s or just hot restart the whole thing maybe it's better and i can see a crcy


29953
11:54:59,832 --> 11:55:03,120
crashed unfortunately and that's the problem i've had with this cr cpy for a


29954
11:55:03,120 --> 11:55:06,720
long time that's okay it's an open source software i'm just gonna say


29955
11:55:06,720 --> 11:55:10,160
select device and this and i'm gonna run the


29956
11:55:10,160 --> 11:55:13,272
application so we have it running in the background


29957
11:55:13,272 --> 11:55:17,832
fantastic so uh that's the delete dialog now i


29958
11:55:17,832 --> 11:55:20,232
have to capture at the bottom of the screen in case we have to go and


29959
11:55:20,232 --> 11:55:24,480
localize pretty much everything in our application up to this point and now the


29960
11:55:24,480 --> 11:55:29,512
next step is to localize the error dialog so let's say error dialog


29961
11:55:29,512 --> 11:55:34,160
and in here let's just you can see it says an error occurred and we've called


29962
11:55:34,160 --> 11:55:38,552
a generic error prompt in our arb file if you look here


29963
11:55:38,552 --> 11:55:42,720
generic error progresses and error occurred okay


29964
11:55:42,720 --> 11:55:48,552
so let's go ahead and use that here so i'm just going to say context.lock


29965
11:55:48,552 --> 11:55:52,640
auto import i don't have to explain that anymore and then we say generic error


29966
11:55:52,640 --> 11:55:56,872
prompt we have an ok as well so context lock


29967
11:55:56,872 --> 11:56:01,592
okay so that's done as well


29968
11:56:01,592 --> 11:56:06,480
then we have to go and localize our log out dialog so let's go to log out dialog


29969
11:56:06,480 --> 11:56:10,480
and here log out dialog


29970
11:56:10,480 --> 11:56:14,640
and we're going to do the same thing in here so let's just go ahead and say that


29971
11:56:14,640 --> 11:56:19,040
we're going to use the log out button in here and you see we have log out in a


29972
11:56:19,040 --> 11:56:23,592
few places like if you remember in the main application interface when you're


29973
11:56:23,592 --> 11:56:27,680
logged in with an actual user i'm going to bring in crcpy so you know what i'm


29974
11:56:27,680 --> 11:56:31,832
talking about if you look at this screen if i say


29975
11:56:31,832 --> 11:56:37,592
restart and if i log in with a user and i say van.mp gmail.com


29976
11:56:37,592 --> 11:56:40,552
fubar as


29977
11:56:40,552 --> 11:56:44,160
when you log in with an actual user then you have this little log out in here and


29978
11:56:44,160 --> 11:56:47,832
it says log out and at the same time when you tap on it then there's this


29979
11:56:47,832 --> 11:56:52,160
dialog that says logout so we have a choice in here either you go and define


29980
11:56:52,160 --> 11:56:57,272
two log out strings with different keys in your arb file or you just define one


29981
11:56:57,272 --> 11:57:01,120
and that's exactly what i've done so we're in here i'm just going to say


29982
11:57:01,120 --> 11:57:06,872
context.lock that's how to import and in here we're just going to say log


29983
11:57:06,872 --> 11:57:11,272
out button okay and it says log out button i understand


29984
11:57:11,272 --> 11:57:14,400
it's the title of a dialogue and we're calling the log out button you may just


29985
11:57:14,400 --> 11:57:18,720
go ahead and call this key log out if you want to i'll just call the log that


29986
11:57:18,720 --> 11:57:24,080
logout button remember these are just keys you can change them easily okay


29987
11:57:24,080 --> 11:57:29,592
now that's that's for our title and then for the content we're going to say


29988
11:57:29,592 --> 11:57:34,552
context log log out and dialog prompt and we have a


29989
11:57:34,552 --> 11:57:39,440
cancel button here so let's say let's just say context log cancel


29990
11:57:39,440 --> 11:57:43,592
and again we have another log out button you can see here so log out here log out


29991
11:57:43,592 --> 11:57:48,000
here and then log out in here so there are three places using the same thing or


29992
11:57:48,000 --> 11:57:52,640
same string context log and then we're going to say log out


29993
11:57:52,640 --> 11:57:55,832
button all right


29994
11:57:56,400 --> 11:58:00,400
so that's great so that's that part as well i'm just gonna do command s to hot


29995
11:58:00,400 --> 11:58:02,872
reload


29996
11:58:03,120 --> 11:58:05,760
the next thing that we have to do at the bottom of the screen in the case in the


29997
11:58:05,760 --> 11:58:10,320
caption we have to go and localize our password reset dialogue so i'm going to


29998
11:58:10,320 --> 11:58:15,512
remove log out dialog here and close the tab and let's go to password reset


29999
11:58:15,512 --> 11:58:20,480
email sends dialog and in here we have this password reset


30000
11:58:20,480 --> 11:58:25,272
and i'm going to go to my notes as well so let's go in here for the title and


30001
11:58:25,272 --> 11:58:29,360
say context block auto import


30002
11:58:29,360 --> 11:58:33,512
and we're going to call it password reset it's one of the keys i define and


30003
11:58:33,512 --> 11:58:38,160
in here we're going to say context lock password reset dialog prompt okay


30004
11:58:38,160 --> 11:58:42,552
and we have an ok button so you now by this point that we have an ok key as


30005
11:58:42,552 --> 11:58:46,800
well in our in our arb file


30006
11:58:46,800 --> 11:58:51,272
so now we've done basically we're done uh localizing the show password recent


30007
11:58:51,272 --> 11:58:57,040
dialogue uh uh show password reset sends dialogue


30008
11:58:57,120 --> 11:59:03,592
okay the next uh dialog is um forgot password so let's go to


30009
11:59:03,592 --> 11:59:06,480
that screen that sorry this is not a dialogue this


30010
11:59:06,480 --> 11:59:11,040
is actually a view so we're going to go to forgot password view


30011
11:59:11,040 --> 11:59:14,872
here i mean when it comes to views our job is a little bit more difficult


30012
11:59:14,872 --> 11:59:18,400
because up until this point we've pretty much everywhere


30013
11:59:18,400 --> 11:59:22,640
used constants like if you look at this is a constant string here's a constant


30014
11:59:22,640 --> 11:59:26,400
text here is constant so everywhere that


30015
11:59:26,400 --> 11:59:31,272
we're going to localize our strings and we were using const before we have to


30016
11:59:31,272 --> 11:59:35,512
remove that cons now because our localized properties inside arv funds


30017
11:59:35,512 --> 11:59:40,720
are unfortunately not defined as const and i don't really know the reasoning


30018
11:59:40,720 --> 11:59:43,272
behind that simply maybe because there are


30019
11:59:43,272 --> 11:59:47,272
getters and maybe getters can't be constant or there are some


30020
11:59:47,272 --> 11:59:53,192
other problems with the generation maybe that um the flutter team decided that


30021
11:59:53,192 --> 11:59:56,800
well these can't be constants but that's something that's the truth that we have


30022
11:59:56,800 --> 12:00:01,440
to live with at the moment so let's go ahead and find all our strings


30023
12:00:01,440 --> 12:00:06,232
and we're going to start localizing them one at a time before i got password view


30024
12:00:06,232 --> 12:00:11,360
so here in this show error dialog and i've called this key forgot password


30025
12:00:11,360 --> 12:00:15,912
view generic error so let's remove this string and just say


30026
12:00:15,912 --> 12:00:19,832
context lock let's auto import log


30027
12:00:19,832 --> 12:00:24,160
and we say forgot password


30028
12:00:25,272 --> 12:00:29,040
view generic error and i'm going to put a comma at the end so it's formatted


30029
12:00:29,040 --> 12:00:33,832
nicely so let's go to this forgot password title itself so i'm gonna


30030
12:00:33,832 --> 12:00:36,720
remove the const remember i just explained that so we're gonna say


30031
12:00:36,720 --> 12:00:41,040
context log and we're gonna say forgot password that's the key i've defined


30032
12:00:41,040 --> 12:00:45,360
and you can also see its description here and you can see it says forgot


30033
12:00:45,360 --> 12:00:49,040
password okay in english this message translates to


30034
12:00:49,040 --> 12:00:54,320
forgot password okay so this thing i've called it forgot


30035
12:00:54,320 --> 12:00:59,360
password view prompt so let's remove the const remove the string itself and we're


30036
12:00:59,360 --> 12:01:01,832
going to say


30037
12:01:01,912 --> 12:01:07,272
context log forgot password prompt forgot password view prompt and put a


30038
12:01:07,272 --> 12:01:10,552
comma at the end and let's have a look at the documentation for this as you can


30039
12:01:10,552 --> 12:01:13,360
see it says if you forgot your password simply enter your email and we'll send


30040
12:01:13,360 --> 12:01:17,592
you a password recent link okay so that's one thing and then in your


30041
12:01:17,592 --> 12:01:21,360
email address um it says input decoration your email


30042
12:01:21,360 --> 12:01:24,480
address because that's a forgot password screen let's go here and have a look at


30043
12:01:24,480 --> 12:01:29,832
it see how it looks like here i forgot my password so here's that


30044
12:01:29,832 --> 12:01:32,640
little input decoration so


30045
12:01:32,640 --> 12:01:37,040
i can see i've called it email text field placeholder so let's remove this


30046
12:01:37,040 --> 12:01:42,232
const and in here we're going to say context log email placeholder text field


30047
12:01:42,232 --> 12:01:45,360
okay let's go ahead and have a look at this


30048
12:01:45,360 --> 12:01:50,720
one so let's remove the const it says send me password recent link and i can


30049
12:01:50,720 --> 12:01:57,760
see that i've called that forgot password view send me link so


30050
12:01:57,760 --> 12:02:04,552
context log for god password forgot send me link here and put a comma at the


30051
12:02:04,552 --> 12:02:08,800
end so the dart formatter gets busy with formatting the code and


30052
12:02:08,800 --> 12:02:13,040
in here back to login view i can see that i've called it forgot


30053
12:02:13,040 --> 12:02:17,912
password view back to login so context


30054
12:02:17,912 --> 12:02:21,360
here context lock forgot


30055
12:02:21,360 --> 12:02:25,592
back okay so and this is this is a technique that you can also use like if


30056
12:02:25,592 --> 12:02:28,552
you want to get like a property like this that's quite long name and you want


30057
12:02:28,552 --> 12:02:33,040
to get the name immediately right you could just write a few keywords of that


30058
12:02:33,040 --> 12:02:37,272
name for instance i know that for god and back are quite unique names so if i


30059
12:02:37,272 --> 12:02:41,272
say forgot back it it's gonna show me that so


30060
12:02:41,272 --> 12:02:45,440
it has this like partial search kind of in its intelligence which is very very


30061
12:02:45,440 --> 12:02:49,360
useful the next thing that we have to do is to


30062
12:02:49,360 --> 12:02:53,360
go ahead and localize our login view so i'm going to close the screen forgot


30063
12:02:53,360 --> 12:02:57,680
password view and go to login view login view right here and we're going to


30064
12:02:57,680 --> 12:03:00,480
start at the bottom at the top of the screen and


30065
12:03:00,480 --> 12:03:04,480
we'll remove this unused import right there in login view


30066
12:03:04,480 --> 12:03:09,512
and let's go ahead and start by uh localizing our dialogs so the first one


30067
12:03:09,512 --> 12:03:13,040
is cannot find a user with the entered credentials and i've called it cannot


30068
12:03:13,040 --> 12:03:16,320
find user or login view cannot find user so i'm


30069
12:03:16,320 --> 12:03:21,272
just going to say context.log let's auto import log


30070
12:03:22,960 --> 12:03:27,440
or it was already imported okay that's great and let's just say it is called


30071
12:03:27,440 --> 12:03:31,832
login error cannot find user cannot find user okay


30072
12:03:31,832 --> 12:03:35,360
the next one i'm going to put some commas in here get dark formatter to do


30073
12:03:35,360 --> 12:03:38,800
its job correctly and i'm going to press command s to save the file and that's


30074
12:03:38,800 --> 12:03:42,552
going to format the file for me for wrong credentials i've called it login


30075
12:03:42,552 --> 12:03:48,480
error wrong credentials so context log and wrong credentials


30076
12:03:48,480 --> 12:03:52,640
next one is authentication error and we just call it login error author so


30077
12:03:52,640 --> 12:03:59,680
context lock author okay so that's that one as well now at the top of the login


30078
12:03:59,680 --> 12:04:02,640
login view we have this little text that says please log in your account in order


30079
12:04:02,640 --> 12:04:07,040
to interact with and create notes and this one i can see


30080
12:04:07,040 --> 12:04:11,832
i've just called a login view prompt but i wonder what


30081
12:04:11,832 --> 12:04:16,720
happened to our title as you can see we have this my title now that we're in the


30082
12:04:16,720 --> 12:04:20,080
login view it is a good time to actually go and get rid of that okay so i'm going


30083
12:04:20,080 --> 12:04:23,592
to open um intel


30084
12:04:23,592 --> 12:04:27,512
e and arb and i'm going to kill this basically my


30085
12:04:27,512 --> 12:04:33,760
title and i suggest that you also go to the swedish file which is intel sv and


30086
12:04:33,760 --> 12:04:37,760
kill this title as well okay so we've removed that and i'm gonna get rid of


30087
12:04:37,760 --> 12:04:41,592
that then i'm gonna hot restart so that the code generation


30088
12:04:41,592 --> 12:04:46,552
kicks in and as you can see in here my title isn't valid anymore and in this i


30089
12:04:46,552 --> 12:04:50,480
mean this title is called now login if you can look at the documentation in


30090
12:04:50,480 --> 12:04:54,552
here you can see in english it just says login fantastic


30091
12:04:54,552 --> 12:04:59,440
so let's remove this constant here from the prompt as well and we're just going


30092
12:04:59,440 --> 12:05:04,480
to say context lock and let's just say login prompt so i'm going to do a prompt


30093
12:05:04,480 --> 12:05:09,680
okay so for the enter email um


30094
12:05:09,680 --> 12:05:14,000
text field placeholder here enter your email here we're gonna remove the const


30095
12:05:14,000 --> 12:05:19,912
and let's just say context lock and we're gonna say email placeholder


30096
12:05:19,912 --> 12:05:22,960
okay and we also have an enter your password


30097
12:05:22,960 --> 12:05:26,800
here placeholder so let's remove the cons in here i'm just gonna say context


30098
12:05:26,800 --> 12:05:30,400
lock password


30099
12:05:30,400 --> 12:05:35,040
placeholder okay password field password text field placeholder that's the full


30100
12:05:35,040 --> 12:05:40,000
name and we have this uh login in here so


30101
12:05:40,000 --> 12:05:44,080
what we need to do is just to change this text as well so let's remove the


30102
12:05:44,080 --> 12:05:49,360
content here i'm just gonna say context dot walk


30103
12:05:49,360 --> 12:05:53,912
login and i forgot my password so i'm going to


30104
12:05:53,912 --> 12:05:59,832
say context lock and i believe it's called forgot password


30105
12:05:59,832 --> 12:06:04,640
login view forgot password okay it's not a constant anymore and put a


30106
12:06:04,640 --> 12:06:07,832
comma here it's just good practice to put comma at the end of your parameters


30107
12:06:07,832 --> 12:06:12,000
even if it's just one argument that you're passing to a function i mean my


30108
12:06:12,000 --> 12:06:15,680
reason this is a little bit of a side though but my reasoning is that any time


30109
12:06:15,680 --> 12:06:20,232
in the future anybody anybody wants to add new parameters to this text widget


30110
12:06:20,232 --> 12:06:23,680
then they will have to go and put that comma in there but if you as a


30111
12:06:23,680 --> 12:06:27,192
programmer who wrote this code in the beginning you put the comma in there


30112
12:06:27,192 --> 12:06:30,800
you're kind of like acknowledging the fact that hey i appreciate your time you


30113
12:06:30,800 --> 12:06:34,800
may be wanting to add now you may be wanting to add new parameters to this


30114
12:06:34,800 --> 12:06:39,360
and i've already prepared this for you so if you don't do this if i want to as


30115
12:06:39,360 --> 12:06:43,120
a programmer add new parameters in here i have to go and say oh well okay comma


30116
12:06:43,120 --> 12:06:46,872
commandments go here blah blah but if you'd added that already i'll


30117
12:06:46,872 --> 12:06:51,120
just say enter and then write my parameters


30118
12:06:53,832 --> 12:06:59,192
okay great so what we can do now is to scroll forward here and localize the


30119
12:06:59,192 --> 12:07:02,872
rest of these properties and it can't i can just see here that we have one


30120
12:07:02,872 --> 12:07:07,272
property left here which at the moment says not registered yet registered here


30121
12:07:07,272 --> 12:07:11,512
so let's go ahead and remove the const as we usually do then and say contacts


30122
12:07:11,512 --> 12:07:15,760
lock and i can see it's called not registered


30123
12:07:15,760 --> 12:07:19,760
so let's use that and a comma here so we prepared for the next programmer so to


30124
12:07:19,760 --> 12:07:23,272
say and we could just say now that we have


30125
12:07:23,272 --> 12:07:27,592
successfully localized our login view at the moment so we could just close this


30126
12:07:27,592 --> 12:07:31,912
tab the next step is to localize our


30127
12:07:31,912 --> 12:07:36,872
register view so the register view also has quite a few things that we have to


30128
12:07:36,872 --> 12:07:40,400
localize so let's go ahead and go to register view


30129
12:07:40,400 --> 12:07:44,400
and while we're here i mean this is what i'm again i


30130
12:07:44,400 --> 12:07:47,680
when i started this course i wanted you to become a software engineer even if


30131
12:07:47,680 --> 12:07:51,512
you were like a designer a ux or whatever or project


30132
12:07:51,512 --> 12:07:55,760
manager and you have to put yourself and your yourself in the shoes of a software


30133
12:07:55,760 --> 12:08:00,160
developer software developer you're always in like time constraint usually


30134
12:08:00,160 --> 12:08:03,512
our time concern to deliver but at the same time


30135
12:08:03,512 --> 12:08:08,480
when you stumble upon something that is quickly fixed please do it on


30136
12:08:08,480 --> 12:08:11,912
right there uh at that point because if you leave these things they're gonna


30137
12:08:11,912 --> 12:08:15,512
pile up and many small things that could be


30138
12:08:15,512 --> 12:08:19,592
corrected on the fly if you just leave them they're gonna become a big pile and


30139
12:08:19,592 --> 12:08:23,360
then you're not gonna be able to have enough time to fix them all so while


30140
12:08:23,360 --> 12:08:26,640
we're here we have two unused imports let's just remove them because that's


30141
12:08:26,640 --> 12:08:30,480
just good practice not to have unused imports


30142
12:08:30,480 --> 12:08:33,760
now let's go to our register view here we can see there's quite a lot of errors


30143
12:08:33,760 --> 12:08:37,912
there are four errors so the first thing i'm gonna do is to put commas at the end


30144
12:08:37,912 --> 12:08:40,552
of these right there and i'm going to press


30145
12:08:40,552 --> 12:08:44,720
command s on macintosh or control s on windows linux and that's going to do the


30146
12:08:44,720 --> 12:08:48,080
formatting the first one is called weak password so


30147
12:08:48,080 --> 12:08:53,192
let's just say context lock and also import this


30148
12:08:53,192 --> 12:08:58,400
and this message is register error weak password so weak password


30149
12:08:58,400 --> 12:09:02,800
like that the next one is called context log and


30150
12:09:02,800 --> 12:09:10,480
it's called an email already in use okay fail to register i've called register


30151
12:09:10,480 --> 12:09:12,720
error generic


30152
12:09:12,720 --> 12:09:16,400
so context lock generic


30153
12:09:16,400 --> 12:09:22,320
here it's register error generic and this invalid email is called context


30154
12:09:22,320 --> 12:09:27,440
lock and register invalid email okay so those are our errors we didn't have


30155
12:09:27,440 --> 12:09:30,960
to change anything with constant because these messages weren't constant when


30156
12:09:30,960 --> 12:09:34,872
they were passed into this constructor


30157
12:09:34,872 --> 12:09:39,512
then we have to fix this register's title and it's just called a register so


30158
12:09:39,512 --> 12:09:44,320
i'm going to remove the con const i'm going to say context log register


30159
12:09:44,320 --> 12:09:47,760
here and then we have enter your email and


30160
12:09:47,760 --> 12:09:52,720
password to see your notes and i've called that the register view prompt


30161
12:09:52,720 --> 12:09:58,960
so context lock register view prompt we have this input declaration again


30162
12:09:58,960 --> 12:10:03,272
we've done this before with the email and password so it's nothing surprising


30163
12:10:03,272 --> 12:10:08,320
so let's just say context block email placeholder and this one is


30164
12:10:08,320 --> 12:10:11,912
a password placeholder so let's remove the const


30165
12:10:11,912 --> 12:10:18,960
a context lock password placeholder all right so that's that


30166
12:10:18,960 --> 12:10:22,800
then we have the register button that we also have to


30167
12:10:22,800 --> 12:10:27,512
localize and let's remove the constant here and just say context


30168
12:10:27,512 --> 12:10:31,760
lock register and already registered is called already


30169
12:10:31,760 --> 12:10:35,912
registered so let's remove the constant const as well


30170
12:10:35,912 --> 12:10:39,592
and we say context lock already registered


30171
12:10:39,592 --> 12:10:43,040
all right and a comma at the end as well and we could do the same thing in here


30172
12:10:43,040 --> 12:10:46,552
with a comma at the end just to do the formatting right okay


30173
12:10:46,552 --> 12:10:51,440
so this seems to be ready we've now localized the register view


30174
12:10:51,440 --> 12:10:55,680
and the next step is to localize the verify email view so i'm going to close


30175
12:10:55,680 --> 12:11:00,000
this file and let's go ahead to verify email view


30176
12:11:00,000 --> 12:11:04,800
and again we have two unused imports let's remove those and let's go ahead to


30177
12:11:04,800 --> 12:11:08,960
verify email in here and we've just called it verify email so i'm removing


30178
12:11:08,960 --> 12:11:14,080
removing const saying context of lock and


30179
12:11:14,080 --> 12:11:18,960
let's say verify email okay and this is one thing that i've also fixed and you


30180
12:11:18,960 --> 12:11:23,120
could see that in how we've developed the application so far we have two


30181
12:11:23,120 --> 12:11:27,192
texts on top of the verify email view and they kind of look like this if i


30182
12:11:27,192 --> 12:11:30,160
bring it up let's go to


30183
12:11:30,160 --> 12:11:33,440
try to log in with a user who hasn't verified


30184
12:11:33,440 --> 12:11:36,160
his email


30185
12:11:36,872 --> 12:11:39,760
and you can see we end up here we've sent you an email verification please


30186
12:11:39,760 --> 12:11:43,512
open it to verify your account and this is like there are two text


30187
12:11:43,512 --> 12:11:48,640
fields but what i've done is i've made it one text prompt so let's just remove


30188
12:11:48,640 --> 12:11:54,640
the second text field and the way i've created this it's um if we go to our


30189
12:11:54,640 --> 12:11:59,680
intel en rb and if you look at the verify


30190
12:11:59,680 --> 12:12:03,192
prompt you can see i've written we've sent you an email verification please


30191
12:12:03,192 --> 12:12:06,232
open on your open it to verify your account and then


30192
12:12:06,232 --> 12:12:11,040
the rest of the string it just follows along so it's just one paragraph


30193
12:12:11,040 --> 12:12:15,192
and so that's why we're removing the second text in here


30194
12:12:15,192 --> 12:12:19,440
so and we're gonna remove this const i'm gonna remove the text


30195
12:12:19,440 --> 12:12:23,760
and then we're going to say context lock


30196
12:12:23,760 --> 12:12:28,400
verify prompt okay and a comma


30197
12:12:28,400 --> 12:12:32,720
we have this a little text button in here that says send email verification


30198
12:12:32,720 --> 12:12:37,440
and this looks like this let's change that as well and here we're


30199
12:12:37,440 --> 12:12:41,192
gonna say context lock


30200
12:12:41,192 --> 12:12:47,592
and it is called verify send email verification put a comma here


30201
12:12:47,592 --> 12:12:50,160
okay and for the restart button we have a


30202
12:12:50,160 --> 12:12:54,480
restart text so we're just going to say context log restart


30203
12:12:54,480 --> 12:12:59,360
and a comma at the end all right so that's the localization of this


30204
12:12:59,360 --> 12:13:04,080
screen as well so we could say we're pretty much done with the verify email


30205
12:13:04,080 --> 12:13:08,232
localization as well and while we're here to be honest with


30206
12:13:08,232 --> 12:13:12,232
you we could also clean up a little bit here in this verify email while we're


30207
12:13:12,232 --> 12:13:16,800
basically cleaning up the view itself you can see that this text doesn't have


30208
12:13:16,800 --> 12:13:21,832
any padding what we could do is to in this whole column actually


30209
12:13:21,832 --> 12:13:26,232
maybe pad this text so we're going to say this text is padded wrap it with a


30210
12:13:26,232 --> 12:13:29,832
padding okay and we could just say padding of 16. so


30211
12:13:29,832 --> 12:13:33,832
you can see now it is a little bit cleaner it's just a very little uh


30212
12:13:33,832 --> 12:13:37,832
effort to make the the ui look a lot cleaner okay


30213
12:13:37,832 --> 12:13:42,640
so we're done with that screen and what we need to do um we need to actually


30214
12:13:42,640 --> 12:13:46,720
localize the create update node view so let's go ahead to create update note


30215
12:13:46,720 --> 12:13:50,960
view another unused import let's remove that


30216
12:13:50,960 --> 12:13:54,320
and let's have a look at what exactly we have to


30217
12:13:54,320 --> 12:13:58,720
localize in here it's probably the the views title so if we scroll down to


30218
12:13:58,720 --> 12:14:02,480
where we're displaying the new note so if i log in with the user who has


30219
12:14:02,480 --> 12:14:06,640
verified his email address this user


30220
12:14:06,640 --> 12:14:09,272
our baz horrible password please don't use that


30221
12:14:09,272 --> 12:14:12,400
password at the moment you can see in here


30222
12:14:12,400 --> 12:14:17,040
we're basically saying um sorry new note here


30223
12:14:17,040 --> 12:14:21,912
we're saying new note and that's this thing so let's just change that and say


30224
12:14:21,912 --> 12:14:26,640
context dot lock auto import disk oops how to


30225
12:14:26,640 --> 12:14:30,640
import this and then we're just going to say note


30226
12:14:30,640 --> 12:14:33,440
okay and you can see in the documentation it


30227
12:14:33,440 --> 12:14:37,440
says it just in the english one says note so here we're not saying new notes


30228
12:14:37,440 --> 12:14:40,552
and the reason behind that is that up until this point our application is


30229
12:14:40,552 --> 12:14:45,360
being say new notes but what happens if you tap on an existing note


30230
12:14:45,360 --> 12:14:48,872
it still says new note so that's the reason i've decided to basically change


30231
12:14:48,872 --> 12:14:52,800
this text just to say note and put a comma in here to prepare for


30232
12:14:52,800 --> 12:14:56,320
the next person as well and what we're going to do and is also


30233
12:14:56,320 --> 12:15:01,440
to change this text decoration and which is here it says start typing your note


30234
12:15:01,440 --> 12:15:06,720
okay so remove the const and then in here we call it start typing


30235
12:15:06,720 --> 12:15:11,512
your note so context log start typing your note


30236
12:15:11,512 --> 12:15:15,360
all right great so we're going to save that as well


30237
12:15:15,360 --> 12:15:20,320
and we're done with that so now we're going to go to localizing our


30238
12:15:20,320 --> 12:15:24,080
notes view and this is i would say this is like the most exciting localization


30239
12:15:24,080 --> 12:15:28,232
part because we need to do some more coding it's not


30240
12:15:28,232 --> 12:15:33,120
as easy so for just two just to because remember in


30241
12:15:33,120 --> 12:15:37,360
the beginning of this chapter i mentioned that arb files are more than


30242
12:15:37,360 --> 12:15:41,680
just normal json in that they can have logic in them and at the moment if we go


30243
12:15:41,680 --> 12:15:46,960
back to our let's see if i bring scr cpy here at the


30244
12:15:46,960 --> 12:15:49,592
moment you can see it just says your notes


30245
12:15:49,592 --> 12:15:53,592
and i wanted to kind of demonstrate how arb files can be quite dynamic and can


30246
12:15:53,592 --> 12:15:57,272
have logic in them and i thought okay how do i demonstrate that to you and


30247
12:15:57,272 --> 12:16:00,232
what i decided to do is um


30248
12:16:00,232 --> 12:16:02,480
that if you


30249
12:16:02,480 --> 12:16:06,720
land in this page and you have no notes like in this case at the moment it says


30250
12:16:06,720 --> 12:16:12,160
your notes but what we're gonna do is to say okay we have some some key in our


30251
12:16:12,160 --> 12:16:17,272
localization file that is called your notes okay or sorry it's called notes


30252
12:16:17,272 --> 12:16:20,552
title is a key but this key is going to have


30253
12:16:20,552 --> 12:16:25,160
some value that has actual logic in it and this logic has to do with the plural


30254
12:16:25,160 --> 12:16:29,832
pluralization of this key if you have no notes


30255
12:16:29,832 --> 12:16:33,760
in english we're going to say no notes yet


30256
12:16:33,760 --> 12:16:38,800
if you have one note it's just gonna say one note


30257
12:16:38,800 --> 12:16:43,192
and if you have other number of notes such as two three


30258
12:16:43,192 --> 12:16:46,832
four then it's going to say x


30259
12:16:46,832 --> 12:16:51,192
notes for instance x being three notes four notes so it's just gonna say four


30260
12:16:51,192 --> 12:16:56,640
notes so no notes yet one note or x notes


30261
12:16:56,640 --> 12:17:02,000
so it has pluralization built into it and how we have to do that is to use


30262
12:17:02,000 --> 12:17:07,360
something in arb called placeholders and i'll show you how to do that right now


30263
12:17:07,360 --> 12:17:13,192
so let's go ahead first into our intel en


30264
12:17:13,192 --> 12:17:16,160
and at the bottom of the screen here what we're going to do is to first


30265
12:17:16,160 --> 12:17:18,552
create our key so that's the most important one okay so we're going to


30266
12:17:18,552 --> 12:17:21,512
call it notes title and in here we know that we're going to


30267
12:17:21,512 --> 12:17:27,912
have some value and let's see we have also a semi sorry a colon there okay


30268
12:17:27,912 --> 12:17:33,040
so we have notes title how do we put our logic in here


30269
12:17:33,040 --> 12:17:38,320
we just know that we need to have some sort of a


30270
12:17:38,320 --> 12:17:42,480
account you see your localization arb file doesn't know


30271
12:17:42,480 --> 12:17:46,320
anything about the count because it's the application that knows how many


30272
12:17:46,320 --> 12:17:50,000
nodes are available in the in the fire store database so


30273
12:17:50,000 --> 12:17:54,232
somehow we need to pass this count to our application


30274
12:17:54,232 --> 12:17:59,192
sorry to our arb file and you do that with parameterization so you go ahead


30275
12:17:59,192 --> 12:18:03,040
and create curly brackets in here and you would say okay hey i want to have a


30276
12:18:03,040 --> 12:18:08,552
parameter called count this count needs to be passed to this


30277
12:18:08,552 --> 12:18:12,000
um notes title in order for it to be able


30278
12:18:12,000 --> 12:18:15,592
to calculate exactly what it has to return so it's just you


30279
12:18:15,592 --> 12:18:20,800
saying that hey application if you want to get the notes title localized string


30280
12:18:20,800 --> 12:18:24,720
you have to pass a parameter to me call count okay


30281
12:18:24,720 --> 12:18:29,360
now what we're going to do is to go and call and basically and create discount


30282
12:18:29,360 --> 12:18:33,680
as a parameter so what you have to do is to go to the next line and just say adds


30283
12:18:33,680 --> 12:18:38,320
notes title this is how you tell arb that hey


30284
12:18:38,320 --> 12:18:43,512
this notes title key has some extra logic in it okay


30285
12:18:43,512 --> 12:18:46,872
then there is a key in here called placeholders


30286
12:18:46,872 --> 12:18:51,760
so you have to write placeholders okay and in here basically you say


30287
12:18:51,760 --> 12:18:57,760
placeholders and then every key is the name of the parameter itself so account


30288
12:18:57,760 --> 12:19:02,000
all right and then you basically start that and then what you have to do is you


30289
12:19:02,000 --> 12:19:04,960
have to define two keys in here one is a type


30290
12:19:04,960 --> 12:19:09,272
and the oops type and then the other one is an


30291
12:19:09,272 --> 12:19:11,680
example


30292
12:19:11,912 --> 12:19:16,080
like this so let's have a look at how this actually looks like


30293
12:19:16,080 --> 12:19:19,120
so basically what we're telling and


30294
12:19:19,120 --> 12:19:24,960
arb is that or dart in this case we're saying that hey this notes title key in


30295
12:19:24,960 --> 12:19:31,040
our arab has a parameter called count and in in here we're saying hey


30296
12:19:31,040 --> 12:19:34,160
these are the placeholders the name it's count and it's type now you have to


30297
12:19:34,160 --> 12:19:36,800
define a type you have to actually tell dart that hey


30298
12:19:36,800 --> 12:19:40,232
what data type is this using is it a string is it's an integer is it a


30299
12:19:40,232 --> 12:19:44,320
boolean what is it so in here you just say it's an integer and then as you'll


30300
12:19:44,320 --> 12:19:49,680
see soon the code generation then has a look at this and says okay i expect you


30301
12:19:49,680 --> 12:19:53,680
to send an integer and it's going to create a function called node's title


30302
12:19:53,680 --> 12:19:58,480
with account a parameter of type integer so this is very important it's the data


30303
12:19:58,480 --> 12:20:03,512
type of that count parameter okay and an example is just for you to know


30304
12:20:03,512 --> 12:20:07,592
okay how is this going to be used so an example is for instance three nodes okay


30305
12:20:07,592 --> 12:20:10,400
so we're just going to say here's an example of how the result of this thing


30306
12:20:10,400 --> 12:20:13,832
can look like right


30307
12:20:13,832 --> 12:20:20,080
so what we need to do now is to tell this um erb and dart code generator here


30308
12:20:20,080 --> 12:20:25,592
that this count actually has a logic about it being plural so it has


30309
12:20:25,592 --> 12:20:29,440
pluralization logic and the way to do that is you put a comma here and you say


30310
12:20:29,440 --> 12:20:33,592
plural and a comma after that because then you have to specify the logic for


30311
12:20:33,592 --> 12:20:36,640
that pluralization so and look


30312
12:20:36,640 --> 12:20:41,272
as a side note i completely understand that this is so weird i mean it is a


30313
12:20:41,272 --> 12:20:46,480
strange syntax i don't feel comfortable with it i sometimes use i sometimes look


30314
12:20:46,480 --> 12:20:49,120
at the documentation just to be a reminder of this


30315
12:20:49,120 --> 12:20:52,960
logic but the way i look at it is that it's the best thing we have let's not


30316
12:20:52,960 --> 12:20:57,272
hate on it let's just use it let's understand that it has power there are


30317
12:20:57,272 --> 12:21:02,400
reasons for it being the way it is and even though we are not 100


30318
12:21:02,400 --> 12:21:04,232
like in


30319
12:21:04,232 --> 12:21:07,192
in we weren't involved in the reasoning of this we don't even know what the


30320
12:21:07,192 --> 12:21:10,320
reasoning is but this is what the format is and this is what we have to basically


30321
12:21:10,320 --> 12:21:16,480
go with so the way to create this is for you to


30322
12:21:16,480 --> 12:21:19,120
uh have your logic in here so we're going


30323
12:21:19,120 --> 12:21:25,360
to say equal to zero and let's just do it like this and then


30324
12:21:25,360 --> 12:21:30,080
we're gonna say equal to one and then we're gonna say other


30325
12:21:30,080 --> 12:21:33,440
okay so this is how you create it so you're


30326
12:21:33,440 --> 12:21:37,592
saying that if the value of this count is zero


30327
12:21:37,592 --> 12:21:42,800
then we are going to do something here if the value of that count is one we're


30328
12:21:42,800 --> 12:21:46,800
gonna do something here and if it's anything else denoted by other we're


30329
12:21:46,800 --> 12:21:50,960
gonna do something in here so let's say when it's equal to zero we're gonna say


30330
12:21:50,960 --> 12:21:54,160
no notes yet okay so that's the string


30331
12:21:54,160 --> 12:21:58,872
we're gonna display if the count is zero if it's equal to one we're just going to


30332
12:21:58,872 --> 12:22:03,192
say one note and then the important thing is if we


30333
12:22:03,192 --> 12:22:07,360
end up in this situation if it's other then we want to say in this case we


30334
12:22:07,360 --> 12:22:11,592
actually want to get the count so if you pass the value of three we want to say


30335
12:22:11,592 --> 12:22:16,400
three notes so the way to get that count is with another curly bracket pair and


30336
12:22:16,400 --> 12:22:20,000
you say count and then you say notes okay


30337
12:22:20,000 --> 12:22:25,680
so that's how you create these things so um and i think we're actually missing a


30338
12:22:25,680 --> 12:22:31,120
curly bracket and that is the the curly bracket at the end yes


30339
12:22:31,120 --> 12:22:34,800
this curly bracket which belongs to like if we


30340
12:22:34,800 --> 12:22:40,232
if you look here if i remove these


30341
12:22:40,232 --> 12:22:43,832
the other has two curly brackets and


30342
12:22:43,832 --> 12:22:49,592
it's two curly brackets and here other one curly bracket there one curly


30343
12:22:49,592 --> 12:22:55,440
bracket here one ends here and one ends here so this last curly bracket here is


30344
12:22:55,440 --> 12:23:00,400
for the curly bracket that started here so again i i don't know what to say this


30345
12:23:00,400 --> 12:23:04,960
is the format the way it is we just have to live with it okay so we've created


30346
12:23:04,960 --> 12:23:08,640
the notes title and what we're going to do is to go ahead and do the same thing


30347
12:23:08,640 --> 12:23:12,480
but for swedish and i've already prepared that so i'm just going to go


30348
12:23:12,480 --> 12:23:16,232
ahead and grab that string from the swedish one that i've


30349
12:23:16,232 --> 12:23:20,552
already made so we don't have to type all that again


30350
12:23:20,552 --> 12:23:23,592
so let me go and grab that and bring it into


30351
12:23:23,592 --> 12:23:27,592
l10n sv which is for swedish and then bring


30352
12:23:27,592 --> 12:23:32,080
it at the bottom of the screen and paste it right there and with a


30353
12:23:32,080 --> 12:23:37,680
comma at the end of that line so you can see plural and it says no notes yet


30354
12:23:37,680 --> 12:23:42,080
for one it says one note and for other it just says


30355
12:23:42,080 --> 12:23:45,272
x notes all right


30356
12:23:45,272 --> 12:23:48,960
so i'm gonna save this i'm gonna save this and i'm gonna do a hot restart


30357
12:23:48,960 --> 12:23:52,800
let's just hope that scr cpy doesn't crash and it didn't


30358
12:23:52,800 --> 12:23:57,272
so what we're gonna do now is i was as it was planned we're gonna go to our


30359
12:23:57,272 --> 12:24:00,160
notes view and i'm gonna go to my notes as well


30360
12:24:00,160 --> 12:24:05,912
here let's go to notes view and have a look at our title in here


30361
12:24:05,912 --> 12:24:09,832
and you see we at the moment we're seeing your notes but what we really


30362
12:24:09,832 --> 12:24:14,080
want is to be able to display the number of notes that are


30363
12:24:14,080 --> 12:24:20,000
inside our um inside the nodes provider so if we have


30364
12:24:20,000 --> 12:24:23,120
a look at how we're reading the num and the notes you can see we're using the


30365
12:24:23,120 --> 12:24:27,192
note service and then we're saying all nodes and this is a stream


30366
12:24:27,192 --> 12:24:32,232
of an i triple of cloud nodes so we kind of wanted stream builder we want a


30367
12:24:32,232 --> 12:24:36,560
stream builder to create our title our app bar and we're going to exactly do


30368
12:24:36,560 --> 12:24:40,080
the same thing so we're going to have a stream builder that creates our app bar


30369
12:24:40,080 --> 12:24:42,000
okay but


30370
12:24:42,000 --> 12:24:46,800
or actually it's going to create the text but how do we get the count of


30371
12:24:46,800 --> 12:24:50,640
the notes and the way to do that is with a little handy extension that i'm going


30372
12:24:50,640 --> 12:24:56,232
to show you how to create so let's go in here in our notes view and


30373
12:24:56,232 --> 12:25:00,232
we're going to say extension and we're going to say count


30374
12:25:00,232 --> 12:25:04,720
and we want to create it on a stream so we're going to say any stream has to be


30375
12:25:04,720 --> 12:25:08,560
able to like any stream that has an iterable in it


30376
12:25:08,560 --> 12:25:12,952
that its values are iterable we want to create a


30377
12:25:12,952 --> 12:25:17,112
property called length for instance that it gets the length so


30378
12:25:17,112 --> 12:25:22,080
let's go in here and say okay this stream has some value but we want that


30379
12:25:22,080 --> 12:25:24,872
value to be iterable


30380
12:25:24,872 --> 12:25:30,640
okay so here we're basically saying that we're extending any stream that contains


30381
12:25:30,640 --> 12:25:35,440
uh i troubles as its value is gonna have this extension


30382
12:25:35,440 --> 12:25:38,872
then we're gonna say okay the value of this is gonna be an hint


30383
12:25:38,872 --> 12:25:43,280
and we're going to call it get links okay


30384
12:25:43,280 --> 12:25:46,000
and what this is basically going to do is to


30385
12:25:46,000 --> 12:25:51,440
say it maps the stream's values so let's say event


30386
12:25:51,440 --> 12:25:55,672
and in here we just say it returns the event's length so i understand this may


30387
12:25:55,672 --> 12:25:59,032
be a little bit cryptic for you to understand but um


30388
12:25:59,032 --> 12:26:04,640
you have to know that every stream is a generic function like if you sorry


30389
12:26:04,640 --> 12:26:08,800
it's a generic class you can see it's abstract class it's it has a parameter


30390
12:26:08,800 --> 12:26:13,840
called t which is it's generic type so what we're saying here we're saying that


30391
12:26:13,840 --> 12:26:18,872
okay we're creating an extension on any stream whose parameters or whose types


30392
12:26:18,872 --> 12:26:22,392
are and i treble and iterable has a length


30393
12:26:22,392 --> 12:26:26,488
and that means that we can then extend and extend any stream that has an i


30394
12:26:26,488 --> 12:26:30,800
treble and then we return its property called get length okay


30395
12:26:30,800 --> 12:26:37,200
so what we need to do now is to go ahead and inside the app bar in here


30396
12:26:37,200 --> 12:26:41,920
we have a const text when we need to remove this const first actually let's


30397
12:26:41,920 --> 12:26:46,232
keep it and i'm gonna see if we can wrap this with a stream


30398
12:26:46,232 --> 12:26:50,800
builder now okay so in here what we're gonna do is we're saying here's a stream


30399
12:26:50,800 --> 12:26:55,200
builder and we don't yet know what it is it's stream is


30400
12:26:55,200 --> 12:27:01,280
note service like this and we have all notes


30401
12:27:01,280 --> 12:27:08,160
and the owner user id is our user id okay as exactly as we have it here


30402
12:27:08,160 --> 12:27:11,672
okay but here the stream we don't actually want the notes we want the


30403
12:27:11,672 --> 12:27:14,952
length of notes so let's just say get length


30404
12:27:14,952 --> 12:27:21,032
where is it here get length okay and now we know that snapshot can then


30405
12:27:21,032 --> 12:27:26,872
return that uh value for us so if i press command s in here let's put a


30406
12:27:26,872 --> 12:27:31,032
comma here as well you can see nothing has changed it just


30407
12:27:31,032 --> 12:27:34,000
says your notes because we're still seeing your notes in here okay but what


30408
12:27:34,000 --> 12:27:39,032
we want is to grab the data out of our snapshot and this snapshot is an async


30409
12:27:39,032 --> 12:27:42,640
snapshot of an integer


30410
12:27:42,640 --> 12:27:47,920
let's see undefined class it's called async snapshots yeah just like that all


30411
12:27:47,920 --> 12:27:50,952
right so you either could tell a stream


30412
12:27:50,952 --> 12:27:54,160
builder of int and then your snapshot i believe


30413
12:27:54,160 --> 12:27:59,112
automatically will be as facing snatch out of it or you could


30414
12:27:59,112 --> 12:28:02,800
just say stream builder normal stream builder and an async snapshot of it so


30415
12:28:02,800 --> 12:28:06,312
you could type it in two different ways and i've just chosen to do it this way


30416
12:28:06,312 --> 12:28:09,920
all right what we need to do in here is to see as


30417
12:28:09,920 --> 12:28:14,640
soon as snapshot has data then we grab that data which means it has the length


30418
12:28:14,640 --> 12:28:19,752
built into it okay so we're going to say if snapshot has


30419
12:28:19,752 --> 12:28:24,160
data which means it has length otherwise we're just going to return


30420
12:28:24,160 --> 12:28:29,112
const of text nothing meaning that well well we don't have anything to display


30421
12:28:29,112 --> 12:28:32,640
at the top of the screen if this snapshot has no text all right


30422
12:28:32,640 --> 12:28:36,488
and then in here we're going to say it's going to say final note count


30423
12:28:36,488 --> 12:28:40,312
is snapchat date okay


30424
12:28:40,312 --> 12:28:44,640
or zero because it just says yeah i may not have data


30425
12:28:44,640 --> 12:28:47,440
just strange because you're actually saying has data but these two properties


30426
12:28:47,440 --> 12:28:50,000
are kind of like they're different from you i mean


30427
12:28:50,000 --> 12:28:53,032
they're not different but they're separated from each other just because


30428
12:28:53,032 --> 12:28:56,312
you're checking something has data doesn't mean necessarily that the next


30429
12:28:56,312 --> 12:29:00,000
line should understand that it has data the data type


30430
12:29:00,000 --> 12:29:04,800
of this data property is still final t so you can't change that okay and that's


30431
12:29:04,800 --> 12:29:08,392
why we have this um elvis sign kind of here


30432
12:29:08,392 --> 12:29:12,000
or a question mark question mark just to say if this doesn't have any value just


30433
12:29:12,000 --> 12:29:15,440
use zero okay now that we have node count we have to


30434
12:29:15,440 --> 12:29:18,872
get that context block


30435
12:29:18,872 --> 12:29:23,112
and we oh we don't have log let's import that


30436
12:29:23,112 --> 12:29:28,800
and remember the key that we used intel me and it's called notes title let's say


30437
12:29:28,800 --> 12:29:33,440
notes title and now all of a sudden you can see it is a function that takes in


30438
12:29:33,440 --> 12:29:38,160
an integer hello that's the count integer that we built into our arb and


30439
12:29:38,160 --> 12:29:42,080
it returns a string you can see here that's perfect because then we can pass


30440
12:29:42,080 --> 12:29:44,872
the note count in here okay


30441
12:29:44,872 --> 12:29:48,312
and this will be our text


30442
12:29:49,440 --> 12:29:52,560
and then we could just say return


30443
12:29:52,560 --> 12:29:56,392
a text widget with that text in it just like this


30444
12:29:56,392 --> 12:29:59,280
all right and then we can save this and as you can


30445
12:29:59,280 --> 12:30:03,360
see now as soon as i hit command s it says no notes yet


30446
12:30:03,360 --> 12:30:07,840
if i say and if i press the plus button here you can see i can type something in


30447
12:30:07,840 --> 12:30:12,080
here and i go back it says onenote if i create another one


30448
12:30:12,080 --> 12:30:16,000
on top of the screen it says two notes and that's it pretty much that's the


30449
12:30:16,000 --> 12:30:19,592
logic that we built into it so now it says onenote delete that note and it


30450
12:30:19,592 --> 12:30:24,312
says no notes yet perfect so that logic seems to be working fine for us


30451
12:30:24,312 --> 12:30:27,920
so that's that part and we also have another string at the bottom of this


30452
12:30:27,920 --> 12:30:33,512
screen which says log out and we have to change this as well so


30453
12:30:33,512 --> 12:30:39,360
we have to say context log out button


30454
12:30:39,360 --> 12:30:44,640
and this error is because we it says invalid constant but you're like oh but


30455
12:30:44,640 --> 12:30:48,800
this is not a constant well the problem is a little bit higher up in that when


30456
12:30:48,800 --> 12:30:52,080
we created this array of pop-up menu items we said that is a constant so


30457
12:30:52,080 --> 12:30:57,752
let's remove that okay so that's fantastic and that is i mean


30458
12:30:57,752 --> 12:31:01,360
now we're pretty much done in the entire application we don't have


30459
12:31:01,360 --> 12:31:05,440
anything any string that is hard coded and if you look at our problems


30460
12:31:05,440 --> 12:31:09,512
section there are no problems to fix for instance no unused imports so we've


30461
12:31:09,512 --> 12:31:13,280
taken care of those as well and just to test this what we could do is just to go


30462
12:31:13,280 --> 12:31:16,640
to the settings screen here and i'm going to bring swedish up


30463
12:31:16,640 --> 12:31:20,312
and let's go back to our application here and have a look and it says no


30464
12:31:20,312 --> 12:31:24,000
notes yet i'm going to press the plus button and i'm going to write some


30465
12:31:24,000 --> 12:31:27,200
string go back here it says one note


30466
12:31:27,200 --> 12:31:33,032
create a new one and it says two notes delete this one and all the you see all


30467
12:31:33,032 --> 12:31:37,280
the dialogues are now in swedish yes delete this note


30468
12:31:37,280 --> 12:31:41,360
yes let's try to log out now and it says log look at it


30469
12:31:41,360 --> 12:31:44,312
and it says look go to add a second by the way look at it are you sure you want


30470
12:31:44,312 --> 12:31:49,200
to log out yes log out and you can see all our strings here basically are also


30471
12:31:49,200 --> 12:31:52,000
um everything in this screen is also


30472
12:31:52,000 --> 12:31:57,360
localized so that's fantastic we basically did what we


30473
12:31:57,360 --> 12:32:02,392
were supposed to do and what we promised to do and that is great congratulations


30474
12:32:02,392 --> 12:32:06,080
if you then and do what we usually do at the end of every chapter we


30475
12:32:06,080 --> 12:32:10,160
commit our work so i'm gonna have a look at this and let's have a look at our


30476
12:32:10,160 --> 12:32:13,440
good status and have a look at our git log as well


30477
12:32:13,440 --> 12:32:17,032
i'm gonna change the screen layout a little bit sorry about that so you see


30478
12:32:17,032 --> 12:32:22,872
the code better remove scr cpy make this full screen


30479
12:32:22,872 --> 12:32:28,080
okay i'm gonna make this a lot larger so you see better


30480
12:32:28,080 --> 12:32:32,800
and have a look at git log again and you can see the last one we did git step


30481
12:32:32,800 --> 12:32:37,920
sorry step 31 so let's just say git add


30482
12:32:38,080 --> 12:32:42,080
all hit commits that 32


30483
12:32:42,080 --> 12:32:45,280
okay and get status


30484
12:32:45,280 --> 12:32:49,752
great and then we're also going to get push our changes


30485
12:32:49,752 --> 12:32:55,200
and let's tag it as well get tagged step 32


30486
12:32:55,200 --> 12:33:01,112
and if you look at our tag all our tags we can see 20 blah blah


30487
12:33:01,112 --> 12:33:06,080
let's see if we have 31 30 31 and 32 great and then we have to push our tags


30488
12:33:06,080 --> 12:33:10,392
as well fantastic so


30489
12:33:10,392 --> 12:33:13,672
um what we've done so far is i mean we've


30490
12:33:13,672 --> 12:33:17,440
done a lot of work and in this chapter even more we've localized our


30491
12:33:17,440 --> 12:33:20,160
application we looked at how localization works how code generation


30492
12:33:20,160 --> 12:33:23,200
for localization works and also we had a look at some


30493
12:33:23,200 --> 12:33:26,560
important extensions that you can create in order to make your localizations even


30494
12:33:26,560 --> 12:33:32,232
work better for flutter and we also had a look at adding some logic to our arb


30495
12:33:32,232 --> 12:33:36,312
file with pluralization so congratulations for going through this


30496
12:33:36,312 --> 12:33:38,560
chapter i believe personally that is very important to localize your


30497
12:33:38,560 --> 12:33:42,160
applications you're going to reach a lot more users if you localize your


30498
12:33:42,160 --> 12:33:47,200
applications correctly for your for like your target markets


30499
12:33:47,200 --> 12:33:51,280
and um it should help your users also feel more connected to your application


30500
12:33:51,280 --> 12:33:55,280
so um with that said i may actually then


30501
12:33:55,280 --> 12:34:00,640
see you in the next chapter hello everyone i can't say welcome to


30502
12:34:00,640 --> 12:34:04,560
this chapter now because this is not really a chapter on its own rather it is


30503
12:34:04,560 --> 12:34:08,952
the outro to this course and i don't know it's a kind of a bittersweet moment


30504
12:34:08,952 --> 12:34:13,672
because uh i've had so much fun putting this course together for you and now i


30505
12:34:13,672 --> 12:34:16,560
have to say goodbye and um


30506
12:34:16,560 --> 12:34:22,232
i don't want to get emotional but it is kind of sad uh as it is a great moment


30507
12:34:22,232 --> 12:34:25,112
of appreciation for you having gone through


30508
12:34:25,112 --> 12:34:29,512
this course and also i want to really extend like


30509
12:34:29,512 --> 12:34:32,560
and congratulate you for having gone through


30510
12:34:32,560 --> 12:34:37,592
this course and having learned as as you've learned because it's it's not


30511
12:34:37,592 --> 12:34:42,392
an easy thing to do to go through such a lengthy course but as i mentioned in the


30512
12:34:42,392 --> 12:34:46,080
beginning of this um course if you remember in the


30513
12:34:46,080 --> 12:34:51,440
introduction i mentioned that um a lot of videos basically jump over


30514
12:34:51,440 --> 12:34:54,872
quite a lot of information and i didn't want to do that in this course and


30515
12:34:54,872 --> 12:34:58,720
that's why this course has become as


30516
12:34:58,720 --> 12:35:03,112
lengthy and long as it has so


30517
12:35:03,112 --> 12:35:07,200
we've gone through a lot we've talked not only about


30518
12:35:07,200 --> 12:35:11,592
flutter development but we've also got our hands dirty with some


30519
12:35:11,592 --> 12:35:15,440
native ios and not really development but all actually going to xcode and


30520
12:35:15,440 --> 12:35:19,840
fiddling around with some properties in info plus an excel project we've also


30521
12:35:19,840 --> 12:35:26,232
had to open android studio to create our virtual devices we've worked with


30522
12:35:26,232 --> 12:35:31,512
figma and design tool we work with app store connect and google play store


30523
12:35:31,512 --> 12:35:36,312
console so we've gone through a lot so and i want


30524
12:35:36,312 --> 12:35:41,360
to congratulate you for sticking throughout all this with me and


30525
12:35:41,360 --> 12:35:47,592
um hopefully you've also learned a lot now while designing this course i also


30526
12:35:47,592 --> 12:35:51,440
knew that it has to be a living material it can't just be something that i drop


30527
12:35:51,440 --> 12:35:55,672
out on the internet so i'm very much planning to keep everything up to date


30528
12:35:55,672 --> 12:36:00,000
but there's lots and lots that i've already planned


30529
12:36:00,000 --> 12:36:04,560
more to be added to this course so i can't really go into details about


30530
12:36:04,560 --> 12:36:08,160
what they are i haven't finalized them but just as i did with this course i


30531
12:36:08,160 --> 12:36:12,080
need to plan them correctly write all my scripts to know what i'm going to talk


30532
12:36:12,080 --> 12:36:17,360
about and plan even the code that i need to write to tell you all about so


30533
12:36:17,360 --> 12:36:21,200
just know that there's a lot more to come


30534
12:36:21,200 --> 12:36:24,160
and you can just subscribe to my youtube


30535
12:36:24,160 --> 12:36:29,592
channel if you want to keep up to date talking about up to date um


30536
12:36:29,592 --> 12:36:33,440
things are moving all the time we've been working with firebase for instance


30537
12:36:33,440 --> 12:36:38,872
and firebase in itself is a moving product so it's an update like ever


30538
12:36:38,872 --> 12:36:42,720
it's just always updating so new versions come out new versions of


30539
12:36:42,720 --> 12:36:46,800
flutter might come up come out and new versions of dart might come out so even


30540
12:36:46,800 --> 12:36:49,920
figma for instance that we've been using a lot the interface might change


30541
12:36:49,920 --> 12:36:53,920
erratically so since i put so much effort into creating


30542
12:36:53,920 --> 12:36:58,232
this course i don't want it to die and i'm not going to let it die so it's


30543
12:36:58,232 --> 12:37:02,000
always going to be updating every now and then i will be putting


30544
12:37:02,000 --> 12:37:06,488
and not only updated content out like maybe i need to replace some old content


30545
12:37:06,488 --> 12:37:11,200
with some new but i'm also planning on adding more to it so


30546
12:37:11,200 --> 12:37:16,720
let's just say that this course is gonna hopefully always be up to date


30547
12:37:16,720 --> 12:37:21,032
as i mentioned in the introduction of this course i have zero dollars


30548
12:37:21,032 --> 12:37:25,752
in a budget for marketing this course and marketing is


30549
12:37:25,752 --> 12:37:30,488
probably the wrong word because i don't actually earn any money by having this


30550
12:37:30,488 --> 12:37:33,200
course the only thing i earn is joy of having


30551
12:37:33,200 --> 12:37:37,592
um like people like you going through this course and telling me on social


30552
12:37:37,592 --> 12:37:41,032
media perhaps about oh hey i did this course and i learned this and this and


30553
12:37:41,032 --> 12:37:43,440
this and i've released my first application so


30554
12:37:43,440 --> 12:37:47,592
since i have um no budget for that i would really appreciate it if you could


30555
12:37:47,592 --> 12:37:51,440
spread the word about it and tell like if someone asked okay i need a course


30556
12:37:51,440 --> 12:37:55,112
for learning flutter uh it would be lovely and i would really


30557
12:37:55,112 --> 12:37:59,032
appreciate it if you could just tell them about this course


30558
12:37:59,032 --> 12:38:02,952
and um i've mentioned this also in the introduction but i would really


30559
12:38:02,952 --> 12:38:08,952
appreciate it if you could follow me on social media twitter at van.np and also


30560
12:38:08,952 --> 12:38:12,232
on linkedin because i produce quite a lot of content


30561
12:38:12,232 --> 12:38:16,488
and as infographics for instance also adds videos related to flutter


30562
12:38:16,488 --> 12:38:22,952
javascript python django react native swift you name it so even typescript now


30563
12:38:22,952 --> 12:38:25,840
these days so uh i would really appreciate it if you


30564
12:38:25,840 --> 12:38:31,360
could follow me on social media and uh i've been told in some places


30565
12:38:31,360 --> 12:38:36,720
that um by some some of you that maybe some people can actually support


30566
12:38:36,720 --> 12:38:40,640
me and if you want to do that this is the way to do it just going to


30567
12:38:40,640 --> 12:38:45,512
buy me a coffee.com but remember it is completely


30568
12:38:45,512 --> 12:38:51,752
optional it's only if you can afford it so with all that said i don't want to


30569
12:38:51,752 --> 12:38:57,200
drag on this outro i just want to say again a huge congratulations to you for


30570
12:38:57,200 --> 12:39:02,872
going through this course with me and spending your life during these so many


30571
12:39:02,872 --> 12:39:08,640
hours together with me and i've had a blast recording all these videos and uh


30572
12:39:08,640 --> 12:39:14,312
i'm sure this is not a good buy but rather an official end basically to this


30573
12:39:14,312 --> 12:39:19,280
course and keep an eye out for more content and i'm sure we'll talk to each


30574
12:39:19,280 --> 12:39:23,232
other on social media
